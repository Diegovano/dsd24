
task6_fp_mult.elf:     file format elf32-littlenios2
task6_fp_mult.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001312c memsz 0x0001312c flags r-x
    LOAD off    0x0001414c vaddr 0x0081314c paddr 0x00814d44 align 2**12
         filesz 0x00001bf8 memsz 0x00001bf8 flags rw-
    LOAD off    0x0001693c vaddr 0x0081693c paddr 0x0081693c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012438  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000adc  00812670  00812670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf8  0081314c  00814d44  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0081693c  0081693c  0001693c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816a94  00816a94  00015d44  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00015d44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001280  00000000  00000000  00015d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00030cb1  00000000  00000000  00016ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ca08  00000000  00000000  00047ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001b1bc  00000000  00000000  000546b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000028a8  00000000  00000000  0006f870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004ff9  00000000  00000000  00072118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00022dd2  00000000  00000000  00077111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  00099ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d30  00000000  00000000  00099f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000a04ca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000a04cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a04d0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a04d1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a04d2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a04d6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a04da  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a04de  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a04e7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a04f0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000a04f9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000a050b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  000a0543  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ed55  00000000  00000000  000a55dc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
00812670 l    d  .rodata	00000000 .rodata
0081314c l    d  .rwdata	00000000 .rwdata
0081693c l    d  .bss	00000000 .bss
00816a94 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_fp_mult_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
008126dc l     O .rodata	00000080 npio2_hw
0081275c l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00812aa0 l     O .rodata	0000000c init_jk
00812a74 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804ec0 l     F .text	000000c0 __sbprintf
00812c04 l     O .rodata	00000010 blanks.1
00812bf4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008050e0 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806d4c l     F .text	00000008 __fp_lock
00806d60 l     F .text	00000008 __fp_unlock
00806d68 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081314c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812d18 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a3f0 l     F .text	000000f4 __sprint_r.part.0
0080b858 l     F .text	000000c0 __sbprintf
00812e4c l     O .rodata	00000010 blanks.1
00812e3c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
0080bb38 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fdc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fe24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ff3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00810028 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810190 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081027c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0081045c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814d34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
00810874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00810928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810a68 l     F .text	00000034 alt_dev_reg
00813c8c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810d60 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810f6c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008115b0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811ca8 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00811df8 l     F .text	0000003c alt_get_errno
00811e34 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00816968 g     O .bss	00000004 alt_instruction_exception_handler
00809af8 g     F .text	00000070 _mprec_log10
00809be4 g     F .text	00000060 __any_on
0080bf7c g     F .text	00000050 _isatty_r
00812d24 g     O .rodata	00000028 __mprec_tinytens
00810398 g     F .text	0000007c alt_main
00802c34 g     F .text	000000cc _puts_r
00816994 g     O .bss	00000100 alt_irq
0080bfcc g     F .text	0000005c _lseek_r
00814d44 g       *ABS*	00000000 __flash_rwdata_start
0080e7dc g     F .text	00000080 .hidden __eqdf2
00816a94 g       *ABS*	00000000 __alt_heap_start
00814cf8 g     O .rwdata	00000004 c_term1
0080c7c8 g     F .text	00000058 _kill_r
00802c00 g     F .text	00000034 printf
0080c1e4 g     F .text	0000006c _wcrtomb_r
0080c348 g     F .text	00000098 _signal_r
0080a2d4 g     F .text	0000005c __sseek
008070a8 g     F .text	00000010 __sinit
0080c088 g     F .text	00000148 __swbuf_r
00807b1c g     F .text	00000074 _setlocale_r
00806ed0 g     F .text	00000078 __sfmoreglue
00810438 g     F .text	00000024 __malloc_unlock
00808838 g     F .text	0000012c memmove
00807098 g     F .text	00000010 _cleanup
00808a54 g     F .text	000000a4 _Balloc
008028c4 g     F .text	00000070 .hidden __fixsfsi
00814cf4 g     O .rwdata	00000004 coeff3
0080e85c g     F .text	000000e8 .hidden __gtdf2
00812070 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
008108b0 g     F .text	00000078 times
00807afc g     F .text	00000008 __localeconv_l
008007a0 g     F .text	00000468 __ieee754_rem_pio2f
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080bf24 g     F .text	00000058 _fstat_r
0081694c g     O .bss	00000004 errno
0080a24c g     F .text	00000008 __seofread
00816954 g     O .bss	00000004 alt_argv
0081ccec g       *ABS*	00000000 _gp
00802430 g     F .text	00000494 .hidden __subsf3
0080ff1c g     F .text	00000020 getpid
00813b0c g     O .rwdata	00000180 alt_fd_list
00812094 g     F .text	00000090 alt_find_dev
00808738 g     F .text	00000100 memcpy
00806d54 g     F .text	0000000c _cleanup_r
0080fb60 g     F .text	000000b8 .hidden __floatsidf
00811d7c g     F .text	0000007c alt_io_redirect
0080e944 g     F .text	000000e8 .hidden __ltdf2
00812670 g       *ABS*	00000000 __DTOR_END__
00802d00 g     F .text	0000000c puts
00812374 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00809a54 g     F .text	000000a4 __ratio
00814d08 g     O .rwdata	00000004 c_term5
0080b840 g     F .text	00000018 __vfiprintf_internal
00811168 g     F .text	00000220 altera_avalon_jtag_uart_read
00802bd0 g     F .text	00000030 _printf_r
0080d4fc g     F .text	00000064 .hidden __udivsi3
0080ff78 g     F .text	000000b0 isatty
0080c3e0 g     F .text	000000c4 _raise_r
0080ba00 g     F .text	00000060 __assert_func
00812d74 g     O .rodata	000000c8 __mprec_tens
008122e4 g     F .text	00000090 alt_icache_flush
00816948 g     O .bss	00000004 __malloc_top_pad
0080c820 g     F .text	00000004 _getpid_r
00807b04 g     F .text	0000000c _localeconv_r
00808ec4 g     F .text	000000b0 __i2b
008074f4 g     F .text	000004c8 __sfvwrite_r
0080c4a4 g     F .text	000000bc __sigtramp_r
0080a1a8 g     F .text	00000050 _sbrk_r
0080c028 g     F .text	0000005c _read_r
00814d2c g     O .rwdata	00000004 alt_max_fd
0080bbf8 g     F .text	00000070 _fclose_r
00806cd0 g     F .text	0000007c fflush
00816944 g     O .bss	00000004 __malloc_max_sbrked_mem
00802a58 g     F .text	000000fc .hidden __extendsfdf2
0080d5bc g     F .text	000008f0 .hidden __adddf3
00801f08 g     F .text	00000070 .hidden __nesf2
008097e8 g     F .text	00000108 __b2d
0080ce44 g     F .text	000005c4 .hidden __umoddi3
008102b8 g     F .text	000000e0 lseek
00814d0c g     O .rwdata	00000004 _global_impure_ptr
00809c44 g     F .text	00000564 _realloc_r
00801788 g     F .text	00000110 __kernel_sinf
00816a94 g       *ABS*	00000000 __bss_end
00811bc0 g     F .text	000000e8 alt_iic_isr_register
0081076c g     F .text	00000108 alt_tick
0080c824 g     F .text	00000620 .hidden __udivdi3
0080be8c g     F .text	00000024 _fputwc_r
00812d4c g     O .rodata	00000028 __mprec_bigtens
00808c78 g     F .text	00000138 __s2b
0080c2d4 g     F .text	00000018 abort
0080fc18 g     F .text	00000090 .hidden __floatunsidf
00809508 g     F .text	00000058 __mcmp
008070c8 g     F .text	00000010 __fp_lock_all
00811b74 g     F .text	0000004c alt_ic_irq_enabled
008106c8 g     F .text	000000a4 alt_alarm_stop
00800704 g     F .text	0000009c cosf
00816964 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
00813ae4 g     O .rwdata	00000028 alt_dev_null
008117e4 g     F .text	0000004c alt_dcache_flush_all
00808db0 g     F .text	00000064 __hi0bits
0080fae0 g     F .text	00000080 .hidden __fixdfsi
00800c08 g     F .text	000001d0 __kernel_cosf
00814d44 g       *ABS*	00000000 __ram_rwdata_end
00814d24 g     O .rwdata	00000008 alt_dev_list
00810964 g     F .text	00000104 write
00801f78 g     F .text	000000b8 .hidden __gtsf2
0081314c g       *ABS*	00000000 __ram_rodata_end
0080fe60 g     F .text	000000bc fstat
00810064 g     F .text	0000012c kill
00814d04 g     O .rwdata	00000004 c_term4
0080e944 g     F .text	000000e8 .hidden __ledf2
00800408 g     F .text	00000120 theFunction
00809238 g     F .text	00000148 __pow5mult
0080a4fc g     F .text	00001344 ___vfiprintf_internal_r
0080d560 g     F .text	0000005c .hidden __umodsi3
00816a94 g       *ABS*	00000000 end
00810ca0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00812670 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081162c g     F .text	00000084 alt_avalon_timer_sc_init
00802b54 g     F .text	00000054 .hidden __clzsi2
00811388 g     F .text	00000228 altera_avalon_jtag_uart_write
008070b8 g     F .text	00000004 __sfp_lock_acquire
00808668 g     F .text	000000d0 memchr
00802da4 g     F .text	00002104 ___vfprintf_internal_r
00807200 g     F .text	000002f4 _free_r
00812fa0 g     O .rodata	00000180 _ctype_b
00807b90 g     F .text	0000000c __locale_mb_cur_max
00812554 g     F .text	0000011c __call_exitprocs
00814d14 g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
0081695c g     O .bss	00000004 _alt_tick_rate
00809380 g     F .text	00000188 __lshift
00816960 g     O .bss	00000004 _alt_nticks
0080c618 g     F .text	0000009c signal
00810498 g     F .text	00000108 read
00810ad8 g     F .text	00000064 alt_sys_init
00802934 g     F .text	00000124 .hidden __floatsisf
008124c8 g     F .text	0000008c __register_exitproc
00808f74 g     F .text	000002c4 __multiply
0081100c g     F .text	00000068 altera_avalon_jtag_uart_close
00802ba8 g     F .text	00000028 .hidden __mulsi3
0081314c g       *ABS*	00000000 __ram_rwdata_start
00812670 g       *ABS*	00000000 __ram_rodata_start
0081696c g     O .bss	00000028 __malloc_current_mallinfo
00801f08 g     F .text	00000070 .hidden __eqsf2
008098f0 g     F .text	00000164 __d2b
00814cfc g     O .rwdata	00000004 c_term2
00810b3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081222c g     F .text	000000b8 alt_get_fd
0080b9b0 g     F .text	00000050 _close_r
00800284 g     F .text	000000ac generateVector
00812450 g     F .text	00000078 memcmp
00810bfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816a94 g       *ABS*	00000000 __alt_stack_base
00810c4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804f80 g     F .text	00000160 __swsetup_r
0080deac g     F .text	00000930 .hidden __divdf3
00806f48 g     F .text	00000150 __sfp
00809b68 g     F .text	0000007c __copybits
008136dc g     O .rwdata	00000408 __malloc_av_
008070c4 g     F .text	00000004 __sinit_lock_release
0080ea2c g     F .text	000007ac .hidden __muldf3
0080a1f8 g     F .text	00000054 __sread
00812124 g     F .text	00000108 alt_find_file
0081186c g     F .text	000000a8 alt_dev_llist_insert
00810414 g     F .text	00000024 __malloc_lock
00810610 g     F .text	000000b8 sbrk
00801980 g     F .text	0000011c scalbnf
00806c70 g     F .text	00000060 _fflush_r
0080ba74 g     F .text	000000c4 _calloc_r
0081693c g       *ABS*	00000000 __bss_start
00808964 g     F .text	000000f0 memset
00800528 g     F .text	000001dc main
00816958 g     O .bss	00000004 alt_envp
00816940 g     O .bss	00000004 __malloc_max_total_mem
00810b9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c1d0 g     F .text	00000014 __swbuf
0080a330 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080bc68 g     F .text	0000006c fclose
00805300 g     F .text	00001748 _dtoa_r
00807e58 g     F .text	000007c0 _malloc_r
0080b924 g     F .text	00000030 __ascii_wctomb
00814d30 g     O .rwdata	00000004 alt_errno
0080bcd4 g     F .text	00000020 _fiprintf_r
0080c6b4 g     F .text	0000005c _init_signal
008079bc g     F .text	00000098 _fwalk
00808618 g     F .text	0000000c _mbtowc_r
0080d408 g     F .text	00000080 .hidden __divsi3
008070e8 g     F .text	00000118 _malloc_trim_r
00812670 g       *ABS*	00000000 __CTOR_END__
00802030 g     F .text	00000400 .hidden __mulsf3
0080a338 g     F .text	000000b8 strcmp
00812670 g       *ABS*	00000000 __flash_rodata_start
00812670 g       *ABS*	00000000 __DTOR_LIST__
0080e7dc g     F .text	00000080 .hidden __nedf2
00810a9c g     F .text	0000003c alt_irq_init
008105a0 g     F .text	00000070 alt_release_fd
00812aac g     O .rodata	00000100 .hidden __clz_tab
0081693c g     O .bss	00000004 _PathLocale
0081240c g     F .text	00000014 atexit
00801f78 g     F .text	000000b8 .hidden __gesf2
00800330 g     F .text	000000d8 sumVector
0080b954 g     F .text	0000005c _write_r
00814cf0 g     O .rwdata	00000004 coeff2
00807b9c g     F .text	00000074 setlocale
00814d10 g     O .rwdata	00000004 _impure_ptr
00816950 g     O .bss	00000004 alt_argc
00806a48 g     F .text	00000228 __sflush_r
00811978 g     F .text	00000064 _do_dtors
00814d00 g     O .rwdata	00000004 c_term3
00800020 g       .exceptions	00000000 alt_irq_entry
00808624 g     F .text	00000044 __ascii_mbtowc
0080978c g     F .text	0000005c __ulp
008070d8 g     F .text	00000010 __fp_unlock_all
00814d1c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807b10 g     F .text	0000000c localeconv
00807dc0 g     F .text	00000098 __swhatbuf_r
00811a10 g     F .text	00000050 alt_ic_isr_register
00814d44 g       *ABS*	00000000 _edata
00816a94 g       *ABS*	00000000 _end
0080bd28 g     F .text	00000164 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
00811074 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00811ae8 g     F .text	0000008c alt_ic_irq_disable
0080a254 g     F .text	00000080 __swrite
00814d18 g     O .rwdata	00000004 __malloc_trim_threshold
00812420 g     F .text	00000030 exit
0080bcf4 g     F .text	00000034 fiprintf
0080c084 g     F .text	00000004 _vfiprintf_r
00807a54 g     F .text	000000a8 _fwalk_reent
00809560 g     F .text	0000022c __mdiff
0080d488 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008070bc g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00812e9c g     O .rodata	00000101 _ctype_
0080fa8c g     F .text	00000054 .hidden __unorddf2
0080fdec g     F .text	00000038 _exit
00800dd8 g     F .text	000009b0 __kernel_rem_pio2f
008116b0 g     F .text	00000134 alt_alarm_start
00807c10 g     F .text	000001b0 __smakebuf_r
00802d0c g     F .text	00000098 strlen
0080c2ec g     F .text	0000005c _init_signal_r
00811f10 g     F .text	00000160 open
0080e85c g     F .text	000000e8 .hidden __gedf2
0080ba60 g     F .text	00000014 __assert
0080a4e4 g     F .text	00000018 __sprint_r
008119dc g     F .text	00000034 alt_icache_flush_all
00801898 g     F .text	000000e8 floorf
00814d40 g     O .rwdata	00000004 alt_priority_mask
00811a60 g     F .text	00000088 alt_ic_irq_enable
00804ea8 g     F .text	00000018 __vfprintf_internal
0080b918 g     F .text	0000000c _wctomb_r
0080f1d8 g     F .text	000008b4 .hidden __subdf3
00808e14 g     F .text	000000b0 __lo0bits
00814d38 g     O .rwdata	00000008 alt_alarm_list
00811914 g     F .text	00000064 _do_ctors
0080c710 g     F .text	000000b8 __sigtramp
0080c250 g     F .text	00000084 wcrtomb
00814cec g     O .rwdata	00000004 coeff1
0080fce4 g     F .text	000000dc close
00801a9c g     F .text	0000046c .hidden __addsf3
00813570 g     O .rwdata	0000016c __global_locale
008101f8 g     F .text	00000084 alt_load
0080beb0 g     F .text	00000074 fputwc
0080c560 g     F .text	000000b8 raise
008070c0 g     F .text	00000004 __sinit_lock_acquire
00808b1c g     F .text	0000015c __multadd
00808af8 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10da6517 	ldw	r3,27028(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	109a6617 	ldw	r2,27032(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a71f17 	ldw	r2,-25476(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a71f17 	ldw	r2,-25476(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6b33b14 	ori	gp,gp,52460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	109a4f14 	ori	r2,r2,26940

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18daa514 	ori	r3,r3,27284

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	08101f80 	call	8101f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	08103980 	call	810398 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <generateVector>:

#else

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
  800284:	defffb04 	addi	sp,sp,-20
  800288:	dfc00415 	stw	ra,16(sp)
  80028c:	df000315 	stw	fp,12(sp)
  800290:	dc000215 	stw	r16,8(sp)
  800294:	df000304 	addi	fp,sp,12
  800298:	e13ffd15 	stw	r4,-12(fp)
  int i;
  x[0] = 0;
  80029c:	e0bffd17 	ldw	r2,-12(fp)
  8002a0:	10000015 	stw	zero,0(r2)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  8002a4:	00800044 	movi	r2,1
  8002a8:	e0bffe15 	stw	r2,-8(fp)
  8002ac:	00001406 	br	800300 <generateVector+0x7c>
  8002b0:	e0fffe17 	ldw	r3,-8(fp)
  8002b4:	00900034 	movhi	r2,16384
  8002b8:	10bfffc4 	addi	r2,r2,-1
  8002bc:	1885883a 	add	r2,r3,r2
  8002c0:	100490ba 	slli	r2,r2,2
  8002c4:	e0fffd17 	ldw	r3,-12(fp)
  8002c8:	1885883a 	add	r2,r3,r2
  8002cc:	11000017 	ldw	r4,0(r2)
  8002d0:	e0bffe17 	ldw	r2,-8(fp)
  8002d4:	100490ba 	slli	r2,r2,2
  8002d8:	e0fffd17 	ldw	r3,-12(fp)
  8002dc:	18a1883a 	add	r16,r3,r2
  8002e0:	014ea034 	movhi	r5,14976
  8002e4:	0801a9c0 	call	801a9c <__addsf3>
  8002e8:	1007883a 	mov	r3,r2
  8002ec:	1805883a 	mov	r2,r3
  8002f0:	80800015 	stw	r2,0(r16)
  8002f4:	e0bffe17 	ldw	r2,-8(fp)
  8002f8:	10800044 	addi	r2,r2,1
  8002fc:	e0bffe15 	stw	r2,-8(fp)
  800300:	e0fffe17 	ldw	r3,-8(fp)
  800304:	00800134 	movhi	r2,4
  800308:	10bf0004 	addi	r2,r2,-1024
  80030c:	10ffe80e 	bge	r2,r3,8002b0 <generateVector+0x2c>
}
  800310:	0001883a 	nop
  800314:	0001883a 	nop
  800318:	e6ffff04 	addi	sp,fp,-4
  80031c:	dfc00217 	ldw	ra,8(sp)
  800320:	df000117 	ldw	fp,4(sp)
  800324:	dc000017 	ldw	r16,0(sp)
  800328:	dec00304 	addi	sp,sp,12
  80032c:	f800283a 	ret

00800330 <sumVector>:

#endif

float sumVector(float x[0], int M)
{
  800330:	defff904 	addi	sp,sp,-28
  800334:	dfc00615 	stw	ra,24(sp)
  800338:	df000515 	stw	fp,20(sp)
  80033c:	dc000415 	stw	r16,16(sp)
  800340:	df000504 	addi	fp,sp,20
  800344:	e13ffc15 	stw	r4,-16(fp)
  800348:	e17ffb15 	stw	r5,-20(fp)
  float sum = 0;
  80034c:	e03ffe15 	stw	zero,-8(fp)
  int i = 0;
  800350:	e03ffd15 	stw	zero,-12(fp)
  for (; i < M; i++) 
  800354:	00002006 	br	8003d8 <sumVector+0xa8>
  {
    sum += (x[i] + x[i] * x[i]);
  800358:	e0bffd17 	ldw	r2,-12(fp)
  80035c:	100490ba 	slli	r2,r2,2
  800360:	e0fffc17 	ldw	r3,-16(fp)
  800364:	1885883a 	add	r2,r3,r2
  800368:	14000017 	ldw	r16,0(r2)
  80036c:	e0bffd17 	ldw	r2,-12(fp)
  800370:	100490ba 	slli	r2,r2,2
  800374:	e0fffc17 	ldw	r3,-16(fp)
  800378:	1885883a 	add	r2,r3,r2
  80037c:	11000017 	ldw	r4,0(r2)
  800380:	e0bffd17 	ldw	r2,-12(fp)
  800384:	100490ba 	slli	r2,r2,2
  800388:	e0fffc17 	ldw	r3,-16(fp)
  80038c:	1885883a 	add	r2,r3,r2
  800390:	10c00017 	ldw	r3,0(r2)
  800394:	180b883a 	mov	r5,r3
  800398:	08020300 	call	802030 <__mulsf3>
  80039c:	1007883a 	mov	r3,r2
  8003a0:	1805883a 	mov	r2,r3
  8003a4:	100b883a 	mov	r5,r2
  8003a8:	8009883a 	mov	r4,r16
  8003ac:	0801a9c0 	call	801a9c <__addsf3>
  8003b0:	1007883a 	mov	r3,r2
  8003b4:	1805883a 	mov	r2,r3
  8003b8:	100b883a 	mov	r5,r2
  8003bc:	e13ffe17 	ldw	r4,-8(fp)
  8003c0:	0801a9c0 	call	801a9c <__addsf3>
  8003c4:	1007883a 	mov	r3,r2
  8003c8:	e0fffe15 	stw	r3,-8(fp)
  for (; i < M; i++) 
  8003cc:	e0bffd17 	ldw	r2,-12(fp)
  8003d0:	10800044 	addi	r2,r2,1
  8003d4:	e0bffd15 	stw	r2,-12(fp)
  8003d8:	e0fffd17 	ldw	r3,-12(fp)
  8003dc:	e0bffb17 	ldw	r2,-20(fp)
  8003e0:	18bfdd16 	blt	r3,r2,800358 <sumVector+0x28>
  }

  return sum;
  8003e4:	e0bffe17 	ldw	r2,-8(fp)
  8003e8:	1007883a 	mov	r3,r2
}
  8003ec:	1805883a 	mov	r2,r3
  8003f0:	e6ffff04 	addi	sp,fp,-4
  8003f4:	dfc00217 	ldw	ra,8(sp)
  8003f8:	df000117 	ldw	fp,4(sp)
  8003fc:	dc000017 	ldw	r16,0(sp)
  800400:	dec00304 	addi	sp,sp,12
  800404:	f800283a 	ret

00800408 <theFunction>:
      c_term2 = 1 / 24.0f, 
      c_term3 = - 1 / 720.0f,
      c_term4 = 1 / 40320.0f,
      c_term5 = - 1 / 3628800.0f;

float theFunction(float x[0], int M) {
  800408:	defff504 	addi	sp,sp,-44
  80040c:	dfc00a15 	stw	ra,40(sp)
  800410:	df000915 	stw	fp,36(sp)
  800414:	df000904 	addi	fp,sp,36
  800418:	e13ff815 	stw	r4,-32(fp)
  80041c:	e17ff715 	stw	r5,-36(fp)
  float sum = 0;
  800420:	e03fff15 	stw	zero,-4(fp)
  int i = 0;
  800424:	e03ffe15 	stw	zero,-8(fp)
  for (; i < M; i++) 
  800428:	00003406 	br	8004fc <theFunction+0xf4>
  {
    const float cos_term = FP_MUL(FP_ADD(x[i], -128.0f), coeff2);
  80042c:	e0bffe17 	ldw	r2,-8(fp)
  800430:	100490ba 	slli	r2,r2,2
  800434:	e0fff817 	ldw	r3,-32(fp)
  800438:	1887883a 	add	r3,r3,r2
  80043c:	18800017 	ldw	r2,0(r3)
  800440:	00f0c034 	movhi	r3,49920
  800444:	10c5c072 	custom	1,r2,r2,r3
  800448:	00cf0034 	movhi	r3,15360
  80044c:	10c5c032 	custom	0,r2,r2,r3
  800450:	e0bffd15 	stw	r2,-12(fp)
    const float cos_2 = FP_MUL(cos_term, cos_term);
  800454:	e0bffd17 	ldw	r2,-12(fp)
  800458:	e0fffd17 	ldw	r3,-12(fp)
  80045c:	10c5c032 	custom	0,r2,r2,r3
  800460:	e0bffc15 	stw	r2,-16(fp)
    const float cos_4 = FP_MUL(cos_2, cos_2);
  800464:	e0bffc17 	ldw	r2,-16(fp)
  800468:	e0fffc17 	ldw	r3,-16(fp)
  80046c:	10c5c032 	custom	0,r2,r2,r3
  800470:	e0bffb15 	stw	r2,-20(fp)
    const float cos_6 = FP_MUL(cos_4, cos_2);
  800474:	e0bffb17 	ldw	r2,-20(fp)
  800478:	e0fffc17 	ldw	r3,-16(fp)
  80047c:	10c5c032 	custom	0,r2,r2,r3
  800480:	e0bffa15 	stw	r2,-24(fp)
    // const float cos_8 = FP_MUL(cos_4, cos_4);
    // const float cos_10 = FP_MUL(cos_8, cos_2);
    // const float cos_12 = FP_MUL(cos_6, cos_6);

    const float cosine = cosf(cos_term);
  800484:	e13ffd17 	ldw	r4,-12(fp)
  800488:	08007040 	call	800704 <cosf>
  80048c:	e0bff915 	stw	r2,-28(fp)
    //     // , FP_ADD(FP_MUL(cos_8, c_term4), FP_MUL(cos_10, c_term5)))
    //     ;



    sum = FP_ADD(sum, FP_ADD(FP_MUL(coeff1,x[i]), FP_MUL(FP_MUL(x[i],x[i]),cosine)));
  800490:	008fc034 	movhi	r2,16128
  800494:	e0fffe17 	ldw	r3,-8(fp)
  800498:	180690ba 	slli	r3,r3,2
  80049c:	e13ff817 	ldw	r4,-32(fp)
  8004a0:	20c9883a 	add	r4,r4,r3
  8004a4:	20c00017 	ldw	r3,0(r4)
  8004a8:	10c5c032 	custom	0,r2,r2,r3
  8004ac:	e0fffe17 	ldw	r3,-8(fp)
  8004b0:	180690ba 	slli	r3,r3,2
  8004b4:	e13ff817 	ldw	r4,-32(fp)
  8004b8:	20c9883a 	add	r4,r4,r3
  8004bc:	20c00017 	ldw	r3,0(r4)
  8004c0:	e13ffe17 	ldw	r4,-8(fp)
  8004c4:	200890ba 	slli	r4,r4,2
  8004c8:	e17ff817 	ldw	r5,-32(fp)
  8004cc:	290b883a 	add	r5,r5,r4
  8004d0:	29000017 	ldw	r4,0(r5)
  8004d4:	1907c032 	custom	0,r3,r3,r4
  8004d8:	e13ff917 	ldw	r4,-28(fp)
  8004dc:	1907c032 	custom	0,r3,r3,r4
  8004e0:	10c7c072 	custom	1,r3,r2,r3
  8004e4:	e0bfff17 	ldw	r2,-4(fp)
  8004e8:	10c5c072 	custom	1,r2,r2,r3
  8004ec:	e0bfff15 	stw	r2,-4(fp)
  for (; i < M; i++) 
  8004f0:	e0bffe17 	ldw	r2,-8(fp)
  8004f4:	10800044 	addi	r2,r2,1
  8004f8:	e0bffe15 	stw	r2,-8(fp)
  8004fc:	e0fffe17 	ldw	r3,-8(fp)
  800500:	e0bff717 	ldw	r2,-36(fp)
  800504:	18bfc916 	blt	r3,r2,80042c <theFunction+0x24>
  }

  return sum;
  800508:	e0bfff17 	ldw	r2,-4(fp)
  80050c:	1007883a 	mov	r3,r2
}
  800510:	1805883a 	mov	r2,r3
  800514:	e037883a 	mov	sp,fp
  800518:	dfc00117 	ldw	ra,4(sp)
  80051c:	df000017 	ldw	fp,0(sp)
  800520:	dec00204 	addi	sp,sp,8
  800524:	f800283a 	ret

00800528 <main>:

int main(int argc, char* argv[])
{
  800528:	defffe04 	addi	sp,sp,-8
  80052c:	dfc00115 	stw	ra,4(sp)
  800530:	df000015 	stw	fp,0(sp)
  800534:	d839883a 	mov	fp,sp
  800538:	023ffc34 	movhi	r8,65520
  80053c:	4203f604 	addi	r8,r8,4056
  800540:	da37883a 	add	sp,sp,r8
  800544:	00bffc34 	movhi	r2,65520
  800548:	1083f704 	addi	r2,r2,4060
  80054c:	e085883a 	add	r2,fp,r2
  800550:	11000015 	stw	r4,0(r2)
  800554:	00bffc34 	movhi	r2,65520
  800558:	1083f604 	addi	r2,r2,4056
  80055c:	e085883a 	add	r2,fp,r2
  800560:	11400015 	stw	r5,0(r2)
  const int numIterations = NUM_CASES;
  800564:	00800044 	movi	r2,1
  800568:	e0bffe15 	stw	r2,-8(fp)
  printf("Task 3!\n");
  80056c:	01002074 	movhi	r4,129
  800570:	21099c04 	addi	r4,r4,9840
  800574:	0802d000 	call	802d00 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800578:	d0a71c17 	ldw	r2,-25488(gp)
  printf("Ticks per second: %ld\n", alt_ticks_per_second());
  80057c:	100b883a 	mov	r5,r2
  800580:	01002074 	movhi	r4,129
  800584:	21099e04 	addi	r4,r4,9848
  800588:	0802c000 	call	802c00 <printf>
  printf("Running %d tests\n", numIterations);
  80058c:	e17ffe17 	ldw	r5,-8(fp)
  800590:	01002074 	movhi	r4,129
  800594:	2109a404 	addi	r4,r4,9872
  800598:	0802c000 	call	802c00 <printf>


  // Returned result
  volatile float y;

  generateVector(x);
  80059c:	00bffc34 	movhi	r2,65520
  8005a0:	1083fc04 	addi	r2,r2,4080
  8005a4:	e085883a 	add	r2,fp,r2
  8005a8:	1009883a 	mov	r4,r2
  8005ac:	08002840 	call	800284 <generateVector>

  volatile clock_t exec_t1, exec_t2;

  // const int numIterations = 1 << TEST_REPEAT;

  exec_t1 = times(NULL);
  8005b0:	0009883a 	mov	r4,zero
  8005b4:	08108b00 	call	8108b0 <times>
  8005b8:	1007883a 	mov	r3,r2
  8005bc:	00bffc34 	movhi	r2,65520
  8005c0:	1083fa04 	addi	r2,r2,4072
  8005c4:	e085883a 	add	r2,fp,r2
  8005c8:	10c00015 	stw	r3,0(r2)

  int y1 = 0;
  8005cc:	e03ffd15 	stw	zero,-12(fp)

  for (int i = 0; i < numIterations; i++) {
  8005d0:	e03fff15 	stw	zero,-4(fp)
  8005d4:	00000f06 	br	800614 <main+0xec>
    y = theFunction(x, N);
  8005d8:	00bffc34 	movhi	r2,65520
  8005dc:	1083fc04 	addi	r2,r2,4080
  8005e0:	e085883a 	add	r2,fp,r2
  8005e4:	01400134 	movhi	r5,4
  8005e8:	297f0044 	addi	r5,r5,-1023
  8005ec:	1009883a 	mov	r4,r2
  8005f0:	08004080 	call	800408 <theFunction>
  8005f4:	1007883a 	mov	r3,r2
  8005f8:	00bffc34 	movhi	r2,65520
  8005fc:	1083fb04 	addi	r2,r2,4076
  800600:	e085883a 	add	r2,fp,r2
  800604:	10c00015 	stw	r3,0(r2)
  for (int i = 0; i < numIterations; i++) {
  800608:	e0bfff17 	ldw	r2,-4(fp)
  80060c:	10800044 	addi	r2,r2,1
  800610:	e0bfff15 	stw	r2,-4(fp)
  800614:	e0ffff17 	ldw	r3,-4(fp)
  800618:	e0bffe17 	ldw	r2,-8(fp)
  80061c:	18bfee16 	blt	r3,r2,8005d8 <main+0xb0>
  }

  // till here
  exec_t2 = times(NULL);
  800620:	0009883a 	mov	r4,zero
  800624:	08108b00 	call	8108b0 <times>
  800628:	1007883a 	mov	r3,r2
  80062c:	00bffc34 	movhi	r2,65520
  800630:	1083f904 	addi	r2,r2,4068
  800634:	e085883a 	add	r2,fp,r2
  800638:	10c00015 	stw	r3,0(r2)

  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  80063c:	00bffc34 	movhi	r2,65520
  800640:	1083f904 	addi	r2,r2,4068
  800644:	e085883a 	add	r2,fp,r2
  800648:	10c00017 	ldw	r3,0(r2)
  80064c:	00bffc34 	movhi	r2,65520
  800650:	1083fa04 	addi	r2,r2,4072
  800654:	e085883a 	add	r2,fp,r2
  800658:	10800017 	ldw	r2,0(r2)
  80065c:	1885c83a 	sub	r2,r3,r2
  800660:	1007883a 	mov	r3,r2
  800664:	00bffc34 	movhi	r2,65520
  800668:	1083f804 	addi	r2,r2,4064
  80066c:	e085883a 	add	r2,fp,r2
  800670:	10c00015 	stw	r3,0(r2)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  800674:	00bffc34 	movhi	r2,65520
  800678:	1083f804 	addi	r2,r2,4064
  80067c:	e085883a 	add	r2,fp,r2
  800680:	10800017 	ldw	r2,0(r2)
  800684:	100b883a 	mov	r5,r2
  800688:	01002074 	movhi	r4,129
  80068c:	2109a904 	addi	r4,r4,9892
  800690:	0802c000 	call	802c00 <printf>
  printf("RESULT: %f, %x\n", y, *(int*)(&y));
  800694:	00bffc34 	movhi	r2,65520
  800698:	1083fb04 	addi	r2,r2,4076
  80069c:	e085883a 	add	r2,fp,r2
  8006a0:	10c00017 	ldw	r3,0(r2)
  8006a4:	1809883a 	mov	r4,r3
  8006a8:	0802a580 	call	802a58 <__extendsfdf2>
  8006ac:	1011883a 	mov	r8,r2
  8006b0:	1813883a 	mov	r9,r3
  8006b4:	00bffc34 	movhi	r2,65520
  8006b8:	1083fb04 	addi	r2,r2,4076
  8006bc:	e085883a 	add	r2,fp,r2
  8006c0:	10800017 	ldw	r2,0(r2)
  8006c4:	100f883a 	mov	r7,r2
  8006c8:	400b883a 	mov	r5,r8
  8006cc:	480d883a 	mov	r6,r9
  8006d0:	01002074 	movhi	r4,129
  8006d4:	2109ae04 	addi	r4,r4,9912
  8006d8:	0802c000 	call	802c00 <printf>
  printf("Num Iterations: %d\n", y1);
  8006dc:	e17ffd17 	ldw	r5,-12(fp)
  8006e0:	01002074 	movhi	r4,129
  8006e4:	2109b204 	addi	r4,r4,9928
  8006e8:	0802c000 	call	802c00 <printf>
  // printf("Total ticks %d for %d iters\n", elapsedTicks , numIterations);
  // printf("Time Taken: %f\n",(float) elapsedTicks/numIterations);


  return 0;
  8006ec:	0005883a 	mov	r2,zero
}
  8006f0:	e037883a 	mov	sp,fp
  8006f4:	dfc00117 	ldw	ra,4(sp)
  8006f8:	df000017 	ldw	fp,0(sp)
  8006fc:	dec00204 	addi	sp,sp,8
  800700:	f800283a 	ret

00800704 <cosf>:
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
  800704:	00a00034 	movhi	r2,32768
  800708:	10bfffc4 	addi	r2,r2,-1
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  80070c:	00cfd274 	movhi	r3,16201
	ix &= 0x7fffffff;
  800710:	1104703a 	and	r2,r2,r4
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800714:	18c3f604 	addi	r3,r3,4056
  800718:	1880160e 	bge	r3,r2,800774 <cosf+0x70>
{
  80071c:	defffd04 	addi	sp,sp,-12
  800720:	dfc00215 	stw	ra,8(sp)

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
  800724:	00dfe034 	movhi	r3,32640
  800728:	10c00516 	blt	r2,r3,800740 <cosf+0x3c>
  80072c:	200b883a 	mov	r5,r4
  800730:	08024300 	call	802430 <__subsf3>
		case 2: return -__kernel_cosf(y[0],y[1]);
		default:
		        return  __kernel_sinf(y[0],y[1],1);
	    }
	}
}
  800734:	dfc00217 	ldw	ra,8(sp)
  800738:	dec00304 	addi	sp,sp,12
  80073c:	f800283a 	ret
	    n = __ieee754_rem_pio2f(x,y);
  800740:	d80b883a 	mov	r5,sp
  800744:	08007a00 	call	8007a0 <__ieee754_rem_pio2f>
	    switch(n&3) {
  800748:	108000cc 	andi	r2,r2,3
  80074c:	10c00060 	cmpeqi	r3,r2,1
		        return  __kernel_sinf(y[0],y[1],1);
  800750:	d9400117 	ldw	r5,4(sp)
  800754:	d9000017 	ldw	r4,0(sp)
	    switch(n&3) {
  800758:	1800081e 	bne	r3,zero,80077c <cosf+0x78>
  80075c:	10c000a0 	cmpeqi	r3,r2,2
  800760:	18000c1e 	bne	r3,zero,800794 <cosf+0x90>
  800764:	10000926 	beq	r2,zero,80078c <cosf+0x88>
		        return  __kernel_sinf(y[0],y[1],1);
  800768:	01800044 	movi	r6,1
  80076c:	08017880 	call	801788 <__kernel_sinf>
  800770:	003ff006 	br	800734 <cosf+0x30>
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800774:	000b883a 	mov	r5,zero
  800778:	0800c081 	jmpi	800c08 <__kernel_cosf>
		case 1: return -__kernel_sinf(y[0],y[1],1);
  80077c:	01800044 	movi	r6,1
  800780:	08017880 	call	801788 <__kernel_sinf>
  800784:	10a0003c 	xorhi	r2,r2,32768
  800788:	003fea06 	br	800734 <cosf+0x30>
		case 0: return  __kernel_cosf(y[0],y[1]);
  80078c:	0800c080 	call	800c08 <__kernel_cosf>
  800790:	003fe806 	br	800734 <cosf+0x30>
		case 2: return -__kernel_cosf(y[0],y[1]);
  800794:	0800c080 	call	800c08 <__kernel_cosf>
  800798:	10a0003c 	xorhi	r2,r2,32768
  80079c:	003fe506 	br	800734 <cosf+0x30>

008007a0 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
  8007a0:	defff104 	addi	sp,sp,-60
  8007a4:	dc000515 	stw	r16,20(sp)
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
  8007a8:	04200034 	movhi	r16,32768
  8007ac:	843fffc4 	addi	r16,r16,-1
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  8007b0:	008fd274 	movhi	r2,16201
{
  8007b4:	dc400615 	stw	r17,24(sp)
  8007b8:	dfc00e15 	stw	ra,56(sp)
  8007bc:	df000d15 	stw	fp,52(sp)
  8007c0:	ddc00c15 	stw	r23,48(sp)
  8007c4:	dd800b15 	stw	r22,44(sp)
  8007c8:	dd400a15 	stw	r21,40(sp)
  8007cc:	dd000915 	stw	r20,36(sp)
  8007d0:	dcc00815 	stw	r19,32(sp)
  8007d4:	dc800715 	stw	r18,28(sp)
	ix = hx&0x7fffffff;
  8007d8:	8120703a 	and	r16,r16,r4
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  8007dc:	1083f604 	addi	r2,r2,4056
{
  8007e0:	2007883a 	mov	r3,r4
  8007e4:	2823883a 	mov	r17,r5
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  8007e8:	14005b0e 	bge	r2,r16,800958 <__ieee754_rem_pio2f+0x1b8>
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
  8007ec:	009005f4 	movhi	r2,16407
  8007f0:	10b2f8c4 	addi	r2,r2,-13341
  8007f4:	2027883a 	mov	r19,r4
  8007f8:	14002516 	blt	r2,r16,800890 <__ieee754_rem_pio2f+0xf0>
	    if(hx>0) { 
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  8007fc:	00bffc04 	movi	r2,-16
  800800:	80a0703a 	and	r16,r16,r2
	    if(hx>0) { 
  800804:	0100eb0e 	bge	zero,r4,800bb4 <__ieee754_rem_pio2f+0x414>
		z = x - pio2_1;
  800808:	014ff274 	movhi	r5,16329
  80080c:	2943e004 	addi	r5,r5,3968
  800810:	08024300 	call	802430 <__subsf3>
  800814:	1025883a 	mov	r18,r2
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800818:	008ff274 	movhi	r2,16329
  80081c:	1083f404 	addi	r2,r2,4048
		    y[0] = z - pio2_1t;
  800820:	014dcd74 	movhi	r5,14133
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800824:	80808826 	beq	r16,r2,800a48 <__ieee754_rem_pio2f+0x2a8>
		    y[0] = z - pio2_1t;
  800828:	9009883a 	mov	r4,r18
  80082c:	295110c4 	addi	r5,r5,17475
  800830:	08024300 	call	802430 <__subsf3>
		    y[1] = (z-y[0])-pio2_1t;
  800834:	9009883a 	mov	r4,r18
  800838:	100b883a 	mov	r5,r2
		    y[0] = z - pio2_1t;
  80083c:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_1t;
  800840:	08024300 	call	802430 <__subsf3>
  800844:	014dcd74 	movhi	r5,14133
  800848:	295110c4 	addi	r5,r5,17475
  80084c:	1009883a 	mov	r4,r2
  800850:	08024300 	call	802430 <__subsf3>
  800854:	88800115 	stw	r2,4(r17)
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
  800858:	04800044 	movi	r18,1
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
  80085c:	9005883a 	mov	r2,r18
  800860:	dfc00e17 	ldw	ra,56(sp)
  800864:	df000d17 	ldw	fp,52(sp)
  800868:	ddc00c17 	ldw	r23,48(sp)
  80086c:	dd800b17 	ldw	r22,44(sp)
  800870:	dd400a17 	ldw	r21,40(sp)
  800874:	dd000917 	ldw	r20,36(sp)
  800878:	dcc00817 	ldw	r19,32(sp)
  80087c:	dc800717 	ldw	r18,28(sp)
  800880:	dc400617 	ldw	r17,24(sp)
  800884:	dc000517 	ldw	r16,20(sp)
  800888:	dec00f04 	addi	sp,sp,60
  80088c:	f800283a 	ret
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
  800890:	0090d274 	movhi	r2,17225
  800894:	1083e004 	addi	r2,r2,3968
  800898:	14003316 	blt	r2,r16,800968 <__ieee754_rem_pio2f+0x1c8>
	    n  = (__int32_t) (t*invpio2+half);
  80089c:	010fc8f4 	movhi	r4,16163
  8008a0:	213e6104 	addi	r4,r4,-1660
  8008a4:	008fc034 	movhi	r2,16128
  8008a8:	2409c032 	custom	0,r4,r4,r16
  8008ac:	2089c072 	custom	1,r4,r4,r2
  8008b0:	08028c40 	call	8028c4 <__fixsfsi>
	    fn = (float)n;
  8008b4:	1009883a 	mov	r4,r2
	    n  = (__int32_t) (t*invpio2+half);
  8008b8:	1025883a 	mov	r18,r2
	    fn = (float)n;
  8008bc:	08029340 	call	802934 <__floatsisf>
	    r  = t-fn*pio2_1;
  8008c0:	014ff274 	movhi	r5,16329
  8008c4:	2943e004 	addi	r5,r5,3968
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  8008c8:	050dcd74 	movhi	r20,14133
	    fn = (float)n;
  8008cc:	102b883a 	mov	r21,r2
	    r  = t-fn*pio2_1;
  8008d0:	114bc032 	custom	0,r5,r2,r5
  8008d4:	8009883a 	mov	r4,r16
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  8008d8:	a51110c4 	addi	r20,r20,17475
	    r  = t-fn*pio2_1;
  8008dc:	08024300 	call	802430 <__subsf3>
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  8008e0:	ad29c032 	custom	0,r20,r21,r20
		y[0] = r-w;	/* quick check no cancellation */
  8008e4:	1009883a 	mov	r4,r2
  8008e8:	a00b883a 	mov	r5,r20
	    r  = t-fn*pio2_1;
  8008ec:	102f883a 	mov	r23,r2
		y[0] = r-w;	/* quick check no cancellation */
  8008f0:	08024300 	call	802430 <__subsf3>
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  8008f4:	90c00808 	cmpgei	r3,r18,32
	    r  = t-fn*pio2_1;
  8008f8:	b809883a 	mov	r4,r23
		y[0] = r-w;	/* quick check no cancellation */
  8008fc:	102d883a 	mov	r22,r2
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800900:	1800641e 	bne	r3,zero,800a94 <__ieee754_rem_pio2f+0x2f4>
  800904:	900a90ba 	slli	r5,r18,2
  800908:	00c02074 	movhi	r3,129
  80090c:	28c7883a 	add	r3,r5,r3
  800910:	1949b617 	ldw	r5,9944(r3)
  800914:	00ffc004 	movi	r3,-256
  800918:	80c6703a 	and	r3,r16,r3
  80091c:	19405d26 	beq	r3,r5,800a94 <__ieee754_rem_pio2f+0x2f4>
		    	y[0] = r-w;
  800920:	88800015 	stw	r2,0(r17)
	    y[1] = (r-y[0])-w;
  800924:	b00b883a 	mov	r5,r22
  800928:	08024300 	call	802430 <__subsf3>
  80092c:	a00b883a 	mov	r5,r20
  800930:	1009883a 	mov	r4,r2
  800934:	08024300 	call	802430 <__subsf3>
  800938:	88800115 	stw	r2,4(r17)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
  80093c:	983fc70e 	bge	r19,zero,80085c <__ieee754_rem_pio2f+0xbc>
  800940:	b5a0003c 	xorhi	r22,r22,32768
  800944:	10a0003c 	xorhi	r2,r2,32768
  800948:	8d800015 	stw	r22,0(r17)
  80094c:	88800115 	stw	r2,4(r17)
  800950:	04a5c83a 	sub	r18,zero,r18
  800954:	003fc106 	br	80085c <__ieee754_rem_pio2f+0xbc>
	    {y[0] = x; y[1] = 0; return 0;}
  800958:	89000015 	stw	r4,0(r17)
  80095c:	28000115 	stw	zero,4(r5)
  800960:	0025883a 	mov	r18,zero
  800964:	003fbd06 	br	80085c <__ieee754_rem_pio2f+0xbc>
	if(!FLT_UWORD_IS_FINITE(ix)) {
  800968:	009fe034 	movhi	r2,32640
  80096c:	8080840e 	bge	r16,r2,800b80 <__ieee754_rem_pio2f+0x3e0>
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
  800970:	8025d5fa 	srai	r18,r16,23
  800974:	94bfde84 	addi	r18,r18,-134
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
  800978:	900495fa 	slli	r2,r18,23
  80097c:	80a1c83a 	sub	r16,r16,r2
		tx[i] = (float)((__int32_t)(z));
  800980:	8009883a 	mov	r4,r16
  800984:	08028c40 	call	8028c4 <__fixsfsi>
  800988:	1009883a 	mov	r4,r2
  80098c:	08029340 	call	802934 <__floatsisf>
		z     = (z-tx[i])*two8;
  800990:	100b883a 	mov	r5,r2
  800994:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  800998:	d8800215 	stw	r2,8(sp)
		z     = (z-tx[i])*two8;
  80099c:	0410e034 	movhi	r16,17280
  8009a0:	08024300 	call	802430 <__subsf3>
  8009a4:	1421c032 	custom	0,r16,r2,r16
		tx[i] = (float)((__int32_t)(z));
  8009a8:	8009883a 	mov	r4,r16
  8009ac:	08028c40 	call	8028c4 <__fixsfsi>
  8009b0:	1009883a 	mov	r4,r2
  8009b4:	08029340 	call	802934 <__floatsisf>
		z     = (z-tx[i])*two8;
  8009b8:	100b883a 	mov	r5,r2
  8009bc:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  8009c0:	1029883a 	mov	r20,r2
  8009c4:	d8800315 	stw	r2,12(sp)
		z     = (z-tx[i])*two8;
  8009c8:	08024300 	call	802430 <__subsf3>
  8009cc:	00d0e034 	movhi	r3,17280
  8009d0:	10c5c032 	custom	0,r2,r2,r3
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  8009d4:	000b883a 	mov	r5,zero
  8009d8:	1009883a 	mov	r4,r2
	tx[2] = z;
  8009dc:	d8800415 	stw	r2,16(sp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  8009e0:	0801f080 	call	801f08 <__eqsf2>
  8009e4:	1000711e 	bne	r2,zero,800bac <__ieee754_rem_pio2f+0x40c>
  8009e8:	000b883a 	mov	r5,zero
  8009ec:	a009883a 	mov	r4,r20
  8009f0:	0801f080 	call	801f08 <__eqsf2>
  8009f4:	10006b1e 	bne	r2,zero,800ba4 <__ieee754_rem_pio2f+0x404>
  8009f8:	01c00044 	movi	r7,1
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
  8009fc:	00802074 	movhi	r2,129
  800a00:	1089d704 	addi	r2,r2,10076
  800a04:	d8800115 	stw	r2,4(sp)
  800a08:	00800084 	movi	r2,2
  800a0c:	900d883a 	mov	r6,r18
  800a10:	d8800015 	stw	r2,0(sp)
  800a14:	880b883a 	mov	r5,r17
  800a18:	d9000204 	addi	r4,sp,8
  800a1c:	0800dd80 	call	800dd8 <__kernel_rem_pio2f>
  800a20:	1025883a 	mov	r18,r2
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
  800a24:	983f8d0e 	bge	r19,zero,80085c <__ieee754_rem_pio2f+0xbc>
  800a28:	88c00017 	ldw	r3,0(r17)
  800a2c:	88800117 	ldw	r2,4(r17)
  800a30:	04a5c83a 	sub	r18,zero,r18
  800a34:	18e0003c 	xorhi	r3,r3,32768
  800a38:	10a0003c 	xorhi	r2,r2,32768
  800a3c:	88c00015 	stw	r3,0(r17)
  800a40:	88800115 	stw	r2,4(r17)
  800a44:	003f8506 	br	80085c <__ieee754_rem_pio2f+0xbc>
		    z -= pio2_2;
  800a48:	9009883a 	mov	r4,r18
  800a4c:	29510004 	addi	r5,r5,17408
  800a50:	08024300 	call	802430 <__subsf3>
		    y[0] = z - pio2_2t;
  800a54:	014ba1b4 	movhi	r5,11910
  800a58:	2968c204 	addi	r5,r5,-23800
  800a5c:	1009883a 	mov	r4,r2
		    z -= pio2_2;
  800a60:	1021883a 	mov	r16,r2
		    y[0] = z - pio2_2t;
  800a64:	08024300 	call	802430 <__subsf3>
		    y[1] = (z-y[0])-pio2_2t;
  800a68:	100b883a 	mov	r5,r2
  800a6c:	8009883a 	mov	r4,r16
		    y[0] = z - pio2_2t;
  800a70:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_2t;
  800a74:	08024300 	call	802430 <__subsf3>
  800a78:	014ba1b4 	movhi	r5,11910
  800a7c:	2968c204 	addi	r5,r5,-23800
  800a80:	1009883a 	mov	r4,r2
  800a84:	08024300 	call	802430 <__subsf3>
  800a88:	88800115 	stw	r2,4(r17)
		return 1;
  800a8c:	04800044 	movi	r18,1
  800a90:	003f7206 	br	80085c <__ieee754_rem_pio2f+0xbc>
	        i = j-((high>>23)&0xff);
  800a94:	1006d5fa 	srli	r3,r2,23
	        j  = ix>>23;
  800a98:	8021d5fa 	srai	r16,r16,23
	        i = j-((high>>23)&0xff);
  800a9c:	18c03fcc 	andi	r3,r3,255
  800aa0:	80c7c83a 	sub	r3,r16,r3
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
  800aa4:	18c00248 	cmpgei	r3,r3,9
  800aa8:	183f9d26 	beq	r3,zero,800920 <__ieee754_rem_pio2f+0x180>
		    w  = fn*pio2_2;	
  800aac:	014dcd74 	movhi	r5,14133
  800ab0:	29510004 	addi	r5,r5,17408
  800ab4:	a969c032 	custom	0,r20,r21,r5
		    r  = t-w;
  800ab8:	a00b883a 	mov	r5,r20
  800abc:	b809883a 	mov	r4,r23
  800ac0:	08024300 	call	802430 <__subsf3>
		    w  = fn*pio2_2t-((t-r)-w);	
  800ac4:	100b883a 	mov	r5,r2
  800ac8:	b809883a 	mov	r4,r23
		    r  = t-w;
  800acc:	1039883a 	mov	fp,r2
		    w  = fn*pio2_2t-((t-r)-w);	
  800ad0:	08024300 	call	802430 <__subsf3>
  800ad4:	a00b883a 	mov	r5,r20
  800ad8:	1009883a 	mov	r4,r2
  800adc:	08024300 	call	802430 <__subsf3>
  800ae0:	010ba1b4 	movhi	r4,11910
  800ae4:	2128c204 	addi	r4,r4,-23800
  800ae8:	100b883a 	mov	r5,r2
  800aec:	a909c032 	custom	0,r4,r21,r4
  800af0:	08024300 	call	802430 <__subsf3>
		    y[0] = r-w;
  800af4:	100b883a 	mov	r5,r2
  800af8:	e009883a 	mov	r4,fp
		    w  = fn*pio2_2t-((t-r)-w);	
  800afc:	1029883a 	mov	r20,r2
		    y[0] = r-w;
  800b00:	08024300 	call	802430 <__subsf3>
		    i = j-((high>>23)&0xff);
  800b04:	1006d5fa 	srli	r3,r2,23
		    y[0] = r-w;
  800b08:	102d883a 	mov	r22,r2
		    i = j-((high>>23)&0xff);
  800b0c:	18c03fcc 	andi	r3,r3,255
  800b10:	80e1c83a 	sub	r16,r16,r3
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
  800b14:	84000688 	cmpgei	r16,r16,26
  800b18:	80001f26 	beq	r16,zero,800b98 <__ieee754_rem_pio2f+0x3f8>
		    	w  = fn*pio2_3;	
  800b1c:	008ba1b4 	movhi	r2,11910
  800b20:	10a8c004 	addi	r2,r2,-23808
  800b24:	a8a1c032 	custom	0,r16,r21,r2
		    	r  = t-w;
  800b28:	800b883a 	mov	r5,r16
  800b2c:	e009883a 	mov	r4,fp
  800b30:	08024300 	call	802430 <__subsf3>
		    	w  = fn*pio2_3t-((t-r)-w);	
  800b34:	100b883a 	mov	r5,r2
  800b38:	e009883a 	mov	r4,fp
		    	r  = t-w;
  800b3c:	102d883a 	mov	r22,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800b40:	08024300 	call	802430 <__subsf3>
  800b44:	800b883a 	mov	r5,r16
  800b48:	1009883a 	mov	r4,r2
  800b4c:	08024300 	call	802430 <__subsf3>
  800b50:	01092374 	movhi	r4,9357
  800b54:	210c4c84 	addi	r4,r4,12594
  800b58:	100b883a 	mov	r5,r2
  800b5c:	a909c032 	custom	0,r4,r21,r4
  800b60:	08024300 	call	802430 <__subsf3>
		    	y[0] = r-w;
  800b64:	b009883a 	mov	r4,r22
  800b68:	100b883a 	mov	r5,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800b6c:	1029883a 	mov	r20,r2
		    	y[0] = r-w;
  800b70:	08024300 	call	802430 <__subsf3>
		    	r  = t-w;
  800b74:	b009883a 	mov	r4,r22
		    	y[0] = r-w;
  800b78:	102d883a 	mov	r22,r2
  800b7c:	003f6806 	br	800920 <__ieee754_rem_pio2f+0x180>
	    y[0]=y[1]=x-x; return 0;
  800b80:	200b883a 	mov	r5,r4
  800b84:	08024300 	call	802430 <__subsf3>
  800b88:	88800115 	stw	r2,4(r17)
  800b8c:	88800015 	stw	r2,0(r17)
  800b90:	0025883a 	mov	r18,zero
  800b94:	003f3106 	br	80085c <__ieee754_rem_pio2f+0xbc>
		    y[0] = r-w;
  800b98:	88800015 	stw	r2,0(r17)
		    r  = t-w;
  800b9c:	e009883a 	mov	r4,fp
  800ba0:	003f6006 	br	800924 <__ieee754_rem_pio2f+0x184>
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800ba4:	01c00084 	movi	r7,2
  800ba8:	003f9406 	br	8009fc <__ieee754_rem_pio2f+0x25c>
	nx = 3;
  800bac:	01c000c4 	movi	r7,3
  800bb0:	003f9206 	br	8009fc <__ieee754_rem_pio2f+0x25c>
		z = x + pio2_1;
  800bb4:	010ff274 	movhi	r4,16329
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800bb8:	008ff274 	movhi	r2,16329
		z = x + pio2_1;
  800bbc:	2103e004 	addi	r4,r4,3968
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800bc0:	1083f404 	addi	r2,r2,4048
		z = x + pio2_1;
  800bc4:	1909c072 	custom	1,r4,r3,r4
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800bc8:	80800926 	beq	r16,r2,800bf0 <__ieee754_rem_pio2f+0x450>
		    y[0] = z + pio2_1t;
  800bcc:	040dcd74 	movhi	r16,14133
  800bd0:	841110c4 	addi	r16,r16,17475
		    y[0] = z + pio2_2t;
  800bd4:	240bc072 	custom	1,r5,r4,r16
  800bd8:	89400015 	stw	r5,0(r17)
		    y[1] = (z-y[0])+pio2_2t;
  800bdc:	08024300 	call	802430 <__subsf3>
  800be0:	1421c072 	custom	1,r16,r2,r16
  800be4:	8c000115 	stw	r16,4(r17)
		return -1;
  800be8:	04bfffc4 	movi	r18,-1
  800bec:	003f1b06 	br	80085c <__ieee754_rem_pio2f+0xbc>
		    z += pio2_2;
  800bf0:	008dcd74 	movhi	r2,14133
  800bf4:	10910004 	addi	r2,r2,17408
		    y[0] = z + pio2_2t;
  800bf8:	040ba1b4 	movhi	r16,11910
		    z += pio2_2;
  800bfc:	2089c072 	custom	1,r4,r4,r2
		    y[0] = z + pio2_2t;
  800c00:	8428c204 	addi	r16,r16,-23800
  800c04:	003ff306 	br	800bd4 <__ieee754_rem_pio2f+0x434>

00800c08 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
  800c08:	defff904 	addi	sp,sp,-28
  800c0c:	dc400115 	stw	r17,4(sp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800c10:	04600034 	movhi	r17,32768
  800c14:	8c7fffc4 	addi	r17,r17,-1
{
  800c18:	dd000415 	stw	r20,16(sp)
  800c1c:	dc800215 	stw	r18,8(sp)
  800c20:	dfc00615 	stw	ra,24(sp)
  800c24:	dd400515 	stw	r21,20(sp)
  800c28:	dcc00315 	stw	r19,12(sp)
  800c2c:	dc000015 	stw	r16,0(sp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800c30:	8922703a 	and	r17,r17,r4
	if(ix<0x32000000) {			/* if x < 2**27 */
  800c34:	008c8034 	movhi	r2,12800
{
  800c38:	2029883a 	mov	r20,r4
  800c3c:	2825883a 	mov	r18,r5
	if(ix<0x32000000) {			/* if x < 2**27 */
  800c40:	8880260e 	bge	r17,r2,800cdc <__kernel_cosf+0xd4>
	    if(((int)x)==0) return one;		/* generate inexact */
  800c44:	08028c40 	call	8028c4 <__fixsfsi>
  800c48:	10006126 	beq	r2,zero,800dd0 <__kernel_cosf+0x1c8>
	}
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c4c:	012b5234 	movhi	r4,44360
	z  = x*x;
  800c50:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c54:	2135d384 	addi	r4,r4,-10418
  800c58:	008c43f4 	movhi	r2,12559
  800c5c:	109d3d84 	addi	r2,r2,29942
  800c60:	9909c032 	custom	0,r4,r19,r4
  800c64:	2089c072 	custom	1,r4,r4,r2
  800c68:	014d2534 	movhi	r5,13460
  800c6c:	297c9f04 	addi	r5,r5,-3460
  800c70:	24c9c032 	custom	0,r4,r4,r19
  800c74:	08024300 	call	802430 <__subsf3>
  800c78:	00cdf434 	movhi	r3,14288
  800c7c:	18c34044 	addi	r3,r3,3329
  800c80:	14c9c032 	custom	0,r4,r2,r19
  800c84:	20c9c072 	custom	1,r4,r4,r3
  800c88:	014eadb4 	movhi	r5,15030
  800c8c:	2942d844 	addi	r5,r5,2913
  800c90:	24c9c032 	custom	0,r4,r4,r19
  800c94:	08024300 	call	802430 <__subsf3>
  800c98:	00cf4af4 	movhi	r3,15659
  800c9c:	14e1c032 	custom	0,r16,r2,r19
  800ca0:	18eaaac4 	addi	r3,r3,-21845
  800ca4:	80e1c072 	custom	1,r16,r16,r3
  800ca8:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
  800cac:	a48bc032 	custom	0,r5,r20,r18
  800cb0:	9c09c032 	custom	0,r4,r19,r16
  800cb4:	044fc034 	movhi	r17,16128
  800cb8:	08024300 	call	802430 <__subsf3>
  800cbc:	9c63c032 	custom	0,r17,r19,r17
  800cc0:	8809883a 	mov	r4,r17
  800cc4:	100b883a 	mov	r5,r2
  800cc8:	08024300 	call	802430 <__subsf3>
  800ccc:	100b883a 	mov	r5,r2
  800cd0:	010fe034 	movhi	r4,16256
  800cd4:	08024300 	call	802430 <__subsf3>
  800cd8:	00003106 	br	800da0 <__kernel_cosf+0x198>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800cdc:	012b5234 	movhi	r4,44360
	z  = x*x;
  800ce0:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800ce4:	2135d384 	addi	r4,r4,-10418
  800ce8:	008c43f4 	movhi	r2,12559
  800cec:	109d3d84 	addi	r2,r2,29942
  800cf0:	9909c032 	custom	0,r4,r19,r4
  800cf4:	2089c072 	custom	1,r4,r4,r2
  800cf8:	014d2534 	movhi	r5,13460
  800cfc:	297c9f04 	addi	r5,r5,-3460
  800d00:	24c9c032 	custom	0,r4,r4,r19
  800d04:	08024300 	call	802430 <__subsf3>
  800d08:	00cdf434 	movhi	r3,14288
  800d0c:	18c34044 	addi	r3,r3,3329
  800d10:	14c9c032 	custom	0,r4,r2,r19
  800d14:	20c9c072 	custom	1,r4,r4,r3
  800d18:	014eadb4 	movhi	r5,15030
  800d1c:	24c9c032 	custom	0,r4,r4,r19
  800d20:	2942d844 	addi	r5,r5,2913
  800d24:	08024300 	call	802430 <__subsf3>
  800d28:	010f4af4 	movhi	r4,15659
  800d2c:	14e1c032 	custom	0,r16,r2,r19
  800d30:	212aaac4 	addi	r4,r4,-21845
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800d34:	00cfa6b4 	movhi	r3,16026
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800d38:	8121c072 	custom	1,r16,r16,r4
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800d3c:	18e66644 	addi	r3,r3,-26215
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800d40:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800d44:	1c7fd90e 	bge	r3,r17,800cac <__kernel_cosf+0xa4>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
  800d48:	008fd234 	movhi	r2,16200
  800d4c:	14401d16 	blt	r2,r17,800dc4 <__kernel_cosf+0x1bc>
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800d50:	017fc034 	movhi	r5,65280
  800d54:	894b883a 	add	r5,r17,r5
	    }
	    hz = (float)0.5*z-qx;
	    a  = one-qx;
  800d58:	010fe034 	movhi	r4,16256
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800d5c:	2823883a 	mov	r17,r5
	    a  = one-qx;
  800d60:	08024300 	call	802430 <__subsf3>
  800d64:	102b883a 	mov	r21,r2
	    hz = (float)0.5*z-qx;
  800d68:	010fc034 	movhi	r4,16128
  800d6c:	880b883a 	mov	r5,r17
  800d70:	9909c032 	custom	0,r4,r19,r4
  800d74:	08024300 	call	802430 <__subsf3>
	    return a - (hz - (z*r-x*y));
  800d78:	a48bc032 	custom	0,r5,r20,r18
  800d7c:	9c09c032 	custom	0,r4,r19,r16
	    hz = (float)0.5*z-qx;
  800d80:	1023883a 	mov	r17,r2
	    return a - (hz - (z*r-x*y));
  800d84:	08024300 	call	802430 <__subsf3>
  800d88:	100b883a 	mov	r5,r2
  800d8c:	8809883a 	mov	r4,r17
  800d90:	08024300 	call	802430 <__subsf3>
  800d94:	100b883a 	mov	r5,r2
  800d98:	a809883a 	mov	r4,r21
  800d9c:	08024300 	call	802430 <__subsf3>
	}
}
  800da0:	dfc00617 	ldw	ra,24(sp)
  800da4:	dd400517 	ldw	r21,20(sp)
  800da8:	dd000417 	ldw	r20,16(sp)
  800dac:	dcc00317 	ldw	r19,12(sp)
  800db0:	dc800217 	ldw	r18,8(sp)
  800db4:	dc400117 	ldw	r17,4(sp)
  800db8:	dc000017 	ldw	r16,0(sp)
  800dbc:	dec00704 	addi	sp,sp,28
  800dc0:	f800283a 	ret
  800dc4:	054fce34 	movhi	r21,16184
		qx = (float)0.28125;
  800dc8:	044fa434 	movhi	r17,16016
  800dcc:	003fe606 	br	800d68 <__kernel_cosf+0x160>
	    if(((int)x)==0) return one;		/* generate inexact */
  800dd0:	008fe034 	movhi	r2,16256
  800dd4:	003ff206 	br	800da0 <__kernel_cosf+0x198>

00800dd8 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
  800dd8:	deff9a04 	addi	sp,sp,-408
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
  800ddc:	d8806617 	ldw	r2,408(sp)
{
  800de0:	dd806215 	stw	r22,392(sp)
  800de4:	dd006015 	stw	r20,384(sp)
	jk = init_jk[prec];
  800de8:	100690ba 	slli	r3,r2,2
  800dec:	00802074 	movhi	r2,129
{
  800df0:	dfc06515 	stw	ra,404(sp)
	jk = init_jk[prec];
  800df4:	1885883a 	add	r2,r3,r2
  800df8:	150aa817 	ldw	r20,10912(r2)
{
  800dfc:	df006415 	stw	fp,400(sp)
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
  800e00:	38bfffc4 	addi	r2,r7,-1
{
  800e04:	ddc06315 	stw	r23,396(sp)
  800e08:	dd406115 	stw	r21,388(sp)
  800e0c:	dcc05f15 	stw	r19,380(sp)
  800e10:	dc805e15 	stw	r18,376(sp)
  800e14:	dc405d15 	stw	r17,372(sp)
  800e18:	dc005c15 	stw	r16,368(sp)
  800e1c:	d9800b15 	stw	r6,44(sp)
  800e20:	d9c00615 	stw	r7,24(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  800e24:	30ffff10 	cmplti	r3,r6,-4
{
  800e28:	d9000515 	stw	r4,20(sp)
  800e2c:	d9400815 	stw	r5,32(sp)
	jx =  nx-1;
  800e30:	102d883a 	mov	r22,r2
	jv = (e0-3)/8; if(jv<0) jv=0;
  800e34:	1801e11e 	bne	r3,zero,8015bc <__kernel_rem_pio2f+0x7e4>
  800e38:	30bfff44 	addi	r2,r6,-3
  800e3c:	1001e316 	blt	r2,zero,8015cc <__kernel_rem_pio2f+0x7f4>
  800e40:	1005d0fa 	srai	r2,r2,3
  800e44:	d8800415 	stw	r2,16(sp)
	q0 =  e0-8*(jv+1);
  800e48:	10800044 	addi	r2,r2,1
  800e4c:	100490fa 	slli	r2,r2,3
  800e50:	d8800a15 	stw	r2,40(sp)
  800e54:	d9000b17 	ldw	r4,44(sp)
  800e58:	d9400a17 	ldw	r5,40(sp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
  800e5c:	a585883a 	add	r2,r20,r22
	q0 =  e0-8*(jv+1);
  800e60:	2149c83a 	sub	r4,r4,r5
  800e64:	d9000115 	stw	r4,4(sp)
	j = jv-jx; m = jx+jk;
  800e68:	d9000417 	ldw	r4,16(sp)
  800e6c:	25a1c83a 	sub	r16,r4,r22
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  800e70:	10000e16 	blt	r2,zero,800eac <__kernel_rem_pio2f+0xd4>
  800e74:	802490ba 	slli	r18,r16,2
  800e78:	d8c06717 	ldw	r3,412(sp)
  800e7c:	10800044 	addi	r2,r2,1
  800e80:	dc402004 	addi	r17,sp,128
  800e84:	1ca5883a 	add	r18,r3,r18
  800e88:	1427883a 	add	r19,r2,r16
  800e8c:	80010f16 	blt	r16,zero,8012cc <__kernel_rem_pio2f+0x4f4>
  800e90:	91000017 	ldw	r4,0(r18)
  800e94:	08029340 	call	802934 <__floatsisf>
  800e98:	88800015 	stw	r2,0(r17)
  800e9c:	84000044 	addi	r16,r16,1
  800ea0:	8c400104 	addi	r17,r17,4
  800ea4:	94800104 	addi	r18,r18,4
  800ea8:	84fff81e 	bne	r16,r19,800e8c <__kernel_rem_pio2f+0xb4>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
  800eac:	a0001c16 	blt	r20,zero,800f20 <__kernel_rem_pio2f+0x148>
  800eb0:	b01090ba 	slli	r8,r22,2
  800eb4:	d8802004 	addi	r2,sp,128
  800eb8:	db400517 	ldw	r13,20(sp)
  800ebc:	41c00104 	addi	r7,r8,4
  800ec0:	1211883a 	add	r8,r2,r8
  800ec4:	d8800617 	ldw	r2,24(sp)
  800ec8:	b019883a 	mov	r12,r22
  800ecc:	da804804 	addi	r10,sp,288
  800ed0:	b013883a 	mov	r9,r22
  800ed4:	a097883a 	add	r11,r20,r2
  800ed8:	3b4f883a 	add	r7,r7,r13
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800edc:	000b883a 	mov	r5,zero
  800ee0:	60000a16 	blt	r12,zero,800f0c <__kernel_rem_pio2f+0x134>
  800ee4:	4009883a 	mov	r4,r8
  800ee8:	6805883a 	mov	r2,r13
  800eec:	000b883a 	mov	r5,zero
  800ef0:	10c00017 	ldw	r3,0(r2)
  800ef4:	21800017 	ldw	r6,0(r4)
  800ef8:	10800104 	addi	r2,r2,4
  800efc:	213fff04 	addi	r4,r4,-4
  800f00:	1987c032 	custom	0,r3,r3,r6
  800f04:	28cbc072 	custom	1,r5,r5,r3
  800f08:	11fff91e 	bne	r2,r7,800ef0 <__kernel_rem_pio2f+0x118>
	    q[i] = fw;
  800f0c:	51400015 	stw	r5,0(r10)
	for (i=0;i<=jk;i++) {
  800f10:	4a400044 	addi	r9,r9,1
  800f14:	52800104 	addi	r10,r10,4
  800f18:	42000104 	addi	r8,r8,4
  800f1c:	4affef1e 	bne	r9,r11,800edc <__kernel_rem_pio2f+0x104>
  800f20:	d8c00617 	ldw	r3,24(sp)
  800f24:	d9000517 	ldw	r4,20(sp)
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800f28:	a0bfffc4 	addi	r2,r20,-1
  800f2c:	180690ba 	slli	r3,r3,2
  800f30:	100490ba 	slli	r2,r2,2
  800f34:	a02a90ba 	slli	r21,r20,2
  800f38:	21ffff04 	addi	r7,r4,-4
  800f3c:	38f9883a 	add	fp,r7,r3
  800f40:	d8c05c04 	addi	r3,sp,368
  800f44:	d9000c04 	addi	r4,sp,48
  800f48:	1885883a 	add	r2,r3,r2
	jk = init_jk[prec];
  800f4c:	a025883a 	mov	r18,r20
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800f50:	dd000315 	stw	r20,12(sp)
  800f54:	256b883a 	add	r21,r4,r21
  800f58:	dcc04804 	addi	r19,sp,288
  800f5c:	d8800715 	stw	r2,28(sp)
  800f60:	b029883a 	mov	r20,r22
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800f64:	900690ba 	slli	r3,r18,2
  800f68:	d8805c04 	addi	r2,sp,368
  800f6c:	d8c00015 	stw	r3,0(sp)
  800f70:	10c5883a 	add	r2,r2,r3
  800f74:	147fec17 	ldw	r17,-80(r2)
  800f78:	0480140e 	bge	zero,r18,800fcc <__kernel_rem_pio2f+0x1f4>
  800f7c:	98e1883a 	add	r16,r19,r3
  800f80:	dd800c04 	addi	r22,sp,48
	    fw    =  (float)((__int32_t)(twon8* z));
  800f84:	010ee034 	movhi	r4,15232
  800f88:	8909c032 	custom	0,r4,r17,r4
  800f8c:	08028c40 	call	8028c4 <__fixsfsi>
  800f90:	1009883a 	mov	r4,r2
  800f94:	08029340 	call	802934 <__floatsisf>
	    iq[i] =  (__int32_t)(z-two8*fw);
  800f98:	0150e034 	movhi	r5,17280
  800f9c:	8809883a 	mov	r4,r17
  800fa0:	114bc032 	custom	0,r5,r2,r5
	    fw    =  (float)((__int32_t)(twon8* z));
  800fa4:	102f883a 	mov	r23,r2
	    iq[i] =  (__int32_t)(z-two8*fw);
  800fa8:	08024300 	call	802430 <__subsf3>
  800fac:	1009883a 	mov	r4,r2
  800fb0:	08028c40 	call	8028c4 <__fixsfsi>
	    z     =  q[j-1]+fw;
  800fb4:	847fff17 	ldw	r17,-4(r16)
	    iq[i] =  (__int32_t)(z-two8*fw);
  800fb8:	b0800015 	stw	r2,0(r22)
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800fbc:	843fff04 	addi	r16,r16,-4
	    z     =  q[j-1]+fw;
  800fc0:	bc63c072 	custom	1,r17,r23,r17
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800fc4:	b5800104 	addi	r22,r22,4
  800fc8:	9c3fee1e 	bne	r19,r16,800f84 <__kernel_rem_pio2f+0x1ac>
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800fcc:	dc000117 	ldw	r16,4(sp)
  800fd0:	8809883a 	mov	r4,r17
  800fd4:	800b883a 	mov	r5,r16
  800fd8:	08019800 	call	801980 <scalbnf>
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800fdc:	010f8034 	movhi	r4,15872
  800fe0:	1109c032 	custom	0,r4,r2,r4
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800fe4:	1023883a 	mov	r17,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800fe8:	08018980 	call	801898 <floorf>
  800fec:	01504034 	movhi	r5,16640
  800ff0:	114bc032 	custom	0,r5,r2,r5
  800ff4:	8809883a 	mov	r4,r17
  800ff8:	08024300 	call	802430 <__subsf3>
	n  = (__int32_t) z;
  800ffc:	1009883a 	mov	r4,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  801000:	102f883a 	mov	r23,r2
	n  = (__int32_t) z;
  801004:	08028c40 	call	8028c4 <__fixsfsi>
	z -= (float)n;
  801008:	1009883a 	mov	r4,r2
	n  = (__int32_t) z;
  80100c:	1023883a 	mov	r17,r2
	z -= (float)n;
  801010:	08029340 	call	802934 <__floatsisf>
  801014:	100b883a 	mov	r5,r2
  801018:	b809883a 	mov	r4,r23
  80101c:	08024300 	call	802430 <__subsf3>
  801020:	1011883a 	mov	r8,r2
  801024:	100d883a 	mov	r6,r2
	if(q0>0) {	/* need iq[jz-1] to determine n */
  801028:	0400560e 	bge	zero,r16,801184 <__kernel_rem_pio2f+0x3ac>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  80102c:	90bfffc4 	addi	r2,r18,-1
  801030:	100490ba 	slli	r2,r2,2
  801034:	d9005c04 	addi	r4,sp,368
  801038:	00c00204 	movi	r3,8
  80103c:	2085883a 	add	r2,r4,r2
  801040:	113fb017 	ldw	r4,-320(r2)
  801044:	1c07c83a 	sub	r3,r3,r16
	    ih = iq[jz-1]>>(7-q0);
  801048:	05c001c4 	movi	r23,7
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  80104c:	20cbd83a 	sra	r5,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  801050:	bc2fc83a 	sub	r23,r23,r16
	    iq[jz-1] -= i<<(8-q0);
  801054:	28c6983a 	sll	r3,r5,r3
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  801058:	8963883a 	add	r17,r17,r5
	    iq[jz-1] -= i<<(8-q0);
  80105c:	20c7c83a 	sub	r3,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  801060:	1defd83a 	sra	r23,r3,r23
	    iq[jz-1] -= i<<(8-q0);
  801064:	10ffb015 	stw	r3,-320(r2)
	if(ih>0) {	/* q > 0.5 */
  801068:	05c04f16 	blt	zero,r23,8011a8 <__kernel_rem_pio2f+0x3d0>
	if(z==zero) {
  80106c:	3009883a 	mov	r4,r6
  801070:	000b883a 	mov	r5,zero
  801074:	d9800215 	stw	r6,8(sp)
  801078:	0801f080 	call	801f08 <__eqsf2>
  80107c:	d9800217 	ldw	r6,8(sp)
  801080:	1001561e 	bne	r2,zero,8015dc <__kernel_rem_pio2f+0x804>
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  801084:	d8800317 	ldw	r2,12(sp)
  801088:	923fffc4 	addi	r8,r18,-1
  80108c:	40800916 	blt	r8,r2,8010b4 <__kernel_rem_pio2f+0x2dc>
  801090:	d8800017 	ldw	r2,0(sp)
  801094:	d8c00c04 	addi	r3,sp,48
  801098:	1885883a 	add	r2,r3,r2
	    j = 0;
  80109c:	0007883a 	mov	r3,zero
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  8010a0:	113fff17 	ldw	r4,-4(r2)
  8010a4:	10bfff04 	addi	r2,r2,-4
  8010a8:	1906b03a 	or	r3,r3,r4
  8010ac:	157ffc1e 	bne	r2,r21,8010a0 <__kernel_rem_pio2f+0x2c8>
	    if(j==0) { /* need recomputation */
  8010b0:	1800981e 	bne	r3,zero,801314 <__kernel_rem_pio2f+0x53c>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  8010b4:	d8800717 	ldw	r2,28(sp)
  8010b8:	10bfb017 	ldw	r2,-320(r2)
  8010bc:	1000921e 	bne	r2,zero,801308 <__kernel_rem_pio2f+0x530>
  8010c0:	a805883a 	mov	r2,r21
  8010c4:	04400044 	movi	r17,1
  8010c8:	10fffe17 	ldw	r3,-8(r2)
  8010cc:	8c400044 	addi	r17,r17,1
  8010d0:	10bfff04 	addi	r2,r2,-4
  8010d4:	183ffc26 	beq	r3,zero,8010c8 <__kernel_rem_pio2f+0x2f0>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  8010d8:	95800044 	addi	r22,r18,1
  8010dc:	9463883a 	add	r17,r18,r17
  8010e0:	d8800417 	ldw	r2,16(sp)
  8010e4:	90af883a 	add	r23,r18,r2
  8010e8:	d8800617 	ldw	r2,24(sp)
  8010ec:	b82e90ba 	slli	r23,r23,2
  8010f0:	14a5883a 	add	r18,r2,r18
  8010f4:	d8806717 	ldw	r2,412(sp)
  8010f8:	902490ba 	slli	r18,r18,2
  8010fc:	15ef883a 	add	r23,r2,r23
  801100:	d8802004 	addi	r2,sp,128
  801104:	14a5883a 	add	r18,r2,r18
  801108:	d8800017 	ldw	r2,0(sp)
  80110c:	dd400015 	stw	r21,0(sp)
  801110:	98a1883a 	add	r16,r19,r2
  801114:	802b883a 	mov	r21,r16
  801118:	dc000517 	ldw	r16,20(sp)
		    f[jx+i] = (float) ipio2[jv+i];
  80111c:	b9000117 	ldw	r4,4(r23)
  801120:	08029340 	call	802934 <__floatsisf>
  801124:	90800015 	stw	r2,0(r18)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  801128:	a0001416 	blt	r20,zero,80117c <__kernel_rem_pio2f+0x3a4>
  80112c:	900b883a 	mov	r5,r18
  801130:	8009883a 	mov	r4,r16
  801134:	000d883a 	mov	r6,zero
  801138:	00000206 	br	801144 <__kernel_rem_pio2f+0x36c>
  80113c:	28800017 	ldw	r2,0(r5)
  801140:	21000104 	addi	r4,r4,4
  801144:	20c00017 	ldw	r3,0(r4)
  801148:	297fff04 	addi	r5,r5,-4
  80114c:	10c5c032 	custom	0,r2,r2,r3
  801150:	308dc072 	custom	1,r6,r6,r2
  801154:	273ff91e 	bne	r4,fp,80113c <__kernel_rem_pio2f+0x364>
		    q[i] = fw;
  801158:	a9800115 	stw	r6,4(r21)
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  80115c:	b5800044 	addi	r22,r22,1
  801160:	bdc00104 	addi	r23,r23,4
  801164:	94800104 	addi	r18,r18,4
  801168:	ad400104 	addi	r21,r21,4
  80116c:	8dbfeb0e 	bge	r17,r22,80111c <__kernel_rem_pio2f+0x344>
  801170:	dd400017 	ldw	r21,0(sp)
  801174:	8825883a 	mov	r18,r17
  801178:	003f7a06 	br	800f64 <__kernel_rem_pio2f+0x18c>
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  80117c:	000d883a 	mov	r6,zero
  801180:	003ff506 	br	801158 <__kernel_rem_pio2f+0x380>
	else if(q0==0) ih = iq[jz-1]>>8;
  801184:	d8800117 	ldw	r2,4(sp)
  801188:	1000551e 	bne	r2,zero,8012e0 <__kernel_rem_pio2f+0x508>
  80118c:	90bfffc4 	addi	r2,r18,-1
  801190:	100490ba 	slli	r2,r2,2
  801194:	d8c05c04 	addi	r3,sp,368
  801198:	1885883a 	add	r2,r3,r2
  80119c:	15ffb017 	ldw	r23,-320(r2)
  8011a0:	b82fd23a 	srai	r23,r23,8
	if(ih>0) {	/* q > 0.5 */
  8011a4:	05ffb10e 	bge	zero,r23,80106c <__kernel_rem_pio2f+0x294>
	    n += 1; carry = 0;
  8011a8:	8c400044 	addi	r17,r17,1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011ac:	0481090e 	bge	zero,r18,8015d4 <__kernel_rem_pio2f+0x7fc>
		j = iq[i];
  8011b0:	da400c17 	ldw	r9,48(sp)
		    if(j!=0) {
  8011b4:	4800471e 	bne	r9,zero,8012d4 <__kernel_rem_pio2f+0x4fc>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011b8:	90800060 	cmpeqi	r2,r18,1
  8011bc:	1000241e 	bne	r2,zero,801250 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  8011c0:	da400d17 	ldw	r9,52(sp)
  8011c4:	d9000d04 	addi	r4,sp,52
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011c8:	00c00044 	movi	r3,1
  8011cc:	18800044 	addi	r2,r3,1
  8011d0:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  8011d4:	4800061e 	bne	r9,zero,8011f0 <__kernel_rem_pio2f+0x418>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011d8:	90801d26 	beq	r18,r2,801250 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  8011dc:	22400017 	ldw	r9,0(r4)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011e0:	1007883a 	mov	r3,r2
  8011e4:	18800044 	addi	r2,r3,1
  8011e8:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  8011ec:	483ffa26 	beq	r9,zero,8011d8 <__kernel_rem_pio2f+0x400>
			carry = 1; iq[i] = 0x100- j;
  8011f0:	180690ba 	slli	r3,r3,2
  8011f4:	01004004 	movi	r4,256
  8011f8:	2253c83a 	sub	r9,r4,r9
  8011fc:	d9005c04 	addi	r4,sp,368
  801200:	20c7883a 	add	r3,r4,r3
  801204:	1a7fb015 	stw	r9,-320(r3)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801208:	1480100e 	bge	r2,r18,80124c <__kernel_rem_pio2f+0x474>
		j = iq[i];
  80120c:	d8c00017 	ldw	r3,0(sp)
  801210:	100490ba 	slli	r2,r2,2
  801214:	d9000c04 	addi	r4,sp,48
  801218:	20cb883a 	add	r5,r4,r3
  80121c:	d8c05c04 	addi	r3,sp,368
  801220:	1887883a 	add	r3,r3,r2
  801224:	d9c00c04 	addi	r7,sp,48
  801228:	18ffb017 	ldw	r3,-320(r3)
		} else  iq[i] = 0xff - j;
  80122c:	01003fc4 	movi	r4,255
  801230:	3885883a 	add	r2,r7,r2
  801234:	00000106 	br	80123c <__kernel_rem_pio2f+0x464>
		j = iq[i];
  801238:	10c00017 	ldw	r3,0(r2)
		} else  iq[i] = 0xff - j;
  80123c:	20c7c83a 	sub	r3,r4,r3
  801240:	10c00015 	stw	r3,0(r2)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801244:	10800104 	addi	r2,r2,4
  801248:	117ffb1e 	bne	r2,r5,801238 <__kernel_rem_pio2f+0x460>
  80124c:	02400044 	movi	r9,1
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
  801250:	d8c00117 	ldw	r3,4(sp)
  801254:	00c00b0e 	bge	zero,r3,801284 <__kernel_rem_pio2f+0x4ac>
	        switch(q0) {
  801258:	18800060 	cmpeqi	r2,r3,1
  80125c:	1000c71e 	bne	r2,zero,80157c <__kernel_rem_pio2f+0x7a4>
  801260:	188000a0 	cmpeqi	r2,r3,2
  801264:	10000726 	beq	r2,zero,801284 <__kernel_rem_pio2f+0x4ac>
	    	   iq[jz-1] &= 0x3f; break;
  801268:	90bfffc4 	addi	r2,r18,-1
  80126c:	100490ba 	slli	r2,r2,2
  801270:	d8c05c04 	addi	r3,sp,368
  801274:	1885883a 	add	r2,r3,r2
  801278:	10ffb017 	ldw	r3,-320(r2)
  80127c:	18c00fcc 	andi	r3,r3,63
  801280:	10ffb015 	stw	r3,-320(r2)
	    if(ih==2) {
  801284:	b8800098 	cmpnei	r2,r23,2
  801288:	103f781e 	bne	r2,zero,80106c <__kernel_rem_pio2f+0x294>
		z = one - z;
  80128c:	400b883a 	mov	r5,r8
  801290:	010fe034 	movhi	r4,16256
  801294:	da400215 	stw	r9,8(sp)
  801298:	08024300 	call	802430 <__subsf3>
		if(carry!=0) z -= scalbnf(one,(int)q0);
  80129c:	da400217 	ldw	r9,8(sp)
		z = one - z;
  8012a0:	102d883a 	mov	r22,r2
  8012a4:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  8012a8:	483f7026 	beq	r9,zero,80106c <__kernel_rem_pio2f+0x294>
  8012ac:	d9400117 	ldw	r5,4(sp)
  8012b0:	010fe034 	movhi	r4,16256
  8012b4:	08019800 	call	801980 <scalbnf>
  8012b8:	100b883a 	mov	r5,r2
  8012bc:	b009883a 	mov	r4,r22
  8012c0:	08024300 	call	802430 <__subsf3>
  8012c4:	100d883a 	mov	r6,r2
  8012c8:	003f6806 	br	80106c <__kernel_rem_pio2f+0x294>
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  8012cc:	0005883a 	mov	r2,zero
  8012d0:	003ef106 	br	800e98 <__kernel_rem_pio2f+0xc0>
		    if(j!=0) {
  8012d4:	00800044 	movi	r2,1
  8012d8:	0007883a 	mov	r3,zero
  8012dc:	003fc406 	br	8011f0 <__kernel_rem_pio2f+0x418>
	else if(z>=(float)0.5) ih=2;
  8012e0:	4009883a 	mov	r4,r8
  8012e4:	014fc034 	movhi	r5,16128
  8012e8:	da000915 	stw	r8,36(sp)
  8012ec:	da000215 	stw	r8,8(sp)
  8012f0:	0801f780 	call	801f78 <__gesf2>
  8012f4:	da000217 	ldw	r8,8(sp)
  8012f8:	d9800917 	ldw	r6,36(sp)
  8012fc:	1000a70e 	bge	r2,zero,80159c <__kernel_rem_pio2f+0x7c4>
	ih = 0;
  801300:	002f883a 	mov	r23,zero
  801304:	003f5906 	br	80106c <__kernel_rem_pio2f+0x294>
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  801308:	95800044 	addi	r22,r18,1
  80130c:	b023883a 	mov	r17,r22
  801310:	003f7306 	br	8010e0 <__kernel_rem_pio2f+0x308>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
  801314:	d8c00117 	ldw	r3,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  801318:	400490ba 	slli	r2,r8,2
  80131c:	dd000317 	ldw	r20,12(sp)
	    jz -= 1; q0 -= 8;
  801320:	193ffe04 	addi	r4,r3,-8
	    while(iq[jz]==0) { jz--; q0-=8;}
  801324:	d8c05c04 	addi	r3,sp,368
  801328:	1887883a 	add	r3,r3,r2
  80132c:	18ffb017 	ldw	r3,-320(r3)
	    jz -= 1; q0 -= 8;
  801330:	d9000115 	stw	r4,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  801334:	b839883a 	mov	fp,r23
  801338:	1800091e 	bne	r3,zero,801360 <__kernel_rem_pio2f+0x588>
  80133c:	d8c00c04 	addi	r3,sp,48
  801340:	1885883a 	add	r2,r3,r2
  801344:	2007883a 	mov	r3,r4
  801348:	113fff17 	ldw	r4,-4(r2)
  80134c:	423fffc4 	addi	r8,r8,-1
  801350:	10bfff04 	addi	r2,r2,-4
  801354:	18fffe04 	addi	r3,r3,-8
  801358:	203ffb26 	beq	r4,zero,801348 <__kernel_rem_pio2f+0x570>
  80135c:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
  801360:	d9400117 	ldw	r5,4(sp)
  801364:	010fe034 	movhi	r4,16256
  801368:	da000015 	stw	r8,0(sp)
  80136c:	08019800 	call	801980 <scalbnf>
	for(i=jz;i>=0;i--) {
  801370:	da000017 	ldw	r8,0(sp)
	fw = scalbnf(one,(int)q0);
  801374:	102d883a 	mov	r22,r2
	for(i=jz;i>=0;i--) {
  801378:	4000f316 	blt	r8,zero,801748 <__kernel_rem_pio2f+0x970>
  80137c:	402090ba 	slli	r16,r8,2
  801380:	d8804804 	addi	r2,sp,288
  801384:	402f883a 	mov	r23,r8
  801388:	1427883a 	add	r19,r2,r16
  80138c:	d8800c04 	addi	r2,sp,48
  801390:	1425883a 	add	r18,r2,r16
  801394:	982b883a 	mov	r21,r19
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  801398:	91000017 	ldw	r4,0(r18)
	for(i=jz;i>=0;i--) {
  80139c:	ad7fff04 	addi	r21,r21,-4
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  8013a0:	08029340 	call	802934 <__floatsisf>
  8013a4:	1585c032 	custom	0,r2,r2,r22
  8013a8:	010ee034 	movhi	r4,15232
  8013ac:	9007883a 	mov	r3,r18
  8013b0:	a8800115 	stw	r2,4(r21)
	for(i=jz;i>=0;i--) {
  8013b4:	d8800c04 	addi	r2,sp,48
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  8013b8:	b12dc032 	custom	0,r22,r22,r4
	for(i=jz;i>=0;i--) {
  8013bc:	94bfff04 	addi	r18,r18,-4
  8013c0:	10fff51e 	bne	r2,r3,801398 <__kernel_rem_pio2f+0x5c0>
  8013c4:	dc803404 	addi	r18,sp,208
  8013c8:	b811883a 	mov	r8,r23
  8013cc:	9015883a 	mov	r10,r18
  8013d0:	0013883a 	mov	r9,zero
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  8013d4:	a0001716 	blt	r20,zero,801434 <__kernel_rem_pio2f+0x65c>
  8013d8:	01402074 	movhi	r5,129
  8013dc:	294a9e04 	addi	r5,r5,10872
  8013e0:	9809883a 	mov	r4,r19
  8013e4:	00cff274 	movhi	r3,16329
  8013e8:	000d883a 	mov	r6,zero
  8013ec:	0005883a 	mov	r2,zero
  8013f0:	00000306 	br	801400 <__kernel_rem_pio2f+0x628>
  8013f4:	48800816 	blt	r9,r2,801418 <__kernel_rem_pio2f+0x640>
  8013f8:	28c00017 	ldw	r3,0(r5)
  8013fc:	29400104 	addi	r5,r5,4
  801400:	21c00017 	ldw	r7,0(r4)
  801404:	10800044 	addi	r2,r2,1
  801408:	21000104 	addi	r4,r4,4
  80140c:	19c7c032 	custom	0,r3,r3,r7
  801410:	30cdc072 	custom	1,r6,r6,r3
  801414:	a0bff70e 	bge	r20,r2,8013f4 <__kernel_rem_pio2f+0x61c>
	    fq[jz-i] = fw;
  801418:	51800015 	stw	r6,0(r10)
	for(i=jz;i>=0;i--) {
  80141c:	48800044 	addi	r2,r9,1
  801420:	52800104 	addi	r10,r10,4
  801424:	9cffff04 	addi	r19,r19,-4
  801428:	42400426 	beq	r8,r9,80143c <__kernel_rem_pio2f+0x664>
  80142c:	1013883a 	mov	r9,r2
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  801430:	a03fe90e 	bge	r20,zero,8013d8 <__kernel_rem_pio2f+0x600>
  801434:	000d883a 	mov	r6,zero
  801438:	003ff706 	br	801418 <__kernel_rem_pio2f+0x640>
	}

    /* compress fq[] into y[] */
	switch(prec) {
  80143c:	d8806617 	ldw	r2,408(sp)
  801440:	108000c8 	cmpgei	r2,r2,3
  801444:	10001b1e 	bne	r2,zero,8014b4 <__kernel_rem_pio2f+0x6dc>
  801448:	d8806617 	ldw	r2,408(sp)
  80144c:	00808c16 	blt	zero,r2,801680 <__kernel_rem_pio2f+0x8a8>
  801450:	10000b1e 	bne	r2,zero,801480 <__kernel_rem_pio2f+0x6a8>
  801454:	9421883a 	add	r16,r18,r16
  801458:	0005883a 	mov	r2,zero
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
  80145c:	81000017 	ldw	r4,0(r16)
  801460:	8007883a 	mov	r3,r16
  801464:	843fff04 	addi	r16,r16,-4
  801468:	1105c072 	custom	1,r2,r2,r4
  80146c:	90fffb1e 	bne	r18,r3,80145c <__kernel_rem_pio2f+0x684>
		y[0] = (ih==0)? fw: -fw; 
  801470:	e0000126 	beq	fp,zero,801478 <__kernel_rem_pio2f+0x6a0>
  801474:	10a0003c 	xorhi	r2,r2,32768
  801478:	d8c00817 	ldw	r3,32(sp)
  80147c:	18800015 	stw	r2,0(r3)
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
		}
	}
	return n&7;
  801480:	888001cc 	andi	r2,r17,7
}
  801484:	dfc06517 	ldw	ra,404(sp)
  801488:	df006417 	ldw	fp,400(sp)
  80148c:	ddc06317 	ldw	r23,396(sp)
  801490:	dd806217 	ldw	r22,392(sp)
  801494:	dd406117 	ldw	r21,388(sp)
  801498:	dd006017 	ldw	r20,384(sp)
  80149c:	dcc05f17 	ldw	r19,380(sp)
  8014a0:	dc805e17 	ldw	r18,376(sp)
  8014a4:	dc405d17 	ldw	r17,372(sp)
  8014a8:	dc005c17 	ldw	r16,368(sp)
  8014ac:	dec06604 	addi	sp,sp,408
  8014b0:	f800283a 	ret
	switch(prec) {
  8014b4:	d8806617 	ldw	r2,408(sp)
  8014b8:	108000e0 	cmpeqi	r2,r2,3
  8014bc:	103ff026 	beq	r2,zero,801480 <__kernel_rem_pio2f+0x6a8>
		for (i=jz;i>0;i--) {
  8014c0:	4000ad26 	beq	r8,zero,801778 <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  8014c4:	d8805c04 	addi	r2,sp,368
  8014c8:	1405883a 	add	r2,r2,r16
  8014cc:	153fd817 	ldw	r20,-160(r2)
  8014d0:	9427883a 	add	r19,r18,r16
  8014d4:	402b883a 	mov	r21,r8
  8014d8:	993fff17 	ldw	r4,-4(r19)
  8014dc:	a02d883a 	mov	r22,r20
		for (i=jz;i>0;i--) {
  8014e0:	9cffff04 	addi	r19,r19,-4
		    fw      = fq[i-1]+fq[i]; 
  8014e4:	a129c072 	custom	1,r20,r20,r4
		    fq[i]  += fq[i-1]-fw;
  8014e8:	a00b883a 	mov	r5,r20
  8014ec:	08024300 	call	802430 <__subsf3>
  8014f0:	1585c072 	custom	1,r2,r2,r22
  8014f4:	98800115 	stw	r2,4(r19)
		    fq[i-1] = fw;
  8014f8:	9d000015 	stw	r20,0(r19)
		for (i=jz;i>0;i--) {
  8014fc:	94fff61e 	bne	r18,r19,8014d8 <__kernel_rem_pio2f+0x700>
		for (i=jz;i>1;i--) {
  801500:	aa000088 	cmpgei	r8,r21,2
  801504:	40009c26 	beq	r8,zero,801778 <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  801508:	d8805c04 	addi	r2,sp,368
  80150c:	1405883a 	add	r2,r2,r16
  801510:	14ffd817 	ldw	r19,-160(r2)
  801514:	9425883a 	add	r18,r18,r16
  801518:	dd003504 	addi	r20,sp,212
  80151c:	9021883a 	mov	r16,r18
  801520:	813fff17 	ldw	r4,-4(r16)
  801524:	982b883a 	mov	r21,r19
		for (i=jz;i>1;i--) {
  801528:	843fff04 	addi	r16,r16,-4
		    fw      = fq[i-1]+fq[i]; 
  80152c:	9927c072 	custom	1,r19,r19,r4
		    fq[i]  += fq[i-1]-fw;
  801530:	980b883a 	mov	r5,r19
  801534:	08024300 	call	802430 <__subsf3>
  801538:	1545c072 	custom	1,r2,r2,r21
  80153c:	80800115 	stw	r2,4(r16)
		    fq[i-1] = fw;
  801540:	84c00015 	stw	r19,0(r16)
		for (i=jz;i>1;i--) {
  801544:	a43ff61e 	bne	r20,r16,801520 <__kernel_rem_pio2f+0x748>
  801548:	0005883a 	mov	r2,zero
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  80154c:	90c00017 	ldw	r3,0(r18)
  801550:	94bfff04 	addi	r18,r18,-4
  801554:	10c5c072 	custom	1,r2,r2,r3
  801558:	a4bffc1e 	bne	r20,r18,80154c <__kernel_rem_pio2f+0x774>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
  80155c:	d9003417 	ldw	r4,208(sp)
  801560:	d8c03517 	ldw	r3,212(sp)
		if(ih==0) {
  801564:	e000691e 	bne	fp,zero,80170c <__kernel_rem_pio2f+0x934>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  801568:	d9400817 	ldw	r5,32(sp)
  80156c:	29000015 	stw	r4,0(r5)
  801570:	28c00115 	stw	r3,4(r5)
  801574:	28800215 	stw	r2,8(r5)
  801578:	003fc106 	br	801480 <__kernel_rem_pio2f+0x6a8>
	    	   iq[jz-1] &= 0x7f; break;
  80157c:	90bfffc4 	addi	r2,r18,-1
  801580:	100490ba 	slli	r2,r2,2
  801584:	d8c05c04 	addi	r3,sp,368
  801588:	1885883a 	add	r2,r3,r2
  80158c:	10ffb017 	ldw	r3,-320(r2)
  801590:	18c01fcc 	andi	r3,r3,127
  801594:	10ffb015 	stw	r3,-320(r2)
  801598:	003f3a06 	br	801284 <__kernel_rem_pio2f+0x4ac>
	    n += 1; carry = 0;
  80159c:	8c400044 	addi	r17,r17,1
	else if(z>=(float)0.5) ih=2;
  8015a0:	05c00084 	movi	r23,2
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8015a4:	04bf0216 	blt	zero,r18,8011b0 <__kernel_rem_pio2f+0x3d8>
		z = one - z;
  8015a8:	400b883a 	mov	r5,r8
  8015ac:	010fe034 	movhi	r4,16256
  8015b0:	08024300 	call	802430 <__subsf3>
  8015b4:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  8015b8:	003eac06 	br	80106c <__kernel_rem_pio2f+0x294>
  8015bc:	00800204 	movi	r2,8
  8015c0:	d8800a15 	stw	r2,40(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  8015c4:	d8000415 	stw	zero,16(sp)
  8015c8:	003e2206 	br	800e54 <__kernel_rem_pio2f+0x7c>
  8015cc:	30800104 	addi	r2,r6,4
  8015d0:	003e1b06 	br	800e40 <__kernel_rem_pio2f+0x68>
	    n += 1; carry = 0;
  8015d4:	0013883a 	mov	r9,zero
  8015d8:	003f1d06 	br	801250 <__kernel_rem_pio2f+0x478>
	    z = scalbnf(z,-(int)q0);
  8015dc:	d8800a17 	ldw	r2,40(sp)
  8015e0:	d8c00b17 	ldw	r3,44(sp)
  8015e4:	3009883a 	mov	r4,r6
  8015e8:	dd000317 	ldw	r20,12(sp)
  8015ec:	10cbc83a 	sub	r5,r2,r3
  8015f0:	08019800 	call	801980 <scalbnf>
	    if(z>=two8) { 
  8015f4:	0150e034 	movhi	r5,17280
  8015f8:	1009883a 	mov	r4,r2
	    z = scalbnf(z,-(int)q0);
  8015fc:	b839883a 	mov	fp,r23
  801600:	1027883a 	mov	r19,r2
	    if(z>=two8) { 
  801604:	0801f780 	call	801f78 <__gesf2>
  801608:	10003816 	blt	r2,zero,8016ec <__kernel_rem_pio2f+0x914>
		fw = (float)((__int32_t)(twon8*z));
  80160c:	010ee034 	movhi	r4,15232
  801610:	9909c032 	custom	0,r4,r19,r4
  801614:	08028c40 	call	8028c4 <__fixsfsi>
  801618:	1009883a 	mov	r4,r2
  80161c:	08029340 	call	802934 <__floatsisf>
		iq[jz] = (__int32_t)(z-two8*fw);
  801620:	0150e034 	movhi	r5,17280
  801624:	114bc032 	custom	0,r5,r2,r5
  801628:	9809883a 	mov	r4,r19
		fw = (float)((__int32_t)(twon8*z));
  80162c:	102b883a 	mov	r21,r2
		iq[jz] = (__int32_t)(z-two8*fw);
  801630:	08024300 	call	802430 <__subsf3>
		jz += 1; q0 += 8;
  801634:	92000044 	addi	r8,r18,1
		iq[jz] = (__int32_t)(z-two8*fw);
  801638:	1009883a 	mov	r4,r2
		jz += 1; q0 += 8;
  80163c:	da000215 	stw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  801640:	08028c40 	call	8028c4 <__fixsfsi>
		iq[jz] = (__int32_t) fw;
  801644:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  801648:	d9000017 	ldw	r4,0(sp)
  80164c:	d8c05c04 	addi	r3,sp,368
		iq[jz] = (__int32_t) fw;
  801650:	402490ba 	slli	r18,r8,2
		iq[jz] = (__int32_t)(z-two8*fw);
  801654:	1921883a 	add	r16,r3,r4
  801658:	80bfb015 	stw	r2,-320(r16)
		iq[jz] = (__int32_t) fw;
  80165c:	a809883a 	mov	r4,r21
  801660:	1ca5883a 	add	r18,r3,r18
  801664:	08028c40 	call	8028c4 <__fixsfsi>
		jz += 1; q0 += 8;
  801668:	d8c00117 	ldw	r3,4(sp)
  80166c:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t) fw;
  801670:	90bfb015 	stw	r2,-320(r18)
		jz += 1; q0 += 8;
  801674:	18c00204 	addi	r3,r3,8
  801678:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
  80167c:	003f3806 	br	801360 <__kernel_rem_pio2f+0x588>
		for (i=jz;i>=0;i--) fw += fq[i]; 
  801680:	9421883a 	add	r16,r18,r16
		fw = 0.0;
  801684:	000b883a 	mov	r5,zero
		for (i=jz;i>=0;i--) fw += fq[i]; 
  801688:	80c00017 	ldw	r3,0(r16)
  80168c:	8005883a 	mov	r2,r16
  801690:	843fff04 	addi	r16,r16,-4
  801694:	28cbc072 	custom	1,r5,r5,r3
  801698:	90bffb1e 	bne	r18,r2,801688 <__kernel_rem_pio2f+0x8b0>
		y[0] = (ih==0)? fw: -fw; 
  80169c:	da000015 	stw	r8,0(sp)
		fw = fq[0]-fw;
  8016a0:	d9003417 	ldw	r4,208(sp)
		y[0] = (ih==0)? fw: -fw; 
  8016a4:	e000211e 	bne	fp,zero,80172c <__kernel_rem_pio2f+0x954>
  8016a8:	d8800817 	ldw	r2,32(sp)
  8016ac:	11400015 	stw	r5,0(r2)
		fw = fq[0]-fw;
  8016b0:	08024300 	call	802430 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  8016b4:	da000017 	ldw	r8,0(sp)
  8016b8:	0200090e 	bge	zero,r8,8016e0 <__kernel_rem_pio2f+0x908>
  8016bc:	d9003504 	addi	r4,sp,212
  8016c0:	00c00044 	movi	r3,1
  8016c4:	21400017 	ldw	r5,0(r4)
  8016c8:	18c00044 	addi	r3,r3,1
  8016cc:	21000104 	addi	r4,r4,4
  8016d0:	1145c072 	custom	1,r2,r2,r5
  8016d4:	40fffb0e 	bge	r8,r3,8016c4 <__kernel_rem_pio2f+0x8ec>
		y[1] = (ih==0)? fw: -fw; 
  8016d8:	e0000126 	beq	fp,zero,8016e0 <__kernel_rem_pio2f+0x908>
  8016dc:	10a0003c 	xorhi	r2,r2,32768
  8016e0:	d8c00817 	ldw	r3,32(sp)
  8016e4:	18800115 	stw	r2,4(r3)
		break;
  8016e8:	003f6506 	br	801480 <__kernel_rem_pio2f+0x6a8>
	    } else iq[jz] = (__int32_t) z ;
  8016ec:	9809883a 	mov	r4,r19
  8016f0:	08028c40 	call	8028c4 <__fixsfsi>
  8016f4:	d9000017 	ldw	r4,0(sp)
  8016f8:	d8c05c04 	addi	r3,sp,368
  8016fc:	9011883a 	mov	r8,r18
  801700:	1921883a 	add	r16,r3,r4
  801704:	80bfb015 	stw	r2,-320(r16)
  801708:	003f1506 	br	801360 <__kernel_rem_pio2f+0x588>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  80170c:	d9400817 	ldw	r5,32(sp)
  801710:	2120003c 	xorhi	r4,r4,32768
  801714:	18e0003c 	xorhi	r3,r3,32768
  801718:	10a0003c 	xorhi	r2,r2,32768
  80171c:	29000015 	stw	r4,0(r5)
  801720:	28c00115 	stw	r3,4(r5)
  801724:	28800215 	stw	r2,8(r5)
  801728:	003f5506 	br	801480 <__kernel_rem_pio2f+0x6a8>
		y[0] = (ih==0)? fw: -fw; 
  80172c:	d8c00817 	ldw	r3,32(sp)
  801730:	28a0003c 	xorhi	r2,r5,32768
  801734:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
  801738:	08024300 	call	802430 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  80173c:	da000017 	ldw	r8,0(sp)
  801740:	023fde16 	blt	zero,r8,8016bc <__kernel_rem_pio2f+0x8e4>
  801744:	003fe506 	br	8016dc <__kernel_rem_pio2f+0x904>
	switch(prec) {
  801748:	d8806617 	ldw	r2,408(sp)
  80174c:	108000c8 	cmpgei	r2,r2,3
  801750:	1000061e 	bne	r2,zero,80176c <__kernel_rem_pio2f+0x994>
  801754:	d8806617 	ldw	r2,408(sp)
  801758:	00800916 	blt	zero,r2,801780 <__kernel_rem_pio2f+0x9a8>
  80175c:	103f481e 	bne	r2,zero,801480 <__kernel_rem_pio2f+0x6a8>
  801760:	0005883a 	mov	r2,zero
		y[0] = (ih==0)? fw: -fw; 
  801764:	e03f4426 	beq	fp,zero,801478 <__kernel_rem_pio2f+0x6a0>
  801768:	003f4206 	br	801474 <__kernel_rem_pio2f+0x69c>
	switch(prec) {
  80176c:	d8806617 	ldw	r2,408(sp)
  801770:	108000e0 	cmpeqi	r2,r2,3
  801774:	103f4226 	beq	r2,zero,801480 <__kernel_rem_pio2f+0x6a8>
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  801778:	0005883a 	mov	r2,zero
  80177c:	003f7706 	br	80155c <__kernel_rem_pio2f+0x784>
		fw = 0.0;
  801780:	000b883a 	mov	r5,zero
  801784:	003fc506 	br	80169c <__kernel_rem_pio2f+0x8c4>

00801788 <__kernel_sinf>:
#endif
{
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
  801788:	00a00034 	movhi	r2,32768
{
  80178c:	defffa04 	addi	sp,sp,-24
	ix &= 0x7fffffff;			/* high word of x */
  801790:	10bfffc4 	addi	r2,r2,-1
{
  801794:	dcc00315 	stw	r19,12(sp)
  801798:	dc800215 	stw	r18,8(sp)
  80179c:	dc000015 	stw	r16,0(sp)
  8017a0:	dfc00515 	stw	ra,20(sp)
  8017a4:	dd000415 	stw	r20,16(sp)
  8017a8:	dc400115 	stw	r17,4(sp)
	ix &= 0x7fffffff;			/* high word of x */
  8017ac:	1104703a 	and	r2,r2,r4
	if(ix<0x32000000)			/* |x| < 2**-27 */
  8017b0:	00cc8034 	movhi	r3,12800
{
  8017b4:	2021883a 	mov	r16,r4
  8017b8:	2827883a 	mov	r19,r5
  8017bc:	3025883a 	mov	r18,r6
	if(ix<0x32000000)			/* |x| < 2**-27 */
  8017c0:	10c0020e 	bge	r2,r3,8017cc <__kernel_sinf+0x44>
	   {if((int)x==0) return x;}		/* generate inexact */
  8017c4:	08028c40 	call	8028c4 <__fixsfsi>
  8017c8:	10003126 	beq	r2,zero,801890 <__kernel_sinf+0x108>
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  8017cc:	010bcbf4 	movhi	r4,12079
	z	=  x*x;
  8017d0:	8423c032 	custom	0,r17,r16,r16
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  8017d4:	213274c4 	addi	r4,r4,-13869
  8017d8:	014cb5f4 	movhi	r5,13015
  8017dc:	294bcd04 	addi	r5,r5,12084
  8017e0:	8909c032 	custom	0,r4,r17,r4
  8017e4:	08024300 	call	802430 <__subsf3>
  8017e8:	00cd8e74 	movhi	r3,13881
  8017ec:	18fbc6c4 	addi	r3,r3,-4325
  8017f0:	1449c032 	custom	0,r4,r2,r17
  8017f4:	20c9c072 	custom	1,r4,r4,r3
  8017f8:	014e5434 	movhi	r5,14672
  8017fc:	29434044 	addi	r5,r5,3329
  801800:	2449c032 	custom	0,r4,r4,r17
  801804:	08024300 	call	802430 <__subsf3>
  801808:	00cf0274 	movhi	r3,15369
  80180c:	1445c032 	custom	0,r2,r2,r17
  801810:	18e22244 	addi	r3,r3,-30583
	v	=  z*x;
  801814:	8469c032 	custom	0,r20,r16,r17
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  801818:	10c5c072 	custom	1,r2,r2,r3
	if(iy==0) return x+v*(S1+z*r);
  80181c:	90001526 	beq	r18,zero,801874 <__kernel_sinf+0xec>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
  801820:	010fc034 	movhi	r4,16128
  801824:	a08bc032 	custom	0,r5,r20,r2
  801828:	9909c032 	custom	0,r4,r19,r4
  80182c:	08024300 	call	802430 <__subsf3>
  801830:	980b883a 	mov	r5,r19
  801834:	1449c032 	custom	0,r4,r2,r17
  801838:	08024300 	call	802430 <__subsf3>
  80183c:	00cf8af4 	movhi	r3,15915
  801840:	18eaaac4 	addi	r3,r3,-21845
  801844:	a0e9c032 	custom	0,r20,r20,r3
  801848:	150bc072 	custom	1,r5,r2,r20
  80184c:	8009883a 	mov	r4,r16
  801850:	08024300 	call	802430 <__subsf3>
}
  801854:	dfc00517 	ldw	ra,20(sp)
  801858:	dd000417 	ldw	r20,16(sp)
  80185c:	dcc00317 	ldw	r19,12(sp)
  801860:	dc800217 	ldw	r18,8(sp)
  801864:	dc400117 	ldw	r17,4(sp)
  801868:	dc000017 	ldw	r16,0(sp)
  80186c:	dec00604 	addi	sp,sp,24
  801870:	f800283a 	ret
	if(iy==0) return x+v*(S1+z*r);
  801874:	014f8af4 	movhi	r5,15915
  801878:	296aaac4 	addi	r5,r5,-21845
  80187c:	8889c032 	custom	0,r4,r17,r2
  801880:	08024300 	call	802430 <__subsf3>
  801884:	1505c032 	custom	0,r2,r2,r20
  801888:	1405c072 	custom	1,r2,r2,r16
  80188c:	003ff106 	br	801854 <__kernel_sinf+0xcc>
	   {if((int)x==0) return x;}		/* generate inexact */
  801890:	8005883a 	mov	r2,r16
  801894:	003fef06 	br	801854 <__kernel_sinf+0xcc>

00801898 <floorf>:
#endif
{
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
  801898:	00a00034 	movhi	r2,32768
{
  80189c:	defffb04 	addi	sp,sp,-20
	ix = (i0&0x7fffffff);
  8018a0:	10bfffc4 	addi	r2,r2,-1
{
  8018a4:	dc400115 	stw	r17,4(sp)
	ix = (i0&0x7fffffff);
  8018a8:	1122703a 	and	r17,r2,r4
{
  8018ac:	dc800215 	stw	r18,8(sp)
	j0 = (ix>>23)-0x7f;
  8018b0:	8824d5fa 	srli	r18,r17,23
{
  8018b4:	dc000015 	stw	r16,0(sp)
  8018b8:	dfc00415 	stw	ra,16(sp)
	j0 = (ix>>23)-0x7f;
  8018bc:	94bfe044 	addi	r18,r18,-127
{
  8018c0:	dcc00315 	stw	r19,12(sp)
	if(j0<23) {
  8018c4:	908005c8 	cmpgei	r2,r18,23
{
  8018c8:	2021883a 	mov	r16,r4
	if(j0<23) {
  8018cc:	1000251e 	bne	r2,zero,801964 <floorf+0xcc>
  8018d0:	2027883a 	mov	r19,r4
	    if(j0<0) { 	/* raise inexact if x != 0 */
  8018d4:	90001216 	blt	r18,zero,801920 <floorf+0x88>
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
			{ i0=0xbf800000;}
		}
	    } else {
		i = (0x007fffff)>>j0;
  8018d8:	00802034 	movhi	r2,128
  8018dc:	10bfffc4 	addi	r2,r2,-1
  8018e0:	14a3d83a 	sra	r17,r2,r18
		if((i0&i)==0) return x; /* x is integral */
  8018e4:	8904703a 	and	r2,r17,r4
  8018e8:	10001626 	beq	r2,zero,801944 <floorf+0xac>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
  8018ec:	011c52b4 	movhi	r4,29002
  8018f0:	213cb284 	addi	r4,r4,-3382
  8018f4:	000b883a 	mov	r5,zero
  8018f8:	8109c072 	custom	1,r4,r16,r4
  8018fc:	0801f780 	call	801f78 <__gesf2>
  801900:	0080100e 	bge	zero,r2,801944 <floorf+0xac>
		    if(i0<0) i0 += (0x00800000)>>j0;
  801904:	8000030e 	bge	r16,zero,801914 <floorf+0x7c>
  801908:	00802034 	movhi	r2,128
  80190c:	1485d83a 	sra	r2,r2,r18
  801910:	1427883a 	add	r19,r2,r16
		    i0 &= (~i);
  801914:	0460303a 	nor	r16,zero,r17
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
  801918:	84c4703a 	and	r2,r16,r19
  80191c:	00000a06 	br	801948 <floorf+0xb0>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
  801920:	011c52b4 	movhi	r4,29002
  801924:	213cb284 	addi	r4,r4,-3382
  801928:	000b883a 	mov	r5,zero
  80192c:	8109c072 	custom	1,r4,r16,r4
  801930:	0801f780 	call	801f78 <__gesf2>
  801934:	0080030e 	bge	zero,r2,801944 <floorf+0xac>
		    if(i0>=0) {i0=0;} 
  801938:	80000e16 	blt	r16,zero,801974 <floorf+0xdc>
  80193c:	0005883a 	mov	r2,zero
  801940:	00000106 	br	801948 <floorf+0xb0>
		if((i0&i)==0) return x; /* x is integral */
  801944:	8005883a 	mov	r2,r16
	return x;
}
  801948:	dfc00417 	ldw	ra,16(sp)
  80194c:	dcc00317 	ldw	r19,12(sp)
  801950:	dc800217 	ldw	r18,8(sp)
  801954:	dc400117 	ldw	r17,4(sp)
  801958:	dc000017 	ldw	r16,0(sp)
  80195c:	dec00504 	addi	sp,sp,20
  801960:	f800283a 	ret
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
  801964:	009fe034 	movhi	r2,32640
  801968:	88bff636 	bltu	r17,r2,801944 <floorf+0xac>
  80196c:	2105c072 	custom	1,r2,r4,r4
  801970:	003ff506 	br	801948 <floorf+0xb0>
		    else if(!FLT_UWORD_IS_ZERO(ix))
  801974:	883ff326 	beq	r17,zero,801944 <floorf+0xac>
  801978:	00afe034 	movhi	r2,49024
  80197c:	003ff206 	br	801948 <floorf+0xb0>

00801980 <scalbnf>:
{
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
  801980:	00e00034 	movhi	r3,32768
  801984:	18ffffc4 	addi	r3,r3,-1
  801988:	1906703a 	and	r3,r3,r4
	GET_FLOAT_WORD(ix,x);
  80198c:	2005883a 	mov	r2,r4
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
  801990:	18001b26 	beq	r3,zero,801a00 <scalbnf+0x80>
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
  801994:	019fe034 	movhi	r6,32640
  801998:	1980172e 	bgeu	r3,r6,8019f8 <scalbnf+0x78>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
  80199c:	209fe02c 	andhi	r2,r4,32640
  8019a0:	1000181e 	bne	r2,zero,801a04 <scalbnf+0x84>
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
  8019a4:	00bffff4 	movhi	r2,65535
	    x *= two25;
  8019a8:	00d30034 	movhi	r3,19456
            if (n< -50000) return tiny*x; 	/*underflow*/
  8019ac:	108f2c04 	addi	r2,r2,15536
	    x *= two25;
  8019b0:	20c9c032 	custom	0,r4,r4,r3
            if (n< -50000) return tiny*x; 	/*underflow*/
  8019b4:	28802c16 	blt	r5,r2,801a68 <scalbnf+0xe8>
	    k = ((ix&0x7f800000)>>23) - 25; 
  8019b8:	2007d5fa 	srai	r3,r4,23
	    GET_FLOAT_WORD(ix,x);
  8019bc:	2005883a 	mov	r2,r4
	    k = ((ix&0x7f800000)>>23) - 25; 
  8019c0:	18c03fcc 	andi	r3,r3,255
  8019c4:	18fff9c4 	addi	r3,r3,-25
        }
        k = k+n; 
  8019c8:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  8019cc:	19803fd0 	cmplti	r6,r3,255
  8019d0:	3000111e 	bne	r6,zero,801a18 <scalbnf+0x98>
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
  8019d4:	009c52b4 	movhi	r2,29002
  8019d8:	10bcb284 	addi	r2,r2,-3382
  8019dc:	2000020e 	bge	r4,zero,8019e8 <scalbnf+0x68>
  8019e0:	00bc52b4 	movhi	r2,61770
  8019e4:	10bcb284 	addi	r2,r2,-3382
  8019e8:	011c52b4 	movhi	r4,29002
  8019ec:	213cb284 	addi	r4,r4,-3382
  8019f0:	1105c032 	custom	0,r2,r2,r4
  8019f4:	f800283a 	ret
	    return x+x;		/* NaN or Inf */
  8019f8:	2105c072 	custom	1,r2,r4,r4
  8019fc:	f800283a 	ret
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
        return x*twom25;
}
  801a00:	f800283a 	ret
        k = hx>>23;		/* extract exponent */
  801a04:	1806d5fa 	srli	r3,r3,23
	GET_FLOAT_WORD(ix,x);
  801a08:	2005883a 	mov	r2,r4
        k = k+n; 
  801a0c:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  801a10:	19803fd0 	cmplti	r6,r3,255
  801a14:	303fef26 	beq	r6,zero,8019d4 <scalbnf+0x54>
        if (k > 0) 				/* normal result */
  801a18:	00c00d16 	blt	zero,r3,801a50 <scalbnf+0xd0>
        if (k < FLT_SMALLEST_EXP) {
  801a1c:	19bffa88 	cmpgei	r6,r3,-22
  801a20:	3000151e 	bne	r6,zero,801a78 <scalbnf+0xf8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
  801a24:	00b0d414 	movui	r2,50000
  801a28:	117fea16 	blt	r2,r5,8019d4 <scalbnf+0x54>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
  801a2c:	008368b4 	movhi	r2,3490
  801a30:	10909804 	addi	r2,r2,16992
  801a34:	2000020e 	bge	r4,zero,801a40 <scalbnf+0xc0>
  801a38:	00a368b4 	movhi	r2,36258
  801a3c:	10909804 	addi	r2,r2,16992
  801a40:	010368b4 	movhi	r4,3490
  801a44:	21109804 	addi	r4,r4,16992
  801a48:	1105c032 	custom	0,r2,r2,r4
  801a4c:	f800283a 	ret
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
  801a50:	180695fa 	slli	r3,r3,23
  801a54:	01202034 	movhi	r4,32896
  801a58:	213fffc4 	addi	r4,r4,-1
  801a5c:	1104703a 	and	r2,r2,r4
  801a60:	10c4b03a 	or	r2,r2,r3
  801a64:	f800283a 	ret
            if (n< -50000) return tiny*x; 	/*underflow*/
  801a68:	008368b4 	movhi	r2,3490
  801a6c:	10909804 	addi	r2,r2,16992
  801a70:	2085c032 	custom	0,r2,r4,r2
  801a74:	f800283a 	ret
        k += 25;				/* subnormal result */
  801a78:	18c00644 	addi	r3,r3,25
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
  801a7c:	180695fa 	slli	r3,r3,23
  801a80:	01202034 	movhi	r4,32896
  801a84:	213fffc4 	addi	r4,r4,-1
  801a88:	1104703a 	and	r2,r2,r4
  801a8c:	1884b03a 	or	r2,r3,r2
        return x*twom25;
  801a90:	010cc034 	movhi	r4,13056
  801a94:	1105c032 	custom	0,r2,r2,r4
  801a98:	f800283a 	ret

00801a9c <__addsf3>:
  801a9c:	defffc04 	addi	sp,sp,-16
  801aa0:	2806d5fa 	srli	r3,r5,23
  801aa4:	dc000015 	stw	r16,0(sp)
  801aa8:	2020d5fa 	srli	r16,r4,23
  801aac:	200cd7fa 	srli	r6,r4,31
  801ab0:	00802034 	movhi	r2,128
  801ab4:	2812d7fa 	srli	r9,r5,31
  801ab8:	10bfffc4 	addi	r2,r2,-1
  801abc:	1114703a 	and	r10,r2,r4
  801ac0:	1b003fcc 	andi	r12,r3,255
  801ac4:	dc400115 	stw	r17,4(sp)
  801ac8:	84003fcc 	andi	r16,r16,255
  801acc:	115a703a 	and	r13,r2,r5
  801ad0:	dfc00315 	stw	ra,12(sp)
  801ad4:	dc800215 	stw	r18,8(sp)
  801ad8:	500e90fa 	slli	r7,r10,3
  801adc:	681090fa 	slli	r8,r13,3
  801ae0:	5007883a 	mov	r3,r10
  801ae4:	3023883a 	mov	r17,r6
  801ae8:	8317c83a 	sub	r11,r16,r12
  801aec:	32403926 	beq	r6,r9,801bd4 <__addsf3+0x138>
  801af0:	02c02e0e 	bge	zero,r11,801bac <__addsf3+0x110>
  801af4:	60004c26 	beq	r12,zero,801c28 <__addsf3+0x18c>
  801af8:	80803fe0 	cmpeqi	r2,r16,255
  801afc:	1000801e 	bne	r2,zero,801d00 <__addsf3+0x264>
  801b00:	42010034 	orhi	r8,r8,1024
  801b04:	58800710 	cmplti	r2,r11,28
  801b08:	10009e1e 	bne	r2,zero,801d84 <__addsf3+0x2e8>
  801b0c:	01000044 	movi	r4,1
  801b10:	3909c83a 	sub	r4,r7,r4
  801b14:	2081002c 	andhi	r2,r4,1024
  801b18:	10006826 	beq	r2,zero,801cbc <__addsf3+0x220>
  801b1c:	04810034 	movhi	r18,1024
  801b20:	94bfffc4 	addi	r18,r18,-1
  801b24:	24a4703a 	and	r18,r4,r18
  801b28:	9009883a 	mov	r4,r18
  801b2c:	0802b540 	call	802b54 <__clzsi2>
  801b30:	10bffec4 	addi	r2,r2,-5
  801b34:	9088983a 	sll	r4,r18,r2
  801b38:	1400880e 	bge	r2,r16,801d5c <__addsf3+0x2c0>
  801b3c:	00ff0034 	movhi	r3,64512
  801b40:	18ffffc4 	addi	r3,r3,-1
  801b44:	80a1c83a 	sub	r16,r16,r2
  801b48:	20c8703a 	and	r4,r4,r3
  801b4c:	208001cc 	andi	r2,r4,7
  801b50:	10000426 	beq	r2,zero,801b64 <__addsf3+0xc8>
  801b54:	208003cc 	andi	r2,r4,15
  801b58:	10800120 	cmpeqi	r2,r2,4
  801b5c:	1000011e 	bne	r2,zero,801b64 <__addsf3+0xc8>
  801b60:	21000104 	addi	r4,r4,4
  801b64:	2081002c 	andhi	r2,r4,1024
  801b68:	10005626 	beq	r2,zero,801cc4 <__addsf3+0x228>
  801b6c:	84000044 	addi	r16,r16,1
  801b70:	80803fe0 	cmpeqi	r2,r16,255
  801b74:	1000461e 	bne	r2,zero,801c90 <__addsf3+0x1f4>
  801b78:	200491ba 	slli	r2,r4,6
  801b7c:	1006d27a 	srli	r3,r2,9
  801b80:	84003fcc 	andi	r16,r16,255
  801b84:	800495fa 	slli	r2,r16,23
  801b88:	882297fa 	slli	r17,r17,31
  801b8c:	10c4b03a 	or	r2,r2,r3
  801b90:	1444b03a 	or	r2,r2,r17
  801b94:	dfc00317 	ldw	ra,12(sp)
  801b98:	dc800217 	ldw	r18,8(sp)
  801b9c:	dc400117 	ldw	r17,4(sp)
  801ba0:	dc000017 	ldw	r16,0(sp)
  801ba4:	dec00404 	addi	sp,sp,16
  801ba8:	f800283a 	ret
  801bac:	58002526 	beq	r11,zero,801c44 <__addsf3+0x1a8>
  801bb0:	6417c83a 	sub	r11,r12,r16
  801bb4:	8000821e 	bne	r16,zero,801dc0 <__addsf3+0x324>
  801bb8:	38006426 	beq	r7,zero,801d4c <__addsf3+0x2b0>
  801bbc:	58bfffc4 	addi	r2,r11,-1
  801bc0:	1000c226 	beq	r2,zero,801ecc <__addsf3+0x430>
  801bc4:	5ac03fe0 	cmpeqi	r11,r11,255
  801bc8:	58004b1e 	bne	r11,zero,801cf8 <__addsf3+0x25c>
  801bcc:	1017883a 	mov	r11,r2
  801bd0:	00007e06 	br	801dcc <__addsf3+0x330>
  801bd4:	02c0510e 	bge	zero,r11,801d1c <__addsf3+0x280>
  801bd8:	60002626 	beq	r12,zero,801c74 <__addsf3+0x1d8>
  801bdc:	80803fe0 	cmpeqi	r2,r16,255
  801be0:	1000471e 	bne	r2,zero,801d00 <__addsf3+0x264>
  801be4:	42010034 	orhi	r8,r8,1024
  801be8:	58800710 	cmplti	r2,r11,28
  801bec:	10007e1e 	bne	r2,zero,801de8 <__addsf3+0x34c>
  801bf0:	01000044 	movi	r4,1
  801bf4:	21c9883a 	add	r4,r4,r7
  801bf8:	2081002c 	andhi	r2,r4,1024
  801bfc:	10002f26 	beq	r2,zero,801cbc <__addsf3+0x220>
  801c00:	84000044 	addi	r16,r16,1
  801c04:	80803fe0 	cmpeqi	r2,r16,255
  801c08:	1000211e 	bne	r2,zero,801c90 <__addsf3+0x1f4>
  801c0c:	2004d07a 	srli	r2,r4,1
  801c10:	00df8034 	movhi	r3,32256
  801c14:	18ffffc4 	addi	r3,r3,-1
  801c18:	2100004c 	andi	r4,r4,1
  801c1c:	10c4703a 	and	r2,r2,r3
  801c20:	1108b03a 	or	r4,r2,r4
  801c24:	003fc906 	br	801b4c <__addsf3+0xb0>
  801c28:	40004a26 	beq	r8,zero,801d54 <__addsf3+0x2b8>
  801c2c:	58bfffc4 	addi	r2,r11,-1
  801c30:	10009326 	beq	r2,zero,801e80 <__addsf3+0x3e4>
  801c34:	59003fe0 	cmpeqi	r4,r11,255
  801c38:	2000311e 	bne	r4,zero,801d00 <__addsf3+0x264>
  801c3c:	1017883a 	mov	r11,r2
  801c40:	003fb006 	br	801b04 <__addsf3+0x68>
  801c44:	81800044 	addi	r6,r16,1
  801c48:	31803f8c 	andi	r6,r6,254
  801c4c:	3000541e 	bne	r6,zero,801da0 <__addsf3+0x304>
  801c50:	80007e1e 	bne	r16,zero,801e4c <__addsf3+0x3b0>
  801c54:	3800a326 	beq	r7,zero,801ee4 <__addsf3+0x448>
  801c58:	40009326 	beq	r8,zero,801ea8 <__addsf3+0x40c>
  801c5c:	3a09c83a 	sub	r4,r7,r8
  801c60:	2081002c 	andhi	r2,r4,1024
  801c64:	1000a626 	beq	r2,zero,801f00 <__addsf3+0x464>
  801c68:	41c9c83a 	sub	r4,r8,r7
  801c6c:	4823883a 	mov	r17,r9
  801c70:	003fb606 	br	801b4c <__addsf3+0xb0>
  801c74:	40003726 	beq	r8,zero,801d54 <__addsf3+0x2b8>
  801c78:	58bfffc4 	addi	r2,r11,-1
  801c7c:	10007b26 	beq	r2,zero,801e6c <__addsf3+0x3d0>
  801c80:	5ac03fe0 	cmpeqi	r11,r11,255
  801c84:	58001e1e 	bne	r11,zero,801d00 <__addsf3+0x264>
  801c88:	1017883a 	mov	r11,r2
  801c8c:	003fd606 	br	801be8 <__addsf3+0x14c>
  801c90:	043fffc4 	movi	r16,-1
  801c94:	0007883a 	mov	r3,zero
  801c98:	003fb906 	br	801b80 <__addsf3+0xe4>
  801c9c:	80800044 	addi	r2,r16,1
  801ca0:	11803f8c 	andi	r6,r2,254
  801ca4:	30005726 	beq	r6,zero,801e04 <__addsf3+0x368>
  801ca8:	10c03fe0 	cmpeqi	r3,r2,255
  801cac:	183ff81e 	bne	r3,zero,801c90 <__addsf3+0x1f4>
  801cb0:	3a09883a 	add	r4,r7,r8
  801cb4:	2008d07a 	srli	r4,r4,1
  801cb8:	1021883a 	mov	r16,r2
  801cbc:	208001cc 	andi	r2,r4,7
  801cc0:	103fa41e 	bne	r2,zero,801b54 <__addsf3+0xb8>
  801cc4:	2014d0fa 	srli	r10,r4,3
  801cc8:	80803fe0 	cmpeqi	r2,r16,255
  801ccc:	10000c1e 	bne	r2,zero,801d00 <__addsf3+0x264>
  801cd0:	00802034 	movhi	r2,128
  801cd4:	10bfffc4 	addi	r2,r2,-1
  801cd8:	5086703a 	and	r3,r10,r2
  801cdc:	003fa806 	br	801b80 <__addsf3+0xe4>
  801ce0:	38000626 	beq	r7,zero,801cfc <__addsf3+0x260>
  801ce4:	40000626 	beq	r8,zero,801d00 <__addsf3+0x264>
  801ce8:	2080102c 	andhi	r2,r4,64
  801cec:	10000426 	beq	r2,zero,801d00 <__addsf3+0x264>
  801cf0:	2940102c 	andhi	r5,r5,64
  801cf4:	2800021e 	bne	r5,zero,801d00 <__addsf3+0x264>
  801cf8:	4823883a 	mov	r17,r9
  801cfc:	6815883a 	mov	r10,r13
  801d00:	503fe326 	beq	r10,zero,801c90 <__addsf3+0x1f4>
  801d04:	00802034 	movhi	r2,128
  801d08:	50c01034 	orhi	r3,r10,64
  801d0c:	10bfffc4 	addi	r2,r2,-1
  801d10:	1886703a 	and	r3,r3,r2
  801d14:	043fffc4 	movi	r16,-1
  801d18:	003f9906 	br	801b80 <__addsf3+0xe4>
  801d1c:	583fdf26 	beq	r11,zero,801c9c <__addsf3+0x200>
  801d20:	6417c83a 	sub	r11,r12,r16
  801d24:	80004226 	beq	r16,zero,801e30 <__addsf3+0x394>
  801d28:	60803fe0 	cmpeqi	r2,r12,255
  801d2c:	103ff31e 	bne	r2,zero,801cfc <__addsf3+0x260>
  801d30:	39c10034 	orhi	r7,r7,1024
  801d34:	58800710 	cmplti	r2,r11,28
  801d38:	10005d1e 	bne	r2,zero,801eb0 <__addsf3+0x414>
  801d3c:	01000044 	movi	r4,1
  801d40:	2209883a 	add	r4,r4,r8
  801d44:	6021883a 	mov	r16,r12
  801d48:	003fab06 	br	801bf8 <__addsf3+0x15c>
  801d4c:	4823883a 	mov	r17,r9
  801d50:	6815883a 	mov	r10,r13
  801d54:	5821883a 	mov	r16,r11
  801d58:	003fdb06 	br	801cc8 <__addsf3+0x22c>
  801d5c:	1405c83a 	sub	r2,r2,r16
  801d60:	14800044 	addi	r18,r2,1
  801d64:	00800804 	movi	r2,32
  801d68:	1485c83a 	sub	r2,r2,r18
  801d6c:	2084983a 	sll	r2,r4,r2
  801d70:	2488d83a 	srl	r4,r4,r18
  801d74:	0021883a 	mov	r16,zero
  801d78:	1004c03a 	cmpne	r2,r2,zero
  801d7c:	1108b03a 	or	r4,r2,r4
  801d80:	003f7206 	br	801b4c <__addsf3+0xb0>
  801d84:	01000804 	movi	r4,32
  801d88:	22c9c83a 	sub	r4,r4,r11
  801d8c:	4108983a 	sll	r4,r8,r4
  801d90:	42d0d83a 	srl	r8,r8,r11
  801d94:	2008c03a 	cmpne	r4,r4,zero
  801d98:	2208b03a 	or	r4,r4,r8
  801d9c:	003f5c06 	br	801b10 <__addsf3+0x74>
  801da0:	3a25c83a 	sub	r18,r7,r8
  801da4:	9081002c 	andhi	r2,r18,1024
  801da8:	10002d1e 	bne	r2,zero,801e60 <__addsf3+0x3c4>
  801dac:	903f5e1e 	bne	r18,zero,801b28 <__addsf3+0x8c>
  801db0:	0023883a 	mov	r17,zero
  801db4:	0021883a 	mov	r16,zero
  801db8:	0007883a 	mov	r3,zero
  801dbc:	003f7006 	br	801b80 <__addsf3+0xe4>
  801dc0:	60803fe0 	cmpeqi	r2,r12,255
  801dc4:	103fcc1e 	bne	r2,zero,801cf8 <__addsf3+0x25c>
  801dc8:	39c10034 	orhi	r7,r7,1024
  801dcc:	58800710 	cmplti	r2,r11,28
  801dd0:	10002e1e 	bne	r2,zero,801e8c <__addsf3+0x3f0>
  801dd4:	01000044 	movi	r4,1
  801dd8:	4109c83a 	sub	r4,r8,r4
  801ddc:	4823883a 	mov	r17,r9
  801de0:	6021883a 	mov	r16,r12
  801de4:	003f4b06 	br	801b14 <__addsf3+0x78>
  801de8:	01000804 	movi	r4,32
  801dec:	22c9c83a 	sub	r4,r4,r11
  801df0:	4108983a 	sll	r4,r8,r4
  801df4:	42d0d83a 	srl	r8,r8,r11
  801df8:	2008c03a 	cmpne	r4,r4,zero
  801dfc:	2208b03a 	or	r4,r4,r8
  801e00:	003f7c06 	br	801bf4 <__addsf3+0x158>
  801e04:	803fb61e 	bne	r16,zero,801ce0 <__addsf3+0x244>
  801e08:	38003a26 	beq	r7,zero,801ef4 <__addsf3+0x458>
  801e0c:	40002626 	beq	r8,zero,801ea8 <__addsf3+0x40c>
  801e10:	3a09883a 	add	r4,r7,r8
  801e14:	2081002c 	andhi	r2,r4,1024
  801e18:	103fa826 	beq	r2,zero,801cbc <__addsf3+0x220>
  801e1c:	00bf0034 	movhi	r2,64512
  801e20:	10bfffc4 	addi	r2,r2,-1
  801e24:	2088703a 	and	r4,r4,r2
  801e28:	04000044 	movi	r16,1
  801e2c:	003fa306 	br	801cbc <__addsf3+0x220>
  801e30:	383fc726 	beq	r7,zero,801d50 <__addsf3+0x2b4>
  801e34:	58bfffc4 	addi	r2,r11,-1
  801e38:	10000c26 	beq	r2,zero,801e6c <__addsf3+0x3d0>
  801e3c:	5ac03fe0 	cmpeqi	r11,r11,255
  801e40:	583fae1e 	bne	r11,zero,801cfc <__addsf3+0x260>
  801e44:	1017883a 	mov	r11,r2
  801e48:	003fba06 	br	801d34 <__addsf3+0x298>
  801e4c:	383fa51e 	bne	r7,zero,801ce4 <__addsf3+0x248>
  801e50:	403fa91e 	bne	r8,zero,801cf8 <__addsf3+0x25c>
  801e54:	0023883a 	mov	r17,zero
  801e58:	1007883a 	mov	r3,r2
  801e5c:	003fad06 	br	801d14 <__addsf3+0x278>
  801e60:	41e5c83a 	sub	r18,r8,r7
  801e64:	4823883a 	mov	r17,r9
  801e68:	003f2f06 	br	801b28 <__addsf3+0x8c>
  801e6c:	3a09883a 	add	r4,r7,r8
  801e70:	2081002c 	andhi	r2,r4,1024
  801e74:	10001926 	beq	r2,zero,801edc <__addsf3+0x440>
  801e78:	04000084 	movi	r16,2
  801e7c:	003f6306 	br	801c0c <__addsf3+0x170>
  801e80:	3a09c83a 	sub	r4,r7,r8
  801e84:	04000044 	movi	r16,1
  801e88:	003f2206 	br	801b14 <__addsf3+0x78>
  801e8c:	00800804 	movi	r2,32
  801e90:	12c5c83a 	sub	r2,r2,r11
  801e94:	3884983a 	sll	r2,r7,r2
  801e98:	3aced83a 	srl	r7,r7,r11
  801e9c:	1008c03a 	cmpne	r4,r2,zero
  801ea0:	21c8b03a 	or	r4,r4,r7
  801ea4:	003fcc06 	br	801dd8 <__addsf3+0x33c>
  801ea8:	0021883a 	mov	r16,zero
  801eac:	003f3406 	br	801b80 <__addsf3+0xe4>
  801eb0:	01000804 	movi	r4,32
  801eb4:	22c9c83a 	sub	r4,r4,r11
  801eb8:	3908983a 	sll	r4,r7,r4
  801ebc:	3aced83a 	srl	r7,r7,r11
  801ec0:	2008c03a 	cmpne	r4,r4,zero
  801ec4:	21c8b03a 	or	r4,r4,r7
  801ec8:	003f9d06 	br	801d40 <__addsf3+0x2a4>
  801ecc:	41c9c83a 	sub	r4,r8,r7
  801ed0:	4823883a 	mov	r17,r9
  801ed4:	04000044 	movi	r16,1
  801ed8:	003f0e06 	br	801b14 <__addsf3+0x78>
  801edc:	04000044 	movi	r16,1
  801ee0:	003f7606 	br	801cbc <__addsf3+0x220>
  801ee4:	403fb226 	beq	r8,zero,801db0 <__addsf3+0x314>
  801ee8:	4823883a 	mov	r17,r9
  801eec:	6807883a 	mov	r3,r13
  801ef0:	003f2306 	br	801b80 <__addsf3+0xe4>
  801ef4:	6807883a 	mov	r3,r13
  801ef8:	0021883a 	mov	r16,zero
  801efc:	003f2006 	br	801b80 <__addsf3+0xe4>
  801f00:	203fab26 	beq	r4,zero,801db0 <__addsf3+0x314>
  801f04:	003f6d06 	br	801cbc <__addsf3+0x220>

00801f08 <__eqsf2>:
  801f08:	200cd5fa 	srli	r6,r4,23
  801f0c:	2806d5fa 	srli	r3,r5,23
  801f10:	00802034 	movhi	r2,128
  801f14:	31803fcc 	andi	r6,r6,255
  801f18:	10bfffc4 	addi	r2,r2,-1
  801f1c:	31c03fd8 	cmpnei	r7,r6,255
  801f20:	2010d7fa 	srli	r8,r4,31
  801f24:	2812d7fa 	srli	r9,r5,31
  801f28:	1108703a 	and	r4,r2,r4
  801f2c:	18c03fcc 	andi	r3,r3,255
  801f30:	1144703a 	and	r2,r2,r5
  801f34:	38000626 	beq	r7,zero,801f50 <__eqsf2+0x48>
  801f38:	19403fe0 	cmpeqi	r5,r3,255
  801f3c:	2800021e 	bne	r5,zero,801f48 <__eqsf2+0x40>
  801f40:	30c0011e 	bne	r6,r3,801f48 <__eqsf2+0x40>
  801f44:	20800626 	beq	r4,r2,801f60 <__eqsf2+0x58>
  801f48:	00800044 	movi	r2,1
  801f4c:	f800283a 	ret
  801f50:	203ffd1e 	bne	r4,zero,801f48 <__eqsf2+0x40>
  801f54:	18c03fd8 	cmpnei	r3,r3,255
  801f58:	183ffb1e 	bne	r3,zero,801f48 <__eqsf2+0x40>
  801f5c:	103ffa1e 	bne	r2,zero,801f48 <__eqsf2+0x40>
  801f60:	42400326 	beq	r8,r9,801f70 <__eqsf2+0x68>
  801f64:	303ff81e 	bne	r6,zero,801f48 <__eqsf2+0x40>
  801f68:	2004c03a 	cmpne	r2,r4,zero
  801f6c:	f800283a 	ret
  801f70:	0005883a 	mov	r2,zero
  801f74:	f800283a 	ret

00801f78 <__gesf2>:
  801f78:	200cd5fa 	srli	r6,r4,23
  801f7c:	280ed5fa 	srli	r7,r5,23
  801f80:	00c02034 	movhi	r3,128
  801f84:	31803fcc 	andi	r6,r6,255
  801f88:	18ffffc4 	addi	r3,r3,-1
  801f8c:	32003fd8 	cmpnei	r8,r6,255
  801f90:	2012d7fa 	srli	r9,r4,31
  801f94:	2804d7fa 	srli	r2,r5,31
  801f98:	1908703a 	and	r4,r3,r4
  801f9c:	1946703a 	and	r3,r3,r5
  801fa0:	39403fcc 	andi	r5,r7,255
  801fa4:	40000826 	beq	r8,zero,801fc8 <__gesf2+0x50>
  801fa8:	29c03fd8 	cmpnei	r7,r5,255
  801fac:	38000926 	beq	r7,zero,801fd4 <__gesf2+0x5c>
  801fb0:	3000121e 	bne	r6,zero,801ffc <__gesf2+0x84>
  801fb4:	28000e1e 	bne	r5,zero,801ff0 <__gesf2+0x78>
  801fb8:	18000d1e 	bne	r3,zero,801ff0 <__gesf2+0x78>
  801fbc:	2000081e 	bne	r4,zero,801fe0 <__gesf2+0x68>
  801fc0:	0005883a 	mov	r2,zero
  801fc4:	f800283a 	ret
  801fc8:	2000171e 	bne	r4,zero,802028 <__gesf2+0xb0>
  801fcc:	29c03fe0 	cmpeqi	r7,r5,255
  801fd0:	38000a26 	beq	r7,zero,801ffc <__gesf2+0x84>
  801fd4:	1800141e 	bne	r3,zero,802028 <__gesf2+0xb0>
  801fd8:	30000526 	beq	r6,zero,801ff0 <__gesf2+0x78>
  801fdc:	48800a26 	beq	r9,r2,802008 <__gesf2+0x90>
  801fe0:	00800044 	movi	r2,1
  801fe4:	48000426 	beq	r9,zero,801ff8 <__gesf2+0x80>
  801fe8:	00bfffc4 	movi	r2,-1
  801fec:	f800283a 	ret
  801ff0:	203ffa1e 	bne	r4,zero,801fdc <__gesf2+0x64>
  801ff4:	103ffc26 	beq	r2,zero,801fe8 <__gesf2+0x70>
  801ff8:	f800283a 	ret
  801ffc:	283ff71e 	bne	r5,zero,801fdc <__gesf2+0x64>
  802000:	183ff61e 	bne	r3,zero,801fdc <__gesf2+0x64>
  802004:	003ff606 	br	801fe0 <__gesf2+0x68>
  802008:	29800416 	blt	r5,r6,80201c <__gesf2+0xa4>
  80200c:	317ff916 	blt	r6,r5,801ff4 <__gesf2+0x7c>
  802010:	19000236 	bltu	r3,r4,80201c <__gesf2+0xa4>
  802014:	20ffea2e 	bgeu	r4,r3,801fc0 <__gesf2+0x48>
  802018:	003ff606 	br	801ff4 <__gesf2+0x7c>
  80201c:	103ff21e 	bne	r2,zero,801fe8 <__gesf2+0x70>
  802020:	00800044 	movi	r2,1
  802024:	f800283a 	ret
  802028:	00bfff84 	movi	r2,-2
  80202c:	f800283a 	ret

00802030 <__mulsf3>:
  802030:	defff504 	addi	sp,sp,-44
  802034:	dc400215 	stw	r17,8(sp)
  802038:	2022d5fa 	srli	r17,r4,23
  80203c:	dc000115 	stw	r16,4(sp)
  802040:	04002034 	movhi	r16,128
  802044:	dd800715 	stw	r22,28(sp)
  802048:	843fffc4 	addi	r16,r16,-1
  80204c:	dfc00a15 	stw	ra,40(sp)
  802050:	df000915 	stw	fp,36(sp)
  802054:	ddc00815 	stw	r23,32(sp)
  802058:	dd400615 	stw	r21,24(sp)
  80205c:	dd000515 	stw	r20,20(sp)
  802060:	dcc00415 	stw	r19,16(sp)
  802064:	dc800315 	stw	r18,12(sp)
  802068:	8c403fcc 	andi	r17,r17,255
  80206c:	202cd7fa 	srli	r22,r4,31
  802070:	8120703a 	and	r16,r16,r4
  802074:	88008d26 	beq	r17,zero,8022ac <__mulsf3+0x27c>
  802078:	88803fe0 	cmpeqi	r2,r17,255
  80207c:	1000901e 	bne	r2,zero,8022c0 <__mulsf3+0x290>
  802080:	802090fa 	slli	r16,r16,3
  802084:	8c7fe044 	addi	r17,r17,-127
  802088:	0025883a 	mov	r18,zero
  80208c:	84010034 	orhi	r16,r16,1024
  802090:	0029883a 	mov	r20,zero
  802094:	2804d5fa 	srli	r2,r5,23
  802098:	01002034 	movhi	r4,128
  80209c:	213fffc4 	addi	r4,r4,-1
  8020a0:	10803fcc 	andi	r2,r2,255
  8020a4:	282ed7fa 	srli	r23,r5,31
  8020a8:	2166703a 	and	r19,r4,r5
  8020ac:	10007b26 	beq	r2,zero,80229c <__mulsf3+0x26c>
  8020b0:	10c03fe0 	cmpeqi	r3,r2,255
  8020b4:	1800871e 	bne	r3,zero,8022d4 <__mulsf3+0x2a4>
  8020b8:	980890fa 	slli	r4,r19,3
  8020bc:	10bfe044 	addi	r2,r2,-127
  8020c0:	88a3883a 	add	r17,r17,r2
  8020c4:	24c10034 	orhi	r19,r4,1024
  8020c8:	0007883a 	mov	r3,zero
  8020cc:	90800428 	cmpgeui	r2,r18,16
  8020d0:	b5eaf03a 	xor	r21,r22,r23
  8020d4:	8f000044 	addi	fp,r17,1
  8020d8:	1000341e 	bne	r2,zero,8021ac <__mulsf3+0x17c>
  8020dc:	902490ba 	slli	r18,r18,2
  8020e0:	00802034 	movhi	r2,128
  8020e4:	9085883a 	add	r2,r18,r2
  8020e8:	10883c17 	ldw	r2,8432(r2)
  8020ec:	1000683a 	jmp	r2
  8020f0:	008021ac 	andhi	r2,zero,134
  8020f4:	00802134 	movhi	r2,132
  8020f8:	00802134 	movhi	r2,132
  8020fc:	00802130 	cmpltui	r2,zero,132
  802100:	0080213c 	xorhi	r2,zero,132
  802104:	0080213c 	xorhi	r2,zero,132
  802108:	00802360 	cmpeqi	r2,zero,141
  80210c:	00802130 	cmpltui	r2,zero,132
  802110:	0080213c 	xorhi	r2,zero,132
  802114:	00802360 	cmpeqi	r2,zero,141
  802118:	0080213c 	xorhi	r2,zero,132
  80211c:	00802130 	cmpltui	r2,zero,132
  802120:	008022e8 	cmpgeui	r2,zero,139
  802124:	008022e8 	cmpgeui	r2,zero,139
  802128:	008022e8 	cmpgeui	r2,zero,139
  80212c:	008023c4 	movi	r2,143
  802130:	b82b883a 	mov	r21,r23
  802134:	9821883a 	mov	r16,r19
  802138:	1829883a 	mov	r20,r3
  80213c:	a08000a0 	cmpeqi	r2,r20,2
  802140:	1000171e 	bne	r2,zero,8021a0 <__mulsf3+0x170>
  802144:	a08000e0 	cmpeqi	r2,r20,3
  802148:	1000b41e 	bne	r2,zero,80241c <__mulsf3+0x3ec>
  80214c:	a0800060 	cmpeqi	r2,r20,1
  802150:	10003f26 	beq	r2,zero,802250 <__mulsf3+0x220>
  802154:	0007883a 	mov	r3,zero
  802158:	0009883a 	mov	r4,zero
  80215c:	1c003fcc 	andi	r16,r3,255
  802160:	802095fa 	slli	r16,r16,23
  802164:	a80497fa 	slli	r2,r21,31
  802168:	8120b03a 	or	r16,r16,r4
  80216c:	8084b03a 	or	r2,r16,r2
  802170:	dfc00a17 	ldw	ra,40(sp)
  802174:	df000917 	ldw	fp,36(sp)
  802178:	ddc00817 	ldw	r23,32(sp)
  80217c:	dd800717 	ldw	r22,28(sp)
  802180:	dd400617 	ldw	r21,24(sp)
  802184:	dd000517 	ldw	r20,20(sp)
  802188:	dcc00417 	ldw	r19,16(sp)
  80218c:	dc800317 	ldw	r18,12(sp)
  802190:	dc400217 	ldw	r17,8(sp)
  802194:	dc000117 	ldw	r16,4(sp)
  802198:	dec00b04 	addi	sp,sp,44
  80219c:	f800283a 	ret
  8021a0:	00ffffc4 	movi	r3,-1
  8021a4:	0009883a 	mov	r4,zero
  8021a8:	003fec06 	br	80215c <__mulsf3+0x12c>
  8021ac:	8028d43a 	srli	r20,r16,16
  8021b0:	9cbfffcc 	andi	r18,r19,65535
  8021b4:	843fffcc 	andi	r16,r16,65535
  8021b8:	900b883a 	mov	r5,r18
  8021bc:	8009883a 	mov	r4,r16
  8021c0:	0802ba80 	call	802ba8 <__mulsi3>
  8021c4:	9826d43a 	srli	r19,r19,16
  8021c8:	900b883a 	mov	r5,r18
  8021cc:	a009883a 	mov	r4,r20
  8021d0:	1025883a 	mov	r18,r2
  8021d4:	0802ba80 	call	802ba8 <__mulsi3>
  8021d8:	980b883a 	mov	r5,r19
  8021dc:	a009883a 	mov	r4,r20
  8021e0:	1029883a 	mov	r20,r2
  8021e4:	0802ba80 	call	802ba8 <__mulsi3>
  8021e8:	9809883a 	mov	r4,r19
  8021ec:	800b883a 	mov	r5,r16
  8021f0:	1027883a 	mov	r19,r2
  8021f4:	0802ba80 	call	802ba8 <__mulsi3>
  8021f8:	9006d43a 	srli	r3,r18,16
  8021fc:	1505883a 	add	r2,r2,r20
  802200:	1887883a 	add	r3,r3,r2
  802204:	1d00022e 	bgeu	r3,r20,802210 <__mulsf3+0x1e0>
  802208:	00800074 	movhi	r2,1
  80220c:	98a7883a 	add	r19,r19,r2
  802210:	1808943a 	slli	r4,r3,16
  802214:	1820d43a 	srli	r16,r3,16
  802218:	94bfffcc 	andi	r18,r18,65535
  80221c:	2489883a 	add	r4,r4,r18
  802220:	200a91ba 	slli	r5,r4,6
  802224:	84e1883a 	add	r16,r16,r19
  802228:	802091ba 	slli	r16,r16,6
  80222c:	2008d6ba 	srli	r4,r4,26
  802230:	2804c03a 	cmpne	r2,r5,zero
  802234:	80c2002c 	andhi	r3,r16,2048
  802238:	1108b03a 	or	r4,r2,r4
  80223c:	8120b03a 	or	r16,r16,r4
  802240:	18007026 	beq	r3,zero,802404 <__mulsf3+0x3d4>
  802244:	8004d07a 	srli	r2,r16,1
  802248:	8400004c 	andi	r16,r16,1
  80224c:	1420b03a 	or	r16,r2,r16
  802250:	e0c01fc4 	addi	r3,fp,127
  802254:	00c0470e 	bge	zero,r3,802374 <__mulsf3+0x344>
  802258:	808001cc 	andi	r2,r16,7
  80225c:	10000426 	beq	r2,zero,802270 <__mulsf3+0x240>
  802260:	808003cc 	andi	r2,r16,15
  802264:	10800120 	cmpeqi	r2,r2,4
  802268:	1000011e 	bne	r2,zero,802270 <__mulsf3+0x240>
  80226c:	84000104 	addi	r16,r16,4
  802270:	8082002c 	andhi	r2,r16,2048
  802274:	10000426 	beq	r2,zero,802288 <__mulsf3+0x258>
  802278:	00be0034 	movhi	r2,63488
  80227c:	10bfffc4 	addi	r2,r2,-1
  802280:	80a0703a 	and	r16,r16,r2
  802284:	e0c02004 	addi	r3,fp,128
  802288:	18803fc8 	cmpgei	r2,r3,255
  80228c:	103fc41e 	bne	r2,zero,8021a0 <__mulsf3+0x170>
  802290:	802091ba 	slli	r16,r16,6
  802294:	8008d27a 	srli	r4,r16,9
  802298:	003fb006 	br	80215c <__mulsf3+0x12c>
  80229c:	9800281e 	bne	r19,zero,802340 <__mulsf3+0x310>
  8022a0:	94800054 	ori	r18,r18,1
  8022a4:	00c00044 	movi	r3,1
  8022a8:	003f8806 	br	8020cc <__mulsf3+0x9c>
  8022ac:	8000191e 	bne	r16,zero,802314 <__mulsf3+0x2e4>
  8022b0:	04800104 	movi	r18,4
  8022b4:	0023883a 	mov	r17,zero
  8022b8:	05000044 	movi	r20,1
  8022bc:	003f7506 	br	802094 <__mulsf3+0x64>
  8022c0:	8000101e 	bne	r16,zero,802304 <__mulsf3+0x2d4>
  8022c4:	04800204 	movi	r18,8
  8022c8:	04403fc4 	movi	r17,255
  8022cc:	05000084 	movi	r20,2
  8022d0:	003f7006 	br	802094 <__mulsf3+0x64>
  8022d4:	8c403fc4 	addi	r17,r17,255
  8022d8:	9800071e 	bne	r19,zero,8022f8 <__mulsf3+0x2c8>
  8022dc:	94800094 	ori	r18,r18,2
  8022e0:	00c00084 	movi	r3,2
  8022e4:	003f7906 	br	8020cc <__mulsf3+0x9c>
  8022e8:	a08000a0 	cmpeqi	r2,r20,2
  8022ec:	b02b883a 	mov	r21,r22
  8022f0:	103f9426 	beq	r2,zero,802144 <__mulsf3+0x114>
  8022f4:	003faa06 	br	8021a0 <__mulsf3+0x170>
  8022f8:	948000d4 	ori	r18,r18,3
  8022fc:	00c000c4 	movi	r3,3
  802300:	003f7206 	br	8020cc <__mulsf3+0x9c>
  802304:	04800304 	movi	r18,12
  802308:	04403fc4 	movi	r17,255
  80230c:	050000c4 	movi	r20,3
  802310:	003f6006 	br	802094 <__mulsf3+0x64>
  802314:	8009883a 	mov	r4,r16
  802318:	d9400015 	stw	r5,0(sp)
  80231c:	0802b540 	call	802b54 <__clzsi2>
  802320:	10fffec4 	addi	r3,r2,-5
  802324:	047fe284 	movi	r17,-118
  802328:	80e0983a 	sll	r16,r16,r3
  80232c:	d9400017 	ldw	r5,0(sp)
  802330:	88a3c83a 	sub	r17,r17,r2
  802334:	0025883a 	mov	r18,zero
  802338:	0029883a 	mov	r20,zero
  80233c:	003f5506 	br	802094 <__mulsf3+0x64>
  802340:	9809883a 	mov	r4,r19
  802344:	0802b540 	call	802b54 <__clzsi2>
  802348:	10fffec4 	addi	r3,r2,-5
  80234c:	88a3c83a 	sub	r17,r17,r2
  802350:	98e6983a 	sll	r19,r19,r3
  802354:	8c7fe284 	addi	r17,r17,-118
  802358:	0007883a 	mov	r3,zero
  80235c:	003f5b06 	br	8020cc <__mulsf3+0x9c>
  802360:	01002034 	movhi	r4,128
  802364:	002b883a 	mov	r21,zero
  802368:	213fffc4 	addi	r4,r4,-1
  80236c:	00ffffc4 	movi	r3,-1
  802370:	003f7a06 	br	80215c <__mulsf3+0x12c>
  802374:	00800044 	movi	r2,1
  802378:	10c7c83a 	sub	r3,r2,r3
  80237c:	18800708 	cmpgei	r2,r3,28
  802380:	103f741e 	bne	r2,zero,802154 <__mulsf3+0x124>
  802384:	e1002784 	addi	r4,fp,158
  802388:	8108983a 	sll	r4,r16,r4
  80238c:	80e0d83a 	srl	r16,r16,r3
  802390:	2008c03a 	cmpne	r4,r4,zero
  802394:	8120b03a 	or	r16,r16,r4
  802398:	808001cc 	andi	r2,r16,7
  80239c:	10000426 	beq	r2,zero,8023b0 <__mulsf3+0x380>
  8023a0:	808003cc 	andi	r2,r16,15
  8023a4:	10800120 	cmpeqi	r2,r2,4
  8023a8:	1000011e 	bne	r2,zero,8023b0 <__mulsf3+0x380>
  8023ac:	84000104 	addi	r16,r16,4
  8023b0:	8081002c 	andhi	r2,r16,1024
  8023b4:	10001526 	beq	r2,zero,80240c <__mulsf3+0x3dc>
  8023b8:	00c00044 	movi	r3,1
  8023bc:	0009883a 	mov	r4,zero
  8023c0:	003f6606 	br	80215c <__mulsf3+0x12c>
  8023c4:	8080102c 	andhi	r2,r16,64
  8023c8:	10000826 	beq	r2,zero,8023ec <__mulsf3+0x3bc>
  8023cc:	9880102c 	andhi	r2,r19,64
  8023d0:	1000061e 	bne	r2,zero,8023ec <__mulsf3+0x3bc>
  8023d4:	00802034 	movhi	r2,128
  8023d8:	99001034 	orhi	r4,r19,64
  8023dc:	10bfffc4 	addi	r2,r2,-1
  8023e0:	2088703a 	and	r4,r4,r2
  8023e4:	b82b883a 	mov	r21,r23
  8023e8:	003fe006 	br	80236c <__mulsf3+0x33c>
  8023ec:	00802034 	movhi	r2,128
  8023f0:	81001034 	orhi	r4,r16,64
  8023f4:	10bfffc4 	addi	r2,r2,-1
  8023f8:	2088703a 	and	r4,r4,r2
  8023fc:	b02b883a 	mov	r21,r22
  802400:	003fda06 	br	80236c <__mulsf3+0x33c>
  802404:	8839883a 	mov	fp,r17
  802408:	003f9106 	br	802250 <__mulsf3+0x220>
  80240c:	802091ba 	slli	r16,r16,6
  802410:	0007883a 	mov	r3,zero
  802414:	8008d27a 	srli	r4,r16,9
  802418:	003f5006 	br	80215c <__mulsf3+0x12c>
  80241c:	00802034 	movhi	r2,128
  802420:	81001034 	orhi	r4,r16,64
  802424:	10bfffc4 	addi	r2,r2,-1
  802428:	2088703a 	and	r4,r4,r2
  80242c:	003fcf06 	br	80236c <__mulsf3+0x33c>

00802430 <__subsf3>:
  802430:	2804d5fa 	srli	r2,r5,23
  802434:	2006d5fa 	srli	r3,r4,23
  802438:	200cd7fa 	srli	r6,r4,31
  80243c:	01c02034 	movhi	r7,128
  802440:	defffc04 	addi	sp,sp,-16
  802444:	39ffffc4 	addi	r7,r7,-1
  802448:	12803fcc 	andi	r10,r2,255
  80244c:	3908703a 	and	r4,r7,r4
  802450:	dc800215 	stw	r18,8(sp)
  802454:	394e703a 	and	r7,r7,r5
  802458:	dc400115 	stw	r17,4(sp)
  80245c:	1c803fcc 	andi	r18,r3,255
  802460:	dfc00315 	stw	ra,12(sp)
  802464:	dc000015 	stw	r16,0(sp)
  802468:	50803fd8 	cmpnei	r2,r10,255
  80246c:	3023883a 	mov	r17,r6
  802470:	201090fa 	slli	r8,r4,3
  802474:	280ad7fa 	srli	r5,r5,31
  802478:	381290fa 	slli	r9,r7,3
  80247c:	2019883a 	mov	r12,r4
  802480:	31803fcc 	andi	r6,r6,255
  802484:	9297c83a 	sub	r11,r18,r10
  802488:	10003f26 	beq	r2,zero,802588 <__subsf3+0x158>
  80248c:	2880005c 	xori	r2,r5,1
  802490:	30804526 	beq	r6,r2,8025a8 <__subsf3+0x178>
  802494:	02c0310e 	bge	zero,r11,80255c <__subsf3+0x12c>
  802498:	50003f1e 	bne	r10,zero,802598 <__subsf3+0x168>
  80249c:	48009526 	beq	r9,zero,8026f4 <__subsf3+0x2c4>
  8024a0:	58bfffc4 	addi	r2,r11,-1
  8024a4:	1000de26 	beq	r2,zero,802820 <__subsf3+0x3f0>
  8024a8:	59003fe0 	cmpeqi	r4,r11,255
  8024ac:	20007d1e 	bne	r4,zero,8026a4 <__subsf3+0x274>
  8024b0:	1017883a 	mov	r11,r2
  8024b4:	58800710 	cmplti	r2,r11,28
  8024b8:	10009a1e 	bne	r2,zero,802724 <__subsf3+0x2f4>
  8024bc:	01000044 	movi	r4,1
  8024c0:	4109c83a 	sub	r4,r8,r4
  8024c4:	2081002c 	andhi	r2,r4,1024
  8024c8:	10006a26 	beq	r2,zero,802674 <__subsf3+0x244>
  8024cc:	04010034 	movhi	r16,1024
  8024d0:	843fffc4 	addi	r16,r16,-1
  8024d4:	2420703a 	and	r16,r4,r16
  8024d8:	8009883a 	mov	r4,r16
  8024dc:	0802b540 	call	802b54 <__clzsi2>
  8024e0:	10bffec4 	addi	r2,r2,-5
  8024e4:	8088983a 	sll	r4,r16,r2
  8024e8:	1480840e 	bge	r2,r18,8026fc <__subsf3+0x2cc>
  8024ec:	00ff0034 	movhi	r3,64512
  8024f0:	18ffffc4 	addi	r3,r3,-1
  8024f4:	90a5c83a 	sub	r18,r18,r2
  8024f8:	20c8703a 	and	r4,r4,r3
  8024fc:	208001cc 	andi	r2,r4,7
  802500:	10000426 	beq	r2,zero,802514 <__subsf3+0xe4>
  802504:	208003cc 	andi	r2,r4,15
  802508:	10800120 	cmpeqi	r2,r2,4
  80250c:	1000011e 	bne	r2,zero,802514 <__subsf3+0xe4>
  802510:	21000104 	addi	r4,r4,4
  802514:	2081002c 	andhi	r2,r4,1024
  802518:	10005826 	beq	r2,zero,80267c <__subsf3+0x24c>
  80251c:	90c00044 	addi	r3,r18,1
  802520:	18803fe0 	cmpeqi	r2,r3,255
  802524:	1000481e 	bne	r2,zero,802648 <__subsf3+0x218>
  802528:	200891ba 	slli	r4,r4,6
  80252c:	2008d27a 	srli	r4,r4,9
  802530:	18803fcc 	andi	r2,r3,255
  802534:	100495fa 	slli	r2,r2,23
  802538:	880697fa 	slli	r3,r17,31
  80253c:	1108b03a 	or	r4,r2,r4
  802540:	20c4b03a 	or	r2,r4,r3
  802544:	dfc00317 	ldw	ra,12(sp)
  802548:	dc800217 	ldw	r18,8(sp)
  80254c:	dc400117 	ldw	r17,4(sp)
  802550:	dc000017 	ldw	r16,0(sp)
  802554:	dec00404 	addi	sp,sp,16
  802558:	f800283a 	ret
  80255c:	58002726 	beq	r11,zero,8025fc <__subsf3+0x1cc>
  802560:	5497c83a 	sub	r11,r10,r18
  802564:	1023883a 	mov	r17,r2
  802568:	9000751e 	bne	r18,zero,802740 <__subsf3+0x310>
  80256c:	40006026 	beq	r8,zero,8026f0 <__subsf3+0x2c0>
  802570:	58bfffc4 	addi	r2,r11,-1
  802574:	1000cb26 	beq	r2,zero,8028a4 <__subsf3+0x474>
  802578:	5ac03fe0 	cmpeqi	r11,r11,255
  80257c:	5800481e 	bne	r11,zero,8026a0 <__subsf3+0x270>
  802580:	1017883a 	mov	r11,r2
  802584:	00007106 	br	80274c <__subsf3+0x31c>
  802588:	483fc026 	beq	r9,zero,80248c <__subsf3+0x5c>
  80258c:	28803fcc 	andi	r2,r5,255
  802590:	31404b26 	beq	r6,r5,8026c0 <__subsf3+0x290>
  802594:	02fff10e 	bge	zero,r11,80255c <__subsf3+0x12c>
  802598:	90803fe0 	cmpeqi	r2,r18,255
  80259c:	1000411e 	bne	r2,zero,8026a4 <__subsf3+0x274>
  8025a0:	4a410034 	orhi	r9,r9,1024
  8025a4:	003fc306 	br	8024b4 <__subsf3+0x84>
  8025a8:	02c0450e 	bge	zero,r11,8026c0 <__subsf3+0x290>
  8025ac:	50001f26 	beq	r10,zero,80262c <__subsf3+0x1fc>
  8025b0:	90803fe0 	cmpeqi	r2,r18,255
  8025b4:	10003b1e 	bne	r2,zero,8026a4 <__subsf3+0x274>
  8025b8:	4a410034 	orhi	r9,r9,1024
  8025bc:	58800710 	cmplti	r2,r11,28
  8025c0:	1000701e 	bne	r2,zero,802784 <__subsf3+0x354>
  8025c4:	01000044 	movi	r4,1
  8025c8:	2209883a 	add	r4,r4,r8
  8025cc:	2081002c 	andhi	r2,r4,1024
  8025d0:	10002826 	beq	r2,zero,802674 <__subsf3+0x244>
  8025d4:	94800044 	addi	r18,r18,1
  8025d8:	90803fe0 	cmpeqi	r2,r18,255
  8025dc:	10001a1e 	bne	r2,zero,802648 <__subsf3+0x218>
  8025e0:	2004d07a 	srli	r2,r4,1
  8025e4:	00df8034 	movhi	r3,32256
  8025e8:	18ffffc4 	addi	r3,r3,-1
  8025ec:	2100004c 	andi	r4,r4,1
  8025f0:	10c4703a 	and	r2,r2,r3
  8025f4:	1108b03a 	or	r4,r2,r4
  8025f8:	003fc006 	br	8024fc <__subsf3+0xcc>
  8025fc:	90c00044 	addi	r3,r18,1
  802600:	18c03f8c 	andi	r3,r3,254
  802604:	1800571e 	bne	r3,zero,802764 <__subsf3+0x334>
  802608:	90007a1e 	bne	r18,zero,8027f4 <__subsf3+0x3c4>
  80260c:	4000a126 	beq	r8,zero,802894 <__subsf3+0x464>
  802610:	48008d26 	beq	r9,zero,802848 <__subsf3+0x418>
  802614:	4249c83a 	sub	r4,r8,r9
  802618:	20c1002c 	andhi	r3,r4,1024
  80261c:	1800a726 	beq	r3,zero,8028bc <__subsf3+0x48c>
  802620:	4a09c83a 	sub	r4,r9,r8
  802624:	1023883a 	mov	r17,r2
  802628:	003fb406 	br	8024fc <__subsf3+0xcc>
  80262c:	48003126 	beq	r9,zero,8026f4 <__subsf3+0x2c4>
  802630:	58bfffc4 	addi	r2,r11,-1
  802634:	10007526 	beq	r2,zero,80280c <__subsf3+0x3dc>
  802638:	5ac03fe0 	cmpeqi	r11,r11,255
  80263c:	5800191e 	bne	r11,zero,8026a4 <__subsf3+0x274>
  802640:	1017883a 	mov	r11,r2
  802644:	003fdd06 	br	8025bc <__subsf3+0x18c>
  802648:	00ffffc4 	movi	r3,-1
  80264c:	0009883a 	mov	r4,zero
  802650:	003fb706 	br	802530 <__subsf3+0x100>
  802654:	90c00044 	addi	r3,r18,1
  802658:	19403f8c 	andi	r5,r3,254
  80265c:	28005026 	beq	r5,zero,8027a0 <__subsf3+0x370>
  802660:	18803fe0 	cmpeqi	r2,r3,255
  802664:	103ff81e 	bne	r2,zero,802648 <__subsf3+0x218>
  802668:	4249883a 	add	r4,r8,r9
  80266c:	2008d07a 	srli	r4,r4,1
  802670:	1825883a 	mov	r18,r3
  802674:	208001cc 	andi	r2,r4,7
  802678:	103fa21e 	bne	r2,zero,802504 <__subsf3+0xd4>
  80267c:	2018d0fa 	srli	r12,r4,3
  802680:	90803fe0 	cmpeqi	r2,r18,255
  802684:	1000071e 	bne	r2,zero,8026a4 <__subsf3+0x274>
  802688:	01002034 	movhi	r4,128
  80268c:	213fffc4 	addi	r4,r4,-1
  802690:	6108703a 	and	r4,r12,r4
  802694:	9007883a 	mov	r3,r18
  802698:	003fa506 	br	802530 <__subsf3+0x100>
  80269c:	40006c1e 	bne	r8,zero,802850 <__subsf3+0x420>
  8026a0:	3819883a 	mov	r12,r7
  8026a4:	603fe826 	beq	r12,zero,802648 <__subsf3+0x218>
  8026a8:	00802034 	movhi	r2,128
  8026ac:	61001034 	orhi	r4,r12,64
  8026b0:	10bfffc4 	addi	r2,r2,-1
  8026b4:	2088703a 	and	r4,r4,r2
  8026b8:	00ffffc4 	movi	r3,-1
  8026bc:	003f9c06 	br	802530 <__subsf3+0x100>
  8026c0:	583fe426 	beq	r11,zero,802654 <__subsf3+0x224>
  8026c4:	5497c83a 	sub	r11,r10,r18
  8026c8:	90004026 	beq	r18,zero,8027cc <__subsf3+0x39c>
  8026cc:	50803fe0 	cmpeqi	r2,r10,255
  8026d0:	103ff31e 	bne	r2,zero,8026a0 <__subsf3+0x270>
  8026d4:	42010034 	orhi	r8,r8,1024
  8026d8:	58800710 	cmplti	r2,r11,28
  8026dc:	1000641e 	bne	r2,zero,802870 <__subsf3+0x440>
  8026e0:	01000044 	movi	r4,1
  8026e4:	2249883a 	add	r4,r4,r9
  8026e8:	5025883a 	mov	r18,r10
  8026ec:	003fb706 	br	8025cc <__subsf3+0x19c>
  8026f0:	3819883a 	mov	r12,r7
  8026f4:	5825883a 	mov	r18,r11
  8026f8:	003fe106 	br	802680 <__subsf3+0x250>
  8026fc:	1485c83a 	sub	r2,r2,r18
  802700:	14000044 	addi	r16,r2,1
  802704:	00800804 	movi	r2,32
  802708:	1405c83a 	sub	r2,r2,r16
  80270c:	2084983a 	sll	r2,r4,r2
  802710:	2408d83a 	srl	r4,r4,r16
  802714:	0025883a 	mov	r18,zero
  802718:	1004c03a 	cmpne	r2,r2,zero
  80271c:	1108b03a 	or	r4,r2,r4
  802720:	003f7606 	br	8024fc <__subsf3+0xcc>
  802724:	01000804 	movi	r4,32
  802728:	22c9c83a 	sub	r4,r4,r11
  80272c:	4908983a 	sll	r4,r9,r4
  802730:	4ad2d83a 	srl	r9,r9,r11
  802734:	2008c03a 	cmpne	r4,r4,zero
  802738:	2248b03a 	or	r4,r4,r9
  80273c:	003f6006 	br	8024c0 <__subsf3+0x90>
  802740:	50803fe0 	cmpeqi	r2,r10,255
  802744:	103fd61e 	bne	r2,zero,8026a0 <__subsf3+0x270>
  802748:	42010034 	orhi	r8,r8,1024
  80274c:	58800710 	cmplti	r2,r11,28
  802750:	1000361e 	bne	r2,zero,80282c <__subsf3+0x3fc>
  802754:	01000044 	movi	r4,1
  802758:	4909c83a 	sub	r4,r9,r4
  80275c:	5025883a 	mov	r18,r10
  802760:	003f5806 	br	8024c4 <__subsf3+0x94>
  802764:	4261c83a 	sub	r16,r8,r9
  802768:	80c1002c 	andhi	r3,r16,1024
  80276c:	18001e1e 	bne	r3,zero,8027e8 <__subsf3+0x3b8>
  802770:	803f591e 	bne	r16,zero,8024d8 <__subsf3+0xa8>
  802774:	0023883a 	mov	r17,zero
  802778:	0007883a 	mov	r3,zero
  80277c:	0009883a 	mov	r4,zero
  802780:	003f6b06 	br	802530 <__subsf3+0x100>
  802784:	01000804 	movi	r4,32
  802788:	22c9c83a 	sub	r4,r4,r11
  80278c:	4908983a 	sll	r4,r9,r4
  802790:	4ad2d83a 	srl	r9,r9,r11
  802794:	2008c03a 	cmpne	r4,r4,zero
  802798:	2248b03a 	or	r4,r4,r9
  80279c:	003f8a06 	br	8025c8 <__subsf3+0x198>
  8027a0:	903fbe1e 	bne	r18,zero,80269c <__subsf3+0x26c>
  8027a4:	40004226 	beq	r8,zero,8028b0 <__subsf3+0x480>
  8027a8:	48002726 	beq	r9,zero,802848 <__subsf3+0x418>
  8027ac:	4249883a 	add	r4,r8,r9
  8027b0:	2081002c 	andhi	r2,r4,1024
  8027b4:	103faf26 	beq	r2,zero,802674 <__subsf3+0x244>
  8027b8:	00bf0034 	movhi	r2,64512
  8027bc:	10bfffc4 	addi	r2,r2,-1
  8027c0:	2088703a 	and	r4,r4,r2
  8027c4:	04800044 	movi	r18,1
  8027c8:	003faa06 	br	802674 <__subsf3+0x244>
  8027cc:	403fc826 	beq	r8,zero,8026f0 <__subsf3+0x2c0>
  8027d0:	58bfffc4 	addi	r2,r11,-1
  8027d4:	10000d26 	beq	r2,zero,80280c <__subsf3+0x3dc>
  8027d8:	5ac03fe0 	cmpeqi	r11,r11,255
  8027dc:	583fb01e 	bne	r11,zero,8026a0 <__subsf3+0x270>
  8027e0:	1017883a 	mov	r11,r2
  8027e4:	003fbc06 	br	8026d8 <__subsf3+0x2a8>
  8027e8:	4a21c83a 	sub	r16,r9,r8
  8027ec:	1023883a 	mov	r17,r2
  8027f0:	003f3906 	br	8024d8 <__subsf3+0xa8>
  8027f4:	4000161e 	bne	r8,zero,802850 <__subsf3+0x420>
  8027f8:	48001a1e 	bne	r9,zero,802864 <__subsf3+0x434>
  8027fc:	01002034 	movhi	r4,128
  802800:	0023883a 	mov	r17,zero
  802804:	213fffc4 	addi	r4,r4,-1
  802808:	003fab06 	br	8026b8 <__subsf3+0x288>
  80280c:	4249883a 	add	r4,r8,r9
  802810:	2081002c 	andhi	r2,r4,1024
  802814:	10001d26 	beq	r2,zero,80288c <__subsf3+0x45c>
  802818:	04800084 	movi	r18,2
  80281c:	003f7006 	br	8025e0 <__subsf3+0x1b0>
  802820:	4249c83a 	sub	r4,r8,r9
  802824:	04800044 	movi	r18,1
  802828:	003f2606 	br	8024c4 <__subsf3+0x94>
  80282c:	00c00804 	movi	r3,32
  802830:	1ac7c83a 	sub	r3,r3,r11
  802834:	40c6983a 	sll	r3,r8,r3
  802838:	42d0d83a 	srl	r8,r8,r11
  80283c:	1808c03a 	cmpne	r4,r3,zero
  802840:	2208b03a 	or	r4,r4,r8
  802844:	003fc406 	br	802758 <__subsf3+0x328>
  802848:	0007883a 	mov	r3,zero
  80284c:	003f3806 	br	802530 <__subsf3+0x100>
  802850:	483f9426 	beq	r9,zero,8026a4 <__subsf3+0x274>
  802854:	2100102c 	andhi	r4,r4,64
  802858:	203f9226 	beq	r4,zero,8026a4 <__subsf3+0x274>
  80285c:	38c0102c 	andhi	r3,r7,64
  802860:	183f901e 	bne	r3,zero,8026a4 <__subsf3+0x274>
  802864:	1023883a 	mov	r17,r2
  802868:	3819883a 	mov	r12,r7
  80286c:	003f8d06 	br	8026a4 <__subsf3+0x274>
  802870:	01000804 	movi	r4,32
  802874:	22c9c83a 	sub	r4,r4,r11
  802878:	4106983a 	sll	r3,r8,r4
  80287c:	42d0d83a 	srl	r8,r8,r11
  802880:	1808c03a 	cmpne	r4,r3,zero
  802884:	2208b03a 	or	r4,r4,r8
  802888:	003f9606 	br	8026e4 <__subsf3+0x2b4>
  80288c:	04800044 	movi	r18,1
  802890:	003f7806 	br	802674 <__subsf3+0x244>
  802894:	483fb726 	beq	r9,zero,802774 <__subsf3+0x344>
  802898:	1023883a 	mov	r17,r2
  80289c:	3809883a 	mov	r4,r7
  8028a0:	003f2306 	br	802530 <__subsf3+0x100>
  8028a4:	4a09c83a 	sub	r4,r9,r8
  8028a8:	04800044 	movi	r18,1
  8028ac:	003f0506 	br	8024c4 <__subsf3+0x94>
  8028b0:	3809883a 	mov	r4,r7
  8028b4:	0007883a 	mov	r3,zero
  8028b8:	003f1d06 	br	802530 <__subsf3+0x100>
  8028bc:	203fad26 	beq	r4,zero,802774 <__subsf3+0x344>
  8028c0:	003f6c06 	br	802674 <__subsf3+0x244>

008028c4 <__fixsfsi>:
  8028c4:	200ad5fa 	srli	r5,r4,23
  8028c8:	00c02034 	movhi	r3,128
  8028cc:	18ffffc4 	addi	r3,r3,-1
  8028d0:	29403fcc 	andi	r5,r5,255
  8028d4:	29801fd0 	cmplti	r6,r5,127
  8028d8:	200ed7fa 	srli	r7,r4,31
  8028dc:	1906703a 	and	r3,r3,r4
  8028e0:	3000061e 	bne	r6,zero,8028fc <__fixsfsi+0x38>
  8028e4:	28802790 	cmplti	r2,r5,158
  8028e8:	1000061e 	bne	r2,zero,802904 <__fixsfsi+0x40>
  8028ec:	00a00034 	movhi	r2,32768
  8028f0:	10bfffc4 	addi	r2,r2,-1
  8028f4:	3885883a 	add	r2,r7,r2
  8028f8:	f800283a 	ret
  8028fc:	0005883a 	mov	r2,zero
  802900:	f800283a 	ret
  802904:	28802590 	cmplti	r2,r5,150
  802908:	18c02034 	orhi	r3,r3,128
  80290c:	1000051e 	bne	r2,zero,802924 <__fixsfsi+0x60>
  802910:	28bfda84 	addi	r2,r5,-150
  802914:	1884983a 	sll	r2,r3,r2
  802918:	383ff926 	beq	r7,zero,802900 <__fixsfsi+0x3c>
  80291c:	0085c83a 	sub	r2,zero,r2
  802920:	f800283a 	ret
  802924:	00802584 	movi	r2,150
  802928:	1145c83a 	sub	r2,r2,r5
  80292c:	1884d83a 	srl	r2,r3,r2
  802930:	003ff906 	br	802918 <__fixsfsi+0x54>

00802934 <__floatsisf>:
  802934:	defffd04 	addi	sp,sp,-12
  802938:	dfc00215 	stw	ra,8(sp)
  80293c:	dc400115 	stw	r17,4(sp)
  802940:	dc000015 	stw	r16,0(sp)
  802944:	20001226 	beq	r4,zero,802990 <__floatsisf+0x5c>
  802948:	2022d7fa 	srli	r17,r4,31
  80294c:	2021883a 	mov	r16,r4
  802950:	20003816 	blt	r4,zero,802a34 <__floatsisf+0x100>
  802954:	8009883a 	mov	r4,r16
  802958:	0802b540 	call	802b54 <__clzsi2>
  80295c:	1009883a 	mov	r4,r2
  802960:	00802784 	movi	r2,158
  802964:	1105c83a 	sub	r2,r2,r4
  802968:	10c025c8 	cmpgei	r3,r2,151
  80296c:	1800151e 	bne	r3,zero,8029c4 <__floatsisf+0x90>
  802970:	20c00248 	cmpgei	r3,r4,9
  802974:	18003126 	beq	r3,zero,802a3c <__floatsisf+0x108>
  802978:	213ffe04 	addi	r4,r4,-8
  80297c:	8120983a 	sll	r16,r16,r4
  802980:	00c02034 	movhi	r3,128
  802984:	18ffffc4 	addi	r3,r3,-1
  802988:	80e0703a 	and	r16,r16,r3
  80298c:	00000306 	br	80299c <__floatsisf+0x68>
  802990:	0023883a 	mov	r17,zero
  802994:	0005883a 	mov	r2,zero
  802998:	0021883a 	mov	r16,zero
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	100495fa 	slli	r2,r2,23
  8029a4:	882297fa 	slli	r17,r17,31
  8029a8:	1404b03a 	or	r2,r2,r16
  8029ac:	1444b03a 	or	r2,r2,r17
  8029b0:	dfc00217 	ldw	ra,8(sp)
  8029b4:	dc400117 	ldw	r17,4(sp)
  8029b8:	dc000017 	ldw	r16,0(sp)
  8029bc:	dec00304 	addi	sp,sp,12
  8029c0:	f800283a 	ret
  8029c4:	10c02690 	cmplti	r3,r2,154
  8029c8:	1800071e 	bne	r3,zero,8029e8 <__floatsisf+0xb4>
  8029cc:	20c006c4 	addi	r3,r4,27
  8029d0:	01400144 	movi	r5,5
  8029d4:	80c6983a 	sll	r3,r16,r3
  8029d8:	290bc83a 	sub	r5,r5,r4
  8029dc:	814ad83a 	srl	r5,r16,r5
  8029e0:	1806c03a 	cmpne	r3,r3,zero
  8029e4:	28e0b03a 	or	r16,r5,r3
  8029e8:	20c00188 	cmpgei	r3,r4,6
  8029ec:	1800171e 	bne	r3,zero,802a4c <__floatsisf+0x118>
  8029f0:	00ff0034 	movhi	r3,64512
  8029f4:	18ffffc4 	addi	r3,r3,-1
  8029f8:	818001cc 	andi	r6,r16,7
  8029fc:	80ca703a 	and	r5,r16,r3
  802a00:	30000926 	beq	r6,zero,802a28 <__floatsisf+0xf4>
  802a04:	818003cc 	andi	r6,r16,15
  802a08:	31800120 	cmpeqi	r6,r6,4
  802a0c:	3000061e 	bne	r6,zero,802a28 <__floatsisf+0xf4>
  802a10:	29400104 	addi	r5,r5,4
  802a14:	2981002c 	andhi	r6,r5,1024
  802a18:	30000326 	beq	r6,zero,802a28 <__floatsisf+0xf4>
  802a1c:	28ca703a 	and	r5,r5,r3
  802a20:	00c027c4 	movi	r3,159
  802a24:	1905c83a 	sub	r2,r3,r4
  802a28:	282091ba 	slli	r16,r5,6
  802a2c:	8020d27a 	srli	r16,r16,9
  802a30:	003fda06 	br	80299c <__floatsisf+0x68>
  802a34:	0121c83a 	sub	r16,zero,r4
  802a38:	003fc606 	br	802954 <__floatsisf+0x20>
  802a3c:	01002034 	movhi	r4,128
  802a40:	213fffc4 	addi	r4,r4,-1
  802a44:	8120703a 	and	r16,r16,r4
  802a48:	003fd406 	br	80299c <__floatsisf+0x68>
  802a4c:	20fffec4 	addi	r3,r4,-5
  802a50:	80e0983a 	sll	r16,r16,r3
  802a54:	003fe606 	br	8029f0 <__floatsisf+0xbc>

00802a58 <__extendsfdf2>:
  802a58:	200ad5fa 	srli	r5,r4,23
  802a5c:	defffd04 	addi	sp,sp,-12
  802a60:	dc000015 	stw	r16,0(sp)
  802a64:	29403fcc 	andi	r5,r5,255
  802a68:	04002034 	movhi	r16,128
  802a6c:	28800044 	addi	r2,r5,1
  802a70:	dc400115 	stw	r17,4(sp)
  802a74:	843fffc4 	addi	r16,r16,-1
  802a78:	dfc00215 	stw	ra,8(sp)
  802a7c:	10803f8c 	andi	r2,r2,254
  802a80:	2022d7fa 	srli	r17,r4,31
  802a84:	8120703a 	and	r16,r16,r4
  802a88:	10000d26 	beq	r2,zero,802ac0 <__extendsfdf2+0x68>
  802a8c:	8008d0fa 	srli	r4,r16,3
  802a90:	8020977a 	slli	r16,r16,29
  802a94:	28c0e004 	addi	r3,r5,896
  802a98:	180a953a 	slli	r5,r3,20
  802a9c:	880697fa 	slli	r3,r17,31
  802aa0:	8005883a 	mov	r2,r16
  802aa4:	290ab03a 	or	r5,r5,r4
  802aa8:	28c6b03a 	or	r3,r5,r3
  802aac:	dfc00217 	ldw	ra,8(sp)
  802ab0:	dc400117 	ldw	r17,4(sp)
  802ab4:	dc000017 	ldw	r16,0(sp)
  802ab8:	dec00304 	addi	sp,sp,12
  802abc:	f800283a 	ret
  802ac0:	2800111e 	bne	r5,zero,802b08 <__extendsfdf2+0xb0>
  802ac4:	80001926 	beq	r16,zero,802b2c <__extendsfdf2+0xd4>
  802ac8:	8009883a 	mov	r4,r16
  802acc:	0802b540 	call	802b54 <__clzsi2>
  802ad0:	10c002c8 	cmpgei	r3,r2,11
  802ad4:	18001b1e 	bne	r3,zero,802b44 <__extendsfdf2+0xec>
  802ad8:	010002c4 	movi	r4,11
  802adc:	2089c83a 	sub	r4,r4,r2
  802ae0:	10c00544 	addi	r3,r2,21
  802ae4:	810ad83a 	srl	r5,r16,r4
  802ae8:	80e0983a 	sll	r16,r16,r3
  802aec:	01000434 	movhi	r4,16
  802af0:	00c0e244 	movi	r3,905
  802af4:	213fffc4 	addi	r4,r4,-1
  802af8:	1887c83a 	sub	r3,r3,r2
  802afc:	2908703a 	and	r4,r5,r4
  802b00:	18c1ffcc 	andi	r3,r3,2047
  802b04:	003fe406 	br	802a98 <__extendsfdf2+0x40>
  802b08:	80000b26 	beq	r16,zero,802b38 <__extendsfdf2+0xe0>
  802b0c:	800ad0fa 	srli	r5,r16,3
  802b10:	00800434 	movhi	r2,16
  802b14:	10bfffc4 	addi	r2,r2,-1
  802b18:	29000234 	orhi	r4,r5,8
  802b1c:	8020977a 	slli	r16,r16,29
  802b20:	2088703a 	and	r4,r4,r2
  802b24:	00c1ffc4 	movi	r3,2047
  802b28:	003fdb06 	br	802a98 <__extendsfdf2+0x40>
  802b2c:	0007883a 	mov	r3,zero
  802b30:	0009883a 	mov	r4,zero
  802b34:	003fd806 	br	802a98 <__extendsfdf2+0x40>
  802b38:	00c1ffc4 	movi	r3,2047
  802b3c:	0009883a 	mov	r4,zero
  802b40:	003fd506 	br	802a98 <__extendsfdf2+0x40>
  802b44:	113ffd44 	addi	r4,r2,-11
  802b48:	810a983a 	sll	r5,r16,r4
  802b4c:	0021883a 	mov	r16,zero
  802b50:	003fe606 	br	802aec <__extendsfdf2+0x94>

00802b54 <__clzsi2>:
  802b54:	00bfffd4 	movui	r2,65535
  802b58:	11000436 	bltu	r2,r4,802b6c <__clzsi2+0x18>
  802b5c:	20804030 	cmpltui	r2,r4,256
  802b60:	10000e26 	beq	r2,zero,802b9c <__clzsi2+0x48>
  802b64:	01400804 	movi	r5,32
  802b68:	00000406 	br	802b7c <__clzsi2+0x28>
  802b6c:	00804034 	movhi	r2,256
  802b70:	20800736 	bltu	r4,r2,802b90 <__clzsi2+0x3c>
  802b74:	2008d63a 	srli	r4,r4,24
  802b78:	01400204 	movi	r5,8
  802b7c:	00c02074 	movhi	r3,129
  802b80:	20c7883a 	add	r3,r4,r3
  802b84:	188aab03 	ldbu	r2,10924(r3)
  802b88:	2885c83a 	sub	r2,r5,r2
  802b8c:	f800283a 	ret
  802b90:	2008d43a 	srli	r4,r4,16
  802b94:	01400404 	movi	r5,16
  802b98:	003ff806 	br	802b7c <__clzsi2+0x28>
  802b9c:	2008d23a 	srli	r4,r4,8
  802ba0:	01400604 	movi	r5,24
  802ba4:	003ff506 	br	802b7c <__clzsi2+0x28>

00802ba8 <__mulsi3>:
  802ba8:	0005883a 	mov	r2,zero
  802bac:	20000726 	beq	r4,zero,802bcc <__mulsi3+0x24>
  802bb0:	20c0004c 	andi	r3,r4,1
  802bb4:	2008d07a 	srli	r4,r4,1
  802bb8:	18000126 	beq	r3,zero,802bc0 <__mulsi3+0x18>
  802bbc:	1145883a 	add	r2,r2,r5
  802bc0:	294b883a 	add	r5,r5,r5
  802bc4:	203ffa1e 	bne	r4,zero,802bb0 <__mulsi3+0x8>
  802bc8:	f800283a 	ret
  802bcc:	f800283a 	ret

00802bd0 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
  802bd0:	defffd04 	addi	sp,sp,-12
  802bd4:	2805883a 	mov	r2,r5
  802bd8:	dfc00015 	stw	ra,0(sp)
  802bdc:	d9800115 	stw	r6,4(sp)
  802be0:	d9c00215 	stw	r7,8(sp)
  va_start (ap, fmt);
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
  802be4:	21400217 	ldw	r5,8(r4)
  802be8:	d9c00104 	addi	r7,sp,4
  802bec:	100d883a 	mov	r6,r2
  802bf0:	0802da40 	call	802da4 <___vfprintf_internal_r>
  va_end (ap);
  return ret;
}
  802bf4:	dfc00017 	ldw	ra,0(sp)
  802bf8:	dec00304 	addi	sp,sp,12
  802bfc:	f800283a 	ret

00802c00 <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
  802c00:	defffc04 	addi	sp,sp,-16
  802c04:	dfc00015 	stw	ra,0(sp)
  802c08:	d9400115 	stw	r5,4(sp)
  802c0c:	d9800215 	stw	r6,8(sp)
  802c10:	d9c00315 	stw	r7,12(sp)
  va_start (ap, fmt);
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
  802c14:	d0a00917 	ldw	r2,-32732(gp)
  802c18:	200b883a 	mov	r5,r4
  802c1c:	d9800104 	addi	r6,sp,4
  802c20:	11000217 	ldw	r4,8(r2)
  802c24:	0804ea80 	call	804ea8 <__vfprintf_internal>
  va_end (ap);
  return ret;
}
  802c28:	dfc00017 	ldw	ra,0(sp)
  802c2c:	dec00404 	addi	sp,sp,16
  802c30:	f800283a 	ret

00802c34 <_puts_r>:
 */

int
_puts_r (struct _reent *ptr,
       const char * s)
{
  802c34:	defff504 	addi	sp,sp,-44
  802c38:	dc000815 	stw	r16,32(sp)
  802c3c:	2021883a 	mov	r16,r4
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
  802c40:	2809883a 	mov	r4,r5
{
  802c44:	dc400915 	stw	r17,36(sp)
  802c48:	dfc00a15 	stw	ra,40(sp)
  802c4c:	2823883a 	mov	r17,r5
  size_t c = strlen (s);
  802c50:	0802d0c0 	call	802d0c <strlen>

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  802c54:	11000044 	addi	r4,r2,1
  iov[0].iov_len = c;
  802c58:	d8800515 	stw	r2,20(sp)
  iov[1].iov_len = 1;
  802c5c:	00800044 	movi	r2,1
  iov[1].iov_base = "\n";
  802c60:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  802c64:	d8800715 	stw	r2,28(sp)
  uio.uio_iov = &iov[0];
  802c68:	d8800404 	addi	r2,sp,16
  iov[1].iov_base = "\n";
  802c6c:	18caeb04 	addi	r3,r3,11180
  uio.uio_iov = &iov[0];
  802c70:	d8800115 	stw	r2,4(sp)
  uio.uio_iovcnt = 2;
  802c74:	00800084 	movi	r2,2
  iov[0].iov_base = s;
  802c78:	dc400415 	stw	r17,16(sp)
  iov[1].iov_base = "\n";
  802c7c:	d8c00615 	stw	r3,24(sp)
  uio.uio_resid = c + 1;
  802c80:	d9000315 	stw	r4,12(sp)
  uio.uio_iovcnt = 2;
  802c84:	d8800215 	stw	r2,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  802c88:	81400217 	ldw	r5,8(r16)
  CHECK_INIT (ptr, fp);
  802c8c:	80000226 	beq	r16,zero,802c98 <_puts_r+0x64>
  802c90:	80800e17 	ldw	r2,56(r16)
  802c94:	10001326 	beq	r2,zero,802ce4 <_puts_r+0xb0>
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  802c98:	2880030b 	ldhu	r2,12(r5)
  802c9c:	10c8000c 	andi	r3,r2,8192
  802ca0:	1800061e 	bne	r3,zero,802cbc <_puts_r+0x88>
  _newlib_flockfile_start (fp);
  802ca4:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  802ca8:	0137ffc4 	movi	r4,-8193
  802cac:	10880014 	ori	r2,r2,8192
  802cb0:	1906703a 	and	r3,r3,r4
  802cb4:	2880030d 	sth	r2,12(r5)
  802cb8:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  802cbc:	d9800104 	addi	r6,sp,4
  802cc0:	8009883a 	mov	r4,r16
  802cc4:	08074f40 	call	8074f4 <__sfvwrite_r>
  802cc8:	10000b1e 	bne	r2,zero,802cf8 <_puts_r+0xc4>
  802ccc:	00800284 	movi	r2,10

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
  802cd0:	dfc00a17 	ldw	ra,40(sp)
  802cd4:	dc400917 	ldw	r17,36(sp)
  802cd8:	dc000817 	ldw	r16,32(sp)
  802cdc:	dec00b04 	addi	sp,sp,44
  802ce0:	f800283a 	ret
  CHECK_INIT (ptr, fp);
  802ce4:	8009883a 	mov	r4,r16
  802ce8:	d9400015 	stw	r5,0(sp)
  802cec:	08070a80 	call	8070a8 <__sinit>
  802cf0:	d9400017 	ldw	r5,0(sp)
  802cf4:	003fe806 	br	802c98 <_puts_r+0x64>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  802cf8:	00bfffc4 	movi	r2,-1
  return result;
  802cfc:	003ff406 	br	802cd0 <_puts_r+0x9c>

00802d00 <puts>:

#ifndef _REENT_ONLY

int
puts (char const * s)
{
  802d00:	200b883a 	mov	r5,r4
  return _puts_r (_REENT, s);
  802d04:	d1200917 	ldw	r4,-32732(gp)
  802d08:	0802c341 	jmpi	802c34 <_puts_r>

00802d0c <strlen>:

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
  802d0c:	208000cc 	andi	r2,r4,3
  802d10:	10000926 	beq	r2,zero,802d38 <strlen+0x2c>
  802d14:	2005883a 	mov	r2,r4
  802d18:	00000306 	br	802d28 <strlen+0x1c>
    {
      if (!*str)
	return str - start;
      str++;
  802d1c:	10800044 	addi	r2,r2,1
  while (UNALIGNED (str))
  802d20:	10c000cc 	andi	r3,r2,3
  802d24:	18000526 	beq	r3,zero,802d3c <strlen+0x30>
      if (!*str)
  802d28:	10c00007 	ldb	r3,0(r2)
  802d2c:	183ffb1e 	bne	r3,zero,802d1c <strlen+0x10>

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
    str++;
  return str - start;
  802d30:	1105c83a 	sub	r2,r2,r4
}
  802d34:	f800283a 	ret
  while (UNALIGNED (str))
  802d38:	2005883a 	mov	r2,r4
  while (!DETECTNULL (*aligned_addr))
  802d3c:	11400017 	ldw	r5,0(r2)
  802d40:	01ffbff4 	movhi	r7,65279
  802d44:	39ffbfc4 	addi	r7,r7,-257
  802d48:	29c7883a 	add	r3,r5,r7
  802d4c:	01a02074 	movhi	r6,32897
  802d50:	014a303a 	nor	r5,zero,r5
  802d54:	1946703a 	and	r3,r3,r5
  802d58:	31a02004 	addi	r6,r6,-32640
  802d5c:	1986703a 	and	r3,r3,r6
  802d60:	1800071e 	bne	r3,zero,802d80 <strlen+0x74>
  802d64:	11400117 	ldw	r5,4(r2)
    aligned_addr++;
  802d68:	10800104 	addi	r2,r2,4
  while (!DETECTNULL (*aligned_addr))
  802d6c:	29c7883a 	add	r3,r5,r7
  802d70:	014a303a 	nor	r5,zero,r5
  802d74:	1946703a 	and	r3,r3,r5
  802d78:	1986703a 	and	r3,r3,r6
  802d7c:	183ff926 	beq	r3,zero,802d64 <strlen+0x58>
  while (*str)
  802d80:	10c00007 	ldb	r3,0(r2)
  802d84:	183fea26 	beq	r3,zero,802d30 <strlen+0x24>
  802d88:	10c00047 	ldb	r3,1(r2)
    str++;
  802d8c:	10800044 	addi	r2,r2,1
  while (*str)
  802d90:	183fe726 	beq	r3,zero,802d30 <strlen+0x24>
  802d94:	10c00047 	ldb	r3,1(r2)
    str++;
  802d98:	10800044 	addi	r2,r2,1
  while (*str)
  802d9c:	183ffa1e 	bne	r3,zero,802d88 <strlen+0x7c>
  802da0:	003fe306 	br	802d30 <strlen+0x24>

00802da4 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
  802da4:	deffbf04 	addi	sp,sp,-260
  802da8:	dfc04015 	stw	ra,256(sp)
  802dac:	dd803d15 	stw	r22,244(sp)
  802db0:	dcc03a15 	stw	r19,232(sp)
  802db4:	dc803915 	stw	r18,228(sp)
  802db8:	2027883a 	mov	r19,r4
  802dbc:	2825883a 	mov	r18,r5
  802dc0:	302d883a 	mov	r22,r6
  802dc4:	d9c00615 	stw	r7,24(sp)
  802dc8:	df003f15 	stw	fp,252(sp)
  802dcc:	ddc03e15 	stw	r23,248(sp)
  802dd0:	dd403c15 	stw	r21,240(sp)
  802dd4:	dd003b15 	stw	r20,236(sp)
  802dd8:	dc403815 	stw	r17,224(sp)
  802ddc:	dc003715 	stw	r16,220(sp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
  802de0:	0807b040 	call	807b04 <_localeconv_r>
  802de4:	10800017 	ldw	r2,0(r2)
	size_t decp_len = strlen (decimal_point);
  802de8:	1009883a 	mov	r4,r2
	char *decimal_point = _localeconv_r (data)->decimal_point;
  802dec:	d8800d15 	stw	r2,52(sp)
	size_t decp_len = strlen (decimal_point);
  802df0:	0802d0c0 	call	802d0c <strlen>
  802df4:	d8800b15 	stw	r2,44(sp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
  802df8:	98000226 	beq	r19,zero,802e04 <___vfprintf_internal_r+0x60>
  802dfc:	98800e17 	ldw	r2,56(r19)
  802e00:	1001e026 	beq	r2,zero,803584 <___vfprintf_internal_r+0x7e0>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
  802e04:	9080030b 	ldhu	r2,12(r18)
  802e08:	10c8000c 	andi	r3,r2,8192
  802e0c:	1800061e 	bne	r3,zero,802e28 <___vfprintf_internal_r+0x84>
	_newlib_flockfile_start (fp);
  802e10:	90c01917 	ldw	r3,100(r18)
	ORIENT(fp, -1);
  802e14:	0137ffc4 	movi	r4,-8193
  802e18:	10880014 	ori	r2,r2,8192
  802e1c:	1906703a 	and	r3,r3,r4
  802e20:	9080030d 	sth	r2,12(r18)
  802e24:	90c01915 	stw	r3,100(r18)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
  802e28:	10c0020c 	andi	r3,r2,8
  802e2c:	1800fc26 	beq	r3,zero,803220 <___vfprintf_internal_r+0x47c>
  802e30:	90c00417 	ldw	r3,16(r18)
  802e34:	1800fa26 	beq	r3,zero,803220 <___vfprintf_internal_r+0x47c>
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  802e38:	1080068c 	andi	r2,r2,26
  802e3c:	10800298 	cmpnei	r2,r2,10
  802e40:	1000ff26 	beq	r2,zero,803240 <___vfprintf_internal_r+0x49c>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
  802e44:	d8802704 	addi	r2,sp,156
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
  802e48:	b02f883a 	mov	r23,r22
	uio.uio_iov = iovp = iov;
  802e4c:	d8801a15 	stw	r2,104(sp)
	uio.uio_resid = 0;
  802e50:	d8001c15 	stw	zero,112(sp)
	uio.uio_iovcnt = 0;
  802e54:	d8001b15 	stw	zero,108(sp)
	int ndig = 0;		/* actual number of digits returned by cvt */
  802e58:	d8000815 	stw	zero,32(sp)
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
  802e5c:	d8000915 	stw	zero,36(sp)
  802e60:	d8000a15 	stw	zero,40(sp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
  802e64:	d8000c15 	stw	zero,48(sp)
	int expsize = 0;	/* character count for expstr */
  802e68:	d8001015 	stw	zero,64(sp)
	ret = 0;
  802e6c:	d8000515 	stw	zero,20(sp)
			PRINT (cp, m);
  802e70:	102d883a 	mov	r22,r2
                while (*fmt != '\0' && *fmt != '%')
  802e74:	b8800007 	ldb	r2,0(r23)
  802e78:	1000d726 	beq	r2,zero,8031d8 <___vfprintf_internal_r+0x434>
  802e7c:	b821883a 	mov	r16,r23
  802e80:	00000306 	br	802e90 <___vfprintf_internal_r+0xec>
  802e84:	80800047 	ldb	r2,1(r16)
                    fmt += 1;
  802e88:	84000044 	addi	r16,r16,1
                while (*fmt != '\0' && *fmt != '%')
  802e8c:	10012226 	beq	r2,zero,803318 <___vfprintf_internal_r+0x574>
  802e90:	10800958 	cmpnei	r2,r2,37
  802e94:	103ffb1e 	bne	r2,zero,802e84 <___vfprintf_internal_r+0xe0>
		if ((m = fmt - cp) != 0) {
  802e98:	85e3c83a 	sub	r17,r16,r23
  802e9c:	85c1201e 	bne	r16,r23,803320 <___vfprintf_internal_r+0x57c>
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
  802ea0:	80800003 	ldbu	r2,0(r16)
  802ea4:	10803fcc 	andi	r2,r2,255
  802ea8:	1080201c 	xori	r2,r2,128
  802eac:	10bfe004 	addi	r2,r2,-128
  802eb0:	1000c926 	beq	r2,zero,8031d8 <___vfprintf_internal_r+0x434>
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
  802eb4:	82c00047 	ldb	r11,1(r16)
  802eb8:	85c00044 	addi	r23,r16,1

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
  802ebc:	d8001345 	stb	zero,77(sp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
  802ec0:	0009883a 	mov	r4,zero
  802ec4:	000b883a 	mov	r5,zero
		prec = -1;
  802ec8:	023fffc4 	movi	r8,-1
		width = 0;
  802ecc:	0021883a 	mov	r16,zero
		flags = 0;
  802ed0:	0019883a 	mov	r12,zero
rflag:		ch = *fmt++;
  802ed4:	bdc00044 	addi	r23,r23,1
  802ed8:	5839883a 	mov	fp,r11
reswitch:	switch (ch) {
  802edc:	e0bff804 	addi	r2,fp,-32
  802ee0:	10c01668 	cmpgeui	r3,r2,89
  802ee4:	18006c1e 	bne	r3,zero,803098 <___vfprintf_internal_r+0x2f4>
  802ee8:	100490ba 	slli	r2,r2,2
  802eec:	00c02034 	movhi	r3,128
  802ef0:	10c7883a 	add	r3,r2,r3
  802ef4:	188bbf17 	ldw	r2,12028(r3)
  802ef8:	1000683a 	jmp	r2
  802efc:	0080384c 	andi	r2,zero,225
  802f00:	00803098 	cmpnei	r2,zero,194
  802f04:	00803098 	cmpnei	r2,zero,194
  802f08:	00803840 	call	80384 <__alt_mem_sdram-0x77fc7c>
  802f0c:	00803098 	cmpnei	r2,zero,194
  802f10:	00803098 	cmpnei	r2,zero,194
  802f14:	00803098 	cmpnei	r2,zero,194
  802f18:	00803098 	cmpnei	r2,zero,194
  802f1c:	00803098 	cmpnei	r2,zero,194
  802f20:	00803098 	cmpnei	r2,zero,194
  802f24:	00803818 	cmpnei	r2,zero,224
  802f28:	00803808 	cmpgei	r2,zero,224
  802f2c:	00803098 	cmpnei	r2,zero,194
  802f30:	008037f0 	cmpltui	r2,zero,223
  802f34:	008037a4 	muli	r2,zero,222
  802f38:	00803098 	cmpnei	r2,zero,194
  802f3c:	00803798 	cmpnei	r2,zero,222
  802f40:	00803060 	cmpeqi	r2,zero,193
  802f44:	00803060 	cmpeqi	r2,zero,193
  802f48:	00803060 	cmpeqi	r2,zero,193
  802f4c:	00803060 	cmpeqi	r2,zero,193
  802f50:	00803060 	cmpeqi	r2,zero,193
  802f54:	00803060 	cmpeqi	r2,zero,193
  802f58:	00803060 	cmpeqi	r2,zero,193
  802f5c:	00803060 	cmpeqi	r2,zero,193
  802f60:	00803060 	cmpeqi	r2,zero,193
  802f64:	00803098 	cmpnei	r2,zero,194
  802f68:	00803098 	cmpnei	r2,zero,194
  802f6c:	00803098 	cmpnei	r2,zero,194
  802f70:	00803098 	cmpnei	r2,zero,194
  802f74:	00803098 	cmpnei	r2,zero,194
  802f78:	00803098 	cmpnei	r2,zero,194
  802f7c:	00803098 	cmpnei	r2,zero,194
  802f80:	00803098 	cmpnei	r2,zero,194
  802f84:	00803098 	cmpnei	r2,zero,194
  802f88:	00803098 	cmpnei	r2,zero,194
  802f8c:	008036b0 	cmpltui	r2,zero,218
  802f90:	0080337c 	xorhi	r2,zero,205
  802f94:	00803098 	cmpnei	r2,zero,194
  802f98:	0080337c 	xorhi	r2,zero,205
  802f9c:	00803098 	cmpnei	r2,zero,194
  802fa0:	00803098 	cmpnei	r2,zero,194
  802fa4:	00803098 	cmpnei	r2,zero,194
  802fa8:	00803098 	cmpnei	r2,zero,194
  802fac:	008036a4 	muli	r2,zero,218
  802fb0:	00803098 	cmpnei	r2,zero,194
  802fb4:	00803098 	cmpnei	r2,zero,194
  802fb8:	008032b0 	cmpltui	r2,zero,202
  802fbc:	00803098 	cmpnei	r2,zero,194
  802fc0:	00803098 	cmpnei	r2,zero,194
  802fc4:	00803098 	cmpnei	r2,zero,194
  802fc8:	00803098 	cmpnei	r2,zero,194
  802fcc:	00803098 	cmpnei	r2,zero,194
  802fd0:	00803288 	cmpgei	r2,zero,202
  802fd4:	00803098 	cmpnei	r2,zero,194
  802fd8:	00803098 	cmpnei	r2,zero,194
  802fdc:	0080365c 	xori	r2,zero,217
  802fe0:	00803098 	cmpnei	r2,zero,194
  802fe4:	00803098 	cmpnei	r2,zero,194
  802fe8:	00803098 	cmpnei	r2,zero,194
  802fec:	00803098 	cmpnei	r2,zero,194
  802ff0:	00803098 	cmpnei	r2,zero,194
  802ff4:	00803098 	cmpnei	r2,zero,194
  802ff8:	00803098 	cmpnei	r2,zero,194
  802ffc:	00803098 	cmpnei	r2,zero,194
  803000:	00803098 	cmpnei	r2,zero,194
  803004:	00803098 	cmpnei	r2,zero,194
  803008:	00803634 	movhi	r2,216
  80300c:	00803590 	cmplti	r2,zero,214
  803010:	0080337c 	xorhi	r2,zero,205
  803014:	0080337c 	xorhi	r2,zero,205
  803018:	0080337c 	xorhi	r2,zero,205
  80301c:	00803628 	cmpgeui	r2,zero,216
  803020:	00803590 	cmplti	r2,zero,214
  803024:	00803098 	cmpnei	r2,zero,194
  803028:	00803098 	cmpnei	r2,zero,194
  80302c:	008039a0 	cmpeqi	r2,zero,230
  803030:	00803098 	cmpnei	r2,zero,194
  803034:	00803964 	muli	r2,zero,229
  803038:	008032b4 	movhi	r2,202
  80303c:	00803924 	muli	r2,zero,228
  803040:	00803918 	cmpnei	r2,zero,228
  803044:	00803098 	cmpnei	r2,zero,194
  803048:	008038c0 	call	8038c <__alt_mem_sdram-0x77fc74>
  80304c:	00803098 	cmpnei	r2,zero,194
  803050:	0080328c 	andi	r2,zero,202
  803054:	00803098 	cmpnei	r2,zero,194
  803058:	00803098 	cmpnei	r2,zero,194
  80305c:	00803878 	rdprs	r2,zero,225
#endif
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
  803060:	0021883a 	mov	r16,zero
  803064:	e0fff404 	addi	r3,fp,-48
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
  803068:	800490ba 	slli	r2,r16,2
				ch = *fmt++;
  80306c:	bf000007 	ldb	fp,0(r23)
  803070:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  803074:	1421883a 	add	r16,r2,r16
  803078:	8421883a 	add	r16,r16,r16
  80307c:	1c21883a 	add	r16,r3,r16
			} while (is_digit (ch));
  803080:	e0fff404 	addi	r3,fp,-48
  803084:	188002b0 	cmpltui	r2,r3,10
  803088:	103ff71e 	bne	r2,zero,803068 <___vfprintf_internal_r+0x2c4>
reswitch:	switch (ch) {
  80308c:	e0bff804 	addi	r2,fp,-32
  803090:	10c01668 	cmpgeui	r3,r2,89
  803094:	183f9426 	beq	r3,zero,802ee8 <___vfprintf_internal_r+0x144>
  803098:	21003fcc 	andi	r4,r4,255
  80309c:	2006871e 	bne	r4,zero,804abc <___vfprintf_internal_r+0x1d18>

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
  8030a0:	e0004d26 	beq	fp,zero,8031d8 <___vfprintf_internal_r+0x434>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
  8030a4:	df001d05 	stb	fp,116(sp)
			size = 1;
			sign = '\0';
  8030a8:	d8001345 	stb	zero,77(sp)
			break;
  8030ac:	05000044 	movi	r20,1
			size = 1;
  8030b0:	05400044 	movi	r21,1
			cp = buf;
  8030b4:	dc401d04 	addi	r17,sp,116
		dprec = 0;
  8030b8:	db000415 	stw	r12,16(sp)
  8030bc:	0011883a 	mov	r8,zero
  8030c0:	d8000715 	stw	zero,28(sp)
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
  8030c4:	d8800417 	ldw	r2,16(sp)
  8030c8:	1380008c 	andi	r14,r2,2
  8030cc:	70000126 	beq	r14,zero,8030d4 <___vfprintf_internal_r+0x330>
			realsz+= 2;
  8030d0:	a5000084 	addi	r20,r20,2

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8030d4:	d8800417 	ldw	r2,16(sp)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
  8030d8:	d8c01c17 	ldw	r3,112(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8030dc:	1340210c 	andi	r13,r2,132
  8030e0:	6800021e 	bne	r13,zero,8030ec <___vfprintf_internal_r+0x348>
			PAD (width - realsz, blanks);
  8030e4:	850fc83a 	sub	r7,r16,r20
  8030e8:	01c34516 	blt	zero,r7,803e00 <___vfprintf_internal_r+0x105c>
		if (sign)
  8030ec:	d8801347 	ldb	r2,77(sp)
  8030f0:	10000c26 	beq	r2,zero,803124 <___vfprintf_internal_r+0x380>
			PRINT (&sign, 1);
  8030f4:	d8801b17 	ldw	r2,108(sp)
  8030f8:	d9001344 	addi	r4,sp,77
  8030fc:	18c00044 	addi	r3,r3,1
  803100:	10800044 	addi	r2,r2,1
  803104:	b1000015 	stw	r4,0(r22)
  803108:	01000044 	movi	r4,1
  80310c:	d8801b15 	stw	r2,108(sp)
  803110:	b1000115 	stw	r4,4(r22)
  803114:	d8c01c15 	stw	r3,112(sp)
  803118:	10800208 	cmpgei	r2,r2,8
  80311c:	1003791e 	bne	r2,zero,803f04 <___vfprintf_internal_r+0x1160>
  803120:	b5800204 	addi	r22,r22,8
		if (flags & HEXPREFIX)
  803124:	70000c26 	beq	r14,zero,803158 <___vfprintf_internal_r+0x3b4>
			PRINT (ox, 2);
  803128:	d8801b17 	ldw	r2,108(sp)
  80312c:	d9001384 	addi	r4,sp,78
  803130:	18c00084 	addi	r3,r3,2
  803134:	10800044 	addi	r2,r2,1
  803138:	b1000015 	stw	r4,0(r22)
  80313c:	01000084 	movi	r4,2
  803140:	d8801b15 	stw	r2,108(sp)
  803144:	b1000115 	stw	r4,4(r22)
  803148:	d8c01c15 	stw	r3,112(sp)
  80314c:	10800208 	cmpgei	r2,r2,8
  803150:	10037a1e 	bne	r2,zero,803f3c <___vfprintf_internal_r+0x1198>
  803154:	b5800204 	addi	r22,r22,8

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  803158:	6b402018 	cmpnei	r13,r13,128
  80315c:	68025b26 	beq	r13,zero,803acc <___vfprintf_internal_r+0xd28>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
  803160:	4551c83a 	sub	r8,r8,r21
  803164:	02029316 	blt	zero,r8,803bb4 <___vfprintf_internal_r+0xe10>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
  803168:	d8800417 	ldw	r2,16(sp)
  80316c:	1080400c 	andi	r2,r2,256
  803170:	1002101e 	bne	r2,zero,8039b4 <___vfprintf_internal_r+0xc10>
			PRINT (cp, size);
  803174:	d8801b17 	ldw	r2,108(sp)
  803178:	1d47883a 	add	r3,r3,r21
  80317c:	b4400015 	stw	r17,0(r22)
  803180:	10800044 	addi	r2,r2,1
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
  803184:	b5400115 	stw	r21,4(r22)
  803188:	d8801b15 	stw	r2,108(sp)
  80318c:	d8c01c15 	stw	r3,112(sp)
  803190:	10800208 	cmpgei	r2,r2,8
  803194:	1003101e 	bne	r2,zero,803dd8 <___vfprintf_internal_r+0x1034>
  803198:	b5800204 	addi	r22,r22,8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
  80319c:	d8800417 	ldw	r2,16(sp)
  8031a0:	1440010c 	andi	r17,r2,4
  8031a4:	88000226 	beq	r17,zero,8031b0 <___vfprintf_internal_r+0x40c>
			PAD (width - realsz, blanks);
  8031a8:	8523c83a 	sub	r17,r16,r20
  8031ac:	0440c616 	blt	zero,r17,8034c8 <___vfprintf_internal_r+0x724>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
  8031b0:	8500010e 	bge	r16,r20,8031b8 <___vfprintf_internal_r+0x414>
  8031b4:	a021883a 	mov	r16,r20
  8031b8:	d8800517 	ldw	r2,20(sp)
  8031bc:	1405883a 	add	r2,r2,r16
  8031c0:	d8800515 	stw	r2,20(sp)

		FLUSH ();	/* copy out the I/O vectors */
  8031c4:	1802c21e 	bne	r3,zero,803cd0 <___vfprintf_internal_r+0xf2c>
                while (*fmt != '\0' && *fmt != '%')
  8031c8:	b8800007 	ldb	r2,0(r23)
		FLUSH ();	/* copy out the I/O vectors */
  8031cc:	d8001b15 	stw	zero,108(sp)
  8031d0:	dd802704 	addi	r22,sp,156
                while (*fmt != '\0' && *fmt != '%')
  8031d4:	103f291e 	bne	r2,zero,802e7c <___vfprintf_internal_r+0xd8>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
  8031d8:	d8801c17 	ldw	r2,112(sp)
  8031dc:	1006391e 	bne	r2,zero,804ac4 <___vfprintf_internal_r+0x1d20>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
  8031e0:	9080030b 	ldhu	r2,12(r18)
  8031e4:	1080100c 	andi	r2,r2,64
  8031e8:	1006cf1e 	bne	r2,zero,804d28 <___vfprintf_internal_r+0x1f84>
	/* NOTREACHED */
}
  8031ec:	d8800517 	ldw	r2,20(sp)
  8031f0:	dfc04017 	ldw	ra,256(sp)
  8031f4:	df003f17 	ldw	fp,252(sp)
  8031f8:	ddc03e17 	ldw	r23,248(sp)
  8031fc:	dd803d17 	ldw	r22,244(sp)
  803200:	dd403c17 	ldw	r21,240(sp)
  803204:	dd003b17 	ldw	r20,236(sp)
  803208:	dcc03a17 	ldw	r19,232(sp)
  80320c:	dc803917 	ldw	r18,228(sp)
  803210:	dc403817 	ldw	r17,224(sp)
  803214:	dc003717 	ldw	r16,220(sp)
  803218:	dec04104 	addi	sp,sp,260
  80321c:	f800283a 	ret
	if (cantwrite (data, fp)) {
  803220:	900b883a 	mov	r5,r18
  803224:	9809883a 	mov	r4,r19
  803228:	0804f800 	call	804f80 <__swsetup_r>
  80322c:	1006be1e 	bne	r2,zero,804d28 <___vfprintf_internal_r+0x1f84>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  803230:	9080030b 	ldhu	r2,12(r18)
  803234:	1080068c 	andi	r2,r2,26
  803238:	10800298 	cmpnei	r2,r2,10
  80323c:	103f011e 	bne	r2,zero,802e44 <___vfprintf_internal_r+0xa0>
  803240:	9080038f 	ldh	r2,14(r18)
  803244:	103eff16 	blt	r2,zero,802e44 <___vfprintf_internal_r+0xa0>
		return (__sbprintf (data, fp, fmt0, ap));
  803248:	d9c00617 	ldw	r7,24(sp)
  80324c:	b00d883a 	mov	r6,r22
  803250:	900b883a 	mov	r5,r18
  803254:	9809883a 	mov	r4,r19
}
  803258:	dfc04017 	ldw	ra,256(sp)
  80325c:	df003f17 	ldw	fp,252(sp)
  803260:	ddc03e17 	ldw	r23,248(sp)
  803264:	dd803d17 	ldw	r22,244(sp)
  803268:	dd403c17 	ldw	r21,240(sp)
  80326c:	dd003b17 	ldw	r20,236(sp)
  803270:	dcc03a17 	ldw	r19,232(sp)
  803274:	dc803917 	ldw	r18,228(sp)
  803278:	dc403817 	ldw	r17,224(sp)
  80327c:	dc003717 	ldw	r16,220(sp)
  803280:	dec04104 	addi	sp,sp,260
		return (__sbprintf (data, fp, fmt0, ap));
  803284:	0804ec01 	jmpi	804ec0 <__sbprintf>
			flags |= LONGINT;
  803288:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  80328c:	6080080c 	andi	r2,r12,32
  803290:	10008126 	beq	r2,zero,803498 <___vfprintf_internal_r+0x6f4>
  803294:	d8c00617 	ldw	r3,24(sp)
			base = DEC;
  803298:	00800044 	movi	r2,1
			_uquad = UARG ();
  80329c:	1d000017 	ldw	r20,0(r3)
  8032a0:	1d400117 	ldw	r21,4(r3)
  8032a4:	18c00204 	addi	r3,r3,8
  8032a8:	d8c00615 	stw	r3,24(sp)
  8032ac:	00000906 	br	8032d4 <___vfprintf_internal_r+0x530>
			flags |= LONGINT;
  8032b0:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  8032b4:	6080080c 	andi	r2,r12,32
  8032b8:	10006b26 	beq	r2,zero,803468 <___vfprintf_internal_r+0x6c4>
  8032bc:	d8c00617 	ldw	r3,24(sp)
			base = OCT;
  8032c0:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  8032c4:	1d000017 	ldw	r20,0(r3)
  8032c8:	1d400117 	ldw	r21,4(r3)
  8032cc:	18c00204 	addi	r3,r3,8
  8032d0:	d8c00615 	stw	r3,24(sp)
nosign:			sign = '\0';
  8032d4:	d8001345 	stb	zero,77(sp)
number:			if ((dprec = prec) >= 0)
  8032d8:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  8032dc:	001b883a 	mov	r13,zero
number:			if ((dprec = prec) >= 0)
  8032e0:	18010e1e 	bne	r3,zero,80371c <___vfprintf_internal_r+0x978>
				flags &= ~ZEROPAD;
  8032e4:	047fdfc4 	movi	r17,-129
  8032e8:	6448703a 	and	r4,r12,r17
			if (_uquad != 0 || prec != 0) {
  8032ec:	a546b03a 	or	r3,r20,r21
				flags &= ~ZEROPAD;
  8032f0:	d9000415 	stw	r4,16(sp)
			if (_uquad != 0 || prec != 0) {
  8032f4:	1802c01e 	bne	r3,zero,803df8 <___vfprintf_internal_r+0x1054>
  8032f8:	40025f1e 	bne	r8,zero,803c78 <___vfprintf_internal_r+0xed4>
                       else if (base == OCT && (flags & ALT))
  8032fc:	1003751e 	bne	r2,zero,8040d4 <___vfprintf_internal_r+0x1330>
  803300:	6540004c 	andi	r21,r12,1
  803304:	a803b026 	beq	r21,zero,8041c8 <___vfprintf_internal_r+0x1424>
                         *--cp = '0';
  803308:	00800c04 	movi	r2,48
  80330c:	d88026c5 	stb	r2,155(sp)
  803310:	dc4026c4 	addi	r17,sp,155
  803314:	0000ba06 	br	803600 <___vfprintf_internal_r+0x85c>
		if ((m = fmt - cp) != 0) {
  803318:	85e3c83a 	sub	r17,r16,r23
  80331c:	85ffae26 	beq	r16,r23,8031d8 <___vfprintf_internal_r+0x434>
			PRINT (cp, m);
  803320:	d8c01c17 	ldw	r3,112(sp)
  803324:	d8801b17 	ldw	r2,108(sp)
  803328:	b5c00015 	stw	r23,0(r22)
  80332c:	1c47883a 	add	r3,r3,r17
  803330:	10800044 	addi	r2,r2,1
  803334:	d8801b15 	stw	r2,108(sp)
  803338:	b4400115 	stw	r17,4(r22)
  80333c:	d8c01c15 	stw	r3,112(sp)
  803340:	10800208 	cmpgei	r2,r2,8
  803344:	1000061e 	bne	r2,zero,803360 <___vfprintf_internal_r+0x5bc>
  803348:	b5800204 	addi	r22,r22,8
			ret += m;
  80334c:	d8c00517 	ldw	r3,20(sp)
                if (*fmt == '\0')
  803350:	80800003 	ldbu	r2,0(r16)
			ret += m;
  803354:	1c47883a 	add	r3,r3,r17
  803358:	d8c00515 	stw	r3,20(sp)
  80335c:	003ed106 	br	802ea4 <___vfprintf_internal_r+0x100>
			PRINT (cp, m);
  803360:	d9801a04 	addi	r6,sp,104
  803364:	900b883a 	mov	r5,r18
  803368:	9809883a 	mov	r4,r19
  80336c:	080a4e40 	call	80a4e4 <__sprint_r>
  803370:	103f9b1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  803374:	dd802704 	addi	r22,sp,156
  803378:	003ff406 	br	80334c <___vfprintf_internal_r+0x5a8>
  80337c:	21003fcc 	andi	r4,r4,255
  803380:	2006671e 	bne	r4,zero,804d20 <___vfprintf_internal_r+0x1f7c>
			_uquad = SARG ();
  803384:	d8c00617 	ldw	r3,24(sp)
			if (flags & LONGDBL) {
  803388:	6080020c 	andi	r2,r12,8
			_uquad = SARG ();
  80338c:	19000204 	addi	r4,r3,8
  803390:	d9000e15 	stw	r4,56(sp)
			if (flags & LONGDBL) {
  803394:	1003a71e 	bne	r2,zero,804234 <___vfprintf_internal_r+0x1490>
				_fpvalue = GET_ARG (N, ap, double);
  803398:	d8800617 	ldw	r2,24(sp)
  80339c:	10c00017 	ldw	r3,0(r2)
  8033a0:	10800117 	ldw	r2,4(r2)
  8033a4:	d8c00915 	stw	r3,36(sp)
  8033a8:	d8800a15 	stw	r2,40(sp)
			if (isinf (_fpvalue)) {
  8033ac:	dd400a17 	ldw	r21,40(sp)
  8033b0:	dd000917 	ldw	r20,36(sp)
  8033b4:	00a00034 	movhi	r2,32768
  8033b8:	10bfffc4 	addi	r2,r2,-1
  8033bc:	a8a2703a 	and	r17,r21,r2
  8033c0:	01dffc34 	movhi	r7,32752
  8033c4:	01bfffc4 	movi	r6,-1
  8033c8:	39ffffc4 	addi	r7,r7,-1
  8033cc:	a009883a 	mov	r4,r20
  8033d0:	880b883a 	mov	r5,r17
  8033d4:	da000615 	stw	r8,24(sp)
  8033d8:	db000415 	stw	r12,16(sp)
  8033dc:	080fa8c0 	call	80fa8c <__unorddf2>
  8033e0:	db000417 	ldw	r12,16(sp)
  8033e4:	da000617 	ldw	r8,24(sp)
  8033e8:	1004641e 	bne	r2,zero,80457c <___vfprintf_internal_r+0x17d8>
  8033ec:	01dffc34 	movhi	r7,32752
  8033f0:	01bfffc4 	movi	r6,-1
  8033f4:	39ffffc4 	addi	r7,r7,-1
  8033f8:	a009883a 	mov	r4,r20
  8033fc:	880b883a 	mov	r5,r17
  803400:	080e9440 	call	80e944 <__ledf2>
  803404:	db000417 	ldw	r12,16(sp)
  803408:	da000617 	ldw	r8,24(sp)
  80340c:	00845b0e 	bge	zero,r2,80457c <___vfprintf_internal_r+0x17d8>
				if (_fpvalue < 0)
  803410:	000d883a 	mov	r6,zero
  803414:	000f883a 	mov	r7,zero
  803418:	a009883a 	mov	r4,r20
  80341c:	a80b883a 	mov	r5,r21
  803420:	080e9440 	call	80e944 <__ledf2>
  803424:	db000417 	ldw	r12,16(sp)
  803428:	10059116 	blt	r2,zero,804a70 <___vfprintf_internal_r+0x1ccc>
		if (sign)
  80342c:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  803430:	e0801210 	cmplti	r2,fp,72
  803434:	1005391e 	bne	r2,zero,80491c <___vfprintf_internal_r+0x1b78>
					cp = "inf";
  803438:	04402074 	movhi	r17,129
  80343c:	8c4aed04 	addi	r17,r17,11188
				flags &= ~ZEROPAD;
  803440:	00bfdfc4 	movi	r2,-129
  803444:	6084703a 	and	r2,r12,r2
  803448:	d8800415 	stw	r2,16(sp)
				break;
  80344c:	d8800e17 	ldw	r2,56(sp)
  803450:	050000c4 	movi	r20,3
				size = 3;
  803454:	054000c4 	movi	r21,3
				break;
  803458:	d8800615 	stw	r2,24(sp)
		dprec = 0;
  80345c:	0011883a 	mov	r8,zero
		lead = 0;
  803460:	d8000715 	stw	zero,28(sp)
				break;
  803464:	00006a06 	br	803610 <___vfprintf_internal_r+0x86c>
			width = GET_ARG (n, ap, int);
  803468:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  80346c:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  803470:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  803474:	10036a1e 	bne	r2,zero,804220 <___vfprintf_internal_r+0x147c>
  803478:	6080100c 	andi	r2,r12,64
  80347c:	10052126 	beq	r2,zero,804904 <___vfprintf_internal_r+0x1b60>
  803480:	d8800617 	ldw	r2,24(sp)
  803484:	002b883a 	mov	r21,zero
  803488:	d8c00615 	stw	r3,24(sp)
  80348c:	1500000b 	ldhu	r20,0(r2)
			base = OCT;
  803490:	0005883a 	mov	r2,zero
  803494:	003f8f06 	br	8032d4 <___vfprintf_internal_r+0x530>
			width = GET_ARG (n, ap, int);
  803498:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  80349c:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8034a0:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  8034a4:	1003501e 	bne	r2,zero,8041e8 <___vfprintf_internal_r+0x1444>
  8034a8:	6080100c 	andi	r2,r12,64
  8034ac:	10055926 	beq	r2,zero,804a14 <___vfprintf_internal_r+0x1c70>
  8034b0:	d8800617 	ldw	r2,24(sp)
  8034b4:	002b883a 	mov	r21,zero
  8034b8:	d8c00615 	stw	r3,24(sp)
  8034bc:	1500000b 	ldhu	r20,0(r2)
			base = DEC;
  8034c0:	00800044 	movi	r2,1
  8034c4:	003f8306 	br	8032d4 <___vfprintf_internal_r+0x530>
			PAD (width - realsz, blanks);
  8034c8:	03002074 	movhi	r12,129
  8034cc:	89000450 	cmplti	r4,r17,17
  8034d0:	d8801b17 	ldw	r2,108(sp)
  8034d4:	630b0104 	addi	r12,r12,11268
  8034d8:	20001b1e 	bne	r4,zero,803548 <___vfprintf_internal_r+0x7a4>
  8034dc:	05400404 	movi	r21,16
  8034e0:	6039883a 	mov	fp,r12
  8034e4:	00000406 	br	8034f8 <___vfprintf_internal_r+0x754>
  8034e8:	8c7ffc04 	addi	r17,r17,-16
  8034ec:	89000448 	cmpgei	r4,r17,17
  8034f0:	b5800204 	addi	r22,r22,8
  8034f4:	20001326 	beq	r4,zero,803544 <___vfprintf_internal_r+0x7a0>
  8034f8:	10800044 	addi	r2,r2,1
  8034fc:	18c00404 	addi	r3,r3,16
  803500:	b7000015 	stw	fp,0(r22)
  803504:	b5400115 	stw	r21,4(r22)
  803508:	d8c01c15 	stw	r3,112(sp)
  80350c:	d8801b15 	stw	r2,108(sp)
  803510:	11000208 	cmpgei	r4,r2,8
  803514:	203ff426 	beq	r4,zero,8034e8 <___vfprintf_internal_r+0x744>
  803518:	d9801a04 	addi	r6,sp,104
  80351c:	900b883a 	mov	r5,r18
  803520:	9809883a 	mov	r4,r19
  803524:	080a4e40 	call	80a4e4 <__sprint_r>
  803528:	103f2d1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  80352c:	8c7ffc04 	addi	r17,r17,-16
  803530:	89000448 	cmpgei	r4,r17,17
  803534:	d8c01c17 	ldw	r3,112(sp)
  803538:	d8801b17 	ldw	r2,108(sp)
  80353c:	dd802704 	addi	r22,sp,156
  803540:	203fed1e 	bne	r4,zero,8034f8 <___vfprintf_internal_r+0x754>
  803544:	e019883a 	mov	r12,fp
  803548:	10800044 	addi	r2,r2,1
  80354c:	1c47883a 	add	r3,r3,r17
  803550:	d8801b15 	stw	r2,108(sp)
  803554:	b3000015 	stw	r12,0(r22)
  803558:	b4400115 	stw	r17,4(r22)
  80355c:	d8c01c15 	stw	r3,112(sp)
  803560:	10800210 	cmplti	r2,r2,8
  803564:	103f121e 	bne	r2,zero,8031b0 <___vfprintf_internal_r+0x40c>
  803568:	d9801a04 	addi	r6,sp,104
  80356c:	900b883a 	mov	r5,r18
  803570:	9809883a 	mov	r4,r19
  803574:	080a4e40 	call	80a4e4 <__sprint_r>
  803578:	103f191e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  80357c:	d8c01c17 	ldw	r3,112(sp)
  803580:	003f0b06 	br	8031b0 <___vfprintf_internal_r+0x40c>
	CHECK_INIT (data, fp);
  803584:	9809883a 	mov	r4,r19
  803588:	08070a80 	call	8070a8 <__sinit>
  80358c:	003e1d06 	br	802e04 <___vfprintf_internal_r+0x60>
  803590:	21003fcc 	andi	r4,r4,255
  803594:	2005de1e 	bne	r4,zero,804d10 <___vfprintf_internal_r+0x1f6c>
			_uquad = SARG ();
  803598:	6080080c 	andi	r2,r12,32
  80359c:	10004926 	beq	r2,zero,8036c4 <___vfprintf_internal_r+0x920>
  8035a0:	d8c00617 	ldw	r3,24(sp)
  8035a4:	18800117 	ldw	r2,4(r3)
  8035a8:	1d000017 	ldw	r20,0(r3)
  8035ac:	18c00204 	addi	r3,r3,8
  8035b0:	d8c00615 	stw	r3,24(sp)
  8035b4:	102b883a 	mov	r21,r2
			if ((quad_t)_uquad < 0)
  8035b8:	10004e16 	blt	r2,zero,8036f4 <___vfprintf_internal_r+0x950>
number:			if ((dprec = prec) >= 0)
  8035bc:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  8035c0:	db401343 	ldbu	r13,77(sp)
number:			if ((dprec = prec) >= 0)
  8035c4:	10000626 	beq	r2,zero,8035e0 <___vfprintf_internal_r+0x83c>
				flags &= ~ZEROPAD;
  8035c8:	047fdfc4 	movi	r17,-129
  8035cc:	6446703a 	and	r3,r12,r17
			if (_uquad != 0 || prec != 0) {
  8035d0:	a544b03a 	or	r2,r20,r21
				flags &= ~ZEROPAD;
  8035d4:	d8c00415 	stw	r3,16(sp)
			if (_uquad != 0 || prec != 0) {
  8035d8:	1002bd26 	beq	r2,zero,8040d0 <___vfprintf_internal_r+0x132c>
				flags &= ~ZEROPAD;
  8035dc:	db000417 	ldw	r12,16(sp)
					if (_uquad < 10) {
  8035e0:	a803701e 	bne	r21,zero,8043a4 <___vfprintf_internal_r+0x1600>
  8035e4:	a08002a8 	cmpgeui	r2,r20,10
  8035e8:	10036e1e 	bne	r2,zero,8043a4 <___vfprintf_internal_r+0x1600>
						*--cp = to_char(_uquad);
  8035ec:	a5000c04 	addi	r20,r20,48
  8035f0:	dd0026c5 	stb	r20,155(sp)
						break;
  8035f4:	db000415 	stw	r12,16(sp)
  8035f8:	05400044 	movi	r21,1
						*--cp = to_char(_uquad);
  8035fc:	dc4026c4 	addi	r17,sp,155
		realsz = dprec > size ? dprec : size;
  803600:	4029883a 	mov	r20,r8
  803604:	4540010e 	bge	r8,r21,80360c <___vfprintf_internal_r+0x868>
  803608:	a829883a 	mov	r20,r21
		lead = 0;
  80360c:	d8000715 	stw	zero,28(sp)
		if (sign)
  803610:	6b403fcc 	andi	r13,r13,255
  803614:	6b40201c 	xori	r13,r13,128
  803618:	6b7fe004 	addi	r13,r13,-128
  80361c:	683ea926 	beq	r13,zero,8030c4 <___vfprintf_internal_r+0x320>
			realsz++;
  803620:	a5000044 	addi	r20,r20,1
  803624:	003ea706 	br	8030c4 <___vfprintf_internal_r+0x320>
				flags |= SHORTINT;
  803628:	bac00007 	ldb	r11,0(r23)
  80362c:	63001014 	ori	r12,r12,64
			goto rflag;
  803630:	003e2806 	br	802ed4 <___vfprintf_internal_r+0x130>
				*cp = GET_ARG (N, ap, int);
  803634:	d8c00617 	ldw	r3,24(sp)
			sign = '\0';
  803638:	d8001345 	stb	zero,77(sp)
			break;
  80363c:	05000044 	movi	r20,1
				*cp = GET_ARG (N, ap, int);
  803640:	18800017 	ldw	r2,0(r3)
  803644:	18c00104 	addi	r3,r3,4
  803648:	d8c00615 	stw	r3,24(sp)
  80364c:	d8801d05 	stb	r2,116(sp)
				size = 1;
  803650:	05400044 	movi	r21,1
			cp = buf;
  803654:	dc401d04 	addi	r17,sp,116
			break;
  803658:	003e9706 	br	8030b8 <___vfprintf_internal_r+0x314>
  80365c:	21003fcc 	andi	r4,r4,255
  803660:	2005a71e 	bne	r4,zero,804d00 <___vfprintf_internal_r+0x1f5c>
			xdigs = "0123456789ABCDEF";
  803664:	00802074 	movhi	r2,129
  803668:	108af504 	addi	r2,r2,11220
  80366c:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  803670:	6080080c 	andi	r2,r12,32
  803674:	10008726 	beq	r2,zero,803894 <___vfprintf_internal_r+0xaf0>
  803678:	d8800617 	ldw	r2,24(sp)
  80367c:	15000017 	ldw	r20,0(r2)
  803680:	15400117 	ldw	r21,4(r2)
  803684:	10800204 	addi	r2,r2,8
  803688:	d8800615 	stw	r2,24(sp)
			if (flags & ALT && _uquad != 0) {
  80368c:	6080004c 	andi	r2,r12,1
  803690:	10000226 	beq	r2,zero,80369c <___vfprintf_internal_r+0x8f8>
  803694:	a544b03a 	or	r2,r20,r21
  803698:	1002cd1e 	bne	r2,zero,8041d0 <___vfprintf_internal_r+0x142c>
			base = HEX;
  80369c:	00800084 	movi	r2,2
  8036a0:	003f0c06 	br	8032d4 <___vfprintf_internal_r+0x530>
			flags |= LONGDBL;
  8036a4:	bac00007 	ldb	r11,0(r23)
  8036a8:	63000214 	ori	r12,r12,8
			goto rflag;
  8036ac:	003e0906 	br	802ed4 <___vfprintf_internal_r+0x130>
  8036b0:	21003fcc 	andi	r4,r4,255
  8036b4:	2005981e 	bne	r4,zero,804d18 <___vfprintf_internal_r+0x1f74>
			flags |= LONGINT;
  8036b8:	63000414 	ori	r12,r12,16
			_uquad = SARG ();
  8036bc:	6080080c 	andi	r2,r12,32
  8036c0:	103fb71e 	bne	r2,zero,8035a0 <___vfprintf_internal_r+0x7fc>
			width = GET_ARG (n, ap, int);
  8036c4:	d9000617 	ldw	r4,24(sp)
			_uquad = SARG ();
  8036c8:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8036cc:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  8036d0:	1002dd1e 	bne	r2,zero,804248 <___vfprintf_internal_r+0x14a4>
  8036d4:	6080100c 	andi	r2,r12,64
  8036d8:	10048426 	beq	r2,zero,8048ec <___vfprintf_internal_r+0x1b48>
  8036dc:	d8800617 	ldw	r2,24(sp)
  8036e0:	d8c00615 	stw	r3,24(sp)
  8036e4:	1500000f 	ldh	r20,0(r2)
  8036e8:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8036ec:	a805883a 	mov	r2,r21
  8036f0:	103fb20e 	bge	r2,zero,8035bc <___vfprintf_internal_r+0x818>
				_uquad = -_uquad;
  8036f4:	a004c03a 	cmpne	r2,r20,zero
  8036f8:	056bc83a 	sub	r21,zero,r21
  8036fc:	a8abc83a 	sub	r21,r21,r2
				sign = '-';
  803700:	00800b44 	movi	r2,45
  803704:	d8801345 	stb	r2,77(sp)
number:			if ((dprec = prec) >= 0)
  803708:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  80370c:	0529c83a 	sub	r20,zero,r20
				sign = '-';
  803710:	03400b44 	movi	r13,45
			base = DEC;
  803714:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  803718:	183ef226 	beq	r3,zero,8032e4 <___vfprintf_internal_r+0x540>
				switch (base) {
  80371c:	10c00060 	cmpeqi	r3,r2,1
  803720:	183faf1e 	bne	r3,zero,8035e0 <___vfprintf_internal_r+0x83c>
  803724:	108000a0 	cmpeqi	r2,r2,2
  803728:	1001581e 	bne	r2,zero,803c8c <___vfprintf_internal_r+0xee8>
			cp = buf + BUF;
  80372c:	dc402704 	addi	r17,sp,156
						_uquad >>= 3;
  803730:	a006d0fa 	srli	r3,r20,3
  803734:	a808977a 	slli	r4,r21,29
  803738:	a82ad0fa 	srli	r21,r21,3
						*--cp = to_char (_uquad & 7);
  80373c:	a50001cc 	andi	r20,r20,7
  803740:	a0800c04 	addi	r2,r20,48
						_uquad >>= 3;
  803744:	20e8b03a 	or	r20,r4,r3
						*--cp = to_char (_uquad & 7);
  803748:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  80374c:	a546b03a 	or	r3,r20,r21
  803750:	880b883a 	mov	r5,r17
						*--cp = to_char (_uquad & 7);
  803754:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  803758:	183ff51e 	bne	r3,zero,803730 <___vfprintf_internal_r+0x98c>
					if (flags & ALT && *cp != '0')
  80375c:	60c0004c 	andi	r3,r12,1
  803760:	18015726 	beq	r3,zero,803cc0 <___vfprintf_internal_r+0xf1c>
  803764:	10803fcc 	andi	r2,r2,255
  803768:	1080201c 	xori	r2,r2,128
  80376c:	10bfe004 	addi	r2,r2,-128
  803770:	10800c18 	cmpnei	r2,r2,48
  803774:	10015226 	beq	r2,zero,803cc0 <___vfprintf_internal_r+0xf1c>
						*--cp = '0';
  803778:	00800c04 	movi	r2,48
  80377c:	297fff84 	addi	r5,r5,-2
  803780:	88bfffc5 	stb	r2,-1(r17)
			size = buf + BUF - cp;
  803784:	d8802704 	addi	r2,sp,156
  803788:	116bc83a 	sub	r21,r2,r5
  80378c:	db000415 	stw	r12,16(sp)
						*--cp = '0';
  803790:	2823883a 	mov	r17,r5
  803794:	003f9a06 	br	803600 <___vfprintf_internal_r+0x85c>
			flags |= ZEROPAD;
  803798:	bac00007 	ldb	r11,0(r23)
  80379c:	63002014 	ori	r12,r12,128
			goto rflag;
  8037a0:	003dcc06 	br	802ed4 <___vfprintf_internal_r+0x130>
			if ((ch = *fmt++) == '*') {
  8037a4:	bf000007 	ldb	fp,0(r23)
  8037a8:	b8800044 	addi	r2,r23,1
  8037ac:	e0c00aa0 	cmpeqi	r3,fp,42
  8037b0:	1805b11e 	bne	r3,zero,804e78 <___vfprintf_internal_r+0x20d4>
			while (is_digit (ch)) {
  8037b4:	e0fff404 	addi	r3,fp,-48
  8037b8:	198002b0 	cmpltui	r6,r3,10
			if ((ch = *fmt++) == '*') {
  8037bc:	102f883a 	mov	r23,r2
			n = 0;
  8037c0:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  8037c4:	303dc526 	beq	r6,zero,802edc <___vfprintf_internal_r+0x138>
				n = 10 * n + to_digit (ch);
  8037c8:	400490ba 	slli	r2,r8,2
				ch = *fmt++;
  8037cc:	bf000007 	ldb	fp,0(r23)
  8037d0:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  8037d4:	1211883a 	add	r8,r2,r8
  8037d8:	4211883a 	add	r8,r8,r8
  8037dc:	40d1883a 	add	r8,r8,r3
			while (is_digit (ch)) {
  8037e0:	e0fff404 	addi	r3,fp,-48
  8037e4:	188002b0 	cmpltui	r2,r3,10
  8037e8:	103ff71e 	bne	r2,zero,8037c8 <___vfprintf_internal_r+0xa24>
  8037ec:	003dbb06 	br	802edc <___vfprintf_internal_r+0x138>
			if ((ch = *fmt++) == '*') {
  8037f0:	bf000003 	ldbu	fp,0(r23)
			flags |= LADJUST;
  8037f4:	e2c03fcc 	andi	r11,fp,255
  8037f8:	5ac0201c 	xori	r11,r11,128
  8037fc:	63000114 	ori	r12,r12,4
			goto rflag;
  803800:	5affe004 	addi	r11,r11,-128
  803804:	003db306 	br	802ed4 <___vfprintf_internal_r+0x130>
			goto rflag;
  803808:	bac00007 	ldb	r11,0(r23)
  80380c:	01000044 	movi	r4,1
			sign = '+';
  803810:	01400ac4 	movi	r5,43
			goto rflag;
  803814:	003daf06 	br	802ed4 <___vfprintf_internal_r+0x130>
			width = GET_ARG (n, ap, int);
  803818:	d8800617 	ldw	r2,24(sp)
			if ((ch = *fmt++) == '*') {
  80381c:	bf000003 	ldbu	fp,0(r23)
			width = GET_ARG (n, ap, int);
  803820:	14000017 	ldw	r16,0(r2)
  803824:	10800104 	addi	r2,r2,4
			if (width >= 0)
  803828:	80028c16 	blt	r16,zero,80425c <___vfprintf_internal_r+0x14b8>
			width = GET_ARG (n, ap, int);
  80382c:	d8800615 	stw	r2,24(sp)
  803830:	e2c03fcc 	andi	r11,fp,255
  803834:	5ac0201c 	xori	r11,r11,128
  803838:	5affe004 	addi	r11,r11,-128
  80383c:	003da506 	br	802ed4 <___vfprintf_internal_r+0x130>
			flags |= ALT;
  803840:	bac00007 	ldb	r11,0(r23)
  803844:	63000054 	ori	r12,r12,1
			goto rflag;
  803848:	003da206 	br	802ed4 <___vfprintf_internal_r+0x130>
			if (!sign)
  80384c:	28803fcc 	andi	r2,r5,255
  803850:	1080201c 	xori	r2,r2,128
  803854:	10bfe004 	addi	r2,r2,-128
			if ((ch = *fmt++) == '*') {
  803858:	bf000003 	ldbu	fp,0(r23)
			if (!sign)
  80385c:	103ff41e 	bne	r2,zero,803830 <___vfprintf_internal_r+0xa8c>
  803860:	e2c03fcc 	andi	r11,fp,255
  803864:	5ac0201c 	xori	r11,r11,128
  803868:	01000044 	movi	r4,1
				sign = ' ';
  80386c:	01400804 	movi	r5,32
  803870:	5affe004 	addi	r11,r11,-128
  803874:	003d9706 	br	802ed4 <___vfprintf_internal_r+0x130>
  803878:	21003fcc 	andi	r4,r4,255
  80387c:	20051e1e 	bne	r4,zero,804cf8 <___vfprintf_internal_r+0x1f54>
			xdigs = "0123456789abcdef";
  803880:	00802074 	movhi	r2,129
  803884:	108af004 	addi	r2,r2,11200
  803888:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  80388c:	6080080c 	andi	r2,r12,32
  803890:	103f791e 	bne	r2,zero,803678 <___vfprintf_internal_r+0x8d4>
			width = GET_ARG (n, ap, int);
  803894:	d9000617 	ldw	r4,24(sp)
hex:			_uquad = UARG ();
  803898:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  80389c:	20c00104 	addi	r3,r4,4
hex:			_uquad = UARG ();
  8038a0:	10025b1e 	bne	r2,zero,804210 <___vfprintf_internal_r+0x146c>
  8038a4:	6080100c 	andi	r2,r12,64
  8038a8:	10046026 	beq	r2,zero,804a2c <___vfprintf_internal_r+0x1c88>
  8038ac:	d8800617 	ldw	r2,24(sp)
  8038b0:	002b883a 	mov	r21,zero
  8038b4:	d8c00615 	stw	r3,24(sp)
  8038b8:	1500000b 	ldhu	r20,0(r2)
  8038bc:	003f7306 	br	80368c <___vfprintf_internal_r+0x8e8>
			cp = GET_ARG (N, ap, char_ptr_t);
  8038c0:	d8800617 	ldw	r2,24(sp)
			sign = '\0';
  8038c4:	d8001345 	stb	zero,77(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  8038c8:	14400017 	ldw	r17,0(r2)
  8038cc:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  8038d0:	88028e26 	beq	r17,zero,80430c <___vfprintf_internal_r+0x1568>
			if (prec >= 0) {
  8038d4:	40bfffe0 	cmpeqi	r2,r8,-1
  8038d8:	1003c01e 	bne	r2,zero,8047dc <___vfprintf_internal_r+0x1a38>
				char *p = memchr (cp, 0, prec);
  8038dc:	400d883a 	mov	r6,r8
  8038e0:	000b883a 	mov	r5,zero
  8038e4:	8809883a 	mov	r4,r17
  8038e8:	d8c00715 	stw	r3,28(sp)
  8038ec:	db000615 	stw	r12,24(sp)
  8038f0:	da000415 	stw	r8,16(sp)
  8038f4:	08086680 	call	808668 <memchr>
				if (p != NULL)
  8038f8:	da000417 	ldw	r8,16(sp)
  8038fc:	db000617 	ldw	r12,24(sp)
  803900:	d8c00717 	ldw	r3,28(sp)
  803904:	1004ec26 	beq	r2,zero,804cb8 <___vfprintf_internal_r+0x1f14>
					size = p - cp;
  803908:	146bc83a 	sub	r21,r2,r17
  80390c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  803910:	d8c00615 	stw	r3,24(sp)
  803914:	003de806 	br	8030b8 <___vfprintf_internal_r+0x314>
			flags |= QUADINT;
  803918:	bac00007 	ldb	r11,0(r23)
  80391c:	63000814 	ori	r12,r12,32
			goto rflag;
  803920:	003d6c06 	br	802ed4 <___vfprintf_internal_r+0x130>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  803924:	d8c00617 	ldw	r3,24(sp)
			ox[0] = '0';
  803928:	00800c04 	movi	r2,48
  80392c:	d8801385 	stb	r2,78(sp)
			ox[1] = ch = 'x';
  803930:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  803934:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  803938:	d88013c5 	stb	r2,79(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80393c:	18800104 	addi	r2,r3,4
  803940:	d8800615 	stw	r2,24(sp)
			xdigs = "0123456789abcdef";
  803944:	208af004 	addi	r2,r4,11200
  803948:	d8800c15 	stw	r2,48(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80394c:	1d000017 	ldw	r20,0(r3)
  803950:	002b883a 	mov	r21,zero
			flags |= HEXPREFIX;
  803954:	63000094 	ori	r12,r12,2
			base = HEX;
  803958:	00800084 	movi	r2,2
			ox[1] = ch = 'x';
  80395c:	07001e04 	movi	fp,120
			goto nosign;
  803960:	003e5c06 	br	8032d4 <___vfprintf_internal_r+0x530>
  803964:	21003fcc 	andi	r4,r4,255
  803968:	2004e71e 	bne	r4,zero,804d08 <___vfprintf_internal_r+0x1f64>
			width = GET_ARG (n, ap, int);
  80396c:	d9000617 	ldw	r4,24(sp)
			if (flags & QUADINT)
  803970:	6080080c 	andi	r2,r12,32
			width = GET_ARG (n, ap, int);
  803974:	20c00017 	ldw	r3,0(r4)
  803978:	21000104 	addi	r4,r4,4
  80397c:	d9000615 	stw	r4,24(sp)
			if (flags & QUADINT)
  803980:	10021e1e 	bne	r2,zero,8041fc <___vfprintf_internal_r+0x1458>
			if (flags & LONGINT)
  803984:	6080040c 	andi	r2,r12,16
  803988:	1002ae1e 	bne	r2,zero,804444 <___vfprintf_internal_r+0x16a0>
			else if (flags & SHORTINT)
  80398c:	6300100c 	andi	r12,r12,64
  803990:	6002ac26 	beq	r12,zero,804444 <___vfprintf_internal_r+0x16a0>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  803994:	d8800517 	ldw	r2,20(sp)
  803998:	1880000d 	sth	r2,0(r3)
  80399c:	003d3506 	br	802e74 <___vfprintf_internal_r+0xd0>
			if (*fmt == 'l') {
  8039a0:	bac00007 	ldb	r11,0(r23)
  8039a4:	58801b18 	cmpnei	r2,r11,108
  8039a8:	10024926 	beq	r2,zero,8042d0 <___vfprintf_internal_r+0x152c>
				flags |= LONGINT;
  8039ac:	63000414 	ori	r12,r12,16
  8039b0:	003d4806 	br	802ed4 <___vfprintf_internal_r+0x130>
			if (ch >= 'f') {	/* 'f' or 'g' */
  8039b4:	e2c01990 	cmplti	r11,fp,102
  8039b8:	5800cb1e 	bne	r11,zero,803ce8 <___vfprintf_internal_r+0xf44>
				if (_fpvalue == 0) {
  8039bc:	d9000917 	ldw	r4,36(sp)
  8039c0:	d9400a17 	ldw	r5,40(sp)
  8039c4:	000d883a 	mov	r6,zero
  8039c8:	000f883a 	mov	r7,zero
  8039cc:	d8c00e15 	stw	r3,56(sp)
  8039d0:	080e7dc0 	call	80e7dc <__eqdf2>
  8039d4:	d8c00e17 	ldw	r3,56(sp)
  8039d8:	1001641e 	bne	r2,zero,803f6c <___vfprintf_internal_r+0x11c8>
					PRINT ("0", 1);
  8039dc:	d8801b17 	ldw	r2,108(sp)
  8039e0:	01002074 	movhi	r4,129
  8039e4:	210afc04 	addi	r4,r4,11248
  8039e8:	10800044 	addi	r2,r2,1
  8039ec:	18c00044 	addi	r3,r3,1
  8039f0:	b1000015 	stw	r4,0(r22)
  8039f4:	01000044 	movi	r4,1
  8039f8:	d8801b15 	stw	r2,108(sp)
  8039fc:	b1000115 	stw	r4,4(r22)
  803a00:	d8c01c15 	stw	r3,112(sp)
  803a04:	10800208 	cmpgei	r2,r2,8
  803a08:	1003621e 	bne	r2,zero,804794 <___vfprintf_internal_r+0x19f0>
  803a0c:	b5800204 	addi	r22,r22,8
					if (expt < ndig || flags & ALT) {
  803a10:	d8801417 	ldw	r2,80(sp)
  803a14:	d9000817 	ldw	r4,32(sp)
  803a18:	1101e70e 	bge	r2,r4,8041b8 <___vfprintf_internal_r+0x1414>
						PRINT (decimal_point, decp_len);
  803a1c:	d8800d17 	ldw	r2,52(sp)
  803a20:	d9000b17 	ldw	r4,44(sp)
  803a24:	b0800015 	stw	r2,0(r22)
  803a28:	d8801b17 	ldw	r2,108(sp)
  803a2c:	1907883a 	add	r3,r3,r4
  803a30:	b1000115 	stw	r4,4(r22)
  803a34:	10800044 	addi	r2,r2,1
  803a38:	d8801b15 	stw	r2,108(sp)
  803a3c:	d8c01c15 	stw	r3,112(sp)
  803a40:	10800208 	cmpgei	r2,r2,8
  803a44:	1002291e 	bne	r2,zero,8042ec <___vfprintf_internal_r+0x1548>
  803a48:	b5800204 	addi	r22,r22,8
						PAD (ndig - 1, zeroes);
  803a4c:	d8800817 	ldw	r2,32(sp)
  803a50:	157fffc4 	addi	r21,r2,-1
  803a54:	057dd10e 	bge	zero,r21,80319c <___vfprintf_internal_r+0x3f8>
  803a58:	01c02074 	movhi	r7,129
  803a5c:	a9000450 	cmplti	r4,r21,17
  803a60:	d8801b17 	ldw	r2,108(sp)
  803a64:	39cafd04 	addi	r7,r7,11252
  803a68:	2003461e 	bne	r4,zero,804784 <___vfprintf_internal_r+0x19e0>
  803a6c:	07000404 	movi	fp,16
  803a70:	3823883a 	mov	r17,r7
  803a74:	00000406 	br	803a88 <___vfprintf_internal_r+0xce4>
  803a78:	b5800204 	addi	r22,r22,8
  803a7c:	ad7ffc04 	addi	r21,r21,-16
  803a80:	a9000448 	cmpgei	r4,r21,17
  803a84:	20033e26 	beq	r4,zero,804780 <___vfprintf_internal_r+0x19dc>
  803a88:	10800044 	addi	r2,r2,1
  803a8c:	18c00404 	addi	r3,r3,16
  803a90:	b4400015 	stw	r17,0(r22)
  803a94:	b7000115 	stw	fp,4(r22)
  803a98:	d8c01c15 	stw	r3,112(sp)
  803a9c:	d8801b15 	stw	r2,108(sp)
  803aa0:	11000208 	cmpgei	r4,r2,8
  803aa4:	203ff426 	beq	r4,zero,803a78 <___vfprintf_internal_r+0xcd4>
  803aa8:	d9801a04 	addi	r6,sp,104
  803aac:	900b883a 	mov	r5,r18
  803ab0:	9809883a 	mov	r4,r19
  803ab4:	080a4e40 	call	80a4e4 <__sprint_r>
  803ab8:	103dc91e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  803abc:	d8c01c17 	ldw	r3,112(sp)
  803ac0:	d8801b17 	ldw	r2,108(sp)
  803ac4:	dd802704 	addi	r22,sp,156
  803ac8:	003fec06 	br	803a7c <___vfprintf_internal_r+0xcd8>
			PAD (width - realsz, zeroes);
  803acc:	8519c83a 	sub	r12,r16,r20
  803ad0:	033da30e 	bge	zero,r12,803160 <___vfprintf_internal_r+0x3bc>
  803ad4:	01c02074 	movhi	r7,129
  803ad8:	61000450 	cmplti	r4,r12,17
  803adc:	d8801b17 	ldw	r2,108(sp)
  803ae0:	39cafd04 	addi	r7,r7,11252
  803ae4:	2000281e 	bne	r4,zero,803b88 <___vfprintf_internal_r+0xde4>
  803ae8:	dc400e15 	stw	r17,56(sp)
  803aec:	dc000f15 	stw	r16,60(sp)
  803af0:	b009883a 	mov	r4,r22
  803af4:	03400404 	movi	r13,16
  803af8:	a02d883a 	mov	r22,r20
  803afc:	6021883a 	mov	r16,r12
  803b00:	4029883a 	mov	r20,r8
  803b04:	3823883a 	mov	r17,r7
  803b08:	00000406 	br	803b1c <___vfprintf_internal_r+0xd78>
  803b0c:	843ffc04 	addi	r16,r16,-16
  803b10:	81400448 	cmpgei	r5,r16,17
  803b14:	21000204 	addi	r4,r4,8
  803b18:	28001426 	beq	r5,zero,803b6c <___vfprintf_internal_r+0xdc8>
  803b1c:	10800044 	addi	r2,r2,1
  803b20:	18c00404 	addi	r3,r3,16
  803b24:	24400015 	stw	r17,0(r4)
  803b28:	23400115 	stw	r13,4(r4)
  803b2c:	d8c01c15 	stw	r3,112(sp)
  803b30:	d8801b15 	stw	r2,108(sp)
  803b34:	11400208 	cmpgei	r5,r2,8
  803b38:	283ff426 	beq	r5,zero,803b0c <___vfprintf_internal_r+0xd68>
  803b3c:	d9801a04 	addi	r6,sp,104
  803b40:	900b883a 	mov	r5,r18
  803b44:	9809883a 	mov	r4,r19
  803b48:	080a4e40 	call	80a4e4 <__sprint_r>
  803b4c:	103da41e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  803b50:	843ffc04 	addi	r16,r16,-16
  803b54:	81400448 	cmpgei	r5,r16,17
  803b58:	d8c01c17 	ldw	r3,112(sp)
  803b5c:	d8801b17 	ldw	r2,108(sp)
  803b60:	d9002704 	addi	r4,sp,156
  803b64:	03400404 	movi	r13,16
  803b68:	283fec1e 	bne	r5,zero,803b1c <___vfprintf_internal_r+0xd78>
  803b6c:	8019883a 	mov	r12,r16
  803b70:	880f883a 	mov	r7,r17
  803b74:	dc000f17 	ldw	r16,60(sp)
  803b78:	dc400e17 	ldw	r17,56(sp)
  803b7c:	a011883a 	mov	r8,r20
  803b80:	b029883a 	mov	r20,r22
  803b84:	202d883a 	mov	r22,r4
  803b88:	10800044 	addi	r2,r2,1
  803b8c:	1b07883a 	add	r3,r3,r12
  803b90:	d8801b15 	stw	r2,108(sp)
  803b94:	b1c00015 	stw	r7,0(r22)
  803b98:	b3000115 	stw	r12,4(r22)
  803b9c:	d8c01c15 	stw	r3,112(sp)
  803ba0:	10800208 	cmpgei	r2,r2,8
  803ba4:	1003031e 	bne	r2,zero,8047b4 <___vfprintf_internal_r+0x1a10>
		PAD (dprec - size, zeroes);
  803ba8:	4551c83a 	sub	r8,r8,r21
			PAD (width - realsz, zeroes);
  803bac:	b5800204 	addi	r22,r22,8
		PAD (dprec - size, zeroes);
  803bb0:	023d6d0e 	bge	zero,r8,803168 <___vfprintf_internal_r+0x3c4>
  803bb4:	01c02074 	movhi	r7,129
  803bb8:	41000450 	cmplti	r4,r8,17
  803bbc:	d8801b17 	ldw	r2,108(sp)
  803bc0:	39cafd04 	addi	r7,r7,11252
  803bc4:	2000221e 	bne	r4,zero,803c50 <___vfprintf_internal_r+0xeac>
  803bc8:	dc400e15 	stw	r17,56(sp)
  803bcc:	dc000f15 	stw	r16,60(sp)
  803bd0:	03000404 	movi	r12,16
  803bd4:	4021883a 	mov	r16,r8
  803bd8:	3823883a 	mov	r17,r7
  803bdc:	00000406 	br	803bf0 <___vfprintf_internal_r+0xe4c>
  803be0:	843ffc04 	addi	r16,r16,-16
  803be4:	81000448 	cmpgei	r4,r16,17
  803be8:	b5800204 	addi	r22,r22,8
  803bec:	20001426 	beq	r4,zero,803c40 <___vfprintf_internal_r+0xe9c>
  803bf0:	10800044 	addi	r2,r2,1
  803bf4:	18c00404 	addi	r3,r3,16
  803bf8:	b4400015 	stw	r17,0(r22)
  803bfc:	b3000115 	stw	r12,4(r22)
  803c00:	d8c01c15 	stw	r3,112(sp)
  803c04:	d8801b15 	stw	r2,108(sp)
  803c08:	11000208 	cmpgei	r4,r2,8
  803c0c:	203ff426 	beq	r4,zero,803be0 <___vfprintf_internal_r+0xe3c>
  803c10:	d9801a04 	addi	r6,sp,104
  803c14:	900b883a 	mov	r5,r18
  803c18:	9809883a 	mov	r4,r19
  803c1c:	080a4e40 	call	80a4e4 <__sprint_r>
  803c20:	103d6f1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  803c24:	843ffc04 	addi	r16,r16,-16
  803c28:	81000448 	cmpgei	r4,r16,17
  803c2c:	d8c01c17 	ldw	r3,112(sp)
  803c30:	d8801b17 	ldw	r2,108(sp)
  803c34:	dd802704 	addi	r22,sp,156
  803c38:	03000404 	movi	r12,16
  803c3c:	203fec1e 	bne	r4,zero,803bf0 <___vfprintf_internal_r+0xe4c>
  803c40:	8011883a 	mov	r8,r16
  803c44:	880f883a 	mov	r7,r17
  803c48:	dc000f17 	ldw	r16,60(sp)
  803c4c:	dc400e17 	ldw	r17,56(sp)
  803c50:	10800044 	addi	r2,r2,1
  803c54:	1a07883a 	add	r3,r3,r8
  803c58:	d8801b15 	stw	r2,108(sp)
  803c5c:	b1c00015 	stw	r7,0(r22)
  803c60:	b2000115 	stw	r8,4(r22)
  803c64:	d8c01c15 	stw	r3,112(sp)
  803c68:	10800208 	cmpgei	r2,r2,8
  803c6c:	10014a1e 	bne	r2,zero,804198 <___vfprintf_internal_r+0x13f4>
  803c70:	b5800204 	addi	r22,r22,8
  803c74:	003d3c06 	br	803168 <___vfprintf_internal_r+0x3c4>
				switch (base) {
  803c78:	10c00060 	cmpeqi	r3,r2,1
  803c7c:	1803bc1e 	bne	r3,zero,804b70 <___vfprintf_internal_r+0x1dcc>
  803c80:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  803c84:	db000417 	ldw	r12,16(sp)
  803c88:	103ea826 	beq	r2,zero,80372c <___vfprintf_internal_r+0x988>
			cp = buf + BUF;
  803c8c:	d9000c17 	ldw	r4,48(sp)
  803c90:	dc402704 	addi	r17,sp,156
						*--cp = xdigs[_uquad & 15];
  803c94:	a08003cc 	andi	r2,r20,15
						_uquad >>= 4;
  803c98:	a806973a 	slli	r3,r21,28
  803c9c:	a028d13a 	srli	r20,r20,4
						*--cp = xdigs[_uquad & 15];
  803ca0:	2085883a 	add	r2,r4,r2
  803ca4:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  803ca8:	a82ad13a 	srli	r21,r21,4
  803cac:	1d28b03a 	or	r20,r3,r20
						*--cp = xdigs[_uquad & 15];
  803cb0:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  803cb4:	a544b03a 	or	r2,r20,r21
						*--cp = xdigs[_uquad & 15];
  803cb8:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  803cbc:	103ff51e 	bne	r2,zero,803c94 <___vfprintf_internal_r+0xef0>
			size = buf + BUF - cp;
  803cc0:	d8802704 	addi	r2,sp,156
  803cc4:	146bc83a 	sub	r21,r2,r17
  803cc8:	db000415 	stw	r12,16(sp)
  803ccc:	003e4c06 	br	803600 <___vfprintf_internal_r+0x85c>
		FLUSH ();	/* copy out the I/O vectors */
  803cd0:	d9801a04 	addi	r6,sp,104
  803cd4:	900b883a 	mov	r5,r18
  803cd8:	9809883a 	mov	r4,r19
  803cdc:	080a4e40 	call	80a4e4 <__sprint_r>
  803ce0:	103d3926 	beq	r2,zero,8031c8 <___vfprintf_internal_r+0x424>
  803ce4:	003d3e06 	br	8031e0 <___vfprintf_internal_r+0x43c>
				if (ndig > 1 || flags & ALT) {
  803ce8:	d8800817 	ldw	r2,32(sp)
			PRINT (cp, size);
  803cec:	da001b17 	ldw	r8,108(sp)
					PRINT ("0", 1);
  803cf0:	18c00044 	addi	r3,r3,1
				if (ndig > 1 || flags & ALT) {
  803cf4:	10800088 	cmpgei	r2,r2,2
			PRINT (cp, size);
  803cf8:	45400044 	addi	r21,r8,1
  803cfc:	b7000204 	addi	fp,r22,8
				if (ndig > 1 || flags & ALT) {
  803d00:	1000f826 	beq	r2,zero,8040e4 <___vfprintf_internal_r+0x1340>
					PRINT (cp, 1);
  803d04:	00800044 	movi	r2,1
  803d08:	b0800115 	stw	r2,4(r22)
  803d0c:	b4400015 	stw	r17,0(r22)
  803d10:	d8c01c15 	stw	r3,112(sp)
  803d14:	dd401b15 	stw	r21,108(sp)
  803d18:	a8800210 	cmplti	r2,r21,8
  803d1c:	1001cc26 	beq	r2,zero,804450 <___vfprintf_internal_r+0x16ac>
					PRINT (decimal_point, decp_len);
  803d20:	d8800b17 	ldw	r2,44(sp)
  803d24:	d9000d17 	ldw	r4,52(sp)
  803d28:	ad400044 	addi	r21,r21,1
  803d2c:	1887883a 	add	r3,r3,r2
  803d30:	e0800115 	stw	r2,4(fp)
  803d34:	e1000015 	stw	r4,0(fp)
  803d38:	d8c01c15 	stw	r3,112(sp)
  803d3c:	dd401b15 	stw	r21,108(sp)
  803d40:	a8800208 	cmpgei	r2,r21,8
  803d44:	1001cb1e 	bne	r2,zero,804474 <___vfprintf_internal_r+0x16d0>
  803d48:	e7000204 	addi	fp,fp,8
					if (_fpvalue) {
  803d4c:	d9000917 	ldw	r4,36(sp)
  803d50:	d9400a17 	ldw	r5,40(sp)
						PRINT (cp, ndig - 1);
  803d54:	aa000044 	addi	r8,r21,1
					if (_fpvalue) {
  803d58:	000d883a 	mov	r6,zero
  803d5c:	000f883a 	mov	r7,zero
  803d60:	d8c00e15 	stw	r3,56(sp)
						PRINT (cp, ndig - 1);
  803d64:	da000715 	stw	r8,28(sp)
					if (_fpvalue) {
  803d68:	080e7dc0 	call	80e7dc <__eqdf2>
						PAD (ndig - 1, zeroes);
  803d6c:	d8c00817 	ldw	r3,32(sp)
						PRINT (cp, ndig - 1);
  803d70:	da000717 	ldw	r8,28(sp)
  803d74:	e5800204 	addi	r22,fp,8
						PAD (ndig - 1, zeroes);
  803d78:	1affffc4 	addi	r11,r3,-1
					if (_fpvalue) {
  803d7c:	d8c00e17 	ldw	r3,56(sp)
  803d80:	1000e526 	beq	r2,zero,804118 <___vfprintf_internal_r+0x1374>
					cp++;
  803d84:	8a400044 	addi	r9,r17,1
						PRINT (cp, ndig - 1);
  803d88:	1ac7883a 	add	r3,r3,r11
  803d8c:	da001b15 	stw	r8,108(sp)
  803d90:	e2400015 	stw	r9,0(fp)
  803d94:	e2c00115 	stw	r11,4(fp)
  803d98:	d8c01c15 	stw	r3,112(sp)
  803d9c:	42000208 	cmpgei	r8,r8,8
  803da0:	40013e1e 	bne	r8,zero,80429c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  803da4:	e0800404 	addi	r2,fp,16
  803da8:	aa000084 	addi	r8,r21,2
						PRINT (cp, ndig - 1);
  803dac:	b039883a 	mov	fp,r22
				PRINT (expstr, expsize);
  803db0:	102d883a 	mov	r22,r2
  803db4:	d9001017 	ldw	r4,64(sp)
  803db8:	d8801644 	addi	r2,sp,89
  803dbc:	da001b15 	stw	r8,108(sp)
  803dc0:	20c7883a 	add	r3,r4,r3
  803dc4:	e0800015 	stw	r2,0(fp)
  803dc8:	e1000115 	stw	r4,4(fp)
  803dcc:	d8c01c15 	stw	r3,112(sp)
  803dd0:	42000210 	cmplti	r8,r8,8
  803dd4:	403cf11e 	bne	r8,zero,80319c <___vfprintf_internal_r+0x3f8>
  803dd8:	d9801a04 	addi	r6,sp,104
  803ddc:	900b883a 	mov	r5,r18
  803de0:	9809883a 	mov	r4,r19
  803de4:	080a4e40 	call	80a4e4 <__sprint_r>
  803de8:	103cfd1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  803dec:	d8c01c17 	ldw	r3,112(sp)
				PRINT (expstr, expsize);
  803df0:	dd802704 	addi	r22,sp,156
  803df4:	003ce906 	br	80319c <___vfprintf_internal_r+0x3f8>
				flags &= ~ZEROPAD;
  803df8:	db000417 	ldw	r12,16(sp)
  803dfc:	003e4706 	br	80371c <___vfprintf_internal_r+0x978>
			PAD (width - realsz, blanks);
  803e00:	03002074 	movhi	r12,129
  803e04:	39000450 	cmplti	r4,r7,17
  803e08:	d8801b17 	ldw	r2,108(sp)
  803e0c:	630b0104 	addi	r12,r12,11268
  803e10:	2000321e 	bne	r4,zero,803edc <___vfprintf_internal_r+0x1138>
  803e14:	dc401115 	stw	r17,68(sp)
  803e18:	b009883a 	mov	r4,r22
  803e1c:	9023883a 	mov	r17,r18
  803e20:	a82d883a 	mov	r22,r21
  803e24:	ddc01215 	stw	r23,72(sp)
  803e28:	03c00404 	movi	r15,16
  803e2c:	a02f883a 	mov	r23,r20
  803e30:	db800e15 	stw	r14,56(sp)
  803e34:	8029883a 	mov	r20,r16
  803e38:	db400f15 	stw	r13,60(sp)
  803e3c:	402b883a 	mov	r21,r8
  803e40:	3821883a 	mov	r16,r7
  803e44:	6025883a 	mov	r18,r12
  803e48:	00000406 	br	803e5c <___vfprintf_internal_r+0x10b8>
  803e4c:	843ffc04 	addi	r16,r16,-16
  803e50:	81800448 	cmpgei	r6,r16,17
  803e54:	21000204 	addi	r4,r4,8
  803e58:	30001426 	beq	r6,zero,803eac <___vfprintf_internal_r+0x1108>
  803e5c:	10800044 	addi	r2,r2,1
  803e60:	18c00404 	addi	r3,r3,16
  803e64:	24800015 	stw	r18,0(r4)
  803e68:	23c00115 	stw	r15,4(r4)
  803e6c:	d8c01c15 	stw	r3,112(sp)
  803e70:	d8801b15 	stw	r2,108(sp)
  803e74:	11800208 	cmpgei	r6,r2,8
  803e78:	303ff426 	beq	r6,zero,803e4c <___vfprintf_internal_r+0x10a8>
  803e7c:	d9801a04 	addi	r6,sp,104
  803e80:	880b883a 	mov	r5,r17
  803e84:	9809883a 	mov	r4,r19
  803e88:	080a4e40 	call	80a4e4 <__sprint_r>
  803e8c:	1001b91e 	bne	r2,zero,804574 <___vfprintf_internal_r+0x17d0>
  803e90:	843ffc04 	addi	r16,r16,-16
  803e94:	81800448 	cmpgei	r6,r16,17
  803e98:	d8c01c17 	ldw	r3,112(sp)
  803e9c:	d8801b17 	ldw	r2,108(sp)
  803ea0:	d9002704 	addi	r4,sp,156
  803ea4:	03c00404 	movi	r15,16
  803ea8:	303fec1e 	bne	r6,zero,803e5c <___vfprintf_internal_r+0x10b8>
  803eac:	800f883a 	mov	r7,r16
  803eb0:	9019883a 	mov	r12,r18
  803eb4:	a021883a 	mov	r16,r20
  803eb8:	8825883a 	mov	r18,r17
  803ebc:	b829883a 	mov	r20,r23
  803ec0:	db800e17 	ldw	r14,56(sp)
  803ec4:	db400f17 	ldw	r13,60(sp)
  803ec8:	ddc01217 	ldw	r23,72(sp)
  803ecc:	dc401117 	ldw	r17,68(sp)
  803ed0:	a811883a 	mov	r8,r21
  803ed4:	b02b883a 	mov	r21,r22
  803ed8:	202d883a 	mov	r22,r4
  803edc:	10800044 	addi	r2,r2,1
  803ee0:	19c7883a 	add	r3,r3,r7
  803ee4:	d8801b15 	stw	r2,108(sp)
  803ee8:	b3000015 	stw	r12,0(r22)
  803eec:	b1c00115 	stw	r7,4(r22)
  803ef0:	d8c01c15 	stw	r3,112(sp)
  803ef4:	10800208 	cmpgei	r2,r2,8
  803ef8:	1001671e 	bne	r2,zero,804498 <___vfprintf_internal_r+0x16f4>
  803efc:	b5800204 	addi	r22,r22,8
  803f00:	003c7a06 	br	8030ec <___vfprintf_internal_r+0x348>
			PRINT (&sign, 1);
  803f04:	d9801a04 	addi	r6,sp,104
  803f08:	900b883a 	mov	r5,r18
  803f0c:	9809883a 	mov	r4,r19
  803f10:	da001115 	stw	r8,68(sp)
  803f14:	db400f15 	stw	r13,60(sp)
  803f18:	db800e15 	stw	r14,56(sp)
  803f1c:	080a4e40 	call	80a4e4 <__sprint_r>
  803f20:	103caf1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
			PRINT (ox, 2);
  803f24:	d8c01c17 	ldw	r3,112(sp)
			PRINT (&sign, 1);
  803f28:	da001117 	ldw	r8,68(sp)
  803f2c:	db400f17 	ldw	r13,60(sp)
  803f30:	db800e17 	ldw	r14,56(sp)
  803f34:	dd802704 	addi	r22,sp,156
  803f38:	003c7a06 	br	803124 <___vfprintf_internal_r+0x380>
			PRINT (ox, 2);
  803f3c:	d9801a04 	addi	r6,sp,104
  803f40:	900b883a 	mov	r5,r18
  803f44:	9809883a 	mov	r4,r19
  803f48:	da000f15 	stw	r8,60(sp)
  803f4c:	db400e15 	stw	r13,56(sp)
  803f50:	080a4e40 	call	80a4e4 <__sprint_r>
  803f54:	103ca21e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  803f58:	d8c01c17 	ldw	r3,112(sp)
			PRINT (ox, 2);
  803f5c:	da000f17 	ldw	r8,60(sp)
  803f60:	db400e17 	ldw	r13,56(sp)
  803f64:	dd802704 	addi	r22,sp,156
  803f68:	003c7b06 	br	803158 <___vfprintf_internal_r+0x3b4>
				} else if (expt <= 0) {
  803f6c:	d9401417 	ldw	r5,80(sp)
  803f70:	0141570e 	bge	zero,r5,8044d0 <___vfprintf_internal_r+0x172c>
					PRINTANDPAD(cp, convbuf + ndig,
  803f74:	d8800717 	ldw	r2,28(sp)
  803f78:	d9000817 	ldw	r4,32(sp)
  803f7c:	102b883a 	mov	r21,r2
  803f80:	2080b916 	blt	r4,r2,804268 <___vfprintf_internal_r+0x14c4>
  803f84:	05400a0e 	bge	zero,r21,803fb0 <___vfprintf_internal_r+0x120c>
  803f88:	d8801b17 	ldw	r2,108(sp)
  803f8c:	1d47883a 	add	r3,r3,r21
  803f90:	b4400015 	stw	r17,0(r22)
  803f94:	10800044 	addi	r2,r2,1
  803f98:	d8801b15 	stw	r2,108(sp)
  803f9c:	b5400115 	stw	r21,4(r22)
  803fa0:	d8c01c15 	stw	r3,112(sp)
  803fa4:	10800208 	cmpgei	r2,r2,8
  803fa8:	10032d1e 	bne	r2,zero,804c60 <___vfprintf_internal_r+0x1ebc>
  803fac:	b5800204 	addi	r22,r22,8
  803fb0:	a800c516 	blt	r21,zero,8042c8 <___vfprintf_internal_r+0x1524>
  803fb4:	d8800717 	ldw	r2,28(sp)
  803fb8:	156bc83a 	sub	r21,r2,r21
  803fbc:	0540db16 	blt	zero,r21,80432c <___vfprintf_internal_r+0x1588>
					if (expt < ndig || flags & ALT)
  803fc0:	dd401417 	ldw	r21,80(sp)
  803fc4:	d8800817 	ldw	r2,32(sp)
  803fc8:	a880aa0e 	bge	r21,r2,804274 <___vfprintf_internal_r+0x14d0>
					    PRINT (decimal_point, decp_len);
  803fcc:	d8800d17 	ldw	r2,52(sp)
  803fd0:	d9000b17 	ldw	r4,44(sp)
  803fd4:	b0800015 	stw	r2,0(r22)
  803fd8:	d8801b17 	ldw	r2,108(sp)
  803fdc:	1907883a 	add	r3,r3,r4
  803fe0:	b1000115 	stw	r4,4(r22)
  803fe4:	10800044 	addi	r2,r2,1
  803fe8:	d8801b15 	stw	r2,108(sp)
  803fec:	d8c01c15 	stw	r3,112(sp)
  803ff0:	10800208 	cmpgei	r2,r2,8
  803ff4:	1003111e 	bne	r2,zero,804c3c <___vfprintf_internal_r+0x1e98>
  803ff8:	b5800204 	addi	r22,r22,8
					PRINTANDPAD (cp, convbuf + ndig,
  803ffc:	d9000817 	ldw	r4,32(sp)
  804000:	d9400717 	ldw	r5,28(sp)
  804004:	2545c83a 	sub	r2,r4,r21
  804008:	2149c83a 	sub	r4,r4,r5
  80400c:	102b883a 	mov	r21,r2
  804010:	2080010e 	bge	r4,r2,804018 <___vfprintf_internal_r+0x1274>
  804014:	202b883a 	mov	r21,r4
  804018:	05400c0e 	bge	zero,r21,80404c <___vfprintf_internal_r+0x12a8>
					cp += lead;
  80401c:	d9000717 	ldw	r4,28(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  804020:	1d47883a 	add	r3,r3,r21
  804024:	b5400115 	stw	r21,4(r22)
					cp += lead;
  804028:	8913883a 	add	r9,r17,r4
					PRINTANDPAD (cp, convbuf + ndig,
  80402c:	d9001b17 	ldw	r4,108(sp)
  804030:	b2400015 	stw	r9,0(r22)
  804034:	d8c01c15 	stw	r3,112(sp)
  804038:	21000044 	addi	r4,r4,1
  80403c:	d9001b15 	stw	r4,108(sp)
  804040:	21000208 	cmpgei	r4,r4,8
  804044:	2003111e 	bne	r4,zero,804c8c <___vfprintf_internal_r+0x1ee8>
  804048:	b5800204 	addi	r22,r22,8
  80404c:	a800010e 	bge	r21,zero,804054 <___vfprintf_internal_r+0x12b0>
  804050:	002b883a 	mov	r21,zero
  804054:	156bc83a 	sub	r21,r2,r21
  804058:	057c500e 	bge	zero,r21,80319c <___vfprintf_internal_r+0x3f8>
  80405c:	01c02074 	movhi	r7,129
  804060:	a9000450 	cmplti	r4,r21,17
  804064:	d8801b17 	ldw	r2,108(sp)
  804068:	39cafd04 	addi	r7,r7,11252
  80406c:	2001c51e 	bne	r4,zero,804784 <___vfprintf_internal_r+0x19e0>
  804070:	07000404 	movi	fp,16
  804074:	3823883a 	mov	r17,r7
  804078:	00000406 	br	80408c <___vfprintf_internal_r+0x12e8>
  80407c:	b5800204 	addi	r22,r22,8
  804080:	ad7ffc04 	addi	r21,r21,-16
  804084:	a9000448 	cmpgei	r4,r21,17
  804088:	2001bd26 	beq	r4,zero,804780 <___vfprintf_internal_r+0x19dc>
  80408c:	10800044 	addi	r2,r2,1
  804090:	18c00404 	addi	r3,r3,16
  804094:	b4400015 	stw	r17,0(r22)
  804098:	b7000115 	stw	fp,4(r22)
  80409c:	d8c01c15 	stw	r3,112(sp)
  8040a0:	d8801b15 	stw	r2,108(sp)
  8040a4:	11000208 	cmpgei	r4,r2,8
  8040a8:	203ff426 	beq	r4,zero,80407c <___vfprintf_internal_r+0x12d8>
  8040ac:	d9801a04 	addi	r6,sp,104
  8040b0:	900b883a 	mov	r5,r18
  8040b4:	9809883a 	mov	r4,r19
  8040b8:	080a4e40 	call	80a4e4 <__sprint_r>
  8040bc:	103c481e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  8040c0:	d8c01c17 	ldw	r3,112(sp)
  8040c4:	d8801b17 	ldw	r2,108(sp)
  8040c8:	dd802704 	addi	r22,sp,156
  8040cc:	003fec06 	br	804080 <___vfprintf_internal_r+0x12dc>
			if (_uquad != 0 || prec != 0) {
  8040d0:	4002a71e 	bne	r8,zero,804b70 <___vfprintf_internal_r+0x1dcc>
  8040d4:	0011883a 	mov	r8,zero
  8040d8:	002b883a 	mov	r21,zero
			cp = buf + BUF;
  8040dc:	dc402704 	addi	r17,sp,156
  8040e0:	003d4706 	br	803600 <___vfprintf_internal_r+0x85c>
				if (ndig > 1 || flags & ALT) {
  8040e4:	d8800417 	ldw	r2,16(sp)
  8040e8:	1080004c 	andi	r2,r2,1
  8040ec:	103f051e 	bne	r2,zero,803d04 <___vfprintf_internal_r+0xf60>
					PRINT (cp, 1);
  8040f0:	00800044 	movi	r2,1
  8040f4:	dd401b15 	stw	r21,108(sp)
  8040f8:	b4400015 	stw	r17,0(r22)
  8040fc:	b0800115 	stw	r2,4(r22)
  804100:	d8c01c15 	stw	r3,112(sp)
  804104:	ad400208 	cmpgei	r21,r21,8
  804108:	a800641e 	bne	r21,zero,80429c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  80410c:	42000084 	addi	r8,r8,2
  804110:	b5800404 	addi	r22,r22,16
  804114:	003f2706 	br	803db4 <___vfprintf_internal_r+0x1010>
						PAD (ndig - 1, zeroes);
  804118:	02ff260e 	bge	zero,r11,803db4 <___vfprintf_internal_r+0x1010>
  80411c:	58800450 	cmplti	r2,r11,17
  804120:	01c02074 	movhi	r7,129
  804124:	10034c1e 	bne	r2,zero,804e58 <___vfprintf_internal_r+0x20b4>
  804128:	39cafd04 	addi	r7,r7,11252
  80412c:	dc000715 	stw	r16,28(sp)
  804130:	05800404 	movi	r22,16
  804134:	5823883a 	mov	r17,r11
  804138:	402b883a 	mov	r21,r8
  80413c:	3821883a 	mov	r16,r7
  804140:	00000506 	br	804158 <___vfprintf_internal_r+0x13b4>
  804144:	e7000204 	addi	fp,fp,8
  804148:	8c7ffc04 	addi	r17,r17,-16
  80414c:	88800448 	cmpgei	r2,r17,17
  804150:	1001d626 	beq	r2,zero,8048ac <___vfprintf_internal_r+0x1b08>
  804154:	ad400044 	addi	r21,r21,1
  804158:	18c00404 	addi	r3,r3,16
  80415c:	e4000015 	stw	r16,0(fp)
  804160:	e5800115 	stw	r22,4(fp)
  804164:	d8c01c15 	stw	r3,112(sp)
  804168:	dd401b15 	stw	r21,108(sp)
  80416c:	a8800208 	cmpgei	r2,r21,8
  804170:	103ff426 	beq	r2,zero,804144 <___vfprintf_internal_r+0x13a0>
  804174:	d9801a04 	addi	r6,sp,104
  804178:	900b883a 	mov	r5,r18
  80417c:	9809883a 	mov	r4,r19
  804180:	080a4e40 	call	80a4e4 <__sprint_r>
  804184:	103c161e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  804188:	dd401b17 	ldw	r21,108(sp)
  80418c:	d8c01c17 	ldw	r3,112(sp)
  804190:	df002704 	addi	fp,sp,156
  804194:	003fec06 	br	804148 <___vfprintf_internal_r+0x13a4>
		PAD (dprec - size, zeroes);
  804198:	d9801a04 	addi	r6,sp,104
  80419c:	900b883a 	mov	r5,r18
  8041a0:	9809883a 	mov	r4,r19
  8041a4:	080a4e40 	call	80a4e4 <__sprint_r>
  8041a8:	103c0d1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  8041ac:	d8c01c17 	ldw	r3,112(sp)
		PAD (dprec - size, zeroes);
  8041b0:	dd802704 	addi	r22,sp,156
  8041b4:	003bec06 	br	803168 <___vfprintf_internal_r+0x3c4>
					if (expt < ndig || flags & ALT) {
  8041b8:	d8800417 	ldw	r2,16(sp)
  8041bc:	1080004c 	andi	r2,r2,1
  8041c0:	103bf626 	beq	r2,zero,80319c <___vfprintf_internal_r+0x3f8>
  8041c4:	003e1506 	br	803a1c <___vfprintf_internal_r+0xc78>
			cp = buf + BUF;
  8041c8:	dc402704 	addi	r17,sp,156
  8041cc:	003d0c06 	br	803600 <___vfprintf_internal_r+0x85c>
				ox[0] = '0';
  8041d0:	00800c04 	movi	r2,48
  8041d4:	d8801385 	stb	r2,78(sp)
				ox[1] = ch;
  8041d8:	df0013c5 	stb	fp,79(sp)
				flags |= HEXPREFIX;
  8041dc:	63000094 	ori	r12,r12,2
			base = HEX;
  8041e0:	00800084 	movi	r2,2
  8041e4:	003c3b06 	br	8032d4 <___vfprintf_internal_r+0x530>
			_uquad = UARG ();
  8041e8:	25000017 	ldw	r20,0(r4)
  8041ec:	002b883a 	mov	r21,zero
  8041f0:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  8041f4:	00800044 	movi	r2,1
  8041f8:	003c3606 	br	8032d4 <___vfprintf_internal_r+0x530>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  8041fc:	d9000517 	ldw	r4,20(sp)
  804200:	2005d7fa 	srai	r2,r4,31
  804204:	19000015 	stw	r4,0(r3)
  804208:	18800115 	stw	r2,4(r3)
  80420c:	003b1906 	br	802e74 <___vfprintf_internal_r+0xd0>
hex:			_uquad = UARG ();
  804210:	25000017 	ldw	r20,0(r4)
  804214:	002b883a 	mov	r21,zero
  804218:	d8c00615 	stw	r3,24(sp)
  80421c:	003d1b06 	br	80368c <___vfprintf_internal_r+0x8e8>
			_uquad = UARG ();
  804220:	25000017 	ldw	r20,0(r4)
  804224:	002b883a 	mov	r21,zero
  804228:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  80422c:	0005883a 	mov	r2,zero
  804230:	003c2806 	br	8032d4 <___vfprintf_internal_r+0x530>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
  804234:	18800017 	ldw	r2,0(r3)
  804238:	d8800915 	stw	r2,36(sp)
  80423c:	18800117 	ldw	r2,4(r3)
  804240:	d8800a15 	stw	r2,40(sp)
  804244:	003c5906 	br	8033ac <___vfprintf_internal_r+0x608>
			_uquad = SARG ();
  804248:	25000017 	ldw	r20,0(r4)
  80424c:	d8c00615 	stw	r3,24(sp)
  804250:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  804254:	a805883a 	mov	r2,r21
  804258:	003cd706 	br	8035b8 <___vfprintf_internal_r+0x814>
			width = -width;
  80425c:	0421c83a 	sub	r16,zero,r16
			width = GET_ARG (n, ap, int);
  804260:	d8800615 	stw	r2,24(sp)
  804264:	003d6306 	br	8037f4 <___vfprintf_internal_r+0xa50>
  804268:	202b883a 	mov	r21,r4
					PRINTANDPAD(cp, convbuf + ndig,
  80426c:	057f4616 	blt	zero,r21,803f88 <___vfprintf_internal_r+0x11e4>
  804270:	003f4f06 	br	803fb0 <___vfprintf_internal_r+0x120c>
					if (expt < ndig || flags & ALT)
  804274:	d8800417 	ldw	r2,16(sp)
  804278:	1080004c 	andi	r2,r2,1
  80427c:	103f531e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x1228>
					PRINTANDPAD (cp, convbuf + ndig,
  804280:	d9000817 	ldw	r4,32(sp)
  804284:	d9400717 	ldw	r5,28(sp)
  804288:	2545c83a 	sub	r2,r4,r21
  80428c:	216bc83a 	sub	r21,r4,r5
  804290:	157f6e0e 	bge	r2,r21,80404c <___vfprintf_internal_r+0x12a8>
  804294:	102b883a 	mov	r21,r2
  804298:	003f6c06 	br	80404c <___vfprintf_internal_r+0x12a8>
					PRINT (cp, 1);
  80429c:	d9801a04 	addi	r6,sp,104
  8042a0:	900b883a 	mov	r5,r18
  8042a4:	9809883a 	mov	r4,r19
  8042a8:	080a4e40 	call	80a4e4 <__sprint_r>
  8042ac:	103bcc1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
				PRINT (expstr, expsize);
  8042b0:	da001b17 	ldw	r8,108(sp)
  8042b4:	d8c01c17 	ldw	r3,112(sp)
  8042b8:	dd802904 	addi	r22,sp,164
  8042bc:	42000044 	addi	r8,r8,1
					PRINT (cp, 1);
  8042c0:	df002704 	addi	fp,sp,156
  8042c4:	003ebb06 	br	803db4 <___vfprintf_internal_r+0x1010>
					PRINTANDPAD(cp, convbuf + ndig,
  8042c8:	002b883a 	mov	r21,zero
  8042cc:	003f3906 	br	803fb4 <___vfprintf_internal_r+0x1210>
rflag:		ch = *fmt++;
  8042d0:	bf000043 	ldbu	fp,1(r23)
				flags |= QUADINT;
  8042d4:	63000814 	ori	r12,r12,32
				fmt++;
  8042d8:	bdc00044 	addi	r23,r23,1
  8042dc:	e2c03fcc 	andi	r11,fp,255
  8042e0:	5ac0201c 	xori	r11,r11,128
  8042e4:	5affe004 	addi	r11,r11,-128
  8042e8:	003afa06 	br	802ed4 <___vfprintf_internal_r+0x130>
						PRINT (decimal_point, decp_len);
  8042ec:	d9801a04 	addi	r6,sp,104
  8042f0:	900b883a 	mov	r5,r18
  8042f4:	9809883a 	mov	r4,r19
  8042f8:	080a4e40 	call	80a4e4 <__sprint_r>
  8042fc:	103bb81e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  804300:	d8c01c17 	ldw	r3,112(sp)
						PRINT (decimal_point, decp_len);
  804304:	dd802704 	addi	r22,sp,156
  804308:	003dd006 	br	803a4c <___vfprintf_internal_r+0xca8>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80430c:	408001f0 	cmpltui	r2,r8,7
  804310:	402b883a 	mov	r21,r8
  804314:	1001e726 	beq	r2,zero,804ab4 <___vfprintf_internal_r+0x1d10>
				cp = "(null)";
  804318:	04402074 	movhi	r17,129
  80431c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  804320:	d8c00615 	stw	r3,24(sp)
				cp = "(null)";
  804324:	8c4afa04 	addi	r17,r17,11240
  804328:	003b6306 	br	8030b8 <___vfprintf_internal_r+0x314>
					PRINTANDPAD(cp, convbuf + ndig,
  80432c:	01c02074 	movhi	r7,129
  804330:	a9000450 	cmplti	r4,r21,17
  804334:	d8801b17 	ldw	r2,108(sp)
  804338:	39cafd04 	addi	r7,r7,11252
  80433c:	2001c21e 	bne	r4,zero,804a48 <___vfprintf_internal_r+0x1ca4>
  804340:	dc000e15 	stw	r16,56(sp)
  804344:	07000404 	movi	fp,16
  804348:	3821883a 	mov	r16,r7
  80434c:	00000406 	br	804360 <___vfprintf_internal_r+0x15bc>
  804350:	b5800204 	addi	r22,r22,8
  804354:	ad7ffc04 	addi	r21,r21,-16
  804358:	a9000448 	cmpgei	r4,r21,17
  80435c:	2001b826 	beq	r4,zero,804a40 <___vfprintf_internal_r+0x1c9c>
  804360:	10800044 	addi	r2,r2,1
  804364:	18c00404 	addi	r3,r3,16
  804368:	b4000015 	stw	r16,0(r22)
  80436c:	b7000115 	stw	fp,4(r22)
  804370:	d8c01c15 	stw	r3,112(sp)
  804374:	d8801b15 	stw	r2,108(sp)
  804378:	11000208 	cmpgei	r4,r2,8
  80437c:	203ff426 	beq	r4,zero,804350 <___vfprintf_internal_r+0x15ac>
  804380:	d9801a04 	addi	r6,sp,104
  804384:	900b883a 	mov	r5,r18
  804388:	9809883a 	mov	r4,r19
  80438c:	080a4e40 	call	80a4e4 <__sprint_r>
  804390:	103b931e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  804394:	d8c01c17 	ldw	r3,112(sp)
  804398:	d8801b17 	ldw	r2,108(sp)
  80439c:	dd802704 	addi	r22,sp,156
  8043a0:	003fec06 	br	804354 <___vfprintf_internal_r+0x15b0>
			cp = buf + BUF;
  8043a4:	dc402704 	addi	r17,sp,156
  8043a8:	a805883a 	mov	r2,r21
  8043ac:	dc000715 	stw	r16,28(sp)
  8043b0:	902b883a 	mov	r21,r18
  8043b4:	8821883a 	mov	r16,r17
  8043b8:	db000415 	stw	r12,16(sp)
  8043bc:	a023883a 	mov	r17,r20
  8043c0:	da000e15 	stw	r8,56(sp)
  8043c4:	9829883a 	mov	r20,r19
  8043c8:	1025883a 	mov	r18,r2
  8043cc:	6827883a 	mov	r19,r13
					  *--cp = to_char (_uquad % 10);
  8043d0:	8809883a 	mov	r4,r17
  8043d4:	900b883a 	mov	r5,r18
  8043d8:	01800284 	movi	r6,10
  8043dc:	000f883a 	mov	r7,zero
  8043e0:	080ce440 	call	80ce44 <__umoddi3>
  8043e4:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  8043e8:	8809883a 	mov	r4,r17
  8043ec:	900b883a 	mov	r5,r18
  8043f0:	01800284 	movi	r6,10
  8043f4:	000f883a 	mov	r7,zero
					  *--cp = to_char (_uquad % 10);
  8043f8:	80bfffc5 	stb	r2,-1(r16)
					  _uquad /= 10;
  8043fc:	080c8240 	call	80c824 <__udivdi3>
  804400:	900d883a 	mov	r6,r18
  804404:	880f883a 	mov	r7,r17
					  *--cp = to_char (_uquad % 10);
  804408:	843fffc4 	addi	r16,r16,-1
					  _uquad /= 10;
  80440c:	1023883a 	mov	r17,r2
  804410:	1825883a 	mov	r18,r3
					} while (_uquad != 0);
  804414:	303fee1e 	bne	r6,zero,8043d0 <___vfprintf_internal_r+0x162c>
  804418:	39c002a8 	cmpgeui	r7,r7,10
  80441c:	383fec1e 	bne	r7,zero,8043d0 <___vfprintf_internal_r+0x162c>
			size = buf + BUF - cp;
  804420:	8023883a 	mov	r17,r16
  804424:	d8802704 	addi	r2,sp,156
  804428:	981b883a 	mov	r13,r19
  80442c:	a825883a 	mov	r18,r21
  804430:	dc000717 	ldw	r16,28(sp)
  804434:	da000e17 	ldw	r8,56(sp)
  804438:	a027883a 	mov	r19,r20
  80443c:	146bc83a 	sub	r21,r2,r17
  804440:	003c6f06 	br	803600 <___vfprintf_internal_r+0x85c>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  804444:	d8800517 	ldw	r2,20(sp)
  804448:	18800015 	stw	r2,0(r3)
  80444c:	003a8906 	br	802e74 <___vfprintf_internal_r+0xd0>
					PRINT (cp, 1);
  804450:	d9801a04 	addi	r6,sp,104
  804454:	900b883a 	mov	r5,r18
  804458:	9809883a 	mov	r4,r19
  80445c:	080a4e40 	call	80a4e4 <__sprint_r>
  804460:	103b5f1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
					PRINT (decimal_point, decp_len);
  804464:	d8c01c17 	ldw	r3,112(sp)
  804468:	dd401b17 	ldw	r21,108(sp)
					PRINT (cp, 1);
  80446c:	df002704 	addi	fp,sp,156
  804470:	003e2b06 	br	803d20 <___vfprintf_internal_r+0xf7c>
					PRINT (decimal_point, decp_len);
  804474:	d9801a04 	addi	r6,sp,104
  804478:	900b883a 	mov	r5,r18
  80447c:	9809883a 	mov	r4,r19
  804480:	080a4e40 	call	80a4e4 <__sprint_r>
  804484:	103b561e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig - 1);
  804488:	d8c01c17 	ldw	r3,112(sp)
  80448c:	dd401b17 	ldw	r21,108(sp)
					PRINT (decimal_point, decp_len);
  804490:	df002704 	addi	fp,sp,156
  804494:	003e2d06 	br	803d4c <___vfprintf_internal_r+0xfa8>
			PAD (width - realsz, blanks);
  804498:	d9801a04 	addi	r6,sp,104
  80449c:	900b883a 	mov	r5,r18
  8044a0:	9809883a 	mov	r4,r19
  8044a4:	da001115 	stw	r8,68(sp)
  8044a8:	db400f15 	stw	r13,60(sp)
  8044ac:	db800e15 	stw	r14,56(sp)
  8044b0:	080a4e40 	call	80a4e4 <__sprint_r>
  8044b4:	103b4a1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
			PRINT (&sign, 1);
  8044b8:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, blanks);
  8044bc:	da001117 	ldw	r8,68(sp)
  8044c0:	db400f17 	ldw	r13,60(sp)
  8044c4:	db800e17 	ldw	r14,56(sp)
  8044c8:	dd802704 	addi	r22,sp,156
  8044cc:	003b0706 	br	8030ec <___vfprintf_internal_r+0x348>
					PRINT ("0", 1);
  8044d0:	d8801b17 	ldw	r2,108(sp)
  8044d4:	01002074 	movhi	r4,129
  8044d8:	210afc04 	addi	r4,r4,11248
  8044dc:	10800044 	addi	r2,r2,1
  8044e0:	18c00044 	addi	r3,r3,1
  8044e4:	b1000015 	stw	r4,0(r22)
  8044e8:	01000044 	movi	r4,1
  8044ec:	d8801b15 	stw	r2,108(sp)
  8044f0:	b1000115 	stw	r4,4(r22)
  8044f4:	d8c01c15 	stw	r3,112(sp)
  8044f8:	10800208 	cmpgei	r2,r2,8
  8044fc:	1001641e 	bne	r2,zero,804a90 <___vfprintf_internal_r+0x1cec>
  804500:	b5800204 	addi	r22,r22,8
					if (expt || ndig || flags & ALT) {
  804504:	2800bd1e 	bne	r5,zero,8047fc <___vfprintf_internal_r+0x1a58>
  804508:	d8800417 	ldw	r2,16(sp)
  80450c:	d9000817 	ldw	r4,32(sp)
  804510:	1080004c 	andi	r2,r2,1
  804514:	1104b03a 	or	r2,r2,r4
  804518:	103b2026 	beq	r2,zero,80319c <___vfprintf_internal_r+0x3f8>
						PRINT (decimal_point, decp_len);
  80451c:	d8800d17 	ldw	r2,52(sp)
  804520:	d9000b17 	ldw	r4,44(sp)
  804524:	b0800015 	stw	r2,0(r22)
  804528:	d8801b17 	ldw	r2,108(sp)
  80452c:	20c7883a 	add	r3,r4,r3
  804530:	b1000115 	stw	r4,4(r22)
  804534:	10800044 	addi	r2,r2,1
  804538:	d8c01c15 	stw	r3,112(sp)
  80453c:	d8801b15 	stw	r2,108(sp)
  804540:	11000208 	cmpgei	r4,r2,8
  804544:	2001771e 	bne	r4,zero,804b24 <___vfprintf_internal_r+0x1d80>
  804548:	b5800204 	addi	r22,r22,8
						PRINT (cp, ndig);
  80454c:	d9000817 	ldw	r4,32(sp)
  804550:	10800044 	addi	r2,r2,1
  804554:	d8801b15 	stw	r2,108(sp)
  804558:	20c7883a 	add	r3,r4,r3
  80455c:	b4400015 	stw	r17,0(r22)
  804560:	b1000115 	stw	r4,4(r22)
  804564:	d8c01c15 	stw	r3,112(sp)
  804568:	10800208 	cmpgei	r2,r2,8
  80456c:	103b0a26 	beq	r2,zero,803198 <___vfprintf_internal_r+0x3f4>
  804570:	003e1906 	br	803dd8 <___vfprintf_internal_r+0x1034>
  804574:	8825883a 	mov	r18,r17
  804578:	003b1906 	br	8031e0 <___vfprintf_internal_r+0x43c>
			if (isnan (_fpvalue)) {
  80457c:	d9000917 	ldw	r4,36(sp)
  804580:	d9400a17 	ldw	r5,40(sp)
  804584:	da000615 	stw	r8,24(sp)
  804588:	200d883a 	mov	r6,r4
  80458c:	280f883a 	mov	r7,r5
  804590:	db000415 	stw	r12,16(sp)
  804594:	080fa8c0 	call	80fa8c <__unorddf2>
  804598:	db000417 	ldw	r12,16(sp)
  80459c:	da000617 	ldw	r8,24(sp)
  8045a0:	1002061e 	bne	r2,zero,804dbc <___vfprintf_internal_r+0x2018>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8045a4:	057ff7c4 	movi	r21,-33
			if (prec == -1) {
  8045a8:	40bfffe0 	cmpeqi	r2,r8,-1
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8045ac:	e56a703a 	and	r21,fp,r21
			if (prec == -1) {
  8045b0:	1001b41e 	bne	r2,zero,804c84 <___vfprintf_internal_r+0x1ee0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8045b4:	a88011d8 	cmpnei	r2,r21,71
  8045b8:	10015726 	beq	r2,zero,804b18 <___vfprintf_internal_r+0x1d74>
			flags |= FPT;
  8045bc:	60804014 	ori	r2,r12,256
  8045c0:	d8800415 	stw	r2,16(sp)
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
  8045c4:	d8800a17 	ldw	r2,40(sp)
  8045c8:	10012d16 	blt	r2,zero,804a80 <___vfprintf_internal_r+0x1cdc>
  8045cc:	dd000a17 	ldw	r20,40(sp)
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
  8045d0:	d8000605 	stb	zero,24(sp)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
  8045d4:	e08019a0 	cmpeqi	r2,fp,102
  8045d8:	d8800f15 	stw	r2,60(sp)
  8045dc:	1000d21e 	bne	r2,zero,804928 <___vfprintf_internal_r+0x1b84>
  8045e0:	e08011a0 	cmpeqi	r2,fp,70
  8045e4:	1000d01e 	bne	r2,zero,804928 <___vfprintf_internal_r+0x1b84>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
  8045e8:	a8801158 	cmpnei	r2,r21,69
  8045ec:	10016226 	beq	r2,zero,804b78 <___vfprintf_internal_r+0x1dd4>
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8045f0:	d8801804 	addi	r2,sp,96
  8045f4:	d8800315 	stw	r2,12(sp)
  8045f8:	d9400917 	ldw	r5,36(sp)
  8045fc:	d8801504 	addi	r2,sp,84
  804600:	d8800215 	stw	r2,8(sp)
  804604:	d8801404 	addi	r2,sp,80
  804608:	da000015 	stw	r8,0(sp)
  80460c:	9809883a 	mov	r4,r19
  804610:	d8800115 	stw	r2,4(sp)
  804614:	01c00084 	movi	r7,2
  804618:	a00d883a 	mov	r6,r20
  80461c:	db000815 	stw	r12,32(sp)
  804620:	da000715 	stw	r8,28(sp)
  804624:	08053000 	call	805300 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804628:	da000717 	ldw	r8,28(sp)
  80462c:	e10019d8 	cmpnei	r4,fp,103
  804630:	db000817 	ldw	r12,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804634:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804638:	4007883a 	mov	r3,r8
  80463c:	2001621e 	bne	r4,zero,804bc8 <___vfprintf_internal_r+0x1e24>
  804640:	6080004c 	andi	r2,r12,1
  804644:	1001621e 	bne	r2,zero,804bd0 <___vfprintf_internal_r+0x1e2c>
				if (expt <= -4 || expt > prec)
  804648:	d8801417 	ldw	r2,80(sp)
			if (ch == 'g' || ch == 'G') {
  80464c:	ad4011e0 	cmpeqi	r21,r21,71
				if (expt <= -4 || expt > prec)
  804650:	d8800715 	stw	r2,28(sp)
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
  804654:	d8801817 	ldw	r2,96(sp)
  804658:	1445c83a 	sub	r2,r2,r17
  80465c:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  804660:	a8000526 	beq	r21,zero,804678 <___vfprintf_internal_r+0x18d4>
				if (expt <= -4 || expt > prec)
  804664:	d8c00717 	ldw	r3,28(sp)
  804668:	18bfff50 	cmplti	r2,r3,-3
  80466c:	1000011e 	bne	r2,zero,804674 <___vfprintf_internal_r+0x18d0>
  804670:	40c1670e 	bge	r8,r3,804c10 <___vfprintf_internal_r+0x1e6c>
					ch -= 2; /* 'e' or 'E' */
  804674:	e73fff84 	addi	fp,fp,-2
				--expt;
  804678:	d8800717 	ldw	r2,28(sp)
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
  80467c:	df001645 	stb	fp,89(sp)
				--expt;
  804680:	157fffc4 	addi	r21,r2,-1
  804684:	dd401415 	stw	r21,80(sp)
	if (exp < 0) {
  804688:	a801d416 	blt	r21,zero,804ddc <___vfprintf_internal_r+0x2038>
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
  80468c:	00800ac4 	movi	r2,43
  804690:	d8801685 	stb	r2,90(sp)
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
  804694:	a8800290 	cmplti	r2,r21,10
  804698:	1001c11e 	bne	r2,zero,804da0 <___vfprintf_internal_r+0x1ffc>
	t = expbuf + MAXEXPLEN;
  80469c:	d98019c4 	addi	r6,sp,103
  8046a0:	9029883a 	mov	r20,r18
  8046a4:	dc400715 	stw	r17,28(sp)
  8046a8:	8025883a 	mov	r18,r16
  8046ac:	db000f15 	stw	r12,60(sp)
  8046b0:	3021883a 	mov	r16,r6
		do {
			*--t = to_char (exp % 10);
  8046b4:	a809883a 	mov	r4,r21
  8046b8:	01400284 	movi	r5,10
  8046bc:	080d4880 	call	80d488 <__modsi3>
  8046c0:	10800c04 	addi	r2,r2,48
		} while ((exp /= 10) > 9);
  8046c4:	a809883a 	mov	r4,r21
			*--t = to_char (exp % 10);
  8046c8:	80bfffc5 	stb	r2,-1(r16)
		} while ((exp /= 10) > 9);
  8046cc:	01400284 	movi	r5,10
  8046d0:	080d4080 	call	80d408 <__divsi3>
  8046d4:	a9001908 	cmpgei	r4,r21,100
  8046d8:	8023883a 	mov	r17,r16
  8046dc:	102b883a 	mov	r21,r2
			*--t = to_char (exp % 10);
  8046e0:	843fffc4 	addi	r16,r16,-1
		} while ((exp /= 10) > 9);
  8046e4:	203ff31e 	bne	r4,zero,8046b4 <___vfprintf_internal_r+0x1910>
		*--t = to_char (exp);
  8046e8:	800d883a 	mov	r6,r16
  8046ec:	11000c04 	addi	r4,r2,48
  8046f0:	9021883a 	mov	r16,r18
  8046f4:	a025883a 	mov	r18,r20
  8046f8:	8829883a 	mov	r20,r17
  8046fc:	a0bfff84 	addi	r2,r20,-2
  804700:	313fffc5 	stb	r4,-1(r6)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804704:	d8c019c4 	addi	r3,sp,103
		*--t = to_char (exp);
  804708:	db000f17 	ldw	r12,60(sp)
  80470c:	dc400717 	ldw	r17,28(sp)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804710:	10c1d62e 	bgeu	r2,r3,804e6c <___vfprintf_internal_r+0x20c8>
  804714:	d8c016c4 	addi	r3,sp,91
  804718:	00000106 	br	804720 <___vfprintf_internal_r+0x197c>
  80471c:	11000003 	ldbu	r4,0(r2)
  804720:	19000005 	stb	r4,0(r3)
  804724:	10800044 	addi	r2,r2,1
  804728:	d90019c4 	addi	r4,sp,103
  80472c:	18c00044 	addi	r3,r3,1
  804730:	113ffa1e 	bne	r2,r4,80471c <___vfprintf_internal_r+0x1978>
  804734:	d8801a44 	addi	r2,sp,105
  804738:	d8c016c4 	addi	r3,sp,91
  80473c:	1505c83a 	sub	r2,r2,r20
  804740:	1885883a 	add	r2,r3,r2
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
  804744:	d8c01644 	addi	r3,sp,89
  804748:	10c5c83a 	sub	r2,r2,r3
  80474c:	d8801015 	stw	r2,64(sp)
				if (ndig > 1 || flags & ALT)
  804750:	d8c00817 	ldw	r3,32(sp)
				size = expsize + ndig;
  804754:	d9001017 	ldw	r4,64(sp)
				if (ndig > 1 || flags & ALT)
  804758:	18800088 	cmpgei	r2,r3,2
				size = expsize + ndig;
  80475c:	192b883a 	add	r21,r3,r4
				if (ndig > 1 || flags & ALT)
  804760:	1001aa26 	beq	r2,zero,804e0c <___vfprintf_internal_r+0x2068>
					size += decp_len;
  804764:	d8800b17 	ldw	r2,44(sp)
  804768:	a8ab883a 	add	r21,r21,r2
		realsz = dprec > size ? dprec : size;
  80476c:	a829883a 	mov	r20,r21
  804770:	a800010e 	bge	r21,zero,804778 <___vfprintf_internal_r+0x19d4>
  804774:	0029883a 	mov	r20,zero
		lead = 0;
  804778:	d8000715 	stw	zero,28(sp)
  80477c:	00009d06 	br	8049f4 <___vfprintf_internal_r+0x1c50>
  804780:	880f883a 	mov	r7,r17
					PRINTANDPAD (cp, convbuf + ndig,
  804784:	10800044 	addi	r2,r2,1
  804788:	1d47883a 	add	r3,r3,r21
  80478c:	b1c00015 	stw	r7,0(r22)
  804790:	003a7c06 	br	803184 <___vfprintf_internal_r+0x3e0>
					PRINT ("0", 1);
  804794:	d9801a04 	addi	r6,sp,104
  804798:	900b883a 	mov	r5,r18
  80479c:	9809883a 	mov	r4,r19
  8047a0:	080a4e40 	call	80a4e4 <__sprint_r>
  8047a4:	103a8e1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
						PRINT (decimal_point, decp_len);
  8047a8:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  8047ac:	dd802704 	addi	r22,sp,156
  8047b0:	003c9706 	br	803a10 <___vfprintf_internal_r+0xc6c>
			PAD (width - realsz, zeroes);
  8047b4:	d9801a04 	addi	r6,sp,104
  8047b8:	900b883a 	mov	r5,r18
  8047bc:	9809883a 	mov	r4,r19
  8047c0:	da000e15 	stw	r8,56(sp)
  8047c4:	080a4e40 	call	80a4e4 <__sprint_r>
  8047c8:	103a851e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  8047cc:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, zeroes);
  8047d0:	da000e17 	ldw	r8,56(sp)
  8047d4:	dd802704 	addi	r22,sp,156
  8047d8:	003a6106 	br	803160 <___vfprintf_internal_r+0x3bc>
				size = strlen (cp);
  8047dc:	8809883a 	mov	r4,r17
  8047e0:	db000415 	stw	r12,16(sp)
  8047e4:	d8c00615 	stw	r3,24(sp)
  8047e8:	0802d0c0 	call	802d0c <strlen>
  8047ec:	db000417 	ldw	r12,16(sp)
  8047f0:	102b883a 	mov	r21,r2
  8047f4:	1029883a 	mov	r20,r2
  8047f8:	003a2f06 	br	8030b8 <___vfprintf_internal_r+0x314>
						PRINT (decimal_point, decp_len);
  8047fc:	d8800d17 	ldw	r2,52(sp)
  804800:	d9000b17 	ldw	r4,44(sp)
  804804:	b0800015 	stw	r2,0(r22)
  804808:	d8801b17 	ldw	r2,108(sp)
  80480c:	20c7883a 	add	r3,r4,r3
  804810:	b1000115 	stw	r4,4(r22)
  804814:	10800044 	addi	r2,r2,1
  804818:	d8c01c15 	stw	r3,112(sp)
  80481c:	d8801b15 	stw	r2,108(sp)
  804820:	11000208 	cmpgei	r4,r2,8
  804824:	2000bf1e 	bne	r4,zero,804b24 <___vfprintf_internal_r+0x1d80>
  804828:	b5800204 	addi	r22,r22,8
						PAD (-expt, zeroes);
  80482c:	283f470e 	bge	r5,zero,80454c <___vfprintf_internal_r+0x17a8>
  804830:	01c02074 	movhi	r7,129
  804834:	293ffc08 	cmpgei	r4,r5,-16
  804838:	39cafd04 	addi	r7,r7,11252
  80483c:	0179c83a 	sub	fp,zero,r5
  804840:	20013f1e 	bne	r4,zero,804d40 <___vfprintf_internal_r+0x1f9c>
  804844:	dc000715 	stw	r16,28(sp)
  804848:	05400404 	movi	r21,16
  80484c:	9021883a 	mov	r16,r18
  804850:	3825883a 	mov	r18,r7
  804854:	00000406 	br	804868 <___vfprintf_internal_r+0x1ac4>
  804858:	b5800204 	addi	r22,r22,8
  80485c:	e73ffc04 	addi	fp,fp,-16
  804860:	e1800448 	cmpgei	r6,fp,17
  804864:	30013326 	beq	r6,zero,804d34 <___vfprintf_internal_r+0x1f90>
  804868:	10800044 	addi	r2,r2,1
  80486c:	18c00404 	addi	r3,r3,16
  804870:	b4800015 	stw	r18,0(r22)
  804874:	b5400115 	stw	r21,4(r22)
  804878:	d8c01c15 	stw	r3,112(sp)
  80487c:	d8801b15 	stw	r2,108(sp)
  804880:	11800208 	cmpgei	r6,r2,8
  804884:	303ff426 	beq	r6,zero,804858 <___vfprintf_internal_r+0x1ab4>
  804888:	d9801a04 	addi	r6,sp,104
  80488c:	800b883a 	mov	r5,r16
  804890:	9809883a 	mov	r4,r19
  804894:	080a4e40 	call	80a4e4 <__sprint_r>
  804898:	1001721e 	bne	r2,zero,804e64 <___vfprintf_internal_r+0x20c0>
  80489c:	d8c01c17 	ldw	r3,112(sp)
  8048a0:	d8801b17 	ldw	r2,108(sp)
  8048a4:	dd802704 	addi	r22,sp,156
  8048a8:	003fec06 	br	80485c <___vfprintf_internal_r+0x1ab8>
						PAD (ndig - 1, zeroes);
  8048ac:	800f883a 	mov	r7,r16
  8048b0:	dc000717 	ldw	r16,28(sp)
  8048b4:	8817883a 	mov	r11,r17
  8048b8:	aa000044 	addi	r8,r21,1
  8048bc:	e0800204 	addi	r2,fp,8
  8048c0:	1ac7883a 	add	r3,r3,r11
  8048c4:	e1c00015 	stw	r7,0(fp)
  8048c8:	e2c00115 	stw	r11,4(fp)
  8048cc:	d8c01c15 	stw	r3,112(sp)
  8048d0:	da001b15 	stw	r8,108(sp)
  8048d4:	41000208 	cmpgei	r4,r8,8
  8048d8:	203e701e 	bne	r4,zero,80429c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  8048dc:	42000044 	addi	r8,r8,1
  8048e0:	15800204 	addi	r22,r2,8
						PAD (ndig - 1, zeroes);
  8048e4:	1039883a 	mov	fp,r2
  8048e8:	003d3206 	br	803db4 <___vfprintf_internal_r+0x1010>
			_uquad = SARG ();
  8048ec:	d8800617 	ldw	r2,24(sp)
  8048f0:	d8c00615 	stw	r3,24(sp)
  8048f4:	15000017 	ldw	r20,0(r2)
  8048f8:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8048fc:	a805883a 	mov	r2,r21
  804900:	003b2d06 	br	8035b8 <___vfprintf_internal_r+0x814>
			_uquad = UARG ();
  804904:	d8800617 	ldw	r2,24(sp)
  804908:	002b883a 	mov	r21,zero
  80490c:	d8c00615 	stw	r3,24(sp)
  804910:	15000017 	ldw	r20,0(r2)
			base = OCT;
  804914:	0005883a 	mov	r2,zero
  804918:	003a6e06 	br	8032d4 <___vfprintf_internal_r+0x530>
					cp = "INF";
  80491c:	04402074 	movhi	r17,129
  804920:	8c4aec04 	addi	r17,r17,11184
				flags &= ~ZEROPAD;
  804924:	003ac606 	br	803440 <___vfprintf_internal_r+0x69c>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804928:	d8801804 	addi	r2,sp,96
  80492c:	d8800315 	stw	r2,12(sp)
  804930:	d9400917 	ldw	r5,36(sp)
  804934:	d8801504 	addi	r2,sp,84
  804938:	d8800215 	stw	r2,8(sp)
  80493c:	d8801404 	addi	r2,sp,80
  804940:	da000015 	stw	r8,0(sp)
  804944:	d8800115 	stw	r2,4(sp)
  804948:	01c000c4 	movi	r7,3
  80494c:	a00d883a 	mov	r6,r20
  804950:	9809883a 	mov	r4,r19
  804954:	db000815 	stw	r12,32(sp)
  804958:	da000715 	stw	r8,28(sp)
  80495c:	08053000 	call	805300 <_dtoa_r>
		bp = digits + ndigits;
  804960:	da000717 	ldw	r8,28(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804964:	1023883a 	mov	r17,r2
		bp = digits + ndigits;
  804968:	db000817 	ldw	r12,32(sp)
  80496c:	1207883a 	add	r3,r2,r8
			if (*digits == '0' && value)
  804970:	88800007 	ldb	r2,0(r17)
  804974:	10800c20 	cmpeqi	r2,r2,48
  804978:	1000571e 	bne	r2,zero,804ad8 <___vfprintf_internal_r+0x1d34>
			bp += *decpt;
  80497c:	d8801417 	ldw	r2,80(sp)
  804980:	1893883a 	add	r9,r3,r2
		if (value == 0)	/* kludge for __dtoa irregularity */
  804984:	d9000917 	ldw	r4,36(sp)
  804988:	000d883a 	mov	r6,zero
  80498c:	000f883a 	mov	r7,zero
  804990:	a00b883a 	mov	r5,r20
  804994:	da401115 	stw	r9,68(sp)
  804998:	da000815 	stw	r8,32(sp)
  80499c:	db000715 	stw	r12,28(sp)
  8049a0:	080e7dc0 	call	80e7dc <__eqdf2>
  8049a4:	db000717 	ldw	r12,28(sp)
  8049a8:	da000817 	ldw	r8,32(sp)
  8049ac:	da401117 	ldw	r9,68(sp)
  8049b0:	1000891e 	bne	r2,zero,804bd8 <___vfprintf_internal_r+0x1e34>
  8049b4:	4805883a 	mov	r2,r9
				if (expt <= -4 || expt > prec)
  8049b8:	d8c01417 	ldw	r3,80(sp)
	*length = rve - digits;
  8049bc:	1445c83a 	sub	r2,r2,r17
			if (ch == 'g' || ch == 'G') {
  8049c0:	ad4011d8 	cmpnei	r21,r21,71
				if (expt <= -4 || expt > prec)
  8049c4:	d8c00715 	stw	r3,28(sp)
	*length = rve - digits;
  8049c8:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  8049cc:	a83f2526 	beq	r21,zero,804664 <___vfprintf_internal_r+0x18c0>
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
  8049d0:	d8800f17 	ldw	r2,60(sp)
  8049d4:	103f2826 	beq	r2,zero,804678 <___vfprintf_internal_r+0x18d4>
					if (expt > 0) {
  8049d8:	d8c00717 	ldw	r3,28(sp)
  8049dc:	6080004c 	andi	r2,r12,1
  8049e0:	1204b03a 	or	r2,r2,r8
  8049e4:	00c1140e 	bge	zero,r3,804e38 <___vfprintf_internal_r+0x2094>
						if (prec || flags & ALT)
  8049e8:	1001011e 	bne	r2,zero,804df0 <___vfprintf_internal_r+0x204c>
  8049ec:	dd400717 	ldw	r21,28(sp)
  8049f0:	a829883a 	mov	r20,r21
			if (softsign)
  8049f4:	d8800607 	ldb	r2,24(sp)
  8049f8:	10008026 	beq	r2,zero,804bfc <___vfprintf_internal_r+0x1e58>
				sign = '-';
  8049fc:	00800b44 	movi	r2,45
  804a00:	d8801345 	stb	r2,77(sp)
  804a04:	d8800e17 	ldw	r2,56(sp)
		dprec = 0;
  804a08:	0011883a 	mov	r8,zero
				sign = '-';
  804a0c:	d8800615 	stw	r2,24(sp)
  804a10:	003b0306 	br	803620 <___vfprintf_internal_r+0x87c>
			_uquad = UARG ();
  804a14:	d8800617 	ldw	r2,24(sp)
  804a18:	002b883a 	mov	r21,zero
  804a1c:	d8c00615 	stw	r3,24(sp)
  804a20:	15000017 	ldw	r20,0(r2)
			base = DEC;
  804a24:	00800044 	movi	r2,1
  804a28:	003a2a06 	br	8032d4 <___vfprintf_internal_r+0x530>
hex:			_uquad = UARG ();
  804a2c:	d8800617 	ldw	r2,24(sp)
  804a30:	002b883a 	mov	r21,zero
  804a34:	d8c00615 	stw	r3,24(sp)
  804a38:	15000017 	ldw	r20,0(r2)
  804a3c:	003b1306 	br	80368c <___vfprintf_internal_r+0x8e8>
  804a40:	800f883a 	mov	r7,r16
  804a44:	dc000e17 	ldw	r16,56(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804a48:	10800044 	addi	r2,r2,1
  804a4c:	1d47883a 	add	r3,r3,r21
  804a50:	d8801b15 	stw	r2,108(sp)
  804a54:	b1c00015 	stw	r7,0(r22)
  804a58:	b5400115 	stw	r21,4(r22)
  804a5c:	d8c01c15 	stw	r3,112(sp)
  804a60:	10800208 	cmpgei	r2,r2,8
  804a64:	10003a1e 	bne	r2,zero,804b50 <___vfprintf_internal_r+0x1dac>
  804a68:	b5800204 	addi	r22,r22,8
  804a6c:	003d5406 	br	803fc0 <___vfprintf_internal_r+0x121c>
					sign = '-';
  804a70:	00800b44 	movi	r2,45
  804a74:	d8801345 	stb	r2,77(sp)
  804a78:	03400b44 	movi	r13,45
  804a7c:	003a6c06 	br	803430 <___vfprintf_internal_r+0x68c>
		value = -value;
  804a80:	1520003c 	xorhi	r20,r2,32768
		*sign = '-';
  804a84:	00800b44 	movi	r2,45
  804a88:	d8800605 	stb	r2,24(sp)
  804a8c:	003ed106 	br	8045d4 <___vfprintf_internal_r+0x1830>
					PRINT ("0", 1);
  804a90:	d9801a04 	addi	r6,sp,104
  804a94:	900b883a 	mov	r5,r18
  804a98:	9809883a 	mov	r4,r19
  804a9c:	080a4e40 	call	80a4e4 <__sprint_r>
  804aa0:	1039cf1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
					if (expt || ndig || flags & ALT) {
  804aa4:	d9401417 	ldw	r5,80(sp)
						PRINT (decimal_point, decp_len);
  804aa8:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  804aac:	dd802704 	addi	r22,sp,156
  804ab0:	003e9406 	br	804504 <___vfprintf_internal_r+0x1760>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  804ab4:	05400184 	movi	r21,6
  804ab8:	003e1706 	br	804318 <___vfprintf_internal_r+0x1574>
  804abc:	d9401345 	stb	r5,77(sp)
  804ac0:	00397706 	br	8030a0 <___vfprintf_internal_r+0x2fc>
	FLUSH ();
  804ac4:	d9801a04 	addi	r6,sp,104
  804ac8:	900b883a 	mov	r5,r18
  804acc:	9809883a 	mov	r4,r19
  804ad0:	080a4e40 	call	80a4e4 <__sprint_r>
  804ad4:	0039c206 	br	8031e0 <___vfprintf_internal_r+0x43c>
			if (*digits == '0' && value)
  804ad8:	d9000917 	ldw	r4,36(sp)
  804adc:	000d883a 	mov	r6,zero
  804ae0:	000f883a 	mov	r7,zero
  804ae4:	a00b883a 	mov	r5,r20
  804ae8:	d8c01115 	stw	r3,68(sp)
  804aec:	da000815 	stw	r8,32(sp)
  804af0:	db000715 	stw	r12,28(sp)
  804af4:	080e7dc0 	call	80e7dc <__eqdf2>
  804af8:	db000717 	ldw	r12,28(sp)
  804afc:	da000817 	ldw	r8,32(sp)
  804b00:	d8c01117 	ldw	r3,68(sp)
  804b04:	103f9d26 	beq	r2,zero,80497c <___vfprintf_internal_r+0x1bd8>
				*decpt = -ndigits + 1;
  804b08:	00800044 	movi	r2,1
  804b0c:	1205c83a 	sub	r2,r2,r8
  804b10:	d8801415 	stw	r2,80(sp)
  804b14:	003f9a06 	br	804980 <___vfprintf_internal_r+0x1bdc>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  804b18:	403ea81e 	bne	r8,zero,8045bc <___vfprintf_internal_r+0x1818>
				prec = 1;
  804b1c:	02000044 	movi	r8,1
  804b20:	003ea606 	br	8045bc <___vfprintf_internal_r+0x1818>
						PRINT (decimal_point, decp_len);
  804b24:	d9801a04 	addi	r6,sp,104
  804b28:	900b883a 	mov	r5,r18
  804b2c:	9809883a 	mov	r4,r19
  804b30:	080a4e40 	call	80a4e4 <__sprint_r>
  804b34:	1039aa1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
						PAD (-expt, zeroes);
  804b38:	d9401417 	ldw	r5,80(sp)
						PRINT (cp, ndig);
  804b3c:	d8c01c17 	ldw	r3,112(sp)
  804b40:	d8801b17 	ldw	r2,108(sp)
						PRINT (decimal_point, decp_len);
  804b44:	dd802704 	addi	r22,sp,156
						PAD (-expt, zeroes);
  804b48:	283e800e 	bge	r5,zero,80454c <___vfprintf_internal_r+0x17a8>
  804b4c:	003f3806 	br	804830 <___vfprintf_internal_r+0x1a8c>
					PRINTANDPAD(cp, convbuf + ndig,
  804b50:	d9801a04 	addi	r6,sp,104
  804b54:	900b883a 	mov	r5,r18
  804b58:	9809883a 	mov	r4,r19
  804b5c:	080a4e40 	call	80a4e4 <__sprint_r>
  804b60:	10399f1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804b64:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804b68:	dd802704 	addi	r22,sp,156
  804b6c:	003d1406 	br	803fc0 <___vfprintf_internal_r+0x121c>
				flags &= ~ZEROPAD;
  804b70:	db000417 	ldw	r12,16(sp)
  804b74:	003a9d06 	br	8035ec <___vfprintf_internal_r+0x848>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804b78:	d8801804 	addi	r2,sp,96
  804b7c:	d8800315 	stw	r2,12(sp)
  804b80:	d9400917 	ldw	r5,36(sp)
  804b84:	d8801504 	addi	r2,sp,84
			ndigits++;
  804b88:	40c00044 	addi	r3,r8,1
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804b8c:	d8800215 	stw	r2,8(sp)
  804b90:	d8801404 	addi	r2,sp,80
  804b94:	d8c00015 	stw	r3,0(sp)
  804b98:	d8800115 	stw	r2,4(sp)
  804b9c:	01c00084 	movi	r7,2
  804ba0:	a00d883a 	mov	r6,r20
  804ba4:	9809883a 	mov	r4,r19
  804ba8:	db001115 	stw	r12,68(sp)
			ndigits++;
  804bac:	da000815 	stw	r8,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804bb0:	d8c00715 	stw	r3,28(sp)
  804bb4:	08053000 	call	805300 <_dtoa_r>
  804bb8:	d8c00717 	ldw	r3,28(sp)
  804bbc:	da000817 	ldw	r8,32(sp)
  804bc0:	db001117 	ldw	r12,68(sp)
  804bc4:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804bc8:	e08011d8 	cmpnei	r2,fp,71
  804bcc:	103e9c26 	beq	r2,zero,804640 <___vfprintf_internal_r+0x189c>
		bp = digits + ndigits;
  804bd0:	88d3883a 	add	r9,r17,r3
		if (ch == 'f' || ch == 'F') {
  804bd4:	003f6b06 	br	804984 <___vfprintf_internal_r+0x1be0>
		while (rve < bp)
  804bd8:	d8801817 	ldw	r2,96(sp)
  804bdc:	127f762e 	bgeu	r2,r9,8049b8 <___vfprintf_internal_r+0x1c14>
			*rve++ = '0';
  804be0:	01000c04 	movi	r4,48
  804be4:	10c00044 	addi	r3,r2,1
  804be8:	d8c01815 	stw	r3,96(sp)
  804bec:	11000005 	stb	r4,0(r2)
		while (rve < bp)
  804bf0:	d8801817 	ldw	r2,96(sp)
  804bf4:	127ffb36 	bltu	r2,r9,804be4 <___vfprintf_internal_r+0x1e40>
  804bf8:	003f6f06 	br	8049b8 <___vfprintf_internal_r+0x1c14>
		if (sign)
  804bfc:	d8800e17 	ldw	r2,56(sp)
  804c00:	db401343 	ldbu	r13,77(sp)
		dprec = 0;
  804c04:	0011883a 	mov	r8,zero
		if (sign)
  804c08:	d8800615 	stw	r2,24(sp)
  804c0c:	003a8006 	br	803610 <___vfprintf_internal_r+0x86c>
				} else if (expt >= ndig) { /* fixed g fmt */
  804c10:	d8800717 	ldw	r2,28(sp)
  804c14:	d8c00817 	ldw	r3,32(sp)
  804c18:	10c02b16 	blt	r2,r3,804cc8 <___vfprintf_internal_r+0x1f24>
					if (flags & ALT)
  804c1c:	6300004c 	andi	r12,r12,1
  804c20:	6000581e 	bne	r12,zero,804d84 <___vfprintf_internal_r+0x1fe0>
		realsz = dprec > size ? dprec : size;
  804c24:	1029883a 	mov	r20,r2
  804c28:	1000010e 	bge	r2,zero,804c30 <___vfprintf_internal_r+0x1e8c>
  804c2c:	0029883a 	mov	r20,zero
  804c30:	dd400717 	ldw	r21,28(sp)
  804c34:	070019c4 	movi	fp,103
  804c38:	003f6e06 	br	8049f4 <___vfprintf_internal_r+0x1c50>
					    PRINT (decimal_point, decp_len);
  804c3c:	d9801a04 	addi	r6,sp,104
  804c40:	900b883a 	mov	r5,r18
  804c44:	9809883a 	mov	r4,r19
  804c48:	080a4e40 	call	80a4e4 <__sprint_r>
  804c4c:	1039641e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
					PRINTANDPAD (cp, convbuf + ndig,
  804c50:	dd401417 	ldw	r21,80(sp)
  804c54:	d8c01c17 	ldw	r3,112(sp)
					    PRINT (decimal_point, decp_len);
  804c58:	dd802704 	addi	r22,sp,156
  804c5c:	003ce706 	br	803ffc <___vfprintf_internal_r+0x1258>
					PRINTANDPAD(cp, convbuf + ndig,
  804c60:	d9801a04 	addi	r6,sp,104
  804c64:	900b883a 	mov	r5,r18
  804c68:	9809883a 	mov	r4,r19
  804c6c:	080a4e40 	call	80a4e4 <__sprint_r>
  804c70:	10395b1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804c74:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804c78:	dd802704 	addi	r22,sp,156
  804c7c:	a83ccd0e 	bge	r21,zero,803fb4 <___vfprintf_internal_r+0x1210>
  804c80:	003d9106 	br	8042c8 <___vfprintf_internal_r+0x1524>
				prec = DEFPREC;
  804c84:	02000184 	movi	r8,6
  804c88:	003e4c06 	br	8045bc <___vfprintf_internal_r+0x1818>
					PRINTANDPAD (cp, convbuf + ndig,
  804c8c:	d9801a04 	addi	r6,sp,104
  804c90:	900b883a 	mov	r5,r18
  804c94:	9809883a 	mov	r4,r19
  804c98:	080a4e40 	call	80a4e4 <__sprint_r>
  804c9c:	1039501e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
  804ca0:	d8801417 	ldw	r2,80(sp)
  804ca4:	d9000817 	ldw	r4,32(sp)
		FLUSH ();	/* copy out the I/O vectors */
  804ca8:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  804cac:	dd802704 	addi	r22,sp,156
  804cb0:	2085c83a 	sub	r2,r4,r2
  804cb4:	003ce506 	br	80404c <___vfprintf_internal_r+0x12a8>
  804cb8:	4029883a 	mov	r20,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  804cbc:	d8c00615 	stw	r3,24(sp)
  804cc0:	402b883a 	mov	r21,r8
  804cc4:	0038fc06 	br	8030b8 <___vfprintf_internal_r+0x314>
					size = ndig + decp_len;
  804cc8:	d8800817 	ldw	r2,32(sp)
  804ccc:	d8c00b17 	ldw	r3,44(sp)
  804cd0:	10eb883a 	add	r21,r2,r3
					if (expt <= 0)
  804cd4:	d8800717 	ldw	r2,28(sp)
  804cd8:	00800316 	blt	zero,r2,804ce8 <___vfprintf_internal_r+0x1f44>
						size += 1 - expt;
  804cdc:	d8800717 	ldw	r2,28(sp)
  804ce0:	a8abc83a 	sub	r21,r21,r2
  804ce4:	ad400044 	addi	r21,r21,1
		realsz = dprec > size ? dprec : size;
  804ce8:	a829883a 	mov	r20,r21
  804cec:	a8002a16 	blt	r21,zero,804d98 <___vfprintf_internal_r+0x1ff4>
  804cf0:	070019c4 	movi	fp,103
  804cf4:	003f3f06 	br	8049f4 <___vfprintf_internal_r+0x1c50>
  804cf8:	d9401345 	stb	r5,77(sp)
  804cfc:	003ae006 	br	803880 <___vfprintf_internal_r+0xadc>
  804d00:	d9401345 	stb	r5,77(sp)
  804d04:	003a5706 	br	803664 <___vfprintf_internal_r+0x8c0>
  804d08:	d9401345 	stb	r5,77(sp)
  804d0c:	003b1706 	br	80396c <___vfprintf_internal_r+0xbc8>
  804d10:	d9401345 	stb	r5,77(sp)
  804d14:	003a2006 	br	803598 <___vfprintf_internal_r+0x7f4>
  804d18:	d9401345 	stb	r5,77(sp)
  804d1c:	003a6606 	br	8036b8 <___vfprintf_internal_r+0x914>
  804d20:	d9401345 	stb	r5,77(sp)
  804d24:	00399706 	br	803384 <___vfprintf_internal_r+0x5e0>
		return (EOF);
  804d28:	00bfffc4 	movi	r2,-1
  804d2c:	d8800515 	stw	r2,20(sp)
  804d30:	00392e06 	br	8031ec <___vfprintf_internal_r+0x448>
  804d34:	900f883a 	mov	r7,r18
  804d38:	8025883a 	mov	r18,r16
  804d3c:	dc000717 	ldw	r16,28(sp)
						PAD (-expt, zeroes);
  804d40:	10800044 	addi	r2,r2,1
  804d44:	1f07883a 	add	r3,r3,fp
  804d48:	b1c00015 	stw	r7,0(r22)
  804d4c:	b7000115 	stw	fp,4(r22)
  804d50:	d8c01c15 	stw	r3,112(sp)
  804d54:	d8801b15 	stw	r2,108(sp)
  804d58:	11000208 	cmpgei	r4,r2,8
  804d5c:	203dfa26 	beq	r4,zero,804548 <___vfprintf_internal_r+0x17a4>
  804d60:	d9801a04 	addi	r6,sp,104
  804d64:	900b883a 	mov	r5,r18
  804d68:	9809883a 	mov	r4,r19
  804d6c:	080a4e40 	call	80a4e4 <__sprint_r>
  804d70:	10391b1e 	bne	r2,zero,8031e0 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig);
  804d74:	d8c01c17 	ldw	r3,112(sp)
  804d78:	d8801b17 	ldw	r2,108(sp)
						PAD (-expt, zeroes);
  804d7c:	dd802704 	addi	r22,sp,156
  804d80:	003df206 	br	80454c <___vfprintf_internal_r+0x17a8>
						size += decp_len;
  804d84:	d8800717 	ldw	r2,28(sp)
  804d88:	d8c00b17 	ldw	r3,44(sp)
  804d8c:	10eb883a 	add	r21,r2,r3
		realsz = dprec > size ? dprec : size;
  804d90:	a829883a 	mov	r20,r21
  804d94:	a83fd60e 	bge	r21,zero,804cf0 <___vfprintf_internal_r+0x1f4c>
  804d98:	0029883a 	mov	r20,zero
  804d9c:	003fd406 	br	804cf0 <___vfprintf_internal_r+0x1f4c>
			*p++ = '0';
  804da0:	00800c04 	movi	r2,48
		*p++ = to_char (exp);
  804da4:	ad400c04 	addi	r21,r21,48
			*p++ = '0';
  804da8:	d88016c5 	stb	r2,91(sp)
		*p++ = to_char (exp);
  804dac:	00800104 	movi	r2,4
  804db0:	dd401705 	stb	r21,92(sp)
  804db4:	d8801015 	stw	r2,64(sp)
  804db8:	003e6506 	br	804750 <___vfprintf_internal_r+0x19ac>
				if (signbit (_fpvalue))
  804dbc:	d8800a17 	ldw	r2,40(sp)
  804dc0:	10001916 	blt	r2,zero,804e28 <___vfprintf_internal_r+0x2084>
		if (sign)
  804dc4:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  804dc8:	e0801210 	cmplti	r2,fp,72
  804dcc:	1000131e 	bne	r2,zero,804e1c <___vfprintf_internal_r+0x2078>
					cp = "nan";
  804dd0:	04402074 	movhi	r17,129
  804dd4:	8c4aef04 	addi	r17,r17,11196
  804dd8:	00399906 	br	803440 <___vfprintf_internal_r+0x69c>
		exp = -exp;
  804ddc:	05400044 	movi	r21,1
  804de0:	a8abc83a 	sub	r21,r21,r2
		*p++ = '-';
  804de4:	00800b44 	movi	r2,45
  804de8:	d8801685 	stb	r2,90(sp)
  804dec:	003e2906 	br	804694 <___vfprintf_internal_r+0x18f0>
							size += prec + decp_len;
  804df0:	d8800b17 	ldw	r2,44(sp)
  804df4:	18ab883a 	add	r21,r3,r2
  804df8:	aa2b883a 	add	r21,r21,r8
		realsz = dprec > size ? dprec : size;
  804dfc:	a829883a 	mov	r20,r21
  804e00:	a83efc0e 	bge	r21,zero,8049f4 <___vfprintf_internal_r+0x1c50>
  804e04:	0029883a 	mov	r20,zero
							  : 1;
  804e08:	003efa06 	br	8049f4 <___vfprintf_internal_r+0x1c50>
  804e0c:	6080004c 	andi	r2,r12,1
  804e10:	d8800715 	stw	r2,28(sp)
				if (ndig > 1 || flags & ALT)
  804e14:	103e531e 	bne	r2,zero,804764 <___vfprintf_internal_r+0x19c0>
  804e18:	003ff806 	br	804dfc <___vfprintf_internal_r+0x2058>
					cp = "NAN";
  804e1c:	04402074 	movhi	r17,129
  804e20:	8c4aee04 	addi	r17,r17,11192
  804e24:	00398606 	br	803440 <___vfprintf_internal_r+0x69c>
					sign = '-';
  804e28:	00800b44 	movi	r2,45
  804e2c:	d8801345 	stb	r2,77(sp)
  804e30:	03400b44 	movi	r13,45
  804e34:	003fe406 	br	804dc8 <___vfprintf_internal_r+0x2024>
						size = (prec || flags & ALT)
  804e38:	1000031e 	bne	r2,zero,804e48 <___vfprintf_internal_r+0x20a4>
  804e3c:	05000044 	movi	r20,1
							  : 1;
  804e40:	05400044 	movi	r21,1
					lead = expt;
  804e44:	003eeb06 	br	8049f4 <___vfprintf_internal_r+0x1c50>
							  ? prec + 1 + decp_len
  804e48:	d8800b17 	ldw	r2,44(sp)
  804e4c:	15400044 	addi	r21,r2,1
  804e50:	aa2b883a 	add	r21,r21,r8
  804e54:	003fe906 	br	804dfc <___vfprintf_internal_r+0x2058>
						PAD (ndig - 1, zeroes);
  804e58:	b005883a 	mov	r2,r22
  804e5c:	39cafd04 	addi	r7,r7,11252
  804e60:	003e9706 	br	8048c0 <___vfprintf_internal_r+0x1b1c>
  804e64:	8025883a 	mov	r18,r16
  804e68:	0038dd06 	br	8031e0 <___vfprintf_internal_r+0x43c>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804e6c:	00800084 	movi	r2,2
  804e70:	d8801015 	stw	r2,64(sp)
  804e74:	003e3606 	br	804750 <___vfprintf_internal_r+0x19ac>
				prec = GET_ARG (n, ap, int);
  804e78:	d8c00617 	ldw	r3,24(sp)
  804e7c:	1a000017 	ldw	r8,0(r3)
  804e80:	18c00104 	addi	r3,r3,4
				if (prec < 0)
  804e84:	4000010e 	bge	r8,zero,804e8c <___vfprintf_internal_r+0x20e8>
  804e88:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  804e8c:	bf000043 	ldbu	fp,1(r23)
				prec = GET_ARG (n, ap, int);
  804e90:	d8c00615 	stw	r3,24(sp)
			if ((ch = *fmt++) == '*') {
  804e94:	102f883a 	mov	r23,r2
  804e98:	e2c03fcc 	andi	r11,fp,255
  804e9c:	5ac0201c 	xori	r11,r11,128
  804ea0:	5affe004 	addi	r11,r11,-128
				goto rflag;
  804ea4:	00380b06 	br	802ed4 <___vfprintf_internal_r+0x130>

00804ea8 <__vfprintf_internal>:
{
  804ea8:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  804eac:	d1200917 	ldw	r4,-32732(gp)
  804eb0:	300f883a 	mov	r7,r6
  804eb4:	280d883a 	mov	r6,r5
  804eb8:	100b883a 	mov	r5,r2
  804ebc:	0802da41 	jmpi	802da4 <___vfprintf_internal_r>

00804ec0 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  804ec0:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  804ec4:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  804ec8:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  804ecc:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  804ed0:	2a400917 	ldw	r9,36(r5)
{
  804ed4:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  804ed8:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  804edc:	00c10004 	movi	r3,1024
{
  804ee0:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  804ee4:	10bfff4c 	andi	r2,r2,65533
{
  804ee8:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  804eec:	d80b883a 	mov	r5,sp
{
  804ef0:	dc811c15 	stw	r18,1136(sp)
  804ef4:	dc411b15 	stw	r17,1132(sp)
  804ef8:	dfc11d15 	stw	ra,1140(sp)
  804efc:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  804f00:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  804f04:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  804f08:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  804f0c:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  804f10:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  804f14:	da000015 	stw	r8,0(sp)
  804f18:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  804f1c:	d8c00215 	stw	r3,8(sp)
  804f20:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  804f24:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  804f28:	0802da40 	call	802da4 <___vfprintf_internal_r>
  804f2c:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804f30:	10000d0e 	bge	r2,zero,804f68 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  804f34:	d880030b 	ldhu	r2,12(sp)
  804f38:	1080100c 	andi	r2,r2,64
  804f3c:	10000326 	beq	r2,zero,804f4c <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  804f40:	8080030b 	ldhu	r2,12(r16)
  804f44:	10801014 	ori	r2,r2,64
  804f48:	8080030d 	sth	r2,12(r16)
}
  804f4c:	8805883a 	mov	r2,r17
  804f50:	dfc11d17 	ldw	ra,1140(sp)
  804f54:	dc811c17 	ldw	r18,1136(sp)
  804f58:	dc411b17 	ldw	r17,1132(sp)
  804f5c:	dc011a17 	ldw	r16,1128(sp)
  804f60:	dec11e04 	addi	sp,sp,1144
  804f64:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804f68:	d80b883a 	mov	r5,sp
  804f6c:	9009883a 	mov	r4,r18
  804f70:	0806c700 	call	806c70 <_fflush_r>
  804f74:	103fef26 	beq	r2,zero,804f34 <__sbprintf+0x74>
		ret = EOF;
  804f78:	047fffc4 	movi	r17,-1
  804f7c:	003fed06 	br	804f34 <__sbprintf+0x74>

00804f80 <__swsetup_r>:
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
  804f80:	d0a00917 	ldw	r2,-32732(gp)
{
  804f84:	defffd04 	addi	sp,sp,-12
  804f88:	dc400115 	stw	r17,4(sp)
  804f8c:	dc000015 	stw	r16,0(sp)
  804f90:	dfc00215 	stw	ra,8(sp)
  804f94:	2023883a 	mov	r17,r4
  804f98:	2821883a 	mov	r16,r5
  CHECK_INIT (_REENT, fp);
  804f9c:	10000226 	beq	r2,zero,804fa8 <__swsetup_r+0x28>
  804fa0:	10c00e17 	ldw	r3,56(r2)
  804fa4:	18001f26 	beq	r3,zero,805024 <__swsetup_r+0xa4>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
  804fa8:	8180030b 	ldhu	r6,12(r16)
  804fac:	30c0020c 	andi	r3,r6,8
  804fb0:	3005883a 	mov	r2,r6
  804fb4:	18002126 	beq	r3,zero,80503c <__swsetup_r+0xbc>
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
  804fb8:	80c00417 	ldw	r3,16(r16)
  804fbc:	18002826 	beq	r3,zero,805060 <__swsetup_r+0xe0>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
  804fc0:	1100004c 	andi	r4,r2,1
  804fc4:	20000b1e 	bne	r4,zero,804ff4 <__swsetup_r+0x74>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  804fc8:	1100008c 	andi	r4,r2,2
  804fcc:	20002e1e 	bne	r4,zero,805088 <__swsetup_r+0x108>
  804fd0:	81000517 	ldw	r4,20(r16)
  804fd4:	81000215 	stw	r4,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804fd8:	18000b26 	beq	r3,zero,805008 <__swsetup_r+0x88>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
  804fdc:	0005883a 	mov	r2,zero
}
  804fe0:	dfc00217 	ldw	ra,8(sp)
  804fe4:	dc400117 	ldw	r17,4(sp)
  804fe8:	dc000017 	ldw	r16,0(sp)
  804fec:	dec00304 	addi	sp,sp,12
  804ff0:	f800283a 	ret
      fp->_lbfsize = -fp->_bf._size;
  804ff4:	81000517 	ldw	r4,20(r16)
      fp->_w = 0;
  804ff8:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
  804ffc:	0109c83a 	sub	r4,zero,r4
  805000:	81000615 	stw	r4,24(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  805004:	183ff51e 	bne	r3,zero,804fdc <__swsetup_r+0x5c>
  805008:	10c0200c 	andi	r3,r2,128
  return 0;
  80500c:	0005883a 	mov	r2,zero
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  805010:	183ff326 	beq	r3,zero,804fe0 <__swsetup_r+0x60>
      fp->_flags |= __SERR;
  805014:	31801014 	ori	r6,r6,64
  805018:	8180030d 	sth	r6,12(r16)
      return EOF;
  80501c:	00bfffc4 	movi	r2,-1
  805020:	003fef06 	br	804fe0 <__swsetup_r+0x60>
  CHECK_INIT (_REENT, fp);
  805024:	1009883a 	mov	r4,r2
  805028:	08070a80 	call	8070a8 <__sinit>
  if ((fp->_flags & __SWR) == 0)
  80502c:	8180030b 	ldhu	r6,12(r16)
  805030:	30c0020c 	andi	r3,r6,8
  805034:	3005883a 	mov	r2,r6
  805038:	183fdf1e 	bne	r3,zero,804fb8 <__swsetup_r+0x38>
      if ((fp->_flags & __SRW) == 0)
  80503c:	3080040c 	andi	r2,r6,16
  805040:	10002126 	beq	r2,zero,8050c8 <__swsetup_r+0x148>
      if (fp->_flags & __SRD)
  805044:	3080010c 	andi	r2,r6,4
  805048:	1000111e 	bne	r2,zero,805090 <__swsetup_r+0x110>
  if (fp->_bf._base == NULL
  80504c:	80c00417 	ldw	r3,16(r16)
      fp->_flags |= __SWR;
  805050:	30800214 	ori	r2,r6,8
  805054:	8080030d 	sth	r2,12(r16)
  805058:	100d883a 	mov	r6,r2
  if (fp->_bf._base == NULL
  80505c:	183fd81e 	bne	r3,zero,804fc0 <__swsetup_r+0x40>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
  805060:	1100a00c 	andi	r4,r2,640
  805064:	21008020 	cmpeqi	r4,r4,512
  805068:	203fd51e 	bne	r4,zero,804fc0 <__swsetup_r+0x40>
    __smakebuf_r (ptr, fp);
  80506c:	800b883a 	mov	r5,r16
  805070:	8809883a 	mov	r4,r17
  805074:	0807c100 	call	807c10 <__smakebuf_r>
  if (fp->_flags & __SLBF)
  805078:	8180030b 	ldhu	r6,12(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  80507c:	80c00417 	ldw	r3,16(r16)
  if (fp->_flags & __SLBF)
  805080:	3005883a 	mov	r2,r6
  805084:	003fce06 	br	804fc0 <__swsetup_r+0x40>
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  805088:	0009883a 	mov	r4,zero
  80508c:	003fd106 	br	804fd4 <__swsetup_r+0x54>
	  if (HASUB (fp))
  805090:	81400c17 	ldw	r5,48(r16)
  805094:	28000626 	beq	r5,zero,8050b0 <__swsetup_r+0x130>
	    FREEUB (ptr, fp);
  805098:	80801004 	addi	r2,r16,64
  80509c:	28800326 	beq	r5,r2,8050ac <__swsetup_r+0x12c>
  8050a0:	8809883a 	mov	r4,r17
  8050a4:	08072000 	call	807200 <_free_r>
	  fp->_flags &= ~(__SRD | __SEOF);
  8050a8:	8180030b 	ldhu	r6,12(r16)
	    FREEUB (ptr, fp);
  8050ac:	80000c15 	stw	zero,48(r16)
	  fp->_p = fp->_bf._base;
  8050b0:	80c00417 	ldw	r3,16(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
  8050b4:	00bff6c4 	movi	r2,-37
  8050b8:	118c703a 	and	r6,r2,r6
	  fp->_r = 0;
  8050bc:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
  8050c0:	80c00015 	stw	r3,0(r16)
  8050c4:	003fe206 	br	805050 <__swsetup_r+0xd0>
	  ptr->_errno = EBADF;
  8050c8:	00800244 	movi	r2,9
  8050cc:	88800015 	stw	r2,0(r17)
	  fp->_flags |= __SERR;
  8050d0:	31801014 	ori	r6,r6,64
  8050d4:	8180030d 	sth	r6,12(r16)
	  return EOF;
  8050d8:	00bfffc4 	movi	r2,-1
  8050dc:	003fc006 	br	804fe0 <__swsetup_r+0x60>

008050e0 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
  8050e0:	defff204 	addi	sp,sp,-56
  8050e4:	dc400515 	stw	r17,20(sp)
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
  8050e8:	20800417 	ldw	r2,16(r4)
  n = S->_wds;
  8050ec:	2c400417 	ldw	r17,16(r5)
{
  8050f0:	dfc00d15 	stw	ra,52(sp)
  8050f4:	df000c15 	stw	fp,48(sp)
  8050f8:	ddc00b15 	stw	r23,44(sp)
  8050fc:	dd800a15 	stw	r22,40(sp)
  805100:	dd400915 	stw	r21,36(sp)
  805104:	dd000815 	stw	r20,32(sp)
  805108:	dcc00715 	stw	r19,28(sp)
  80510c:	dc800615 	stw	r18,24(sp)
  805110:	dc000415 	stw	r16,16(sp)
  805114:	d9000115 	stw	r4,4(sp)
  805118:	d9400215 	stw	r5,8(sp)
  if (b->_wds < n)
  80511c:	14407616 	blt	r2,r17,8052f8 <quorem+0x218>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  805120:	8c7fffc4 	addi	r17,r17,-1
  805124:	882a90ba 	slli	r21,r17,2
  sx = S->_x;
  805128:	2f000504 	addi	fp,r5,20
  bx = b->_x;
  80512c:	25800504 	addi	r22,r4,20
  sxe = sx + --n;
  805130:	e565883a 	add	r18,fp,r21
  bxe = bx + n;
  805134:	b545883a 	add	r2,r22,r21
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  805138:	95c00017 	ldw	r23,0(r18)
  80513c:	15000017 	ldw	r20,0(r2)
  bx = b->_x;
  805140:	dd800015 	stw	r22,0(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  805144:	bdc00044 	addi	r23,r23,1
  805148:	b80b883a 	mov	r5,r23
  80514c:	a009883a 	mov	r4,r20
  bxe = bx + n;
  805150:	d8800315 	stw	r2,12(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  805154:	080d4fc0 	call	80d4fc <__udivsi3>
  805158:	1021883a 	mov	r16,r2
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
  80515c:	a5c02f36 	bltu	r20,r23,80521c <quorem+0x13c>
  sx = S->_x;
  805160:	e029883a 	mov	r20,fp
    {
      borrow = 0;
      carry = 0;
  805164:	002b883a 	mov	r21,zero
      borrow = 0;
  805168:	002f883a 	mov	r23,zero
      do
	{
#ifdef Pack_32
	  si = *sx++;
  80516c:	a4c00017 	ldw	r19,0(r20)
	  ys = (si & 0xffff) * q + carry;
  805170:	800b883a 	mov	r5,r16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  805174:	b5800104 	addi	r22,r22,4
	  ys = (si & 0xffff) * q + carry;
  805178:	993fffcc 	andi	r4,r19,65535
  80517c:	0802ba80 	call	802ba8 <__mulsi3>
	  zs = (si >> 16) * q + (ys >> 16);
  805180:	9808d43a 	srli	r4,r19,16
  805184:	800b883a 	mov	r5,r16
	  ys = (si & 0xffff) * q + carry;
  805188:	156b883a 	add	r21,r2,r21
	  zs = (si >> 16) * q + (ys >> 16);
  80518c:	0802ba80 	call	802ba8 <__mulsi3>
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  805190:	b0ffff17 	ldw	r3,-4(r22)
	  zs = (si >> 16) * q + (ys >> 16);
  805194:	a80ad43a 	srli	r5,r21,16
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  805198:	a93fffcc 	andi	r4,r21,65535
  80519c:	19bfffcc 	andi	r6,r3,65535
  8051a0:	b909c83a 	sub	r4,r23,r4
  8051a4:	2189883a 	add	r4,r4,r6
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8051a8:	1806d43a 	srli	r3,r3,16
	  zs = (si >> 16) * q + (ys >> 16);
  8051ac:	1145883a 	add	r2,r2,r5
	  borrow = y >> 16;
  8051b0:	200bd43a 	srai	r5,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8051b4:	11bfffcc 	andi	r6,r2,65535
  8051b8:	1987c83a 	sub	r3,r3,r6
  8051bc:	1947883a 	add	r3,r3,r5
	  Storeinc (bx, z, y);
  8051c0:	180a943a 	slli	r5,r3,16
  8051c4:	213fffcc 	andi	r4,r4,65535
	  si = *sx++;
  8051c8:	a5000104 	addi	r20,r20,4
	  Storeinc (bx, z, y);
  8051cc:	2908b03a 	or	r4,r5,r4
  8051d0:	b13fff15 	stw	r4,-4(r22)
	  carry = zs >> 16;
  8051d4:	102ad43a 	srli	r21,r2,16
	  borrow = z >> 16;
  8051d8:	182fd43a 	srai	r23,r3,16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  8051dc:	953fe32e 	bgeu	r18,r20,80516c <quorem+0x8c>
      if (!*bxe)
  8051e0:	d8c00317 	ldw	r3,12(sp)
  8051e4:	18800017 	ldw	r2,0(r3)
  8051e8:	10000c1e 	bne	r2,zero,80521c <quorem+0x13c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
  8051ec:	d8800017 	ldw	r2,0(sp)
  8051f0:	1d7fff04 	addi	r21,r3,-4
  8051f4:	15400436 	bltu	r2,r21,805208 <quorem+0x128>
  8051f8:	00000606 	br	805214 <quorem+0x134>
  8051fc:	d8800017 	ldw	r2,0(sp)
	    --n;
  805200:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  805204:	1540032e 	bgeu	r2,r21,805214 <quorem+0x134>
  805208:	a8800017 	ldw	r2,0(r21)
  80520c:	ad7fff04 	addi	r21,r21,-4
  805210:	103ffa26 	beq	r2,zero,8051fc <quorem+0x11c>
	  b->_wds = n;
  805214:	d8800117 	ldw	r2,4(sp)
  805218:	14400415 	stw	r17,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
  80521c:	d9400217 	ldw	r5,8(sp)
  805220:	d9000117 	ldw	r4,4(sp)
  805224:	08095080 	call	809508 <__mcmp>
  805228:	10002616 	blt	r2,zero,8052c4 <quorem+0x1e4>
  bx = b->_x;
  80522c:	d9400017 	ldw	r5,0(sp)
    {
      q++;
  805230:	84000044 	addi	r16,r16,1
      borrow = 0;
  805234:	0007883a 	mov	r3,zero
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
  805238:	e1000017 	ldw	r4,0(fp)
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  80523c:	29800017 	ldw	r6,0(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  805240:	29400104 	addi	r5,r5,4
	  ys = (si & 0xffff) + carry;
  805244:	20bfffcc 	andi	r2,r4,65535
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  805248:	1887c83a 	sub	r3,r3,r2
  80524c:	30bfffcc 	andi	r2,r6,65535
  805250:	1885883a 	add	r2,r3,r2
	  zs = (si >> 16) + (ys >> 16);
  805254:	2008d43a 	srli	r4,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  805258:	3006d43a 	srli	r3,r6,16
	  borrow = y >> 16;
  80525c:	100fd43a 	srai	r7,r2,16
	  Storeinc (bx, z, y);
  805260:	11bfffcc 	andi	r6,r2,65535
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  805264:	1907c83a 	sub	r3,r3,r4
  805268:	19c7883a 	add	r3,r3,r7
	  Storeinc (bx, z, y);
  80526c:	1804943a 	slli	r2,r3,16
	  si = *sx++;
  805270:	e7000104 	addi	fp,fp,4
	  borrow = z >> 16;
  805274:	1807d43a 	srai	r3,r3,16
	  Storeinc (bx, z, y);
  805278:	1184b03a 	or	r2,r2,r6
  80527c:	28bfff15 	stw	r2,-4(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  805280:	973fed2e 	bgeu	r18,fp,805238 <quorem+0x158>
      bx = b->_x;
      bxe = bx + n;
  805284:	880490ba 	slli	r2,r17,2
  805288:	d9000017 	ldw	r4,0(sp)
  80528c:	2085883a 	add	r2,r4,r2
      if (!*bxe)
  805290:	10c00017 	ldw	r3,0(r2)
  805294:	18000b1e 	bne	r3,zero,8052c4 <quorem+0x1e4>
	{
	  while (--bxe > bx && !*bxe)
  805298:	10bfff04 	addi	r2,r2,-4
  80529c:	20800436 	bltu	r4,r2,8052b0 <quorem+0x1d0>
  8052a0:	00000606 	br	8052bc <quorem+0x1dc>
  8052a4:	d8c00017 	ldw	r3,0(sp)
	    --n;
  8052a8:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  8052ac:	1880032e 	bgeu	r3,r2,8052bc <quorem+0x1dc>
  8052b0:	10c00017 	ldw	r3,0(r2)
  8052b4:	10bfff04 	addi	r2,r2,-4
  8052b8:	183ffa26 	beq	r3,zero,8052a4 <quorem+0x1c4>
	  b->_wds = n;
  8052bc:	d8800117 	ldw	r2,4(sp)
  8052c0:	14400415 	stw	r17,16(r2)
	}
    }
  return q;
  8052c4:	8005883a 	mov	r2,r16
}
  8052c8:	dfc00d17 	ldw	ra,52(sp)
  8052cc:	df000c17 	ldw	fp,48(sp)
  8052d0:	ddc00b17 	ldw	r23,44(sp)
  8052d4:	dd800a17 	ldw	r22,40(sp)
  8052d8:	dd400917 	ldw	r21,36(sp)
  8052dc:	dd000817 	ldw	r20,32(sp)
  8052e0:	dcc00717 	ldw	r19,28(sp)
  8052e4:	dc800617 	ldw	r18,24(sp)
  8052e8:	dc400517 	ldw	r17,20(sp)
  8052ec:	dc000417 	ldw	r16,16(sp)
  8052f0:	dec00e04 	addi	sp,sp,56
  8052f4:	f800283a 	ret
    return 0;
  8052f8:	0005883a 	mov	r2,zero
  8052fc:	003ff206 	br	8052c8 <quorem+0x1e8>

00805300 <_dtoa_r>:
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
  805300:	20801017 	ldw	r2,64(r4)
{
  805304:	deffe204 	addi	sp,sp,-120
  805308:	ddc01b15 	stw	r23,108(sp)
  80530c:	dcc01715 	stw	r19,92(sp)
  805310:	dc801615 	stw	r18,88(sp)
  805314:	dc401515 	stw	r17,84(sp)
  805318:	dc001415 	stw	r16,80(sp)
  80531c:	dfc01d15 	stw	ra,116(sp)
  805320:	df001c15 	stw	fp,112(sp)
  805324:	dd801a15 	stw	r22,104(sp)
  805328:	dd401915 	stw	r21,100(sp)
  80532c:	dd001815 	stw	r20,96(sp)
  805330:	d9c00215 	stw	r7,8(sp)
  805334:	dc002017 	ldw	r16,128(sp)
  805338:	202f883a 	mov	r23,r4
  80533c:	3025883a 	mov	r18,r6
  805340:	2827883a 	mov	r19,r5
  d.d = _d;
  805344:	3023883a 	mov	r17,r6
  if (_REENT_MP_RESULT(ptr))
  805348:	10000826 	beq	r2,zero,80536c <_dtoa_r+0x6c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  80534c:	21801117 	ldw	r6,68(r4)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  805350:	00c00044 	movi	r3,1
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  805354:	100b883a 	mov	r5,r2
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  805358:	1986983a 	sll	r3,r3,r6
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  80535c:	11800115 	stw	r6,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  805360:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  805364:	0808af80 	call	808af8 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
  805368:	b8001015 	stw	zero,64(r23)
    }

  if (word0 (d) & Sign_bit)
  80536c:	90018816 	blt	r18,zero,805990 <_dtoa_r+0x690>
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
  805370:	80000015 	stw	zero,0(r16)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
  805374:	909ffc2c 	andhi	r2,r18,32752
  805378:	00dffc34 	movhi	r3,32752
  80537c:	10c18d26 	beq	r2,r3,8059b4 <_dtoa_r+0x6b4>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
  805380:	000d883a 	mov	r6,zero
  805384:	000f883a 	mov	r7,zero
  805388:	9809883a 	mov	r4,r19
  80538c:	880b883a 	mov	r5,r17
  805390:	080e7dc0 	call	80e7dc <__eqdf2>
  805394:	1000191e 	bne	r2,zero,8053fc <_dtoa_r+0xfc>
    {
      *decpt = 1;
  805398:	d8c01f17 	ldw	r3,124(sp)
  80539c:	00800044 	movi	r2,1
  8053a0:	18800015 	stw	r2,0(r3)
      s = "0";
      if (rve)
  8053a4:	d8802117 	ldw	r2,132(sp)
  8053a8:	1002f926 	beq	r2,zero,805f90 <_dtoa_r+0xc90>
	*rve = s + 1;
  8053ac:	d9002117 	ldw	r4,132(sp)
  8053b0:	00802074 	movhi	r2,129
  8053b4:	108afc44 	addi	r2,r2,11249
      return s;
  8053b8:	00c02074 	movhi	r3,129
	*rve = s + 1;
  8053bc:	20800015 	stw	r2,0(r4)
      return s;
  8053c0:	188afc04 	addi	r2,r3,11248
  8053c4:	d8800115 	stw	r2,4(sp)
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
  8053c8:	d8800117 	ldw	r2,4(sp)
  8053cc:	dfc01d17 	ldw	ra,116(sp)
  8053d0:	df001c17 	ldw	fp,112(sp)
  8053d4:	ddc01b17 	ldw	r23,108(sp)
  8053d8:	dd801a17 	ldw	r22,104(sp)
  8053dc:	dd401917 	ldw	r21,100(sp)
  8053e0:	dd001817 	ldw	r20,96(sp)
  8053e4:	dcc01717 	ldw	r19,92(sp)
  8053e8:	dc801617 	ldw	r18,88(sp)
  8053ec:	dc401517 	ldw	r17,84(sp)
  8053f0:	dc001417 	ldw	r16,80(sp)
  8053f4:	dec01e04 	addi	sp,sp,120
  8053f8:	f800283a 	ret
  b = d2b (ptr, d.d, &be, &bbits);
  8053fc:	d8801204 	addi	r2,sp,72
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  805400:	9020d53a 	srli	r16,r18,20
  b = d2b (ptr, d.d, &be, &bbits);
  805404:	d8800015 	stw	r2,0(sp)
  805408:	d9c01304 	addi	r7,sp,76
  80540c:	980b883a 	mov	r5,r19
  805410:	880d883a 	mov	r6,r17
  805414:	b809883a 	mov	r4,r23
  805418:	08098f00 	call	8098f0 <__d2b>
  80541c:	1039883a 	mov	fp,r2
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  805420:	8001771e 	bne	r16,zero,805a00 <_dtoa_r+0x700>
      i = bbits + be + (Bias + (P - 1) - 1);
  805424:	dd001217 	ldw	r20,72(sp)
  805428:	dc001317 	ldw	r16,76(sp)
  80542c:	a421883a 	add	r16,r20,r16
  805430:	80810c84 	addi	r2,r16,1074
       : (word1 (d) << (32 - i));
  805434:	10c00850 	cmplti	r3,r2,33
  805438:	1802e51e 	bne	r3,zero,805fd0 <_dtoa_r+0xcd0>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
  80543c:	01001004 	movi	r4,64
  805440:	2085c83a 	sub	r2,r4,r2
  805444:	81010484 	addi	r4,r16,1042
  805448:	90a4983a 	sll	r18,r18,r2
  80544c:	9908d83a 	srl	r4,r19,r4
       : (word1 (d) << (32 - i));
  805450:	9108b03a 	or	r4,r18,r4
      d2.d = x;
  805454:	080fc180 	call	80fc18 <__floatunsidf>
  805458:	1009883a 	mov	r4,r2
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  80545c:	017f8434 	movhi	r5,65040
      denorm = 1;
  805460:	00800044 	movi	r2,1
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  805464:	194b883a 	add	r5,r3,r5
      i -= (Bias + (P - 1) - 1) + 1;
  805468:	843fffc4 	addi	r16,r16,-1
      denorm = 1;
  80546c:	d8800a15 	stw	r2,40(sp)
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  805470:	000d883a 	mov	r6,zero
  805474:	01cffe34 	movhi	r7,16376
  805478:	080f1d80 	call	80f1d8 <__subdf3>
  80547c:	0198dbf4 	movhi	r6,25455
  805480:	01cff4f4 	movhi	r7,16339
  805484:	3190d844 	addi	r6,r6,17249
  805488:	39e1e9c4 	addi	r7,r7,-30809
  80548c:	1009883a 	mov	r4,r2
  805490:	180b883a 	mov	r5,r3
  805494:	080ea2c0 	call	80ea2c <__muldf3>
  805498:	01a2d874 	movhi	r6,35681
  80549c:	01cff1f4 	movhi	r7,16327
  8054a0:	31b22cc4 	addi	r6,r6,-14157
  8054a4:	39e28a04 	addi	r7,r7,-30168
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	1009883a 	mov	r4,r2
  8054b0:	080d5bc0 	call	80d5bc <__adddf3>
  8054b4:	8009883a 	mov	r4,r16
  8054b8:	102b883a 	mov	r21,r2
  8054bc:	1825883a 	mov	r18,r3
  8054c0:	080fb600 	call	80fb60 <__floatsidf>
  8054c4:	019427f4 	movhi	r6,20639
  8054c8:	01cff4f4 	movhi	r7,16339
  8054cc:	319e7ec4 	addi	r6,r6,31227
  8054d0:	39d104c4 	addi	r7,r7,17427
  8054d4:	1009883a 	mov	r4,r2
  8054d8:	180b883a 	mov	r5,r3
  8054dc:	080ea2c0 	call	80ea2c <__muldf3>
  8054e0:	100d883a 	mov	r6,r2
  8054e4:	180f883a 	mov	r7,r3
  8054e8:	a809883a 	mov	r4,r21
  8054ec:	900b883a 	mov	r5,r18
  8054f0:	080d5bc0 	call	80d5bc <__adddf3>
  k = (int) ds;
  8054f4:	1009883a 	mov	r4,r2
  8054f8:	180b883a 	mov	r5,r3
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  8054fc:	1025883a 	mov	r18,r2
  805500:	182d883a 	mov	r22,r3
  k = (int) ds;
  805504:	080fae00 	call	80fae0 <__fixdfsi>
  if (ds < 0. && ds != k)
  805508:	000d883a 	mov	r6,zero
  80550c:	000f883a 	mov	r7,zero
  805510:	9009883a 	mov	r4,r18
  805514:	b00b883a 	mov	r5,r22
  k = (int) ds;
  805518:	102b883a 	mov	r21,r2
  80551c:	d8800315 	stw	r2,12(sp)
  if (ds < 0. && ds != k)
  805520:	080e9440 	call	80e944 <__ledf2>
  805524:	10028f16 	blt	r2,zero,805f64 <_dtoa_r+0xc64>
  if (k >= 0 && k <= Ten_pmax)
  805528:	dc800317 	ldw	r18,12(sp)
  j = bbits - i - 1;
  80552c:	a421c83a 	sub	r16,r20,r16
  805530:	85bfffc4 	addi	r22,r16,-1
  if (k >= 0 && k <= Ten_pmax)
  805534:	908005e8 	cmpgeui	r2,r18,23
  805538:	1002821e 	bne	r2,zero,805f44 <_dtoa_r+0xc44>
      if (d.d < tens[k])
  80553c:	900690fa 	slli	r3,r18,3
  805540:	00802074 	movhi	r2,129
  805544:	108b5d04 	addi	r2,r2,11636
  805548:	10c5883a 	add	r2,r2,r3
  80554c:	11800017 	ldw	r6,0(r2)
  805550:	11c00117 	ldw	r7,4(r2)
  805554:	9809883a 	mov	r4,r19
  805558:	880b883a 	mov	r5,r17
  80555c:	080e9440 	call	80e944 <__ledf2>
  805560:	1002550e 	bge	r2,zero,805eb8 <_dtoa_r+0xbb8>
	k--;
  805564:	90bfffc4 	addi	r2,r18,-1
  805568:	d8800315 	stw	r2,12(sp)
      k_check = 0;
  80556c:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  805570:	b0027716 	blt	r22,zero,805f50 <_dtoa_r+0xc50>
      b2 = 0;
  805574:	d8000615 	stw	zero,24(sp)
  if (k >= 0)
  805578:	d8800317 	ldw	r2,12(sp)
  80557c:	1002510e 	bge	r2,zero,805ec4 <_dtoa_r+0xbc4>
      b2 -= k;
  805580:	d8800317 	ldw	r2,12(sp)
  805584:	d8c00617 	ldw	r3,24(sp)
      s5 = 0;
  805588:	d8000315 	stw	zero,12(sp)
      b5 = -k;
  80558c:	d8800415 	stw	r2,16(sp)
      b2 -= k;
  805590:	1887c83a 	sub	r3,r3,r2
  805594:	d8c00615 	stw	r3,24(sp)
      b5 = -k;
  805598:	0087c83a 	sub	r3,zero,r2
  80559c:	d8c00815 	stw	r3,32(sp)
  if (mode < 0 || mode > 9)
  8055a0:	d8c00217 	ldw	r3,8(sp)
  8055a4:	188002a8 	cmpgeui	r2,r3,10
  8055a8:	10024d1e 	bne	r2,zero,805ee0 <_dtoa_r+0xbe0>
  if (mode > 5)
  8055ac:	18800190 	cmplti	r2,r3,6
  8055b0:	10028b1e 	bne	r2,zero,805fe0 <_dtoa_r+0xce0>
      mode -= 4;
  8055b4:	18bfff04 	addi	r2,r3,-4
  8055b8:	d8800215 	stw	r2,8(sp)
      try_quick = 0;
  8055bc:	0021883a 	mov	r16,zero
  switch (mode)
  8055c0:	d8c00217 	ldw	r3,8(sp)
  8055c4:	18800120 	cmpeqi	r2,r3,4
  8055c8:	10035d1e 	bne	r2,zero,806340 <_dtoa_r+0x1040>
  8055cc:	18800160 	cmpeqi	r2,r3,5
  8055d0:	10031b1e 	bne	r2,zero,806240 <_dtoa_r+0xf40>
  8055d4:	188000a0 	cmpeqi	r2,r3,2
  8055d8:	10024d26 	beq	r2,zero,805f10 <_dtoa_r+0xc10>
      leftright = 0;
  8055dc:	d8000715 	stw	zero,28(sp)
      if (ndigits <= 0)
  8055e0:	d8801e17 	ldw	r2,120(sp)
  8055e4:	0083260e 	bge	zero,r2,806280 <_dtoa_r+0xf80>
  8055e8:	d8800b15 	stw	r2,44(sp)
  8055ec:	d8800515 	stw	r2,20(sp)
  8055f0:	100d883a 	mov	r6,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8055f4:	b8001115 	stw	zero,68(r23)
  8055f8:	30800610 	cmplti	r2,r6,24
  8055fc:	1004f11e 	bne	r2,zero,8069c4 <_dtoa_r+0x16c4>
  805600:	00c00044 	movi	r3,1
  j = sizeof (__ULong);
  805604:	00800104 	movi	r2,4
       j <<= 1)
  805608:	1085883a 	add	r2,r2,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  80560c:	11000504 	addi	r4,r2,20
    _REENT_MP_RESULT_K(ptr)++;
  805610:	180b883a 	mov	r5,r3
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805614:	18c00044 	addi	r3,r3,1
  805618:	313ffb2e 	bgeu	r6,r4,805608 <_dtoa_r+0x308>
  80561c:	b9401115 	stw	r5,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  805620:	b809883a 	mov	r4,r23
  805624:	0808a540 	call	808a54 <_Balloc>
  805628:	d8800115 	stw	r2,4(sp)
  80562c:	1004de26 	beq	r2,zero,8069a8 <_dtoa_r+0x16a8>
  805630:	d8800117 	ldw	r2,4(sp)
  805634:	b8801015 	stw	r2,64(r23)
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
  805638:	d8800517 	ldw	r2,20(sp)
  80563c:	108003e8 	cmpgeui	r2,r2,15
  805640:	1001021e 	bne	r2,zero,805a4c <_dtoa_r+0x74c>
  805644:	80010126 	beq	r16,zero,805a4c <_dtoa_r+0x74c>
      if (k > 0)
  805648:	d9000417 	ldw	r4,16(sp)
  80564c:	01038b0e 	bge	zero,r4,80647c <_dtoa_r+0x117c>
	  ds = tens[k & 0xf];
  805650:	208003cc 	andi	r2,r4,15
  805654:	100690fa 	slli	r3,r2,3
	  j = k >> 4;
  805658:	2029d13a 	srai	r20,r4,4
	  ds = tens[k & 0xf];
  80565c:	00802074 	movhi	r2,129
  805660:	108b5d04 	addi	r2,r2,11636
  805664:	10c5883a 	add	r2,r2,r3
	  if (j & Bletch)
  805668:	a0c0040c 	andi	r3,r20,16
	  ds = tens[k & 0xf];
  80566c:	12800017 	ldw	r10,0(r2)
  805670:	12400117 	ldw	r9,4(r2)
	  if (j & Bletch)
  805674:	18032c26 	beq	r3,zero,806328 <_dtoa_r+0x1028>
	      d.d /= bigtens[n_bigtens - 1];
  805678:	00802074 	movhi	r2,129
  80567c:	108b5304 	addi	r2,r2,11596
  805680:	11800817 	ldw	r6,32(r2)
  805684:	11c00917 	ldw	r7,36(r2)
  805688:	9809883a 	mov	r4,r19
  80568c:	880b883a 	mov	r5,r17
  805690:	da400e15 	stw	r9,56(sp)
  805694:	da800d15 	stw	r10,52(sp)
  805698:	080deac0 	call	80deac <__divdf3>
  80569c:	da800d17 	ldw	r10,52(sp)
  8056a0:	da400e17 	ldw	r9,56(sp)
	      j &= Bletch - 1;
  8056a4:	a50003cc 	andi	r20,r20,15
	      d.d /= bigtens[n_bigtens - 1];
  8056a8:	d8800c15 	stw	r2,48(sp)
  8056ac:	1825883a 	mov	r18,r3
	      ieps++;
  8056b0:	054000c4 	movi	r21,3
	  for (; j; j >>= 1, i++)
  8056b4:	a0001126 	beq	r20,zero,8056fc <_dtoa_r+0x3fc>
  8056b8:	04002074 	movhi	r16,129
  8056bc:	840b5304 	addi	r16,r16,11596
  8056c0:	5009883a 	mov	r4,r10
  8056c4:	480b883a 	mov	r5,r9
	    if (j & 1)
  8056c8:	a180004c 	andi	r6,r20,1
  8056cc:	30000626 	beq	r6,zero,8056e8 <_dtoa_r+0x3e8>
		ds *= bigtens[i];
  8056d0:	81800017 	ldw	r6,0(r16)
  8056d4:	81c00117 	ldw	r7,4(r16)
		ieps++;
  8056d8:	ad400044 	addi	r21,r21,1
		ds *= bigtens[i];
  8056dc:	080ea2c0 	call	80ea2c <__muldf3>
  8056e0:	1009883a 	mov	r4,r2
  8056e4:	180b883a 	mov	r5,r3
	  for (; j; j >>= 1, i++)
  8056e8:	a029d07a 	srai	r20,r20,1
  8056ec:	84000204 	addi	r16,r16,8
  8056f0:	a03ff51e 	bne	r20,zero,8056c8 <_dtoa_r+0x3c8>
  8056f4:	2015883a 	mov	r10,r4
  8056f8:	2813883a 	mov	r9,r5
	  d.d /= ds;
  8056fc:	d9000c17 	ldw	r4,48(sp)
  805700:	900b883a 	mov	r5,r18
  805704:	500d883a 	mov	r6,r10
  805708:	480f883a 	mov	r7,r9
  80570c:	080deac0 	call	80deac <__divdf3>
  805710:	1021883a 	mov	r16,r2
  805714:	1825883a 	mov	r18,r3
      if (k_check && d.d < 1. && ilim > 0)
  805718:	d8800917 	ldw	r2,36(sp)
  80571c:	10000626 	beq	r2,zero,805738 <_dtoa_r+0x438>
  805720:	000d883a 	mov	r6,zero
  805724:	01cffc34 	movhi	r7,16368
  805728:	8009883a 	mov	r4,r16
  80572c:	900b883a 	mov	r5,r18
  805730:	080e9440 	call	80e944 <__ledf2>
  805734:	10044416 	blt	r2,zero,806848 <_dtoa_r+0x1548>
      eps.d = ieps * d.d + 7.;
  805738:	a809883a 	mov	r4,r21
  80573c:	080fb600 	call	80fb60 <__floatsidf>
  805740:	800d883a 	mov	r6,r16
  805744:	900f883a 	mov	r7,r18
  805748:	1009883a 	mov	r4,r2
  80574c:	180b883a 	mov	r5,r3
  805750:	080ea2c0 	call	80ea2c <__muldf3>
  805754:	000d883a 	mov	r6,zero
  805758:	01d00734 	movhi	r7,16412
  80575c:	1009883a 	mov	r4,r2
  805760:	180b883a 	mov	r5,r3
  805764:	080d5bc0 	call	80d5bc <__adddf3>
  805768:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  80576c:	00bf3034 	movhi	r2,64704
  805770:	1885883a 	add	r2,r3,r2
  805774:	d8800c15 	stw	r2,48(sp)
      if (ilim == 0)
  805778:	d8800517 	ldw	r2,20(sp)
  80577c:	10032226 	beq	r2,zero,806408 <_dtoa_r+0x1108>
  805780:	d8800417 	ldw	r2,16(sp)
  805784:	d8801115 	stw	r2,68(sp)
  805788:	d8800517 	ldw	r2,20(sp)
  80578c:	d8800d15 	stw	r2,52(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805790:	d8800d17 	ldw	r2,52(sp)
	      L = d.d;
  805794:	900b883a 	mov	r5,r18
  805798:	8009883a 	mov	r4,r16
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  80579c:	10bfffc4 	addi	r2,r2,-1
  8057a0:	100690fa 	slli	r3,r2,3
  8057a4:	00802074 	movhi	r2,129
  8057a8:	108b5d04 	addi	r2,r2,11636
  8057ac:	10c5883a 	add	r2,r2,r3
  8057b0:	12800017 	ldw	r10,0(r2)
  8057b4:	12c00117 	ldw	r11,4(r2)
  8057b8:	da800f15 	stw	r10,60(sp)
  8057bc:	dac00e15 	stw	r11,56(sp)
	      L = d.d;
  8057c0:	080fae00 	call	80fae0 <__fixdfsi>
  8057c4:	1009883a 	mov	r4,r2
	      *s++ = '0' + (int) L;
  8057c8:	10800c04 	addi	r2,r2,48
  8057cc:	d8801015 	stw	r2,64(sp)
	      d.d -= L;
  8057d0:	080fb600 	call	80fb60 <__floatsidf>
  8057d4:	8009883a 	mov	r4,r16
  8057d8:	100d883a 	mov	r6,r2
  8057dc:	180f883a 	mov	r7,r3
  8057e0:	900b883a 	mov	r5,r18
  8057e4:	080f1d80 	call	80f1d8 <__subdf3>
	      *s++ = '0' + (int) L;
  8057e8:	d9000117 	ldw	r4,4(sp)
      if (leftright)
  8057ec:	dac00e17 	ldw	r11,56(sp)
  8057f0:	da800f17 	ldw	r10,60(sp)
	      d.d -= L;
  8057f4:	1825883a 	mov	r18,r3
      if (leftright)
  8057f8:	d8c00717 	ldw	r3,28(sp)
	      *s++ = '0' + (int) L;
  8057fc:	25400044 	addi	r21,r4,1
	      d.d -= L;
  805800:	1021883a 	mov	r16,r2
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805804:	500d883a 	mov	r6,r10
  805808:	580f883a 	mov	r7,r11
      if (leftright)
  80580c:	1803b626 	beq	r3,zero,8066e8 <_dtoa_r+0x13e8>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805810:	0009883a 	mov	r4,zero
  805814:	014ff834 	movhi	r5,16352
  805818:	080deac0 	call	80deac <__divdf3>
  80581c:	d9c00c17 	ldw	r7,48(sp)
  805820:	a00d883a 	mov	r6,r20
  805824:	1009883a 	mov	r4,r2
  805828:	180b883a 	mov	r5,r3
  80582c:	080f1d80 	call	80f1d8 <__subdf3>
	      *s++ = '0' + (int) L;
  805830:	d9000117 	ldw	r4,4(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805834:	1029883a 	mov	r20,r2
	      *s++ = '0' + (int) L;
  805838:	d8801017 	ldw	r2,64(sp)
	      if (d.d < eps.d)
  80583c:	800d883a 	mov	r6,r16
  805840:	900f883a 	mov	r7,r18
	      *s++ = '0' + (int) L;
  805844:	20800005 	stb	r2,0(r4)
	      if (d.d < eps.d)
  805848:	180b883a 	mov	r5,r3
  80584c:	a009883a 	mov	r4,r20
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805850:	d8c00c15 	stw	r3,48(sp)
	      if (d.d < eps.d)
  805854:	080e85c0 	call	80e85c <__gedf2>
  805858:	0083e716 	blt	zero,r2,8067f8 <_dtoa_r+0x14f8>
	  for (i = 0;;)
  80585c:	0005883a 	mov	r2,zero
  805860:	dd800e15 	stw	r22,56(sp)
  805864:	dc400f15 	stw	r17,60(sp)
  805868:	dd800d17 	ldw	r22,52(sp)
  80586c:	dc400c17 	ldw	r17,48(sp)
  805870:	ddc00d15 	stw	r23,52(sp)
  805874:	dcc00c15 	stw	r19,48(sp)
  805878:	1027883a 	mov	r19,r2
  80587c:	00002606 	br	805918 <_dtoa_r+0x618>
	      if (++i >= ilim)
  805880:	9cc00044 	addi	r19,r19,1
  805884:	9d806d0e 	bge	r19,r22,805a3c <_dtoa_r+0x73c>
	      eps.d *= 10.;
  805888:	a009883a 	mov	r4,r20
  80588c:	880b883a 	mov	r5,r17
  805890:	000d883a 	mov	r6,zero
  805894:	01d00934 	movhi	r7,16420
  805898:	080ea2c0 	call	80ea2c <__muldf3>
	      d.d *= 10.;
  80589c:	000d883a 	mov	r6,zero
  8058a0:	01d00934 	movhi	r7,16420
  8058a4:	8009883a 	mov	r4,r16
  8058a8:	900b883a 	mov	r5,r18
	      eps.d *= 10.;
  8058ac:	1029883a 	mov	r20,r2
  8058b0:	1823883a 	mov	r17,r3
	      d.d *= 10.;
  8058b4:	080ea2c0 	call	80ea2c <__muldf3>
	      L = d.d;
  8058b8:	180b883a 	mov	r5,r3
  8058bc:	1009883a 	mov	r4,r2
	      d.d *= 10.;
  8058c0:	1821883a 	mov	r16,r3
  8058c4:	1025883a 	mov	r18,r2
	      L = d.d;
  8058c8:	080fae00 	call	80fae0 <__fixdfsi>
	      d.d -= L;
  8058cc:	1009883a 	mov	r4,r2
	      L = d.d;
  8058d0:	102f883a 	mov	r23,r2
	      d.d -= L;
  8058d4:	080fb600 	call	80fb60 <__floatsidf>
  8058d8:	9009883a 	mov	r4,r18
  8058dc:	800b883a 	mov	r5,r16
  8058e0:	100d883a 	mov	r6,r2
  8058e4:	180f883a 	mov	r7,r3
  8058e8:	080f1d80 	call	80f1d8 <__subdf3>
	      *s++ = '0' + (int) L;
  8058ec:	ad400044 	addi	r21,r21,1
  8058f0:	ba000c04 	addi	r8,r23,48
  8058f4:	aa3fffc5 	stb	r8,-1(r21)
	      if (d.d < eps.d)
  8058f8:	a00d883a 	mov	r6,r20
  8058fc:	880f883a 	mov	r7,r17
  805900:	1009883a 	mov	r4,r2
  805904:	180b883a 	mov	r5,r3
	      d.d -= L;
  805908:	1021883a 	mov	r16,r2
  80590c:	1825883a 	mov	r18,r3
	      if (d.d < eps.d)
  805910:	080e9440 	call	80e944 <__ledf2>
  805914:	10040516 	blt	r2,zero,80692c <_dtoa_r+0x162c>
	      if (1. - d.d < eps.d)
  805918:	800d883a 	mov	r6,r16
  80591c:	900f883a 	mov	r7,r18
  805920:	0009883a 	mov	r4,zero
  805924:	014ffc34 	movhi	r5,16368
  805928:	080f1d80 	call	80f1d8 <__subdf3>
  80592c:	a00d883a 	mov	r6,r20
  805930:	880f883a 	mov	r7,r17
  805934:	1009883a 	mov	r4,r2
  805938:	180b883a 	mov	r5,r3
  80593c:	080e9440 	call	80e944 <__ledf2>
  805940:	103fcf0e 	bge	r2,zero,805880 <_dtoa_r+0x580>
			k++;
  805944:	d8801117 	ldw	r2,68(sp)
  805948:	ddc00d17 	ldw	r23,52(sp)
  80594c:	d9000117 	ldw	r4,4(sp)
  805950:	10800044 	addi	r2,r2,1
  805954:	d8800415 	stw	r2,16(sp)
  805958:	a829883a 	mov	r20,r21
  80595c:	00000106 	br	805964 <_dtoa_r+0x664>
		    if (s == s0)
  805960:	a103da26 	beq	r20,r4,8068cc <_dtoa_r+0x15cc>
		  while (*--s == '9')
  805964:	a0ffffc3 	ldbu	r3,-1(r20)
  805968:	a02b883a 	mov	r21,r20
  80596c:	a53fffc4 	addi	r20,r20,-1
  805970:	18803fcc 	andi	r2,r3,255
  805974:	1080201c 	xori	r2,r2,128
  805978:	10bfe004 	addi	r2,r2,-128
  80597c:	10800e60 	cmpeqi	r2,r2,57
  805980:	103ff71e 	bne	r2,zero,805960 <_dtoa_r+0x660>
		  ++*s++;
  805984:	18c00044 	addi	r3,r3,1
  805988:	a0c00005 	stb	r3,0(r20)
  80598c:	00013f06 	br	805e8c <_dtoa_r+0xb8c>
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  805990:	04600034 	movhi	r17,32768
  805994:	8c7fffc4 	addi	r17,r17,-1
  805998:	9462703a 	and	r17,r18,r17
      *sign = 1;
  80599c:	00800044 	movi	r2,1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  8059a0:	8825883a 	mov	r18,r17
      *sign = 1;
  8059a4:	80800015 	stw	r2,0(r16)
  if ((word0 (d) & Exp_mask) == Exp_mask)
  8059a8:	00dffc34 	movhi	r3,32752
  8059ac:	909ffc2c 	andhi	r2,r18,32752
  8059b0:	10fe731e 	bne	r2,r3,805380 <_dtoa_r+0x80>
      *decpt = 9999;
  8059b4:	d9001f17 	ldw	r4,124(sp)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8059b8:	00800434 	movhi	r2,16
  8059bc:	10bfffc4 	addi	r2,r2,-1
  8059c0:	9084703a 	and	r2,r18,r2
      *decpt = 9999;
  8059c4:	00c9c3c4 	movi	r3,9999
  8059c8:	20c00015 	stw	r3,0(r4)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8059cc:	14e6b03a 	or	r19,r2,r19
  8059d0:	9800141e 	bne	r19,zero,805a24 <_dtoa_r+0x724>
      if (rve)
  8059d4:	d8802117 	ldw	r2,132(sp)
  8059d8:	10041226 	beq	r2,zero,806a24 <_dtoa_r+0x1724>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8059dc:	00802074 	movhi	r2,129
  8059e0:	1007883a 	mov	r3,r2
  8059e4:	18cb0604 	addi	r3,r3,11288
	  s[3] ? s + 8 :
  8059e8:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8059ec:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  8059f0:	108b0804 	addi	r2,r2,11296
	*rve =
  8059f4:	d8c02117 	ldw	r3,132(sp)
  8059f8:	18800015 	stw	r2,0(r3)
  8059fc:	003e7206 	br	8053c8 <_dtoa_r+0xc8>
      word0 (d2) &= Frac_mask1;
  805a00:	01400434 	movhi	r5,16
  805a04:	297fffc4 	addi	r5,r5,-1
  805a08:	894a703a 	and	r5,r17,r5
      i = bbits + be + (Bias + (P - 1) - 1);
  805a0c:	dd001217 	ldw	r20,72(sp)
      d2.d = d.d;
  805a10:	9809883a 	mov	r4,r19
      word0 (d2) |= Exp_11;
  805a14:	294ffc34 	orhi	r5,r5,16368
      i -= Bias;
  805a18:	843f0044 	addi	r16,r16,-1023
      denorm = 0;
  805a1c:	d8000a15 	stw	zero,40(sp)
  805a20:	003e9306 	br	805470 <_dtoa_r+0x170>
      if (rve)
  805a24:	d8802117 	ldw	r2,132(sp)
  805a28:	1001fe1e 	bne	r2,zero,806224 <_dtoa_r+0xf24>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805a2c:	00802074 	movhi	r2,129
  805a30:	108b0504 	addi	r2,r2,11284
  805a34:	d8800115 	stw	r2,4(sp)
  805a38:	003e6306 	br	8053c8 <_dtoa_r+0xc8>
  805a3c:	dd800e17 	ldw	r22,56(sp)
  805a40:	ddc00d17 	ldw	r23,52(sp)
  805a44:	dc400f17 	ldw	r17,60(sp)
  805a48:	dcc00c17 	ldw	r19,48(sp)
  if (be >= 0 && k <= Int_max)
  805a4c:	d8801317 	ldw	r2,76(sp)
  805a50:	10006e16 	blt	r2,zero,805c0c <_dtoa_r+0x90c>
  805a54:	d9000417 	ldw	r4,16(sp)
  805a58:	20c003c8 	cmpgei	r3,r4,15
  805a5c:	18006b1e 	bne	r3,zero,805c0c <_dtoa_r+0x90c>
      ds = tens[k];
  805a60:	200690fa 	slli	r3,r4,3
  805a64:	00802074 	movhi	r2,129
  805a68:	108b5d04 	addi	r2,r2,11636
  805a6c:	10c5883a 	add	r2,r2,r3
  805a70:	14000017 	ldw	r16,0(r2)
  805a74:	14800117 	ldw	r18,4(r2)
      if (ndigits < 0 && ilim <= 0)
  805a78:	d8801e17 	ldw	r2,120(sp)
  805a7c:	1000150e 	bge	r2,zero,805ad4 <_dtoa_r+0x7d4>
  805a80:	d8800517 	ldw	r2,20(sp)
  805a84:	00801316 	blt	zero,r2,805ad4 <_dtoa_r+0x7d4>
	  if (ilim < 0 || d.d <= 5 * ds)
  805a88:	d8800517 	ldw	r2,20(sp)
  805a8c:	1002721e 	bne	r2,zero,806458 <_dtoa_r+0x1158>
  805a90:	8009883a 	mov	r4,r16
  805a94:	000d883a 	mov	r6,zero
  805a98:	01d00534 	movhi	r7,16404
  805a9c:	900b883a 	mov	r5,r18
  805aa0:	080ea2c0 	call	80ea2c <__muldf3>
  805aa4:	100d883a 	mov	r6,r2
  805aa8:	180f883a 	mov	r7,r3
  805aac:	9809883a 	mov	r4,r19
  805ab0:	880b883a 	mov	r5,r17
  805ab4:	080e9440 	call	80e944 <__ledf2>
	  S = mhi = 0;
  805ab8:	0029883a 	mov	r20,zero
  805abc:	0021883a 	mov	r16,zero
	  if (ilim < 0 || d.d <= 5 * ds)
  805ac0:	00820216 	blt	zero,r2,8062cc <_dtoa_r+0xfcc>
	  k = -1 - ndigits;
  805ac4:	d8801e17 	ldw	r2,120(sp)
	  goto ret;
  805ac8:	dd400117 	ldw	r21,4(sp)
	  k = -1 - ndigits;
  805acc:	00a2303a 	nor	r17,zero,r2
	  goto ret;
  805ad0:	00020406 	br	8062e4 <_dtoa_r+0xfe4>
	  L = d.d / ds;
  805ad4:	800d883a 	mov	r6,r16
  805ad8:	900f883a 	mov	r7,r18
  805adc:	9809883a 	mov	r4,r19
  805ae0:	880b883a 	mov	r5,r17
  805ae4:	080deac0 	call	80deac <__divdf3>
  805ae8:	180b883a 	mov	r5,r3
  805aec:	1009883a 	mov	r4,r2
  805af0:	080fae00 	call	80fae0 <__fixdfsi>
	  d.d -= L * ds;
  805af4:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  805af8:	102b883a 	mov	r21,r2
	  d.d -= L * ds;
  805afc:	080fb600 	call	80fb60 <__floatsidf>
  805b00:	800d883a 	mov	r6,r16
  805b04:	900f883a 	mov	r7,r18
  805b08:	1009883a 	mov	r4,r2
  805b0c:	180b883a 	mov	r5,r3
  805b10:	080ea2c0 	call	80ea2c <__muldf3>
  805b14:	100d883a 	mov	r6,r2
  805b18:	9809883a 	mov	r4,r19
  805b1c:	880b883a 	mov	r5,r17
  805b20:	180f883a 	mov	r7,r3
  805b24:	080f1d80 	call	80f1d8 <__subdf3>
	  *s++ = '0' + (int) L;
  805b28:	d9800117 	ldw	r6,4(sp)
	  if (i == ilim)
  805b2c:	dd800517 	ldw	r22,20(sp)
	  d.d -= L * ds;
  805b30:	1009883a 	mov	r4,r2
	  *s++ = '0' + (int) L;
  805b34:	a8800c04 	addi	r2,r21,48
  805b38:	30800005 	stb	r2,0(r6)
	  if (i == ilim)
  805b3c:	b0800060 	cmpeqi	r2,r22,1
	  d.d -= L * ds;
  805b40:	180b883a 	mov	r5,r3
	  *s++ = '0' + (int) L;
  805b44:	35000044 	addi	r20,r6,1
	  if (i == ilim)
  805b48:	10029f1e 	bne	r2,zero,8065c8 <_dtoa_r+0x12c8>
  805b4c:	04400044 	movi	r17,1
  805b50:	ddc00215 	stw	r23,8(sp)
  805b54:	00001c06 	br	805bc8 <_dtoa_r+0x8c8>
	  L = d.d / ds;
  805b58:	800d883a 	mov	r6,r16
  805b5c:	900f883a 	mov	r7,r18
  805b60:	a809883a 	mov	r4,r21
  805b64:	980b883a 	mov	r5,r19
  805b68:	080deac0 	call	80deac <__divdf3>
  805b6c:	180b883a 	mov	r5,r3
  805b70:	1009883a 	mov	r4,r2
  805b74:	080fae00 	call	80fae0 <__fixdfsi>
	  d.d -= L * ds;
  805b78:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  805b7c:	102f883a 	mov	r23,r2
	  d.d -= L * ds;
  805b80:	080fb600 	call	80fb60 <__floatsidf>
  805b84:	800d883a 	mov	r6,r16
  805b88:	900f883a 	mov	r7,r18
  805b8c:	1009883a 	mov	r4,r2
  805b90:	180b883a 	mov	r5,r3
  805b94:	080ea2c0 	call	80ea2c <__muldf3>
  805b98:	a809883a 	mov	r4,r21
  805b9c:	980b883a 	mov	r5,r19
  805ba0:	100d883a 	mov	r6,r2
  805ba4:	180f883a 	mov	r7,r3
  805ba8:	080f1d80 	call	80f1d8 <__subdf3>
	  *s++ = '0' + (int) L;
  805bac:	b9000c04 	addi	r4,r23,48
  805bb0:	a1000005 	stb	r4,0(r20)
      for (i = 1;; i++)
  805bb4:	8c400044 	addi	r17,r17,1
	  *s++ = '0' + (int) L;
  805bb8:	a5000044 	addi	r20,r20,1
	  d.d -= L * ds;
  805bbc:	1009883a 	mov	r4,r2
  805bc0:	180b883a 	mov	r5,r3
	  if (i == ilim)
  805bc4:	8d827e26 	beq	r17,r22,8065c0 <_dtoa_r+0x12c0>
	  if (!(d.d *= 10.))
  805bc8:	000d883a 	mov	r6,zero
  805bcc:	01d00934 	movhi	r7,16420
  805bd0:	080ea2c0 	call	80ea2c <__muldf3>
  805bd4:	000d883a 	mov	r6,zero
  805bd8:	000f883a 	mov	r7,zero
  805bdc:	1009883a 	mov	r4,r2
  805be0:	180b883a 	mov	r5,r3
  805be4:	102b883a 	mov	r21,r2
  805be8:	1827883a 	mov	r19,r3
  805bec:	080e7dc0 	call	80e7dc <__eqdf2>
  805bf0:	103fd91e 	bne	r2,zero,805b58 <_dtoa_r+0x858>
  *decpt = k + 1;
  805bf4:	d8800417 	ldw	r2,16(sp)
  805bf8:	ddc00217 	ldw	r23,8(sp)
  805bfc:	a02b883a 	mov	r21,r20
  805c00:	10800044 	addi	r2,r2,1
  805c04:	d8800415 	stw	r2,16(sp)
  805c08:	0000a006 	br	805e8c <_dtoa_r+0xb8c>
  if (leftright)
  805c0c:	d8c00717 	ldw	r3,28(sp)
  805c10:	1800e326 	beq	r3,zero,805fa0 <_dtoa_r+0xca0>
      if (mode < 2)
  805c14:	d8c00217 	ldw	r3,8(sp)
  805c18:	18c00088 	cmpgei	r3,r3,2
  805c1c:	1801e026 	beq	r3,zero,8063a0 <_dtoa_r+0x10a0>
	  j = ilim - 1;
  805c20:	d8800517 	ldw	r2,20(sp)
  805c24:	153fffc4 	addi	r20,r2,-1
	  if (m5 >= j)
  805c28:	d8800817 	ldw	r2,32(sp)
  805c2c:	1501bc0e 	bge	r2,r20,806320 <_dtoa_r+0x1020>
	      s5 += j -= m5;
  805c30:	d8800817 	ldw	r2,32(sp)
  805c34:	d8c00317 	ldw	r3,12(sp)
  805c38:	dd000815 	stw	r20,32(sp)
  805c3c:	a085c83a 	sub	r2,r20,r2
  805c40:	1885883a 	add	r2,r3,r2
  805c44:	d8800315 	stw	r2,12(sp)
	      m5 = 0;
  805c48:	0029883a 	mov	r20,zero
	  if ((i = ilim) < 0)
  805c4c:	d8800517 	ldw	r2,20(sp)
  805c50:	10028b16 	blt	r2,zero,806680 <_dtoa_r+0x1380>
  m2 = b2;
  805c54:	d8c00617 	ldw	r3,24(sp)
      s2 += i;
  805c58:	b0ad883a 	add	r22,r22,r2
  805c5c:	1885883a 	add	r2,r3,r2
  m2 = b2;
  805c60:	1825883a 	mov	r18,r3
      s2 += i;
  805c64:	d8800615 	stw	r2,24(sp)
      mhi = i2b (ptr, 1);
  805c68:	01400044 	movi	r5,1
  805c6c:	b809883a 	mov	r4,r23
  805c70:	0808ec40 	call	808ec4 <__i2b>
  805c74:	1021883a 	mov	r16,r2
  if (m2 > 0 && s2 > 0)
  805c78:	0480080e 	bge	zero,r18,805c9c <_dtoa_r+0x99c>
  805c7c:	0580070e 	bge	zero,r22,805c9c <_dtoa_r+0x99c>
      i = m2 < s2 ? m2 : s2;
  805c80:	9005883a 	mov	r2,r18
  805c84:	b4819e16 	blt	r22,r18,806300 <_dtoa_r+0x1000>
      b2 -= i;
  805c88:	d8c00617 	ldw	r3,24(sp)
      m2 -= i;
  805c8c:	90a5c83a 	sub	r18,r18,r2
      s2 -= i;
  805c90:	b0adc83a 	sub	r22,r22,r2
      b2 -= i;
  805c94:	1887c83a 	sub	r3,r3,r2
  805c98:	d8c00615 	stw	r3,24(sp)
  if (b5 > 0)
  805c9c:	d8800817 	ldw	r2,32(sp)
  805ca0:	10001426 	beq	r2,zero,805cf4 <_dtoa_r+0x9f4>
      if (leftright)
  805ca4:	d8800717 	ldw	r2,28(sp)
  805ca8:	1001ee26 	beq	r2,zero,806464 <_dtoa_r+0x1164>
	  if (m5 > 0)
  805cac:	05000e0e 	bge	zero,r20,805ce8 <_dtoa_r+0x9e8>
	      mhi = pow5mult (ptr, mhi, m5);
  805cb0:	800b883a 	mov	r5,r16
  805cb4:	a00d883a 	mov	r6,r20
  805cb8:	b809883a 	mov	r4,r23
  805cbc:	08092380 	call	809238 <__pow5mult>
	      b1 = mult (ptr, mhi, b);
  805cc0:	e00d883a 	mov	r6,fp
  805cc4:	100b883a 	mov	r5,r2
  805cc8:	b809883a 	mov	r4,r23
	      mhi = pow5mult (ptr, mhi, m5);
  805ccc:	1021883a 	mov	r16,r2
	      b1 = mult (ptr, mhi, b);
  805cd0:	0808f740 	call	808f74 <__multiply>
  805cd4:	102b883a 	mov	r21,r2
	      Bfree (ptr, b);
  805cd8:	e00b883a 	mov	r5,fp
  805cdc:	b809883a 	mov	r4,r23
  805ce0:	0808af80 	call	808af8 <_Bfree>
	      b = b1;
  805ce4:	a839883a 	mov	fp,r21
         if ((j = b5 - m5) != 0)
  805ce8:	d8800817 	ldw	r2,32(sp)
  805cec:	150dc83a 	sub	r6,r2,r20
  805cf0:	15025e1e 	bne	r2,r20,80666c <_dtoa_r+0x136c>
  S = i2b (ptr, 1);
  805cf4:	01400044 	movi	r5,1
  805cf8:	b809883a 	mov	r4,r23
  805cfc:	0808ec40 	call	808ec4 <__i2b>
  if (s5 > 0)
  805d00:	d9800317 	ldw	r6,12(sp)
  S = i2b (ptr, 1);
  805d04:	1029883a 	mov	r20,r2
  if (s5 > 0)
  805d08:	0180b716 	blt	zero,r6,805fe8 <_dtoa_r+0xce8>
  if (mode < 2)
  805d0c:	d8800217 	ldw	r2,8(sp)
  805d10:	10800088 	cmpgei	r2,r2,2
  805d14:	10014d26 	beq	r2,zero,80624c <_dtoa_r+0xf4c>
  spec_case = 0;
  805d18:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  805d1c:	d8c00317 	ldw	r3,12(sp)
  805d20:	00800044 	movi	r2,1
  805d24:	1800b81e 	bne	r3,zero,806008 <_dtoa_r+0xd08>
  805d28:	1585883a 	add	r2,r2,r22
  805d2c:	108007cc 	andi	r2,r2,31
  805d30:	1000a526 	beq	r2,zero,805fc8 <_dtoa_r+0xcc8>
    i = 32 - i;
  805d34:	00c00804 	movi	r3,32
  805d38:	1887c83a 	sub	r3,r3,r2
  if (i > 4)
  805d3c:	19000150 	cmplti	r4,r3,5
  805d40:	20033c1e 	bne	r4,zero,806a34 <_dtoa_r+0x1734>
      i -= 4;
  805d44:	00c00704 	movi	r3,28
  805d48:	1885c83a 	sub	r2,r3,r2
      b2 += i;
  805d4c:	d8c00617 	ldw	r3,24(sp)
      m2 += i;
  805d50:	90a5883a 	add	r18,r18,r2
      s2 += i;
  805d54:	b0ad883a 	add	r22,r22,r2
      b2 += i;
  805d58:	1887883a 	add	r3,r3,r2
  805d5c:	d8c00615 	stw	r3,24(sp)
  if (b2 > 0)
  805d60:	d8800617 	ldw	r2,24(sp)
  805d64:	00809216 	blt	zero,r2,805fb0 <_dtoa_r+0xcb0>
  if (s2 > 0)
  805d68:	0580050e 	bge	zero,r22,805d80 <_dtoa_r+0xa80>
    S = lshift (ptr, S, s2);
  805d6c:	a00b883a 	mov	r5,r20
  805d70:	b00d883a 	mov	r6,r22
  805d74:	b809883a 	mov	r4,r23
  805d78:	08093800 	call	809380 <__lshift>
  805d7c:	1029883a 	mov	r20,r2
  if (k_check)
  805d80:	d8800917 	ldw	r2,36(sp)
  805d84:	1001151e 	bne	r2,zero,8061dc <_dtoa_r+0xedc>
  if (ilim <= 0 && mode > 2)
  805d88:	d8800517 	ldw	r2,20(sp)
  805d8c:	0081020e 	bge	zero,r2,806198 <_dtoa_r+0xe98>
  if (leftright)
  805d90:	d8800717 	ldw	r2,28(sp)
  805d94:	1000af1e 	bne	r2,zero,806054 <_dtoa_r+0xd54>
  *decpt = k + 1;
  805d98:	d8800417 	ldw	r2,16(sp)
  805d9c:	10800044 	addi	r2,r2,1
  805da0:	d8800415 	stw	r2,16(sp)
  if (ilim <= 0 && mode > 2)
  805da4:	dc800517 	ldw	r18,20(sp)
  805da8:	dd400117 	ldw	r21,4(sp)
  805dac:	04400044 	movi	r17,1
  805db0:	00000706 	br	805dd0 <_dtoa_r+0xad0>
	b = multadd (ptr, b, 10, 0);
  805db4:	e00b883a 	mov	r5,fp
  805db8:	000f883a 	mov	r7,zero
  805dbc:	01800284 	movi	r6,10
  805dc0:	b809883a 	mov	r4,r23
  805dc4:	0808b1c0 	call	808b1c <__multadd>
  805dc8:	1039883a 	mov	fp,r2
    for (i = 1;; i++)
  805dcc:	8c400044 	addi	r17,r17,1
	*s++ = dig = quorem (b, S) + '0';
  805dd0:	a00b883a 	mov	r5,r20
  805dd4:	e009883a 	mov	r4,fp
  805dd8:	08050e00 	call	8050e0 <quorem>
  805ddc:	14c00c04 	addi	r19,r2,48
  805de0:	ac45883a 	add	r2,r21,r17
  805de4:	14ffffc5 	stb	r19,-1(r2)
	if (i >= ilim)
  805de8:	8cbff216 	blt	r17,r18,805db4 <_dtoa_r+0xab4>
	*s++ = dig = quorem (b, S) + '0';
  805dec:	d8800517 	ldw	r2,20(sp)
  805df0:	0081510e 	bge	zero,r2,806338 <_dtoa_r+0x1038>
  805df4:	d8c00117 	ldw	r3,4(sp)
  mhi = mlo = 0;
  805df8:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  805dfc:	18ab883a 	add	r21,r3,r2
  b = lshift (ptr, b, 1);
  805e00:	e00b883a 	mov	r5,fp
  805e04:	01800044 	movi	r6,1
  805e08:	b809883a 	mov	r4,r23
  805e0c:	08093800 	call	809380 <__lshift>
  j = cmp (b, S);
  805e10:	1009883a 	mov	r4,r2
  805e14:	a00b883a 	mov	r5,r20
  b = lshift (ptr, b, 1);
  805e18:	1039883a 	mov	fp,r2
  j = cmp (b, S);
  805e1c:	08095080 	call	809508 <__mcmp>
      while (*--s == '9')
  805e20:	a93fffc3 	ldbu	r4,-1(r21)
  if ((j > 0) || ((j == 0) && (dig & 1)))
  805e24:	0081490e 	bge	zero,r2,80634c <_dtoa_r+0x104c>
  805e28:	d9400117 	ldw	r5,4(sp)
  805e2c:	00000306 	br	805e3c <_dtoa_r+0xb3c>
	if (s == s0)
  805e30:	19415426 	beq	r3,r5,806384 <_dtoa_r+0x1084>
      while (*--s == '9')
  805e34:	193fffc3 	ldbu	r4,-1(r3)
  805e38:	182b883a 	mov	r21,r3
  805e3c:	20803fcc 	andi	r2,r4,255
  805e40:	1080201c 	xori	r2,r2,128
  805e44:	10bfe004 	addi	r2,r2,-128
  805e48:	10800e60 	cmpeqi	r2,r2,57
  805e4c:	a8ffffc4 	addi	r3,r21,-1
  805e50:	103ff71e 	bne	r2,zero,805e30 <_dtoa_r+0xb30>
      ++*s++;
  805e54:	21000044 	addi	r4,r4,1
  805e58:	19000005 	stb	r4,0(r3)
  Bfree (ptr, S);
  805e5c:	a00b883a 	mov	r5,r20
  805e60:	b809883a 	mov	r4,r23
  805e64:	0808af80 	call	808af8 <_Bfree>
  if (mhi)
  805e68:	80000826 	beq	r16,zero,805e8c <_dtoa_r+0xb8c>
      if (mlo && mlo != mhi)
  805e6c:	88000426 	beq	r17,zero,805e80 <_dtoa_r+0xb80>
  805e70:	8c000326 	beq	r17,r16,805e80 <_dtoa_r+0xb80>
	Bfree (ptr, mlo);
  805e74:	880b883a 	mov	r5,r17
  805e78:	b809883a 	mov	r4,r23
  805e7c:	0808af80 	call	808af8 <_Bfree>
      Bfree (ptr, mhi);
  805e80:	800b883a 	mov	r5,r16
  805e84:	b809883a 	mov	r4,r23
  805e88:	0808af80 	call	808af8 <_Bfree>
  Bfree (ptr, b);
  805e8c:	e00b883a 	mov	r5,fp
  805e90:	b809883a 	mov	r4,r23
  805e94:	0808af80 	call	808af8 <_Bfree>
  *decpt = k + 1;
  805e98:	d8801f17 	ldw	r2,124(sp)
  805e9c:	d8c00417 	ldw	r3,16(sp)
  *s = 0;
  805ea0:	a8000005 	stb	zero,0(r21)
  *decpt = k + 1;
  805ea4:	10c00015 	stw	r3,0(r2)
  if (rve)
  805ea8:	d8802117 	ldw	r2,132(sp)
  805eac:	103d4626 	beq	r2,zero,8053c8 <_dtoa_r+0xc8>
    *rve = s;
  805eb0:	15400015 	stw	r21,0(r2)
  805eb4:	003d4406 	br	8053c8 <_dtoa_r+0xc8>
      k_check = 0;
  805eb8:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  805ebc:	b0002416 	blt	r22,zero,805f50 <_dtoa_r+0xc50>
      b2 = 0;
  805ec0:	d8000615 	stw	zero,24(sp)
      s2 += k;
  805ec4:	d8800317 	ldw	r2,12(sp)
  if (mode < 0 || mode > 9)
  805ec8:	d8c00217 	ldw	r3,8(sp)
      b5 = 0;
  805ecc:	d8000815 	stw	zero,32(sp)
      s2 += k;
  805ed0:	b0ad883a 	add	r22,r22,r2
  if (mode < 0 || mode > 9)
  805ed4:	d8800415 	stw	r2,16(sp)
  805ed8:	188002a8 	cmpgeui	r2,r3,10
  805edc:	103db326 	beq	r2,zero,8055ac <_dtoa_r+0x2ac>
  leftright = 1;
  805ee0:	00800044 	movi	r2,1
  805ee4:	d8800715 	stw	r2,28(sp)
  ilim = ilim1 = -1;
  805ee8:	00bfffc4 	movi	r2,-1
  try_quick = 1;
  805eec:	04000044 	movi	r16,1
    mode = 0;
  805ef0:	d8000215 	stw	zero,8(sp)
  ilim = ilim1 = -1;
  805ef4:	d8800515 	stw	r2,20(sp)
      ndigits = 0;
  805ef8:	d8001e15 	stw	zero,120(sp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805efc:	d8800517 	ldw	r2,20(sp)
  805f00:	b8001115 	stw	zero,68(r23)
  805f04:	000b883a 	mov	r5,zero
  805f08:	d8800b15 	stw	r2,44(sp)
  805f0c:	003dc406 	br	805620 <_dtoa_r+0x320>
  switch (mode)
  805f10:	188000e0 	cmpeqi	r2,r3,3
      leftright = 0;
  805f14:	d8000715 	stw	zero,28(sp)
  switch (mode)
  805f18:	1002ac26 	beq	r2,zero,8069cc <_dtoa_r+0x16cc>
      i = ndigits + k + 1;
  805f1c:	d8801e17 	ldw	r2,120(sp)
  805f20:	d8c00417 	ldw	r3,16(sp)
  805f24:	10c5883a 	add	r2,r2,r3
  805f28:	d8800b15 	stw	r2,44(sp)
  805f2c:	10800044 	addi	r2,r2,1
  805f30:	d8800515 	stw	r2,20(sp)
      if (i <= 0)
  805f34:	100d883a 	mov	r6,r2
  805f38:	00bdae16 	blt	zero,r2,8055f4 <_dtoa_r+0x2f4>
  805f3c:	01800044 	movi	r6,1
  805f40:	003dac06 	br	8055f4 <_dtoa_r+0x2f4>
  k_check = 1;
  805f44:	00800044 	movi	r2,1
  805f48:	d8800915 	stw	r2,36(sp)
  if (j >= 0)
  805f4c:	b03d890e 	bge	r22,zero,805574 <_dtoa_r+0x274>
      b2 = -j;
  805f50:	00800044 	movi	r2,1
  805f54:	1405c83a 	sub	r2,r2,r16
  805f58:	d8800615 	stw	r2,24(sp)
      s2 = 0;
  805f5c:	002d883a 	mov	r22,zero
  805f60:	003d8506 	br	805578 <_dtoa_r+0x278>
  if (ds < 0. && ds != k)
  805f64:	a809883a 	mov	r4,r21
  805f68:	080fb600 	call	80fb60 <__floatsidf>
  805f6c:	900d883a 	mov	r6,r18
  805f70:	b00f883a 	mov	r7,r22
  805f74:	1009883a 	mov	r4,r2
  805f78:	180b883a 	mov	r5,r3
  805f7c:	080e7dc0 	call	80e7dc <__eqdf2>
  805f80:	103d6926 	beq	r2,zero,805528 <_dtoa_r+0x228>
    k--;			/* want k = floor(ds) */
  805f84:	a8bfffc4 	addi	r2,r21,-1
  805f88:	d8800315 	stw	r2,12(sp)
  805f8c:	003d6606 	br	805528 <_dtoa_r+0x228>
      return s;
  805f90:	00802074 	movhi	r2,129
  805f94:	108afc04 	addi	r2,r2,11248
  805f98:	d8800115 	stw	r2,4(sp)
  805f9c:	003d0a06 	br	8053c8 <_dtoa_r+0xc8>
  805fa0:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  805fa4:	dc800617 	ldw	r18,24(sp)
  mhi = mlo = 0;
  805fa8:	0021883a 	mov	r16,zero
  805fac:	003f3206 	br	805c78 <_dtoa_r+0x978>
    b = lshift (ptr, b, b2);
  805fb0:	e00b883a 	mov	r5,fp
  805fb4:	100d883a 	mov	r6,r2
  805fb8:	b809883a 	mov	r4,r23
  805fbc:	08093800 	call	809380 <__lshift>
  805fc0:	1039883a 	mov	fp,r2
  805fc4:	003f6806 	br	805d68 <_dtoa_r+0xa68>
  805fc8:	00800704 	movi	r2,28
  805fcc:	003f5f06 	br	805d4c <_dtoa_r+0xa4c>
       : (word1 (d) << (32 - i));
  805fd0:	01000804 	movi	r4,32
  805fd4:	2089c83a 	sub	r4,r4,r2
  805fd8:	9908983a 	sll	r4,r19,r4
  805fdc:	003d1d06 	br	805454 <_dtoa_r+0x154>
  try_quick = 1;
  805fe0:	04000044 	movi	r16,1
  805fe4:	003d7606 	br	8055c0 <_dtoa_r+0x2c0>
    S = pow5mult (ptr, S, s5);
  805fe8:	100b883a 	mov	r5,r2
  805fec:	b809883a 	mov	r4,r23
  805ff0:	08092380 	call	809238 <__pow5mult>
  if (mode < 2)
  805ff4:	d8c00217 	ldw	r3,8(sp)
    S = pow5mult (ptr, S, s5);
  805ff8:	1029883a 	mov	r20,r2
  if (mode < 2)
  805ffc:	18c00090 	cmplti	r3,r3,2
  806000:	1801511e 	bne	r3,zero,806548 <_dtoa_r+0x1248>
  spec_case = 0;
  806004:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  806008:	a0800417 	ldw	r2,16(r20)
  80600c:	10800104 	addi	r2,r2,4
  806010:	100490ba 	slli	r2,r2,2
  806014:	a085883a 	add	r2,r20,r2
  806018:	11000017 	ldw	r4,0(r2)
  80601c:	0808db00 	call	808db0 <__hi0bits>
  806020:	00c00804 	movi	r3,32
  806024:	1885c83a 	sub	r2,r3,r2
  806028:	003f3f06 	br	805d28 <_dtoa_r+0xa28>
	    mhi = multadd (ptr, mhi, 10, 0);
  80602c:	800b883a 	mov	r5,r16
  806030:	000f883a 	mov	r7,zero
  806034:	01800284 	movi	r6,10
  806038:	b809883a 	mov	r4,r23
  80603c:	0808b1c0 	call	808b1c <__multadd>
  806040:	1021883a 	mov	r16,r2
  if (ilim <= 0 && mode > 2)
  806044:	d8800b17 	ldw	r2,44(sp)
  806048:	00824b0e 	bge	zero,r2,806978 <_dtoa_r+0x1678>
	  k--;
  80604c:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  806050:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  806054:	0480ac16 	blt	zero,r18,806308 <_dtoa_r+0x1008>
      if (spec_case)
  806058:	8801731e 	bne	r17,zero,806628 <_dtoa_r+0x1328>
  80605c:	8025883a 	mov	r18,r16
  806060:	dd800117 	ldw	r22,4(sp)
  806064:	d9000517 	ldw	r4,20(sp)
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  806068:	98c0004c 	andi	r3,r19,1
  80606c:	b0bfffc4 	addi	r2,r22,-1
  806070:	1105883a 	add	r2,r2,r4
  806074:	d8800515 	stw	r2,20(sp)
  806078:	d8800217 	ldw	r2,8(sp)
  80607c:	d8c00815 	stw	r3,32(sp)
  806080:	1884b03a 	or	r2,r3,r2
  806084:	d8800715 	stw	r2,28(sp)
  806088:	00002906 	br	806130 <_dtoa_r+0xe30>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  80608c:	e009883a 	mov	r4,fp
  806090:	08095080 	call	809508 <__mcmp>
	  Bfree (ptr, delta);
  806094:	980b883a 	mov	r5,r19
  806098:	b809883a 	mov	r4,r23
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  80609c:	d8800315 	stw	r2,12(sp)
	  Bfree (ptr, delta);
  8060a0:	0808af80 	call	808af8 <_Bfree>
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  8060a4:	d8800317 	ldw	r2,12(sp)
  8060a8:	1000021e 	bne	r2,zero,8060b4 <_dtoa_r+0xdb4>
  8060ac:	d8c00717 	ldw	r3,28(sp)
  8060b0:	18022326 	beq	r3,zero,806940 <_dtoa_r+0x1640>
         if ((j < 0) || ((j == 0) && !mode
  8060b4:	b4c00044 	addi	r19,r22,1
  8060b8:	88012916 	blt	r17,zero,806560 <_dtoa_r+0x1260>
	      && !(word1 (d) & 1)
  8060bc:	d8c00217 	ldw	r3,8(sp)
  8060c0:	88e2b03a 	or	r17,r17,r3
  8060c4:	d8c00817 	ldw	r3,32(sp)
  8060c8:	1c62b03a 	or	r17,r3,r17
  8060cc:	88012426 	beq	r17,zero,806560 <_dtoa_r+0x1260>
	  if (j1 > 0)
  8060d0:	00816f16 	blt	zero,r2,806690 <_dtoa_r+0x1390>
	  if (i == ilim)
  8060d4:	d8800517 	ldw	r2,20(sp)
	  *s++ = dig;
  8060d8:	b5400005 	stb	r21,0(r22)
	  if (i == ilim)
  8060dc:	15817926 	beq	r2,r22,8066c4 <_dtoa_r+0x13c4>
	  b = multadd (ptr, b, 10, 0);
  8060e0:	e00b883a 	mov	r5,fp
  8060e4:	000f883a 	mov	r7,zero
  8060e8:	01800284 	movi	r6,10
  8060ec:	b809883a 	mov	r4,r23
  8060f0:	0808b1c0 	call	808b1c <__multadd>
  8060f4:	1039883a 	mov	fp,r2
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  8060f8:	800b883a 	mov	r5,r16
  8060fc:	000f883a 	mov	r7,zero
  806100:	01800284 	movi	r6,10
  806104:	b809883a 	mov	r4,r23
	  if (mlo == mhi)
  806108:	84801f26 	beq	r16,r18,806188 <_dtoa_r+0xe88>
	      mlo = multadd (ptr, mlo, 10, 0);
  80610c:	0808b1c0 	call	808b1c <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
  806110:	900b883a 	mov	r5,r18
  806114:	000f883a 	mov	r7,zero
  806118:	01800284 	movi	r6,10
  80611c:	b809883a 	mov	r4,r23
	      mlo = multadd (ptr, mlo, 10, 0);
  806120:	1021883a 	mov	r16,r2
	      mhi = multadd (ptr, mhi, 10, 0);
  806124:	0808b1c0 	call	808b1c <__multadd>
  806128:	1025883a 	mov	r18,r2
	  dig = quorem (b, S) + '0';
  80612c:	982d883a 	mov	r22,r19
  806130:	a00b883a 	mov	r5,r20
  806134:	e009883a 	mov	r4,fp
  806138:	08050e00 	call	8050e0 <quorem>
	  j = cmp (b, mlo);
  80613c:	800b883a 	mov	r5,r16
  806140:	e009883a 	mov	r4,fp
	  dig = quorem (b, S) + '0';
  806144:	102b883a 	mov	r21,r2
  806148:	d8800615 	stw	r2,24(sp)
	  j = cmp (b, mlo);
  80614c:	08095080 	call	809508 <__mcmp>
	  delta = diff (ptr, S, mhi);
  806150:	a00b883a 	mov	r5,r20
  806154:	900d883a 	mov	r6,r18
  806158:	b809883a 	mov	r4,r23
	  j = cmp (b, mlo);
  80615c:	1023883a 	mov	r17,r2
	  delta = diff (ptr, S, mhi);
  806160:	08095600 	call	809560 <__mdiff>
  806164:	1027883a 	mov	r19,r2
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  806168:	10800317 	ldw	r2,12(r2)
	  dig = quorem (b, S) + '0';
  80616c:	ad400c04 	addi	r21,r21,48
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  806170:	980b883a 	mov	r5,r19
  806174:	103fc526 	beq	r2,zero,80608c <_dtoa_r+0xd8c>
	  Bfree (ptr, delta);
  806178:	b809883a 	mov	r4,r23
  80617c:	0808af80 	call	808af8 <_Bfree>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  806180:	00800044 	movi	r2,1
  806184:	003fcb06 	br	8060b4 <_dtoa_r+0xdb4>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  806188:	0808b1c0 	call	808b1c <__multadd>
  80618c:	1021883a 	mov	r16,r2
  806190:	1025883a 	mov	r18,r2
  806194:	003fe506 	br	80612c <_dtoa_r+0xe2c>
  if (ilim <= 0 && mode > 2)
  806198:	d8800217 	ldw	r2,8(sp)
  80619c:	108000d0 	cmplti	r2,r2,3
  8061a0:	10003e26 	beq	r2,zero,80629c <_dtoa_r+0xf9c>
  if (leftright)
  8061a4:	d8800717 	ldw	r2,28(sp)
  8061a8:	103faa1e 	bne	r2,zero,806054 <_dtoa_r+0xd54>
	*s++ = dig = quorem (b, S) + '0';
  8061ac:	a00b883a 	mov	r5,r20
  8061b0:	e009883a 	mov	r4,fp
  8061b4:	08050e00 	call	8050e0 <quorem>
  8061b8:	14c00c04 	addi	r19,r2,48
  8061bc:	d8800117 	ldw	r2,4(sp)
  mhi = mlo = 0;
  8061c0:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  8061c4:	15400044 	addi	r21,r2,1
  8061c8:	14c00005 	stb	r19,0(r2)
  *decpt = k + 1;
  8061cc:	d8800417 	ldw	r2,16(sp)
  8061d0:	10800044 	addi	r2,r2,1
  8061d4:	d8800415 	stw	r2,16(sp)
  8061d8:	003f0906 	br	805e00 <_dtoa_r+0xb00>
      if (cmp (b, S) < 0)
  8061dc:	a00b883a 	mov	r5,r20
  8061e0:	e009883a 	mov	r4,fp
  8061e4:	08095080 	call	809508 <__mcmp>
  8061e8:	103ee70e 	bge	r2,zero,805d88 <_dtoa_r+0xa88>
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  8061ec:	e00b883a 	mov	r5,fp
  8061f0:	000f883a 	mov	r7,zero
  8061f4:	01800284 	movi	r6,10
  8061f8:	b809883a 	mov	r4,r23
  8061fc:	0808b1c0 	call	808b1c <__multadd>
	  k--;
  806200:	d8c00417 	ldw	r3,16(sp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  806204:	1039883a 	mov	fp,r2
	  if (leftright)
  806208:	d8800717 	ldw	r2,28(sp)
	  k--;
  80620c:	1d7fffc4 	addi	r21,r3,-1
	  if (leftright)
  806210:	103f861e 	bne	r2,zero,80602c <_dtoa_r+0xd2c>
  if (ilim <= 0 && mode > 2)
  806214:	d8800b17 	ldw	r2,44(sp)
  806218:	0081d20e 	bge	zero,r2,806964 <_dtoa_r+0x1664>
  80621c:	d8800515 	stw	r2,20(sp)
  806220:	003ee006 	br	805da4 <_dtoa_r+0xaa4>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806224:	00802074 	movhi	r2,129
  806228:	1007883a 	mov	r3,r2
  80622c:	18cb0504 	addi	r3,r3,11284
	  s[3] ? s + 8 :
  806230:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806234:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  806238:	108b05c4 	addi	r2,r2,11287
  80623c:	003ded06 	br	8059f4 <_dtoa_r+0x6f4>
  switch (mode)
  806240:	00800044 	movi	r2,1
  806244:	d8800715 	stw	r2,28(sp)
  806248:	003f3406 	br	805f1c <_dtoa_r+0xc1c>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  80624c:	983eb21e 	bne	r19,zero,805d18 <_dtoa_r+0xa18>
  806250:	00800434 	movhi	r2,16
  806254:	10bfffc4 	addi	r2,r2,-1
  806258:	8884703a 	and	r2,r17,r2
  80625c:	103eae1e 	bne	r2,zero,805d18 <_dtoa_r+0xa18>
	  && word0 (d) & Exp_mask
  806260:	8c5ffc2c 	andhi	r17,r17,32752
  806264:	883eac26 	beq	r17,zero,805d18 <_dtoa_r+0xa18>
	  b2 += Log2P;
  806268:	d8800617 	ldw	r2,24(sp)
	  s2 += Log2P;
  80626c:	b5800044 	addi	r22,r22,1
	  spec_case = 1;
  806270:	04400044 	movi	r17,1
	  b2 += Log2P;
  806274:	10800044 	addi	r2,r2,1
  806278:	d8800615 	stw	r2,24(sp)
	  spec_case = 1;
  80627c:	003ea706 	br	805d1c <_dtoa_r+0xa1c>
	ndigits = 1;
  806280:	00800044 	movi	r2,1
  806284:	d8800515 	stw	r2,20(sp)
  806288:	d8801e15 	stw	r2,120(sp)
  80628c:	003f1b06 	br	805efc <_dtoa_r+0xbfc>
  if (ilim <= 0 && mode > 2)
  806290:	d8800b17 	ldw	r2,44(sp)
	  k--;
  806294:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  806298:	d8800515 	stw	r2,20(sp)
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
  80629c:	d8800517 	ldw	r2,20(sp)
  8062a0:	103e081e 	bne	r2,zero,805ac4 <_dtoa_r+0x7c4>
  8062a4:	a00b883a 	mov	r5,r20
  8062a8:	b809883a 	mov	r4,r23
  8062ac:	000f883a 	mov	r7,zero
  8062b0:	01800144 	movi	r6,5
  8062b4:	0808b1c0 	call	808b1c <__multadd>
  8062b8:	100b883a 	mov	r5,r2
  8062bc:	e009883a 	mov	r4,fp
  8062c0:	1029883a 	mov	r20,r2
  8062c4:	08095080 	call	809508 <__mcmp>
  8062c8:	00bdfe0e 	bge	zero,r2,805ac4 <_dtoa_r+0x7c4>
      *s++ = '1';
  8062cc:	d8c00117 	ldw	r3,4(sp)
  8062d0:	00800c44 	movi	r2,49
  8062d4:	18800005 	stb	r2,0(r3)
      k++;
  8062d8:	d8800417 	ldw	r2,16(sp)
      *s++ = '1';
  8062dc:	1d400044 	addi	r21,r3,1
      k++;
  8062e0:	14400044 	addi	r17,r2,1
  Bfree (ptr, S);
  8062e4:	a00b883a 	mov	r5,r20
  8062e8:	b809883a 	mov	r4,r23
  8062ec:	0808af80 	call	808af8 <_Bfree>
  *decpt = k + 1;
  8062f0:	88800044 	addi	r2,r17,1
  8062f4:	d8800415 	stw	r2,16(sp)
  if (mhi)
  8062f8:	803ee11e 	bne	r16,zero,805e80 <_dtoa_r+0xb80>
  8062fc:	003ee306 	br	805e8c <_dtoa_r+0xb8c>
      i = m2 < s2 ? m2 : s2;
  806300:	b005883a 	mov	r2,r22
  806304:	003e6006 	br	805c88 <_dtoa_r+0x988>
	mhi = lshift (ptr, mhi, m2);
  806308:	800b883a 	mov	r5,r16
  80630c:	900d883a 	mov	r6,r18
  806310:	b809883a 	mov	r4,r23
  806314:	08093800 	call	809380 <__lshift>
  806318:	1021883a 	mov	r16,r2
  80631c:	003f4e06 	br	806058 <_dtoa_r+0xd58>
	    m5 -= j;
  806320:	1529c83a 	sub	r20,r2,r20
  806324:	003e4906 	br	805c4c <_dtoa_r+0x94c>
  806328:	dcc00c15 	stw	r19,48(sp)
  80632c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  806330:	05400084 	movi	r21,2
  806334:	003cdf06 	br	8056b4 <_dtoa_r+0x3b4>
	*s++ = dig = quorem (b, S) + '0';
  806338:	00800044 	movi	r2,1
  80633c:	003ead06 	br	805df4 <_dtoa_r+0xaf4>
  switch (mode)
  806340:	00800044 	movi	r2,1
  806344:	d8800715 	stw	r2,28(sp)
  806348:	003ca506 	br	8055e0 <_dtoa_r+0x2e0>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  80634c:	1000021e 	bne	r2,zero,806358 <_dtoa_r+0x1058>
  806350:	98c0004c 	andi	r3,r19,1
  806354:	183eb41e 	bne	r3,zero,805e28 <_dtoa_r+0xb28>
  806358:	2005883a 	mov	r2,r4
  80635c:	00000206 	br	806368 <_dtoa_r+0x1068>
      while (*--s == '0');
  806360:	a8bfff83 	ldbu	r2,-2(r21)
  806364:	182b883a 	mov	r21,r3
  806368:	10803fcc 	andi	r2,r2,255
  80636c:	1080201c 	xori	r2,r2,128
  806370:	10bfe004 	addi	r2,r2,-128
  806374:	10800c18 	cmpnei	r2,r2,48
  806378:	a8ffffc4 	addi	r3,r21,-1
  80637c:	103ff826 	beq	r2,zero,806360 <_dtoa_r+0x1060>
  806380:	003eb606 	br	805e5c <_dtoa_r+0xb5c>
	    *s++ = '1';
  806384:	d8c00117 	ldw	r3,4(sp)
  806388:	00800c44 	movi	r2,49
  80638c:	18800005 	stb	r2,0(r3)
  *decpt = k + 1;
  806390:	d8800417 	ldw	r2,16(sp)
  806394:	10800044 	addi	r2,r2,1
  806398:	d8800415 	stw	r2,16(sp)
	    goto ret;
  80639c:	003eaf06 	br	805e5c <_dtoa_r+0xb5c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8063a0:	d8c00a17 	ldw	r3,40(sp)
  8063a4:	18011826 	beq	r3,zero,806808 <_dtoa_r+0x1508>
  m2 = b2;
  8063a8:	d8c00617 	ldw	r3,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8063ac:	10810cc4 	addi	r2,r2,1075
      s2 += i;
  8063b0:	b0ad883a 	add	r22,r22,r2
  8063b4:	1885883a 	add	r2,r3,r2
  8063b8:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  8063bc:	1825883a 	mov	r18,r3
  8063c0:	d8800615 	stw	r2,24(sp)
  8063c4:	003e2806 	br	805c68 <_dtoa_r+0x968>
      eps.d = ieps * d.d + 7.;
  8063c8:	a809883a 	mov	r4,r21
  8063cc:	080fb600 	call	80fb60 <__floatsidf>
  8063d0:	800d883a 	mov	r6,r16
  8063d4:	900f883a 	mov	r7,r18
  8063d8:	1009883a 	mov	r4,r2
  8063dc:	180b883a 	mov	r5,r3
  8063e0:	080ea2c0 	call	80ea2c <__muldf3>
  8063e4:	000d883a 	mov	r6,zero
  8063e8:	01d00734 	movhi	r7,16412
  8063ec:	1009883a 	mov	r4,r2
  8063f0:	180b883a 	mov	r5,r3
  8063f4:	080d5bc0 	call	80d5bc <__adddf3>
  8063f8:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  8063fc:	00bf3034 	movhi	r2,64704
  806400:	1885883a 	add	r2,r3,r2
  806404:	d8800c15 	stw	r2,48(sp)
	  d.d -= 5.;
  806408:	8009883a 	mov	r4,r16
  80640c:	900b883a 	mov	r5,r18
  806410:	000d883a 	mov	r6,zero
  806414:	01d00534 	movhi	r7,16404
  806418:	080f1d80 	call	80f1d8 <__subdf3>
	  if (d.d > eps.d)
  80641c:	dd400c17 	ldw	r21,48(sp)
  806420:	a00d883a 	mov	r6,r20
  806424:	1009883a 	mov	r4,r2
  806428:	a80f883a 	mov	r7,r21
  80642c:	180b883a 	mov	r5,r3
	  d.d -= 5.;
  806430:	1025883a 	mov	r18,r2
  806434:	1821883a 	mov	r16,r3
	  if (d.d > eps.d)
  806438:	080e85c0 	call	80e85c <__gedf2>
  80643c:	00812f16 	blt	zero,r2,8068fc <_dtoa_r+0x15fc>
	  if (d.d < -eps.d)
  806440:	a9e0003c 	xorhi	r7,r21,32768
  806444:	a00d883a 	mov	r6,r20
  806448:	9009883a 	mov	r4,r18
  80644c:	800b883a 	mov	r5,r16
  806450:	080e9440 	call	80e944 <__ledf2>
  806454:	103d7d0e 	bge	r2,zero,805a4c <_dtoa_r+0x74c>
	  S = mhi = 0;
  806458:	0029883a 	mov	r20,zero
  80645c:	0021883a 	mov	r16,zero
  806460:	003d9806 	br	805ac4 <_dtoa_r+0x7c4>
	b = pow5mult (ptr, b, b5);
  806464:	d9800817 	ldw	r6,32(sp)
  806468:	e00b883a 	mov	r5,fp
  80646c:	b809883a 	mov	r4,r23
  806470:	08092380 	call	809238 <__pow5mult>
  806474:	1039883a 	mov	fp,r2
  806478:	003e1e06 	br	805cf4 <_dtoa_r+0x9f4>
      else if ((j1 = -k) != 0)
  80647c:	d8800417 	ldw	r2,16(sp)
  806480:	1000ed26 	beq	r2,zero,806838 <_dtoa_r+0x1538>
  806484:	00a9c83a 	sub	r20,zero,r2
	  d.d *= tens[j1 & 0xf];
  806488:	a08003cc 	andi	r2,r20,15
  80648c:	100690fa 	slli	r3,r2,3
  806490:	00802074 	movhi	r2,129
  806494:	108b5d04 	addi	r2,r2,11636
  806498:	10c5883a 	add	r2,r2,r3
  80649c:	11800017 	ldw	r6,0(r2)
  8064a0:	11c00117 	ldw	r7,4(r2)
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8064a4:	a029d13a 	srai	r20,r20,4
	  d.d *= tens[j1 & 0xf];
  8064a8:	9809883a 	mov	r4,r19
  8064ac:	880b883a 	mov	r5,r17
  8064b0:	080ea2c0 	call	80ea2c <__muldf3>
  8064b4:	1021883a 	mov	r16,r2
  8064b8:	1825883a 	mov	r18,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8064bc:	a0013826 	beq	r20,zero,8069a0 <_dtoa_r+0x16a0>
  8064c0:	02002074 	movhi	r8,129
      ieps = 2;			/* conservative */
  8064c4:	05400084 	movi	r21,2
  8064c8:	420b5304 	addi	r8,r8,11596
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8064cc:	1009883a 	mov	r4,r2
      ieps = 2;			/* conservative */
  8064d0:	9805883a 	mov	r2,r19
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8064d4:	180b883a 	mov	r5,r3
      ieps = 2;			/* conservative */
  8064d8:	dc000c15 	stw	r16,48(sp)
  8064dc:	8827883a 	mov	r19,r17
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8064e0:	0007883a 	mov	r3,zero
      ieps = 2;			/* conservative */
  8064e4:	a823883a 	mov	r17,r21
  8064e8:	4021883a 	mov	r16,r8
  8064ec:	102b883a 	mov	r21,r2
	    if (j & 1)
  8064f0:	a180004c 	andi	r6,r20,1
  8064f4:	30000726 	beq	r6,zero,806514 <_dtoa_r+0x1214>
		d.d *= bigtens[i];
  8064f8:	81800017 	ldw	r6,0(r16)
  8064fc:	81c00117 	ldw	r7,4(r16)
		ieps++;
  806500:	8c400044 	addi	r17,r17,1
		d.d *= bigtens[i];
  806504:	080ea2c0 	call	80ea2c <__muldf3>
  806508:	180b883a 	mov	r5,r3
  80650c:	1009883a 	mov	r4,r2
  806510:	00c00044 	movi	r3,1
	  for (j = j1 >> 4; j; j >>= 1, i++)
  806514:	a029d07a 	srai	r20,r20,1
  806518:	84000204 	addi	r16,r16,8
  80651c:	a03ff41e 	bne	r20,zero,8064f0 <_dtoa_r+0x11f0>
  806520:	a805883a 	mov	r2,r21
  806524:	18c03fcc 	andi	r3,r3,255
  806528:	882b883a 	mov	r21,r17
  80652c:	dc000c17 	ldw	r16,48(sp)
  806530:	9823883a 	mov	r17,r19
  806534:	1027883a 	mov	r19,r2
  806538:	183c7726 	beq	r3,zero,805718 <_dtoa_r+0x418>
  80653c:	2021883a 	mov	r16,r4
  806540:	2825883a 	mov	r18,r5
  806544:	003c7406 	br	805718 <_dtoa_r+0x418>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  806548:	983eae1e 	bne	r19,zero,806004 <_dtoa_r+0xd04>
  80654c:	00800434 	movhi	r2,16
  806550:	10bfffc4 	addi	r2,r2,-1
  806554:	8884703a 	and	r2,r17,r2
  806558:	103f4126 	beq	r2,zero,806260 <_dtoa_r+0xf60>
  80655c:	003ea906 	br	806004 <_dtoa_r+0xd04>
  *decpt = k + 1;
  806560:	9807883a 	mov	r3,r19
  806564:	a827883a 	mov	r19,r21
  806568:	182b883a 	mov	r21,r3
  80656c:	d8c00417 	ldw	r3,16(sp)
  806570:	18c00044 	addi	r3,r3,1
  806574:	d8c00415 	stw	r3,16(sp)
	      if (j1 > 0)
  806578:	00800d0e 	bge	zero,r2,8065b0 <_dtoa_r+0x12b0>
		  b = lshift (ptr, b, 1);
  80657c:	e00b883a 	mov	r5,fp
  806580:	b809883a 	mov	r4,r23
  806584:	01800044 	movi	r6,1
  806588:	08093800 	call	809380 <__lshift>
		  j1 = cmp (b, S);
  80658c:	a00b883a 	mov	r5,r20
  806590:	1009883a 	mov	r4,r2
		  b = lshift (ptr, b, 1);
  806594:	1039883a 	mov	fp,r2
		  j1 = cmp (b, S);
  806598:	08095080 	call	809508 <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  80659c:	0080df0e 	bge	zero,r2,80691c <_dtoa_r+0x161c>
		      && dig++ == '9')
  8065a0:	98c00e60 	cmpeqi	r3,r19,57
  8065a4:	1800ce1e 	bne	r3,zero,8068e0 <_dtoa_r+0x15e0>
  8065a8:	d8800617 	ldw	r2,24(sp)
  8065ac:	14c00c44 	addi	r19,r2,49
	      goto ret;
  8065b0:	8023883a 	mov	r17,r16
	      *s++ = dig;
  8065b4:	b4c00005 	stb	r19,0(r22)
	      goto ret;
  8065b8:	9021883a 	mov	r16,r18
  8065bc:	003e2706 	br	805e5c <_dtoa_r+0xb5c>
  8065c0:	b82b883a 	mov	r21,r23
  8065c4:	ddc00217 	ldw	r23,8(sp)
	      d.d += d.d;
  8065c8:	200d883a 	mov	r6,r4
  8065cc:	280f883a 	mov	r7,r5
  8065d0:	080d5bc0 	call	80d5bc <__adddf3>
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  8065d4:	180b883a 	mov	r5,r3
  8065d8:	800d883a 	mov	r6,r16
  8065dc:	900f883a 	mov	r7,r18
  8065e0:	1009883a 	mov	r4,r2
	      d.d += d.d;
  8065e4:	1823883a 	mov	r17,r3
  8065e8:	1027883a 	mov	r19,r2
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  8065ec:	080e85c0 	call	80e85c <__gedf2>
			k++;
  8065f0:	d8c00417 	ldw	r3,16(sp)
  8065f4:	18c00044 	addi	r3,r3,1
  8065f8:	d8c00415 	stw	r3,16(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  8065fc:	00808c16 	blt	zero,r2,806830 <_dtoa_r+0x1530>
  806600:	800d883a 	mov	r6,r16
  806604:	900f883a 	mov	r7,r18
  806608:	9809883a 	mov	r4,r19
  80660c:	880b883a 	mov	r5,r17
  806610:	080e7dc0 	call	80e7dc <__eqdf2>
  806614:	1000021e 	bne	r2,zero,806620 <_dtoa_r+0x1320>
  806618:	ad40004c 	andi	r21,r21,1
  80661c:	a800841e 	bne	r21,zero,806830 <_dtoa_r+0x1530>
  806620:	a02b883a 	mov	r21,r20
  806624:	003e1906 	br	805e8c <_dtoa_r+0xb8c>
	  mhi = eBalloc (ptr, mhi->_k);
  806628:	81400117 	ldw	r5,4(r16)
  80662c:	b809883a 	mov	r4,r23
  806630:	0808a540 	call	808a54 <_Balloc>
  806634:	1023883a 	mov	r17,r2
  806638:	1000f326 	beq	r2,zero,806a08 <_dtoa_r+0x1708>
	  Bcopy (mhi, mlo);
  80663c:	81800417 	ldw	r6,16(r16)
  806640:	81400304 	addi	r5,r16,12
  806644:	11000304 	addi	r4,r2,12
  806648:	31800084 	addi	r6,r6,2
  80664c:	300c90ba 	slli	r6,r6,2
  806650:	08087380 	call	808738 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
  806654:	01800044 	movi	r6,1
  806658:	880b883a 	mov	r5,r17
  80665c:	b809883a 	mov	r4,r23
  806660:	08093800 	call	809380 <__lshift>
  806664:	1025883a 	mov	r18,r2
  806668:	003e7d06 	br	806060 <_dtoa_r+0xd60>
	    b = pow5mult (ptr, b, j);
  80666c:	e00b883a 	mov	r5,fp
  806670:	b809883a 	mov	r4,r23
  806674:	08092380 	call	809238 <__pow5mult>
  806678:	1039883a 	mov	fp,r2
  80667c:	003d9d06 	br	805cf4 <_dtoa_r+0x9f4>
	      m2 -= i;
  806680:	d8800617 	ldw	r2,24(sp)
  806684:	d8c00517 	ldw	r3,20(sp)
  806688:	10e5c83a 	sub	r18,r2,r3
	      i = 0;
  80668c:	003d7606 	br	805c68 <_dtoa_r+0x968>
  *decpt = k + 1;
  806690:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  806694:	9805883a 	mov	r2,r19
  806698:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  80669c:	18c00044 	addi	r3,r3,1
	      if (dig == '9')
  8066a0:	102b883a 	mov	r21,r2
  *decpt = k + 1;
  8066a4:	d8c00415 	stw	r3,16(sp)
	      if (dig == '9')
  8066a8:	98800e58 	cmpnei	r2,r19,57
  8066ac:	10008c26 	beq	r2,zero,8068e0 <_dtoa_r+0x15e0>
	      *s++ = dig + 1;
  8066b0:	98c00044 	addi	r3,r19,1
	      goto ret;
  8066b4:	8023883a 	mov	r17,r16
	      *s++ = dig + 1;
  8066b8:	b0c00005 	stb	r3,0(r22)
	      goto ret;
  8066bc:	9021883a 	mov	r16,r18
  8066c0:	003de606 	br	805e5c <_dtoa_r+0xb5c>
  *decpt = k + 1;
  8066c4:	9805883a 	mov	r2,r19
  8066c8:	a827883a 	mov	r19,r21
  8066cc:	102b883a 	mov	r21,r2
  8066d0:	d8800417 	ldw	r2,16(sp)
  8066d4:	8023883a 	mov	r17,r16
  8066d8:	9021883a 	mov	r16,r18
  8066dc:	10800044 	addi	r2,r2,1
  8066e0:	d8800415 	stw	r2,16(sp)
  8066e4:	003dc606 	br	805e00 <_dtoa_r+0xb00>
	  eps.d *= tens[ilim - 1];
  8066e8:	d9400c17 	ldw	r5,48(sp)
  8066ec:	a009883a 	mov	r4,r20
  8066f0:	080ea2c0 	call	80ea2c <__muldf3>
	      if (i == ilim)
  8066f4:	d9800d17 	ldw	r6,52(sp)
	      *s++ = '0' + (int) L;
  8066f8:	d9400117 	ldw	r5,4(sp)
  8066fc:	d9001017 	ldw	r4,64(sp)
	  eps.d *= tens[ilim - 1];
  806700:	d8800c15 	stw	r2,48(sp)
  806704:	d8c00d15 	stw	r3,52(sp)
	      *s++ = '0' + (int) L;
  806708:	29000005 	stb	r4,0(r5)
	      if (i == ilim)
  80670c:	31000058 	cmpnei	r4,r6,1
  806710:	29a9883a 	add	r20,r5,r6
  806714:	2000a026 	beq	r4,zero,806998 <_dtoa_r+0x1698>
  806718:	dc400e15 	stw	r17,56(sp)
  80671c:	8009883a 	mov	r4,r16
  806720:	900b883a 	mov	r5,r18
  806724:	a823883a 	mov	r17,r21
	  for (i = 1;; i++, d.d *= 10.)
  806728:	000d883a 	mov	r6,zero
  80672c:	01d00934 	movhi	r7,16420
  806730:	080ea2c0 	call	80ea2c <__muldf3>
	      L = d.d;
  806734:	180b883a 	mov	r5,r3
  806738:	1009883a 	mov	r4,r2
	  for (i = 1;; i++, d.d *= 10.)
  80673c:	1825883a 	mov	r18,r3
  806740:	102b883a 	mov	r21,r2
	      L = d.d;
  806744:	080fae00 	call	80fae0 <__fixdfsi>
	      d.d -= L;
  806748:	1009883a 	mov	r4,r2
	      L = d.d;
  80674c:	1021883a 	mov	r16,r2
	      d.d -= L;
  806750:	080fb600 	call	80fb60 <__floatsidf>
  806754:	a809883a 	mov	r4,r21
  806758:	900b883a 	mov	r5,r18
  80675c:	100d883a 	mov	r6,r2
  806760:	180f883a 	mov	r7,r3
	      *s++ = '0' + (int) L;
  806764:	8c400044 	addi	r17,r17,1
  806768:	84000c04 	addi	r16,r16,48
	      d.d -= L;
  80676c:	080f1d80 	call	80f1d8 <__subdf3>
	      *s++ = '0' + (int) L;
  806770:	8c3fffc5 	stb	r16,-1(r17)
	      d.d -= L;
  806774:	1009883a 	mov	r4,r2
  806778:	180b883a 	mov	r5,r3
	      if (i == ilim)
  80677c:	a47fea1e 	bne	r20,r17,806728 <_dtoa_r+0x1428>
  806780:	dc400e17 	ldw	r17,56(sp)
  806784:	1021883a 	mov	r16,r2
  806788:	1825883a 	mov	r18,r3
		  if (d.d > 0.5 + eps.d)
  80678c:	d9000c17 	ldw	r4,48(sp)
  806790:	d9400d17 	ldw	r5,52(sp)
  806794:	000d883a 	mov	r6,zero
  806798:	01cff834 	movhi	r7,16352
  80679c:	080d5bc0 	call	80d5bc <__adddf3>
  8067a0:	800d883a 	mov	r6,r16
  8067a4:	900f883a 	mov	r7,r18
  8067a8:	1009883a 	mov	r4,r2
  8067ac:	180b883a 	mov	r5,r3
  8067b0:	080e9440 	call	80e944 <__ledf2>
  8067b4:	10005416 	blt	r2,zero,806908 <_dtoa_r+0x1608>
		  else if (d.d < 0.5 - eps.d)
  8067b8:	d9800c17 	ldw	r6,48(sp)
  8067bc:	d9c00d17 	ldw	r7,52(sp)
  8067c0:	0009883a 	mov	r4,zero
  8067c4:	014ff834 	movhi	r5,16352
  8067c8:	080f1d80 	call	80f1d8 <__subdf3>
  8067cc:	800d883a 	mov	r6,r16
  8067d0:	900f883a 	mov	r7,r18
  8067d4:	1009883a 	mov	r4,r2
  8067d8:	180b883a 	mov	r5,r3
  8067dc:	080e85c0 	call	80e85c <__gedf2>
  8067e0:	00bc9a0e 	bge	zero,r2,805a4c <_dtoa_r+0x74c>
		      while (*--s == '0');
  8067e4:	a0bfffc7 	ldb	r2,-1(r20)
  8067e8:	a02b883a 	mov	r21,r20
  8067ec:	a53fffc4 	addi	r20,r20,-1
  8067f0:	10800c20 	cmpeqi	r2,r2,48
  8067f4:	103ffb1e 	bne	r2,zero,8067e4 <_dtoa_r+0x14e4>
  *decpt = k + 1;
  8067f8:	d8801117 	ldw	r2,68(sp)
  8067fc:	10800044 	addi	r2,r2,1
  806800:	d8800415 	stw	r2,16(sp)
  806804:	003da106 	br	805e8c <_dtoa_r+0xb8c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  806808:	d8c01217 	ldw	r3,72(sp)
  m2 = b2;
  80680c:	d9000617 	ldw	r4,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  806810:	00800d84 	movi	r2,54
  806814:	10c5c83a 	sub	r2,r2,r3
      s2 += i;
  806818:	b0ad883a 	add	r22,r22,r2
  80681c:	2085883a 	add	r2,r4,r2
  806820:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  806824:	2025883a 	mov	r18,r4
      s2 += i;
  806828:	d8800615 	stw	r2,24(sp)
  80682c:	003d0e06 	br	805c68 <_dtoa_r+0x968>
  806830:	d9000117 	ldw	r4,4(sp)
  806834:	003c4b06 	br	805964 <_dtoa_r+0x664>
  806838:	9821883a 	mov	r16,r19
  80683c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  806840:	05400084 	movi	r21,2
  806844:	003bb406 	br	805718 <_dtoa_r+0x418>
      if (k_check && d.d < 1. && ilim > 0)
  806848:	d8800517 	ldw	r2,20(sp)
  80684c:	103ede26 	beq	r2,zero,8063c8 <_dtoa_r+0x10c8>
	  if (ilim1 <= 0)
  806850:	d8800b17 	ldw	r2,44(sp)
  806854:	00bc7d0e 	bge	zero,r2,805a4c <_dtoa_r+0x74c>
	  d.d *= 10.;
  806858:	900b883a 	mov	r5,r18
  80685c:	8009883a 	mov	r4,r16
  806860:	000d883a 	mov	r6,zero
  806864:	01d00934 	movhi	r7,16420
  806868:	080ea2c0 	call	80ea2c <__muldf3>
      eps.d = ieps * d.d + 7.;
  80686c:	a9000044 	addi	r4,r21,1
	  d.d *= 10.;
  806870:	1021883a 	mov	r16,r2
  806874:	1825883a 	mov	r18,r3
      eps.d = ieps * d.d + 7.;
  806878:	080fb600 	call	80fb60 <__floatsidf>
  80687c:	800d883a 	mov	r6,r16
  806880:	900f883a 	mov	r7,r18
  806884:	1009883a 	mov	r4,r2
  806888:	180b883a 	mov	r5,r3
  80688c:	080ea2c0 	call	80ea2c <__muldf3>
  806890:	1009883a 	mov	r4,r2
  806894:	000d883a 	mov	r6,zero
  806898:	01d00734 	movhi	r7,16412
  80689c:	180b883a 	mov	r5,r3
  8068a0:	080d5bc0 	call	80d5bc <__adddf3>
	  k--;
  8068a4:	d9000417 	ldw	r4,16(sp)
      eps.d = ieps * d.d + 7.;
  8068a8:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  8068ac:	00bf3034 	movhi	r2,64704
  8068b0:	1887883a 	add	r3,r3,r2
  8068b4:	d8800b17 	ldw	r2,44(sp)
	  k--;
  8068b8:	213fffc4 	addi	r4,r4,-1
  8068bc:	d9001115 	stw	r4,68(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  8068c0:	d8c00c15 	stw	r3,48(sp)
  8068c4:	d8800d15 	stw	r2,52(sp)
  8068c8:	003bb106 	br	805790 <_dtoa_r+0x490>
  *decpt = k + 1;
  8068cc:	d8800417 	ldw	r2,16(sp)
			break;
  8068d0:	00c00c44 	movi	r3,49
  *decpt = k + 1;
  8068d4:	10800044 	addi	r2,r2,1
  8068d8:	d8800415 	stw	r2,16(sp)
			break;
  8068dc:	003c2a06 	br	805988 <_dtoa_r+0x688>
		  *s++ = '9';
  8068e0:	00800e44 	movi	r2,57
		  goto roundoff;
  8068e4:	8023883a 	mov	r17,r16
  8068e8:	d9400117 	ldw	r5,4(sp)
		  *s++ = '9';
  8068ec:	b0800005 	stb	r2,0(r22)
		  goto roundoff;
  8068f0:	9021883a 	mov	r16,r18
  8068f4:	01000e44 	movi	r4,57
  8068f8:	003d5006 	br	805e3c <_dtoa_r+0xb3c>
	  S = mhi = 0;
  8068fc:	0029883a 	mov	r20,zero
  806900:	0021883a 	mov	r16,zero
  806904:	003e7106 	br	8062cc <_dtoa_r+0xfcc>
			k++;
  806908:	d8801117 	ldw	r2,68(sp)
  80690c:	d9000117 	ldw	r4,4(sp)
  806910:	10800044 	addi	r2,r2,1
  806914:	d8800415 	stw	r2,16(sp)
  806918:	003c1206 	br	805964 <_dtoa_r+0x664>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  80691c:	103f241e 	bne	r2,zero,8065b0 <_dtoa_r+0x12b0>
  806920:	9880004c 	andi	r2,r19,1
  806924:	103f1e1e 	bne	r2,zero,8065a0 <_dtoa_r+0x12a0>
  806928:	003f2106 	br	8065b0 <_dtoa_r+0x12b0>
  *decpt = k + 1;
  80692c:	d8801117 	ldw	r2,68(sp)
  806930:	ddc00d17 	ldw	r23,52(sp)
  806934:	10800044 	addi	r2,r2,1
  806938:	d8800415 	stw	r2,16(sp)
  80693c:	003d5306 	br	805e8c <_dtoa_r+0xb8c>
  806940:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  806944:	a8800e60 	cmpeqi	r2,r21,57
  806948:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  80694c:	18c00044 	addi	r3,r3,1
  806950:	d8c00415 	stw	r3,16(sp)
	      *s++ = dig;
  806954:	b5400044 	addi	r21,r22,1
	      if (dig == '9')
  806958:	103fe11e 	bne	r2,zero,8068e0 <_dtoa_r+0x15e0>
	      if (j > 0)
  80695c:	047f1216 	blt	zero,r17,8065a8 <_dtoa_r+0x12a8>
  806960:	003f1306 	br	8065b0 <_dtoa_r+0x12b0>
  if (ilim <= 0 && mode > 2)
  806964:	d8800217 	ldw	r2,8(sp)
  806968:	108000c8 	cmpgei	r2,r2,3
  80696c:	103e481e 	bne	r2,zero,806290 <_dtoa_r+0xf90>
	  k--;
  806970:	dd400415 	stw	r21,16(sp)
  806974:	003e0d06 	br	8061ac <_dtoa_r+0xeac>
  if (ilim <= 0 && mode > 2)
  806978:	d8800217 	ldw	r2,8(sp)
  80697c:	108000c8 	cmpgei	r2,r2,3
  806980:	103e431e 	bne	r2,zero,806290 <_dtoa_r+0xf90>
  806984:	d8800b17 	ldw	r2,44(sp)
	  k--;
  806988:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  80698c:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  806990:	04bdb10e 	bge	zero,r18,806058 <_dtoa_r+0xd58>
  806994:	003e5c06 	br	806308 <_dtoa_r+0x1008>
	      *s++ = '0' + (int) L;
  806998:	a829883a 	mov	r20,r21
  80699c:	003f7b06 	br	80678c <_dtoa_r+0x148c>
      ieps = 2;			/* conservative */
  8069a0:	05400084 	movi	r21,2
  8069a4:	003b5c06 	br	805718 <_dtoa_r+0x418>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8069a8:	01c02074 	movhi	r7,129
  8069ac:	01002074 	movhi	r4,129
  8069b0:	39cb0904 	addi	r7,r7,11300
  8069b4:	000d883a 	mov	r6,zero
  8069b8:	01406a84 	movi	r5,426
  8069bc:	210b0e04 	addi	r4,r4,11320
  8069c0:	080ba000 	call	80ba00 <__assert_func>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8069c4:	000b883a 	mov	r5,zero
  8069c8:	003b1506 	br	805620 <_dtoa_r+0x320>
  8069cc:	b8001115 	stw	zero,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8069d0:	000b883a 	mov	r5,zero
  8069d4:	b809883a 	mov	r4,r23
  8069d8:	0808a540 	call	808a54 <_Balloc>
  8069dc:	d8800115 	stw	r2,4(sp)
  8069e0:	103ff126 	beq	r2,zero,8069a8 <_dtoa_r+0x16a8>
  8069e4:	d8800117 	ldw	r2,4(sp)
      ndigits = 0;
  8069e8:	d8001e15 	stw	zero,120(sp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8069ec:	b8801015 	stw	r2,64(r23)
  ilim = ilim1 = -1;
  8069f0:	00bfffc4 	movi	r2,-1
  8069f4:	d8800515 	stw	r2,20(sp)
  8069f8:	d8800b15 	stw	r2,44(sp)
  leftright = 1;
  8069fc:	00800044 	movi	r2,1
  806a00:	d8800715 	stw	r2,28(sp)
  806a04:	003c1106 	br	805a4c <_dtoa_r+0x74c>
	  mhi = eBalloc (ptr, mhi->_k);
  806a08:	01c02074 	movhi	r7,129
  806a0c:	01002074 	movhi	r4,129
  806a10:	39cb0904 	addi	r7,r7,11300
  806a14:	000d883a 	mov	r6,zero
  806a18:	0140ba84 	movi	r5,746
  806a1c:	210b0e04 	addi	r4,r4,11320
  806a20:	080ba000 	call	80ba00 <__assert_func>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806a24:	00802074 	movhi	r2,129
  806a28:	108b0604 	addi	r2,r2,11288
  806a2c:	d8800115 	stw	r2,4(sp)
  806a30:	003a6506 	br	8053c8 <_dtoa_r+0xc8>
  else if (i < 4)
  806a34:	18c00120 	cmpeqi	r3,r3,4
  806a38:	183cc91e 	bne	r3,zero,805d60 <_dtoa_r+0xa60>
      i += 28;
  806a3c:	00c00f04 	movi	r3,60
  806a40:	1885c83a 	sub	r2,r3,r2
  806a44:	003cc106 	br	805d4c <_dtoa_r+0xa4c>

00806a48 <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  806a48:	2880030b 	ldhu	r2,12(r5)
{
  806a4c:	defffb04 	addi	sp,sp,-20
  806a50:	dcc00315 	stw	r19,12(sp)
  806a54:	dc000015 	stw	r16,0(sp)
  806a58:	dfc00415 	stw	ra,16(sp)
  806a5c:	dc800215 	stw	r18,8(sp)
  806a60:	dc400115 	stw	r17,4(sp)
  if ((flags & __SWR) == 0)
  806a64:	10c0020c 	andi	r3,r2,8
{
  806a68:	2821883a 	mov	r16,r5
  806a6c:	2027883a 	mov	r19,r4
  if ((flags & __SWR) == 0)
  806a70:	18003f1e 	bne	r3,zero,806b70 <__sflush_r+0x128>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806a74:	28c00117 	ldw	r3,4(r5)
      fp->_flags |= __SNPT;
  806a78:	10820014 	ori	r2,r2,2048
  806a7c:	2880030d 	sth	r2,12(r5)
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806a80:	00c0550e 	bge	zero,r3,806bd8 <__sflush_r+0x190>
  806a84:	82000a17 	ldw	r8,40(r16)
  806a88:	40003126 	beq	r8,zero,806b50 <__sflush_r+0x108>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
  806a8c:	9c400017 	ldw	r17,0(r19)
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
  806a90:	1104000c 	andi	r4,r2,4096
	  ptr->_errno = 0;
  806a94:	98000015 	stw	zero,0(r19)
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  806a98:	81400717 	ldw	r5,28(r16)
	  if (fp->_flags & __SOFF)
  806a9c:	1007883a 	mov	r3,r2
  806aa0:	2000521e 	bne	r4,zero,806bec <__sflush_r+0x1a4>
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  806aa4:	01c00044 	movi	r7,1
  806aa8:	000d883a 	mov	r6,zero
  806aac:	9809883a 	mov	r4,r19
  806ab0:	403ee83a 	callr	r8
	      if (curoff == -1L && ptr->_errno != 0)
  806ab4:	10ffffd8 	cmpnei	r3,r2,-1
  806ab8:	18005826 	beq	r3,zero,806c1c <__sflush_r+0x1d4>
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
  806abc:	80c0030b 	ldhu	r3,12(r16)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  806ac0:	82000a17 	ldw	r8,40(r16)
  806ac4:	81400717 	ldw	r5,28(r16)
          if (fp->_flags & __SRD)
  806ac8:	18c0010c 	andi	r3,r3,4
  806acc:	18000626 	beq	r3,zero,806ae8 <__sflush_r+0xa0>
              curoff -= fp->_r;
  806ad0:	81000117 	ldw	r4,4(r16)
              if (HASUB (fp))
  806ad4:	80c00c17 	ldw	r3,48(r16)
              curoff -= fp->_r;
  806ad8:	1105c83a 	sub	r2,r2,r4
              if (HASUB (fp))
  806adc:	18000226 	beq	r3,zero,806ae8 <__sflush_r+0xa0>
                curoff -= fp->_ur;
  806ae0:	80c00f17 	ldw	r3,60(r16)
  806ae4:	10c5c83a 	sub	r2,r2,r3
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  806ae8:	100d883a 	mov	r6,r2
  806aec:	000f883a 	mov	r7,zero
  806af0:	9809883a 	mov	r4,r19
  806af4:	403ee83a 	callr	r8
	  if (curoff != -1 || ptr->_errno == 0
  806af8:	10ffffd8 	cmpnei	r3,r2,-1
  806afc:	18003d1e 	bne	r3,zero,806bf4 <__sflush_r+0x1ac>
  806b00:	99000017 	ldw	r4,0(r19)
	      if (HASUB (fp))
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
  806b04:	80c0030b 	ldhu	r3,12(r16)
	  if (curoff != -1 || ptr->_errno == 0
  806b08:	20004e26 	beq	r4,zero,806c44 <__sflush_r+0x1fc>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  806b0c:	21400760 	cmpeqi	r5,r4,29
  806b10:	2800021e 	bne	r5,zero,806b1c <__sflush_r+0xd4>
  806b14:	210005a0 	cmpeqi	r4,r4,22
  806b18:	20002c26 	beq	r4,zero,806bcc <__sflush_r+0x184>
	      fp->_p = fp->_bf._base;
  806b1c:	80800417 	ldw	r2,16(r16)
	      fp->_flags &= ~__SNPT;
  806b20:	18fdffcc 	andi	r3,r3,63487
  806b24:	80c0030d 	sth	r3,12(r16)
	      fp->_r = 0;
  806b28:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  806b2c:	80800015 	stw	r2,0(r16)
	      if (HASUB (fp))
  806b30:	81400c17 	ldw	r5,48(r16)
	      ptr->_errno = tmp_errno;
  806b34:	9c400015 	stw	r17,0(r19)
	      if (HASUB (fp))
  806b38:	28000526 	beq	r5,zero,806b50 <__sflush_r+0x108>
		FREEUB (ptr, fp);
  806b3c:	80801004 	addi	r2,r16,64
  806b40:	28800226 	beq	r5,r2,806b4c <__sflush_r+0x104>
  806b44:	9809883a 	mov	r4,r19
  806b48:	08072000 	call	807200 <_free_r>
  806b4c:	80000c15 	stw	zero,48(r16)
	      return EOF;
	    }
	}
      return 0;
  806b50:	0005883a 	mov	r2,zero
	}
      p += t;
      n -= t;
    }
  return 0;
}
  806b54:	dfc00417 	ldw	ra,16(sp)
  806b58:	dcc00317 	ldw	r19,12(sp)
  806b5c:	dc800217 	ldw	r18,8(sp)
  806b60:	dc400117 	ldw	r17,4(sp)
  806b64:	dc000017 	ldw	r16,0(sp)
  806b68:	dec00504 	addi	sp,sp,20
  806b6c:	f800283a 	ret
  if ((p = fp->_bf._base) == NULL)
  806b70:	2c800417 	ldw	r18,16(r5)
  806b74:	903ff626 	beq	r18,zero,806b50 <__sflush_r+0x108>
  n = fp->_p - p;		/* write this much */
  806b78:	2c400017 	ldw	r17,0(r5)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806b7c:	108000cc 	andi	r2,r2,3
  fp->_p = p;
  806b80:	2c800015 	stw	r18,0(r5)
  n = fp->_p - p;		/* write this much */
  806b84:	8ca3c83a 	sub	r17,r17,r18
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806b88:	1000161e 	bne	r2,zero,806be4 <__sflush_r+0x19c>
  806b8c:	28800517 	ldw	r2,20(r5)
  806b90:	80800215 	stw	r2,8(r16)
  while (n > 0)
  806b94:	04400316 	blt	zero,r17,806ba4 <__sflush_r+0x15c>
  806b98:	003fed06 	br	806b50 <__sflush_r+0x108>
      p += t;
  806b9c:	90a5883a 	add	r18,r18,r2
  while (n > 0)
  806ba0:	047feb0e 	bge	zero,r17,806b50 <__sflush_r+0x108>
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
  806ba4:	80800917 	ldw	r2,36(r16)
  806ba8:	81400717 	ldw	r5,28(r16)
  806bac:	880f883a 	mov	r7,r17
  806bb0:	900d883a 	mov	r6,r18
  806bb4:	9809883a 	mov	r4,r19
  806bb8:	103ee83a 	callr	r2
      n -= t;
  806bbc:	88a3c83a 	sub	r17,r17,r2
      if (t <= 0)
  806bc0:	00bff616 	blt	zero,r2,806b9c <__sflush_r+0x154>
          fp->_flags |= __SERR;
  806bc4:	80c0030b 	ldhu	r3,12(r16)
          return EOF;
  806bc8:	00bfffc4 	movi	r2,-1
          fp->_flags |= __SERR;
  806bcc:	18c01014 	ori	r3,r3,64
  806bd0:	80c0030d 	sth	r3,12(r16)
          return EOF;
  806bd4:	003fdf06 	br	806b54 <__sflush_r+0x10c>
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806bd8:	28c00f17 	ldw	r3,60(r5)
  806bdc:	00ffa916 	blt	zero,r3,806a84 <__sflush_r+0x3c>
  806be0:	003fdb06 	br	806b50 <__sflush_r+0x108>
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806be4:	0005883a 	mov	r2,zero
  806be8:	003fe906 	br	806b90 <__sflush_r+0x148>
	    curoff = fp->_offset;
  806bec:	80801417 	ldw	r2,80(r16)
  806bf0:	003fb506 	br	806ac8 <__sflush_r+0x80>
	      fp->_flags &= ~__SNPT;
  806bf4:	80c0030b 	ldhu	r3,12(r16)
	      fp->_p = fp->_bf._base;
  806bf8:	81000417 	ldw	r4,16(r16)
	      fp->_r = 0;
  806bfc:	80000115 	stw	zero,4(r16)
	      fp->_flags &= ~__SNPT;
  806c00:	197dffcc 	andi	r5,r3,63487
  806c04:	8140030d 	sth	r5,12(r16)
	      fp->_p = fp->_bf._base;
  806c08:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  806c0c:	18c4000c 	andi	r3,r3,4096
  806c10:	183fc726 	beq	r3,zero,806b30 <__sflush_r+0xe8>
		fp->_offset = curoff;
  806c14:	80801415 	stw	r2,80(r16)
  806c18:	003fc506 	br	806b30 <__sflush_r+0xe8>
	      if (curoff == -1L && ptr->_errno != 0)
  806c1c:	98c00017 	ldw	r3,0(r19)
  806c20:	183fa626 	beq	r3,zero,806abc <__sflush_r+0x74>
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  806c24:	19000760 	cmpeqi	r4,r3,29
  806c28:	20000e1e 	bne	r4,zero,806c64 <__sflush_r+0x21c>
  806c2c:	18c00598 	cmpnei	r3,r3,22
  806c30:	18000c26 	beq	r3,zero,806c64 <__sflush_r+0x21c>
		    fp->_flags |= __SERR;
  806c34:	80c0030b 	ldhu	r3,12(r16)
  806c38:	18c01014 	ori	r3,r3,64
  806c3c:	80c0030d 	sth	r3,12(r16)
  806c40:	003fc406 	br	806b54 <__sflush_r+0x10c>
	      fp->_p = fp->_bf._base;
  806c44:	81000417 	ldw	r4,16(r16)
	      fp->_flags &= ~__SNPT;
  806c48:	197dffcc 	andi	r5,r3,63487
  806c4c:	8140030d 	sth	r5,12(r16)
	      fp->_r = 0;
  806c50:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  806c54:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  806c58:	18c4000c 	andi	r3,r3,4096
  806c5c:	183fb426 	beq	r3,zero,806b30 <__sflush_r+0xe8>
  806c60:	003fec06 	br	806c14 <__sflush_r+0x1cc>
		      ptr->_errno = tmp_errno;
  806c64:	9c400015 	stw	r17,0(r19)
		      result = 0;
  806c68:	0005883a 	mov	r2,zero
		      ptr->_errno = tmp_errno;
  806c6c:	003fb906 	br	806b54 <__sflush_r+0x10c>

00806c70 <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
  806c70:	defffd04 	addi	sp,sp,-12
  806c74:	dc000115 	stw	r16,4(sp)
  806c78:	dfc00215 	stw	ra,8(sp)
  806c7c:	2021883a 	mov	r16,r4
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
  806c80:	20000226 	beq	r4,zero,806c8c <_fflush_r+0x1c>
  806c84:	20800e17 	ldw	r2,56(r4)
  806c88:	10000726 	beq	r2,zero,806ca8 <_fflush_r+0x38>

  if (!fp->_flags)
  806c8c:	2880030f 	ldh	r2,12(r5)
  806c90:	10000a1e 	bne	r2,zero,806cbc <_fflush_r+0x4c>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
  806c94:	0005883a 	mov	r2,zero
  806c98:	dfc00217 	ldw	ra,8(sp)
  806c9c:	dc000117 	ldw	r16,4(sp)
  806ca0:	dec00304 	addi	sp,sp,12
  806ca4:	f800283a 	ret
  806ca8:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (ptr, fp);
  806cac:	08070a80 	call	8070a8 <__sinit>
  806cb0:	d9400017 	ldw	r5,0(sp)
  if (!fp->_flags)
  806cb4:	2880030f 	ldh	r2,12(r5)
  806cb8:	103ff626 	beq	r2,zero,806c94 <_fflush_r+0x24>
  ret = __sflush_r (ptr, fp);
  806cbc:	8009883a 	mov	r4,r16
}
  806cc0:	dfc00217 	ldw	ra,8(sp)
  806cc4:	dc000117 	ldw	r16,4(sp)
  806cc8:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  806ccc:	0806a481 	jmpi	806a48 <__sflush_r>

00806cd0 <fflush>:
#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
  if (fp == NULL)
  806cd0:	20001626 	beq	r4,zero,806d2c <fflush+0x5c>
  806cd4:	200b883a 	mov	r5,r4
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
  806cd8:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (ptr, fp);
  806cdc:	20000226 	beq	r4,zero,806ce8 <fflush+0x18>
  806ce0:	20800e17 	ldw	r2,56(r4)
  806ce4:	10000526 	beq	r2,zero,806cfc <fflush+0x2c>
  if (!fp->_flags)
  806ce8:	2880030f 	ldh	r2,12(r5)
  806cec:	1000021e 	bne	r2,zero,806cf8 <fflush+0x28>
}
  806cf0:	0005883a 	mov	r2,zero
  806cf4:	f800283a 	ret
  ret = __sflush_r (ptr, fp);
  806cf8:	0806a481 	jmpi	806a48 <__sflush_r>
{
  806cfc:	defffd04 	addi	sp,sp,-12
  806d00:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  806d04:	d9000015 	stw	r4,0(sp)
{
  806d08:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (ptr, fp);
  806d0c:	08070a80 	call	8070a8 <__sinit>
  806d10:	d9400117 	ldw	r5,4(sp)
  806d14:	d9000017 	ldw	r4,0(sp)
  if (!fp->_flags)
  806d18:	2880030f 	ldh	r2,12(r5)
  806d1c:	10000726 	beq	r2,zero,806d3c <fflush+0x6c>
}
  806d20:	dfc00217 	ldw	ra,8(sp)
  806d24:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  806d28:	0806a481 	jmpi	806a48 <__sflush_r>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
  806d2c:	d1200817 	ldw	r4,-32736(gp)
  806d30:	01402034 	movhi	r5,128
  806d34:	295b1c04 	addi	r5,r5,27760
  806d38:	0807a541 	jmpi	807a54 <_fwalk_reent>
}
  806d3c:	0005883a 	mov	r2,zero
  806d40:	dfc00217 	ldw	ra,8(sp)
  806d44:	dec00304 	addi	sp,sp,12
  806d48:	f800283a 	ret

00806d4c <__fp_lock>:
{
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
}
  806d4c:	0005883a 	mov	r2,zero
  806d50:	f800283a 	ret

00806d54 <_cleanup_r>:
  (void) _fwalk_reent (ptr, cleanup_func);
  806d54:	01402074 	movhi	r5,129
  806d58:	296efe04 	addi	r5,r5,-17416
  806d5c:	0807a541 	jmpi	807a54 <_fwalk_reent>

00806d60 <__fp_unlock>:
  806d60:	0005883a 	mov	r2,zero
  806d64:	f800283a 	ret

00806d68 <__sinit.part.0>:
  s->__cleanup = _cleanup_r;	/* conservative */
  806d68:	00c02034 	movhi	r3,128
  stdin_init (s->_stdin);
  806d6c:	20800117 	ldw	r2,4(r4)
  s->__cleanup = _cleanup_r;	/* conservative */
  806d70:	18db5504 	addi	r3,r3,27988
  806d74:	20c00f15 	stw	r3,60(r4)
  s->__sglue._iobs = &s->__sf[0];
  806d78:	2140bb04 	addi	r5,r4,748
  s->__sglue._niobs = 3;
  806d7c:	00c000c4 	movi	r3,3
  806d80:	20c0b915 	stw	r3,740(r4)
  s->__sglue._iobs = &s->__sf[0];
  806d84:	2140ba15 	stw	r5,744(r4)
  s->__sglue._next = NULL;
  806d88:	2000b815 	stw	zero,736(r4)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806d8c:	10001705 	stb	zero,92(r2)
  806d90:	10001745 	stb	zero,93(r2)
  806d94:	10001785 	stb	zero,94(r2)
  806d98:	100017c5 	stb	zero,95(r2)
  806d9c:	10001805 	stb	zero,96(r2)
  806da0:	10001845 	stb	zero,97(r2)
  806da4:	10001885 	stb	zero,98(r2)
  806da8:	100018c5 	stb	zero,99(r2)
  ptr->_flags = flags;
  806dac:	00c00104 	movi	r3,4
  806db0:	10c00315 	stw	r3,12(r2)
  ptr->_read = __sread;
  806db4:	02002074 	movhi	r8,129
  stdout_init (s->_stdout);
  806db8:	20c00217 	ldw	r3,8(r4)
  ptr->_write = __swrite;
  806dbc:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  806dc0:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  806dc4:	01402074 	movhi	r5,129
  ptr->_read = __sread;
  806dc8:	42287e04 	addi	r8,r8,-24072
  ptr->_write = __swrite;
  806dcc:	39e89504 	addi	r7,r7,-23980
  ptr->_seek = __sseek;
  806dd0:	31a8b504 	addi	r6,r6,-23852
  ptr->_close = __sclose;
  806dd4:	2968cc04 	addi	r5,r5,-23760
  ptr->_flags = flags;
  806dd8:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  806ddc:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806de0:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806de4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806de8:	10000215 	stw	zero,8(r2)
  ptr->_bf._base = 0;
  806dec:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806df0:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  806df4:	10000615 	stw	zero,24(r2)
  ptr->_cookie = ptr;
  806df8:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  806dfc:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806e00:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  806e04:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806e08:	11400b15 	stw	r5,44(r2)
  ptr->_flags = flags;
  806e0c:	4a400284 	addi	r9,r9,10
  806e10:	1a400315 	stw	r9,12(r3)
  ptr->_flags2 = 0;
  806e14:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  806e18:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  806e1c:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  806e20:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  806e24:	18000415 	stw	zero,16(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806e28:	18001705 	stb	zero,92(r3)
  806e2c:	18001745 	stb	zero,93(r3)
  806e30:	18001785 	stb	zero,94(r3)
  806e34:	180017c5 	stb	zero,95(r3)
  806e38:	18001805 	stb	zero,96(r3)
  806e3c:	18001845 	stb	zero,97(r3)
  806e40:	18001885 	stb	zero,98(r3)
  806e44:	180018c5 	stb	zero,99(r3)
  stderr_init (s->_stderr);
  806e48:	20800317 	ldw	r2,12(r4)
  ptr->_flags = flags;
  806e4c:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  806e50:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  806e54:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  806e58:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  806e5c:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  806e60:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  806e64:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  806e68:	19400b15 	stw	r5,44(r3)
  ptr->_flags = flags;
  806e6c:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  806e70:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806e74:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806e78:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806e7c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
  806e80:	12400315 	stw	r9,12(r2)
  ptr->_bf._base = 0;
  806e84:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806e88:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  806e8c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806e90:	10001705 	stb	zero,92(r2)
  806e94:	10001745 	stb	zero,93(r2)
  806e98:	10001785 	stb	zero,94(r2)
  806e9c:	100017c5 	stb	zero,95(r2)
  806ea0:	10001805 	stb	zero,96(r2)
  806ea4:	10001845 	stb	zero,97(r2)
  806ea8:	10001885 	stb	zero,98(r2)
  806eac:	100018c5 	stb	zero,99(r2)
  ptr->_cookie = ptr;
  806eb0:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  806eb4:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806eb8:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  806ebc:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806ec0:	11400b15 	stw	r5,44(r2)
  s->__sdidinit = 1;
  806ec4:	00800044 	movi	r2,1
  806ec8:	20800e15 	stw	r2,56(r4)
}
  806ecc:	f800283a 	ret

00806ed0 <__sfmoreglue>:
{
  806ed0:	defffc04 	addi	sp,sp,-16
  806ed4:	dc800215 	stw	r18,8(sp)
  806ed8:	2825883a 	mov	r18,r5
  806edc:	dc000015 	stw	r16,0(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806ee0:	01401a04 	movi	r5,104
{
  806ee4:	2021883a 	mov	r16,r4
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806ee8:	913fffc4 	addi	r4,r18,-1
{
  806eec:	dfc00315 	stw	ra,12(sp)
  806ef0:	dc400115 	stw	r17,4(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806ef4:	0802ba80 	call	802ba8 <__mulsi3>
  806ef8:	8009883a 	mov	r4,r16
  806efc:	11401d04 	addi	r5,r2,116
  806f00:	1023883a 	mov	r17,r2
  806f04:	0807e580 	call	807e58 <_malloc_r>
  806f08:	1021883a 	mov	r16,r2
  if (g == NULL)
  806f0c:	10000726 	beq	r2,zero,806f2c <__sfmoreglue+0x5c>
  g->glue._iobs = &g->file;
  806f10:	11000304 	addi	r4,r2,12
  g->glue._next = NULL;
  806f14:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  806f18:	14800115 	stw	r18,4(r2)
  g->glue._iobs = &g->file;
  806f1c:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806f20:	89801a04 	addi	r6,r17,104
  806f24:	000b883a 	mov	r5,zero
  806f28:	08089640 	call	808964 <memset>
}
  806f2c:	8005883a 	mov	r2,r16
  806f30:	dfc00317 	ldw	ra,12(sp)
  806f34:	dc800217 	ldw	r18,8(sp)
  806f38:	dc400117 	ldw	r17,4(sp)
  806f3c:	dc000017 	ldw	r16,0(sp)
  806f40:	dec00404 	addi	sp,sp,16
  806f44:	f800283a 	ret

00806f48 <__sfp>:
{
  806f48:	defffb04 	addi	sp,sp,-20
  806f4c:	dc000015 	stw	r16,0(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  806f50:	d4200817 	ldw	r16,-32736(gp)
{
  806f54:	dc400115 	stw	r17,4(sp)
  806f58:	dfc00415 	stw	ra,16(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  806f5c:	80800e17 	ldw	r2,56(r16)
{
  806f60:	dcc00315 	stw	r19,12(sp)
  806f64:	dc800215 	stw	r18,8(sp)
  806f68:	2023883a 	mov	r17,r4
  if (!_GLOBAL_REENT->__sdidinit)
  806f6c:	10003126 	beq	r2,zero,807034 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806f70:	8100ba17 	ldw	r4,744(r16)
  806f74:	8140b917 	ldw	r5,740(r16)
  g->glue._niobs = n;
  806f78:	04c00104 	movi	r19,4
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
  806f7c:	8400b804 	addi	r16,r16,736
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806f80:	297fffc4 	addi	r5,r5,-1
  806f84:	2800050e 	bge	r5,zero,806f9c <__sfp+0x54>
  806f88:	00002406 	br	80701c <__sfp+0xd4>
  806f8c:	297fffc4 	addi	r5,r5,-1
  806f90:	28bfffd8 	cmpnei	r2,r5,-1
  806f94:	21001a04 	addi	r4,r4,104
  806f98:	10002026 	beq	r2,zero,80701c <__sfp+0xd4>
	if (fp->_flags == 0)
  806f9c:	2080030f 	ldh	r2,12(r4)
  806fa0:	103ffa1e 	bne	r2,zero,806f8c <__sfp+0x44>
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  806fa4:	00bffff4 	movhi	r2,65535
  806fa8:	10800044 	addi	r2,r2,1
  fp->_flags2 = 0;
  806fac:	20001915 	stw	zero,100(r4)
  fp->_p = NULL;		/* no current pointer */
  806fb0:	20000015 	stw	zero,0(r4)
  fp->_r = 0;
  806fb4:	20000115 	stw	zero,4(r4)
  fp->_w = 0;			/* nothing to read or write */
  806fb8:	20000215 	stw	zero,8(r4)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  806fbc:	20800315 	stw	r2,12(r4)
  fp->_bf._base = NULL;		/* no buffer */
  806fc0:	20000415 	stw	zero,16(r4)
  fp->_bf._size = 0;
  806fc4:	20000515 	stw	zero,20(r4)
  fp->_lbfsize = 0;		/* not line buffered */
  806fc8:	20000615 	stw	zero,24(r4)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
  806fcc:	20001705 	stb	zero,92(r4)
  806fd0:	20001745 	stb	zero,93(r4)
  806fd4:	20001785 	stb	zero,94(r4)
  806fd8:	200017c5 	stb	zero,95(r4)
  806fdc:	20001805 	stb	zero,96(r4)
  806fe0:	20001845 	stb	zero,97(r4)
  806fe4:	20001885 	stb	zero,98(r4)
  806fe8:	200018c5 	stb	zero,99(r4)
  fp->_ub._base = NULL;		/* no ungetc buffer */
  806fec:	20000c15 	stw	zero,48(r4)
  fp->_ub._size = 0;
  806ff0:	20000d15 	stw	zero,52(r4)
  fp->_lb._base = NULL;		/* no line buffer */
  806ff4:	20001115 	stw	zero,68(r4)
  fp->_lb._size = 0;
  806ff8:	20001215 	stw	zero,72(r4)
}
  806ffc:	2005883a 	mov	r2,r4
  807000:	dfc00417 	ldw	ra,16(sp)
  807004:	dcc00317 	ldw	r19,12(sp)
  807008:	dc800217 	ldw	r18,8(sp)
  80700c:	dc400117 	ldw	r17,4(sp)
  807010:	dc000017 	ldw	r16,0(sp)
  807014:	dec00504 	addi	sp,sp,20
  807018:	f800283a 	ret
      if (g->_next == NULL &&
  80701c:	80800017 	ldw	r2,0(r16)
  807020:	10000726 	beq	r2,zero,807040 <__sfp+0xf8>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807024:	11000217 	ldw	r4,8(r2)
  807028:	11400117 	ldw	r5,4(r2)
  80702c:	1021883a 	mov	r16,r2
  807030:	003fd306 	br	806f80 <__sfp+0x38>
  if (s->__sdidinit)
  807034:	8009883a 	mov	r4,r16
  807038:	0806d680 	call	806d68 <__sinit.part.0>
  80703c:	003fcc06 	br	806f70 <__sfp+0x28>
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  807040:	01406b04 	movi	r5,428
  807044:	8809883a 	mov	r4,r17
  807048:	0807e580 	call	807e58 <_malloc_r>
  80704c:	1025883a 	mov	r18,r2
  if (g == NULL)
  807050:	10000c26 	beq	r2,zero,807084 <__sfp+0x13c>
  g->glue._iobs = &g->file;
  807054:	11000304 	addi	r4,r2,12
  807058:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  80705c:	000b883a 	mov	r5,zero
  g->glue._next = NULL;
  807060:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  807064:	14c00115 	stw	r19,4(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  807068:	01806804 	movi	r6,416
  80706c:	08089640 	call	808964 <memset>
  807070:	1009883a 	mov	r4,r2
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  807074:	84800015 	stw	r18,0(r16)
  807078:	014000c4 	movi	r5,3
  80707c:	9021883a 	mov	r16,r18
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807080:	003fc606 	br	806f9c <__sfp+0x54>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  807084:	80000015 	stw	zero,0(r16)
  d->_errno = ENOMEM;
  807088:	00800304 	movi	r2,12
  80708c:	88800015 	stw	r2,0(r17)
  return NULL;
  807090:	0009883a 	mov	r4,zero
  807094:	003fd906 	br	806ffc <__sfp+0xb4>

00807098 <_cleanup>:
  (void) _fwalk_reent (ptr, cleanup_func);
  807098:	d1200817 	ldw	r4,-32736(gp)
  80709c:	01402074 	movhi	r5,129
  8070a0:	296efe04 	addi	r5,r5,-17416
  8070a4:	0807a541 	jmpi	807a54 <_fwalk_reent>

008070a8 <__sinit>:
  if (s->__sdidinit)
  8070a8:	20800e17 	ldw	r2,56(r4)
  8070ac:	10000126 	beq	r2,zero,8070b4 <__sinit+0xc>
}
  8070b0:	f800283a 	ret
  8070b4:	0806d681 	jmpi	806d68 <__sinit.part.0>

008070b8 <__sfp_lock_acquire>:
}
  8070b8:	f800283a 	ret

008070bc <__sfp_lock_release>:
  8070bc:	f800283a 	ret

008070c0 <__sinit_lock_acquire>:
  8070c0:	f800283a 	ret

008070c4 <__sinit_lock_release>:
  8070c4:	f800283a 	ret

008070c8 <__fp_lock_all>:
void
__fp_lock_all (void)
{
  __sfp_lock_acquire ();

  (void) _fwalk (_REENT, __fp_lock);
  8070c8:	d1200917 	ldw	r4,-32732(gp)
  8070cc:	01402034 	movhi	r5,128
  8070d0:	295b5304 	addi	r5,r5,27980
  8070d4:	08079bc1 	jmpi	8079bc <_fwalk>

008070d8 <__fp_unlock_all>:
}

void
__fp_unlock_all (void)
{
  (void) _fwalk (_REENT, __fp_unlock);
  8070d8:	d1200917 	ldw	r4,-32732(gp)
  8070dc:	01402034 	movhi	r5,128
  8070e0:	295b5804 	addi	r5,r5,28000
  8070e4:	08079bc1 	jmpi	8079bc <_fwalk>

008070e8 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
  8070e8:	defffb04 	addi	sp,sp,-20
  8070ec:	dcc00315 	stw	r19,12(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
  8070f0:	04c02074 	movhi	r19,129
{
  8070f4:	dc800215 	stw	r18,8(sp)
  8070f8:	dc400115 	stw	r17,4(sp)
  8070fc:	dc000015 	stw	r16,0(sp)
  807100:	dfc00415 	stw	ra,16(sp)
  807104:	2821883a 	mov	r16,r5
  top_size = chunksize(top);
  807108:	9ccdb704 	addi	r19,r19,14044
{
  80710c:	2025883a 	mov	r18,r4
  MALLOC_LOCK;
  807110:	08104140 	call	810414 <__malloc_lock>
  top_size = chunksize(top);
  807114:	98800217 	ldw	r2,8(r19)
  807118:	14400117 	ldw	r17,4(r2)
  80711c:	00bfff04 	movi	r2,-4
  807120:	88a2703a 	and	r17,r17,r2
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
  807124:	8c21c83a 	sub	r16,r17,r16
  807128:	8403fbc4 	addi	r16,r16,4079
  80712c:	8020d33a 	srli	r16,r16,12
  807130:	843fffc4 	addi	r16,r16,-1
  807134:	8020933a 	slli	r16,r16,12

  if (extra < (long)pagesz)  /* Not enough memory to release */
  807138:	80840008 	cmpgei	r2,r16,4096
  80713c:	10000626 	beq	r2,zero,807158 <_malloc_trim_r+0x70>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
  807140:	000b883a 	mov	r5,zero
  807144:	9009883a 	mov	r4,r18
  807148:	080a1a80 	call	80a1a8 <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
  80714c:	98c00217 	ldw	r3,8(r19)
  807150:	1c47883a 	add	r3,r3,r17
  807154:	10c00a26 	beq	r2,r3,807180 <_malloc_trim_r+0x98>
    MALLOC_UNLOCK;
  807158:	9009883a 	mov	r4,r18
  80715c:	08104380 	call	810438 <__malloc_unlock>
    return 0;
  807160:	0005883a 	mov	r2,zero
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
  807164:	dfc00417 	ldw	ra,16(sp)
  807168:	dcc00317 	ldw	r19,12(sp)
  80716c:	dc800217 	ldw	r18,8(sp)
  807170:	dc400117 	ldw	r17,4(sp)
  807174:	dc000017 	ldw	r16,0(sp)
  807178:	dec00504 	addi	sp,sp,20
  80717c:	f800283a 	ret
      new_brk = (char*)(MORECORE (-extra));
  807180:	040bc83a 	sub	r5,zero,r16
  807184:	9009883a 	mov	r4,r18
  807188:	080a1a80 	call	80a1a8 <_sbrk_r>
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
  80718c:	10bfffd8 	cmpnei	r2,r2,-1
  807190:	10000d26 	beq	r2,zero,8071c8 <_malloc_trim_r+0xe0>
        sbrked_mem -= extra;
  807194:	00802074 	movhi	r2,129
  807198:	109a5b17 	ldw	r2,26988(r2)
        set_head(top, (top_size - extra) | PREV_INUSE);
  80719c:	98c00217 	ldw	r3,8(r19)
  8071a0:	8c23c83a 	sub	r17,r17,r16
  8071a4:	8c400054 	ori	r17,r17,1
        sbrked_mem -= extra;
  8071a8:	1421c83a 	sub	r16,r2,r16
        set_head(top, (top_size - extra) | PREV_INUSE);
  8071ac:	1c400115 	stw	r17,4(r3)
        sbrked_mem -= extra;
  8071b0:	00802074 	movhi	r2,129
	MALLOC_UNLOCK;
  8071b4:	9009883a 	mov	r4,r18
        sbrked_mem -= extra;
  8071b8:	141a5b15 	stw	r16,26988(r2)
	MALLOC_UNLOCK;
  8071bc:	08104380 	call	810438 <__malloc_unlock>
        return 1;
  8071c0:	00800044 	movi	r2,1
  8071c4:	003fe706 	br	807164 <_malloc_trim_r+0x7c>
        current_brk = (char*)(MORECORE (0));
  8071c8:	000b883a 	mov	r5,zero
  8071cc:	9009883a 	mov	r4,r18
  8071d0:	080a1a80 	call	80a1a8 <_sbrk_r>
        top_size = current_brk - (char*)top;
  8071d4:	99000217 	ldw	r4,8(r19)
  8071d8:	1107c83a 	sub	r3,r2,r4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
  8071dc:	19400410 	cmplti	r5,r3,16
  8071e0:	283fdd1e 	bne	r5,zero,807158 <_malloc_trim_r+0x70>
          sbrked_mem = current_brk - sbrk_base;
  8071e4:	d1600a17 	ldw	r5,-32728(gp)
          set_head(top, top_size | PREV_INUSE);
  8071e8:	18c00054 	ori	r3,r3,1
  8071ec:	20c00115 	stw	r3,4(r4)
          sbrked_mem = current_brk - sbrk_base;
  8071f0:	1145c83a 	sub	r2,r2,r5
  8071f4:	01402074 	movhi	r5,129
  8071f8:	289a5b15 	stw	r2,26988(r5)
          set_head(top, top_size | PREV_INUSE);
  8071fc:	003fd606 	br	807158 <_malloc_trim_r+0x70>

00807200 <_free_r>:
  if (mem == 0)                              /* free(0) has no effect */
  807200:	28004f26 	beq	r5,zero,807340 <_free_r+0x140>
{
  807204:	defffd04 	addi	sp,sp,-12
  807208:	dc400115 	stw	r17,4(sp)
  80720c:	dc000015 	stw	r16,0(sp)
  807210:	2023883a 	mov	r17,r4
  MALLOC_LOCK;
  807214:	2821883a 	mov	r16,r5
{
  807218:	dfc00215 	stw	ra,8(sp)
  MALLOC_LOCK;
  80721c:	08104140 	call	810414 <__malloc_lock>
  hd = p->size;
  807220:	81ffff17 	ldw	r7,-4(r16)
  sz = hd & ~PREV_INUSE;
  807224:	00bfff84 	movi	r2,-2
  p = mem2chunk(mem);
  807228:	80fffe04 	addi	r3,r16,-8
  sz = hd & ~PREV_INUSE;
  80722c:	3884703a 	and	r2,r7,r2
  if (next == top)                            /* merge with top */
  807230:	01002074 	movhi	r4,129
  next = chunk_at_offset(p, sz);
  807234:	188d883a 	add	r6,r3,r2
  if (next == top)                            /* merge with top */
  807238:	210db704 	addi	r4,r4,14044
  nextsz = chunksize(next);
  80723c:	31400117 	ldw	r5,4(r6)
  if (next == top)                            /* merge with top */
  807240:	22000217 	ldw	r8,8(r4)
  nextsz = chunksize(next);
  807244:	027fff04 	movi	r9,-4
  807248:	2a4a703a 	and	r5,r5,r9
  if (next == top)                            /* merge with top */
  80724c:	41806426 	beq	r8,r6,8073e0 <_free_r+0x1e0>
  set_head(next, nextsz);                    /* clear inuse bit */
  807250:	31400115 	stw	r5,4(r6)
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  807254:	39c0004c 	andi	r7,r7,1
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807258:	3151883a 	add	r8,r6,r5
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  80725c:	3800281e 	bne	r7,zero,807300 <_free_r+0x100>
    prevsz = p->prev_size;
  807260:	82bffe17 	ldw	r10,-8(r16)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807264:	42000117 	ldw	r8,4(r8)
    if (p->fd == last_remainder)             /* keep as last_remainder */
  807268:	01c02074 	movhi	r7,129
    p = chunk_at_offset(p, -prevsz);
  80726c:	1a87c83a 	sub	r3,r3,r10
    if (p->fd == last_remainder)             /* keep as last_remainder */
  807270:	1a400217 	ldw	r9,8(r3)
  807274:	39cdb904 	addi	r7,r7,14052
    sz += prevsz;
  807278:	1285883a 	add	r2,r2,r10
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  80727c:	4200004c 	andi	r8,r8,1
    if (p->fd == last_remainder)             /* keep as last_remainder */
  807280:	49c04c26 	beq	r9,r7,8073b4 <_free_r+0x1b4>
      unlink(p, bck, fwd);
  807284:	1a800317 	ldw	r10,12(r3)
  807288:	4a800315 	stw	r10,12(r9)
  80728c:	52400215 	stw	r9,8(r10)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807290:	40006f26 	beq	r8,zero,807450 <_free_r+0x250>
  set_head(p, sz | PREV_INUSE);
  807294:	11400054 	ori	r5,r2,1
  807298:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  80729c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  8072a0:	11408028 	cmpgeui	r5,r2,512
  8072a4:	28002c1e 	bne	r5,zero,807358 <_free_r+0x158>
  8072a8:	100ad0fa 	srli	r5,r2,3
  8072ac:	100cd17a 	srli	r6,r2,5
  8072b0:	00800044 	movi	r2,1
  8072b4:	29400044 	addi	r5,r5,1
  8072b8:	280a90fa 	slli	r5,r5,3
  8072bc:	21c00117 	ldw	r7,4(r4)
  8072c0:	1184983a 	sll	r2,r2,r6
  8072c4:	214b883a 	add	r5,r4,r5
  8072c8:	29800017 	ldw	r6,0(r5)
  8072cc:	11c4b03a 	or	r2,r2,r7
  8072d0:	29fffe04 	addi	r7,r5,-8
  8072d4:	19c00315 	stw	r7,12(r3)
  8072d8:	19800215 	stw	r6,8(r3)
  8072dc:	20800115 	stw	r2,4(r4)
  8072e0:	28c00015 	stw	r3,0(r5)
  8072e4:	30c00315 	stw	r3,12(r6)
    MALLOC_UNLOCK;
  8072e8:	8809883a 	mov	r4,r17
}
  8072ec:	dfc00217 	ldw	ra,8(sp)
  8072f0:	dc400117 	ldw	r17,4(sp)
  8072f4:	dc000017 	ldw	r16,0(sp)
  8072f8:	dec00304 	addi	sp,sp,12
    MALLOC_UNLOCK;
  8072fc:	08104381 	jmpi	810438 <__malloc_unlock>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807300:	41c00117 	ldw	r7,4(r8)
  807304:	39c0004c 	andi	r7,r7,1
  807308:	38000e1e 	bne	r7,zero,807344 <_free_r+0x144>
    sz += nextsz;
  80730c:	01c02074 	movhi	r7,129
  807310:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  807314:	39cdb904 	addi	r7,r7,14052
  807318:	31400217 	ldw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  80731c:	12400054 	ori	r9,r2,1
  set_foot(p, sz);
  807320:	1891883a 	add	r8,r3,r2
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  807324:	29c05026 	beq	r5,r7,807468 <_free_r+0x268>
      unlink(next, bck, fwd);
  807328:	31800317 	ldw	r6,12(r6)
  80732c:	29800315 	stw	r6,12(r5)
  807330:	31400215 	stw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  807334:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  807338:	40800015 	stw	r2,0(r8)
  if (!islr)
  80733c:	003fd806 	br	8072a0 <_free_r+0xa0>
  807340:	f800283a 	ret
  set_head(p, sz | PREV_INUSE);
  807344:	11400054 	ori	r5,r2,1
  807348:	817fff15 	stw	r5,-4(r16)
  set_foot(p, sz);
  80734c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  807350:	11408028 	cmpgeui	r5,r2,512
  807354:	283fd426 	beq	r5,zero,8072a8 <_free_r+0xa8>
  807358:	100ad27a 	srli	r5,r2,9
  80735c:	29800168 	cmpgeui	r6,r5,5
  807360:	3000321e 	bne	r6,zero,80742c <_free_r+0x22c>
  807364:	100ad1ba 	srli	r5,r2,6
  807368:	29800e44 	addi	r6,r5,57
  80736c:	300c90fa 	slli	r6,r6,3
  807370:	29c00e04 	addi	r7,r5,56
  807374:	218d883a 	add	r6,r4,r6
  807378:	31400017 	ldw	r5,0(r6)
  80737c:	31bffe04 	addi	r6,r6,-8
  807380:	31404026 	beq	r6,r5,807484 <_free_r+0x284>
  807384:	01ffff04 	movi	r7,-4
  807388:	29000117 	ldw	r4,4(r5)
  80738c:	21c8703a 	and	r4,r4,r7
  807390:	1100022e 	bgeu	r2,r4,80739c <_free_r+0x19c>
  807394:	29400217 	ldw	r5,8(r5)
  807398:	317ffb1e 	bne	r6,r5,807388 <_free_r+0x188>
  80739c:	29800317 	ldw	r6,12(r5)
  8073a0:	19800315 	stw	r6,12(r3)
  8073a4:	19400215 	stw	r5,8(r3)
  8073a8:	30c00215 	stw	r3,8(r6)
  8073ac:	28c00315 	stw	r3,12(r5)
  8073b0:	003fcd06 	br	8072e8 <_free_r+0xe8>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8073b4:	40004b1e 	bne	r8,zero,8074e4 <_free_r+0x2e4>
      unlink(next, bck, fwd);
  8073b8:	31000317 	ldw	r4,12(r6)
  8073bc:	31800217 	ldw	r6,8(r6)
    sz += nextsz;
  8073c0:	2885883a 	add	r2,r5,r2
  set_head(p, sz | PREV_INUSE);
  8073c4:	11400054 	ori	r5,r2,1
      unlink(next, bck, fwd);
  8073c8:	31000315 	stw	r4,12(r6)
  8073cc:	21800215 	stw	r6,8(r4)
  set_head(p, sz | PREV_INUSE);
  8073d0:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  8073d4:	1887883a 	add	r3,r3,r2
  8073d8:	18800015 	stw	r2,0(r3)
  if (!islr)
  8073dc:	003fc206 	br	8072e8 <_free_r+0xe8>
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8073e0:	39c0004c 	andi	r7,r7,1
    sz += nextsz;
  8073e4:	1145883a 	add	r2,r2,r5
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8073e8:	3800071e 	bne	r7,zero,807408 <_free_r+0x208>
      prevsz = p->prev_size;
  8073ec:	81fffe17 	ldw	r7,-8(r16)
      p = chunk_at_offset(p, -prevsz);
  8073f0:	19c7c83a 	sub	r3,r3,r7
      unlink(p, bck, fwd);
  8073f4:	19400317 	ldw	r5,12(r3)
  8073f8:	19800217 	ldw	r6,8(r3)
      sz += prevsz;
  8073fc:	11c5883a 	add	r2,r2,r7
      unlink(p, bck, fwd);
  807400:	31400315 	stw	r5,12(r6)
  807404:	29800215 	stw	r6,8(r5)
    set_head(p, sz | PREV_INUSE);
  807408:	11800054 	ori	r6,r2,1
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  80740c:	d1600b17 	ldw	r5,-32724(gp)
    set_head(p, sz | PREV_INUSE);
  807410:	19800115 	stw	r6,4(r3)
    top = p;
  807414:	20c00215 	stw	r3,8(r4)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  807418:	117fb336 	bltu	r2,r5,8072e8 <_free_r+0xe8>
      malloc_trim(RCALL top_pad); 
  80741c:	d1671717 	ldw	r5,-25508(gp)
  807420:	8809883a 	mov	r4,r17
  807424:	08070e80 	call	8070e8 <_malloc_trim_r>
  807428:	003faf06 	br	8072e8 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  80742c:	29800568 	cmpgeui	r6,r5,21
  807430:	30000926 	beq	r6,zero,807458 <_free_r+0x258>
  807434:	29801568 	cmpgeui	r6,r5,85
  807438:	3000191e 	bne	r6,zero,8074a0 <_free_r+0x2a0>
  80743c:	100ad33a 	srli	r5,r2,12
  807440:	29801bc4 	addi	r6,r5,111
  807444:	300c90fa 	slli	r6,r6,3
  807448:	29c01b84 	addi	r7,r5,110
  80744c:	003fc906 	br	807374 <_free_r+0x174>
    sz += nextsz;
  807450:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  807454:	003fb006 	br	807318 <_free_r+0x118>
    frontlink(p, sz, idx, bck, fwd);  
  807458:	29801704 	addi	r6,r5,92
  80745c:	300c90fa 	slli	r6,r6,3
  807460:	29c016c4 	addi	r7,r5,91
  807464:	003fc306 	br	807374 <_free_r+0x174>
      link_last_remainder(p);   
  807468:	20c00515 	stw	r3,20(r4)
  80746c:	20c00415 	stw	r3,16(r4)
  807470:	19c00315 	stw	r7,12(r3)
  807474:	19c00215 	stw	r7,8(r3)
  set_head(p, sz | PREV_INUSE);
  807478:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  80747c:	40800015 	stw	r2,0(r8)
  if (!islr)
  807480:	003f9906 	br	8072e8 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  807484:	380fd0ba 	srai	r7,r7,2
  807488:	00800044 	movi	r2,1
  80748c:	22000117 	ldw	r8,4(r4)
  807490:	11ce983a 	sll	r7,r2,r7
  807494:	3a0eb03a 	or	r7,r7,r8
  807498:	21c00115 	stw	r7,4(r4)
  80749c:	003fc006 	br	8073a0 <_free_r+0x1a0>
  8074a0:	29805568 	cmpgeui	r6,r5,341
  8074a4:	3000051e 	bne	r6,zero,8074bc <_free_r+0x2bc>
  8074a8:	100ad3fa 	srli	r5,r2,15
  8074ac:	29801e04 	addi	r6,r5,120
  8074b0:	300c90fa 	slli	r6,r6,3
  8074b4:	29c01dc4 	addi	r7,r5,119
  8074b8:	003fae06 	br	807374 <_free_r+0x174>
  8074bc:	29415568 	cmpgeui	r5,r5,1365
  8074c0:	2800051e 	bne	r5,zero,8074d8 <_free_r+0x2d8>
  8074c4:	100ad4ba 	srli	r5,r2,18
  8074c8:	29801f44 	addi	r6,r5,125
  8074cc:	300c90fa 	slli	r6,r6,3
  8074d0:	29c01f04 	addi	r7,r5,124
  8074d4:	003fa706 	br	807374 <_free_r+0x174>
  8074d8:	0180fe04 	movi	r6,1016
  8074dc:	01c01f84 	movi	r7,126
  8074e0:	003fa406 	br	807374 <_free_r+0x174>
  set_head(p, sz | PREV_INUSE);
  8074e4:	11000054 	ori	r4,r2,1
  8074e8:	19000115 	stw	r4,4(r3)
  set_foot(p, sz);
  8074ec:	30800015 	stw	r2,0(r6)
  if (!islr)
  8074f0:	003f7d06 	br	8072e8 <_free_r+0xe8>

008074f4 <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
  8074f4:	30800217 	ldw	r2,8(r6)
  8074f8:	1000a326 	beq	r2,zero,807788 <__sfvwrite_r+0x294>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
  8074fc:	29c0030b 	ldhu	r7,12(r5)
{
  807500:	defff404 	addi	sp,sp,-48
  807504:	ddc00915 	stw	r23,36(sp)
  807508:	dd400715 	stw	r21,28(sp)
  80750c:	dc000215 	stw	r16,8(sp)
  807510:	dfc00b15 	stw	ra,44(sp)
  807514:	df000a15 	stw	fp,40(sp)
  807518:	dd800815 	stw	r22,32(sp)
  80751c:	dd000615 	stw	r20,24(sp)
  807520:	dcc00515 	stw	r19,20(sp)
  807524:	dc800415 	stw	r18,16(sp)
  807528:	dc400315 	stw	r17,12(sp)
  if (cantwrite (ptr, fp))
  80752c:	3880020c 	andi	r2,r7,8
  807530:	302f883a 	mov	r23,r6
  807534:	202b883a 	mov	r21,r4
  807538:	2821883a 	mov	r16,r5
  80753c:	10002226 	beq	r2,zero,8075c8 <__sfvwrite_r+0xd4>
  807540:	28800417 	ldw	r2,16(r5)
  807544:	10002026 	beq	r2,zero,8075c8 <__sfvwrite_r+0xd4>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
  807548:	3880008c 	andi	r2,r7,2
  iov = uio->uio_iov;
  80754c:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  807550:	10002526 	beq	r2,zero,8075e8 <__sfvwrite_r+0xf4>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
  807554:	80800917 	ldw	r2,36(r16)
  807558:	81400717 	ldw	r5,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  80755c:	05200034 	movhi	r20,32768
  register const char *p = NULL;
  807560:	0027883a 	mov	r19,zero
  len = 0;
  807564:	0025883a 	mov	r18,zero
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  807568:	a53f0004 	addi	r20,r20,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
  80756c:	980d883a 	mov	r6,r19
  807570:	a809883a 	mov	r4,r21
	  GETIOV (;);
  807574:	90001026 	beq	r18,zero,8075b8 <__sfvwrite_r+0xc4>
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  807578:	900f883a 	mov	r7,r18
  80757c:	a480012e 	bgeu	r20,r18,807584 <__sfvwrite_r+0x90>
  807580:	a00f883a 	mov	r7,r20
	  w = fp->_write (ptr, fp->_cookie, p,
  807584:	103ee83a 	callr	r2
	  if (w <= 0)
  807588:	00807a0e 	bge	zero,r2,807774 <__sfvwrite_r+0x280>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
  80758c:	b9000217 	ldw	r4,8(r23)
	  p += w;
  807590:	98a7883a 	add	r19,r19,r2
	  len -= w;
  807594:	90a5c83a 	sub	r18,r18,r2
      while ((uio->uio_resid -= w) != 0);
  807598:	2085c83a 	sub	r2,r4,r2
  80759c:	b8800215 	stw	r2,8(r23)
  8075a0:	10006326 	beq	r2,zero,807730 <__sfvwrite_r+0x23c>
	  w = fp->_write (ptr, fp->_cookie, p,
  8075a4:	80800917 	ldw	r2,36(r16)
  8075a8:	81400717 	ldw	r5,28(r16)
  8075ac:	980d883a 	mov	r6,r19
  8075b0:	a809883a 	mov	r4,r21
	  GETIOV (;);
  8075b4:	903ff01e 	bne	r18,zero,807578 <__sfvwrite_r+0x84>
  8075b8:	8cc00017 	ldw	r19,0(r17)
  8075bc:	8c800117 	ldw	r18,4(r17)
  8075c0:	8c400204 	addi	r17,r17,8
  8075c4:	003fe906 	br	80756c <__sfvwrite_r+0x78>
  if (cantwrite (ptr, fp))
  8075c8:	800b883a 	mov	r5,r16
  8075cc:	a809883a 	mov	r4,r21
  8075d0:	0804f800 	call	804f80 <__swsetup_r>
  8075d4:	1000f71e 	bne	r2,zero,8079b4 <__sfvwrite_r+0x4c0>
  if (fp->_flags & __SNBF)
  8075d8:	81c0030b 	ldhu	r7,12(r16)
  iov = uio->uio_iov;
  8075dc:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  8075e0:	3880008c 	andi	r2,r7,2
  8075e4:	103fdb1e 	bne	r2,zero,807554 <__sfvwrite_r+0x60>
    }
  else if ((fp->_flags & __SLBF) == 0)
  8075e8:	3880004c 	andi	r2,r7,1
	      nl = memchr ((void *) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
  8075ec:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  8075f0:	82000017 	ldw	r8,0(r16)
  else if ((fp->_flags & __SLBF) == 0)
  8075f4:	1000661e 	bne	r2,zero,807790 <__sfvwrite_r+0x29c>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  8075f8:	00a00034 	movhi	r2,32768
  8075fc:	10bfff84 	addi	r2,r2,-2
  807600:	00e00034 	movhi	r3,32768
  807604:	d8800015 	stw	r2,0(sp)
  807608:	18bfffc4 	addi	r2,r3,-1
  register const char *p = NULL;
  80760c:	0039883a 	mov	fp,zero
  len = 0;
  807610:	0027883a 	mov	r19,zero
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  807614:	d8800115 	stw	r2,4(sp)
	  GETIOV (;);
  807618:	98004126 	beq	r19,zero,807720 <__sfvwrite_r+0x22c>
	  if (fp->_flags & __SSTR)
  80761c:	3880800c 	andi	r2,r7,512
  807620:	10009726 	beq	r2,zero,807880 <__sfvwrite_r+0x38c>
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
  807624:	902d883a 	mov	r22,r18
  807628:	9c80be36 	bltu	r19,r18,807924 <__sfvwrite_r+0x430>
  80762c:	3881200c 	andi	r2,r7,1152
  807630:	10002626 	beq	r2,zero,8076cc <__sfvwrite_r+0x1d8>
		  int newsize = fp->_bf._size * 3 / 2;
  807634:	81800517 	ldw	r6,20(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  807638:	81400417 	ldw	r5,16(r16)
		  if (newsize < curpos + len + 1)
  80763c:	98800044 	addi	r2,r19,1
		  int newsize = fp->_bf._size * 3 / 2;
  807640:	3189883a 	add	r4,r6,r6
  807644:	2189883a 	add	r4,r4,r6
  807648:	2028d7fa 	srli	r20,r4,31
		  int curpos = (fp->_p - fp->_bf._base);
  80764c:	4165c83a 	sub	r18,r8,r5
		  if (newsize < curpos + len + 1)
  807650:	1485883a 	add	r2,r2,r18
		  int newsize = fp->_bf._size * 3 / 2;
  807654:	a109883a 	add	r4,r20,r4
  807658:	2029d07a 	srai	r20,r4,1
		  if (newsize < curpos + len + 1)
  80765c:	a00d883a 	mov	r6,r20
  807660:	a080022e 	bgeu	r20,r2,80766c <__sfvwrite_r+0x178>
		    newsize = curpos + len + 1;
  807664:	1029883a 	mov	r20,r2
  807668:	100d883a 	mov	r6,r2
		  if (fp->_flags & __SOPT)
  80766c:	39c1000c 	andi	r7,r7,1024
  807670:	3800c026 	beq	r7,zero,807974 <__sfvwrite_r+0x480>
		      str = (unsigned char *)_malloc_r (ptr, newsize);
  807674:	a809883a 	mov	r4,r21
  807678:	300b883a 	mov	r5,r6
  80767c:	0807e580 	call	807e58 <_malloc_r>
  807680:	1009883a 	mov	r4,r2
		      if (!str)
  807684:	1000c726 	beq	r2,zero,8079a4 <__sfvwrite_r+0x4b0>
		      memcpy (str, fp->_bf._base, curpos);
  807688:	81400417 	ldw	r5,16(r16)
  80768c:	900d883a 	mov	r6,r18
  807690:	08087380 	call	808738 <memcpy>
  807694:	1009883a 	mov	r4,r2
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
  807698:	8080030b 	ldhu	r2,12(r16)
  80769c:	00fedfc4 	movi	r3,-1153
  8076a0:	10c4703a 	and	r2,r2,r3
  8076a4:	10802014 	ori	r2,r2,128
  8076a8:	8080030d 	sth	r2,12(r16)
		  fp->_p = str + curpos;
  8076ac:	2491883a 	add	r8,r4,r18
		  fp->_w = newsize - curpos;
  8076b0:	a485c83a 	sub	r2,r20,r18
		  fp->_bf._base = str;
  8076b4:	81000415 	stw	r4,16(r16)
		  fp->_p = str + curpos;
  8076b8:	82000015 	stw	r8,0(r16)
		  fp->_bf._size = newsize;
  8076bc:	85000515 	stw	r20,20(r16)
		  w = len;
  8076c0:	9825883a 	mov	r18,r19
		  fp->_w = newsize - curpos;
  8076c4:	80800215 	stw	r2,8(r16)
	      if (len < w)
  8076c8:	982d883a 	mov	r22,r19
	      COPY (w);		/* copy MIN(fp->_w,len), */
  8076cc:	4009883a 	mov	r4,r8
  8076d0:	b00d883a 	mov	r6,r22
  8076d4:	e00b883a 	mov	r5,fp
  8076d8:	08088380 	call	808838 <memmove>
	      fp->_w -= w;
  8076dc:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  8076e0:	80800017 	ldw	r2,0(r16)
  8076e4:	9829883a 	mov	r20,r19
	      fp->_w -= w;
  8076e8:	24a5c83a 	sub	r18,r4,r18
	      fp->_p += w;
  8076ec:	1585883a 	add	r2,r2,r22
	      fp->_w -= w;
  8076f0:	84800215 	stw	r18,8(r16)
	      fp->_p += w;
  8076f4:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
  8076f8:	0027883a 	mov	r19,zero
      while ((uio->uio_resid -= w) != 0);
  8076fc:	b8800217 	ldw	r2,8(r23)
	  p += w;
  807700:	e539883a 	add	fp,fp,r20
      while ((uio->uio_resid -= w) != 0);
  807704:	1529c83a 	sub	r20,r2,r20
  807708:	bd000215 	stw	r20,8(r23)
  80770c:	a0000826 	beq	r20,zero,807730 <__sfvwrite_r+0x23c>
	  if (fp->_flags & __SSTR)
  807710:	81c0030b 	ldhu	r7,12(r16)
	  w = fp->_w;
  807714:	84800217 	ldw	r18,8(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  807718:	82000017 	ldw	r8,0(r16)
	  GETIOV (;);
  80771c:	983fbf1e 	bne	r19,zero,80761c <__sfvwrite_r+0x128>
  807720:	8f000017 	ldw	fp,0(r17)
  807724:	8cc00117 	ldw	r19,4(r17)
  807728:	8c400204 	addi	r17,r17,8
  80772c:	003fba06 	br	807618 <__sfvwrite_r+0x124>
    return 0;
  807730:	0005883a 	mov	r2,zero
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
  807734:	dfc00b17 	ldw	ra,44(sp)
  807738:	df000a17 	ldw	fp,40(sp)
  80773c:	ddc00917 	ldw	r23,36(sp)
  807740:	dd800817 	ldw	r22,32(sp)
  807744:	dd400717 	ldw	r21,28(sp)
  807748:	dd000617 	ldw	r20,24(sp)
  80774c:	dcc00517 	ldw	r19,20(sp)
  807750:	dc800417 	ldw	r18,16(sp)
  807754:	dc400317 	ldw	r17,12(sp)
  807758:	dc000217 	ldw	r16,8(sp)
  80775c:	dec00c04 	addi	sp,sp,48
  807760:	f800283a 	ret
	      if (_fflush_r (ptr, fp))
  807764:	800b883a 	mov	r5,r16
  807768:	a809883a 	mov	r4,r21
  80776c:	0806c700 	call	806c70 <_fflush_r>
  807770:	10002026 	beq	r2,zero,8077f4 <__sfvwrite_r+0x300>
  fp->_flags |= __SERR;
  807774:	8080030b 	ldhu	r2,12(r16)
  807778:	10801014 	ori	r2,r2,64
  80777c:	8080030d 	sth	r2,12(r16)
  return EOF;
  807780:	00bfffc4 	movi	r2,-1
  807784:	003feb06 	br	807734 <__sfvwrite_r+0x240>
    return 0;
  807788:	0005883a 	mov	r2,zero
}
  80778c:	f800283a 	ret
  len = 0;
  807790:	002d883a 	mov	r22,zero
      nldist = 0;
  807794:	0027883a 	mov	r19,zero
      nlknown = 0;
  807798:	0005883a 	mov	r2,zero
  register const char *p = NULL;
  80779c:	0039883a 	mov	fp,zero
	  GETIOV (nlknown = 0);
  8077a0:	b0001d26 	beq	r22,zero,807818 <__sfvwrite_r+0x324>
	  if (!nlknown)
  8077a4:	10002026 	beq	r2,zero,807828 <__sfvwrite_r+0x334>
	  s = MIN (len, nldist);
  8077a8:	9829883a 	mov	r20,r19
  8077ac:	b500012e 	bgeu	r22,r20,8077b4 <__sfvwrite_r+0x2c0>
  8077b0:	b029883a 	mov	r20,r22
	  if (fp->_p > fp->_bf._base && s > w)
  8077b4:	80800417 	ldw	r2,16(r16)
	  w = fp->_w + fp->_bf._size;
  8077b8:	81c00517 	ldw	r7,20(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  8077bc:	1200022e 	bgeu	r2,r8,8077c8 <__sfvwrite_r+0x2d4>
	  w = fp->_w + fp->_bf._size;
  8077c0:	3ca5883a 	add	r18,r7,r18
	  if (fp->_p > fp->_bf._base && s > w)
  8077c4:	95002216 	blt	r18,r20,807850 <__sfvwrite_r+0x35c>
	  else if (s >= (w = fp->_bf._size))
  8077c8:	a1c05916 	blt	r20,r7,807930 <__sfvwrite_r+0x43c>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  8077cc:	80800917 	ldw	r2,36(r16)
  8077d0:	81400717 	ldw	r5,28(r16)
  8077d4:	e00d883a 	mov	r6,fp
  8077d8:	a809883a 	mov	r4,r21
  8077dc:	103ee83a 	callr	r2
  8077e0:	1025883a 	mov	r18,r2
	      if (w <= 0)
  8077e4:	00bfe30e 	bge	zero,r2,807774 <__sfvwrite_r+0x280>
	  if ((nldist -= w) == 0)
  8077e8:	9ca7c83a 	sub	r19,r19,r18
  8077ec:	983fdd26 	beq	r19,zero,807764 <__sfvwrite_r+0x270>
  8077f0:	00800044 	movi	r2,1
      while ((uio->uio_resid -= w) != 0);
  8077f4:	b9800217 	ldw	r6,8(r23)
	  p += w;
  8077f8:	e4b9883a 	add	fp,fp,r18
	  len -= w;
  8077fc:	b4adc83a 	sub	r22,r22,r18
      while ((uio->uio_resid -= w) != 0);
  807800:	34a5c83a 	sub	r18,r6,r18
  807804:	bc800215 	stw	r18,8(r23)
  807808:	903fc926 	beq	r18,zero,807730 <__sfvwrite_r+0x23c>
	  w = fp->_w + fp->_bf._size;
  80780c:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  807810:	82000017 	ldw	r8,0(r16)
	  GETIOV (nlknown = 0);
  807814:	b03fe31e 	bne	r22,zero,8077a4 <__sfvwrite_r+0x2b0>
  807818:	8d800117 	ldw	r22,4(r17)
  80781c:	8f000017 	ldw	fp,0(r17)
  807820:	8c400204 	addi	r17,r17,8
  807824:	b03ffc26 	beq	r22,zero,807818 <__sfvwrite_r+0x324>
	      nl = memchr ((void *) p, '\n', len);
  807828:	b00d883a 	mov	r6,r22
  80782c:	01400284 	movi	r5,10
  807830:	e009883a 	mov	r4,fp
  807834:	da000015 	stw	r8,0(sp)
  807838:	08086680 	call	808668 <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
  80783c:	da000017 	ldw	r8,0(sp)
  807840:	10004926 	beq	r2,zero,807968 <__sfvwrite_r+0x474>
  807844:	10800044 	addi	r2,r2,1
  807848:	1727c83a 	sub	r19,r2,fp
  80784c:	003fd606 	br	8077a8 <__sfvwrite_r+0x2b4>
	      COPY (w);
  807850:	e00b883a 	mov	r5,fp
  807854:	4009883a 	mov	r4,r8
  807858:	900d883a 	mov	r6,r18
  80785c:	08088380 	call	808838 <memmove>
	      fp->_p += w;
  807860:	80800017 	ldw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  807864:	800b883a 	mov	r5,r16
  807868:	a809883a 	mov	r4,r21
	      fp->_p += w;
  80786c:	1485883a 	add	r2,r2,r18
  807870:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  807874:	0806c700 	call	806c70 <_fflush_r>
  807878:	103fdb26 	beq	r2,zero,8077e8 <__sfvwrite_r+0x2f4>
  80787c:	003fbd06 	br	807774 <__sfvwrite_r+0x280>
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
  807880:	80800417 	ldw	r2,16(r16)
  807884:	12001436 	bltu	r2,r8,8078d8 <__sfvwrite_r+0x3e4>
  807888:	85000517 	ldw	r20,20(r16)
  80788c:	9d001236 	bltu	r19,r20,8078d8 <__sfvwrite_r+0x3e4>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  807890:	d8800017 	ldw	r2,0(sp)
  807894:	14c0322e 	bgeu	r2,r19,807960 <__sfvwrite_r+0x46c>
  807898:	d9000117 	ldw	r4,4(sp)
  80789c:	a00b883a 	mov	r5,r20
  8078a0:	080d4080 	call	80d408 <__divsi3>
  8078a4:	a00b883a 	mov	r5,r20
  8078a8:	1009883a 	mov	r4,r2
  8078ac:	0802ba80 	call	802ba8 <__mulsi3>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  8078b0:	82000917 	ldw	r8,36(r16)
  8078b4:	81400717 	ldw	r5,28(r16)
  8078b8:	100f883a 	mov	r7,r2
  8078bc:	e00d883a 	mov	r6,fp
  8078c0:	a809883a 	mov	r4,r21
  8078c4:	403ee83a 	callr	r8
  8078c8:	1029883a 	mov	r20,r2
	      if (w <= 0)
  8078cc:	00bfa90e 	bge	zero,r2,807774 <__sfvwrite_r+0x280>
	  len -= w;
  8078d0:	9d27c83a 	sub	r19,r19,r20
  8078d4:	003f8906 	br	8076fc <__sfvwrite_r+0x208>
	      w = MIN (len, w);
  8078d8:	9029883a 	mov	r20,r18
  8078dc:	9c80012e 	bgeu	r19,r18,8078e4 <__sfvwrite_r+0x3f0>
  8078e0:	9829883a 	mov	r20,r19
	      COPY (w);
  8078e4:	4009883a 	mov	r4,r8
  8078e8:	a00d883a 	mov	r6,r20
  8078ec:	e00b883a 	mov	r5,fp
  8078f0:	08088380 	call	808838 <memmove>
	      fp->_w -= w;
  8078f4:	80800217 	ldw	r2,8(r16)
	      fp->_p += w;
  8078f8:	81000017 	ldw	r4,0(r16)
	      fp->_w -= w;
  8078fc:	1505c83a 	sub	r2,r2,r20
	      fp->_p += w;
  807900:	2509883a 	add	r4,r4,r20
	      fp->_w -= w;
  807904:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
  807908:	81000015 	stw	r4,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
  80790c:	103ff01e 	bne	r2,zero,8078d0 <__sfvwrite_r+0x3dc>
  807910:	800b883a 	mov	r5,r16
  807914:	a809883a 	mov	r4,r21
  807918:	0806c700 	call	806c70 <_fflush_r>
  80791c:	103fec26 	beq	r2,zero,8078d0 <__sfvwrite_r+0x3dc>
  807920:	003f9406 	br	807774 <__sfvwrite_r+0x280>
		w = len;
  807924:	9825883a 	mov	r18,r19
  807928:	982d883a 	mov	r22,r19
  80792c:	003f6706 	br	8076cc <__sfvwrite_r+0x1d8>
	      COPY (w);
  807930:	4009883a 	mov	r4,r8
  807934:	a00d883a 	mov	r6,r20
  807938:	e00b883a 	mov	r5,fp
  80793c:	08088380 	call	808838 <memmove>
	      fp->_w -= w;
  807940:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  807944:	80800017 	ldw	r2,0(r16)
  807948:	a025883a 	mov	r18,r20
	      fp->_w -= w;
  80794c:	2509c83a 	sub	r4,r4,r20
	      fp->_p += w;
  807950:	1505883a 	add	r2,r2,r20
	      fp->_w -= w;
  807954:	81000215 	stw	r4,8(r16)
	      fp->_p += w;
  807958:	80800015 	stw	r2,0(r16)
  80795c:	003fa206 	br	8077e8 <__sfvwrite_r+0x2f4>
  807960:	9809883a 	mov	r4,r19
  807964:	003fcd06 	br	80789c <__sfvwrite_r+0x3a8>
	      nldist = nl ? nl + 1 - p : len + 1;
  807968:	b5000044 	addi	r20,r22,1
  80796c:	a027883a 	mov	r19,r20
  807970:	003f8e06 	br	8077ac <__sfvwrite_r+0x2b8>
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
  807974:	a809883a 	mov	r4,r21
  807978:	0809c440 	call	809c44 <_realloc_r>
  80797c:	1009883a 	mov	r4,r2
		      if (!str)
  807980:	103f4a1e 	bne	r2,zero,8076ac <__sfvwrite_r+0x1b8>
			  _free_r (ptr, fp->_bf._base);
  807984:	81400417 	ldw	r5,16(r16)
  807988:	a809883a 	mov	r4,r21
  80798c:	08072000 	call	807200 <_free_r>
			  fp->_flags &=  ~__SMBF;
  807990:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  807994:	00c00304 	movi	r3,12
  807998:	a8c00015 	stw	r3,0(r21)
			  fp->_flags &=  ~__SMBF;
  80799c:	10bfdfcc 	andi	r2,r2,65407
			  goto err;
  8079a0:	003f7506 	br	807778 <__sfvwrite_r+0x284>
			  ptr->_errno = ENOMEM;
  8079a4:	00c00304 	movi	r3,12
  fp->_flags |= __SERR;
  8079a8:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  8079ac:	a8c00015 	stw	r3,0(r21)
			  goto err;
  8079b0:	003f7106 	br	807778 <__sfvwrite_r+0x284>
    return EOF;
  8079b4:	00bfffc4 	movi	r2,-1
  8079b8:	003f5e06 	br	807734 <__sfvwrite_r+0x240>

008079bc <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
  8079bc:	defffa04 	addi	sp,sp,-24
  8079c0:	dd000415 	stw	r20,16(sp)
  8079c4:	dcc00315 	stw	r19,12(sp)
  8079c8:	dc800215 	stw	r18,8(sp)
  8079cc:	dfc00515 	stw	ra,20(sp)
  8079d0:	dc400115 	stw	r17,4(sp)
  8079d4:	dc000015 	stw	r16,0(sp)
  8079d8:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8079dc:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  8079e0:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8079e4:	94400117 	ldw	r17,4(r18)
  8079e8:	94000217 	ldw	r16,8(r18)
  8079ec:	8c7fffc4 	addi	r17,r17,-1
  8079f0:	88000d16 	blt	r17,zero,807a28 <_fwalk+0x6c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8079f4:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8079f8:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8079fc:	108000b0 	cmpltui	r2,r2,2
  807a00:	1000061e 	bne	r2,zero,807a1c <_fwalk+0x60>
  807a04:	8080038f 	ldh	r2,14(r16)
	ret |= (*function) (fp);
  807a08:	8009883a 	mov	r4,r16
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807a0c:	10bfffe0 	cmpeqi	r2,r2,-1
  807a10:	1000021e 	bne	r2,zero,807a1c <_fwalk+0x60>
	ret |= (*function) (fp);
  807a14:	983ee83a 	callr	r19
  807a18:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807a1c:	88bfffd8 	cmpnei	r2,r17,-1
  807a20:	84001a04 	addi	r16,r16,104
  807a24:	103ff31e 	bne	r2,zero,8079f4 <_fwalk+0x38>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807a28:	94800017 	ldw	r18,0(r18)
  807a2c:	903fed1e 	bne	r18,zero,8079e4 <_fwalk+0x28>

  return ret;
}
  807a30:	a005883a 	mov	r2,r20
  807a34:	dfc00517 	ldw	ra,20(sp)
  807a38:	dd000417 	ldw	r20,16(sp)
  807a3c:	dcc00317 	ldw	r19,12(sp)
  807a40:	dc800217 	ldw	r18,8(sp)
  807a44:	dc400117 	ldw	r17,4(sp)
  807a48:	dc000017 	ldw	r16,0(sp)
  807a4c:	dec00604 	addi	sp,sp,24
  807a50:	f800283a 	ret

00807a54 <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
  807a54:	defff904 	addi	sp,sp,-28
  807a58:	dd400515 	stw	r21,20(sp)
  807a5c:	dd000415 	stw	r20,16(sp)
  807a60:	dcc00315 	stw	r19,12(sp)
  807a64:	dc800215 	stw	r18,8(sp)
  807a68:	dfc00615 	stw	ra,24(sp)
  807a6c:	dc400115 	stw	r17,4(sp)
  807a70:	dc000015 	stw	r16,0(sp)
  807a74:	202b883a 	mov	r21,r4
  807a78:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807a7c:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  807a80:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807a84:	94400117 	ldw	r17,4(r18)
  807a88:	94000217 	ldw	r16,8(r18)
  807a8c:	8c7fffc4 	addi	r17,r17,-1
  807a90:	88000e16 	blt	r17,zero,807acc <_fwalk_reent+0x78>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807a94:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807a98:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807a9c:	108000b0 	cmpltui	r2,r2,2
  807aa0:	1000071e 	bne	r2,zero,807ac0 <_fwalk_reent+0x6c>
  807aa4:	8080038f 	ldh	r2,14(r16)
	ret |= (*reent_function) (ptr, fp);
  807aa8:	800b883a 	mov	r5,r16
  807aac:	a809883a 	mov	r4,r21
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807ab0:	10bfffe0 	cmpeqi	r2,r2,-1
  807ab4:	1000021e 	bne	r2,zero,807ac0 <_fwalk_reent+0x6c>
	ret |= (*reent_function) (ptr, fp);
  807ab8:	983ee83a 	callr	r19
  807abc:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807ac0:	88bfffd8 	cmpnei	r2,r17,-1
  807ac4:	84001a04 	addi	r16,r16,104
  807ac8:	103ff21e 	bne	r2,zero,807a94 <_fwalk_reent+0x40>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807acc:	94800017 	ldw	r18,0(r18)
  807ad0:	903fec1e 	bne	r18,zero,807a84 <_fwalk_reent+0x30>

  return ret;
}
  807ad4:	a005883a 	mov	r2,r20
  807ad8:	dfc00617 	ldw	ra,24(sp)
  807adc:	dd400517 	ldw	r21,20(sp)
  807ae0:	dd000417 	ldw	r20,16(sp)
  807ae4:	dcc00317 	ldw	r19,12(sp)
  807ae8:	dc800217 	ldw	r18,8(sp)
  807aec:	dc400117 	ldw	r17,4(sp)
  807af0:	dc000017 	ldw	r16,0(sp)
  807af4:	dec00704 	addi	sp,sp,28
  807af8:	f800283a 	ret

00807afc <__localeconv_l>:
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
}
  807afc:	20803c04 	addi	r2,r4,240
  807b00:	f800283a 	ret

00807b04 <_localeconv_r>:
{
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
}
  807b04:	00802074 	movhi	r2,129
  807b08:	108d9804 	addi	r2,r2,13920
  807b0c:	f800283a 	ret

00807b10 <localeconv>:
#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
  return __localeconv_l (__get_current_locale ());
}
  807b10:	00802074 	movhi	r2,129
  807b14:	108d9804 	addi	r2,r2,13920
  807b18:	f800283a 	ret

00807b1c <_setlocale_r>:
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
  807b1c:	30001626 	beq	r6,zero,807b78 <_setlocale_r+0x5c>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b20:	01402074 	movhi	r5,129
{
  807b24:	defffe04 	addi	sp,sp,-8
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b28:	294b2904 	addi	r5,r5,11428
  807b2c:	3009883a 	mov	r4,r6
{
  807b30:	dc000015 	stw	r16,0(sp)
  807b34:	dfc00115 	stw	ra,4(sp)
  807b38:	3021883a 	mov	r16,r6
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b3c:	080a3380 	call	80a338 <strcmp>
  807b40:	1000061e 	bne	r2,zero,807b5c <_setlocale_r+0x40>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
  807b44:	00802074 	movhi	r2,129
  807b48:	108b2804 	addi	r2,r2,11424
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
  807b4c:	dfc00117 	ldw	ra,4(sp)
  807b50:	dc000017 	ldw	r16,0(sp)
  807b54:	dec00204 	addi	sp,sp,8
  807b58:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b5c:	80800003 	ldbu	r2,0(r16)
  807b60:	10bfef44 	addi	r2,r2,-67
  807b64:	10000726 	beq	r2,zero,807b84 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
  807b68:	80800003 	ldbu	r2,0(r16)
  807b6c:	103ff526 	beq	r2,zero,807b44 <_setlocale_r+0x28>
        return NULL;
  807b70:	0005883a 	mov	r2,zero
  807b74:	003ff506 	br	807b4c <_setlocale_r+0x30>
  return "C";
  807b78:	00802074 	movhi	r2,129
  807b7c:	108b2804 	addi	r2,r2,11424
}
  807b80:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b84:	80800043 	ldbu	r2,1(r16)
  807b88:	103fee26 	beq	r2,zero,807b44 <_setlocale_r+0x28>
  807b8c:	003ff606 	br	807b68 <_setlocale_r+0x4c>

00807b90 <__locale_mb_cur_max>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
#endif
}
  807b90:	00802074 	movhi	r2,129
  807b94:	108da607 	ldb	r2,13976(r2)
  807b98:	f800283a 	ret

00807b9c <setlocale>:
  if (locale)
  807b9c:	28001626 	beq	r5,zero,807bf8 <setlocale+0x5c>
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
  807ba0:	defffe04 	addi	sp,sp,-8
  807ba4:	dc000015 	stw	r16,0(sp)
  807ba8:	2821883a 	mov	r16,r5
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807bac:	01402074 	movhi	r5,129
  807bb0:	294b2904 	addi	r5,r5,11428
  807bb4:	8009883a 	mov	r4,r16
{
  807bb8:	dfc00115 	stw	ra,4(sp)
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807bbc:	080a3380 	call	80a338 <strcmp>
  807bc0:	1000061e 	bne	r2,zero,807bdc <setlocale+0x40>
  return "C";
  807bc4:	00802074 	movhi	r2,129
  807bc8:	108b2804 	addi	r2,r2,11424
  return _setlocale_r (_REENT, category, locale);
}
  807bcc:	dfc00117 	ldw	ra,4(sp)
  807bd0:	dc000017 	ldw	r16,0(sp)
  807bd4:	dec00204 	addi	sp,sp,8
  807bd8:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807bdc:	80800003 	ldbu	r2,0(r16)
  807be0:	10bfef44 	addi	r2,r2,-67
  807be4:	10000726 	beq	r2,zero,807c04 <setlocale+0x68>
	  && strcmp (locale, ""))
  807be8:	80800003 	ldbu	r2,0(r16)
  807bec:	103ff526 	beq	r2,zero,807bc4 <setlocale+0x28>
        return NULL;
  807bf0:	0005883a 	mov	r2,zero
  807bf4:	003ff506 	br	807bcc <setlocale+0x30>
  return "C";
  807bf8:	00802074 	movhi	r2,129
  807bfc:	108b2804 	addi	r2,r2,11424
}
  807c00:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807c04:	80800043 	ldbu	r2,1(r16)
  807c08:	103fee26 	beq	r2,zero,807bc4 <setlocale+0x28>
  807c0c:	003ff606 	br	807be8 <setlocale+0x4c>

00807c10 <__smakebuf_r>:
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
  807c10:	2880030b 	ldhu	r2,12(r5)
{
  807c14:	deffe804 	addi	sp,sp,-96
  807c18:	dc001215 	stw	r16,72(sp)
  807c1c:	dfc01715 	stw	ra,92(sp)
  807c20:	dd001615 	stw	r20,88(sp)
  807c24:	dcc01515 	stw	r19,84(sp)
  807c28:	dc801415 	stw	r18,80(sp)
  807c2c:	dc401315 	stw	r17,76(sp)
  if (fp->_flags & __SNBF)
  807c30:	10c0008c 	andi	r3,r2,2
{
  807c34:	2821883a 	mov	r16,r5
  if (fp->_flags & __SNBF)
  807c38:	18000d26 	beq	r3,zero,807c70 <__smakebuf_r+0x60>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
  807c3c:	288010c4 	addi	r2,r5,67
  807c40:	28800015 	stw	r2,0(r5)
  807c44:	28800415 	stw	r2,16(r5)
      fp->_bf._size = 1;
  807c48:	00800044 	movi	r2,1
  807c4c:	28800515 	stw	r2,20(r5)
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
      fp->_flags |= flags;
    }
}
  807c50:	dfc01717 	ldw	ra,92(sp)
  807c54:	dd001617 	ldw	r20,88(sp)
  807c58:	dcc01517 	ldw	r19,84(sp)
  807c5c:	dc801417 	ldw	r18,80(sp)
  807c60:	dc401317 	ldw	r17,76(sp)
  807c64:	dc001217 	ldw	r16,72(sp)
  807c68:	dec01804 	addi	sp,sp,96
  807c6c:	f800283a 	ret

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807c70:	2940038f 	ldh	r5,14(r5)
  807c74:	2023883a 	mov	r17,r4
  807c78:	28002816 	blt	r5,zero,807d1c <__smakebuf_r+0x10c>
  807c7c:	d80d883a 	mov	r6,sp
  807c80:	080bf240 	call	80bf24 <_fstat_r>
  807c84:	10002416 	blt	r2,zero,807d18 <__smakebuf_r+0x108>
        *bufsize = BUFSIZ;
      return (0);
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
  807c88:	d8800117 	ldw	r2,4(sp)
  807c8c:	10bc000c 	andi	r2,r2,61440
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
  807c90:	10880018 	cmpnei	r2,r2,8192
  807c94:	1000461e 	bne	r2,zero,807db0 <__smakebuf_r+0x1a0>
  807c98:	8140038f 	ldh	r5,14(r16)
  807c9c:	8809883a 	mov	r4,r17
  807ca0:	080bf7c0 	call	80bf7c <_isatty_r>
  807ca4:	10003e26 	beq	r2,zero,807da0 <__smakebuf_r+0x190>
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  807ca8:	8080030b 	ldhu	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  807cac:	80c010c4 	addi	r3,r16,67
  807cb0:	80c00015 	stw	r3,0(r16)
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  807cb4:	10800054 	ori	r2,r2,1
  807cb8:	8080030d 	sth	r2,12(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  807cbc:	00800044 	movi	r2,1
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  807cc0:	80c00415 	stw	r3,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  807cc4:	80800515 	stw	r2,20(r16)
  807cc8:	04c00044 	movi	r19,1
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
  807ccc:	05010004 	movi	r20,1024
  return (snpt);
  807cd0:	04820004 	movi	r18,2048
  if ((p = _malloc_r (ptr, size)) == NULL)
  807cd4:	a00b883a 	mov	r5,r20
  807cd8:	8809883a 	mov	r4,r17
  807cdc:	0807e580 	call	807e58 <_malloc_r>
  807ce0:	10001726 	beq	r2,zero,807d40 <__smakebuf_r+0x130>
      fp->_flags |= __SMBF;
  807ce4:	80c0030b 	ldhu	r3,12(r16)
      ptr->__cleanup = _cleanup_r;
  807ce8:	01002034 	movhi	r4,128
  807cec:	211b5504 	addi	r4,r4,27988
  807cf0:	89000f15 	stw	r4,60(r17)
      fp->_flags |= __SMBF;
  807cf4:	18c02014 	ori	r3,r3,128
  807cf8:	80c0030d 	sth	r3,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
  807cfc:	80800015 	stw	r2,0(r16)
  807d00:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
  807d04:	85000515 	stw	r20,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807d08:	98001d1e 	bne	r19,zero,807d80 <__smakebuf_r+0x170>
      fp->_flags |= flags;
  807d0c:	90c6b03a 	or	r3,r18,r3
  807d10:	80c0030d 	sth	r3,12(r16)
  807d14:	003fce06 	br	807c50 <__smakebuf_r+0x40>
      if (fp->_flags & __SMBF)
  807d18:	8080030b 	ldhu	r2,12(r16)
  807d1c:	1080200c 	andi	r2,r2,128
      *couldbetty = 0;
  807d20:	0027883a 	mov	r19,zero
      if (fp->_flags & __SMBF)
  807d24:	10001326 	beq	r2,zero,807d74 <__smakebuf_r+0x164>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807d28:	05001004 	movi	r20,64
  if ((p = _malloc_r (ptr, size)) == NULL)
  807d2c:	a00b883a 	mov	r5,r20
  807d30:	8809883a 	mov	r4,r17
  807d34:	0025883a 	mov	r18,zero
  807d38:	0807e580 	call	807e58 <_malloc_r>
  807d3c:	103fe91e 	bne	r2,zero,807ce4 <__smakebuf_r+0xd4>
      if (!(fp->_flags & __SSTR))
  807d40:	8080030b 	ldhu	r2,12(r16)
  807d44:	10c0800c 	andi	r3,r2,512
  807d48:	183fc11e 	bne	r3,zero,807c50 <__smakebuf_r+0x40>
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  807d4c:	00ffff04 	movi	r3,-4
  807d50:	10c4703a 	and	r2,r2,r3
  807d54:	10800094 	ori	r2,r2,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807d58:	80c010c4 	addi	r3,r16,67
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  807d5c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._size = 1;
  807d60:	00800044 	movi	r2,1
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807d64:	80c00015 	stw	r3,0(r16)
  807d68:	80c00415 	stw	r3,16(r16)
	  fp->_bf._size = 1;
  807d6c:	80800515 	stw	r2,20(r16)
  807d70:	003fb706 	br	807c50 <__smakebuf_r+0x40>
        *bufsize = BUFSIZ;
  807d74:	05010004 	movi	r20,1024
  807d78:	0025883a 	mov	r18,zero
  807d7c:	003fd506 	br	807cd4 <__smakebuf_r+0xc4>
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807d80:	8140038f 	ldh	r5,14(r16)
  807d84:	8809883a 	mov	r4,r17
  807d88:	080bf7c0 	call	80bf7c <_isatty_r>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  807d8c:	80c0030b 	ldhu	r3,12(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807d90:	103fde26 	beq	r2,zero,807d0c <__smakebuf_r+0xfc>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  807d94:	18ffff0c 	andi	r3,r3,65532
  807d98:	18c00054 	ori	r3,r3,1
  807d9c:	003fdb06 	br	807d0c <__smakebuf_r+0xfc>
  807da0:	04c00044 	movi	r19,1
  *bufsize = BUFSIZ;
  807da4:	05010004 	movi	r20,1024
  return (snpt);
  807da8:	04820004 	movi	r18,2048
  807dac:	003fc906 	br	807cd4 <__smakebuf_r+0xc4>
  807db0:	0027883a 	mov	r19,zero
  *bufsize = BUFSIZ;
  807db4:	05010004 	movi	r20,1024
  return (snpt);
  807db8:	04820004 	movi	r18,2048
  807dbc:	003fc506 	br	807cd4 <__smakebuf_r+0xc4>

00807dc0 <__swhatbuf_r>:
{
  807dc0:	deffea04 	addi	sp,sp,-88
  807dc4:	dc001215 	stw	r16,72(sp)
  807dc8:	2821883a 	mov	r16,r5
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807dcc:	2940038f 	ldh	r5,14(r5)
{
  807dd0:	dc801415 	stw	r18,80(sp)
  807dd4:	dc401315 	stw	r17,76(sp)
  807dd8:	dfc01515 	stw	ra,84(sp)
  807ddc:	3023883a 	mov	r17,r6
  807de0:	3825883a 	mov	r18,r7
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807de4:	28001016 	blt	r5,zero,807e28 <__swhatbuf_r+0x68>
  807de8:	d80d883a 	mov	r6,sp
  807dec:	080bf240 	call	80bf24 <_fstat_r>
  807df0:	10000d16 	blt	r2,zero,807e28 <__swhatbuf_r+0x68>
  *couldbetty = S_ISCHR(st.st_mode);
  807df4:	d8c00117 	ldw	r3,4(sp)
  return (snpt);
  807df8:	00820004 	movi	r2,2048
  *couldbetty = S_ISCHR(st.st_mode);
  807dfc:	18fc000c 	andi	r3,r3,61440
  807e00:	18c80020 	cmpeqi	r3,r3,8192
  807e04:	90c00015 	stw	r3,0(r18)
  *bufsize = BUFSIZ;
  807e08:	00c10004 	movi	r3,1024
  807e0c:	88c00015 	stw	r3,0(r17)
}
  807e10:	dfc01517 	ldw	ra,84(sp)
  807e14:	dc801417 	ldw	r18,80(sp)
  807e18:	dc401317 	ldw	r17,76(sp)
  807e1c:	dc001217 	ldw	r16,72(sp)
  807e20:	dec01604 	addi	sp,sp,88
  807e24:	f800283a 	ret
  807e28:	8080030b 	ldhu	r2,12(r16)
      *couldbetty = 0;
  807e2c:	90000015 	stw	zero,0(r18)
      if (fp->_flags & __SMBF)
  807e30:	1080200c 	andi	r2,r2,128
  807e34:	10000426 	beq	r2,zero,807e48 <__swhatbuf_r+0x88>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807e38:	00801004 	movi	r2,64
  807e3c:	88800015 	stw	r2,0(r17)
  807e40:	0005883a 	mov	r2,zero
  807e44:	003ff206 	br	807e10 <__swhatbuf_r+0x50>
        *bufsize = BUFSIZ;
  807e48:	00810004 	movi	r2,1024
  807e4c:	88800015 	stw	r2,0(r17)
  807e50:	0005883a 	mov	r2,zero
  807e54:	003fee06 	br	807e10 <__swhatbuf_r+0x50>

00807e58 <_malloc_r>:
{
  807e58:	defff604 	addi	sp,sp,-40
  807e5c:	dc400115 	stw	r17,4(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807e60:	2c4002c4 	addi	r17,r5,11
{
  807e64:	dc800215 	stw	r18,8(sp)
  807e68:	dfc00915 	stw	ra,36(sp)
  807e6c:	df000815 	stw	fp,32(sp)
  807e70:	ddc00715 	stw	r23,28(sp)
  807e74:	dd800615 	stw	r22,24(sp)
  807e78:	dd400515 	stw	r21,20(sp)
  807e7c:	dd000415 	stw	r20,16(sp)
  807e80:	dcc00315 	stw	r19,12(sp)
  807e84:	dc000015 	stw	r16,0(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807e88:	888005e8 	cmpgeui	r2,r17,23
{
  807e8c:	2025883a 	mov	r18,r4
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807e90:	10001b1e 	bne	r2,zero,807f00 <_malloc_r+0xa8>
  if (nb > INT_MAX || nb < bytes)
  807e94:	29400468 	cmpgeui	r5,r5,17
  807e98:	2800821e 	bne	r5,zero,8080a4 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807e9c:	08104140 	call	810414 <__malloc_lock>
  807ea0:	04400404 	movi	r17,16
  807ea4:	00800604 	movi	r2,24
  807ea8:	01c00084 	movi	r7,2
    q = bin_at(idx);
  807eac:	04c02074 	movhi	r19,129
  807eb0:	9ccdb704 	addi	r19,r19,14044
  807eb4:	9885883a 	add	r2,r19,r2
    victim = last(q);
  807eb8:	14000117 	ldw	r16,4(r2)
    q = bin_at(idx);
  807ebc:	10fffe04 	addi	r3,r2,-8
    if (victim == q)
  807ec0:	80c08b26 	beq	r16,r3,8080f0 <_malloc_r+0x298>
      victim_size = chunksize(victim);
  807ec4:	80800117 	ldw	r2,4(r16)
      unlink(victim, bck, fwd);
  807ec8:	81000317 	ldw	r4,12(r16)
      victim_size = chunksize(victim);
  807ecc:	00ffff04 	movi	r3,-4
  807ed0:	10c4703a 	and	r2,r2,r3
        unlink(victim, bck, fwd);
  807ed4:	81400217 	ldw	r5,8(r16)
        set_inuse_bit_at_offset(victim, victim_size);
  807ed8:	8085883a 	add	r2,r16,r2
  807edc:	10c00117 	ldw	r3,4(r2)
        unlink(victim, bck, fwd);
  807ee0:	29000315 	stw	r4,12(r5)
  807ee4:	21400215 	stw	r5,8(r4)
        set_inuse_bit_at_offset(victim, victim_size);
  807ee8:	18c00054 	ori	r3,r3,1
  807eec:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
  807ef0:	9009883a 	mov	r4,r18
  807ef4:	08104380 	call	810438 <__malloc_unlock>
        return chunk2mem(victim);
  807ef8:	80800204 	addi	r2,r16,8
  807efc:	00006c06 	br	8080b0 <_malloc_r+0x258>
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807f00:	00bffe04 	movi	r2,-8
  807f04:	88a2703a 	and	r17,r17,r2
  if (nb > INT_MAX || nb < bytes)
  807f08:	88006616 	blt	r17,zero,8080a4 <_malloc_r+0x24c>
  807f0c:	89406536 	bltu	r17,r5,8080a4 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807f10:	08104140 	call	810414 <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
  807f14:	88807e28 	cmpgeui	r2,r17,504
  807f18:	10011b26 	beq	r2,zero,808388 <_malloc_r+0x530>
    idx = bin_index(nb);
  807f1c:	8804d27a 	srli	r2,r17,9
  807f20:	10006f26 	beq	r2,zero,8080e0 <_malloc_r+0x288>
  807f24:	10c00168 	cmpgeui	r3,r2,5
  807f28:	1800f71e 	bne	r3,zero,808308 <_malloc_r+0x4b0>
  807f2c:	8804d1ba 	srli	r2,r17,6
    bin = bin_at(idx);
  807f30:	11c00e44 	addi	r7,r2,57
  807f34:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807f38:	12000e04 	addi	r8,r2,56
    bin = bin_at(idx);
  807f3c:	04c02074 	movhi	r19,129
  807f40:	9ccdb704 	addi	r19,r19,14044
  807f44:	9909883a 	add	r4,r19,r4
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807f48:	24000117 	ldw	r16,4(r4)
    bin = bin_at(idx);
  807f4c:	213ffe04 	addi	r4,r4,-8
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807f50:	24000b26 	beq	r4,r16,807f80 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807f54:	01bfff04 	movi	r6,-4
  807f58:	00000306 	br	807f68 <_malloc_r+0x110>
      else if (remainder_size >= 0) /* exact fit */
  807f5c:	1800cf0e 	bge	r3,zero,80829c <_malloc_r+0x444>
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807f60:	84000317 	ldw	r16,12(r16)
  807f64:	24000626 	beq	r4,r16,807f80 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807f68:	80800117 	ldw	r2,4(r16)
  807f6c:	1184703a 	and	r2,r2,r6
      remainder_size = long_sub_size_t(victim_size, nb);
  807f70:	1447c83a 	sub	r3,r2,r17
      if (remainder_size >= (long)MINSIZE) /* too big */
  807f74:	19400408 	cmpgei	r5,r3,16
  807f78:	283ff826 	beq	r5,zero,807f5c <_malloc_r+0x104>
  807f7c:	400f883a 	mov	r7,r8
  if ( (victim = last_remainder->fd) != last_remainder)
  807f80:	9c000417 	ldw	r16,16(r19)
  807f84:	02402074 	movhi	r9,129
  807f88:	4a4db904 	addi	r9,r9,14052
  807f8c:	82405f26 	beq	r16,r9,80810c <_malloc_r+0x2b4>
    victim_size = chunksize(victim);
  807f90:	80c00117 	ldw	r3,4(r16)
  807f94:	00bfff04 	movi	r2,-4
  807f98:	1884703a 	and	r2,r3,r2
    remainder_size = long_sub_size_t(victim_size, nb);
  807f9c:	1447c83a 	sub	r3,r2,r17
    if (remainder_size >= (long)MINSIZE) /* re-split */
  807fa0:	19000410 	cmplti	r4,r3,16
  807fa4:	20010326 	beq	r4,zero,8083b4 <_malloc_r+0x55c>
    clear_last_remainder;
  807fa8:	9a400515 	stw	r9,20(r19)
  807fac:	9a400415 	stw	r9,16(r19)
    if (remainder_size >= 0)  /* exhaust */
  807fb0:	1800f80e 	bge	r3,zero,808394 <_malloc_r+0x53c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807fb4:	10c08028 	cmpgeui	r3,r2,512
  807fb8:	1800ba1e 	bne	r3,zero,8082a4 <_malloc_r+0x44c>
  807fbc:	1006d0fa 	srli	r3,r2,3
  807fc0:	1008d17a 	srli	r4,r2,5
  807fc4:	00800044 	movi	r2,1
  807fc8:	18c00044 	addi	r3,r3,1
  807fcc:	180690fa 	slli	r3,r3,3
  807fd0:	99400117 	ldw	r5,4(r19)
  807fd4:	1104983a 	sll	r2,r2,r4
  807fd8:	98c7883a 	add	r3,r19,r3
  807fdc:	19000017 	ldw	r4,0(r3)
  807fe0:	1144b03a 	or	r2,r2,r5
  807fe4:	197ffe04 	addi	r5,r3,-8
  807fe8:	81400315 	stw	r5,12(r16)
  807fec:	81000215 	stw	r4,8(r16)
  807ff0:	98800115 	stw	r2,4(r19)
  807ff4:	1c000015 	stw	r16,0(r3)
  807ff8:	24000315 	stw	r16,12(r4)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  807ffc:	3807d0ba 	srai	r3,r7,2
  808000:	01000044 	movi	r4,1
  808004:	20c8983a 	sll	r4,r4,r3
  808008:	11004536 	bltu	r2,r4,808120 <_malloc_r+0x2c8>
    if ( (block & binblocks) == 0) 
  80800c:	2086703a 	and	r3,r4,r2
  808010:	18000a1e 	bne	r3,zero,80803c <_malloc_r+0x1e4>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  808014:	00ffff04 	movi	r3,-4
      block <<= 1;
  808018:	2109883a 	add	r4,r4,r4
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  80801c:	38ce703a 	and	r7,r7,r3
      while ((block & binblocks) == 0)
  808020:	2086703a 	and	r3,r4,r2
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  808024:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  808028:	1800041e 	bne	r3,zero,80803c <_malloc_r+0x1e4>
        block <<= 1;
  80802c:	2109883a 	add	r4,r4,r4
      while ((block & binblocks) == 0)
  808030:	2086703a 	and	r3,r4,r2
        idx += BINBLOCKWIDTH;
  808034:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  808038:	183ffc26 	beq	r3,zero,80802c <_malloc_r+0x1d4>
          victim_size = chunksize(victim);
  80803c:	02bfff04 	movi	r10,-4
      q = bin = bin_at(idx);
  808040:	381690fa 	slli	r11,r7,3
  808044:	3819883a 	mov	r12,r7
  808048:	9ad7883a 	add	r11,r19,r11
  80804c:	5811883a 	mov	r8,r11
        for (victim = last(bin); victim != bin; victim = victim->bk)
  808050:	40800317 	ldw	r2,12(r8)
  808054:	4080b526 	beq	r8,r2,80832c <_malloc_r+0x4d4>
          victim_size = chunksize(victim);
  808058:	10c00117 	ldw	r3,4(r2)
  80805c:	1021883a 	mov	r16,r2
            unlink(victim, bck, fwd);
  808060:	10800317 	ldw	r2,12(r2)
          victim_size = chunksize(victim);
  808064:	1a86703a 	and	r3,r3,r10
          remainder_size = long_sub_size_t(victim_size, nb);
  808068:	1c4bc83a 	sub	r5,r3,r17
          if (remainder_size >= (long)MINSIZE) /* split */
  80806c:	29800410 	cmplti	r6,r5,16
  808070:	3000b326 	beq	r6,zero,808340 <_malloc_r+0x4e8>
          else if (remainder_size >= 0)  /* take */
  808074:	283ff716 	blt	r5,zero,808054 <_malloc_r+0x1fc>
            set_inuse_bit_at_offset(victim, victim_size);
  808078:	80c7883a 	add	r3,r16,r3
  80807c:	19400117 	ldw	r5,4(r3)
            unlink(victim, bck, fwd);
  808080:	81800217 	ldw	r6,8(r16)
	    MALLOC_UNLOCK;
  808084:	9009883a 	mov	r4,r18
            set_inuse_bit_at_offset(victim, victim_size);
  808088:	29400054 	ori	r5,r5,1
  80808c:	19400115 	stw	r5,4(r3)
            unlink(victim, bck, fwd);
  808090:	30800315 	stw	r2,12(r6)
  808094:	11800215 	stw	r6,8(r2)
	    MALLOC_UNLOCK;
  808098:	08104380 	call	810438 <__malloc_unlock>
            return chunk2mem(victim);
  80809c:	80800204 	addi	r2,r16,8
  8080a0:	00000306 	br	8080b0 <_malloc_r+0x258>
    RERRNO = ENOMEM;
  8080a4:	00800304 	movi	r2,12
  8080a8:	90800015 	stw	r2,0(r18)
    return 0;
  8080ac:	0005883a 	mov	r2,zero
}
  8080b0:	dfc00917 	ldw	ra,36(sp)
  8080b4:	df000817 	ldw	fp,32(sp)
  8080b8:	ddc00717 	ldw	r23,28(sp)
  8080bc:	dd800617 	ldw	r22,24(sp)
  8080c0:	dd400517 	ldw	r21,20(sp)
  8080c4:	dd000417 	ldw	r20,16(sp)
  8080c8:	dcc00317 	ldw	r19,12(sp)
  8080cc:	dc800217 	ldw	r18,8(sp)
  8080d0:	dc400117 	ldw	r17,4(sp)
  8080d4:	dc000017 	ldw	r16,0(sp)
  8080d8:	dec00a04 	addi	sp,sp,40
  8080dc:	f800283a 	ret
  8080e0:	01008004 	movi	r4,512
  8080e4:	01c01004 	movi	r7,64
    idx = bin_index(nb);
  8080e8:	02000fc4 	movi	r8,63
  8080ec:	003f9306 	br	807f3c <_malloc_r+0xe4>
      victim = last(q);
  8080f0:	14000317 	ldw	r16,12(r2)
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
  8080f4:	39c00084 	addi	r7,r7,2
    if (victim != q)
  8080f8:	143f721e 	bne	r2,r16,807ec4 <_malloc_r+0x6c>
  if ( (victim = last_remainder->fd) != last_remainder)
  8080fc:	9c000417 	ldw	r16,16(r19)
  808100:	02402074 	movhi	r9,129
  808104:	4a4db904 	addi	r9,r9,14052
  808108:	827fa11e 	bne	r16,r9,807f90 <_malloc_r+0x138>
  if ( (block = idx2binblock(idx)) <= binblocks)  
  80810c:	3807d0ba 	srai	r3,r7,2
  808110:	01000044 	movi	r4,1
  808114:	98800117 	ldw	r2,4(r19)
  808118:	20c8983a 	sll	r4,r4,r3
  80811c:	113fbb2e 	bgeu	r2,r4,80800c <_malloc_r+0x1b4>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  808120:	9c000217 	ldw	r16,8(r19)
  808124:	00bfff04 	movi	r2,-4
  808128:	85400117 	ldw	r21,4(r16)
  80812c:	a8ac703a 	and	r22,r21,r2
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  808130:	b4400336 	bltu	r22,r17,808140 <_malloc_r+0x2e8>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  808134:	b445c83a 	sub	r2,r22,r17
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  808138:	10c00408 	cmpgei	r3,r2,16
  80813c:	18004d1e 	bne	r3,zero,808274 <_malloc_r+0x41c>
  if (sbrk_base != (char*)(-1))
  808140:	d0a00a17 	ldw	r2,-32728(gp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  808144:	d5671717 	ldw	r21,-25508(gp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
  808148:	85b9883a 	add	fp,r16,r22
  if (sbrk_base != (char*)(-1))
  80814c:	10bfffd8 	cmpnei	r2,r2,-1
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  808150:	8d6b883a 	add	r21,r17,r21
  if (sbrk_base != (char*)(-1))
  808154:	1000d126 	beq	r2,zero,80849c <_malloc_r+0x644>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
  808158:	ad4403c4 	addi	r21,r21,4111
  80815c:	00bc0004 	movi	r2,-4096
  808160:	a8aa703a 	and	r21,r21,r2
  brk = (char*)(MORECORE (sbrk_size));
  808164:	a80b883a 	mov	r5,r21
  808168:	9009883a 	mov	r4,r18
  80816c:	080a1a80 	call	80a1a8 <_sbrk_r>
  808170:	102f883a 	mov	r23,r2
  if (brk == (char*)(MORECORE_FAILURE) || 
  808174:	10bfffd8 	cmpnei	r2,r2,-1
  808178:	1000a326 	beq	r2,zero,808408 <_malloc_r+0x5b0>
  80817c:	bf00a136 	bltu	r23,fp,808404 <_malloc_r+0x5ac>
  sbrked_mem += sbrk_size;
  808180:	00802074 	movhi	r2,129
  808184:	151a5b17 	ldw	r20,26988(r2)
  808188:	ad29883a 	add	r20,r21,r20
  80818c:	151a5b15 	stw	r20,26988(r2)
  808190:	a007883a 	mov	r3,r20
  if (brk == old_end /* can just add bytes to current top, unless
  808194:	e5c0e726 	beq	fp,r23,808534 <_malloc_r+0x6dc>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
  808198:	d0a00a17 	ldw	r2,-32728(gp)
  80819c:	10bfffd8 	cmpnei	r2,r2,-1
  8081a0:	1000eb26 	beq	r2,zero,808550 <_malloc_r+0x6f8>
      sbrked_mem += brk - (char*)old_end;
  8081a4:	bf39c83a 	sub	fp,r23,fp
  8081a8:	e0c7883a 	add	r3,fp,r3
  8081ac:	00802074 	movhi	r2,129
  8081b0:	10da5b15 	stw	r3,26988(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
  8081b4:	bf0001cc 	andi	fp,r23,7
    if (front_misalign > 0) 
  8081b8:	e000c126 	beq	fp,zero,8084c0 <_malloc_r+0x668>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
  8081bc:	bf2fc83a 	sub	r23,r23,fp
      brk += correction;
  8081c0:	bdc00204 	addi	r23,r23,8
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  8081c4:	05040204 	movi	r20,4104
  8081c8:	a729c83a 	sub	r20,r20,fp
  8081cc:	bd6b883a 	add	r21,r23,r21
    correction &= (pagesz - 1);
  8081d0:	a569c83a 	sub	r20,r20,r21
  8081d4:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  8081d8:	a00b883a 	mov	r5,r20
  8081dc:	9009883a 	mov	r4,r18
  8081e0:	080a1a80 	call	80a1a8 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  8081e4:	10ffffe0 	cmpeqi	r3,r2,-1
  8081e8:	1800ee1e 	bne	r3,zero,8085a4 <_malloc_r+0x74c>
    top_size = new_brk - brk + correction;
  8081ec:	15c5c83a 	sub	r2,r2,r23
  8081f0:	152b883a 	add	r21,r2,r20
    sbrked_mem += correction;
  8081f4:	00802074 	movhi	r2,129
  8081f8:	115a5b17 	ldw	r5,26988(r2)
    top = (mchunkptr)brk;
  8081fc:	9dc00215 	stw	r23,8(r19)
    set_head(top, top_size | PREV_INUSE);
  808200:	ad400054 	ori	r21,r21,1
    sbrked_mem += correction;
  808204:	a169883a 	add	r20,r20,r5
  808208:	151a5b15 	stw	r20,26988(r2)
    set_head(top, top_size | PREV_INUSE);
  80820c:	bd400115 	stw	r21,4(r23)
    if (old_top != initial_top)
  808210:	84c0d126 	beq	r16,r19,808558 <_malloc_r+0x700>
      if (old_top_size < MINSIZE) 
  808214:	b0800428 	cmpgeui	r2,r22,16
  808218:	1000d126 	beq	r2,zero,808560 <_malloc_r+0x708>
      set_head_size(old_top, old_top_size);
  80821c:	80c00117 	ldw	r3,4(r16)
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
  808220:	013ffe04 	movi	r4,-8
  808224:	b0bffd04 	addi	r2,r22,-12
  808228:	1104703a 	and	r2,r2,r4
      set_head_size(old_top, old_top_size);
  80822c:	18c0004c 	andi	r3,r3,1
  808230:	1886b03a 	or	r3,r3,r2
  808234:	80c00115 	stw	r3,4(r16)
      chunk_at_offset(old_top, old_top_size          )->size =
  808238:	01000144 	movi	r4,5
  80823c:	8087883a 	add	r3,r16,r2
  808240:	19000115 	stw	r4,4(r3)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
  808244:	19000215 	stw	r4,8(r3)
      if (old_top_size >= MINSIZE) 
  808248:	10800428 	cmpgeui	r2,r2,16
  80824c:	1000da1e 	bne	r2,zero,8085b8 <_malloc_r+0x760>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  808250:	bd400117 	ldw	r21,4(r23)
  808254:	b821883a 	mov	r16,r23
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  808258:	d0a71617 	ldw	r2,-25512(gp)
  80825c:	1500012e 	bgeu	r2,r20,808264 <_malloc_r+0x40c>
    max_sbrked_mem = sbrked_mem;
  808260:	d5271615 	stw	r20,-25512(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
  808264:	d0a71517 	ldw	r2,-25516(gp)
  808268:	1500692e 	bgeu	r2,r20,808410 <_malloc_r+0x5b8>
    max_total_mem = sbrked_mem;
  80826c:	d5271515 	stw	r20,-25516(gp)
  808270:	00006706 	br	808410 <_malloc_r+0x5b8>
  set_head(victim, nb | PREV_INUSE);
  808274:	88c00054 	ori	r3,r17,1
  808278:	80c00115 	stw	r3,4(r16)
  top = chunk_at_offset(victim, nb);
  80827c:	8463883a 	add	r17,r16,r17
  set_head(top, remainder_size | PREV_INUSE);
  808280:	10800054 	ori	r2,r2,1
  top = chunk_at_offset(victim, nb);
  808284:	9c400215 	stw	r17,8(r19)
  set_head(top, remainder_size | PREV_INUSE);
  808288:	88800115 	stw	r2,4(r17)
  MALLOC_UNLOCK;
  80828c:	9009883a 	mov	r4,r18
  808290:	08104380 	call	810438 <__malloc_unlock>
  return chunk2mem(victim);
  808294:	80800204 	addi	r2,r16,8
  808298:	003f8506 	br	8080b0 <_malloc_r+0x258>
        unlink(victim, bck, fwd);
  80829c:	81000317 	ldw	r4,12(r16)
  8082a0:	003f0c06 	br	807ed4 <_malloc_r+0x7c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8082a4:	1006d27a 	srli	r3,r2,9
  8082a8:	19000168 	cmpgeui	r4,r3,5
  8082ac:	20005026 	beq	r4,zero,8083f0 <_malloc_r+0x598>
  8082b0:	19000568 	cmpgeui	r4,r3,21
  8082b4:	20008c1e 	bne	r4,zero,8084e8 <_malloc_r+0x690>
  8082b8:	19401704 	addi	r5,r3,92
  8082bc:	280a90fa 	slli	r5,r5,3
  8082c0:	190016c4 	addi	r4,r3,91
  8082c4:	994b883a 	add	r5,r19,r5
  8082c8:	28c00017 	ldw	r3,0(r5)
  8082cc:	297ffe04 	addi	r5,r5,-8
  8082d0:	28c07426 	beq	r5,r3,8084a4 <_malloc_r+0x64c>
  8082d4:	01bfff04 	movi	r6,-4
  8082d8:	19000117 	ldw	r4,4(r3)
  8082dc:	2188703a 	and	r4,r4,r6
  8082e0:	1100022e 	bgeu	r2,r4,8082ec <_malloc_r+0x494>
  8082e4:	18c00217 	ldw	r3,8(r3)
  8082e8:	28fffb1e 	bne	r5,r3,8082d8 <_malloc_r+0x480>
  8082ec:	19400317 	ldw	r5,12(r3)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8082f0:	98800117 	ldw	r2,4(r19)
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8082f4:	81400315 	stw	r5,12(r16)
  8082f8:	80c00215 	stw	r3,8(r16)
  8082fc:	2c000215 	stw	r16,8(r5)
  808300:	1c000315 	stw	r16,12(r3)
  808304:	003f3d06 	br	807ffc <_malloc_r+0x1a4>
    idx = bin_index(nb);
  808308:	10c00568 	cmpgeui	r3,r2,21
  80830c:	18004a26 	beq	r3,zero,808438 <_malloc_r+0x5e0>
  808310:	10c01568 	cmpgeui	r3,r2,85
  808314:	18007b1e 	bne	r3,zero,808504 <_malloc_r+0x6ac>
  808318:	8804d33a 	srli	r2,r17,12
    bin = bin_at(idx);
  80831c:	11c01bc4 	addi	r7,r2,111
  808320:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808324:	12001b84 	addi	r8,r2,110
  808328:	003f0406 	br	807f3c <_malloc_r+0xe4>
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  80832c:	63000044 	addi	r12,r12,1
  808330:	608000cc 	andi	r2,r12,3
       bin = next_bin(bin);
  808334:	42000204 	addi	r8,r8,8
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  808338:	103f451e 	bne	r2,zero,808050 <_malloc_r+0x1f8>
  80833c:	00004506 	br	808454 <_malloc_r+0x5fc>
            unlink(victim, bck, fwd);
  808340:	81000217 	ldw	r4,8(r16)
            set_head(victim, nb | PREV_INUSE);
  808344:	89800054 	ori	r6,r17,1
  808348:	81800115 	stw	r6,4(r16)
            unlink(victim, bck, fwd);
  80834c:	20800315 	stw	r2,12(r4)
  808350:	11000215 	stw	r4,8(r2)
            remainder = chunk_at_offset(victim, nb);
  808354:	8463883a 	add	r17,r16,r17
            link_last_remainder(remainder);
  808358:	9c400515 	stw	r17,20(r19)
  80835c:	9c400415 	stw	r17,16(r19)
            set_head(remainder, remainder_size | PREV_INUSE);
  808360:	28800054 	ori	r2,r5,1
  808364:	88800115 	stw	r2,4(r17)
            link_last_remainder(remainder);
  808368:	8a400315 	stw	r9,12(r17)
  80836c:	8a400215 	stw	r9,8(r17)
            set_foot(remainder, remainder_size);
  808370:	80c7883a 	add	r3,r16,r3
  808374:	19400015 	stw	r5,0(r3)
	    MALLOC_UNLOCK;
  808378:	9009883a 	mov	r4,r18
  80837c:	08104380 	call	810438 <__malloc_unlock>
            return chunk2mem(victim);
  808380:	80800204 	addi	r2,r16,8
  808384:	003f4a06 	br	8080b0 <_malloc_r+0x258>
    q = bin_at(idx);
  808388:	880ed0fa 	srli	r7,r17,3
  80838c:	88800204 	addi	r2,r17,8
  808390:	003ec606 	br	807eac <_malloc_r+0x54>
      set_inuse_bit_at_offset(victim, victim_size);
  808394:	8085883a 	add	r2,r16,r2
  808398:	10c00117 	ldw	r3,4(r2)
      MALLOC_UNLOCK;
  80839c:	9009883a 	mov	r4,r18
      set_inuse_bit_at_offset(victim, victim_size);
  8083a0:	18c00054 	ori	r3,r3,1
  8083a4:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
  8083a8:	08104380 	call	810438 <__malloc_unlock>
      return chunk2mem(victim);
  8083ac:	80800204 	addi	r2,r16,8
  8083b0:	003f3f06 	br	8080b0 <_malloc_r+0x258>
      set_head(victim, nb | PREV_INUSE);
  8083b4:	89000054 	ori	r4,r17,1
  8083b8:	81000115 	stw	r4,4(r16)
      remainder = chunk_at_offset(victim, nb);
  8083bc:	8463883a 	add	r17,r16,r17
      link_last_remainder(remainder);
  8083c0:	9c400515 	stw	r17,20(r19)
  8083c4:	9c400415 	stw	r17,16(r19)
      set_head(remainder, remainder_size | PREV_INUSE);
  8083c8:	19000054 	ori	r4,r3,1
  8083cc:	89000115 	stw	r4,4(r17)
      set_foot(remainder, remainder_size);
  8083d0:	8085883a 	add	r2,r16,r2
      link_last_remainder(remainder);
  8083d4:	8a400315 	stw	r9,12(r17)
  8083d8:	8a400215 	stw	r9,8(r17)
      set_foot(remainder, remainder_size);
  8083dc:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
  8083e0:	9009883a 	mov	r4,r18
  8083e4:	08104380 	call	810438 <__malloc_unlock>
      return chunk2mem(victim);
  8083e8:	80800204 	addi	r2,r16,8
  8083ec:	003f3006 	br	8080b0 <_malloc_r+0x258>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8083f0:	1006d1ba 	srli	r3,r2,6
  8083f4:	19400e44 	addi	r5,r3,57
  8083f8:	280a90fa 	slli	r5,r5,3
  8083fc:	19000e04 	addi	r4,r3,56
  808400:	003fb006 	br	8082c4 <_malloc_r+0x46c>
      (brk < old_end && old_top != initial_top))
  808404:	84c04626 	beq	r16,r19,808520 <_malloc_r+0x6c8>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  808408:	9c000217 	ldw	r16,8(r19)
  80840c:	85400117 	ldw	r21,4(r16)
  808410:	00bfff04 	movi	r2,-4
  808414:	a8aa703a 	and	r21,r21,r2
  808418:	ac45c83a 	sub	r2,r21,r17
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  80841c:	ac400236 	bltu	r21,r17,808428 <_malloc_r+0x5d0>
  808420:	10c00408 	cmpgei	r3,r2,16
  808424:	183f931e 	bne	r3,zero,808274 <_malloc_r+0x41c>
      MALLOC_UNLOCK;
  808428:	9009883a 	mov	r4,r18
  80842c:	08104380 	call	810438 <__malloc_unlock>
      return 0; /* propagate failure */
  808430:	0005883a 	mov	r2,zero
  808434:	003f1e06 	br	8080b0 <_malloc_r+0x258>
    bin = bin_at(idx);
  808438:	11c01704 	addi	r7,r2,92
  80843c:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808440:	120016c4 	addi	r8,r2,91
  808444:	003ebd06 	br	807f3c <_malloc_r+0xe4>
      } while (first(q) == q);
  808448:	58800217 	ldw	r2,8(r11)
        --startidx;
  80844c:	39ffffc4 	addi	r7,r7,-1
      } while (first(q) == q);
  808450:	12c06f1e 	bne	r2,r11,808610 <_malloc_r+0x7b8>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  808454:	388000cc 	andi	r2,r7,3
       q = prev_bin(q);
  808458:	5afffe04 	addi	r11,r11,-8
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  80845c:	103ffa1e 	bne	r2,zero,808448 <_malloc_r+0x5f0>
          binblocks &= ~block;
  808460:	98c00117 	ldw	r3,4(r19)
  808464:	0104303a 	nor	r2,zero,r4
  808468:	10c4703a 	and	r2,r2,r3
  80846c:	98800115 	stw	r2,4(r19)
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  808470:	2109883a 	add	r4,r4,r4
  808474:	113f2a36 	bltu	r2,r4,808120 <_malloc_r+0x2c8>
  808478:	203f2926 	beq	r4,zero,808120 <_malloc_r+0x2c8>
        while ((block & binblocks) == 0)
  80847c:	2086703a 	and	r3,r4,r2
  808480:	1800041e 	bne	r3,zero,808494 <_malloc_r+0x63c>
          block <<= 1;
  808484:	2109883a 	add	r4,r4,r4
        while ((block & binblocks) == 0)
  808488:	2086703a 	and	r3,r4,r2
          idx += BINBLOCKWIDTH;
  80848c:	63000104 	addi	r12,r12,4
        while ((block & binblocks) == 0)
  808490:	183ffc26 	beq	r3,zero,808484 <_malloc_r+0x62c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808494:	600f883a 	mov	r7,r12
  808498:	003ee906 	br	808040 <_malloc_r+0x1e8>
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  80849c:	ad400404 	addi	r21,r21,16
  8084a0:	003f3006 	br	808164 <_malloc_r+0x30c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8084a4:	2009d0ba 	srai	r4,r4,2
  8084a8:	00800044 	movi	r2,1
  8084ac:	99800117 	ldw	r6,4(r19)
  8084b0:	1104983a 	sll	r2,r2,r4
  8084b4:	1184b03a 	or	r2,r2,r6
  8084b8:	98800115 	stw	r2,4(r19)
  8084bc:	003f8d06 	br	8082f4 <_malloc_r+0x49c>
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  8084c0:	bd69883a 	add	r20,r23,r21
  8084c4:	0529c83a 	sub	r20,zero,r20
  8084c8:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  8084cc:	a00b883a 	mov	r5,r20
  8084d0:	9009883a 	mov	r4,r18
  8084d4:	080a1a80 	call	80a1a8 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  8084d8:	10ffffe0 	cmpeqi	r3,r2,-1
  8084dc:	183f4326 	beq	r3,zero,8081ec <_malloc_r+0x394>
	correction = 0;
  8084e0:	0029883a 	mov	r20,zero
  8084e4:	003f4306 	br	8081f4 <_malloc_r+0x39c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8084e8:	19001568 	cmpgeui	r4,r3,85
  8084ec:	20001f1e 	bne	r4,zero,80856c <_malloc_r+0x714>
  8084f0:	1006d33a 	srli	r3,r2,12
  8084f4:	19401bc4 	addi	r5,r3,111
  8084f8:	280a90fa 	slli	r5,r5,3
  8084fc:	19001b84 	addi	r4,r3,110
  808500:	003f7006 	br	8082c4 <_malloc_r+0x46c>
    idx = bin_index(nb);
  808504:	10c05568 	cmpgeui	r3,r2,341
  808508:	18001f1e 	bne	r3,zero,808588 <_malloc_r+0x730>
  80850c:	8804d3fa 	srli	r2,r17,15
    bin = bin_at(idx);
  808510:	11c01e04 	addi	r7,r2,120
  808514:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808518:	12001dc4 	addi	r8,r2,119
  80851c:	003e8706 	br	807f3c <_malloc_r+0xe4>
  sbrked_mem += sbrk_size;
  808520:	00802074 	movhi	r2,129
  808524:	10da5b17 	ldw	r3,26988(r2)
  808528:	a8c7883a 	add	r3,r21,r3
  80852c:	10da5b15 	stw	r3,26988(r2)
  if (brk == old_end /* can just add bytes to current top, unless
  808530:	003f1906 	br	808198 <_malloc_r+0x340>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  808534:	e083ffcc 	andi	r2,fp,4095
  808538:	103f171e 	bne	r2,zero,808198 <_malloc_r+0x340>
    set_head(top, top_size | PREV_INUSE);
  80853c:	9c000217 	ldw	r16,8(r19)
    top_size = sbrk_size + old_top_size;
  808540:	b56b883a 	add	r21,r22,r21
    set_head(top, top_size | PREV_INUSE);
  808544:	ad400054 	ori	r21,r21,1
  808548:	85400115 	stw	r21,4(r16)
  80854c:	003f4206 	br	808258 <_malloc_r+0x400>
      sbrk_base = brk;
  808550:	d5e00a15 	stw	r23,-32728(gp)
  808554:	003f1706 	br	8081b4 <_malloc_r+0x35c>
  808558:	b821883a 	mov	r16,r23
  80855c:	003f3e06 	br	808258 <_malloc_r+0x400>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
  808560:	00800044 	movi	r2,1
  808564:	b8800115 	stw	r2,4(r23)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  808568:	003faf06 	br	808428 <_malloc_r+0x5d0>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  80856c:	19005568 	cmpgeui	r4,r3,341
  808570:	2000191e 	bne	r4,zero,8085d8 <_malloc_r+0x780>
  808574:	1006d3fa 	srli	r3,r2,15
  808578:	19401e04 	addi	r5,r3,120
  80857c:	280a90fa 	slli	r5,r5,3
  808580:	19001dc4 	addi	r4,r3,119
  808584:	003f4f06 	br	8082c4 <_malloc_r+0x46c>
    idx = bin_index(nb);
  808588:	10815568 	cmpgeui	r2,r2,1365
  80858c:	1000191e 	bne	r2,zero,8085f4 <_malloc_r+0x79c>
  808590:	8804d4ba 	srli	r2,r17,18
    bin = bin_at(idx);
  808594:	11c01f44 	addi	r7,r2,125
  808598:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  80859c:	12001f04 	addi	r8,r2,124
  8085a0:	003e6606 	br	807f3c <_malloc_r+0xe4>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
  8085a4:	e73ffe04 	addi	fp,fp,-8
  8085a8:	af2b883a 	add	r21,r21,fp
    top_size = new_brk - brk + correction;
  8085ac:	adebc83a 	sub	r21,r21,r23
	correction = 0;
  8085b0:	0029883a 	mov	r20,zero
  8085b4:	003f0f06 	br	8081f4 <_malloc_r+0x39c>
        fREe(RCALL chunk2mem(old_top));
  8085b8:	81400204 	addi	r5,r16,8
  8085bc:	9009883a 	mov	r4,r18
  8085c0:	08072000 	call	807200 <_free_r>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8085c4:	9c000217 	ldw	r16,8(r19)
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  8085c8:	00802074 	movhi	r2,129
  8085cc:	151a5b17 	ldw	r20,26988(r2)
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8085d0:	85400117 	ldw	r21,4(r16)
  8085d4:	003f2006 	br	808258 <_malloc_r+0x400>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8085d8:	18c15568 	cmpgeui	r3,r3,1365
  8085dc:	1800091e 	bne	r3,zero,808604 <_malloc_r+0x7ac>
  8085e0:	1006d4ba 	srli	r3,r2,18
  8085e4:	19401f44 	addi	r5,r3,125
  8085e8:	280a90fa 	slli	r5,r5,3
  8085ec:	19001f04 	addi	r4,r3,124
  8085f0:	003f3406 	br	8082c4 <_malloc_r+0x46c>
  8085f4:	0100fe04 	movi	r4,1016
  8085f8:	01c01fc4 	movi	r7,127
    idx = bin_index(nb);
  8085fc:	02001f84 	movi	r8,126
  808600:	003e4e06 	br	807f3c <_malloc_r+0xe4>
  808604:	0140fe04 	movi	r5,1016
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808608:	01001f84 	movi	r4,126
  80860c:	003f2d06 	br	8082c4 <_malloc_r+0x46c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  808610:	98800117 	ldw	r2,4(r19)
  808614:	003f9606 	br	808470 <_malloc_r+0x618>

00808618 <_mbtowc_r>:
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
  return __MBTOWC (r, pwc, s, n, state);
  808618:	00802074 	movhi	r2,129
  80861c:	108d9517 	ldw	r2,13908(r2)
  808620:	1000683a 	jmp	r2

00808624 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
  808624:	deffff04 	addi	sp,sp,-4
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;

  if (pwc == NULL)
  808628:	28000826 	beq	r5,zero,80864c <__ascii_mbtowc+0x28>
    pwc = &dummy;

  if (s == NULL)
  80862c:	30000926 	beq	r6,zero,808654 <__ascii_mbtowc+0x30>
    return 0;

  if (n == 0)
  808630:	38000b26 	beq	r7,zero,808660 <__ascii_mbtowc+0x3c>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
  808634:	30800003 	ldbu	r2,0(r6)
  808638:	28800015 	stw	r2,0(r5)
  
  if (*t == '\0')
  80863c:	30800003 	ldbu	r2,0(r6)
  808640:	1004c03a 	cmpne	r2,r2,zero
    return 0;

  return 1;
}
  808644:	dec00104 	addi	sp,sp,4
  808648:	f800283a 	ret
    pwc = &dummy;
  80864c:	d80b883a 	mov	r5,sp
  if (s == NULL)
  808650:	303ff71e 	bne	r6,zero,808630 <__ascii_mbtowc+0xc>
    return 0;
  808654:	0005883a 	mov	r2,zero
}
  808658:	dec00104 	addi	sp,sp,4
  80865c:	f800283a 	ret
    return -2;
  808660:	00bfff84 	movi	r2,-2
  808664:	003ff706 	br	808644 <__ascii_mbtowc+0x20>

00808668 <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
  808668:	208000cc 	andi	r2,r4,3
  unsigned char d = c;
  80866c:	280f883a 	mov	r7,r5
  while (UNALIGNED (src))
  808670:	10000e26 	beq	r2,zero,8086ac <memchr+0x44>
    {
      if (!length--)
  808674:	30bfffc4 	addi	r2,r6,-1
  808678:	30001726 	beq	r6,zero,8086d8 <memchr+0x70>
  80867c:	29803fcc 	andi	r6,r5,255
  808680:	00000606 	br	80869c <memchr+0x34>
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
  808684:	21000044 	addi	r4,r4,1
  while (UNALIGNED (src))
  808688:	20c000cc 	andi	r3,r4,3
  80868c:	18000826 	beq	r3,zero,8086b0 <memchr+0x48>
      if (!length--)
  808690:	10bfffc4 	addi	r2,r2,-1
  808694:	10ffffe0 	cmpeqi	r3,r2,-1
  808698:	18000f1e 	bne	r3,zero,8086d8 <memchr+0x70>
      if (*src == d)
  80869c:	20c00003 	ldbu	r3,0(r4)
  8086a0:	19bff81e 	bne	r3,r6,808684 <memchr+0x1c>
  8086a4:	2005883a 	mov	r2,r4
        return (void *) src;
      src++;
    }

  return NULL;
}
  8086a8:	f800283a 	ret
  while (UNALIGNED (src))
  8086ac:	3005883a 	mov	r2,r6
  if (!TOO_SMALL (length))
  8086b0:	10c00128 	cmpgeui	r3,r2,4
  8086b4:	18000a1e 	bne	r3,zero,8086e0 <memchr+0x78>
  while (length--)
  8086b8:	10001e26 	beq	r2,zero,808734 <memchr+0xcc>
  8086bc:	2087883a 	add	r3,r4,r2
  8086c0:	39803fcc 	andi	r6,r7,255
  while (UNALIGNED (src))
  8086c4:	2005883a 	mov	r2,r4
      if (*src == d)
  8086c8:	11000003 	ldbu	r4,0(r2)
  8086cc:	21bff626 	beq	r4,r6,8086a8 <memchr+0x40>
      src++;
  8086d0:	10800044 	addi	r2,r2,1
  while (length--)
  8086d4:	18bffc1e 	bne	r3,r2,8086c8 <memchr+0x60>
        return NULL;
  8086d8:	0005883a 	mov	r2,zero
  8086dc:	f800283a 	ret
      mask = d << 8 | d;
  8086e0:	29403fcc 	andi	r5,r5,255
  8086e4:	280c923a 	slli	r6,r5,8
          if (DETECTCHAR (*asrc, mask))
  8086e8:	027fbff4 	movhi	r9,65279
  8086ec:	02202074 	movhi	r8,32897
      mask = d << 8 | d;
  8086f0:	314ab03a 	or	r5,r6,r5
      mask = mask << 16 | mask;
  8086f4:	280c943a 	slli	r6,r5,16
          if (DETECTCHAR (*asrc, mask))
  8086f8:	4a7fbfc4 	addi	r9,r9,-257
  8086fc:	42202004 	addi	r8,r8,-32640
      mask = mask << 16 | mask;
  808700:	314cb03a 	or	r6,r6,r5
          if (DETECTCHAR (*asrc, mask))
  808704:	20c00017 	ldw	r3,0(r4)
  808708:	30c6f03a 	xor	r3,r6,r3
  80870c:	1a4b883a 	add	r5,r3,r9
  808710:	00c6303a 	nor	r3,zero,r3
  808714:	28c6703a 	and	r3,r5,r3
  808718:	1a06703a 	and	r3,r3,r8
  80871c:	183fe71e 	bne	r3,zero,8086bc <memchr+0x54>
          length -= LBLOCKSIZE;
  808720:	10bfff04 	addi	r2,r2,-4
      while (length >= LBLOCKSIZE)
  808724:	10c00128 	cmpgeui	r3,r2,4
          asrc++;
  808728:	21000104 	addi	r4,r4,4
      while (length >= LBLOCKSIZE)
  80872c:	183ff51e 	bne	r3,zero,808704 <memchr+0x9c>
  808730:	003fe106 	br	8086b8 <memchr+0x50>
  808734:	f800283a 	ret

00808738 <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  808738:	30c00430 	cmpltui	r3,r6,16
{
  80873c:	2005883a 	mov	r2,r4
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  808740:	18002d1e 	bne	r3,zero,8087f8 <memcpy+0xc0>
  808744:	2906b03a 	or	r3,r5,r4
  808748:	18c000cc 	andi	r3,r3,3
  80874c:	1800351e 	bne	r3,zero,808824 <memcpy+0xec>
  808750:	32fffc04 	addi	r11,r6,-16
  808754:	5816d13a 	srli	r11,r11,4
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;
  808758:	280f883a 	mov	r7,r5
      aligned_dst = (long*)dst;
  80875c:	2007883a 	mov	r3,r4
  808760:	5ac00044 	addi	r11,r11,1
  808764:	5816913a 	slli	r11,r11,4
  808768:	22d5883a 	add	r10,r4,r11

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
  80876c:	39000117 	ldw	r4,4(r7)
          *aligned_dst++ = *aligned_src++;
  808770:	3a400017 	ldw	r9,0(r7)
          *aligned_dst++ = *aligned_src++;
  808774:	3a000217 	ldw	r8,8(r7)
          *aligned_dst++ = *aligned_src++;
  808778:	19000115 	stw	r4,4(r3)
          *aligned_dst++ = *aligned_src++;
  80877c:	39000317 	ldw	r4,12(r7)
          *aligned_dst++ = *aligned_src++;
  808780:	1a400015 	stw	r9,0(r3)
          *aligned_dst++ = *aligned_src++;
  808784:	1a000215 	stw	r8,8(r3)
          *aligned_dst++ = *aligned_src++;
  808788:	19000315 	stw	r4,12(r3)
  80878c:	18c00404 	addi	r3,r3,16
  808790:	39c00404 	addi	r7,r7,16
      while (len0 >= BIGBLOCKSIZE)
  808794:	50fff51e 	bne	r10,r3,80876c <memcpy+0x34>
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
  808798:	3100030c 	andi	r4,r6,12
          *aligned_dst++ = *aligned_src++;
  80879c:	2acb883a 	add	r5,r5,r11
          len0 -= BIGBLOCKSIZE;
  8087a0:	320003cc 	andi	r8,r6,15
      while (len0 >= LITTLEBLOCKSIZE)
  8087a4:	20002226 	beq	r4,zero,808830 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
  8087a8:	280f883a 	mov	r7,r5
      while (len0 >= LITTLEBLOCKSIZE)
  8087ac:	1813883a 	mov	r9,r3
        {
          *aligned_dst++ = *aligned_src++;
  8087b0:	39c00104 	addi	r7,r7,4
  8087b4:	3abfff17 	ldw	r10,-4(r7)
  8087b8:	41c9c83a 	sub	r4,r8,r7
      while (len0 >= LITTLEBLOCKSIZE)
  8087bc:	2909883a 	add	r4,r5,r4
          *aligned_dst++ = *aligned_src++;
  8087c0:	4a800015 	stw	r10,0(r9)
      while (len0 >= LITTLEBLOCKSIZE)
  8087c4:	21000128 	cmpgeui	r4,r4,4
          *aligned_dst++ = *aligned_src++;
  8087c8:	4a400104 	addi	r9,r9,4
      while (len0 >= LITTLEBLOCKSIZE)
  8087cc:	203ff81e 	bne	r4,zero,8087b0 <memcpy+0x78>
  8087d0:	413fff04 	addi	r4,r8,-4
  8087d4:	2008d0ba 	srli	r4,r4,2
          len0 -= LITTLEBLOCKSIZE;
  8087d8:	318000cc 	andi	r6,r6,3
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
  8087dc:	31ffffc4 	addi	r7,r6,-1
  8087e0:	21000044 	addi	r4,r4,1
  8087e4:	200890ba 	slli	r4,r4,2
          *aligned_dst++ = *aligned_src++;
  8087e8:	1907883a 	add	r3,r3,r4
  8087ec:	290b883a 	add	r5,r5,r4
  while (len0--)
  8087f0:	3000041e 	bne	r6,zero,808804 <memcpy+0xcc>
  8087f4:	f800283a 	ret
  char *dst = dst0;
  8087f8:	2007883a 	mov	r3,r4
  while (len0--)
  8087fc:	31ffffc4 	addi	r7,r6,-1
  808800:	303ffc26 	beq	r6,zero,8087f4 <memcpy+0xbc>
  808804:	39c00044 	addi	r7,r7,1
  808808:	19cf883a 	add	r7,r3,r7
    *dst++ = *src++;
  80880c:	29800003 	ldbu	r6,0(r5)
  808810:	18c00044 	addi	r3,r3,1
  808814:	29400044 	addi	r5,r5,1
  808818:	19bfffc5 	stb	r6,-1(r3)
  while (len0--)
  80881c:	38fffb1e 	bne	r7,r3,80880c <memcpy+0xd4>
  808820:	f800283a 	ret
  808824:	31ffffc4 	addi	r7,r6,-1
  char *dst = dst0;
  808828:	2007883a 	mov	r3,r4
  80882c:	003ff506 	br	808804 <memcpy+0xcc>
      while (len0 >= LITTLEBLOCKSIZE)
  808830:	400d883a 	mov	r6,r8
  808834:	003ff106 	br	8087fc <memcpy+0xc4>

00808838 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
  808838:	2005883a 	mov	r2,r4
  char *dst = dst_void;
  const char *src = src_void;
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
  80883c:	29000a2e 	bgeu	r5,r4,808868 <memmove+0x30>
  808840:	2989883a 	add	r4,r5,r6
  808844:	1100082e 	bgeu	r2,r4,808868 <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
  808848:	1187883a 	add	r3,r2,r6
      while (length--)
  80884c:	30003e26 	beq	r6,zero,808948 <memmove+0x110>
	{
	  *--dst = *--src;
  808850:	217fffc3 	ldbu	r5,-1(r4)
  808854:	18ffffc4 	addi	r3,r3,-1
  808858:	213fffc4 	addi	r4,r4,-1
  80885c:	19400005 	stb	r5,0(r3)
      while (length--)
  808860:	10fffb1e 	bne	r2,r3,808850 <memmove+0x18>
  808864:	f800283a 	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  808868:	30c00430 	cmpltui	r3,r6,16
  80886c:	18000b26 	beq	r3,zero,80889c <memmove+0x64>
  808870:	1007883a 	mov	r3,r2
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
  808874:	31ffffc4 	addi	r7,r6,-1
  808878:	30003726 	beq	r6,zero,808958 <memmove+0x120>
  80887c:	39c00044 	addi	r7,r7,1
  808880:	29cf883a 	add	r7,r5,r7
        {
          *dst++ = *src++;
  808884:	29800003 	ldbu	r6,0(r5)
  808888:	29400044 	addi	r5,r5,1
  80888c:	18c00044 	addi	r3,r3,1
  808890:	19bfffc5 	stb	r6,-1(r3)
      while (length--)
  808894:	29fffb1e 	bne	r5,r7,808884 <memmove+0x4c>
  808898:	f800283a 	ret
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  80889c:	2886b03a 	or	r3,r5,r2
  8088a0:	18c000cc 	andi	r3,r3,3
  8088a4:	1800291e 	bne	r3,zero,80894c <memmove+0x114>
  8088a8:	327ffc04 	addi	r9,r6,-16
  8088ac:	4812d13a 	srli	r9,r9,4
  8088b0:	280f883a 	mov	r7,r5
  8088b4:	1007883a 	mov	r3,r2
  8088b8:	4a400044 	addi	r9,r9,1
  8088bc:	4812913a 	slli	r9,r9,4
  8088c0:	1251883a 	add	r8,r2,r9
              *aligned_dst++ = *aligned_src++;
  8088c4:	39000017 	ldw	r4,0(r7)
  8088c8:	39c00404 	addi	r7,r7,16
  8088cc:	18c00404 	addi	r3,r3,16
  8088d0:	193ffc15 	stw	r4,-16(r3)
              *aligned_dst++ = *aligned_src++;
  8088d4:	393ffd17 	ldw	r4,-12(r7)
  8088d8:	193ffd15 	stw	r4,-12(r3)
              *aligned_dst++ = *aligned_src++;
  8088dc:	393ffe17 	ldw	r4,-8(r7)
  8088e0:	193ffe15 	stw	r4,-8(r3)
              *aligned_dst++ = *aligned_src++;
  8088e4:	393fff17 	ldw	r4,-4(r7)
  8088e8:	193fff15 	stw	r4,-4(r3)
          while (length >= BIGBLOCKSIZE)
  8088ec:	40fff51e 	bne	r8,r3,8088c4 <memmove+0x8c>
          while (length >= LITTLEBLOCKSIZE)
  8088f0:	3100030c 	andi	r4,r6,12
              *aligned_dst++ = *aligned_src++;
  8088f4:	2a4b883a 	add	r5,r5,r9
              length -= BIGBLOCKSIZE;
  8088f8:	320003cc 	andi	r8,r6,15
          while (length >= LITTLEBLOCKSIZE)
  8088fc:	20001726 	beq	r4,zero,80895c <memmove+0x124>
              *aligned_dst++ = *aligned_src++;
  808900:	2813883a 	mov	r9,r5
          while (length >= LITTLEBLOCKSIZE)
  808904:	180f883a 	mov	r7,r3
              *aligned_dst++ = *aligned_src++;
  808908:	4a800017 	ldw	r10,0(r9)
  80890c:	39c00104 	addi	r7,r7,4
  808910:	41c9c83a 	sub	r4,r8,r7
          while (length >= LITTLEBLOCKSIZE)
  808914:	1909883a 	add	r4,r3,r4
  808918:	21000128 	cmpgeui	r4,r4,4
              *aligned_dst++ = *aligned_src++;
  80891c:	3abfff15 	stw	r10,-4(r7)
  808920:	4a400104 	addi	r9,r9,4
          while (length >= LITTLEBLOCKSIZE)
  808924:	203ff81e 	bne	r4,zero,808908 <memmove+0xd0>
  808928:	413fff04 	addi	r4,r8,-4
  80892c:	2008d0ba 	srli	r4,r4,2
              length -= LITTLEBLOCKSIZE;
  808930:	318000cc 	andi	r6,r6,3
  808934:	21000044 	addi	r4,r4,1
  808938:	200890ba 	slli	r4,r4,2
              *aligned_dst++ = *aligned_src++;
  80893c:	1907883a 	add	r3,r3,r4
  808940:	290b883a 	add	r5,r5,r4
  808944:	003fcb06 	br	808874 <memmove+0x3c>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  808948:	f800283a 	ret
      while (length--)
  80894c:	31ffffc4 	addi	r7,r6,-1
  808950:	1007883a 	mov	r3,r2
  808954:	003fc906 	br	80887c <memmove+0x44>
  808958:	f800283a 	ret
          while (length >= LITTLEBLOCKSIZE)
  80895c:	400d883a 	mov	r6,r8
  808960:	003fc406 	br	808874 <memmove+0x3c>

00808964 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
  808964:	20c000cc 	andi	r3,r4,3
{
  808968:	2005883a 	mov	r2,r4
  while (UNALIGNED (s))
  80896c:	18003626 	beq	r3,zero,808a48 <memset+0xe4>
    {
      if (n--)
  808970:	31ffffc4 	addi	r7,r6,-1
  808974:	30003326 	beq	r6,zero,808a44 <memset+0xe0>
        *s++ = (char) c;
  808978:	2811883a 	mov	r8,r5
  char *s = (char *) m;
  80897c:	2007883a 	mov	r3,r4
  808980:	00000306 	br	808990 <memset+0x2c>
      if (n--)
  808984:	39ffffc4 	addi	r7,r7,-1
  808988:	39bfffe0 	cmpeqi	r6,r7,-1
  80898c:	30002d1e 	bne	r6,zero,808a44 <memset+0xe0>
        *s++ = (char) c;
  808990:	18c00044 	addi	r3,r3,1
  while (UNALIGNED (s))
  808994:	198000cc 	andi	r6,r3,3
        *s++ = (char) c;
  808998:	1a3fffc5 	stb	r8,-1(r3)
  while (UNALIGNED (s))
  80899c:	303ff91e 	bne	r6,zero,808984 <memset+0x20>
      else
        return m;
    }

  if (!TOO_SMALL (n))
  8089a0:	39000130 	cmpltui	r4,r7,4
  8089a4:	2000221e 	bne	r4,zero,808a30 <memset+0xcc>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
  8089a8:	29003fcc 	andi	r4,r5,255
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
  8089ac:	200c923a 	slli	r6,r4,8
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
  8089b0:	3a000430 	cmpltui	r8,r7,16
      buffer = (d << 8) | d;
  8089b4:	3108b03a 	or	r4,r6,r4
      buffer |= (buffer << 16);
  8089b8:	200c943a 	slli	r6,r4,16
  8089bc:	310cb03a 	or	r6,r6,r4
      while (n >= LBLOCKSIZE*4)
  8089c0:	40000e1e 	bne	r8,zero,8089fc <memset+0x98>
  8089c4:	393ffc04 	addi	r4,r7,-16
  8089c8:	2008d13a 	srli	r4,r4,4
  8089cc:	21000044 	addi	r4,r4,1
  8089d0:	2008913a 	slli	r4,r4,4
  8089d4:	1909883a 	add	r4,r3,r4
        {
          *aligned_addr++ = buffer;
  8089d8:	19800015 	stw	r6,0(r3)
          *aligned_addr++ = buffer;
  8089dc:	19800115 	stw	r6,4(r3)
          *aligned_addr++ = buffer;
  8089e0:	19800215 	stw	r6,8(r3)
          *aligned_addr++ = buffer;
  8089e4:	19800315 	stw	r6,12(r3)
  8089e8:	18c00404 	addi	r3,r3,16
      while (n >= LBLOCKSIZE*4)
  8089ec:	20fffa1e 	bne	r4,r3,8089d8 <memset+0x74>
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
  8089f0:	3900030c 	andi	r4,r7,12
          n -= 4*LBLOCKSIZE;
  8089f4:	39c003cc 	andi	r7,r7,15
      while (n >= LBLOCKSIZE)
  8089f8:	20000d26 	beq	r4,zero,808a30 <memset+0xcc>
      while (n >= LBLOCKSIZE*4)
  8089fc:	1811883a 	mov	r8,r3
        {
          *aligned_addr++ = buffer;
  808a00:	42000104 	addi	r8,r8,4
  808a04:	3a09c83a 	sub	r4,r7,r8
      while (n >= LBLOCKSIZE)
  808a08:	1909883a 	add	r4,r3,r4
  808a0c:	21000128 	cmpgeui	r4,r4,4
          *aligned_addr++ = buffer;
  808a10:	41bfff15 	stw	r6,-4(r8)
      while (n >= LBLOCKSIZE)
  808a14:	203ffa1e 	bne	r4,zero,808a00 <memset+0x9c>
          *aligned_addr++ = buffer;
  808a18:	393fff04 	addi	r4,r7,-4
  808a1c:	2008d0ba 	srli	r4,r4,2
          n -= LBLOCKSIZE;
  808a20:	39c000cc 	andi	r7,r7,3
          *aligned_addr++ = buffer;
  808a24:	21000044 	addi	r4,r4,1
  808a28:	200890ba 	slli	r4,r4,2
  808a2c:	1907883a 	add	r3,r3,r4
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
  808a30:	38000426 	beq	r7,zero,808a44 <memset+0xe0>
  808a34:	19cf883a 	add	r7,r3,r7
    *s++ = (char) c;
  808a38:	18c00044 	addi	r3,r3,1
  808a3c:	197fffc5 	stb	r5,-1(r3)
  while (n--)
  808a40:	38fffd1e 	bne	r7,r3,808a38 <memset+0xd4>

  return m;
}
  808a44:	f800283a 	ret
  char *s = (char *) m;
  808a48:	2007883a 	mov	r3,r4
  while (UNALIGNED (s))
  808a4c:	300f883a 	mov	r7,r6
  808a50:	003fd306 	br	8089a0 <memset+0x3c>

00808a54 <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808a54:	20801317 	ldw	r2,76(r4)
{
  808a58:	defffc04 	addi	sp,sp,-16
  808a5c:	dc400115 	stw	r17,4(sp)
  808a60:	dc000015 	stw	r16,0(sp)
  808a64:	dfc00315 	stw	ra,12(sp)
  808a68:	dc800215 	stw	r18,8(sp)
  808a6c:	2021883a 	mov	r16,r4
  808a70:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808a74:	10000e26 	beq	r2,zero,808ab0 <_Balloc+0x5c>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808a78:	880690ba 	slli	r3,r17,2
  808a7c:	10c7883a 	add	r3,r2,r3
  808a80:	18800017 	ldw	r2,0(r3)
  808a84:	10001126 	beq	r2,zero,808acc <_Balloc+0x78>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808a88:	11000017 	ldw	r4,0(r2)
  808a8c:	19000015 	stw	r4,0(r3)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
  808a90:	10000415 	stw	zero,16(r2)
  808a94:	10000315 	stw	zero,12(r2)
  return rv;
}
  808a98:	dfc00317 	ldw	ra,12(sp)
  808a9c:	dc800217 	ldw	r18,8(sp)
  808aa0:	dc400117 	ldw	r17,4(sp)
  808aa4:	dc000017 	ldw	r16,0(sp)
  808aa8:	dec00404 	addi	sp,sp,16
  808aac:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808ab0:	01800844 	movi	r6,33
  808ab4:	01400104 	movi	r5,4
  808ab8:	080ba740 	call	80ba74 <_calloc_r>
  808abc:	80801315 	stw	r2,76(r16)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808ac0:	103fed1e 	bne	r2,zero,808a78 <_Balloc+0x24>
	  return NULL;
  808ac4:	0005883a 	mov	r2,zero
  808ac8:	003ff306 	br	808a98 <_Balloc+0x44>
      x = 1 << k;
  808acc:	04800044 	movi	r18,1
  808ad0:	9464983a 	sll	r18,r18,r17
      rv = (_Bigint *) _calloc_r (ptr,
  808ad4:	01400044 	movi	r5,1
  808ad8:	8009883a 	mov	r4,r16
				  sizeof (_Bigint) +
  808adc:	91800144 	addi	r6,r18,5
      rv = (_Bigint *) _calloc_r (ptr,
  808ae0:	300c90ba 	slli	r6,r6,2
  808ae4:	080ba740 	call	80ba74 <_calloc_r>
      if (rv == NULL) return NULL;
  808ae8:	103ff626 	beq	r2,zero,808ac4 <_Balloc+0x70>
      rv->_k = k;
  808aec:	14400115 	stw	r17,4(r2)
      rv->_maxwds = x;
  808af0:	14800215 	stw	r18,8(r2)
  808af4:	003fe606 	br	808a90 <_Balloc+0x3c>

00808af8 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
  808af8:	28000726 	beq	r5,zero,808b18 <_Bfree+0x20>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808afc:	28c00117 	ldw	r3,4(r5)
  808b00:	20801317 	ldw	r2,76(r4)
  808b04:	180690ba 	slli	r3,r3,2
  808b08:	10c5883a 	add	r2,r2,r3
  808b0c:	10c00017 	ldw	r3,0(r2)
  808b10:	28c00015 	stw	r3,0(r5)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808b14:	11400015 	stw	r5,0(r2)
    }
}
  808b18:	f800283a 	ret

00808b1c <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
  808b1c:	defff704 	addi	sp,sp,-36
  808b20:	dc800215 	stw	r18,8(sp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  808b24:	2c800417 	ldw	r18,16(r5)
{
  808b28:	ddc00715 	stw	r23,28(sp)
  808b2c:	dd800615 	stw	r22,24(sp)
  808b30:	dd400515 	stw	r21,20(sp)
  808b34:	dd000415 	stw	r20,16(sp)
  808b38:	dcc00315 	stw	r19,12(sp)
  808b3c:	dc400115 	stw	r17,4(sp)
  808b40:	dfc00815 	stw	ra,32(sp)
  808b44:	dc000015 	stw	r16,0(sp)
  808b48:	2827883a 	mov	r19,r5
  808b4c:	2029883a 	mov	r20,r4
  808b50:	302b883a 	mov	r21,r6
  808b54:	3823883a 	mov	r17,r7
  x = b->_x;
  808b58:	2d800504 	addi	r22,r5,20
  i = 0;
  808b5c:	002f883a 	mov	r23,zero
  do
    {
#ifdef Pack_32
      xi = *x;
  808b60:	b4000017 	ldw	r16,0(r22)
      y = (xi & 0xffff) * m + a;
  808b64:	a80b883a 	mov	r5,r21
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
  808b68:	b5800104 	addi	r22,r22,4
      y = (xi & 0xffff) * m + a;
  808b6c:	813fffcc 	andi	r4,r16,65535
  808b70:	0802ba80 	call	802ba8 <__mulsi3>
      z = (xi >> 16) * m + (y >> 16);
  808b74:	8008d43a 	srli	r4,r16,16
  808b78:	a80b883a 	mov	r5,r21
      y = (xi & 0xffff) * m + a;
  808b7c:	1461883a 	add	r16,r2,r17
      z = (xi >> 16) * m + (y >> 16);
  808b80:	0802ba80 	call	802ba8 <__mulsi3>
  808b84:	800ed43a 	srli	r7,r16,16
      *x++ = (z << 16) + (y & 0xffff);
  808b88:	843fffcc 	andi	r16,r16,65535
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
  808b8c:	bdc00044 	addi	r23,r23,1
      z = (xi >> 16) * m + (y >> 16);
  808b90:	11c5883a 	add	r2,r2,r7
      *x++ = (z << 16) + (y & 0xffff);
  808b94:	1006943a 	slli	r3,r2,16
      a = (int) (z >> 16);
  808b98:	1022d43a 	srli	r17,r2,16
      *x++ = (z << 16) + (y & 0xffff);
  808b9c:	1c21883a 	add	r16,r3,r16
  808ba0:	b43fff15 	stw	r16,-4(r22)
  while (++i < wds);
  808ba4:	bcbfee16 	blt	r23,r18,808b60 <__multadd+0x44>
  if (a)
  808ba8:	88000826 	beq	r17,zero,808bcc <__multadd+0xb0>
    {
      if (wds >= b->_maxwds)
  808bac:	98800217 	ldw	r2,8(r19)
  808bb0:	9080120e 	bge	r18,r2,808bfc <__multadd+0xe0>
	  b1 = eBalloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
  808bb4:	90800144 	addi	r2,r18,5
  808bb8:	100490ba 	slli	r2,r2,2
  808bbc:	94800044 	addi	r18,r18,1
  808bc0:	9885883a 	add	r2,r19,r2
  808bc4:	14400015 	stw	r17,0(r2)
      b->_wds = wds;
  808bc8:	9c800415 	stw	r18,16(r19)
    }
  return b;
}
  808bcc:	9805883a 	mov	r2,r19
  808bd0:	dfc00817 	ldw	ra,32(sp)
  808bd4:	ddc00717 	ldw	r23,28(sp)
  808bd8:	dd800617 	ldw	r22,24(sp)
  808bdc:	dd400517 	ldw	r21,20(sp)
  808be0:	dd000417 	ldw	r20,16(sp)
  808be4:	dcc00317 	ldw	r19,12(sp)
  808be8:	dc800217 	ldw	r18,8(sp)
  808bec:	dc400117 	ldw	r17,4(sp)
  808bf0:	dc000017 	ldw	r16,0(sp)
  808bf4:	dec00904 	addi	sp,sp,36
  808bf8:	f800283a 	ret
	  b1 = eBalloc (ptr, b->_k + 1);
  808bfc:	99400117 	ldw	r5,4(r19)
  808c00:	a009883a 	mov	r4,r20
  808c04:	29400044 	addi	r5,r5,1
  808c08:	0808a540 	call	808a54 <_Balloc>
  808c0c:	1021883a 	mov	r16,r2
  808c10:	10001226 	beq	r2,zero,808c5c <__multadd+0x140>
	  Bcopy (b1, b);
  808c14:	99800417 	ldw	r6,16(r19)
  808c18:	99400304 	addi	r5,r19,12
  808c1c:	11000304 	addi	r4,r2,12
  808c20:	31800084 	addi	r6,r6,2
  808c24:	300c90ba 	slli	r6,r6,2
  808c28:	08087380 	call	808738 <memcpy>
  if (v)
  808c2c:	98000926 	beq	r19,zero,808c54 <__multadd+0x138>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808c30:	98c00117 	ldw	r3,4(r19)
  808c34:	a0801317 	ldw	r2,76(r20)
  808c38:	180690ba 	slli	r3,r3,2
  808c3c:	10c5883a 	add	r2,r2,r3
  808c40:	10c00017 	ldw	r3,0(r2)
  808c44:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808c48:	14c00015 	stw	r19,0(r2)
  808c4c:	8027883a 	mov	r19,r16
  808c50:	003fd806 	br	808bb4 <__multadd+0x98>
  808c54:	8027883a 	mov	r19,r16
  808c58:	003fd606 	br	808bb4 <__multadd+0x98>
	  b1 = eBalloc (ptr, b->_k + 1);
  808c5c:	01c02074 	movhi	r7,129
  808c60:	01002074 	movhi	r4,129
  808c64:	39cb0904 	addi	r7,r7,11300
  808c68:	000d883a 	mov	r6,zero
  808c6c:	01402d44 	movi	r5,181
  808c70:	210b2c04 	addi	r4,r4,11440
  808c74:	080ba000 	call	80ba00 <__assert_func>

00808c78 <__s2b>:
s2b (struct _reent * ptr,
	const char *s,
	int nd0,
	int nd,
	__ULong y9)
{
  808c78:	defff904 	addi	sp,sp,-28
  808c7c:	dc800215 	stw	r18,8(sp)
  808c80:	dc000015 	stw	r16,0(sp)
  808c84:	2025883a 	mov	r18,r4
  808c88:	2821883a 	mov	r16,r5
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  808c8c:	39000204 	addi	r4,r7,8
  808c90:	01400244 	movi	r5,9
{
  808c94:	dcc00315 	stw	r19,12(sp)
  808c98:	dc400115 	stw	r17,4(sp)
  808c9c:	dfc00615 	stw	ra,24(sp)
  808ca0:	3823883a 	mov	r17,r7
  808ca4:	dd400515 	stw	r21,20(sp)
  808ca8:	dd000415 	stw	r20,16(sp)
  808cac:	3027883a 	mov	r19,r6
  x = (nd + 8) / 9;
  808cb0:	080d4080 	call	80d408 <__divsi3>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808cb4:	88c00290 	cmplti	r3,r17,10
  808cb8:	1800341e 	bne	r3,zero,808d8c <__s2b+0x114>
  808cbc:	00c00044 	movi	r3,1
  808cc0:	000b883a 	mov	r5,zero
  808cc4:	18c7883a 	add	r3,r3,r3
  808cc8:	29400044 	addi	r5,r5,1
  808ccc:	18bffd16 	blt	r3,r2,808cc4 <__s2b+0x4c>
#ifdef Pack_32
  b = eBalloc (ptr, k);
  808cd0:	9009883a 	mov	r4,r18
  808cd4:	0808a540 	call	808a54 <_Balloc>
  808cd8:	100b883a 	mov	r5,r2
  808cdc:	10002d26 	beq	r2,zero,808d94 <__s2b+0x11c>
  b->_x[0] = y9;
  808ce0:	d8800717 	ldw	r2,28(sp)
  808ce4:	28800515 	stw	r2,20(r5)
  b->_wds = 1;
  808ce8:	00800044 	movi	r2,1
  808cec:	28800415 	stw	r2,16(r5)
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
  808cf0:	98800290 	cmplti	r2,r19,10
  808cf4:	1000221e 	bne	r2,zero,808d80 <__s2b+0x108>
    {
      s += 9;
  808cf8:	85400244 	addi	r21,r16,9
  808cfc:	a829883a 	mov	r20,r21
  808d00:	84e1883a 	add	r16,r16,r19
      do
	b = multadd (ptr, b, 10, *s++ - '0');
  808d04:	a1c00007 	ldb	r7,0(r20)
  808d08:	01800284 	movi	r6,10
  808d0c:	9009883a 	mov	r4,r18
  808d10:	39fff404 	addi	r7,r7,-48
  808d14:	0808b1c0 	call	808b1c <__multadd>
  808d18:	a5000044 	addi	r20,r20,1
  808d1c:	100b883a 	mov	r5,r2
      while (++i < nd0);
  808d20:	a43ff81e 	bne	r20,r16,808d04 <__s2b+0x8c>
      s++;
  808d24:	9c3ffe04 	addi	r16,r19,-8
  808d28:	ac21883a 	add	r16,r21,r16
    }
  else
    s += 10;
  for (; i < nd; i++)
  808d2c:	9c400a0e 	bge	r19,r17,808d58 <__s2b+0xe0>
  808d30:	8ce3c83a 	sub	r17,r17,r19
  808d34:	8463883a 	add	r17,r16,r17
    b = multadd (ptr, b, 10, *s++ - '0');
  808d38:	81c00007 	ldb	r7,0(r16)
  808d3c:	01800284 	movi	r6,10
  808d40:	9009883a 	mov	r4,r18
  808d44:	39fff404 	addi	r7,r7,-48
  808d48:	0808b1c0 	call	808b1c <__multadd>
  808d4c:	84000044 	addi	r16,r16,1
  808d50:	100b883a 	mov	r5,r2
  for (; i < nd; i++)
  808d54:	8c3ff81e 	bne	r17,r16,808d38 <__s2b+0xc0>
  return b;
}
  808d58:	2805883a 	mov	r2,r5
  808d5c:	dfc00617 	ldw	ra,24(sp)
  808d60:	dd400517 	ldw	r21,20(sp)
  808d64:	dd000417 	ldw	r20,16(sp)
  808d68:	dcc00317 	ldw	r19,12(sp)
  808d6c:	dc800217 	ldw	r18,8(sp)
  808d70:	dc400117 	ldw	r17,4(sp)
  808d74:	dc000017 	ldw	r16,0(sp)
  808d78:	dec00704 	addi	sp,sp,28
  808d7c:	f800283a 	ret
    s += 10;
  808d80:	84000284 	addi	r16,r16,10
  i = 9;
  808d84:	04c00244 	movi	r19,9
  808d88:	003fe806 	br	808d2c <__s2b+0xb4>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808d8c:	000b883a 	mov	r5,zero
  808d90:	003fcf06 	br	808cd0 <__s2b+0x58>
  b = eBalloc (ptr, k);
  808d94:	01c02074 	movhi	r7,129
  808d98:	01002074 	movhi	r4,129
  808d9c:	39cb0904 	addi	r7,r7,11300
  808da0:	000d883a 	mov	r6,zero
  808da4:	01403384 	movi	r5,206
  808da8:	210b2c04 	addi	r4,r4,11440
  808dac:	080ba000 	call	80ba00 <__assert_func>

00808db0 <__hi0bits>:
int
hi0bits (register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
  808db0:	20bfffec 	andhi	r2,r4,65535
  808db4:	1000131e 	bne	r2,zero,808e04 <__hi0bits+0x54>
    {
      k = 16;
      x <<= 16;
  808db8:	2008943a 	slli	r4,r4,16
      k = 16;
  808dbc:	00800404 	movi	r2,16
    }
  if (!(x & 0xff000000))
  808dc0:	20ffc02c 	andhi	r3,r4,65280
  808dc4:	1800021e 	bne	r3,zero,808dd0 <__hi0bits+0x20>
    {
      k += 8;
      x <<= 8;
  808dc8:	2008923a 	slli	r4,r4,8
      k += 8;
  808dcc:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf0000000))
  808dd0:	20fc002c 	andhi	r3,r4,61440
  808dd4:	1800021e 	bne	r3,zero,808de0 <__hi0bits+0x30>
    {
      k += 4;
      x <<= 4;
  808dd8:	2008913a 	slli	r4,r4,4
      k += 4;
  808ddc:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0xc0000000))
  808de0:	20f0002c 	andhi	r3,r4,49152
  808de4:	1800021e 	bne	r3,zero,808df0 <__hi0bits+0x40>
    {
      k += 2;
      x <<= 2;
  808de8:	200890ba 	slli	r4,r4,2
      k += 2;
  808dec:	10800084 	addi	r2,r2,2
    }
  if (!(x & 0x80000000))
  808df0:	20000316 	blt	r4,zero,808e00 <__hi0bits+0x50>
    {
      k++;
      if (!(x & 0x40000000))
  808df4:	2110002c 	andhi	r4,r4,16384
      k++;
  808df8:	10800044 	addi	r2,r2,1
      if (!(x & 0x40000000))
  808dfc:	20000326 	beq	r4,zero,808e0c <__hi0bits+0x5c>
	return 32;
    }
  return k;
}
  808e00:	f800283a 	ret
  register int k = 0;
  808e04:	0005883a 	mov	r2,zero
  808e08:	003fed06 	br	808dc0 <__hi0bits+0x10>
	return 32;
  808e0c:	00800804 	movi	r2,32
}
  808e10:	f800283a 	ret

00808e14 <__lo0bits>:

int
lo0bits (__ULong *y)
{
  register int k;
  register __ULong x = *y;
  808e14:	20c00017 	ldw	r3,0(r4)

  if (x & 7)
  808e18:	188001cc 	andi	r2,r3,7
  808e1c:	10000826 	beq	r2,zero,808e40 <__lo0bits+0x2c>
    {
      if (x & 1)
  808e20:	1880004c 	andi	r2,r3,1
  808e24:	10001f1e 	bne	r2,zero,808ea4 <__lo0bits+0x90>
	return 0;
      if (x & 2)
  808e28:	1880008c 	andi	r2,r3,2
  808e2c:	10002126 	beq	r2,zero,808eb4 <__lo0bits+0xa0>
	{
	  *y = x >> 1;
  808e30:	1806d07a 	srli	r3,r3,1
	  return 1;
  808e34:	00800044 	movi	r2,1
	  *y = x >> 1;
  808e38:	20c00015 	stw	r3,0(r4)
	  return 1;
  808e3c:	f800283a 	ret
	}
      *y = x >> 2;
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
  808e40:	18bfffcc 	andi	r2,r3,65535
  808e44:	10001426 	beq	r2,zero,808e98 <__lo0bits+0x84>
  k = 0;
  808e48:	0005883a 	mov	r2,zero
    {
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
  808e4c:	19403fcc 	andi	r5,r3,255
  808e50:	2800021e 	bne	r5,zero,808e5c <__lo0bits+0x48>
    {
      k += 8;
      x >>= 8;
  808e54:	1806d23a 	srli	r3,r3,8
      k += 8;
  808e58:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf))
  808e5c:	194003cc 	andi	r5,r3,15
  808e60:	2800021e 	bne	r5,zero,808e6c <__lo0bits+0x58>
    {
      k += 4;
      x >>= 4;
  808e64:	1806d13a 	srli	r3,r3,4
      k += 4;
  808e68:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0x3))
  808e6c:	194000cc 	andi	r5,r3,3
  808e70:	2800021e 	bne	r5,zero,808e7c <__lo0bits+0x68>
    {
      k += 2;
      x >>= 2;
  808e74:	1806d0ba 	srli	r3,r3,2
      k += 2;
  808e78:	10800084 	addi	r2,r2,2
    }
  if (!(x & 1))
  808e7c:	1940004c 	andi	r5,r3,1
  808e80:	2800031e 	bne	r5,zero,808e90 <__lo0bits+0x7c>
    {
      k++;
      x >>= 1;
  808e84:	1806d07a 	srli	r3,r3,1
      k++;
  808e88:	10800044 	addi	r2,r2,1
      if (!x & 1)
  808e8c:	18000726 	beq	r3,zero,808eac <__lo0bits+0x98>
	return 32;
    }
  *y = x;
  808e90:	20c00015 	stw	r3,0(r4)
  return k;
  808e94:	f800283a 	ret
      x >>= 16;
  808e98:	1806d43a 	srli	r3,r3,16
      k = 16;
  808e9c:	00800404 	movi	r2,16
  808ea0:	003fea06 	br	808e4c <__lo0bits+0x38>
	return 0;
  808ea4:	0005883a 	mov	r2,zero
  808ea8:	f800283a 	ret
	return 32;
  808eac:	00800804 	movi	r2,32
}
  808eb0:	f800283a 	ret
      *y = x >> 2;
  808eb4:	1806d0ba 	srli	r3,r3,2
      return 2;
  808eb8:	00800084 	movi	r2,2
      *y = x >> 2;
  808ebc:	20c00015 	stw	r3,0(r4)
      return 2;
  808ec0:	f800283a 	ret

00808ec4 <__i2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808ec4:	20c01317 	ldw	r3,76(r4)

_Bigint *
i2b (struct _reent * ptr, int i)
{
  808ec8:	defffd04 	addi	sp,sp,-12
  808ecc:	dc400115 	stw	r17,4(sp)
  808ed0:	dc000015 	stw	r16,0(sp)
  808ed4:	dfc00215 	stw	ra,8(sp)
  808ed8:	2021883a 	mov	r16,r4
  808edc:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808ee0:	18000d26 	beq	r3,zero,808f18 <__i2b+0x54>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808ee4:	18800117 	ldw	r2,4(r3)
  808ee8:	10001826 	beq	r2,zero,808f4c <__i2b+0x88>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808eec:	11000017 	ldw	r4,0(r2)
  808ef0:	19000115 	stw	r4,4(r3)
  _Bigint *b;

  b = eBalloc (ptr, 1);
  b->_x[0] = i;
  b->_wds = 1;
  808ef4:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  808ef8:	10000315 	stw	zero,12(r2)
  b->_x[0] = i;
  808efc:	14400515 	stw	r17,20(r2)
  b->_wds = 1;
  808f00:	10c00415 	stw	r3,16(r2)
  return b;
}
  808f04:	dfc00217 	ldw	ra,8(sp)
  808f08:	dc400117 	ldw	r17,4(sp)
  808f0c:	dc000017 	ldw	r16,0(sp)
  808f10:	dec00304 	addi	sp,sp,12
  808f14:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808f18:	01800844 	movi	r6,33
  808f1c:	01400104 	movi	r5,4
  808f20:	080ba740 	call	80ba74 <_calloc_r>
  808f24:	80801315 	stw	r2,76(r16)
  808f28:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808f2c:	103fed1e 	bne	r2,zero,808ee4 <__i2b+0x20>
  b = eBalloc (ptr, 1);
  808f30:	01c02074 	movhi	r7,129
  808f34:	01002074 	movhi	r4,129
  808f38:	39cb0904 	addi	r7,r7,11300
  808f3c:	000d883a 	mov	r6,zero
  808f40:	01405004 	movi	r5,320
  808f44:	210b2c04 	addi	r4,r4,11440
  808f48:	080ba000 	call	80ba00 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  808f4c:	01800704 	movi	r6,28
  808f50:	01400044 	movi	r5,1
  808f54:	8009883a 	mov	r4,r16
  808f58:	080ba740 	call	80ba74 <_calloc_r>
      if (rv == NULL) return NULL;
  808f5c:	103ff426 	beq	r2,zero,808f30 <__i2b+0x6c>
      rv->_k = k;
  808f60:	00c00044 	movi	r3,1
  808f64:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  808f68:	00c00084 	movi	r3,2
  808f6c:	10c00215 	stw	r3,8(r2)
  808f70:	003fe006 	br	808ef4 <__i2b+0x30>

00808f74 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
  808f74:	defff004 	addi	sp,sp,-64
  808f78:	dd800c15 	stw	r22,48(sp)
  808f7c:	dc400715 	stw	r17,28(sp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
  808f80:	2d800417 	ldw	r22,16(r5)
  808f84:	34400417 	ldw	r17,16(r6)
{
  808f88:	dc800815 	stw	r18,32(sp)
  808f8c:	dc000615 	stw	r16,24(sp)
  808f90:	dfc00f15 	stw	ra,60(sp)
  808f94:	df000e15 	stw	fp,56(sp)
  808f98:	ddc00d15 	stw	r23,52(sp)
  808f9c:	dd400b15 	stw	r21,44(sp)
  808fa0:	dd000a15 	stw	r20,40(sp)
  808fa4:	dcc00915 	stw	r19,36(sp)
  808fa8:	2825883a 	mov	r18,r5
  808fac:	3021883a 	mov	r16,r6
  if (a->_wds < b->_wds)
  808fb0:	b4400516 	blt	r22,r17,808fc8 <__multiply+0x54>
  808fb4:	8807883a 	mov	r3,r17
  808fb8:	2821883a 	mov	r16,r5
  808fbc:	b023883a 	mov	r17,r22
  808fc0:	3025883a 	mov	r18,r6
  808fc4:	182d883a 	mov	r22,r3
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
  808fc8:	80800217 	ldw	r2,8(r16)
  wc = wa + wb;
  808fcc:	8d87883a 	add	r3,r17,r22
  808fd0:	d8c00015 	stw	r3,0(sp)
  k = a->_k;
  808fd4:	81400117 	ldw	r5,4(r16)
  if (wc > a->_maxwds)
  808fd8:	10c0010e 	bge	r2,r3,808fe0 <__multiply+0x6c>
    k++;
  808fdc:	29400044 	addi	r5,r5,1
  c = eBalloc (ptr, k);
  808fe0:	0808a540 	call	808a54 <_Balloc>
  808fe4:	d8800515 	stw	r2,20(sp)
  808fe8:	10008c26 	beq	r2,zero,80921c <__multiply+0x2a8>
  for (x = c->_x, xa = x + wc; x < xa; x++)
  808fec:	d8800017 	ldw	r2,0(sp)
  808ff0:	102690ba 	slli	r19,r2,2
  808ff4:	d8800517 	ldw	r2,20(sp)
  808ff8:	15000504 	addi	r20,r2,20
  808ffc:	a4c5883a 	add	r2,r20,r19
  809000:	d8800115 	stw	r2,4(sp)
  809004:	a0800a2e 	bgeu	r20,r2,809030 <__multiply+0xbc>
    *x = 0;
  809008:	d8800117 	ldw	r2,4(sp)
  80900c:	d8c00517 	ldw	r3,20(sp)
  809010:	000b883a 	mov	r5,zero
  809014:	a009883a 	mov	r4,r20
  809018:	10cdc83a 	sub	r6,r2,r3
  80901c:	31bffac4 	addi	r6,r6,-21
  809020:	300cd0ba 	srli	r6,r6,2
  809024:	31800044 	addi	r6,r6,1
  809028:	300c90ba 	slli	r6,r6,2
  80902c:	08089640 	call	808964 <memset>
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  809030:	b02c90ba 	slli	r22,r22,2
  xae = xa + wa;
  809034:	882290ba 	slli	r17,r17,2
  xb = b->_x;
  809038:	94800504 	addi	r18,r18,20
  xa = a->_x;
  80903c:	80800504 	addi	r2,r16,20
  xbe = xb + wb;
  809040:	9587883a 	add	r3,r18,r22
  xa = a->_x;
  809044:	d8800315 	stw	r2,12(sp)
  xbe = xb + wb;
  809048:	d8c00215 	stw	r3,8(sp)
  xae = xa + wa;
  80904c:	1463883a 	add	r17,r2,r17
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
  809050:	90c0542e 	bgeu	r18,r3,8091a4 <__multiply+0x230>
  809054:	80800544 	addi	r2,r16,21
  809058:	88806d36 	bltu	r17,r2,809210 <__multiply+0x29c>
  80905c:	8c05c83a 	sub	r2,r17,r16
  809060:	10bffac4 	addi	r2,r2,-21
  809064:	1004d0ba 	srli	r2,r2,2
  809068:	10800044 	addi	r2,r2,1
  80906c:	100490ba 	slli	r2,r2,2
  809070:	d8800415 	stw	r2,16(sp)
  809074:	00000606 	br	809090 <__multiply+0x11c>
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
	  *xc = carry;
	}
      if ((y = *xb >> 16) != 0)
  809078:	102ad43a 	srli	r21,r2,16
  80907c:	a800271e 	bne	r21,zero,80911c <__multiply+0x1a8>
  for (; xb < xbe; xb++, xc0++)
  809080:	d8800217 	ldw	r2,8(sp)
  809084:	94800104 	addi	r18,r18,4
  809088:	a5000104 	addi	r20,r20,4
  80908c:	9080452e 	bgeu	r18,r2,8091a4 <__multiply+0x230>
      if ((y = *xb & 0xffff) != 0)
  809090:	90800017 	ldw	r2,0(r18)
  809094:	15ffffcc 	andi	r23,r2,65535
  809098:	b83ff726 	beq	r23,zero,809078 <__multiply+0x104>
	  x = xa;
  80909c:	dd400317 	ldw	r21,12(sp)
  8090a0:	a02d883a 	mov	r22,r20
	  carry = 0;
  8090a4:	0027883a 	mov	r19,zero
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8090a8:	af000017 	ldw	fp,0(r21)
  8090ac:	b4000017 	ldw	r16,0(r22)
  8090b0:	b80b883a 	mov	r5,r23
  8090b4:	e13fffcc 	andi	r4,fp,65535
  8090b8:	0802ba80 	call	802ba8 <__mulsi3>
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090bc:	e008d43a 	srli	r4,fp,16
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8090c0:	823fffcc 	andi	r8,r16,65535
  8090c4:	1205883a 	add	r2,r2,r8
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090c8:	b80b883a 	mov	r5,r23
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8090cc:	14e7883a 	add	r19,r2,r19
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090d0:	8020d43a 	srli	r16,r16,16
  8090d4:	0802ba80 	call	802ba8 <__mulsi3>
	      carry = z >> 16;
  8090d8:	9808d43a 	srli	r4,r19,16
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090dc:	1405883a 	add	r2,r2,r16
	      Storeinc (xc, z2, z);
  8090e0:	98ffffcc 	andi	r3,r19,65535
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090e4:	1105883a 	add	r2,r2,r4
	      Storeinc (xc, z2, z);
  8090e8:	1008943a 	slli	r4,r2,16
  8090ec:	b5800104 	addi	r22,r22,4
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8090f0:	ad400104 	addi	r21,r21,4
	      Storeinc (xc, z2, z);
  8090f4:	20c6b03a 	or	r3,r4,r3
  8090f8:	b0ffff15 	stw	r3,-4(r22)
	      carry = z2 >> 16;
  8090fc:	1026d43a 	srli	r19,r2,16
	  while (x < xae);
  809100:	ac7fe936 	bltu	r21,r17,8090a8 <__multiply+0x134>
	  *xc = carry;
  809104:	d8800417 	ldw	r2,16(sp)
  809108:	a085883a 	add	r2,r20,r2
  80910c:	14c00015 	stw	r19,0(r2)
      if ((y = *xb >> 16) != 0)
  809110:	90800017 	ldw	r2,0(r18)
  809114:	102ad43a 	srli	r21,r2,16
  809118:	a83fd926 	beq	r21,zero,809080 <__multiply+0x10c>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
  80911c:	a5c00017 	ldw	r23,0(r20)
	  x = xa;
  809120:	dd800317 	ldw	r22,12(sp)
	  z2 = *xc;
  809124:	a027883a 	mov	r19,r20
  809128:	b821883a 	mov	r16,r23
	  carry = 0;
  80912c:	0039883a 	mov	fp,zero
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  809130:	b100000b 	ldhu	r4,0(r22)
  809134:	a80b883a 	mov	r5,r21
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
  809138:	9cc00104 	addi	r19,r19,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80913c:	0802ba80 	call	802ba8 <__mulsi3>
  809140:	800cd43a 	srli	r6,r16,16
	      Storeinc (xc, z, z2);
  809144:	b8ffffcc 	andi	r3,r23,65535
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  809148:	b5800104 	addi	r22,r22,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80914c:	118d883a 	add	r6,r2,r6
  809150:	3739883a 	add	fp,r6,fp
	      Storeinc (xc, z, z2);
  809154:	e004943a 	slli	r2,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  809158:	9c000017 	ldw	r16,0(r19)
  80915c:	a80b883a 	mov	r5,r21
	      Storeinc (xc, z, z2);
  809160:	10c6b03a 	or	r3,r2,r3
  809164:	98ffff15 	stw	r3,-4(r19)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  809168:	b13fff8b 	ldhu	r4,-2(r22)
  80916c:	0802ba80 	call	802ba8 <__mulsi3>
	      carry = z >> 16;
  809170:	e00cd43a 	srli	r6,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  809174:	80ffffcc 	andi	r3,r16,65535
  809178:	10c7883a 	add	r3,r2,r3
  80917c:	19af883a 	add	r23,r3,r6
	      carry = z2 >> 16;
  809180:	b838d43a 	srli	fp,r23,16
	    }
	  while (x < xae);
  809184:	b47fea36 	bltu	r22,r17,809130 <__multiply+0x1bc>
	  *xc = z2;
  809188:	d8800417 	ldw	r2,16(sp)
  for (; xb < xbe; xb++, xc0++)
  80918c:	94800104 	addi	r18,r18,4
	  *xc = z2;
  809190:	a085883a 	add	r2,r20,r2
  809194:	15c00015 	stw	r23,0(r2)
  for (; xb < xbe; xb++, xc0++)
  809198:	d8800217 	ldw	r2,8(sp)
  80919c:	a5000104 	addi	r20,r20,4
  8091a0:	90bfbb36 	bltu	r18,r2,809090 <__multiply+0x11c>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
  8091a4:	d8800017 	ldw	r2,0(sp)
  8091a8:	00800516 	blt	zero,r2,8091c0 <__multiply+0x24c>
  8091ac:	00000906 	br	8091d4 <__multiply+0x260>
  8091b0:	d8800017 	ldw	r2,0(sp)
  8091b4:	10bfffc4 	addi	r2,r2,-1
  8091b8:	d8800015 	stw	r2,0(sp)
  8091bc:	10000526 	beq	r2,zero,8091d4 <__multiply+0x260>
  8091c0:	d8c00117 	ldw	r3,4(sp)
  8091c4:	18bfff17 	ldw	r2,-4(r3)
  8091c8:	18ffff04 	addi	r3,r3,-4
  8091cc:	d8c00115 	stw	r3,4(sp)
  8091d0:	103ff726 	beq	r2,zero,8091b0 <__multiply+0x23c>
  c->_wds = wc;
  8091d4:	d8800517 	ldw	r2,20(sp)
  8091d8:	d8c00017 	ldw	r3,0(sp)
  8091dc:	10c00415 	stw	r3,16(r2)
  return c;
}
  8091e0:	dfc00f17 	ldw	ra,60(sp)
  8091e4:	df000e17 	ldw	fp,56(sp)
  8091e8:	ddc00d17 	ldw	r23,52(sp)
  8091ec:	dd800c17 	ldw	r22,48(sp)
  8091f0:	dd400b17 	ldw	r21,44(sp)
  8091f4:	dd000a17 	ldw	r20,40(sp)
  8091f8:	dcc00917 	ldw	r19,36(sp)
  8091fc:	dc800817 	ldw	r18,32(sp)
  809200:	dc400717 	ldw	r17,28(sp)
  809204:	dc000617 	ldw	r16,24(sp)
  809208:	dec01004 	addi	sp,sp,64
  80920c:	f800283a 	ret
  809210:	00800104 	movi	r2,4
  809214:	d8800415 	stw	r2,16(sp)
  809218:	003f9d06 	br	809090 <__multiply+0x11c>
  c = eBalloc (ptr, k);
  80921c:	01c02074 	movhi	r7,129
  809220:	01002074 	movhi	r4,129
  809224:	39cb0904 	addi	r7,r7,11300
  809228:	000d883a 	mov	r6,zero
  80922c:	01405744 	movi	r5,349
  809230:	210b2c04 	addi	r4,r4,11440
  809234:	080ba000 	call	80ba00 <__assert_func>

00809238 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
  809238:	defffb04 	addi	sp,sp,-20
  80923c:	dcc00315 	stw	r19,12(sp)
  809240:	dc000015 	stw	r16,0(sp)
  809244:	dfc00415 	stw	ra,16(sp)
  809248:	dc800215 	stw	r18,8(sp)
  80924c:	dc400115 	stw	r17,4(sp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
  809250:	308000cc 	andi	r2,r6,3
{
  809254:	3021883a 	mov	r16,r6
  809258:	2027883a 	mov	r19,r4
  if ((i = k & 3) != 0)
  80925c:	10002d1e 	bne	r2,zero,809314 <__pow5mult+0xdc>
  809260:	2825883a 	mov	r18,r5
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
  809264:	8021d0ba 	srai	r16,r16,2
  809268:	80001926 	beq	r16,zero,8092d0 <__pow5mult+0x98>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
  80926c:	9c401217 	ldw	r17,72(r19)
  809270:	8800061e 	bne	r17,zero,80928c <__pow5mult+0x54>
  809274:	00002f06 	br	809334 <__pow5mult+0xfc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
  809278:	8021d07a 	srai	r16,r16,1
  80927c:	80001426 	beq	r16,zero,8092d0 <__pow5mult+0x98>
	break;
      if (!(p51 = p5->_next))
  809280:	88800017 	ldw	r2,0(r17)
  809284:	10001a26 	beq	r2,zero,8092f0 <__pow5mult+0xb8>
{
  809288:	1023883a 	mov	r17,r2
      if (k & 1)
  80928c:	8080004c 	andi	r2,r16,1
  809290:	103ff926 	beq	r2,zero,809278 <__pow5mult+0x40>
	  b1 = mult (ptr, b, p5);
  809294:	880d883a 	mov	r6,r17
  809298:	900b883a 	mov	r5,r18
  80929c:	9809883a 	mov	r4,r19
  8092a0:	0808f740 	call	808f74 <__multiply>
  if (v)
  8092a4:	90001926 	beq	r18,zero,80930c <__pow5mult+0xd4>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8092a8:	91000117 	ldw	r4,4(r18)
  8092ac:	98c01317 	ldw	r3,76(r19)
      if (!(k >>= 1))
  8092b0:	8021d07a 	srai	r16,r16,1
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8092b4:	200890ba 	slli	r4,r4,2
  8092b8:	1907883a 	add	r3,r3,r4
  8092bc:	19000017 	ldw	r4,0(r3)
  8092c0:	91000015 	stw	r4,0(r18)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  8092c4:	1c800015 	stw	r18,0(r3)
	  b = b1;
  8092c8:	1025883a 	mov	r18,r2
      if (!(k >>= 1))
  8092cc:	803fec1e 	bne	r16,zero,809280 <__pow5mult+0x48>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
  8092d0:	9005883a 	mov	r2,r18
  8092d4:	dfc00417 	ldw	ra,16(sp)
  8092d8:	dcc00317 	ldw	r19,12(sp)
  8092dc:	dc800217 	ldw	r18,8(sp)
  8092e0:	dc400117 	ldw	r17,4(sp)
  8092e4:	dc000017 	ldw	r16,0(sp)
  8092e8:	dec00504 	addi	sp,sp,20
  8092ec:	f800283a 	ret
	  p51 = p5->_next = mult (ptr, p5, p5);
  8092f0:	880d883a 	mov	r6,r17
  8092f4:	880b883a 	mov	r5,r17
  8092f8:	9809883a 	mov	r4,r19
  8092fc:	0808f740 	call	808f74 <__multiply>
  809300:	88800015 	stw	r2,0(r17)
	  p51->_next = 0;
  809304:	10000015 	stw	zero,0(r2)
  809308:	003fdf06 	br	809288 <__pow5mult+0x50>
	  b = b1;
  80930c:	1025883a 	mov	r18,r2
  809310:	003fd906 	br	809278 <__pow5mult+0x40>
    b = multadd (ptr, b, p05[i - 1], 0);
  809314:	100490ba 	slli	r2,r2,2
  809318:	00c02074 	movhi	r3,129
  80931c:	000f883a 	mov	r7,zero
  809320:	10c7883a 	add	r3,r2,r3
  809324:	198b4517 	ldw	r6,11540(r3)
  809328:	0808b1c0 	call	808b1c <__multadd>
  80932c:	1025883a 	mov	r18,r2
  809330:	003fcc06 	br	809264 <__pow5mult+0x2c>
  b = eBalloc (ptr, 1);
  809334:	01400044 	movi	r5,1
  809338:	9809883a 	mov	r4,r19
  80933c:	0808a540 	call	808a54 <_Balloc>
  809340:	1023883a 	mov	r17,r2
  809344:	10000726 	beq	r2,zero,809364 <__pow5mult+0x12c>
  b->_x[0] = i;
  809348:	00809c44 	movi	r2,625
  80934c:	88800515 	stw	r2,20(r17)
  b->_wds = 1;
  809350:	00800044 	movi	r2,1
  809354:	88800415 	stw	r2,16(r17)
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
  809358:	9c401215 	stw	r17,72(r19)
      p5->_next = 0;
  80935c:	88000015 	stw	zero,0(r17)
  809360:	003fca06 	br	80928c <__pow5mult+0x54>
  b = eBalloc (ptr, 1);
  809364:	01c02074 	movhi	r7,129
  809368:	01002074 	movhi	r4,129
  80936c:	39cb0904 	addi	r7,r7,11300
  809370:	000d883a 	mov	r6,zero
  809374:	01405004 	movi	r5,320
  809378:	210b2c04 	addi	r4,r4,11440
  80937c:	080ba000 	call	80ba00 <__assert_func>

00809380 <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
  809380:	defff804 	addi	sp,sp,-32
  809384:	dd800615 	stw	r22,24(sp)
  809388:	dc000015 	stw	r16,0(sp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
  80938c:	302dd17a 	srai	r22,r6,5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  809390:	2c000417 	ldw	r16,16(r5)
  for (i = b->_maxwds; n1 > i; i <<= 1)
  809394:	28800217 	ldw	r2,8(r5)
{
  809398:	dd000415 	stw	r20,16(sp)
  n1 = n + b->_wds + 1;
  80939c:	b421883a 	add	r16,r22,r16
{
  8093a0:	dcc00315 	stw	r19,12(sp)
  8093a4:	dc800215 	stw	r18,8(sp)
  8093a8:	dc400115 	stw	r17,4(sp)
  8093ac:	dfc00715 	stw	ra,28(sp)
  8093b0:	dd400515 	stw	r21,20(sp)
  n1 = n + b->_wds + 1;
  8093b4:	85000044 	addi	r20,r16,1
{
  8093b8:	2827883a 	mov	r19,r5
  8093bc:	3025883a 	mov	r18,r6
  k1 = b->_k;
  8093c0:	29400117 	ldw	r5,4(r5)
{
  8093c4:	2023883a 	mov	r17,r4
  for (i = b->_maxwds; n1 > i; i <<= 1)
  8093c8:	1500030e 	bge	r2,r20,8093d8 <__lshift+0x58>
  8093cc:	1085883a 	add	r2,r2,r2
    k1++;
  8093d0:	29400044 	addi	r5,r5,1
  for (i = b->_maxwds; n1 > i; i <<= 1)
  8093d4:	153ffd16 	blt	r2,r20,8093cc <__lshift+0x4c>
  b1 = eBalloc (ptr, k1);
  8093d8:	8809883a 	mov	r4,r17
  8093dc:	0808a540 	call	808a54 <_Balloc>
  8093e0:	102b883a 	mov	r21,r2
  8093e4:	10004126 	beq	r2,zero,8094ec <__lshift+0x16c>
  x1 = b1->_x;
  8093e8:	11000504 	addi	r4,r2,20
  for (i = 0; i < n; i++)
  8093ec:	0580050e 	bge	zero,r22,809404 <__lshift+0x84>
    *x1++ = 0;
  8093f0:	b02c90ba 	slli	r22,r22,2
  8093f4:	000b883a 	mov	r5,zero
  8093f8:	b00d883a 	mov	r6,r22
  8093fc:	08089640 	call	808964 <memset>
  809400:	1589883a 	add	r4,r2,r22
  x = b->_x;
  xe = x + b->_wds;
  809404:	9a000417 	ldw	r8,16(r19)
  x = b->_x;
  809408:	98c00504 	addi	r3,r19,20
#ifdef Pack_32
  if (k &= 0x1f)
  80940c:	948007cc 	andi	r18,r18,31
  xe = x + b->_wds;
  809410:	401090ba 	slli	r8,r8,2
  809414:	1a11883a 	add	r8,r3,r8
  if (k &= 0x1f)
  809418:	90002c26 	beq	r18,zero,8094cc <__lshift+0x14c>
    {
      k1 = 32 - k;
  80941c:	01400804 	movi	r5,32
  809420:	2c8bc83a 	sub	r5,r5,r18
  809424:	2005883a 	mov	r2,r4
      z = 0;
  809428:	000f883a 	mov	r7,zero
      do
	{
	  *x1++ = *x << k | z;
  80942c:	19800017 	ldw	r6,0(r3)
  809430:	10800104 	addi	r2,r2,4
	  z = *x++ >> k1;
  809434:	18c00104 	addi	r3,r3,4
	  *x1++ = *x << k | z;
  809438:	348c983a 	sll	r6,r6,r18
  80943c:	31ccb03a 	or	r6,r6,r7
  809440:	11bfff15 	stw	r6,-4(r2)
	  z = *x++ >> k1;
  809444:	19bfff17 	ldw	r6,-4(r3)
  809448:	314ed83a 	srl	r7,r6,r5
	}
      while (x < xe);
  80944c:	1a3ff736 	bltu	r3,r8,80942c <__lshift+0xac>
	  *x1++ = *x << k | z;
  809450:	98800544 	addi	r2,r19,21
  809454:	40802336 	bltu	r8,r2,8094e4 <__lshift+0x164>
  809458:	44c7c83a 	sub	r3,r8,r19
  80945c:	18fffac4 	addi	r3,r3,-21
  809460:	1806d0ba 	srli	r3,r3,2
  809464:	18c00044 	addi	r3,r3,1
  809468:	180690ba 	slli	r3,r3,2
      if ((*x1 = z) != 0)
  80946c:	20c9883a 	add	r4,r4,r3
  809470:	21c00015 	stw	r7,0(r4)
  809474:	38000126 	beq	r7,zero,80947c <__lshift+0xfc>
  n1 = n + b->_wds + 1;
  809478:	a021883a 	mov	r16,r20
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  80947c:	ac000415 	stw	r16,16(r21)
  if (v)
  809480:	98000726 	beq	r19,zero,8094a0 <__lshift+0x120>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  809484:	98c00117 	ldw	r3,4(r19)
  809488:	88801317 	ldw	r2,76(r17)
  80948c:	180690ba 	slli	r3,r3,2
  809490:	10c5883a 	add	r2,r2,r3
  809494:	10c00017 	ldw	r3,0(r2)
  809498:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  80949c:	14c00015 	stw	r19,0(r2)
  Bfree (ptr, b);
  return b1;
}
  8094a0:	a805883a 	mov	r2,r21
  8094a4:	dfc00717 	ldw	ra,28(sp)
  8094a8:	dd800617 	ldw	r22,24(sp)
  8094ac:	dd400517 	ldw	r21,20(sp)
  8094b0:	dd000417 	ldw	r20,16(sp)
  8094b4:	dcc00317 	ldw	r19,12(sp)
  8094b8:	dc800217 	ldw	r18,8(sp)
  8094bc:	dc400117 	ldw	r17,4(sp)
  8094c0:	dc000017 	ldw	r16,0(sp)
  8094c4:	dec00804 	addi	sp,sp,32
  8094c8:	f800283a 	ret
      *x1++ = *x++;
  8094cc:	18800017 	ldw	r2,0(r3)
  8094d0:	18c00104 	addi	r3,r3,4
  8094d4:	21000104 	addi	r4,r4,4
  8094d8:	20bfff15 	stw	r2,-4(r4)
    while (x < xe);
  8094dc:	1a3ffb36 	bltu	r3,r8,8094cc <__lshift+0x14c>
  8094e0:	003fe606 	br	80947c <__lshift+0xfc>
	  *x1++ = *x << k | z;
  8094e4:	00c00104 	movi	r3,4
  8094e8:	003fe006 	br	80946c <__lshift+0xec>
  b1 = eBalloc (ptr, k1);
  8094ec:	01c02074 	movhi	r7,129
  8094f0:	01002074 	movhi	r4,129
  8094f4:	39cb0904 	addi	r7,r7,11300
  8094f8:	000d883a 	mov	r6,zero
  8094fc:	01407644 	movi	r5,473
  809500:	210b2c04 	addi	r4,r4,11440
  809504:	080ba000 	call	80ba00 <__assert_func>

00809508 <__mcmp>:
cmp (_Bigint * a, _Bigint * b)
{
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  809508:	21800417 	ldw	r6,16(r4)
  j = b->_wds;
  80950c:	28c00417 	ldw	r3,16(r5)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
  809510:	30c5c83a 	sub	r2,r6,r3
  809514:	30c00e1e 	bne	r6,r3,809550 <__mcmp+0x48>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
  809518:	180690ba 	slli	r3,r3,2
  xa0 = a->_x;
  80951c:	21c00504 	addi	r7,r4,20
  xb0 = b->_x;
  809520:	29400504 	addi	r5,r5,20
  xa = xa0 + j;
  809524:	38c9883a 	add	r4,r7,r3
  xb = xb0 + j;
  809528:	28c7883a 	add	r3,r5,r3
  80952c:	00000106 	br	809534 <__mcmp+0x2c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
  809530:	3900082e 	bgeu	r7,r4,809554 <__mcmp+0x4c>
      if (*--xa != *--xb)
  809534:	21bfff17 	ldw	r6,-4(r4)
  809538:	197fff17 	ldw	r5,-4(r3)
  80953c:	213fff04 	addi	r4,r4,-4
  809540:	18ffff04 	addi	r3,r3,-4
  809544:	317ffa26 	beq	r6,r5,809530 <__mcmp+0x28>
	return *xa < *xb ? -1 : 1;
  809548:	3140032e 	bgeu	r6,r5,809558 <__mcmp+0x50>
  80954c:	00bfffc4 	movi	r2,-1
	break;
    }
  return 0;
}
  809550:	f800283a 	ret
  809554:	f800283a 	ret
	return *xa < *xb ? -1 : 1;
  809558:	00800044 	movi	r2,1
  80955c:	f800283a 	ret

00809560 <__mdiff>:
  i = a->_wds;
  809560:	28800417 	ldw	r2,16(r5)
  j = b->_wds;
  809564:	30c00417 	ldw	r3,16(r6)

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
  809568:	defffc04 	addi	sp,sp,-16
  80956c:	dc800215 	stw	r18,8(sp)
  809570:	dc400115 	stw	r17,4(sp)
  809574:	dc000015 	stw	r16,0(sp)
  809578:	dfc00315 	stw	ra,12(sp)
  80957c:	2823883a 	mov	r17,r5
  809580:	3021883a 	mov	r16,r6
  if (i -= j)
  809584:	10e5c83a 	sub	r18,r2,r3
  809588:	10c0641e 	bne	r2,r3,80971c <__mdiff+0x1bc>
  xa = xa0 + j;
  80958c:	180c90ba 	slli	r6,r3,2
  xa0 = a->_x;
  809590:	29400504 	addi	r5,r5,20
  xb0 = b->_x;
  809594:	80c00504 	addi	r3,r16,20
  xa = xa0 + j;
  809598:	2985883a 	add	r2,r5,r6
  xb = xb0 + j;
  80959c:	1987883a 	add	r3,r3,r6
  8095a0:	00000106 	br	8095a8 <__mdiff+0x48>
      if (xa <= xa0)
  8095a4:	2880642e 	bgeu	r5,r2,809738 <__mdiff+0x1d8>
      if (*--xa != *--xb)
  8095a8:	11bfff17 	ldw	r6,-4(r2)
  8095ac:	19ffff17 	ldw	r7,-4(r3)
  8095b0:	10bfff04 	addi	r2,r2,-4
  8095b4:	18ffff04 	addi	r3,r3,-4
  8095b8:	31fffa26 	beq	r6,r7,8095a4 <__mdiff+0x44>
	return *xa < *xb ? -1 : 1;
  8095bc:	31c05236 	bltu	r6,r7,809708 <__mdiff+0x1a8>
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = eBalloc (ptr, a->_k);
  8095c0:	89400117 	ldw	r5,4(r17)
  8095c4:	0808a540 	call	808a54 <_Balloc>
  8095c8:	10006226 	beq	r2,zero,809754 <__mdiff+0x1f4>
  c->_sign = i;
  wa = a->_wds;
  8095cc:	8a400417 	ldw	r9,16(r17)
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
  8095d0:	83000417 	ldw	r12,16(r16)
  xa = a->_x;
  8095d4:	8ac00504 	addi	r11,r17,20
  xae = xa + wa;
  8095d8:	481090ba 	slli	r8,r9,2
  xbe = xb + wb;
  8095dc:	601890ba 	slli	r12,r12,2
  xb = b->_x;
  8095e0:	81800504 	addi	r6,r16,20
  xc = c->_x;
  8095e4:	13400504 	addi	r13,r2,20
  c->_sign = i;
  8095e8:	14800315 	stw	r18,12(r2)
  xae = xa + wa;
  8095ec:	5a11883a 	add	r8,r11,r8
  xbe = xb + wb;
  8095f0:	3319883a 	add	r12,r6,r12
  xc = c->_x;
  8095f4:	681d883a 	mov	r14,r13
  xa = a->_x;
  8095f8:	5815883a 	mov	r10,r11
  borrow = 0;
  8095fc:	0007883a 	mov	r3,zero
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  809600:	51000017 	ldw	r4,0(r10)
  809604:	31c00017 	ldw	r7,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  809608:	73800104 	addi	r14,r14,4
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  80960c:	217fffcc 	andi	r5,r4,65535
  809610:	28cb883a 	add	r5,r5,r3
  809614:	38ffffcc 	andi	r3,r7,65535
  809618:	28cbc83a 	sub	r5,r5,r3
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  80961c:	380ed43a 	srli	r7,r7,16
  809620:	2006d43a 	srli	r3,r4,16
      borrow = y >> 16;
  809624:	2809d43a 	srai	r4,r5,16
      Storeinc (xc, z, y);
  809628:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  80962c:	19c7c83a 	sub	r3,r3,r7
  809630:	1907883a 	add	r3,r3,r4
      Storeinc (xc, z, y);
  809634:	1808943a 	slli	r4,r3,16
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  809638:	31800104 	addi	r6,r6,4
      borrow = z >> 16;
  80963c:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  809640:	214ab03a 	or	r5,r4,r5
  809644:	717fff15 	stw	r5,-4(r14)
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  809648:	52800104 	addi	r10,r10,4
    }
  while (xb < xbe);
  80964c:	333fec36 	bltu	r6,r12,809600 <__mdiff+0xa0>
  809650:	640fc83a 	sub	r7,r12,r16
  809654:	39fffac4 	addi	r7,r7,-21
  809658:	84000544 	addi	r16,r16,21
  80965c:	380ed0ba 	srli	r7,r7,2
  809660:	64003336 	bltu	r12,r16,809730 <__mdiff+0x1d0>
  809664:	380890ba 	slli	r4,r7,2
  809668:	6909883a 	add	r4,r13,r4
  80966c:	64002e36 	bltu	r12,r16,809728 <__mdiff+0x1c8>
  809670:	39800044 	addi	r6,r7,1
  809674:	300c90ba 	slli	r6,r6,2
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  809678:	5997883a 	add	r11,r11,r6
      Storeinc (xc, z, y);
  80967c:	699b883a 	add	r13,r13,r6
  while (xa < xae)
  809680:	5a00152e 	bgeu	r11,r8,8096d8 <__mdiff+0x178>
      Storeinc (xc, z, y);
  809684:	680f883a 	mov	r7,r13
  while (xa < xae)
  809688:	580d883a 	mov	r6,r11
    {
      y = (*xa & 0xffff) + borrow;
  80968c:	31000017 	ldw	r4,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  809690:	39c00104 	addi	r7,r7,4
      z = (*xa++ >> 16) + borrow;
  809694:	31800104 	addi	r6,r6,4
      y = (*xa & 0xffff) + borrow;
  809698:	217fffcc 	andi	r5,r4,65535
  80969c:	28cb883a 	add	r5,r5,r3
      borrow = y >> 16;
  8096a0:	2815d43a 	srai	r10,r5,16
      z = (*xa++ >> 16) + borrow;
  8096a4:	2006d43a 	srli	r3,r4,16
      Storeinc (xc, z, y);
  8096a8:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) + borrow;
  8096ac:	1a87883a 	add	r3,r3,r10
      Storeinc (xc, z, y);
  8096b0:	1814943a 	slli	r10,r3,16
      borrow = z >> 16;
  8096b4:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  8096b8:	514ab03a 	or	r5,r10,r5
  8096bc:	397fff15 	stw	r5,-4(r7)
  while (xa < xae)
  8096c0:	323ff236 	bltu	r6,r8,80968c <__mdiff+0x12c>
  8096c4:	413fffc4 	addi	r4,r8,-1
  8096c8:	22c9c83a 	sub	r4,r4,r11
  8096cc:	2008d0ba 	srli	r4,r4,2
  8096d0:	200890ba 	slli	r4,r4,2
  8096d4:	6909883a 	add	r4,r13,r4
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
  8096d8:	2800041e 	bne	r5,zero,8096ec <__mdiff+0x18c>
  8096dc:	20ffff17 	ldw	r3,-4(r4)
    wa--;
  8096e0:	4a7fffc4 	addi	r9,r9,-1
  while (!*--xc)
  8096e4:	213fff04 	addi	r4,r4,-4
  8096e8:	183ffc26 	beq	r3,zero,8096dc <__mdiff+0x17c>
  c->_wds = wa;
  8096ec:	12400415 	stw	r9,16(r2)
  return c;
}
  8096f0:	dfc00317 	ldw	ra,12(sp)
  8096f4:	dc800217 	ldw	r18,8(sp)
  8096f8:	dc400117 	ldw	r17,4(sp)
  8096fc:	dc000017 	ldw	r16,0(sp)
  809700:	dec00404 	addi	sp,sp,16
  809704:	f800283a 	ret
  if (i < 0)
  809708:	8805883a 	mov	r2,r17
      i = 1;
  80970c:	04800044 	movi	r18,1
      a = b;
  809710:	8023883a 	mov	r17,r16
      b = c;
  809714:	1021883a 	mov	r16,r2
  809718:	003fa906 	br	8095c0 <__mdiff+0x60>
  if (i < 0)
  80971c:	903ffa16 	blt	r18,zero,809708 <__mdiff+0x1a8>
    i = 0;
  809720:	0025883a 	mov	r18,zero
  809724:	003fa606 	br	8095c0 <__mdiff+0x60>
  809728:	01800104 	movi	r6,4
  80972c:	003fd206 	br	809678 <__mdiff+0x118>
  809730:	0009883a 	mov	r4,zero
  809734:	003fcc06 	br	809668 <__mdiff+0x108>
      c = eBalloc (ptr, 0);
  809738:	000b883a 	mov	r5,zero
  80973c:	0808a540 	call	808a54 <_Balloc>
  809740:	10000b26 	beq	r2,zero,809770 <__mdiff+0x210>
      c->_wds = 1;
  809744:	00c00044 	movi	r3,1
  809748:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
  80974c:	10000515 	stw	zero,20(r2)
      return c;
  809750:	003fe706 	br	8096f0 <__mdiff+0x190>
  c = eBalloc (ptr, a->_k);
  809754:	01c02074 	movhi	r7,129
  809758:	01002074 	movhi	r4,129
  80975c:	39cb0904 	addi	r7,r7,11300
  809760:	000d883a 	mov	r6,zero
  809764:	01409004 	movi	r5,576
  809768:	210b2c04 	addi	r4,r4,11440
  80976c:	080ba000 	call	80ba00 <__assert_func>
      c = eBalloc (ptr, 0);
  809770:	01c02074 	movhi	r7,129
  809774:	01002074 	movhi	r4,129
  809778:	39cb0904 	addi	r7,r7,11300
  80977c:	000d883a 	mov	r6,zero
  809780:	01408c84 	movi	r5,562
  809784:	210b2c04 	addi	r4,r4,11440
  809788:	080ba000 	call	80ba00 <__assert_func>

0080978c <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
  80978c:	28dffc2c 	andhi	r3,r5,32752
  809790:	017f3034 	movhi	r5,64704
  809794:	1947883a 	add	r3,r3,r5
#ifndef Sudden_Underflow
  if (L > 0)
  809798:	00c0020e 	bge	zero,r3,8097a4 <__ulp+0x18>
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
  80979c:	0005883a 	mov	r2,zero
  8097a0:	f800283a 	ret
      L = -L >> Exp_shift;
  8097a4:	00c7c83a 	sub	r3,zero,r3
  8097a8:	1807d53a 	srai	r3,r3,20
      if (L < Exp_shift)
  8097ac:	18800508 	cmpgei	r2,r3,20
  8097b0:	1000041e 	bne	r2,zero,8097c4 <__ulp+0x38>
	  word0 (a) = 0x80000 >> L;
  8097b4:	00800234 	movhi	r2,8
  8097b8:	10c7d83a 	sra	r3,r2,r3
	  word1 (a) = 0;
  8097bc:	0005883a 	mov	r2,zero
  8097c0:	f800283a 	ret
#endif
	}
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
  8097c4:	193ffb04 	addi	r4,r3,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  8097c8:	208007c8 	cmpgei	r2,r4,31
	  word0 (a) = 0;
  8097cc:	0007883a 	mov	r3,zero
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  8097d0:	1000031e 	bne	r2,zero,8097e0 <__ulp+0x54>
  8097d4:	00a00034 	movhi	r2,32768
  8097d8:	1104d83a 	srl	r2,r2,r4
  8097dc:	f800283a 	ret
  8097e0:	00800044 	movi	r2,1
#endif
	}
    }
#endif
  return a.d;
}
  8097e4:	f800283a 	ret

008097e8 <__b2d>:

double
b2d (_Bigint * a, int *e)
{
  8097e8:	defffa04 	addi	sp,sp,-24
  8097ec:	dc400115 	stw	r17,4(sp)
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  8097f0:	24400417 	ldw	r17,16(r4)
{
  8097f4:	dc000015 	stw	r16,0(sp)
  xa0 = a->_x;
  8097f8:	24000504 	addi	r16,r4,20
  xa = xa0 + a->_wds;
  8097fc:	882290ba 	slli	r17,r17,2
{
  809800:	dc800215 	stw	r18,8(sp)
  809804:	dd000415 	stw	r20,16(sp)
  xa = xa0 + a->_wds;
  809808:	8463883a 	add	r17,r16,r17
  y = *--xa;
  80980c:	8cbfff17 	ldw	r18,-4(r17)
{
  809810:	dcc00315 	stw	r19,12(sp)
  809814:	dfc00515 	stw	ra,20(sp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  809818:	9009883a 	mov	r4,r18
{
  80981c:	2827883a 	mov	r19,r5
  k = hi0bits (y);
  809820:	0808db00 	call	808db0 <__hi0bits>
  *e = 32 - k;
  809824:	00c00804 	movi	r3,32
  809828:	1889c83a 	sub	r4,r3,r2
  80982c:	99000015 	stw	r4,0(r19)
#ifdef Pack_32
  if (k < Ebits)
  809830:	110002c8 	cmpgei	r4,r2,11
  y = *--xa;
  809834:	8d3fff04 	addi	r20,r17,-4
  if (k < Ebits)
  809838:	20002026 	beq	r4,zero,8098bc <__b2d+0xd4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
  80983c:	10bffd44 	addi	r2,r2,-11
  z = xa > xa0 ? *--xa : 0;
  809840:	85000e2e 	bgeu	r16,r20,80987c <__b2d+0x94>
  809844:	897ffe17 	ldw	r5,-8(r17)
  if (k -= Ebits)
  809848:	10001226 	beq	r2,zero,809894 <__b2d+0xac>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
  80984c:	1889c83a 	sub	r4,r3,r2
  809850:	90a4983a 	sll	r18,r18,r2
  809854:	2906d83a 	srl	r3,r5,r4
  z = xa > xa0 ? *--xa : 0;
  809858:	89bffe04 	addi	r6,r17,-8
      y = xa > xa0 ? *--xa : 0;
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
  80985c:	2884983a 	sll	r2,r5,r2
      d0 = Exp_1 | y << k | z >> (32 - k);
  809860:	90e4b03a 	or	r18,r18,r3
  809864:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  809868:	81800c2e 	bgeu	r16,r6,80989c <__b2d+0xb4>
      d1 = z << k | y >> (32 - k);
  80986c:	897ffd17 	ldw	r5,-12(r17)
  809870:	2908d83a 	srl	r4,r5,r4
  809874:	1104b03a 	or	r2,r2,r4
  809878:	00000806 	br	80989c <__b2d+0xb4>
  if (k -= Ebits)
  80987c:	10000426 	beq	r2,zero,809890 <__b2d+0xa8>
      d0 = Exp_1 | y << k | z >> (32 - k);
  809880:	90a4983a 	sll	r18,r18,r2
  809884:	0005883a 	mov	r2,zero
  809888:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  80988c:	00000306 	br	80989c <__b2d+0xb4>
  z = xa > xa0 ? *--xa : 0;
  809890:	000b883a 	mov	r5,zero
#endif
    }
  else
    {
      d0 = Exp_1 | y;
  809894:	90cffc34 	orhi	r3,r18,16368
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
  809898:	2805883a 	mov	r2,r5
#else
#undef d0
#undef d1
#endif
  return d.d;
}
  80989c:	dfc00517 	ldw	ra,20(sp)
  8098a0:	dd000417 	ldw	r20,16(sp)
  8098a4:	dcc00317 	ldw	r19,12(sp)
  8098a8:	dc800217 	ldw	r18,8(sp)
  8098ac:	dc400117 	ldw	r17,4(sp)
  8098b0:	dc000017 	ldw	r16,0(sp)
  8098b4:	dec00604 	addi	sp,sp,24
  8098b8:	f800283a 	ret
      d0 = Exp_1 | y >> (Ebits - k);
  8098bc:	014002c4 	movi	r5,11
  8098c0:	2889c83a 	sub	r4,r5,r2
  8098c4:	9106d83a 	srl	r3,r18,r4
  8098c8:	18cffc34 	orhi	r3,r3,16368
      w = xa > xa0 ? *--xa : 0;
  8098cc:	85000536 	bltu	r16,r20,8098e4 <__b2d+0xfc>
  8098d0:	000b883a 	mov	r5,zero
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8098d4:	10800544 	addi	r2,r2,21
  8098d8:	9084983a 	sll	r2,r18,r2
  8098dc:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  8098e0:	003fee06 	br	80989c <__b2d+0xb4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8098e4:	897ffe17 	ldw	r5,-8(r17)
  8098e8:	290ad83a 	srl	r5,r5,r4
  8098ec:	003ff906 	br	8098d4 <__b2d+0xec>

008098f0 <__d2b>:
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
  8098f0:	defff804 	addi	sp,sp,-32
  8098f4:	dd000615 	stw	r20,24(sp)
  8098f8:	2829883a 	mov	r20,r5
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = eBalloc (ptr, 1);
  8098fc:	01400044 	movi	r5,1
{
  809900:	dcc00515 	stw	r19,20(sp)
  809904:	dc000215 	stw	r16,8(sp)
  809908:	dfc00715 	stw	ra,28(sp)
  80990c:	dc800415 	stw	r18,16(sp)
  809910:	dc400315 	stw	r17,12(sp)
  809914:	3021883a 	mov	r16,r6
  809918:	3827883a 	mov	r19,r7
  b = eBalloc (ptr, 1);
  80991c:	0808a540 	call	808a54 <_Balloc>
  809920:	10004526 	beq	r2,zero,809a38 <__d2b+0x148>
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809924:	8024d53a 	srli	r18,r16,20
  z = d0 & Frac_mask;
  809928:	01800434 	movhi	r6,16
  80992c:	31bfffc4 	addi	r6,r6,-1
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809930:	9481ffcc 	andi	r18,r18,2047
  809934:	1023883a 	mov	r17,r2
  z = d0 & Frac_mask;
  809938:	81a0703a 	and	r16,r16,r6
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  80993c:	90000126 	beq	r18,zero,809944 <__d2b+0x54>
    z |= Exp_msk1;
  809940:	84000434 	orhi	r16,r16,16
  809944:	dc000115 	stw	r16,4(sp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
  809948:	a0002226 	beq	r20,zero,8099d4 <__d2b+0xe4>
    {
      y = d1;
      k = lo0bits (&y);
  80994c:	d809883a 	mov	r4,sp
      y = d1;
  809950:	dd000015 	stw	r20,0(sp)
      k = lo0bits (&y);
  809954:	0808e140 	call	808e14 <__lo0bits>
      if (k)
	{
         x[0] = y | z << (32 - k);
  809958:	d8c00117 	ldw	r3,4(sp)
      if (k)
  80995c:	10003326 	beq	r2,zero,809a2c <__d2b+0x13c>
         x[0] = y | z << (32 - k);
  809960:	01000804 	movi	r4,32
  809964:	2089c83a 	sub	r4,r4,r2
  809968:	1908983a 	sll	r4,r3,r4
  80996c:	d9400017 	ldw	r5,0(sp)
	  z >>= k;
  809970:	1886d83a 	srl	r3,r3,r2
         x[0] = y | z << (32 - k);
  809974:	2148b03a 	or	r4,r4,r5
  809978:	89000515 	stw	r4,20(r17)
	  z >>= k;
  80997c:	d8c00115 	stw	r3,4(sp)
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
  809980:	88c00615 	stw	r3,24(r17)
  809984:	1800271e 	bne	r3,zero,809a24 <__d2b+0x134>
  809988:	04000044 	movi	r16,1
  80998c:	8c000415 	stw	r16,16(r17)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
  809990:	90001926 	beq	r18,zero,8099f8 <__d2b+0x108>
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
      *bits = P - k;
  809994:	00c00d44 	movi	r3,53
      *e = de - Bias - (P - 1) + k;
  809998:	94bef344 	addi	r18,r18,-1075
  80999c:	90a5883a 	add	r18,r18,r2
      *bits = P - k;
  8099a0:	1885c83a 	sub	r2,r3,r2
  8099a4:	d8c00817 	ldw	r3,32(sp)
      *e = de - Bias - (P - 1) + k;
  8099a8:	9c800015 	stw	r18,0(r19)
      *bits = P - k;
  8099ac:	18800015 	stw	r2,0(r3)
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
  8099b0:	8805883a 	mov	r2,r17
  8099b4:	dfc00717 	ldw	ra,28(sp)
  8099b8:	dd000617 	ldw	r20,24(sp)
  8099bc:	dcc00517 	ldw	r19,20(sp)
  8099c0:	dc800417 	ldw	r18,16(sp)
  8099c4:	dc400317 	ldw	r17,12(sp)
  8099c8:	dc000217 	ldw	r16,8(sp)
  8099cc:	dec00804 	addi	sp,sp,32
  8099d0:	f800283a 	ret
      k = lo0bits (&z);
  8099d4:	d9000104 	addi	r4,sp,4
  8099d8:	0808e140 	call	808e14 <__lo0bits>
      i = b->_wds = 1;
  8099dc:	00c00044 	movi	r3,1
  8099e0:	88c00415 	stw	r3,16(r17)
      x[0] = z;
  8099e4:	d8c00117 	ldw	r3,4(sp)
      k += 32;
  8099e8:	10800804 	addi	r2,r2,32
      i = b->_wds = 1;
  8099ec:	04000044 	movi	r16,1
      x[0] = z;
  8099f0:	88c00515 	stw	r3,20(r17)
  if (de)
  8099f4:	903fe71e 	bne	r18,zero,809994 <__d2b+0xa4>
      *bits = 32 * i - hi0bits (x[i - 1]);
  8099f8:	800690ba 	slli	r3,r16,2
      *e = de - Bias - (P - 1) + 1 + k;
  8099fc:	10bef384 	addi	r2,r2,-1074
  809a00:	98800015 	stw	r2,0(r19)
      *bits = 32 * i - hi0bits (x[i - 1]);
  809a04:	88c5883a 	add	r2,r17,r3
  809a08:	11000417 	ldw	r4,16(r2)
  809a0c:	8020917a 	slli	r16,r16,5
  809a10:	0808db00 	call	808db0 <__hi0bits>
  809a14:	80a1c83a 	sub	r16,r16,r2
  809a18:	d8800817 	ldw	r2,32(sp)
  809a1c:	14000015 	stw	r16,0(r2)
  return b;
  809a20:	003fe306 	br	8099b0 <__d2b+0xc0>
      i = b->_wds = (x[1] = z) ? 2 : 1;
  809a24:	04000084 	movi	r16,2
  809a28:	003fd806 	br	80998c <__d2b+0x9c>
	x[0] = y;
  809a2c:	d9000017 	ldw	r4,0(sp)
  809a30:	89000515 	stw	r4,20(r17)
  809a34:	003fd206 	br	809980 <__d2b+0x90>
  b = eBalloc (ptr, 1);
  809a38:	01c02074 	movhi	r7,129
  809a3c:	01002074 	movhi	r4,129
  809a40:	39cb0904 	addi	r7,r7,11300
  809a44:	000d883a 	mov	r6,zero
  809a48:	0140c284 	movi	r5,778
  809a4c:	210b2c04 	addi	r4,r4,11440
  809a50:	080ba000 	call	80ba00 <__assert_func>

00809a54 <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
  809a54:	defff904 	addi	sp,sp,-28
  809a58:	dc400315 	stw	r17,12(sp)
  809a5c:	2823883a 	mov	r17,r5
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  809a60:	d80b883a 	mov	r5,sp
{
  809a64:	dfc00615 	stw	ra,24(sp)
  809a68:	dcc00515 	stw	r19,20(sp)
  809a6c:	dc800415 	stw	r18,16(sp)
  809a70:	2027883a 	mov	r19,r4
  809a74:	dc000215 	stw	r16,8(sp)
  da.d = b2d (a, &ka);
  809a78:	08097e80 	call	8097e8 <__b2d>
  db.d = b2d (b, &kb);
  809a7c:	d9400104 	addi	r5,sp,4
  809a80:	8809883a 	mov	r4,r17
  da.d = b2d (a, &ka);
  809a84:	1025883a 	mov	r18,r2
  809a88:	1821883a 	mov	r16,r3
  db.d = b2d (b, &kb);
  809a8c:	08097e80 	call	8097e8 <__b2d>
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809a90:	89000417 	ldw	r4,16(r17)
  809a94:	9a000417 	ldw	r8,16(r19)
  809a98:	d9400117 	ldw	r5,4(sp)
  db.d = b2d (b, &kb);
  809a9c:	100d883a 	mov	r6,r2
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809aa0:	4111c83a 	sub	r8,r8,r4
  809aa4:	d9000017 	ldw	r4,0(sp)
  809aa8:	4010917a 	slli	r8,r8,5
  db.d = b2d (b, &kb);
  809aac:	180f883a 	mov	r7,r3
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809ab0:	2149c83a 	sub	r4,r4,r5
  809ab4:	4111883a 	add	r8,r8,r4
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
  809ab8:	02000c0e 	bge	zero,r8,809aec <__ratio+0x98>
    word0 (da) += k * Exp_msk1;
  809abc:	4010953a 	slli	r8,r8,20
  809ac0:	4421883a 	add	r16,r8,r16
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
  809ac4:	9009883a 	mov	r4,r18
  809ac8:	800b883a 	mov	r5,r16
  809acc:	080deac0 	call	80deac <__divdf3>
}
  809ad0:	dfc00617 	ldw	ra,24(sp)
  809ad4:	dcc00517 	ldw	r19,20(sp)
  809ad8:	dc800417 	ldw	r18,16(sp)
  809adc:	dc400317 	ldw	r17,12(sp)
  809ae0:	dc000217 	ldw	r16,8(sp)
  809ae4:	dec00704 	addi	sp,sp,28
  809ae8:	f800283a 	ret
      word0 (db) += k * Exp_msk1;
  809aec:	4010953a 	slli	r8,r8,20
  809af0:	1a0fc83a 	sub	r7,r3,r8
  809af4:	003ff306 	br	809ac4 <__ratio+0x70>

00809af8 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
  809af8:	defffe04 	addi	sp,sp,-8
  809afc:	dc000015 	stw	r16,0(sp)
  809b00:	dfc00115 	stw	ra,4(sp)
  double v = 1.0;
  if (dig < 24)
  809b04:	20800608 	cmpgei	r2,r4,24
{
  809b08:	2021883a 	mov	r16,r4
  if (dig < 24)
  809b0c:	10000f26 	beq	r2,zero,809b4c <_mprec_log10+0x54>
  double v = 1.0;
  809b10:	0009883a 	mov	r4,zero
  809b14:	014ffc34 	movhi	r5,16368
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
  809b18:	000d883a 	mov	r6,zero
  809b1c:	01d00934 	movhi	r7,16420
  809b20:	080ea2c0 	call	80ea2c <__muldf3>
      dig--;
  809b24:	843fffc4 	addi	r16,r16,-1
      v *= 10;
  809b28:	1009883a 	mov	r4,r2
  809b2c:	180b883a 	mov	r5,r3
  while (dig > 0)
  809b30:	803ff91e 	bne	r16,zero,809b18 <_mprec_log10+0x20>
    }
  return v;
}
  809b34:	2005883a 	mov	r2,r4
  809b38:	2807883a 	mov	r3,r5
  809b3c:	dfc00117 	ldw	ra,4(sp)
  809b40:	dc000017 	ldw	r16,0(sp)
  809b44:	dec00204 	addi	sp,sp,8
  809b48:	f800283a 	ret
    return tens[dig];
  809b4c:	202090fa 	slli	r16,r4,3
  809b50:	00802074 	movhi	r2,129
  809b54:	108b5d04 	addi	r2,r2,11636
  809b58:	1421883a 	add	r16,r2,r16
  809b5c:	81000017 	ldw	r4,0(r16)
  809b60:	81400117 	ldw	r5,4(r16)
  809b64:	003ff306 	br	809b34 <_mprec_log10+0x3c>

00809b68 <__copybits>:
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
  809b68:	297fffc4 	addi	r5,r5,-1
  809b6c:	280fd17a 	srai	r7,r5,5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
  809b70:	31400417 	ldw	r5,16(r6)
	x = b->_x;
  809b74:	30800504 	addi	r2,r6,20
	ce = c + ((n-1) >> kshift) + 1;
  809b78:	39c00044 	addi	r7,r7,1
	xe = x + b->_wds;
  809b7c:	280a90ba 	slli	r5,r5,2
	ce = c + ((n-1) >> kshift) + 1;
  809b80:	380e90ba 	slli	r7,r7,2
	xe = x + b->_wds;
  809b84:	114b883a 	add	r5,r2,r5
	ce = c + ((n-1) >> kshift) + 1;
  809b88:	21cf883a 	add	r7,r4,r7
	while(x < xe)
  809b8c:	11400c2e 	bgeu	r2,r5,809bc0 <__copybits+0x58>
  809b90:	2007883a 	mov	r3,r4
		*c++ = *x++;
  809b94:	12000017 	ldw	r8,0(r2)
  809b98:	10800104 	addi	r2,r2,4
  809b9c:	18c00104 	addi	r3,r3,4
  809ba0:	1a3fff15 	stw	r8,-4(r3)
	while(x < xe)
  809ba4:	117ffb36 	bltu	r2,r5,809b94 <__copybits+0x2c>
		*c++ = *x++;
  809ba8:	2985c83a 	sub	r2,r5,r6
  809bac:	10bffac4 	addi	r2,r2,-21
  809bb0:	1004d0ba 	srli	r2,r2,2
  809bb4:	10800044 	addi	r2,r2,1
  809bb8:	100490ba 	slli	r2,r2,2
  809bbc:	2089883a 	add	r4,r4,r2
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
  809bc0:	21c0072e 	bgeu	r4,r7,809be0 <__copybits+0x78>
		*c++ = 0;
  809bc4:	39bfffc4 	addi	r6,r7,-1
  809bc8:	310dc83a 	sub	r6,r6,r4
  809bcc:	300cd0ba 	srli	r6,r6,2
  809bd0:	000b883a 	mov	r5,zero
  809bd4:	31800044 	addi	r6,r6,1
  809bd8:	300c90ba 	slli	r6,r6,2
  809bdc:	08089641 	jmpi	808964 <memset>
}
  809be0:	f800283a 	ret

00809be4 <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
  809be4:	20c00417 	ldw	r3,16(r4)
	n = k >> kshift;
  809be8:	280dd17a 	srai	r6,r5,5
	x = b->_x;
  809bec:	21000504 	addi	r4,r4,20
	if (n > nwds)
  809bf0:	1980080e 	bge	r3,r6,809c14 <__any_on+0x30>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
  809bf4:	180490ba 	slli	r2,r3,2
  809bf8:	2085883a 	add	r2,r4,r2
	while(x > x0)
  809bfc:	20800f2e 	bgeu	r4,r2,809c3c <__any_on+0x58>
		if (*--x)
  809c00:	10ffff17 	ldw	r3,-4(r2)
  809c04:	10bfff04 	addi	r2,r2,-4
  809c08:	183ffc26 	beq	r3,zero,809bfc <__any_on+0x18>
			return 1;
  809c0c:	00800044 	movi	r2,1
			return 1;
	return 0;
}
  809c10:	f800283a 	ret
		x1 = x2 = x[n];
  809c14:	300490ba 	slli	r2,r6,2
  809c18:	2085883a 	add	r2,r4,r2
	else if (n < nwds && (k &= kmask)) {
  809c1c:	30fff70e 	bge	r6,r3,809bfc <__any_on+0x18>
  809c20:	294007cc 	andi	r5,r5,31
  809c24:	283ff526 	beq	r5,zero,809bfc <__any_on+0x18>
		x1 = x2 = x[n];
  809c28:	11800017 	ldw	r6,0(r2)
		x1 >>= k;
  809c2c:	3146d83a 	srl	r3,r6,r5
		x1 <<= k;
  809c30:	194a983a 	sll	r5,r3,r5
		if (x1 != x2)
  809c34:	317ff51e 	bne	r6,r5,809c0c <__any_on+0x28>
  809c38:	003ff006 	br	809bfc <__any_on+0x18>
	return 0;
  809c3c:	0005883a 	mov	r2,zero
  809c40:	f800283a 	ret

00809c44 <_realloc_r>:
{
  809c44:	defff504 	addi	sp,sp,-44
  809c48:	dc800315 	stw	r18,12(sp)
  809c4c:	dfc00a15 	stw	ra,40(sp)
  809c50:	df000915 	stw	fp,36(sp)
  809c54:	ddc00815 	stw	r23,32(sp)
  809c58:	dd800715 	stw	r22,28(sp)
  809c5c:	dd400615 	stw	r21,24(sp)
  809c60:	dd000515 	stw	r20,20(sp)
  809c64:	dcc00415 	stw	r19,16(sp)
  809c68:	dc400215 	stw	r17,8(sp)
  809c6c:	dc000115 	stw	r16,4(sp)
  809c70:	3025883a 	mov	r18,r6
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809c74:	28008b26 	beq	r5,zero,809ea4 <_realloc_r+0x260>
  809c78:	2821883a 	mov	r16,r5
  809c7c:	2027883a 	mov	r19,r4
  nb = request2size(bytes);
  809c80:	944002c4 	addi	r17,r18,11
  MALLOC_LOCK;
  809c84:	08104140 	call	810414 <__malloc_lock>
  nb = request2size(bytes);
  809c88:	888005f0 	cmpltui	r2,r17,23
  809c8c:	1000521e 	bne	r2,zero,809dd8 <_realloc_r+0x194>
  809c90:	017ffe04 	movi	r5,-8
  809c94:	8962703a 	and	r17,r17,r5
  if (nb > INT_MAX || nb < bytes)
  809c98:	8807883a 	mov	r3,r17
  809c9c:	88005116 	blt	r17,zero,809de4 <_realloc_r+0x1a0>
  809ca0:	8c805036 	bltu	r17,r18,809de4 <_realloc_r+0x1a0>
  newsize = oldsize = chunksize(oldp);
  809ca4:	80bfff17 	ldw	r2,-4(r16)
  809ca8:	017fff04 	movi	r5,-4
  newp    = oldp    = mem2chunk(oldmem);
  809cac:	857ffe04 	addi	r21,r16,-8
  newsize = oldsize = chunksize(oldp);
  809cb0:	1168703a 	and	r20,r2,r5
    next = chunk_at_offset(oldp, oldsize);
  809cb4:	ad2d883a 	add	r22,r21,r20
  if ((long)(oldsize) < (long)(nb))  
  809cb8:	a0c0390e 	bge	r20,r3,809da0 <_realloc_r+0x15c>
    if (next == top || !inuse(next)) 
  809cbc:	07002074 	movhi	fp,129
  809cc0:	e70db704 	addi	fp,fp,14044
  809cc4:	e2000217 	ldw	r8,8(fp)
  809cc8:	b1000117 	ldw	r4,4(r22)
  809ccc:	45808e26 	beq	r8,r22,809f08 <_realloc_r+0x2c4>
  809cd0:	01bfff84 	movi	r6,-2
  809cd4:	218c703a 	and	r6,r4,r6
  809cd8:	b18d883a 	add	r6,r22,r6
  809cdc:	31800117 	ldw	r6,4(r6)
  809ce0:	3180004c 	andi	r6,r6,1
  809ce4:	30004f1e 	bne	r6,zero,809e24 <_realloc_r+0x1e0>
      nextsize = chunksize(next);
  809ce8:	2148703a 	and	r4,r4,r5
      else if (((long)(nextsize + newsize) >= (long)(nb)))
  809cec:	a10b883a 	add	r5,r20,r4
  809cf0:	28c0bf0e 	bge	r5,r3,809ff0 <_realloc_r+0x3ac>
    if (!prev_inuse(oldp))
  809cf4:	1080004c 	andi	r2,r2,1
  809cf8:	10004c1e 	bne	r2,zero,809e2c <_realloc_r+0x1e8>
      prev = prev_chunk(oldp);
  809cfc:	81fffe17 	ldw	r7,-8(r16)
      prevsize = chunksize(prev);
  809d00:	00bfff04 	movi	r2,-4
      prev = prev_chunk(oldp);
  809d04:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  809d08:	39400117 	ldw	r5,4(r7)
  809d0c:	288a703a 	and	r5,r5,r2
      if (next != 0)
  809d10:	b0000426 	beq	r22,zero,809d24 <_realloc_r+0xe0>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  809d14:	a16f883a 	add	r23,r20,r5
  809d18:	b92f883a 	add	r23,r23,r4
        if (next == top)
  809d1c:	4580bf26 	beq	r8,r22,80a01c <_realloc_r+0x3d8>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
  809d20:	b8c0930e 	bge	r23,r3,809f70 <_realloc_r+0x32c>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
  809d24:	38004126 	beq	r7,zero,809e2c <_realloc_r+0x1e8>
  809d28:	a16f883a 	add	r23,r20,r5
  809d2c:	b8c03f16 	blt	r23,r3,809e2c <_realloc_r+0x1e8>
        unlink(prev, bck, fwd);
  809d30:	38800317 	ldw	r2,12(r7)
  809d34:	38c00217 	ldw	r3,8(r7)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809d38:	a1bfff04 	addi	r6,r20,-4
  809d3c:	31400968 	cmpgeui	r5,r6,37
        unlink(prev, bck, fwd);
  809d40:	18800315 	stw	r2,12(r3)
  809d44:	10c00215 	stw	r3,8(r2)
        newmem = chunk2mem(newp);
  809d48:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809d4c:	3ded883a 	add	r22,r7,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809d50:	2800941e 	bne	r5,zero,809fa4 <_realloc_r+0x360>
  809d54:	30800530 	cmpltui	r2,r6,20
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809d58:	80c00017 	ldw	r3,0(r16)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809d5c:	1000df1e 	bne	r2,zero,80a0dc <_realloc_r+0x498>
  809d60:	38c00215 	stw	r3,8(r7)
  809d64:	80c00117 	ldw	r3,4(r16)
  809d68:	30800728 	cmpgeui	r2,r6,28
  809d6c:	38c00315 	stw	r3,12(r7)
  809d70:	1000dc1e 	bne	r2,zero,80a0e4 <_realloc_r+0x4a0>
  809d74:	80c00217 	ldw	r3,8(r16)
  809d78:	38800404 	addi	r2,r7,16
  809d7c:	84000204 	addi	r16,r16,8
  809d80:	10c00015 	stw	r3,0(r2)
  809d84:	80c00117 	ldw	r3,4(r16)
        newsize += prevsize;
  809d88:	b829883a 	mov	r20,r23
  809d8c:	382b883a 	mov	r21,r7
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809d90:	10c00115 	stw	r3,4(r2)
  809d94:	80c00217 	ldw	r3,8(r16)
  809d98:	2021883a 	mov	r16,r4
  809d9c:	10c00215 	stw	r3,8(r2)
    set_head_size(newp, nb);
  809da0:	a9800117 	ldw	r6,4(r21)
  remainder_size = long_sub_size_t(newsize, nb);
  809da4:	a445c83a 	sub	r2,r20,r17
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  809da8:	10c00430 	cmpltui	r3,r2,16
    set_head_size(newp, nb);
  809dac:	3180004c 	andi	r6,r6,1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  809db0:	18004926 	beq	r3,zero,809ed8 <_realloc_r+0x294>
    set_head_size(newp, newsize);
  809db4:	a18cb03a 	or	r6,r20,r6
  809db8:	a9800115 	stw	r6,4(r21)
    set_inuse_bit_at_offset(newp, newsize);
  809dbc:	b0800117 	ldw	r2,4(r22)
  809dc0:	10800054 	ori	r2,r2,1
  809dc4:	b0800115 	stw	r2,4(r22)
  MALLOC_UNLOCK;
  809dc8:	9809883a 	mov	r4,r19
  809dcc:	08104380 	call	810438 <__malloc_unlock>
  return chunk2mem(newp);
  809dd0:	8025883a 	mov	r18,r16
  809dd4:	00000606 	br	809df0 <_realloc_r+0x1ac>
  nb = request2size(bytes);
  809dd8:	04400404 	movi	r17,16
  if (nb > INT_MAX || nb < bytes)
  809ddc:	00c00404 	movi	r3,16
  809de0:	8cbfb02e 	bgeu	r17,r18,809ca4 <_realloc_r+0x60>
    RERRNO = ENOMEM;
  809de4:	00800304 	movi	r2,12
  809de8:	98800015 	stw	r2,0(r19)
    return 0;
  809dec:	0025883a 	mov	r18,zero
}
  809df0:	9005883a 	mov	r2,r18
  809df4:	dfc00a17 	ldw	ra,40(sp)
  809df8:	df000917 	ldw	fp,36(sp)
  809dfc:	ddc00817 	ldw	r23,32(sp)
  809e00:	dd800717 	ldw	r22,28(sp)
  809e04:	dd400617 	ldw	r21,24(sp)
  809e08:	dd000517 	ldw	r20,20(sp)
  809e0c:	dcc00417 	ldw	r19,16(sp)
  809e10:	dc800317 	ldw	r18,12(sp)
  809e14:	dc400217 	ldw	r17,8(sp)
  809e18:	dc000117 	ldw	r16,4(sp)
  809e1c:	dec00b04 	addi	sp,sp,44
  809e20:	f800283a 	ret
    if (!prev_inuse(oldp))
  809e24:	1080004c 	andi	r2,r2,1
  809e28:	10006c26 	beq	r2,zero,809fdc <_realloc_r+0x398>
    newmem = mALLOc (RCALL bytes);
  809e2c:	900b883a 	mov	r5,r18
  809e30:	9809883a 	mov	r4,r19
  809e34:	0807e580 	call	807e58 <_malloc_r>
  809e38:	1025883a 	mov	r18,r2
    if (newmem == 0)  /* propagate failure */
  809e3c:	10001626 	beq	r2,zero,809e98 <_realloc_r+0x254>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
  809e40:	80bfff17 	ldw	r2,-4(r16)
  809e44:	013fff84 	movi	r4,-2
  809e48:	90fffe04 	addi	r3,r18,-8
  809e4c:	1104703a 	and	r2,r2,r4
  809e50:	a885883a 	add	r2,r21,r2
  809e54:	10c05b26 	beq	r2,r3,809fc4 <_realloc_r+0x380>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809e58:	a1bfff04 	addi	r6,r20,-4
  809e5c:	30800968 	cmpgeui	r2,r6,37
  809e60:	10006a1e 	bne	r2,zero,80a00c <_realloc_r+0x3c8>
  809e64:	30800530 	cmpltui	r2,r6,20
  809e68:	81000017 	ldw	r4,0(r16)
  809e6c:	10003726 	beq	r2,zero,809f4c <_realloc_r+0x308>
  809e70:	9005883a 	mov	r2,r18
  809e74:	8007883a 	mov	r3,r16
  809e78:	11000015 	stw	r4,0(r2)
  809e7c:	19000117 	ldw	r4,4(r3)
  809e80:	11000115 	stw	r4,4(r2)
  809e84:	18c00217 	ldw	r3,8(r3)
  809e88:	10c00215 	stw	r3,8(r2)
    fREe(RCALL oldmem);
  809e8c:	800b883a 	mov	r5,r16
  809e90:	9809883a 	mov	r4,r19
  809e94:	08072000 	call	807200 <_free_r>
    MALLOC_UNLOCK;
  809e98:	9809883a 	mov	r4,r19
  809e9c:	08104380 	call	810438 <__malloc_unlock>
    return newmem;
  809ea0:	003fd306 	br	809df0 <_realloc_r+0x1ac>
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809ea4:	300b883a 	mov	r5,r6
}
  809ea8:	dfc00a17 	ldw	ra,40(sp)
  809eac:	df000917 	ldw	fp,36(sp)
  809eb0:	ddc00817 	ldw	r23,32(sp)
  809eb4:	dd800717 	ldw	r22,28(sp)
  809eb8:	dd400617 	ldw	r21,24(sp)
  809ebc:	dd000517 	ldw	r20,20(sp)
  809ec0:	dcc00417 	ldw	r19,16(sp)
  809ec4:	dc800317 	ldw	r18,12(sp)
  809ec8:	dc400217 	ldw	r17,8(sp)
  809ecc:	dc000117 	ldw	r16,4(sp)
  809ed0:	dec00b04 	addi	sp,sp,44
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809ed4:	0807e581 	jmpi	807e58 <_malloc_r>
    set_head_size(newp, nb);
  809ed8:	344cb03a 	or	r6,r6,r17
  809edc:	a9800115 	stw	r6,4(r21)
    remainder = chunk_at_offset(newp, nb);
  809ee0:	ac4b883a 	add	r5,r21,r17
    set_head(remainder, remainder_size | PREV_INUSE);
  809ee4:	10800054 	ori	r2,r2,1
  809ee8:	28800115 	stw	r2,4(r5)
    set_inuse_bit_at_offset(remainder, remainder_size);
  809eec:	b0800117 	ldw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809ef0:	29400204 	addi	r5,r5,8
  809ef4:	9809883a 	mov	r4,r19
    set_inuse_bit_at_offset(remainder, remainder_size);
  809ef8:	10800054 	ori	r2,r2,1
  809efc:	b0800115 	stw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809f00:	08072000 	call	807200 <_free_r>
  809f04:	003fb006 	br	809dc8 <_realloc_r+0x184>
      nextsize = chunksize(next);
  809f08:	2148703a 	and	r4,r4,r5
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
  809f0c:	a10b883a 	add	r5,r20,r4
  809f10:	89800404 	addi	r6,r17,16
  809f14:	29bf7716 	blt	r5,r6,809cf4 <_realloc_r+0xb0>
          top = chunk_at_offset(oldp, nb);
  809f18:	ac6b883a 	add	r21,r21,r17
          set_head(top, (newsize - nb) | PREV_INUSE);
  809f1c:	2c45c83a 	sub	r2,r5,r17
          top = chunk_at_offset(oldp, nb);
  809f20:	e5400215 	stw	r21,8(fp)
          set_head(top, (newsize - nb) | PREV_INUSE);
  809f24:	10800054 	ori	r2,r2,1
  809f28:	a8800115 	stw	r2,4(r21)
          set_head_size(oldp, nb);
  809f2c:	80bfff17 	ldw	r2,-4(r16)
	  MALLOC_UNLOCK;
  809f30:	9809883a 	mov	r4,r19
          return chunk2mem(oldp);
  809f34:	8025883a 	mov	r18,r16
          set_head_size(oldp, nb);
  809f38:	1080004c 	andi	r2,r2,1
  809f3c:	1462b03a 	or	r17,r2,r17
  809f40:	847fff15 	stw	r17,-4(r16)
	  MALLOC_UNLOCK;
  809f44:	08104380 	call	810438 <__malloc_unlock>
          return chunk2mem(oldp);
  809f48:	003fa906 	br	809df0 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f4c:	91000015 	stw	r4,0(r18)
  809f50:	80c00117 	ldw	r3,4(r16)
  809f54:	30800728 	cmpgeui	r2,r6,28
  809f58:	90c00115 	stw	r3,4(r18)
  809f5c:	1000551e 	bne	r2,zero,80a0b4 <_realloc_r+0x470>
  809f60:	81000217 	ldw	r4,8(r16)
  809f64:	80c00204 	addi	r3,r16,8
  809f68:	90800204 	addi	r2,r18,8
  809f6c:	003fc206 	br	809e78 <_realloc_r+0x234>
          unlink(next, bck, fwd);
  809f70:	b0800317 	ldw	r2,12(r22)
  809f74:	b0c00217 	ldw	r3,8(r22)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f78:	a1bfff04 	addi	r6,r20,-4
  809f7c:	31400968 	cmpgeui	r5,r6,37
          unlink(next, bck, fwd);
  809f80:	18800315 	stw	r2,12(r3)
  809f84:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
  809f88:	38c00217 	ldw	r3,8(r7)
  809f8c:	38800317 	ldw	r2,12(r7)
          newmem = chunk2mem(newp);
  809f90:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809f94:	3ded883a 	add	r22,r7,r23
          unlink(prev, bck, fwd);
  809f98:	18800315 	stw	r2,12(r3)
  809f9c:	10c00215 	stw	r3,8(r2)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809fa0:	283f6c26 	beq	r5,zero,809d54 <_realloc_r+0x110>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809fa4:	800b883a 	mov	r5,r16
  809fa8:	d9c00015 	stw	r7,0(sp)
  809fac:	08088380 	call	808838 <memmove>
  809fb0:	d9c00017 	ldw	r7,0(sp)
  809fb4:	1021883a 	mov	r16,r2
        newsize += prevsize;
  809fb8:	b829883a 	mov	r20,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809fbc:	382b883a 	mov	r21,r7
  809fc0:	003f7706 	br	809da0 <_realloc_r+0x15c>
      newsize += chunksize(newp);
  809fc4:	90bfff17 	ldw	r2,-4(r18)
  809fc8:	00ffff04 	movi	r3,-4
  809fcc:	10c4703a 	and	r2,r2,r3
  809fd0:	a0a9883a 	add	r20,r20,r2
    set_inuse_bit_at_offset(remainder, remainder_size);
  809fd4:	ad2d883a 	add	r22,r21,r20
      goto split;
  809fd8:	003f7106 	br	809da0 <_realloc_r+0x15c>
      prev = prev_chunk(oldp);
  809fdc:	81fffe17 	ldw	r7,-8(r16)
  809fe0:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  809fe4:	38800117 	ldw	r2,4(r7)
  809fe8:	114a703a 	and	r5,r2,r5
      if (next != 0)
  809fec:	003f4d06 	br	809d24 <_realloc_r+0xe0>
        unlink(next, bck, fwd);
  809ff0:	b0800317 	ldw	r2,12(r22)
  809ff4:	b0c00217 	ldw	r3,8(r22)
        newsize  += nextsize;
  809ff8:	2829883a 	mov	r20,r5
    set_inuse_bit_at_offset(remainder, remainder_size);
  809ffc:	a96d883a 	add	r22,r21,r5
        unlink(next, bck, fwd);
  80a000:	18800315 	stw	r2,12(r3)
  80a004:	10c00215 	stw	r3,8(r2)
        goto split;
  80a008:	003f6506 	br	809da0 <_realloc_r+0x15c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a00c:	800b883a 	mov	r5,r16
  80a010:	9009883a 	mov	r4,r18
  80a014:	08088380 	call	808838 <memmove>
  80a018:	003f9c06 	br	809e8c <_realloc_r+0x248>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  80a01c:	88800404 	addi	r2,r17,16
  80a020:	b8bf4016 	blt	r23,r2,809d24 <_realloc_r+0xe0>
            unlink(prev, bck, fwd);
  80a024:	38800317 	ldw	r2,12(r7)
  80a028:	38c00217 	ldw	r3,8(r7)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a02c:	a1bfff04 	addi	r6,r20,-4
  80a030:	31000968 	cmpgeui	r4,r6,37
            unlink(prev, bck, fwd);
  80a034:	18800315 	stw	r2,12(r3)
  80a038:	10c00215 	stw	r3,8(r2)
            newmem = chunk2mem(newp);
  80a03c:	3c800204 	addi	r18,r7,8
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a040:	20003b1e 	bne	r4,zero,80a130 <_realloc_r+0x4ec>
  80a044:	30800530 	cmpltui	r2,r6,20
  80a048:	80c00017 	ldw	r3,0(r16)
  80a04c:	1000361e 	bne	r2,zero,80a128 <_realloc_r+0x4e4>
  80a050:	38c00215 	stw	r3,8(r7)
  80a054:	80c00117 	ldw	r3,4(r16)
  80a058:	30800728 	cmpgeui	r2,r6,28
  80a05c:	38c00315 	stw	r3,12(r7)
  80a060:	1000401e 	bne	r2,zero,80a164 <_realloc_r+0x520>
  80a064:	80c00217 	ldw	r3,8(r16)
  80a068:	38800404 	addi	r2,r7,16
  80a06c:	84000204 	addi	r16,r16,8
  80a070:	10c00015 	stw	r3,0(r2)
  80a074:	80c00117 	ldw	r3,4(r16)
  80a078:	10c00115 	stw	r3,4(r2)
  80a07c:	80c00217 	ldw	r3,8(r16)
  80a080:	10c00215 	stw	r3,8(r2)
            top = chunk_at_offset(newp, nb);
  80a084:	3c47883a 	add	r3,r7,r17
            set_head(top, (newsize - nb) | PREV_INUSE);
  80a088:	bc45c83a 	sub	r2,r23,r17
            top = chunk_at_offset(newp, nb);
  80a08c:	e0c00215 	stw	r3,8(fp)
            set_head(top, (newsize - nb) | PREV_INUSE);
  80a090:	10800054 	ori	r2,r2,1
  80a094:	18800115 	stw	r2,4(r3)
            set_head_size(newp, nb);
  80a098:	38800117 	ldw	r2,4(r7)
	    MALLOC_UNLOCK;
  80a09c:	9809883a 	mov	r4,r19
            set_head_size(newp, nb);
  80a0a0:	1080004c 	andi	r2,r2,1
  80a0a4:	1462b03a 	or	r17,r2,r17
  80a0a8:	3c400115 	stw	r17,4(r7)
	    MALLOC_UNLOCK;
  80a0ac:	08104380 	call	810438 <__malloc_unlock>
            return newmem;
  80a0b0:	003f4f06 	br	809df0 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a0b4:	80800217 	ldw	r2,8(r16)
  80a0b8:	31800920 	cmpeqi	r6,r6,36
  80a0bc:	90800215 	stw	r2,8(r18)
  80a0c0:	80800317 	ldw	r2,12(r16)
  80a0c4:	90800315 	stw	r2,12(r18)
  80a0c8:	81000417 	ldw	r4,16(r16)
  80a0cc:	30000f1e 	bne	r6,zero,80a10c <_realloc_r+0x4c8>
  80a0d0:	80c00404 	addi	r3,r16,16
  80a0d4:	90800404 	addi	r2,r18,16
  80a0d8:	003f6706 	br	809e78 <_realloc_r+0x234>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a0dc:	2005883a 	mov	r2,r4
  80a0e0:	003f2706 	br	809d80 <_realloc_r+0x13c>
  80a0e4:	80800217 	ldw	r2,8(r16)
  80a0e8:	31800920 	cmpeqi	r6,r6,36
  80a0ec:	38800415 	stw	r2,16(r7)
  80a0f0:	80800317 	ldw	r2,12(r16)
  80a0f4:	38800515 	stw	r2,20(r7)
  80a0f8:	80c00417 	ldw	r3,16(r16)
  80a0fc:	3000121e 	bne	r6,zero,80a148 <_realloc_r+0x504>
  80a100:	38800604 	addi	r2,r7,24
  80a104:	84000404 	addi	r16,r16,16
  80a108:	003f1d06 	br	809d80 <_realloc_r+0x13c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a10c:	91000415 	stw	r4,16(r18)
  80a110:	81000517 	ldw	r4,20(r16)
  80a114:	80c00604 	addi	r3,r16,24
  80a118:	90800604 	addi	r2,r18,24
  80a11c:	91000515 	stw	r4,20(r18)
  80a120:	81000617 	ldw	r4,24(r16)
  80a124:	003f5406 	br	809e78 <_realloc_r+0x234>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a128:	9005883a 	mov	r2,r18
  80a12c:	003fd006 	br	80a070 <_realloc_r+0x42c>
  80a130:	800b883a 	mov	r5,r16
  80a134:	9009883a 	mov	r4,r18
  80a138:	d9c00015 	stw	r7,0(sp)
  80a13c:	08088380 	call	808838 <memmove>
  80a140:	d9c00017 	ldw	r7,0(sp)
  80a144:	003fcf06 	br	80a084 <_realloc_r+0x440>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a148:	84000604 	addi	r16,r16,24
  80a14c:	38c00615 	stw	r3,24(r7)
  80a150:	80ffff17 	ldw	r3,-4(r16)
  80a154:	38800804 	addi	r2,r7,32
  80a158:	38c00715 	stw	r3,28(r7)
  80a15c:	80c00017 	ldw	r3,0(r16)
  80a160:	003f0706 	br	809d80 <_realloc_r+0x13c>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a164:	80800217 	ldw	r2,8(r16)
  80a168:	31800920 	cmpeqi	r6,r6,36
  80a16c:	38800415 	stw	r2,16(r7)
  80a170:	80800317 	ldw	r2,12(r16)
  80a174:	38800515 	stw	r2,20(r7)
  80a178:	80c00417 	ldw	r3,16(r16)
  80a17c:	3000031e 	bne	r6,zero,80a18c <_realloc_r+0x548>
  80a180:	38800604 	addi	r2,r7,24
  80a184:	84000404 	addi	r16,r16,16
  80a188:	003fb906 	br	80a070 <_realloc_r+0x42c>
  80a18c:	84000604 	addi	r16,r16,24
  80a190:	38c00615 	stw	r3,24(r7)
  80a194:	80ffff17 	ldw	r3,-4(r16)
  80a198:	38800804 	addi	r2,r7,32
  80a19c:	38c00715 	stw	r3,28(r7)
  80a1a0:	80c00017 	ldw	r3,0(r16)
  80a1a4:	003fb206 	br	80a070 <_realloc_r+0x42c>

0080a1a8 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
  80a1a8:	defffe04 	addi	sp,sp,-8
  80a1ac:	dc000015 	stw	r16,0(sp)
  80a1b0:	2021883a 	mov	r16,r4
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a1b4:	2809883a 	mov	r4,r5
{
  80a1b8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80a1bc:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a1c0:	08106100 	call	810610 <sbrk>
  80a1c4:	10ffffd8 	cmpnei	r3,r2,-1
  80a1c8:	18000426 	beq	r3,zero,80a1dc <_sbrk_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80a1cc:	dfc00117 	ldw	ra,4(sp)
  80a1d0:	dc000017 	ldw	r16,0(sp)
  80a1d4:	dec00204 	addi	sp,sp,8
  80a1d8:	f800283a 	ret
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a1dc:	d0e71817 	ldw	r3,-25504(gp)
  80a1e0:	183ffa26 	beq	r3,zero,80a1cc <_sbrk_r+0x24>
    ptr->_errno = errno;
  80a1e4:	80c00015 	stw	r3,0(r16)
}
  80a1e8:	dfc00117 	ldw	ra,4(sp)
  80a1ec:	dc000017 	ldw	r16,0(sp)
  80a1f0:	dec00204 	addi	sp,sp,8
  80a1f4:	f800283a 	ret

0080a1f8 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
  80a1f8:	defffe04 	addi	sp,sp,-8
  80a1fc:	dc000015 	stw	r16,0(sp)
  80a200:	2821883a 	mov	r16,r5
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
  80a204:	2940038f 	ldh	r5,14(r5)
{
  80a208:	dfc00115 	stw	ra,4(sp)
  ret = _read_r (ptr, fp->_file, buf, n);
  80a20c:	080c0280 	call	80c028 <_read_r>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
  80a210:	10000716 	blt	r2,zero,80a230 <__sread+0x38>
    fp->_offset += ret;
  80a214:	80c01417 	ldw	r3,80(r16)
  80a218:	1887883a 	add	r3,r3,r2
  80a21c:	80c01415 	stw	r3,80(r16)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
  80a220:	dfc00117 	ldw	ra,4(sp)
  80a224:	dc000017 	ldw	r16,0(sp)
  80a228:	dec00204 	addi	sp,sp,8
  80a22c:	f800283a 	ret
    fp->_flags &= ~__SOFF;	/* paranoia */
  80a230:	80c0030b 	ldhu	r3,12(r16)
  80a234:	18fbffcc 	andi	r3,r3,61439
  80a238:	80c0030d 	sth	r3,12(r16)
}
  80a23c:	dfc00117 	ldw	ra,4(sp)
  80a240:	dc000017 	ldw	r16,0(sp)
  80a244:	dec00204 	addi	sp,sp,8
  80a248:	f800283a 	ret

0080a24c <__seofread>:
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
  80a24c:	0005883a 	mov	r2,zero
  80a250:	f800283a 	ret

0080a254 <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
  80a254:	2880030b 	ldhu	r2,12(r5)
{
  80a258:	defffb04 	addi	sp,sp,-20
  80a25c:	dcc00315 	stw	r19,12(sp)
  80a260:	dc800215 	stw	r18,8(sp)
  80a264:	dc400115 	stw	r17,4(sp)
  80a268:	dc000015 	stw	r16,0(sp)
  80a26c:	dfc00415 	stw	ra,16(sp)
  if (fp->_flags & __SAPP)
  80a270:	10c0400c 	andi	r3,r2,256
{
  80a274:	2821883a 	mov	r16,r5
  80a278:	2023883a 	mov	r17,r4
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80a27c:	2940038f 	ldh	r5,14(r5)
{
  80a280:	3025883a 	mov	r18,r6
  80a284:	3827883a 	mov	r19,r7
  if (fp->_flags & __SAPP)
  80a288:	18000c1e 	bne	r3,zero,80a2bc <__swrite+0x68>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a28c:	10bbffcc 	andi	r2,r2,61439
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
  80a290:	980f883a 	mov	r7,r19
  80a294:	900d883a 	mov	r6,r18
  80a298:	8809883a 	mov	r4,r17
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a29c:	8080030d 	sth	r2,12(r16)
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
  80a2a0:	dfc00417 	ldw	ra,16(sp)
  80a2a4:	dcc00317 	ldw	r19,12(sp)
  80a2a8:	dc800217 	ldw	r18,8(sp)
  80a2ac:	dc400117 	ldw	r17,4(sp)
  80a2b0:	dc000017 	ldw	r16,0(sp)
  80a2b4:	dec00504 	addi	sp,sp,20
  w = _write_r (ptr, fp->_file, buf, n);
  80a2b8:	080b9541 	jmpi	80b954 <_write_r>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80a2bc:	01c00084 	movi	r7,2
  80a2c0:	000d883a 	mov	r6,zero
  80a2c4:	080bfcc0 	call	80bfcc <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a2c8:	8080030b 	ldhu	r2,12(r16)
  w = _write_r (ptr, fp->_file, buf, n);
  80a2cc:	8140038f 	ldh	r5,14(r16)
  80a2d0:	003fee06 	br	80a28c <__swrite+0x38>

0080a2d4 <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
  80a2d4:	defffe04 	addi	sp,sp,-8
  80a2d8:	dc000015 	stw	r16,0(sp)
  80a2dc:	2821883a 	mov	r16,r5
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  80a2e0:	2940038f 	ldh	r5,14(r5)
{
  80a2e4:	dfc00115 	stw	ra,4(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  80a2e8:	080bfcc0 	call	80bfcc <_lseek_r>
  if (ret == -1L)
  80a2ec:	10ffffd8 	cmpnei	r3,r2,-1
  80a2f0:	18000826 	beq	r3,zero,80a314 <__sseek+0x40>
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
  80a2f4:	80c0030b 	ldhu	r3,12(r16)
      fp->_offset = ret;
  80a2f8:	80801415 	stw	r2,80(r16)
      fp->_flags |= __SOFF;
  80a2fc:	18c40014 	ori	r3,r3,4096
  80a300:	80c0030d 	sth	r3,12(r16)
    }
  return ret;
}
  80a304:	dfc00117 	ldw	ra,4(sp)
  80a308:	dc000017 	ldw	r16,0(sp)
  80a30c:	dec00204 	addi	sp,sp,8
  80a310:	f800283a 	ret
    fp->_flags &= ~__SOFF;
  80a314:	80c0030b 	ldhu	r3,12(r16)
  80a318:	18fbffcc 	andi	r3,r3,61439
  80a31c:	80c0030d 	sth	r3,12(r16)
}
  80a320:	dfc00117 	ldw	ra,4(sp)
  80a324:	dc000017 	ldw	r16,0(sp)
  80a328:	dec00204 	addi	sp,sp,8
  80a32c:	f800283a 	ret

0080a330 <__sclose>:
__sclose (struct _reent *ptr,
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
  80a330:	2940038f 	ldh	r5,14(r5)
  80a334:	080b9b01 	jmpi	80b9b0 <_close_r>

0080a338 <strcmp>:
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
  80a338:	2144b03a 	or	r2,r4,r5
  80a33c:	108000cc 	andi	r2,r2,3
  80a340:	1000141e 	bne	r2,zero,80a394 <strcmp+0x5c>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
  80a344:	20800017 	ldw	r2,0(r4)
  80a348:	28c00017 	ldw	r3,0(r5)
  80a34c:	10c0111e 	bne	r2,r3,80a394 <strcmp+0x5c>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
  80a350:	01ffbff4 	movhi	r7,65279
  80a354:	01a02074 	movhi	r6,32897
  80a358:	39ffbfc4 	addi	r7,r7,-257
  80a35c:	31a02004 	addi	r6,r6,-32640
  80a360:	00000306 	br	80a370 <strcmp+0x38>
      while (*a1 == *a2)
  80a364:	20800017 	ldw	r2,0(r4)
  80a368:	28c00017 	ldw	r3,0(r5)
  80a36c:	10c0091e 	bne	r2,r3,80a394 <strcmp+0x5c>
          if (DETECTNULL (*a1))
  80a370:	11c7883a 	add	r3,r2,r7
  80a374:	0084303a 	nor	r2,zero,r2
  80a378:	1884703a 	and	r2,r3,r2
  80a37c:	1184703a 	and	r2,r2,r6
	    return 0;

          a1++;
  80a380:	21000104 	addi	r4,r4,4
          a2++;
  80a384:	29400104 	addi	r5,r5,4
          if (DETECTNULL (*a1))
  80a388:	103ff626 	beq	r2,zero,80a364 <strcmp+0x2c>
	    return 0;
  80a38c:	0005883a 	mov	r2,zero
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80a390:	f800283a 	ret
  while (*s1 != '\0' && *s1 == *s2)
  80a394:	20c00003 	ldbu	r3,0(r4)
  80a398:	18803fcc 	andi	r2,r3,255
  80a39c:	1080201c 	xori	r2,r2,128
  80a3a0:	10bfe004 	addi	r2,r2,-128
  80a3a4:	1000071e 	bne	r2,zero,80a3c4 <strcmp+0x8c>
  80a3a8:	00000a06 	br	80a3d4 <strcmp+0x9c>
  80a3ac:	20c00003 	ldbu	r3,0(r4)
      s2++;
  80a3b0:	29400044 	addi	r5,r5,1
  while (*s1 != '\0' && *s1 == *s2)
  80a3b4:	18803fcc 	andi	r2,r3,255
  80a3b8:	1080201c 	xori	r2,r2,128
  80a3bc:	10bfe004 	addi	r2,r2,-128
  80a3c0:	10000726 	beq	r2,zero,80a3e0 <strcmp+0xa8>
  80a3c4:	29800007 	ldb	r6,0(r5)
      s1++;
  80a3c8:	21000044 	addi	r4,r4,1
  while (*s1 != '\0' && *s1 == *s2)
  80a3cc:	30bff726 	beq	r6,r2,80a3ac <strcmp+0x74>
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
  80a3d0:	18803fcc 	andi	r2,r3,255
  80a3d4:	28c00003 	ldbu	r3,0(r5)
  80a3d8:	10c5c83a 	sub	r2,r2,r3
  80a3dc:	f800283a 	ret
  80a3e0:	28c00003 	ldbu	r3,0(r5)
  80a3e4:	0005883a 	mov	r2,zero
  80a3e8:	10c5c83a 	sub	r2,r2,r3
  80a3ec:	f800283a 	ret

0080a3f0 <__sprint_r.part.0>:
	if (fp->_flags2 & __SWID) {
  80a3f0:	28801917 	ldw	r2,100(r5)
__sprint_r (struct _reent *ptr,
  80a3f4:	defff604 	addi	sp,sp,-40
  80a3f8:	dcc00315 	stw	r19,12(sp)
  80a3fc:	dfc00915 	stw	ra,36(sp)
  80a400:	df000815 	stw	fp,32(sp)
  80a404:	ddc00715 	stw	r23,28(sp)
  80a408:	dd800615 	stw	r22,24(sp)
  80a40c:	dd400515 	stw	r21,20(sp)
  80a410:	dd000415 	stw	r20,16(sp)
  80a414:	dc800215 	stw	r18,8(sp)
  80a418:	dc400115 	stw	r17,4(sp)
  80a41c:	dc000015 	stw	r16,0(sp)
	if (fp->_flags2 & __SWID) {
  80a420:	1088000c 	andi	r2,r2,8192
__sprint_r (struct _reent *ptr,
  80a424:	3027883a 	mov	r19,r6
	if (fp->_flags2 & __SWID) {
  80a428:	10002c26 	beq	r2,zero,80a4dc <__sprint_r.part.0+0xec>
		for (; uio->uio_resid != 0;
  80a42c:	30800217 	ldw	r2,8(r6)
		iov = uio->uio_iov;
  80a430:	35000017 	ldw	r20,0(r6)
  80a434:	2821883a 	mov	r16,r5
  80a438:	2023883a 	mov	r17,r4
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a43c:	05bfff04 	movi	r22,-4
		for (; uio->uio_resid != 0;
  80a440:	10002426 	beq	r2,zero,80a4d4 <__sprint_r.part.0+0xe4>
			len = iov->iov_len / sizeof (wchar_t);
  80a444:	a5400117 	ldw	r21,4(r20)
			p = (wchar_t *) iov->iov_base;
  80a448:	a5c00017 	ldw	r23,0(r20)
			len = iov->iov_len / sizeof (wchar_t);
  80a44c:	a824d0ba 	srli	r18,r21,2
			for (i = 0; i < len; i++) {
  80a450:	90001b26 	beq	r18,zero,80a4c0 <__sprint_r.part.0+0xd0>
  80a454:	0039883a 	mov	fp,zero
  80a458:	00000206 	br	80a464 <__sprint_r.part.0+0x74>
  80a45c:	bdc00104 	addi	r23,r23,4
  80a460:	97001626 	beq	r18,fp,80a4bc <__sprint_r.part.0+0xcc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a464:	b9400017 	ldw	r5,0(r23)
  80a468:	800d883a 	mov	r6,r16
  80a46c:	8809883a 	mov	r4,r17
  80a470:	080be8c0 	call	80be8c <_fputwc_r>
  80a474:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a478:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a47c:	103ff726 	beq	r2,zero,80a45c <__sprint_r.part.0+0x6c>
					err = -1;
  80a480:	00bfffc4 	movi	r2,-1
	uio->uio_resid = 0;
  80a484:	98000215 	stw	zero,8(r19)
	uio->uio_iovcnt = 0;
  80a488:	98000115 	stw	zero,4(r19)
}
  80a48c:	dfc00917 	ldw	ra,36(sp)
  80a490:	df000817 	ldw	fp,32(sp)
  80a494:	ddc00717 	ldw	r23,28(sp)
  80a498:	dd800617 	ldw	r22,24(sp)
  80a49c:	dd400517 	ldw	r21,20(sp)
  80a4a0:	dd000417 	ldw	r20,16(sp)
  80a4a4:	dcc00317 	ldw	r19,12(sp)
  80a4a8:	dc800217 	ldw	r18,8(sp)
  80a4ac:	dc400117 	ldw	r17,4(sp)
  80a4b0:	dc000017 	ldw	r16,0(sp)
  80a4b4:	dec00a04 	addi	sp,sp,40
  80a4b8:	f800283a 	ret
  80a4bc:	98800217 	ldw	r2,8(r19)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a4c0:	adaa703a 	and	r21,r21,r22
  80a4c4:	1545c83a 	sub	r2,r2,r21
  80a4c8:	98800215 	stw	r2,8(r19)
  80a4cc:	a5000204 	addi	r20,r20,8
		for (; uio->uio_resid != 0;
  80a4d0:	103fdc1e 	bne	r2,zero,80a444 <__sprint_r.part.0+0x54>
	register int err = 0;
  80a4d4:	0005883a 	mov	r2,zero
  80a4d8:	003fea06 	br	80a484 <__sprint_r.part.0+0x94>
		err = __sfvwrite_r(ptr, fp, uio);
  80a4dc:	08074f40 	call	8074f4 <__sfvwrite_r>
  80a4e0:	003fe806 	br	80a484 <__sprint_r.part.0+0x94>

0080a4e4 <__sprint_r>:
	if (uio->uio_resid == 0) {
  80a4e4:	30c00217 	ldw	r3,8(r6)
  80a4e8:	18000126 	beq	r3,zero,80a4f0 <__sprint_r+0xc>
}
  80a4ec:	080a3f01 	jmpi	80a3f0 <__sprint_r.part.0>
		uio->uio_iovcnt = 0;
  80a4f0:	30000115 	stw	zero,4(r6)
}
  80a4f4:	0005883a 	mov	r2,zero
  80a4f8:	f800283a 	ret

0080a4fc <___vfiprintf_internal_r>:
{
  80a4fc:	deffcf04 	addi	sp,sp,-196
  80a500:	dd802d15 	stw	r22,180(sp)
  80a504:	dd402c15 	stw	r21,176(sp)
  80a508:	dd002b15 	stw	r20,172(sp)
  80a50c:	dfc03015 	stw	ra,192(sp)
  80a510:	df002f15 	stw	fp,188(sp)
  80a514:	ddc02e15 	stw	r23,184(sp)
  80a518:	dcc02a15 	stw	r19,168(sp)
  80a51c:	dc802915 	stw	r18,164(sp)
  80a520:	dc402815 	stw	r17,160(sp)
  80a524:	dc002715 	stw	r16,156(sp)
  80a528:	d9c00415 	stw	r7,16(sp)
  80a52c:	202d883a 	mov	r22,r4
  80a530:	282b883a 	mov	r21,r5
  80a534:	3029883a 	mov	r20,r6
	CHECK_INIT (data, fp);
  80a538:	20000226 	beq	r4,zero,80a544 <___vfiprintf_internal_r+0x48>
  80a53c:	20800e17 	ldw	r2,56(r4)
  80a540:	1001bd26 	beq	r2,zero,80ac38 <___vfiprintf_internal_r+0x73c>
	ORIENT(fp, -1);
  80a544:	a880030b 	ldhu	r2,12(r21)
  80a548:	10c8000c 	andi	r3,r2,8192
  80a54c:	1800061e 	bne	r3,zero,80a568 <___vfiprintf_internal_r+0x6c>
	_newlib_flockfile_start (fp);
  80a550:	a8c01917 	ldw	r3,100(r21)
	ORIENT(fp, -1);
  80a554:	0137ffc4 	movi	r4,-8193
  80a558:	10880014 	ori	r2,r2,8192
  80a55c:	1906703a 	and	r3,r3,r4
  80a560:	a880030d 	sth	r2,12(r21)
  80a564:	a8c01915 	stw	r3,100(r21)
	if (cantwrite (data, fp)) {
  80a568:	10c0020c 	andi	r3,r2,8
  80a56c:	18010826 	beq	r3,zero,80a990 <___vfiprintf_internal_r+0x494>
  80a570:	a8c00417 	ldw	r3,16(r21)
  80a574:	18010626 	beq	r3,zero,80a990 <___vfiprintf_internal_r+0x494>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a578:	1080068c 	andi	r2,r2,26
  80a57c:	10800298 	cmpnei	r2,r2,10
  80a580:	10010b26 	beq	r2,zero,80a9b0 <___vfiprintf_internal_r+0x4b4>
	uio.uio_iov = iovp = iov;
  80a584:	dc801704 	addi	r18,sp,92
  80a588:	dc800a15 	stw	r18,40(sp)
	uio.uio_resid = 0;
  80a58c:	d8000c15 	stw	zero,48(sp)
	uio.uio_iovcnt = 0;
  80a590:	d8000b15 	stw	zero,44(sp)
	uio.uio_iov = iovp = iov;
  80a594:	9021883a 	mov	r16,r18
	char *xdigs = NULL;	/* digits for [xX] conversion */
  80a598:	d8000515 	stw	zero,20(sp)
	ret = 0;
  80a59c:	d8000115 	stw	zero,4(sp)
                while (*fmt != '\0' && *fmt != '%')
  80a5a0:	a0800007 	ldb	r2,0(r20)
  80a5a4:	1000e826 	beq	r2,zero,80a948 <___vfiprintf_internal_r+0x44c>
  80a5a8:	a023883a 	mov	r17,r20
  80a5ac:	00000306 	br	80a5bc <___vfiprintf_internal_r+0xc0>
  80a5b0:	88800047 	ldb	r2,1(r17)
                    fmt += 1;
  80a5b4:	8c400044 	addi	r17,r17,1
                while (*fmt != '\0' && *fmt != '%')
  80a5b8:	10013326 	beq	r2,zero,80aa88 <___vfiprintf_internal_r+0x58c>
  80a5bc:	10800958 	cmpnei	r2,r2,37
  80a5c0:	103ffb1e 	bne	r2,zero,80a5b0 <___vfiprintf_internal_r+0xb4>
		if ((m = fmt - cp) != 0) {
  80a5c4:	8d27c83a 	sub	r19,r17,r20
  80a5c8:	8d01311e 	bne	r17,r20,80aa90 <___vfiprintf_internal_r+0x594>
                if (*fmt == '\0')
  80a5cc:	88800003 	ldbu	r2,0(r17)
  80a5d0:	10803fcc 	andi	r2,r2,255
  80a5d4:	1080201c 	xori	r2,r2,128
  80a5d8:	10bfe004 	addi	r2,r2,-128
  80a5dc:	1000da26 	beq	r2,zero,80a948 <___vfiprintf_internal_r+0x44c>
		fmt++;		/* skip over '%' */
  80a5e0:	88800047 	ldb	r2,1(r17)
  80a5e4:	8d000044 	addi	r20,r17,1
		sign = '\0';
  80a5e8:	d8000945 	stb	zero,37(sp)
rflag:		ch = *fmt++;
  80a5ec:	000b883a 	mov	r5,zero
  80a5f0:	000d883a 	mov	r6,zero
		prec = -1;
  80a5f4:	023fffc4 	movi	r8,-1
		width = 0;
  80a5f8:	0023883a 	mov	r17,zero
		flags = 0;
  80a5fc:	001b883a 	mov	r13,zero
rflag:		ch = *fmt++;
  80a600:	a5000044 	addi	r20,r20,1
reswitch:	switch (ch) {
  80a604:	10fff804 	addi	r3,r2,-32
  80a608:	19001668 	cmpgeui	r4,r3,89
  80a60c:	20006c1e 	bne	r4,zero,80a7c0 <___vfiprintf_internal_r+0x2c4>
  80a610:	180690ba 	slli	r3,r3,2
  80a614:	01002074 	movhi	r4,129
  80a618:	1909883a 	add	r4,r3,r4
  80a61c:	20e98917 	ldw	r3,-23004(r4)
  80a620:	1800683a 	jmp	r3
  80a624:	0080af60 	cmpeqi	r2,zero,701
  80a628:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a62c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a630:	0080af54 	movui	r2,701
  80a634:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a638:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a63c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a640:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a644:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a648:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a64c:	0080af2c 	andhi	r2,zero,700
  80a650:	0080af1c 	xori	r2,zero,700
  80a654:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a658:	0080af04 	movi	r2,700
  80a65c:	0080aeb8 	rdprs	r2,zero,698
  80a660:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a664:	0080aeac 	andhi	r2,zero,698
  80a668:	0080a788 	cmpgei	r2,zero,670
  80a66c:	0080a788 	cmpgei	r2,zero,670
  80a670:	0080a788 	cmpgei	r2,zero,670
  80a674:	0080a788 	cmpgei	r2,zero,670
  80a678:	0080a788 	cmpgei	r2,zero,670
  80a67c:	0080a788 	cmpgei	r2,zero,670
  80a680:	0080a788 	cmpgei	r2,zero,670
  80a684:	0080a788 	cmpgei	r2,zero,670
  80a688:	0080a788 	cmpgei	r2,zero,670
  80a68c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a690:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a694:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a698:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a69c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6a0:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6a4:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6a8:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6ac:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6b0:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6b4:	0080ada8 	cmpgeui	r2,zero,694
  80a6b8:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6bc:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6c0:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6c4:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6c8:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6cc:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6d0:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6d4:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6d8:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6dc:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6e0:	0080aa20 	cmpeqi	r2,zero,680
  80a6e4:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6e8:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6ec:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6f0:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6f4:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a6f8:	0080a9f8 	rdprs	r2,zero,679
  80a6fc:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a700:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a704:	0080afb4 	movhi	r2,702
  80a708:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a70c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a710:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a714:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a718:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a71c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a720:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a724:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a728:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a72c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a730:	0080af8c 	andi	r2,zero,702
  80a734:	0080ac40 	call	80ac4 <__alt_mem_sdram-0x77f53c>
  80a738:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a73c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a740:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a744:	0080acb4 	movhi	r2,690
  80a748:	0080ac40 	call	80ac4 <__alt_mem_sdram-0x77f53c>
  80a74c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a750:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a754:	0080b038 	rdprs	r2,zero,704
  80a758:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a75c:	0080affc 	xorhi	r2,zero,703
  80a760:	0080aa24 	muli	r2,zero,680
  80a764:	0080ad6c 	andhi	r2,zero,693
  80a768:	0080ad60 	cmpeqi	r2,zero,693
  80a76c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a770:	0080ad08 	cmpgei	r2,zero,692
  80a774:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a778:	0080a9fc 	xorhi	r2,zero,679
  80a77c:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a780:	0080a7c0 	call	80a7c <__alt_mem_sdram-0x77f584>
  80a784:	0080acc0 	call	80acc <__alt_mem_sdram-0x77f534>
			n = 0;
  80a788:	0023883a 	mov	r17,zero
  80a78c:	113ff404 	addi	r4,r2,-48
				n = 10 * n + to_digit (ch);
  80a790:	880690ba 	slli	r3,r17,2
				ch = *fmt++;
  80a794:	a0800007 	ldb	r2,0(r20)
  80a798:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  80a79c:	1c63883a 	add	r17,r3,r17
  80a7a0:	8c63883a 	add	r17,r17,r17
  80a7a4:	2463883a 	add	r17,r4,r17
			} while (is_digit (ch));
  80a7a8:	113ff404 	addi	r4,r2,-48
  80a7ac:	20c002b0 	cmpltui	r3,r4,10
  80a7b0:	183ff71e 	bne	r3,zero,80a790 <___vfiprintf_internal_r+0x294>
reswitch:	switch (ch) {
  80a7b4:	10fff804 	addi	r3,r2,-32
  80a7b8:	19001668 	cmpgeui	r4,r3,89
  80a7bc:	203f9426 	beq	r4,zero,80a610 <___vfiprintf_internal_r+0x114>
  80a7c0:	29403fcc 	andi	r5,r5,255
  80a7c4:	2803ed1e 	bne	r5,zero,80b77c <___vfiprintf_internal_r+0x1280>
			if (ch == '\0')
  80a7c8:	10005f26 	beq	r2,zero,80a948 <___vfiprintf_internal_r+0x44c>
			*cp = ch;
  80a7cc:	d8800d05 	stb	r2,52(sp)
			sign = '\0';
  80a7d0:	d8000945 	stb	zero,37(sp)
			break;
  80a7d4:	05c00044 	movi	r23,1
			size = 1;
  80a7d8:	07000044 	movi	fp,1
			cp = buf;
  80a7dc:	dcc00d04 	addi	r19,sp,52
			cp = buf + BUF;
  80a7e0:	db400015 	stw	r13,0(sp)
  80a7e4:	0011883a 	mov	r8,zero
		if (flags & HEXPREFIX)
  80a7e8:	d8800017 	ldw	r2,0(sp)
  80a7ec:	1380008c 	andi	r14,r2,2
  80a7f0:	70000126 	beq	r14,zero,80a7f8 <___vfiprintf_internal_r+0x2fc>
			realsz+= 2;
  80a7f4:	bdc00084 	addi	r23,r23,2
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a7f8:	d8800017 	ldw	r2,0(sp)
			PRINT (&sign, 1);
  80a7fc:	d9000b17 	ldw	r4,44(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a800:	1340210c 	andi	r13,r2,132
			PRINT (&sign, 1);
  80a804:	21800044 	addi	r6,r4,1
  80a808:	d8800c17 	ldw	r2,48(sp)
  80a80c:	300b883a 	mov	r5,r6
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a810:	6800021e 	bne	r13,zero,80a81c <___vfiprintf_internal_r+0x320>
			PAD (width - realsz, blanks);
  80a814:	8dc7c83a 	sub	r3,r17,r23
  80a818:	00c2e216 	blt	zero,r3,80b3a4 <___vfiprintf_internal_r+0xea8>
		if (sign)
  80a81c:	d8c00947 	ldb	r3,37(sp)
			PRINT (&sign, 1);
  80a820:	81800204 	addi	r6,r16,8
		if (sign)
  80a824:	18000d26 	beq	r3,zero,80a85c <___vfiprintf_internal_r+0x360>
			PRINT (&sign, 1);
  80a828:	d8c00944 	addi	r3,sp,37
  80a82c:	10800044 	addi	r2,r2,1
  80a830:	80c00015 	stw	r3,0(r16)
  80a834:	00c00044 	movi	r3,1
  80a838:	80c00115 	stw	r3,4(r16)
  80a83c:	d8800c15 	stw	r2,48(sp)
  80a840:	d9400b15 	stw	r5,44(sp)
  80a844:	28c00208 	cmpgei	r3,r5,8
  80a848:	18029a1e 	bne	r3,zero,80b2b4 <___vfiprintf_internal_r+0xdb8>
			PRINT (ox, 2);
  80a84c:	2809883a 	mov	r4,r5
  80a850:	3021883a 	mov	r16,r6
  80a854:	29400044 	addi	r5,r5,1
  80a858:	31800204 	addi	r6,r6,8
		if (flags & HEXPREFIX)
  80a85c:	70001826 	beq	r14,zero,80a8c0 <___vfiprintf_internal_r+0x3c4>
			PRINT (ox, 2);
  80a860:	d8c00984 	addi	r3,sp,38
  80a864:	10800084 	addi	r2,r2,2
  80a868:	80c00015 	stw	r3,0(r16)
  80a86c:	00c00084 	movi	r3,2
  80a870:	80c00115 	stw	r3,4(r16)
  80a874:	d8800c15 	stw	r2,48(sp)
  80a878:	d9400b15 	stw	r5,44(sp)
  80a87c:	28c00208 	cmpgei	r3,r5,8
  80a880:	1802a426 	beq	r3,zero,80b314 <___vfiprintf_internal_r+0xe18>
	if (uio->uio_resid == 0) {
  80a884:	10032226 	beq	r2,zero,80b510 <___vfiprintf_internal_r+0x1014>
  80a888:	d9800a04 	addi	r6,sp,40
  80a88c:	a80b883a 	mov	r5,r21
  80a890:	b009883a 	mov	r4,r22
  80a894:	da000315 	stw	r8,12(sp)
  80a898:	db400215 	stw	r13,8(sp)
  80a89c:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PRINT (ox, 2);
  80a8a0:	10002b1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  80a8a4:	d9000b17 	ldw	r4,44(sp)
  80a8a8:	d8800c17 	ldw	r2,48(sp)
			PRINT (ox, 2);
  80a8ac:	da000317 	ldw	r8,12(sp)
  80a8b0:	db400217 	ldw	r13,8(sp)
		PRINT (cp, size);
  80a8b4:	d9801904 	addi	r6,sp,100
  80a8b8:	21400044 	addi	r5,r4,1
			PRINT (ox, 2);
  80a8bc:	9021883a 	mov	r16,r18
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  80a8c0:	6b402018 	cmpnei	r13,r13,128
  80a8c4:	6801e526 	beq	r13,zero,80b05c <___vfiprintf_internal_r+0xb60>
		PAD (dprec - size, zeroes);
  80a8c8:	4711c83a 	sub	r8,r8,fp
  80a8cc:	02022416 	blt	zero,r8,80b160 <___vfiprintf_internal_r+0xc64>
		PRINT (cp, size);
  80a8d0:	e085883a 	add	r2,fp,r2
  80a8d4:	d9400b15 	stw	r5,44(sp)
  80a8d8:	84c00015 	stw	r19,0(r16)
  80a8dc:	87000115 	stw	fp,4(r16)
  80a8e0:	d8800c15 	stw	r2,48(sp)
  80a8e4:	29400210 	cmplti	r5,r5,8
  80a8e8:	2800081e 	bne	r5,zero,80a90c <___vfiprintf_internal_r+0x410>
	if (uio->uio_resid == 0) {
  80a8ec:	10009826 	beq	r2,zero,80ab50 <___vfiprintf_internal_r+0x654>
  80a8f0:	d9800a04 	addi	r6,sp,40
  80a8f4:	a80b883a 	mov	r5,r21
  80a8f8:	b009883a 	mov	r4,r22
  80a8fc:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
		PRINT (cp, size);
  80a900:	1000131e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  80a904:	d8800c17 	ldw	r2,48(sp)
		PRINT (cp, size);
  80a908:	900d883a 	mov	r6,r18
		if (flags & LADJUST)
  80a90c:	d8c00017 	ldw	r3,0(sp)
  80a910:	1cc0010c 	andi	r19,r3,4
  80a914:	98000226 	beq	r19,zero,80a920 <___vfiprintf_internal_r+0x424>
			PAD (width - realsz, blanks);
  80a918:	8de1c83a 	sub	r16,r17,r23
  80a91c:	04009316 	blt	zero,r16,80ab6c <___vfiprintf_internal_r+0x670>
		ret += width > realsz ? width : realsz;
  80a920:	8dc0010e 	bge	r17,r23,80a928 <___vfiprintf_internal_r+0x42c>
  80a924:	b823883a 	mov	r17,r23
  80a928:	d8c00117 	ldw	r3,4(sp)
  80a92c:	1c47883a 	add	r3,r3,r17
  80a930:	d8c00115 	stw	r3,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80a934:	1002551e 	bne	r2,zero,80b28c <___vfiprintf_internal_r+0xd90>
                while (*fmt != '\0' && *fmt != '%')
  80a938:	a0800007 	ldb	r2,0(r20)
		FLUSH ();	/* copy out the I/O vectors */
  80a93c:	d8000b15 	stw	zero,44(sp)
  80a940:	9021883a 	mov	r16,r18
                while (*fmt != '\0' && *fmt != '%')
  80a944:	103f181e 	bne	r2,zero,80a5a8 <___vfiprintf_internal_r+0xac>
	FLUSH ();
  80a948:	d8800c17 	ldw	r2,48(sp)
  80a94c:	10038d1e 	bne	r2,zero,80b784 <___vfiprintf_internal_r+0x1288>
	return (__sferror (fp) ? EOF : ret);
  80a950:	a880030b 	ldhu	r2,12(r21)
  80a954:	1080100c 	andi	r2,r2,64
  80a958:	1003a51e 	bne	r2,zero,80b7f0 <___vfiprintf_internal_r+0x12f4>
}
  80a95c:	d8800117 	ldw	r2,4(sp)
  80a960:	dfc03017 	ldw	ra,192(sp)
  80a964:	df002f17 	ldw	fp,188(sp)
  80a968:	ddc02e17 	ldw	r23,184(sp)
  80a96c:	dd802d17 	ldw	r22,180(sp)
  80a970:	dd402c17 	ldw	r21,176(sp)
  80a974:	dd002b17 	ldw	r20,172(sp)
  80a978:	dcc02a17 	ldw	r19,168(sp)
  80a97c:	dc802917 	ldw	r18,164(sp)
  80a980:	dc402817 	ldw	r17,160(sp)
  80a984:	dc002717 	ldw	r16,156(sp)
  80a988:	dec03104 	addi	sp,sp,196
  80a98c:	f800283a 	ret
	if (cantwrite (data, fp)) {
  80a990:	a80b883a 	mov	r5,r21
  80a994:	b009883a 	mov	r4,r22
  80a998:	0804f800 	call	804f80 <__swsetup_r>
  80a99c:	1003941e 	bne	r2,zero,80b7f0 <___vfiprintf_internal_r+0x12f4>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a9a0:	a880030b 	ldhu	r2,12(r21)
  80a9a4:	1080068c 	andi	r2,r2,26
  80a9a8:	10800298 	cmpnei	r2,r2,10
  80a9ac:	103ef51e 	bne	r2,zero,80a584 <___vfiprintf_internal_r+0x88>
  80a9b0:	a880038f 	ldh	r2,14(r21)
  80a9b4:	103ef316 	blt	r2,zero,80a584 <___vfiprintf_internal_r+0x88>
		return (__sbprintf (data, fp, fmt0, ap));
  80a9b8:	d9c00417 	ldw	r7,16(sp)
  80a9bc:	a00d883a 	mov	r6,r20
  80a9c0:	a80b883a 	mov	r5,r21
  80a9c4:	b009883a 	mov	r4,r22
}
  80a9c8:	dfc03017 	ldw	ra,192(sp)
  80a9cc:	df002f17 	ldw	fp,188(sp)
  80a9d0:	ddc02e17 	ldw	r23,184(sp)
  80a9d4:	dd802d17 	ldw	r22,180(sp)
  80a9d8:	dd402c17 	ldw	r21,176(sp)
  80a9dc:	dd002b17 	ldw	r20,172(sp)
  80a9e0:	dcc02a17 	ldw	r19,168(sp)
  80a9e4:	dc802917 	ldw	r18,164(sp)
  80a9e8:	dc402817 	ldw	r17,160(sp)
  80a9ec:	dc002717 	ldw	r16,156(sp)
  80a9f0:	dec03104 	addi	sp,sp,196
		return (__sbprintf (data, fp, fmt0, ap));
  80a9f4:	080b8581 	jmpi	80b858 <__sbprintf>
			flags |= LONGINT;
  80a9f8:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80a9fc:	6880080c 	andi	r2,r13,32
  80aa00:	10004726 	beq	r2,zero,80ab20 <___vfiprintf_internal_r+0x624>
  80aa04:	d8c00417 	ldw	r3,16(sp)
			base = DEC;
  80aa08:	00800044 	movi	r2,1
			_uquad = UARG ();
  80aa0c:	1dc00017 	ldw	r23,0(r3)
  80aa10:	1f000117 	ldw	fp,4(r3)
  80aa14:	18c00204 	addi	r3,r3,8
  80aa18:	d8c00415 	stw	r3,16(sp)
  80aa1c:	00000906 	br	80aa44 <___vfiprintf_internal_r+0x548>
			flags |= LONGINT;
  80aa20:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80aa24:	6880080c 	andi	r2,r13,32
  80aa28:	10003126 	beq	r2,zero,80aaf0 <___vfiprintf_internal_r+0x5f4>
  80aa2c:	d8c00417 	ldw	r3,16(sp)
			base = OCT;
  80aa30:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  80aa34:	1dc00017 	ldw	r23,0(r3)
  80aa38:	1f000117 	ldw	fp,4(r3)
  80aa3c:	18c00204 	addi	r3,r3,8
  80aa40:	d8c00415 	stw	r3,16(sp)
nosign:			sign = '\0';
  80aa44:	d8000945 	stb	zero,37(sp)
number:			if ((dprec = prec) >= 0)
  80aa48:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  80aa4c:	001d883a 	mov	r14,zero
number:			if ((dprec = prec) >= 0)
  80aa50:	1800f01e 	bne	r3,zero,80ae14 <___vfiprintf_internal_r+0x918>
				flags &= ~ZEROPAD;
  80aa54:	04ffdfc4 	movi	r19,-129
  80aa58:	6cc8703a 	and	r4,r13,r19
			if (_uquad != 0 || prec != 0) {
  80aa5c:	bf06b03a 	or	r3,r23,fp
				flags &= ~ZEROPAD;
  80aa60:	d9000015 	stw	r4,0(sp)
			if (_uquad != 0 || prec != 0) {
  80aa64:	1802301e 	bne	r3,zero,80b328 <___vfiprintf_internal_r+0xe2c>
  80aa68:	4001f31e 	bne	r8,zero,80b238 <___vfiprintf_internal_r+0xd3c>
                       else if (base == OCT && (flags & ALT))
  80aa6c:	10029e1e 	bne	r2,zero,80b4e8 <___vfiprintf_internal_r+0xfec>
  80aa70:	6f00004c 	andi	fp,r13,1
  80aa74:	e002bc26 	beq	fp,zero,80b568 <___vfiprintf_internal_r+0x106c>
                         *--cp = '0';
  80aa78:	00800c04 	movi	r2,48
  80aa7c:	d88016c5 	stb	r2,91(sp)
  80aa80:	dcc016c4 	addi	r19,sp,91
  80aa84:	00010006 	br	80ae88 <___vfiprintf_internal_r+0x98c>
		if ((m = fmt - cp) != 0) {
  80aa88:	8d27c83a 	sub	r19,r17,r20
  80aa8c:	8d3fae26 	beq	r17,r20,80a948 <___vfiprintf_internal_r+0x44c>
			PRINT (cp, m);
  80aa90:	d8c00c17 	ldw	r3,48(sp)
  80aa94:	d8800b17 	ldw	r2,44(sp)
  80aa98:	85000015 	stw	r20,0(r16)
  80aa9c:	98c7883a 	add	r3,r19,r3
  80aaa0:	10800044 	addi	r2,r2,1
  80aaa4:	d8800b15 	stw	r2,44(sp)
  80aaa8:	84c00115 	stw	r19,4(r16)
  80aaac:	d8c00c15 	stw	r3,48(sp)
  80aab0:	10800208 	cmpgei	r2,r2,8
  80aab4:	1000061e 	bne	r2,zero,80aad0 <___vfiprintf_internal_r+0x5d4>
  80aab8:	84000204 	addi	r16,r16,8
			ret += m;
  80aabc:	d8c00117 	ldw	r3,4(sp)
                if (*fmt == '\0')
  80aac0:	88800003 	ldbu	r2,0(r17)
			ret += m;
  80aac4:	1cc7883a 	add	r3,r3,r19
  80aac8:	d8c00115 	stw	r3,4(sp)
  80aacc:	003ec006 	br	80a5d0 <___vfiprintf_internal_r+0xd4>
	if (uio->uio_resid == 0) {
  80aad0:	18028126 	beq	r3,zero,80b4d8 <___vfiprintf_internal_r+0xfdc>
  80aad4:	d9800a04 	addi	r6,sp,40
  80aad8:	a80b883a 	mov	r5,r21
  80aadc:	b009883a 	mov	r4,r22
  80aae0:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PRINT (cp, m);
  80aae4:	103f9a1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80aae8:	9021883a 	mov	r16,r18
  80aaec:	003ff306 	br	80aabc <___vfiprintf_internal_r+0x5c0>
			width = GET_ARG (n, ap, int);
  80aaf0:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80aaf4:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80aaf8:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80aafc:	1002ac1e 	bne	r2,zero,80b5b0 <___vfiprintf_internal_r+0x10b4>
  80ab00:	6880100c 	andi	r2,r13,64
  80ab04:	1002fb26 	beq	r2,zero,80b6f4 <___vfiprintf_internal_r+0x11f8>
  80ab08:	d8800417 	ldw	r2,16(sp)
  80ab0c:	0039883a 	mov	fp,zero
  80ab10:	d8c00415 	stw	r3,16(sp)
  80ab14:	15c0000b 	ldhu	r23,0(r2)
			base = OCT;
  80ab18:	0005883a 	mov	r2,zero
  80ab1c:	003fc906 	br	80aa44 <___vfiprintf_internal_r+0x548>
			width = GET_ARG (n, ap, int);
  80ab20:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80ab24:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80ab28:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80ab2c:	1002af1e 	bne	r2,zero,80b5ec <___vfiprintf_internal_r+0x10f0>
  80ab30:	6880100c 	andi	r2,r13,64
  80ab34:	1002fb26 	beq	r2,zero,80b724 <___vfiprintf_internal_r+0x1228>
  80ab38:	d8800417 	ldw	r2,16(sp)
  80ab3c:	0039883a 	mov	fp,zero
  80ab40:	d8c00415 	stw	r3,16(sp)
  80ab44:	15c0000b 	ldhu	r23,0(r2)
			base = DEC;
  80ab48:	00800044 	movi	r2,1
  80ab4c:	003fbd06 	br	80aa44 <___vfiprintf_internal_r+0x548>
		if (flags & LADJUST)
  80ab50:	d8c00017 	ldw	r3,0(sp)
		uio->uio_iovcnt = 0;
  80ab54:	d8000b15 	stw	zero,44(sp)
		if (flags & LADJUST)
  80ab58:	1cc0010c 	andi	r19,r3,4
  80ab5c:	98024c26 	beq	r19,zero,80b490 <___vfiprintf_internal_r+0xf94>
			PAD (width - realsz, blanks);
  80ab60:	8de1c83a 	sub	r16,r17,r23
  80ab64:	04024a0e 	bge	zero,r16,80b490 <___vfiprintf_internal_r+0xf94>
		PRINT (cp, size);
  80ab68:	900d883a 	mov	r6,r18
			PAD (width - realsz, blanks);
  80ab6c:	80c00450 	cmplti	r3,r16,17
  80ab70:	d9000b17 	ldw	r4,44(sp)
  80ab74:	01c02074 	movhi	r7,129
  80ab78:	18031a1e 	bne	r3,zero,80b7e4 <___vfiprintf_internal_r+0x12e8>
  80ab7c:	39cb9304 	addi	r7,r7,11852
  80ab80:	04c00404 	movi	r19,16
  80ab84:	00000606 	br	80aba0 <___vfiprintf_internal_r+0x6a4>
  80ab88:	21400084 	addi	r5,r4,2
  80ab8c:	31800204 	addi	r6,r6,8
  80ab90:	1809883a 	mov	r4,r3
  80ab94:	843ffc04 	addi	r16,r16,-16
  80ab98:	80c00448 	cmpgei	r3,r16,17
  80ab9c:	18001726 	beq	r3,zero,80abfc <___vfiprintf_internal_r+0x700>
  80aba0:	20c00044 	addi	r3,r4,1
  80aba4:	10800404 	addi	r2,r2,16
  80aba8:	31c00015 	stw	r7,0(r6)
  80abac:	34c00115 	stw	r19,4(r6)
  80abb0:	d8800c15 	stw	r2,48(sp)
  80abb4:	d8c00b15 	stw	r3,44(sp)
  80abb8:	19400208 	cmpgei	r5,r3,8
  80abbc:	283ff226 	beq	r5,zero,80ab88 <___vfiprintf_internal_r+0x68c>
  80abc0:	d9800a04 	addi	r6,sp,40
  80abc4:	a80b883a 	mov	r5,r21
  80abc8:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80abcc:	10011f26 	beq	r2,zero,80b04c <___vfiprintf_internal_r+0xb50>
  80abd0:	d9c00015 	stw	r7,0(sp)
  80abd4:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80abd8:	103f5d1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80abdc:	d9000b17 	ldw	r4,44(sp)
  80abe0:	843ffc04 	addi	r16,r16,-16
  80abe4:	80c00448 	cmpgei	r3,r16,17
  80abe8:	d8800c17 	ldw	r2,48(sp)
  80abec:	d9c00017 	ldw	r7,0(sp)
  80abf0:	900d883a 	mov	r6,r18
  80abf4:	21400044 	addi	r5,r4,1
  80abf8:	183fe91e 	bne	r3,zero,80aba0 <___vfiprintf_internal_r+0x6a4>
  80abfc:	1405883a 	add	r2,r2,r16
  80ac00:	d9400b15 	stw	r5,44(sp)
  80ac04:	31c00015 	stw	r7,0(r6)
  80ac08:	34000115 	stw	r16,4(r6)
  80ac0c:	d8800c15 	stw	r2,48(sp)
  80ac10:	29400210 	cmplti	r5,r5,8
  80ac14:	283f421e 	bne	r5,zero,80a920 <___vfiprintf_internal_r+0x424>
	if (uio->uio_resid == 0) {
  80ac18:	10021d26 	beq	r2,zero,80b490 <___vfiprintf_internal_r+0xf94>
  80ac1c:	d9800a04 	addi	r6,sp,40
  80ac20:	a80b883a 	mov	r5,r21
  80ac24:	b009883a 	mov	r4,r22
  80ac28:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80ac2c:	103f481e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  80ac30:	d8800c17 	ldw	r2,48(sp)
  80ac34:	003f3a06 	br	80a920 <___vfiprintf_internal_r+0x424>
	CHECK_INIT (data, fp);
  80ac38:	08070a80 	call	8070a8 <__sinit>
  80ac3c:	003e4106 	br	80a544 <___vfiprintf_internal_r+0x48>
  80ac40:	29403fcc 	andi	r5,r5,255
  80ac44:	2802da1e 	bne	r5,zero,80b7b0 <___vfiprintf_internal_r+0x12b4>
			_uquad = SARG ();
  80ac48:	6880080c 	andi	r2,r13,32
  80ac4c:	10005b26 	beq	r2,zero,80adbc <___vfiprintf_internal_r+0x8c0>
  80ac50:	d8c00417 	ldw	r3,16(sp)
  80ac54:	18800117 	ldw	r2,4(r3)
  80ac58:	1dc00017 	ldw	r23,0(r3)
  80ac5c:	18c00204 	addi	r3,r3,8
  80ac60:	d8c00415 	stw	r3,16(sp)
  80ac64:	1039883a 	mov	fp,r2
			if ((quad_t)_uquad < 0)
  80ac68:	10006016 	blt	r2,zero,80adec <___vfiprintf_internal_r+0x8f0>
number:			if ((dprec = prec) >= 0)
  80ac6c:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  80ac70:	db800943 	ldbu	r14,37(sp)
number:			if ((dprec = prec) >= 0)
  80ac74:	10000626 	beq	r2,zero,80ac90 <___vfiprintf_internal_r+0x794>
				flags &= ~ZEROPAD;
  80ac78:	04ffdfc4 	movi	r19,-129
  80ac7c:	6cc6703a 	and	r3,r13,r19
			if (_uquad != 0 || prec != 0) {
  80ac80:	bf04b03a 	or	r2,r23,fp
				flags &= ~ZEROPAD;
  80ac84:	d8c00015 	stw	r3,0(sp)
			if (_uquad != 0 || prec != 0) {
  80ac88:	10021626 	beq	r2,zero,80b4e4 <___vfiprintf_internal_r+0xfe8>
				flags &= ~ZEROPAD;
  80ac8c:	db400017 	ldw	r13,0(sp)
					if (_uquad < 10) {
  80ac90:	e001a71e 	bne	fp,zero,80b330 <___vfiprintf_internal_r+0xe34>
  80ac94:	b88002a8 	cmpgeui	r2,r23,10
  80ac98:	1001a51e 	bne	r2,zero,80b330 <___vfiprintf_internal_r+0xe34>
						*--cp = to_char(_uquad);
  80ac9c:	bdc00c04 	addi	r23,r23,48
  80aca0:	ddc016c5 	stb	r23,91(sp)
						break;
  80aca4:	db400015 	stw	r13,0(sp)
  80aca8:	07000044 	movi	fp,1
						*--cp = to_char(_uquad);
  80acac:	dcc016c4 	addi	r19,sp,91
						break;
  80acb0:	00007506 	br	80ae88 <___vfiprintf_internal_r+0x98c>
				flags |= SHORTINT;
  80acb4:	a0800007 	ldb	r2,0(r20)
  80acb8:	6b401014 	ori	r13,r13,64
			goto rflag;
  80acbc:	003e5006 	br	80a600 <___vfiprintf_internal_r+0x104>
  80acc0:	29403fcc 	andi	r5,r5,255
  80acc4:	2802bc1e 	bne	r5,zero,80b7b8 <___vfiprintf_internal_r+0x12bc>
			xdigs = "0123456789abcdef";
  80acc8:	00c02074 	movhi	r3,129
  80accc:	18caf004 	addi	r3,r3,11200
  80acd0:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80acd4:	68c0080c 	andi	r3,r13,32
  80acd8:	1800bd26 	beq	r3,zero,80afd0 <___vfiprintf_internal_r+0xad4>
  80acdc:	d8c00417 	ldw	r3,16(sp)
  80ace0:	1dc00017 	ldw	r23,0(r3)
  80ace4:	1f000117 	ldw	fp,4(r3)
  80ace8:	18c00204 	addi	r3,r3,8
  80acec:	d8c00415 	stw	r3,16(sp)
			if (flags & ALT && _uquad != 0) {
  80acf0:	68c0004c 	andi	r3,r13,1
  80acf4:	18000226 	beq	r3,zero,80ad00 <___vfiprintf_internal_r+0x804>
  80acf8:	bf06b03a 	or	r3,r23,fp
  80acfc:	1802261e 	bne	r3,zero,80b598 <___vfiprintf_internal_r+0x109c>
			base = HEX;
  80ad00:	00800084 	movi	r2,2
  80ad04:	003f4f06 	br	80aa44 <___vfiprintf_internal_r+0x548>
			cp = GET_ARG (N, ap, char_ptr_t);
  80ad08:	d8800417 	ldw	r2,16(sp)
			sign = '\0';
  80ad0c:	d8000945 	stb	zero,37(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80ad10:	14c00017 	ldw	r19,0(r2)
  80ad14:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  80ad18:	98026926 	beq	r19,zero,80b6c0 <___vfiprintf_internal_r+0x11c4>
			if (prec >= 0) {
  80ad1c:	40bfffe0 	cmpeqi	r2,r8,-1
  80ad20:	1002411e 	bne	r2,zero,80b628 <___vfiprintf_internal_r+0x112c>
				char *p = memchr (cp, 0, prec);
  80ad24:	400d883a 	mov	r6,r8
  80ad28:	000b883a 	mov	r5,zero
  80ad2c:	9809883a 	mov	r4,r19
  80ad30:	d8c00315 	stw	r3,12(sp)
  80ad34:	db400215 	stw	r13,8(sp)
  80ad38:	da000015 	stw	r8,0(sp)
  80ad3c:	08086680 	call	808668 <memchr>
				if (p != NULL)
  80ad40:	da000017 	ldw	r8,0(sp)
  80ad44:	db400217 	ldw	r13,8(sp)
  80ad48:	d8c00317 	ldw	r3,12(sp)
  80ad4c:	10029426 	beq	r2,zero,80b7a0 <___vfiprintf_internal_r+0x12a4>
					size = p - cp;
  80ad50:	14f9c83a 	sub	fp,r2,r19
  80ad54:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80ad58:	d8c00415 	stw	r3,16(sp)
  80ad5c:	003ea006 	br	80a7e0 <___vfiprintf_internal_r+0x2e4>
			flags |= QUADINT;
  80ad60:	a0800007 	ldb	r2,0(r20)
  80ad64:	6b400814 	ori	r13,r13,32
			goto rflag;
  80ad68:	003e2506 	br	80a600 <___vfiprintf_internal_r+0x104>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80ad6c:	d8c00417 	ldw	r3,16(sp)
			ox[0] = '0';
  80ad70:	00800c04 	movi	r2,48
  80ad74:	d8800985 	stb	r2,38(sp)
			ox[1] = ch = 'x';
  80ad78:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  80ad7c:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  80ad80:	d88009c5 	stb	r2,39(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80ad84:	18800104 	addi	r2,r3,4
  80ad88:	d8800415 	stw	r2,16(sp)
			xdigs = "0123456789abcdef";
  80ad8c:	208af004 	addi	r2,r4,11200
  80ad90:	d8800515 	stw	r2,20(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80ad94:	1dc00017 	ldw	r23,0(r3)
  80ad98:	0039883a 	mov	fp,zero
			flags |= HEXPREFIX;
  80ad9c:	6b400094 	ori	r13,r13,2
			base = HEX;
  80ada0:	00800084 	movi	r2,2
			goto nosign;
  80ada4:	003f2706 	br	80aa44 <___vfiprintf_internal_r+0x548>
  80ada8:	29403fcc 	andi	r5,r5,255
  80adac:	2802841e 	bne	r5,zero,80b7c0 <___vfiprintf_internal_r+0x12c4>
			flags |= LONGINT;
  80adb0:	6b400414 	ori	r13,r13,16
			_uquad = SARG ();
  80adb4:	6880080c 	andi	r2,r13,32
  80adb8:	103fa51e 	bne	r2,zero,80ac50 <___vfiprintf_internal_r+0x754>
			width = GET_ARG (n, ap, int);
  80adbc:	d9000417 	ldw	r4,16(sp)
			_uquad = SARG ();
  80adc0:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80adc4:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  80adc8:	1001ee1e 	bne	r2,zero,80b584 <___vfiprintf_internal_r+0x1088>
  80adcc:	6880100c 	andi	r2,r13,64
  80add0:	10024e26 	beq	r2,zero,80b70c <___vfiprintf_internal_r+0x1210>
  80add4:	d8800417 	ldw	r2,16(sp)
  80add8:	d8c00415 	stw	r3,16(sp)
  80addc:	15c0000f 	ldh	r23,0(r2)
  80ade0:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80ade4:	e005883a 	mov	r2,fp
  80ade8:	103fa00e 	bge	r2,zero,80ac6c <___vfiprintf_internal_r+0x770>
				_uquad = -_uquad;
  80adec:	b804c03a 	cmpne	r2,r23,zero
  80adf0:	0739c83a 	sub	fp,zero,fp
  80adf4:	e0b9c83a 	sub	fp,fp,r2
				sign = '-';
  80adf8:	00800b44 	movi	r2,45
  80adfc:	d8800945 	stb	r2,37(sp)
number:			if ((dprec = prec) >= 0)
  80ae00:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  80ae04:	05efc83a 	sub	r23,zero,r23
				sign = '-';
  80ae08:	03800b44 	movi	r14,45
			base = DEC;
  80ae0c:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  80ae10:	183f1026 	beq	r3,zero,80aa54 <___vfiprintf_internal_r+0x558>
				switch (base) {
  80ae14:	10c00060 	cmpeqi	r3,r2,1
  80ae18:	183f9d1e 	bne	r3,zero,80ac90 <___vfiprintf_internal_r+0x794>
  80ae1c:	108000a0 	cmpeqi	r2,r2,2
  80ae20:	10010a1e 	bne	r2,zero,80b24c <___vfiprintf_internal_r+0xd50>
			cp = buf + BUF;
  80ae24:	9027883a 	mov	r19,r18
						_uquad >>= 3;
  80ae28:	e008977a 	slli	r4,fp,29
  80ae2c:	b806d0fa 	srli	r3,r23,3
  80ae30:	e038d0fa 	srli	fp,fp,3
						*--cp = to_char (_uquad & 7);
  80ae34:	b88001cc 	andi	r2,r23,7
  80ae38:	10800c04 	addi	r2,r2,48
						_uquad >>= 3;
  80ae3c:	20eeb03a 	or	r23,r4,r3
						*--cp = to_char (_uquad & 7);
  80ae40:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80ae44:	bf06b03a 	or	r3,r23,fp
  80ae48:	980b883a 	mov	r5,r19
						*--cp = to_char (_uquad & 7);
  80ae4c:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80ae50:	183ff51e 	bne	r3,zero,80ae28 <___vfiprintf_internal_r+0x92c>
					if (flags & ALT && *cp != '0')
  80ae54:	68c0004c 	andi	r3,r13,1
  80ae58:	18010926 	beq	r3,zero,80b280 <___vfiprintf_internal_r+0xd84>
  80ae5c:	10803fcc 	andi	r2,r2,255
  80ae60:	1080201c 	xori	r2,r2,128
  80ae64:	10bfe004 	addi	r2,r2,-128
  80ae68:	10800c18 	cmpnei	r2,r2,48
  80ae6c:	10010426 	beq	r2,zero,80b280 <___vfiprintf_internal_r+0xd84>
						*--cp = '0';
  80ae70:	297fff84 	addi	r5,r5,-2
  80ae74:	00800c04 	movi	r2,48
  80ae78:	98bfffc5 	stb	r2,-1(r19)
			size = buf + BUF - cp;
  80ae7c:	9179c83a 	sub	fp,r18,r5
  80ae80:	db400015 	stw	r13,0(sp)
						*--cp = '0';
  80ae84:	2827883a 	mov	r19,r5
		realsz = dprec > size ? dprec : size;
  80ae88:	402f883a 	mov	r23,r8
  80ae8c:	4700010e 	bge	r8,fp,80ae94 <___vfiprintf_internal_r+0x998>
  80ae90:	e02f883a 	mov	r23,fp
		if (sign)
  80ae94:	73803fcc 	andi	r14,r14,255
  80ae98:	7380201c 	xori	r14,r14,128
  80ae9c:	73bfe004 	addi	r14,r14,-128
  80aea0:	703e5126 	beq	r14,zero,80a7e8 <___vfiprintf_internal_r+0x2ec>
			realsz++;
  80aea4:	bdc00044 	addi	r23,r23,1
  80aea8:	003e4f06 	br	80a7e8 <___vfiprintf_internal_r+0x2ec>
			flags |= ZEROPAD;
  80aeac:	a0800007 	ldb	r2,0(r20)
  80aeb0:	6b402014 	ori	r13,r13,128
			goto rflag;
  80aeb4:	003dd206 	br	80a600 <___vfiprintf_internal_r+0x104>
			if ((ch = *fmt++) == '*') {
  80aeb8:	a0800007 	ldb	r2,0(r20)
  80aebc:	a0c00044 	addi	r3,r20,1
  80aec0:	11000aa0 	cmpeqi	r4,r2,42
  80aec4:	2002521e 	bne	r4,zero,80b810 <___vfiprintf_internal_r+0x1314>
			while (is_digit (ch)) {
  80aec8:	113ff404 	addi	r4,r2,-48
  80aecc:	21c002b0 	cmpltui	r7,r4,10
			if ((ch = *fmt++) == '*') {
  80aed0:	1829883a 	mov	r20,r3
			n = 0;
  80aed4:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  80aed8:	383dca26 	beq	r7,zero,80a604 <___vfiprintf_internal_r+0x108>
				n = 10 * n + to_digit (ch);
  80aedc:	400690ba 	slli	r3,r8,2
				ch = *fmt++;
  80aee0:	a0800007 	ldb	r2,0(r20)
  80aee4:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  80aee8:	1a11883a 	add	r8,r3,r8
  80aeec:	4211883a 	add	r8,r8,r8
  80aef0:	4111883a 	add	r8,r8,r4
			while (is_digit (ch)) {
  80aef4:	113ff404 	addi	r4,r2,-48
  80aef8:	20c002b0 	cmpltui	r3,r4,10
  80aefc:	183ff71e 	bne	r3,zero,80aedc <___vfiprintf_internal_r+0x9e0>
  80af00:	003dc006 	br	80a604 <___vfiprintf_internal_r+0x108>
			if ((ch = *fmt++) == '*') {
  80af04:	a0800003 	ldbu	r2,0(r20)
			flags |= LADJUST;
  80af08:	10803fcc 	andi	r2,r2,255
  80af0c:	1080201c 	xori	r2,r2,128
  80af10:	6b400114 	ori	r13,r13,4
			goto rflag;
  80af14:	10bfe004 	addi	r2,r2,-128
  80af18:	003db906 	br	80a600 <___vfiprintf_internal_r+0x104>
			goto rflag;
  80af1c:	a0800007 	ldb	r2,0(r20)
  80af20:	01400044 	movi	r5,1
			sign = '+';
  80af24:	01800ac4 	movi	r6,43
			goto rflag;
  80af28:	003db506 	br	80a600 <___vfiprintf_internal_r+0x104>
			width = GET_ARG (n, ap, int);
  80af2c:	d8c00417 	ldw	r3,16(sp)
			if ((ch = *fmt++) == '*') {
  80af30:	a0800003 	ldbu	r2,0(r20)
			width = GET_ARG (n, ap, int);
  80af34:	1c400017 	ldw	r17,0(r3)
  80af38:	18c00104 	addi	r3,r3,4
			if (width >= 0)
  80af3c:	8801b716 	blt	r17,zero,80b61c <___vfiprintf_internal_r+0x1120>
			width = GET_ARG (n, ap, int);
  80af40:	d8c00415 	stw	r3,16(sp)
  80af44:	10803fcc 	andi	r2,r2,255
  80af48:	1080201c 	xori	r2,r2,128
  80af4c:	10bfe004 	addi	r2,r2,-128
  80af50:	003dab06 	br	80a600 <___vfiprintf_internal_r+0x104>
			flags |= ALT;
  80af54:	a0800007 	ldb	r2,0(r20)
  80af58:	6b400054 	ori	r13,r13,1
			goto rflag;
  80af5c:	003da806 	br	80a600 <___vfiprintf_internal_r+0x104>
			if (!sign)
  80af60:	30c03fcc 	andi	r3,r6,255
  80af64:	18c0201c 	xori	r3,r3,128
  80af68:	18ffe004 	addi	r3,r3,-128
			if ((ch = *fmt++) == '*') {
  80af6c:	a0800003 	ldbu	r2,0(r20)
			if (!sign)
  80af70:	183ff41e 	bne	r3,zero,80af44 <___vfiprintf_internal_r+0xa48>
  80af74:	10803fcc 	andi	r2,r2,255
  80af78:	1080201c 	xori	r2,r2,128
  80af7c:	01400044 	movi	r5,1
				sign = ' ';
  80af80:	01800804 	movi	r6,32
  80af84:	10bfe004 	addi	r2,r2,-128
  80af88:	003d9d06 	br	80a600 <___vfiprintf_internal_r+0x104>
				*cp = GET_ARG (N, ap, int);
  80af8c:	d8c00417 	ldw	r3,16(sp)
			sign = '\0';
  80af90:	d8000945 	stb	zero,37(sp)
			break;
  80af94:	05c00044 	movi	r23,1
				*cp = GET_ARG (N, ap, int);
  80af98:	18800017 	ldw	r2,0(r3)
  80af9c:	18c00104 	addi	r3,r3,4
  80afa0:	d8c00415 	stw	r3,16(sp)
  80afa4:	d8800d05 	stb	r2,52(sp)
				size = 1;
  80afa8:	07000044 	movi	fp,1
			cp = buf;
  80afac:	dcc00d04 	addi	r19,sp,52
			break;
  80afb0:	003e0b06 	br	80a7e0 <___vfiprintf_internal_r+0x2e4>
  80afb4:	29403fcc 	andi	r5,r5,255
  80afb8:	2802061e 	bne	r5,zero,80b7d4 <___vfiprintf_internal_r+0x12d8>
			xdigs = "0123456789ABCDEF";
  80afbc:	00c02074 	movhi	r3,129
  80afc0:	18caf504 	addi	r3,r3,11220
  80afc4:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80afc8:	68c0080c 	andi	r3,r13,32
  80afcc:	183f431e 	bne	r3,zero,80acdc <___vfiprintf_internal_r+0x7e0>
			width = GET_ARG (n, ap, int);
  80afd0:	d9400417 	ldw	r5,16(sp)
hex:			_uquad = UARG ();
  80afd4:	68c0040c 	andi	r3,r13,16
			width = GET_ARG (n, ap, int);
  80afd8:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  80afdc:	18017f1e 	bne	r3,zero,80b5dc <___vfiprintf_internal_r+0x10e0>
  80afe0:	68c0100c 	andi	r3,r13,64
  80afe4:	1801be26 	beq	r3,zero,80b6e0 <___vfiprintf_internal_r+0x11e4>
  80afe8:	d8c00417 	ldw	r3,16(sp)
  80afec:	0039883a 	mov	fp,zero
  80aff0:	d9000415 	stw	r4,16(sp)
  80aff4:	1dc0000b 	ldhu	r23,0(r3)
  80aff8:	003f3d06 	br	80acf0 <___vfiprintf_internal_r+0x7f4>
  80affc:	29403fcc 	andi	r5,r5,255
  80b000:	2801f61e 	bne	r5,zero,80b7dc <___vfiprintf_internal_r+0x12e0>
			width = GET_ARG (n, ap, int);
  80b004:	d9000417 	ldw	r4,16(sp)
			if (flags & QUADINT)
  80b008:	6880080c 	andi	r2,r13,32
			width = GET_ARG (n, ap, int);
  80b00c:	20c00017 	ldw	r3,0(r4)
  80b010:	21000104 	addi	r4,r4,4
			if (flags & QUADINT)
  80b014:	10016b1e 	bne	r2,zero,80b5c4 <___vfiprintf_internal_r+0x10c8>
			if (flags & LONGINT)
  80b018:	6880040c 	andi	r2,r13,16
  80b01c:	1001951e 	bne	r2,zero,80b674 <___vfiprintf_internal_r+0x1178>
			else if (flags & SHORTINT)
  80b020:	6b40100c 	andi	r13,r13,64
  80b024:	68019326 	beq	r13,zero,80b674 <___vfiprintf_internal_r+0x1178>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  80b028:	d8800117 	ldw	r2,4(sp)
  80b02c:	d9000415 	stw	r4,16(sp)
  80b030:	1880000d 	sth	r2,0(r3)
  80b034:	003d5a06 	br	80a5a0 <___vfiprintf_internal_r+0xa4>
			if (*fmt == 'l') {
  80b038:	a0800007 	ldb	r2,0(r20)
  80b03c:	10c01b18 	cmpnei	r3,r2,108
  80b040:	18019826 	beq	r3,zero,80b6a4 <___vfiprintf_internal_r+0x11a8>
				flags |= LONGINT;
  80b044:	6b400414 	ori	r13,r13,16
  80b048:	003d6d06 	br	80a600 <___vfiprintf_internal_r+0x104>
		uio->uio_iovcnt = 0;
  80b04c:	01400044 	movi	r5,1
  80b050:	0009883a 	mov	r4,zero
			PAD (width - realsz, blanks);
  80b054:	900d883a 	mov	r6,r18
  80b058:	003ece06 	br	80ab94 <___vfiprintf_internal_r+0x698>
			PAD (width - realsz, zeroes);
  80b05c:	8dc7c83a 	sub	r3,r17,r23
  80b060:	00fe190e 	bge	zero,r3,80a8c8 <___vfiprintf_internal_r+0x3cc>
  80b064:	19c00450 	cmplti	r7,r3,17
  80b068:	3801e41e 	bne	r7,zero,80b7fc <___vfiprintf_internal_r+0x1300>
  80b06c:	01c02074 	movhi	r7,129
  80b070:	39cb8f04 	addi	r7,r7,11836
  80b074:	03400404 	movi	r13,16
  80b078:	00000606 	br	80b094 <___vfiprintf_internal_r+0xb98>
  80b07c:	23800084 	addi	r14,r4,2
  80b080:	84000204 	addi	r16,r16,8
  80b084:	2809883a 	mov	r4,r5
  80b088:	18fffc04 	addi	r3,r3,-16
  80b08c:	19400448 	cmpgei	r5,r3,17
  80b090:	28001c26 	beq	r5,zero,80b104 <___vfiprintf_internal_r+0xc08>
  80b094:	21400044 	addi	r5,r4,1
  80b098:	10800404 	addi	r2,r2,16
  80b09c:	81c00015 	stw	r7,0(r16)
  80b0a0:	83400115 	stw	r13,4(r16)
  80b0a4:	d8800c15 	stw	r2,48(sp)
  80b0a8:	d9400b15 	stw	r5,44(sp)
  80b0ac:	29800208 	cmpgei	r6,r5,8
  80b0b0:	303ff226 	beq	r6,zero,80b07c <___vfiprintf_internal_r+0xb80>
  80b0b4:	d9800a04 	addi	r6,sp,40
  80b0b8:	a80b883a 	mov	r5,r21
  80b0bc:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b0c0:	10007826 	beq	r2,zero,80b2a4 <___vfiprintf_internal_r+0xda8>
  80b0c4:	d9c00615 	stw	r7,24(sp)
  80b0c8:	d8c00315 	stw	r3,12(sp)
  80b0cc:	da000215 	stw	r8,8(sp)
  80b0d0:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80b0d4:	103e1e1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80b0d8:	d8c00317 	ldw	r3,12(sp)
  80b0dc:	d9000b17 	ldw	r4,44(sp)
  80b0e0:	d8800c17 	ldw	r2,48(sp)
  80b0e4:	18fffc04 	addi	r3,r3,-16
  80b0e8:	19400448 	cmpgei	r5,r3,17
  80b0ec:	d9c00617 	ldw	r7,24(sp)
  80b0f0:	da000217 	ldw	r8,8(sp)
  80b0f4:	9021883a 	mov	r16,r18
  80b0f8:	23800044 	addi	r14,r4,1
  80b0fc:	03400404 	movi	r13,16
  80b100:	283fe41e 	bne	r5,zero,80b094 <___vfiprintf_internal_r+0xb98>
  80b104:	83400204 	addi	r13,r16,8
  80b108:	10c5883a 	add	r2,r2,r3
  80b10c:	80c00115 	stw	r3,4(r16)
  80b110:	81c00015 	stw	r7,0(r16)
  80b114:	d8800c15 	stw	r2,48(sp)
  80b118:	db800b15 	stw	r14,44(sp)
  80b11c:	70c00208 	cmpgei	r3,r14,8
  80b120:	18011326 	beq	r3,zero,80b570 <___vfiprintf_internal_r+0x1074>
	if (uio->uio_resid == 0) {
  80b124:	10018826 	beq	r2,zero,80b748 <___vfiprintf_internal_r+0x124c>
  80b128:	d9800a04 	addi	r6,sp,40
  80b12c:	a80b883a 	mov	r5,r21
  80b130:	b009883a 	mov	r4,r22
  80b134:	da000215 	stw	r8,8(sp)
  80b138:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80b13c:	103e041e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80b140:	da000217 	ldw	r8,8(sp)
		PRINT (cp, size);
  80b144:	d9000b17 	ldw	r4,44(sp)
  80b148:	d8800c17 	ldw	r2,48(sp)
		PAD (dprec - size, zeroes);
  80b14c:	4711c83a 	sub	r8,r8,fp
		PRINT (cp, size);
  80b150:	d9801904 	addi	r6,sp,100
  80b154:	21400044 	addi	r5,r4,1
			PAD (width - realsz, zeroes);
  80b158:	9021883a 	mov	r16,r18
		PAD (dprec - size, zeroes);
  80b15c:	023ddc0e 	bge	zero,r8,80a8d0 <___vfiprintf_internal_r+0x3d4>
  80b160:	40c00450 	cmplti	r3,r8,17
  80b164:	01c02074 	movhi	r7,129
  80b168:	1801741e 	bne	r3,zero,80b73c <___vfiprintf_internal_r+0x1240>
  80b16c:	39cb8f04 	addi	r7,r7,11836
  80b170:	03400404 	movi	r13,16
  80b174:	00000606 	br	80b190 <___vfiprintf_internal_r+0xc94>
  80b178:	21400084 	addi	r5,r4,2
  80b17c:	84000204 	addi	r16,r16,8
  80b180:	1809883a 	mov	r4,r3
  80b184:	423ffc04 	addi	r8,r8,-16
  80b188:	40c00448 	cmpgei	r3,r8,17
  80b18c:	18001a26 	beq	r3,zero,80b1f8 <___vfiprintf_internal_r+0xcfc>
  80b190:	20c00044 	addi	r3,r4,1
  80b194:	10800404 	addi	r2,r2,16
  80b198:	81c00015 	stw	r7,0(r16)
  80b19c:	83400115 	stw	r13,4(r16)
  80b1a0:	d8800c15 	stw	r2,48(sp)
  80b1a4:	d8c00b15 	stw	r3,44(sp)
  80b1a8:	19400208 	cmpgei	r5,r3,8
  80b1ac:	283ff226 	beq	r5,zero,80b178 <___vfiprintf_internal_r+0xc7c>
  80b1b0:	d9800a04 	addi	r6,sp,40
  80b1b4:	a80b883a 	mov	r5,r21
  80b1b8:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b1bc:	10001a26 	beq	r2,zero,80b228 <___vfiprintf_internal_r+0xd2c>
  80b1c0:	d9c00315 	stw	r7,12(sp)
  80b1c4:	da000215 	stw	r8,8(sp)
  80b1c8:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80b1cc:	103de01e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80b1d0:	da000217 	ldw	r8,8(sp)
  80b1d4:	d9000b17 	ldw	r4,44(sp)
  80b1d8:	d8800c17 	ldw	r2,48(sp)
  80b1dc:	423ffc04 	addi	r8,r8,-16
  80b1e0:	40c00448 	cmpgei	r3,r8,17
  80b1e4:	d9c00317 	ldw	r7,12(sp)
  80b1e8:	9021883a 	mov	r16,r18
  80b1ec:	21400044 	addi	r5,r4,1
  80b1f0:	03400404 	movi	r13,16
  80b1f4:	183fe61e 	bne	r3,zero,80b190 <___vfiprintf_internal_r+0xc94>
  80b1f8:	81000204 	addi	r4,r16,8
  80b1fc:	1205883a 	add	r2,r2,r8
  80b200:	81c00015 	stw	r7,0(r16)
  80b204:	82000115 	stw	r8,4(r16)
  80b208:	d8800c15 	stw	r2,48(sp)
  80b20c:	d9400b15 	stw	r5,44(sp)
  80b210:	28c00208 	cmpgei	r3,r5,8
  80b214:	1800a41e 	bne	r3,zero,80b4a8 <___vfiprintf_internal_r+0xfac>
		PRINT (cp, size);
  80b218:	29400044 	addi	r5,r5,1
  80b21c:	21800204 	addi	r6,r4,8
		PAD (dprec - size, zeroes);
  80b220:	2021883a 	mov	r16,r4
  80b224:	003daa06 	br	80a8d0 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80b228:	01400044 	movi	r5,1
  80b22c:	0009883a 	mov	r4,zero
		PAD (dprec - size, zeroes);
  80b230:	9021883a 	mov	r16,r18
  80b234:	003fd306 	br	80b184 <___vfiprintf_internal_r+0xc88>
				switch (base) {
  80b238:	10c00060 	cmpeqi	r3,r2,1
  80b23c:	1801561e 	bne	r3,zero,80b798 <___vfiprintf_internal_r+0x129c>
  80b240:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  80b244:	db400017 	ldw	r13,0(sp)
  80b248:	103ef626 	beq	r2,zero,80ae24 <___vfiprintf_internal_r+0x928>
			cp = buf + BUF;
  80b24c:	9027883a 	mov	r19,r18
						*--cp = xdigs[_uquad & 15];
  80b250:	d9000517 	ldw	r4,20(sp)
  80b254:	b88003cc 	andi	r2,r23,15
						_uquad >>= 4;
  80b258:	e006973a 	slli	r3,fp,28
  80b25c:	b82ed13a 	srli	r23,r23,4
						*--cp = xdigs[_uquad & 15];
  80b260:	2085883a 	add	r2,r4,r2
  80b264:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  80b268:	e038d13a 	srli	fp,fp,4
  80b26c:	1deeb03a 	or	r23,r3,r23
						*--cp = xdigs[_uquad & 15];
  80b270:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80b274:	bf04b03a 	or	r2,r23,fp
						*--cp = xdigs[_uquad & 15];
  80b278:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80b27c:	103ff41e 	bne	r2,zero,80b250 <___vfiprintf_internal_r+0xd54>
			size = buf + BUF - cp;
  80b280:	94f9c83a 	sub	fp,r18,r19
  80b284:	db400015 	stw	r13,0(sp)
  80b288:	003eff06 	br	80ae88 <___vfiprintf_internal_r+0x98c>
	if (uio->uio_resid == 0) {
  80b28c:	d9800a04 	addi	r6,sp,40
  80b290:	a80b883a 	mov	r5,r21
  80b294:	b009883a 	mov	r4,r22
  80b298:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
		FLUSH ();	/* copy out the I/O vectors */
  80b29c:	103da626 	beq	r2,zero,80a938 <___vfiprintf_internal_r+0x43c>
  80b2a0:	003dab06 	br	80a950 <___vfiprintf_internal_r+0x454>
		uio->uio_iovcnt = 0;
  80b2a4:	03800044 	movi	r14,1
  80b2a8:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80b2ac:	9021883a 	mov	r16,r18
  80b2b0:	003f7506 	br	80b088 <___vfiprintf_internal_r+0xb8c>
	if (uio->uio_resid == 0) {
  80b2b4:	10009026 	beq	r2,zero,80b4f8 <___vfiprintf_internal_r+0xffc>
  80b2b8:	d9800a04 	addi	r6,sp,40
  80b2bc:	a80b883a 	mov	r5,r21
  80b2c0:	b009883a 	mov	r4,r22
  80b2c4:	da000615 	stw	r8,24(sp)
  80b2c8:	db400315 	stw	r13,12(sp)
  80b2cc:	db800215 	stw	r14,8(sp)
  80b2d0:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PRINT (&sign, 1);
  80b2d4:	103d9e1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
			PRINT (ox, 2);
  80b2d8:	d9000b17 	ldw	r4,44(sp)
  80b2dc:	d8800c17 	ldw	r2,48(sp)
			PRINT (&sign, 1);
  80b2e0:	da000617 	ldw	r8,24(sp)
  80b2e4:	db400317 	ldw	r13,12(sp)
  80b2e8:	db800217 	ldw	r14,8(sp)
			PRINT (ox, 2);
  80b2ec:	d9801904 	addi	r6,sp,100
  80b2f0:	21400044 	addi	r5,r4,1
			PRINT (&sign, 1);
  80b2f4:	9021883a 	mov	r16,r18
  80b2f8:	003d5806 	br	80a85c <___vfiprintf_internal_r+0x360>
			PRINT (ox, 2);
  80b2fc:	d8800984 	addi	r2,sp,38
  80b300:	d8801715 	stw	r2,92(sp)
  80b304:	00800084 	movi	r2,2
  80b308:	d8801815 	stw	r2,96(sp)
			PRINT (&sign, 1);
  80b30c:	d9801904 	addi	r6,sp,100
			PRINT (ox, 2);
  80b310:	01400044 	movi	r5,1
  80b314:	3021883a 	mov	r16,r6
  80b318:	2809883a 	mov	r4,r5
		PRINT (cp, size);
  80b31c:	21400044 	addi	r5,r4,1
  80b320:	81800204 	addi	r6,r16,8
  80b324:	003d6606 	br	80a8c0 <___vfiprintf_internal_r+0x3c4>
				flags &= ~ZEROPAD;
  80b328:	db400017 	ldw	r13,0(sp)
  80b32c:	003eb906 	br	80ae14 <___vfiprintf_internal_r+0x918>
			cp = buf + BUF;
  80b330:	9027883a 	mov	r19,r18
					  *--cp = to_char (_uquad % 10);
  80b334:	b809883a 	mov	r4,r23
  80b338:	e00b883a 	mov	r5,fp
  80b33c:	01800284 	movi	r6,10
  80b340:	000f883a 	mov	r7,zero
  80b344:	db800315 	stw	r14,12(sp)
  80b348:	da000215 	stw	r8,8(sp)
  80b34c:	db400015 	stw	r13,0(sp)
  80b350:	080ce440 	call	80ce44 <__umoddi3>
  80b354:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  80b358:	b809883a 	mov	r4,r23
  80b35c:	e00b883a 	mov	r5,fp
					  *--cp = to_char (_uquad % 10);
  80b360:	98bfffc5 	stb	r2,-1(r19)
					  _uquad /= 10;
  80b364:	01800284 	movi	r6,10
  80b368:	000f883a 	mov	r7,zero
  80b36c:	080c8240 	call	80c824 <__udivdi3>
  80b370:	e009883a 	mov	r4,fp
  80b374:	b80b883a 	mov	r5,r23
					} while (_uquad != 0);
  80b378:	db400017 	ldw	r13,0(sp)
  80b37c:	da000217 	ldw	r8,8(sp)
  80b380:	db800317 	ldw	r14,12(sp)
					  *--cp = to_char (_uquad % 10);
  80b384:	9cffffc4 	addi	r19,r19,-1
					  _uquad /= 10;
  80b388:	102f883a 	mov	r23,r2
  80b38c:	1839883a 	mov	fp,r3
					} while (_uquad != 0);
  80b390:	203fe81e 	bne	r4,zero,80b334 <___vfiprintf_internal_r+0xe38>
  80b394:	294002a8 	cmpgeui	r5,r5,10
  80b398:	283fe61e 	bne	r5,zero,80b334 <___vfiprintf_internal_r+0xe38>
			size = buf + BUF - cp;
  80b39c:	94f9c83a 	sub	fp,r18,r19
  80b3a0:	003eb906 	br	80ae88 <___vfiprintf_internal_r+0x98c>
			PAD (width - realsz, blanks);
  80b3a4:	19400450 	cmplti	r5,r3,17
  80b3a8:	01c02074 	movhi	r7,129
  80b3ac:	2801061e 	bne	r5,zero,80b7c8 <___vfiprintf_internal_r+0x12cc>
  80b3b0:	39cb9304 	addi	r7,r7,11852
  80b3b4:	03c00404 	movi	r15,16
  80b3b8:	00000706 	br	80b3d8 <___vfiprintf_internal_r+0xedc>
  80b3bc:	27c00084 	addi	ra,r4,2
  80b3c0:	84000204 	addi	r16,r16,8
  80b3c4:	3009883a 	mov	r4,r6
  80b3c8:	18fffc04 	addi	r3,r3,-16
  80b3cc:	19400448 	cmpgei	r5,r3,17
  80b3d0:	28002026 	beq	r5,zero,80b454 <___vfiprintf_internal_r+0xf58>
  80b3d4:	21800044 	addi	r6,r4,1
  80b3d8:	10800404 	addi	r2,r2,16
  80b3dc:	81c00015 	stw	r7,0(r16)
  80b3e0:	83c00115 	stw	r15,4(r16)
  80b3e4:	d8800c15 	stw	r2,48(sp)
  80b3e8:	d9800b15 	stw	r6,44(sp)
  80b3ec:	31400208 	cmpgei	r5,r6,8
  80b3f0:	283ff226 	beq	r5,zero,80b3bc <___vfiprintf_internal_r+0xec0>
  80b3f4:	d9800a04 	addi	r6,sp,40
  80b3f8:	a80b883a 	mov	r5,r21
  80b3fc:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b400:	10001f26 	beq	r2,zero,80b480 <___vfiprintf_internal_r+0xf84>
  80b404:	d9c00815 	stw	r7,32(sp)
  80b408:	d8c00715 	stw	r3,28(sp)
  80b40c:	da000615 	stw	r8,24(sp)
  80b410:	db400315 	stw	r13,12(sp)
  80b414:	db800215 	stw	r14,8(sp)
  80b418:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80b41c:	103d4c1e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
  80b420:	d8c00717 	ldw	r3,28(sp)
  80b424:	d9000b17 	ldw	r4,44(sp)
  80b428:	d8800c17 	ldw	r2,48(sp)
  80b42c:	18fffc04 	addi	r3,r3,-16
  80b430:	19400448 	cmpgei	r5,r3,17
  80b434:	d9c00817 	ldw	r7,32(sp)
  80b438:	da000617 	ldw	r8,24(sp)
  80b43c:	db400317 	ldw	r13,12(sp)
  80b440:	db800217 	ldw	r14,8(sp)
  80b444:	9021883a 	mov	r16,r18
  80b448:	27c00044 	addi	ra,r4,1
  80b44c:	03c00404 	movi	r15,16
  80b450:	283fe01e 	bne	r5,zero,80b3d4 <___vfiprintf_internal_r+0xed8>
  80b454:	10c5883a 	add	r2,r2,r3
  80b458:	80c00115 	stw	r3,4(r16)
  80b45c:	81c00015 	stw	r7,0(r16)
  80b460:	d8800c15 	stw	r2,48(sp)
  80b464:	dfc00b15 	stw	ra,44(sp)
  80b468:	f8c00208 	cmpgei	r3,ra,8
  80b46c:	18002d1e 	bne	r3,zero,80b524 <___vfiprintf_internal_r+0x1028>
  80b470:	84000204 	addi	r16,r16,8
			PRINT (&sign, 1);
  80b474:	f9400044 	addi	r5,ra,1
  80b478:	f809883a 	mov	r4,ra
  80b47c:	003ce706 	br	80a81c <___vfiprintf_internal_r+0x320>
		uio->uio_iovcnt = 0;
  80b480:	0009883a 	mov	r4,zero
  80b484:	07c00044 	movi	ra,1
			PAD (width - realsz, blanks);
  80b488:	9021883a 	mov	r16,r18
  80b48c:	003fce06 	br	80b3c8 <___vfiprintf_internal_r+0xecc>
		ret += width > realsz ? width : realsz;
  80b490:	8dc0010e 	bge	r17,r23,80b498 <___vfiprintf_internal_r+0xf9c>
  80b494:	b823883a 	mov	r17,r23
  80b498:	d8800117 	ldw	r2,4(sp)
  80b49c:	1445883a 	add	r2,r2,r17
  80b4a0:	d8800115 	stw	r2,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80b4a4:	003d2406 	br	80a938 <___vfiprintf_internal_r+0x43c>
	if (uio->uio_resid == 0) {
  80b4a8:	10007626 	beq	r2,zero,80b684 <___vfiprintf_internal_r+0x1188>
  80b4ac:	d9800a04 	addi	r6,sp,40
  80b4b0:	a80b883a 	mov	r5,r21
  80b4b4:	b009883a 	mov	r4,r22
  80b4b8:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80b4bc:	103d241e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  80b4c0:	d9400b17 	ldw	r5,44(sp)
  80b4c4:	d8800c17 	ldw	r2,48(sp)
  80b4c8:	d9801904 	addi	r6,sp,100
  80b4cc:	29400044 	addi	r5,r5,1
		PAD (dprec - size, zeroes);
  80b4d0:	9021883a 	mov	r16,r18
  80b4d4:	003cfe06 	br	80a8d0 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80b4d8:	d8000b15 	stw	zero,44(sp)
			PRINT (cp, m);
  80b4dc:	9021883a 	mov	r16,r18
  80b4e0:	003d7606 	br	80aabc <___vfiprintf_internal_r+0x5c0>
			if (_uquad != 0 || prec != 0) {
  80b4e4:	4000ac1e 	bne	r8,zero,80b798 <___vfiprintf_internal_r+0x129c>
  80b4e8:	0011883a 	mov	r8,zero
  80b4ec:	0039883a 	mov	fp,zero
			cp = buf + BUF;
  80b4f0:	9027883a 	mov	r19,r18
  80b4f4:	003e6406 	br	80ae88 <___vfiprintf_internal_r+0x98c>
		if (flags & HEXPREFIX)
  80b4f8:	7000411e 	bne	r14,zero,80b600 <___vfiprintf_internal_r+0x1104>
  80b4fc:	0009883a 	mov	r4,zero
  80b500:	d9801904 	addi	r6,sp,100
  80b504:	01400044 	movi	r5,1
			PRINT (&sign, 1);
  80b508:	9021883a 	mov	r16,r18
  80b50c:	003cec06 	br	80a8c0 <___vfiprintf_internal_r+0x3c4>
		uio->uio_iovcnt = 0;
  80b510:	d9801904 	addi	r6,sp,100
  80b514:	01400044 	movi	r5,1
  80b518:	0009883a 	mov	r4,zero
			PRINT (ox, 2);
  80b51c:	9021883a 	mov	r16,r18
  80b520:	003ce706 	br	80a8c0 <___vfiprintf_internal_r+0x3c4>
	if (uio->uio_resid == 0) {
  80b524:	10004a26 	beq	r2,zero,80b650 <___vfiprintf_internal_r+0x1154>
  80b528:	d9800a04 	addi	r6,sp,40
  80b52c:	a80b883a 	mov	r5,r21
  80b530:	b009883a 	mov	r4,r22
  80b534:	da000615 	stw	r8,24(sp)
  80b538:	db400315 	stw	r13,12(sp)
  80b53c:	db800215 	stw	r14,8(sp)
  80b540:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80b544:	103d021e 	bne	r2,zero,80a950 <___vfiprintf_internal_r+0x454>
			PRINT (&sign, 1);
  80b548:	d9000b17 	ldw	r4,44(sp)
  80b54c:	d8800c17 	ldw	r2,48(sp)
  80b550:	da000617 	ldw	r8,24(sp)
  80b554:	db400317 	ldw	r13,12(sp)
  80b558:	db800217 	ldw	r14,8(sp)
			PAD (width - realsz, blanks);
  80b55c:	9021883a 	mov	r16,r18
			PRINT (&sign, 1);
  80b560:	21400044 	addi	r5,r4,1
  80b564:	003cad06 	br	80a81c <___vfiprintf_internal_r+0x320>
			cp = buf + BUF;
  80b568:	9027883a 	mov	r19,r18
  80b56c:	003e4606 	br	80ae88 <___vfiprintf_internal_r+0x98c>
		PRINT (cp, size);
  80b570:	71400044 	addi	r5,r14,1
  80b574:	69800204 	addi	r6,r13,8
  80b578:	7009883a 	mov	r4,r14
			PAD (width - realsz, zeroes);
  80b57c:	6821883a 	mov	r16,r13
  80b580:	003cd106 	br	80a8c8 <___vfiprintf_internal_r+0x3cc>
			_uquad = SARG ();
  80b584:	25c00017 	ldw	r23,0(r4)
  80b588:	d8c00415 	stw	r3,16(sp)
  80b58c:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80b590:	e005883a 	mov	r2,fp
  80b594:	003db406 	br	80ac68 <___vfiprintf_internal_r+0x76c>
				ox[0] = '0';
  80b598:	00c00c04 	movi	r3,48
				ox[1] = ch;
  80b59c:	d88009c5 	stb	r2,39(sp)
				ox[0] = '0';
  80b5a0:	d8c00985 	stb	r3,38(sp)
				flags |= HEXPREFIX;
  80b5a4:	6b400094 	ori	r13,r13,2
			base = HEX;
  80b5a8:	00800084 	movi	r2,2
  80b5ac:	003d2506 	br	80aa44 <___vfiprintf_internal_r+0x548>
			_uquad = UARG ();
  80b5b0:	25c00017 	ldw	r23,0(r4)
  80b5b4:	0039883a 	mov	fp,zero
  80b5b8:	d8c00415 	stw	r3,16(sp)
			base = OCT;
  80b5bc:	0005883a 	mov	r2,zero
  80b5c0:	003d2006 	br	80aa44 <___vfiprintf_internal_r+0x548>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  80b5c4:	d9400117 	ldw	r5,4(sp)
  80b5c8:	d9000415 	stw	r4,16(sp)
  80b5cc:	2805d7fa 	srai	r2,r5,31
  80b5d0:	19400015 	stw	r5,0(r3)
  80b5d4:	18800115 	stw	r2,4(r3)
  80b5d8:	003bf106 	br	80a5a0 <___vfiprintf_internal_r+0xa4>
hex:			_uquad = UARG ();
  80b5dc:	2dc00017 	ldw	r23,0(r5)
  80b5e0:	0039883a 	mov	fp,zero
  80b5e4:	d9000415 	stw	r4,16(sp)
  80b5e8:	003dc106 	br	80acf0 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80b5ec:	25c00017 	ldw	r23,0(r4)
  80b5f0:	0039883a 	mov	fp,zero
  80b5f4:	d8c00415 	stw	r3,16(sp)
			base = DEC;
  80b5f8:	00800044 	movi	r2,1
  80b5fc:	003d1106 	br	80aa44 <___vfiprintf_internal_r+0x548>
			PRINT (ox, 2);
  80b600:	d8800984 	addi	r2,sp,38
  80b604:	d8801715 	stw	r2,92(sp)
  80b608:	00800084 	movi	r2,2
  80b60c:	d8801815 	stw	r2,96(sp)
  80b610:	dc001904 	addi	r16,sp,100
  80b614:	01000044 	movi	r4,1
  80b618:	003f4006 	br	80b31c <___vfiprintf_internal_r+0xe20>
			width = -width;
  80b61c:	0463c83a 	sub	r17,zero,r17
			width = GET_ARG (n, ap, int);
  80b620:	d8c00415 	stw	r3,16(sp)
  80b624:	003e3806 	br	80af08 <___vfiprintf_internal_r+0xa0c>
				size = strlen (cp);
  80b628:	9809883a 	mov	r4,r19
  80b62c:	d8c00215 	stw	r3,8(sp)
  80b630:	db400015 	stw	r13,0(sp)
  80b634:	0802d0c0 	call	802d0c <strlen>
			cp = GET_ARG (N, ap, char_ptr_t);
  80b638:	d8c00217 	ldw	r3,8(sp)
  80b63c:	db400017 	ldw	r13,0(sp)
				size = strlen (cp);
  80b640:	1039883a 	mov	fp,r2
  80b644:	102f883a 	mov	r23,r2
			cp = GET_ARG (N, ap, char_ptr_t);
  80b648:	d8c00415 	stw	r3,16(sp)
  80b64c:	003c6406 	br	80a7e0 <___vfiprintf_internal_r+0x2e4>
		if (sign)
  80b650:	d8c00947 	ldb	r3,37(sp)
  80b654:	18004326 	beq	r3,zero,80b764 <___vfiprintf_internal_r+0x1268>
			PRINT (&sign, 1);
  80b658:	d8800944 	addi	r2,sp,37
  80b65c:	d8801715 	stw	r2,92(sp)
  80b660:	00800044 	movi	r2,1
  80b664:	d8801815 	stw	r2,96(sp)
  80b668:	d9801904 	addi	r6,sp,100
  80b66c:	01400044 	movi	r5,1
  80b670:	003c7606 	br	80a84c <___vfiprintf_internal_r+0x350>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  80b674:	d8800117 	ldw	r2,4(sp)
  80b678:	18800015 	stw	r2,0(r3)
  80b67c:	d9000415 	stw	r4,16(sp)
  80b680:	003bc706 	br	80a5a0 <___vfiprintf_internal_r+0xa4>
		PRINT (cp, size);
  80b684:	00c00044 	movi	r3,1
  80b688:	e005883a 	mov	r2,fp
  80b68c:	dcc01715 	stw	r19,92(sp)
  80b690:	df001815 	stw	fp,96(sp)
  80b694:	df000c15 	stw	fp,48(sp)
  80b698:	d8c00b15 	stw	r3,44(sp)
  80b69c:	d9801904 	addi	r6,sp,100
  80b6a0:	003c9a06 	br	80a90c <___vfiprintf_internal_r+0x410>
rflag:		ch = *fmt++;
  80b6a4:	a0800043 	ldbu	r2,1(r20)
				flags |= QUADINT;
  80b6a8:	6b400814 	ori	r13,r13,32
				fmt++;
  80b6ac:	a5000044 	addi	r20,r20,1
  80b6b0:	10803fcc 	andi	r2,r2,255
  80b6b4:	1080201c 	xori	r2,r2,128
  80b6b8:	10bfe004 	addi	r2,r2,-128
  80b6bc:	003bd006 	br	80a600 <___vfiprintf_internal_r+0x104>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b6c0:	408001f0 	cmpltui	r2,r8,7
  80b6c4:	4039883a 	mov	fp,r8
  80b6c8:	10002426 	beq	r2,zero,80b75c <___vfiprintf_internal_r+0x1260>
				cp = "(null)";
  80b6cc:	04c02074 	movhi	r19,129
  80b6d0:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80b6d4:	d8c00415 	stw	r3,16(sp)
				cp = "(null)";
  80b6d8:	9ccafa04 	addi	r19,r19,11240
  80b6dc:	003c4006 	br	80a7e0 <___vfiprintf_internal_r+0x2e4>
hex:			_uquad = UARG ();
  80b6e0:	d8c00417 	ldw	r3,16(sp)
  80b6e4:	0039883a 	mov	fp,zero
  80b6e8:	d9000415 	stw	r4,16(sp)
  80b6ec:	1dc00017 	ldw	r23,0(r3)
  80b6f0:	003d7f06 	br	80acf0 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80b6f4:	d8800417 	ldw	r2,16(sp)
  80b6f8:	0039883a 	mov	fp,zero
  80b6fc:	d8c00415 	stw	r3,16(sp)
  80b700:	15c00017 	ldw	r23,0(r2)
			base = OCT;
  80b704:	0005883a 	mov	r2,zero
  80b708:	003cce06 	br	80aa44 <___vfiprintf_internal_r+0x548>
			_uquad = SARG ();
  80b70c:	d8800417 	ldw	r2,16(sp)
  80b710:	d8c00415 	stw	r3,16(sp)
  80b714:	15c00017 	ldw	r23,0(r2)
  80b718:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80b71c:	e005883a 	mov	r2,fp
  80b720:	003d5106 	br	80ac68 <___vfiprintf_internal_r+0x76c>
			_uquad = UARG ();
  80b724:	d8800417 	ldw	r2,16(sp)
  80b728:	0039883a 	mov	fp,zero
  80b72c:	d8c00415 	stw	r3,16(sp)
  80b730:	15c00017 	ldw	r23,0(r2)
			base = DEC;
  80b734:	00800044 	movi	r2,1
  80b738:	003cc206 	br	80aa44 <___vfiprintf_internal_r+0x548>
		PAD (dprec - size, zeroes);
  80b73c:	3009883a 	mov	r4,r6
  80b740:	39cb8f04 	addi	r7,r7,11836
  80b744:	003ead06 	br	80b1fc <___vfiprintf_internal_r+0xd00>
		uio->uio_iovcnt = 0;
  80b748:	d9801904 	addi	r6,sp,100
  80b74c:	01400044 	movi	r5,1
  80b750:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80b754:	9021883a 	mov	r16,r18
  80b758:	003c5b06 	br	80a8c8 <___vfiprintf_internal_r+0x3cc>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b75c:	07000184 	movi	fp,6
  80b760:	003fda06 	br	80b6cc <___vfiprintf_internal_r+0x11d0>
		if (flags & HEXPREFIX)
  80b764:	703ee51e 	bne	r14,zero,80b2fc <___vfiprintf_internal_r+0xe00>
  80b768:	0009883a 	mov	r4,zero
			PRINT (&sign, 1);
  80b76c:	d9801904 	addi	r6,sp,100
		if (flags & HEXPREFIX)
  80b770:	01400044 	movi	r5,1
			PAD (width - realsz, blanks);
  80b774:	9021883a 	mov	r16,r18
  80b778:	003c5306 	br	80a8c8 <___vfiprintf_internal_r+0x3cc>
  80b77c:	d9800945 	stb	r6,37(sp)
  80b780:	003c1106 	br	80a7c8 <___vfiprintf_internal_r+0x2cc>
	if (uio->uio_resid == 0) {
  80b784:	d9800a04 	addi	r6,sp,40
  80b788:	a80b883a 	mov	r5,r21
  80b78c:	b009883a 	mov	r4,r22
  80b790:	080a3f00 	call	80a3f0 <__sprint_r.part.0>
  80b794:	003c6e06 	br	80a950 <___vfiprintf_internal_r+0x454>
				flags &= ~ZEROPAD;
  80b798:	db400017 	ldw	r13,0(sp)
  80b79c:	003d3f06 	br	80ac9c <___vfiprintf_internal_r+0x7a0>
  80b7a0:	402f883a 	mov	r23,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  80b7a4:	d8c00415 	stw	r3,16(sp)
  80b7a8:	4039883a 	mov	fp,r8
  80b7ac:	003c0c06 	br	80a7e0 <___vfiprintf_internal_r+0x2e4>
  80b7b0:	d9800945 	stb	r6,37(sp)
  80b7b4:	003d2406 	br	80ac48 <___vfiprintf_internal_r+0x74c>
  80b7b8:	d9800945 	stb	r6,37(sp)
  80b7bc:	003d4206 	br	80acc8 <___vfiprintf_internal_r+0x7cc>
  80b7c0:	d9800945 	stb	r6,37(sp)
  80b7c4:	003d7a06 	br	80adb0 <___vfiprintf_internal_r+0x8b4>
			PAD (width - realsz, blanks);
  80b7c8:	303f883a 	mov	ra,r6
  80b7cc:	39cb9304 	addi	r7,r7,11852
  80b7d0:	003f2006 	br	80b454 <___vfiprintf_internal_r+0xf58>
  80b7d4:	d9800945 	stb	r6,37(sp)
  80b7d8:	003df806 	br	80afbc <___vfiprintf_internal_r+0xac0>
  80b7dc:	d9800945 	stb	r6,37(sp)
  80b7e0:	003e0806 	br	80b004 <___vfiprintf_internal_r+0xb08>
			PAD (width - realsz, blanks);
  80b7e4:	21400044 	addi	r5,r4,1
  80b7e8:	39cb9304 	addi	r7,r7,11852
  80b7ec:	003d0306 	br	80abfc <___vfiprintf_internal_r+0x700>
		return (EOF);
  80b7f0:	00bfffc4 	movi	r2,-1
  80b7f4:	d8800115 	stw	r2,4(sp)
  80b7f8:	003c5806 	br	80a95c <___vfiprintf_internal_r+0x460>
  80b7fc:	01c02074 	movhi	r7,129
			PAD (width - realsz, zeroes);
  80b800:	301b883a 	mov	r13,r6
  80b804:	281d883a 	mov	r14,r5
  80b808:	39cb8f04 	addi	r7,r7,11836
  80b80c:	003e3e06 	br	80b108 <___vfiprintf_internal_r+0xc0c>
				prec = GET_ARG (n, ap, int);
  80b810:	d8800417 	ldw	r2,16(sp)
  80b814:	12000017 	ldw	r8,0(r2)
  80b818:	11000104 	addi	r4,r2,4
				if (prec < 0)
  80b81c:	4000010e 	bge	r8,zero,80b824 <___vfiprintf_internal_r+0x1328>
  80b820:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  80b824:	a0800043 	ldbu	r2,1(r20)
				prec = GET_ARG (n, ap, int);
  80b828:	d9000415 	stw	r4,16(sp)
			if ((ch = *fmt++) == '*') {
  80b82c:	1829883a 	mov	r20,r3
  80b830:	10803fcc 	andi	r2,r2,255
  80b834:	1080201c 	xori	r2,r2,128
  80b838:	10bfe004 	addi	r2,r2,-128
				goto rflag;
  80b83c:	003b7006 	br	80a600 <___vfiprintf_internal_r+0x104>

0080b840 <__vfiprintf_internal>:
{
  80b840:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80b844:	d1200917 	ldw	r4,-32732(gp)
  80b848:	300f883a 	mov	r7,r6
  80b84c:	280d883a 	mov	r6,r5
  80b850:	100b883a 	mov	r5,r2
  80b854:	080a4fc1 	jmpi	80a4fc <___vfiprintf_internal_r>

0080b858 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  80b858:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  80b85c:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  80b860:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  80b864:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  80b868:	2a400917 	ldw	r9,36(r5)
{
  80b86c:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  80b870:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  80b874:	00c10004 	movi	r3,1024
{
  80b878:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  80b87c:	10bfff4c 	andi	r2,r2,65533
{
  80b880:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b884:	d80b883a 	mov	r5,sp
{
  80b888:	dc811c15 	stw	r18,1136(sp)
  80b88c:	dc411b15 	stw	r17,1132(sp)
  80b890:	dfc11d15 	stw	ra,1140(sp)
  80b894:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  80b898:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  80b89c:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  80b8a0:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80b8a4:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  80b8a8:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  80b8ac:	da000015 	stw	r8,0(sp)
  80b8b0:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80b8b4:	d8c00215 	stw	r3,8(sp)
  80b8b8:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  80b8bc:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b8c0:	080a4fc0 	call	80a4fc <___vfiprintf_internal_r>
  80b8c4:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b8c8:	10000d0e 	bge	r2,zero,80b900 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  80b8cc:	d880030b 	ldhu	r2,12(sp)
  80b8d0:	1080100c 	andi	r2,r2,64
  80b8d4:	10000326 	beq	r2,zero,80b8e4 <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  80b8d8:	8080030b 	ldhu	r2,12(r16)
  80b8dc:	10801014 	ori	r2,r2,64
  80b8e0:	8080030d 	sth	r2,12(r16)
}
  80b8e4:	8805883a 	mov	r2,r17
  80b8e8:	dfc11d17 	ldw	ra,1140(sp)
  80b8ec:	dc811c17 	ldw	r18,1136(sp)
  80b8f0:	dc411b17 	ldw	r17,1132(sp)
  80b8f4:	dc011a17 	ldw	r16,1128(sp)
  80b8f8:	dec11e04 	addi	sp,sp,1144
  80b8fc:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b900:	d80b883a 	mov	r5,sp
  80b904:	9009883a 	mov	r4,r18
  80b908:	0806c700 	call	806c70 <_fflush_r>
  80b90c:	103fef26 	beq	r2,zero,80b8cc <__sbprintf+0x74>
		ret = EOF;
  80b910:	047fffc4 	movi	r17,-1
  80b914:	003fed06 	br	80b8cc <__sbprintf+0x74>

0080b918 <_wctomb_r>:
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
  return __WCTOMB (r, s, _wchar, state);
  80b918:	00802074 	movhi	r2,129
  80b91c:	108d9417 	ldw	r2,13904(r2)
  80b920:	1000683a 	jmp	r2

0080b924 <__ascii_wctomb>:
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;

  if (s == NULL)
  80b924:	28000926 	beq	r5,zero,80b94c <__ascii_wctomb+0x28>
    return 0;
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
  80b928:	30804030 	cmpltui	r2,r6,256
  80b92c:	10000326 	beq	r2,zero,80b93c <__ascii_wctomb+0x18>
    {
      r->_errno = EILSEQ;
      return -1;
    }

  *s = (char) wchar;
  80b930:	29800005 	stb	r6,0(r5)
  return 1;
  80b934:	00800044 	movi	r2,1
  80b938:	f800283a 	ret
      r->_errno = EILSEQ;
  80b93c:	00802284 	movi	r2,138
  80b940:	20800015 	stw	r2,0(r4)
      return -1;
  80b944:	00bfffc4 	movi	r2,-1
  80b948:	f800283a 	ret
    return 0;
  80b94c:	0005883a 	mov	r2,zero
}
  80b950:	f800283a 	ret

0080b954 <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
  80b954:	2807883a 	mov	r3,r5
  80b958:	defffe04 	addi	sp,sp,-8
  80b95c:	dc000015 	stw	r16,0(sp)
  80b960:	300b883a 	mov	r5,r6
  80b964:	2021883a 	mov	r16,r4
  80b968:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b96c:	1809883a 	mov	r4,r3
{
  80b970:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b974:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b978:	08109640 	call	810964 <write>
  80b97c:	10ffffd8 	cmpnei	r3,r2,-1
  80b980:	18000426 	beq	r3,zero,80b994 <_write_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b984:	dfc00117 	ldw	ra,4(sp)
  80b988:	dc000017 	ldw	r16,0(sp)
  80b98c:	dec00204 	addi	sp,sp,8
  80b990:	f800283a 	ret
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b994:	d0e71817 	ldw	r3,-25504(gp)
  80b998:	183ffa26 	beq	r3,zero,80b984 <_write_r+0x30>
    ptr->_errno = errno;
  80b99c:	80c00015 	stw	r3,0(r16)
}
  80b9a0:	dfc00117 	ldw	ra,4(sp)
  80b9a4:	dc000017 	ldw	r16,0(sp)
  80b9a8:	dec00204 	addi	sp,sp,8
  80b9ac:	f800283a 	ret

0080b9b0 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80b9b0:	defffe04 	addi	sp,sp,-8
  80b9b4:	dc000015 	stw	r16,0(sp)
  80b9b8:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b9bc:	2809883a 	mov	r4,r5
{
  80b9c0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b9c4:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b9c8:	080fce40 	call	80fce4 <close>
  80b9cc:	10ffffd8 	cmpnei	r3,r2,-1
  80b9d0:	18000426 	beq	r3,zero,80b9e4 <_close_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80b9d4:	dfc00117 	ldw	ra,4(sp)
  80b9d8:	dc000017 	ldw	r16,0(sp)
  80b9dc:	dec00204 	addi	sp,sp,8
  80b9e0:	f800283a 	ret
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b9e4:	d0e71817 	ldw	r3,-25504(gp)
  80b9e8:	183ffa26 	beq	r3,zero,80b9d4 <_close_r+0x24>
    ptr->_errno = errno;
  80b9ec:	80c00015 	stw	r3,0(r16)
}
  80b9f0:	dfc00117 	ldw	ra,4(sp)
  80b9f4:	dc000017 	ldw	r16,0(sp)
  80b9f8:	dec00204 	addi	sp,sp,8
  80b9fc:	f800283a 	ret

0080ba00 <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
  80ba00:	3005883a 	mov	r2,r6
  fiprintf(stderr,
  80ba04:	d1a00917 	ldw	r6,-32732(gp)
{
  80ba08:	defffc04 	addi	sp,sp,-16
  80ba0c:	3807883a 	mov	r3,r7
  80ba10:	dfc00315 	stw	ra,12(sp)
  fiprintf(stderr,
  80ba14:	32400317 	ldw	r9,12(r6)
{
  80ba18:	200f883a 	mov	r7,r4
  80ba1c:	2811883a 	mov	r8,r5
  80ba20:	180d883a 	mov	r6,r3
  fiprintf(stderr,
  80ba24:	10000a26 	beq	r2,zero,80ba50 <__assert_func+0x50>
  80ba28:	00c02074 	movhi	r3,129
  80ba2c:	18cb9704 	addi	r3,r3,11868
  80ba30:	01402074 	movhi	r5,129
  80ba34:	294b9b04 	addi	r5,r5,11884
  80ba38:	4809883a 	mov	r4,r9
  80ba3c:	d8c00115 	stw	r3,4(sp)
  80ba40:	da000015 	stw	r8,0(sp)
  80ba44:	d8800215 	stw	r2,8(sp)
  80ba48:	080bcf40 	call	80bcf4 <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
  80ba4c:	080c2d40 	call	80c2d4 <abort>
  fiprintf(stderr,
  80ba50:	00c02074 	movhi	r3,129
  80ba54:	18cb9a04 	addi	r3,r3,11880
  80ba58:	1805883a 	mov	r2,r3
  80ba5c:	003ff406 	br	80ba30 <__assert_func+0x30>

0080ba60 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
  80ba60:	deffff04 	addi	sp,sp,-4
   __assert_func (file, line, NULL, failedexpr);
  80ba64:	300f883a 	mov	r7,r6
  80ba68:	000d883a 	mov	r6,zero
{
  80ba6c:	dfc00015 	stw	ra,0(sp)
   __assert_func (file, line, NULL, failedexpr);
  80ba70:	080ba000 	call	80ba00 <__assert_func>

0080ba74 <_calloc_r>:
{
  80ba74:	defffe04 	addi	sp,sp,-8
  80ba78:	dc000015 	stw	r16,0(sp)
  80ba7c:	2021883a 	mov	r16,r4
  80ba80:	2809883a 	mov	r4,r5
  INTERNAL_SIZE_T sz = n * elem_size;
  80ba84:	300b883a 	mov	r5,r6
{
  80ba88:	dfc00115 	stw	ra,4(sp)
  INTERNAL_SIZE_T sz = n * elem_size;
  80ba8c:	0802ba80 	call	802ba8 <__mulsi3>
  mem = mALLOc (RCALL sz);
  80ba90:	8009883a 	mov	r4,r16
  80ba94:	100b883a 	mov	r5,r2
  80ba98:	0807e580 	call	807e58 <_malloc_r>
  80ba9c:	1009883a 	mov	r4,r2
  if (mem == 0) 
  80baa0:	10000c26 	beq	r2,zero,80bad4 <_calloc_r+0x60>
    csz = chunksize(p);
  80baa4:	11bfff17 	ldw	r6,-4(r2)
  80baa8:	00bfff04 	movi	r2,-4
  80baac:	308c703a 	and	r6,r6,r2
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80bab0:	31bfff04 	addi	r6,r6,-4
  80bab4:	30800968 	cmpgeui	r2,r6,37
  80bab8:	1000151e 	bne	r2,zero,80bb10 <_calloc_r+0x9c>
  80babc:	30800530 	cmpltui	r2,r6,20
  80bac0:	10000926 	beq	r2,zero,80bae8 <_calloc_r+0x74>
  80bac4:	2005883a 	mov	r2,r4
  80bac8:	10000015 	stw	zero,0(r2)
  80bacc:	10000115 	stw	zero,4(r2)
  80bad0:	10000215 	stw	zero,8(r2)
}
  80bad4:	2005883a 	mov	r2,r4
  80bad8:	dfc00117 	ldw	ra,4(sp)
  80badc:	dc000017 	ldw	r16,0(sp)
  80bae0:	dec00204 	addi	sp,sp,8
  80bae4:	f800283a 	ret
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80bae8:	20000015 	stw	zero,0(r4)
  80baec:	20000115 	stw	zero,4(r4)
  80baf0:	30800728 	cmpgeui	r2,r6,28
  80baf4:	10000a26 	beq	r2,zero,80bb20 <_calloc_r+0xac>
  80baf8:	20000215 	stw	zero,8(r4)
  80bafc:	20000315 	stw	zero,12(r4)
  80bb00:	31800920 	cmpeqi	r6,r6,36
  80bb04:	3000081e 	bne	r6,zero,80bb28 <_calloc_r+0xb4>
  80bb08:	20800404 	addi	r2,r4,16
  80bb0c:	003fee06 	br	80bac8 <_calloc_r+0x54>
  80bb10:	000b883a 	mov	r5,zero
  80bb14:	08089640 	call	808964 <memset>
  80bb18:	1009883a 	mov	r4,r2
  80bb1c:	003fed06 	br	80bad4 <_calloc_r+0x60>
  80bb20:	20800204 	addi	r2,r4,8
  80bb24:	003fe806 	br	80bac8 <_calloc_r+0x54>
  80bb28:	20000415 	stw	zero,16(r4)
  80bb2c:	20800604 	addi	r2,r4,24
  80bb30:	20000515 	stw	zero,20(r4)
  80bb34:	003fe406 	br	80bac8 <_calloc_r+0x54>

0080bb38 <_fclose_r.part.0>:
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_diprintf_r (struct _reent *, int, const char *, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_dprintf_r (struct _reent *, int, const char *__restrict, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_fclose_r (struct _reent *, FILE *);
  80bb38:	defffc04 	addi	sp,sp,-16
  80bb3c:	dc800215 	stw	r18,8(sp)
  80bb40:	dc400115 	stw	r17,4(sp)
  80bb44:	dc000015 	stw	r16,0(sp)
  80bb48:	dfc00315 	stw	ra,12(sp)
  80bb4c:	2821883a 	mov	r16,r5
  80bb50:	2023883a 	mov	r17,r4
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
  80bb54:	0806a480 	call	806a48 <__sflush_r>
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80bb58:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80bb5c:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80bb60:	18000426 	beq	r3,zero,80bb74 <_fclose_r.part.0+0x3c>
  80bb64:	81400717 	ldw	r5,28(r16)
  80bb68:	8809883a 	mov	r4,r17
  80bb6c:	183ee83a 	callr	r3
  80bb70:	10001916 	blt	r2,zero,80bbd8 <_fclose_r.part.0+0xa0>
    r = EOF;
  if (fp->_flags & __SMBF)
  80bb74:	8080030b 	ldhu	r2,12(r16)
  80bb78:	1080200c 	andi	r2,r2,128
  80bb7c:	10001a1e 	bne	r2,zero,80bbe8 <_fclose_r.part.0+0xb0>
    _free_r (rptr, (char *) fp->_bf._base);
  if (HASUB (fp))
  80bb80:	81400c17 	ldw	r5,48(r16)
  80bb84:	28000526 	beq	r5,zero,80bb9c <_fclose_r.part.0+0x64>
    FREEUB (rptr, fp);
  80bb88:	80801004 	addi	r2,r16,64
  80bb8c:	28800226 	beq	r5,r2,80bb98 <_fclose_r.part.0+0x60>
  80bb90:	8809883a 	mov	r4,r17
  80bb94:	08072000 	call	807200 <_free_r>
  80bb98:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80bb9c:	81401117 	ldw	r5,68(r16)
  80bba0:	28000326 	beq	r5,zero,80bbb0 <_fclose_r.part.0+0x78>
    FREELB (rptr, fp);
  80bba4:	8809883a 	mov	r4,r17
  80bba8:	08072000 	call	807200 <_free_r>
  80bbac:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80bbb0:	08070b80 	call	8070b8 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80bbb4:	8000030d 	sth	zero,12(r16)
    _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
  80bbb8:	08070bc0 	call	8070bc <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
  80bbbc:	9005883a 	mov	r2,r18
  80bbc0:	dfc00317 	ldw	ra,12(sp)
  80bbc4:	dc800217 	ldw	r18,8(sp)
  80bbc8:	dc400117 	ldw	r17,4(sp)
  80bbcc:	dc000017 	ldw	r16,0(sp)
  80bbd0:	dec00404 	addi	sp,sp,16
  80bbd4:	f800283a 	ret
  if (fp->_flags & __SMBF)
  80bbd8:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80bbdc:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80bbe0:	1080200c 	andi	r2,r2,128
  80bbe4:	103fe626 	beq	r2,zero,80bb80 <_fclose_r.part.0+0x48>
    _free_r (rptr, (char *) fp->_bf._base);
  80bbe8:	81400417 	ldw	r5,16(r16)
  80bbec:	8809883a 	mov	r4,r17
  80bbf0:	08072000 	call	807200 <_free_r>
  80bbf4:	003fe206 	br	80bb80 <_fclose_r.part.0+0x48>

0080bbf8 <_fclose_r>:
  if (fp == NULL)
  80bbf8:	28001926 	beq	r5,zero,80bc60 <_fclose_r+0x68>
{
  80bbfc:	defffd04 	addi	sp,sp,-12
  80bc00:	dc000115 	stw	r16,4(sp)
  80bc04:	dfc00215 	stw	ra,8(sp)
  80bc08:	2021883a 	mov	r16,r4
  CHECK_INIT (rptr, fp);
  80bc0c:	20000226 	beq	r4,zero,80bc18 <_fclose_r+0x20>
  80bc10:	20800e17 	ldw	r2,56(r4)
  80bc14:	10000c26 	beq	r2,zero,80bc48 <_fclose_r+0x50>
  if (fp->_flags == 0)		/* not open! */
  80bc18:	2880030f 	ldh	r2,12(r5)
  80bc1c:	1000051e 	bne	r2,zero,80bc34 <_fclose_r+0x3c>
}
  80bc20:	0005883a 	mov	r2,zero
  80bc24:	dfc00217 	ldw	ra,8(sp)
  80bc28:	dc000117 	ldw	r16,4(sp)
  80bc2c:	dec00304 	addi	sp,sp,12
  80bc30:	f800283a 	ret
  80bc34:	8009883a 	mov	r4,r16
  80bc38:	dfc00217 	ldw	ra,8(sp)
  80bc3c:	dc000117 	ldw	r16,4(sp)
  80bc40:	dec00304 	addi	sp,sp,12
  80bc44:	080bb381 	jmpi	80bb38 <_fclose_r.part.0>
  80bc48:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (rptr, fp);
  80bc4c:	08070a80 	call	8070a8 <__sinit>
  80bc50:	d9400017 	ldw	r5,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80bc54:	2880030f 	ldh	r2,12(r5)
  80bc58:	103ff126 	beq	r2,zero,80bc20 <_fclose_r+0x28>
  80bc5c:	003ff506 	br	80bc34 <_fclose_r+0x3c>
}
  80bc60:	0005883a 	mov	r2,zero
  80bc64:	f800283a 	ret

0080bc68 <fclose>:
  if (fp == NULL)
  80bc68:	20000726 	beq	r4,zero,80bc88 <fclose+0x20>
  80bc6c:	200b883a 	mov	r5,r4
#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
  return _fclose_r(_REENT, fp);
  80bc70:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (rptr, fp);
  80bc74:	20000226 	beq	r4,zero,80bc80 <fclose+0x18>
  80bc78:	20800e17 	ldw	r2,56(r4)
  80bc7c:	10000526 	beq	r2,zero,80bc94 <fclose+0x2c>
  if (fp->_flags == 0)		/* not open! */
  80bc80:	2880030f 	ldh	r2,12(r5)
  80bc84:	1000021e 	bne	r2,zero,80bc90 <fclose+0x28>
}
  80bc88:	0005883a 	mov	r2,zero
  80bc8c:	f800283a 	ret
  80bc90:	080bb381 	jmpi	80bb38 <_fclose_r.part.0>
{
  80bc94:	defffd04 	addi	sp,sp,-12
  80bc98:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (rptr, fp);
  80bc9c:	d9000015 	stw	r4,0(sp)
{
  80bca0:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (rptr, fp);
  80bca4:	08070a80 	call	8070a8 <__sinit>
  80bca8:	d9400117 	ldw	r5,4(sp)
  80bcac:	d9000017 	ldw	r4,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80bcb0:	2880030f 	ldh	r2,12(r5)
  80bcb4:	10000326 	beq	r2,zero,80bcc4 <fclose+0x5c>
}
  80bcb8:	dfc00217 	ldw	ra,8(sp)
  80bcbc:	dec00304 	addi	sp,sp,12
  80bcc0:	080bb381 	jmpi	80bb38 <_fclose_r.part.0>
  80bcc4:	0005883a 	mov	r2,zero
  80bcc8:	dfc00217 	ldw	ra,8(sp)
  80bccc:	dec00304 	addi	sp,sp,12
  80bcd0:	f800283a 	ret

0080bcd4 <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
  80bcd4:	defffe04 	addi	sp,sp,-8
  80bcd8:	dfc00015 	stw	ra,0(sp)
  80bcdc:	d9c00115 	stw	r7,4(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
  80bce0:	d9c00104 	addi	r7,sp,4
  80bce4:	080c0840 	call	80c084 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bce8:	dfc00017 	ldw	ra,0(sp)
  80bcec:	dec00204 	addi	sp,sp,8
  80bcf0:	f800283a 	ret

0080bcf4 <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
  80bcf4:	defffd04 	addi	sp,sp,-12
  80bcf8:	2005883a 	mov	r2,r4
  80bcfc:	dfc00015 	stw	ra,0(sp)
  80bd00:	d9800115 	stw	r6,4(sp)
  80bd04:	d9c00215 	stw	r7,8(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
  80bd08:	d1200917 	ldw	r4,-32732(gp)
  80bd0c:	280d883a 	mov	r6,r5
  80bd10:	d9c00104 	addi	r7,sp,4
  80bd14:	100b883a 	mov	r5,r2
  80bd18:	080c0840 	call	80c084 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bd1c:	dfc00017 	ldw	ra,0(sp)
  80bd20:	dec00304 	addi	sp,sp,12
  80bd24:	f800283a 	ret

0080bd28 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
  80bd28:	defff904 	addi	sp,sp,-28
  80bd2c:	dcc00415 	stw	r19,16(sp)
  80bd30:	dc800315 	stw	r18,12(sp)
  80bd34:	dc000115 	stw	r16,4(sp)
  80bd38:	dfc00615 	stw	ra,24(sp)
  80bd3c:	dd000515 	stw	r20,20(sp)
  80bd40:	dc400215 	stw	r17,8(sp)
  80bd44:	2025883a 	mov	r18,r4
  80bd48:	2827883a 	mov	r19,r5
  80bd4c:	3021883a 	mov	r16,r6
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80bd50:	0807b900 	call	807b90 <__locale_mb_cur_max>
  80bd54:	10800058 	cmpnei	r2,r2,1
  80bd58:	1000071e 	bne	r2,zero,80bd78 <__fputwc+0x50>
  80bd5c:	98bfffc4 	addi	r2,r19,-1
  80bd60:	10803fe8 	cmpgeui	r2,r2,255
  80bd64:	1000041e 	bne	r2,zero,80bd78 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
  80bd68:	980b883a 	mov	r5,r19
  80bd6c:	dcc000c5 	stb	r19,3(sp)
      len = 1;
  80bd70:	05000044 	movi	r20,1
  80bd74:	00000a06 	br	80bda0 <__fputwc+0x78>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80bd78:	81c01704 	addi	r7,r16,92
  80bd7c:	980d883a 	mov	r6,r19
  80bd80:	d94000c4 	addi	r5,sp,3
  80bd84:	9009883a 	mov	r4,r18
  80bd88:	080c1e40 	call	80c1e4 <_wcrtomb_r>
  80bd8c:	1029883a 	mov	r20,r2
  80bd90:	10bfffd8 	cmpnei	r2,r2,-1
  80bd94:	10003926 	beq	r2,zero,80be7c <__fputwc+0x154>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
  80bd98:	a0001f26 	beq	r20,zero,80be18 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd9c:	d94000c3 	ldbu	r5,3(sp)
  for (i = 0; i < len; i++)
  80bda0:	0023883a 	mov	r17,zero
  80bda4:	00000a06 	br	80bdd0 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bda8:	80800017 	ldw	r2,0(r16)
  80bdac:	11400005 	stb	r5,0(r2)
  80bdb0:	80c00017 	ldw	r3,0(r16)
  80bdb4:	18c00044 	addi	r3,r3,1
  80bdb8:	80c00015 	stw	r3,0(r16)
  for (i = 0; i < len; i++)
  80bdbc:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bdc0:	d88000c4 	addi	r2,sp,3
  80bdc4:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80bdc8:	8d00132e 	bgeu	r17,r20,80be18 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bdcc:	19400003 	ldbu	r5,0(r3)
  80bdd0:	80c00217 	ldw	r3,8(r16)
  80bdd4:	18ffffc4 	addi	r3,r3,-1
  80bdd8:	80c00215 	stw	r3,8(r16)
  80bddc:	183ff20e 	bge	r3,zero,80bda8 <__fputwc+0x80>
  80bde0:	80800617 	ldw	r2,24(r16)
  80bde4:	18801616 	blt	r3,r2,80be40 <__fputwc+0x118>
  80bde8:	80800017 	ldw	r2,0(r16)
  80bdec:	11400005 	stb	r5,0(r2)
  80bdf0:	80800017 	ldw	r2,0(r16)
  80bdf4:	10c00003 	ldbu	r3,0(r2)
  80bdf8:	10800044 	addi	r2,r2,1
  80bdfc:	18c002a0 	cmpeqi	r3,r3,10
  80be00:	1800171e 	bne	r3,zero,80be60 <__fputwc+0x138>
  80be04:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80be08:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80be0c:	d88000c4 	addi	r2,sp,3
  80be10:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80be14:	8d3fed36 	bltu	r17,r20,80bdcc <__fputwc+0xa4>
      return WEOF;

  return (wint_t) wc;
  80be18:	9829883a 	mov	r20,r19
}
  80be1c:	a005883a 	mov	r2,r20
  80be20:	dfc00617 	ldw	ra,24(sp)
  80be24:	dd000517 	ldw	r20,20(sp)
  80be28:	dcc00417 	ldw	r19,16(sp)
  80be2c:	dc800317 	ldw	r18,12(sp)
  80be30:	dc400217 	ldw	r17,8(sp)
  80be34:	dc000117 	ldw	r16,4(sp)
  80be38:	dec00704 	addi	sp,sp,28
  80be3c:	f800283a 	ret
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80be40:	29403fcc 	andi	r5,r5,255
  80be44:	800d883a 	mov	r6,r16
  80be48:	9009883a 	mov	r4,r18
  80be4c:	080c0880 	call	80c088 <__swbuf_r>
  80be50:	10bfffe0 	cmpeqi	r2,r2,-1
  80be54:	103fd926 	beq	r2,zero,80bdbc <__fputwc+0x94>
      return WEOF;
  80be58:	053fffc4 	movi	r20,-1
  80be5c:	003fef06 	br	80be1c <__fputwc+0xf4>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80be60:	800d883a 	mov	r6,r16
  80be64:	01400284 	movi	r5,10
  80be68:	9009883a 	mov	r4,r18
  80be6c:	080c0880 	call	80c088 <__swbuf_r>
  80be70:	10bfffe0 	cmpeqi	r2,r2,-1
  80be74:	103fd126 	beq	r2,zero,80bdbc <__fputwc+0x94>
  80be78:	003ff706 	br	80be58 <__fputwc+0x130>
	  fp->_flags |= __SERR;
  80be7c:	8080030b 	ldhu	r2,12(r16)
  80be80:	10801014 	ori	r2,r2,64
  80be84:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80be88:	003fe406 	br	80be1c <__fputwc+0xf4>

0080be8c <_fputwc_r>:
	FILE *fp)
{
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
  80be8c:	3080030b 	ldhu	r2,12(r6)
  80be90:	10c8000c 	andi	r3,r2,8192
  80be94:	1800051e 	bne	r3,zero,80beac <_fputwc_r+0x20>
  _newlib_flockfile_start (fp);
  80be98:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80be9c:	10880014 	ori	r2,r2,8192
  80bea0:	3080030d 	sth	r2,12(r6)
  80bea4:	18880014 	ori	r2,r3,8192
  80bea8:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80beac:	080bd281 	jmpi	80bd28 <__fputwc>

0080beb0 <fputwc>:
}

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
  80beb0:	defffc04 	addi	sp,sp,-16
  80beb4:	dc000215 	stw	r16,8(sp)
  struct _reent *reent = _REENT;
  80beb8:	d4200917 	ldw	r16,-32732(gp)
{
  80bebc:	dfc00315 	stw	ra,12(sp)
  80bec0:	280d883a 	mov	r6,r5
  80bec4:	200b883a 	mov	r5,r4

  CHECK_INIT(reent, fp);
  80bec8:	80000226 	beq	r16,zero,80bed4 <fputwc+0x24>
  80becc:	80800e17 	ldw	r2,56(r16)
  80bed0:	10000d26 	beq	r2,zero,80bf08 <fputwc+0x58>
  ORIENT(fp, 1);
  80bed4:	3080030b 	ldhu	r2,12(r6)
  80bed8:	10c8000c 	andi	r3,r2,8192
  80bedc:	1800051e 	bne	r3,zero,80bef4 <fputwc+0x44>
  _newlib_flockfile_start (fp);
  80bee0:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80bee4:	10880014 	ori	r2,r2,8192
  80bee8:	3080030d 	sth	r2,12(r6)
  80beec:	18880014 	ori	r2,r3,8192
  80bef0:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80bef4:	8009883a 	mov	r4,r16
  return _fputwc_r (reent, wc, fp);
}
  80bef8:	dfc00317 	ldw	ra,12(sp)
  80befc:	dc000217 	ldw	r16,8(sp)
  80bf00:	dec00404 	addi	sp,sp,16
  r = __fputwc(ptr, wc, fp);
  80bf04:	080bd281 	jmpi	80bd28 <__fputwc>
  80bf08:	d9000015 	stw	r4,0(sp)
  CHECK_INIT(reent, fp);
  80bf0c:	8009883a 	mov	r4,r16
  80bf10:	d9800115 	stw	r6,4(sp)
  80bf14:	08070a80 	call	8070a8 <__sinit>
  80bf18:	d9800117 	ldw	r6,4(sp)
  80bf1c:	d9400017 	ldw	r5,0(sp)
  80bf20:	003fec06 	br	80bed4 <fputwc+0x24>

0080bf24 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
  80bf24:	2807883a 	mov	r3,r5
  80bf28:	defffe04 	addi	sp,sp,-8
  80bf2c:	dc000015 	stw	r16,0(sp)
  80bf30:	300b883a 	mov	r5,r6
  80bf34:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80bf38:	1809883a 	mov	r4,r3
{
  80bf3c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bf40:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80bf44:	080fe600 	call	80fe60 <fstat>
  80bf48:	10ffffd8 	cmpnei	r3,r2,-1
  80bf4c:	18000426 	beq	r3,zero,80bf60 <_fstat_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80bf50:	dfc00117 	ldw	ra,4(sp)
  80bf54:	dc000017 	ldw	r16,0(sp)
  80bf58:	dec00204 	addi	sp,sp,8
  80bf5c:	f800283a 	ret
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80bf60:	d0e71817 	ldw	r3,-25504(gp)
  80bf64:	183ffa26 	beq	r3,zero,80bf50 <_fstat_r+0x2c>
    ptr->_errno = errno;
  80bf68:	80c00015 	stw	r3,0(r16)
}
  80bf6c:	dfc00117 	ldw	ra,4(sp)
  80bf70:	dc000017 	ldw	r16,0(sp)
  80bf74:	dec00204 	addi	sp,sp,8
  80bf78:	f800283a 	ret

0080bf7c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80bf7c:	defffe04 	addi	sp,sp,-8
  80bf80:	dc000015 	stw	r16,0(sp)
  80bf84:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bf88:	2809883a 	mov	r4,r5
{
  80bf8c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bf90:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bf94:	080ff780 	call	80ff78 <isatty>
  80bf98:	10ffffd8 	cmpnei	r3,r2,-1
  80bf9c:	18000426 	beq	r3,zero,80bfb0 <_isatty_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80bfa0:	dfc00117 	ldw	ra,4(sp)
  80bfa4:	dc000017 	ldw	r16,0(sp)
  80bfa8:	dec00204 	addi	sp,sp,8
  80bfac:	f800283a 	ret
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bfb0:	d0e71817 	ldw	r3,-25504(gp)
  80bfb4:	183ffa26 	beq	r3,zero,80bfa0 <_isatty_r+0x24>
    ptr->_errno = errno;
  80bfb8:	80c00015 	stw	r3,0(r16)
}
  80bfbc:	dfc00117 	ldw	ra,4(sp)
  80bfc0:	dc000017 	ldw	r16,0(sp)
  80bfc4:	dec00204 	addi	sp,sp,8
  80bfc8:	f800283a 	ret

0080bfcc <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
  80bfcc:	2807883a 	mov	r3,r5
  80bfd0:	defffe04 	addi	sp,sp,-8
  80bfd4:	dc000015 	stw	r16,0(sp)
  80bfd8:	300b883a 	mov	r5,r6
  80bfdc:	2021883a 	mov	r16,r4
  80bfe0:	380d883a 	mov	r6,r7
  _off_t ret;

  errno = 0;
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80bfe4:	1809883a 	mov	r4,r3
{
  80bfe8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bfec:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80bff0:	08102b80 	call	8102b8 <lseek>
  80bff4:	10ffffd8 	cmpnei	r3,r2,-1
  80bff8:	18000426 	beq	r3,zero,80c00c <_lseek_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80bffc:	dfc00117 	ldw	ra,4(sp)
  80c000:	dc000017 	ldw	r16,0(sp)
  80c004:	dec00204 	addi	sp,sp,8
  80c008:	f800283a 	ret
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80c00c:	d0e71817 	ldw	r3,-25504(gp)
  80c010:	183ffa26 	beq	r3,zero,80bffc <_lseek_r+0x30>
    ptr->_errno = errno;
  80c014:	80c00015 	stw	r3,0(r16)
}
  80c018:	dfc00117 	ldw	ra,4(sp)
  80c01c:	dc000017 	ldw	r16,0(sp)
  80c020:	dec00204 	addi	sp,sp,8
  80c024:	f800283a 	ret

0080c028 <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
  80c028:	2807883a 	mov	r3,r5
  80c02c:	defffe04 	addi	sp,sp,-8
  80c030:	dc000015 	stw	r16,0(sp)
  80c034:	300b883a 	mov	r5,r6
  80c038:	2021883a 	mov	r16,r4
  80c03c:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c040:	1809883a 	mov	r4,r3
{
  80c044:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c048:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c04c:	08104980 	call	810498 <read>
  80c050:	10ffffd8 	cmpnei	r3,r2,-1
  80c054:	18000426 	beq	r3,zero,80c068 <_read_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80c058:	dfc00117 	ldw	ra,4(sp)
  80c05c:	dc000017 	ldw	r16,0(sp)
  80c060:	dec00204 	addi	sp,sp,8
  80c064:	f800283a 	ret
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c068:	d0e71817 	ldw	r3,-25504(gp)
  80c06c:	183ffa26 	beq	r3,zero,80c058 <_read_r+0x30>
    ptr->_errno = errno;
  80c070:	80c00015 	stw	r3,0(r16)
}
  80c074:	dfc00117 	ldw	ra,4(sp)
  80c078:	dc000017 	ldw	r16,0(sp)
  80c07c:	dec00204 	addi	sp,sp,8
  80c080:	f800283a 	ret

0080c084 <_vfiprintf_r>:
{
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
  80c084:	080a4fc1 	jmpi	80a4fc <___vfiprintf_internal_r>

0080c088 <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
  80c088:	defffb04 	addi	sp,sp,-20
  80c08c:	dcc00315 	stw	r19,12(sp)
  80c090:	dc400115 	stw	r17,4(sp)
  80c094:	dc000015 	stw	r16,0(sp)
  80c098:	dfc00415 	stw	ra,16(sp)
  80c09c:	dc800215 	stw	r18,8(sp)
  80c0a0:	2027883a 	mov	r19,r4
  80c0a4:	2823883a 	mov	r17,r5
  80c0a8:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
  80c0ac:	20000226 	beq	r4,zero,80c0b8 <__swbuf_r+0x30>
  80c0b0:	20800e17 	ldw	r2,56(r4)
  80c0b4:	10003e26 	beq	r2,zero,80c1b0 <__swbuf_r+0x128>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
  80c0b8:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80c0bc:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80c0c0:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80c0c4:	1880020c 	andi	r2,r3,8
  80c0c8:	10001f26 	beq	r2,zero,80c148 <__swbuf_r+0xc0>
  80c0cc:	80800417 	ldw	r2,16(r16)
  80c0d0:	10001d26 	beq	r2,zero,80c148 <__swbuf_r+0xc0>
    return EOF;
  c = (unsigned char) c;

  ORIENT (fp, -1);
  80c0d4:	1948000c 	andi	r5,r3,8192
  80c0d8:	8c803fcc 	andi	r18,r17,255
  80c0dc:	28002326 	beq	r5,zero,80c16c <__swbuf_r+0xe4>
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
  80c0e0:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80c0e4:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c0e8:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c0ec:	1100290e 	bge	r2,r4,80c194 <__swbuf_r+0x10c>
	return EOF;
      n = 0;
    }
  fp->_w--;
  *fp->_p++ = c;
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c0f0:	10800044 	addi	r2,r2,1
  fp->_w--;
  80c0f4:	81400217 	ldw	r5,8(r16)
  *fp->_p++ = c;
  80c0f8:	19000044 	addi	r4,r3,1
  80c0fc:	81000015 	stw	r4,0(r16)
  fp->_w--;
  80c100:	297fffc4 	addi	r5,r5,-1
  80c104:	81400215 	stw	r5,8(r16)
  *fp->_p++ = c;
  80c108:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c10c:	80c00517 	ldw	r3,20(r16)
  80c110:	18802926 	beq	r3,r2,80c1b8 <__swbuf_r+0x130>
  80c114:	8080030b 	ldhu	r2,12(r16)
  80c118:	1080004c 	andi	r2,r2,1
  80c11c:	10000226 	beq	r2,zero,80c128 <__swbuf_r+0xa0>
  80c120:	90800298 	cmpnei	r2,r18,10
  80c124:	10002426 	beq	r2,zero,80c1b8 <__swbuf_r+0x130>
    if (_fflush_r (ptr, fp))
      return EOF;
  return c;
}
  80c128:	9005883a 	mov	r2,r18
  80c12c:	dfc00417 	ldw	ra,16(sp)
  80c130:	dcc00317 	ldw	r19,12(sp)
  80c134:	dc800217 	ldw	r18,8(sp)
  80c138:	dc400117 	ldw	r17,4(sp)
  80c13c:	dc000017 	ldw	r16,0(sp)
  80c140:	dec00504 	addi	sp,sp,20
  80c144:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80c148:	800b883a 	mov	r5,r16
  80c14c:	9809883a 	mov	r4,r19
  80c150:	0804f800 	call	804f80 <__swsetup_r>
  80c154:	10001c1e 	bne	r2,zero,80c1c8 <__swbuf_r+0x140>
  ORIENT (fp, -1);
  80c158:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c15c:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80c160:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80c164:	1948000c 	andi	r5,r3,8192
  80c168:	283fdd1e 	bne	r5,zero,80c0e0 <__swbuf_r+0x58>
  80c16c:	81001917 	ldw	r4,100(r16)
  80c170:	18c80014 	ori	r3,r3,8192
  80c174:	0177ffc4 	movi	r5,-8193
  80c178:	2148703a 	and	r4,r4,r5
  80c17c:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c180:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80c184:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80c188:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c18c:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c190:	113fd716 	blt	r2,r4,80c0f0 <__swbuf_r+0x68>
      if (_fflush_r (ptr, fp))
  80c194:	800b883a 	mov	r5,r16
  80c198:	9809883a 	mov	r4,r19
  80c19c:	0806c700 	call	806c70 <_fflush_r>
  80c1a0:	1000091e 	bne	r2,zero,80c1c8 <__swbuf_r+0x140>
  *fp->_p++ = c;
  80c1a4:	80c00017 	ldw	r3,0(r16)
  80c1a8:	00800044 	movi	r2,1
  80c1ac:	003fd106 	br	80c0f4 <__swbuf_r+0x6c>
  CHECK_INIT (ptr, fp);
  80c1b0:	08070a80 	call	8070a8 <__sinit>
  80c1b4:	003fc006 	br	80c0b8 <__swbuf_r+0x30>
    if (_fflush_r (ptr, fp))
  80c1b8:	800b883a 	mov	r5,r16
  80c1bc:	9809883a 	mov	r4,r19
  80c1c0:	0806c700 	call	806c70 <_fflush_r>
  80c1c4:	103fd826 	beq	r2,zero,80c128 <__swbuf_r+0xa0>
    return EOF;
  80c1c8:	04bfffc4 	movi	r18,-1
  80c1cc:	003fd606 	br	80c128 <__swbuf_r+0xa0>

0080c1d0 <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
  80c1d0:	2005883a 	mov	r2,r4
  return __swbuf_r (_REENT, c, fp);
  80c1d4:	d1200917 	ldw	r4,-32732(gp)
  80c1d8:	280d883a 	mov	r6,r5
  80c1dc:	100b883a 	mov	r5,r2
  80c1e0:	080c0881 	jmpi	80c088 <__swbuf_r>

0080c1e4 <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
  80c1e4:	defffa04 	addi	sp,sp,-24
  80c1e8:	dc400415 	stw	r17,16(sp)
  80c1ec:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c1f0:	00802074 	movhi	r2,129
{
  80c1f4:	dfc00515 	stw	ra,20(sp)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c1f8:	108d9417 	ldw	r2,13904(r2)
{
  80c1fc:	2023883a 	mov	r17,r4
  80c200:	3821883a 	mov	r16,r7
  if (s == NULL)
  80c204:	28000826 	beq	r5,zero,80c228 <_wcrtomb_r+0x44>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
  80c208:	103ee83a 	callr	r2

  if (retval == -1)
  80c20c:	10ffffd8 	cmpnei	r3,r2,-1
  80c210:	18000a26 	beq	r3,zero,80c23c <_wcrtomb_r+0x58>
      ptr->_errno = EILSEQ;
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
}
  80c214:	dfc00517 	ldw	ra,20(sp)
  80c218:	dc400417 	ldw	r17,16(sp)
  80c21c:	dc000317 	ldw	r16,12(sp)
  80c220:	dec00604 	addi	sp,sp,24
  80c224:	f800283a 	ret
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c228:	000d883a 	mov	r6,zero
  80c22c:	d9400084 	addi	r5,sp,2
  80c230:	103ee83a 	callr	r2
  if (retval == -1)
  80c234:	10ffffd8 	cmpnei	r3,r2,-1
  80c238:	183ff61e 	bne	r3,zero,80c214 <_wcrtomb_r+0x30>
      ptr->_errno = EILSEQ;
  80c23c:	00802284 	movi	r2,138
      ps->__count = 0;
  80c240:	80000015 	stw	zero,0(r16)
      ptr->_errno = EILSEQ;
  80c244:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c248:	00bfffc4 	movi	r2,-1
  80c24c:	003ff106 	br	80c214 <_wcrtomb_r+0x30>

0080c250 <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
  80c250:	defffa04 	addi	sp,sp,-24
  80c254:	dc400415 	stw	r17,16(sp)
  80c258:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c25c:	00c02074 	movhi	r3,129
{
  80c260:	dfc00515 	stw	ra,20(sp)
  struct _reent *reent = _REENT;
  80c264:	d4600917 	ldw	r17,-32732(gp)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c268:	18cd9417 	ldw	r3,13904(r3)
{
  80c26c:	3021883a 	mov	r16,r6
  if (s == NULL)
  80c270:	20000c26 	beq	r4,zero,80c2a4 <wcrtomb+0x54>
  80c274:	280d883a 	mov	r6,r5
  else
    retval = __WCTOMB (reent, s, wc, ps);
  80c278:	800f883a 	mov	r7,r16
  80c27c:	200b883a 	mov	r5,r4
  80c280:	8809883a 	mov	r4,r17
  80c284:	183ee83a 	callr	r3

  if (retval == -1)
  80c288:	10ffffd8 	cmpnei	r3,r2,-1
  80c28c:	18000c26 	beq	r3,zero,80c2c0 <wcrtomb+0x70>
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80c290:	dfc00517 	ldw	ra,20(sp)
  80c294:	dc400417 	ldw	r17,16(sp)
  80c298:	dc000317 	ldw	r16,12(sp)
  80c29c:	dec00604 	addi	sp,sp,24
  80c2a0:	f800283a 	ret
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c2a4:	300f883a 	mov	r7,r6
  80c2a8:	d9400084 	addi	r5,sp,2
  80c2ac:	000d883a 	mov	r6,zero
  80c2b0:	8809883a 	mov	r4,r17
  80c2b4:	183ee83a 	callr	r3
  if (retval == -1)
  80c2b8:	10ffffd8 	cmpnei	r3,r2,-1
  80c2bc:	183ff41e 	bne	r3,zero,80c290 <wcrtomb+0x40>
      reent->_errno = EILSEQ;
  80c2c0:	00802284 	movi	r2,138
      ps->__count = 0;
  80c2c4:	80000015 	stw	zero,0(r16)
      reent->_errno = EILSEQ;
  80c2c8:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c2cc:	00bfffc4 	movi	r2,-1
  80c2d0:	003fef06 	br	80c290 <wcrtomb+0x40>

0080c2d4 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
  80c2d4:	deffff04 	addi	sp,sp,-4
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
  80c2d8:	01000184 	movi	r4,6
{
  80c2dc:	dfc00015 	stw	ra,0(sp)
      raise (SIGABRT);
  80c2e0:	080c5600 	call	80c560 <raise>
      _exit (1);
  80c2e4:	01000044 	movi	r4,1
  80c2e8:	080fdec0 	call	80fdec <_exit>

0080c2ec <_init_signal_r>:
int
_init_signal_r (struct _reent *ptr)
{
  int i;

  if (ptr->_sig_func == NULL)
  80c2ec:	2080b717 	ldw	r2,732(r4)
  80c2f0:	10000226 	beq	r2,zero,80c2fc <_init_signal_r+0x10>

      for (i = 0; i < NSIG; i++)
	ptr->_sig_func[i] = SIG_DFL;
    }

  return 0;
  80c2f4:	0005883a 	mov	r2,zero
}
  80c2f8:	f800283a 	ret
{
  80c2fc:	defffe04 	addi	sp,sp,-8
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c300:	01402004 	movi	r5,128
{
  80c304:	dc000015 	stw	r16,0(sp)
  80c308:	dfc00115 	stw	ra,4(sp)
  80c30c:	2021883a 	mov	r16,r4
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c310:	0807e580 	call	807e58 <_malloc_r>
  80c314:	8080b715 	stw	r2,732(r16)
  80c318:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c31c:	10000826 	beq	r2,zero,80c340 <_init_signal_r+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c320:	01802004 	movi	r6,128
  80c324:	000b883a 	mov	r5,zero
  80c328:	08089640 	call	808964 <memset>
  return 0;
  80c32c:	0005883a 	mov	r2,zero
}
  80c330:	dfc00117 	ldw	ra,4(sp)
  80c334:	dc000017 	ldw	r16,0(sp)
  80c338:	dec00204 	addi	sp,sp,8
  80c33c:	f800283a 	ret
	return -1;
  80c340:	00bfffc4 	movi	r2,-1
  80c344:	003ffa06 	br	80c330 <_init_signal_r+0x44>

0080c348 <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
  80c348:	defffc04 	addi	sp,sp,-16
  80c34c:	dc400115 	stw	r17,4(sp)
  80c350:	dfc00315 	stw	ra,12(sp)
  80c354:	dc800215 	stw	r18,8(sp)
  80c358:	dc000015 	stw	r16,0(sp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
  80c35c:	28800830 	cmpltui	r2,r5,32
{
  80c360:	2023883a 	mov	r17,r4
  if (sig < 0 || sig >= NSIG)
  80c364:	10000e26 	beq	r2,zero,80c3a0 <_signal_r+0x58>
    {
      ptr->_errno = EINVAL;
      return SIG_ERR;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c368:	20c0b717 	ldw	r3,732(r4)
  80c36c:	2821883a 	mov	r16,r5
  80c370:	3025883a 	mov	r18,r6
  80c374:	18000e26 	beq	r3,zero,80c3b0 <_signal_r+0x68>
    return SIG_ERR;
  
  old_func = ptr->_sig_func[sig];
  80c378:	802090ba 	slli	r16,r16,2
  80c37c:	1c21883a 	add	r16,r3,r16
  80c380:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c384:	84800015 	stw	r18,0(r16)

  return old_func;
}
  80c388:	dfc00317 	ldw	ra,12(sp)
  80c38c:	dc800217 	ldw	r18,8(sp)
  80c390:	dc400117 	ldw	r17,4(sp)
  80c394:	dc000017 	ldw	r16,0(sp)
  80c398:	dec00404 	addi	sp,sp,16
  80c39c:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c3a0:	00800584 	movi	r2,22
  80c3a4:	20800015 	stw	r2,0(r4)
      return SIG_ERR;
  80c3a8:	00bfffc4 	movi	r2,-1
  80c3ac:	003ff606 	br	80c388 <_signal_r+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c3b0:	01402004 	movi	r5,128
  80c3b4:	0807e580 	call	807e58 <_malloc_r>
  80c3b8:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c3bc:	10000626 	beq	r2,zero,80c3d8 <_signal_r+0x90>
	ptr->_sig_func[i] = SIG_DFL;
  80c3c0:	01802004 	movi	r6,128
  80c3c4:	000b883a 	mov	r5,zero
  80c3c8:	1009883a 	mov	r4,r2
  80c3cc:	08089640 	call	808964 <memset>
  80c3d0:	1007883a 	mov	r3,r2
  80c3d4:	003fe806 	br	80c378 <_signal_r+0x30>
    return SIG_ERR;
  80c3d8:	00bfffc4 	movi	r2,-1
  80c3dc:	003fea06 	br	80c388 <_signal_r+0x40>

0080c3e0 <_raise_r>:
_raise_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c3e0:	28800830 	cmpltui	r2,r5,32
  80c3e4:	10002b26 	beq	r2,zero,80c494 <_raise_r+0xb4>
    {
      ptr->_errno = EINVAL;
      return -1;
    }

  if (ptr->_sig_func == NULL)
  80c3e8:	2080b717 	ldw	r2,732(r4)
{
  80c3ec:	defffd04 	addi	sp,sp,-12
  80c3f0:	dc000115 	stw	r16,4(sp)
  80c3f4:	dfc00215 	stw	ra,8(sp)
  80c3f8:	2821883a 	mov	r16,r5
  if (ptr->_sig_func == NULL)
  80c3fc:	10001026 	beq	r2,zero,80c440 <_raise_r+0x60>
    func = SIG_DFL;
  else
    func = ptr->_sig_func[sig];
  80c400:	280690ba 	slli	r3,r5,2
  80c404:	10c5883a 	add	r2,r2,r3
  80c408:	10c00017 	ldw	r3,0(r2)

  if (func == SIG_DFL)
  80c40c:	18000c26 	beq	r3,zero,80c440 <_raise_r+0x60>
    return _kill_r (ptr, _getpid_r (ptr), sig);
  else if (func == SIG_IGN)
  80c410:	19400060 	cmpeqi	r5,r3,1
  80c414:	28001a1e 	bne	r5,zero,80c480 <_raise_r+0xa0>
    return 0;
  else if (func == SIG_ERR)
  80c418:	197fffd8 	cmpnei	r5,r3,-1
  80c41c:	28001126 	beq	r5,zero,80c464 <_raise_r+0x84>
      ptr->_errno = EINVAL;
      return 1;
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c420:	10000015 	stw	zero,0(r2)
      func (sig);
  80c424:	8009883a 	mov	r4,r16
  80c428:	183ee83a 	callr	r3
      return 0;
  80c42c:	0005883a 	mov	r2,zero
    }
}
  80c430:	dfc00217 	ldw	ra,8(sp)
  80c434:	dc000117 	ldw	r16,4(sp)
  80c438:	dec00304 	addi	sp,sp,12
  80c43c:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c440:	d9000015 	stw	r4,0(sp)
  80c444:	080c8200 	call	80c820 <_getpid_r>
  80c448:	d9000017 	ldw	r4,0(sp)
  80c44c:	800d883a 	mov	r6,r16
  80c450:	100b883a 	mov	r5,r2
}
  80c454:	dfc00217 	ldw	ra,8(sp)
  80c458:	dc000117 	ldw	r16,4(sp)
  80c45c:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c460:	080c7c81 	jmpi	80c7c8 <_kill_r>
      ptr->_errno = EINVAL;
  80c464:	00800584 	movi	r2,22
  80c468:	20800015 	stw	r2,0(r4)
      return 1;
  80c46c:	00800044 	movi	r2,1
}
  80c470:	dfc00217 	ldw	ra,8(sp)
  80c474:	dc000117 	ldw	r16,4(sp)
  80c478:	dec00304 	addi	sp,sp,12
  80c47c:	f800283a 	ret
    return 0;
  80c480:	0005883a 	mov	r2,zero
}
  80c484:	dfc00217 	ldw	ra,8(sp)
  80c488:	dc000117 	ldw	r16,4(sp)
  80c48c:	dec00304 	addi	sp,sp,12
  80c490:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c494:	00800584 	movi	r2,22
  80c498:	20800015 	stw	r2,0(r4)
      return -1;
  80c49c:	00bfffc4 	movi	r2,-1
}
  80c4a0:	f800283a 	ret

0080c4a4 <__sigtramp_r>:
__sigtramp_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c4a4:	28800830 	cmpltui	r2,r5,32
  80c4a8:	10002b26 	beq	r2,zero,80c558 <__sigtramp_r+0xb4>
    {
      return -1;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c4ac:	20c0b717 	ldw	r3,732(r4)
{
  80c4b0:	defffd04 	addi	sp,sp,-12
  80c4b4:	dc400115 	stw	r17,4(sp)
  80c4b8:	dc000015 	stw	r16,0(sp)
  80c4bc:	dfc00215 	stw	ra,8(sp)
  80c4c0:	2821883a 	mov	r16,r5
  80c4c4:	2023883a 	mov	r17,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c4c8:	18001326 	beq	r3,zero,80c518 <__sigtramp_r+0x74>
    return -1;

  func = ptr->_sig_func[sig];
  80c4cc:	800490ba 	slli	r2,r16,2
  80c4d0:	1887883a 	add	r3,r3,r2
  80c4d4:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80c4d8:	10000d26 	beq	r2,zero,80c510 <__sigtramp_r+0x6c>
    return 1;
  else if (func == SIG_ERR)
  80c4dc:	113fffe0 	cmpeqi	r4,r2,-1
  80c4e0:	2000191e 	bne	r4,zero,80c548 <__sigtramp_r+0xa4>
    return 2;
  else if (func == SIG_IGN)
  80c4e4:	11000060 	cmpeqi	r4,r2,1
  80c4e8:	2000151e 	bne	r4,zero,80c540 <__sigtramp_r+0x9c>
    return 3;
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c4ec:	18000015 	stw	zero,0(r3)
      func (sig);
  80c4f0:	8009883a 	mov	r4,r16
  80c4f4:	103ee83a 	callr	r2
      return 0;
  80c4f8:	0005883a 	mov	r2,zero
    }
}
  80c4fc:	dfc00217 	ldw	ra,8(sp)
  80c500:	dc400117 	ldw	r17,4(sp)
  80c504:	dc000017 	ldw	r16,0(sp)
  80c508:	dec00304 	addi	sp,sp,12
  80c50c:	f800283a 	ret
    return 1;
  80c510:	00800044 	movi	r2,1
  80c514:	003ff906 	br	80c4fc <__sigtramp_r+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c518:	01402004 	movi	r5,128
  80c51c:	0807e580 	call	807e58 <_malloc_r>
  80c520:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c524:	10000a26 	beq	r2,zero,80c550 <__sigtramp_r+0xac>
	ptr->_sig_func[i] = SIG_DFL;
  80c528:	01802004 	movi	r6,128
  80c52c:	000b883a 	mov	r5,zero
  80c530:	1009883a 	mov	r4,r2
  80c534:	08089640 	call	808964 <memset>
  80c538:	1007883a 	mov	r3,r2
  80c53c:	003fe306 	br	80c4cc <__sigtramp_r+0x28>
    return 3;
  80c540:	008000c4 	movi	r2,3
  80c544:	003fed06 	br	80c4fc <__sigtramp_r+0x58>
    return 2;
  80c548:	00800084 	movi	r2,2
  80c54c:	003feb06 	br	80c4fc <__sigtramp_r+0x58>
      return -1;
  80c550:	00bfffc4 	movi	r2,-1
  80c554:	003fe906 	br	80c4fc <__sigtramp_r+0x58>
  80c558:	00bfffc4 	movi	r2,-1
}
  80c55c:	f800283a 	ret

0080c560 <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
  80c560:	defffd04 	addi	sp,sp,-12
  80c564:	dc400115 	stw	r17,4(sp)
  80c568:	dfc00215 	stw	ra,8(sp)
  80c56c:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c570:	20800830 	cmpltui	r2,r4,32
  return _raise_r (_REENT, sig);
  80c574:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c578:	10002326 	beq	r2,zero,80c608 <raise+0xa8>
  if (ptr->_sig_func == NULL)
  80c57c:	8880b717 	ldw	r2,732(r17)
  80c580:	2021883a 	mov	r16,r4
  80c584:	10001026 	beq	r2,zero,80c5c8 <raise+0x68>
    func = ptr->_sig_func[sig];
  80c588:	200690ba 	slli	r3,r4,2
  80c58c:	10c5883a 	add	r2,r2,r3
  80c590:	10c00017 	ldw	r3,0(r2)
  if (func == SIG_DFL)
  80c594:	18000c26 	beq	r3,zero,80c5c8 <raise+0x68>
  else if (func == SIG_IGN)
  80c598:	19400060 	cmpeqi	r5,r3,1
  80c59c:	2800181e 	bne	r5,zero,80c600 <raise+0xa0>
  else if (func == SIG_ERR)
  80c5a0:	197fffd8 	cmpnei	r5,r3,-1
  80c5a4:	28001226 	beq	r5,zero,80c5f0 <raise+0x90>
      ptr->_sig_func[sig] = SIG_DFL;
  80c5a8:	10000015 	stw	zero,0(r2)
      func (sig);
  80c5ac:	183ee83a 	callr	r3
      return 0;
  80c5b0:	0005883a 	mov	r2,zero
}
  80c5b4:	dfc00217 	ldw	ra,8(sp)
  80c5b8:	dc400117 	ldw	r17,4(sp)
  80c5bc:	dc000017 	ldw	r16,0(sp)
  80c5c0:	dec00304 	addi	sp,sp,12
  80c5c4:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c5c8:	8809883a 	mov	r4,r17
  80c5cc:	080c8200 	call	80c820 <_getpid_r>
  80c5d0:	800d883a 	mov	r6,r16
  80c5d4:	100b883a 	mov	r5,r2
  80c5d8:	8809883a 	mov	r4,r17
}
  80c5dc:	dfc00217 	ldw	ra,8(sp)
  80c5e0:	dc400117 	ldw	r17,4(sp)
  80c5e4:	dc000017 	ldw	r16,0(sp)
  80c5e8:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c5ec:	080c7c81 	jmpi	80c7c8 <_kill_r>
      ptr->_errno = EINVAL;
  80c5f0:	00800584 	movi	r2,22
  80c5f4:	88800015 	stw	r2,0(r17)
      return 1;
  80c5f8:	00800044 	movi	r2,1
  80c5fc:	003fed06 	br	80c5b4 <raise+0x54>
    return 0;
  80c600:	0005883a 	mov	r2,zero
  return _raise_r (_REENT, sig);
  80c604:	003feb06 	br	80c5b4 <raise+0x54>
      ptr->_errno = EINVAL;
  80c608:	00800584 	movi	r2,22
  80c60c:	88800015 	stw	r2,0(r17)
      return -1;
  80c610:	00bfffc4 	movi	r2,-1
  80c614:	003fe706 	br	80c5b4 <raise+0x54>

0080c618 <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
  80c618:	defffc04 	addi	sp,sp,-16
  80c61c:	dc800215 	stw	r18,8(sp)
  80c620:	dfc00315 	stw	ra,12(sp)
  80c624:	dc400115 	stw	r17,4(sp)
  80c628:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c62c:	20800830 	cmpltui	r2,r4,32
  return _signal_r (_REENT, sig, func);
  80c630:	d4a00917 	ldw	r18,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c634:	10000e26 	beq	r2,zero,80c670 <signal+0x58>
  80c638:	2021883a 	mov	r16,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c63c:	9100b717 	ldw	r4,732(r18)
  80c640:	2823883a 	mov	r17,r5
  80c644:	20000e26 	beq	r4,zero,80c680 <signal+0x68>
  old_func = ptr->_sig_func[sig];
  80c648:	802090ba 	slli	r16,r16,2
  80c64c:	2421883a 	add	r16,r4,r16
  80c650:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c654:	84400015 	stw	r17,0(r16)
}
  80c658:	dfc00317 	ldw	ra,12(sp)
  80c65c:	dc800217 	ldw	r18,8(sp)
  80c660:	dc400117 	ldw	r17,4(sp)
  80c664:	dc000017 	ldw	r16,0(sp)
  80c668:	dec00404 	addi	sp,sp,16
  80c66c:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c670:	00800584 	movi	r2,22
  80c674:	90800015 	stw	r2,0(r18)
      return SIG_ERR;
  80c678:	00bfffc4 	movi	r2,-1
  80c67c:	003ff606 	br	80c658 <signal+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c680:	9009883a 	mov	r4,r18
  80c684:	01402004 	movi	r5,128
  80c688:	0807e580 	call	807e58 <_malloc_r>
  80c68c:	9080b715 	stw	r2,732(r18)
  80c690:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c694:	10000526 	beq	r2,zero,80c6ac <signal+0x94>
	ptr->_sig_func[i] = SIG_DFL;
  80c698:	01802004 	movi	r6,128
  80c69c:	000b883a 	mov	r5,zero
  80c6a0:	08089640 	call	808964 <memset>
  80c6a4:	1009883a 	mov	r4,r2
  80c6a8:	003fe706 	br	80c648 <signal+0x30>
    return SIG_ERR;
  80c6ac:	00bfffc4 	movi	r2,-1
  return _signal_r (_REENT, sig, func);
  80c6b0:	003fe906 	br	80c658 <signal+0x40>

0080c6b4 <_init_signal>:

int 
_init_signal (void)
{
  80c6b4:	defffe04 	addi	sp,sp,-8
  80c6b8:	dc000015 	stw	r16,0(sp)
  return _init_signal_r (_REENT);
  80c6bc:	d4200917 	ldw	r16,-32732(gp)
{
  80c6c0:	dfc00115 	stw	ra,4(sp)
  if (ptr->_sig_func == NULL)
  80c6c4:	8080b717 	ldw	r2,732(r16)
  80c6c8:	10000526 	beq	r2,zero,80c6e0 <_init_signal+0x2c>
  return 0;
  80c6cc:	0005883a 	mov	r2,zero
}
  80c6d0:	dfc00117 	ldw	ra,4(sp)
  80c6d4:	dc000017 	ldw	r16,0(sp)
  80c6d8:	dec00204 	addi	sp,sp,8
  80c6dc:	f800283a 	ret
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c6e0:	8009883a 	mov	r4,r16
  80c6e4:	01402004 	movi	r5,128
  80c6e8:	0807e580 	call	807e58 <_malloc_r>
  80c6ec:	8080b715 	stw	r2,732(r16)
  80c6f0:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c6f4:	10000426 	beq	r2,zero,80c708 <_init_signal+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c6f8:	01802004 	movi	r6,128
  80c6fc:	000b883a 	mov	r5,zero
  80c700:	08089640 	call	808964 <memset>
  80c704:	003ff106 	br	80c6cc <_init_signal+0x18>
	return -1;
  80c708:	00bfffc4 	movi	r2,-1
  return _init_signal_r (_REENT);
  80c70c:	003ff006 	br	80c6d0 <_init_signal+0x1c>

0080c710 <__sigtramp>:

int
__sigtramp (int sig)
{
  80c710:	defffd04 	addi	sp,sp,-12
  80c714:	dc400115 	stw	r17,4(sp)
  80c718:	dfc00215 	stw	ra,8(sp)
  80c71c:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c720:	20800830 	cmpltui	r2,r4,32
  return __sigtramp_r (_REENT, sig);
  80c724:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c728:	10002526 	beq	r2,zero,80c7c0 <__sigtramp+0xb0>
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c72c:	88c0b717 	ldw	r3,732(r17)
  80c730:	2021883a 	mov	r16,r4
  80c734:	18001326 	beq	r3,zero,80c784 <__sigtramp+0x74>
  func = ptr->_sig_func[sig];
  80c738:	800890ba 	slli	r4,r16,2
  80c73c:	1907883a 	add	r3,r3,r4
  80c740:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80c744:	10000d26 	beq	r2,zero,80c77c <__sigtramp+0x6c>
  else if (func == SIG_ERR)
  80c748:	113fffe0 	cmpeqi	r4,r2,-1
  80c74c:	20001a1e 	bne	r4,zero,80c7b8 <__sigtramp+0xa8>
  else if (func == SIG_IGN)
  80c750:	11000060 	cmpeqi	r4,r2,1
  80c754:	2000161e 	bne	r4,zero,80c7b0 <__sigtramp+0xa0>
      ptr->_sig_func[sig] = SIG_DFL;
  80c758:	18000015 	stw	zero,0(r3)
      func (sig);
  80c75c:	8009883a 	mov	r4,r16
  80c760:	103ee83a 	callr	r2
      return 0;
  80c764:	0005883a 	mov	r2,zero
}
  80c768:	dfc00217 	ldw	ra,8(sp)
  80c76c:	dc400117 	ldw	r17,4(sp)
  80c770:	dc000017 	ldw	r16,0(sp)
  80c774:	dec00304 	addi	sp,sp,12
  80c778:	f800283a 	ret
    return 1;
  80c77c:	00800044 	movi	r2,1
  80c780:	003ff906 	br	80c768 <__sigtramp+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c784:	01402004 	movi	r5,128
  80c788:	8809883a 	mov	r4,r17
  80c78c:	0807e580 	call	807e58 <_malloc_r>
  80c790:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c794:	10000a26 	beq	r2,zero,80c7c0 <__sigtramp+0xb0>
	ptr->_sig_func[i] = SIG_DFL;
  80c798:	01802004 	movi	r6,128
  80c79c:	000b883a 	mov	r5,zero
  80c7a0:	1009883a 	mov	r4,r2
  80c7a4:	08089640 	call	808964 <memset>
  80c7a8:	1007883a 	mov	r3,r2
  80c7ac:	003fe206 	br	80c738 <__sigtramp+0x28>
    return 3;
  80c7b0:	008000c4 	movi	r2,3
  return __sigtramp_r (_REENT, sig);
  80c7b4:	003fec06 	br	80c768 <__sigtramp+0x58>
    return 2;
  80c7b8:	00800084 	movi	r2,2
  80c7bc:	003fea06 	br	80c768 <__sigtramp+0x58>
      return -1;
  80c7c0:	00bfffc4 	movi	r2,-1
  80c7c4:	003fe806 	br	80c768 <__sigtramp+0x58>

0080c7c8 <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
  80c7c8:	2807883a 	mov	r3,r5
  80c7cc:	defffe04 	addi	sp,sp,-8
  80c7d0:	dc000015 	stw	r16,0(sp)
  80c7d4:	300b883a 	mov	r5,r6
  80c7d8:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c7dc:	1809883a 	mov	r4,r3
{
  80c7e0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c7e4:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c7e8:	08100640 	call	810064 <kill>
  80c7ec:	10ffffd8 	cmpnei	r3,r2,-1
  80c7f0:	18000426 	beq	r3,zero,80c804 <_kill_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80c7f4:	dfc00117 	ldw	ra,4(sp)
  80c7f8:	dc000017 	ldw	r16,0(sp)
  80c7fc:	dec00204 	addi	sp,sp,8
  80c800:	f800283a 	ret
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c804:	d0e71817 	ldw	r3,-25504(gp)
  80c808:	183ffa26 	beq	r3,zero,80c7f4 <_kill_r+0x2c>
    ptr->_errno = errno;
  80c80c:	80c00015 	stw	r3,0(r16)
}
  80c810:	dfc00117 	ldw	ra,4(sp)
  80c814:	dc000017 	ldw	r16,0(sp)
  80c818:	dec00204 	addi	sp,sp,8
  80c81c:	f800283a 	ret

0080c820 <_getpid_r>:

int
_getpid_r (struct _reent *ptr)
{
  int ret;
  ret = _getpid ();
  80c820:	080ff1c1 	jmpi	80ff1c <getpid>

0080c824 <__udivdi3>:
  80c824:	defff504 	addi	sp,sp,-44
  80c828:	dd000515 	stw	r20,20(sp)
  80c82c:	dc800315 	stw	r18,12(sp)
  80c830:	dfc00a15 	stw	ra,40(sp)
  80c834:	df000915 	stw	fp,36(sp)
  80c838:	ddc00815 	stw	r23,32(sp)
  80c83c:	dd800715 	stw	r22,28(sp)
  80c840:	dd400615 	stw	r21,24(sp)
  80c844:	dcc00415 	stw	r19,16(sp)
  80c848:	dc400215 	stw	r17,8(sp)
  80c84c:	dc000115 	stw	r16,4(sp)
  80c850:	2029883a 	mov	r20,r4
  80c854:	2825883a 	mov	r18,r5
  80c858:	3800461e 	bne	r7,zero,80c974 <__udivdi3+0x150>
  80c85c:	3823883a 	mov	r17,r7
  80c860:	3021883a 	mov	r16,r6
  80c864:	2027883a 	mov	r19,r4
  80c868:	2980622e 	bgeu	r5,r6,80c9f4 <__udivdi3+0x1d0>
  80c86c:	00bfffd4 	movui	r2,65535
  80c870:	282b883a 	mov	r21,r5
  80c874:	1180aa2e 	bgeu	r2,r6,80cb20 <__udivdi3+0x2fc>
  80c878:	00804034 	movhi	r2,256
  80c87c:	30815a36 	bltu	r6,r2,80cde8 <__udivdi3+0x5c4>
  80c880:	3006d63a 	srli	r3,r6,24
  80c884:	04400604 	movi	r17,24
  80c888:	00802074 	movhi	r2,129
  80c88c:	1885883a 	add	r2,r3,r2
  80c890:	108aab03 	ldbu	r2,10924(r2)
  80c894:	00c00804 	movi	r3,32
  80c898:	1463883a 	add	r17,r2,r17
  80c89c:	1c45c83a 	sub	r2,r3,r17
  80c8a0:	1c400526 	beq	r3,r17,80c8b8 <__udivdi3+0x94>
  80c8a4:	9086983a 	sll	r3,r18,r2
  80c8a8:	a462d83a 	srl	r17,r20,r17
  80c8ac:	30a0983a 	sll	r16,r6,r2
  80c8b0:	a0a6983a 	sll	r19,r20,r2
  80c8b4:	88eab03a 	or	r21,r17,r3
  80c8b8:	802cd43a 	srli	r22,r16,16
  80c8bc:	a809883a 	mov	r4,r21
  80c8c0:	853fffcc 	andi	r20,r16,65535
  80c8c4:	b00b883a 	mov	r5,r22
  80c8c8:	080d5600 	call	80d560 <__umodsi3>
  80c8cc:	a809883a 	mov	r4,r21
  80c8d0:	b00b883a 	mov	r5,r22
  80c8d4:	1025883a 	mov	r18,r2
  80c8d8:	080d4fc0 	call	80d4fc <__udivsi3>
  80c8dc:	a009883a 	mov	r4,r20
  80c8e0:	100b883a 	mov	r5,r2
  80c8e4:	102b883a 	mov	r21,r2
  80c8e8:	0802ba80 	call	802ba8 <__mulsi3>
  80c8ec:	9024943a 	slli	r18,r18,16
  80c8f0:	9808d43a 	srli	r4,r19,16
  80c8f4:	9108b03a 	or	r4,r18,r4
  80c8f8:	2080052e 	bgeu	r4,r2,80c910 <__udivdi3+0xec>
  80c8fc:	2409883a 	add	r4,r4,r16
  80c900:	a8ffffc4 	addi	r3,r21,-1
  80c904:	24000136 	bltu	r4,r16,80c90c <__udivdi3+0xe8>
  80c908:	20814836 	bltu	r4,r2,80ce2c <__udivdi3+0x608>
  80c90c:	182b883a 	mov	r21,r3
  80c910:	20a3c83a 	sub	r17,r4,r2
  80c914:	8809883a 	mov	r4,r17
  80c918:	b00b883a 	mov	r5,r22
  80c91c:	080d5600 	call	80d560 <__umodsi3>
  80c920:	8809883a 	mov	r4,r17
  80c924:	1023883a 	mov	r17,r2
  80c928:	b00b883a 	mov	r5,r22
  80c92c:	8822943a 	slli	r17,r17,16
  80c930:	080d4fc0 	call	80d4fc <__udivsi3>
  80c934:	100b883a 	mov	r5,r2
  80c938:	a009883a 	mov	r4,r20
  80c93c:	9cffffcc 	andi	r19,r19,65535
  80c940:	1025883a 	mov	r18,r2
  80c944:	8ce6b03a 	or	r19,r17,r19
  80c948:	0802ba80 	call	802ba8 <__mulsi3>
  80c94c:	9880052e 	bgeu	r19,r2,80c964 <__udivdi3+0x140>
  80c950:	84e7883a 	add	r19,r16,r19
  80c954:	90ffffc4 	addi	r3,r18,-1
  80c958:	9c000136 	bltu	r19,r16,80c960 <__udivdi3+0x13c>
  80c95c:	98813136 	bltu	r19,r2,80ce24 <__udivdi3+0x600>
  80c960:	1825883a 	mov	r18,r3
  80c964:	a80c943a 	slli	r6,r21,16
  80c968:	0007883a 	mov	r3,zero
  80c96c:	3484b03a 	or	r2,r6,r18
  80c970:	00000306 	br	80c980 <__udivdi3+0x15c>
  80c974:	29c00e2e 	bgeu	r5,r7,80c9b0 <__udivdi3+0x18c>
  80c978:	0007883a 	mov	r3,zero
  80c97c:	0005883a 	mov	r2,zero
  80c980:	dfc00a17 	ldw	ra,40(sp)
  80c984:	df000917 	ldw	fp,36(sp)
  80c988:	ddc00817 	ldw	r23,32(sp)
  80c98c:	dd800717 	ldw	r22,28(sp)
  80c990:	dd400617 	ldw	r21,24(sp)
  80c994:	dd000517 	ldw	r20,20(sp)
  80c998:	dcc00417 	ldw	r19,16(sp)
  80c99c:	dc800317 	ldw	r18,12(sp)
  80c9a0:	dc400217 	ldw	r17,8(sp)
  80c9a4:	dc000117 	ldw	r16,4(sp)
  80c9a8:	dec00b04 	addi	sp,sp,44
  80c9ac:	f800283a 	ret
  80c9b0:	00bfffd4 	movui	r2,65535
  80c9b4:	11c05f2e 	bgeu	r2,r7,80cb34 <__udivdi3+0x310>
  80c9b8:	00804034 	movhi	r2,256
  80c9bc:	3880fc36 	bltu	r7,r2,80cdb0 <__udivdi3+0x58c>
  80c9c0:	3804d63a 	srli	r2,r7,24
  80c9c4:	01000604 	movi	r4,24
  80c9c8:	00c02074 	movhi	r3,129
  80c9cc:	10c7883a 	add	r3,r2,r3
  80c9d0:	188aab03 	ldbu	r2,10924(r3)
  80c9d4:	00c00804 	movi	r3,32
  80c9d8:	1105883a 	add	r2,r2,r4
  80c9dc:	18a3c83a 	sub	r17,r3,r2
  80c9e0:	1880901e 	bne	r3,r2,80cc24 <__udivdi3+0x400>
  80c9e4:	3c80f736 	bltu	r7,r18,80cdc4 <__udivdi3+0x5a0>
  80c9e8:	a185403a 	cmpgeu	r2,r20,r6
  80c9ec:	0007883a 	mov	r3,zero
  80c9f0:	003fe306 	br	80c980 <__udivdi3+0x15c>
  80c9f4:	3000041e 	bne	r6,zero,80ca08 <__udivdi3+0x1e4>
  80c9f8:	000b883a 	mov	r5,zero
  80c9fc:	01000044 	movi	r4,1
  80ca00:	080d4fc0 	call	80d4fc <__udivsi3>
  80ca04:	1021883a 	mov	r16,r2
  80ca08:	00bfffd4 	movui	r2,65535
  80ca0c:	14003f2e 	bgeu	r2,r16,80cb0c <__udivdi3+0x2e8>
  80ca10:	00804034 	movhi	r2,256
  80ca14:	8080f136 	bltu	r16,r2,80cddc <__udivdi3+0x5b8>
  80ca18:	8006d63a 	srli	r3,r16,24
  80ca1c:	04400604 	movi	r17,24
  80ca20:	00802074 	movhi	r2,129
  80ca24:	1885883a 	add	r2,r3,r2
  80ca28:	108aab03 	ldbu	r2,10924(r2)
  80ca2c:	00c00804 	movi	r3,32
  80ca30:	1463883a 	add	r17,r2,r17
  80ca34:	1c45c83a 	sub	r2,r3,r17
  80ca38:	1c40431e 	bne	r3,r17,80cb48 <__udivdi3+0x324>
  80ca3c:	802cd43a 	srli	r22,r16,16
  80ca40:	9423c83a 	sub	r17,r18,r16
  80ca44:	853fffcc 	andi	r20,r16,65535
  80ca48:	00c00044 	movi	r3,1
  80ca4c:	b00b883a 	mov	r5,r22
  80ca50:	8809883a 	mov	r4,r17
  80ca54:	d8c00015 	stw	r3,0(sp)
  80ca58:	080d5600 	call	80d560 <__umodsi3>
  80ca5c:	b00b883a 	mov	r5,r22
  80ca60:	8809883a 	mov	r4,r17
  80ca64:	1025883a 	mov	r18,r2
  80ca68:	080d4fc0 	call	80d4fc <__udivsi3>
  80ca6c:	1009883a 	mov	r4,r2
  80ca70:	a00b883a 	mov	r5,r20
  80ca74:	102b883a 	mov	r21,r2
  80ca78:	0802ba80 	call	802ba8 <__mulsi3>
  80ca7c:	9024943a 	slli	r18,r18,16
  80ca80:	9808d43a 	srli	r4,r19,16
  80ca84:	d8c00017 	ldw	r3,0(sp)
  80ca88:	9108b03a 	or	r4,r18,r4
  80ca8c:	2080052e 	bgeu	r4,r2,80caa4 <__udivdi3+0x280>
  80ca90:	2409883a 	add	r4,r4,r16
  80ca94:	a97fffc4 	addi	r5,r21,-1
  80ca98:	24000136 	bltu	r4,r16,80caa0 <__udivdi3+0x27c>
  80ca9c:	2080e636 	bltu	r4,r2,80ce38 <__udivdi3+0x614>
  80caa0:	282b883a 	mov	r21,r5
  80caa4:	20a3c83a 	sub	r17,r4,r2
  80caa8:	8809883a 	mov	r4,r17
  80caac:	b00b883a 	mov	r5,r22
  80cab0:	d8c00015 	stw	r3,0(sp)
  80cab4:	080d5600 	call	80d560 <__umodsi3>
  80cab8:	8809883a 	mov	r4,r17
  80cabc:	1023883a 	mov	r17,r2
  80cac0:	b00b883a 	mov	r5,r22
  80cac4:	8822943a 	slli	r17,r17,16
  80cac8:	080d4fc0 	call	80d4fc <__udivsi3>
  80cacc:	a00b883a 	mov	r5,r20
  80cad0:	1009883a 	mov	r4,r2
  80cad4:	9cffffcc 	andi	r19,r19,65535
  80cad8:	1025883a 	mov	r18,r2
  80cadc:	8ce6b03a 	or	r19,r17,r19
  80cae0:	0802ba80 	call	802ba8 <__mulsi3>
  80cae4:	d8c00017 	ldw	r3,0(sp)
  80cae8:	9880052e 	bgeu	r19,r2,80cb00 <__udivdi3+0x2dc>
  80caec:	84e7883a 	add	r19,r16,r19
  80caf0:	913fffc4 	addi	r4,r18,-1
  80caf4:	9c000136 	bltu	r19,r16,80cafc <__udivdi3+0x2d8>
  80caf8:	9880c836 	bltu	r19,r2,80ce1c <__udivdi3+0x5f8>
  80cafc:	2025883a 	mov	r18,r4
  80cb00:	a80c943a 	slli	r6,r21,16
  80cb04:	3484b03a 	or	r2,r6,r18
  80cb08:	003f9d06 	br	80c980 <__udivdi3+0x15c>
  80cb0c:	80804030 	cmpltui	r2,r16,256
  80cb10:	1000b81e 	bne	r2,zero,80cdf4 <__udivdi3+0x5d0>
  80cb14:	8006d23a 	srli	r3,r16,8
  80cb18:	04400204 	movi	r17,8
  80cb1c:	003fc006 	br	80ca20 <__udivdi3+0x1fc>
  80cb20:	30804030 	cmpltui	r2,r6,256
  80cb24:	1000a51e 	bne	r2,zero,80cdbc <__udivdi3+0x598>
  80cb28:	3006d23a 	srli	r3,r6,8
  80cb2c:	04400204 	movi	r17,8
  80cb30:	003f5506 	br	80c888 <__udivdi3+0x64>
  80cb34:	38804030 	cmpltui	r2,r7,256
  80cb38:	1000a51e 	bne	r2,zero,80cdd0 <__udivdi3+0x5ac>
  80cb3c:	3804d23a 	srli	r2,r7,8
  80cb40:	01000204 	movi	r4,8
  80cb44:	003fa006 	br	80c9c8 <__udivdi3+0x1a4>
  80cb48:	80a0983a 	sll	r16,r16,r2
  80cb4c:	946ed83a 	srl	r23,r18,r17
  80cb50:	9086983a 	sll	r3,r18,r2
  80cb54:	802cd43a 	srli	r22,r16,16
  80cb58:	a462d83a 	srl	r17,r20,r17
  80cb5c:	b809883a 	mov	r4,r23
  80cb60:	b00b883a 	mov	r5,r22
  80cb64:	88eab03a 	or	r21,r17,r3
  80cb68:	a0a6983a 	sll	r19,r20,r2
  80cb6c:	080d5600 	call	80d560 <__umodsi3>
  80cb70:	b809883a 	mov	r4,r23
  80cb74:	b00b883a 	mov	r5,r22
  80cb78:	1025883a 	mov	r18,r2
  80cb7c:	853fffcc 	andi	r20,r16,65535
  80cb80:	080d4fc0 	call	80d4fc <__udivsi3>
  80cb84:	a009883a 	mov	r4,r20
  80cb88:	100b883a 	mov	r5,r2
  80cb8c:	102f883a 	mov	r23,r2
  80cb90:	0802ba80 	call	802ba8 <__mulsi3>
  80cb94:	9024943a 	slli	r18,r18,16
  80cb98:	a808d43a 	srli	r4,r21,16
  80cb9c:	9108b03a 	or	r4,r18,r4
  80cba0:	2080062e 	bgeu	r4,r2,80cbbc <__udivdi3+0x398>
  80cba4:	2409883a 	add	r4,r4,r16
  80cba8:	b8ffffc4 	addi	r3,r23,-1
  80cbac:	24009936 	bltu	r4,r16,80ce14 <__udivdi3+0x5f0>
  80cbb0:	2080982e 	bgeu	r4,r2,80ce14 <__udivdi3+0x5f0>
  80cbb4:	bdffff84 	addi	r23,r23,-2
  80cbb8:	2409883a 	add	r4,r4,r16
  80cbbc:	20a3c83a 	sub	r17,r4,r2
  80cbc0:	8809883a 	mov	r4,r17
  80cbc4:	b00b883a 	mov	r5,r22
  80cbc8:	080d5600 	call	80d560 <__umodsi3>
  80cbcc:	1025883a 	mov	r18,r2
  80cbd0:	8809883a 	mov	r4,r17
  80cbd4:	b00b883a 	mov	r5,r22
  80cbd8:	9024943a 	slli	r18,r18,16
  80cbdc:	080d4fc0 	call	80d4fc <__udivsi3>
  80cbe0:	100b883a 	mov	r5,r2
  80cbe4:	a009883a 	mov	r4,r20
  80cbe8:	ac7fffcc 	andi	r17,r21,65535
  80cbec:	1039883a 	mov	fp,r2
  80cbf0:	9462b03a 	or	r17,r18,r17
  80cbf4:	0802ba80 	call	802ba8 <__mulsi3>
  80cbf8:	8880062e 	bgeu	r17,r2,80cc14 <__udivdi3+0x3f0>
  80cbfc:	8c23883a 	add	r17,r17,r16
  80cc00:	e0ffffc4 	addi	r3,fp,-1
  80cc04:	8c007f36 	bltu	r17,r16,80ce04 <__udivdi3+0x5e0>
  80cc08:	88807e2e 	bgeu	r17,r2,80ce04 <__udivdi3+0x5e0>
  80cc0c:	e73fff84 	addi	fp,fp,-2
  80cc10:	8c23883a 	add	r17,r17,r16
  80cc14:	b806943a 	slli	r3,r23,16
  80cc18:	88a3c83a 	sub	r17,r17,r2
  80cc1c:	1f06b03a 	or	r3,r3,fp
  80cc20:	003f8a06 	br	80ca4c <__udivdi3+0x228>
  80cc24:	30a6d83a 	srl	r19,r6,r2
  80cc28:	3c4e983a 	sll	r7,r7,r17
  80cc2c:	90a0d83a 	srl	r16,r18,r2
  80cc30:	9446983a 	sll	r3,r18,r17
  80cc34:	99e6b03a 	or	r19,r19,r7
  80cc38:	a084d83a 	srl	r2,r20,r2
  80cc3c:	9838d43a 	srli	fp,r19,16
  80cc40:	8009883a 	mov	r4,r16
  80cc44:	10eab03a 	or	r21,r2,r3
  80cc48:	e00b883a 	mov	r5,fp
  80cc4c:	346c983a 	sll	r22,r6,r17
  80cc50:	dd400015 	stw	r21,0(sp)
  80cc54:	080d5600 	call	80d560 <__umodsi3>
  80cc58:	8009883a 	mov	r4,r16
  80cc5c:	e00b883a 	mov	r5,fp
  80cc60:	102f883a 	mov	r23,r2
  80cc64:	9cbfffcc 	andi	r18,r19,65535
  80cc68:	080d4fc0 	call	80d4fc <__udivsi3>
  80cc6c:	9009883a 	mov	r4,r18
  80cc70:	100b883a 	mov	r5,r2
  80cc74:	1021883a 	mov	r16,r2
  80cc78:	0802ba80 	call	802ba8 <__mulsi3>
  80cc7c:	b82e943a 	slli	r23,r23,16
  80cc80:	a808d43a 	srli	r4,r21,16
  80cc84:	b908b03a 	or	r4,r23,r4
  80cc88:	2080062e 	bgeu	r4,r2,80cca4 <__udivdi3+0x480>
  80cc8c:	24c9883a 	add	r4,r4,r19
  80cc90:	817fffc4 	addi	r5,r16,-1
  80cc94:	24c05d36 	bltu	r4,r19,80ce0c <__udivdi3+0x5e8>
  80cc98:	20805c2e 	bgeu	r4,r2,80ce0c <__udivdi3+0x5e8>
  80cc9c:	843fff84 	addi	r16,r16,-2
  80cca0:	24c9883a 	add	r4,r4,r19
  80cca4:	20abc83a 	sub	r21,r4,r2
  80cca8:	a809883a 	mov	r4,r21
  80ccac:	e00b883a 	mov	r5,fp
  80ccb0:	080d5600 	call	80d560 <__umodsi3>
  80ccb4:	a809883a 	mov	r4,r21
  80ccb8:	e00b883a 	mov	r5,fp
  80ccbc:	102b883a 	mov	r21,r2
  80ccc0:	080d4fc0 	call	80d4fc <__udivsi3>
  80ccc4:	9009883a 	mov	r4,r18
  80ccc8:	100b883a 	mov	r5,r2
  80cccc:	102f883a 	mov	r23,r2
  80ccd0:	0802ba80 	call	802ba8 <__mulsi3>
  80ccd4:	d8c00017 	ldw	r3,0(sp)
  80ccd8:	a82a943a 	slli	r21,r21,16
  80ccdc:	100d883a 	mov	r6,r2
  80cce0:	1cbfffcc 	andi	r18,r3,65535
  80cce4:	aca4b03a 	or	r18,r21,r18
  80cce8:	9080062e 	bgeu	r18,r2,80cd04 <__udivdi3+0x4e0>
  80ccec:	94e5883a 	add	r18,r18,r19
  80ccf0:	b8bfffc4 	addi	r2,r23,-1
  80ccf4:	94c04136 	bltu	r18,r19,80cdfc <__udivdi3+0x5d8>
  80ccf8:	9180402e 	bgeu	r18,r6,80cdfc <__udivdi3+0x5d8>
  80ccfc:	bdffff84 	addi	r23,r23,-2
  80cd00:	94e5883a 	add	r18,r18,r19
  80cd04:	8004943a 	slli	r2,r16,16
  80cd08:	bd7fffcc 	andi	r21,r23,65535
  80cd0c:	b73fffcc 	andi	fp,r22,65535
  80cd10:	15e0b03a 	or	r16,r2,r23
  80cd14:	8026d43a 	srli	r19,r16,16
  80cd18:	a809883a 	mov	r4,r21
  80cd1c:	e00b883a 	mov	r5,fp
  80cd20:	91a5c83a 	sub	r18,r18,r6
  80cd24:	b02cd43a 	srli	r22,r22,16
  80cd28:	0802ba80 	call	802ba8 <__mulsi3>
  80cd2c:	9809883a 	mov	r4,r19
  80cd30:	e00b883a 	mov	r5,fp
  80cd34:	102f883a 	mov	r23,r2
  80cd38:	0802ba80 	call	802ba8 <__mulsi3>
  80cd3c:	9809883a 	mov	r4,r19
  80cd40:	b00b883a 	mov	r5,r22
  80cd44:	1027883a 	mov	r19,r2
  80cd48:	0802ba80 	call	802ba8 <__mulsi3>
  80cd4c:	a809883a 	mov	r4,r21
  80cd50:	b00b883a 	mov	r5,r22
  80cd54:	102b883a 	mov	r21,r2
  80cd58:	0802ba80 	call	802ba8 <__mulsi3>
  80cd5c:	b806d43a 	srli	r3,r23,16
  80cd60:	14c5883a 	add	r2,r2,r19
  80cd64:	1887883a 	add	r3,r3,r2
  80cd68:	1cc0022e 	bgeu	r3,r19,80cd74 <__udivdi3+0x550>
  80cd6c:	00800074 	movhi	r2,1
  80cd70:	a8ab883a 	add	r21,r21,r2
  80cd74:	1804d43a 	srli	r2,r3,16
  80cd78:	156b883a 	add	r21,r2,r21
  80cd7c:	95400936 	bltu	r18,r21,80cda4 <__udivdi3+0x580>
  80cd80:	95400326 	beq	r18,r21,80cd90 <__udivdi3+0x56c>
  80cd84:	8005883a 	mov	r2,r16
  80cd88:	0007883a 	mov	r3,zero
  80cd8c:	003efc06 	br	80c980 <__udivdi3+0x15c>
  80cd90:	1806943a 	slli	r3,r3,16
  80cd94:	a44c983a 	sll	r6,r20,r17
  80cd98:	bdffffcc 	andi	r23,r23,65535
  80cd9c:	1dc7883a 	add	r3,r3,r23
  80cda0:	30fff82e 	bgeu	r6,r3,80cd84 <__udivdi3+0x560>
  80cda4:	80bfffc4 	addi	r2,r16,-1
  80cda8:	0007883a 	mov	r3,zero
  80cdac:	003ef406 	br	80c980 <__udivdi3+0x15c>
  80cdb0:	3804d43a 	srli	r2,r7,16
  80cdb4:	01000404 	movi	r4,16
  80cdb8:	003f0306 	br	80c9c8 <__udivdi3+0x1a4>
  80cdbc:	3007883a 	mov	r3,r6
  80cdc0:	003eb106 	br	80c888 <__udivdi3+0x64>
  80cdc4:	0007883a 	mov	r3,zero
  80cdc8:	00800044 	movi	r2,1
  80cdcc:	003eec06 	br	80c980 <__udivdi3+0x15c>
  80cdd0:	3805883a 	mov	r2,r7
  80cdd4:	0009883a 	mov	r4,zero
  80cdd8:	003efb06 	br	80c9c8 <__udivdi3+0x1a4>
  80cddc:	8006d43a 	srli	r3,r16,16
  80cde0:	04400404 	movi	r17,16
  80cde4:	003f0e06 	br	80ca20 <__udivdi3+0x1fc>
  80cde8:	3006d43a 	srli	r3,r6,16
  80cdec:	04400404 	movi	r17,16
  80cdf0:	003ea506 	br	80c888 <__udivdi3+0x64>
  80cdf4:	8007883a 	mov	r3,r16
  80cdf8:	003f0906 	br	80ca20 <__udivdi3+0x1fc>
  80cdfc:	102f883a 	mov	r23,r2
  80ce00:	003fc006 	br	80cd04 <__udivdi3+0x4e0>
  80ce04:	1839883a 	mov	fp,r3
  80ce08:	003f8206 	br	80cc14 <__udivdi3+0x3f0>
  80ce0c:	2821883a 	mov	r16,r5
  80ce10:	003fa406 	br	80cca4 <__udivdi3+0x480>
  80ce14:	182f883a 	mov	r23,r3
  80ce18:	003f6806 	br	80cbbc <__udivdi3+0x398>
  80ce1c:	94bfff84 	addi	r18,r18,-2
  80ce20:	003f3706 	br	80cb00 <__udivdi3+0x2dc>
  80ce24:	94bfff84 	addi	r18,r18,-2
  80ce28:	003ece06 	br	80c964 <__udivdi3+0x140>
  80ce2c:	ad7fff84 	addi	r21,r21,-2
  80ce30:	2409883a 	add	r4,r4,r16
  80ce34:	003eb606 	br	80c910 <__udivdi3+0xec>
  80ce38:	ad7fff84 	addi	r21,r21,-2
  80ce3c:	2409883a 	add	r4,r4,r16
  80ce40:	003f1806 	br	80caa4 <__udivdi3+0x280>

0080ce44 <__umoddi3>:
  80ce44:	defff304 	addi	sp,sp,-52
  80ce48:	dc400415 	stw	r17,16(sp)
  80ce4c:	dc000315 	stw	r16,12(sp)
  80ce50:	dfc00c15 	stw	ra,48(sp)
  80ce54:	df000b15 	stw	fp,44(sp)
  80ce58:	ddc00a15 	stw	r23,40(sp)
  80ce5c:	dd800915 	stw	r22,36(sp)
  80ce60:	dd400815 	stw	r21,32(sp)
  80ce64:	dd000715 	stw	r20,28(sp)
  80ce68:	dcc00615 	stw	r19,24(sp)
  80ce6c:	dc800515 	stw	r18,20(sp)
  80ce70:	2823883a 	mov	r17,r5
  80ce74:	2021883a 	mov	r16,r4
  80ce78:	38003b1e 	bne	r7,zero,80cf68 <__umoddi3+0x124>
  80ce7c:	3825883a 	mov	r18,r7
  80ce80:	3029883a 	mov	r20,r6
  80ce84:	2027883a 	mov	r19,r4
  80ce88:	29805b2e 	bgeu	r5,r6,80cff8 <__umoddi3+0x1b4>
  80ce8c:	00bfffd4 	movui	r2,65535
  80ce90:	282d883a 	mov	r22,r5
  80ce94:	11809a2e 	bgeu	r2,r6,80d100 <__umoddi3+0x2bc>
  80ce98:	00804034 	movhi	r2,256
  80ce9c:	30814436 	bltu	r6,r2,80d3b0 <__umoddi3+0x56c>
  80cea0:	3006d63a 	srli	r3,r6,24
  80cea4:	04800604 	movi	r18,24
  80cea8:	00802074 	movhi	r2,129
  80ceac:	1885883a 	add	r2,r3,r2
  80ceb0:	108aab03 	ldbu	r2,10924(r2)
  80ceb4:	00c00804 	movi	r3,32
  80ceb8:	1485883a 	add	r2,r2,r18
  80cebc:	18a5c83a 	sub	r18,r3,r2
  80cec0:	18800526 	beq	r3,r2,80ced8 <__umoddi3+0x94>
  80cec4:	8ca2983a 	sll	r17,r17,r18
  80cec8:	8084d83a 	srl	r2,r16,r2
  80cecc:	34a8983a 	sll	r20,r6,r18
  80ced0:	84a6983a 	sll	r19,r16,r18
  80ced4:	146cb03a 	or	r22,r2,r17
  80ced8:	a02ed43a 	srli	r23,r20,16
  80cedc:	b009883a 	mov	r4,r22
  80cee0:	a57fffcc 	andi	r21,r20,65535
  80cee4:	b80b883a 	mov	r5,r23
  80cee8:	080d5600 	call	80d560 <__umodsi3>
  80ceec:	b80b883a 	mov	r5,r23
  80cef0:	b009883a 	mov	r4,r22
  80cef4:	1023883a 	mov	r17,r2
  80cef8:	080d4fc0 	call	80d4fc <__udivsi3>
  80cefc:	a809883a 	mov	r4,r21
  80cf00:	100b883a 	mov	r5,r2
  80cf04:	0802ba80 	call	802ba8 <__mulsi3>
  80cf08:	8822943a 	slli	r17,r17,16
  80cf0c:	9808d43a 	srli	r4,r19,16
  80cf10:	8908b03a 	or	r4,r17,r4
  80cf14:	2080042e 	bgeu	r4,r2,80cf28 <__umoddi3+0xe4>
  80cf18:	2509883a 	add	r4,r4,r20
  80cf1c:	25000236 	bltu	r4,r20,80cf28 <__umoddi3+0xe4>
  80cf20:	2080012e 	bgeu	r4,r2,80cf28 <__umoddi3+0xe4>
  80cf24:	2509883a 	add	r4,r4,r20
  80cf28:	20a1c83a 	sub	r16,r4,r2
  80cf2c:	b80b883a 	mov	r5,r23
  80cf30:	8009883a 	mov	r4,r16
  80cf34:	080d5600 	call	80d560 <__umodsi3>
  80cf38:	b80b883a 	mov	r5,r23
  80cf3c:	8009883a 	mov	r4,r16
  80cf40:	1023883a 	mov	r17,r2
  80cf44:	080d4fc0 	call	80d4fc <__udivsi3>
  80cf48:	8822943a 	slli	r17,r17,16
  80cf4c:	100b883a 	mov	r5,r2
  80cf50:	a809883a 	mov	r4,r21
  80cf54:	0802ba80 	call	802ba8 <__mulsi3>
  80cf58:	98ffffcc 	andi	r3,r19,65535
  80cf5c:	88c6b03a 	or	r3,r17,r3
  80cf60:	18805e2e 	bgeu	r3,r2,80d0dc <__umoddi3+0x298>
  80cf64:	00005906 	br	80d0cc <__umoddi3+0x288>
  80cf68:	2005883a 	mov	r2,r4
  80cf6c:	29c00d2e 	bgeu	r5,r7,80cfa4 <__umoddi3+0x160>
  80cf70:	2807883a 	mov	r3,r5
  80cf74:	dfc00c17 	ldw	ra,48(sp)
  80cf78:	df000b17 	ldw	fp,44(sp)
  80cf7c:	ddc00a17 	ldw	r23,40(sp)
  80cf80:	dd800917 	ldw	r22,36(sp)
  80cf84:	dd400817 	ldw	r21,32(sp)
  80cf88:	dd000717 	ldw	r20,28(sp)
  80cf8c:	dcc00617 	ldw	r19,24(sp)
  80cf90:	dc800517 	ldw	r18,20(sp)
  80cf94:	dc400417 	ldw	r17,16(sp)
  80cf98:	dc000317 	ldw	r16,12(sp)
  80cf9c:	dec00d04 	addi	sp,sp,52
  80cfa0:	f800283a 	ret
  80cfa4:	013fffd4 	movui	r4,65535
  80cfa8:	2807883a 	mov	r3,r5
  80cfac:	21c0592e 	bgeu	r4,r7,80d114 <__umoddi3+0x2d0>
  80cfb0:	01004034 	movhi	r4,256
  80cfb4:	39010336 	bltu	r7,r4,80d3c4 <__umoddi3+0x580>
  80cfb8:	3808d63a 	srli	r4,r7,24
  80cfbc:	02000604 	movi	r8,24
  80cfc0:	01402074 	movhi	r5,129
  80cfc4:	214b883a 	add	r5,r4,r5
  80cfc8:	2d0aab03 	ldbu	r20,10924(r5)
  80cfcc:	01000804 	movi	r4,32
  80cfd0:	a229883a 	add	r20,r20,r8
  80cfd4:	252bc83a 	sub	r21,r4,r20
  80cfd8:	2500531e 	bne	r4,r20,80d128 <__umoddi3+0x2e4>
  80cfdc:	3c400136 	bltu	r7,r17,80cfe4 <__umoddi3+0x1a0>
  80cfe0:	81bfe436 	bltu	r16,r6,80cf74 <__umoddi3+0x130>
  80cfe4:	8185c83a 	sub	r2,r16,r6
  80cfe8:	89cfc83a 	sub	r7,r17,r7
  80cfec:	8087803a 	cmpltu	r3,r16,r2
  80cff0:	38c7c83a 	sub	r3,r7,r3
  80cff4:	003fdf06 	br	80cf74 <__umoddi3+0x130>
  80cff8:	3000041e 	bne	r6,zero,80d00c <__umoddi3+0x1c8>
  80cffc:	000b883a 	mov	r5,zero
  80d000:	01000044 	movi	r4,1
  80d004:	080d4fc0 	call	80d4fc <__udivsi3>
  80d008:	1029883a 	mov	r20,r2
  80d00c:	00bfffd4 	movui	r2,65535
  80d010:	1500362e 	bgeu	r2,r20,80d0ec <__umoddi3+0x2a8>
  80d014:	00804034 	movhi	r2,256
  80d018:	a080ed36 	bltu	r20,r2,80d3d0 <__umoddi3+0x58c>
  80d01c:	a006d63a 	srli	r3,r20,24
  80d020:	04800604 	movi	r18,24
  80d024:	00802074 	movhi	r2,129
  80d028:	1885883a 	add	r2,r3,r2
  80d02c:	158aab03 	ldbu	r22,10924(r2)
  80d030:	00800804 	movi	r2,32
  80d034:	b4ad883a 	add	r22,r22,r18
  80d038:	15a5c83a 	sub	r18,r2,r22
  80d03c:	1580a51e 	bne	r2,r22,80d2d4 <__umoddi3+0x490>
  80d040:	a02ed43a 	srli	r23,r20,16
  80d044:	8d23c83a 	sub	r17,r17,r20
  80d048:	a57fffcc 	andi	r21,r20,65535
  80d04c:	8809883a 	mov	r4,r17
  80d050:	b80b883a 	mov	r5,r23
  80d054:	080d5600 	call	80d560 <__umodsi3>
  80d058:	8809883a 	mov	r4,r17
  80d05c:	b80b883a 	mov	r5,r23
  80d060:	1023883a 	mov	r17,r2
  80d064:	080d4fc0 	call	80d4fc <__udivsi3>
  80d068:	1009883a 	mov	r4,r2
  80d06c:	a80b883a 	mov	r5,r21
  80d070:	0802ba80 	call	802ba8 <__mulsi3>
  80d074:	8822943a 	slli	r17,r17,16
  80d078:	9808d43a 	srli	r4,r19,16
  80d07c:	8908b03a 	or	r4,r17,r4
  80d080:	2080032e 	bgeu	r4,r2,80d090 <__umoddi3+0x24c>
  80d084:	2509883a 	add	r4,r4,r20
  80d088:	25000136 	bltu	r4,r20,80d090 <__umoddi3+0x24c>
  80d08c:	2080dc36 	bltu	r4,r2,80d400 <__umoddi3+0x5bc>
  80d090:	20a1c83a 	sub	r16,r4,r2
  80d094:	b80b883a 	mov	r5,r23
  80d098:	8009883a 	mov	r4,r16
  80d09c:	080d5600 	call	80d560 <__umodsi3>
  80d0a0:	b80b883a 	mov	r5,r23
  80d0a4:	8009883a 	mov	r4,r16
  80d0a8:	1023883a 	mov	r17,r2
  80d0ac:	8822943a 	slli	r17,r17,16
  80d0b0:	080d4fc0 	call	80d4fc <__udivsi3>
  80d0b4:	a80b883a 	mov	r5,r21
  80d0b8:	1009883a 	mov	r4,r2
  80d0bc:	0802ba80 	call	802ba8 <__mulsi3>
  80d0c0:	9cffffcc 	andi	r19,r19,65535
  80d0c4:	8cc6b03a 	or	r3,r17,r19
  80d0c8:	1880042e 	bgeu	r3,r2,80d0dc <__umoddi3+0x298>
  80d0cc:	1d07883a 	add	r3,r3,r20
  80d0d0:	1d000236 	bltu	r3,r20,80d0dc <__umoddi3+0x298>
  80d0d4:	1880012e 	bgeu	r3,r2,80d0dc <__umoddi3+0x298>
  80d0d8:	1d07883a 	add	r3,r3,r20
  80d0dc:	1885c83a 	sub	r2,r3,r2
  80d0e0:	1484d83a 	srl	r2,r2,r18
  80d0e4:	0007883a 	mov	r3,zero
  80d0e8:	003fa206 	br	80cf74 <__umoddi3+0x130>
  80d0ec:	a0804030 	cmpltui	r2,r20,256
  80d0f0:	1000ba1e 	bne	r2,zero,80d3dc <__umoddi3+0x598>
  80d0f4:	a006d23a 	srli	r3,r20,8
  80d0f8:	04800204 	movi	r18,8
  80d0fc:	003fc906 	br	80d024 <__umoddi3+0x1e0>
  80d100:	30804030 	cmpltui	r2,r6,256
  80d104:	1000ad1e 	bne	r2,zero,80d3bc <__umoddi3+0x578>
  80d108:	3006d23a 	srli	r3,r6,8
  80d10c:	04800204 	movi	r18,8
  80d110:	003f6506 	br	80cea8 <__umoddi3+0x64>
  80d114:	39004030 	cmpltui	r4,r7,256
  80d118:	2000b21e 	bne	r4,zero,80d3e4 <__umoddi3+0x5a0>
  80d11c:	3808d23a 	srli	r4,r7,8
  80d120:	02000204 	movi	r8,8
  80d124:	003fa606 	br	80cfc0 <__umoddi3+0x17c>
  80d128:	3d4e983a 	sll	r7,r7,r21
  80d12c:	3508d83a 	srl	r4,r6,r20
  80d130:	8d2cd83a 	srl	r22,r17,r20
  80d134:	8504d83a 	srl	r2,r16,r20
  80d138:	21e4b03a 	or	r18,r4,r7
  80d13c:	8d62983a 	sll	r17,r17,r21
  80d140:	9026d43a 	srli	r19,r18,16
  80d144:	354c983a 	sll	r6,r6,r21
  80d148:	1444b03a 	or	r2,r2,r17
  80d14c:	b009883a 	mov	r4,r22
  80d150:	980b883a 	mov	r5,r19
  80d154:	d9800115 	stw	r6,4(sp)
  80d158:	d8800015 	stw	r2,0(sp)
  80d15c:	080d5600 	call	80d560 <__umodsi3>
  80d160:	980b883a 	mov	r5,r19
  80d164:	b009883a 	mov	r4,r22
  80d168:	102f883a 	mov	r23,r2
  80d16c:	947fffcc 	andi	r17,r18,65535
  80d170:	080d4fc0 	call	80d4fc <__udivsi3>
  80d174:	8809883a 	mov	r4,r17
  80d178:	100b883a 	mov	r5,r2
  80d17c:	1039883a 	mov	fp,r2
  80d180:	0802ba80 	call	802ba8 <__mulsi3>
  80d184:	d8c00017 	ldw	r3,0(sp)
  80d188:	b82e943a 	slli	r23,r23,16
  80d18c:	8560983a 	sll	r16,r16,r21
  80d190:	1808d43a 	srli	r4,r3,16
  80d194:	b908b03a 	or	r4,r23,r4
  80d198:	2080062e 	bgeu	r4,r2,80d1b4 <__umoddi3+0x370>
  80d19c:	2489883a 	add	r4,r4,r18
  80d1a0:	e17fffc4 	addi	r5,fp,-1
  80d1a4:	24809436 	bltu	r4,r18,80d3f8 <__umoddi3+0x5b4>
  80d1a8:	2080932e 	bgeu	r4,r2,80d3f8 <__umoddi3+0x5b4>
  80d1ac:	e73fff84 	addi	fp,fp,-2
  80d1b0:	2489883a 	add	r4,r4,r18
  80d1b4:	20adc83a 	sub	r22,r4,r2
  80d1b8:	980b883a 	mov	r5,r19
  80d1bc:	b009883a 	mov	r4,r22
  80d1c0:	080d5600 	call	80d560 <__umodsi3>
  80d1c4:	980b883a 	mov	r5,r19
  80d1c8:	b009883a 	mov	r4,r22
  80d1cc:	102f883a 	mov	r23,r2
  80d1d0:	080d4fc0 	call	80d4fc <__udivsi3>
  80d1d4:	100b883a 	mov	r5,r2
  80d1d8:	8809883a 	mov	r4,r17
  80d1dc:	d8800215 	stw	r2,8(sp)
  80d1e0:	0802ba80 	call	802ba8 <__mulsi3>
  80d1e4:	d8c00017 	ldw	r3,0(sp)
  80d1e8:	b82e943a 	slli	r23,r23,16
  80d1ec:	d9400217 	ldw	r5,8(sp)
  80d1f0:	1c7fffcc 	andi	r17,r3,65535
  80d1f4:	bc62b03a 	or	r17,r23,r17
  80d1f8:	8880062e 	bgeu	r17,r2,80d214 <__umoddi3+0x3d0>
  80d1fc:	8ca3883a 	add	r17,r17,r18
  80d200:	28ffffc4 	addi	r3,r5,-1
  80d204:	8c807a36 	bltu	r17,r18,80d3f0 <__umoddi3+0x5ac>
  80d208:	8880792e 	bgeu	r17,r2,80d3f0 <__umoddi3+0x5ac>
  80d20c:	297fff84 	addi	r5,r5,-2
  80d210:	8ca3883a 	add	r17,r17,r18
  80d214:	e02c943a 	slli	r22,fp,16
  80d218:	d9c00117 	ldw	r7,4(sp)
  80d21c:	29bfffcc 	andi	r6,r5,65535
  80d220:	b16cb03a 	or	r22,r22,r5
  80d224:	38ffffcc 	andi	r3,r7,65535
  80d228:	b02cd43a 	srli	r22,r22,16
  80d22c:	180b883a 	mov	r5,r3
  80d230:	3009883a 	mov	r4,r6
  80d234:	3838d43a 	srli	fp,r7,16
  80d238:	182f883a 	mov	r23,r3
  80d23c:	d9800015 	stw	r6,0(sp)
  80d240:	88a3c83a 	sub	r17,r17,r2
  80d244:	0802ba80 	call	802ba8 <__mulsi3>
  80d248:	b80b883a 	mov	r5,r23
  80d24c:	b009883a 	mov	r4,r22
  80d250:	102f883a 	mov	r23,r2
  80d254:	0802ba80 	call	802ba8 <__mulsi3>
  80d258:	e00b883a 	mov	r5,fp
  80d25c:	b009883a 	mov	r4,r22
  80d260:	102d883a 	mov	r22,r2
  80d264:	0802ba80 	call	802ba8 <__mulsi3>
  80d268:	d9800017 	ldw	r6,0(sp)
  80d26c:	e00b883a 	mov	r5,fp
  80d270:	1039883a 	mov	fp,r2
  80d274:	3009883a 	mov	r4,r6
  80d278:	0802ba80 	call	802ba8 <__mulsi3>
  80d27c:	b808d43a 	srli	r4,r23,16
  80d280:	1585883a 	add	r2,r2,r22
  80d284:	2089883a 	add	r4,r4,r2
  80d288:	2580022e 	bgeu	r4,r22,80d294 <__umoddi3+0x450>
  80d28c:	00800074 	movhi	r2,1
  80d290:	e0b9883a 	add	fp,fp,r2
  80d294:	2006d43a 	srli	r3,r4,16
  80d298:	2008943a 	slli	r4,r4,16
  80d29c:	bdffffcc 	andi	r23,r23,65535
  80d2a0:	1f07883a 	add	r3,r3,fp
  80d2a4:	25c9883a 	add	r4,r4,r23
  80d2a8:	88c03a36 	bltu	r17,r3,80d394 <__umoddi3+0x550>
  80d2ac:	88c03826 	beq	r17,r3,80d390 <__umoddi3+0x54c>
  80d2b0:	8109c83a 	sub	r4,r16,r4
  80d2b4:	8121803a 	cmpltu	r16,r16,r4
  80d2b8:	88c7c83a 	sub	r3,r17,r3
  80d2bc:	1c07c83a 	sub	r3,r3,r16
  80d2c0:	1d04983a 	sll	r2,r3,r20
  80d2c4:	2548d83a 	srl	r4,r4,r21
  80d2c8:	1d46d83a 	srl	r3,r3,r21
  80d2cc:	1104b03a 	or	r2,r2,r4
  80d2d0:	003f2806 	br	80cf74 <__umoddi3+0x130>
  80d2d4:	a4a8983a 	sll	r20,r20,r18
  80d2d8:	8da6d83a 	srl	r19,r17,r22
  80d2dc:	8ca2983a 	sll	r17,r17,r18
  80d2e0:	a02ed43a 	srli	r23,r20,16
  80d2e4:	9809883a 	mov	r4,r19
  80d2e8:	85acd83a 	srl	r22,r16,r22
  80d2ec:	b80b883a 	mov	r5,r23
  80d2f0:	080d5600 	call	80d560 <__umodsi3>
  80d2f4:	9809883a 	mov	r4,r19
  80d2f8:	b80b883a 	mov	r5,r23
  80d2fc:	b46cb03a 	or	r22,r22,r17
  80d300:	a57fffcc 	andi	r21,r20,65535
  80d304:	1023883a 	mov	r17,r2
  80d308:	080d4fc0 	call	80d4fc <__udivsi3>
  80d30c:	a809883a 	mov	r4,r21
  80d310:	100b883a 	mov	r5,r2
  80d314:	0802ba80 	call	802ba8 <__mulsi3>
  80d318:	8822943a 	slli	r17,r17,16
  80d31c:	b008d43a 	srli	r4,r22,16
  80d320:	84a6983a 	sll	r19,r16,r18
  80d324:	8908b03a 	or	r4,r17,r4
  80d328:	2080042e 	bgeu	r4,r2,80d33c <__umoddi3+0x4f8>
  80d32c:	2509883a 	add	r4,r4,r20
  80d330:	25000236 	bltu	r4,r20,80d33c <__umoddi3+0x4f8>
  80d334:	2080012e 	bgeu	r4,r2,80d33c <__umoddi3+0x4f8>
  80d338:	2509883a 	add	r4,r4,r20
  80d33c:	20a1c83a 	sub	r16,r4,r2
  80d340:	8009883a 	mov	r4,r16
  80d344:	b80b883a 	mov	r5,r23
  80d348:	080d5600 	call	80d560 <__umodsi3>
  80d34c:	8009883a 	mov	r4,r16
  80d350:	1021883a 	mov	r16,r2
  80d354:	b80b883a 	mov	r5,r23
  80d358:	8020943a 	slli	r16,r16,16
  80d35c:	080d4fc0 	call	80d4fc <__udivsi3>
  80d360:	100b883a 	mov	r5,r2
  80d364:	a809883a 	mov	r4,r21
  80d368:	b47fffcc 	andi	r17,r22,65535
  80d36c:	0802ba80 	call	802ba8 <__mulsi3>
  80d370:	8462b03a 	or	r17,r16,r17
  80d374:	8880042e 	bgeu	r17,r2,80d388 <__umoddi3+0x544>
  80d378:	8d23883a 	add	r17,r17,r20
  80d37c:	8d000236 	bltu	r17,r20,80d388 <__umoddi3+0x544>
  80d380:	8880012e 	bgeu	r17,r2,80d388 <__umoddi3+0x544>
  80d384:	8d23883a 	add	r17,r17,r20
  80d388:	88a3c83a 	sub	r17,r17,r2
  80d38c:	003f2f06 	br	80d04c <__umoddi3+0x208>
  80d390:	813fc72e 	bgeu	r16,r4,80d2b0 <__umoddi3+0x46c>
  80d394:	d8800117 	ldw	r2,4(sp)
  80d398:	20a7c83a 	sub	r19,r4,r2
  80d39c:	24c9803a 	cmpltu	r4,r4,r19
  80d3a0:	2489883a 	add	r4,r4,r18
  80d3a4:	1907c83a 	sub	r3,r3,r4
  80d3a8:	9809883a 	mov	r4,r19
  80d3ac:	003fc006 	br	80d2b0 <__umoddi3+0x46c>
  80d3b0:	3006d43a 	srli	r3,r6,16
  80d3b4:	04800404 	movi	r18,16
  80d3b8:	003ebb06 	br	80cea8 <__umoddi3+0x64>
  80d3bc:	3007883a 	mov	r3,r6
  80d3c0:	003eb906 	br	80cea8 <__umoddi3+0x64>
  80d3c4:	3808d43a 	srli	r4,r7,16
  80d3c8:	02000404 	movi	r8,16
  80d3cc:	003efc06 	br	80cfc0 <__umoddi3+0x17c>
  80d3d0:	a006d43a 	srli	r3,r20,16
  80d3d4:	04800404 	movi	r18,16
  80d3d8:	003f1206 	br	80d024 <__umoddi3+0x1e0>
  80d3dc:	a007883a 	mov	r3,r20
  80d3e0:	003f1006 	br	80d024 <__umoddi3+0x1e0>
  80d3e4:	3809883a 	mov	r4,r7
  80d3e8:	0011883a 	mov	r8,zero
  80d3ec:	003ef406 	br	80cfc0 <__umoddi3+0x17c>
  80d3f0:	180b883a 	mov	r5,r3
  80d3f4:	003f8706 	br	80d214 <__umoddi3+0x3d0>
  80d3f8:	2839883a 	mov	fp,r5
  80d3fc:	003f6d06 	br	80d1b4 <__umoddi3+0x370>
  80d400:	2509883a 	add	r4,r4,r20
  80d404:	003f2206 	br	80d090 <__umoddi3+0x24c>

0080d408 <__divsi3>:
  80d408:	20001a16 	blt	r4,zero,80d474 <__divsi3+0x6c>
  80d40c:	000f883a 	mov	r7,zero
  80d410:	2800020e 	bge	r5,zero,80d41c <__divsi3+0x14>
  80d414:	014bc83a 	sub	r5,zero,r5
  80d418:	39c0005c 	xori	r7,r7,1
  80d41c:	200d883a 	mov	r6,r4
  80d420:	00c00044 	movi	r3,1
  80d424:	2900092e 	bgeu	r5,r4,80d44c <__divsi3+0x44>
  80d428:	00800804 	movi	r2,32
  80d42c:	00c00044 	movi	r3,1
  80d430:	00000106 	br	80d438 <__divsi3+0x30>
  80d434:	10001226 	beq	r2,zero,80d480 <__divsi3+0x78>
  80d438:	294b883a 	add	r5,r5,r5
  80d43c:	10bfffc4 	addi	r2,r2,-1
  80d440:	18c7883a 	add	r3,r3,r3
  80d444:	293ffb36 	bltu	r5,r4,80d434 <__divsi3+0x2c>
  80d448:	18000d26 	beq	r3,zero,80d480 <__divsi3+0x78>
  80d44c:	0005883a 	mov	r2,zero
  80d450:	31400236 	bltu	r6,r5,80d45c <__divsi3+0x54>
  80d454:	314dc83a 	sub	r6,r6,r5
  80d458:	10c4b03a 	or	r2,r2,r3
  80d45c:	1806d07a 	srli	r3,r3,1
  80d460:	280ad07a 	srli	r5,r5,1
  80d464:	183ffa1e 	bne	r3,zero,80d450 <__divsi3+0x48>
  80d468:	38000126 	beq	r7,zero,80d470 <__divsi3+0x68>
  80d46c:	0085c83a 	sub	r2,zero,r2
  80d470:	f800283a 	ret
  80d474:	0109c83a 	sub	r4,zero,r4
  80d478:	01c00044 	movi	r7,1
  80d47c:	003fe406 	br	80d410 <__divsi3+0x8>
  80d480:	0005883a 	mov	r2,zero
  80d484:	003ff806 	br	80d468 <__divsi3+0x60>

0080d488 <__modsi3>:
  80d488:	20001916 	blt	r4,zero,80d4f0 <__modsi3+0x68>
  80d48c:	000f883a 	mov	r7,zero
  80d490:	2005883a 	mov	r2,r4
  80d494:	2800010e 	bge	r5,zero,80d49c <__modsi3+0x14>
  80d498:	014bc83a 	sub	r5,zero,r5
  80d49c:	00c00044 	movi	r3,1
  80d4a0:	2900092e 	bgeu	r5,r4,80d4c8 <__modsi3+0x40>
  80d4a4:	01800804 	movi	r6,32
  80d4a8:	00c00044 	movi	r3,1
  80d4ac:	00000106 	br	80d4b4 <__modsi3+0x2c>
  80d4b0:	30000d26 	beq	r6,zero,80d4e8 <__modsi3+0x60>
  80d4b4:	294b883a 	add	r5,r5,r5
  80d4b8:	31bfffc4 	addi	r6,r6,-1
  80d4bc:	18c7883a 	add	r3,r3,r3
  80d4c0:	293ffb36 	bltu	r5,r4,80d4b0 <__modsi3+0x28>
  80d4c4:	18000826 	beq	r3,zero,80d4e8 <__modsi3+0x60>
  80d4c8:	1806d07a 	srli	r3,r3,1
  80d4cc:	11400136 	bltu	r2,r5,80d4d4 <__modsi3+0x4c>
  80d4d0:	1145c83a 	sub	r2,r2,r5
  80d4d4:	280ad07a 	srli	r5,r5,1
  80d4d8:	183ffb1e 	bne	r3,zero,80d4c8 <__modsi3+0x40>
  80d4dc:	38000126 	beq	r7,zero,80d4e4 <__modsi3+0x5c>
  80d4e0:	0085c83a 	sub	r2,zero,r2
  80d4e4:	f800283a 	ret
  80d4e8:	2005883a 	mov	r2,r4
  80d4ec:	003ffb06 	br	80d4dc <__modsi3+0x54>
  80d4f0:	0109c83a 	sub	r4,zero,r4
  80d4f4:	01c00044 	movi	r7,1
  80d4f8:	003fe506 	br	80d490 <__modsi3+0x8>

0080d4fc <__udivsi3>:
  80d4fc:	200d883a 	mov	r6,r4
  80d500:	2900152e 	bgeu	r5,r4,80d558 <__udivsi3+0x5c>
  80d504:	28001416 	blt	r5,zero,80d558 <__udivsi3+0x5c>
  80d508:	00800804 	movi	r2,32
  80d50c:	00c00044 	movi	r3,1
  80d510:	00000206 	br	80d51c <__udivsi3+0x20>
  80d514:	10000e26 	beq	r2,zero,80d550 <__udivsi3+0x54>
  80d518:	28000516 	blt	r5,zero,80d530 <__udivsi3+0x34>
  80d51c:	294b883a 	add	r5,r5,r5
  80d520:	10bfffc4 	addi	r2,r2,-1
  80d524:	18c7883a 	add	r3,r3,r3
  80d528:	293ffa36 	bltu	r5,r4,80d514 <__udivsi3+0x18>
  80d52c:	18000826 	beq	r3,zero,80d550 <__udivsi3+0x54>
  80d530:	0005883a 	mov	r2,zero
  80d534:	31400236 	bltu	r6,r5,80d540 <__udivsi3+0x44>
  80d538:	314dc83a 	sub	r6,r6,r5
  80d53c:	10c4b03a 	or	r2,r2,r3
  80d540:	1806d07a 	srli	r3,r3,1
  80d544:	280ad07a 	srli	r5,r5,1
  80d548:	183ffa1e 	bne	r3,zero,80d534 <__udivsi3+0x38>
  80d54c:	f800283a 	ret
  80d550:	0005883a 	mov	r2,zero
  80d554:	f800283a 	ret
  80d558:	00c00044 	movi	r3,1
  80d55c:	003ff406 	br	80d530 <__udivsi3+0x34>

0080d560 <__umodsi3>:
  80d560:	2005883a 	mov	r2,r4
  80d564:	2900132e 	bgeu	r5,r4,80d5b4 <__umodsi3+0x54>
  80d568:	28001216 	blt	r5,zero,80d5b4 <__umodsi3+0x54>
  80d56c:	01800804 	movi	r6,32
  80d570:	00c00044 	movi	r3,1
  80d574:	00000206 	br	80d580 <__umodsi3+0x20>
  80d578:	30000c26 	beq	r6,zero,80d5ac <__umodsi3+0x4c>
  80d57c:	28000516 	blt	r5,zero,80d594 <__umodsi3+0x34>
  80d580:	294b883a 	add	r5,r5,r5
  80d584:	31bfffc4 	addi	r6,r6,-1
  80d588:	18c7883a 	add	r3,r3,r3
  80d58c:	293ffa36 	bltu	r5,r4,80d578 <__umodsi3+0x18>
  80d590:	18000626 	beq	r3,zero,80d5ac <__umodsi3+0x4c>
  80d594:	1806d07a 	srli	r3,r3,1
  80d598:	11400136 	bltu	r2,r5,80d5a0 <__umodsi3+0x40>
  80d59c:	1145c83a 	sub	r2,r2,r5
  80d5a0:	280ad07a 	srli	r5,r5,1
  80d5a4:	183ffb1e 	bne	r3,zero,80d594 <__umodsi3+0x34>
  80d5a8:	f800283a 	ret
  80d5ac:	2005883a 	mov	r2,r4
  80d5b0:	f800283a 	ret
  80d5b4:	00c00044 	movi	r3,1
  80d5b8:	003ff606 	br	80d594 <__umodsi3+0x34>

0080d5bc <__adddf3>:
  80d5bc:	02000434 	movhi	r8,16
  80d5c0:	423fffc4 	addi	r8,r8,-1
  80d5c4:	2806d53a 	srli	r3,r5,20
  80d5c8:	3804d53a 	srli	r2,r7,20
  80d5cc:	2a14703a 	and	r10,r5,r8
  80d5d0:	3a12703a 	and	r9,r7,r8
  80d5d4:	280ad7fa 	srli	r5,r5,31
  80d5d8:	501490fa 	slli	r10,r10,3
  80d5dc:	2018d77a 	srli	r12,r4,29
  80d5e0:	481290fa 	slli	r9,r9,3
  80d5e4:	3016d77a 	srli	r11,r6,29
  80d5e8:	380ed7fa 	srli	r7,r7,31
  80d5ec:	defffb04 	addi	sp,sp,-20
  80d5f0:	dc800215 	stw	r18,8(sp)
  80d5f4:	dc000015 	stw	r16,0(sp)
  80d5f8:	1c81ffcc 	andi	r18,r3,2047
  80d5fc:	1081ffcc 	andi	r2,r2,2047
  80d600:	dfc00415 	stw	ra,16(sp)
  80d604:	dcc00315 	stw	r19,12(sp)
  80d608:	dc400115 	stw	r17,4(sp)
  80d60c:	201c90fa 	slli	r14,r4,3
  80d610:	301a90fa 	slli	r13,r6,3
  80d614:	2821883a 	mov	r16,r5
  80d618:	6294b03a 	or	r10,r12,r10
  80d61c:	5a52b03a 	or	r9,r11,r9
  80d620:	9087c83a 	sub	r3,r18,r2
  80d624:	29c06126 	beq	r5,r7,80d7ac <__adddf3+0x1f0>
  80d628:	00c0550e 	bge	zero,r3,80d780 <__adddf3+0x1c4>
  80d62c:	10007326 	beq	r2,zero,80d7fc <__adddf3+0x240>
  80d630:	9081ffd8 	cmpnei	r2,r18,2047
  80d634:	1000bd26 	beq	r2,zero,80d92c <__adddf3+0x370>
  80d638:	4a402034 	orhi	r9,r9,128
  80d63c:	18800e48 	cmpgei	r2,r3,57
  80d640:	1000ef1e 	bne	r2,zero,80da00 <__adddf3+0x444>
  80d644:	18800808 	cmpgei	r2,r3,32
  80d648:	1001321e 	bne	r2,zero,80db14 <__adddf3+0x558>
  80d64c:	00800804 	movi	r2,32
  80d650:	10c5c83a 	sub	r2,r2,r3
  80d654:	68c8d83a 	srl	r4,r13,r3
  80d658:	48a2983a 	sll	r17,r9,r2
  80d65c:	689a983a 	sll	r13,r13,r2
  80d660:	48c6d83a 	srl	r3,r9,r3
  80d664:	8922b03a 	or	r17,r17,r4
  80d668:	681ac03a 	cmpne	r13,r13,zero
  80d66c:	8b62b03a 	or	r17,r17,r13
  80d670:	50d5c83a 	sub	r10,r10,r3
  80d674:	7463c83a 	sub	r17,r14,r17
  80d678:	7451803a 	cmpltu	r8,r14,r17
  80d67c:	5211c83a 	sub	r8,r10,r8
  80d680:	4080202c 	andhi	r2,r8,128
  80d684:	10008d26 	beq	r2,zero,80d8bc <__adddf3+0x300>
  80d688:	02402034 	movhi	r9,128
  80d68c:	4a7fffc4 	addi	r9,r9,-1
  80d690:	4266703a 	and	r19,r8,r9
  80d694:	9800b326 	beq	r19,zero,80d964 <__adddf3+0x3a8>
  80d698:	9809883a 	mov	r4,r19
  80d69c:	0802b540 	call	802b54 <__clzsi2>
  80d6a0:	10fffe04 	addi	r3,r2,-8
  80d6a4:	02000804 	movi	r8,32
  80d6a8:	40d1c83a 	sub	r8,r8,r3
  80d6ac:	8a10d83a 	srl	r8,r17,r8
  80d6b0:	98d2983a 	sll	r9,r19,r3
  80d6b4:	88e2983a 	sll	r17,r17,r3
  80d6b8:	4250b03a 	or	r8,r8,r9
  80d6bc:	1c80b216 	blt	r3,r18,80d988 <__adddf3+0x3cc>
  80d6c0:	1c87c83a 	sub	r3,r3,r18
  80d6c4:	19000044 	addi	r4,r3,1
  80d6c8:	20800808 	cmpgei	r2,r4,32
  80d6cc:	10006f1e 	bne	r2,zero,80d88c <__adddf3+0x2d0>
  80d6d0:	00800804 	movi	r2,32
  80d6d4:	1105c83a 	sub	r2,r2,r4
  80d6d8:	8906d83a 	srl	r3,r17,r4
  80d6dc:	88a2983a 	sll	r17,r17,r2
  80d6e0:	4084983a 	sll	r2,r8,r2
  80d6e4:	4110d83a 	srl	r8,r8,r4
  80d6e8:	8822c03a 	cmpne	r17,r17,zero
  80d6ec:	10c4b03a 	or	r2,r2,r3
  80d6f0:	1462b03a 	or	r17,r2,r17
  80d6f4:	0025883a 	mov	r18,zero
  80d6f8:	888001cc 	andi	r2,r17,7
  80d6fc:	10000726 	beq	r2,zero,80d71c <__adddf3+0x160>
  80d700:	888003cc 	andi	r2,r17,15
  80d704:	10800120 	cmpeqi	r2,r2,4
  80d708:	1000041e 	bne	r2,zero,80d71c <__adddf3+0x160>
  80d70c:	88c00104 	addi	r3,r17,4
  80d710:	1c63803a 	cmpltu	r17,r3,r17
  80d714:	4451883a 	add	r8,r8,r17
  80d718:	1823883a 	mov	r17,r3
  80d71c:	4080202c 	andhi	r2,r8,128
  80d720:	10006826 	beq	r2,zero,80d8c4 <__adddf3+0x308>
  80d724:	90c00044 	addi	r3,r18,1
  80d728:	1881ffe0 	cmpeqi	r2,r3,2047
  80d72c:	18c1ffcc 	andi	r3,r3,2047
  80d730:	10007a1e 	bne	r2,zero,80d91c <__adddf3+0x360>
  80d734:	00bfe034 	movhi	r2,65408
  80d738:	10bfffc4 	addi	r2,r2,-1
  80d73c:	4090703a 	and	r8,r8,r2
  80d740:	4004977a 	slli	r2,r8,29
  80d744:	4010927a 	slli	r8,r8,9
  80d748:	8822d0fa 	srli	r17,r17,3
  80d74c:	4010d33a 	srli	r8,r8,12
  80d750:	1444b03a 	or	r2,r2,r17
  80d754:	1806953a 	slli	r3,r3,20
  80d758:	802097fa 	slli	r16,r16,31
  80d75c:	1a06b03a 	or	r3,r3,r8
  80d760:	1c06b03a 	or	r3,r3,r16
  80d764:	dfc00417 	ldw	ra,16(sp)
  80d768:	dcc00317 	ldw	r19,12(sp)
  80d76c:	dc800217 	ldw	r18,8(sp)
  80d770:	dc400117 	ldw	r17,4(sp)
  80d774:	dc000017 	ldw	r16,0(sp)
  80d778:	dec00504 	addi	sp,sp,20
  80d77c:	f800283a 	ret
  80d780:	18002626 	beq	r3,zero,80d81c <__adddf3+0x260>
  80d784:	1487c83a 	sub	r3,r2,r18
  80d788:	9000ba1e 	bne	r18,zero,80da74 <__adddf3+0x4b8>
  80d78c:	5388b03a 	or	r4,r10,r14
  80d790:	20011826 	beq	r4,zero,80dbf4 <__adddf3+0x638>
  80d794:	193fffc4 	addi	r4,r3,-1
  80d798:	20015726 	beq	r4,zero,80dcf8 <__adddf3+0x73c>
  80d79c:	18c1ffd8 	cmpnei	r3,r3,2047
  80d7a0:	18013026 	beq	r3,zero,80dc64 <__adddf3+0x6a8>
  80d7a4:	2007883a 	mov	r3,r4
  80d7a8:	0000b506 	br	80da80 <__adddf3+0x4c4>
  80d7ac:	00c07b0e 	bge	zero,r3,80d99c <__adddf3+0x3e0>
  80d7b0:	10002e26 	beq	r2,zero,80d86c <__adddf3+0x2b0>
  80d7b4:	9081ffd8 	cmpnei	r2,r18,2047
  80d7b8:	10005c26 	beq	r2,zero,80d92c <__adddf3+0x370>
  80d7bc:	4a402034 	orhi	r9,r9,128
  80d7c0:	18800e48 	cmpgei	r2,r3,57
  80d7c4:	10004b1e 	bne	r2,zero,80d8f4 <__adddf3+0x338>
  80d7c8:	18800808 	cmpgei	r2,r3,32
  80d7cc:	1000ec26 	beq	r2,zero,80db80 <__adddf3+0x5c4>
  80d7d0:	1c7ff804 	addi	r17,r3,-32
  80d7d4:	19000820 	cmpeqi	r4,r3,32
  80d7d8:	4c44d83a 	srl	r2,r9,r17
  80d7dc:	2000041e 	bne	r4,zero,80d7f0 <__adddf3+0x234>
  80d7e0:	01001004 	movi	r4,64
  80d7e4:	20c7c83a 	sub	r3,r4,r3
  80d7e8:	48d2983a 	sll	r9,r9,r3
  80d7ec:	6a5ab03a 	or	r13,r13,r9
  80d7f0:	6822c03a 	cmpne	r17,r13,zero
  80d7f4:	88a2b03a 	or	r17,r17,r2
  80d7f8:	00004006 	br	80d8fc <__adddf3+0x340>
  80d7fc:	4b44b03a 	or	r2,r9,r13
  80d800:	10008226 	beq	r2,zero,80da0c <__adddf3+0x450>
  80d804:	18bfffc4 	addi	r2,r3,-1
  80d808:	10011026 	beq	r2,zero,80dc4c <__adddf3+0x690>
  80d80c:	18c1ffd8 	cmpnei	r3,r3,2047
  80d810:	18004626 	beq	r3,zero,80d92c <__adddf3+0x370>
  80d814:	1007883a 	mov	r3,r2
  80d818:	003f8806 	br	80d63c <__adddf3+0x80>
  80d81c:	90800044 	addi	r2,r18,1
  80d820:	1081ff8c 	andi	r2,r2,2046
  80d824:	1000a51e 	bne	r2,zero,80dabc <__adddf3+0x500>
  80d828:	538ab03a 	or	r5,r10,r14
  80d82c:	4b44b03a 	or	r2,r9,r13
  80d830:	9000f81e 	bne	r18,zero,80dc14 <__adddf3+0x658>
  80d834:	28013726 	beq	r5,zero,80dd14 <__adddf3+0x758>
  80d838:	10011226 	beq	r2,zero,80dc84 <__adddf3+0x6c8>
  80d83c:	7363c83a 	sub	r17,r14,r13
  80d840:	7445803a 	cmpltu	r2,r14,r17
  80d844:	5251c83a 	sub	r8,r10,r9
  80d848:	4091c83a 	sub	r8,r8,r2
  80d84c:	4080202c 	andhi	r2,r8,128
  80d850:	10018f26 	beq	r2,zero,80de90 <__adddf3+0x8d4>
  80d854:	6ba3c83a 	sub	r17,r13,r14
  80d858:	4a95c83a 	sub	r10,r9,r10
  80d85c:	6c51803a 	cmpltu	r8,r13,r17
  80d860:	5211c83a 	sub	r8,r10,r8
  80d864:	3821883a 	mov	r16,r7
  80d868:	003fa306 	br	80d6f8 <__adddf3+0x13c>
  80d86c:	4b44b03a 	or	r2,r9,r13
  80d870:	10006626 	beq	r2,zero,80da0c <__adddf3+0x450>
  80d874:	18bfffc4 	addi	r2,r3,-1
  80d878:	1000ec26 	beq	r2,zero,80dc2c <__adddf3+0x670>
  80d87c:	18c1ffd8 	cmpnei	r3,r3,2047
  80d880:	18012d26 	beq	r3,zero,80dd38 <__adddf3+0x77c>
  80d884:	1007883a 	mov	r3,r2
  80d888:	003fcd06 	br	80d7c0 <__adddf3+0x204>
  80d88c:	18fff844 	addi	r3,r3,-31
  80d890:	20800820 	cmpeqi	r2,r4,32
  80d894:	40c6d83a 	srl	r3,r8,r3
  80d898:	1000041e 	bne	r2,zero,80d8ac <__adddf3+0x2f0>
  80d89c:	00801004 	movi	r2,64
  80d8a0:	1109c83a 	sub	r4,r2,r4
  80d8a4:	4110983a 	sll	r8,r8,r4
  80d8a8:	8a22b03a 	or	r17,r17,r8
  80d8ac:	8822c03a 	cmpne	r17,r17,zero
  80d8b0:	88e2b03a 	or	r17,r17,r3
  80d8b4:	0011883a 	mov	r8,zero
  80d8b8:	0025883a 	mov	r18,zero
  80d8bc:	888001cc 	andi	r2,r17,7
  80d8c0:	103f8f1e 	bne	r2,zero,80d700 <__adddf3+0x144>
  80d8c4:	8822d0fa 	srli	r17,r17,3
  80d8c8:	4004977a 	slli	r2,r8,29
  80d8cc:	4014d0fa 	srli	r10,r8,3
  80d8d0:	9007883a 	mov	r3,r18
  80d8d4:	8884b03a 	or	r2,r17,r2
  80d8d8:	1901ffe0 	cmpeqi	r4,r3,2047
  80d8dc:	2000191e 	bne	r4,zero,80d944 <__adddf3+0x388>
  80d8e0:	02000434 	movhi	r8,16
  80d8e4:	423fffc4 	addi	r8,r8,-1
  80d8e8:	5210703a 	and	r8,r10,r8
  80d8ec:	18c1ffcc 	andi	r3,r3,2047
  80d8f0:	003f9806 	br	80d754 <__adddf3+0x198>
  80d8f4:	4b62b03a 	or	r17,r9,r13
  80d8f8:	8822c03a 	cmpne	r17,r17,zero
  80d8fc:	8ba3883a 	add	r17,r17,r14
  80d900:	8b91803a 	cmpltu	r8,r17,r14
  80d904:	4291883a 	add	r8,r8,r10
  80d908:	4080202c 	andhi	r2,r8,128
  80d90c:	103feb26 	beq	r2,zero,80d8bc <__adddf3+0x300>
  80d910:	94800044 	addi	r18,r18,1
  80d914:	9081ffe0 	cmpeqi	r2,r18,2047
  80d918:	10007426 	beq	r2,zero,80daec <__adddf3+0x530>
  80d91c:	00c1ffc4 	movi	r3,2047
  80d920:	0011883a 	mov	r8,zero
  80d924:	0005883a 	mov	r2,zero
  80d928:	003f8a06 	br	80d754 <__adddf3+0x198>
  80d92c:	500a977a 	slli	r5,r10,29
  80d930:	00c80034 	movhi	r3,8192
  80d934:	18ffffc4 	addi	r3,r3,-1
  80d938:	5014d0fa 	srli	r10,r10,3
  80d93c:	20c4703a 	and	r2,r4,r3
  80d940:	1144b03a 	or	r2,r2,r5
  80d944:	1286b03a 	or	r3,r2,r10
  80d948:	18015426 	beq	r3,zero,80de9c <__adddf3+0x8e0>
  80d94c:	00c00434 	movhi	r3,16
  80d950:	18ffffc4 	addi	r3,r3,-1
  80d954:	52000234 	orhi	r8,r10,8
  80d958:	40d0703a 	and	r8,r8,r3
  80d95c:	00c1ffc4 	movi	r3,2047
  80d960:	003f7c06 	br	80d754 <__adddf3+0x198>
  80d964:	8809883a 	mov	r4,r17
  80d968:	0802b540 	call	802b54 <__clzsi2>
  80d96c:	10c00604 	addi	r3,r2,24
  80d970:	19000808 	cmpgei	r4,r3,32
  80d974:	203f4b26 	beq	r4,zero,80d6a4 <__adddf3+0xe8>
  80d978:	123ffe04 	addi	r8,r2,-8
  80d97c:	8a10983a 	sll	r8,r17,r8
  80d980:	0023883a 	mov	r17,zero
  80d984:	1cbf4e0e 	bge	r3,r18,80d6c0 <__adddf3+0x104>
  80d988:	00bfe034 	movhi	r2,65408
  80d98c:	10bfffc4 	addi	r2,r2,-1
  80d990:	90e5c83a 	sub	r18,r18,r3
  80d994:	4090703a 	and	r8,r8,r2
  80d998:	003f5706 	br	80d6f8 <__adddf3+0x13c>
  80d99c:	18002226 	beq	r3,zero,80da28 <__adddf3+0x46c>
  80d9a0:	1487c83a 	sub	r3,r2,r18
  80d9a4:	90006e26 	beq	r18,zero,80db60 <__adddf3+0x5a4>
  80d9a8:	1101ffd8 	cmpnei	r4,r2,2047
  80d9ac:	2000e926 	beq	r4,zero,80dd54 <__adddf3+0x798>
  80d9b0:	52802034 	orhi	r10,r10,128
  80d9b4:	19000e48 	cmpgei	r4,r3,57
  80d9b8:	2000b91e 	bne	r4,zero,80dca0 <__adddf3+0x6e4>
  80d9bc:	19000808 	cmpgei	r4,r3,32
  80d9c0:	2001101e 	bne	r4,zero,80de04 <__adddf3+0x848>
  80d9c4:	01000804 	movi	r4,32
  80d9c8:	20c9c83a 	sub	r4,r4,r3
  80d9cc:	5122983a 	sll	r17,r10,r4
  80d9d0:	70cad83a 	srl	r5,r14,r3
  80d9d4:	7108983a 	sll	r4,r14,r4
  80d9d8:	50d4d83a 	srl	r10,r10,r3
  80d9dc:	8962b03a 	or	r17,r17,r5
  80d9e0:	2008c03a 	cmpne	r4,r4,zero
  80d9e4:	8922b03a 	or	r17,r17,r4
  80d9e8:	4a93883a 	add	r9,r9,r10
  80d9ec:	8b63883a 	add	r17,r17,r13
  80d9f0:	8b51803a 	cmpltu	r8,r17,r13
  80d9f4:	4251883a 	add	r8,r8,r9
  80d9f8:	1025883a 	mov	r18,r2
  80d9fc:	003fc206 	br	80d908 <__adddf3+0x34c>
  80da00:	4b62b03a 	or	r17,r9,r13
  80da04:	8822c03a 	cmpne	r17,r17,zero
  80da08:	003f1a06 	br	80d674 <__adddf3+0xb8>
  80da0c:	500c977a 	slli	r6,r10,29
  80da10:	01480034 	movhi	r5,8192
  80da14:	297fffc4 	addi	r5,r5,-1
  80da18:	2144703a 	and	r2,r4,r5
  80da1c:	5014d0fa 	srli	r10,r10,3
  80da20:	1184b03a 	or	r2,r2,r6
  80da24:	003fac06 	br	80d8d8 <__adddf3+0x31c>
  80da28:	90800044 	addi	r2,r18,1
  80da2c:	1141ff8c 	andi	r5,r2,2046
  80da30:	28005e1e 	bne	r5,zero,80dbac <__adddf3+0x5f0>
  80da34:	5384b03a 	or	r2,r10,r14
  80da38:	9000a71e 	bne	r18,zero,80dcd8 <__adddf3+0x71c>
  80da3c:	1000e526 	beq	r2,zero,80ddd4 <__adddf3+0x818>
  80da40:	4b44b03a 	or	r2,r9,r13
  80da44:	10008f26 	beq	r2,zero,80dc84 <__adddf3+0x6c8>
  80da48:	7363883a 	add	r17,r14,r13
  80da4c:	5255883a 	add	r10,r10,r9
  80da50:	8b91803a 	cmpltu	r8,r17,r14
  80da54:	5211883a 	add	r8,r10,r8
  80da58:	4080202c 	andhi	r2,r8,128
  80da5c:	103f9726 	beq	r2,zero,80d8bc <__adddf3+0x300>
  80da60:	00bfe034 	movhi	r2,65408
  80da64:	10bfffc4 	addi	r2,r2,-1
  80da68:	4090703a 	and	r8,r8,r2
  80da6c:	04800044 	movi	r18,1
  80da70:	003f9206 	br	80d8bc <__adddf3+0x300>
  80da74:	1101ffd8 	cmpnei	r4,r2,2047
  80da78:	20007a26 	beq	r4,zero,80dc64 <__adddf3+0x6a8>
  80da7c:	52802034 	orhi	r10,r10,128
  80da80:	19000e48 	cmpgei	r4,r3,57
  80da84:	20002e1e 	bne	r4,zero,80db40 <__adddf3+0x584>
  80da88:	19000808 	cmpgei	r4,r3,32
  80da8c:	2000871e 	bne	r4,zero,80dcac <__adddf3+0x6f0>
  80da90:	01000804 	movi	r4,32
  80da94:	20c9c83a 	sub	r4,r4,r3
  80da98:	5122983a 	sll	r17,r10,r4
  80da9c:	70cad83a 	srl	r5,r14,r3
  80daa0:	711c983a 	sll	r14,r14,r4
  80daa4:	50d4d83a 	srl	r10,r10,r3
  80daa8:	8962b03a 	or	r17,r17,r5
  80daac:	701cc03a 	cmpne	r14,r14,zero
  80dab0:	8ba2b03a 	or	r17,r17,r14
  80dab4:	4a93c83a 	sub	r9,r9,r10
  80dab8:	00002306 	br	80db48 <__adddf3+0x58c>
  80dabc:	7363c83a 	sub	r17,r14,r13
  80dac0:	5267c83a 	sub	r19,r10,r9
  80dac4:	7451803a 	cmpltu	r8,r14,r17
  80dac8:	9a27c83a 	sub	r19,r19,r8
  80dacc:	9880202c 	andhi	r2,r19,128
  80dad0:	1000421e 	bne	r2,zero,80dbdc <__adddf3+0x620>
  80dad4:	8cc4b03a 	or	r2,r17,r19
  80dad8:	103eee1e 	bne	r2,zero,80d694 <__adddf3+0xd8>
  80dadc:	0015883a 	mov	r10,zero
  80dae0:	0021883a 	mov	r16,zero
  80dae4:	003f7e06 	br	80d8e0 <__adddf3+0x324>
  80dae8:	04800084 	movi	r18,2
  80daec:	00bfe034 	movhi	r2,65408
  80daf0:	10bfffc4 	addi	r2,r2,-1
  80daf4:	8806d07a 	srli	r3,r17,1
  80daf8:	4090703a 	and	r8,r8,r2
  80dafc:	400497fa 	slli	r2,r8,31
  80db00:	8c40004c 	andi	r17,r17,1
  80db04:	1c62b03a 	or	r17,r3,r17
  80db08:	4010d07a 	srli	r8,r8,1
  80db0c:	1462b03a 	or	r17,r2,r17
  80db10:	003ef906 	br	80d6f8 <__adddf3+0x13c>
  80db14:	1c7ff804 	addi	r17,r3,-32
  80db18:	19000820 	cmpeqi	r4,r3,32
  80db1c:	4c44d83a 	srl	r2,r9,r17
  80db20:	2000041e 	bne	r4,zero,80db34 <__adddf3+0x578>
  80db24:	01001004 	movi	r4,64
  80db28:	20c7c83a 	sub	r3,r4,r3
  80db2c:	48d2983a 	sll	r9,r9,r3
  80db30:	6a5ab03a 	or	r13,r13,r9
  80db34:	6822c03a 	cmpne	r17,r13,zero
  80db38:	88a2b03a 	or	r17,r17,r2
  80db3c:	003ecd06 	br	80d674 <__adddf3+0xb8>
  80db40:	5394b03a 	or	r10,r10,r14
  80db44:	5022c03a 	cmpne	r17,r10,zero
  80db48:	6c63c83a 	sub	r17,r13,r17
  80db4c:	6c51803a 	cmpltu	r8,r13,r17
  80db50:	4a11c83a 	sub	r8,r9,r8
  80db54:	3821883a 	mov	r16,r7
  80db58:	1025883a 	mov	r18,r2
  80db5c:	003ec806 	br	80d680 <__adddf3+0xc4>
  80db60:	5388b03a 	or	r4,r10,r14
  80db64:	20008226 	beq	r4,zero,80dd70 <__adddf3+0x7b4>
  80db68:	193fffc4 	addi	r4,r3,-1
  80db6c:	2000b026 	beq	r4,zero,80de30 <__adddf3+0x874>
  80db70:	18c1ffd8 	cmpnei	r3,r3,2047
  80db74:	18007726 	beq	r3,zero,80dd54 <__adddf3+0x798>
  80db78:	2007883a 	mov	r3,r4
  80db7c:	003f8d06 	br	80d9b4 <__adddf3+0x3f8>
  80db80:	00800804 	movi	r2,32
  80db84:	10c5c83a 	sub	r2,r2,r3
  80db88:	68c8d83a 	srl	r4,r13,r3
  80db8c:	48a2983a 	sll	r17,r9,r2
  80db90:	689a983a 	sll	r13,r13,r2
  80db94:	48c6d83a 	srl	r3,r9,r3
  80db98:	8922b03a 	or	r17,r17,r4
  80db9c:	681ac03a 	cmpne	r13,r13,zero
  80dba0:	8b62b03a 	or	r17,r17,r13
  80dba4:	50d5883a 	add	r10,r10,r3
  80dba8:	003f5406 	br	80d8fc <__adddf3+0x340>
  80dbac:	10c1ffe0 	cmpeqi	r3,r2,2047
  80dbb0:	183f5a1e 	bne	r3,zero,80d91c <__adddf3+0x360>
  80dbb4:	7351883a 	add	r8,r14,r13
  80dbb8:	4387803a 	cmpltu	r3,r8,r14
  80dbbc:	5255883a 	add	r10,r10,r9
  80dbc0:	50c7883a 	add	r3,r10,r3
  80dbc4:	401ad07a 	srli	r13,r8,1
  80dbc8:	182297fa 	slli	r17,r3,31
  80dbcc:	1810d07a 	srli	r8,r3,1
  80dbd0:	1025883a 	mov	r18,r2
  80dbd4:	8b62b03a 	or	r17,r17,r13
  80dbd8:	003f3806 	br	80d8bc <__adddf3+0x300>
  80dbdc:	6ba3c83a 	sub	r17,r13,r14
  80dbe0:	4a93c83a 	sub	r9,r9,r10
  80dbe4:	6c51803a 	cmpltu	r8,r13,r17
  80dbe8:	4a27c83a 	sub	r19,r9,r8
  80dbec:	3821883a 	mov	r16,r7
  80dbf0:	003ea806 	br	80d694 <__adddf3+0xd8>
  80dbf4:	480a977a 	slli	r5,r9,29
  80dbf8:	01080034 	movhi	r4,8192
  80dbfc:	213fffc4 	addi	r4,r4,-1
  80dc00:	3104703a 	and	r2,r6,r4
  80dc04:	4814d0fa 	srli	r10,r9,3
  80dc08:	1144b03a 	or	r2,r2,r5
  80dc0c:	3821883a 	mov	r16,r7
  80dc10:	003f3106 	br	80d8d8 <__adddf3+0x31c>
  80dc14:	28005d1e 	bne	r5,zero,80dd8c <__adddf3+0x7d0>
  80dc18:	1000121e 	bne	r2,zero,80dc64 <__adddf3+0x6a8>
  80dc1c:	0021883a 	mov	r16,zero
  80dc20:	4015883a 	mov	r10,r8
  80dc24:	00bfffc4 	movi	r2,-1
  80dc28:	003f4806 	br	80d94c <__adddf3+0x390>
  80dc2c:	7363883a 	add	r17,r14,r13
  80dc30:	5255883a 	add	r10,r10,r9
  80dc34:	8b91803a 	cmpltu	r8,r17,r14
  80dc38:	5211883a 	add	r8,r10,r8
  80dc3c:	4080202c 	andhi	r2,r8,128
  80dc40:	103fa91e 	bne	r2,zero,80dae8 <__adddf3+0x52c>
  80dc44:	04800044 	movi	r18,1
  80dc48:	003f1c06 	br	80d8bc <__adddf3+0x300>
  80dc4c:	7363c83a 	sub	r17,r14,r13
  80dc50:	5255c83a 	sub	r10,r10,r9
  80dc54:	7451803a 	cmpltu	r8,r14,r17
  80dc58:	5211c83a 	sub	r8,r10,r8
  80dc5c:	04800044 	movi	r18,1
  80dc60:	003e8706 	br	80d680 <__adddf3+0xc4>
  80dc64:	4806977a 	slli	r3,r9,29
  80dc68:	00880034 	movhi	r2,8192
  80dc6c:	10bfffc4 	addi	r2,r2,-1
  80dc70:	3084703a 	and	r2,r6,r2
  80dc74:	4814d0fa 	srli	r10,r9,3
  80dc78:	10c4b03a 	or	r2,r2,r3
  80dc7c:	3821883a 	mov	r16,r7
  80dc80:	003f3006 	br	80d944 <__adddf3+0x388>
  80dc84:	500a977a 	slli	r5,r10,29
  80dc88:	00880034 	movhi	r2,8192
  80dc8c:	10bfffc4 	addi	r2,r2,-1
  80dc90:	2084703a 	and	r2,r4,r2
  80dc94:	5014d0fa 	srli	r10,r10,3
  80dc98:	1144b03a 	or	r2,r2,r5
  80dc9c:	003f1006 	br	80d8e0 <__adddf3+0x324>
  80dca0:	5394b03a 	or	r10,r10,r14
  80dca4:	5022c03a 	cmpne	r17,r10,zero
  80dca8:	003f5006 	br	80d9ec <__adddf3+0x430>
  80dcac:	1c7ff804 	addi	r17,r3,-32
  80dcb0:	19400820 	cmpeqi	r5,r3,32
  80dcb4:	5448d83a 	srl	r4,r10,r17
  80dcb8:	2800041e 	bne	r5,zero,80dccc <__adddf3+0x710>
  80dcbc:	01401004 	movi	r5,64
  80dcc0:	28c7c83a 	sub	r3,r5,r3
  80dcc4:	50d4983a 	sll	r10,r10,r3
  80dcc8:	729cb03a 	or	r14,r14,r10
  80dccc:	7022c03a 	cmpne	r17,r14,zero
  80dcd0:	8922b03a 	or	r17,r17,r4
  80dcd4:	003f9c06 	br	80db48 <__adddf3+0x58c>
  80dcd8:	10005a1e 	bne	r2,zero,80de44 <__adddf3+0x888>
  80dcdc:	4804977a 	slli	r2,r9,29
  80dce0:	00c80034 	movhi	r3,8192
  80dce4:	18ffffc4 	addi	r3,r3,-1
  80dce8:	30cc703a 	and	r6,r6,r3
  80dcec:	4814d0fa 	srli	r10,r9,3
  80dcf0:	1184b03a 	or	r2,r2,r6
  80dcf4:	003f1306 	br	80d944 <__adddf3+0x388>
  80dcf8:	6ba3c83a 	sub	r17,r13,r14
  80dcfc:	4a95c83a 	sub	r10,r9,r10
  80dd00:	6c51803a 	cmpltu	r8,r13,r17
  80dd04:	5211c83a 	sub	r8,r10,r8
  80dd08:	3821883a 	mov	r16,r7
  80dd0c:	04800044 	movi	r18,1
  80dd10:	003e5b06 	br	80d680 <__adddf3+0xc4>
  80dd14:	103f7126 	beq	r2,zero,80dadc <__adddf3+0x520>
  80dd18:	4808977a 	slli	r4,r9,29
  80dd1c:	00880034 	movhi	r2,8192
  80dd20:	10bfffc4 	addi	r2,r2,-1
  80dd24:	3084703a 	and	r2,r6,r2
  80dd28:	4814d0fa 	srli	r10,r9,3
  80dd2c:	1104b03a 	or	r2,r2,r4
  80dd30:	3821883a 	mov	r16,r7
  80dd34:	003eea06 	br	80d8e0 <__adddf3+0x324>
  80dd38:	5006977a 	slli	r3,r10,29
  80dd3c:	00880034 	movhi	r2,8192
  80dd40:	10bfffc4 	addi	r2,r2,-1
  80dd44:	2084703a 	and	r2,r4,r2
  80dd48:	5014d0fa 	srli	r10,r10,3
  80dd4c:	10c4b03a 	or	r2,r2,r3
  80dd50:	003efc06 	br	80d944 <__adddf3+0x388>
  80dd54:	4806977a 	slli	r3,r9,29
  80dd58:	00880034 	movhi	r2,8192
  80dd5c:	10bfffc4 	addi	r2,r2,-1
  80dd60:	3084703a 	and	r2,r6,r2
  80dd64:	4814d0fa 	srli	r10,r9,3
  80dd68:	10c4b03a 	or	r2,r2,r3
  80dd6c:	003ef506 	br	80d944 <__adddf3+0x388>
  80dd70:	4808977a 	slli	r4,r9,29
  80dd74:	00880034 	movhi	r2,8192
  80dd78:	10bfffc4 	addi	r2,r2,-1
  80dd7c:	3084703a 	and	r2,r6,r2
  80dd80:	4814d0fa 	srli	r10,r9,3
  80dd84:	1104b03a 	or	r2,r2,r4
  80dd88:	003ed306 	br	80d8d8 <__adddf3+0x31c>
  80dd8c:	500a977a 	slli	r5,r10,29
  80dd90:	5014d0fa 	srli	r10,r10,3
  80dd94:	10001626 	beq	r2,zero,80ddf0 <__adddf3+0x834>
  80dd98:	00c80034 	movhi	r3,8192
  80dd9c:	18ffffc4 	addi	r3,r3,-1
  80dda0:	20c4703a 	and	r2,r4,r3
  80dda4:	5100022c 	andhi	r4,r10,8
  80dda8:	1144b03a 	or	r2,r2,r5
  80ddac:	203ee526 	beq	r4,zero,80d944 <__adddf3+0x388>
  80ddb0:	4808d0fa 	srli	r4,r9,3
  80ddb4:	2140022c 	andhi	r5,r4,8
  80ddb8:	283ee21e 	bne	r5,zero,80d944 <__adddf3+0x388>
  80ddbc:	4812977a 	slli	r9,r9,29
  80ddc0:	30c4703a 	and	r2,r6,r3
  80ddc4:	3821883a 	mov	r16,r7
  80ddc8:	1244b03a 	or	r2,r2,r9
  80ddcc:	2015883a 	mov	r10,r4
  80ddd0:	003edc06 	br	80d944 <__adddf3+0x388>
  80ddd4:	4804977a 	slli	r2,r9,29
  80ddd8:	01080034 	movhi	r4,8192
  80dddc:	213fffc4 	addi	r4,r4,-1
  80dde0:	310c703a 	and	r6,r6,r4
  80dde4:	4814d0fa 	srli	r10,r9,3
  80dde8:	1184b03a 	or	r2,r2,r6
  80ddec:	003ebc06 	br	80d8e0 <__adddf3+0x324>
  80ddf0:	00880034 	movhi	r2,8192
  80ddf4:	10bfffc4 	addi	r2,r2,-1
  80ddf8:	2084703a 	and	r2,r4,r2
  80ddfc:	1144b03a 	or	r2,r2,r5
  80de00:	003ed006 	br	80d944 <__adddf3+0x388>
  80de04:	193ff804 	addi	r4,r3,-32
  80de08:	19400820 	cmpeqi	r5,r3,32
  80de0c:	5108d83a 	srl	r4,r10,r4
  80de10:	2800041e 	bne	r5,zero,80de24 <__adddf3+0x868>
  80de14:	01401004 	movi	r5,64
  80de18:	28c7c83a 	sub	r3,r5,r3
  80de1c:	50d4983a 	sll	r10,r10,r3
  80de20:	729cb03a 	or	r14,r14,r10
  80de24:	7022c03a 	cmpne	r17,r14,zero
  80de28:	8922b03a 	or	r17,r17,r4
  80de2c:	003eef06 	br	80d9ec <__adddf3+0x430>
  80de30:	7363883a 	add	r17,r14,r13
  80de34:	5255883a 	add	r10,r10,r9
  80de38:	8b51803a 	cmpltu	r8,r17,r13
  80de3c:	5211883a 	add	r8,r10,r8
  80de40:	003f7e06 	br	80dc3c <__adddf3+0x680>
  80de44:	4b50b03a 	or	r8,r9,r13
  80de48:	500a977a 	slli	r5,r10,29
  80de4c:	5014d0fa 	srli	r10,r10,3
  80de50:	403fe726 	beq	r8,zero,80ddf0 <__adddf3+0x834>
  80de54:	00c80034 	movhi	r3,8192
  80de58:	18ffffc4 	addi	r3,r3,-1
  80de5c:	20c4703a 	and	r2,r4,r3
  80de60:	5100022c 	andhi	r4,r10,8
  80de64:	1144b03a 	or	r2,r2,r5
  80de68:	203eb626 	beq	r4,zero,80d944 <__adddf3+0x388>
  80de6c:	4808d0fa 	srli	r4,r9,3
  80de70:	2140022c 	andhi	r5,r4,8
  80de74:	283eb31e 	bne	r5,zero,80d944 <__adddf3+0x388>
  80de78:	4804977a 	slli	r2,r9,29
  80de7c:	30cc703a 	and	r6,r6,r3
  80de80:	3821883a 	mov	r16,r7
  80de84:	3084b03a 	or	r2,r6,r2
  80de88:	2015883a 	mov	r10,r4
  80de8c:	003ead06 	br	80d944 <__adddf3+0x388>
  80de90:	8a04b03a 	or	r2,r17,r8
  80de94:	103f1126 	beq	r2,zero,80dadc <__adddf3+0x520>
  80de98:	003e8806 	br	80d8bc <__adddf3+0x300>
  80de9c:	0005883a 	mov	r2,zero
  80dea0:	00c1ffc4 	movi	r3,2047
  80dea4:	0011883a 	mov	r8,zero
  80dea8:	003e2a06 	br	80d754 <__adddf3+0x198>

0080deac <__divdf3>:
  80deac:	2810d53a 	srli	r8,r5,20
  80deb0:	defff004 	addi	sp,sp,-64
  80deb4:	dc000615 	stw	r16,24(sp)
  80deb8:	04000434 	movhi	r16,16
  80debc:	df000e15 	stw	fp,56(sp)
  80dec0:	ddc00d15 	stw	r23,52(sp)
  80dec4:	dd800c15 	stw	r22,48(sp)
  80dec8:	dd000a15 	stw	r20,40(sp)
  80decc:	843fffc4 	addi	r16,r16,-1
  80ded0:	dfc00f15 	stw	ra,60(sp)
  80ded4:	dd400b15 	stw	r21,44(sp)
  80ded8:	dcc00915 	stw	r19,36(sp)
  80dedc:	dc800815 	stw	r18,32(sp)
  80dee0:	dc400715 	stw	r17,28(sp)
  80dee4:	4201ffcc 	andi	r8,r8,2047
  80dee8:	282ed7fa 	srli	r23,r5,31
  80deec:	3039883a 	mov	fp,r6
  80def0:	382d883a 	mov	r22,r7
  80def4:	2029883a 	mov	r20,r4
  80def8:	2c20703a 	and	r16,r5,r16
  80defc:	40006826 	beq	r8,zero,80e0a0 <__divdf3+0x1f4>
  80df00:	4081ffe0 	cmpeqi	r2,r8,2047
  80df04:	1000791e 	bne	r2,zero,80e0ec <__divdf3+0x240>
  80df08:	2026d77a 	srli	r19,r4,29
  80df0c:	800a90fa 	slli	r5,r16,3
  80df10:	202890fa 	slli	r20,r4,3
  80df14:	44bf0044 	addi	r18,r8,-1023
  80df18:	994ab03a 	or	r5,r19,r5
  80df1c:	2cc02034 	orhi	r19,r5,128
  80df20:	0021883a 	mov	r16,zero
  80df24:	0023883a 	mov	r17,zero
  80df28:	b010d53a 	srli	r8,r22,20
  80df2c:	00c00434 	movhi	r3,16
  80df30:	18ffffc4 	addi	r3,r3,-1
  80df34:	4201ffcc 	andi	r8,r8,2047
  80df38:	b02ad7fa 	srli	r21,r22,31
  80df3c:	b0ec703a 	and	r22,r22,r3
  80df40:	40004626 	beq	r8,zero,80e05c <__divdf3+0x1b0>
  80df44:	4081ffe0 	cmpeqi	r2,r8,2047
  80df48:	10006f1e 	bne	r2,zero,80e108 <__divdf3+0x25c>
  80df4c:	b00690fa 	slli	r3,r22,3
  80df50:	e004d77a 	srli	r2,fp,29
  80df54:	e01290fa 	slli	r9,fp,3
  80df58:	423f0044 	addi	r8,r8,-1023
  80df5c:	10c6b03a 	or	r3,r2,r3
  80df60:	1d802034 	orhi	r22,r3,128
  80df64:	9225c83a 	sub	r18,r18,r8
  80df68:	0007883a 	mov	r3,zero
  80df6c:	80800428 	cmpgeui	r2,r16,16
  80df70:	bd4ef03a 	xor	r7,r23,r21
  80df74:	1000a71e 	bne	r2,zero,80e214 <__divdf3+0x368>
  80df78:	800c90ba 	slli	r6,r16,2
  80df7c:	00802074 	movhi	r2,129
  80df80:	3085883a 	add	r2,r6,r2
  80df84:	10b7e317 	ldw	r2,-8308(r2)
  80df88:	1000683a 	jmp	r2
  80df8c:	0080e214 	movui	r2,904
  80df90:	0080e038 	rdprs	r2,zero,896
  80df94:	0080dfe8 	cmpgeui	r2,zero,895
  80df98:	0080e048 	cmpgei	r2,zero,897
  80df9c:	0080dfe8 	cmpgeui	r2,zero,895
  80dfa0:	0080e1b8 	rdprs	r2,zero,902
  80dfa4:	0080dfe8 	cmpgeui	r2,zero,895
  80dfa8:	0080e048 	cmpgei	r2,zero,897
  80dfac:	0080e038 	rdprs	r2,zero,896
  80dfb0:	0080e038 	rdprs	r2,zero,896
  80dfb4:	0080e1b8 	rdprs	r2,zero,902
  80dfb8:	0080e048 	cmpgei	r2,zero,897
  80dfbc:	0080dfcc 	andi	r2,zero,895
  80dfc0:	0080dfcc 	andi	r2,zero,895
  80dfc4:	0080dfcc 	andi	r2,zero,895
  80dfc8:	0080e1d0 	cmplti	r2,zero,903
  80dfcc:	b80f883a 	mov	r7,r23
  80dfd0:	888000a0 	cmpeqi	r2,r17,2
  80dfd4:	1000181e 	bne	r2,zero,80e038 <__divdf3+0x18c>
  80dfd8:	888000e0 	cmpeqi	r2,r17,3
  80dfdc:	1001f61e 	bne	r2,zero,80e7b8 <__divdf3+0x90c>
  80dfe0:	88800060 	cmpeqi	r2,r17,1
  80dfe4:	10006126 	beq	r2,zero,80e16c <__divdf3+0x2c0>
  80dfe8:	0007883a 	mov	r3,zero
  80dfec:	000b883a 	mov	r5,zero
  80dff0:	0029883a 	mov	r20,zero
  80dff4:	1806953a 	slli	r3,r3,20
  80dff8:	380e97fa 	slli	r7,r7,31
  80dffc:	a005883a 	mov	r2,r20
  80e000:	1946b03a 	or	r3,r3,r5
  80e004:	19c6b03a 	or	r3,r3,r7
  80e008:	dfc00f17 	ldw	ra,60(sp)
  80e00c:	df000e17 	ldw	fp,56(sp)
  80e010:	ddc00d17 	ldw	r23,52(sp)
  80e014:	dd800c17 	ldw	r22,48(sp)
  80e018:	dd400b17 	ldw	r21,44(sp)
  80e01c:	dd000a17 	ldw	r20,40(sp)
  80e020:	dcc00917 	ldw	r19,36(sp)
  80e024:	dc800817 	ldw	r18,32(sp)
  80e028:	dc400717 	ldw	r17,28(sp)
  80e02c:	dc000617 	ldw	r16,24(sp)
  80e030:	dec01004 	addi	sp,sp,64
  80e034:	f800283a 	ret
  80e038:	00c1ffc4 	movi	r3,2047
  80e03c:	000b883a 	mov	r5,zero
  80e040:	0029883a 	mov	r20,zero
  80e044:	003feb06 	br	80dff4 <__divdf3+0x148>
  80e048:	a80f883a 	mov	r7,r21
  80e04c:	b027883a 	mov	r19,r22
  80e050:	4829883a 	mov	r20,r9
  80e054:	1823883a 	mov	r17,r3
  80e058:	003fdd06 	br	80dfd0 <__divdf3+0x124>
  80e05c:	b712b03a 	or	r9,r22,fp
  80e060:	48003e26 	beq	r9,zero,80e15c <__divdf3+0x2b0>
  80e064:	b0017726 	beq	r22,zero,80e644 <__divdf3+0x798>
  80e068:	b009883a 	mov	r4,r22
  80e06c:	0802b540 	call	802b54 <__clzsi2>
  80e070:	117ffd44 	addi	r5,r2,-11
  80e074:	01000744 	movi	r4,29
  80e078:	127ffe04 	addi	r9,r2,-8
  80e07c:	2149c83a 	sub	r4,r4,r5
  80e080:	b246983a 	sll	r3,r22,r9
  80e084:	e108d83a 	srl	r4,fp,r4
  80e088:	e252983a 	sll	r9,fp,r9
  80e08c:	20ecb03a 	or	r22,r4,r3
  80e090:	1491883a 	add	r8,r2,r18
  80e094:	4480fcc4 	addi	r18,r8,1011
  80e098:	0007883a 	mov	r3,zero
  80e09c:	003fb306 	br	80df6c <__divdf3+0xc0>
  80e0a0:	8126b03a 	or	r19,r16,r4
  80e0a4:	2023883a 	mov	r17,r4
  80e0a8:	98002726 	beq	r19,zero,80e148 <__divdf3+0x29c>
  80e0ac:	80017026 	beq	r16,zero,80e670 <__divdf3+0x7c4>
  80e0b0:	8009883a 	mov	r4,r16
  80e0b4:	0802b540 	call	802b54 <__clzsi2>
  80e0b8:	113ffd44 	addi	r4,r2,-11
  80e0bc:	00c00744 	movi	r3,29
  80e0c0:	14fffe04 	addi	r19,r2,-8
  80e0c4:	1907c83a 	sub	r3,r3,r4
  80e0c8:	84ca983a 	sll	r5,r16,r19
  80e0cc:	88c6d83a 	srl	r3,r17,r3
  80e0d0:	8ce8983a 	sll	r20,r17,r19
  80e0d4:	1966b03a 	or	r19,r3,r5
  80e0d8:	023f0344 	movi	r8,-1011
  80e0dc:	40a5c83a 	sub	r18,r8,r2
  80e0e0:	0021883a 	mov	r16,zero
  80e0e4:	0023883a 	mov	r17,zero
  80e0e8:	003f8f06 	br	80df28 <__divdf3+0x7c>
  80e0ec:	8126b03a 	or	r19,r16,r4
  80e0f0:	9800101e 	bne	r19,zero,80e134 <__divdf3+0x288>
  80e0f4:	0029883a 	mov	r20,zero
  80e0f8:	04000204 	movi	r16,8
  80e0fc:	0481ffc4 	movi	r18,2047
  80e100:	04400084 	movi	r17,2
  80e104:	003f8806 	br	80df28 <__divdf3+0x7c>
  80e108:	b712b03a 	or	r9,r22,fp
  80e10c:	94be0044 	addi	r18,r18,-2047
  80e110:	4800041e 	bne	r9,zero,80e124 <__divdf3+0x278>
  80e114:	84000094 	ori	r16,r16,2
  80e118:	002d883a 	mov	r22,zero
  80e11c:	00c00084 	movi	r3,2
  80e120:	003f9206 	br	80df6c <__divdf3+0xc0>
  80e124:	840000d4 	ori	r16,r16,3
  80e128:	e013883a 	mov	r9,fp
  80e12c:	00c000c4 	movi	r3,3
  80e130:	003f8e06 	br	80df6c <__divdf3+0xc0>
  80e134:	8027883a 	mov	r19,r16
  80e138:	0481ffc4 	movi	r18,2047
  80e13c:	04000304 	movi	r16,12
  80e140:	044000c4 	movi	r17,3
  80e144:	003f7806 	br	80df28 <__divdf3+0x7c>
  80e148:	0029883a 	mov	r20,zero
  80e14c:	04000104 	movi	r16,4
  80e150:	0025883a 	mov	r18,zero
  80e154:	04400044 	movi	r17,1
  80e158:	003f7306 	br	80df28 <__divdf3+0x7c>
  80e15c:	84000054 	ori	r16,r16,1
  80e160:	002d883a 	mov	r22,zero
  80e164:	00c00044 	movi	r3,1
  80e168:	003f8006 	br	80df6c <__divdf3+0xc0>
  80e16c:	9440ffc4 	addi	r17,r18,1023
  80e170:	0441050e 	bge	zero,r17,80e588 <__divdf3+0x6dc>
  80e174:	a08001cc 	andi	r2,r20,7
  80e178:	10016c1e 	bne	r2,zero,80e72c <__divdf3+0x880>
  80e17c:	a008d0fa 	srli	r4,r20,3
  80e180:	9880402c 	andhi	r2,r19,256
  80e184:	10000426 	beq	r2,zero,80e198 <__divdf3+0x2ec>
  80e188:	00bfc034 	movhi	r2,65280
  80e18c:	10bfffc4 	addi	r2,r2,-1
  80e190:	98a6703a 	and	r19,r19,r2
  80e194:	94410004 	addi	r17,r18,1024
  80e198:	8881ffc8 	cmpgei	r2,r17,2047
  80e19c:	103fa61e 	bne	r2,zero,80e038 <__divdf3+0x18c>
  80e1a0:	9828977a 	slli	r20,r19,29
  80e1a4:	980a927a 	slli	r5,r19,9
  80e1a8:	88c1ffcc 	andi	r3,r17,2047
  80e1ac:	a128b03a 	or	r20,r20,r4
  80e1b0:	280ad33a 	srli	r5,r5,12
  80e1b4:	003f8f06 	br	80dff4 <__divdf3+0x148>
  80e1b8:	01400434 	movhi	r5,16
  80e1bc:	000f883a 	mov	r7,zero
  80e1c0:	297fffc4 	addi	r5,r5,-1
  80e1c4:	053fffc4 	movi	r20,-1
  80e1c8:	00c1ffc4 	movi	r3,2047
  80e1cc:	003f8906 	br	80dff4 <__divdf3+0x148>
  80e1d0:	9880022c 	andhi	r2,r19,8
  80e1d4:	10000926 	beq	r2,zero,80e1fc <__divdf3+0x350>
  80e1d8:	b080022c 	andhi	r2,r22,8
  80e1dc:	1000071e 	bne	r2,zero,80e1fc <__divdf3+0x350>
  80e1e0:	00800434 	movhi	r2,16
  80e1e4:	b1400234 	orhi	r5,r22,8
  80e1e8:	10bfffc4 	addi	r2,r2,-1
  80e1ec:	288a703a 	and	r5,r5,r2
  80e1f0:	a80f883a 	mov	r7,r21
  80e1f4:	4829883a 	mov	r20,r9
  80e1f8:	003ff306 	br	80e1c8 <__divdf3+0x31c>
  80e1fc:	00800434 	movhi	r2,16
  80e200:	99400234 	orhi	r5,r19,8
  80e204:	10bfffc4 	addi	r2,r2,-1
  80e208:	288a703a 	and	r5,r5,r2
  80e20c:	b80f883a 	mov	r7,r23
  80e210:	003fed06 	br	80e1c8 <__divdf3+0x31c>
  80e214:	b4c10536 	bltu	r22,r19,80e62c <__divdf3+0x780>
  80e218:	b4c10326 	beq	r22,r19,80e628 <__divdf3+0x77c>
  80e21c:	94bfffc4 	addi	r18,r18,-1
  80e220:	a039883a 	mov	fp,r20
  80e224:	9821883a 	mov	r16,r19
  80e228:	0023883a 	mov	r17,zero
  80e22c:	b006923a 	slli	r3,r22,8
  80e230:	482cd63a 	srli	r22,r9,24
  80e234:	8009883a 	mov	r4,r16
  80e238:	182ed43a 	srli	r23,r3,16
  80e23c:	b0ecb03a 	or	r22,r22,r3
  80e240:	d9c00015 	stw	r7,0(sp)
  80e244:	b80b883a 	mov	r5,r23
  80e248:	482a923a 	slli	r21,r9,8
  80e24c:	b53fffcc 	andi	r20,r22,65535
  80e250:	080d4fc0 	call	80d4fc <__udivsi3>
  80e254:	100b883a 	mov	r5,r2
  80e258:	a009883a 	mov	r4,r20
  80e25c:	1027883a 	mov	r19,r2
  80e260:	0802ba80 	call	802ba8 <__mulsi3>
  80e264:	8009883a 	mov	r4,r16
  80e268:	b80b883a 	mov	r5,r23
  80e26c:	1021883a 	mov	r16,r2
  80e270:	080d5600 	call	80d560 <__umodsi3>
  80e274:	1004943a 	slli	r2,r2,16
  80e278:	e008d43a 	srli	r4,fp,16
  80e27c:	d9c00017 	ldw	r7,0(sp)
  80e280:	2088b03a 	or	r4,r4,r2
  80e284:	2400042e 	bgeu	r4,r16,80e298 <__divdf3+0x3ec>
  80e288:	2589883a 	add	r4,r4,r22
  80e28c:	98bfffc4 	addi	r2,r19,-1
  80e290:	2581082e 	bgeu	r4,r22,80e6b4 <__divdf3+0x808>
  80e294:	1027883a 	mov	r19,r2
  80e298:	2421c83a 	sub	r16,r4,r16
  80e29c:	b80b883a 	mov	r5,r23
  80e2a0:	8009883a 	mov	r4,r16
  80e2a4:	d9c00215 	stw	r7,8(sp)
  80e2a8:	080d4fc0 	call	80d4fc <__udivsi3>
  80e2ac:	100b883a 	mov	r5,r2
  80e2b0:	a009883a 	mov	r4,r20
  80e2b4:	d8800115 	stw	r2,4(sp)
  80e2b8:	0802ba80 	call	802ba8 <__mulsi3>
  80e2bc:	b80b883a 	mov	r5,r23
  80e2c0:	8009883a 	mov	r4,r16
  80e2c4:	d8800015 	stw	r2,0(sp)
  80e2c8:	080d5600 	call	80d560 <__umodsi3>
  80e2cc:	100c943a 	slli	r6,r2,16
  80e2d0:	d8c00017 	ldw	r3,0(sp)
  80e2d4:	e73fffcc 	andi	fp,fp,65535
  80e2d8:	e18cb03a 	or	r6,fp,r6
  80e2dc:	da000117 	ldw	r8,4(sp)
  80e2e0:	d9c00217 	ldw	r7,8(sp)
  80e2e4:	30c0042e 	bgeu	r6,r3,80e2f8 <__divdf3+0x44c>
  80e2e8:	358d883a 	add	r6,r6,r22
  80e2ec:	40bfffc4 	addi	r2,r8,-1
  80e2f0:	3580ec2e 	bgeu	r6,r22,80e6a4 <__divdf3+0x7f8>
  80e2f4:	1011883a 	mov	r8,r2
  80e2f8:	9826943a 	slli	r19,r19,16
  80e2fc:	af3fffcc 	andi	fp,r21,65535
  80e300:	30c7c83a 	sub	r3,r6,r3
  80e304:	9a26b03a 	or	r19,r19,r8
  80e308:	9810d43a 	srli	r8,r19,16
  80e30c:	9abfffcc 	andi	r10,r19,65535
  80e310:	5009883a 	mov	r4,r10
  80e314:	e00b883a 	mov	r5,fp
  80e318:	d9c00515 	stw	r7,20(sp)
  80e31c:	d8c00315 	stw	r3,12(sp)
  80e320:	da800415 	stw	r10,16(sp)
  80e324:	da000015 	stw	r8,0(sp)
  80e328:	0802ba80 	call	802ba8 <__mulsi3>
  80e32c:	da000017 	ldw	r8,0(sp)
  80e330:	e00b883a 	mov	r5,fp
  80e334:	d8800215 	stw	r2,8(sp)
  80e338:	4009883a 	mov	r4,r8
  80e33c:	0802ba80 	call	802ba8 <__mulsi3>
  80e340:	da000017 	ldw	r8,0(sp)
  80e344:	a820d43a 	srli	r16,r21,16
  80e348:	d8800115 	stw	r2,4(sp)
  80e34c:	4009883a 	mov	r4,r8
  80e350:	800b883a 	mov	r5,r16
  80e354:	0802ba80 	call	802ba8 <__mulsi3>
  80e358:	da800417 	ldw	r10,16(sp)
  80e35c:	8009883a 	mov	r4,r16
  80e360:	d8800015 	stw	r2,0(sp)
  80e364:	500b883a 	mov	r5,r10
  80e368:	0802ba80 	call	802ba8 <__mulsi3>
  80e36c:	d9800217 	ldw	r6,8(sp)
  80e370:	da000117 	ldw	r8,4(sp)
  80e374:	da400017 	ldw	r9,0(sp)
  80e378:	3008d43a 	srli	r4,r6,16
  80e37c:	1205883a 	add	r2,r2,r8
  80e380:	d8c00317 	ldw	r3,12(sp)
  80e384:	2089883a 	add	r4,r4,r2
  80e388:	d9c00517 	ldw	r7,20(sp)
  80e38c:	2200022e 	bgeu	r4,r8,80e398 <__divdf3+0x4ec>
  80e390:	00800074 	movhi	r2,1
  80e394:	4893883a 	add	r9,r9,r2
  80e398:	200ad43a 	srli	r5,r4,16
  80e39c:	2008943a 	slli	r4,r4,16
  80e3a0:	31bfffcc 	andi	r6,r6,65535
  80e3a4:	2a4b883a 	add	r5,r5,r9
  80e3a8:	218d883a 	add	r6,r4,r6
  80e3ac:	19409436 	bltu	r3,r5,80e600 <__divdf3+0x754>
  80e3b0:	19409226 	beq	r3,r5,80e5fc <__divdf3+0x750>
  80e3b4:	898dc83a 	sub	r6,r17,r6
  80e3b8:	89a3803a 	cmpltu	r17,r17,r6
  80e3bc:	1947c83a 	sub	r3,r3,r5
  80e3c0:	1c47c83a 	sub	r3,r3,r17
  80e3c4:	9440ffc4 	addi	r17,r18,1023
  80e3c8:	b0c0d326 	beq	r22,r3,80e718 <__divdf3+0x86c>
  80e3cc:	1809883a 	mov	r4,r3
  80e3d0:	b80b883a 	mov	r5,r23
  80e3d4:	d9800315 	stw	r6,12(sp)
  80e3d8:	d9c00215 	stw	r7,8(sp)
  80e3dc:	d8c00015 	stw	r3,0(sp)
  80e3e0:	080d4fc0 	call	80d4fc <__udivsi3>
  80e3e4:	100b883a 	mov	r5,r2
  80e3e8:	a009883a 	mov	r4,r20
  80e3ec:	d8800115 	stw	r2,4(sp)
  80e3f0:	0802ba80 	call	802ba8 <__mulsi3>
  80e3f4:	d8c00017 	ldw	r3,0(sp)
  80e3f8:	b80b883a 	mov	r5,r23
  80e3fc:	d8800015 	stw	r2,0(sp)
  80e400:	1809883a 	mov	r4,r3
  80e404:	080d5600 	call	80d560 <__umodsi3>
  80e408:	d9800317 	ldw	r6,12(sp)
  80e40c:	1006943a 	slli	r3,r2,16
  80e410:	da400017 	ldw	r9,0(sp)
  80e414:	3008d43a 	srli	r4,r6,16
  80e418:	da000117 	ldw	r8,4(sp)
  80e41c:	d9c00217 	ldw	r7,8(sp)
  80e420:	20c6b03a 	or	r3,r4,r3
  80e424:	1a40062e 	bgeu	r3,r9,80e440 <__divdf3+0x594>
  80e428:	1d87883a 	add	r3,r3,r22
  80e42c:	40bfffc4 	addi	r2,r8,-1
  80e430:	1d80c836 	bltu	r3,r22,80e754 <__divdf3+0x8a8>
  80e434:	1a40c72e 	bgeu	r3,r9,80e754 <__divdf3+0x8a8>
  80e438:	423fff84 	addi	r8,r8,-2
  80e43c:	1d87883a 	add	r3,r3,r22
  80e440:	1a47c83a 	sub	r3,r3,r9
  80e444:	1809883a 	mov	r4,r3
  80e448:	b80b883a 	mov	r5,r23
  80e44c:	d9800415 	stw	r6,16(sp)
  80e450:	d9c00315 	stw	r7,12(sp)
  80e454:	da000215 	stw	r8,8(sp)
  80e458:	d8c00115 	stw	r3,4(sp)
  80e45c:	080d4fc0 	call	80d4fc <__udivsi3>
  80e460:	100b883a 	mov	r5,r2
  80e464:	a009883a 	mov	r4,r20
  80e468:	d8800015 	stw	r2,0(sp)
  80e46c:	0802ba80 	call	802ba8 <__mulsi3>
  80e470:	d8c00117 	ldw	r3,4(sp)
  80e474:	b80b883a 	mov	r5,r23
  80e478:	102f883a 	mov	r23,r2
  80e47c:	1809883a 	mov	r4,r3
  80e480:	080d5600 	call	80d560 <__umodsi3>
  80e484:	d9800417 	ldw	r6,16(sp)
  80e488:	1004943a 	slli	r2,r2,16
  80e48c:	da400017 	ldw	r9,0(sp)
  80e490:	31bfffcc 	andi	r6,r6,65535
  80e494:	308cb03a 	or	r6,r6,r2
  80e498:	da000217 	ldw	r8,8(sp)
  80e49c:	d9c00317 	ldw	r7,12(sp)
  80e4a0:	35c0062e 	bgeu	r6,r23,80e4bc <__divdf3+0x610>
  80e4a4:	358d883a 	add	r6,r6,r22
  80e4a8:	48bfffc4 	addi	r2,r9,-1
  80e4ac:	3580a736 	bltu	r6,r22,80e74c <__divdf3+0x8a0>
  80e4b0:	35c0a62e 	bgeu	r6,r23,80e74c <__divdf3+0x8a0>
  80e4b4:	4a7fff84 	addi	r9,r9,-2
  80e4b8:	358d883a 	add	r6,r6,r22
  80e4bc:	4028943a 	slli	r20,r8,16
  80e4c0:	35d5c83a 	sub	r10,r6,r23
  80e4c4:	e009883a 	mov	r4,fp
  80e4c8:	a268b03a 	or	r20,r20,r9
  80e4cc:	a23fffcc 	andi	r8,r20,65535
  80e4d0:	a02ed43a 	srli	r23,r20,16
  80e4d4:	400b883a 	mov	r5,r8
  80e4d8:	d9c00315 	stw	r7,12(sp)
  80e4dc:	da800215 	stw	r10,8(sp)
  80e4e0:	da000115 	stw	r8,4(sp)
  80e4e4:	0802ba80 	call	802ba8 <__mulsi3>
  80e4e8:	e00b883a 	mov	r5,fp
  80e4ec:	b809883a 	mov	r4,r23
  80e4f0:	1039883a 	mov	fp,r2
  80e4f4:	0802ba80 	call	802ba8 <__mulsi3>
  80e4f8:	8009883a 	mov	r4,r16
  80e4fc:	b80b883a 	mov	r5,r23
  80e500:	d8800015 	stw	r2,0(sp)
  80e504:	0802ba80 	call	802ba8 <__mulsi3>
  80e508:	da000117 	ldw	r8,4(sp)
  80e50c:	8009883a 	mov	r4,r16
  80e510:	1021883a 	mov	r16,r2
  80e514:	400b883a 	mov	r5,r8
  80e518:	0802ba80 	call	802ba8 <__mulsi3>
  80e51c:	d9800017 	ldw	r6,0(sp)
  80e520:	e006d43a 	srli	r3,fp,16
  80e524:	da800217 	ldw	r10,8(sp)
  80e528:	1185883a 	add	r2,r2,r6
  80e52c:	1887883a 	add	r3,r3,r2
  80e530:	d9c00317 	ldw	r7,12(sp)
  80e534:	1980022e 	bgeu	r3,r6,80e540 <__divdf3+0x694>
  80e538:	00800074 	movhi	r2,1
  80e53c:	80a1883a 	add	r16,r16,r2
  80e540:	1808d43a 	srli	r4,r3,16
  80e544:	1806943a 	slli	r3,r3,16
  80e548:	e73fffcc 	andi	fp,fp,65535
  80e54c:	2409883a 	add	r4,r4,r16
  80e550:	1f07883a 	add	r3,r3,fp
  80e554:	51000436 	bltu	r10,r4,80e568 <__divdf3+0x6bc>
  80e558:	51000226 	beq	r10,r4,80e564 <__divdf3+0x6b8>
  80e55c:	a5000054 	ori	r20,r20,1
  80e560:	003f0306 	br	80e170 <__divdf3+0x2c4>
  80e564:	183f0226 	beq	r3,zero,80e170 <__divdf3+0x2c4>
  80e568:	b28d883a 	add	r6,r22,r10
  80e56c:	a0bfffc4 	addi	r2,r20,-1
  80e570:	35806536 	bltu	r6,r22,80e708 <__divdf3+0x85c>
  80e574:	31008036 	bltu	r6,r4,80e778 <__divdf3+0x8cc>
  80e578:	31009426 	beq	r6,r4,80e7cc <__divdf3+0x920>
  80e57c:	1029883a 	mov	r20,r2
  80e580:	003ff606 	br	80e55c <__divdf3+0x6b0>
  80e584:	053fffc4 	movi	r20,-1
  80e588:	01400044 	movi	r5,1
  80e58c:	2c4bc83a 	sub	r5,r5,r17
  80e590:	28800e48 	cmpgei	r2,r5,57
  80e594:	103e941e 	bne	r2,zero,80dfe8 <__divdf3+0x13c>
  80e598:	28800808 	cmpgei	r2,r5,32
  80e59c:	1000491e 	bne	r2,zero,80e6c4 <__divdf3+0x818>
  80e5a0:	92010784 	addi	r8,r18,1054
  80e5a4:	9a04983a 	sll	r2,r19,r8
  80e5a8:	a146d83a 	srl	r3,r20,r5
  80e5ac:	a210983a 	sll	r8,r20,r8
  80e5b0:	994ad83a 	srl	r5,r19,r5
  80e5b4:	10e8b03a 	or	r20,r2,r3
  80e5b8:	4010c03a 	cmpne	r8,r8,zero
  80e5bc:	a228b03a 	or	r20,r20,r8
  80e5c0:	a08001cc 	andi	r2,r20,7
  80e5c4:	10000726 	beq	r2,zero,80e5e4 <__divdf3+0x738>
  80e5c8:	a08003cc 	andi	r2,r20,15
  80e5cc:	10800120 	cmpeqi	r2,r2,4
  80e5d0:	1000041e 	bne	r2,zero,80e5e4 <__divdf3+0x738>
  80e5d4:	a0800104 	addi	r2,r20,4
  80e5d8:	1529803a 	cmpltu	r20,r2,r20
  80e5dc:	2d0b883a 	add	r5,r5,r20
  80e5e0:	1029883a 	mov	r20,r2
  80e5e4:	2880202c 	andhi	r2,r5,128
  80e5e8:	10006f26 	beq	r2,zero,80e7a8 <__divdf3+0x8fc>
  80e5ec:	00c00044 	movi	r3,1
  80e5f0:	000b883a 	mov	r5,zero
  80e5f4:	0029883a 	mov	r20,zero
  80e5f8:	003e7e06 	br	80dff4 <__divdf3+0x148>
  80e5fc:	89bf6d2e 	bgeu	r17,r6,80e3b4 <__divdf3+0x508>
  80e600:	8d63883a 	add	r17,r17,r21
  80e604:	8d45803a 	cmpltu	r2,r17,r21
  80e608:	1585883a 	add	r2,r2,r22
  80e60c:	1887883a 	add	r3,r3,r2
  80e610:	98bfffc4 	addi	r2,r19,-1
  80e614:	b0c0202e 	bgeu	r22,r3,80e698 <__divdf3+0x7ec>
  80e618:	19405136 	bltu	r3,r5,80e760 <__divdf3+0x8b4>
  80e61c:	28c04f26 	beq	r5,r3,80e75c <__divdf3+0x8b0>
  80e620:	1027883a 	mov	r19,r2
  80e624:	003f6306 	br	80e3b4 <__divdf3+0x508>
  80e628:	a27efc36 	bltu	r20,r9,80e21c <__divdf3+0x370>
  80e62c:	983897fa 	slli	fp,r19,31
  80e630:	a004d07a 	srli	r2,r20,1
  80e634:	9820d07a 	srli	r16,r19,1
  80e638:	a02297fa 	slli	r17,r20,31
  80e63c:	e0b8b03a 	or	fp,fp,r2
  80e640:	003efa06 	br	80e22c <__divdf3+0x380>
  80e644:	e009883a 	mov	r4,fp
  80e648:	0802b540 	call	802b54 <__clzsi2>
  80e64c:	11400544 	addi	r5,r2,21
  80e650:	29000748 	cmpgei	r4,r5,29
  80e654:	1007883a 	mov	r3,r2
  80e658:	10800804 	addi	r2,r2,32
  80e65c:	203e8526 	beq	r4,zero,80e074 <__divdf3+0x1c8>
  80e660:	18fffe04 	addi	r3,r3,-8
  80e664:	e0ec983a 	sll	r22,fp,r3
  80e668:	0013883a 	mov	r9,zero
  80e66c:	003e8806 	br	80e090 <__divdf3+0x1e4>
  80e670:	0802b540 	call	802b54 <__clzsi2>
  80e674:	11000544 	addi	r4,r2,21
  80e678:	20c00748 	cmpgei	r3,r4,29
  80e67c:	100b883a 	mov	r5,r2
  80e680:	10800804 	addi	r2,r2,32
  80e684:	183e8d26 	beq	r3,zero,80e0bc <__divdf3+0x210>
  80e688:	297ffe04 	addi	r5,r5,-8
  80e68c:	a166983a 	sll	r19,r20,r5
  80e690:	0029883a 	mov	r20,zero
  80e694:	003e9006 	br	80e0d8 <__divdf3+0x22c>
  80e698:	b0ffe11e 	bne	r22,r3,80e620 <__divdf3+0x774>
  80e69c:	8d7fe036 	bltu	r17,r21,80e620 <__divdf3+0x774>
  80e6a0:	003fdd06 	br	80e618 <__divdf3+0x76c>
  80e6a4:	30ff132e 	bgeu	r6,r3,80e2f4 <__divdf3+0x448>
  80e6a8:	423fff84 	addi	r8,r8,-2
  80e6ac:	358d883a 	add	r6,r6,r22
  80e6b0:	003f1106 	br	80e2f8 <__divdf3+0x44c>
  80e6b4:	243ef72e 	bgeu	r4,r16,80e294 <__divdf3+0x3e8>
  80e6b8:	9cffff84 	addi	r19,r19,-2
  80e6bc:	2589883a 	add	r4,r4,r22
  80e6c0:	003ef506 	br	80e298 <__divdf3+0x3ec>
  80e6c4:	00fff844 	movi	r3,-31
  80e6c8:	1c47c83a 	sub	r3,r3,r17
  80e6cc:	29400820 	cmpeqi	r5,r5,32
  80e6d0:	98c6d83a 	srl	r3,r19,r3
  80e6d4:	2800031e 	bne	r5,zero,80e6e4 <__divdf3+0x838>
  80e6d8:	91410f84 	addi	r5,r18,1086
  80e6dc:	994a983a 	sll	r5,r19,r5
  80e6e0:	a168b03a 	or	r20,r20,r5
  80e6e4:	a028c03a 	cmpne	r20,r20,zero
  80e6e8:	a0e8b03a 	or	r20,r20,r3
  80e6ec:	a4c001cc 	andi	r19,r20,7
  80e6f0:	9800291e 	bne	r19,zero,80e798 <__divdf3+0x8ec>
  80e6f4:	000b883a 	mov	r5,zero
  80e6f8:	a028d0fa 	srli	r20,r20,3
  80e6fc:	0007883a 	mov	r3,zero
  80e700:	a4e8b03a 	or	r20,r20,r19
  80e704:	003e3b06 	br	80dff4 <__divdf3+0x148>
  80e708:	1029883a 	mov	r20,r2
  80e70c:	313f931e 	bne	r6,r4,80e55c <__divdf3+0x6b0>
  80e710:	1d7f921e 	bne	r3,r21,80e55c <__divdf3+0x6b0>
  80e714:	003e9606 	br	80e170 <__divdf3+0x2c4>
  80e718:	047f9a0e 	bge	zero,r17,80e584 <__divdf3+0x6d8>
  80e71c:	0009883a 	mov	r4,zero
  80e720:	05000044 	movi	r20,1
  80e724:	9d27883a 	add	r19,r19,r20
  80e728:	003e9506 	br	80e180 <__divdf3+0x2d4>
  80e72c:	a08003cc 	andi	r2,r20,15
  80e730:	10800118 	cmpnei	r2,r2,4
  80e734:	103e9126 	beq	r2,zero,80e17c <__divdf3+0x2d0>
  80e738:	a1000104 	addi	r4,r20,4
  80e73c:	00bffec4 	movi	r2,-5
  80e740:	2008d0fa 	srli	r4,r4,3
  80e744:	1529803a 	cmpltu	r20,r2,r20
  80e748:	003ff606 	br	80e724 <__divdf3+0x878>
  80e74c:	1013883a 	mov	r9,r2
  80e750:	003f5a06 	br	80e4bc <__divdf3+0x610>
  80e754:	1011883a 	mov	r8,r2
  80e758:	003f3906 	br	80e440 <__divdf3+0x594>
  80e75c:	89bfb02e 	bgeu	r17,r6,80e620 <__divdf3+0x774>
  80e760:	8d63883a 	add	r17,r17,r21
  80e764:	8d45803a 	cmpltu	r2,r17,r21
  80e768:	1585883a 	add	r2,r2,r22
  80e76c:	9cffff84 	addi	r19,r19,-2
  80e770:	1887883a 	add	r3,r3,r2
  80e774:	003f0f06 	br	80e3b4 <__divdf3+0x508>
  80e778:	ad45883a 	add	r2,r21,r21
  80e77c:	156b803a 	cmpltu	r21,r2,r21
  80e780:	adad883a 	add	r22,r21,r22
  80e784:	358d883a 	add	r6,r6,r22
  80e788:	a53fff84 	addi	r20,r20,-2
  80e78c:	102b883a 	mov	r21,r2
  80e790:	313fdf26 	beq	r6,r4,80e710 <__divdf3+0x864>
  80e794:	003f7106 	br	80e55c <__divdf3+0x6b0>
  80e798:	a08003cc 	andi	r2,r20,15
  80e79c:	10800118 	cmpnei	r2,r2,4
  80e7a0:	000b883a 	mov	r5,zero
  80e7a4:	103f8b1e 	bne	r2,zero,80e5d4 <__divdf3+0x728>
  80e7a8:	2804927a 	slli	r2,r5,9
  80e7ac:	2826977a 	slli	r19,r5,29
  80e7b0:	100ad33a 	srli	r5,r2,12
  80e7b4:	003fd006 	br	80e6f8 <__divdf3+0x84c>
  80e7b8:	00800434 	movhi	r2,16
  80e7bc:	99400234 	orhi	r5,r19,8
  80e7c0:	10bfffc4 	addi	r2,r2,-1
  80e7c4:	288a703a 	and	r5,r5,r2
  80e7c8:	003e7f06 	br	80e1c8 <__divdf3+0x31c>
  80e7cc:	a8ffea36 	bltu	r21,r3,80e778 <__divdf3+0x8cc>
  80e7d0:	1029883a 	mov	r20,r2
  80e7d4:	1d7f611e 	bne	r3,r21,80e55c <__divdf3+0x6b0>
  80e7d8:	003e6506 	br	80e170 <__divdf3+0x2c4>

0080e7dc <__eqdf2>:
  80e7dc:	2810d53a 	srli	r8,r5,20
  80e7e0:	3806d53a 	srli	r3,r7,20
  80e7e4:	00800434 	movhi	r2,16
  80e7e8:	4201ffcc 	andi	r8,r8,2047
  80e7ec:	10bfffc4 	addi	r2,r2,-1
  80e7f0:	4241ffd8 	cmpnei	r9,r8,2047
  80e7f4:	2814d7fa 	srli	r10,r5,31
  80e7f8:	3816d7fa 	srli	r11,r7,31
  80e7fc:	288a703a 	and	r5,r5,r2
  80e800:	388e703a 	and	r7,r7,r2
  80e804:	1881ffcc 	andi	r2,r3,2047
  80e808:	48000626 	beq	r9,zero,80e824 <__eqdf2+0x48>
  80e80c:	10c1ffe0 	cmpeqi	r3,r2,2047
  80e810:	1800021e 	bne	r3,zero,80e81c <__eqdf2+0x40>
  80e814:	4080011e 	bne	r8,r2,80e81c <__eqdf2+0x40>
  80e818:	29c00826 	beq	r5,r7,80e83c <__eqdf2+0x60>
  80e81c:	00800044 	movi	r2,1
  80e820:	f800283a 	ret
  80e824:	2906b03a 	or	r3,r5,r4
  80e828:	183ffc1e 	bne	r3,zero,80e81c <__eqdf2+0x40>
  80e82c:	1081ffd8 	cmpnei	r2,r2,2047
  80e830:	103ffa1e 	bne	r2,zero,80e81c <__eqdf2+0x40>
  80e834:	398eb03a 	or	r7,r7,r6
  80e838:	383ff81e 	bne	r7,zero,80e81c <__eqdf2+0x40>
  80e83c:	21bff71e 	bne	r4,r6,80e81c <__eqdf2+0x40>
  80e840:	52c00426 	beq	r10,r11,80e854 <__eqdf2+0x78>
  80e844:	403ff51e 	bne	r8,zero,80e81c <__eqdf2+0x40>
  80e848:	290ab03a 	or	r5,r5,r4
  80e84c:	2804c03a 	cmpne	r2,r5,zero
  80e850:	f800283a 	ret
  80e854:	0005883a 	mov	r2,zero
  80e858:	f800283a 	ret

0080e85c <__gedf2>:
  80e85c:	2810d53a 	srli	r8,r5,20
  80e860:	3812d53a 	srli	r9,r7,20
  80e864:	00c00434 	movhi	r3,16
  80e868:	4201ffcc 	andi	r8,r8,2047
  80e86c:	18ffffc4 	addi	r3,r3,-1
  80e870:	4281ffd8 	cmpnei	r10,r8,2047
  80e874:	2816d7fa 	srli	r11,r5,31
  80e878:	3804d7fa 	srli	r2,r7,31
  80e87c:	28ca703a 	and	r5,r5,r3
  80e880:	38ce703a 	and	r7,r7,r3
  80e884:	48c1ffcc 	andi	r3,r9,2047
  80e888:	50000a26 	beq	r10,zero,80e8b4 <__gedf2+0x58>
  80e88c:	1a41ffd8 	cmpnei	r9,r3,2047
  80e890:	48000c26 	beq	r9,zero,80e8c4 <__gedf2+0x68>
  80e894:	4000171e 	bne	r8,zero,80e8f4 <__gedf2+0x98>
  80e898:	2912b03a 	or	r9,r5,r4
  80e89c:	1800121e 	bne	r3,zero,80e8e8 <__gedf2+0x8c>
  80e8a0:	3994b03a 	or	r10,r7,r6
  80e8a4:	5000101e 	bne	r10,zero,80e8e8 <__gedf2+0x8c>
  80e8a8:	48000a1e 	bne	r9,zero,80e8d4 <__gedf2+0x78>
  80e8ac:	0005883a 	mov	r2,zero
  80e8b0:	f800283a 	ret
  80e8b4:	2912b03a 	or	r9,r5,r4
  80e8b8:	48001d1e 	bne	r9,zero,80e930 <__gedf2+0xd4>
  80e8bc:	1a41ffe0 	cmpeqi	r9,r3,2047
  80e8c0:	48000c26 	beq	r9,zero,80e8f4 <__gedf2+0x98>
  80e8c4:	3992b03a 	or	r9,r7,r6
  80e8c8:	4800191e 	bne	r9,zero,80e930 <__gedf2+0xd4>
  80e8cc:	40000526 	beq	r8,zero,80e8e4 <__gedf2+0x88>
  80e8d0:	58800c26 	beq	r11,r2,80e904 <__gedf2+0xa8>
  80e8d4:	00800044 	movi	r2,1
  80e8d8:	58000526 	beq	r11,zero,80e8f0 <__gedf2+0x94>
  80e8dc:	00bfffc4 	movi	r2,-1
  80e8e0:	f800283a 	ret
  80e8e4:	2912b03a 	or	r9,r5,r4
  80e8e8:	483ff91e 	bne	r9,zero,80e8d0 <__gedf2+0x74>
  80e8ec:	103ffb26 	beq	r2,zero,80e8dc <__gedf2+0x80>
  80e8f0:	f800283a 	ret
  80e8f4:	183ff61e 	bne	r3,zero,80e8d0 <__gedf2+0x74>
  80e8f8:	3992b03a 	or	r9,r7,r6
  80e8fc:	483ff41e 	bne	r9,zero,80e8d0 <__gedf2+0x74>
  80e900:	003ff406 	br	80e8d4 <__gedf2+0x78>
  80e904:	1a000716 	blt	r3,r8,80e924 <__gedf2+0xc8>
  80e908:	40fff816 	blt	r8,r3,80e8ec <__gedf2+0x90>
  80e90c:	397ff136 	bltu	r7,r5,80e8d4 <__gedf2+0x78>
  80e910:	29c00926 	beq	r5,r7,80e938 <__gedf2+0xdc>
  80e914:	29ffe52e 	bgeu	r5,r7,80e8ac <__gedf2+0x50>
  80e918:	583ff026 	beq	r11,zero,80e8dc <__gedf2+0x80>
  80e91c:	5805883a 	mov	r2,r11
  80e920:	f800283a 	ret
  80e924:	103fed1e 	bne	r2,zero,80e8dc <__gedf2+0x80>
  80e928:	00800044 	movi	r2,1
  80e92c:	f800283a 	ret
  80e930:	00bfff84 	movi	r2,-2
  80e934:	f800283a 	ret
  80e938:	313fe636 	bltu	r6,r4,80e8d4 <__gedf2+0x78>
  80e93c:	21bfdb2e 	bgeu	r4,r6,80e8ac <__gedf2+0x50>
  80e940:	003ff506 	br	80e918 <__gedf2+0xbc>

0080e944 <__ledf2>:
  80e944:	2810d53a 	srli	r8,r5,20
  80e948:	3812d53a 	srli	r9,r7,20
  80e94c:	00c00434 	movhi	r3,16
  80e950:	4201ffcc 	andi	r8,r8,2047
  80e954:	18ffffc4 	addi	r3,r3,-1
  80e958:	4281ffd8 	cmpnei	r10,r8,2047
  80e95c:	2816d7fa 	srli	r11,r5,31
  80e960:	3804d7fa 	srli	r2,r7,31
  80e964:	28ca703a 	and	r5,r5,r3
  80e968:	38ce703a 	and	r7,r7,r3
  80e96c:	48c1ffcc 	andi	r3,r9,2047
  80e970:	50000a26 	beq	r10,zero,80e99c <__ledf2+0x58>
  80e974:	1a41ffd8 	cmpnei	r9,r3,2047
  80e978:	48000c26 	beq	r9,zero,80e9ac <__ledf2+0x68>
  80e97c:	4000191e 	bne	r8,zero,80e9e4 <__ledf2+0xa0>
  80e980:	2912b03a 	or	r9,r5,r4
  80e984:	18000d1e 	bne	r3,zero,80e9bc <__ledf2+0x78>
  80e988:	3994b03a 	or	r10,r7,r6
  80e98c:	50000b1e 	bne	r10,zero,80e9bc <__ledf2+0x78>
  80e990:	48000c1e 	bne	r9,zero,80e9c4 <__ledf2+0x80>
  80e994:	0005883a 	mov	r2,zero
  80e998:	f800283a 	ret
  80e99c:	2912b03a 	or	r9,r5,r4
  80e9a0:	48000c1e 	bne	r9,zero,80e9d4 <__ledf2+0x90>
  80e9a4:	1a41ffe0 	cmpeqi	r9,r3,2047
  80e9a8:	48000e26 	beq	r9,zero,80e9e4 <__ledf2+0xa0>
  80e9ac:	3992b03a 	or	r9,r7,r6
  80e9b0:	4800081e 	bne	r9,zero,80e9d4 <__ledf2+0x90>
  80e9b4:	4000021e 	bne	r8,zero,80e9c0 <__ledf2+0x7c>
  80e9b8:	2912b03a 	or	r9,r5,r4
  80e9bc:	48000726 	beq	r9,zero,80e9dc <__ledf2+0x98>
  80e9c0:	58800c26 	beq	r11,r2,80e9f4 <__ledf2+0xb0>
  80e9c4:	00800044 	movi	r2,1
  80e9c8:	58000526 	beq	r11,zero,80e9e0 <__ledf2+0x9c>
  80e9cc:	00bfffc4 	movi	r2,-1
  80e9d0:	f800283a 	ret
  80e9d4:	00800084 	movi	r2,2
  80e9d8:	f800283a 	ret
  80e9dc:	103ffb26 	beq	r2,zero,80e9cc <__ledf2+0x88>
  80e9e0:	f800283a 	ret
  80e9e4:	183ff61e 	bne	r3,zero,80e9c0 <__ledf2+0x7c>
  80e9e8:	3992b03a 	or	r9,r7,r6
  80e9ec:	483ff41e 	bne	r9,zero,80e9c0 <__ledf2+0x7c>
  80e9f0:	003ff406 	br	80e9c4 <__ledf2+0x80>
  80e9f4:	1a00030e 	bge	r3,r8,80ea04 <__ledf2+0xc0>
  80e9f8:	103ff41e 	bne	r2,zero,80e9cc <__ledf2+0x88>
  80e9fc:	00800044 	movi	r2,1
  80ea00:	f800283a 	ret
  80ea04:	40fff516 	blt	r8,r3,80e9dc <__ledf2+0x98>
  80ea08:	397fee36 	bltu	r7,r5,80e9c4 <__ledf2+0x80>
  80ea0c:	29c00426 	beq	r5,r7,80ea20 <__ledf2+0xdc>
  80ea10:	29ffe02e 	bgeu	r5,r7,80e994 <__ledf2+0x50>
  80ea14:	583fed26 	beq	r11,zero,80e9cc <__ledf2+0x88>
  80ea18:	5805883a 	mov	r2,r11
  80ea1c:	f800283a 	ret
  80ea20:	313fe836 	bltu	r6,r4,80e9c4 <__ledf2+0x80>
  80ea24:	21bfdb2e 	bgeu	r4,r6,80e994 <__ledf2+0x50>
  80ea28:	003ffa06 	br	80ea14 <__ledf2+0xd0>

0080ea2c <__muldf3>:
  80ea2c:	2810d53a 	srli	r8,r5,20
  80ea30:	defff004 	addi	sp,sp,-64
  80ea34:	00800434 	movhi	r2,16
  80ea38:	df000e15 	stw	fp,56(sp)
  80ea3c:	dd000a15 	stw	r20,40(sp)
  80ea40:	dcc00915 	stw	r19,36(sp)
  80ea44:	dc400715 	stw	r17,28(sp)
  80ea48:	10bfffc4 	addi	r2,r2,-1
  80ea4c:	dfc00f15 	stw	ra,60(sp)
  80ea50:	ddc00d15 	stw	r23,52(sp)
  80ea54:	dd800c15 	stw	r22,48(sp)
  80ea58:	dd400b15 	stw	r21,44(sp)
  80ea5c:	dc800815 	stw	r18,32(sp)
  80ea60:	dc000615 	stw	r16,24(sp)
  80ea64:	4201ffcc 	andi	r8,r8,2047
  80ea68:	2828d7fa 	srli	r20,r5,31
  80ea6c:	2023883a 	mov	r17,r4
  80ea70:	3039883a 	mov	fp,r6
  80ea74:	28a6703a 	and	r19,r5,r2
  80ea78:	40013426 	beq	r8,zero,80ef4c <__muldf3+0x520>
  80ea7c:	4081ffe0 	cmpeqi	r2,r8,2047
  80ea80:	1001461e 	bne	r2,zero,80ef9c <__muldf3+0x570>
  80ea84:	980a90fa 	slli	r5,r19,3
  80ea88:	2026d77a 	srli	r19,r4,29
  80ea8c:	202490fa 	slli	r18,r4,3
  80ea90:	423f0044 	addi	r8,r8,-1023
  80ea94:	9966b03a 	or	r19,r19,r5
  80ea98:	9cc02034 	orhi	r19,r19,128
  80ea9c:	002b883a 	mov	r21,zero
  80eaa0:	002d883a 	mov	r22,zero
  80eaa4:	3804d53a 	srli	r2,r7,20
  80eaa8:	00c00434 	movhi	r3,16
  80eaac:	18ffffc4 	addi	r3,r3,-1
  80eab0:	1081ffcc 	andi	r2,r2,2047
  80eab4:	382ed7fa 	srli	r23,r7,31
  80eab8:	38e0703a 	and	r16,r7,r3
  80eabc:	10011026 	beq	r2,zero,80ef00 <__muldf3+0x4d4>
  80eac0:	10c1ffe0 	cmpeqi	r3,r2,2047
  80eac4:	18013c1e 	bne	r3,zero,80efb8 <__muldf3+0x58c>
  80eac8:	e008d77a 	srli	r4,fp,29
  80eacc:	802090fa 	slli	r16,r16,3
  80ead0:	e02290fa 	slli	r17,fp,3
  80ead4:	10bf0044 	addi	r2,r2,-1023
  80ead8:	2420b03a 	or	r16,r4,r16
  80eadc:	84002034 	orhi	r16,r16,128
  80eae0:	4091883a 	add	r8,r8,r2
  80eae4:	0009883a 	mov	r4,zero
  80eae8:	a8800428 	cmpgeui	r2,r21,16
  80eaec:	a5ccf03a 	xor	r6,r20,r23
  80eaf0:	41c00044 	addi	r7,r8,1
  80eaf4:	1000371e 	bne	r2,zero,80ebd4 <__muldf3+0x1a8>
  80eaf8:	a80490ba 	slli	r2,r21,2
  80eafc:	00c02074 	movhi	r3,129
  80eb00:	10c7883a 	add	r3,r2,r3
  80eb04:	18bac317 	ldw	r2,-5364(r3)
  80eb08:	1000683a 	jmp	r2
  80eb0c:	0080ebd4 	movui	r2,943
  80eb10:	0080eb50 	cmplti	r2,zero,941
  80eb14:	0080eb50 	cmplti	r2,zero,941
  80eb18:	0080eb4c 	andi	r2,zero,941
  80eb1c:	0080eb5c 	xori	r2,zero,941
  80eb20:	0080eb5c 	xori	r2,zero,941
  80eb24:	0080f02c 	andhi	r2,zero,960
  80eb28:	0080eb4c 	andi	r2,zero,941
  80eb2c:	0080eb5c 	xori	r2,zero,941
  80eb30:	0080f02c 	andhi	r2,zero,960
  80eb34:	0080eb5c 	xori	r2,zero,941
  80eb38:	0080eb4c 	andi	r2,zero,941
  80eb3c:	0080efd4 	movui	r2,959
  80eb40:	0080efd4 	movui	r2,959
  80eb44:	0080efd4 	movui	r2,959
  80eb48:	0080f0b8 	rdprs	r2,zero,962
  80eb4c:	b80d883a 	mov	r6,r23
  80eb50:	8027883a 	mov	r19,r16
  80eb54:	8825883a 	mov	r18,r17
  80eb58:	202d883a 	mov	r22,r4
  80eb5c:	b08000a0 	cmpeqi	r2,r22,2
  80eb60:	1000181e 	bne	r2,zero,80ebc4 <__muldf3+0x198>
  80eb64:	b08000e0 	cmpeqi	r2,r22,3
  80eb68:	1001961e 	bne	r2,zero,80f1c4 <__muldf3+0x798>
  80eb6c:	b0800060 	cmpeqi	r2,r22,1
  80eb70:	1000c926 	beq	r2,zero,80ee98 <__muldf3+0x46c>
  80eb74:	0007883a 	mov	r3,zero
  80eb78:	0027883a 	mov	r19,zero
  80eb7c:	0025883a 	mov	r18,zero
  80eb80:	1806953a 	slli	r3,r3,20
  80eb84:	300c97fa 	slli	r6,r6,31
  80eb88:	9005883a 	mov	r2,r18
  80eb8c:	1cc6b03a 	or	r3,r3,r19
  80eb90:	1986b03a 	or	r3,r3,r6
  80eb94:	dfc00f17 	ldw	ra,60(sp)
  80eb98:	df000e17 	ldw	fp,56(sp)
  80eb9c:	ddc00d17 	ldw	r23,52(sp)
  80eba0:	dd800c17 	ldw	r22,48(sp)
  80eba4:	dd400b17 	ldw	r21,44(sp)
  80eba8:	dd000a17 	ldw	r20,40(sp)
  80ebac:	dcc00917 	ldw	r19,36(sp)
  80ebb0:	dc800817 	ldw	r18,32(sp)
  80ebb4:	dc400717 	ldw	r17,28(sp)
  80ebb8:	dc000617 	ldw	r16,24(sp)
  80ebbc:	dec01004 	addi	sp,sp,64
  80ebc0:	f800283a 	ret
  80ebc4:	00c1ffc4 	movi	r3,2047
  80ebc8:	0027883a 	mov	r19,zero
  80ebcc:	0025883a 	mov	r18,zero
  80ebd0:	003feb06 	br	80eb80 <__muldf3+0x154>
  80ebd4:	9028d43a 	srli	r20,r18,16
  80ebd8:	8f3fffcc 	andi	fp,r17,65535
  80ebdc:	957fffcc 	andi	r21,r18,65535
  80ebe0:	a80b883a 	mov	r5,r21
  80ebe4:	e009883a 	mov	r4,fp
  80ebe8:	d9800315 	stw	r6,12(sp)
  80ebec:	da000215 	stw	r8,8(sp)
  80ebf0:	d9c00115 	stw	r7,4(sp)
  80ebf4:	8822d43a 	srli	r17,r17,16
  80ebf8:	0802ba80 	call	802ba8 <__mulsi3>
  80ebfc:	e00b883a 	mov	r5,fp
  80ec00:	a009883a 	mov	r4,r20
  80ec04:	102d883a 	mov	r22,r2
  80ec08:	0802ba80 	call	802ba8 <__mulsi3>
  80ec0c:	880b883a 	mov	r5,r17
  80ec10:	a009883a 	mov	r4,r20
  80ec14:	102f883a 	mov	r23,r2
  80ec18:	0802ba80 	call	802ba8 <__mulsi3>
  80ec1c:	a80b883a 	mov	r5,r21
  80ec20:	8809883a 	mov	r4,r17
  80ec24:	d8800015 	stw	r2,0(sp)
  80ec28:	0802ba80 	call	802ba8 <__mulsi3>
  80ec2c:	b006d43a 	srli	r3,r22,16
  80ec30:	15e5883a 	add	r18,r2,r23
  80ec34:	d9c00117 	ldw	r7,4(sp)
  80ec38:	1c87883a 	add	r3,r3,r18
  80ec3c:	da000217 	ldw	r8,8(sp)
  80ec40:	d9800317 	ldw	r6,12(sp)
  80ec44:	1dc0042e 	bgeu	r3,r23,80ec58 <__muldf3+0x22c>
  80ec48:	d9000017 	ldw	r4,0(sp)
  80ec4c:	00800074 	movhi	r2,1
  80ec50:	2085883a 	add	r2,r4,r2
  80ec54:	d8800015 	stw	r2,0(sp)
  80ec58:	1804943a 	slli	r2,r3,16
  80ec5c:	85ffffcc 	andi	r23,r16,65535
  80ec60:	b5bfffcc 	andi	r22,r22,65535
  80ec64:	1585883a 	add	r2,r2,r22
  80ec68:	a80b883a 	mov	r5,r21
  80ec6c:	b809883a 	mov	r4,r23
  80ec70:	1824d43a 	srli	r18,r3,16
  80ec74:	d9800515 	stw	r6,20(sp)
  80ec78:	da000415 	stw	r8,16(sp)
  80ec7c:	d9c00315 	stw	r7,12(sp)
  80ec80:	8020d43a 	srli	r16,r16,16
  80ec84:	d8800115 	stw	r2,4(sp)
  80ec88:	0802ba80 	call	802ba8 <__mulsi3>
  80ec8c:	a009883a 	mov	r4,r20
  80ec90:	b80b883a 	mov	r5,r23
  80ec94:	d8800215 	stw	r2,8(sp)
  80ec98:	0802ba80 	call	802ba8 <__mulsi3>
  80ec9c:	a009883a 	mov	r4,r20
  80eca0:	800b883a 	mov	r5,r16
  80eca4:	102d883a 	mov	r22,r2
  80eca8:	0802ba80 	call	802ba8 <__mulsi3>
  80ecac:	a80b883a 	mov	r5,r21
  80ecb0:	8009883a 	mov	r4,r16
  80ecb4:	1029883a 	mov	r20,r2
  80ecb8:	0802ba80 	call	802ba8 <__mulsi3>
  80ecbc:	da800217 	ldw	r10,8(sp)
  80ecc0:	1585883a 	add	r2,r2,r22
  80ecc4:	d9c00317 	ldw	r7,12(sp)
  80ecc8:	5006d43a 	srli	r3,r10,16
  80eccc:	da000417 	ldw	r8,16(sp)
  80ecd0:	d9800517 	ldw	r6,20(sp)
  80ecd4:	1887883a 	add	r3,r3,r2
  80ecd8:	1d80022e 	bgeu	r3,r22,80ece4 <__muldf3+0x2b8>
  80ecdc:	00800074 	movhi	r2,1
  80ece0:	a0a9883a 	add	r20,r20,r2
  80ece4:	1804d43a 	srli	r2,r3,16
  80ece8:	1806943a 	slli	r3,r3,16
  80ecec:	982cd43a 	srli	r22,r19,16
  80ecf0:	9d7fffcc 	andi	r21,r19,65535
  80ecf4:	e009883a 	mov	r4,fp
  80ecf8:	54ffffcc 	andi	r19,r10,65535
  80ecfc:	a80b883a 	mov	r5,r21
  80ed00:	1ce7883a 	add	r19,r3,r19
  80ed04:	d9800515 	stw	r6,20(sp)
  80ed08:	da000415 	stw	r8,16(sp)
  80ed0c:	d9c00315 	stw	r7,12(sp)
  80ed10:	1529883a 	add	r20,r2,r20
  80ed14:	0802ba80 	call	802ba8 <__mulsi3>
  80ed18:	e00b883a 	mov	r5,fp
  80ed1c:	b009883a 	mov	r4,r22
  80ed20:	d8800215 	stw	r2,8(sp)
  80ed24:	0802ba80 	call	802ba8 <__mulsi3>
  80ed28:	8809883a 	mov	r4,r17
  80ed2c:	b00b883a 	mov	r5,r22
  80ed30:	1039883a 	mov	fp,r2
  80ed34:	0802ba80 	call	802ba8 <__mulsi3>
  80ed38:	8809883a 	mov	r4,r17
  80ed3c:	a80b883a 	mov	r5,r21
  80ed40:	1023883a 	mov	r17,r2
  80ed44:	0802ba80 	call	802ba8 <__mulsi3>
  80ed48:	d8c00217 	ldw	r3,8(sp)
  80ed4c:	1705883a 	add	r2,r2,fp
  80ed50:	d9c00317 	ldw	r7,12(sp)
  80ed54:	1808d43a 	srli	r4,r3,16
  80ed58:	da000417 	ldw	r8,16(sp)
  80ed5c:	d9800517 	ldw	r6,20(sp)
  80ed60:	2089883a 	add	r4,r4,r2
  80ed64:	94e5883a 	add	r18,r18,r19
  80ed68:	2700022e 	bgeu	r4,fp,80ed74 <__muldf3+0x348>
  80ed6c:	00800074 	movhi	r2,1
  80ed70:	88a3883a 	add	r17,r17,r2
  80ed74:	2004d43a 	srli	r2,r4,16
  80ed78:	2038943a 	slli	fp,r4,16
  80ed7c:	18ffffcc 	andi	r3,r3,65535
  80ed80:	b809883a 	mov	r4,r23
  80ed84:	a80b883a 	mov	r5,r21
  80ed88:	d9800415 	stw	r6,16(sp)
  80ed8c:	da000315 	stw	r8,12(sp)
  80ed90:	d9c00215 	stw	r7,8(sp)
  80ed94:	e0f9883a 	add	fp,fp,r3
  80ed98:	1463883a 	add	r17,r2,r17
  80ed9c:	0802ba80 	call	802ba8 <__mulsi3>
  80eda0:	b80b883a 	mov	r5,r23
  80eda4:	b009883a 	mov	r4,r22
  80eda8:	102f883a 	mov	r23,r2
  80edac:	0802ba80 	call	802ba8 <__mulsi3>
  80edb0:	b00b883a 	mov	r5,r22
  80edb4:	8009883a 	mov	r4,r16
  80edb8:	102d883a 	mov	r22,r2
  80edbc:	0802ba80 	call	802ba8 <__mulsi3>
  80edc0:	a80b883a 	mov	r5,r21
  80edc4:	8009883a 	mov	r4,r16
  80edc8:	1021883a 	mov	r16,r2
  80edcc:	0802ba80 	call	802ba8 <__mulsi3>
  80edd0:	b80ad43a 	srli	r5,r23,16
  80edd4:	1585883a 	add	r2,r2,r22
  80edd8:	d9c00217 	ldw	r7,8(sp)
  80eddc:	288b883a 	add	r5,r5,r2
  80ede0:	da000317 	ldw	r8,12(sp)
  80ede4:	d9800417 	ldw	r6,16(sp)
  80ede8:	2d80022e 	bgeu	r5,r22,80edf4 <__muldf3+0x3c8>
  80edec:	00800074 	movhi	r2,1
  80edf0:	80a1883a 	add	r16,r16,r2
  80edf4:	2806943a 	slli	r3,r5,16
  80edf8:	d8800017 	ldw	r2,0(sp)
  80edfc:	bdffffcc 	andi	r23,r23,65535
  80ee00:	1dc7883a 	add	r3,r3,r23
  80ee04:	90ab883a 	add	r21,r18,r2
  80ee08:	acd5803a 	cmpltu	r10,r21,r19
  80ee0c:	1d07883a 	add	r3,r3,r20
  80ee10:	af2b883a 	add	r21,r21,fp
  80ee14:	1a97883a 	add	r11,r3,r10
  80ee18:	af09803a 	cmpltu	r4,r21,fp
  80ee1c:	2826d43a 	srli	r19,r5,16
  80ee20:	5c53883a 	add	r9,r11,r17
  80ee24:	4905883a 	add	r2,r9,r4
  80ee28:	1d07803a 	cmpltu	r3,r3,r20
  80ee2c:	5a95803a 	cmpltu	r10,r11,r10
  80ee30:	1a86b03a 	or	r3,r3,r10
  80ee34:	1109803a 	cmpltu	r4,r2,r4
  80ee38:	4c53803a 	cmpltu	r9,r9,r17
  80ee3c:	1ce7883a 	add	r19,r3,r19
  80ee40:	4908b03a 	or	r4,r9,r4
  80ee44:	a824927a 	slli	r18,r21,9
  80ee48:	d8c00117 	ldw	r3,4(sp)
  80ee4c:	9927883a 	add	r19,r19,r4
  80ee50:	9c27883a 	add	r19,r19,r16
  80ee54:	9826927a 	slli	r19,r19,9
  80ee58:	a82ad5fa 	srli	r21,r21,23
  80ee5c:	100ad5fa 	srli	r5,r2,23
  80ee60:	90e4b03a 	or	r18,r18,r3
  80ee64:	1004927a 	slli	r2,r2,9
  80ee68:	9024c03a 	cmpne	r18,r18,zero
  80ee6c:	9564b03a 	or	r18,r18,r21
  80ee70:	98c0402c 	andhi	r3,r19,256
  80ee74:	90a4b03a 	or	r18,r18,r2
  80ee78:	9966b03a 	or	r19,r19,r5
  80ee7c:	1800b626 	beq	r3,zero,80f158 <__muldf3+0x72c>
  80ee80:	9006d07a 	srli	r3,r18,1
  80ee84:	980497fa 	slli	r2,r19,31
  80ee88:	9480004c 	andi	r18,r18,1
  80ee8c:	9826d07a 	srli	r19,r19,1
  80ee90:	1c86b03a 	or	r3,r3,r18
  80ee94:	18a4b03a 	or	r18,r3,r2
  80ee98:	3900ffc4 	addi	r4,r7,1023
  80ee9c:	0100690e 	bge	zero,r4,80f044 <__muldf3+0x618>
  80eea0:	908001cc 	andi	r2,r18,7
  80eea4:	10000726 	beq	r2,zero,80eec4 <__muldf3+0x498>
  80eea8:	908003cc 	andi	r2,r18,15
  80eeac:	10800120 	cmpeqi	r2,r2,4
  80eeb0:	1000041e 	bne	r2,zero,80eec4 <__muldf3+0x498>
  80eeb4:	90800104 	addi	r2,r18,4
  80eeb8:	14a5803a 	cmpltu	r18,r2,r18
  80eebc:	9ca7883a 	add	r19,r19,r18
  80eec0:	1025883a 	mov	r18,r2
  80eec4:	9880402c 	andhi	r2,r19,256
  80eec8:	10000426 	beq	r2,zero,80eedc <__muldf3+0x4b0>
  80eecc:	00bfc034 	movhi	r2,65280
  80eed0:	10bfffc4 	addi	r2,r2,-1
  80eed4:	98a6703a 	and	r19,r19,r2
  80eed8:	39010004 	addi	r4,r7,1024
  80eedc:	2081ffc8 	cmpgei	r2,r4,2047
  80eee0:	103f381e 	bne	r2,zero,80ebc4 <__muldf3+0x198>
  80eee4:	9804977a 	slli	r2,r19,29
  80eee8:	9024d0fa 	srli	r18,r18,3
  80eeec:	9826927a 	slli	r19,r19,9
  80eef0:	20c1ffcc 	andi	r3,r4,2047
  80eef4:	14a4b03a 	or	r18,r2,r18
  80eef8:	9826d33a 	srli	r19,r19,12
  80eefc:	003f2006 	br	80eb80 <__muldf3+0x154>
  80ef00:	8722b03a 	or	r17,r16,fp
  80ef04:	88004526 	beq	r17,zero,80f01c <__muldf3+0x5f0>
  80ef08:	da000015 	stw	r8,0(sp)
  80ef0c:	80008626 	beq	r16,zero,80f128 <__muldf3+0x6fc>
  80ef10:	8009883a 	mov	r4,r16
  80ef14:	0802b540 	call	802b54 <__clzsi2>
  80ef18:	da000017 	ldw	r8,0(sp)
  80ef1c:	117ffd44 	addi	r5,r2,-11
  80ef20:	01000744 	movi	r4,29
  80ef24:	147ffe04 	addi	r17,r2,-8
  80ef28:	2149c83a 	sub	r4,r4,r5
  80ef2c:	8460983a 	sll	r16,r16,r17
  80ef30:	e108d83a 	srl	r4,fp,r4
  80ef34:	e462983a 	sll	r17,fp,r17
  80ef38:	2420b03a 	or	r16,r4,r16
  80ef3c:	4091c83a 	sub	r8,r8,r2
  80ef40:	423f0344 	addi	r8,r8,-1011
  80ef44:	0009883a 	mov	r4,zero
  80ef48:	003ee706 	br	80eae8 <__muldf3+0xbc>
  80ef4c:	9924b03a 	or	r18,r19,r4
  80ef50:	90002d26 	beq	r18,zero,80f008 <__muldf3+0x5dc>
  80ef54:	d9c00015 	stw	r7,0(sp)
  80ef58:	98006826 	beq	r19,zero,80f0fc <__muldf3+0x6d0>
  80ef5c:	9809883a 	mov	r4,r19
  80ef60:	0802b540 	call	802b54 <__clzsi2>
  80ef64:	d9c00017 	ldw	r7,0(sp)
  80ef68:	113ffd44 	addi	r4,r2,-11
  80ef6c:	00c00744 	movi	r3,29
  80ef70:	14bffe04 	addi	r18,r2,-8
  80ef74:	1907c83a 	sub	r3,r3,r4
  80ef78:	9ca6983a 	sll	r19,r19,r18
  80ef7c:	88c6d83a 	srl	r3,r17,r3
  80ef80:	8ca4983a 	sll	r18,r17,r18
  80ef84:	1ce6b03a 	or	r19,r3,r19
  80ef88:	023f0344 	movi	r8,-1011
  80ef8c:	4091c83a 	sub	r8,r8,r2
  80ef90:	002b883a 	mov	r21,zero
  80ef94:	002d883a 	mov	r22,zero
  80ef98:	003ec206 	br	80eaa4 <__muldf3+0x78>
  80ef9c:	9924b03a 	or	r18,r19,r4
  80efa0:	9000141e 	bne	r18,zero,80eff4 <__muldf3+0x5c8>
  80efa4:	0027883a 	mov	r19,zero
  80efa8:	05400204 	movi	r21,8
  80efac:	0201ffc4 	movi	r8,2047
  80efb0:	05800084 	movi	r22,2
  80efb4:	003ebb06 	br	80eaa4 <__muldf3+0x78>
  80efb8:	8722b03a 	or	r17,r16,fp
  80efbc:	4201ffc4 	addi	r8,r8,2047
  80efc0:	8800081e 	bne	r17,zero,80efe4 <__muldf3+0x5b8>
  80efc4:	ad400094 	ori	r21,r21,2
  80efc8:	0021883a 	mov	r16,zero
  80efcc:	01000084 	movi	r4,2
  80efd0:	003ec506 	br	80eae8 <__muldf3+0xbc>
  80efd4:	b08000a0 	cmpeqi	r2,r22,2
  80efd8:	a00d883a 	mov	r6,r20
  80efdc:	103ee126 	beq	r2,zero,80eb64 <__muldf3+0x138>
  80efe0:	003ef806 	br	80ebc4 <__muldf3+0x198>
  80efe4:	ad4000d4 	ori	r21,r21,3
  80efe8:	e023883a 	mov	r17,fp
  80efec:	010000c4 	movi	r4,3
  80eff0:	003ebd06 	br	80eae8 <__muldf3+0xbc>
  80eff4:	2025883a 	mov	r18,r4
  80eff8:	05400304 	movi	r21,12
  80effc:	0201ffc4 	movi	r8,2047
  80f000:	058000c4 	movi	r22,3
  80f004:	003ea706 	br	80eaa4 <__muldf3+0x78>
  80f008:	0027883a 	mov	r19,zero
  80f00c:	05400104 	movi	r21,4
  80f010:	0011883a 	mov	r8,zero
  80f014:	05800044 	movi	r22,1
  80f018:	003ea206 	br	80eaa4 <__muldf3+0x78>
  80f01c:	ad400054 	ori	r21,r21,1
  80f020:	0021883a 	mov	r16,zero
  80f024:	01000044 	movi	r4,1
  80f028:	003eaf06 	br	80eae8 <__muldf3+0xbc>
  80f02c:	04c00434 	movhi	r19,16
  80f030:	000d883a 	mov	r6,zero
  80f034:	9cffffc4 	addi	r19,r19,-1
  80f038:	04bfffc4 	movi	r18,-1
  80f03c:	00c1ffc4 	movi	r3,2047
  80f040:	003ecf06 	br	80eb80 <__muldf3+0x154>
  80f044:	00800044 	movi	r2,1
  80f048:	1105c83a 	sub	r2,r2,r4
  80f04c:	10c00e48 	cmpgei	r3,r2,57
  80f050:	183ec81e 	bne	r3,zero,80eb74 <__muldf3+0x148>
  80f054:	10c00808 	cmpgei	r3,r2,32
  80f058:	1800411e 	bne	r3,zero,80f160 <__muldf3+0x734>
  80f05c:	39c10784 	addi	r7,r7,1054
  80f060:	99c6983a 	sll	r3,r19,r7
  80f064:	9088d83a 	srl	r4,r18,r2
  80f068:	91ce983a 	sll	r7,r18,r7
  80f06c:	98a6d83a 	srl	r19,r19,r2
  80f070:	1904b03a 	or	r2,r3,r4
  80f074:	3824c03a 	cmpne	r18,r7,zero
  80f078:	1484b03a 	or	r2,r2,r18
  80f07c:	10c001cc 	andi	r3,r2,7
  80f080:	18000726 	beq	r3,zero,80f0a0 <__muldf3+0x674>
  80f084:	10c003cc 	andi	r3,r2,15
  80f088:	18c00120 	cmpeqi	r3,r3,4
  80f08c:	1800041e 	bne	r3,zero,80f0a0 <__muldf3+0x674>
  80f090:	10c00104 	addi	r3,r2,4
  80f094:	1885803a 	cmpltu	r2,r3,r2
  80f098:	98a7883a 	add	r19,r19,r2
  80f09c:	1805883a 	mov	r2,r3
  80f0a0:	98c0202c 	andhi	r3,r19,128
  80f0a4:	18004326 	beq	r3,zero,80f1b4 <__muldf3+0x788>
  80f0a8:	00c00044 	movi	r3,1
  80f0ac:	0027883a 	mov	r19,zero
  80f0b0:	0025883a 	mov	r18,zero
  80f0b4:	003eb206 	br	80eb80 <__muldf3+0x154>
  80f0b8:	9880022c 	andhi	r2,r19,8
  80f0bc:	10000926 	beq	r2,zero,80f0e4 <__muldf3+0x6b8>
  80f0c0:	8080022c 	andhi	r2,r16,8
  80f0c4:	1000071e 	bne	r2,zero,80f0e4 <__muldf3+0x6b8>
  80f0c8:	00800434 	movhi	r2,16
  80f0cc:	84c00234 	orhi	r19,r16,8
  80f0d0:	10bfffc4 	addi	r2,r2,-1
  80f0d4:	98a6703a 	and	r19,r19,r2
  80f0d8:	b80d883a 	mov	r6,r23
  80f0dc:	8825883a 	mov	r18,r17
  80f0e0:	003fd606 	br	80f03c <__muldf3+0x610>
  80f0e4:	00800434 	movhi	r2,16
  80f0e8:	9cc00234 	orhi	r19,r19,8
  80f0ec:	10bfffc4 	addi	r2,r2,-1
  80f0f0:	98a6703a 	and	r19,r19,r2
  80f0f4:	a00d883a 	mov	r6,r20
  80f0f8:	003fd006 	br	80f03c <__muldf3+0x610>
  80f0fc:	0802b540 	call	802b54 <__clzsi2>
  80f100:	11000544 	addi	r4,r2,21
  80f104:	21400748 	cmpgei	r5,r4,29
  80f108:	1007883a 	mov	r3,r2
  80f10c:	d9c00017 	ldw	r7,0(sp)
  80f110:	10800804 	addi	r2,r2,32
  80f114:	283f9526 	beq	r5,zero,80ef6c <__muldf3+0x540>
  80f118:	18fffe04 	addi	r3,r3,-8
  80f11c:	88e6983a 	sll	r19,r17,r3
  80f120:	0025883a 	mov	r18,zero
  80f124:	003f9806 	br	80ef88 <__muldf3+0x55c>
  80f128:	e009883a 	mov	r4,fp
  80f12c:	0802b540 	call	802b54 <__clzsi2>
  80f130:	11400544 	addi	r5,r2,21
  80f134:	29000748 	cmpgei	r4,r5,29
  80f138:	1007883a 	mov	r3,r2
  80f13c:	da000017 	ldw	r8,0(sp)
  80f140:	10800804 	addi	r2,r2,32
  80f144:	203f7626 	beq	r4,zero,80ef20 <__muldf3+0x4f4>
  80f148:	1c3ffe04 	addi	r16,r3,-8
  80f14c:	e420983a 	sll	r16,fp,r16
  80f150:	0023883a 	mov	r17,zero
  80f154:	003f7906 	br	80ef3c <__muldf3+0x510>
  80f158:	400f883a 	mov	r7,r8
  80f15c:	003f4e06 	br	80ee98 <__muldf3+0x46c>
  80f160:	00fff844 	movi	r3,-31
  80f164:	1907c83a 	sub	r3,r3,r4
  80f168:	10800820 	cmpeqi	r2,r2,32
  80f16c:	98c6d83a 	srl	r3,r19,r3
  80f170:	1000031e 	bne	r2,zero,80f180 <__muldf3+0x754>
  80f174:	39c10f84 	addi	r7,r7,1086
  80f178:	99e6983a 	sll	r19,r19,r7
  80f17c:	94e4b03a 	or	r18,r18,r19
  80f180:	9024c03a 	cmpne	r18,r18,zero
  80f184:	90c4b03a 	or	r2,r18,r3
  80f188:	148001cc 	andi	r18,r2,7
  80f18c:	9000051e 	bne	r18,zero,80f1a4 <__muldf3+0x778>
  80f190:	0027883a 	mov	r19,zero
  80f194:	1004d0fa 	srli	r2,r2,3
  80f198:	0007883a 	mov	r3,zero
  80f19c:	14a4b03a 	or	r18,r2,r18
  80f1a0:	003e7706 	br	80eb80 <__muldf3+0x154>
  80f1a4:	10c003cc 	andi	r3,r2,15
  80f1a8:	18c00118 	cmpnei	r3,r3,4
  80f1ac:	0027883a 	mov	r19,zero
  80f1b0:	183fb71e 	bne	r3,zero,80f090 <__muldf3+0x664>
  80f1b4:	9806927a 	slli	r3,r19,9
  80f1b8:	9824977a 	slli	r18,r19,29
  80f1bc:	1826d33a 	srli	r19,r3,12
  80f1c0:	003ff406 	br	80f194 <__muldf3+0x768>
  80f1c4:	00800434 	movhi	r2,16
  80f1c8:	9cc00234 	orhi	r19,r19,8
  80f1cc:	10bfffc4 	addi	r2,r2,-1
  80f1d0:	98a6703a 	and	r19,r19,r2
  80f1d4:	003f9906 	br	80f03c <__muldf3+0x610>

0080f1d8 <__subdf3>:
  80f1d8:	00800434 	movhi	r2,16
  80f1dc:	3810d53a 	srli	r8,r7,20
  80f1e0:	10bfffc4 	addi	r2,r2,-1
  80f1e4:	2806d53a 	srli	r3,r5,20
  80f1e8:	2892703a 	and	r9,r5,r2
  80f1ec:	3884703a 	and	r2,r7,r2
  80f1f0:	280ad7fa 	srli	r5,r5,31
  80f1f4:	481290fa 	slli	r9,r9,3
  80f1f8:	2018d77a 	srli	r12,r4,29
  80f1fc:	100490fa 	slli	r2,r2,3
  80f200:	3016d77a 	srli	r11,r6,29
  80f204:	defffb04 	addi	sp,sp,-20
  80f208:	4201ffcc 	andi	r8,r8,2047
  80f20c:	dc800215 	stw	r18,8(sp)
  80f210:	dc400115 	stw	r17,4(sp)
  80f214:	1c81ffcc 	andi	r18,r3,2047
  80f218:	dfc00415 	stw	ra,16(sp)
  80f21c:	dcc00315 	stw	r19,12(sp)
  80f220:	dc000015 	stw	r16,0(sp)
  80f224:	4281ffd8 	cmpnei	r10,r8,2047
  80f228:	2823883a 	mov	r17,r5
  80f22c:	201c90fa 	slli	r14,r4,3
  80f230:	380ed7fa 	srli	r7,r7,31
  80f234:	301a90fa 	slli	r13,r6,3
  80f238:	29403fcc 	andi	r5,r5,255
  80f23c:	6252b03a 	or	r9,r12,r9
  80f240:	589eb03a 	or	r15,r11,r2
  80f244:	9207c83a 	sub	r3,r18,r8
  80f248:	50006826 	beq	r10,zero,80f3ec <__subdf3+0x214>
  80f24c:	3ac0005c 	xori	r11,r7,1
  80f250:	2ac07326 	beq	r5,r11,80f420 <__subdf3+0x248>
  80f254:	00c0590e 	bge	zero,r3,80f3bc <__subdf3+0x1e4>
  80f258:	4000691e 	bne	r8,zero,80f400 <__subdf3+0x228>
  80f25c:	7b44b03a 	or	r2,r15,r13
  80f260:	1000fb26 	beq	r2,zero,80f650 <__subdf3+0x478>
  80f264:	18bfffc4 	addi	r2,r3,-1
  80f268:	10019126 	beq	r2,zero,80f8b0 <__subdf3+0x6d8>
  80f26c:	18c1ffd8 	cmpnei	r3,r3,2047
  80f270:	1800c326 	beq	r3,zero,80f580 <__subdf3+0x3a8>
  80f274:	1007883a 	mov	r3,r2
  80f278:	18800e48 	cmpgei	r2,r3,57
  80f27c:	1000651e 	bne	r2,zero,80f414 <__subdf3+0x23c>
  80f280:	18800808 	cmpgei	r2,r3,32
  80f284:	1001331e 	bne	r2,zero,80f754 <__subdf3+0x57c>
  80f288:	00800804 	movi	r2,32
  80f28c:	10c5c83a 	sub	r2,r2,r3
  80f290:	78a0983a 	sll	r16,r15,r2
  80f294:	68c8d83a 	srl	r4,r13,r3
  80f298:	689a983a 	sll	r13,r13,r2
  80f29c:	78c4d83a 	srl	r2,r15,r3
  80f2a0:	8120b03a 	or	r16,r16,r4
  80f2a4:	681ac03a 	cmpne	r13,r13,zero
  80f2a8:	8360b03a 	or	r16,r16,r13
  80f2ac:	4893c83a 	sub	r9,r9,r2
  80f2b0:	7421c83a 	sub	r16,r14,r16
  80f2b4:	7409803a 	cmpltu	r4,r14,r16
  80f2b8:	4909c83a 	sub	r4,r9,r4
  80f2bc:	2080202c 	andhi	r2,r4,128
  80f2c0:	10009326 	beq	r2,zero,80f510 <__subdf3+0x338>
  80f2c4:	04c02034 	movhi	r19,128
  80f2c8:	9cffffc4 	addi	r19,r19,-1
  80f2cc:	24e6703a 	and	r19,r4,r19
  80f2d0:	9800b926 	beq	r19,zero,80f5b8 <__subdf3+0x3e0>
  80f2d4:	9809883a 	mov	r4,r19
  80f2d8:	0802b540 	call	802b54 <__clzsi2>
  80f2dc:	10fffe04 	addi	r3,r2,-8
  80f2e0:	01000804 	movi	r4,32
  80f2e4:	20c9c83a 	sub	r4,r4,r3
  80f2e8:	8108d83a 	srl	r4,r16,r4
  80f2ec:	98e6983a 	sll	r19,r19,r3
  80f2f0:	80e0983a 	sll	r16,r16,r3
  80f2f4:	24c8b03a 	or	r4,r4,r19
  80f2f8:	1c80b816 	blt	r3,r18,80f5dc <__subdf3+0x404>
  80f2fc:	1c87c83a 	sub	r3,r3,r18
  80f300:	19400044 	addi	r5,r3,1
  80f304:	28800808 	cmpgei	r2,r5,32
  80f308:	1000751e 	bne	r2,zero,80f4e0 <__subdf3+0x308>
  80f30c:	00800804 	movi	r2,32
  80f310:	1145c83a 	sub	r2,r2,r5
  80f314:	8146d83a 	srl	r3,r16,r5
  80f318:	80a0983a 	sll	r16,r16,r2
  80f31c:	2084983a 	sll	r2,r4,r2
  80f320:	2148d83a 	srl	r4,r4,r5
  80f324:	8020c03a 	cmpne	r16,r16,zero
  80f328:	10c4b03a 	or	r2,r2,r3
  80f32c:	1420b03a 	or	r16,r2,r16
  80f330:	0025883a 	mov	r18,zero
  80f334:	808001cc 	andi	r2,r16,7
  80f338:	10000726 	beq	r2,zero,80f358 <__subdf3+0x180>
  80f33c:	808003cc 	andi	r2,r16,15
  80f340:	10800120 	cmpeqi	r2,r2,4
  80f344:	1000041e 	bne	r2,zero,80f358 <__subdf3+0x180>
  80f348:	80800104 	addi	r2,r16,4
  80f34c:	1421803a 	cmpltu	r16,r2,r16
  80f350:	2409883a 	add	r4,r4,r16
  80f354:	1021883a 	mov	r16,r2
  80f358:	2080202c 	andhi	r2,r4,128
  80f35c:	10006e26 	beq	r2,zero,80f518 <__subdf3+0x340>
  80f360:	90c00044 	addi	r3,r18,1
  80f364:	1881ffe0 	cmpeqi	r2,r3,2047
  80f368:	18c1ffcc 	andi	r3,r3,2047
  80f36c:	1000801e 	bne	r2,zero,80f570 <__subdf3+0x398>
  80f370:	00bfe034 	movhi	r2,65408
  80f374:	10bfffc4 	addi	r2,r2,-1
  80f378:	2088703a 	and	r4,r4,r2
  80f37c:	2004977a 	slli	r2,r4,29
  80f380:	2008927a 	slli	r4,r4,9
  80f384:	8020d0fa 	srli	r16,r16,3
  80f388:	2008d33a 	srli	r4,r4,12
  80f38c:	1404b03a 	or	r2,r2,r16
  80f390:	1806953a 	slli	r3,r3,20
  80f394:	882297fa 	slli	r17,r17,31
  80f398:	1906b03a 	or	r3,r3,r4
  80f39c:	1c46b03a 	or	r3,r3,r17
  80f3a0:	dfc00417 	ldw	ra,16(sp)
  80f3a4:	dcc00317 	ldw	r19,12(sp)
  80f3a8:	dc800217 	ldw	r18,8(sp)
  80f3ac:	dc400117 	ldw	r17,4(sp)
  80f3b0:	dc000017 	ldw	r16,0(sp)
  80f3b4:	dec00504 	addi	sp,sp,20
  80f3b8:	f800283a 	ret
  80f3bc:	18002c26 	beq	r3,zero,80f470 <__subdf3+0x298>
  80f3c0:	4487c83a 	sub	r3,r8,r18
  80f3c4:	5823883a 	mov	r17,r11
  80f3c8:	9000bb1e 	bne	r18,zero,80f6b8 <__subdf3+0x4e0>
  80f3cc:	4b84b03a 	or	r2,r9,r14
  80f3d0:	10011726 	beq	r2,zero,80f830 <__subdf3+0x658>
  80f3d4:	18bfffc4 	addi	r2,r3,-1
  80f3d8:	10016326 	beq	r2,zero,80f968 <__subdf3+0x790>
  80f3dc:	18c1ffd8 	cmpnei	r3,r3,2047
  80f3e0:	18012c26 	beq	r3,zero,80f894 <__subdf3+0x6bc>
  80f3e4:	1007883a 	mov	r3,r2
  80f3e8:	0000b506 	br	80f6c0 <__subdf3+0x4e8>
  80f3ec:	7b44b03a 	or	r2,r15,r13
  80f3f0:	103f9626 	beq	r2,zero,80f24c <__subdf3+0x74>
  80f3f4:	3ac03fcc 	andi	r11,r7,255
  80f3f8:	29c07d26 	beq	r5,r7,80f5f0 <__subdf3+0x418>
  80f3fc:	00ffef0e 	bge	zero,r3,80f3bc <__subdf3+0x1e4>
  80f400:	9081ffd8 	cmpnei	r2,r18,2047
  80f404:	10005e26 	beq	r2,zero,80f580 <__subdf3+0x3a8>
  80f408:	18800e48 	cmpgei	r2,r3,57
  80f40c:	7bc02034 	orhi	r15,r15,128
  80f410:	103f9b26 	beq	r2,zero,80f280 <__subdf3+0xa8>
  80f414:	7b60b03a 	or	r16,r15,r13
  80f418:	8020c03a 	cmpne	r16,r16,zero
  80f41c:	003fa406 	br	80f2b0 <__subdf3+0xd8>
  80f420:	00c0730e 	bge	zero,r3,80f5f0 <__subdf3+0x418>
  80f424:	40002626 	beq	r8,zero,80f4c0 <__subdf3+0x2e8>
  80f428:	9081ffd8 	cmpnei	r2,r18,2047
  80f42c:	10005426 	beq	r2,zero,80f580 <__subdf3+0x3a8>
  80f430:	7bc02034 	orhi	r15,r15,128
  80f434:	18800e48 	cmpgei	r2,r3,57
  80f438:	1000431e 	bne	r2,zero,80f548 <__subdf3+0x370>
  80f43c:	18800808 	cmpgei	r2,r3,32
  80f440:	1000de26 	beq	r2,zero,80f7bc <__subdf3+0x5e4>
  80f444:	1c3ff804 	addi	r16,r3,-32
  80f448:	18800820 	cmpeqi	r2,r3,32
  80f44c:	7c0ad83a 	srl	r5,r15,r16
  80f450:	1000041e 	bne	r2,zero,80f464 <__subdf3+0x28c>
  80f454:	00801004 	movi	r2,64
  80f458:	10c5c83a 	sub	r2,r2,r3
  80f45c:	7884983a 	sll	r2,r15,r2
  80f460:	689ab03a 	or	r13,r13,r2
  80f464:	6820c03a 	cmpne	r16,r13,zero
  80f468:	8160b03a 	or	r16,r16,r5
  80f46c:	00003806 	br	80f550 <__subdf3+0x378>
  80f470:	90800044 	addi	r2,r18,1
  80f474:	1081ff8c 	andi	r2,r2,2046
  80f478:	1000a01e 	bne	r2,zero,80f6fc <__subdf3+0x524>
  80f47c:	4b8ab03a 	or	r5,r9,r14
  80f480:	7b44b03a 	or	r2,r15,r13
  80f484:	9000f11e 	bne	r18,zero,80f84c <__subdf3+0x674>
  80f488:	28012e26 	beq	r5,zero,80f944 <__subdf3+0x76c>
  80f48c:	10010e26 	beq	r2,zero,80f8c8 <__subdf3+0x6f0>
  80f490:	7361c83a 	sub	r16,r14,r13
  80f494:	7405803a 	cmpltu	r2,r14,r16
  80f498:	4bc9c83a 	sub	r4,r9,r15
  80f49c:	2089c83a 	sub	r4,r4,r2
  80f4a0:	2080202c 	andhi	r2,r4,128
  80f4a4:	10016d26 	beq	r2,zero,80fa5c <__subdf3+0x884>
  80f4a8:	6ba1c83a 	sub	r16,r13,r14
  80f4ac:	7a49c83a 	sub	r4,r15,r9
  80f4b0:	6c1b803a 	cmpltu	r13,r13,r16
  80f4b4:	2349c83a 	sub	r4,r4,r13
  80f4b8:	5823883a 	mov	r17,r11
  80f4bc:	003f9d06 	br	80f334 <__subdf3+0x15c>
  80f4c0:	7b44b03a 	or	r2,r15,r13
  80f4c4:	10006226 	beq	r2,zero,80f650 <__subdf3+0x478>
  80f4c8:	18bfffc4 	addi	r2,r3,-1
  80f4cc:	1000e926 	beq	r2,zero,80f874 <__subdf3+0x69c>
  80f4d0:	18c1ffd8 	cmpnei	r3,r3,2047
  80f4d4:	18012a26 	beq	r3,zero,80f980 <__subdf3+0x7a8>
  80f4d8:	1007883a 	mov	r3,r2
  80f4dc:	003fd506 	br	80f434 <__subdf3+0x25c>
  80f4e0:	18fff844 	addi	r3,r3,-31
  80f4e4:	28800820 	cmpeqi	r2,r5,32
  80f4e8:	20c6d83a 	srl	r3,r4,r3
  80f4ec:	1000041e 	bne	r2,zero,80f500 <__subdf3+0x328>
  80f4f0:	00801004 	movi	r2,64
  80f4f4:	114bc83a 	sub	r5,r2,r5
  80f4f8:	2148983a 	sll	r4,r4,r5
  80f4fc:	8120b03a 	or	r16,r16,r4
  80f500:	8020c03a 	cmpne	r16,r16,zero
  80f504:	80e0b03a 	or	r16,r16,r3
  80f508:	0009883a 	mov	r4,zero
  80f50c:	0025883a 	mov	r18,zero
  80f510:	808001cc 	andi	r2,r16,7
  80f514:	103f891e 	bne	r2,zero,80f33c <__subdf3+0x164>
  80f518:	8020d0fa 	srli	r16,r16,3
  80f51c:	2004977a 	slli	r2,r4,29
  80f520:	2012d0fa 	srli	r9,r4,3
  80f524:	9007883a 	mov	r3,r18
  80f528:	8084b03a 	or	r2,r16,r2
  80f52c:	1901ffe0 	cmpeqi	r4,r3,2047
  80f530:	2000191e 	bne	r4,zero,80f598 <__subdf3+0x3c0>
  80f534:	01000434 	movhi	r4,16
  80f538:	213fffc4 	addi	r4,r4,-1
  80f53c:	4908703a 	and	r4,r9,r4
  80f540:	18c1ffcc 	andi	r3,r3,2047
  80f544:	003f9206 	br	80f390 <__subdf3+0x1b8>
  80f548:	7b60b03a 	or	r16,r15,r13
  80f54c:	8020c03a 	cmpne	r16,r16,zero
  80f550:	83a1883a 	add	r16,r16,r14
  80f554:	8389803a 	cmpltu	r4,r16,r14
  80f558:	2249883a 	add	r4,r4,r9
  80f55c:	2080202c 	andhi	r2,r4,128
  80f560:	103feb26 	beq	r2,zero,80f510 <__subdf3+0x338>
  80f564:	94800044 	addi	r18,r18,1
  80f568:	9081ffe0 	cmpeqi	r2,r18,2047
  80f56c:	10006f26 	beq	r2,zero,80f72c <__subdf3+0x554>
  80f570:	00c1ffc4 	movi	r3,2047
  80f574:	0009883a 	mov	r4,zero
  80f578:	0005883a 	mov	r2,zero
  80f57c:	003f8406 	br	80f390 <__subdf3+0x1b8>
  80f580:	4806977a 	slli	r3,r9,29
  80f584:	00880034 	movhi	r2,8192
  80f588:	10bfffc4 	addi	r2,r2,-1
  80f58c:	4812d0fa 	srli	r9,r9,3
  80f590:	2088703a 	and	r4,r4,r2
  80f594:	20c4b03a 	or	r2,r4,r3
  80f598:	4886b03a 	or	r3,r9,r2
  80f59c:	18013726 	beq	r3,zero,80fa7c <__subdf3+0x8a4>
  80f5a0:	00c00434 	movhi	r3,16
  80f5a4:	18ffffc4 	addi	r3,r3,-1
  80f5a8:	49000234 	orhi	r4,r9,8
  80f5ac:	20c8703a 	and	r4,r4,r3
  80f5b0:	00c1ffc4 	movi	r3,2047
  80f5b4:	003f7606 	br	80f390 <__subdf3+0x1b8>
  80f5b8:	8009883a 	mov	r4,r16
  80f5bc:	0802b540 	call	802b54 <__clzsi2>
  80f5c0:	10c00604 	addi	r3,r2,24
  80f5c4:	19000808 	cmpgei	r4,r3,32
  80f5c8:	203f4526 	beq	r4,zero,80f2e0 <__subdf3+0x108>
  80f5cc:	113ffe04 	addi	r4,r2,-8
  80f5d0:	8108983a 	sll	r4,r16,r4
  80f5d4:	0021883a 	mov	r16,zero
  80f5d8:	1cbf480e 	bge	r3,r18,80f2fc <__subdf3+0x124>
  80f5dc:	00bfe034 	movhi	r2,65408
  80f5e0:	10bfffc4 	addi	r2,r2,-1
  80f5e4:	90e5c83a 	sub	r18,r18,r3
  80f5e8:	2088703a 	and	r4,r4,r2
  80f5ec:	003f5106 	br	80f334 <__subdf3+0x15c>
  80f5f0:	18001e26 	beq	r3,zero,80f66c <__subdf3+0x494>
  80f5f4:	4487c83a 	sub	r3,r8,r18
  80f5f8:	90006826 	beq	r18,zero,80f79c <__subdf3+0x5c4>
  80f5fc:	5000a526 	beq	r10,zero,80f894 <__subdf3+0x6bc>
  80f600:	4a402034 	orhi	r9,r9,128
  80f604:	18800e48 	cmpgei	r2,r3,57
  80f608:	1000b61e 	bne	r2,zero,80f8e4 <__subdf3+0x70c>
  80f60c:	18800808 	cmpgei	r2,r3,32
  80f610:	1001021e 	bne	r2,zero,80fa1c <__subdf3+0x844>
  80f614:	00800804 	movi	r2,32
  80f618:	10c5c83a 	sub	r2,r2,r3
  80f61c:	48a0983a 	sll	r16,r9,r2
  80f620:	70c8d83a 	srl	r4,r14,r3
  80f624:	7084983a 	sll	r2,r14,r2
  80f628:	48d2d83a 	srl	r9,r9,r3
  80f62c:	8120b03a 	or	r16,r16,r4
  80f630:	1004c03a 	cmpne	r2,r2,zero
  80f634:	80a0b03a 	or	r16,r16,r2
  80f638:	7a5f883a 	add	r15,r15,r9
  80f63c:	8361883a 	add	r16,r16,r13
  80f640:	8349803a 	cmpltu	r4,r16,r13
  80f644:	23c9883a 	add	r4,r4,r15
  80f648:	4025883a 	mov	r18,r8
  80f64c:	003fc306 	br	80f55c <__subdf3+0x384>
  80f650:	480a977a 	slli	r5,r9,29
  80f654:	00880034 	movhi	r2,8192
  80f658:	10bfffc4 	addi	r2,r2,-1
  80f65c:	2088703a 	and	r4,r4,r2
  80f660:	4812d0fa 	srli	r9,r9,3
  80f664:	2144b03a 	or	r2,r4,r5
  80f668:	003fb006 	br	80f52c <__subdf3+0x354>
  80f66c:	90800044 	addi	r2,r18,1
  80f670:	1141ff8c 	andi	r5,r2,2046
  80f674:	28005c1e 	bne	r5,zero,80f7e8 <__subdf3+0x610>
  80f678:	4b84b03a 	or	r2,r9,r14
  80f67c:	9000a71e 	bne	r18,zero,80f91c <__subdf3+0x744>
  80f680:	1000df26 	beq	r2,zero,80fa00 <__subdf3+0x828>
  80f684:	7b44b03a 	or	r2,r15,r13
  80f688:	10008f26 	beq	r2,zero,80f8c8 <__subdf3+0x6f0>
  80f68c:	7361883a 	add	r16,r14,r13
  80f690:	4bc9883a 	add	r4,r9,r15
  80f694:	839d803a 	cmpltu	r14,r16,r14
  80f698:	2389883a 	add	r4,r4,r14
  80f69c:	2080202c 	andhi	r2,r4,128
  80f6a0:	103f9b26 	beq	r2,zero,80f510 <__subdf3+0x338>
  80f6a4:	00bfe034 	movhi	r2,65408
  80f6a8:	10bfffc4 	addi	r2,r2,-1
  80f6ac:	2088703a 	and	r4,r4,r2
  80f6b0:	04800044 	movi	r18,1
  80f6b4:	003f9606 	br	80f510 <__subdf3+0x338>
  80f6b8:	50007626 	beq	r10,zero,80f894 <__subdf3+0x6bc>
  80f6bc:	4a402034 	orhi	r9,r9,128
  80f6c0:	18800e48 	cmpgei	r2,r3,57
  80f6c4:	10002e1e 	bne	r2,zero,80f780 <__subdf3+0x5a8>
  80f6c8:	18800808 	cmpgei	r2,r3,32
  80f6cc:	1000881e 	bne	r2,zero,80f8f0 <__subdf3+0x718>
  80f6d0:	00800804 	movi	r2,32
  80f6d4:	10c5c83a 	sub	r2,r2,r3
  80f6d8:	48a0983a 	sll	r16,r9,r2
  80f6dc:	70c8d83a 	srl	r4,r14,r3
  80f6e0:	709c983a 	sll	r14,r14,r2
  80f6e4:	48d2d83a 	srl	r9,r9,r3
  80f6e8:	8120b03a 	or	r16,r16,r4
  80f6ec:	701cc03a 	cmpne	r14,r14,zero
  80f6f0:	83a0b03a 	or	r16,r16,r14
  80f6f4:	7a5fc83a 	sub	r15,r15,r9
  80f6f8:	00002306 	br	80f788 <__subdf3+0x5b0>
  80f6fc:	7361c83a 	sub	r16,r14,r13
  80f700:	4be7c83a 	sub	r19,r9,r15
  80f704:	7409803a 	cmpltu	r4,r14,r16
  80f708:	9927c83a 	sub	r19,r19,r4
  80f70c:	9880202c 	andhi	r2,r19,128
  80f710:	1000411e 	bne	r2,zero,80f818 <__subdf3+0x640>
  80f714:	84c4b03a 	or	r2,r16,r19
  80f718:	103eed1e 	bne	r2,zero,80f2d0 <__subdf3+0xf8>
  80f71c:	0013883a 	mov	r9,zero
  80f720:	0023883a 	mov	r17,zero
  80f724:	003f8306 	br	80f534 <__subdf3+0x35c>
  80f728:	04800084 	movi	r18,2
  80f72c:	00bfe034 	movhi	r2,65408
  80f730:	10bfffc4 	addi	r2,r2,-1
  80f734:	8006d07a 	srli	r3,r16,1
  80f738:	2088703a 	and	r4,r4,r2
  80f73c:	200497fa 	slli	r2,r4,31
  80f740:	8400004c 	andi	r16,r16,1
  80f744:	1c20b03a 	or	r16,r3,r16
  80f748:	2008d07a 	srli	r4,r4,1
  80f74c:	1420b03a 	or	r16,r2,r16
  80f750:	003ef806 	br	80f334 <__subdf3+0x15c>
  80f754:	1c3ff804 	addi	r16,r3,-32
  80f758:	18800820 	cmpeqi	r2,r3,32
  80f75c:	7c0ad83a 	srl	r5,r15,r16
  80f760:	1000041e 	bne	r2,zero,80f774 <__subdf3+0x59c>
  80f764:	00801004 	movi	r2,64
  80f768:	10c5c83a 	sub	r2,r2,r3
  80f76c:	7884983a 	sll	r2,r15,r2
  80f770:	689ab03a 	or	r13,r13,r2
  80f774:	6820c03a 	cmpne	r16,r13,zero
  80f778:	8160b03a 	or	r16,r16,r5
  80f77c:	003ecc06 	br	80f2b0 <__subdf3+0xd8>
  80f780:	4b92b03a 	or	r9,r9,r14
  80f784:	4820c03a 	cmpne	r16,r9,zero
  80f788:	6c21c83a 	sub	r16,r13,r16
  80f78c:	6c09803a 	cmpltu	r4,r13,r16
  80f790:	7909c83a 	sub	r4,r15,r4
  80f794:	4025883a 	mov	r18,r8
  80f798:	003ec806 	br	80f2bc <__subdf3+0xe4>
  80f79c:	4b84b03a 	or	r2,r9,r14
  80f7a0:	10007e26 	beq	r2,zero,80f99c <__subdf3+0x7c4>
  80f7a4:	18bfffc4 	addi	r2,r3,-1
  80f7a8:	1000a726 	beq	r2,zero,80fa48 <__subdf3+0x870>
  80f7ac:	18c1ffd8 	cmpnei	r3,r3,2047
  80f7b0:	18003826 	beq	r3,zero,80f894 <__subdf3+0x6bc>
  80f7b4:	1007883a 	mov	r3,r2
  80f7b8:	003f9206 	br	80f604 <__subdf3+0x42c>
  80f7bc:	00800804 	movi	r2,32
  80f7c0:	10c5c83a 	sub	r2,r2,r3
  80f7c4:	78a0983a 	sll	r16,r15,r2
  80f7c8:	68c8d83a 	srl	r4,r13,r3
  80f7cc:	689a983a 	sll	r13,r13,r2
  80f7d0:	78c4d83a 	srl	r2,r15,r3
  80f7d4:	8120b03a 	or	r16,r16,r4
  80f7d8:	681ac03a 	cmpne	r13,r13,zero
  80f7dc:	8360b03a 	or	r16,r16,r13
  80f7e0:	4893883a 	add	r9,r9,r2
  80f7e4:	003f5a06 	br	80f550 <__subdf3+0x378>
  80f7e8:	10c1ffe0 	cmpeqi	r3,r2,2047
  80f7ec:	183f601e 	bne	r3,zero,80f570 <__subdf3+0x398>
  80f7f0:	735b883a 	add	r13,r14,r13
  80f7f4:	6b9d803a 	cmpltu	r14,r13,r14
  80f7f8:	4bc9883a 	add	r4,r9,r15
  80f7fc:	2389883a 	add	r4,r4,r14
  80f800:	202097fa 	slli	r16,r4,31
  80f804:	681ad07a 	srli	r13,r13,1
  80f808:	2008d07a 	srli	r4,r4,1
  80f80c:	1025883a 	mov	r18,r2
  80f810:	8360b03a 	or	r16,r16,r13
  80f814:	003f3e06 	br	80f510 <__subdf3+0x338>
  80f818:	6ba1c83a 	sub	r16,r13,r14
  80f81c:	7a49c83a 	sub	r4,r15,r9
  80f820:	6c1b803a 	cmpltu	r13,r13,r16
  80f824:	2367c83a 	sub	r19,r4,r13
  80f828:	5823883a 	mov	r17,r11
  80f82c:	003ea806 	br	80f2d0 <__subdf3+0xf8>
  80f830:	7808977a 	slli	r4,r15,29
  80f834:	00880034 	movhi	r2,8192
  80f838:	10bfffc4 	addi	r2,r2,-1
  80f83c:	308c703a 	and	r6,r6,r2
  80f840:	7812d0fa 	srli	r9,r15,3
  80f844:	3104b03a 	or	r2,r6,r4
  80f848:	003f3806 	br	80f52c <__subdf3+0x354>
  80f84c:	28005a1e 	bne	r5,zero,80f9b8 <__subdf3+0x7e0>
  80f850:	10008526 	beq	r2,zero,80fa68 <__subdf3+0x890>
  80f854:	7806977a 	slli	r3,r15,29
  80f858:	00880034 	movhi	r2,8192
  80f85c:	10bfffc4 	addi	r2,r2,-1
  80f860:	3084703a 	and	r2,r6,r2
  80f864:	7812d0fa 	srli	r9,r15,3
  80f868:	10c4b03a 	or	r2,r2,r3
  80f86c:	5823883a 	mov	r17,r11
  80f870:	003f4906 	br	80f598 <__subdf3+0x3c0>
  80f874:	7361883a 	add	r16,r14,r13
  80f878:	4bc9883a 	add	r4,r9,r15
  80f87c:	839d803a 	cmpltu	r14,r16,r14
  80f880:	2389883a 	add	r4,r4,r14
  80f884:	2080202c 	andhi	r2,r4,128
  80f888:	103fa71e 	bne	r2,zero,80f728 <__subdf3+0x550>
  80f88c:	04800044 	movi	r18,1
  80f890:	003f1f06 	br	80f510 <__subdf3+0x338>
  80f894:	7806977a 	slli	r3,r15,29
  80f898:	00880034 	movhi	r2,8192
  80f89c:	10bfffc4 	addi	r2,r2,-1
  80f8a0:	3084703a 	and	r2,r6,r2
  80f8a4:	7812d0fa 	srli	r9,r15,3
  80f8a8:	10c4b03a 	or	r2,r2,r3
  80f8ac:	003f3a06 	br	80f598 <__subdf3+0x3c0>
  80f8b0:	7361c83a 	sub	r16,r14,r13
  80f8b4:	4bc9c83a 	sub	r4,r9,r15
  80f8b8:	741d803a 	cmpltu	r14,r14,r16
  80f8bc:	2389c83a 	sub	r4,r4,r14
  80f8c0:	04800044 	movi	r18,1
  80f8c4:	003e7d06 	br	80f2bc <__subdf3+0xe4>
  80f8c8:	480a977a 	slli	r5,r9,29
  80f8cc:	00880034 	movhi	r2,8192
  80f8d0:	10bfffc4 	addi	r2,r2,-1
  80f8d4:	2084703a 	and	r2,r4,r2
  80f8d8:	4812d0fa 	srli	r9,r9,3
  80f8dc:	1144b03a 	or	r2,r2,r5
  80f8e0:	003f1406 	br	80f534 <__subdf3+0x35c>
  80f8e4:	4b92b03a 	or	r9,r9,r14
  80f8e8:	4820c03a 	cmpne	r16,r9,zero
  80f8ec:	003f5306 	br	80f63c <__subdf3+0x464>
  80f8f0:	1c3ff804 	addi	r16,r3,-32
  80f8f4:	19000820 	cmpeqi	r4,r3,32
  80f8f8:	4c04d83a 	srl	r2,r9,r16
  80f8fc:	2000041e 	bne	r4,zero,80f910 <__subdf3+0x738>
  80f900:	01001004 	movi	r4,64
  80f904:	20c7c83a 	sub	r3,r4,r3
  80f908:	48d2983a 	sll	r9,r9,r3
  80f90c:	725cb03a 	or	r14,r14,r9
  80f910:	7020c03a 	cmpne	r16,r14,zero
  80f914:	80a0b03a 	or	r16,r16,r2
  80f918:	003f9b06 	br	80f788 <__subdf3+0x5b0>
  80f91c:	103fdd26 	beq	r2,zero,80f894 <__subdf3+0x6bc>
  80f920:	7b5ab03a 	or	r13,r15,r13
  80f924:	480a977a 	slli	r5,r9,29
  80f928:	4812d0fa 	srli	r9,r9,3
  80f92c:	6800251e 	bne	r13,zero,80f9c4 <__subdf3+0x7ec>
  80f930:	00880034 	movhi	r2,8192
  80f934:	10bfffc4 	addi	r2,r2,-1
  80f938:	2084703a 	and	r2,r4,r2
  80f93c:	1144b03a 	or	r2,r2,r5
  80f940:	003f1506 	br	80f598 <__subdf3+0x3c0>
  80f944:	103f7526 	beq	r2,zero,80f71c <__subdf3+0x544>
  80f948:	7808977a 	slli	r4,r15,29
  80f94c:	00880034 	movhi	r2,8192
  80f950:	10bfffc4 	addi	r2,r2,-1
  80f954:	3084703a 	and	r2,r6,r2
  80f958:	7812d0fa 	srli	r9,r15,3
  80f95c:	1104b03a 	or	r2,r2,r4
  80f960:	5823883a 	mov	r17,r11
  80f964:	003ef306 	br	80f534 <__subdf3+0x35c>
  80f968:	6ba1c83a 	sub	r16,r13,r14
  80f96c:	7a49c83a 	sub	r4,r15,r9
  80f970:	6c1b803a 	cmpltu	r13,r13,r16
  80f974:	2349c83a 	sub	r4,r4,r13
  80f978:	04800044 	movi	r18,1
  80f97c:	003e4f06 	br	80f2bc <__subdf3+0xe4>
  80f980:	4806977a 	slli	r3,r9,29
  80f984:	00880034 	movhi	r2,8192
  80f988:	10bfffc4 	addi	r2,r2,-1
  80f98c:	2084703a 	and	r2,r4,r2
  80f990:	4812d0fa 	srli	r9,r9,3
  80f994:	10c4b03a 	or	r2,r2,r3
  80f998:	003eff06 	br	80f598 <__subdf3+0x3c0>
  80f99c:	7808977a 	slli	r4,r15,29
  80f9a0:	00880034 	movhi	r2,8192
  80f9a4:	10bfffc4 	addi	r2,r2,-1
  80f9a8:	3084703a 	and	r2,r6,r2
  80f9ac:	7812d0fa 	srli	r9,r15,3
  80f9b0:	1104b03a 	or	r2,r2,r4
  80f9b4:	003edd06 	br	80f52c <__subdf3+0x354>
  80f9b8:	480a977a 	slli	r5,r9,29
  80f9bc:	4812d0fa 	srli	r9,r9,3
  80f9c0:	103fdb26 	beq	r2,zero,80f930 <__subdf3+0x758>
  80f9c4:	00c80034 	movhi	r3,8192
  80f9c8:	18ffffc4 	addi	r3,r3,-1
  80f9cc:	20c4703a 	and	r2,r4,r3
  80f9d0:	4900022c 	andhi	r4,r9,8
  80f9d4:	1144b03a 	or	r2,r2,r5
  80f9d8:	203eef26 	beq	r4,zero,80f598 <__subdf3+0x3c0>
  80f9dc:	7808d0fa 	srli	r4,r15,3
  80f9e0:	2140022c 	andhi	r5,r4,8
  80f9e4:	283eec1e 	bne	r5,zero,80f598 <__subdf3+0x3c0>
  80f9e8:	7804977a 	slli	r2,r15,29
  80f9ec:	30cc703a 	and	r6,r6,r3
  80f9f0:	5823883a 	mov	r17,r11
  80f9f4:	3084b03a 	or	r2,r6,r2
  80f9f8:	2013883a 	mov	r9,r4
  80f9fc:	003ee606 	br	80f598 <__subdf3+0x3c0>
  80fa00:	7808977a 	slli	r4,r15,29
  80fa04:	00880034 	movhi	r2,8192
  80fa08:	10bfffc4 	addi	r2,r2,-1
  80fa0c:	3084703a 	and	r2,r6,r2
  80fa10:	7812d0fa 	srli	r9,r15,3
  80fa14:	1104b03a 	or	r2,r2,r4
  80fa18:	003ec606 	br	80f534 <__subdf3+0x35c>
  80fa1c:	18bff804 	addi	r2,r3,-32
  80fa20:	19000820 	cmpeqi	r4,r3,32
  80fa24:	4884d83a 	srl	r2,r9,r2
  80fa28:	2000041e 	bne	r4,zero,80fa3c <__subdf3+0x864>
  80fa2c:	01001004 	movi	r4,64
  80fa30:	20c7c83a 	sub	r3,r4,r3
  80fa34:	48d2983a 	sll	r9,r9,r3
  80fa38:	725cb03a 	or	r14,r14,r9
  80fa3c:	7020c03a 	cmpne	r16,r14,zero
  80fa40:	80a0b03a 	or	r16,r16,r2
  80fa44:	003efd06 	br	80f63c <__subdf3+0x464>
  80fa48:	7361883a 	add	r16,r14,r13
  80fa4c:	4bc9883a 	add	r4,r9,r15
  80fa50:	835b803a 	cmpltu	r13,r16,r13
  80fa54:	2349883a 	add	r4,r4,r13
  80fa58:	003f8a06 	br	80f884 <__subdf3+0x6ac>
  80fa5c:	8104b03a 	or	r2,r16,r4
  80fa60:	103f2e26 	beq	r2,zero,80f71c <__subdf3+0x544>
  80fa64:	003eaa06 	br	80f510 <__subdf3+0x338>
  80fa68:	02400434 	movhi	r9,16
  80fa6c:	0023883a 	mov	r17,zero
  80fa70:	00bfffc4 	movi	r2,-1
  80fa74:	4a7fffc4 	addi	r9,r9,-1
  80fa78:	003ec906 	br	80f5a0 <__subdf3+0x3c8>
  80fa7c:	0005883a 	mov	r2,zero
  80fa80:	00c1ffc4 	movi	r3,2047
  80fa84:	0009883a 	mov	r4,zero
  80fa88:	003e4106 	br	80f390 <__subdf3+0x1b8>

0080fa8c <__unorddf2>:
  80fa8c:	2806d53a 	srli	r3,r5,20
  80fa90:	3810d53a 	srli	r8,r7,20
  80fa94:	02400434 	movhi	r9,16
  80fa98:	18c1ffcc 	andi	r3,r3,2047
  80fa9c:	4a7fffc4 	addi	r9,r9,-1
  80faa0:	18c1ffd8 	cmpnei	r3,r3,2047
  80faa4:	2a4a703a 	and	r5,r5,r9
  80faa8:	3a4e703a 	and	r7,r7,r9
  80faac:	4201ffcc 	andi	r8,r8,2047
  80fab0:	18000426 	beq	r3,zero,80fac4 <__unorddf2+0x38>
  80fab4:	4201ffd8 	cmpnei	r8,r8,2047
  80fab8:	40000626 	beq	r8,zero,80fad4 <__unorddf2+0x48>
  80fabc:	0005883a 	mov	r2,zero
  80fac0:	f800283a 	ret
  80fac4:	290ab03a 	or	r5,r5,r4
  80fac8:	283ffa26 	beq	r5,zero,80fab4 <__unorddf2+0x28>
  80facc:	00800044 	movi	r2,1
  80fad0:	f800283a 	ret
  80fad4:	398eb03a 	or	r7,r7,r6
  80fad8:	3804c03a 	cmpne	r2,r7,zero
  80fadc:	f800283a 	ret

0080fae0 <__fixdfsi>:
  80fae0:	2806d53a 	srli	r3,r5,20
  80fae4:	01800434 	movhi	r6,16
  80fae8:	31bfffc4 	addi	r6,r6,-1
  80faec:	18c1ffcc 	andi	r3,r3,2047
  80faf0:	19c0ffd0 	cmplti	r7,r3,1023
  80faf4:	2810d7fa 	srli	r8,r5,31
  80faf8:	298a703a 	and	r5,r5,r6
  80fafc:	3800061e 	bne	r7,zero,80fb18 <__fixdfsi+0x38>
  80fb00:	18810790 	cmplti	r2,r3,1054
  80fb04:	1000061e 	bne	r2,zero,80fb20 <__fixdfsi+0x40>
  80fb08:	00a00034 	movhi	r2,32768
  80fb0c:	10bfffc4 	addi	r2,r2,-1
  80fb10:	4085883a 	add	r2,r8,r2
  80fb14:	f800283a 	ret
  80fb18:	0005883a 	mov	r2,zero
  80fb1c:	f800283a 	ret
  80fb20:	01810cc4 	movi	r6,1075
  80fb24:	30cdc83a 	sub	r6,r6,r3
  80fb28:	30800808 	cmpgei	r2,r6,32
  80fb2c:	29400434 	orhi	r5,r5,16
  80fb30:	1000071e 	bne	r2,zero,80fb50 <__fixdfsi+0x70>
  80fb34:	18befb44 	addi	r2,r3,-1043
  80fb38:	2884983a 	sll	r2,r5,r2
  80fb3c:	2188d83a 	srl	r4,r4,r6
  80fb40:	1104b03a 	or	r2,r2,r4
  80fb44:	403ff526 	beq	r8,zero,80fb1c <__fixdfsi+0x3c>
  80fb48:	0085c83a 	sub	r2,zero,r2
  80fb4c:	f800283a 	ret
  80fb50:	008104c4 	movi	r2,1043
  80fb54:	10c5c83a 	sub	r2,r2,r3
  80fb58:	2884d83a 	srl	r2,r5,r2
  80fb5c:	003ff906 	br	80fb44 <__fixdfsi+0x64>

0080fb60 <__floatsidf>:
  80fb60:	defffd04 	addi	sp,sp,-12
  80fb64:	dfc00215 	stw	ra,8(sp)
  80fb68:	dc400115 	stw	r17,4(sp)
  80fb6c:	dc000015 	stw	r16,0(sp)
  80fb70:	20001326 	beq	r4,zero,80fbc0 <__floatsidf+0x60>
  80fb74:	2022d7fa 	srli	r17,r4,31
  80fb78:	2021883a 	mov	r16,r4
  80fb7c:	20002416 	blt	r4,zero,80fc10 <__floatsidf+0xb0>
  80fb80:	8009883a 	mov	r4,r16
  80fb84:	0802b540 	call	802b54 <__clzsi2>
  80fb88:	01010784 	movi	r4,1054
  80fb8c:	2089c83a 	sub	r4,r4,r2
  80fb90:	114002c8 	cmpgei	r5,r2,11
  80fb94:	20c1ffcc 	andi	r3,r4,2047
  80fb98:	2800161e 	bne	r5,zero,80fbf4 <__floatsidf+0x94>
  80fb9c:	010002c4 	movi	r4,11
  80fba0:	2089c83a 	sub	r4,r4,r2
  80fba4:	810ad83a 	srl	r5,r16,r4
  80fba8:	01000434 	movhi	r4,16
  80fbac:	10800544 	addi	r2,r2,21
  80fbb0:	213fffc4 	addi	r4,r4,-1
  80fbb4:	8084983a 	sll	r2,r16,r2
  80fbb8:	290a703a 	and	r5,r5,r4
  80fbbc:	00000406 	br	80fbd0 <__floatsidf+0x70>
  80fbc0:	0023883a 	mov	r17,zero
  80fbc4:	0007883a 	mov	r3,zero
  80fbc8:	000b883a 	mov	r5,zero
  80fbcc:	0005883a 	mov	r2,zero
  80fbd0:	1808953a 	slli	r4,r3,20
  80fbd4:	880697fa 	slli	r3,r17,31
  80fbd8:	2148b03a 	or	r4,r4,r5
  80fbdc:	20c6b03a 	or	r3,r4,r3
  80fbe0:	dfc00217 	ldw	ra,8(sp)
  80fbe4:	dc400117 	ldw	r17,4(sp)
  80fbe8:	dc000017 	ldw	r16,0(sp)
  80fbec:	dec00304 	addi	sp,sp,12
  80fbf0:	f800283a 	ret
  80fbf4:	10bffd44 	addi	r2,r2,-11
  80fbf8:	808a983a 	sll	r5,r16,r2
  80fbfc:	00800434 	movhi	r2,16
  80fc00:	10bfffc4 	addi	r2,r2,-1
  80fc04:	288a703a 	and	r5,r5,r2
  80fc08:	0005883a 	mov	r2,zero
  80fc0c:	003ff006 	br	80fbd0 <__floatsidf+0x70>
  80fc10:	0121c83a 	sub	r16,zero,r4
  80fc14:	003fda06 	br	80fb80 <__floatsidf+0x20>

0080fc18 <__floatunsidf>:
  80fc18:	defffe04 	addi	sp,sp,-8
  80fc1c:	dc000015 	stw	r16,0(sp)
  80fc20:	dfc00115 	stw	ra,4(sp)
  80fc24:	2021883a 	mov	r16,r4
  80fc28:	20000f26 	beq	r4,zero,80fc68 <__floatunsidf+0x50>
  80fc2c:	0802b540 	call	802b54 <__clzsi2>
  80fc30:	00c10784 	movi	r3,1054
  80fc34:	1887c83a 	sub	r3,r3,r2
  80fc38:	110002c8 	cmpgei	r4,r2,11
  80fc3c:	18c1ffcc 	andi	r3,r3,2047
  80fc40:	2000121e 	bne	r4,zero,80fc8c <__floatunsidf+0x74>
  80fc44:	014002c4 	movi	r5,11
  80fc48:	288bc83a 	sub	r5,r5,r2
  80fc4c:	814ad83a 	srl	r5,r16,r5
  80fc50:	01000434 	movhi	r4,16
  80fc54:	10800544 	addi	r2,r2,21
  80fc58:	213fffc4 	addi	r4,r4,-1
  80fc5c:	80a0983a 	sll	r16,r16,r2
  80fc60:	290a703a 	and	r5,r5,r4
  80fc64:	00000206 	br	80fc70 <__floatunsidf+0x58>
  80fc68:	0007883a 	mov	r3,zero
  80fc6c:	000b883a 	mov	r5,zero
  80fc70:	1806953a 	slli	r3,r3,20
  80fc74:	8005883a 	mov	r2,r16
  80fc78:	1946b03a 	or	r3,r3,r5
  80fc7c:	dfc00117 	ldw	ra,4(sp)
  80fc80:	dc000017 	ldw	r16,0(sp)
  80fc84:	dec00204 	addi	sp,sp,8
  80fc88:	f800283a 	ret
  80fc8c:	117ffd44 	addi	r5,r2,-11
  80fc90:	814a983a 	sll	r5,r16,r5
  80fc94:	00800434 	movhi	r2,16
  80fc98:	10bfffc4 	addi	r2,r2,-1
  80fc9c:	288a703a 	and	r5,r5,r2
  80fca0:	0021883a 	mov	r16,zero
  80fca4:	003ff206 	br	80fc70 <__floatunsidf+0x58>

0080fca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fca8:	defffe04 	addi	sp,sp,-8
  80fcac:	dfc00115 	stw	ra,4(sp)
  80fcb0:	df000015 	stw	fp,0(sp)
  80fcb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fcb8:	d0a01117 	ldw	r2,-32700(gp)
  80fcbc:	10000326 	beq	r2,zero,80fccc <alt_get_errno+0x24>
  80fcc0:	d0a01117 	ldw	r2,-32700(gp)
  80fcc4:	103ee83a 	callr	r2
  80fcc8:	00000106 	br	80fcd0 <alt_get_errno+0x28>
  80fccc:	d0a71804 	addi	r2,gp,-25504
}
  80fcd0:	e037883a 	mov	sp,fp
  80fcd4:	dfc00117 	ldw	ra,4(sp)
  80fcd8:	df000017 	ldw	fp,0(sp)
  80fcdc:	dec00204 	addi	sp,sp,8
  80fce0:	f800283a 	ret

0080fce4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fce4:	defffb04 	addi	sp,sp,-20
  80fce8:	dfc00415 	stw	ra,16(sp)
  80fcec:	df000315 	stw	fp,12(sp)
  80fcf0:	df000304 	addi	fp,sp,12
  80fcf4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fcf8:	e0bffd17 	ldw	r2,-12(fp)
  80fcfc:	10000916 	blt	r2,zero,80fd24 <close+0x40>
  80fd00:	e0fffd17 	ldw	r3,-12(fp)
  80fd04:	1805883a 	mov	r2,r3
  80fd08:	1085883a 	add	r2,r2,r2
  80fd0c:	10c5883a 	add	r2,r2,r3
  80fd10:	100490ba 	slli	r2,r2,2
  80fd14:	00c02074 	movhi	r3,129
  80fd18:	18cec304 	addi	r3,r3,15116
  80fd1c:	10c5883a 	add	r2,r2,r3
  80fd20:	00000106 	br	80fd28 <close+0x44>
  80fd24:	0005883a 	mov	r2,zero
  80fd28:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80fd2c:	e0bfff17 	ldw	r2,-4(fp)
  80fd30:	10001926 	beq	r2,zero,80fd98 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fd34:	e0bfff17 	ldw	r2,-4(fp)
  80fd38:	10800017 	ldw	r2,0(r2)
  80fd3c:	10800417 	ldw	r2,16(r2)
  80fd40:	10000626 	beq	r2,zero,80fd5c <close+0x78>
  80fd44:	e0bfff17 	ldw	r2,-4(fp)
  80fd48:	10800017 	ldw	r2,0(r2)
  80fd4c:	10800417 	ldw	r2,16(r2)
  80fd50:	e13fff17 	ldw	r4,-4(fp)
  80fd54:	103ee83a 	callr	r2
  80fd58:	00000106 	br	80fd60 <close+0x7c>
  80fd5c:	0005883a 	mov	r2,zero
  80fd60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80fd64:	e13ffd17 	ldw	r4,-12(fp)
  80fd68:	08105a00 	call	8105a0 <alt_release_fd>
    if (rval < 0)
  80fd6c:	e0bffe17 	ldw	r2,-8(fp)
  80fd70:	1000070e 	bge	r2,zero,80fd90 <close+0xac>
    {
      ALT_ERRNO = -rval;
  80fd74:	080fca80 	call	80fca8 <alt_get_errno>
  80fd78:	1007883a 	mov	r3,r2
  80fd7c:	e0bffe17 	ldw	r2,-8(fp)
  80fd80:	0085c83a 	sub	r2,zero,r2
  80fd84:	18800015 	stw	r2,0(r3)
      return -1;
  80fd88:	00bfffc4 	movi	r2,-1
  80fd8c:	00000706 	br	80fdac <close+0xc8>
    }
    return 0;
  80fd90:	0005883a 	mov	r2,zero
  80fd94:	00000506 	br	80fdac <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fd98:	080fca80 	call	80fca8 <alt_get_errno>
  80fd9c:	1007883a 	mov	r3,r2
  80fda0:	00801444 	movi	r2,81
  80fda4:	18800015 	stw	r2,0(r3)
    return -1;
  80fda8:	00bfffc4 	movi	r2,-1
  }
}
  80fdac:	e037883a 	mov	sp,fp
  80fdb0:	dfc00117 	ldw	ra,4(sp)
  80fdb4:	df000017 	ldw	fp,0(sp)
  80fdb8:	dec00204 	addi	sp,sp,8
  80fdbc:	f800283a 	ret

0080fdc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fdc0:	defffc04 	addi	sp,sp,-16
  80fdc4:	df000315 	stw	fp,12(sp)
  80fdc8:	df000304 	addi	fp,sp,12
  80fdcc:	e13fff15 	stw	r4,-4(fp)
  80fdd0:	e17ffe15 	stw	r5,-8(fp)
  80fdd4:	e1bffd15 	stw	r6,-12(fp)
  return len;
  80fdd8:	e0bffd17 	ldw	r2,-12(fp)
}
  80fddc:	e037883a 	mov	sp,fp
  80fde0:	df000017 	ldw	fp,0(sp)
  80fde4:	dec00104 	addi	sp,sp,4
  80fde8:	f800283a 	ret

0080fdec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fdec:	defffd04 	addi	sp,sp,-12
  80fdf0:	df000215 	stw	fp,8(sp)
  80fdf4:	df000204 	addi	fp,sp,8
  80fdf8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80fdfc:	0001883a 	nop
  80fe00:	e0bffe17 	ldw	r2,-8(fp)
  80fe04:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80fe08:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fe0c:	10000226 	beq	r2,zero,80fe18 <_exit+0x2c>
    ALT_SIM_FAIL();
  80fe10:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  80fe14:	00000106 	br	80fe1c <_exit+0x30>
    ALT_SIM_PASS();
  80fe18:	002af0b0 	cmpltui	zero,zero,43970
}
  80fe1c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80fe20:	003fff06 	br	80fe20 <_exit+0x34>

0080fe24 <alt_get_errno>:
{
  80fe24:	defffe04 	addi	sp,sp,-8
  80fe28:	dfc00115 	stw	ra,4(sp)
  80fe2c:	df000015 	stw	fp,0(sp)
  80fe30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fe34:	d0a01117 	ldw	r2,-32700(gp)
  80fe38:	10000326 	beq	r2,zero,80fe48 <alt_get_errno+0x24>
  80fe3c:	d0a01117 	ldw	r2,-32700(gp)
  80fe40:	103ee83a 	callr	r2
  80fe44:	00000106 	br	80fe4c <alt_get_errno+0x28>
  80fe48:	d0a71804 	addi	r2,gp,-25504
}
  80fe4c:	e037883a 	mov	sp,fp
  80fe50:	dfc00117 	ldw	ra,4(sp)
  80fe54:	df000017 	ldw	fp,0(sp)
  80fe58:	dec00204 	addi	sp,sp,8
  80fe5c:	f800283a 	ret

0080fe60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fe60:	defffb04 	addi	sp,sp,-20
  80fe64:	dfc00415 	stw	ra,16(sp)
  80fe68:	df000315 	stw	fp,12(sp)
  80fe6c:	df000304 	addi	fp,sp,12
  80fe70:	e13ffe15 	stw	r4,-8(fp)
  80fe74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fe78:	e0bffe17 	ldw	r2,-8(fp)
  80fe7c:	10000916 	blt	r2,zero,80fea4 <fstat+0x44>
  80fe80:	e0fffe17 	ldw	r3,-8(fp)
  80fe84:	1805883a 	mov	r2,r3
  80fe88:	1085883a 	add	r2,r2,r2
  80fe8c:	10c5883a 	add	r2,r2,r3
  80fe90:	100490ba 	slli	r2,r2,2
  80fe94:	00c02074 	movhi	r3,129
  80fe98:	18cec304 	addi	r3,r3,15116
  80fe9c:	10c5883a 	add	r2,r2,r3
  80fea0:	00000106 	br	80fea8 <fstat+0x48>
  80fea4:	0005883a 	mov	r2,zero
  80fea8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80feac:	e0bfff17 	ldw	r2,-4(fp)
  80feb0:	10001026 	beq	r2,zero,80fef4 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80feb4:	e0bfff17 	ldw	r2,-4(fp)
  80feb8:	10800017 	ldw	r2,0(r2)
  80febc:	10800817 	ldw	r2,32(r2)
  80fec0:	10000726 	beq	r2,zero,80fee0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  80fec4:	e0bfff17 	ldw	r2,-4(fp)
  80fec8:	10800017 	ldw	r2,0(r2)
  80fecc:	10800817 	ldw	r2,32(r2)
  80fed0:	e17ffd17 	ldw	r5,-12(fp)
  80fed4:	e13fff17 	ldw	r4,-4(fp)
  80fed8:	103ee83a 	callr	r2
  80fedc:	00000a06 	br	80ff08 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fee0:	e0bffd17 	ldw	r2,-12(fp)
  80fee4:	00c80004 	movi	r3,8192
  80fee8:	10c00115 	stw	r3,4(r2)
      return 0;
  80feec:	0005883a 	mov	r2,zero
  80fef0:	00000506 	br	80ff08 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fef4:	080fe240 	call	80fe24 <alt_get_errno>
  80fef8:	1007883a 	mov	r3,r2
  80fefc:	00801444 	movi	r2,81
  80ff00:	18800015 	stw	r2,0(r3)
    return -1;
  80ff04:	00bfffc4 	movi	r2,-1
  }
}
  80ff08:	e037883a 	mov	sp,fp
  80ff0c:	dfc00117 	ldw	ra,4(sp)
  80ff10:	df000017 	ldw	fp,0(sp)
  80ff14:	dec00204 	addi	sp,sp,8
  80ff18:	f800283a 	ret

0080ff1c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80ff1c:	deffff04 	addi	sp,sp,-4
  80ff20:	df000015 	stw	fp,0(sp)
  80ff24:	d839883a 	mov	fp,sp
  return 0;
  80ff28:	0005883a 	mov	r2,zero
}
  80ff2c:	e037883a 	mov	sp,fp
  80ff30:	df000017 	ldw	fp,0(sp)
  80ff34:	dec00104 	addi	sp,sp,4
  80ff38:	f800283a 	ret

0080ff3c <alt_get_errno>:
{
  80ff3c:	defffe04 	addi	sp,sp,-8
  80ff40:	dfc00115 	stw	ra,4(sp)
  80ff44:	df000015 	stw	fp,0(sp)
  80ff48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ff4c:	d0a01117 	ldw	r2,-32700(gp)
  80ff50:	10000326 	beq	r2,zero,80ff60 <alt_get_errno+0x24>
  80ff54:	d0a01117 	ldw	r2,-32700(gp)
  80ff58:	103ee83a 	callr	r2
  80ff5c:	00000106 	br	80ff64 <alt_get_errno+0x28>
  80ff60:	d0a71804 	addi	r2,gp,-25504
}
  80ff64:	e037883a 	mov	sp,fp
  80ff68:	dfc00117 	ldw	ra,4(sp)
  80ff6c:	df000017 	ldw	fp,0(sp)
  80ff70:	dec00204 	addi	sp,sp,8
  80ff74:	f800283a 	ret

0080ff78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ff78:	deffea04 	addi	sp,sp,-88
  80ff7c:	dfc01515 	stw	ra,84(sp)
  80ff80:	df001415 	stw	fp,80(sp)
  80ff84:	df001404 	addi	fp,sp,80
  80ff88:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ff8c:	e0bfec17 	ldw	r2,-80(fp)
  80ff90:	10000916 	blt	r2,zero,80ffb8 <isatty+0x40>
  80ff94:	e0ffec17 	ldw	r3,-80(fp)
  80ff98:	1805883a 	mov	r2,r3
  80ff9c:	1085883a 	add	r2,r2,r2
  80ffa0:	10c5883a 	add	r2,r2,r3
  80ffa4:	100490ba 	slli	r2,r2,2
  80ffa8:	00c02074 	movhi	r3,129
  80ffac:	18cec304 	addi	r3,r3,15116
  80ffb0:	10c5883a 	add	r2,r2,r3
  80ffb4:	00000106 	br	80ffbc <isatty+0x44>
  80ffb8:	0005883a 	mov	r2,zero
  80ffbc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80ffc0:	e0bfff17 	ldw	r2,-4(fp)
  80ffc4:	10000e26 	beq	r2,zero,810000 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ffc8:	e0bfff17 	ldw	r2,-4(fp)
  80ffcc:	10800017 	ldw	r2,0(r2)
  80ffd0:	10800817 	ldw	r2,32(r2)
  80ffd4:	1000021e 	bne	r2,zero,80ffe0 <isatty+0x68>
    {
      return 1;
  80ffd8:	00800044 	movi	r2,1
  80ffdc:	00000d06 	br	810014 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ffe0:	e0bfed04 	addi	r2,fp,-76
  80ffe4:	100b883a 	mov	r5,r2
  80ffe8:	e13fec17 	ldw	r4,-80(fp)
  80ffec:	080fe600 	call	80fe60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80fff0:	e0bfee17 	ldw	r2,-72(fp)
  80fff4:	10880020 	cmpeqi	r2,r2,8192
  80fff8:	10803fcc 	andi	r2,r2,255
  80fffc:	00000506 	br	810014 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810000:	080ff3c0 	call	80ff3c <alt_get_errno>
  810004:	1007883a 	mov	r3,r2
  810008:	00801444 	movi	r2,81
  81000c:	18800015 	stw	r2,0(r3)
    return 0;
  810010:	0005883a 	mov	r2,zero
  }
}
  810014:	e037883a 	mov	sp,fp
  810018:	dfc00117 	ldw	ra,4(sp)
  81001c:	df000017 	ldw	fp,0(sp)
  810020:	dec00204 	addi	sp,sp,8
  810024:	f800283a 	ret

00810028 <alt_get_errno>:
{
  810028:	defffe04 	addi	sp,sp,-8
  81002c:	dfc00115 	stw	ra,4(sp)
  810030:	df000015 	stw	fp,0(sp)
  810034:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810038:	d0a01117 	ldw	r2,-32700(gp)
  81003c:	10000326 	beq	r2,zero,81004c <alt_get_errno+0x24>
  810040:	d0a01117 	ldw	r2,-32700(gp)
  810044:	103ee83a 	callr	r2
  810048:	00000106 	br	810050 <alt_get_errno+0x28>
  81004c:	d0a71804 	addi	r2,gp,-25504
}
  810050:	e037883a 	mov	sp,fp
  810054:	dfc00117 	ldw	ra,4(sp)
  810058:	df000017 	ldw	fp,0(sp)
  81005c:	dec00204 	addi	sp,sp,8
  810060:	f800283a 	ret

00810064 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  810064:	defffb04 	addi	sp,sp,-20
  810068:	dfc00415 	stw	ra,16(sp)
  81006c:	df000315 	stw	fp,12(sp)
  810070:	df000304 	addi	fp,sp,12
  810074:	e13ffe15 	stw	r4,-8(fp)
  810078:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  81007c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  810080:	e0bffe17 	ldw	r2,-8(fp)
  810084:	00802e16 	blt	zero,r2,810140 <kill+0xdc>
  810088:	e0bffd17 	ldw	r2,-12(fp)
  81008c:	10800828 	cmpgeui	r2,r2,32
  810090:	1000281e 	bne	r2,zero,810134 <kill+0xd0>
  810094:	e0bffd17 	ldw	r2,-12(fp)
  810098:	100690ba 	slli	r3,r2,2
  81009c:	00802074 	movhi	r2,129
  8100a0:	1885883a 	add	r2,r3,r2
  8100a4:	10802b17 	ldw	r2,172(r2)
  8100a8:	1000683a 	jmp	r2
  8100ac:	00810154 	movui	r2,1029
  8100b0:	00810134 	movhi	r2,1028
  8100b4:	00810134 	movhi	r2,1028
  8100b8:	0081012c 	andhi	r2,zero,1028
  8100bc:	0081012c 	andhi	r2,zero,1028
  8100c0:	0081012c 	andhi	r2,zero,1028
  8100c4:	0081012c 	andhi	r2,zero,1028
  8100c8:	00810134 	movhi	r2,1028
  8100cc:	0081012c 	andhi	r2,zero,1028
  8100d0:	0081012c 	andhi	r2,zero,1028
  8100d4:	0081012c 	andhi	r2,zero,1028
  8100d8:	0081012c 	andhi	r2,zero,1028
  8100dc:	0081012c 	andhi	r2,zero,1028
  8100e0:	0081012c 	andhi	r2,zero,1028
  8100e4:	0081012c 	andhi	r2,zero,1028
  8100e8:	0081012c 	andhi	r2,zero,1028
  8100ec:	00810154 	movui	r2,1029
  8100f0:	00810134 	movhi	r2,1028
  8100f4:	00810134 	movhi	r2,1028
  8100f8:	00810134 	movhi	r2,1028
  8100fc:	00810154 	movui	r2,1029
  810100:	00810134 	movhi	r2,1028
  810104:	00810134 	movhi	r2,1028
  810108:	0081012c 	andhi	r2,zero,1028
  81010c:	0081012c 	andhi	r2,zero,1028
  810110:	0081012c 	andhi	r2,zero,1028
  810114:	0081012c 	andhi	r2,zero,1028
  810118:	0081012c 	andhi	r2,zero,1028
  81011c:	00810134 	movhi	r2,1028
  810120:	00810134 	movhi	r2,1028
  810124:	0081012c 	andhi	r2,zero,1028
  810128:	0081012c 	andhi	r2,zero,1028
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  81012c:	0009883a 	mov	r4,zero
  810130:	080fdec0 	call	80fdec <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  810134:	00800584 	movi	r2,22
  810138:	e0bfff15 	stw	r2,-4(fp)
  81013c:	00000606 	br	810158 <kill+0xf4>
    }
  }

  else if (pid > 0)
  810140:	e0bffe17 	ldw	r2,-8(fp)
  810144:	0080040e 	bge	zero,r2,810158 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  810148:	008000c4 	movi	r2,3
  81014c:	e0bfff15 	stw	r2,-4(fp)
  810150:	00000106 	br	810158 <kill+0xf4>
      break;
  810154:	0001883a 	nop
  }

  if (status)
  810158:	e0bfff17 	ldw	r2,-4(fp)
  81015c:	10000626 	beq	r2,zero,810178 <kill+0x114>
  {
    ALT_ERRNO = status;
  810160:	08100280 	call	810028 <alt_get_errno>
  810164:	1007883a 	mov	r3,r2
  810168:	e0bfff17 	ldw	r2,-4(fp)
  81016c:	18800015 	stw	r2,0(r3)
    return -1;
  810170:	00bfffc4 	movi	r2,-1
  810174:	00000106 	br	81017c <kill+0x118>
  }

  return 0;
  810178:	0005883a 	mov	r2,zero
}
  81017c:	e037883a 	mov	sp,fp
  810180:	dfc00117 	ldw	ra,4(sp)
  810184:	df000017 	ldw	fp,0(sp)
  810188:	dec00204 	addi	sp,sp,8
  81018c:	f800283a 	ret

00810190 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810190:	defffc04 	addi	sp,sp,-16
  810194:	df000315 	stw	fp,12(sp)
  810198:	df000304 	addi	fp,sp,12
  81019c:	e13fff15 	stw	r4,-4(fp)
  8101a0:	e17ffe15 	stw	r5,-8(fp)
  8101a4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  8101a8:	e0fffe17 	ldw	r3,-8(fp)
  8101ac:	e0bfff17 	ldw	r2,-4(fp)
  8101b0:	18800c26 	beq	r3,r2,8101e4 <alt_load_section+0x54>
  {
    while( to != end )
  8101b4:	00000806 	br	8101d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  8101b8:	e0ffff17 	ldw	r3,-4(fp)
  8101bc:	18800104 	addi	r2,r3,4
  8101c0:	e0bfff15 	stw	r2,-4(fp)
  8101c4:	e0bffe17 	ldw	r2,-8(fp)
  8101c8:	11000104 	addi	r4,r2,4
  8101cc:	e13ffe15 	stw	r4,-8(fp)
  8101d0:	18c00017 	ldw	r3,0(r3)
  8101d4:	10c00015 	stw	r3,0(r2)
    while( to != end )
  8101d8:	e0fffe17 	ldw	r3,-8(fp)
  8101dc:	e0bffd17 	ldw	r2,-12(fp)
  8101e0:	18bff51e 	bne	r3,r2,8101b8 <alt_load_section+0x28>
    }
  }
}
  8101e4:	0001883a 	nop
  8101e8:	e037883a 	mov	sp,fp
  8101ec:	df000017 	ldw	fp,0(sp)
  8101f0:	dec00104 	addi	sp,sp,4
  8101f4:	f800283a 	ret

008101f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8101f8:	defffe04 	addi	sp,sp,-8
  8101fc:	dfc00115 	stw	ra,4(sp)
  810200:	df000015 	stw	fp,0(sp)
  810204:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810208:	01802074 	movhi	r6,129
  81020c:	31935104 	addi	r6,r6,19780
  810210:	01402074 	movhi	r5,129
  810214:	294c5304 	addi	r5,r5,12620
  810218:	01002074 	movhi	r4,129
  81021c:	21135104 	addi	r4,r4,19780
  810220:	08101900 	call	810190 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810224:	01802034 	movhi	r6,128
  810228:	31808e04 	addi	r6,r6,568
  81022c:	01402034 	movhi	r5,128
  810230:	29400804 	addi	r5,r5,32
  810234:	01002034 	movhi	r4,128
  810238:	21000804 	addi	r4,r4,32
  81023c:	08101900 	call	810190 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810240:	01802074 	movhi	r6,129
  810244:	318c5304 	addi	r6,r6,12620
  810248:	01402074 	movhi	r5,129
  81024c:	29499c04 	addi	r5,r5,9840
  810250:	01002074 	movhi	r4,129
  810254:	21099c04 	addi	r4,r4,9840
  810258:	08101900 	call	810190 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81025c:	08117e40 	call	8117e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810260:	08119dc0 	call	8119dc <alt_icache_flush_all>
}
  810264:	0001883a 	nop
  810268:	e037883a 	mov	sp,fp
  81026c:	dfc00117 	ldw	ra,4(sp)
  810270:	df000017 	ldw	fp,0(sp)
  810274:	dec00204 	addi	sp,sp,8
  810278:	f800283a 	ret

0081027c <alt_get_errno>:
{
  81027c:	defffe04 	addi	sp,sp,-8
  810280:	dfc00115 	stw	ra,4(sp)
  810284:	df000015 	stw	fp,0(sp)
  810288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81028c:	d0a01117 	ldw	r2,-32700(gp)
  810290:	10000326 	beq	r2,zero,8102a0 <alt_get_errno+0x24>
  810294:	d0a01117 	ldw	r2,-32700(gp)
  810298:	103ee83a 	callr	r2
  81029c:	00000106 	br	8102a4 <alt_get_errno+0x28>
  8102a0:	d0a71804 	addi	r2,gp,-25504
}
  8102a4:	e037883a 	mov	sp,fp
  8102a8:	dfc00117 	ldw	ra,4(sp)
  8102ac:	df000017 	ldw	fp,0(sp)
  8102b0:	dec00204 	addi	sp,sp,8
  8102b4:	f800283a 	ret

008102b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8102b8:	defff904 	addi	sp,sp,-28
  8102bc:	dfc00615 	stw	ra,24(sp)
  8102c0:	df000515 	stw	fp,20(sp)
  8102c4:	df000504 	addi	fp,sp,20
  8102c8:	e13ffd15 	stw	r4,-12(fp)
  8102cc:	e17ffc15 	stw	r5,-16(fp)
  8102d0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8102d4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8102d8:	e0bffd17 	ldw	r2,-12(fp)
  8102dc:	10000916 	blt	r2,zero,810304 <lseek+0x4c>
  8102e0:	e0fffd17 	ldw	r3,-12(fp)
  8102e4:	1805883a 	mov	r2,r3
  8102e8:	1085883a 	add	r2,r2,r2
  8102ec:	10c5883a 	add	r2,r2,r3
  8102f0:	100490ba 	slli	r2,r2,2
  8102f4:	00c02074 	movhi	r3,129
  8102f8:	18cec304 	addi	r3,r3,15116
  8102fc:	10c5883a 	add	r2,r2,r3
  810300:	00000106 	br	810308 <lseek+0x50>
  810304:	0005883a 	mov	r2,zero
  810308:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  81030c:	e0bffe17 	ldw	r2,-8(fp)
  810310:	10001026 	beq	r2,zero,810354 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810314:	e0bffe17 	ldw	r2,-8(fp)
  810318:	10800017 	ldw	r2,0(r2)
  81031c:	10800717 	ldw	r2,28(r2)
  810320:	10000926 	beq	r2,zero,810348 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810324:	e0bffe17 	ldw	r2,-8(fp)
  810328:	10800017 	ldw	r2,0(r2)
  81032c:	10800717 	ldw	r2,28(r2)
  810330:	e1bffb17 	ldw	r6,-20(fp)
  810334:	e17ffc17 	ldw	r5,-16(fp)
  810338:	e13ffe17 	ldw	r4,-8(fp)
  81033c:	103ee83a 	callr	r2
  810340:	e0bfff15 	stw	r2,-4(fp)
  810344:	00000506 	br	81035c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810348:	00bfde84 	movi	r2,-134
  81034c:	e0bfff15 	stw	r2,-4(fp)
  810350:	00000206 	br	81035c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  810354:	00bfebc4 	movi	r2,-81
  810358:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  81035c:	e0bfff17 	ldw	r2,-4(fp)
  810360:	1000070e 	bge	r2,zero,810380 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  810364:	081027c0 	call	81027c <alt_get_errno>
  810368:	1007883a 	mov	r3,r2
  81036c:	e0bfff17 	ldw	r2,-4(fp)
  810370:	0085c83a 	sub	r2,zero,r2
  810374:	18800015 	stw	r2,0(r3)
    rc = -1;
  810378:	00bfffc4 	movi	r2,-1
  81037c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  810380:	e0bfff17 	ldw	r2,-4(fp)
}
  810384:	e037883a 	mov	sp,fp
  810388:	dfc00117 	ldw	ra,4(sp)
  81038c:	df000017 	ldw	fp,0(sp)
  810390:	dec00204 	addi	sp,sp,8
  810394:	f800283a 	ret

00810398 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810398:	defffd04 	addi	sp,sp,-12
  81039c:	dfc00215 	stw	ra,8(sp)
  8103a0:	df000115 	stw	fp,4(sp)
  8103a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8103a8:	0009883a 	mov	r4,zero
  8103ac:	0810a9c0 	call	810a9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8103b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8103b4:	0810ad80 	call	810ad8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8103b8:	01802074 	movhi	r6,129
  8103bc:	318c4b04 	addi	r6,r6,12588
  8103c0:	01402074 	movhi	r5,129
  8103c4:	294c4b04 	addi	r5,r5,12588
  8103c8:	01002074 	movhi	r4,129
  8103cc:	210c4b04 	addi	r4,r4,12588
  8103d0:	0811d7c0 	call	811d7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8103d4:	08119140 	call	811914 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8103d8:	01002074 	movhi	r4,129
  8103dc:	21065e04 	addi	r4,r4,6520
  8103e0:	081240c0 	call	81240c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8103e4:	d0a71917 	ldw	r2,-25500(gp)
  8103e8:	d0e71a17 	ldw	r3,-25496(gp)
  8103ec:	d1271b17 	ldw	r4,-25492(gp)
  8103f0:	200d883a 	mov	r6,r4
  8103f4:	180b883a 	mov	r5,r3
  8103f8:	1009883a 	mov	r4,r2
  8103fc:	08005280 	call	800528 <main>
  810400:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810404:	01000044 	movi	r4,1
  810408:	080fce40 	call	80fce4 <close>
  exit (result);
  81040c:	e13fff17 	ldw	r4,-4(fp)
  810410:	08124200 	call	812420 <exit>

00810414 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810414:	defffe04 	addi	sp,sp,-8
  810418:	df000115 	stw	fp,4(sp)
  81041c:	df000104 	addi	fp,sp,4
  810420:	e13fff15 	stw	r4,-4(fp)
}
  810424:	0001883a 	nop
  810428:	e037883a 	mov	sp,fp
  81042c:	df000017 	ldw	fp,0(sp)
  810430:	dec00104 	addi	sp,sp,4
  810434:	f800283a 	ret

00810438 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810438:	defffe04 	addi	sp,sp,-8
  81043c:	df000115 	stw	fp,4(sp)
  810440:	df000104 	addi	fp,sp,4
  810444:	e13fff15 	stw	r4,-4(fp)
}
  810448:	0001883a 	nop
  81044c:	e037883a 	mov	sp,fp
  810450:	df000017 	ldw	fp,0(sp)
  810454:	dec00104 	addi	sp,sp,4
  810458:	f800283a 	ret

0081045c <alt_get_errno>:
{
  81045c:	defffe04 	addi	sp,sp,-8
  810460:	dfc00115 	stw	ra,4(sp)
  810464:	df000015 	stw	fp,0(sp)
  810468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81046c:	d0a01117 	ldw	r2,-32700(gp)
  810470:	10000326 	beq	r2,zero,810480 <alt_get_errno+0x24>
  810474:	d0a01117 	ldw	r2,-32700(gp)
  810478:	103ee83a 	callr	r2
  81047c:	00000106 	br	810484 <alt_get_errno+0x28>
  810480:	d0a71804 	addi	r2,gp,-25504
}
  810484:	e037883a 	mov	sp,fp
  810488:	dfc00117 	ldw	ra,4(sp)
  81048c:	df000017 	ldw	fp,0(sp)
  810490:	dec00204 	addi	sp,sp,8
  810494:	f800283a 	ret

00810498 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810498:	defff904 	addi	sp,sp,-28
  81049c:	dfc00615 	stw	ra,24(sp)
  8104a0:	df000515 	stw	fp,20(sp)
  8104a4:	df000504 	addi	fp,sp,20
  8104a8:	e13ffd15 	stw	r4,-12(fp)
  8104ac:	e17ffc15 	stw	r5,-16(fp)
  8104b0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8104b4:	e0bffd17 	ldw	r2,-12(fp)
  8104b8:	10000916 	blt	r2,zero,8104e0 <read+0x48>
  8104bc:	e0fffd17 	ldw	r3,-12(fp)
  8104c0:	1805883a 	mov	r2,r3
  8104c4:	1085883a 	add	r2,r2,r2
  8104c8:	10c5883a 	add	r2,r2,r3
  8104cc:	100490ba 	slli	r2,r2,2
  8104d0:	00c02074 	movhi	r3,129
  8104d4:	18cec304 	addi	r3,r3,15116
  8104d8:	10c5883a 	add	r2,r2,r3
  8104dc:	00000106 	br	8104e4 <read+0x4c>
  8104e0:	0005883a 	mov	r2,zero
  8104e4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  8104e8:	e0bfff17 	ldw	r2,-4(fp)
  8104ec:	10002226 	beq	r2,zero,810578 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8104f0:	e0bfff17 	ldw	r2,-4(fp)
  8104f4:	10800217 	ldw	r2,8(r2)
  8104f8:	108000cc 	andi	r2,r2,3
  8104fc:	10800060 	cmpeqi	r2,r2,1
  810500:	1000181e 	bne	r2,zero,810564 <read+0xcc>
        (fd->dev->read))
  810504:	e0bfff17 	ldw	r2,-4(fp)
  810508:	10800017 	ldw	r2,0(r2)
  81050c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810510:	10001426 	beq	r2,zero,810564 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810514:	e0bfff17 	ldw	r2,-4(fp)
  810518:	10800017 	ldw	r2,0(r2)
  81051c:	10800517 	ldw	r2,20(r2)
  810520:	e0fffb17 	ldw	r3,-20(fp)
  810524:	180d883a 	mov	r6,r3
  810528:	e17ffc17 	ldw	r5,-16(fp)
  81052c:	e13fff17 	ldw	r4,-4(fp)
  810530:	103ee83a 	callr	r2
  810534:	e0bffe15 	stw	r2,-8(fp)
  810538:	e0bffe17 	ldw	r2,-8(fp)
  81053c:	1000070e 	bge	r2,zero,81055c <read+0xc4>
        {
          ALT_ERRNO = -rval;
  810540:	081045c0 	call	81045c <alt_get_errno>
  810544:	1007883a 	mov	r3,r2
  810548:	e0bffe17 	ldw	r2,-8(fp)
  81054c:	0085c83a 	sub	r2,zero,r2
  810550:	18800015 	stw	r2,0(r3)
          return -1;
  810554:	00bfffc4 	movi	r2,-1
  810558:	00000c06 	br	81058c <read+0xf4>
        }
        return rval;
  81055c:	e0bffe17 	ldw	r2,-8(fp)
  810560:	00000a06 	br	81058c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810564:	081045c0 	call	81045c <alt_get_errno>
  810568:	1007883a 	mov	r3,r2
  81056c:	00800344 	movi	r2,13
  810570:	18800015 	stw	r2,0(r3)
  810574:	00000406 	br	810588 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  810578:	081045c0 	call	81045c <alt_get_errno>
  81057c:	1007883a 	mov	r3,r2
  810580:	00801444 	movi	r2,81
  810584:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810588:	00bfffc4 	movi	r2,-1
}
  81058c:	e037883a 	mov	sp,fp
  810590:	dfc00117 	ldw	ra,4(sp)
  810594:	df000017 	ldw	fp,0(sp)
  810598:	dec00204 	addi	sp,sp,8
  81059c:	f800283a 	ret

008105a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8105a0:	defffe04 	addi	sp,sp,-8
  8105a4:	df000115 	stw	fp,4(sp)
  8105a8:	df000104 	addi	fp,sp,4
  8105ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8105b0:	e0bfff17 	ldw	r2,-4(fp)
  8105b4:	108000d0 	cmplti	r2,r2,3
  8105b8:	1000101e 	bne	r2,zero,8105fc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  8105bc:	e0ffff17 	ldw	r3,-4(fp)
  8105c0:	1805883a 	mov	r2,r3
  8105c4:	1085883a 	add	r2,r2,r2
  8105c8:	10c5883a 	add	r2,r2,r3
  8105cc:	100490ba 	slli	r2,r2,2
  8105d0:	00c02074 	movhi	r3,129
  8105d4:	10c7883a 	add	r3,r2,r3
  8105d8:	180ec515 	stw	zero,15124(r3)
    alt_fd_list[fd].dev      = 0;
  8105dc:	e0ffff17 	ldw	r3,-4(fp)
  8105e0:	1805883a 	mov	r2,r3
  8105e4:	1085883a 	add	r2,r2,r2
  8105e8:	10c5883a 	add	r2,r2,r3
  8105ec:	100490ba 	slli	r2,r2,2
  8105f0:	00c02074 	movhi	r3,129
  8105f4:	10c7883a 	add	r3,r2,r3
  8105f8:	180ec315 	stw	zero,15116(r3)
  }
}
  8105fc:	0001883a 	nop
  810600:	e037883a 	mov	sp,fp
  810604:	df000017 	ldw	fp,0(sp)
  810608:	dec00104 	addi	sp,sp,4
  81060c:	f800283a 	ret

00810610 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810610:	defff904 	addi	sp,sp,-28
  810614:	df000615 	stw	fp,24(sp)
  810618:	df000604 	addi	fp,sp,24
  81061c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  810620:	0005303a 	rdctl	r2,status
  810624:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810628:	e0fffd17 	ldw	r3,-12(fp)
  81062c:	00bfff84 	movi	r2,-2
  810630:	1884703a 	and	r2,r3,r2
  810634:	1001703a 	wrctl	status,r2
  return context;
  810638:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81063c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810640:	d0a01217 	ldw	r2,-32696(gp)
  810644:	10c000c4 	addi	r3,r2,3
  810648:	00bfff04 	movi	r2,-4
  81064c:	1884703a 	and	r2,r3,r2
  810650:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810654:	d0e01217 	ldw	r3,-32696(gp)
  810658:	e0bffa17 	ldw	r2,-24(fp)
  81065c:	1887883a 	add	r3,r3,r2
  810660:	00804034 	movhi	r2,256
  810664:	10800004 	addi	r2,r2,0
  810668:	10c0072e 	bgeu	r2,r3,810688 <sbrk+0x78>
  81066c:	e0bfff17 	ldw	r2,-4(fp)
  810670:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  810674:	e0bffc17 	ldw	r2,-16(fp)
  810678:	1001703a 	wrctl	status,r2
}
  81067c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  810680:	00bfffc4 	movi	r2,-1
  810684:	00000c06 	br	8106b8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  810688:	d0a01217 	ldw	r2,-32696(gp)
  81068c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  810690:	d0e01217 	ldw	r3,-32696(gp)
  810694:	e0bffa17 	ldw	r2,-24(fp)
  810698:	1885883a 	add	r2,r3,r2
  81069c:	d0a01215 	stw	r2,-32696(gp)
  8106a0:	e0bfff17 	ldw	r2,-4(fp)
  8106a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  8106a8:	e0bffb17 	ldw	r2,-20(fp)
  8106ac:	1001703a 	wrctl	status,r2
}
  8106b0:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8106b4:	e0bffe17 	ldw	r2,-8(fp)
} 
  8106b8:	e037883a 	mov	sp,fp
  8106bc:	df000017 	ldw	fp,0(sp)
  8106c0:	dec00104 	addi	sp,sp,4
  8106c4:	f800283a 	ret

008106c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8106c8:	defffa04 	addi	sp,sp,-24
  8106cc:	df000515 	stw	fp,20(sp)
  8106d0:	df000504 	addi	fp,sp,20
  8106d4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  8106d8:	0005303a 	rdctl	r2,status
  8106dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106e0:	e0fffc17 	ldw	r3,-16(fp)
  8106e4:	00bfff84 	movi	r2,-2
  8106e8:	1884703a 	and	r2,r3,r2
  8106ec:	1001703a 	wrctl	status,r2
  return context;
  8106f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8106f4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  8106f8:	e0bffb17 	ldw	r2,-20(fp)
  8106fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  810700:	e0bffd17 	ldw	r2,-12(fp)
  810704:	10800017 	ldw	r2,0(r2)
  810708:	e0fffd17 	ldw	r3,-12(fp)
  81070c:	18c00117 	ldw	r3,4(r3)
  810710:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810714:	e0bffd17 	ldw	r2,-12(fp)
  810718:	10800117 	ldw	r2,4(r2)
  81071c:	e0fffd17 	ldw	r3,-12(fp)
  810720:	18c00017 	ldw	r3,0(r3)
  810724:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810728:	e0bffd17 	ldw	r2,-12(fp)
  81072c:	e0fffd17 	ldw	r3,-12(fp)
  810730:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810734:	e0bffd17 	ldw	r2,-12(fp)
  810738:	e0fffd17 	ldw	r3,-12(fp)
  81073c:	10c00015 	stw	r3,0(r2)
} 
  810740:	0001883a 	nop
  810744:	e0bfff17 	ldw	r2,-4(fp)
  810748:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  81074c:	e0bffe17 	ldw	r2,-8(fp)
  810750:	1001703a 	wrctl	status,r2
}
  810754:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  810758:	0001883a 	nop
  81075c:	e037883a 	mov	sp,fp
  810760:	df000017 	ldw	fp,0(sp)
  810764:	dec00104 	addi	sp,sp,4
  810768:	f800283a 	ret

0081076c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81076c:	defffb04 	addi	sp,sp,-20
  810770:	dfc00415 	stw	ra,16(sp)
  810774:	df000315 	stw	fp,12(sp)
  810778:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81077c:	d0a01317 	ldw	r2,-32692(gp)
  810780:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810784:	d0a71d17 	ldw	r2,-25484(gp)
  810788:	10800044 	addi	r2,r2,1
  81078c:	d0a71d15 	stw	r2,-25484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810790:	00002e06 	br	81084c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810794:	e0bfff17 	ldw	r2,-4(fp)
  810798:	10800017 	ldw	r2,0(r2)
  81079c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8107a0:	e0bfff17 	ldw	r2,-4(fp)
  8107a4:	10800403 	ldbu	r2,16(r2)
  8107a8:	10803fcc 	andi	r2,r2,255
  8107ac:	10000426 	beq	r2,zero,8107c0 <alt_tick+0x54>
  8107b0:	d0a71d17 	ldw	r2,-25484(gp)
  8107b4:	1000021e 	bne	r2,zero,8107c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8107b8:	e0bfff17 	ldw	r2,-4(fp)
  8107bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8107c0:	e0bfff17 	ldw	r2,-4(fp)
  8107c4:	10800217 	ldw	r2,8(r2)
  8107c8:	d0e71d17 	ldw	r3,-25484(gp)
  8107cc:	18801d36 	bltu	r3,r2,810844 <alt_tick+0xd8>
  8107d0:	e0bfff17 	ldw	r2,-4(fp)
  8107d4:	10800403 	ldbu	r2,16(r2)
  8107d8:	10803fcc 	andi	r2,r2,255
  8107dc:	1000191e 	bne	r2,zero,810844 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8107e0:	e0bfff17 	ldw	r2,-4(fp)
  8107e4:	10800317 	ldw	r2,12(r2)
  8107e8:	e0ffff17 	ldw	r3,-4(fp)
  8107ec:	18c00517 	ldw	r3,20(r3)
  8107f0:	1809883a 	mov	r4,r3
  8107f4:	103ee83a 	callr	r2
  8107f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
  810800:	1000031e 	bne	r2,zero,810810 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810804:	e13fff17 	ldw	r4,-4(fp)
  810808:	08106c80 	call	8106c8 <alt_alarm_stop>
  81080c:	00000d06 	br	810844 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810810:	e0bfff17 	ldw	r2,-4(fp)
  810814:	10c00217 	ldw	r3,8(r2)
  810818:	e0bffd17 	ldw	r2,-12(fp)
  81081c:	1887883a 	add	r3,r3,r2
  810820:	e0bfff17 	ldw	r2,-4(fp)
  810824:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810828:	e0bfff17 	ldw	r2,-4(fp)
  81082c:	10c00217 	ldw	r3,8(r2)
  810830:	d0a71d17 	ldw	r2,-25484(gp)
  810834:	1880032e 	bgeu	r3,r2,810844 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810838:	e0bfff17 	ldw	r2,-4(fp)
  81083c:	00c00044 	movi	r3,1
  810840:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  81084c:	e0ffff17 	ldw	r3,-4(fp)
  810850:	d0a01304 	addi	r2,gp,-32692
  810854:	18bfcf1e 	bne	r3,r2,810794 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810858:	0001883a 	nop
}
  81085c:	0001883a 	nop
  810860:	e037883a 	mov	sp,fp
  810864:	dfc00117 	ldw	ra,4(sp)
  810868:	df000017 	ldw	fp,0(sp)
  81086c:	dec00204 	addi	sp,sp,8
  810870:	f800283a 	ret

00810874 <alt_get_errno>:
{
  810874:	defffe04 	addi	sp,sp,-8
  810878:	dfc00115 	stw	ra,4(sp)
  81087c:	df000015 	stw	fp,0(sp)
  810880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810884:	d0a01117 	ldw	r2,-32700(gp)
  810888:	10000326 	beq	r2,zero,810898 <alt_get_errno+0x24>
  81088c:	d0a01117 	ldw	r2,-32700(gp)
  810890:	103ee83a 	callr	r2
  810894:	00000106 	br	81089c <alt_get_errno+0x28>
  810898:	d0a71804 	addi	r2,gp,-25504
}
  81089c:	e037883a 	mov	sp,fp
  8108a0:	dfc00117 	ldw	ra,4(sp)
  8108a4:	df000017 	ldw	fp,0(sp)
  8108a8:	dec00204 	addi	sp,sp,8
  8108ac:	f800283a 	ret

008108b0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  8108b0:	defffc04 	addi	sp,sp,-16
  8108b4:	dfc00315 	stw	ra,12(sp)
  8108b8:	df000215 	stw	fp,8(sp)
  8108bc:	df000204 	addi	fp,sp,8
  8108c0:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8108c4:	d0a71d17 	ldw	r2,-25484(gp)
  clock_t ticks = alt_nticks(); 
  8108c8:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
  8108cc:	d0a71c17 	ldw	r2,-25488(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8108d0:	1000061e 	bne	r2,zero,8108ec <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  8108d4:	08108740 	call	810874 <alt_get_errno>
  8108d8:	1007883a 	mov	r3,r2
  8108dc:	00801604 	movi	r2,88
  8108e0:	18800015 	stw	r2,0(r3)
    return 0;
  8108e4:	0005883a 	mov	r2,zero
  8108e8:	00000a06 	br	810914 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  8108ec:	e0bffe17 	ldw	r2,-8(fp)
  8108f0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  8108f4:	e0bffe17 	ldw	r2,-8(fp)
  8108f8:	e0ffff17 	ldw	r3,-4(fp)
  8108fc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  810900:	e0bffe17 	ldw	r2,-8(fp)
  810904:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  810908:	e0bffe17 	ldw	r2,-8(fp)
  81090c:	10000315 	stw	zero,12(r2)

  return ticks;
  810910:	e0bfff17 	ldw	r2,-4(fp)
}
  810914:	e037883a 	mov	sp,fp
  810918:	dfc00117 	ldw	ra,4(sp)
  81091c:	df000017 	ldw	fp,0(sp)
  810920:	dec00204 	addi	sp,sp,8
  810924:	f800283a 	ret

00810928 <alt_get_errno>:
{
  810928:	defffe04 	addi	sp,sp,-8
  81092c:	dfc00115 	stw	ra,4(sp)
  810930:	df000015 	stw	fp,0(sp)
  810934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810938:	d0a01117 	ldw	r2,-32700(gp)
  81093c:	10000326 	beq	r2,zero,81094c <alt_get_errno+0x24>
  810940:	d0a01117 	ldw	r2,-32700(gp)
  810944:	103ee83a 	callr	r2
  810948:	00000106 	br	810950 <alt_get_errno+0x28>
  81094c:	d0a71804 	addi	r2,gp,-25504
}
  810950:	e037883a 	mov	sp,fp
  810954:	dfc00117 	ldw	ra,4(sp)
  810958:	df000017 	ldw	fp,0(sp)
  81095c:	dec00204 	addi	sp,sp,8
  810960:	f800283a 	ret

00810964 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810964:	defff904 	addi	sp,sp,-28
  810968:	dfc00615 	stw	ra,24(sp)
  81096c:	df000515 	stw	fp,20(sp)
  810970:	df000504 	addi	fp,sp,20
  810974:	e13ffd15 	stw	r4,-12(fp)
  810978:	e17ffc15 	stw	r5,-16(fp)
  81097c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810980:	e0bffd17 	ldw	r2,-12(fp)
  810984:	10000916 	blt	r2,zero,8109ac <write+0x48>
  810988:	e0fffd17 	ldw	r3,-12(fp)
  81098c:	1805883a 	mov	r2,r3
  810990:	1085883a 	add	r2,r2,r2
  810994:	10c5883a 	add	r2,r2,r3
  810998:	100490ba 	slli	r2,r2,2
  81099c:	00c02074 	movhi	r3,129
  8109a0:	18cec304 	addi	r3,r3,15116
  8109a4:	10c5883a 	add	r2,r2,r3
  8109a8:	00000106 	br	8109b0 <write+0x4c>
  8109ac:	0005883a 	mov	r2,zero
  8109b0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  8109b4:	e0bfff17 	ldw	r2,-4(fp)
  8109b8:	10002126 	beq	r2,zero,810a40 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8109bc:	e0bfff17 	ldw	r2,-4(fp)
  8109c0:	10800217 	ldw	r2,8(r2)
  8109c4:	108000cc 	andi	r2,r2,3
  8109c8:	10001826 	beq	r2,zero,810a2c <write+0xc8>
  8109cc:	e0bfff17 	ldw	r2,-4(fp)
  8109d0:	10800017 	ldw	r2,0(r2)
  8109d4:	10800617 	ldw	r2,24(r2)
  8109d8:	10001426 	beq	r2,zero,810a2c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8109dc:	e0bfff17 	ldw	r2,-4(fp)
  8109e0:	10800017 	ldw	r2,0(r2)
  8109e4:	10800617 	ldw	r2,24(r2)
  8109e8:	e0fffb17 	ldw	r3,-20(fp)
  8109ec:	180d883a 	mov	r6,r3
  8109f0:	e17ffc17 	ldw	r5,-16(fp)
  8109f4:	e13fff17 	ldw	r4,-4(fp)
  8109f8:	103ee83a 	callr	r2
  8109fc:	e0bffe15 	stw	r2,-8(fp)
  810a00:	e0bffe17 	ldw	r2,-8(fp)
  810a04:	1000070e 	bge	r2,zero,810a24 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  810a08:	08109280 	call	810928 <alt_get_errno>
  810a0c:	1007883a 	mov	r3,r2
  810a10:	e0bffe17 	ldw	r2,-8(fp)
  810a14:	0085c83a 	sub	r2,zero,r2
  810a18:	18800015 	stw	r2,0(r3)
        return -1;
  810a1c:	00bfffc4 	movi	r2,-1
  810a20:	00000c06 	br	810a54 <write+0xf0>
      }
      return rval;
  810a24:	e0bffe17 	ldw	r2,-8(fp)
  810a28:	00000a06 	br	810a54 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810a2c:	08109280 	call	810928 <alt_get_errno>
  810a30:	1007883a 	mov	r3,r2
  810a34:	00800344 	movi	r2,13
  810a38:	18800015 	stw	r2,0(r3)
  810a3c:	00000406 	br	810a50 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810a40:	08109280 	call	810928 <alt_get_errno>
  810a44:	1007883a 	mov	r3,r2
  810a48:	00801444 	movi	r2,81
  810a4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810a50:	00bfffc4 	movi	r2,-1
}
  810a54:	e037883a 	mov	sp,fp
  810a58:	dfc00117 	ldw	ra,4(sp)
  810a5c:	df000017 	ldw	fp,0(sp)
  810a60:	dec00204 	addi	sp,sp,8
  810a64:	f800283a 	ret

00810a68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810a68:	defffd04 	addi	sp,sp,-12
  810a6c:	dfc00215 	stw	ra,8(sp)
  810a70:	df000115 	stw	fp,4(sp)
  810a74:	df000104 	addi	fp,sp,4
  810a78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  810a7c:	d1600e04 	addi	r5,gp,-32712
  810a80:	e13fff17 	ldw	r4,-4(fp)
  810a84:	081186c0 	call	81186c <alt_dev_llist_insert>
}
  810a88:	e037883a 	mov	sp,fp
  810a8c:	dfc00117 	ldw	ra,4(sp)
  810a90:	df000017 	ldw	fp,0(sp)
  810a94:	dec00204 	addi	sp,sp,8
  810a98:	f800283a 	ret

00810a9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810a9c:	defffd04 	addi	sp,sp,-12
  810aa0:	dfc00215 	stw	ra,8(sp)
  810aa4:	df000115 	stw	fp,4(sp)
  810aa8:	df000104 	addi	fp,sp,4
  810aac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  810ab0:	08120700 	call	812070 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810ab4:	00800044 	movi	r2,1
  810ab8:	1001703a 	wrctl	status,r2
}
  810abc:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  810ac0:	0001883a 	nop
  810ac4:	e037883a 	mov	sp,fp
  810ac8:	dfc00117 	ldw	ra,4(sp)
  810acc:	df000017 	ldw	fp,0(sp)
  810ad0:	dec00204 	addi	sp,sp,8
  810ad4:	f800283a 	ret

00810ad8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810ad8:	defffe04 	addi	sp,sp,-8
  810adc:	dfc00115 	stw	ra,4(sp)
  810ae0:	df000015 	stw	fp,0(sp)
  810ae4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  810ae8:	01c0fa04 	movi	r7,1000
  810aec:	01800044 	movi	r6,1
  810af0:	000b883a 	mov	r5,zero
  810af4:	01004034 	movhi	r4,256
  810af8:	21040004 	addi	r4,r4,4096
  810afc:	081162c0 	call	81162c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810b00:	01800404 	movi	r6,16
  810b04:	000b883a 	mov	r5,zero
  810b08:	01002074 	movhi	r4,129
  810b0c:	210f2d04 	addi	r4,r4,15540
  810b10:	0810ca00 	call	810ca0 <altera_avalon_jtag_uart_init>
  810b14:	01002074 	movhi	r4,129
  810b18:	210f2304 	addi	r4,r4,15500
  810b1c:	0810a680 	call	810a68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  810b20:	0001883a 	nop
}
  810b24:	0001883a 	nop
  810b28:	e037883a 	mov	sp,fp
  810b2c:	dfc00117 	ldw	ra,4(sp)
  810b30:	df000017 	ldw	fp,0(sp)
  810b34:	dec00204 	addi	sp,sp,8
  810b38:	f800283a 	ret

00810b3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810b3c:	defffa04 	addi	sp,sp,-24
  810b40:	dfc00515 	stw	ra,20(sp)
  810b44:	df000415 	stw	fp,16(sp)
  810b48:	df000404 	addi	fp,sp,16
  810b4c:	e13ffe15 	stw	r4,-8(fp)
  810b50:	e17ffd15 	stw	r5,-12(fp)
  810b54:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810b58:	e0bffe17 	ldw	r2,-8(fp)
  810b5c:	10800017 	ldw	r2,0(r2)
  810b60:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810b64:	e0bfff17 	ldw	r2,-4(fp)
  810b68:	10c00a04 	addi	r3,r2,40
  810b6c:	e0bffe17 	ldw	r2,-8(fp)
  810b70:	10800217 	ldw	r2,8(r2)
  810b74:	100f883a 	mov	r7,r2
  810b78:	e1bffc17 	ldw	r6,-16(fp)
  810b7c:	e17ffd17 	ldw	r5,-12(fp)
  810b80:	1809883a 	mov	r4,r3
  810b84:	08111680 	call	811168 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810b88:	e037883a 	mov	sp,fp
  810b8c:	dfc00117 	ldw	ra,4(sp)
  810b90:	df000017 	ldw	fp,0(sp)
  810b94:	dec00204 	addi	sp,sp,8
  810b98:	f800283a 	ret

00810b9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810b9c:	defffa04 	addi	sp,sp,-24
  810ba0:	dfc00515 	stw	ra,20(sp)
  810ba4:	df000415 	stw	fp,16(sp)
  810ba8:	df000404 	addi	fp,sp,16
  810bac:	e13ffe15 	stw	r4,-8(fp)
  810bb0:	e17ffd15 	stw	r5,-12(fp)
  810bb4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810bb8:	e0bffe17 	ldw	r2,-8(fp)
  810bbc:	10800017 	ldw	r2,0(r2)
  810bc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810bc4:	e0bfff17 	ldw	r2,-4(fp)
  810bc8:	10c00a04 	addi	r3,r2,40
  810bcc:	e0bffe17 	ldw	r2,-8(fp)
  810bd0:	10800217 	ldw	r2,8(r2)
  810bd4:	100f883a 	mov	r7,r2
  810bd8:	e1bffc17 	ldw	r6,-16(fp)
  810bdc:	e17ffd17 	ldw	r5,-12(fp)
  810be0:	1809883a 	mov	r4,r3
  810be4:	08113880 	call	811388 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810be8:	e037883a 	mov	sp,fp
  810bec:	dfc00117 	ldw	ra,4(sp)
  810bf0:	df000017 	ldw	fp,0(sp)
  810bf4:	dec00204 	addi	sp,sp,8
  810bf8:	f800283a 	ret

00810bfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810bfc:	defffc04 	addi	sp,sp,-16
  810c00:	dfc00315 	stw	ra,12(sp)
  810c04:	df000215 	stw	fp,8(sp)
  810c08:	df000204 	addi	fp,sp,8
  810c0c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810c10:	e0bffe17 	ldw	r2,-8(fp)
  810c14:	10800017 	ldw	r2,0(r2)
  810c18:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810c1c:	e0bfff17 	ldw	r2,-4(fp)
  810c20:	10c00a04 	addi	r3,r2,40
  810c24:	e0bffe17 	ldw	r2,-8(fp)
  810c28:	10800217 	ldw	r2,8(r2)
  810c2c:	100b883a 	mov	r5,r2
  810c30:	1809883a 	mov	r4,r3
  810c34:	081100c0 	call	81100c <altera_avalon_jtag_uart_close>
}
  810c38:	e037883a 	mov	sp,fp
  810c3c:	dfc00117 	ldw	ra,4(sp)
  810c40:	df000017 	ldw	fp,0(sp)
  810c44:	dec00204 	addi	sp,sp,8
  810c48:	f800283a 	ret

00810c4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810c4c:	defffa04 	addi	sp,sp,-24
  810c50:	dfc00515 	stw	ra,20(sp)
  810c54:	df000415 	stw	fp,16(sp)
  810c58:	df000404 	addi	fp,sp,16
  810c5c:	e13ffe15 	stw	r4,-8(fp)
  810c60:	e17ffd15 	stw	r5,-12(fp)
  810c64:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810c68:	e0bffe17 	ldw	r2,-8(fp)
  810c6c:	10800017 	ldw	r2,0(r2)
  810c70:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810c74:	e0bfff17 	ldw	r2,-4(fp)
  810c78:	10800a04 	addi	r2,r2,40
  810c7c:	e1bffc17 	ldw	r6,-16(fp)
  810c80:	e17ffd17 	ldw	r5,-12(fp)
  810c84:	1009883a 	mov	r4,r2
  810c88:	08110740 	call	811074 <altera_avalon_jtag_uart_ioctl>
}
  810c8c:	e037883a 	mov	sp,fp
  810c90:	dfc00117 	ldw	ra,4(sp)
  810c94:	df000017 	ldw	fp,0(sp)
  810c98:	dec00204 	addi	sp,sp,8
  810c9c:	f800283a 	ret

00810ca0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810ca0:	defffa04 	addi	sp,sp,-24
  810ca4:	dfc00515 	stw	ra,20(sp)
  810ca8:	df000415 	stw	fp,16(sp)
  810cac:	df000404 	addi	fp,sp,16
  810cb0:	e13fff15 	stw	r4,-4(fp)
  810cb4:	e17ffe15 	stw	r5,-8(fp)
  810cb8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810cbc:	e0bfff17 	ldw	r2,-4(fp)
  810cc0:	00c00044 	movi	r3,1
  810cc4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810cc8:	e0bfff17 	ldw	r2,-4(fp)
  810ccc:	10800017 	ldw	r2,0(r2)
  810cd0:	10800104 	addi	r2,r2,4
  810cd4:	1007883a 	mov	r3,r2
  810cd8:	e0bfff17 	ldw	r2,-4(fp)
  810cdc:	10800817 	ldw	r2,32(r2)
  810ce0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810ce4:	e0bffe17 	ldw	r2,-8(fp)
  810ce8:	e0fffd17 	ldw	r3,-12(fp)
  810cec:	d8000015 	stw	zero,0(sp)
  810cf0:	e1ffff17 	ldw	r7,-4(fp)
  810cf4:	01802074 	movhi	r6,129
  810cf8:	31835804 	addi	r6,r6,3424
  810cfc:	180b883a 	mov	r5,r3
  810d00:	1009883a 	mov	r4,r2
  810d04:	0811a100 	call	811a10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810d08:	e0bfff17 	ldw	r2,-4(fp)
  810d0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810d10:	e0bfff17 	ldw	r2,-4(fp)
  810d14:	10800204 	addi	r2,r2,8
  810d18:	d0e71c17 	ldw	r3,-25488(gp)
  810d1c:	e1ffff17 	ldw	r7,-4(fp)
  810d20:	01802074 	movhi	r6,129
  810d24:	3183db04 	addi	r6,r6,3948
  810d28:	180b883a 	mov	r5,r3
  810d2c:	1009883a 	mov	r4,r2
  810d30:	08116b00 	call	8116b0 <alt_alarm_start>
  810d34:	1000040e 	bge	r2,zero,810d48 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810d38:	e0ffff17 	ldw	r3,-4(fp)
  810d3c:	00a00034 	movhi	r2,32768
  810d40:	10bfffc4 	addi	r2,r2,-1
  810d44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810d48:	0001883a 	nop
  810d4c:	e037883a 	mov	sp,fp
  810d50:	dfc00117 	ldw	ra,4(sp)
  810d54:	df000017 	ldw	fp,0(sp)
  810d58:	dec00204 	addi	sp,sp,8
  810d5c:	f800283a 	ret

00810d60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810d60:	defff804 	addi	sp,sp,-32
  810d64:	df000715 	stw	fp,28(sp)
  810d68:	df000704 	addi	fp,sp,28
  810d6c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810d70:	e0bff917 	ldw	r2,-28(fp)
  810d74:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  810d78:	e0bffd17 	ldw	r2,-12(fp)
  810d7c:	10800017 	ldw	r2,0(r2)
  810d80:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810d84:	e0bffc17 	ldw	r2,-16(fp)
  810d88:	10800104 	addi	r2,r2,4
  810d8c:	10800037 	ldwio	r2,0(r2)
  810d90:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810d94:	e0bffb17 	ldw	r2,-20(fp)
  810d98:	1080c00c 	andi	r2,r2,768
  810d9c:	10006d26 	beq	r2,zero,810f54 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810da0:	e0bffb17 	ldw	r2,-20(fp)
  810da4:	1080400c 	andi	r2,r2,256
  810da8:	10003526 	beq	r2,zero,810e80 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810dac:	00800074 	movhi	r2,1
  810db0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810db4:	e0bffd17 	ldw	r2,-12(fp)
  810db8:	10800a17 	ldw	r2,40(r2)
  810dbc:	10800044 	addi	r2,r2,1
  810dc0:	1081ffcc 	andi	r2,r2,2047
  810dc4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  810dc8:	e0bffd17 	ldw	r2,-12(fp)
  810dcc:	10800b17 	ldw	r2,44(r2)
  810dd0:	e0fffa17 	ldw	r3,-24(fp)
  810dd4:	18801526 	beq	r3,r2,810e2c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810dd8:	e0bffc17 	ldw	r2,-16(fp)
  810ddc:	10800037 	ldwio	r2,0(r2)
  810de0:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810de4:	e0bfff17 	ldw	r2,-4(fp)
  810de8:	10a0000c 	andi	r2,r2,32768
  810dec:	10001126 	beq	r2,zero,810e34 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810df0:	e0bffd17 	ldw	r2,-12(fp)
  810df4:	10800a17 	ldw	r2,40(r2)
  810df8:	e0ffff17 	ldw	r3,-4(fp)
  810dfc:	1809883a 	mov	r4,r3
  810e00:	e0fffd17 	ldw	r3,-12(fp)
  810e04:	1885883a 	add	r2,r3,r2
  810e08:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810e0c:	e0bffd17 	ldw	r2,-12(fp)
  810e10:	10800a17 	ldw	r2,40(r2)
  810e14:	10800044 	addi	r2,r2,1
  810e18:	10c1ffcc 	andi	r3,r2,2047
  810e1c:	e0bffd17 	ldw	r2,-12(fp)
  810e20:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810e24:	0001883a 	nop
      {
  810e28:	003fe206 	br	810db4 <altera_avalon_jtag_uart_irq+0x54>
          break;
  810e2c:	0001883a 	nop
  810e30:	00000106 	br	810e38 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  810e34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810e38:	e0bfff17 	ldw	r2,-4(fp)
  810e3c:	10bfffec 	andhi	r2,r2,65535
  810e40:	10000f26 	beq	r2,zero,810e80 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810e44:	e0bffd17 	ldw	r2,-12(fp)
  810e48:	10c00817 	ldw	r3,32(r2)
  810e4c:	00bfff84 	movi	r2,-2
  810e50:	1886703a 	and	r3,r3,r2
  810e54:	e0bffd17 	ldw	r2,-12(fp)
  810e58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810e5c:	e0bffc17 	ldw	r2,-16(fp)
  810e60:	10800104 	addi	r2,r2,4
  810e64:	1007883a 	mov	r3,r2
  810e68:	e0bffd17 	ldw	r2,-12(fp)
  810e6c:	10800817 	ldw	r2,32(r2)
  810e70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e74:	e0bffc17 	ldw	r2,-16(fp)
  810e78:	10800104 	addi	r2,r2,4
  810e7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810e80:	e0bffb17 	ldw	r2,-20(fp)
  810e84:	1080800c 	andi	r2,r2,512
  810e88:	103fbe26 	beq	r2,zero,810d84 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810e8c:	e0bffb17 	ldw	r2,-20(fp)
  810e90:	1004d43a 	srli	r2,r2,16
  810e94:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810e98:	00001406 	br	810eec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	e0fffd17 	ldw	r3,-12(fp)
  810ea4:	18c00d17 	ldw	r3,52(r3)
  810ea8:	e13ffd17 	ldw	r4,-12(fp)
  810eac:	20c7883a 	add	r3,r4,r3
  810eb0:	18c20e03 	ldbu	r3,2104(r3)
  810eb4:	18c03fcc 	andi	r3,r3,255
  810eb8:	18c0201c 	xori	r3,r3,128
  810ebc:	18ffe004 	addi	r3,r3,-128
  810ec0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810ec4:	e0bffd17 	ldw	r2,-12(fp)
  810ec8:	10800d17 	ldw	r2,52(r2)
  810ecc:	10800044 	addi	r2,r2,1
  810ed0:	10c1ffcc 	andi	r3,r2,2047
  810ed4:	e0bffd17 	ldw	r2,-12(fp)
  810ed8:	10c00d15 	stw	r3,52(r2)
  810edc:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810ee0:	e0bffe17 	ldw	r2,-8(fp)
  810ee4:	10bfffc4 	addi	r2,r2,-1
  810ee8:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  810eec:	e0bffe17 	ldw	r2,-8(fp)
  810ef0:	10000526 	beq	r2,zero,810f08 <altera_avalon_jtag_uart_irq+0x1a8>
  810ef4:	e0bffd17 	ldw	r2,-12(fp)
  810ef8:	10c00d17 	ldw	r3,52(r2)
  810efc:	e0bffd17 	ldw	r2,-12(fp)
  810f00:	10800c17 	ldw	r2,48(r2)
  810f04:	18bfe51e 	bne	r3,r2,810e9c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  810f08:	e0bffe17 	ldw	r2,-8(fp)
  810f0c:	103f9d26 	beq	r2,zero,810d84 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810f10:	e0bffd17 	ldw	r2,-12(fp)
  810f14:	10c00817 	ldw	r3,32(r2)
  810f18:	00bfff44 	movi	r2,-3
  810f1c:	1886703a 	and	r3,r3,r2
  810f20:	e0bffd17 	ldw	r2,-12(fp)
  810f24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810f28:	e0bffd17 	ldw	r2,-12(fp)
  810f2c:	10800017 	ldw	r2,0(r2)
  810f30:	10800104 	addi	r2,r2,4
  810f34:	1007883a 	mov	r3,r2
  810f38:	e0bffd17 	ldw	r2,-12(fp)
  810f3c:	10800817 	ldw	r2,32(r2)
  810f40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810f44:	e0bffc17 	ldw	r2,-16(fp)
  810f48:	10800104 	addi	r2,r2,4
  810f4c:	10800037 	ldwio	r2,0(r2)
  {
  810f50:	003f8c06 	br	810d84 <altera_avalon_jtag_uart_irq+0x24>
      break;
  810f54:	0001883a 	nop
      }
    }
  }
}
  810f58:	0001883a 	nop
  810f5c:	e037883a 	mov	sp,fp
  810f60:	df000017 	ldw	fp,0(sp)
  810f64:	dec00104 	addi	sp,sp,4
  810f68:	f800283a 	ret

00810f6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810f6c:	defffc04 	addi	sp,sp,-16
  810f70:	df000315 	stw	fp,12(sp)
  810f74:	df000304 	addi	fp,sp,12
  810f78:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810f7c:	e0bffd17 	ldw	r2,-12(fp)
  810f80:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810f84:	e0bfff17 	ldw	r2,-4(fp)
  810f88:	10800017 	ldw	r2,0(r2)
  810f8c:	10800104 	addi	r2,r2,4
  810f90:	10800037 	ldwio	r2,0(r2)
  810f94:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810f98:	e0bffe17 	ldw	r2,-8(fp)
  810f9c:	1081000c 	andi	r2,r2,1024
  810fa0:	10000b26 	beq	r2,zero,810fd0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810fa4:	e0bfff17 	ldw	r2,-4(fp)
  810fa8:	10800017 	ldw	r2,0(r2)
  810fac:	10800104 	addi	r2,r2,4
  810fb0:	1007883a 	mov	r3,r2
  810fb4:	e0bfff17 	ldw	r2,-4(fp)
  810fb8:	10800817 	ldw	r2,32(r2)
  810fbc:	10810014 	ori	r2,r2,1024
  810fc0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810fc4:	e0bfff17 	ldw	r2,-4(fp)
  810fc8:	10000915 	stw	zero,36(r2)
  810fcc:	00000a06 	br	810ff8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810fd0:	e0bfff17 	ldw	r2,-4(fp)
  810fd4:	10c00917 	ldw	r3,36(r2)
  810fd8:	00a00034 	movhi	r2,32768
  810fdc:	10bfff04 	addi	r2,r2,-4
  810fe0:	10c00536 	bltu	r2,r3,810ff8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810fe4:	e0bfff17 	ldw	r2,-4(fp)
  810fe8:	10800917 	ldw	r2,36(r2)
  810fec:	10c00044 	addi	r3,r2,1
  810ff0:	e0bfff17 	ldw	r2,-4(fp)
  810ff4:	10c00915 	stw	r3,36(r2)
  810ff8:	d0a71c17 	ldw	r2,-25488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810ffc:	e037883a 	mov	sp,fp
  811000:	df000017 	ldw	fp,0(sp)
  811004:	dec00104 	addi	sp,sp,4
  811008:	f800283a 	ret

0081100c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81100c:	defffd04 	addi	sp,sp,-12
  811010:	df000215 	stw	fp,8(sp)
  811014:	df000204 	addi	fp,sp,8
  811018:	e13fff15 	stw	r4,-4(fp)
  81101c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811020:	00000506 	br	811038 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811024:	e0bffe17 	ldw	r2,-8(fp)
  811028:	1090000c 	andi	r2,r2,16384
  81102c:	10000226 	beq	r2,zero,811038 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811030:	00bffd44 	movi	r2,-11
  811034:	00000b06 	br	811064 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811038:	e0bfff17 	ldw	r2,-4(fp)
  81103c:	10c00d17 	ldw	r3,52(r2)
  811040:	e0bfff17 	ldw	r2,-4(fp)
  811044:	10800c17 	ldw	r2,48(r2)
  811048:	18800526 	beq	r3,r2,811060 <altera_avalon_jtag_uart_close+0x54>
  81104c:	e0bfff17 	ldw	r2,-4(fp)
  811050:	10c00917 	ldw	r3,36(r2)
  811054:	e0bfff17 	ldw	r2,-4(fp)
  811058:	10800117 	ldw	r2,4(r2)
  81105c:	18bff136 	bltu	r3,r2,811024 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  811060:	0005883a 	mov	r2,zero
}
  811064:	e037883a 	mov	sp,fp
  811068:	df000017 	ldw	fp,0(sp)
  81106c:	dec00104 	addi	sp,sp,4
  811070:	f800283a 	ret

00811074 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811074:	defffa04 	addi	sp,sp,-24
  811078:	df000515 	stw	fp,20(sp)
  81107c:	df000504 	addi	fp,sp,20
  811080:	e13ffd15 	stw	r4,-12(fp)
  811084:	e17ffc15 	stw	r5,-16(fp)
  811088:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  81108c:	00bff9c4 	movi	r2,-25
  811090:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  811094:	e0bffc17 	ldw	r2,-16(fp)
  811098:	109a8060 	cmpeqi	r2,r2,27137
  81109c:	1000041e 	bne	r2,zero,8110b0 <altera_avalon_jtag_uart_ioctl+0x3c>
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	109a80a0 	cmpeqi	r2,r2,27138
  8110a8:	1000181e 	bne	r2,zero,81110c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  8110ac:	00002906 	br	811154 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  8110b0:	e0bffd17 	ldw	r2,-12(fp)
  8110b4:	10c00117 	ldw	r3,4(r2)
  8110b8:	00a00034 	movhi	r2,32768
  8110bc:	10bfffc4 	addi	r2,r2,-1
  8110c0:	18802126 	beq	r3,r2,811148 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  8110c4:	e0bffb17 	ldw	r2,-20(fp)
  8110c8:	10800017 	ldw	r2,0(r2)
  8110cc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8110d0:	e0bffe17 	ldw	r2,-8(fp)
  8110d4:	10800090 	cmplti	r2,r2,2
  8110d8:	1000061e 	bne	r2,zero,8110f4 <altera_avalon_jtag_uart_ioctl+0x80>
  8110dc:	e0fffe17 	ldw	r3,-8(fp)
  8110e0:	00a00034 	movhi	r2,32768
  8110e4:	10bfffc4 	addi	r2,r2,-1
  8110e8:	18800226 	beq	r3,r2,8110f4 <altera_avalon_jtag_uart_ioctl+0x80>
  8110ec:	e0bffe17 	ldw	r2,-8(fp)
  8110f0:	00000206 	br	8110fc <altera_avalon_jtag_uart_ioctl+0x88>
  8110f4:	00a00034 	movhi	r2,32768
  8110f8:	10bfff84 	addi	r2,r2,-2
  8110fc:	e0fffd17 	ldw	r3,-12(fp)
  811100:	18800115 	stw	r2,4(r3)
      rc = 0;
  811104:	e03fff15 	stw	zero,-4(fp)
    break;
  811108:	00000f06 	br	811148 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  81110c:	e0bffd17 	ldw	r2,-12(fp)
  811110:	10c00117 	ldw	r3,4(r2)
  811114:	00a00034 	movhi	r2,32768
  811118:	10bfffc4 	addi	r2,r2,-1
  81111c:	18800c26 	beq	r3,r2,811150 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811120:	e0bffd17 	ldw	r2,-12(fp)
  811124:	10c00917 	ldw	r3,36(r2)
  811128:	e0bffd17 	ldw	r2,-12(fp)
  81112c:	10800117 	ldw	r2,4(r2)
  811130:	1885803a 	cmpltu	r2,r3,r2
  811134:	10c03fcc 	andi	r3,r2,255
  811138:	e0bffb17 	ldw	r2,-20(fp)
  81113c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811140:	e03fff15 	stw	zero,-4(fp)
    break;
  811144:	00000206 	br	811150 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  811148:	0001883a 	nop
  81114c:	00000106 	br	811154 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  811150:	0001883a 	nop
  }

  return rc;
  811154:	e0bfff17 	ldw	r2,-4(fp)
}
  811158:	e037883a 	mov	sp,fp
  81115c:	df000017 	ldw	fp,0(sp)
  811160:	dec00104 	addi	sp,sp,4
  811164:	f800283a 	ret

00811168 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811168:	defff304 	addi	sp,sp,-52
  81116c:	dfc00c15 	stw	ra,48(sp)
  811170:	df000b15 	stw	fp,44(sp)
  811174:	df000b04 	addi	fp,sp,44
  811178:	e13ff815 	stw	r4,-32(fp)
  81117c:	e17ff715 	stw	r5,-36(fp)
  811180:	e1bff615 	stw	r6,-40(fp)
  811184:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  811188:	e0bff717 	ldw	r2,-36(fp)
  81118c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811190:	00004706 	br	8112b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811194:	e0bff817 	ldw	r2,-32(fp)
  811198:	10800a17 	ldw	r2,40(r2)
  81119c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  8111a0:	e0bff817 	ldw	r2,-32(fp)
  8111a4:	10800b17 	ldw	r2,44(r2)
  8111a8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  8111ac:	e0fffd17 	ldw	r3,-12(fp)
  8111b0:	e0bffc17 	ldw	r2,-16(fp)
  8111b4:	18800536 	bltu	r3,r2,8111cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8111b8:	e0fffd17 	ldw	r3,-12(fp)
  8111bc:	e0bffc17 	ldw	r2,-16(fp)
  8111c0:	1885c83a 	sub	r2,r3,r2
  8111c4:	e0bffe15 	stw	r2,-8(fp)
  8111c8:	00000406 	br	8111dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8111cc:	00c20004 	movi	r3,2048
  8111d0:	e0bffc17 	ldw	r2,-16(fp)
  8111d4:	1885c83a 	sub	r2,r3,r2
  8111d8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  8111dc:	e0bffe17 	ldw	r2,-8(fp)
  8111e0:	10001e26 	beq	r2,zero,81125c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8111e4:	e0fff617 	ldw	r3,-40(fp)
  8111e8:	e0bffe17 	ldw	r2,-8(fp)
  8111ec:	1880022e 	bgeu	r3,r2,8111f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8111f0:	e0bff617 	ldw	r2,-40(fp)
  8111f4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8111f8:	e0bff817 	ldw	r2,-32(fp)
  8111fc:	10c00e04 	addi	r3,r2,56
  811200:	e0bffc17 	ldw	r2,-16(fp)
  811204:	1885883a 	add	r2,r3,r2
  811208:	e1bffe17 	ldw	r6,-8(fp)
  81120c:	100b883a 	mov	r5,r2
  811210:	e13fff17 	ldw	r4,-4(fp)
  811214:	08087380 	call	808738 <memcpy>
      ptr   += n;
  811218:	e0ffff17 	ldw	r3,-4(fp)
  81121c:	e0bffe17 	ldw	r2,-8(fp)
  811220:	1885883a 	add	r2,r3,r2
  811224:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  811228:	e0fff617 	ldw	r3,-40(fp)
  81122c:	e0bffe17 	ldw	r2,-8(fp)
  811230:	1885c83a 	sub	r2,r3,r2
  811234:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811238:	e0fffc17 	ldw	r3,-16(fp)
  81123c:	e0bffe17 	ldw	r2,-8(fp)
  811240:	1885883a 	add	r2,r3,r2
  811244:	10c1ffcc 	andi	r3,r2,2047
  811248:	e0bff817 	ldw	r2,-32(fp)
  81124c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811250:	e0bff617 	ldw	r2,-40(fp)
  811254:	00bfcf16 	blt	zero,r2,811194 <altera_avalon_jtag_uart_read+0x2c>
  811258:	00000106 	br	811260 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  81125c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  811260:	e0ffff17 	ldw	r3,-4(fp)
  811264:	e0bff717 	ldw	r2,-36(fp)
  811268:	1880141e 	bne	r3,r2,8112bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81126c:	e0bff517 	ldw	r2,-44(fp)
  811270:	1090000c 	andi	r2,r2,16384
  811274:	1000131e 	bne	r2,zero,8112c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811278:	0001883a 	nop
  81127c:	e0bff817 	ldw	r2,-32(fp)
  811280:	10800a17 	ldw	r2,40(r2)
  811284:	e0fffd17 	ldw	r3,-12(fp)
  811288:	1880051e 	bne	r3,r2,8112a0 <altera_avalon_jtag_uart_read+0x138>
  81128c:	e0bff817 	ldw	r2,-32(fp)
  811290:	10c00917 	ldw	r3,36(r2)
  811294:	e0bff817 	ldw	r2,-32(fp)
  811298:	10800117 	ldw	r2,4(r2)
  81129c:	18bff736 	bltu	r3,r2,81127c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8112a0:	e0bff817 	ldw	r2,-32(fp)
  8112a4:	10800a17 	ldw	r2,40(r2)
  8112a8:	e0fffd17 	ldw	r3,-12(fp)
  8112ac:	18800726 	beq	r3,r2,8112cc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  8112b0:	e0bff617 	ldw	r2,-40(fp)
  8112b4:	00bfb716 	blt	zero,r2,811194 <altera_avalon_jtag_uart_read+0x2c>
  8112b8:	00000506 	br	8112d0 <altera_avalon_jtag_uart_read+0x168>
      break;
  8112bc:	0001883a 	nop
  8112c0:	00000306 	br	8112d0 <altera_avalon_jtag_uart_read+0x168>
      break;
  8112c4:	0001883a 	nop
  8112c8:	00000106 	br	8112d0 <altera_avalon_jtag_uart_read+0x168>
      break;
  8112cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8112d0:	e0ffff17 	ldw	r3,-4(fp)
  8112d4:	e0bff717 	ldw	r2,-36(fp)
  8112d8:	18801926 	beq	r3,r2,811340 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  8112dc:	0005303a 	rdctl	r2,status
  8112e0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112e4:	e0fff917 	ldw	r3,-28(fp)
  8112e8:	00bfff84 	movi	r2,-2
  8112ec:	1884703a 	and	r2,r3,r2
  8112f0:	1001703a 	wrctl	status,r2
  return context;
  8112f4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8112f8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8112fc:	e0bff817 	ldw	r2,-32(fp)
  811300:	10800817 	ldw	r2,32(r2)
  811304:	10c00054 	ori	r3,r2,1
  811308:	e0bff817 	ldw	r2,-32(fp)
  81130c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811310:	e0bff817 	ldw	r2,-32(fp)
  811314:	10800017 	ldw	r2,0(r2)
  811318:	10800104 	addi	r2,r2,4
  81131c:	1007883a 	mov	r3,r2
  811320:	e0bff817 	ldw	r2,-32(fp)
  811324:	10800817 	ldw	r2,32(r2)
  811328:	18800035 	stwio	r2,0(r3)
  81132c:	e0bffb17 	ldw	r2,-20(fp)
  811330:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  811334:	e0bffa17 	ldw	r2,-24(fp)
  811338:	1001703a 	wrctl	status,r2
}
  81133c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811340:	e0ffff17 	ldw	r3,-4(fp)
  811344:	e0bff717 	ldw	r2,-36(fp)
  811348:	18800426 	beq	r3,r2,81135c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  81134c:	e0ffff17 	ldw	r3,-4(fp)
  811350:	e0bff717 	ldw	r2,-36(fp)
  811354:	1885c83a 	sub	r2,r3,r2
  811358:	00000606 	br	811374 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  81135c:	e0bff517 	ldw	r2,-44(fp)
  811360:	1090000c 	andi	r2,r2,16384
  811364:	10000226 	beq	r2,zero,811370 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  811368:	00bffd44 	movi	r2,-11
  81136c:	00000106 	br	811374 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  811370:	00bffec4 	movi	r2,-5
}
  811374:	e037883a 	mov	sp,fp
  811378:	dfc00117 	ldw	ra,4(sp)
  81137c:	df000017 	ldw	fp,0(sp)
  811380:	dec00204 	addi	sp,sp,8
  811384:	f800283a 	ret

00811388 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811388:	defff304 	addi	sp,sp,-52
  81138c:	dfc00c15 	stw	ra,48(sp)
  811390:	df000b15 	stw	fp,44(sp)
  811394:	df000b04 	addi	fp,sp,44
  811398:	e13ff815 	stw	r4,-32(fp)
  81139c:	e17ff715 	stw	r5,-36(fp)
  8113a0:	e1bff615 	stw	r6,-40(fp)
  8113a4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8113a8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8113ac:	e0bff717 	ldw	r2,-36(fp)
  8113b0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8113b4:	00003706 	br	811494 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8113b8:	e0bff817 	ldw	r2,-32(fp)
  8113bc:	10800c17 	ldw	r2,48(r2)
  8113c0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  8113c4:	e0bff817 	ldw	r2,-32(fp)
  8113c8:	10800d17 	ldw	r2,52(r2)
  8113cc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  8113d0:	e0fffc17 	ldw	r3,-16(fp)
  8113d4:	e0bfff17 	ldw	r2,-4(fp)
  8113d8:	1880062e 	bgeu	r3,r2,8113f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8113dc:	e0ffff17 	ldw	r3,-4(fp)
  8113e0:	e0bffc17 	ldw	r2,-16(fp)
  8113e4:	1885c83a 	sub	r2,r3,r2
  8113e8:	10bfffc4 	addi	r2,r2,-1
  8113ec:	e0bffe15 	stw	r2,-8(fp)
  8113f0:	00000b06 	br	811420 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8113f4:	e0bfff17 	ldw	r2,-4(fp)
  8113f8:	10000526 	beq	r2,zero,811410 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8113fc:	00c20004 	movi	r3,2048
  811400:	e0bffc17 	ldw	r2,-16(fp)
  811404:	1885c83a 	sub	r2,r3,r2
  811408:	e0bffe15 	stw	r2,-8(fp)
  81140c:	00000406 	br	811420 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811410:	00c1ffc4 	movi	r3,2047
  811414:	e0bffc17 	ldw	r2,-16(fp)
  811418:	1885c83a 	sub	r2,r3,r2
  81141c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  811420:	e0bffe17 	ldw	r2,-8(fp)
  811424:	10001e26 	beq	r2,zero,8114a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811428:	e0fff617 	ldw	r3,-40(fp)
  81142c:	e0bffe17 	ldw	r2,-8(fp)
  811430:	1880022e 	bgeu	r3,r2,81143c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811434:	e0bff617 	ldw	r2,-40(fp)
  811438:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81143c:	e0bff817 	ldw	r2,-32(fp)
  811440:	10c20e04 	addi	r3,r2,2104
  811444:	e0bffc17 	ldw	r2,-16(fp)
  811448:	1885883a 	add	r2,r3,r2
  81144c:	e1bffe17 	ldw	r6,-8(fp)
  811450:	e17ff717 	ldw	r5,-36(fp)
  811454:	1009883a 	mov	r4,r2
  811458:	08087380 	call	808738 <memcpy>
      ptr   += n;
  81145c:	e0fff717 	ldw	r3,-36(fp)
  811460:	e0bffe17 	ldw	r2,-8(fp)
  811464:	1885883a 	add	r2,r3,r2
  811468:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  81146c:	e0fff617 	ldw	r3,-40(fp)
  811470:	e0bffe17 	ldw	r2,-8(fp)
  811474:	1885c83a 	sub	r2,r3,r2
  811478:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81147c:	e0fffc17 	ldw	r3,-16(fp)
  811480:	e0bffe17 	ldw	r2,-8(fp)
  811484:	1885883a 	add	r2,r3,r2
  811488:	10c1ffcc 	andi	r3,r2,2047
  81148c:	e0bff817 	ldw	r2,-32(fp)
  811490:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  811494:	e0bff617 	ldw	r2,-40(fp)
  811498:	00bfc716 	blt	zero,r2,8113b8 <altera_avalon_jtag_uart_write+0x30>
  81149c:	00000106 	br	8114a4 <altera_avalon_jtag_uart_write+0x11c>
        break;
  8114a0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  8114a4:	0005303a 	rdctl	r2,status
  8114a8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114ac:	e0fff917 	ldw	r3,-28(fp)
  8114b0:	00bfff84 	movi	r2,-2
  8114b4:	1884703a 	and	r2,r3,r2
  8114b8:	1001703a 	wrctl	status,r2
  return context;
  8114bc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8114c0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8114c4:	e0bff817 	ldw	r2,-32(fp)
  8114c8:	10800817 	ldw	r2,32(r2)
  8114cc:	10c00094 	ori	r3,r2,2
  8114d0:	e0bff817 	ldw	r2,-32(fp)
  8114d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8114d8:	e0bff817 	ldw	r2,-32(fp)
  8114dc:	10800017 	ldw	r2,0(r2)
  8114e0:	10800104 	addi	r2,r2,4
  8114e4:	1007883a 	mov	r3,r2
  8114e8:	e0bff817 	ldw	r2,-32(fp)
  8114ec:	10800817 	ldw	r2,32(r2)
  8114f0:	18800035 	stwio	r2,0(r3)
  8114f4:	e0bffb17 	ldw	r2,-20(fp)
  8114f8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  8114fc:	e0bffa17 	ldw	r2,-24(fp)
  811500:	1001703a 	wrctl	status,r2
}
  811504:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811508:	e0bff617 	ldw	r2,-40(fp)
  81150c:	0080100e 	bge	zero,r2,811550 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  811510:	e0bff517 	ldw	r2,-44(fp)
  811514:	1090000c 	andi	r2,r2,16384
  811518:	1000101e 	bne	r2,zero,81155c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81151c:	0001883a 	nop
  811520:	e0bff817 	ldw	r2,-32(fp)
  811524:	10800d17 	ldw	r2,52(r2)
  811528:	e0ffff17 	ldw	r3,-4(fp)
  81152c:	1880051e 	bne	r3,r2,811544 <altera_avalon_jtag_uart_write+0x1bc>
  811530:	e0bff817 	ldw	r2,-32(fp)
  811534:	10c00917 	ldw	r3,36(r2)
  811538:	e0bff817 	ldw	r2,-32(fp)
  81153c:	10800117 	ldw	r2,4(r2)
  811540:	18bff736 	bltu	r3,r2,811520 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811544:	e0bff817 	ldw	r2,-32(fp)
  811548:	10800917 	ldw	r2,36(r2)
  81154c:	1000051e 	bne	r2,zero,811564 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  811550:	e0bff617 	ldw	r2,-40(fp)
  811554:	00bfcf16 	blt	zero,r2,811494 <altera_avalon_jtag_uart_write+0x10c>
  811558:	00000306 	br	811568 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  81155c:	0001883a 	nop
  811560:	00000106 	br	811568 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  811564:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  811568:	e0fff717 	ldw	r3,-36(fp)
  81156c:	e0bffd17 	ldw	r2,-12(fp)
  811570:	18800426 	beq	r3,r2,811584 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  811574:	e0fff717 	ldw	r3,-36(fp)
  811578:	e0bffd17 	ldw	r2,-12(fp)
  81157c:	1885c83a 	sub	r2,r3,r2
  811580:	00000606 	br	81159c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  811584:	e0bff517 	ldw	r2,-44(fp)
  811588:	1090000c 	andi	r2,r2,16384
  81158c:	10000226 	beq	r2,zero,811598 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  811590:	00bffd44 	movi	r2,-11
  811594:	00000106 	br	81159c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  811598:	00bffec4 	movi	r2,-5
}
  81159c:	e037883a 	mov	sp,fp
  8115a0:	dfc00117 	ldw	ra,4(sp)
  8115a4:	df000017 	ldw	fp,0(sp)
  8115a8:	dec00204 	addi	sp,sp,8
  8115ac:	f800283a 	ret

008115b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8115b0:	defffa04 	addi	sp,sp,-24
  8115b4:	dfc00515 	stw	ra,20(sp)
  8115b8:	df000415 	stw	fp,16(sp)
  8115bc:	df000404 	addi	fp,sp,16
  8115c0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8115c4:	0007883a 	mov	r3,zero
  8115c8:	e0bffc17 	ldw	r2,-16(fp)
  8115cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	10800104 	addi	r2,r2,4
  8115d8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  8115dc:	0005303a 	rdctl	r2,status
  8115e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115e4:	e0fffd17 	ldw	r3,-12(fp)
  8115e8:	00bfff84 	movi	r2,-2
  8115ec:	1884703a 	and	r2,r3,r2
  8115f0:	1001703a 	wrctl	status,r2
  return context;
  8115f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8115f8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  8115fc:	081076c0 	call	81076c <alt_tick>
  811600:	e0bfff17 	ldw	r2,-4(fp)
  811604:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  811608:	e0bffe17 	ldw	r2,-8(fp)
  81160c:	1001703a 	wrctl	status,r2
}
  811610:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  811614:	0001883a 	nop
  811618:	e037883a 	mov	sp,fp
  81161c:	dfc00117 	ldw	ra,4(sp)
  811620:	df000017 	ldw	fp,0(sp)
  811624:	dec00204 	addi	sp,sp,8
  811628:	f800283a 	ret

0081162c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81162c:	defff804 	addi	sp,sp,-32
  811630:	dfc00715 	stw	ra,28(sp)
  811634:	df000615 	stw	fp,24(sp)
  811638:	df000604 	addi	fp,sp,24
  81163c:	e13ffe15 	stw	r4,-8(fp)
  811640:	e17ffd15 	stw	r5,-12(fp)
  811644:	e1bffc15 	stw	r6,-16(fp)
  811648:	e1fffb15 	stw	r7,-20(fp)
  81164c:	e0bffb17 	ldw	r2,-20(fp)
  811650:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
  811654:	d0a71c17 	ldw	r2,-25488(gp)
  811658:	1000031e 	bne	r2,zero,811668 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
  81165c:	e0bfff17 	ldw	r2,-4(fp)
  811660:	d0a71c15 	stw	r2,-25488(gp)
    return 0;
  811664:	00000106 	br	81166c <alt_avalon_timer_sc_init+0x40>
    return -1;
  811668:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81166c:	e0bffe17 	ldw	r2,-8(fp)
  811670:	10800104 	addi	r2,r2,4
  811674:	00c001c4 	movi	r3,7
  811678:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81167c:	d8000015 	stw	zero,0(sp)
  811680:	e1fffe17 	ldw	r7,-8(fp)
  811684:	01802074 	movhi	r6,129
  811688:	31856c04 	addi	r6,r6,5552
  81168c:	e17ffc17 	ldw	r5,-16(fp)
  811690:	e13ffd17 	ldw	r4,-12(fp)
  811694:	0811a100 	call	811a10 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  811698:	0001883a 	nop
  81169c:	e037883a 	mov	sp,fp
  8116a0:	dfc00117 	ldw	ra,4(sp)
  8116a4:	df000017 	ldw	fp,0(sp)
  8116a8:	dec00204 	addi	sp,sp,8
  8116ac:	f800283a 	ret

008116b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8116b0:	defff504 	addi	sp,sp,-44
  8116b4:	df000a15 	stw	fp,40(sp)
  8116b8:	df000a04 	addi	fp,sp,40
  8116bc:	e13ff915 	stw	r4,-28(fp)
  8116c0:	e17ff815 	stw	r5,-32(fp)
  8116c4:	e1bff715 	stw	r6,-36(fp)
  8116c8:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8116cc:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  8116d0:	d0a71c17 	ldw	r2,-25488(gp)
  
  if (alt_ticks_per_second ())
  8116d4:	10003e26 	beq	r2,zero,8117d0 <alt_alarm_start+0x120>
  {
    if (alarm)
  8116d8:	e0bff917 	ldw	r2,-28(fp)
  8116dc:	10003a26 	beq	r2,zero,8117c8 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  8116e0:	e0bff917 	ldw	r2,-28(fp)
  8116e4:	e0fff717 	ldw	r3,-36(fp)
  8116e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8116ec:	e0bff917 	ldw	r2,-28(fp)
  8116f0:	e0fff617 	ldw	r3,-40(fp)
  8116f4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  8116f8:	0005303a 	rdctl	r2,status
  8116fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811700:	e0fffd17 	ldw	r3,-12(fp)
  811704:	00bfff84 	movi	r2,-2
  811708:	1884703a 	and	r2,r3,r2
  81170c:	1001703a 	wrctl	status,r2
  return context;
  811710:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  811714:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
  811718:	d0a71d17 	ldw	r2,-25484(gp)
      
      current_nticks = alt_nticks();
  81171c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  811720:	e0fff817 	ldw	r3,-32(fp)
  811724:	e0bfff17 	ldw	r2,-4(fp)
  811728:	1885883a 	add	r2,r3,r2
  81172c:	10c00044 	addi	r3,r2,1
  811730:	e0bff917 	ldw	r2,-28(fp)
  811734:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  811738:	e0bff917 	ldw	r2,-28(fp)
  81173c:	10c00217 	ldw	r3,8(r2)
  811740:	e0bfff17 	ldw	r2,-4(fp)
  811744:	1880042e 	bgeu	r3,r2,811758 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  811748:	e0bff917 	ldw	r2,-28(fp)
  81174c:	00c00044 	movi	r3,1
  811750:	10c00405 	stb	r3,16(r2)
  811754:	00000206 	br	811760 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  811758:	e0bff917 	ldw	r2,-28(fp)
  81175c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  811760:	e0bff917 	ldw	r2,-28(fp)
  811764:	d0e01304 	addi	r3,gp,-32692
  811768:	e0fffb15 	stw	r3,-20(fp)
  81176c:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
  811770:	e0bffa17 	ldw	r2,-24(fp)
  811774:	e0fffb17 	ldw	r3,-20(fp)
  811778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81177c:	e0bffb17 	ldw	r2,-20(fp)
  811780:	10c00017 	ldw	r3,0(r2)
  811784:	e0bffa17 	ldw	r2,-24(fp)
  811788:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  81178c:	e0bffb17 	ldw	r2,-20(fp)
  811790:	10800017 	ldw	r2,0(r2)
  811794:	e0fffa17 	ldw	r3,-24(fp)
  811798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81179c:	e0bffb17 	ldw	r2,-20(fp)
  8117a0:	e0fffa17 	ldw	r3,-24(fp)
  8117a4:	10c00015 	stw	r3,0(r2)
}
  8117a8:	0001883a 	nop
  8117ac:	e0bffe17 	ldw	r2,-8(fp)
  8117b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  8117b4:	e0bffc17 	ldw	r2,-16(fp)
  8117b8:	1001703a 	wrctl	status,r2
}
  8117bc:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  8117c0:	0005883a 	mov	r2,zero
  8117c4:	00000306 	br	8117d4 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  8117c8:	00bffa84 	movi	r2,-22
  8117cc:	00000106 	br	8117d4 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  8117d0:	00bfde84 	movi	r2,-134
  }
}
  8117d4:	e037883a 	mov	sp,fp
  8117d8:	df000017 	ldw	fp,0(sp)
  8117dc:	dec00104 	addi	sp,sp,4
  8117e0:	f800283a 	ret

008117e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8117e4:	defffe04 	addi	sp,sp,-8
  8117e8:	df000115 	stw	fp,4(sp)
  8117ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8117f0:	e03fff15 	stw	zero,-4(fp)
  8117f4:	00000506 	br	81180c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8117f8:	e0bfff17 	ldw	r2,-4(fp)
  8117fc:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811800:	e0bfff17 	ldw	r2,-4(fp)
  811804:	10800804 	addi	r2,r2,32
  811808:	e0bfff15 	stw	r2,-4(fp)
  81180c:	e0bfff17 	ldw	r2,-4(fp)
  811810:	10820030 	cmpltui	r2,r2,2048
  811814:	103ff81e 	bne	r2,zero,8117f8 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811818:	0001883a 	nop
  81181c:	0001883a 	nop
  811820:	e037883a 	mov	sp,fp
  811824:	df000017 	ldw	fp,0(sp)
  811828:	dec00104 	addi	sp,sp,4
  81182c:	f800283a 	ret

00811830 <alt_get_errno>:
{
  811830:	defffe04 	addi	sp,sp,-8
  811834:	dfc00115 	stw	ra,4(sp)
  811838:	df000015 	stw	fp,0(sp)
  81183c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811840:	d0a01117 	ldw	r2,-32700(gp)
  811844:	10000326 	beq	r2,zero,811854 <alt_get_errno+0x24>
  811848:	d0a01117 	ldw	r2,-32700(gp)
  81184c:	103ee83a 	callr	r2
  811850:	00000106 	br	811858 <alt_get_errno+0x28>
  811854:	d0a71804 	addi	r2,gp,-25504
}
  811858:	e037883a 	mov	sp,fp
  81185c:	dfc00117 	ldw	ra,4(sp)
  811860:	df000017 	ldw	fp,0(sp)
  811864:	dec00204 	addi	sp,sp,8
  811868:	f800283a 	ret

0081186c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81186c:	defffa04 	addi	sp,sp,-24
  811870:	dfc00515 	stw	ra,20(sp)
  811874:	df000415 	stw	fp,16(sp)
  811878:	df000404 	addi	fp,sp,16
  81187c:	e13ffd15 	stw	r4,-12(fp)
  811880:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  811884:	e0bffd17 	ldw	r2,-12(fp)
  811888:	10000326 	beq	r2,zero,811898 <alt_dev_llist_insert+0x2c>
  81188c:	e0bffd17 	ldw	r2,-12(fp)
  811890:	10800217 	ldw	r2,8(r2)
  811894:	1000061e 	bne	r2,zero,8118b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811898:	08118300 	call	811830 <alt_get_errno>
  81189c:	1007883a 	mov	r3,r2
  8118a0:	00800584 	movi	r2,22
  8118a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8118a8:	00bffa84 	movi	r2,-22
  8118ac:	00001406 	br	811900 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8118b0:	e0bffd17 	ldw	r2,-12(fp)
  8118b4:	e0fffc17 	ldw	r3,-16(fp)
  8118b8:	e0ffff15 	stw	r3,-4(fp)
  8118bc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  8118c0:	e0bffe17 	ldw	r2,-8(fp)
  8118c4:	e0ffff17 	ldw	r3,-4(fp)
  8118c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8118cc:	e0bfff17 	ldw	r2,-4(fp)
  8118d0:	10c00017 	ldw	r3,0(r2)
  8118d4:	e0bffe17 	ldw	r2,-8(fp)
  8118d8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  8118dc:	e0bfff17 	ldw	r2,-4(fp)
  8118e0:	10800017 	ldw	r2,0(r2)
  8118e4:	e0fffe17 	ldw	r3,-8(fp)
  8118e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8118ec:	e0bfff17 	ldw	r2,-4(fp)
  8118f0:	e0fffe17 	ldw	r3,-8(fp)
  8118f4:	10c00015 	stw	r3,0(r2)
}
  8118f8:	0001883a 	nop

  return 0;  
  8118fc:	0005883a 	mov	r2,zero
}
  811900:	e037883a 	mov	sp,fp
  811904:	dfc00117 	ldw	ra,4(sp)
  811908:	df000017 	ldw	fp,0(sp)
  81190c:	dec00204 	addi	sp,sp,8
  811910:	f800283a 	ret

00811914 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811914:	defffd04 	addi	sp,sp,-12
  811918:	dfc00215 	stw	ra,8(sp)
  81191c:	df000115 	stw	fp,4(sp)
  811920:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811924:	00802074 	movhi	r2,129
  811928:	10899b04 	addi	r2,r2,9836
  81192c:	e0bfff15 	stw	r2,-4(fp)
  811930:	00000606 	br	81194c <_do_ctors+0x38>
        (*ctor) (); 
  811934:	e0bfff17 	ldw	r2,-4(fp)
  811938:	10800017 	ldw	r2,0(r2)
  81193c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811940:	e0bfff17 	ldw	r2,-4(fp)
  811944:	10bfff04 	addi	r2,r2,-4
  811948:	e0bfff15 	stw	r2,-4(fp)
  81194c:	e0ffff17 	ldw	r3,-4(fp)
  811950:	00802074 	movhi	r2,129
  811954:	10899c04 	addi	r2,r2,9840
  811958:	18bff62e 	bgeu	r3,r2,811934 <_do_ctors+0x20>
}
  81195c:	0001883a 	nop
  811960:	0001883a 	nop
  811964:	e037883a 	mov	sp,fp
  811968:	dfc00117 	ldw	ra,4(sp)
  81196c:	df000017 	ldw	fp,0(sp)
  811970:	dec00204 	addi	sp,sp,8
  811974:	f800283a 	ret

00811978 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811978:	defffd04 	addi	sp,sp,-12
  81197c:	dfc00215 	stw	ra,8(sp)
  811980:	df000115 	stw	fp,4(sp)
  811984:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811988:	00802074 	movhi	r2,129
  81198c:	10899b04 	addi	r2,r2,9836
  811990:	e0bfff15 	stw	r2,-4(fp)
  811994:	00000606 	br	8119b0 <_do_dtors+0x38>
        (*dtor) (); 
  811998:	e0bfff17 	ldw	r2,-4(fp)
  81199c:	10800017 	ldw	r2,0(r2)
  8119a0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8119a4:	e0bfff17 	ldw	r2,-4(fp)
  8119a8:	10bfff04 	addi	r2,r2,-4
  8119ac:	e0bfff15 	stw	r2,-4(fp)
  8119b0:	e0ffff17 	ldw	r3,-4(fp)
  8119b4:	00802074 	movhi	r2,129
  8119b8:	10899c04 	addi	r2,r2,9840
  8119bc:	18bff62e 	bgeu	r3,r2,811998 <_do_dtors+0x20>
}
  8119c0:	0001883a 	nop
  8119c4:	0001883a 	nop
  8119c8:	e037883a 	mov	sp,fp
  8119cc:	dfc00117 	ldw	ra,4(sp)
  8119d0:	df000017 	ldw	fp,0(sp)
  8119d4:	dec00204 	addi	sp,sp,8
  8119d8:	f800283a 	ret

008119dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8119dc:	defffe04 	addi	sp,sp,-8
  8119e0:	dfc00115 	stw	ra,4(sp)
  8119e4:	df000015 	stw	fp,0(sp)
  8119e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8119ec:	01420004 	movi	r5,2048
  8119f0:	0009883a 	mov	r4,zero
  8119f4:	08122e40 	call	8122e4 <alt_icache_flush>
#endif
}
  8119f8:	0001883a 	nop
  8119fc:	e037883a 	mov	sp,fp
  811a00:	dfc00117 	ldw	ra,4(sp)
  811a04:	df000017 	ldw	fp,0(sp)
  811a08:	dec00204 	addi	sp,sp,8
  811a0c:	f800283a 	ret

00811a10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811a10:	defff904 	addi	sp,sp,-28
  811a14:	dfc00615 	stw	ra,24(sp)
  811a18:	df000515 	stw	fp,20(sp)
  811a1c:	df000504 	addi	fp,sp,20
  811a20:	e13fff15 	stw	r4,-4(fp)
  811a24:	e17ffe15 	stw	r5,-8(fp)
  811a28:	e1bffd15 	stw	r6,-12(fp)
  811a2c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811a30:	e0800217 	ldw	r2,8(fp)
  811a34:	d8800015 	stw	r2,0(sp)
  811a38:	e1fffc17 	ldw	r7,-16(fp)
  811a3c:	e1bffd17 	ldw	r6,-12(fp)
  811a40:	e17ffe17 	ldw	r5,-8(fp)
  811a44:	e13fff17 	ldw	r4,-4(fp)
  811a48:	0811bc00 	call	811bc0 <alt_iic_isr_register>
}  
  811a4c:	e037883a 	mov	sp,fp
  811a50:	dfc00117 	ldw	ra,4(sp)
  811a54:	df000017 	ldw	fp,0(sp)
  811a58:	dec00204 	addi	sp,sp,8
  811a5c:	f800283a 	ret

00811a60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  811a60:	defff904 	addi	sp,sp,-28
  811a64:	df000615 	stw	fp,24(sp)
  811a68:	df000604 	addi	fp,sp,24
  811a6c:	e13ffb15 	stw	r4,-20(fp)
  811a70:	e17ffa15 	stw	r5,-24(fp)
  811a74:	e0bffa17 	ldw	r2,-24(fp)
  811a78:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811a7c:	0005303a 	rdctl	r2,status
  811a80:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a84:	e0fffe17 	ldw	r3,-8(fp)
  811a88:	00bfff84 	movi	r2,-2
  811a8c:	1884703a 	and	r2,r3,r2
  811a90:	1001703a 	wrctl	status,r2
  return context;
  811a94:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811a98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  811a9c:	00c00044 	movi	r3,1
  811aa0:	e0bfff17 	ldw	r2,-4(fp)
  811aa4:	1884983a 	sll	r2,r3,r2
  811aa8:	1007883a 	mov	r3,r2
  811aac:	d0a71e17 	ldw	r2,-25480(gp)
  811ab0:	1884b03a 	or	r2,r3,r2
  811ab4:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811ab8:	d0a71e17 	ldw	r2,-25480(gp)
  811abc:	100170fa 	wrctl	ienable,r2
  811ac0:	e0bffd17 	ldw	r2,-12(fp)
  811ac4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811ac8:	e0bffc17 	ldw	r2,-16(fp)
  811acc:	1001703a 	wrctl	status,r2
}
  811ad0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  811ad4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811ad8:	e037883a 	mov	sp,fp
  811adc:	df000017 	ldw	fp,0(sp)
  811ae0:	dec00104 	addi	sp,sp,4
  811ae4:	f800283a 	ret

00811ae8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811ae8:	defff904 	addi	sp,sp,-28
  811aec:	df000615 	stw	fp,24(sp)
  811af0:	df000604 	addi	fp,sp,24
  811af4:	e13ffb15 	stw	r4,-20(fp)
  811af8:	e17ffa15 	stw	r5,-24(fp)
  811afc:	e0bffa17 	ldw	r2,-24(fp)
  811b00:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811b04:	0005303a 	rdctl	r2,status
  811b08:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b0c:	e0fffe17 	ldw	r3,-8(fp)
  811b10:	00bfff84 	movi	r2,-2
  811b14:	1884703a 	and	r2,r3,r2
  811b18:	1001703a 	wrctl	status,r2
  return context;
  811b1c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  811b20:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  811b24:	00c00044 	movi	r3,1
  811b28:	e0bfff17 	ldw	r2,-4(fp)
  811b2c:	1884983a 	sll	r2,r3,r2
  811b30:	0084303a 	nor	r2,zero,r2
  811b34:	1007883a 	mov	r3,r2
  811b38:	d0a71e17 	ldw	r2,-25480(gp)
  811b3c:	1884703a 	and	r2,r3,r2
  811b40:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811b44:	d0a71e17 	ldw	r2,-25480(gp)
  811b48:	100170fa 	wrctl	ienable,r2
  811b4c:	e0bffd17 	ldw	r2,-12(fp)
  811b50:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811b54:	e0bffc17 	ldw	r2,-16(fp)
  811b58:	1001703a 	wrctl	status,r2
}
  811b5c:	0001883a 	nop
  return 0;
  811b60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  811b64:	e037883a 	mov	sp,fp
  811b68:	df000017 	ldw	fp,0(sp)
  811b6c:	dec00104 	addi	sp,sp,4
  811b70:	f800283a 	ret

00811b74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  811b74:	defffc04 	addi	sp,sp,-16
  811b78:	df000315 	stw	fp,12(sp)
  811b7c:	df000304 	addi	fp,sp,12
  811b80:	e13ffe15 	stw	r4,-8(fp)
  811b84:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811b88:	000530fa 	rdctl	r2,ienable
  811b8c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811b90:	00c00044 	movi	r3,1
  811b94:	e0bffd17 	ldw	r2,-12(fp)
  811b98:	1884983a 	sll	r2,r3,r2
  811b9c:	1007883a 	mov	r3,r2
  811ba0:	e0bfff17 	ldw	r2,-4(fp)
  811ba4:	1884703a 	and	r2,r3,r2
  811ba8:	1004c03a 	cmpne	r2,r2,zero
  811bac:	10803fcc 	andi	r2,r2,255
}
  811bb0:	e037883a 	mov	sp,fp
  811bb4:	df000017 	ldw	fp,0(sp)
  811bb8:	dec00104 	addi	sp,sp,4
  811bbc:	f800283a 	ret

00811bc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811bc0:	defff504 	addi	sp,sp,-44
  811bc4:	dfc00a15 	stw	ra,40(sp)
  811bc8:	df000915 	stw	fp,36(sp)
  811bcc:	df000904 	addi	fp,sp,36
  811bd0:	e13ffa15 	stw	r4,-24(fp)
  811bd4:	e17ff915 	stw	r5,-28(fp)
  811bd8:	e1bff815 	stw	r6,-32(fp)
  811bdc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  811be0:	00bffa84 	movi	r2,-22
  811be4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811be8:	e0bff917 	ldw	r2,-28(fp)
  811bec:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811bf0:	e0bffe17 	ldw	r2,-8(fp)
  811bf4:	10800808 	cmpgei	r2,r2,32
  811bf8:	1000251e 	bne	r2,zero,811c90 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  811bfc:	0005303a 	rdctl	r2,status
  811c00:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c04:	e0fffc17 	ldw	r3,-16(fp)
  811c08:	00bfff84 	movi	r2,-2
  811c0c:	1884703a 	and	r2,r3,r2
  811c10:	1001703a 	wrctl	status,r2
  return context;
  811c14:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811c18:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  811c1c:	e0bffe17 	ldw	r2,-8(fp)
  811c20:	100890fa 	slli	r4,r2,3
  811c24:	e0fff817 	ldw	r3,-32(fp)
  811c28:	00802074 	movhi	r2,129
  811c2c:	2085883a 	add	r2,r4,r2
  811c30:	10da6515 	stw	r3,27028(r2)
    alt_irq[id].context = isr_context;
  811c34:	e0bffe17 	ldw	r2,-8(fp)
  811c38:	100890fa 	slli	r4,r2,3
  811c3c:	e0fff717 	ldw	r3,-36(fp)
  811c40:	00802074 	movhi	r2,129
  811c44:	2085883a 	add	r2,r4,r2
  811c48:	10da6615 	stw	r3,27032(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811c4c:	e0bff817 	ldw	r2,-32(fp)
  811c50:	10000526 	beq	r2,zero,811c68 <alt_iic_isr_register+0xa8>
  811c54:	e0bffe17 	ldw	r2,-8(fp)
  811c58:	100b883a 	mov	r5,r2
  811c5c:	e13ffa17 	ldw	r4,-24(fp)
  811c60:	0811a600 	call	811a60 <alt_ic_irq_enable>
  811c64:	00000406 	br	811c78 <alt_iic_isr_register+0xb8>
  811c68:	e0bffe17 	ldw	r2,-8(fp)
  811c6c:	100b883a 	mov	r5,r2
  811c70:	e13ffa17 	ldw	r4,-24(fp)
  811c74:	0811ae80 	call	811ae8 <alt_ic_irq_disable>
  811c78:	e0bfff15 	stw	r2,-4(fp)
  811c7c:	e0bffd17 	ldw	r2,-12(fp)
  811c80:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  811c84:	e0bffb17 	ldw	r2,-20(fp)
  811c88:	1001703a 	wrctl	status,r2
}
  811c8c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  811c90:	e0bfff17 	ldw	r2,-4(fp)
}
  811c94:	e037883a 	mov	sp,fp
  811c98:	dfc00117 	ldw	ra,4(sp)
  811c9c:	df000017 	ldw	fp,0(sp)
  811ca0:	dec00204 	addi	sp,sp,8
  811ca4:	f800283a 	ret

00811ca8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811ca8:	defff904 	addi	sp,sp,-28
  811cac:	dfc00615 	stw	ra,24(sp)
  811cb0:	df000515 	stw	fp,20(sp)
  811cb4:	df000504 	addi	fp,sp,20
  811cb8:	e13ffe15 	stw	r4,-8(fp)
  811cbc:	e17ffd15 	stw	r5,-12(fp)
  811cc0:	e1bffc15 	stw	r6,-16(fp)
  811cc4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  811cc8:	e1bffb17 	ldw	r6,-20(fp)
  811ccc:	e17ffc17 	ldw	r5,-16(fp)
  811cd0:	e13ffd17 	ldw	r4,-12(fp)
  811cd4:	0811f100 	call	811f10 <open>
  811cd8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  811cdc:	e0bfff17 	ldw	r2,-4(fp)
  811ce0:	10002016 	blt	r2,zero,811d64 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  811ce4:	e0ffff17 	ldw	r3,-4(fp)
  811ce8:	1805883a 	mov	r2,r3
  811cec:	1085883a 	add	r2,r2,r2
  811cf0:	10c5883a 	add	r2,r2,r3
  811cf4:	100490ba 	slli	r2,r2,2
  811cf8:	00c02074 	movhi	r3,129
  811cfc:	10c7883a 	add	r3,r2,r3
  811d00:	18cec317 	ldw	r3,15116(r3)
  811d04:	e0bffe17 	ldw	r2,-8(fp)
  811d08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811d0c:	e0ffff17 	ldw	r3,-4(fp)
  811d10:	1805883a 	mov	r2,r3
  811d14:	1085883a 	add	r2,r2,r2
  811d18:	10c5883a 	add	r2,r2,r3
  811d1c:	100490ba 	slli	r2,r2,2
  811d20:	00c02074 	movhi	r3,129
  811d24:	10c7883a 	add	r3,r2,r3
  811d28:	18cec417 	ldw	r3,15120(r3)
  811d2c:	e0bffe17 	ldw	r2,-8(fp)
  811d30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811d34:	e0ffff17 	ldw	r3,-4(fp)
  811d38:	1805883a 	mov	r2,r3
  811d3c:	1085883a 	add	r2,r2,r2
  811d40:	10c5883a 	add	r2,r2,r3
  811d44:	100490ba 	slli	r2,r2,2
  811d48:	00c02074 	movhi	r3,129
  811d4c:	10c7883a 	add	r3,r2,r3
  811d50:	18cec517 	ldw	r3,15124(r3)
  811d54:	e0bffe17 	ldw	r2,-8(fp)
  811d58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811d5c:	e13fff17 	ldw	r4,-4(fp)
  811d60:	08105a00 	call	8105a0 <alt_release_fd>
  }
} 
  811d64:	0001883a 	nop
  811d68:	e037883a 	mov	sp,fp
  811d6c:	dfc00117 	ldw	ra,4(sp)
  811d70:	df000017 	ldw	fp,0(sp)
  811d74:	dec00204 	addi	sp,sp,8
  811d78:	f800283a 	ret

00811d7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811d7c:	defffb04 	addi	sp,sp,-20
  811d80:	dfc00415 	stw	ra,16(sp)
  811d84:	df000315 	stw	fp,12(sp)
  811d88:	df000304 	addi	fp,sp,12
  811d8c:	e13fff15 	stw	r4,-4(fp)
  811d90:	e17ffe15 	stw	r5,-8(fp)
  811d94:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811d98:	01c07fc4 	movi	r7,511
  811d9c:	01800044 	movi	r6,1
  811da0:	e17fff17 	ldw	r5,-4(fp)
  811da4:	01002074 	movhi	r4,129
  811da8:	210ec604 	addi	r4,r4,15128
  811dac:	0811ca80 	call	811ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811db0:	01c07fc4 	movi	r7,511
  811db4:	000d883a 	mov	r6,zero
  811db8:	e17ffe17 	ldw	r5,-8(fp)
  811dbc:	01002074 	movhi	r4,129
  811dc0:	210ec304 	addi	r4,r4,15116
  811dc4:	0811ca80 	call	811ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811dc8:	01c07fc4 	movi	r7,511
  811dcc:	01800044 	movi	r6,1
  811dd0:	e17ffd17 	ldw	r5,-12(fp)
  811dd4:	01002074 	movhi	r4,129
  811dd8:	210ec904 	addi	r4,r4,15140
  811ddc:	0811ca80 	call	811ca8 <alt_open_fd>
}  
  811de0:	0001883a 	nop
  811de4:	e037883a 	mov	sp,fp
  811de8:	dfc00117 	ldw	ra,4(sp)
  811dec:	df000017 	ldw	fp,0(sp)
  811df0:	dec00204 	addi	sp,sp,8
  811df4:	f800283a 	ret

00811df8 <alt_get_errno>:
{
  811df8:	defffe04 	addi	sp,sp,-8
  811dfc:	dfc00115 	stw	ra,4(sp)
  811e00:	df000015 	stw	fp,0(sp)
  811e04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811e08:	d0a01117 	ldw	r2,-32700(gp)
  811e0c:	10000326 	beq	r2,zero,811e1c <alt_get_errno+0x24>
  811e10:	d0a01117 	ldw	r2,-32700(gp)
  811e14:	103ee83a 	callr	r2
  811e18:	00000106 	br	811e20 <alt_get_errno+0x28>
  811e1c:	d0a71804 	addi	r2,gp,-25504
}
  811e20:	e037883a 	mov	sp,fp
  811e24:	dfc00117 	ldw	ra,4(sp)
  811e28:	df000017 	ldw	fp,0(sp)
  811e2c:	dec00204 	addi	sp,sp,8
  811e30:	f800283a 	ret

00811e34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811e34:	defffd04 	addi	sp,sp,-12
  811e38:	df000215 	stw	fp,8(sp)
  811e3c:	df000204 	addi	fp,sp,8
  811e40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811e44:	e0bffe17 	ldw	r2,-8(fp)
  811e48:	10800217 	ldw	r2,8(r2)
  811e4c:	10d00034 	orhi	r3,r2,16384
  811e50:	e0bffe17 	ldw	r2,-8(fp)
  811e54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811e58:	e03fff15 	stw	zero,-4(fp)
  811e5c:	00002306 	br	811eec <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811e60:	e0ffff17 	ldw	r3,-4(fp)
  811e64:	1805883a 	mov	r2,r3
  811e68:	1085883a 	add	r2,r2,r2
  811e6c:	10c5883a 	add	r2,r2,r3
  811e70:	100490ba 	slli	r2,r2,2
  811e74:	00c02074 	movhi	r3,129
  811e78:	10c7883a 	add	r3,r2,r3
  811e7c:	18cec317 	ldw	r3,15116(r3)
  811e80:	e0bffe17 	ldw	r2,-8(fp)
  811e84:	10800017 	ldw	r2,0(r2)
  811e88:	1880151e 	bne	r3,r2,811ee0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811e8c:	e0ffff17 	ldw	r3,-4(fp)
  811e90:	1805883a 	mov	r2,r3
  811e94:	1085883a 	add	r2,r2,r2
  811e98:	10c5883a 	add	r2,r2,r3
  811e9c:	100490ba 	slli	r2,r2,2
  811ea0:	00c02074 	movhi	r3,129
  811ea4:	10c7883a 	add	r3,r2,r3
  811ea8:	188ec517 	ldw	r2,15124(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  811eac:	10000c0e 	bge	r2,zero,811ee0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  811eb0:	e0ffff17 	ldw	r3,-4(fp)
  811eb4:	1805883a 	mov	r2,r3
  811eb8:	1085883a 	add	r2,r2,r2
  811ebc:	10c5883a 	add	r2,r2,r3
  811ec0:	100490ba 	slli	r2,r2,2
  811ec4:	00c02074 	movhi	r3,129
  811ec8:	18cec304 	addi	r3,r3,15116
  811ecc:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811ed0:	e0fffe17 	ldw	r3,-8(fp)
  811ed4:	18800226 	beq	r3,r2,811ee0 <alt_file_locked+0xac>
    {
      return -EACCES;
  811ed8:	00bffcc4 	movi	r2,-13
  811edc:	00000806 	br	811f00 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  811ee0:	e0bfff17 	ldw	r2,-4(fp)
  811ee4:	10800044 	addi	r2,r2,1
  811ee8:	e0bfff15 	stw	r2,-4(fp)
  811eec:	d0a01017 	ldw	r2,-32704(gp)
  811ef0:	1007883a 	mov	r3,r2
  811ef4:	e0bfff17 	ldw	r2,-4(fp)
  811ef8:	18bfd92e 	bgeu	r3,r2,811e60 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811efc:	0005883a 	mov	r2,zero
}
  811f00:	e037883a 	mov	sp,fp
  811f04:	df000017 	ldw	fp,0(sp)
  811f08:	dec00104 	addi	sp,sp,4
  811f0c:	f800283a 	ret

00811f10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811f10:	defff604 	addi	sp,sp,-40
  811f14:	dfc00915 	stw	ra,36(sp)
  811f18:	df000815 	stw	fp,32(sp)
  811f1c:	df000804 	addi	fp,sp,32
  811f20:	e13ffa15 	stw	r4,-24(fp)
  811f24:	e17ff915 	stw	r5,-28(fp)
  811f28:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811f2c:	00bfffc4 	movi	r2,-1
  811f30:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  811f34:	00bffb44 	movi	r2,-19
  811f38:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  811f3c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811f40:	d1600e04 	addi	r5,gp,-32712
  811f44:	e13ffa17 	ldw	r4,-24(fp)
  811f48:	08120940 	call	812094 <alt_find_dev>
  811f4c:	e0bfff15 	stw	r2,-4(fp)
  811f50:	e0bfff17 	ldw	r2,-4(fp)
  811f54:	1000051e 	bne	r2,zero,811f6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811f58:	e13ffa17 	ldw	r4,-24(fp)
  811f5c:	08121240 	call	812124 <alt_find_file>
  811f60:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  811f64:	00800044 	movi	r2,1
  811f68:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811f6c:	e0bfff17 	ldw	r2,-4(fp)
  811f70:	10002c26 	beq	r2,zero,812024 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811f74:	e13fff17 	ldw	r4,-4(fp)
  811f78:	081222c0 	call	81222c <alt_get_fd>
  811f7c:	e0bffe15 	stw	r2,-8(fp)
  811f80:	e0bffe17 	ldw	r2,-8(fp)
  811f84:	1000030e 	bge	r2,zero,811f94 <open+0x84>
    {
      status = index;
  811f88:	e0bffe17 	ldw	r2,-8(fp)
  811f8c:	e0bffd15 	stw	r2,-12(fp)
  811f90:	00002606 	br	81202c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811f94:	e0fffe17 	ldw	r3,-8(fp)
  811f98:	1805883a 	mov	r2,r3
  811f9c:	1085883a 	add	r2,r2,r2
  811fa0:	10c5883a 	add	r2,r2,r3
  811fa4:	100490ba 	slli	r2,r2,2
  811fa8:	00c02074 	movhi	r3,129
  811fac:	18cec304 	addi	r3,r3,15116
  811fb0:	10c5883a 	add	r2,r2,r3
  811fb4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811fb8:	e0fff917 	ldw	r3,-28(fp)
  811fbc:	00900034 	movhi	r2,16384
  811fc0:	10bfffc4 	addi	r2,r2,-1
  811fc4:	1886703a 	and	r3,r3,r2
  811fc8:	e0bffb17 	ldw	r2,-20(fp)
  811fcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811fd0:	e0bffc17 	ldw	r2,-16(fp)
  811fd4:	1000051e 	bne	r2,zero,811fec <open+0xdc>
  811fd8:	e13ffb17 	ldw	r4,-20(fp)
  811fdc:	0811e340 	call	811e34 <alt_file_locked>
  811fe0:	e0bffd15 	stw	r2,-12(fp)
  811fe4:	e0bffd17 	ldw	r2,-12(fp)
  811fe8:	10001016 	blt	r2,zero,81202c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811fec:	e0bfff17 	ldw	r2,-4(fp)
  811ff0:	10800317 	ldw	r2,12(r2)
  811ff4:	10000826 	beq	r2,zero,812018 <open+0x108>
  811ff8:	e0bfff17 	ldw	r2,-4(fp)
  811ffc:	10800317 	ldw	r2,12(r2)
  812000:	e1fff817 	ldw	r7,-32(fp)
  812004:	e1bff917 	ldw	r6,-28(fp)
  812008:	e17ffa17 	ldw	r5,-24(fp)
  81200c:	e13ffb17 	ldw	r4,-20(fp)
  812010:	103ee83a 	callr	r2
  812014:	00000106 	br	81201c <open+0x10c>
  812018:	0005883a 	mov	r2,zero
  81201c:	e0bffd15 	stw	r2,-12(fp)
  812020:	00000206 	br	81202c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812024:	00bffb44 	movi	r2,-19
  812028:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81202c:	e0bffd17 	ldw	r2,-12(fp)
  812030:	1000090e 	bge	r2,zero,812058 <open+0x148>
  {
    alt_release_fd (index);  
  812034:	e13ffe17 	ldw	r4,-8(fp)
  812038:	08105a00 	call	8105a0 <alt_release_fd>
    ALT_ERRNO = -status;
  81203c:	0811df80 	call	811df8 <alt_get_errno>
  812040:	1007883a 	mov	r3,r2
  812044:	e0bffd17 	ldw	r2,-12(fp)
  812048:	0085c83a 	sub	r2,zero,r2
  81204c:	18800015 	stw	r2,0(r3)
    return -1;
  812050:	00bfffc4 	movi	r2,-1
  812054:	00000106 	br	81205c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  812058:	e0bffe17 	ldw	r2,-8(fp)
}
  81205c:	e037883a 	mov	sp,fp
  812060:	dfc00117 	ldw	ra,4(sp)
  812064:	df000017 	ldw	fp,0(sp)
  812068:	dec00204 	addi	sp,sp,8
  81206c:	f800283a 	ret

00812070 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812070:	deffff04 	addi	sp,sp,-4
  812074:	df000015 	stw	fp,0(sp)
  812078:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81207c:	000170fa 	wrctl	ienable,zero
}
  812080:	0001883a 	nop
  812084:	e037883a 	mov	sp,fp
  812088:	df000017 	ldw	fp,0(sp)
  81208c:	dec00104 	addi	sp,sp,4
  812090:	f800283a 	ret

00812094 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812094:	defffa04 	addi	sp,sp,-24
  812098:	dfc00515 	stw	ra,20(sp)
  81209c:	df000415 	stw	fp,16(sp)
  8120a0:	df000404 	addi	fp,sp,16
  8120a4:	e13ffd15 	stw	r4,-12(fp)
  8120a8:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8120ac:	e0bffc17 	ldw	r2,-16(fp)
  8120b0:	10800017 	ldw	r2,0(r2)
  8120b4:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8120b8:	e13ffd17 	ldw	r4,-12(fp)
  8120bc:	0802d0c0 	call	802d0c <strlen>
  8120c0:	10800044 	addi	r2,r2,1
  8120c4:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8120c8:	00000d06 	br	812100 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8120cc:	e0bfff17 	ldw	r2,-4(fp)
  8120d0:	10800217 	ldw	r2,8(r2)
  8120d4:	e0fffe17 	ldw	r3,-8(fp)
  8120d8:	180d883a 	mov	r6,r3
  8120dc:	e17ffd17 	ldw	r5,-12(fp)
  8120e0:	1009883a 	mov	r4,r2
  8120e4:	08124500 	call	812450 <memcmp>
  8120e8:	1000021e 	bne	r2,zero,8120f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8120ec:	e0bfff17 	ldw	r2,-4(fp)
  8120f0:	00000706 	br	812110 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8120f4:	e0bfff17 	ldw	r2,-4(fp)
  8120f8:	10800017 	ldw	r2,0(r2)
  8120fc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  812100:	e0ffff17 	ldw	r3,-4(fp)
  812104:	e0bffc17 	ldw	r2,-16(fp)
  812108:	18bff01e 	bne	r3,r2,8120cc <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  81210c:	0005883a 	mov	r2,zero
}
  812110:	e037883a 	mov	sp,fp
  812114:	dfc00117 	ldw	ra,4(sp)
  812118:	df000017 	ldw	fp,0(sp)
  81211c:	dec00204 	addi	sp,sp,8
  812120:	f800283a 	ret

00812124 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812124:	defffb04 	addi	sp,sp,-20
  812128:	dfc00415 	stw	ra,16(sp)
  81212c:	df000315 	stw	fp,12(sp)
  812130:	df000304 	addi	fp,sp,12
  812134:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812138:	d0a00c17 	ldw	r2,-32720(gp)
  81213c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812140:	00003106 	br	812208 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812144:	e0bfff17 	ldw	r2,-4(fp)
  812148:	10800217 	ldw	r2,8(r2)
  81214c:	1009883a 	mov	r4,r2
  812150:	0802d0c0 	call	802d0c <strlen>
  812154:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812158:	e0bfff17 	ldw	r2,-4(fp)
  81215c:	10c00217 	ldw	r3,8(r2)
  812160:	e0bffe17 	ldw	r2,-8(fp)
  812164:	10bfffc4 	addi	r2,r2,-1
  812168:	1885883a 	add	r2,r3,r2
  81216c:	10800003 	ldbu	r2,0(r2)
  812170:	10803fcc 	andi	r2,r2,255
  812174:	1080201c 	xori	r2,r2,128
  812178:	10bfe004 	addi	r2,r2,-128
  81217c:	10800bd8 	cmpnei	r2,r2,47
  812180:	1000031e 	bne	r2,zero,812190 <alt_find_file+0x6c>
    {
      len -= 1;
  812184:	e0bffe17 	ldw	r2,-8(fp)
  812188:	10bfffc4 	addi	r2,r2,-1
  81218c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812190:	e0bffe17 	ldw	r2,-8(fp)
  812194:	e0fffd17 	ldw	r3,-12(fp)
  812198:	1885883a 	add	r2,r3,r2
  81219c:	10800003 	ldbu	r2,0(r2)
  8121a0:	10803fcc 	andi	r2,r2,255
  8121a4:	1080201c 	xori	r2,r2,128
  8121a8:	10bfe004 	addi	r2,r2,-128
  8121ac:	10800be0 	cmpeqi	r2,r2,47
  8121b0:	1000081e 	bne	r2,zero,8121d4 <alt_find_file+0xb0>
  8121b4:	e0bffe17 	ldw	r2,-8(fp)
  8121b8:	e0fffd17 	ldw	r3,-12(fp)
  8121bc:	1885883a 	add	r2,r3,r2
  8121c0:	10800003 	ldbu	r2,0(r2)
  8121c4:	10803fcc 	andi	r2,r2,255
  8121c8:	1080201c 	xori	r2,r2,128
  8121cc:	10bfe004 	addi	r2,r2,-128
  8121d0:	10000a1e 	bne	r2,zero,8121fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8121d4:	e0bfff17 	ldw	r2,-4(fp)
  8121d8:	10800217 	ldw	r2,8(r2)
  8121dc:	e0fffe17 	ldw	r3,-8(fp)
  8121e0:	180d883a 	mov	r6,r3
  8121e4:	e17ffd17 	ldw	r5,-12(fp)
  8121e8:	1009883a 	mov	r4,r2
  8121ec:	08124500 	call	812450 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  8121f0:	1000021e 	bne	r2,zero,8121fc <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  8121f4:	e0bfff17 	ldw	r2,-4(fp)
  8121f8:	00000706 	br	812218 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8121fc:	e0bfff17 	ldw	r2,-4(fp)
  812200:	10800017 	ldw	r2,0(r2)
  812204:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  812208:	e0ffff17 	ldw	r3,-4(fp)
  81220c:	d0a00c04 	addi	r2,gp,-32720
  812210:	18bfcc1e 	bne	r3,r2,812144 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  812214:	0005883a 	mov	r2,zero
}
  812218:	e037883a 	mov	sp,fp
  81221c:	dfc00117 	ldw	ra,4(sp)
  812220:	df000017 	ldw	fp,0(sp)
  812224:	dec00204 	addi	sp,sp,8
  812228:	f800283a 	ret

0081222c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81222c:	defffc04 	addi	sp,sp,-16
  812230:	df000315 	stw	fp,12(sp)
  812234:	df000304 	addi	fp,sp,12
  812238:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  81223c:	00bffa04 	movi	r2,-24
  812240:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812244:	e03fff15 	stw	zero,-4(fp)
  812248:	00001d06 	br	8122c0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  81224c:	e0ffff17 	ldw	r3,-4(fp)
  812250:	1805883a 	mov	r2,r3
  812254:	1085883a 	add	r2,r2,r2
  812258:	10c5883a 	add	r2,r2,r3
  81225c:	100490ba 	slli	r2,r2,2
  812260:	00c02074 	movhi	r3,129
  812264:	10c7883a 	add	r3,r2,r3
  812268:	188ec317 	ldw	r2,15116(r3)
  81226c:	1000111e 	bne	r2,zero,8122b4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  812270:	e0ffff17 	ldw	r3,-4(fp)
  812274:	1805883a 	mov	r2,r3
  812278:	1085883a 	add	r2,r2,r2
  81227c:	10c5883a 	add	r2,r2,r3
  812280:	100490ba 	slli	r2,r2,2
  812284:	e13ffd17 	ldw	r4,-12(fp)
  812288:	00c02074 	movhi	r3,129
  81228c:	10c7883a 	add	r3,r2,r3
  812290:	190ec315 	stw	r4,15116(r3)
      if (i > alt_max_fd)
  812294:	d0e01017 	ldw	r3,-32704(gp)
  812298:	e0bfff17 	ldw	r2,-4(fp)
  81229c:	1880020e 	bge	r3,r2,8122a8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8122a0:	e0bfff17 	ldw	r2,-4(fp)
  8122a4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  8122a8:	e0bfff17 	ldw	r2,-4(fp)
  8122ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8122b0:	00000706 	br	8122d0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  8122b4:	e0bfff17 	ldw	r2,-4(fp)
  8122b8:	10800044 	addi	r2,r2,1
  8122bc:	e0bfff15 	stw	r2,-4(fp)
  8122c0:	e0bfff17 	ldw	r2,-4(fp)
  8122c4:	10800810 	cmplti	r2,r2,32
  8122c8:	103fe01e 	bne	r2,zero,81224c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  8122cc:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8122d0:	e0bffe17 	ldw	r2,-8(fp)
}
  8122d4:	e037883a 	mov	sp,fp
  8122d8:	df000017 	ldw	fp,0(sp)
  8122dc:	dec00104 	addi	sp,sp,4
  8122e0:	f800283a 	ret

008122e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8122e4:	defffb04 	addi	sp,sp,-20
  8122e8:	df000415 	stw	fp,16(sp)
  8122ec:	df000404 	addi	fp,sp,16
  8122f0:	e13ffd15 	stw	r4,-12(fp)
  8122f4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8122f8:	e0bffc17 	ldw	r2,-16(fp)
  8122fc:	10820070 	cmpltui	r2,r2,2049
  812300:	1000021e 	bne	r2,zero,81230c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  812304:	00820004 	movi	r2,2048
  812308:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  81230c:	e0fffd17 	ldw	r3,-12(fp)
  812310:	e0bffc17 	ldw	r2,-16(fp)
  812314:	1885883a 	add	r2,r3,r2
  812318:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81231c:	e0bffd17 	ldw	r2,-12(fp)
  812320:	e0bfff15 	stw	r2,-4(fp)
  812324:	00000506 	br	81233c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812328:	e0bfff17 	ldw	r2,-4(fp)
  81232c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812330:	e0bfff17 	ldw	r2,-4(fp)
  812334:	10800804 	addi	r2,r2,32
  812338:	e0bfff15 	stw	r2,-4(fp)
  81233c:	e0ffff17 	ldw	r3,-4(fp)
  812340:	e0bffe17 	ldw	r2,-8(fp)
  812344:	18bff836 	bltu	r3,r2,812328 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812348:	e0bffd17 	ldw	r2,-12(fp)
  81234c:	108007cc 	andi	r2,r2,31
  812350:	10000226 	beq	r2,zero,81235c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812354:	e0bfff17 	ldw	r2,-4(fp)
  812358:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81235c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812360:	0001883a 	nop
  812364:	e037883a 	mov	sp,fp
  812368:	df000017 	ldw	fp,0(sp)
  81236c:	dec00104 	addi	sp,sp,4
  812370:	f800283a 	ret

00812374 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812374:	defffe04 	addi	sp,sp,-8
  812378:	df000115 	stw	fp,4(sp)
  81237c:	df000104 	addi	fp,sp,4
  812380:	e13fff15 	stw	r4,-4(fp)
  812384:	e0bfff17 	ldw	r2,-4(fp)
  812388:	10bffe84 	addi	r2,r2,-6
  81238c:	10c00428 	cmpgeui	r3,r2,16
  812390:	1800191e 	bne	r3,zero,8123f8 <alt_exception_cause_generated_bad_addr+0x84>
  812394:	100690ba 	slli	r3,r2,2
  812398:	00802074 	movhi	r2,129
  81239c:	1885883a 	add	r2,r3,r2
  8123a0:	1088ea17 	ldw	r2,9128(r2)
  8123a4:	1000683a 	jmp	r2
  8123a8:	008123e8 	cmpgeui	r2,zero,1167
  8123ac:	008123e8 	cmpgeui	r2,zero,1167
  8123b0:	008123f8 	rdprs	r2,zero,1167
  8123b4:	008123f8 	rdprs	r2,zero,1167
  8123b8:	008123f8 	rdprs	r2,zero,1167
  8123bc:	008123e8 	cmpgeui	r2,zero,1167
  8123c0:	008123f0 	cmpltui	r2,zero,1167
  8123c4:	008123f8 	rdprs	r2,zero,1167
  8123c8:	008123e8 	cmpgeui	r2,zero,1167
  8123cc:	008123e8 	cmpgeui	r2,zero,1167
  8123d0:	008123f8 	rdprs	r2,zero,1167
  8123d4:	008123e8 	cmpgeui	r2,zero,1167
  8123d8:	008123f0 	cmpltui	r2,zero,1167
  8123dc:	008123f8 	rdprs	r2,zero,1167
  8123e0:	008123f8 	rdprs	r2,zero,1167
  8123e4:	008123e8 	cmpgeui	r2,zero,1167
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8123e8:	00800044 	movi	r2,1
  8123ec:	00000306 	br	8123fc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8123f0:	0005883a 	mov	r2,zero
  8123f4:	00000106 	br	8123fc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  8123f8:	0005883a 	mov	r2,zero
  }
}
  8123fc:	e037883a 	mov	sp,fp
  812400:	df000017 	ldw	fp,0(sp)
  812404:	dec00104 	addi	sp,sp,4
  812408:	f800283a 	ret

0081240c <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
  81240c:	200b883a 	mov	r5,r4
  812410:	000f883a 	mov	r7,zero
  812414:	000d883a 	mov	r6,zero
  812418:	0009883a 	mov	r4,zero
  81241c:	08124c81 	jmpi	8124c8 <__register_exitproc>

00812420 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
  812420:	defffe04 	addi	sp,sp,-8
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
  812424:	000b883a 	mov	r5,zero
{
  812428:	dc000015 	stw	r16,0(sp)
  81242c:	dfc00115 	stw	ra,4(sp)
  812430:	2021883a 	mov	r16,r4
    __call_exitprocs (code, NULL);
  812434:	08125540 	call	812554 <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
  812438:	d1200817 	ldw	r4,-32736(gp)
  81243c:	20800f17 	ldw	r2,60(r4)
  812440:	10000126 	beq	r2,zero,812448 <exit+0x28>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
  812444:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
  812448:	8009883a 	mov	r4,r16
  81244c:	080fdec0 	call	80fdec <_exit>

00812450 <memcmp>:
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
  812450:	30800130 	cmpltui	r2,r6,4
  812454:	10000b1e 	bne	r2,zero,812484 <memcmp+0x34>
  812458:	2144b03a 	or	r2,r4,r5
  81245c:	108000cc 	andi	r2,r2,3
  812460:	1000171e 	bne	r2,zero,8124c0 <memcmp+0x70>
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
        {
          if (*a1 != *a2) 
  812464:	20c00017 	ldw	r3,0(r4)
  812468:	28800017 	ldw	r2,0(r5)
  81246c:	1880141e 	bne	r3,r2,8124c0 <memcmp+0x70>
   	    break;
          a1++;
          a2++;
          n -= LBLOCKSIZE;
  812470:	31bfff04 	addi	r6,r6,-4
      while (n >= LBLOCKSIZE)
  812474:	30800128 	cmpgeui	r2,r6,4
          a1++;
  812478:	21000104 	addi	r4,r4,4
          a2++;
  81247c:	29400104 	addi	r5,r5,4
      while (n >= LBLOCKSIZE)
  812480:	103ff81e 	bne	r2,zero,812464 <memcmp+0x14>

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
  812484:	30bfffc4 	addi	r2,r6,-1
  812488:	30000b26 	beq	r6,zero,8124b8 <memcmp+0x68>
  81248c:	11800044 	addi	r6,r2,1
  812490:	218d883a 	add	r6,r4,r6
  812494:	00000106 	br	81249c <memcmp+0x4c>
  812498:	21800726 	beq	r4,r6,8124b8 <memcmp+0x68>
    {
      if (*s1 != *s2)
  81249c:	20800003 	ldbu	r2,0(r4)
  8124a0:	28c00003 	ldbu	r3,0(r5)
	return *s1 - *s2;
      s1++;
  8124a4:	21000044 	addi	r4,r4,1
      s2++;
  8124a8:	29400044 	addi	r5,r5,1
      if (*s1 != *s2)
  8124ac:	10fffa26 	beq	r2,r3,812498 <memcmp+0x48>
	return *s1 - *s2;
  8124b0:	10c5c83a 	sub	r2,r2,r3
  8124b4:	f800283a 	ret
    }

  return 0;
  8124b8:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  8124bc:	f800283a 	ret
  while (n--)
  8124c0:	30bfffc4 	addi	r2,r6,-1
  8124c4:	003ff106 	br	81248c <memcmp+0x3c>

008124c8 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
  8124c8:	d0e00817 	ldw	r3,-32736(gp)
  8124cc:	18805217 	ldw	r2,328(r3)
  if (p == NULL)
  8124d0:	10001726 	beq	r2,zero,812530 <__register_exitproc+0x68>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
  8124d4:	10c00117 	ldw	r3,4(r2)
  8124d8:	1a000808 	cmpgei	r8,r3,32
  8124dc:	40001b1e 	bne	r8,zero,81254c <__register_exitproc+0x84>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
  8124e0:	20000b26 	beq	r4,zero,812510 <__register_exitproc+0x48>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
  8124e4:	181090ba 	slli	r8,r3,2
      args->_fntypes |= (1 << p->_ind);
  8124e8:	02400044 	movi	r9,1
  8124ec:	48d2983a 	sll	r9,r9,r3
  8124f0:	1211883a 	add	r8,r2,r8
      args->_fnargs[p->_ind] = arg;
  8124f4:	41802215 	stw	r6,136(r8)
      args->_fntypes |= (1 << p->_ind);
  8124f8:	11806217 	ldw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
  8124fc:	21000098 	cmpnei	r4,r4,2
      args->_fntypes |= (1 << p->_ind);
  812500:	324cb03a 	or	r6,r6,r9
  812504:	11806215 	stw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
  812508:	41c04215 	stw	r7,264(r8)
      if (type == __et_cxa)
  81250c:	20000b26 	beq	r4,zero,81253c <__register_exitproc+0x74>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
  812510:	19000084 	addi	r4,r3,2
  812514:	200890ba 	slli	r4,r4,2
  812518:	18c00044 	addi	r3,r3,1
  81251c:	10c00115 	stw	r3,4(r2)
  812520:	1105883a 	add	r2,r2,r4
  812524:	11400015 	stw	r5,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
  812528:	0005883a 	mov	r2,zero
  81252c:	f800283a 	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  812530:	18805304 	addi	r2,r3,332
  812534:	18805215 	stw	r2,328(r3)
  812538:	003fe606 	br	8124d4 <__register_exitproc+0xc>
	args->_is_cxa |= (1 << p->_ind);
  81253c:	11006317 	ldw	r4,396(r2)
  812540:	2252b03a 	or	r9,r4,r9
  812544:	12406315 	stw	r9,396(r2)
  812548:	003ff106 	br	812510 <__register_exitproc+0x48>
      return -1;
  81254c:	00bfffc4 	movi	r2,-1
}
  812550:	f800283a 	ret

00812554 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
  812554:	defff704 	addi	sp,sp,-36
  812558:	dcc00315 	stw	r19,12(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
  81255c:	d4e00817 	ldw	r19,-32736(gp)
{
  812560:	dc800215 	stw	r18,8(sp)
  812564:	dfc00815 	stw	ra,32(sp)
  p = _GLOBAL_ATEXIT;
  812568:	9c805217 	ldw	r18,328(r19)
{
  81256c:	ddc00715 	stw	r23,28(sp)
  812570:	dd800615 	stw	r22,24(sp)
  812574:	dd400515 	stw	r21,20(sp)
  812578:	dd000415 	stw	r20,16(sp)
  81257c:	dc400115 	stw	r17,4(sp)
  812580:	dc000015 	stw	r16,0(sp)
  lastp = &_GLOBAL_ATEXIT;
  while (p)
  812584:	90001026 	beq	r18,zero,8125c8 <__call_exitprocs+0x74>
  812588:	202b883a 	mov	r21,r4
  81258c:	282d883a 	mov	r22,r5
  812590:	05000044 	movi	r20,1
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
  812594:	94000117 	ldw	r16,4(r18)
  812598:	847fffc4 	addi	r17,r16,-1
  81259c:	88000a16 	blt	r17,zero,8125c8 <__call_exitprocs+0x74>
  8125a0:	84000044 	addi	r16,r16,1
  8125a4:	802090ba 	slli	r16,r16,2
  8125a8:	9421883a 	add	r16,r18,r16
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
  8125ac:	b0001126 	beq	r22,zero,8125f4 <__call_exitprocs+0xa0>
  8125b0:	80804017 	ldw	r2,256(r16)
  8125b4:	15800f26 	beq	r2,r22,8125f4 <__call_exitprocs+0xa0>
      for (n = p->_ind - 1; n >= 0; n--)
  8125b8:	8c7fffc4 	addi	r17,r17,-1
  8125bc:	88bfffd8 	cmpnei	r2,r17,-1
  8125c0:	843fff04 	addi	r16,r16,-4
  8125c4:	103ff91e 	bne	r2,zero,8125ac <__call_exitprocs+0x58>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
  8125c8:	dfc00817 	ldw	ra,32(sp)
  8125cc:	ddc00717 	ldw	r23,28(sp)
  8125d0:	dd800617 	ldw	r22,24(sp)
  8125d4:	dd400517 	ldw	r21,20(sp)
  8125d8:	dd000417 	ldw	r20,16(sp)
  8125dc:	dcc00317 	ldw	r19,12(sp)
  8125e0:	dc800217 	ldw	r18,8(sp)
  8125e4:	dc400117 	ldw	r17,4(sp)
  8125e8:	dc000017 	ldw	r16,0(sp)
  8125ec:	dec00904 	addi	sp,sp,36
  8125f0:	f800283a 	ret
	  if (n == p->_ind - 1)
  8125f4:	90800117 	ldw	r2,4(r18)
	  fn = p->_fns[n];
  8125f8:	81800017 	ldw	r6,0(r16)
	  if (n == p->_ind - 1)
  8125fc:	10bfffc4 	addi	r2,r2,-1
  812600:	14401726 	beq	r2,r17,812660 <__call_exitprocs+0x10c>
	    p->_fns[n] = NULL;
  812604:	80000015 	stw	zero,0(r16)
	  if (!fn)
  812608:	303feb26 	beq	r6,zero,8125b8 <__call_exitprocs+0x64>
	  i = 1 << n;
  81260c:	a446983a 	sll	r3,r20,r17
	  if (!args || (args->_fntypes & i) == 0)
  812610:	90806217 	ldw	r2,392(r18)
	  ind = p->_ind;
  812614:	95c00117 	ldw	r23,4(r18)
	  if (!args || (args->_fntypes & i) == 0)
  812618:	1884703a 	and	r2,r3,r2
  81261c:	1000081e 	bne	r2,zero,812640 <__call_exitprocs+0xec>
	    fn ();
  812620:	303ee83a 	callr	r6
	  if (ind != p->_ind || *lastp != p)
  812624:	90c00117 	ldw	r3,4(r18)
  p = _GLOBAL_ATEXIT;
  812628:	98805217 	ldw	r2,328(r19)
	  if (ind != p->_ind || *lastp != p)
  81262c:	1dc0011e 	bne	r3,r23,812634 <__call_exitprocs+0xe0>
  812630:	90bfe126 	beq	r18,r2,8125b8 <__call_exitprocs+0x64>
  while (p)
  812634:	103fe426 	beq	r2,zero,8125c8 <__call_exitprocs+0x74>
  812638:	1025883a 	mov	r18,r2
  81263c:	003fd506 	br	812594 <__call_exitprocs+0x40>
	  else if ((args->_is_cxa & i) == 0)
  812640:	90806317 	ldw	r2,396(r18)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812644:	81002017 	ldw	r4,128(r16)
	  else if ((args->_is_cxa & i) == 0)
  812648:	1886703a 	and	r3,r3,r2
  81264c:	1800061e 	bne	r3,zero,812668 <__call_exitprocs+0x114>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812650:	200b883a 	mov	r5,r4
  812654:	a809883a 	mov	r4,r21
  812658:	303ee83a 	callr	r6
  81265c:	003ff106 	br	812624 <__call_exitprocs+0xd0>
	    p->_ind--;
  812660:	94400115 	stw	r17,4(r18)
  812664:	003fe806 	br	812608 <__call_exitprocs+0xb4>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  812668:	303ee83a 	callr	r6
  81266c:	003fed06 	br	812624 <__call_exitprocs+0xd0>
