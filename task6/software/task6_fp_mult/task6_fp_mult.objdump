
task6_fp_mult.elf:     file format elf32-littlenios2
task6_fp_mult.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013400 memsz 0x00013400 flags r-x
    LOAD off    0x00014420 vaddr 0x00813420 paddr 0x00815118 align 2**12
         filesz 0x00001cf8 memsz 0x00001cf8 flags rw-
    LOAD off    0x00016e10 vaddr 0x00816e10 paddr 0x00816e10 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012764  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a84  0081299c  0081299c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf8  00813420  00815118  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00816e10  00816e10  00016e10  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816f68  00816f68  00016118  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00016118  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001208  00000000  00000000  00016148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00031475  00000000  00000000  00017350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000c6a3  00000000  00000000  000487c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001b552  00000000  00000000  00054e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002764  00000000  00000000  000703bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004f78  00000000  00000000  00072b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00023d92  00000000  00000000  00077a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  0009b82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f80  00000000  00000000  0009b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000a1f86  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000a1f89  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a1f8c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a1f8d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a1f8e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a1f92  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a1f96  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a1f9a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a1fa3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a1fac  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000a1fb5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000a1fc7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  000a1fff  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00040645  00000000  00000000  000a7098  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
0081299c l    d  .rodata	00000000 .rodata
00813420 l    d  .rwdata	00000000 .rwdata
00816e10 l    d  .bss	00000000 .bss
00816f68 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_fp_mult_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00800284 l     F .text	00000078 theFunction.constprop.0
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
008129f0 l     O .rodata	00000080 npio2_hw
00812a70 l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00812d88 l     O .rodata	0000000c init_jk
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803e78 l     F .text	000000c0 __sbprintf
00812ed8 l     O .rodata	00000010 blanks.1
00812ec8 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00804098 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805d98 l     F .text	00000008 __fp_lock
00805dac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00813420 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00812fec l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080b5e8 l     F .text	000000c0 __sbprintf
00813110 l     O .rodata	00000010 zeroes.0
00813120 l     O .rodata	00000010 blanks.1
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080ff50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810068 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008100cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008101e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
008102d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810438 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00810704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815108 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00810970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00810a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810b64 l     F .text	00000034 alt_dev_reg
00814060 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810e5c l     F .text	0000020c altera_avalon_jtag_uart_irq
00811068 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008116ac l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081192c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811da4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00811ef4 l     F .text	0000003c alt_get_errno
00811f30 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00816e3c g     O .bss	00000004 alt_instruction_exception_handler
00809320 g     F .text	00000070 _mprec_log10
0080940c g     F .text	00000060 __any_on
0080c118 g     F .text	00000050 _isatty_r
00812ff8 g     O .rodata	00000028 __mprec_tinytens
00810640 g     F .text	0000007c alt_main
00801ca4 g     F .text	000000cc _puts_r
00816e68 g     O .bss	00000100 alt_irq
0080c168 g     F .text	0000005c _lseek_r
00815118 g       *ABS*	00000000 __flash_rwdata_start
0080ead8 g     F .text	00000080 .hidden __eqdf2
00816f68 g       *ABS*	00000000 __alt_heap_start
008150d0 g     O .rwdata	00000004 c_term1
0080ca9c g     F .text	00000058 _kill_r
00801c70 g     F .text	00000034 printf
0080c4b8 g     F .text	0000006c _wcrtomb_r
0080c61c g     F .text	00000098 _signal_r
00809afc g     F .text	0000005c __sseek
008060e8 g     F .text	00000170 __sinit
0080c224 g     F .text	00000148 __swbuf_r
00806ce4 g     F .text	00000074 _setlocale_r
00805db4 g     F .text	00000078 __sfmoreglue
008106e0 g     F .text	00000024 __malloc_unlock
00807a88 g     F .text	000001c4 memmove
008060d8 g     F .text	00000010 _cleanup
00807c4c g     F .text	000000a4 _Balloc
0080185c g     F .text	00000070 .hidden __fixsfsi
008150d4 g     O .rwdata	00000004 coeff3
0080eb58 g     F .text	000000e8 .hidden __gtdf2
00812318 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
008109ac g     F .text	00000078 times
00806cc4 g     F .text	00000008 __localeconv_l
0080053c g     F .text	00000320 __ieee754_rem_pio2f
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c0c0 g     F .text	00000058 _fstat_r
00816e20 g     O .bss	00000004 errno
00809a74 g     F .text	00000008 __seofread
00816e28 g     O .bss	00000004 alt_argv
0081d0c0 g       *ABS*	00000000 _gp
008101c4 g     F .text	00000020 getpid
00813ee0 g     O .rwdata	00000180 alt_fd_list
0081233c g     F .text	00000090 alt_find_dev
008078fc g     F .text	0000018c memcpy
00805da0 g     F .text	0000000c _cleanup_r
0080fe08 g     F .text	000000b8 .hidden __floatsidf
00811e78 g     F .text	0000007c alt_io_redirect
0080ec40 g     F .text	000000e8 .hidden __ltdf2
0081299c g       *ABS*	00000000 __DTOR_END__
00801d70 g     F .text	000000c0 puts
0081261c g     F .text	00000098 alt_exception_cause_generated_bad_addr
0080916c g     F .text	000001b4 __ratio
008150c0 g     O .rwdata	00000004 c_term5
0080b5d0 g     F .text	00000018 __vfiprintf_internal
00811264 g     F .text	00000220 altera_avalon_jtag_uart_read
00801c40 g     F .text	00000030 _printf_r
0080d7d0 g     F .text	00000064 .hidden __udivsi3
00810220 g     F .text	000000b0 isatty
0080c6b4 g     F .text	000000c4 _raise_r
0080b790 g     F .text	00000060 __assert_func
00813048 g     O .rodata	000000c8 __mprec_tens
0081258c g     F .text	00000090 alt_icache_flush
00816e1c g     O .bss	00000004 __malloc_top_pad
0080caf4 g     F .text	00000004 _getpid_r
00806ccc g     F .text	0000000c _localeconv_r
008081b0 g     F .text	000000b0 __i2b
00806694 g     F .text	000004f0 __sfvwrite_r
0080c778 g     F .text	000000bc __sigtramp_r
008099d0 g     F .text	00000050 _sbrk_r
0080c1c4 g     F .text	0000005c _read_r
00815100 g     O .rwdata	00000004 alt_max_fd
0080b8c8 g     F .text	000000f8 _fclose_r
00805d1c g     F .text	0000007c fflush
00816e18 g     O .bss	00000004 __malloc_max_sbrked_mem
008019f0 g     F .text	000000fc .hidden __extendsfdf2
0080d8b8 g     F .text	000008f0 .hidden __adddf3
00801734 g     F .text	00000070 .hidden __nesf2
00808cbc g     F .text	0000015c __b2d
0080d118 g     F .text	000005c4 .hidden __umoddi3
00810560 g     F .text	000000e0 lseek
008150e0 g     O .rwdata	00000004 _global_impure_ptr
0080946c g     F .text	00000564 _realloc_r
00801474 g     F .text	000000f8 __kernel_sinf
00816f68 g       *ABS*	00000000 __bss_end
00811cbc g     F .text	000000e8 alt_iic_isr_register
00812210 g     F .text	00000108 alt_tick
0080caf8 g     F .text	00000620 .hidden __udivdi3
0080bcd8 g     F .text	000001e8 _fputwc_r
00813020 g     O .rodata	00000028 __mprec_bigtens
00807ec8 g     F .text	000001c4 __s2b
0080c5a8 g     F .text	00000018 abort
0080fec0 g     F .text	00000090 .hidden __floatunsidf
00808914 g     F .text	00000058 __mcmp
00806268 g     F .text	00000010 __fp_lock_all
00811c70 g     F .text	0000004c alt_ic_irq_enabled
0081216c g     F .text	000000a4 alt_alarm_stop
008004a4 g     F .text	00000098 cosf
00816e30 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
00813eb8 g     O .rwdata	00000028 alt_dev_null
008118e0 g     F .text	0000004c alt_dcache_flush_all
0080808c g     F .text	0000006c __hi0bits
0080fd88 g     F .text	00000080 .hidden __fixdfsi
0080085c g     F .text	00000160 __kernel_cosf
00815118 g       *ABS*	00000000 __ram_rwdata_end
008150f8 g     O .rwdata	00000008 alt_dev_list
00810a60 g     F .text	00000104 write
008017a4 g     F .text	000000b8 .hidden __gtsf2
00813420 g       *ABS*	00000000 __ram_rodata_end
00810108 g     F .text	000000bc fstat
0081030c g     F .text	0000012c kill
008150c4 g     O .rwdata	00000004 c_term4
0080ec40 g     F .text	000000e8 .hidden __ledf2
00800358 g     F .text	00000088 theFunction
00808588 g     F .text	00000194 __pow5mult
00809d08 g     F .text	000018c8 ___vfiprintf_internal_r
0080d834 g     F .text	0000005c .hidden __umodsi3
00816f68 g       *ABS*	00000000 end
00810d9c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0081299c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811728 g     F .text	00000084 alt_avalon_timer_sc_init
00801aec g     F .text	00000054 .hidden __clzsi2
00811484 g     F .text	00000228 altera_avalon_jtag_uart_write
00806258 g     F .text	00000004 __sfp_lock_acquire
0080782c g     F .text	000000d0 memchr
00801ec8 g     F .text	00001f98 ___vfprintf_internal_r
008063a0 g     F .text	000002f4 _free_r
00813274 g     O .rodata	00000180 _ctype_b
00806d58 g     F .text	0000000c __locale_mb_cur_max
008127fc g     F .text	000001a0 __call_exitprocs
008150e8 g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
00816e34 g     O .bss	00000004 _alt_tick_rate
0080871c g     F .text	000001f8 __lshift
00816e38 g     O .bss	00000004 _alt_nticks
0080c8ec g     F .text	0000009c signal
00810740 g     F .text	00000108 read
00810bd4 g     F .text	00000064 alt_sys_init
008018cc g     F .text	00000124 .hidden __floatsisf
00812770 g     F .text	0000008c __register_exitproc
00808260 g     F .text	00000328 __multiply
00811108 g     F .text	00000068 altera_avalon_jtag_uart_close
0080d890 g     F .text	00000028 .hidden __mulsi3
00813420 g       *ABS*	00000000 __ram_rwdata_start
0081299c g       *ABS*	00000000 __ram_rodata_start
00816e40 g     O .bss	00000028 __malloc_current_mallinfo
00801734 g     F .text	00000070 .hidden __eqsf2
00808e18 g     F .text	00000354 __d2b
008150cc g     O .rwdata	00000004 c_term2
00810c38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008124d4 g     F .text	000000b8 alt_get_fd
0080b740 g     F .text	00000050 _close_r
008002fc g     F .text	00000028 generateVector
008126f8 g     F .text	00000078 memcmp
00810cf8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816f68 g       *ABS*	00000000 __alt_stack_base
00810d48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00803f38 g     F .text	00000160 __swsetup_r
0080e1a8 g     F .text	00000930 .hidden __divdf3
00805e2c g     F .text	000002ac __sfp
00809390 g     F .text	0000007c __copybits
008139b0 g     O .rwdata	00000408 __malloc_av_
00806264 g     F .text	00000004 __sinit_lock_release
0080ed28 g     F .text	000007ac .hidden __muldf3
00809a20 g     F .text	00000054 __sread
008123cc g     F .text	00000108 alt_find_file
00811968 g     F .text	000000a8 alt_dev_llist_insert
008106bc g     F .text	00000024 __malloc_lock
008108b8 g     F .text	000000b8 sbrk
00801640 g     F .text	000000f4 scalbnf
00805cbc g     F .text	00000060 _fflush_r
0080b804 g     F .text	000000c4 _calloc_r
00813db8 g     O .rwdata	00000100 .hidden __divsi3_table
00816e10 g       *ABS*	00000000 __bss_start
00801b40 g     F .text	00000100 memset
008003e0 g     F .text	000000c4 main
00816e2c g     O .bss	00000004 alt_envp
00816e14 g     O .bss	00000004 __malloc_max_total_mem
00810c98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c36c g     F .text	0000014c __swbuf
00809b58 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080b9c0 g     F .text	000000fc fclose
008042b8 g     F .text	000017dc _dtoa_r
0080701c g     F .text	000007c0 _malloc_r
0080b6b4 g     F .text	00000030 __ascii_wctomb
00815104 g     O .rwdata	00000004 alt_errno
0080babc g     F .text	00000020 _fiprintf_r
0080c988 g     F .text	0000005c _init_signal
00806b84 g     F .text	00000098 _fwalk
008077dc g     F .text	0000000c _mbtowc_r
0080d6dc g     F .text	00000080 .hidden __divsi3
00806288 g     F .text	00000118 _malloc_trim_r
0081299c g       *ABS*	00000000 __CTOR_END__
00809b60 g     F .text	000000b8 strcmp
0081299c g       *ABS*	00000000 __flash_rodata_start
0081299c g       *ABS*	00000000 __DTOR_LIST__
0080ead8 g     F .text	00000080 .hidden __nedf2
00810b98 g     F .text	0000003c alt_irq_init
00810848 g     F .text	00000070 alt_release_fd
00812d94 g     O .rodata	00000100 .hidden __clz_tab
00816e10 g     O .bss	00000004 _PathLocale
008126b4 g     F .text	00000014 atexit
008017a4 g     F .text	000000b8 .hidden __gesf2
00800324 g     F .text	00000034 sumVector
0080b6e4 g     F .text	0000005c _write_r
008150d8 g     O .rwdata	00000004 coeff2
00806d64 g     F .text	00000074 setlocale
008150e4 g     O .rwdata	00000004 _impure_ptr
00816e24 g     O .bss	00000004 alt_argc
00805a94 g     F .text	00000228 __sflush_r
00811a74 g     F .text	00000064 _do_dtors
008150c8 g     O .rwdata	00000004 c_term3
00800020 g       .exceptions	00000000 alt_irq_entry
008077e8 g     F .text	00000044 __ascii_mbtowc
00808c60 g     F .text	0000005c __ulp
00806278 g     F .text	00000010 __fp_unlock_all
008150f0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806cd8 g     F .text	0000000c localeconv
00806f84 g     F .text	00000098 __swhatbuf_r
00811b0c g     F .text	00000050 alt_ic_isr_register
00815118 g       *ABS*	00000000 _edata
00816f68 g       *ABS*	00000000 _end
0080bb10 g     F .text	000001c8 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
00811170 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00811be4 g     F .text	0000008c alt_ic_irq_disable
00809a7c g     F .text	00000080 __swrite
008150ec g     O .rwdata	00000004 __malloc_trim_threshold
008126c8 g     F .text	00000030 exit
0080badc g     F .text	00000034 fiprintf
0080c220 g     F .text	00000004 _vfiprintf_r
00806c1c g     F .text	000000a8 _fwalk_reent
0080896c g     F .text	000002f4 __mdiff
0080d75c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080625c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00813170 g     O .rodata	00000101 _ctype_
00810094 g     F .text	00000038 _exit
008009bc g     F .text	00000ab8 __kernel_rem_pio2f
008117ac g     F .text	00000134 alt_alarm_start
00806dd8 g     F .text	000001ac __smakebuf_r
00801e30 g     F .text	00000098 strlen
0080c5c0 g     F .text	0000005c _init_signal_r
0081200c g     F .text	00000160 open
0080eb58 g     F .text	000000e8 .hidden __gedf2
0080b7f0 g     F .text	00000014 __assert
00809c18 g     F .text	000000f0 __sprint_r
00811ad8 g     F .text	00000034 alt_icache_flush_all
0080156c g     F .text	000000d4 floorf
0081510c g     O .rwdata	00000004 alt_priority_mask
00811b5c g     F .text	00000088 alt_ic_irq_enable
00803e60 g     F .text	00000018 __vfprintf_internal
0080b6a8 g     F .text	0000000c _wctomb_r
0080f4d4 g     F .text	000008b4 .hidden __subdf3
008080f8 g     F .text	000000b8 __lo0bits
00815110 g     O .rwdata	00000008 alt_alarm_list
00811a10 g     F .text	00000064 _do_ctors
0080c9e4 g     F .text	000000b8 __sigtramp
0080c524 g     F .text	00000084 wcrtomb
008150dc g     O .rwdata	00000004 coeff1
0080ff8c g     F .text	000000dc close
00813844 g     O .rwdata	0000016c __global_locale
008104a0 g     F .text	00000084 alt_load
0080bec0 g     F .text	00000200 fputwc
0080c834 g     F .text	000000b8 raise
00806260 g     F .text	00000004 __sinit_lock_acquire
00807d14 g     F .text	000001b4 __multadd
00807cf0 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10db9a17 	ldw	r3,28264(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	109b9b17 	ldw	r2,28268(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a75f17 	ldw	r2,-25220(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a75f17 	ldw	r2,-25220(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6b43014 	ori	gp,gp,53440
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	109b8414 	ori	r2,r2,28176

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18dbda14 	ori	r3,r3,28520

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	08104a00 	call	8104a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	08106400 	call	810640 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <theFunction.constprop.0>:
      c_term2 = 1 / 24.0f, 
      c_term3 = - 1 / 720.0f,
      c_term4 = 1 / 40320.0f,
      c_term5 = - 1 / 3628800.0f;

float theFunction(float x[0], int M) {
  800284:	defffb04 	addi	sp,sp,-20
  800288:	dcc00315 	stw	r19,12(sp)
  80028c:	dc800215 	stw	r18,8(sp)
  800290:	dc000015 	stw	r16,0(sp)
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	dc400115 	stw	r17,4(sp)
  80029c:	2021883a 	mov	r16,r4
  8002a0:	2487f904 	addi	r18,r4,8164
  float sum = 0;
  8002a4:	0027883a 	mov	r19,zero


    // sum = FP_ADD(sum, FP_ADD(FP_MUL(coeff1,x[i]), FP_MUL(FP_MUL(x[i],x[i]),cosine)));


    sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] - 128.0f) * coeff2));
  8002a8:	84400017 	ldw	r17,0(r16)
  8002ac:	0090c034 	movhi	r2,17152
  8002b0:	010f0034 	movhi	r4,15360
  8002b4:	8885c0b2 	custom	2,r2,r17,r2
  8002b8:	1109c032 	custom	0,r4,r2,r4
  8002bc:	08004a40 	call	8004a4 <cosf>
  8002c0:	8885c032 	custom	0,r2,r17,r2
  8002c4:	00cfc034 	movhi	r3,16128
  8002c8:	10c5c072 	custom	1,r2,r2,r3
  8002cc:	1445c032 	custom	0,r2,r2,r17
  for (; i < M; i++) 
  8002d0:	84000104 	addi	r16,r16,4
    sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] - 128.0f) * coeff2));
  8002d4:	98a7c072 	custom	1,r19,r19,r2
  for (; i < M; i++) 
  8002d8:	943ff31e 	bne	r18,r16,8002a8 <theFunction.constprop.0+0x24>
  }

  return sum;
}
  8002dc:	9805883a 	mov	r2,r19
  8002e0:	dfc00417 	ldw	ra,16(sp)
  8002e4:	dcc00317 	ldw	r19,12(sp)
  8002e8:	dc800217 	ldw	r18,8(sp)
  8002ec:	dc400117 	ldw	r17,4(sp)
  8002f0:	dc000017 	ldw	r16,0(sp)
  8002f4:	dec00504 	addi	sp,sp,20
  8002f8:	f800283a 	ret

008002fc <generateVector>:
  x[0] = 0;
  8002fc:	20000015 	stw	zero,0(r4)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  800300:	20800104 	addi	r2,r4,4
  800304:	2147f904 	addi	r5,r4,8164
  x[0] = 0;
  800308:	0007883a 	mov	r3,zero
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  80030c:	010f8034 	movhi	r4,15872
  800310:	1907c072 	custom	1,r3,r3,r4
  800314:	10c00015 	stw	r3,0(r2)
  800318:	10800104 	addi	r2,r2,4
  80031c:	117ffb1e 	bne	r2,r5,80030c <generateVector+0x10>
}
  800320:	f800283a 	ret

00800324 <sumVector>:
  for (; i < M; i++) 
  800324:	01400a0e 	bge	zero,r5,800350 <sumVector+0x2c>
  800328:	280a90ba 	slli	r5,r5,2
  float sum = 0;
  80032c:	0005883a 	mov	r2,zero
  800330:	214d883a 	add	r6,r4,r5
    sum += (x[i] + x[i] * x[i]);
  800334:	21400017 	ldw	r5,0(r4)
  for (; i < M; i++) 
  800338:	21000104 	addi	r4,r4,4
    sum += (x[i] + x[i] * x[i]);
  80033c:	2947c032 	custom	0,r3,r5,r5
  800340:	1947c072 	custom	1,r3,r3,r5
  800344:	10c5c072 	custom	1,r2,r2,r3
  for (; i < M; i++) 
  800348:	313ffa1e 	bne	r6,r4,800334 <sumVector+0x10>
  80034c:	f800283a 	ret
  float sum = 0;
  800350:	0005883a 	mov	r2,zero
}
  800354:	f800283a 	ret

00800358 <theFunction>:
float theFunction(float x[0], int M) {
  800358:	defffb04 	addi	sp,sp,-20
  80035c:	dfc00415 	stw	ra,16(sp)
  800360:	dcc00315 	stw	r19,12(sp)
  800364:	dc800215 	stw	r18,8(sp)
  800368:	dc400115 	stw	r17,4(sp)
  80036c:	dc000015 	stw	r16,0(sp)
  for (; i < M; i++) 
  800370:	0140190e 	bge	zero,r5,8003d8 <theFunction+0x80>
  800374:	280a90ba 	slli	r5,r5,2
  800378:	2021883a 	mov	r16,r4
  float sum = 0;
  80037c:	0027883a 	mov	r19,zero
  800380:	2165883a 	add	r18,r4,r5
    sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] - 128.0f) * coeff2));
  800384:	84400017 	ldw	r17,0(r16)
  800388:	0090c034 	movhi	r2,17152
  80038c:	010f0034 	movhi	r4,15360
  800390:	8885c0b2 	custom	2,r2,r17,r2
  800394:	1109c032 	custom	0,r4,r2,r4
  800398:	08004a40 	call	8004a4 <cosf>
  80039c:	8885c032 	custom	0,r2,r17,r2
  8003a0:	00cfc034 	movhi	r3,16128
  8003a4:	10c5c072 	custom	1,r2,r2,r3
  8003a8:	1445c032 	custom	0,r2,r2,r17
  for (; i < M; i++) 
  8003ac:	84000104 	addi	r16,r16,4
    sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] - 128.0f) * coeff2));
  8003b0:	98a7c072 	custom	1,r19,r19,r2
  for (; i < M; i++) 
  8003b4:	943ff31e 	bne	r18,r16,800384 <theFunction+0x2c>
}
  8003b8:	9805883a 	mov	r2,r19
  8003bc:	dfc00417 	ldw	ra,16(sp)
  8003c0:	dcc00317 	ldw	r19,12(sp)
  8003c4:	dc800217 	ldw	r18,8(sp)
  8003c8:	dc400117 	ldw	r17,4(sp)
  8003cc:	dc000017 	ldw	r16,0(sp)
  8003d0:	dec00504 	addi	sp,sp,20
  8003d4:	f800283a 	ret
  float sum = 0;
  8003d8:	0027883a 	mov	r19,zero
  return sum;
  8003dc:	003ff606 	br	8003b8 <theFunction+0x60>

008003e0 <main>:

int main(int argc, char* argv[])
{
  const int numIterations = NUM_CASES;
  printf("Task 3!\n");
  8003e0:	01002074 	movhi	r4,129
{
  8003e4:	def80104 	addi	sp,sp,-8188
  printf("Task 3!\n");
  8003e8:	210a6704 	addi	r4,r4,10652
{
  8003ec:	dfc7fe15 	stw	ra,8184(sp)
  8003f0:	dc07fd15 	stw	r16,8180(sp)
  printf("Task 3!\n");
  8003f4:	0801d700 	call	801d70 <puts>
  // printf("Ticks per second: %ld\n", alt_ticks_per_second());
  printf("Running %d tests\n", numIterations);
  8003f8:	01002074 	movhi	r4,129
  8003fc:	01400284 	movi	r5,10
  800400:	210a6904 	addi	r4,r4,10660
  800404:	0801c700 	call	801c70 <printf>


  // Returned result
  volatile float y;

  generateVector(x);
  800408:	d9000404 	addi	r4,sp,16
  80040c:	08002fc0 	call	8002fc <generateVector>

  volatile clock_t exec_t1, exec_t2;

  // const int numIterations = 1 << TEST_REPEAT;

  exec_t1 = times(NULL);
  800410:	0009883a 	mov	r4,zero
  800414:	08109ac0 	call	8109ac <times>
  800418:	d8800115 	stw	r2,4(sp)
  80041c:	04000284 	movi	r16,10

  int y1 = 0;

  for (int i = 0; i < numIterations; i++) {
    y = theFunction(x, N);
  800420:	d9000404 	addi	r4,sp,16
  800424:	08002840 	call	800284 <theFunction.constprop.0>
  800428:	d8800015 	stw	r2,0(sp)
  for (int i = 0; i < numIterations; i++) {
  80042c:	843fffc4 	addi	r16,r16,-1
  800430:	803ffb1e 	bne	r16,zero,800420 <main+0x40>
  }

  // till here
  exec_t2 = times(NULL);
  800434:	0009883a 	mov	r4,zero
  800438:	08109ac0 	call	8109ac <times>
  80043c:	d8800215 	stw	r2,8(sp)

  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  800440:	d8800217 	ldw	r2,8(sp)
  800444:	d8c00117 	ldw	r3,4(sp)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  800448:	01002074 	movhi	r4,129
  80044c:	210a6e04 	addi	r4,r4,10680
  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  800450:	10c5c83a 	sub	r2,r2,r3
  800454:	d8800315 	stw	r2,12(sp)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  800458:	d9400317 	ldw	r5,12(sp)
  80045c:	0801c700 	call	801c70 <printf>
  printf("RESULT: %f, %x\n", y, *(int*)(&y));
  800460:	d9000017 	ldw	r4,0(sp)
  800464:	08019f00 	call	8019f0 <__extendsfdf2>
  800468:	d9c00017 	ldw	r7,0(sp)
  80046c:	01002074 	movhi	r4,129
  800470:	180d883a 	mov	r6,r3
  800474:	100b883a 	mov	r5,r2
  800478:	210a7304 	addi	r4,r4,10700
  80047c:	0801c700 	call	801c70 <printf>
  printf("Num Iterations: %d\n", y1);
  800480:	01002074 	movhi	r4,129
  800484:	000b883a 	mov	r5,zero
  800488:	210a7704 	addi	r4,r4,10716
  80048c:	0801c700 	call	801c70 <printf>
  // printf("Total ticks %d for %d iters\n", elapsedTicks , numIterations);
  // printf("Time Taken: %f\n",(float) elapsedTicks/numIterations);


  return 0;
}
  800490:	0005883a 	mov	r2,zero
  800494:	dfc7fe17 	ldw	ra,8184(sp)
  800498:	dc07fd17 	ldw	r16,8180(sp)
  80049c:	dec7ff04 	addi	sp,sp,8188
  8004a0:	f800283a 	ret

008004a4 <cosf>:
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
  8004a4:	00a00034 	movhi	r2,32768
  8004a8:	10bfffc4 	addi	r2,r2,-1
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  8004ac:	00cfd274 	movhi	r3,16201
	ix &= 0x7fffffff;
  8004b0:	1104703a 	and	r2,r2,r4
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  8004b4:	18c3f604 	addi	r3,r3,4056
  8004b8:	1880150e 	bge	r3,r2,800510 <cosf+0x6c>

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
  8004bc:	00dfe034 	movhi	r3,32640
  8004c0:	10c00216 	blt	r2,r3,8004cc <cosf+0x28>
  8004c4:	0005883a 	mov	r2,zero
		case 2: return -__kernel_cosf(y[0],y[1]);
		default:
		        return  __kernel_sinf(y[0],y[1],1);
	    }
	}
}
  8004c8:	f800283a 	ret
{
  8004cc:	defffd04 	addi	sp,sp,-12
	    n = __ieee754_rem_pio2f(x,y);
  8004d0:	d80b883a 	mov	r5,sp
{
  8004d4:	dfc00215 	stw	ra,8(sp)
	    n = __ieee754_rem_pio2f(x,y);
  8004d8:	080053c0 	call	80053c <__ieee754_rem_pio2f>
	    switch(n&3) {
  8004dc:	108000cc 	andi	r2,r2,3
  8004e0:	10c00060 	cmpeqi	r3,r2,1
		        return  __kernel_sinf(y[0],y[1],1);
  8004e4:	d9400117 	ldw	r5,4(sp)
  8004e8:	d9000017 	ldw	r4,0(sp)
	    switch(n&3) {
  8004ec:	18000a1e 	bne	r3,zero,800518 <cosf+0x74>
  8004f0:	10c000a0 	cmpeqi	r3,r2,2
  8004f4:	18000e1e 	bne	r3,zero,800530 <cosf+0x8c>
  8004f8:	10000b26 	beq	r2,zero,800528 <cosf+0x84>
		        return  __kernel_sinf(y[0],y[1],1);
  8004fc:	01800044 	movi	r6,1
  800500:	08014740 	call	801474 <__kernel_sinf>
}
  800504:	dfc00217 	ldw	ra,8(sp)
  800508:	dec00304 	addi	sp,sp,12
  80050c:	f800283a 	ret
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800510:	000b883a 	mov	r5,zero
  800514:	080085c1 	jmpi	80085c <__kernel_cosf>
		case 1: return -__kernel_sinf(y[0],y[1],1);
  800518:	01800044 	movi	r6,1
  80051c:	08014740 	call	801474 <__kernel_sinf>
  800520:	10a0003c 	xorhi	r2,r2,32768
  800524:	003ff706 	br	800504 <cosf+0x60>
		case 0: return  __kernel_cosf(y[0],y[1]);
  800528:	080085c0 	call	80085c <__kernel_cosf>
  80052c:	003ff506 	br	800504 <cosf+0x60>
		case 2: return -__kernel_cosf(y[0],y[1]);
  800530:	080085c0 	call	80085c <__kernel_cosf>
  800534:	10a0003c 	xorhi	r2,r2,32768
  800538:	003ff206 	br	800504 <cosf+0x60>

0080053c <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
  80053c:	defff504 	addi	sp,sp,-44
  800540:	dc000515 	stw	r16,20(sp)
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
  800544:	04200034 	movhi	r16,32768
  800548:	843fffc4 	addi	r16,r16,-1
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  80054c:	008fd274 	movhi	r2,16201
{
  800550:	dc400615 	stw	r17,24(sp)
  800554:	dfc00a15 	stw	ra,40(sp)
  800558:	dd000915 	stw	r20,36(sp)
  80055c:	dcc00815 	stw	r19,32(sp)
  800560:	dc800715 	stw	r18,28(sp)
	ix = hx&0x7fffffff;
  800564:	8120703a 	and	r16,r16,r4
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800568:	1083f604 	addi	r2,r2,4056
{
  80056c:	2823883a 	mov	r17,r5
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800570:	1400430e 	bge	r2,r16,800680 <__ieee754_rem_pio2f+0x144>
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
  800574:	009005f4 	movhi	r2,16407
  800578:	10b2f8c4 	addi	r2,r2,-13341
  80057c:	2025883a 	mov	r18,r4
  800580:	14001716 	blt	r2,r16,8005e0 <__ieee754_rem_pio2f+0xa4>
	    if(hx>0) { 
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800584:	00bffc04 	movi	r2,-16
  800588:	80a0703a 	and	r16,r16,r2
	    if(hx>0) { 
  80058c:	0100a30e 	bge	zero,r4,80081c <__ieee754_rem_pio2f+0x2e0>
		    y[0] = z - pio2_1t;
  800590:	00cff274 	movhi	r3,16329
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800594:	008ff274 	movhi	r2,16329
		    y[0] = z - pio2_1t;
  800598:	18c3f6c4 	addi	r3,r3,4059
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  80059c:	1083f404 	addi	r2,r2,4048
		    y[0] = z - pio2_1t;
  8005a0:	20c9c0b2 	custom	2,r4,r4,r3
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  8005a4:	80806e26 	beq	r16,r2,800760 <__ieee754_rem_pio2f+0x224>
		    y[1] = (z-y[0])-pio2_1t;
  8005a8:	008ccf34 	movhi	r2,13116
  8005ac:	10af4004 	addi	r2,r2,-17152
		    y[0] = z - pio2_1t;
  8005b0:	29000015 	stw	r4,0(r5)
		    y[1] = (z-y[0])-pio2_1t;
  8005b4:	28800115 	stw	r2,4(r5)
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
  8005b8:	04c00044 	movi	r19,1
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
  8005bc:	9805883a 	mov	r2,r19
  8005c0:	dfc00a17 	ldw	ra,40(sp)
  8005c4:	dd000917 	ldw	r20,36(sp)
  8005c8:	dcc00817 	ldw	r19,32(sp)
  8005cc:	dc800717 	ldw	r18,28(sp)
  8005d0:	dc400617 	ldw	r17,24(sp)
  8005d4:	dc000517 	ldw	r16,20(sp)
  8005d8:	dec00b04 	addi	sp,sp,44
  8005dc:	f800283a 	ret
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
  8005e0:	0090d274 	movhi	r2,17225
  8005e4:	1083e004 	addi	r2,r2,3968
  8005e8:	14002916 	blt	r2,r16,800690 <__ieee754_rem_pio2f+0x154>
	    n  = (__int32_t) (t*invpio2+half);
  8005ec:	010fc8f4 	movhi	r4,16163
  8005f0:	213e6104 	addi	r4,r4,-1660
  8005f4:	008fc034 	movhi	r2,16128
  8005f8:	8109c032 	custom	0,r4,r16,r4
  8005fc:	2089c072 	custom	1,r4,r4,r2
  800600:	080185c0 	call	80185c <__fixsfsi>
	    fn = (float)n;
  800604:	1009883a 	mov	r4,r2
	    n  = (__int32_t) (t*invpio2+half);
  800608:	1027883a 	mov	r19,r2
	    fn = (float)n;
  80060c:	08018cc0 	call	8018cc <__floatsisf>
	    r  = t-fn*pio2_1;
  800610:	00cff274 	movhi	r3,16329
  800614:	18c3e004 	addi	r3,r3,3968
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800618:	014dcd74 	movhi	r5,14133
	    r  = t-fn*pio2_1;
  80061c:	10c7c032 	custom	0,r3,r2,r3
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800620:	295110c4 	addi	r5,r5,17475
	    r  = t-fn*pio2_1;
  800624:	80c9c0b2 	custom	2,r4,r16,r3
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800628:	114bc032 	custom	0,r5,r2,r5
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  80062c:	99800808 	cmpgei	r6,r19,32
	    t  = fabsf(x);
  800630:	8029883a 	mov	r20,r16
		y[0] = r-w;	/* quick check no cancellation */
  800634:	2151c0b2 	custom	2,r8,r4,r5
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800638:	30004f1e 	bne	r6,zero,800778 <__ieee754_rem_pio2f+0x23c>
  80063c:	980e90ba 	slli	r7,r19,2
  800640:	01802074 	movhi	r6,129
  800644:	398d883a 	add	r6,r7,r6
  800648:	31ca7b17 	ldw	r7,10732(r6)
  80064c:	01bfc004 	movi	r6,-256
  800650:	818c703a 	and	r6,r16,r6
  800654:	31c04826 	beq	r6,r7,800778 <__ieee754_rem_pio2f+0x23c>
		y[0] = r-w;	/* quick check no cancellation */
  800658:	8a000015 	stw	r8,0(r17)
	    y[1] = (r-y[0])-w;
  80065c:	88000115 	stw	zero,4(r17)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
  800660:	903fd60e 	bge	r18,zero,8005bc <__ieee754_rem_pio2f+0x80>
  800664:	2a0bc072 	custom	1,r5,r5,r8
  800668:	40e0003c 	xorhi	r3,r8,32768
  80066c:	290bc0b2 	custom	2,r5,r5,r4
  800670:	88c00015 	stw	r3,0(r17)
  800674:	89400115 	stw	r5,4(r17)
  800678:	04e7c83a 	sub	r19,zero,r19
  80067c:	003fcf06 	br	8005bc <__ieee754_rem_pio2f+0x80>
	    {y[0] = x; y[1] = 0; return 0;}
  800680:	29000015 	stw	r4,0(r5)
  800684:	28000115 	stw	zero,4(r5)
  800688:	0027883a 	mov	r19,zero
  80068c:	003fcb06 	br	8005bc <__ieee754_rem_pio2f+0x80>
	if(!FLT_UWORD_IS_FINITE(ix)) {
  800690:	009fe034 	movhi	r2,32640
  800694:	8080550e 	bge	r16,r2,8007ec <__ieee754_rem_pio2f+0x2b0>
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
  800698:	8027d5fa 	srai	r19,r16,23
  80069c:	9cffde84 	addi	r19,r19,-134
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
  8006a0:	980895fa 	slli	r4,r19,23
  8006a4:	8109c83a 	sub	r4,r16,r4
  8006a8:	2021883a 	mov	r16,r4
		tx[i] = (float)((__int32_t)(z));
  8006ac:	080185c0 	call	80185c <__fixsfsi>
  8006b0:	1009883a 	mov	r4,r2
  8006b4:	08018cc0 	call	8018cc <__floatsisf>
		z     = (z-tx[i])*two8;
  8006b8:	00d0e034 	movhi	r3,17280
  8006bc:	80a1c0b2 	custom	2,r16,r16,r2
  8006c0:	80e1c032 	custom	0,r16,r16,r3
		tx[i] = (float)((__int32_t)(z));
  8006c4:	8009883a 	mov	r4,r16
  8006c8:	d8800215 	stw	r2,8(sp)
  8006cc:	080185c0 	call	80185c <__fixsfsi>
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	08018cc0 	call	8018cc <__floatsisf>
  8006d8:	1029883a 	mov	r20,r2
		z     = (z-tx[i])*two8;
  8006dc:	80a1c0b2 	custom	2,r16,r16,r2
  8006e0:	0090e034 	movhi	r2,17280
  8006e4:	80a1c032 	custom	0,r16,r16,r2
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  8006e8:	000b883a 	mov	r5,zero
  8006ec:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  8006f0:	dd000315 	stw	r20,12(sp)
	tx[2] = z;
  8006f4:	dc000415 	stw	r16,16(sp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  8006f8:	08017340 	call	801734 <__eqsf2>
  8006fc:	1000451e 	bne	r2,zero,800814 <__ieee754_rem_pio2f+0x2d8>
  800700:	000b883a 	mov	r5,zero
  800704:	a009883a 	mov	r4,r20
  800708:	08017340 	call	801734 <__eqsf2>
  80070c:	10003f1e 	bne	r2,zero,80080c <__ieee754_rem_pio2f+0x2d0>
  800710:	01c00044 	movi	r7,1
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
  800714:	00802074 	movhi	r2,129
  800718:	108a9c04 	addi	r2,r2,10864
  80071c:	d8800115 	stw	r2,4(sp)
  800720:	00800084 	movi	r2,2
  800724:	980d883a 	mov	r6,r19
  800728:	d8800015 	stw	r2,0(sp)
  80072c:	880b883a 	mov	r5,r17
  800730:	d9000204 	addi	r4,sp,8
  800734:	08009bc0 	call	8009bc <__kernel_rem_pio2f>
  800738:	1027883a 	mov	r19,r2
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
  80073c:	903f9f0e 	bge	r18,zero,8005bc <__ieee754_rem_pio2f+0x80>
  800740:	88c00017 	ldw	r3,0(r17)
  800744:	88800117 	ldw	r2,4(r17)
  800748:	04e7c83a 	sub	r19,zero,r19
  80074c:	18e0003c 	xorhi	r3,r3,32768
  800750:	10a0003c 	xorhi	r2,r2,32768
  800754:	88c00015 	stw	r3,0(r17)
  800758:	88800115 	stw	r2,4(r17)
  80075c:	003f9706 	br	8005bc <__ieee754_rem_pio2f+0x80>
		    y[1] = (z-y[0])-pio2_2t;
  800760:	00aba1b4 	movhi	r2,44678
  800764:	10a8c204 	addi	r2,r2,-23800
		    y[0] = z - pio2_2t;
  800768:	29000015 	stw	r4,0(r5)
		    y[1] = (z-y[0])-pio2_2t;
  80076c:	28800115 	stw	r2,4(r5)
		return 1;
  800770:	04c00044 	movi	r19,1
  800774:	003f9106 	br	8005bc <__ieee754_rem_pio2f+0x80>
	        i = j-((high>>23)&0xff);
  800778:	400cd5fa 	srli	r6,r8,23
	        j  = ix>>23;
  80077c:	8021d5fa 	srai	r16,r16,23
	        y[0] = r-w; 
  800780:	8a000015 	stw	r8,0(r17)
	        i = j-((high>>23)&0xff);
  800784:	31803fcc 	andi	r6,r6,255
  800788:	818dc83a 	sub	r6,r16,r6
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
  80078c:	31c00250 	cmplti	r7,r6,9
  800790:	383fb21e 	bne	r7,zero,80065c <__ieee754_rem_pio2f+0x120>
		    w  = fn*pio2_2;	
  800794:	01cdcd74 	movhi	r7,14133
  800798:	39d10004 	addi	r7,r7,17408
  80079c:	11cfc032 	custom	0,r7,r2,r7
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
  8007a0:	31800688 	cmpgei	r6,r6,26
		    r  = t-w;
  8007a4:	21d3c0b2 	custom	2,r9,r4,r7
		    w  = fn*pio2_2t-((t-r)-w);	
  8007a8:	1d07c0b2 	custom	2,r3,r3,r20
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
  8007ac:	30001326 	beq	r6,zero,8007fc <__ieee754_rem_pio2f+0x2c0>
		    	w  = fn*pio2_3;	
  8007b0:	014ba1b4 	movhi	r5,11910
  8007b4:	2968c004 	addi	r5,r5,-23808
		    	w  = fn*pio2_3t-((t-r)-w);	
  8007b8:	01892374 	movhi	r6,9357
		    	w  = fn*pio2_3;	
  8007bc:	1151c032 	custom	0,r8,r2,r5
		    	w  = fn*pio2_3t-((t-r)-w);	
  8007c0:	318c4c84 	addi	r6,r6,12594
  8007c4:	3a0bc072 	custom	1,r5,r7,r8
  8007c8:	118dc032 	custom	0,r6,r2,r6
  8007cc:	298bc072 	custom	1,r5,r5,r6
		    	r  = t-w;
  8007d0:	4a13c0b2 	custom	2,r9,r9,r8
		    	y[0] = r-w;
  8007d4:	2151c0b2 	custom	2,r8,r4,r5
		    	w  = fn*pio2_3t-((t-r)-w);	
  8007d8:	194bc072 	custom	1,r5,r3,r5
  8007dc:	2a4bc072 	custom	1,r5,r5,r9
		    	y[0] = r-w;
  8007e0:	8a000015 	stw	r8,0(r17)
		    	r  = t-w;
  8007e4:	4809883a 	mov	r4,r9
  8007e8:	003f9c06 	br	80065c <__ieee754_rem_pio2f+0x120>
	    y[0]=y[1]=x-x; return 0;
  8007ec:	28000115 	stw	zero,4(r5)
  8007f0:	28000015 	stw	zero,0(r5)
  8007f4:	0027883a 	mov	r19,zero
  8007f8:	003f7006 	br	8005bc <__ieee754_rem_pio2f+0x80>
  8007fc:	194bc072 	custom	1,r5,r3,r5
		    w  = fn*pio2_2t-((t-r)-w);	
  800800:	494bc072 	custom	1,r5,r9,r5
		    r  = t-w;
  800804:	4809883a 	mov	r4,r9
  800808:	003f9406 	br	80065c <__ieee754_rem_pio2f+0x120>
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  80080c:	01c00084 	movi	r7,2
  800810:	003fc006 	br	800714 <__ieee754_rem_pio2f+0x1d8>
	nx = 3;
  800814:	01c000c4 	movi	r7,3
  800818:	003fbe06 	br	800714 <__ieee754_rem_pio2f+0x1d8>
		    y[0] = z + pio2_1t;
  80081c:	008ff274 	movhi	r2,16329
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800820:	00cff274 	movhi	r3,16329
		    y[0] = z + pio2_1t;
  800824:	1083f6c4 	addi	r2,r2,4059
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800828:	18c3f404 	addi	r3,r3,4048
		    y[0] = z + pio2_1t;
  80082c:	2085c072 	custom	1,r2,r4,r2
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800830:	80c00426 	beq	r16,r3,800844 <__ieee754_rem_pio2f+0x308>
		    y[0] = z + pio2_1t;
  800834:	28800015 	stw	r2,0(r5)
		    y[1] = (z-y[0])+pio2_1t;
  800838:	28000115 	stw	zero,4(r5)
		return -1;
  80083c:	04ffffc4 	movi	r19,-1
  800840:	003f5e06 	br	8005bc <__ieee754_rem_pio2f+0x80>
		    y[1] = (z-y[0])+pio2_2t;
  800844:	00cba1b4 	movhi	r3,11910
  800848:	18e8c204 	addi	r3,r3,-23800
		    y[0] = z + pio2_2t;
  80084c:	28800015 	stw	r2,0(r5)
		    y[1] = (z-y[0])+pio2_2t;
  800850:	28c00115 	stw	r3,4(r5)
		return -1;
  800854:	04ffffc4 	movi	r19,-1
  800858:	003f5806 	br	8005bc <__ieee754_rem_pio2f+0x80>

0080085c <__kernel_cosf>:
#endif
{
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  80085c:	00a00034 	movhi	r2,32768
{
  800860:	defffd04 	addi	sp,sp,-12
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800864:	10bfffc4 	addi	r2,r2,-1
{
  800868:	dc400115 	stw	r17,4(sp)
  80086c:	dc000015 	stw	r16,0(sp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800870:	110c703a 	and	r6,r2,r4
{
  800874:	dfc00215 	stw	ra,8(sp)
	if(ix<0x32000000) {			/* if x < 2**27 */
  800878:	008c8034 	movhi	r2,12800
{
  80087c:	2021883a 	mov	r16,r4
  800880:	2823883a 	mov	r17,r5
	if(ix<0x32000000) {			/* if x < 2**27 */
  800884:	3080230e 	bge	r6,r2,800914 <__kernel_cosf+0xb8>
	    if(((int)x)==0) return one;		/* generate inexact */
  800888:	080185c0 	call	80185c <__fixsfsi>
  80088c:	10004926 	beq	r2,zero,8009b4 <__kernel_cosf+0x158>
	}
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800890:	00ab5234 	movhi	r2,44360
	z  = x*x;
  800894:	8407c032 	custom	0,r3,r16,r16
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800898:	10b5d384 	addi	r2,r2,-10418
  80089c:	010c43f4 	movhi	r4,12559
  8008a0:	1885c032 	custom	0,r2,r3,r2
  8008a4:	211d3d84 	addi	r4,r4,29942
  8008a8:	1105c072 	custom	1,r2,r2,r4
  8008ac:	010d2534 	movhi	r4,13460
  8008b0:	10c5c032 	custom	0,r2,r2,r3
  8008b4:	213c9f04 	addi	r4,r4,-3460
  8008b8:	1105c0b2 	custom	2,r2,r2,r4
  8008bc:	010df434 	movhi	r4,14288
  8008c0:	10c5c032 	custom	0,r2,r2,r3
  8008c4:	21034044 	addi	r4,r4,3329
  8008c8:	1105c072 	custom	1,r2,r2,r4
  8008cc:	010eadb4 	movhi	r4,15030
  8008d0:	10c5c032 	custom	0,r2,r2,r3
  8008d4:	2102d844 	addi	r4,r4,2913
  8008d8:	1105c0b2 	custom	2,r2,r2,r4
  8008dc:	010f4af4 	movhi	r4,15659
  8008e0:	10c5c032 	custom	0,r2,r2,r3
  8008e4:	212aaac4 	addi	r4,r4,-21845
  8008e8:	1105c072 	custom	1,r2,r2,r4
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
	    }
	    hz = (float)0.5*z-qx;
	    a  = one-qx;
	    return a - (hz - (z*r-x*y));
  8008ec:	8463c032 	custom	0,r17,r16,r17
  8008f0:	18c9c032 	custom	0,r4,r3,r3
	    hz = (float)0.5*z-qx;
  8008f4:	014fc034 	movhi	r5,16128
  8008f8:	040fe034 	movhi	r16,16256
  8008fc:	1947c032 	custom	0,r3,r3,r5
	    return a - (hz - (z*r-x*y));
  800900:	1105c032 	custom	0,r2,r2,r4
  800904:	8461c0b2 	custom	2,r16,r16,r17
	    return one - ((float)0.5*z - (z*r - x*y));
  800908:	1405c072 	custom	1,r2,r2,r16
  80090c:	10c5c0b2 	custom	2,r2,r2,r3
  800910:	00002306 	br	8009a0 <__kernel_cosf+0x144>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800914:	00ab5234 	movhi	r2,44360
	z  = x*x;
  800918:	2107c032 	custom	0,r3,r4,r4
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  80091c:	10b5d384 	addi	r2,r2,-10418
  800920:	010c43f4 	movhi	r4,12559
  800924:	1885c032 	custom	0,r2,r3,r2
  800928:	211d3d84 	addi	r4,r4,29942
  80092c:	1105c072 	custom	1,r2,r2,r4
  800930:	010d2534 	movhi	r4,13460
  800934:	10c5c032 	custom	0,r2,r2,r3
  800938:	213c9f04 	addi	r4,r4,-3460
  80093c:	1105c0b2 	custom	2,r2,r2,r4
  800940:	010df434 	movhi	r4,14288
  800944:	10c5c032 	custom	0,r2,r2,r3
  800948:	21034044 	addi	r4,r4,3329
  80094c:	1105c072 	custom	1,r2,r2,r4
  800950:	010eadb4 	movhi	r4,15030
  800954:	10c5c032 	custom	0,r2,r2,r3
  800958:	2102d844 	addi	r4,r4,2913
  80095c:	1105c0b2 	custom	2,r2,r2,r4
  800960:	014f4af4 	movhi	r5,15659
  800964:	10c5c032 	custom	0,r2,r2,r3
  800968:	296aaac4 	addi	r5,r5,-21845
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  80096c:	010fa6b4 	movhi	r4,16026
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800970:	1145c072 	custom	1,r2,r2,r5
	    return a - (hz - (z*r-x*y));
  800974:	8463c032 	custom	0,r17,r16,r17
  800978:	18cbc032 	custom	0,r5,r3,r3
	    hz = (float)0.5*z-qx;
  80097c:	01cfc034 	movhi	r7,16128
  800980:	040fe034 	movhi	r16,16256
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800984:	21266644 	addi	r4,r4,-26215
	    hz = (float)0.5*z-qx;
  800988:	19c7c032 	custom	0,r3,r3,r7
	    return a - (hz - (z*r-x*y));
  80098c:	1145c032 	custom	0,r2,r2,r5
  800990:	8461c0b2 	custom	2,r16,r16,r17
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800994:	21bfdc0e 	bge	r4,r6,800908 <__kernel_cosf+0xac>
	    return a - (hz - (z*r-x*y));
  800998:	80c7c0b2 	custom	2,r3,r16,r3
  80099c:	1885c072 	custom	1,r2,r3,r2
	}
}
  8009a0:	dfc00217 	ldw	ra,8(sp)
  8009a4:	dc400117 	ldw	r17,4(sp)
  8009a8:	dc000017 	ldw	r16,0(sp)
  8009ac:	dec00304 	addi	sp,sp,12
  8009b0:	f800283a 	ret
	    if(((int)x)==0) return one;		/* generate inexact */
  8009b4:	008fe034 	movhi	r2,16256
  8009b8:	003ff906 	br	8009a0 <__kernel_cosf+0x144>

008009bc <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
  8009bc:	deff9604 	addi	sp,sp,-424
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
  8009c0:	d8806a17 	ldw	r2,424(sp)
{
  8009c4:	dfc06915 	stw	ra,420(sp)
  8009c8:	df006815 	stw	fp,416(sp)
	jk = init_jk[prec];
  8009cc:	100690ba 	slli	r3,r2,2
  8009d0:	00802074 	movhi	r2,129
{
  8009d4:	ddc06715 	stw	r23,412(sp)
	jk = init_jk[prec];
  8009d8:	1885883a 	add	r2,r3,r2
  8009dc:	108b6217 	ldw	r2,11656(r2)
{
  8009e0:	dd806615 	stw	r22,408(sp)
  8009e4:	dd406515 	stw	r21,404(sp)
	jk = init_jk[prec];
  8009e8:	d8800315 	stw	r2,12(sp)
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
  8009ec:	38bfffc4 	addi	r2,r7,-1
{
  8009f0:	dd006415 	stw	r20,400(sp)
  8009f4:	dcc06315 	stw	r19,396(sp)
  8009f8:	dc806215 	stw	r18,392(sp)
  8009fc:	dc406115 	stw	r17,388(sp)
  800a00:	dc006015 	stw	r16,384(sp)
  800a04:	d9800f15 	stw	r6,60(sp)
  800a08:	d9c00715 	stw	r7,28(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  800a0c:	30ffff10 	cmplti	r3,r6,-4
{
  800a10:	d9000015 	stw	r4,0(sp)
  800a14:	d9400b15 	stw	r5,44(sp)
	jx =  nx-1;
  800a18:	d8800615 	stw	r2,24(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  800a1c:	1802031e 	bne	r3,zero,80122c <__kernel_rem_pio2f+0x870>
  800a20:	30bfff44 	addi	r2,r6,-3
  800a24:	10025616 	blt	r2,zero,801380 <__kernel_rem_pio2f+0x9c4>
  800a28:	1005d0fa 	srai	r2,r2,3
  800a2c:	d8800515 	stw	r2,20(sp)
	q0 =  e0-8*(jv+1);
  800a30:	10800044 	addi	r2,r2,1
  800a34:	100490fa 	slli	r2,r2,3
  800a38:	d8800c15 	stw	r2,48(sp)
  800a3c:	1009883a 	mov	r4,r2

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
  800a40:	d8c00317 	ldw	r3,12(sp)
  800a44:	d8800617 	ldw	r2,24(sp)
  800a48:	18a1883a 	add	r16,r3,r2
	q0 =  e0-8*(jv+1);
  800a4c:	d8c00f17 	ldw	r3,60(sp)
  800a50:	1907c83a 	sub	r3,r3,r4
  800a54:	d8c00215 	stw	r3,8(sp)
	j = jv-jx; m = jx+jk;
  800a58:	d8c00517 	ldw	r3,20(sp)
  800a5c:	1885c83a 	sub	r2,r3,r2
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  800a60:	80001b16 	blt	r16,zero,800ad0 <__kernel_rem_pio2f+0x114>
  800a64:	1001e60e 	bge	r2,zero,801200 <__kernel_rem_pio2f+0x844>
  800a68:	81000044 	addi	r4,r16,1
  800a6c:	2089883a 	add	r4,r4,r2
  800a70:	0100010e 	bge	zero,r4,800a78 <__kernel_rem_pio2f+0xbc>
  800a74:	0009883a 	mov	r4,zero
  800a78:	dc802404 	addi	r18,sp,144
  800a7c:	01400044 	movi	r5,1
  800a80:	9007883a 	mov	r3,r18
  800a84:	288bc83a 	sub	r5,r5,r2
  800a88:	18000015 	stw	zero,0(r3)
  800a8c:	28a7883a 	add	r19,r5,r2
  800a90:	10800044 	addi	r2,r2,1
  800a94:	18c00104 	addi	r3,r3,4
  800a98:	113ffb16 	blt	r2,r4,800a88 <__kernel_rem_pio2f+0xcc>
  800a9c:	84c00c16 	blt	r16,r19,800ad0 <__kernel_rem_pio2f+0x114>
  800aa0:	100490ba 	slli	r2,r2,2
  800aa4:	980690ba 	slli	r3,r19,2
  800aa8:	d9006b17 	ldw	r4,428(sp)
  800aac:	90e5883a 	add	r18,r18,r3
  800ab0:	20a3883a 	add	r17,r4,r2
  800ab4:	89000017 	ldw	r4,0(r17)
  800ab8:	9cc00044 	addi	r19,r19,1
  800abc:	8c400104 	addi	r17,r17,4
  800ac0:	08018cc0 	call	8018cc <__floatsisf>
  800ac4:	90800015 	stw	r2,0(r18)
  800ac8:	94800104 	addi	r18,r18,4
  800acc:	84fff90e 	bge	r16,r19,800ab4 <__kernel_rem_pio2f+0xf8>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
  800ad0:	d8800317 	ldw	r2,12(sp)
  800ad4:	10001c16 	blt	r2,zero,800b48 <__kernel_rem_pio2f+0x18c>
  800ad8:	db000617 	ldw	r12,24(sp)
  800adc:	d8c02404 	addi	r3,sp,144
  800ae0:	db400017 	ldw	r13,0(sp)
  800ae4:	601090ba 	slli	r8,r12,2
  800ae8:	da804c04 	addi	r10,sp,304
  800aec:	6013883a 	mov	r9,r12
  800af0:	41c00104 	addi	r7,r8,4
  800af4:	1a11883a 	add	r8,r3,r8
  800af8:	d8c00717 	ldw	r3,28(sp)
  800afc:	3b4f883a 	add	r7,r7,r13
  800b00:	10d7883a 	add	r11,r2,r3
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800b04:	000b883a 	mov	r5,zero
  800b08:	60000a16 	blt	r12,zero,800b34 <__kernel_rem_pio2f+0x178>
  800b0c:	4009883a 	mov	r4,r8
  800b10:	6805883a 	mov	r2,r13
  800b14:	000b883a 	mov	r5,zero
  800b18:	10c00017 	ldw	r3,0(r2)
  800b1c:	21800017 	ldw	r6,0(r4)
  800b20:	10800104 	addi	r2,r2,4
  800b24:	213fff04 	addi	r4,r4,-4
  800b28:	1987c032 	custom	0,r3,r3,r6
  800b2c:	28cbc072 	custom	1,r5,r5,r3
  800b30:	11fff91e 	bne	r2,r7,800b18 <__kernel_rem_pio2f+0x15c>
	    q[i] = fw;
  800b34:	51400015 	stw	r5,0(r10)
	for (i=0;i<=jk;i++) {
  800b38:	4a400044 	addi	r9,r9,1
  800b3c:	52800104 	addi	r10,r10,4
  800b40:	42000104 	addi	r8,r8,4
  800b44:	4affef1e 	bne	r9,r11,800b04 <__kernel_rem_pio2f+0x148>
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800b48:	dc000317 	ldw	r16,12(sp)
  800b4c:	d8c00717 	ldw	r3,28(sp)
	        switch(q0) {
  800b50:	d9000217 	ldw	r4,8(sp)
  800b54:	802890ba 	slli	r20,r16,2
  800b58:	180e90ba 	slli	r7,r3,2
  800b5c:	d8c01004 	addi	r3,sp,64
  800b60:	1d29883a 	add	r20,r3,r20
  800b64:	d8c00017 	ldw	r3,0(sp)
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800b68:	80bfffc4 	addi	r2,r16,-1
  800b6c:	100490ba 	slli	r2,r2,2
  800b70:	19ef883a 	add	r23,r3,r7
	        switch(q0) {
  800b74:	20c00060 	cmpeqi	r3,r4,1
  800b78:	d8c00d15 	stw	r3,52(sp)
  800b7c:	20c000a0 	cmpeqi	r3,r4,2
  800b80:	d8c00e15 	stw	r3,56(sp)
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800b84:	00c00204 	movi	r3,8
  800b88:	1907c83a 	sub	r3,r3,r4
  800b8c:	d8c00915 	stw	r3,36(sp)
	    ih = iq[jz-1]>>(7-q0);
  800b90:	00c001c4 	movi	r3,7
  800b94:	1907c83a 	sub	r3,r3,r4
  800b98:	d8c00a15 	stw	r3,40(sp)
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800b9c:	d8c06004 	addi	r3,sp,384
  800ba0:	1885883a 	add	r2,r3,r2
  800ba4:	dcc04c04 	addi	r19,sp,304
  800ba8:	d8800815 	stw	r2,32(sp)
  800bac:	b82b883a 	mov	r21,r23
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800bb0:	802c90ba 	slli	r22,r16,2
  800bb4:	d8806004 	addi	r2,sp,384
  800bb8:	1585883a 	add	r2,r2,r22
  800bbc:	147fec17 	ldw	r17,-80(r2)
  800bc0:	0400120e 	bge	zero,r16,800c0c <__kernel_rem_pio2f+0x250>
  800bc4:	9db9883a 	add	fp,r19,r22
  800bc8:	dc801004 	addi	r18,sp,64
	    fw    =  (float)((__int32_t)(twon8* z));
  800bcc:	010ee034 	movhi	r4,15232
  800bd0:	8909c032 	custom	0,r4,r17,r4
  800bd4:	080185c0 	call	80185c <__fixsfsi>
  800bd8:	1009883a 	mov	r4,r2
  800bdc:	08018cc0 	call	8018cc <__floatsisf>
	    iq[i] =  (__int32_t)(z-two8*fw);
  800be0:	0110e034 	movhi	r4,17280
  800be4:	1109c032 	custom	0,r4,r2,r4
  800be8:	8909c0b2 	custom	2,r4,r17,r4
	    fw    =  (float)((__int32_t)(twon8* z));
  800bec:	102f883a 	mov	r23,r2
	    iq[i] =  (__int32_t)(z-two8*fw);
  800bf0:	080185c0 	call	80185c <__fixsfsi>
	    z     =  q[j-1]+fw;
  800bf4:	e47fff17 	ldw	r17,-4(fp)
	    iq[i] =  (__int32_t)(z-two8*fw);
  800bf8:	90800015 	stw	r2,0(r18)
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800bfc:	e73fff04 	addi	fp,fp,-4
	    z     =  q[j-1]+fw;
  800c00:	bc63c072 	custom	1,r17,r23,r17
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800c04:	94800104 	addi	r18,r18,4
  800c08:	9f3ff01e 	bne	r19,fp,800bcc <__kernel_rem_pio2f+0x210>
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800c0c:	dc800217 	ldw	r18,8(sp)
  800c10:	8809883a 	mov	r4,r17
  800c14:	900b883a 	mov	r5,r18
  800c18:	08016400 	call	801640 <scalbnf>
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800c1c:	010f8034 	movhi	r4,15872
  800c20:	1109c032 	custom	0,r4,r2,r4
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800c24:	1039883a 	mov	fp,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800c28:	080156c0 	call	80156c <floorf>
  800c2c:	00d04034 	movhi	r3,16640
  800c30:	10c5c032 	custom	0,r2,r2,r3
  800c34:	e0a3c0b2 	custom	2,r17,fp,r2
	n  = (__int32_t) z;
  800c38:	8809883a 	mov	r4,r17
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800c3c:	d8800415 	stw	r2,16(sp)
	n  = (__int32_t) z;
  800c40:	080185c0 	call	80185c <__fixsfsi>
	z -= (float)n;
  800c44:	1009883a 	mov	r4,r2
	n  = (__int32_t) z;
  800c48:	102f883a 	mov	r23,r2
	z -= (float)n;
  800c4c:	08018cc0 	call	8018cc <__floatsisf>
  800c50:	100d883a 	mov	r6,r2
  800c54:	88a3c0b2 	custom	2,r17,r17,r2
	if(q0>0) {	/* need iq[jz-1] to determine n */
  800c58:	0480540e 	bge	zero,r18,800dac <__kernel_rem_pio2f+0x3f0>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800c5c:	80bfffc4 	addi	r2,r16,-1
  800c60:	100490ba 	slli	r2,r2,2
  800c64:	d8c06004 	addi	r3,sp,384
  800c68:	d9400917 	ldw	r5,36(sp)
  800c6c:	1885883a 	add	r2,r3,r2
  800c70:	10ffb017 	ldw	r3,-320(r2)
  800c74:	1949d83a 	sra	r4,r3,r5
	    iq[jz-1] -= i<<(8-q0);
  800c78:	214a983a 	sll	r5,r4,r5
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800c7c:	b92f883a 	add	r23,r23,r4
	    ih = iq[jz-1]>>(7-q0);
  800c80:	d9000a17 	ldw	r4,40(sp)
	    iq[jz-1] -= i<<(8-q0);
  800c84:	1947c83a 	sub	r3,r3,r5
  800c88:	10ffb015 	stw	r3,-320(r2)
	    ih = iq[jz-1]>>(7-q0);
  800c8c:	1909d83a 	sra	r4,r3,r4
  800c90:	d9000115 	stw	r4,4(sp)
  800c94:	2005883a 	mov	r2,r4
	if(ih>0) {	/* q > 0.5 */
  800c98:	00804d16 	blt	zero,r2,800dd0 <__kernel_rem_pio2f+0x414>
	if(z==zero) {
  800c9c:	000b883a 	mov	r5,zero
  800ca0:	8809883a 	mov	r4,r17
  800ca4:	08017340 	call	801734 <__eqsf2>
  800ca8:	1000931e 	bne	r2,zero,800ef8 <__kernel_rem_pio2f+0x53c>
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  800cac:	d8800317 	ldw	r2,12(sp)
  800cb0:	873fffc4 	addi	fp,r16,-1
  800cb4:	e0800816 	blt	fp,r2,800cd8 <__kernel_rem_pio2f+0x31c>
  800cb8:	d8801004 	addi	r2,sp,64
  800cbc:	1585883a 	add	r2,r2,r22
	    j = 0;
  800cc0:	0007883a 	mov	r3,zero
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  800cc4:	113fff17 	ldw	r4,-4(r2)
  800cc8:	10bfff04 	addi	r2,r2,-4
  800ccc:	1906b03a 	or	r3,r3,r4
  800cd0:	153ffc1e 	bne	r2,r20,800cc4 <__kernel_rem_pio2f+0x308>
	    if(j==0) { /* need recomputation */
  800cd4:	1801641e 	bne	r3,zero,801268 <__kernel_rem_pio2f+0x8ac>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800cd8:	d8800817 	ldw	r2,32(sp)
  800cdc:	10bfb017 	ldw	r2,-320(r2)
  800ce0:	1001441e 	bne	r2,zero,8011f4 <__kernel_rem_pio2f+0x838>
  800ce4:	a005883a 	mov	r2,r20
  800ce8:	07000044 	movi	fp,1
  800cec:	10fffe17 	ldw	r3,-8(r2)
  800cf0:	e7000044 	addi	fp,fp,1
  800cf4:	10bfff04 	addi	r2,r2,-4
  800cf8:	183ffc26 	beq	r3,zero,800cec <__kernel_rem_pio2f+0x330>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  800cfc:	84800044 	addi	r18,r16,1
  800d00:	8739883a 	add	fp,r16,fp
  800d04:	d8800517 	ldw	r2,20(sp)
  800d08:	9dad883a 	add	r22,r19,r22
  800d0c:	dd000115 	stw	r20,4(sp)
  800d10:	80af883a 	add	r23,r16,r2
  800d14:	d8800717 	ldw	r2,28(sp)
  800d18:	b82e90ba 	slli	r23,r23,2
  800d1c:	9029883a 	mov	r20,r18
  800d20:	80a1883a 	add	r16,r16,r2
  800d24:	d8806b17 	ldw	r2,428(sp)
  800d28:	802090ba 	slli	r16,r16,2
  800d2c:	15ef883a 	add	r23,r2,r23
  800d30:	d8802404 	addi	r2,sp,144
  800d34:	1421883a 	add	r16,r2,r16
  800d38:	b825883a 	mov	r18,r23
  800d3c:	b02f883a 	mov	r23,r22
  800d40:	802d883a 	mov	r22,r16
  800d44:	dc000617 	ldw	r16,24(sp)
		    f[jx+i] = (float) ipio2[jv+i];
  800d48:	91000117 	ldw	r4,4(r18)
  800d4c:	08018cc0 	call	8018cc <__floatsisf>
  800d50:	b0800015 	stw	r2,0(r22)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800d54:	80001316 	blt	r16,zero,800da4 <__kernel_rem_pio2f+0x3e8>
  800d58:	d8800017 	ldw	r2,0(sp)
  800d5c:	b009883a 	mov	r4,r22
  800d60:	880b883a 	mov	r5,r17
  800d64:	10c00017 	ldw	r3,0(r2)
  800d68:	21800017 	ldw	r6,0(r4)
  800d6c:	10800104 	addi	r2,r2,4
  800d70:	213fff04 	addi	r4,r4,-4
  800d74:	1987c032 	custom	0,r3,r3,r6
  800d78:	28cbc072 	custom	1,r5,r5,r3
  800d7c:	a8bff91e 	bne	r21,r2,800d64 <__kernel_rem_pio2f+0x3a8>
		    q[i] = fw;
  800d80:	b9400115 	stw	r5,4(r23)
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  800d84:	a5000044 	addi	r20,r20,1
  800d88:	94800104 	addi	r18,r18,4
  800d8c:	b5800104 	addi	r22,r22,4
  800d90:	bdc00104 	addi	r23,r23,4
  800d94:	e53fec0e 	bge	fp,r20,800d48 <__kernel_rem_pio2f+0x38c>
  800d98:	dd000117 	ldw	r20,4(sp)
  800d9c:	e021883a 	mov	r16,fp
  800da0:	003f8306 	br	800bb0 <__kernel_rem_pio2f+0x1f4>
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800da4:	880b883a 	mov	r5,r17
  800da8:	003ff506 	br	800d80 <__kernel_rem_pio2f+0x3c4>
	else if(q0==0) ih = iq[jz-1]>>8;
  800dac:	9001091e 	bne	r18,zero,8011d4 <__kernel_rem_pio2f+0x818>
  800db0:	80bfffc4 	addi	r2,r16,-1
  800db4:	100490ba 	slli	r2,r2,2
  800db8:	d8c06004 	addi	r3,sp,384
  800dbc:	1885883a 	add	r2,r3,r2
  800dc0:	10bfb017 	ldw	r2,-320(r2)
  800dc4:	1005d23a 	srai	r2,r2,8
  800dc8:	d8800115 	stw	r2,4(sp)
	if(ih>0) {	/* q > 0.5 */
  800dcc:	00bfb30e 	bge	zero,r2,800c9c <__kernel_rem_pio2f+0x2e0>
	    n += 1; carry = 0;
  800dd0:	bdc00044 	addi	r23,r23,1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800dd4:	04016c0e 	bge	zero,r16,801388 <__kernel_rem_pio2f+0x9cc>
		j = iq[i];
  800dd8:	d8c01017 	ldw	r3,64(sp)
		    if(j!=0) {
  800ddc:	1800fa1e 	bne	r3,zero,8011c8 <__kernel_rem_pio2f+0x80c>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800de0:	80800060 	cmpeqi	r2,r16,1
  800de4:	1000261e 	bne	r2,zero,800e80 <__kernel_rem_pio2f+0x4c4>
		j = iq[i];
  800de8:	d8c01117 	ldw	r3,68(sp)
  800dec:	d9401104 	addi	r5,sp,68
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800df0:	01000044 	movi	r4,1
  800df4:	20800044 	addi	r2,r4,1
  800df8:	29400104 	addi	r5,r5,4
		    if(j!=0) {
  800dfc:	1800061e 	bne	r3,zero,800e18 <__kernel_rem_pio2f+0x45c>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e00:	80801f26 	beq	r16,r2,800e80 <__kernel_rem_pio2f+0x4c4>
		j = iq[i];
  800e04:	28c00017 	ldw	r3,0(r5)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e08:	1009883a 	mov	r4,r2
  800e0c:	20800044 	addi	r2,r4,1
  800e10:	29400104 	addi	r5,r5,4
		    if(j!=0) {
  800e14:	183ffa26 	beq	r3,zero,800e00 <__kernel_rem_pio2f+0x444>
			carry = 1; iq[i] = 0x100- j;
  800e18:	200890ba 	slli	r4,r4,2
  800e1c:	01404004 	movi	r5,256
  800e20:	28c7c83a 	sub	r3,r5,r3
  800e24:	d9406004 	addi	r5,sp,384
  800e28:	2909883a 	add	r4,r5,r4
  800e2c:	20ffb015 	stw	r3,-320(r4)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e30:	1400120e 	bge	r2,r16,800e7c <__kernel_rem_pio2f+0x4c0>
		} else  iq[i] = 0xff - j;
  800e34:	100690ba 	slli	r3,r2,2
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e38:	10800044 	addi	r2,r2,1
		} else  iq[i] = 0xff - j;
  800e3c:	28c7883a 	add	r3,r5,r3
  800e40:	193fb017 	ldw	r4,-320(r3)
  800e44:	01403fc4 	movi	r5,255
  800e48:	2909c83a 	sub	r4,r5,r4
  800e4c:	193fb015 	stw	r4,-320(r3)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e50:	14000a0e 	bge	r2,r16,800e7c <__kernel_rem_pio2f+0x4c0>
  800e54:	100490ba 	slli	r2,r2,2
  800e58:	d8c01004 	addi	r3,sp,64
  800e5c:	1d89883a 	add	r4,r3,r22
  800e60:	1885883a 	add	r2,r3,r2
		} else  iq[i] = 0xff - j;
  800e64:	10c00017 	ldw	r3,0(r2)
  800e68:	01403fc4 	movi	r5,255
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e6c:	10800104 	addi	r2,r2,4
		} else  iq[i] = 0xff - j;
  800e70:	28c7c83a 	sub	r3,r5,r3
  800e74:	10ffff15 	stw	r3,-4(r2)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  800e78:	113ffa1e 	bne	r2,r4,800e64 <__kernel_rem_pio2f+0x4a8>
  800e7c:	00c00044 	movi	r3,1
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
  800e80:	d8800217 	ldw	r2,8(sp)
  800e84:	00800b0e 	bge	zero,r2,800eb4 <__kernel_rem_pio2f+0x4f8>
	        switch(q0) {
  800e88:	d8800d17 	ldw	r2,52(sp)
  800e8c:	1000df1e 	bne	r2,zero,80120c <__kernel_rem_pio2f+0x850>
  800e90:	d8800e17 	ldw	r2,56(sp)
  800e94:	10000726 	beq	r2,zero,800eb4 <__kernel_rem_pio2f+0x4f8>
	    	   iq[jz-1] &= 0x3f; break;
  800e98:	80bfffc4 	addi	r2,r16,-1
  800e9c:	100490ba 	slli	r2,r2,2
  800ea0:	d9006004 	addi	r4,sp,384
  800ea4:	2085883a 	add	r2,r4,r2
  800ea8:	113fb017 	ldw	r4,-320(r2)
  800eac:	21000fcc 	andi	r4,r4,63
  800eb0:	113fb015 	stw	r4,-320(r2)
	    if(ih==2) {
  800eb4:	d8800117 	ldw	r2,4(sp)
  800eb8:	10800098 	cmpnei	r2,r2,2
  800ebc:	103f771e 	bne	r2,zero,800c9c <__kernel_rem_pio2f+0x2e0>
		z = one - z;
  800ec0:	d8800417 	ldw	r2,16(sp)
  800ec4:	1723c0b2 	custom	2,r17,r2,fp
  800ec8:	008fe034 	movhi	r2,16256
  800ecc:	88a3c072 	custom	1,r17,r17,r2
  800ed0:	3463c072 	custom	1,r17,r6,r17
		if(carry!=0) z -= scalbnf(one,(int)q0);
  800ed4:	183f7126 	beq	r3,zero,800c9c <__kernel_rem_pio2f+0x2e0>
  800ed8:	d9400217 	ldw	r5,8(sp)
  800edc:	010fe034 	movhi	r4,16256
  800ee0:	08016400 	call	801640 <scalbnf>
  800ee4:	88a3c0b2 	custom	2,r17,r17,r2
	if(z==zero) {
  800ee8:	000b883a 	mov	r5,zero
  800eec:	8809883a 	mov	r4,r17
  800ef0:	08017340 	call	801734 <__eqsf2>
  800ef4:	103f6d26 	beq	r2,zero,800cac <__kernel_rem_pio2f+0x2f0>
    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
	    while(iq[jz]==0) { jz--; q0-=8;}
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
  800ef8:	d8800c17 	ldw	r2,48(sp)
  800efc:	d8c00f17 	ldw	r3,60(sp)
  800f00:	8809883a 	mov	r4,r17
  800f04:	10cbc83a 	sub	r5,r2,r3
  800f08:	08016400 	call	801640 <scalbnf>
	    if(z>=two8) { 
  800f0c:	0150e034 	movhi	r5,17280
  800f10:	1009883a 	mov	r4,r2
	    z = scalbnf(z,-(int)q0);
  800f14:	1023883a 	mov	r17,r2
	    if(z>=two8) { 
  800f18:	08017a40 	call	8017a4 <__gesf2>
  800f1c:	10011116 	blt	r2,zero,801364 <__kernel_rem_pio2f+0x9a8>
		fw = (float)((__int32_t)(twon8*z));
  800f20:	010ee034 	movhi	r4,15232
  800f24:	8909c032 	custom	0,r4,r17,r4
  800f28:	080185c0 	call	80185c <__fixsfsi>
  800f2c:	1009883a 	mov	r4,r2
  800f30:	08018cc0 	call	8018cc <__floatsisf>
		iq[jz] = (__int32_t)(z-two8*fw);
  800f34:	0110e034 	movhi	r4,17280
  800f38:	1109c032 	custom	0,r4,r2,r4
  800f3c:	8909c0b2 	custom	2,r4,r17,r4
		fw = (float)((__int32_t)(twon8*z));
  800f40:	1025883a 	mov	r18,r2
		jz += 1; q0 += 8;
  800f44:	87000044 	addi	fp,r16,1
		iq[jz] = (__int32_t)(z-two8*fw);
  800f48:	080185c0 	call	80185c <__fixsfsi>
		iq[jz] = (__int32_t) fw;
  800f4c:	e02090ba 	slli	r16,fp,2
		iq[jz] = (__int32_t)(z-two8*fw);
  800f50:	d8c06004 	addi	r3,sp,384
  800f54:	1d87883a 	add	r3,r3,r22
		iq[jz] = (__int32_t) fw;
  800f58:	d9406004 	addi	r5,sp,384
		iq[jz] = (__int32_t)(z-two8*fw);
  800f5c:	18bfb015 	stw	r2,-320(r3)
		iq[jz] = (__int32_t) fw;
  800f60:	9009883a 	mov	r4,r18
  800f64:	2c21883a 	add	r16,r5,r16
  800f68:	080185c0 	call	80185c <__fixsfsi>
		jz += 1; q0 += 8;
  800f6c:	d8c00217 	ldw	r3,8(sp)
		iq[jz] = (__int32_t) fw;
  800f70:	80bfb015 	stw	r2,-320(r16)
		jz += 1; q0 += 8;
  800f74:	18c00204 	addi	r3,r3,8
  800f78:	d8c00215 	stw	r3,8(sp)
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
  800f7c:	d9400217 	ldw	r5,8(sp)
  800f80:	010fe034 	movhi	r4,16256
  800f84:	08016400 	call	801640 <scalbnf>
  800f88:	102b883a 	mov	r21,r2
	for(i=jz;i>=0;i--) {
  800f8c:	e0012a16 	blt	fp,zero,801438 <__kernel_rem_pio2f+0xa7c>
  800f90:	e02090ba 	slli	r16,fp,2
  800f94:	dc404c04 	addi	r17,sp,304
  800f98:	d8801004 	addi	r2,sp,64
  800f9c:	8c25883a 	add	r18,r17,r16
  800fa0:	1427883a 	add	r19,r2,r16
  800fa4:	9029883a 	mov	r20,r18
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  800fa8:	99000017 	ldw	r4,0(r19)
	for(i=jz;i>=0;i--) {
  800fac:	a53fff04 	addi	r20,r20,-4
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  800fb0:	08018cc0 	call	8018cc <__floatsisf>
  800fb4:	1545c032 	custom	0,r2,r2,r21
  800fb8:	010ee034 	movhi	r4,15232
  800fbc:	9807883a 	mov	r3,r19
  800fc0:	a0800115 	stw	r2,4(r20)
	for(i=jz;i>=0;i--) {
  800fc4:	d8801004 	addi	r2,sp,64
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  800fc8:	a92bc032 	custom	0,r21,r21,r4
	for(i=jz;i>=0;i--) {
  800fcc:	9cffff04 	addi	r19,r19,-4
  800fd0:	10fff51e 	bne	r2,r3,800fa8 <__kernel_rem_pio2f+0x5ec>
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  800fd4:	dbc00317 	ldw	r15,12(sp)
  800fd8:	dcc03804 	addi	r19,sp,224
	for(i=jz;i>=0;i--) {
  800fdc:	980b883a 	mov	r5,r19
  800fe0:	0007883a 	mov	r3,zero
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  800fe4:	79800060 	cmpeqi	r6,r15,1
  800fe8:	79c000a0 	cmpeqi	r7,r15,2
  800fec:	7a0000e0 	cmpeqi	r8,r15,3
  800ff0:	7a800120 	cmpeqi	r10,r15,4
  800ff4:	7a400160 	cmpeqi	r9,r15,5
  800ff8:	7ac001a0 	cmpeqi	r11,r15,6
  800ffc:	7b4001e0 	cmpeqi	r13,r15,7
  801000:	7b000220 	cmpeqi	r12,r15,8
  801004:	7b800260 	cmpeqi	r14,r15,9
  801008:	00000106 	br	801010 <__kernel_rem_pio2f+0x654>
  80100c:	1025883a 	mov	r18,r2
  801010:	0005883a 	mov	r2,zero
  801014:	78004816 	blt	r15,zero,801138 <__kernel_rem_pio2f+0x77c>
  801018:	91000017 	ldw	r4,0(r18)
  80101c:	008ff274 	movhi	r2,16329
  801020:	2085c032 	custom	0,r2,r4,r2
  801024:	78004426 	beq	r15,zero,801138 <__kernel_rem_pio2f+0x77c>
  801028:	18004326 	beq	r3,zero,801138 <__kernel_rem_pio2f+0x77c>
  80102c:	91000117 	ldw	r4,4(r18)
  801030:	050e7c34 	movhi	r20,14832
  801034:	2509c032 	custom	0,r4,r4,r20
  801038:	1105c072 	custom	1,r2,r2,r4
  80103c:	30003e1e 	bne	r6,zero,801138 <__kernel_rem_pio2f+0x77c>
  801040:	19000060 	cmpeqi	r4,r3,1
  801044:	20003c1e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  801048:	91000217 	ldw	r4,8(r18)
  80104c:	050df6b4 	movhi	r20,14298
  801050:	2509c032 	custom	0,r4,r4,r20
  801054:	1105c072 	custom	1,r2,r2,r4
  801058:	3800371e 	bne	r7,zero,801138 <__kernel_rem_pio2f+0x77c>
  80105c:	190000a0 	cmpeqi	r4,r3,2
  801060:	2000351e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  801064:	91000317 	ldw	r4,12(r18)
  801068:	050ce8b4 	movhi	r20,13218
  80106c:	2509c032 	custom	0,r4,r4,r20
  801070:	1105c072 	custom	1,r2,r2,r4
  801074:	4000301e 	bne	r8,zero,801138 <__kernel_rem_pio2f+0x77c>
  801078:	190000e0 	cmpeqi	r4,r3,3
  80107c:	20002e1e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  801080:	91000417 	ldw	r4,16(r18)
  801084:	050ba134 	movhi	r20,11908
  801088:	2509c032 	custom	0,r4,r4,r20
  80108c:	1105c072 	custom	1,r2,r2,r4
  801090:	5000291e 	bne	r10,zero,801138 <__kernel_rem_pio2f+0x77c>
  801094:	19000120 	cmpeqi	r4,r3,4
  801098:	2000271e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  80109c:	91000517 	ldw	r4,20(r18)
  8010a0:	050ad434 	movhi	r20,11088
  8010a4:	2509c032 	custom	0,r4,r4,r20
  8010a8:	1105c072 	custom	1,r2,r2,r4
  8010ac:	4800221e 	bne	r9,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010b0:	19000160 	cmpeqi	r4,r3,5
  8010b4:	2000201e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010b8:	91000617 	ldw	r4,24(r18)
  8010bc:	0509f0b4 	movhi	r20,10178
  8010c0:	2509c032 	custom	0,r4,r4,r20
  8010c4:	1105c072 	custom	1,r2,r2,r4
  8010c8:	58001b1e 	bne	r11,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010cc:	190001a0 	cmpeqi	r4,r3,6
  8010d0:	2000191e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010d4:	91000717 	ldw	r4,28(r18)
  8010d8:	0508b434 	movhi	r20,8912
  8010dc:	2509c032 	custom	0,r4,r4,r20
  8010e0:	1105c072 	custom	1,r2,r2,r4
  8010e4:	6800141e 	bne	r13,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010e8:	190001e0 	cmpeqi	r4,r3,7
  8010ec:	2000121e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  8010f0:	91000817 	ldw	r4,32(r18)
  8010f4:	0507f134 	movhi	r20,8132
  8010f8:	2509c032 	custom	0,r4,r4,r20
  8010fc:	1105c072 	custom	1,r2,r2,r4
  801100:	60000d1e 	bne	r12,zero,801138 <__kernel_rem_pio2f+0x77c>
  801104:	19000220 	cmpeqi	r4,r3,8
  801108:	20000b1e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  80110c:	91000917 	ldw	r4,36(r18)
  801110:	0506f1b4 	movhi	r20,7110
  801114:	2509c032 	custom	0,r4,r4,r20
  801118:	1105c072 	custom	1,r2,r2,r4
  80111c:	7000061e 	bne	r14,zero,801138 <__kernel_rem_pio2f+0x77c>
  801120:	19000260 	cmpeqi	r4,r3,9
  801124:	2000041e 	bne	r4,zero,801138 <__kernel_rem_pio2f+0x77c>
  801128:	91000a17 	ldw	r4,40(r18)
  80112c:	0505d134 	movhi	r20,5956
  801130:	2509c032 	custom	0,r4,r4,r20
  801134:	1105c072 	custom	1,r2,r2,r4
	    fq[jz-i] = fw;
  801138:	28800015 	stw	r2,0(r5)
	for(i=jz;i>=0;i--) {
  80113c:	18c00044 	addi	r3,r3,1
  801140:	29400104 	addi	r5,r5,4
  801144:	90bfff04 	addi	r2,r18,-4
  801148:	8cbfb01e 	bne	r17,r18,80100c <__kernel_rem_pio2f+0x650>
	}

    /* compress fq[] into y[] */
	switch(prec) {
  80114c:	d8806a17 	ldw	r2,424(sp)
  801150:	108000c8 	cmpgei	r2,r2,3
  801154:	1000561e 	bne	r2,zero,8012b0 <__kernel_rem_pio2f+0x8f4>
  801158:	d8806a17 	ldw	r2,424(sp)
  80115c:	00808c16 	blt	zero,r2,801390 <__kernel_rem_pio2f+0x9d4>
  801160:	10000c1e 	bne	r2,zero,801194 <__kernel_rem_pio2f+0x7d8>
  801164:	9c21883a 	add	r16,r19,r16
  801168:	0005883a 	mov	r2,zero
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
  80116c:	81000017 	ldw	r4,0(r16)
  801170:	8007883a 	mov	r3,r16
  801174:	843fff04 	addi	r16,r16,-4
  801178:	1105c072 	custom	1,r2,r2,r4
  80117c:	98fffb1e 	bne	r19,r3,80116c <__kernel_rem_pio2f+0x7b0>
		y[0] = (ih==0)? fw: -fw; 
  801180:	d8c00117 	ldw	r3,4(sp)
  801184:	18000126 	beq	r3,zero,80118c <__kernel_rem_pio2f+0x7d0>
  801188:	10a0003c 	xorhi	r2,r2,32768
  80118c:	d8c00b17 	ldw	r3,44(sp)
  801190:	18800015 	stw	r2,0(r3)
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
		}
	}
	return n&7;
  801194:	b88001cc 	andi	r2,r23,7
}
  801198:	dfc06917 	ldw	ra,420(sp)
  80119c:	df006817 	ldw	fp,416(sp)
  8011a0:	ddc06717 	ldw	r23,412(sp)
  8011a4:	dd806617 	ldw	r22,408(sp)
  8011a8:	dd406517 	ldw	r21,404(sp)
  8011ac:	dd006417 	ldw	r20,400(sp)
  8011b0:	dcc06317 	ldw	r19,396(sp)
  8011b4:	dc806217 	ldw	r18,392(sp)
  8011b8:	dc406117 	ldw	r17,388(sp)
  8011bc:	dc006017 	ldw	r16,384(sp)
  8011c0:	dec06a04 	addi	sp,sp,424
  8011c4:	f800283a 	ret
		    if(j!=0) {
  8011c8:	00800044 	movi	r2,1
  8011cc:	0009883a 	mov	r4,zero
  8011d0:	003f1106 	br	800e18 <__kernel_rem_pio2f+0x45c>
	else if(z>=(float)0.5) ih=2;
  8011d4:	014fc034 	movhi	r5,16128
  8011d8:	8809883a 	mov	r4,r17
  8011dc:	d9800115 	stw	r6,4(sp)
  8011e0:	08017a40 	call	8017a4 <__gesf2>
  8011e4:	d9800117 	ldw	r6,4(sp)
  8011e8:	1000150e 	bge	r2,zero,801240 <__kernel_rem_pio2f+0x884>
	ih = 0;
  8011ec:	d8000115 	stw	zero,4(sp)
  8011f0:	003eaa06 	br	800c9c <__kernel_rem_pio2f+0x2e0>
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  8011f4:	84800044 	addi	r18,r16,1
  8011f8:	9039883a 	mov	fp,r18
  8011fc:	003ec106 	br	800d04 <__kernel_rem_pio2f+0x348>
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  801200:	0027883a 	mov	r19,zero
  801204:	dc802404 	addi	r18,sp,144
  801208:	003e2506 	br	800aa0 <__kernel_rem_pio2f+0xe4>
	    	   iq[jz-1] &= 0x7f; break;
  80120c:	80bfffc4 	addi	r2,r16,-1
  801210:	100490ba 	slli	r2,r2,2
  801214:	d9006004 	addi	r4,sp,384
  801218:	2085883a 	add	r2,r4,r2
  80121c:	113fb017 	ldw	r4,-320(r2)
  801220:	21001fcc 	andi	r4,r4,127
  801224:	113fb015 	stw	r4,-320(r2)
  801228:	003f2206 	br	800eb4 <__kernel_rem_pio2f+0x4f8>
  80122c:	00800204 	movi	r2,8
  801230:	d8800c15 	stw	r2,48(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  801234:	d8000515 	stw	zero,20(sp)
  801238:	1009883a 	mov	r4,r2
  80123c:	003e0006 	br	800a40 <__kernel_rem_pio2f+0x84>
	else if(z>=(float)0.5) ih=2;
  801240:	00800084 	movi	r2,2
  801244:	d8800115 	stw	r2,4(sp)
	    n += 1; carry = 0;
  801248:	bdc00044 	addi	r23,r23,1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  80124c:	043ee216 	blt	zero,r16,800dd8 <__kernel_rem_pio2f+0x41c>
		z = one - z;
  801250:	d8800417 	ldw	r2,16(sp)
  801254:	1723c0b2 	custom	2,r17,r2,fp
  801258:	008fe034 	movhi	r2,16256
  80125c:	88a3c072 	custom	1,r17,r17,r2
  801260:	3463c072 	custom	1,r17,r6,r17
		if(carry!=0) z -= scalbnf(one,(int)q0);
  801264:	003e8d06 	br	800c9c <__kernel_rem_pio2f+0x2e0>
	    jz -= 1; q0 -= 8;
  801268:	d8c00217 	ldw	r3,8(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  80126c:	e00490ba 	slli	r2,fp,2
	    jz -= 1; q0 -= 8;
  801270:	193ffe04 	addi	r4,r3,-8
	    while(iq[jz]==0) { jz--; q0-=8;}
  801274:	d8c06004 	addi	r3,sp,384
  801278:	1887883a 	add	r3,r3,r2
  80127c:	18ffb017 	ldw	r3,-320(r3)
	    jz -= 1; q0 -= 8;
  801280:	d9000215 	stw	r4,8(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  801284:	183f3d1e 	bne	r3,zero,800f7c <__kernel_rem_pio2f+0x5c0>
  801288:	d8c01004 	addi	r3,sp,64
  80128c:	1885883a 	add	r2,r3,r2
  801290:	2007883a 	mov	r3,r4
  801294:	113fff17 	ldw	r4,-4(r2)
  801298:	e73fffc4 	addi	fp,fp,-1
  80129c:	10bfff04 	addi	r2,r2,-4
  8012a0:	18fffe04 	addi	r3,r3,-8
  8012a4:	203ffb26 	beq	r4,zero,801294 <__kernel_rem_pio2f+0x8d8>
  8012a8:	d8c00215 	stw	r3,8(sp)
  8012ac:	003f3306 	br	800f7c <__kernel_rem_pio2f+0x5c0>
	switch(prec) {
  8012b0:	d8806a17 	ldw	r2,424(sp)
  8012b4:	108000e0 	cmpeqi	r2,r2,3
  8012b8:	103fb626 	beq	r2,zero,801194 <__kernel_rem_pio2f+0x7d8>
		for (i=jz;i>0;i--) {
  8012bc:	e0006926 	beq	fp,zero,801464 <__kernel_rem_pio2f+0xaa8>
  8012c0:	9c05883a 	add	r2,r19,r16
  8012c4:	10c00017 	ldw	r3,0(r2)
		    fw      = fq[i-1]+fq[i]; 
  8012c8:	113fff17 	ldw	r4,-4(r2)
		for (i=jz;i>0;i--) {
  8012cc:	10bfff04 	addi	r2,r2,-4
		    fw      = fq[i-1]+fq[i]; 
  8012d0:	1907c072 	custom	1,r3,r3,r4
		    fq[i-1] = fw;
  8012d4:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>0;i--) {
  8012d8:	98bffb1e 	bne	r19,r2,8012c8 <__kernel_rem_pio2f+0x90c>
		    fq[i]  += fq[i-1]-fw;
  8012dc:	dc403904 	addi	r17,sp,228
  8012e0:	800d883a 	mov	r6,r16
  8012e4:	000b883a 	mov	r5,zero
  8012e8:	8809883a 	mov	r4,r17
  8012ec:	0801b400 	call	801b40 <memset>
		for (i=jz;i>1;i--) {
  8012f0:	e0800088 	cmpgei	r2,fp,2
  8012f4:	10005b26 	beq	r2,zero,801464 <__kernel_rem_pio2f+0xaa8>
  8012f8:	9c21883a 	add	r16,r19,r16
  8012fc:	80c00017 	ldw	r3,0(r16)
  801300:	8005883a 	mov	r2,r16
		    fw      = fq[i-1]+fq[i]; 
  801304:	113fff17 	ldw	r4,-4(r2)
		for (i=jz;i>1;i--) {
  801308:	10bfff04 	addi	r2,r2,-4
		    fw      = fq[i-1]+fq[i]; 
  80130c:	1907c072 	custom	1,r3,r3,r4
		    fq[i-1] = fw;
  801310:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>1;i--) {
  801314:	88bffb1e 	bne	r17,r2,801304 <__kernel_rem_pio2f+0x948>
		    fq[i]  += fq[i-1]-fw;
  801318:	e1bfffc4 	addi	r6,fp,-1
  80131c:	300c90ba 	slli	r6,r6,2
  801320:	000b883a 	mov	r5,zero
  801324:	d9003a04 	addi	r4,sp,232
  801328:	0801b400 	call	801b40 <memset>
  80132c:	0005883a 	mov	r2,zero
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  801330:	80c00017 	ldw	r3,0(r16)
  801334:	843fff04 	addi	r16,r16,-4
  801338:	10c5c072 	custom	1,r2,r2,r3
  80133c:	8c3ffc1e 	bne	r17,r16,801330 <__kernel_rem_pio2f+0x974>
		if(ih==0) {
  801340:	d9400117 	ldw	r5,4(sp)
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
  801344:	d9003817 	ldw	r4,224(sp)
  801348:	d8c03917 	ldw	r3,228(sp)
		if(ih==0) {
  80134c:	2800321e 	bne	r5,zero,801418 <__kernel_rem_pio2f+0xa5c>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  801350:	d9400b17 	ldw	r5,44(sp)
  801354:	29000015 	stw	r4,0(r5)
  801358:	28c00115 	stw	r3,4(r5)
  80135c:	28800215 	stw	r2,8(r5)
  801360:	003f8c06 	br	801194 <__kernel_rem_pio2f+0x7d8>
	    } else iq[jz] = (__int32_t) z ;
  801364:	8809883a 	mov	r4,r17
  801368:	080185c0 	call	80185c <__fixsfsi>
  80136c:	d8c06004 	addi	r3,sp,384
  801370:	1d87883a 	add	r3,r3,r22
  801374:	18bfb015 	stw	r2,-320(r3)
  801378:	8039883a 	mov	fp,r16
  80137c:	003eff06 	br	800f7c <__kernel_rem_pio2f+0x5c0>
	jv = (e0-3)/8; if(jv<0) jv=0;
  801380:	30800104 	addi	r2,r6,4
  801384:	003da806 	br	800a28 <__kernel_rem_pio2f+0x6c>
	    n += 1; carry = 0;
  801388:	0007883a 	mov	r3,zero
  80138c:	003ebc06 	br	800e80 <__kernel_rem_pio2f+0x4c4>
		for (i=jz;i>=0;i--) fw += fq[i]; 
  801390:	9c21883a 	add	r16,r19,r16
		fw = 0.0;
  801394:	0005883a 	mov	r2,zero
		for (i=jz;i>=0;i--) fw += fq[i]; 
  801398:	81000017 	ldw	r4,0(r16)
  80139c:	8007883a 	mov	r3,r16
  8013a0:	843fff04 	addi	r16,r16,-4
  8013a4:	1105c072 	custom	1,r2,r2,r4
  8013a8:	98fffb1e 	bne	r19,r3,801398 <__kernel_rem_pio2f+0x9dc>
		y[0] = (ih==0)? fw: -fw; 
  8013ac:	d8c00117 	ldw	r3,4(sp)
  8013b0:	1800121e 	bne	r3,zero,8013fc <__kernel_rem_pio2f+0xa40>
  8013b4:	d9000b17 	ldw	r4,44(sp)
		fw = fq[0]-fw;
  8013b8:	d8c03817 	ldw	r3,224(sp)
		y[0] = (ih==0)? fw: -fw; 
  8013bc:	20800015 	stw	r2,0(r4)
		fw = fq[0]-fw;
  8013c0:	1885c0b2 	custom	2,r2,r3,r2
		for (i=1;i<=jz;i++) fw += fq[i];
  8013c4:	07000a0e 	bge	zero,fp,8013f0 <__kernel_rem_pio2f+0xa34>
  8013c8:	d9003904 	addi	r4,sp,228
  8013cc:	00c00044 	movi	r3,1
  8013d0:	21400017 	ldw	r5,0(r4)
  8013d4:	18c00044 	addi	r3,r3,1
  8013d8:	21000104 	addi	r4,r4,4
  8013dc:	1145c072 	custom	1,r2,r2,r5
  8013e0:	e0fffb0e 	bge	fp,r3,8013d0 <__kernel_rem_pio2f+0xa14>
		y[1] = (ih==0)? fw: -fw; 
  8013e4:	d8c00117 	ldw	r3,4(sp)
  8013e8:	18000126 	beq	r3,zero,8013f0 <__kernel_rem_pio2f+0xa34>
  8013ec:	10a0003c 	xorhi	r2,r2,32768
  8013f0:	d8c00b17 	ldw	r3,44(sp)
  8013f4:	18800115 	stw	r2,4(r3)
		break;
  8013f8:	003f6606 	br	801194 <__kernel_rem_pio2f+0x7d8>
		y[0] = (ih==0)? fw: -fw; 
  8013fc:	d9400b17 	ldw	r5,44(sp)
		fw = fq[0]-fw;
  801400:	d8c03817 	ldw	r3,224(sp)
		y[0] = (ih==0)? fw: -fw; 
  801404:	1120003c 	xorhi	r4,r2,32768
  801408:	29000015 	stw	r4,0(r5)
		fw = fq[0]-fw;
  80140c:	1885c0b2 	custom	2,r2,r3,r2
		for (i=1;i<=jz;i++) fw += fq[i];
  801410:	073fed16 	blt	zero,fp,8013c8 <__kernel_rem_pio2f+0xa0c>
  801414:	003ff506 	br	8013ec <__kernel_rem_pio2f+0xa30>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  801418:	d9400b17 	ldw	r5,44(sp)
  80141c:	2120003c 	xorhi	r4,r4,32768
  801420:	18e0003c 	xorhi	r3,r3,32768
  801424:	10a0003c 	xorhi	r2,r2,32768
  801428:	29000015 	stw	r4,0(r5)
  80142c:	28c00115 	stw	r3,4(r5)
  801430:	28800215 	stw	r2,8(r5)
  801434:	003f5706 	br	801194 <__kernel_rem_pio2f+0x7d8>
	switch(prec) {
  801438:	d8806a17 	ldw	r2,424(sp)
  80143c:	108000c8 	cmpgei	r2,r2,3
  801440:	1000051e 	bne	r2,zero,801458 <__kernel_rem_pio2f+0xa9c>
  801444:	d8806a17 	ldw	r2,424(sp)
  801448:	00800816 	blt	zero,r2,80146c <__kernel_rem_pio2f+0xab0>
  80144c:	103f511e 	bne	r2,zero,801194 <__kernel_rem_pio2f+0x7d8>
  801450:	0005883a 	mov	r2,zero
  801454:	003f4a06 	br	801180 <__kernel_rem_pio2f+0x7c4>
  801458:	d8806a17 	ldw	r2,424(sp)
  80145c:	108000e0 	cmpeqi	r2,r2,3
  801460:	103f4c26 	beq	r2,zero,801194 <__kernel_rem_pio2f+0x7d8>
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  801464:	0005883a 	mov	r2,zero
  801468:	003fb506 	br	801340 <__kernel_rem_pio2f+0x984>
		fw = 0.0;
  80146c:	0005883a 	mov	r2,zero
  801470:	003fce06 	br	8013ac <__kernel_rem_pio2f+0x9f0>

00801474 <__kernel_sinf>:
#endif
{
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
  801474:	00a00034 	movhi	r2,32768
{
  801478:	defffc04 	addi	sp,sp,-16
	ix &= 0x7fffffff;			/* high word of x */
  80147c:	10bfffc4 	addi	r2,r2,-1
{
  801480:	dc800215 	stw	r18,8(sp)
  801484:	dc400115 	stw	r17,4(sp)
  801488:	dc000015 	stw	r16,0(sp)
  80148c:	dfc00315 	stw	ra,12(sp)
	ix &= 0x7fffffff;			/* high word of x */
  801490:	1104703a 	and	r2,r2,r4
	if(ix<0x32000000)			/* |x| < 2**-27 */
  801494:	00cc8034 	movhi	r3,12800
{
  801498:	2021883a 	mov	r16,r4
  80149c:	2825883a 	mov	r18,r5
  8014a0:	3023883a 	mov	r17,r6
	if(ix<0x32000000)			/* |x| < 2**-27 */
  8014a4:	10c0020e 	bge	r2,r3,8014b0 <__kernel_sinf+0x3c>
	   {if((int)x==0) return x;}		/* generate inexact */
  8014a8:	080185c0 	call	80185c <__fixsfsi>
  8014ac:	10002d26 	beq	r2,zero,801564 <__kernel_sinf+0xf0>
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  8014b0:	00cbcbf4 	movhi	r3,12079
	z	=  x*x;
  8014b4:	8409c032 	custom	0,r4,r16,r16
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  8014b8:	18f274c4 	addi	r3,r3,-13869
  8014bc:	008cb5f4 	movhi	r2,13015
  8014c0:	108bcd04 	addi	r2,r2,12084
  8014c4:	20c7c032 	custom	0,r3,r4,r3
  8014c8:	1887c0b2 	custom	2,r3,r3,r2
  8014cc:	008d8e74 	movhi	r2,13881
  8014d0:	10bbc6c4 	addi	r2,r2,-4325
  8014d4:	1907c032 	custom	0,r3,r3,r4
  8014d8:	1887c072 	custom	1,r3,r3,r2
  8014dc:	008e5434 	movhi	r2,14672
  8014e0:	10834044 	addi	r2,r2,3329
  8014e4:	1907c032 	custom	0,r3,r3,r4
  8014e8:	1887c0b2 	custom	2,r3,r3,r2
  8014ec:	014f0274 	movhi	r5,15369
  8014f0:	1907c032 	custom	0,r3,r3,r4
  8014f4:	29622244 	addi	r5,r5,-30583
	v	=  z*x;
  8014f8:	8105c032 	custom	0,r2,r16,r4
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  8014fc:	1947c072 	custom	1,r3,r3,r5
	if(iy==0) return x+v*(S1+z*r);
  801500:	88001126 	beq	r17,zero,801548 <__kernel_sinf+0xd4>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
  801504:	018fc034 	movhi	r6,16128
  801508:	014f8af4 	movhi	r5,15915
  80150c:	10c7c032 	custom	0,r3,r2,r3
  801510:	918dc032 	custom	0,r6,r18,r6
  801514:	296aaac4 	addi	r5,r5,-21845
  801518:	1145c032 	custom	0,r2,r2,r5
  80151c:	1987c0b2 	custom	2,r3,r3,r6
  801520:	84a1c072 	custom	1,r16,r16,r18
  801524:	1907c032 	custom	0,r3,r3,r4
  801528:	80a1c0b2 	custom	2,r16,r16,r2
  80152c:	1c05c072 	custom	1,r2,r3,r16
}
  801530:	dfc00317 	ldw	ra,12(sp)
  801534:	dc800217 	ldw	r18,8(sp)
  801538:	dc400117 	ldw	r17,4(sp)
  80153c:	dc000017 	ldw	r16,0(sp)
  801540:	dec00404 	addi	sp,sp,16
  801544:	f800283a 	ret
	if(iy==0) return x+v*(S1+z*r);
  801548:	014f8af4 	movhi	r5,15915
  80154c:	20c9c032 	custom	0,r4,r4,r3
  801550:	296aaac4 	addi	r5,r5,-21845
  801554:	2149c0b2 	custom	2,r4,r4,r5
  801558:	2089c032 	custom	0,r4,r4,r2
  80155c:	2405c072 	custom	1,r2,r4,r16
  801560:	003ff306 	br	801530 <__kernel_sinf+0xbc>
	   {if((int)x==0) return x;}		/* generate inexact */
  801564:	8005883a 	mov	r2,r16
  801568:	003ff106 	br	801530 <__kernel_sinf+0xbc>

0080156c <floorf>:
#endif
{
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
  80156c:	00e00034 	movhi	r3,32768
{
  801570:	defffb04 	addi	sp,sp,-20
	ix = (i0&0x7fffffff);
  801574:	18ffffc4 	addi	r3,r3,-1
{
  801578:	dc000015 	stw	r16,0(sp)
	ix = (i0&0x7fffffff);
  80157c:	1920703a 	and	r16,r3,r4
{
  801580:	dc800215 	stw	r18,8(sp)
	j0 = (ix>>23)-0x7f;
  801584:	8024d5fa 	srli	r18,r16,23
{
  801588:	dc400115 	stw	r17,4(sp)
  80158c:	dfc00415 	stw	ra,16(sp)
	j0 = (ix>>23)-0x7f;
  801590:	94bfe044 	addi	r18,r18,-127
{
  801594:	dcc00315 	stw	r19,12(sp)
	if(j0<23) {
  801598:	908005c8 	cmpgei	r2,r18,23
{
  80159c:	2023883a 	mov	r17,r4
	if(j0<23) {
  8015a0:	1000201e 	bne	r2,zero,801624 <floorf+0xb8>
  8015a4:	2027883a 	mov	r19,r4
	    if(j0<0) { 	/* raise inexact if x != 0 */
  8015a8:	90001716 	blt	r18,zero,801608 <floorf+0x9c>
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
			{ i0=0xbf800000;}
		}
	    } else {
		i = (0x007fffff)>>j0;
  8015ac:	00802034 	movhi	r2,128
  8015b0:	10bfffc4 	addi	r2,r2,-1
  8015b4:	14a1d83a 	sra	r16,r2,r18
		if((i0&i)==0) return x; /* x is integral */
  8015b8:	2404703a 	and	r2,r4,r16
  8015bc:	10000a26 	beq	r2,zero,8015e8 <floorf+0x7c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
  8015c0:	017c52b4 	movhi	r5,61770
  8015c4:	297cb284 	addi	r5,r5,-3382
  8015c8:	08017a40 	call	8017a4 <__gesf2>
  8015cc:	0080060e 	bge	zero,r2,8015e8 <floorf+0x7c>
		    if(i0<0) i0 += (0x00800000)>>j0;
  8015d0:	8800030e 	bge	r17,zero,8015e0 <floorf+0x74>
  8015d4:	00802034 	movhi	r2,128
  8015d8:	14a5d83a 	sra	r18,r2,r18
  8015dc:	9467883a 	add	r19,r18,r17
		    i0 &= (~i);
  8015e0:	0404303a 	nor	r2,zero,r16
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
  8015e4:	14e2703a 	and	r17,r2,r19
		if((i0&i)==0) return x; /* x is integral */
  8015e8:	8805883a 	mov	r2,r17
	return x;
}
  8015ec:	dfc00417 	ldw	ra,16(sp)
  8015f0:	dcc00317 	ldw	r19,12(sp)
  8015f4:	dc800217 	ldw	r18,8(sp)
  8015f8:	dc400117 	ldw	r17,4(sp)
  8015fc:	dc000017 	ldw	r16,0(sp)
  801600:	dec00504 	addi	sp,sp,20
  801604:	f800283a 	ret
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
  801608:	017c52b4 	movhi	r5,61770
  80160c:	297cb284 	addi	r5,r5,-3382
  801610:	08017a40 	call	8017a4 <__gesf2>
  801614:	00bff40e 	bge	zero,r2,8015e8 <floorf+0x7c>
		    if(i0>=0) {i0=0;} 
  801618:	88000616 	blt	r17,zero,801634 <floorf+0xc8>
  80161c:	0023883a 	mov	r17,zero
	return x;
  801620:	003ff106 	br	8015e8 <floorf+0x7c>
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
  801624:	009fe034 	movhi	r2,32640
  801628:	80bfef36 	bltu	r16,r2,8015e8 <floorf+0x7c>
  80162c:	2105c072 	custom	1,r2,r4,r4
  801630:	003fee06 	br	8015ec <floorf+0x80>
		    else if(!FLT_UWORD_IS_ZERO(ix))
  801634:	803fec26 	beq	r16,zero,8015e8 <floorf+0x7c>
  801638:	046fe034 	movhi	r17,49024
  80163c:	003fea06 	br	8015e8 <floorf+0x7c>

00801640 <scalbnf>:
{
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
  801640:	00a00034 	movhi	r2,32768
  801644:	10bfffc4 	addi	r2,r2,-1
  801648:	1104703a 	and	r2,r2,r4
	GET_FLOAT_WORD(ix,x);
  80164c:	2007883a 	mov	r3,r4
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
  801650:	10001626 	beq	r2,zero,8016ac <scalbnf+0x6c>
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
  801654:	019fe034 	movhi	r6,32640
  801658:	1180122e 	bgeu	r2,r6,8016a4 <scalbnf+0x64>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
  80165c:	219fe02c 	andhi	r6,r4,32640
  801660:	3000141e 	bne	r6,zero,8016b4 <scalbnf+0x74>
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
  801664:	00bffff4 	movhi	r2,65535
	    x *= two25;
  801668:	00d30034 	movhi	r3,19456
            if (n< -50000) return tiny*x; 	/*underflow*/
  80166c:	108f2c04 	addi	r2,r2,15536
	    x *= two25;
  801670:	20c9c032 	custom	0,r4,r4,r3
            if (n< -50000) return tiny*x; 	/*underflow*/
  801674:	28802216 	blt	r5,r2,801700 <scalbnf+0xc0>
	    k = ((ix&0x7f800000)>>23) - 25; 
  801678:	2005d5fa 	srai	r2,r4,23
	    GET_FLOAT_WORD(ix,x);
  80167c:	2007883a 	mov	r3,r4
	    k = ((ix&0x7f800000)>>23) - 25; 
  801680:	10803fcc 	andi	r2,r2,255
  801684:	10bff9c4 	addi	r2,r2,-25
        }
        k = k+n; 
  801688:	1145883a 	add	r2,r2,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  80168c:	11803fd0 	cmplti	r6,r2,255
  801690:	30000c1e 	bne	r6,zero,8016c4 <scalbnf+0x84>
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
  801694:	009fe034 	movhi	r2,32640
  801698:	2000050e 	bge	r4,zero,8016b0 <scalbnf+0x70>
  80169c:	00bfe034 	movhi	r2,65408
  8016a0:	f800283a 	ret
	    return x+x;		/* NaN or Inf */
  8016a4:	2105c072 	custom	1,r2,r4,r4
  8016a8:	f800283a 	ret
	    return x;
  8016ac:	2005883a 	mov	r2,r4
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
        return x*twom25;
}
  8016b0:	f800283a 	ret
        k = hx>>23;		/* extract exponent */
  8016b4:	1004d5fa 	srli	r2,r2,23
        k = k+n; 
  8016b8:	1145883a 	add	r2,r2,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  8016bc:	11803fd0 	cmplti	r6,r2,255
  8016c0:	303ff426 	beq	r6,zero,801694 <scalbnf+0x54>
        if (k > 0) 				/* normal result */
  8016c4:	00800816 	blt	zero,r2,8016e8 <scalbnf+0xa8>
        if (k < FLT_SMALLEST_EXP) {
  8016c8:	11bffa88 	cmpgei	r6,r2,-22
  8016cc:	3000101e 	bne	r6,zero,801710 <scalbnf+0xd0>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
  8016d0:	00b0d414 	movui	r2,50000
  8016d4:	117fef16 	blt	r2,r5,801694 <scalbnf+0x54>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
  8016d8:	0005883a 	mov	r2,zero
  8016dc:	203ff40e 	bge	r4,zero,8016b0 <scalbnf+0x70>
  8016e0:	00a00034 	movhi	r2,32768
  8016e4:	f800283a 	ret
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
  8016e8:	100495fa 	slli	r2,r2,23
  8016ec:	01202034 	movhi	r4,32896
  8016f0:	213fffc4 	addi	r4,r4,-1
  8016f4:	1906703a 	and	r3,r3,r4
  8016f8:	1884b03a 	or	r2,r3,r2
  8016fc:	f800283a 	ret
            if (n< -50000) return tiny*x; 	/*underflow*/
  801700:	008368b4 	movhi	r2,3490
  801704:	10909804 	addi	r2,r2,16992
  801708:	2085c032 	custom	0,r2,r4,r2
  80170c:	f800283a 	ret
        k += 25;				/* subnormal result */
  801710:	10800644 	addi	r2,r2,25
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
  801714:	100495fa 	slli	r2,r2,23
  801718:	01202034 	movhi	r4,32896
  80171c:	213fffc4 	addi	r4,r4,-1
  801720:	1906703a 	and	r3,r3,r4
  801724:	10c4b03a 	or	r2,r2,r3
        return x*twom25;
  801728:	00ccc034 	movhi	r3,13056
  80172c:	10c5c032 	custom	0,r2,r2,r3
  801730:	f800283a 	ret

00801734 <__eqsf2>:
  801734:	200cd5fa 	srli	r6,r4,23
  801738:	2806d5fa 	srli	r3,r5,23
  80173c:	00802034 	movhi	r2,128
  801740:	31803fcc 	andi	r6,r6,255
  801744:	10bfffc4 	addi	r2,r2,-1
  801748:	31c03fd8 	cmpnei	r7,r6,255
  80174c:	2010d7fa 	srli	r8,r4,31
  801750:	2812d7fa 	srli	r9,r5,31
  801754:	1108703a 	and	r4,r2,r4
  801758:	18c03fcc 	andi	r3,r3,255
  80175c:	1144703a 	and	r2,r2,r5
  801760:	38000626 	beq	r7,zero,80177c <__eqsf2+0x48>
  801764:	19403fe0 	cmpeqi	r5,r3,255
  801768:	2800021e 	bne	r5,zero,801774 <__eqsf2+0x40>
  80176c:	30c0011e 	bne	r6,r3,801774 <__eqsf2+0x40>
  801770:	20800626 	beq	r4,r2,80178c <__eqsf2+0x58>
  801774:	00800044 	movi	r2,1
  801778:	f800283a 	ret
  80177c:	203ffd1e 	bne	r4,zero,801774 <__eqsf2+0x40>
  801780:	18c03fd8 	cmpnei	r3,r3,255
  801784:	183ffb1e 	bne	r3,zero,801774 <__eqsf2+0x40>
  801788:	103ffa1e 	bne	r2,zero,801774 <__eqsf2+0x40>
  80178c:	42400326 	beq	r8,r9,80179c <__eqsf2+0x68>
  801790:	303ff81e 	bne	r6,zero,801774 <__eqsf2+0x40>
  801794:	2004c03a 	cmpne	r2,r4,zero
  801798:	f800283a 	ret
  80179c:	0005883a 	mov	r2,zero
  8017a0:	f800283a 	ret

008017a4 <__gesf2>:
  8017a4:	200cd5fa 	srli	r6,r4,23
  8017a8:	280ed5fa 	srli	r7,r5,23
  8017ac:	00c02034 	movhi	r3,128
  8017b0:	31803fcc 	andi	r6,r6,255
  8017b4:	18ffffc4 	addi	r3,r3,-1
  8017b8:	32003fd8 	cmpnei	r8,r6,255
  8017bc:	2012d7fa 	srli	r9,r4,31
  8017c0:	2804d7fa 	srli	r2,r5,31
  8017c4:	1908703a 	and	r4,r3,r4
  8017c8:	1946703a 	and	r3,r3,r5
  8017cc:	39403fcc 	andi	r5,r7,255
  8017d0:	40000826 	beq	r8,zero,8017f4 <__gesf2+0x50>
  8017d4:	29c03fd8 	cmpnei	r7,r5,255
  8017d8:	38000926 	beq	r7,zero,801800 <__gesf2+0x5c>
  8017dc:	3000121e 	bne	r6,zero,801828 <__gesf2+0x84>
  8017e0:	28000e1e 	bne	r5,zero,80181c <__gesf2+0x78>
  8017e4:	18000d1e 	bne	r3,zero,80181c <__gesf2+0x78>
  8017e8:	2000081e 	bne	r4,zero,80180c <__gesf2+0x68>
  8017ec:	0005883a 	mov	r2,zero
  8017f0:	f800283a 	ret
  8017f4:	2000171e 	bne	r4,zero,801854 <__gesf2+0xb0>
  8017f8:	29c03fe0 	cmpeqi	r7,r5,255
  8017fc:	38000a26 	beq	r7,zero,801828 <__gesf2+0x84>
  801800:	1800141e 	bne	r3,zero,801854 <__gesf2+0xb0>
  801804:	30000526 	beq	r6,zero,80181c <__gesf2+0x78>
  801808:	48800a26 	beq	r9,r2,801834 <__gesf2+0x90>
  80180c:	00800044 	movi	r2,1
  801810:	48000426 	beq	r9,zero,801824 <__gesf2+0x80>
  801814:	00bfffc4 	movi	r2,-1
  801818:	f800283a 	ret
  80181c:	203ffa1e 	bne	r4,zero,801808 <__gesf2+0x64>
  801820:	103ffc26 	beq	r2,zero,801814 <__gesf2+0x70>
  801824:	f800283a 	ret
  801828:	283ff71e 	bne	r5,zero,801808 <__gesf2+0x64>
  80182c:	183ff61e 	bne	r3,zero,801808 <__gesf2+0x64>
  801830:	003ff606 	br	80180c <__gesf2+0x68>
  801834:	29800416 	blt	r5,r6,801848 <__gesf2+0xa4>
  801838:	317ff916 	blt	r6,r5,801820 <__gesf2+0x7c>
  80183c:	19000236 	bltu	r3,r4,801848 <__gesf2+0xa4>
  801840:	20ffea2e 	bgeu	r4,r3,8017ec <__gesf2+0x48>
  801844:	003ff606 	br	801820 <__gesf2+0x7c>
  801848:	103ff21e 	bne	r2,zero,801814 <__gesf2+0x70>
  80184c:	00800044 	movi	r2,1
  801850:	f800283a 	ret
  801854:	00bfff84 	movi	r2,-2
  801858:	f800283a 	ret

0080185c <__fixsfsi>:
  80185c:	200ad5fa 	srli	r5,r4,23
  801860:	00c02034 	movhi	r3,128
  801864:	18ffffc4 	addi	r3,r3,-1
  801868:	29403fcc 	andi	r5,r5,255
  80186c:	29801fd0 	cmplti	r6,r5,127
  801870:	200ed7fa 	srli	r7,r4,31
  801874:	1906703a 	and	r3,r3,r4
  801878:	3000061e 	bne	r6,zero,801894 <__fixsfsi+0x38>
  80187c:	28802790 	cmplti	r2,r5,158
  801880:	1000061e 	bne	r2,zero,80189c <__fixsfsi+0x40>
  801884:	00a00034 	movhi	r2,32768
  801888:	10bfffc4 	addi	r2,r2,-1
  80188c:	3885883a 	add	r2,r7,r2
  801890:	f800283a 	ret
  801894:	0005883a 	mov	r2,zero
  801898:	f800283a 	ret
  80189c:	28802590 	cmplti	r2,r5,150
  8018a0:	18c02034 	orhi	r3,r3,128
  8018a4:	1000051e 	bne	r2,zero,8018bc <__fixsfsi+0x60>
  8018a8:	28bfda84 	addi	r2,r5,-150
  8018ac:	1884983a 	sll	r2,r3,r2
  8018b0:	383ff926 	beq	r7,zero,801898 <__fixsfsi+0x3c>
  8018b4:	0085c83a 	sub	r2,zero,r2
  8018b8:	f800283a 	ret
  8018bc:	00802584 	movi	r2,150
  8018c0:	1145c83a 	sub	r2,r2,r5
  8018c4:	1884d83a 	srl	r2,r3,r2
  8018c8:	003ff906 	br	8018b0 <__fixsfsi+0x54>

008018cc <__floatsisf>:
  8018cc:	defffd04 	addi	sp,sp,-12
  8018d0:	dfc00215 	stw	ra,8(sp)
  8018d4:	dc400115 	stw	r17,4(sp)
  8018d8:	dc000015 	stw	r16,0(sp)
  8018dc:	20001226 	beq	r4,zero,801928 <__floatsisf+0x5c>
  8018e0:	2022d7fa 	srli	r17,r4,31
  8018e4:	2021883a 	mov	r16,r4
  8018e8:	20003816 	blt	r4,zero,8019cc <__floatsisf+0x100>
  8018ec:	8009883a 	mov	r4,r16
  8018f0:	0801aec0 	call	801aec <__clzsi2>
  8018f4:	1009883a 	mov	r4,r2
  8018f8:	00802784 	movi	r2,158
  8018fc:	1105c83a 	sub	r2,r2,r4
  801900:	10c025c8 	cmpgei	r3,r2,151
  801904:	1800151e 	bne	r3,zero,80195c <__floatsisf+0x90>
  801908:	20c00248 	cmpgei	r3,r4,9
  80190c:	18003126 	beq	r3,zero,8019d4 <__floatsisf+0x108>
  801910:	213ffe04 	addi	r4,r4,-8
  801914:	8120983a 	sll	r16,r16,r4
  801918:	00c02034 	movhi	r3,128
  80191c:	18ffffc4 	addi	r3,r3,-1
  801920:	80e0703a 	and	r16,r16,r3
  801924:	00000306 	br	801934 <__floatsisf+0x68>
  801928:	0023883a 	mov	r17,zero
  80192c:	0005883a 	mov	r2,zero
  801930:	0021883a 	mov	r16,zero
  801934:	10803fcc 	andi	r2,r2,255
  801938:	100495fa 	slli	r2,r2,23
  80193c:	882297fa 	slli	r17,r17,31
  801940:	1404b03a 	or	r2,r2,r16
  801944:	1444b03a 	or	r2,r2,r17
  801948:	dfc00217 	ldw	ra,8(sp)
  80194c:	dc400117 	ldw	r17,4(sp)
  801950:	dc000017 	ldw	r16,0(sp)
  801954:	dec00304 	addi	sp,sp,12
  801958:	f800283a 	ret
  80195c:	10c02690 	cmplti	r3,r2,154
  801960:	1800071e 	bne	r3,zero,801980 <__floatsisf+0xb4>
  801964:	20c006c4 	addi	r3,r4,27
  801968:	01400144 	movi	r5,5
  80196c:	80c6983a 	sll	r3,r16,r3
  801970:	290bc83a 	sub	r5,r5,r4
  801974:	814ad83a 	srl	r5,r16,r5
  801978:	1806c03a 	cmpne	r3,r3,zero
  80197c:	28e0b03a 	or	r16,r5,r3
  801980:	20c00188 	cmpgei	r3,r4,6
  801984:	1800171e 	bne	r3,zero,8019e4 <__floatsisf+0x118>
  801988:	00ff0034 	movhi	r3,64512
  80198c:	18ffffc4 	addi	r3,r3,-1
  801990:	818001cc 	andi	r6,r16,7
  801994:	80ca703a 	and	r5,r16,r3
  801998:	30000926 	beq	r6,zero,8019c0 <__floatsisf+0xf4>
  80199c:	818003cc 	andi	r6,r16,15
  8019a0:	31800120 	cmpeqi	r6,r6,4
  8019a4:	3000061e 	bne	r6,zero,8019c0 <__floatsisf+0xf4>
  8019a8:	29400104 	addi	r5,r5,4
  8019ac:	2981002c 	andhi	r6,r5,1024
  8019b0:	30000326 	beq	r6,zero,8019c0 <__floatsisf+0xf4>
  8019b4:	28ca703a 	and	r5,r5,r3
  8019b8:	00c027c4 	movi	r3,159
  8019bc:	1905c83a 	sub	r2,r3,r4
  8019c0:	282091ba 	slli	r16,r5,6
  8019c4:	8020d27a 	srli	r16,r16,9
  8019c8:	003fda06 	br	801934 <__floatsisf+0x68>
  8019cc:	0121c83a 	sub	r16,zero,r4
  8019d0:	003fc606 	br	8018ec <__floatsisf+0x20>
  8019d4:	01002034 	movhi	r4,128
  8019d8:	213fffc4 	addi	r4,r4,-1
  8019dc:	8120703a 	and	r16,r16,r4
  8019e0:	003fd406 	br	801934 <__floatsisf+0x68>
  8019e4:	20fffec4 	addi	r3,r4,-5
  8019e8:	80e0983a 	sll	r16,r16,r3
  8019ec:	003fe606 	br	801988 <__floatsisf+0xbc>

008019f0 <__extendsfdf2>:
  8019f0:	200ad5fa 	srli	r5,r4,23
  8019f4:	defffd04 	addi	sp,sp,-12
  8019f8:	dc000015 	stw	r16,0(sp)
  8019fc:	29403fcc 	andi	r5,r5,255
  801a00:	04002034 	movhi	r16,128
  801a04:	28800044 	addi	r2,r5,1
  801a08:	dc400115 	stw	r17,4(sp)
  801a0c:	843fffc4 	addi	r16,r16,-1
  801a10:	dfc00215 	stw	ra,8(sp)
  801a14:	10803f8c 	andi	r2,r2,254
  801a18:	2022d7fa 	srli	r17,r4,31
  801a1c:	8120703a 	and	r16,r16,r4
  801a20:	10000d26 	beq	r2,zero,801a58 <__extendsfdf2+0x68>
  801a24:	8008d0fa 	srli	r4,r16,3
  801a28:	8020977a 	slli	r16,r16,29
  801a2c:	28c0e004 	addi	r3,r5,896
  801a30:	180a953a 	slli	r5,r3,20
  801a34:	880697fa 	slli	r3,r17,31
  801a38:	8005883a 	mov	r2,r16
  801a3c:	290ab03a 	or	r5,r5,r4
  801a40:	28c6b03a 	or	r3,r5,r3
  801a44:	dfc00217 	ldw	ra,8(sp)
  801a48:	dc400117 	ldw	r17,4(sp)
  801a4c:	dc000017 	ldw	r16,0(sp)
  801a50:	dec00304 	addi	sp,sp,12
  801a54:	f800283a 	ret
  801a58:	2800111e 	bne	r5,zero,801aa0 <__extendsfdf2+0xb0>
  801a5c:	80001926 	beq	r16,zero,801ac4 <__extendsfdf2+0xd4>
  801a60:	8009883a 	mov	r4,r16
  801a64:	0801aec0 	call	801aec <__clzsi2>
  801a68:	10c002c8 	cmpgei	r3,r2,11
  801a6c:	18001b1e 	bne	r3,zero,801adc <__extendsfdf2+0xec>
  801a70:	010002c4 	movi	r4,11
  801a74:	2089c83a 	sub	r4,r4,r2
  801a78:	10c00544 	addi	r3,r2,21
  801a7c:	810ad83a 	srl	r5,r16,r4
  801a80:	80e0983a 	sll	r16,r16,r3
  801a84:	01000434 	movhi	r4,16
  801a88:	00c0e244 	movi	r3,905
  801a8c:	213fffc4 	addi	r4,r4,-1
  801a90:	1887c83a 	sub	r3,r3,r2
  801a94:	2908703a 	and	r4,r5,r4
  801a98:	18c1ffcc 	andi	r3,r3,2047
  801a9c:	003fe406 	br	801a30 <__extendsfdf2+0x40>
  801aa0:	80000b26 	beq	r16,zero,801ad0 <__extendsfdf2+0xe0>
  801aa4:	800ad0fa 	srli	r5,r16,3
  801aa8:	00800434 	movhi	r2,16
  801aac:	10bfffc4 	addi	r2,r2,-1
  801ab0:	29000234 	orhi	r4,r5,8
  801ab4:	8020977a 	slli	r16,r16,29
  801ab8:	2088703a 	and	r4,r4,r2
  801abc:	00c1ffc4 	movi	r3,2047
  801ac0:	003fdb06 	br	801a30 <__extendsfdf2+0x40>
  801ac4:	0007883a 	mov	r3,zero
  801ac8:	0009883a 	mov	r4,zero
  801acc:	003fd806 	br	801a30 <__extendsfdf2+0x40>
  801ad0:	00c1ffc4 	movi	r3,2047
  801ad4:	0009883a 	mov	r4,zero
  801ad8:	003fd506 	br	801a30 <__extendsfdf2+0x40>
  801adc:	113ffd44 	addi	r4,r2,-11
  801ae0:	810a983a 	sll	r5,r16,r4
  801ae4:	0021883a 	mov	r16,zero
  801ae8:	003fe606 	br	801a84 <__extendsfdf2+0x94>

00801aec <__clzsi2>:
  801aec:	00bfffd4 	movui	r2,65535
  801af0:	11000436 	bltu	r2,r4,801b04 <__clzsi2+0x18>
  801af4:	20804030 	cmpltui	r2,r4,256
  801af8:	10000e26 	beq	r2,zero,801b34 <__clzsi2+0x48>
  801afc:	01400804 	movi	r5,32
  801b00:	00000406 	br	801b14 <__clzsi2+0x28>
  801b04:	00804034 	movhi	r2,256
  801b08:	20800736 	bltu	r4,r2,801b28 <__clzsi2+0x3c>
  801b0c:	2008d63a 	srli	r4,r4,24
  801b10:	01400204 	movi	r5,8
  801b14:	00c02074 	movhi	r3,129
  801b18:	20c7883a 	add	r3,r4,r3
  801b1c:	188b6503 	ldbu	r2,11668(r3)
  801b20:	2885c83a 	sub	r2,r5,r2
  801b24:	f800283a 	ret
  801b28:	2008d43a 	srli	r4,r4,16
  801b2c:	01400404 	movi	r5,16
  801b30:	003ff806 	br	801b14 <__clzsi2+0x28>
  801b34:	2008d23a 	srli	r4,r4,8
  801b38:	01400604 	movi	r5,24
  801b3c:	003ff506 	br	801b14 <__clzsi2+0x28>

00801b40 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
  801b40:	20c000cc 	andi	r3,r4,3
{
  801b44:	2005883a 	mov	r2,r4
  while (UNALIGNED (s))
  801b48:	18003a26 	beq	r3,zero,801c34 <memset+0xf4>
    {
      if (n--)
  801b4c:	31ffffc4 	addi	r7,r6,-1
  801b50:	30003726 	beq	r6,zero,801c30 <memset+0xf0>
        *s++ = (char) c;
  801b54:	2811883a 	mov	r8,r5
  char *s = (char *) m;
  801b58:	2007883a 	mov	r3,r4
  801b5c:	00000306 	br	801b6c <memset+0x2c>
      if (n--)
  801b60:	39ffffc4 	addi	r7,r7,-1
  801b64:	39bfffe0 	cmpeqi	r6,r7,-1
  801b68:	3000311e 	bne	r6,zero,801c30 <memset+0xf0>
        *s++ = (char) c;
  801b6c:	18c00044 	addi	r3,r3,1
  while (UNALIGNED (s))
  801b70:	198000cc 	andi	r6,r3,3
        *s++ = (char) c;
  801b74:	1a3fffc5 	stb	r8,-1(r3)
  while (UNALIGNED (s))
  801b78:	303ff91e 	bne	r6,zero,801b60 <memset+0x20>
      else
        return m;
    }

  if (!TOO_SMALL (n))
  801b7c:	39000130 	cmpltui	r4,r7,4
  801b80:	2000231e 	bne	r4,zero,801c10 <memset+0xd0>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
  801b84:	29003fcc 	andi	r4,r5,255
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
  801b88:	200c923a 	slli	r6,r4,8
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
  801b8c:	3a000430 	cmpltui	r8,r7,16
      buffer = (d << 8) | d;
  801b90:	3108b03a 	or	r4,r6,r4
      buffer |= (buffer << 16);
  801b94:	200c943a 	slli	r6,r4,16
  801b98:	310cb03a 	or	r6,r6,r4
      while (n >= LBLOCKSIZE*4)
  801b9c:	40000e1e 	bne	r8,zero,801bd8 <memset+0x98>
  801ba0:	393ffc04 	addi	r4,r7,-16
  801ba4:	2008d13a 	srli	r4,r4,4
  801ba8:	21000044 	addi	r4,r4,1
  801bac:	2008913a 	slli	r4,r4,4
  801bb0:	1909883a 	add	r4,r3,r4
        {
          *aligned_addr++ = buffer;
  801bb4:	19800015 	stw	r6,0(r3)
          *aligned_addr++ = buffer;
  801bb8:	19800115 	stw	r6,4(r3)
          *aligned_addr++ = buffer;
  801bbc:	19800215 	stw	r6,8(r3)
          *aligned_addr++ = buffer;
  801bc0:	19800315 	stw	r6,12(r3)
  801bc4:	18c00404 	addi	r3,r3,16
      while (n >= LBLOCKSIZE*4)
  801bc8:	20fffa1e 	bne	r4,r3,801bb4 <memset+0x74>
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
  801bcc:	3900030c 	andi	r4,r7,12
          n -= 4*LBLOCKSIZE;
  801bd0:	39c003cc 	andi	r7,r7,15
      while (n >= LBLOCKSIZE)
  801bd4:	20000e26 	beq	r4,zero,801c10 <memset+0xd0>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
  801bd8:	393fff04 	addi	r4,r7,-4
          *aligned_addr++ = buffer;
  801bdc:	19800015 	stw	r6,0(r3)
      while (n >= LBLOCKSIZE)
  801be0:	22000130 	cmpltui	r8,r4,4
  801be4:	4000051e 	bne	r8,zero,801bfc <memset+0xbc>
          n -= LBLOCKSIZE;
  801be8:	3a3ffe04 	addi	r8,r7,-8
          *aligned_addr++ = buffer;
  801bec:	19800115 	stw	r6,4(r3)
      while (n >= LBLOCKSIZE)
  801bf0:	42000130 	cmpltui	r8,r8,4
  801bf4:	4000011e 	bne	r8,zero,801bfc <memset+0xbc>
          *aligned_addr++ = buffer;
  801bf8:	19800215 	stw	r6,8(r3)
  801bfc:	2008d0ba 	srli	r4,r4,2
          n -= LBLOCKSIZE;
  801c00:	39c000cc 	andi	r7,r7,3
          *aligned_addr++ = buffer;
  801c04:	21000044 	addi	r4,r4,1
  801c08:	200890ba 	slli	r4,r4,2
  801c0c:	1907883a 	add	r3,r3,r4
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
  801c10:	38000726 	beq	r7,zero,801c30 <memset+0xf0>
    *s++ = (char) c;
  801c14:	19400005 	stb	r5,0(r3)
  while (n--)
  801c18:	39000058 	cmpnei	r4,r7,1
  801c1c:	20000426 	beq	r4,zero,801c30 <memset+0xf0>
    *s++ = (char) c;
  801c20:	19400045 	stb	r5,1(r3)
  while (n--)
  801c24:	39c000a0 	cmpeqi	r7,r7,2
  801c28:	3800011e 	bne	r7,zero,801c30 <memset+0xf0>
    *s++ = (char) c;
  801c2c:	19400085 	stb	r5,2(r3)

  return m;
}
  801c30:	f800283a 	ret
  char *s = (char *) m;
  801c34:	2007883a 	mov	r3,r4
  while (UNALIGNED (s))
  801c38:	300f883a 	mov	r7,r6
  801c3c:	003fcf06 	br	801b7c <memset+0x3c>

00801c40 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
  801c40:	defffd04 	addi	sp,sp,-12
  801c44:	2805883a 	mov	r2,r5
  801c48:	dfc00015 	stw	ra,0(sp)
  801c4c:	d9800115 	stw	r6,4(sp)
  801c50:	d9c00215 	stw	r7,8(sp)
  va_start (ap, fmt);
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
  801c54:	21400217 	ldw	r5,8(r4)
  801c58:	d9c00104 	addi	r7,sp,4
  801c5c:	100d883a 	mov	r6,r2
  801c60:	0801ec80 	call	801ec8 <___vfprintf_internal_r>
  va_end (ap);
  return ret;
}
  801c64:	dfc00017 	ldw	ra,0(sp)
  801c68:	dec00304 	addi	sp,sp,12
  801c6c:	f800283a 	ret

00801c70 <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
  801c70:	defffc04 	addi	sp,sp,-16
  801c74:	dfc00015 	stw	ra,0(sp)
  801c78:	d9400115 	stw	r5,4(sp)
  801c7c:	d9800215 	stw	r6,8(sp)
  801c80:	d9c00315 	stw	r7,12(sp)
  va_start (ap, fmt);
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
  801c84:	d0a00917 	ldw	r2,-32732(gp)
  801c88:	200b883a 	mov	r5,r4
  801c8c:	d9800104 	addi	r6,sp,4
  801c90:	11000217 	ldw	r4,8(r2)
  801c94:	0803e600 	call	803e60 <__vfprintf_internal>
  va_end (ap);
  return ret;
}
  801c98:	dfc00017 	ldw	ra,0(sp)
  801c9c:	dec00404 	addi	sp,sp,16
  801ca0:	f800283a 	ret

00801ca4 <_puts_r>:
 */

int
_puts_r (struct _reent *ptr,
       const char * s)
{
  801ca4:	defff504 	addi	sp,sp,-44
  801ca8:	dc000815 	stw	r16,32(sp)
  801cac:	2021883a 	mov	r16,r4
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
  801cb0:	2809883a 	mov	r4,r5
{
  801cb4:	dc400915 	stw	r17,36(sp)
  801cb8:	dfc00a15 	stw	ra,40(sp)
  801cbc:	2823883a 	mov	r17,r5
  size_t c = strlen (s);
  801cc0:	0801e300 	call	801e30 <strlen>

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  801cc4:	11000044 	addi	r4,r2,1
  iov[0].iov_len = c;
  801cc8:	d8800515 	stw	r2,20(sp)
  iov[1].iov_len = 1;
  801ccc:	00800044 	movi	r2,1
  iov[1].iov_base = "\n";
  801cd0:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  801cd4:	d8800715 	stw	r2,28(sp)
  uio.uio_iov = &iov[0];
  801cd8:	d8800404 	addi	r2,sp,16
  iov[1].iov_base = "\n";
  801cdc:	18ca7204 	addi	r3,r3,10696
  uio.uio_iov = &iov[0];
  801ce0:	d8800115 	stw	r2,4(sp)
  uio.uio_iovcnt = 2;
  801ce4:	00800084 	movi	r2,2
  iov[0].iov_base = s;
  801ce8:	dc400415 	stw	r17,16(sp)
  iov[1].iov_base = "\n";
  801cec:	d8c00615 	stw	r3,24(sp)
  uio.uio_resid = c + 1;
  801cf0:	d9000315 	stw	r4,12(sp)
  uio.uio_iovcnt = 2;
  801cf4:	d8800215 	stw	r2,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  801cf8:	81400217 	ldw	r5,8(r16)
  CHECK_INIT (ptr, fp);
  801cfc:	80000226 	beq	r16,zero,801d08 <_puts_r+0x64>
  801d00:	80800e17 	ldw	r2,56(r16)
  801d04:	10001326 	beq	r2,zero,801d54 <_puts_r+0xb0>
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  801d08:	2880030b 	ldhu	r2,12(r5)
  801d0c:	10c8000c 	andi	r3,r2,8192
  801d10:	1800061e 	bne	r3,zero,801d2c <_puts_r+0x88>
  _newlib_flockfile_start (fp);
  801d14:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  801d18:	0137ffc4 	movi	r4,-8193
  801d1c:	10880014 	ori	r2,r2,8192
  801d20:	1906703a 	and	r3,r3,r4
  801d24:	2880030d 	sth	r2,12(r5)
  801d28:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  801d2c:	d9800104 	addi	r6,sp,4
  801d30:	8009883a 	mov	r4,r16
  801d34:	08066940 	call	806694 <__sfvwrite_r>
  801d38:	10000b1e 	bne	r2,zero,801d68 <_puts_r+0xc4>
  801d3c:	00800284 	movi	r2,10

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
  801d40:	dfc00a17 	ldw	ra,40(sp)
  801d44:	dc400917 	ldw	r17,36(sp)
  801d48:	dc000817 	ldw	r16,32(sp)
  801d4c:	dec00b04 	addi	sp,sp,44
  801d50:	f800283a 	ret
  CHECK_INIT (ptr, fp);
  801d54:	8009883a 	mov	r4,r16
  801d58:	d9400015 	stw	r5,0(sp)
  801d5c:	08060e80 	call	8060e8 <__sinit>
  801d60:	d9400017 	ldw	r5,0(sp)
  801d64:	003fe806 	br	801d08 <_puts_r+0x64>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  801d68:	00bfffc4 	movi	r2,-1
  return result;
  801d6c:	003ff406 	br	801d40 <_puts_r+0x9c>

00801d70 <puts>:

#ifndef _REENT_ONLY

int
puts (char const * s)
{
  801d70:	defff504 	addi	sp,sp,-44
  801d74:	dc000915 	stw	r16,36(sp)
  801d78:	dfc00a15 	stw	ra,40(sp)
  801d7c:	2021883a 	mov	r16,r4
  size_t c = strlen (s);
  801d80:	0801e300 	call	801e30 <strlen>
  uio.uio_resid = c + 1;
  801d84:	11400044 	addi	r5,r2,1
  iov[0].iov_len = c;
  801d88:	d8800615 	stw	r2,24(sp)
  iov[1].iov_len = 1;
  801d8c:	00800044 	movi	r2,1
  return _puts_r (_REENT, s);
  801d90:	d1200917 	ldw	r4,-32732(gp)
  iov[1].iov_base = "\n";
  801d94:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  801d98:	d8800815 	stw	r2,32(sp)
  uio.uio_iov = &iov[0];
  801d9c:	d8800504 	addi	r2,sp,20
  iov[1].iov_base = "\n";
  801da0:	18ca7204 	addi	r3,r3,10696
  uio.uio_iov = &iov[0];
  801da4:	d8800215 	stw	r2,8(sp)
  uio.uio_iovcnt = 2;
  801da8:	00800084 	movi	r2,2
  uio.uio_resid = c + 1;
  801dac:	d9400415 	stw	r5,16(sp)
  iov[0].iov_base = s;
  801db0:	dc000515 	stw	r16,20(sp)
  iov[1].iov_base = "\n";
  801db4:	d8c00715 	stw	r3,28(sp)
  uio.uio_iovcnt = 2;
  801db8:	d8800315 	stw	r2,12(sp)
  fp = _stdout_r (ptr);
  801dbc:	21400217 	ldw	r5,8(r4)
  CHECK_INIT (ptr, fp);
  801dc0:	20000226 	beq	r4,zero,801dcc <puts+0x5c>
  801dc4:	20800e17 	ldw	r2,56(r4)
  801dc8:	10001126 	beq	r2,zero,801e10 <puts+0xa0>
  ORIENT (fp, -1);
  801dcc:	2880030b 	ldhu	r2,12(r5)
  801dd0:	10c8000c 	andi	r3,r2,8192
  801dd4:	1800061e 	bne	r3,zero,801df0 <puts+0x80>
  _newlib_flockfile_start (fp);
  801dd8:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  801ddc:	01b7ffc4 	movi	r6,-8193
  801de0:	10880014 	ori	r2,r2,8192
  801de4:	1986703a 	and	r3,r3,r6
  801de8:	2880030d 	sth	r2,12(r5)
  801dec:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  801df0:	d9800204 	addi	r6,sp,8
  801df4:	08066940 	call	806694 <__sfvwrite_r>
  801df8:	10000b1e 	bne	r2,zero,801e28 <puts+0xb8>
  801dfc:	00800284 	movi	r2,10
}
  801e00:	dfc00a17 	ldw	ra,40(sp)
  801e04:	dc000917 	ldw	r16,36(sp)
  801e08:	dec00b04 	addi	sp,sp,44
  801e0c:	f800283a 	ret
  801e10:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  801e14:	d9000015 	stw	r4,0(sp)
  801e18:	08060e80 	call	8060e8 <__sinit>
  801e1c:	d9400117 	ldw	r5,4(sp)
  801e20:	d9000017 	ldw	r4,0(sp)
  801e24:	003fe906 	br	801dcc <puts+0x5c>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  801e28:	00bfffc4 	movi	r2,-1
  return _puts_r (_REENT, s);
  801e2c:	003ff406 	br	801e00 <puts+0x90>

00801e30 <strlen>:

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
  801e30:	208000cc 	andi	r2,r4,3
  801e34:	10000926 	beq	r2,zero,801e5c <strlen+0x2c>
  801e38:	2005883a 	mov	r2,r4
  801e3c:	00000306 	br	801e4c <strlen+0x1c>
    {
      if (!*str)
	return str - start;
      str++;
  801e40:	10800044 	addi	r2,r2,1
  while (UNALIGNED (str))
  801e44:	10c000cc 	andi	r3,r2,3
  801e48:	18000526 	beq	r3,zero,801e60 <strlen+0x30>
      if (!*str)
  801e4c:	10c00007 	ldb	r3,0(r2)
  801e50:	183ffb1e 	bne	r3,zero,801e40 <strlen+0x10>

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
    str++;
  return str - start;
  801e54:	1105c83a 	sub	r2,r2,r4
}
  801e58:	f800283a 	ret
  while (UNALIGNED (str))
  801e5c:	2005883a 	mov	r2,r4
  while (!DETECTNULL (*aligned_addr))
  801e60:	11400017 	ldw	r5,0(r2)
  801e64:	01ffbff4 	movhi	r7,65279
  801e68:	39ffbfc4 	addi	r7,r7,-257
  801e6c:	29c7883a 	add	r3,r5,r7
  801e70:	01a02074 	movhi	r6,32897
  801e74:	014a303a 	nor	r5,zero,r5
  801e78:	1946703a 	and	r3,r3,r5
  801e7c:	31a02004 	addi	r6,r6,-32640
  801e80:	1986703a 	and	r3,r3,r6
  801e84:	1800071e 	bne	r3,zero,801ea4 <strlen+0x74>
  801e88:	11400117 	ldw	r5,4(r2)
    aligned_addr++;
  801e8c:	10800104 	addi	r2,r2,4
  while (!DETECTNULL (*aligned_addr))
  801e90:	29c7883a 	add	r3,r5,r7
  801e94:	014a303a 	nor	r5,zero,r5
  801e98:	1946703a 	and	r3,r3,r5
  801e9c:	1986703a 	and	r3,r3,r6
  801ea0:	183ff926 	beq	r3,zero,801e88 <strlen+0x58>
  while (*str)
  801ea4:	10c00007 	ldb	r3,0(r2)
  801ea8:	183fea26 	beq	r3,zero,801e54 <strlen+0x24>
  801eac:	10c00047 	ldb	r3,1(r2)
    str++;
  801eb0:	10800044 	addi	r2,r2,1
  while (*str)
  801eb4:	183fe726 	beq	r3,zero,801e54 <strlen+0x24>
  801eb8:	10c00047 	ldb	r3,1(r2)
    str++;
  801ebc:	10800044 	addi	r2,r2,1
  while (*str)
  801ec0:	183ffa1e 	bne	r3,zero,801eac <strlen+0x7c>
  801ec4:	003fe306 	br	801e54 <strlen+0x24>

00801ec8 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
  801ec8:	deffbf04 	addi	sp,sp,-260
  801ecc:	dfc04015 	stw	ra,256(sp)
  801ed0:	dd803d15 	stw	r22,244(sp)
  801ed4:	dcc03a15 	stw	r19,232(sp)
  801ed8:	dc803915 	stw	r18,228(sp)
  801edc:	2027883a 	mov	r19,r4
  801ee0:	2825883a 	mov	r18,r5
  801ee4:	302d883a 	mov	r22,r6
  801ee8:	d9c00615 	stw	r7,24(sp)
  801eec:	df003f15 	stw	fp,252(sp)
  801ef0:	ddc03e15 	stw	r23,248(sp)
  801ef4:	dd403c15 	stw	r21,240(sp)
  801ef8:	dd003b15 	stw	r20,236(sp)
  801efc:	dc403815 	stw	r17,224(sp)
  801f00:	dc003715 	stw	r16,220(sp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
  801f04:	0806ccc0 	call	806ccc <_localeconv_r>
  801f08:	10800017 	ldw	r2,0(r2)
	size_t decp_len = strlen (decimal_point);
  801f0c:	1009883a 	mov	r4,r2
	char *decimal_point = _localeconv_r (data)->decimal_point;
  801f10:	d8800d15 	stw	r2,52(sp)
	size_t decp_len = strlen (decimal_point);
  801f14:	0801e300 	call	801e30 <strlen>
  801f18:	d8800b15 	stw	r2,44(sp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
  801f1c:	98000226 	beq	r19,zero,801f28 <___vfprintf_internal_r+0x60>
  801f20:	98800e17 	ldw	r2,56(r19)
  801f24:	10020f26 	beq	r2,zero,802764 <___vfprintf_internal_r+0x89c>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
  801f28:	9080030b 	ldhu	r2,12(r18)
  801f2c:	10c8000c 	andi	r3,r2,8192
  801f30:	1800061e 	bne	r3,zero,801f4c <___vfprintf_internal_r+0x84>
	_newlib_flockfile_start (fp);
  801f34:	90c01917 	ldw	r3,100(r18)
	ORIENT(fp, -1);
  801f38:	0137ffc4 	movi	r4,-8193
  801f3c:	10880014 	ori	r2,r2,8192
  801f40:	1906703a 	and	r3,r3,r4
  801f44:	9080030d 	sth	r2,12(r18)
  801f48:	90c01915 	stw	r3,100(r18)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
  801f4c:	10c0020c 	andi	r3,r2,8
  801f50:	1800f426 	beq	r3,zero,802324 <___vfprintf_internal_r+0x45c>
  801f54:	90c00417 	ldw	r3,16(r18)
  801f58:	1800f226 	beq	r3,zero,802324 <___vfprintf_internal_r+0x45c>
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  801f5c:	1080068c 	andi	r2,r2,26
  801f60:	10800298 	cmpnei	r2,r2,10
  801f64:	1000f726 	beq	r2,zero,802344 <___vfprintf_internal_r+0x47c>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
  801f68:	d8802704 	addi	r2,sp,156
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
  801f6c:	b02f883a 	mov	r23,r22
	uio.uio_iov = iovp = iov;
  801f70:	d8801a15 	stw	r2,104(sp)
	uio.uio_resid = 0;
  801f74:	d8001c15 	stw	zero,112(sp)
	uio.uio_iovcnt = 0;
  801f78:	d8001b15 	stw	zero,108(sp)
	int ndig = 0;		/* actual number of digits returned by cvt */
  801f7c:	d8000815 	stw	zero,32(sp)
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
  801f80:	d8000915 	stw	zero,36(sp)
  801f84:	d8000a15 	stw	zero,40(sp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
  801f88:	d8000c15 	stw	zero,48(sp)
	int expsize = 0;	/* character count for expstr */
  801f8c:	d8001015 	stw	zero,64(sp)
	ret = 0;
  801f90:	d8000515 	stw	zero,20(sp)
			PRINT (cp, m);
  801f94:	102d883a 	mov	r22,r2
                while (*fmt != '\0' && *fmt != '%')
  801f98:	b8800007 	ldb	r2,0(r23)
  801f9c:	1000cf26 	beq	r2,zero,8022dc <___vfprintf_internal_r+0x414>
  801fa0:	b821883a 	mov	r16,r23
  801fa4:	00000306 	br	801fb4 <___vfprintf_internal_r+0xec>
  801fa8:	80800047 	ldb	r2,1(r16)
                    fmt += 1;
  801fac:	84000044 	addi	r16,r16,1
                while (*fmt != '\0' && *fmt != '%')
  801fb0:	10011a26 	beq	r2,zero,80241c <___vfprintf_internal_r+0x554>
  801fb4:	10c00958 	cmpnei	r3,r2,37
  801fb8:	183ffb1e 	bne	r3,zero,801fa8 <___vfprintf_internal_r+0xe0>
		if ((m = fmt - cp) != 0) {
  801fbc:	85e3c83a 	sub	r17,r16,r23
  801fc0:	85c1181e 	bne	r16,r23,802424 <___vfprintf_internal_r+0x55c>
#else
                if (*fmt == '\0')
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
  801fc4:	82c00047 	ldb	r11,1(r16)
  801fc8:	85c00044 	addi	r23,r16,1
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
  801fcc:	0009883a 	mov	r4,zero
		prec = -1;
  801fd0:	023fffc4 	movi	r8,-1
		width = 0;
  801fd4:	0021883a 	mov	r16,zero
		flags = 0;
  801fd8:	0019883a 	mov	r12,zero
rflag:		ch = *fmt++;
  801fdc:	bdc00044 	addi	r23,r23,1
  801fe0:	5839883a 	mov	fp,r11
reswitch:	switch (ch) {
  801fe4:	e0bff804 	addi	r2,fp,-32
  801fe8:	10c01668 	cmpgeui	r3,r2,89
  801fec:	18006c1e 	bne	r3,zero,8021a0 <___vfprintf_internal_r+0x2d8>
  801ff0:	100490ba 	slli	r2,r2,2
  801ff4:	00c02034 	movhi	r3,128
  801ff8:	10c7883a 	add	r3,r2,r3
  801ffc:	18880117 	ldw	r2,8196(r3)
  802000:	1000683a 	jmp	r2
  802004:	00802b20 	cmpeqi	r2,zero,172
  802008:	008021a0 	cmpeqi	r2,zero,134
  80200c:	008021a0 	cmpeqi	r2,zero,134
  802010:	00802b14 	movui	r2,172
  802014:	008021a0 	cmpeqi	r2,zero,134
  802018:	008021a0 	cmpeqi	r2,zero,134
  80201c:	008021a0 	cmpeqi	r2,zero,134
  802020:	008021a0 	cmpeqi	r2,zero,134
  802024:	008021a0 	cmpeqi	r2,zero,134
  802028:	008021a0 	cmpeqi	r2,zero,134
  80202c:	00802aec 	andhi	r2,zero,171
  802030:	00802ae0 	cmpeqi	r2,zero,171
  802034:	008021a0 	cmpeqi	r2,zero,134
  802038:	00802ac8 	cmpgei	r2,zero,171
  80203c:	00802a7c 	xorhi	r2,zero,169
  802040:	008021a0 	cmpeqi	r2,zero,134
  802044:	00802a70 	cmpltui	r2,zero,169
  802048:	00802168 	cmpgeui	r2,zero,133
  80204c:	00802168 	cmpgeui	r2,zero,133
  802050:	00802168 	cmpgeui	r2,zero,133
  802054:	00802168 	cmpgeui	r2,zero,133
  802058:	00802168 	cmpgeui	r2,zero,133
  80205c:	00802168 	cmpgeui	r2,zero,133
  802060:	00802168 	cmpgeui	r2,zero,133
  802064:	00802168 	cmpgeui	r2,zero,133
  802068:	00802168 	cmpgeui	r2,zero,133
  80206c:	008021a0 	cmpeqi	r2,zero,134
  802070:	008021a0 	cmpeqi	r2,zero,134
  802074:	008021a0 	cmpeqi	r2,zero,134
  802078:	008021a0 	cmpeqi	r2,zero,134
  80207c:	008021a0 	cmpeqi	r2,zero,134
  802080:	008021a0 	cmpeqi	r2,zero,134
  802084:	008021a0 	cmpeqi	r2,zero,134
  802088:	008021a0 	cmpeqi	r2,zero,134
  80208c:	008021a0 	cmpeqi	r2,zero,134
  802090:	008021a0 	cmpeqi	r2,zero,134
  802094:	008029b8 	rdprs	r2,zero,166
  802098:	00802540 	call	80254 <__alt_mem_sdram-0x77fdac>
  80209c:	008021a0 	cmpeqi	r2,zero,134
  8020a0:	00802540 	call	80254 <__alt_mem_sdram-0x77fdac>
  8020a4:	008021a0 	cmpeqi	r2,zero,134
  8020a8:	008021a0 	cmpeqi	r2,zero,134
  8020ac:	008021a0 	cmpeqi	r2,zero,134
  8020b0:	008021a0 	cmpeqi	r2,zero,134
  8020b4:	00802880 	call	80288 <__alt_mem_sdram-0x77fd78>
  8020b8:	008021a0 	cmpeqi	r2,zero,134
  8020bc:	008021a0 	cmpeqi	r2,zero,134
  8020c0:	008023f4 	movhi	r2,143
  8020c4:	008021a0 	cmpeqi	r2,zero,134
  8020c8:	008021a0 	cmpeqi	r2,zero,134
  8020cc:	008021a0 	cmpeqi	r2,zero,134
  8020d0:	008021a0 	cmpeqi	r2,zero,134
  8020d4:	008021a0 	cmpeqi	r2,zero,134
  8020d8:	0080238c 	andi	r2,zero,142
  8020dc:	008021a0 	cmpeqi	r2,zero,134
  8020e0:	008021a0 	cmpeqi	r2,zero,134
  8020e4:	00802838 	rdprs	r2,zero,160
  8020e8:	008021a0 	cmpeqi	r2,zero,134
  8020ec:	008021a0 	cmpeqi	r2,zero,134
  8020f0:	008021a0 	cmpeqi	r2,zero,134
  8020f4:	008021a0 	cmpeqi	r2,zero,134
  8020f8:	008021a0 	cmpeqi	r2,zero,134
  8020fc:	008021a0 	cmpeqi	r2,zero,134
  802100:	008021a0 	cmpeqi	r2,zero,134
  802104:	008021a0 	cmpeqi	r2,zero,134
  802108:	008021a0 	cmpeqi	r2,zero,134
  80210c:	008021a0 	cmpeqi	r2,zero,134
  802110:	00802810 	cmplti	r2,zero,160
  802114:	00802770 	cmpltui	r2,zero,157
  802118:	00802540 	call	80254 <__alt_mem_sdram-0x77fdac>
  80211c:	00802540 	call	80254 <__alt_mem_sdram-0x77fdac>
  802120:	00802540 	call	80254 <__alt_mem_sdram-0x77fdac>
  802124:	00802804 	movi	r2,160
  802128:	00802770 	cmpltui	r2,zero,157
  80212c:	008021a0 	cmpeqi	r2,zero,134
  802130:	008021a0 	cmpeqi	r2,zero,134
  802134:	008029a4 	muli	r2,zero,166
  802138:	008021a0 	cmpeqi	r2,zero,134
  80213c:	0080296c 	andhi	r2,zero,165
  802140:	008023f8 	rdprs	r2,zero,143
  802144:	00802934 	movhi	r2,164
  802148:	00802928 	cmpgeui	r2,zero,164
  80214c:	008021a0 	cmpeqi	r2,zero,134
  802150:	008028d0 	cmplti	r2,zero,163
  802154:	008021a0 	cmpeqi	r2,zero,134
  802158:	00802390 	cmplti	r2,zero,142
  80215c:	008021a0 	cmpeqi	r2,zero,134
  802160:	008021a0 	cmpeqi	r2,zero,134
  802164:	0080288c 	andi	r2,zero,162
#endif
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
  802168:	0021883a 	mov	r16,zero
  80216c:	e0fff404 	addi	r3,fp,-48
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
  802170:	800490ba 	slli	r2,r16,2
				ch = *fmt++;
  802174:	bf000007 	ldb	fp,0(r23)
  802178:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  80217c:	1421883a 	add	r16,r2,r16
  802180:	8421883a 	add	r16,r16,r16
  802184:	1c21883a 	add	r16,r3,r16
			} while (is_digit (ch));
  802188:	e0fff404 	addi	r3,fp,-48
  80218c:	188002b0 	cmpltui	r2,r3,10
  802190:	103ff71e 	bne	r2,zero,802170 <___vfprintf_internal_r+0x2a8>
reswitch:	switch (ch) {
  802194:	e0bff804 	addi	r2,fp,-32
  802198:	10c01668 	cmpgeui	r3,r2,89
  80219c:	183f9426 	beq	r3,zero,801ff0 <___vfprintf_internal_r+0x128>
  8021a0:	d9001345 	stb	r4,77(sp)

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
  8021a4:	e0004d26 	beq	fp,zero,8022dc <___vfprintf_internal_r+0x414>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
  8021a8:	df001d05 	stb	fp,116(sp)
			size = 1;
			sign = '\0';
  8021ac:	d8001345 	stb	zero,77(sp)
			break;
  8021b0:	05000044 	movi	r20,1
			size = 1;
  8021b4:	05400044 	movi	r21,1
			cp = buf;
  8021b8:	dc401d04 	addi	r17,sp,116
		dprec = 0;
  8021bc:	db000415 	stw	r12,16(sp)
  8021c0:	0011883a 	mov	r8,zero
  8021c4:	d8000715 	stw	zero,28(sp)
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
  8021c8:	d8800417 	ldw	r2,16(sp)
  8021cc:	1380008c 	andi	r14,r2,2
  8021d0:	70000126 	beq	r14,zero,8021d8 <___vfprintf_internal_r+0x310>
			realsz+= 2;
  8021d4:	a5000084 	addi	r20,r20,2

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8021d8:	d8800417 	ldw	r2,16(sp)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
  8021dc:	d8c01c17 	ldw	r3,112(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8021e0:	1340210c 	andi	r13,r2,132
  8021e4:	6800021e 	bne	r13,zero,8021f0 <___vfprintf_internal_r+0x328>
			PAD (width - realsz, blanks);
  8021e8:	850fc83a 	sub	r7,r16,r20
  8021ec:	01c36d16 	blt	zero,r7,802fa4 <___vfprintf_internal_r+0x10dc>
		if (sign)
  8021f0:	d8801347 	ldb	r2,77(sp)
  8021f4:	10000c26 	beq	r2,zero,802228 <___vfprintf_internal_r+0x360>
			PRINT (&sign, 1);
  8021f8:	d8801b17 	ldw	r2,108(sp)
  8021fc:	d9001344 	addi	r4,sp,77
  802200:	18c00044 	addi	r3,r3,1
  802204:	10800044 	addi	r2,r2,1
  802208:	b1000015 	stw	r4,0(r22)
  80220c:	01000044 	movi	r4,1
  802210:	d8801b15 	stw	r2,108(sp)
  802214:	b1000115 	stw	r4,4(r22)
  802218:	d8c01c15 	stw	r3,112(sp)
  80221c:	10800208 	cmpgei	r2,r2,8
  802220:	1003a11e 	bne	r2,zero,8030a8 <___vfprintf_internal_r+0x11e0>
  802224:	b5800204 	addi	r22,r22,8
		if (flags & HEXPREFIX)
  802228:	70000c26 	beq	r14,zero,80225c <___vfprintf_internal_r+0x394>
			PRINT (ox, 2);
  80222c:	d8801b17 	ldw	r2,108(sp)
  802230:	d9001384 	addi	r4,sp,78
  802234:	18c00084 	addi	r3,r3,2
  802238:	10800044 	addi	r2,r2,1
  80223c:	b1000015 	stw	r4,0(r22)
  802240:	01000084 	movi	r4,2
  802244:	d8801b15 	stw	r2,108(sp)
  802248:	b1000115 	stw	r4,4(r22)
  80224c:	d8c01c15 	stw	r3,112(sp)
  802250:	10800208 	cmpgei	r2,r2,8
  802254:	1003a21e 	bne	r2,zero,8030e0 <___vfprintf_internal_r+0x1218>
  802258:	b5800204 	addi	r22,r22,8

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  80225c:	6b402018 	cmpnei	r13,r13,128
  802260:	68029926 	beq	r13,zero,802cc8 <___vfprintf_internal_r+0xe00>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
  802264:	4551c83a 	sub	r8,r8,r21
  802268:	0202d116 	blt	zero,r8,802db0 <___vfprintf_internal_r+0xee8>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
  80226c:	d8800417 	ldw	r2,16(sp)
  802270:	1080400c 	andi	r2,r2,256
  802274:	10024e1e 	bne	r2,zero,802bb0 <___vfprintf_internal_r+0xce8>
			PRINT (cp, size);
  802278:	d8801b17 	ldw	r2,108(sp)
  80227c:	1d47883a 	add	r3,r3,r21
  802280:	b4400015 	stw	r17,0(r22)
  802284:	10800044 	addi	r2,r2,1
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
  802288:	b5400115 	stw	r21,4(r22)
  80228c:	d8801b15 	stw	r2,108(sp)
  802290:	d8c01c15 	stw	r3,112(sp)
  802294:	10800208 	cmpgei	r2,r2,8
  802298:	1003381e 	bne	r2,zero,802f7c <___vfprintf_internal_r+0x10b4>
  80229c:	b5800204 	addi	r22,r22,8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
  8022a0:	d8800417 	ldw	r2,16(sp)
  8022a4:	1440010c 	andi	r17,r2,4
  8022a8:	88000226 	beq	r17,zero,8022b4 <___vfprintf_internal_r+0x3ec>
			PAD (width - realsz, blanks);
  8022ac:	8523c83a 	sub	r17,r16,r20
  8022b0:	04407416 	blt	zero,r17,802484 <___vfprintf_internal_r+0x5bc>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
  8022b4:	8500010e 	bge	r16,r20,8022bc <___vfprintf_internal_r+0x3f4>
  8022b8:	a021883a 	mov	r16,r20
  8022bc:	d8800517 	ldw	r2,20(sp)
  8022c0:	1405883a 	add	r2,r2,r16
  8022c4:	d8800515 	stw	r2,20(sp)

		FLUSH ();	/* copy out the I/O vectors */
  8022c8:	1802ea1e 	bne	r3,zero,802e74 <___vfprintf_internal_r+0xfac>
                while (*fmt != '\0' && *fmt != '%')
  8022cc:	b8800007 	ldb	r2,0(r23)
		FLUSH ();	/* copy out the I/O vectors */
  8022d0:	d8001b15 	stw	zero,108(sp)
  8022d4:	dd802704 	addi	r22,sp,156
                while (*fmt != '\0' && *fmt != '%')
  8022d8:	103f311e 	bne	r2,zero,801fa0 <___vfprintf_internal_r+0xd8>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
  8022dc:	d8801c17 	ldw	r2,112(sp)
  8022e0:	1006241e 	bne	r2,zero,803b74 <___vfprintf_internal_r+0x1cac>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
  8022e4:	9080030b 	ldhu	r2,12(r18)
  8022e8:	1080100c 	andi	r2,r2,64
  8022ec:	1006c41e 	bne	r2,zero,803e00 <___vfprintf_internal_r+0x1f38>
	/* NOTREACHED */
}
  8022f0:	d8800517 	ldw	r2,20(sp)
  8022f4:	dfc04017 	ldw	ra,256(sp)
  8022f8:	df003f17 	ldw	fp,252(sp)
  8022fc:	ddc03e17 	ldw	r23,248(sp)
  802300:	dd803d17 	ldw	r22,244(sp)
  802304:	dd403c17 	ldw	r21,240(sp)
  802308:	dd003b17 	ldw	r20,236(sp)
  80230c:	dcc03a17 	ldw	r19,232(sp)
  802310:	dc803917 	ldw	r18,228(sp)
  802314:	dc403817 	ldw	r17,224(sp)
  802318:	dc003717 	ldw	r16,220(sp)
  80231c:	dec04104 	addi	sp,sp,260
  802320:	f800283a 	ret
	if (cantwrite (data, fp)) {
  802324:	900b883a 	mov	r5,r18
  802328:	9809883a 	mov	r4,r19
  80232c:	0803f380 	call	803f38 <__swsetup_r>
  802330:	1006b31e 	bne	r2,zero,803e00 <___vfprintf_internal_r+0x1f38>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  802334:	9080030b 	ldhu	r2,12(r18)
  802338:	1080068c 	andi	r2,r2,26
  80233c:	10800298 	cmpnei	r2,r2,10
  802340:	103f091e 	bne	r2,zero,801f68 <___vfprintf_internal_r+0xa0>
  802344:	9080038f 	ldh	r2,14(r18)
  802348:	103f0716 	blt	r2,zero,801f68 <___vfprintf_internal_r+0xa0>
		return (__sbprintf (data, fp, fmt0, ap));
  80234c:	d9c00617 	ldw	r7,24(sp)
  802350:	b00d883a 	mov	r6,r22
  802354:	900b883a 	mov	r5,r18
  802358:	9809883a 	mov	r4,r19
}
  80235c:	dfc04017 	ldw	ra,256(sp)
  802360:	df003f17 	ldw	fp,252(sp)
  802364:	ddc03e17 	ldw	r23,248(sp)
  802368:	dd803d17 	ldw	r22,244(sp)
  80236c:	dd403c17 	ldw	r21,240(sp)
  802370:	dd003b17 	ldw	r20,236(sp)
  802374:	dcc03a17 	ldw	r19,232(sp)
  802378:	dc803917 	ldw	r18,228(sp)
  80237c:	dc403817 	ldw	r17,224(sp)
  802380:	dc003717 	ldw	r16,220(sp)
  802384:	dec04104 	addi	sp,sp,260
		return (__sbprintf (data, fp, fmt0, ap));
  802388:	0803e781 	jmpi	803e78 <__sbprintf>
			flags |= LONGINT;
  80238c:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  802390:	6080080c 	andi	r2,r12,32
  802394:	1000e826 	beq	r2,zero,802738 <___vfprintf_internal_r+0x870>
  802398:	d8c00617 	ldw	r3,24(sp)
			base = DEC;
  80239c:	00800044 	movi	r2,1
			_uquad = UARG ();
  8023a0:	1d000017 	ldw	r20,0(r3)
  8023a4:	1d400117 	ldw	r21,4(r3)
  8023a8:	18c00204 	addi	r3,r3,8
  8023ac:	d8c00615 	stw	r3,24(sp)
nosign:			sign = '\0';
  8023b0:	d8001345 	stb	zero,77(sp)
number:			if ((dprec = prec) >= 0)
  8023b4:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  8023b8:	001b883a 	mov	r13,zero
number:			if ((dprec = prec) >= 0)
  8023bc:	1801971e 	bne	r3,zero,802a1c <___vfprintf_internal_r+0xb54>
				flags &= ~ZEROPAD;
  8023c0:	047fdfc4 	movi	r17,-129
  8023c4:	6448703a 	and	r4,r12,r17
			if (_uquad != 0 || prec != 0) {
  8023c8:	a546b03a 	or	r3,r20,r21
				flags &= ~ZEROPAD;
  8023cc:	d9000415 	stw	r4,16(sp)
			if (_uquad != 0 || prec != 0) {
  8023d0:	1802f21e 	bne	r3,zero,802f9c <___vfprintf_internal_r+0x10d4>
  8023d4:	4005391e 	bne	r8,zero,8038bc <___vfprintf_internal_r+0x19f4>
                       else if (base == OCT && (flags & ALT))
  8023d8:	1003b41e 	bne	r2,zero,8032ac <___vfprintf_internal_r+0x13e4>
  8023dc:	6540004c 	andi	r21,r12,1
  8023e0:	a803e226 	beq	r21,zero,80336c <___vfprintf_internal_r+0x14a4>
                         *--cp = '0';
  8023e4:	00800c04 	movi	r2,48
  8023e8:	d88026c5 	stb	r2,155(sp)
  8023ec:	dc4026c4 	addi	r17,sp,155
  8023f0:	0000fa06 	br	8027dc <___vfprintf_internal_r+0x914>
			flags |= LONGINT;
  8023f4:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  8023f8:	6080080c 	andi	r2,r12,32
  8023fc:	1000c326 	beq	r2,zero,80270c <___vfprintf_internal_r+0x844>
  802400:	d8c00617 	ldw	r3,24(sp)
			base = OCT;
  802404:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  802408:	1d000017 	ldw	r20,0(r3)
  80240c:	1d400117 	ldw	r21,4(r3)
  802410:	18c00204 	addi	r3,r3,8
  802414:	d8c00615 	stw	r3,24(sp)
  802418:	003fe506 	br	8023b0 <___vfprintf_internal_r+0x4e8>
		if ((m = fmt - cp) != 0) {
  80241c:	85e3c83a 	sub	r17,r16,r23
  802420:	85ffae26 	beq	r16,r23,8022dc <___vfprintf_internal_r+0x414>
			PRINT (cp, m);
  802424:	d9001c17 	ldw	r4,112(sp)
  802428:	d8c01b17 	ldw	r3,108(sp)
  80242c:	b5c00015 	stw	r23,0(r22)
  802430:	2449883a 	add	r4,r4,r17
  802434:	18c00044 	addi	r3,r3,1
  802438:	d8c01b15 	stw	r3,108(sp)
  80243c:	b4400115 	stw	r17,4(r22)
  802440:	d9001c15 	stw	r4,112(sp)
  802444:	18c00208 	cmpgei	r3,r3,8
  802448:	1800061e 	bne	r3,zero,802464 <___vfprintf_internal_r+0x59c>
  80244c:	b5800204 	addi	r22,r22,8
			ret += m;
  802450:	d8c00517 	ldw	r3,20(sp)
  802454:	1c47883a 	add	r3,r3,r17
  802458:	d8c00515 	stw	r3,20(sp)
                if (*fmt == '\0')
  80245c:	103ed91e 	bne	r2,zero,801fc4 <___vfprintf_internal_r+0xfc>
  802460:	003f9e06 	br	8022dc <___vfprintf_internal_r+0x414>
			PRINT (cp, m);
  802464:	d9801a04 	addi	r6,sp,104
  802468:	900b883a 	mov	r5,r18
  80246c:	9809883a 	mov	r4,r19
  802470:	0809c180 	call	809c18 <__sprint_r>
  802474:	103f9b1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  802478:	80800007 	ldb	r2,0(r16)
  80247c:	dd802704 	addi	r22,sp,156
  802480:	003ff306 	br	802450 <___vfprintf_internal_r+0x588>
			PAD (width - realsz, blanks);
  802484:	03002074 	movhi	r12,129
  802488:	89000450 	cmplti	r4,r17,17
  80248c:	d8801b17 	ldw	r2,108(sp)
  802490:	630bb604 	addi	r12,r12,11992
  802494:	20001b1e 	bne	r4,zero,802504 <___vfprintf_internal_r+0x63c>
  802498:	05400404 	movi	r21,16
  80249c:	6039883a 	mov	fp,r12
  8024a0:	00000406 	br	8024b4 <___vfprintf_internal_r+0x5ec>
  8024a4:	8c7ffc04 	addi	r17,r17,-16
  8024a8:	89000448 	cmpgei	r4,r17,17
  8024ac:	b5800204 	addi	r22,r22,8
  8024b0:	20001326 	beq	r4,zero,802500 <___vfprintf_internal_r+0x638>
  8024b4:	10800044 	addi	r2,r2,1
  8024b8:	18c00404 	addi	r3,r3,16
  8024bc:	b7000015 	stw	fp,0(r22)
  8024c0:	b5400115 	stw	r21,4(r22)
  8024c4:	d8c01c15 	stw	r3,112(sp)
  8024c8:	d8801b15 	stw	r2,108(sp)
  8024cc:	11000208 	cmpgei	r4,r2,8
  8024d0:	203ff426 	beq	r4,zero,8024a4 <___vfprintf_internal_r+0x5dc>
  8024d4:	d9801a04 	addi	r6,sp,104
  8024d8:	900b883a 	mov	r5,r18
  8024dc:	9809883a 	mov	r4,r19
  8024e0:	0809c180 	call	809c18 <__sprint_r>
  8024e4:	103f7f1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  8024e8:	8c7ffc04 	addi	r17,r17,-16
  8024ec:	89000448 	cmpgei	r4,r17,17
  8024f0:	d8c01c17 	ldw	r3,112(sp)
  8024f4:	d8801b17 	ldw	r2,108(sp)
  8024f8:	dd802704 	addi	r22,sp,156
  8024fc:	203fed1e 	bne	r4,zero,8024b4 <___vfprintf_internal_r+0x5ec>
  802500:	e019883a 	mov	r12,fp
  802504:	10800044 	addi	r2,r2,1
  802508:	1c47883a 	add	r3,r3,r17
  80250c:	d8801b15 	stw	r2,108(sp)
  802510:	b3000015 	stw	r12,0(r22)
  802514:	b4400115 	stw	r17,4(r22)
  802518:	d8c01c15 	stw	r3,112(sp)
  80251c:	10800210 	cmplti	r2,r2,8
  802520:	103f641e 	bne	r2,zero,8022b4 <___vfprintf_internal_r+0x3ec>
  802524:	d9801a04 	addi	r6,sp,104
  802528:	900b883a 	mov	r5,r18
  80252c:	9809883a 	mov	r4,r19
  802530:	0809c180 	call	809c18 <__sprint_r>
  802534:	103f6b1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  802538:	d8c01c17 	ldw	r3,112(sp)
  80253c:	003f5d06 	br	8022b4 <___vfprintf_internal_r+0x3ec>
			_uquad = SARG ();
  802540:	d8c00617 	ldw	r3,24(sp)
  802544:	d9001345 	stb	r4,77(sp)
			if (flags & LONGDBL) {
  802548:	6080020c 	andi	r2,r12,8
			_uquad = SARG ();
  80254c:	19000204 	addi	r4,r3,8
  802550:	d9000e15 	stw	r4,56(sp)
			if (flags & LONGDBL) {
  802554:	10038c1e 	bne	r2,zero,803388 <___vfprintf_internal_r+0x14c0>
  802558:	1805883a 	mov	r2,r3
				_fpvalue = GET_ARG (N, ap, double);
  80255c:	10800117 	ldw	r2,4(r2)
  802560:	18c00017 	ldw	r3,0(r3)
  802564:	d8800a15 	stw	r2,40(sp)
  802568:	d8c00915 	stw	r3,36(sp)
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  80256c:	057ff7c4 	movi	r21,-33
			if (prec == -1) {
  802570:	40bfffe0 	cmpeqi	r2,r8,-1
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  802574:	e56a703a 	and	r21,fp,r21
			if (prec == -1) {
  802578:	1004d41e 	bne	r2,zero,8038cc <___vfprintf_internal_r+0x1a04>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  80257c:	a88011d8 	cmpnei	r2,r21,71
  802580:	1004c126 	beq	r2,zero,803888 <___vfprintf_internal_r+0x19c0>
			flags |= FPT;
  802584:	60804014 	ori	r2,r12,256
  802588:	d8800415 	stw	r2,16(sp)
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
  80258c:	d8800a17 	ldw	r2,40(sp)
  802590:	1004b916 	blt	r2,zero,803878 <___vfprintf_internal_r+0x19b0>
  802594:	1007883a 	mov	r3,r2
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
  802598:	d8000605 	stb	zero,24(sp)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
  80259c:	e50019a0 	cmpeqi	r20,fp,102
  8025a0:	a004321e 	bne	r20,zero,80366c <___vfprintf_internal_r+0x17a4>
  8025a4:	e08011a0 	cmpeqi	r2,fp,70
  8025a8:	1004301e 	bne	r2,zero,80366c <___vfprintf_internal_r+0x17a4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
  8025ac:	a8801158 	cmpnei	r2,r21,69
  8025b0:	1004c826 	beq	r2,zero,8038d4 <___vfprintf_internal_r+0x1a0c>
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8025b4:	d8801804 	addi	r2,sp,96
  8025b8:	d8800315 	stw	r2,12(sp)
  8025bc:	d9400917 	ldw	r5,36(sp)
  8025c0:	d8801504 	addi	r2,sp,84
  8025c4:	d8800215 	stw	r2,8(sp)
  8025c8:	d8801404 	addi	r2,sp,80
  8025cc:	da000015 	stw	r8,0(sp)
  8025d0:	180d883a 	mov	r6,r3
  8025d4:	9809883a 	mov	r4,r19
  8025d8:	d8800115 	stw	r2,4(sp)
  8025dc:	01c00084 	movi	r7,2
  8025e0:	db000f15 	stw	r12,60(sp)
  8025e4:	da000815 	stw	r8,32(sp)
  8025e8:	d8c00715 	stw	r3,28(sp)
  8025ec:	08042b80 	call	8042b8 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  8025f0:	da000817 	ldw	r8,32(sp)
  8025f4:	e10019d8 	cmpnei	r4,fp,103
  8025f8:	d8c00717 	ldw	r3,28(sp)
  8025fc:	db000f17 	ldw	r12,60(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  802600:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  802604:	4013883a 	mov	r9,r8
  802608:	2004c81e 	bne	r4,zero,80392c <___vfprintf_internal_r+0x1a64>
  80260c:	6080004c 	andi	r2,r12,1
  802610:	1004c81e 	bne	r2,zero,803934 <___vfprintf_internal_r+0x1a6c>
				if (expt <= -4 || expt > prec)
  802614:	d8801417 	ldw	r2,80(sp)
			if (ch == 'g' || ch == 'G') {
  802618:	ad4011e0 	cmpeqi	r21,r21,71
				if (expt <= -4 || expt > prec)
  80261c:	d8800715 	stw	r2,28(sp)
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
  802620:	d8801817 	ldw	r2,96(sp)
  802624:	1445c83a 	sub	r2,r2,r17
  802628:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  80262c:	a8000526 	beq	r21,zero,802644 <___vfprintf_internal_r+0x77c>
				if (expt <= -4 || expt > prec)
  802630:	d8c00717 	ldw	r3,28(sp)
  802634:	18bfff50 	cmplti	r2,r3,-3
  802638:	1000011e 	bne	r2,zero,802640 <___vfprintf_internal_r+0x778>
  80263c:	40c3c30e 	bge	r8,r3,80354c <___vfprintf_internal_r+0x1684>
					ch -= 2; /* 'e' or 'E' */
  802640:	e73fff84 	addi	fp,fp,-2
				--expt;
  802644:	d8800717 	ldw	r2,28(sp)
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
  802648:	df001645 	stb	fp,89(sp)
				--expt;
  80264c:	10ffffc4 	addi	r3,r2,-1
  802650:	d8c01415 	stw	r3,80(sp)
	if (exp < 0) {
  802654:	18053c16 	blt	r3,zero,803b48 <___vfprintf_internal_r+0x1c80>
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
  802658:	00800ac4 	movi	r2,43
  80265c:	d8801685 	stb	r2,90(sp)
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
  802660:	18800290 	cmplti	r2,r3,10
  802664:	1005a51e 	bne	r2,zero,803cfc <___vfprintf_internal_r+0x1e34>
	t = expbuf + MAXEXPLEN;
  802668:	dd4019c4 	addi	r21,sp,103
  80266c:	dc400715 	stw	r17,28(sp)
  802670:	dc001015 	stw	r16,64(sp)
  802674:	a823883a 	mov	r17,r21
  802678:	db000f15 	stw	r12,60(sp)
  80267c:	1821883a 	mov	r16,r3
  802680:	902b883a 	mov	r21,r18
  802684:	00001306 	br	8026d4 <___vfprintf_internal_r+0x80c>
		do {
			*--t = to_char (exp % 10);
  802688:	410f6e03 	ldbu	r4,15800(r8)
  80268c:	200490ba 	slli	r2,r4,2
		} while ((exp /= 10) > 9);
  802690:	91c00428 	cmpgeui	r7,r18,16
  802694:	02002074 	movhi	r8,129
			*--t = to_char (exp % 10);
  802698:	1105883a 	add	r2,r2,r4
  80269c:	1085883a 	add	r2,r2,r2
  8026a0:	8085c83a 	sub	r2,r16,r2
  8026a4:	10800c04 	addi	r2,r2,48
  8026a8:	88800005 	stb	r2,0(r17)
		} while ((exp /= 10) > 9);
  8026ac:	01400284 	movi	r5,10
  8026b0:	8004913a 	slli	r2,r16,4
  8026b4:	8009883a 	mov	r4,r16
  8026b8:	38054f1e 	bne	r7,zero,803bf8 <___vfprintf_internal_r+0x1d30>
  8026bc:	10800294 	ori	r2,r2,10
  8026c0:	1211883a 	add	r8,r2,r8
  8026c4:	408f6e03 	ldbu	r2,15800(r8)
  8026c8:	81001908 	cmpgei	r4,r16,100
  8026cc:	1021883a 	mov	r16,r2
  8026d0:	20055d26 	beq	r4,zero,803c48 <___vfprintf_internal_r+0x1d80>
			*--t = to_char (exp % 10);
  8026d4:	8004913a 	slli	r2,r16,4
  8026d8:	84800294 	ori	r18,r16,10
  8026dc:	02002074 	movhi	r8,129
  8026e0:	10800294 	ori	r2,r2,10
  8026e4:	92400428 	cmpgeui	r9,r18,16
  8026e8:	8829883a 	mov	r20,r17
  8026ec:	8009883a 	mov	r4,r16
  8026f0:	01400284 	movi	r5,10
  8026f4:	1211883a 	add	r8,r2,r8
  8026f8:	8c7fffc4 	addi	r17,r17,-1
  8026fc:	483fe226 	beq	r9,zero,802688 <___vfprintf_internal_r+0x7c0>
  802700:	080d6dc0 	call	80d6dc <__divsi3>
  802704:	1009883a 	mov	r4,r2
  802708:	003fe006 	br	80268c <___vfprintf_internal_r+0x7c4>
			width = GET_ARG (n, ap, int);
  80270c:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  802710:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802714:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  802718:	10032b1e 	bne	r2,zero,8033c8 <___vfprintf_internal_r+0x1500>
  80271c:	6080100c 	andi	r2,r12,64
  802720:	1004cf26 	beq	r2,zero,803a60 <___vfprintf_internal_r+0x1b98>
  802724:	2500000b 	ldhu	r20,0(r4)
  802728:	002b883a 	mov	r21,zero
  80272c:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  802730:	0005883a 	mov	r2,zero
  802734:	003f1e06 	br	8023b0 <___vfprintf_internal_r+0x4e8>
			width = GET_ARG (n, ap, int);
  802738:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  80273c:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802740:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  802744:	1003151e 	bne	r2,zero,80339c <___vfprintf_internal_r+0x14d4>
  802748:	6080100c 	andi	r2,r12,64
  80274c:	1004bf26 	beq	r2,zero,803a4c <___vfprintf_internal_r+0x1b84>
  802750:	2500000b 	ldhu	r20,0(r4)
  802754:	002b883a 	mov	r21,zero
  802758:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  80275c:	00800044 	movi	r2,1
  802760:	003f1306 	br	8023b0 <___vfprintf_internal_r+0x4e8>
	CHECK_INIT (data, fp);
  802764:	9809883a 	mov	r4,r19
  802768:	08060e80 	call	8060e8 <__sinit>
  80276c:	003dee06 	br	801f28 <___vfprintf_internal_r+0x60>
  802770:	d9001345 	stb	r4,77(sp)
			_uquad = SARG ();
  802774:	6080080c 	andi	r2,r12,32
  802778:	10009326 	beq	r2,zero,8029c8 <___vfprintf_internal_r+0xb00>
  80277c:	d8c00617 	ldw	r3,24(sp)
  802780:	18800117 	ldw	r2,4(r3)
  802784:	1d000017 	ldw	r20,0(r3)
  802788:	18c00204 	addi	r3,r3,8
  80278c:	d8c00615 	stw	r3,24(sp)
  802790:	102b883a 	mov	r21,r2
			if ((quad_t)_uquad < 0)
  802794:	10009716 	blt	r2,zero,8029f4 <___vfprintf_internal_r+0xb2c>
number:			if ((dprec = prec) >= 0)
  802798:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  80279c:	db401343 	ldbu	r13,77(sp)
number:			if ((dprec = prec) >= 0)
  8027a0:	10000626 	beq	r2,zero,8027bc <___vfprintf_internal_r+0x8f4>
				flags &= ~ZEROPAD;
  8027a4:	047fdfc4 	movi	r17,-129
  8027a8:	6446703a 	and	r3,r12,r17
			if (_uquad != 0 || prec != 0) {
  8027ac:	a544b03a 	or	r2,r20,r21
				flags &= ~ZEROPAD;
  8027b0:	d8c00415 	stw	r3,16(sp)
			if (_uquad != 0 || prec != 0) {
  8027b4:	1002bc26 	beq	r2,zero,8032a8 <___vfprintf_internal_r+0x13e0>
  8027b8:	1819883a 	mov	r12,r3
					if (_uquad < 10) {
  8027bc:	a8036e1e 	bne	r21,zero,803578 <___vfprintf_internal_r+0x16b0>
  8027c0:	a08002a8 	cmpgeui	r2,r20,10
  8027c4:	10036c1e 	bne	r2,zero,803578 <___vfprintf_internal_r+0x16b0>
						*--cp = to_char(_uquad);
  8027c8:	a5000c04 	addi	r20,r20,48
  8027cc:	dd0026c5 	stb	r20,155(sp)
						break;
  8027d0:	db000415 	stw	r12,16(sp)
  8027d4:	05400044 	movi	r21,1
						*--cp = to_char(_uquad);
  8027d8:	dc4026c4 	addi	r17,sp,155
		realsz = dprec > size ? dprec : size;
  8027dc:	a829883a 	mov	r20,r21
  8027e0:	aa00010e 	bge	r21,r8,8027e8 <___vfprintf_internal_r+0x920>
  8027e4:	4029883a 	mov	r20,r8
		lead = 0;
  8027e8:	d8000715 	stw	zero,28(sp)
		if (sign)
  8027ec:	6b403fcc 	andi	r13,r13,255
  8027f0:	6b40201c 	xori	r13,r13,128
  8027f4:	6b7fe004 	addi	r13,r13,-128
  8027f8:	683e7326 	beq	r13,zero,8021c8 <___vfprintf_internal_r+0x300>
			realsz++;
  8027fc:	a5000044 	addi	r20,r20,1
  802800:	003e7106 	br	8021c8 <___vfprintf_internal_r+0x300>
				flags |= SHORTINT;
  802804:	bac00007 	ldb	r11,0(r23)
  802808:	63001014 	ori	r12,r12,64
			goto rflag;
  80280c:	003df306 	br	801fdc <___vfprintf_internal_r+0x114>
				*cp = GET_ARG (N, ap, int);
  802810:	d8c00617 	ldw	r3,24(sp)
			sign = '\0';
  802814:	d8001345 	stb	zero,77(sp)
			break;
  802818:	05000044 	movi	r20,1
				*cp = GET_ARG (N, ap, int);
  80281c:	18800017 	ldw	r2,0(r3)
  802820:	18c00104 	addi	r3,r3,4
  802824:	d8c00615 	stw	r3,24(sp)
  802828:	d8801d05 	stb	r2,116(sp)
				size = 1;
  80282c:	05400044 	movi	r21,1
			cp = buf;
  802830:	dc401d04 	addi	r17,sp,116
			break;
  802834:	003e6106 	br	8021bc <___vfprintf_internal_r+0x2f4>
			xdigs = "0123456789ABCDEF";
  802838:	00802074 	movhi	r2,129
  80283c:	108baa04 	addi	r2,r2,11944
  802840:	d8800c15 	stw	r2,48(sp)
  802844:	d9001345 	stb	r4,77(sp)
hex:			_uquad = UARG ();
  802848:	6080080c 	andi	r2,r12,32
			xdigs = "0123456789abcdef";
  80284c:	00c01604 	movi	r3,88
hex:			_uquad = UARG ();
  802850:	10001526 	beq	r2,zero,8028a8 <___vfprintf_internal_r+0x9e0>
  802854:	d8800617 	ldw	r2,24(sp)
  802858:	15000017 	ldw	r20,0(r2)
  80285c:	15400117 	ldw	r21,4(r2)
  802860:	10800204 	addi	r2,r2,8
  802864:	d8800615 	stw	r2,24(sp)
			if (flags & ALT && _uquad != 0) {
  802868:	6080004c 	andi	r2,r12,1
  80286c:	10000226 	beq	r2,zero,802878 <___vfprintf_internal_r+0x9b0>
  802870:	a544b03a 	or	r2,r20,r21
  802874:	1002ce1e 	bne	r2,zero,8033b0 <___vfprintf_internal_r+0x14e8>
			base = HEX;
  802878:	00800084 	movi	r2,2
  80287c:	003ecc06 	br	8023b0 <___vfprintf_internal_r+0x4e8>
			flags |= LONGDBL;
  802880:	bac00007 	ldb	r11,0(r23)
  802884:	63000214 	ori	r12,r12,8
			goto rflag;
  802888:	003dd406 	br	801fdc <___vfprintf_internal_r+0x114>
			xdigs = "0123456789abcdef";
  80288c:	00802074 	movhi	r2,129
  802890:	108ba504 	addi	r2,r2,11924
  802894:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  802898:	d9001345 	stb	r4,77(sp)
  80289c:	6080080c 	andi	r2,r12,32
		lead = 0;
  8028a0:	00c01e04 	movi	r3,120
hex:			_uquad = UARG ();
  8028a4:	103feb1e 	bne	r2,zero,802854 <___vfprintf_internal_r+0x98c>
			width = GET_ARG (n, ap, int);
  8028a8:	d9400617 	ldw	r5,24(sp)
hex:			_uquad = UARG ();
  8028ac:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8028b0:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  8028b4:	1002c91e 	bne	r2,zero,8033dc <___vfprintf_internal_r+0x1514>
  8028b8:	6080100c 	andi	r2,r12,64
  8028bc:	10046d26 	beq	r2,zero,803a74 <___vfprintf_internal_r+0x1bac>
  8028c0:	2d00000b 	ldhu	r20,0(r5)
  8028c4:	002b883a 	mov	r21,zero
  8028c8:	d9000615 	stw	r4,24(sp)
  8028cc:	003fe606 	br	802868 <___vfprintf_internal_r+0x9a0>
			cp = GET_ARG (N, ap, char_ptr_t);
  8028d0:	d8800617 	ldw	r2,24(sp)
			sign = '\0';
  8028d4:	d8001345 	stb	zero,77(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  8028d8:	14400017 	ldw	r17,0(r2)
  8028dc:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  8028e0:	8802f426 	beq	r17,zero,8034b4 <___vfprintf_internal_r+0x15ec>
			if (prec >= 0) {
  8028e4:	40bfffe0 	cmpeqi	r2,r8,-1
  8028e8:	1004141e 	bne	r2,zero,80393c <___vfprintf_internal_r+0x1a74>
				char *p = memchr (cp, 0, prec);
  8028ec:	400d883a 	mov	r6,r8
  8028f0:	000b883a 	mov	r5,zero
  8028f4:	8809883a 	mov	r4,r17
  8028f8:	d8c00715 	stw	r3,28(sp)
  8028fc:	db000615 	stw	r12,24(sp)
  802900:	da000415 	stw	r8,16(sp)
  802904:	080782c0 	call	80782c <memchr>
				if (p != NULL)
  802908:	da000417 	ldw	r8,16(sp)
  80290c:	db000617 	ldw	r12,24(sp)
  802910:	d8c00717 	ldw	r3,28(sp)
  802914:	10051a26 	beq	r2,zero,803d80 <___vfprintf_internal_r+0x1eb8>
					size = p - cp;
  802918:	146bc83a 	sub	r21,r2,r17
  80291c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  802920:	d8c00615 	stw	r3,24(sp)
  802924:	003e2506 	br	8021bc <___vfprintf_internal_r+0x2f4>
			flags |= QUADINT;
  802928:	bac00007 	ldb	r11,0(r23)
  80292c:	63000814 	ori	r12,r12,32
			goto rflag;
  802930:	003daa06 	br	801fdc <___vfprintf_internal_r+0x114>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  802934:	d8c00617 	ldw	r3,24(sp)
			ox[0] = '0';
  802938:	009e0c04 	movi	r2,30768
			xdigs = "0123456789abcdef";
  80293c:	01002074 	movhi	r4,129
			ox[0] = '0';
  802940:	d880138d 	sth	r2,78(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  802944:	18800104 	addi	r2,r3,4
  802948:	d8800615 	stw	r2,24(sp)
			xdigs = "0123456789abcdef";
  80294c:	208ba504 	addi	r2,r4,11924
  802950:	d8800c15 	stw	r2,48(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  802954:	1d000017 	ldw	r20,0(r3)
  802958:	002b883a 	mov	r21,zero
			flags |= HEXPREFIX;
  80295c:	63000094 	ori	r12,r12,2
			base = HEX;
  802960:	00800084 	movi	r2,2
			ox[1] = ch = 'x';
  802964:	07001e04 	movi	fp,120
			goto nosign;
  802968:	003e9106 	br	8023b0 <___vfprintf_internal_r+0x4e8>
  80296c:	d9001345 	stb	r4,77(sp)
			width = GET_ARG (n, ap, int);
  802970:	d9000617 	ldw	r4,24(sp)
			if (flags & QUADINT)
  802974:	6080080c 	andi	r2,r12,32
			width = GET_ARG (n, ap, int);
  802978:	20c00017 	ldw	r3,0(r4)
  80297c:	21000104 	addi	r4,r4,4
  802980:	d9000615 	stw	r4,24(sp)
			if (flags & QUADINT)
  802984:	10027b1e 	bne	r2,zero,803374 <___vfprintf_internal_r+0x14ac>
			if (flags & LONGINT)
  802988:	6080040c 	andi	r2,r12,16
  80298c:	1003221e 	bne	r2,zero,803618 <___vfprintf_internal_r+0x1750>
			else if (flags & SHORTINT)
  802990:	6300100c 	andi	r12,r12,64
  802994:	60032026 	beq	r12,zero,803618 <___vfprintf_internal_r+0x1750>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  802998:	d8800517 	ldw	r2,20(sp)
  80299c:	1880000d 	sth	r2,0(r3)
  8029a0:	003d7d06 	br	801f98 <___vfprintf_internal_r+0xd0>
			if (*fmt == 'l') {
  8029a4:	bac00007 	ldb	r11,0(r23)
  8029a8:	58801b18 	cmpnei	r2,r11,108
  8029ac:	1002b026 	beq	r2,zero,803470 <___vfprintf_internal_r+0x15a8>
				flags |= LONGINT;
  8029b0:	63000414 	ori	r12,r12,16
  8029b4:	003d8906 	br	801fdc <___vfprintf_internal_r+0x114>
			flags |= LONGINT;
  8029b8:	63000414 	ori	r12,r12,16
  8029bc:	d9001345 	stb	r4,77(sp)
			_uquad = SARG ();
  8029c0:	6080080c 	andi	r2,r12,32
  8029c4:	103f6d1e 	bne	r2,zero,80277c <___vfprintf_internal_r+0x8b4>
			width = GET_ARG (n, ap, int);
  8029c8:	d9000617 	ldw	r4,24(sp)
			_uquad = SARG ();
  8029cc:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8029d0:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  8029d4:	1002851e 	bne	r2,zero,8033ec <___vfprintf_internal_r+0x1524>
  8029d8:	6080100c 	andi	r2,r12,64
  8029dc:	10042926 	beq	r2,zero,803a84 <___vfprintf_internal_r+0x1bbc>
  8029e0:	2500000f 	ldh	r20,0(r4)
  8029e4:	d8c00615 	stw	r3,24(sp)
  8029e8:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8029ec:	a805883a 	mov	r2,r21
  8029f0:	103f690e 	bge	r2,zero,802798 <___vfprintf_internal_r+0x8d0>
				_uquad = -_uquad;
  8029f4:	a004c03a 	cmpne	r2,r20,zero
  8029f8:	056bc83a 	sub	r21,zero,r21
  8029fc:	a8abc83a 	sub	r21,r21,r2
				sign = '-';
  802a00:	00800b44 	movi	r2,45
  802a04:	d8801345 	stb	r2,77(sp)
number:			if ((dprec = prec) >= 0)
  802a08:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  802a0c:	0529c83a 	sub	r20,zero,r20
				sign = '-';
  802a10:	03400b44 	movi	r13,45
			base = DEC;
  802a14:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  802a18:	183e6926 	beq	r3,zero,8023c0 <___vfprintf_internal_r+0x4f8>
				switch (base) {
  802a1c:	10c00060 	cmpeqi	r3,r2,1
  802a20:	183f661e 	bne	r3,zero,8027bc <___vfprintf_internal_r+0x8f4>
  802a24:	108000a0 	cmpeqi	r2,r2,2
			cp = buf + BUF;
  802a28:	dc402704 	addi	r17,sp,156
  802a2c:	10004626 	beq	r2,zero,802b48 <___vfprintf_internal_r+0xc80>
  802a30:	d9000c17 	ldw	r4,48(sp)
						*--cp = xdigs[_uquad & 15];
  802a34:	a08003cc 	andi	r2,r20,15
						_uquad >>= 4;
  802a38:	a806973a 	slli	r3,r21,28
  802a3c:	a028d13a 	srli	r20,r20,4
						*--cp = xdigs[_uquad & 15];
  802a40:	2085883a 	add	r2,r4,r2
  802a44:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  802a48:	a82ad13a 	srli	r21,r21,4
  802a4c:	1d28b03a 	or	r20,r3,r20
						*--cp = xdigs[_uquad & 15];
  802a50:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  802a54:	a544b03a 	or	r2,r20,r21
						*--cp = xdigs[_uquad & 15];
  802a58:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  802a5c:	103ff51e 	bne	r2,zero,802a34 <___vfprintf_internal_r+0xb6c>
			size = buf + BUF - cp;
  802a60:	d8802704 	addi	r2,sp,156
  802a64:	146bc83a 	sub	r21,r2,r17
  802a68:	db000415 	stw	r12,16(sp)
  802a6c:	003f5b06 	br	8027dc <___vfprintf_internal_r+0x914>
			flags |= ZEROPAD;
  802a70:	bac00007 	ldb	r11,0(r23)
  802a74:	63002014 	ori	r12,r12,128
			goto rflag;
  802a78:	003d5806 	br	801fdc <___vfprintf_internal_r+0x114>
			if ((ch = *fmt++) == '*') {
  802a7c:	bf000007 	ldb	fp,0(r23)
  802a80:	b8800044 	addi	r2,r23,1
  802a84:	e0c00aa0 	cmpeqi	r3,fp,42
  802a88:	1804e91e 	bne	r3,zero,803e30 <___vfprintf_internal_r+0x1f68>
			while (is_digit (ch)) {
  802a8c:	e0fff404 	addi	r3,fp,-48
  802a90:	194002b0 	cmpltui	r5,r3,10
			if ((ch = *fmt++) == '*') {
  802a94:	102f883a 	mov	r23,r2
			n = 0;
  802a98:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  802a9c:	283d5126 	beq	r5,zero,801fe4 <___vfprintf_internal_r+0x11c>
				n = 10 * n + to_digit (ch);
  802aa0:	400490ba 	slli	r2,r8,2
				ch = *fmt++;
  802aa4:	bf000007 	ldb	fp,0(r23)
  802aa8:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  802aac:	1211883a 	add	r8,r2,r8
  802ab0:	4211883a 	add	r8,r8,r8
  802ab4:	40d1883a 	add	r8,r8,r3
			while (is_digit (ch)) {
  802ab8:	e0fff404 	addi	r3,fp,-48
  802abc:	188002b0 	cmpltui	r2,r3,10
  802ac0:	103ff71e 	bne	r2,zero,802aa0 <___vfprintf_internal_r+0xbd8>
  802ac4:	003d4706 	br	801fe4 <___vfprintf_internal_r+0x11c>
			if ((ch = *fmt++) == '*') {
  802ac8:	bf000003 	ldbu	fp,0(r23)
			flags |= LADJUST;
  802acc:	e2c03fcc 	andi	r11,fp,255
  802ad0:	5ac0201c 	xori	r11,r11,128
  802ad4:	63000114 	ori	r12,r12,4
			goto rflag;
  802ad8:	5affe004 	addi	r11,r11,-128
  802adc:	003d3f06 	br	801fdc <___vfprintf_internal_r+0x114>
			goto rflag;
  802ae0:	bac00007 	ldb	r11,0(r23)
			sign = '+';
  802ae4:	01000ac4 	movi	r4,43
			goto rflag;
  802ae8:	003d3c06 	br	801fdc <___vfprintf_internal_r+0x114>
			width = GET_ARG (n, ap, int);
  802aec:	d8800617 	ldw	r2,24(sp)
			if ((ch = *fmt++) == '*') {
  802af0:	bf000003 	ldbu	fp,0(r23)
			width = GET_ARG (n, ap, int);
  802af4:	14000017 	ldw	r16,0(r2)
  802af8:	10800104 	addi	r2,r2,4
			if (width >= 0)
  802afc:	80024016 	blt	r16,zero,803400 <___vfprintf_internal_r+0x1538>
			width = GET_ARG (n, ap, int);
  802b00:	d8800615 	stw	r2,24(sp)
  802b04:	e2c03fcc 	andi	r11,fp,255
  802b08:	5ac0201c 	xori	r11,r11,128
  802b0c:	5affe004 	addi	r11,r11,-128
  802b10:	003d3206 	br	801fdc <___vfprintf_internal_r+0x114>
			flags |= ALT;
  802b14:	bac00007 	ldb	r11,0(r23)
  802b18:	63000054 	ori	r12,r12,1
			goto rflag;
  802b1c:	003d2f06 	br	801fdc <___vfprintf_internal_r+0x114>
			if (!sign)
  802b20:	20803fcc 	andi	r2,r4,255
  802b24:	1080201c 	xori	r2,r2,128
  802b28:	10bfe004 	addi	r2,r2,-128
			if ((ch = *fmt++) == '*') {
  802b2c:	bf000003 	ldbu	fp,0(r23)
			if (!sign)
  802b30:	103ff41e 	bne	r2,zero,802b04 <___vfprintf_internal_r+0xc3c>
  802b34:	e2c03fcc 	andi	r11,fp,255
  802b38:	5ac0201c 	xori	r11,r11,128
				sign = ' ';
  802b3c:	01000804 	movi	r4,32
  802b40:	5affe004 	addi	r11,r11,-128
  802b44:	003d2506 	br	801fdc <___vfprintf_internal_r+0x114>
						_uquad >>= 3;
  802b48:	a006d0fa 	srli	r3,r20,3
  802b4c:	a808977a 	slli	r4,r21,29
  802b50:	a82ad0fa 	srli	r21,r21,3
						*--cp = to_char (_uquad & 7);
  802b54:	a50001cc 	andi	r20,r20,7
  802b58:	a0800c04 	addi	r2,r20,48
						_uquad >>= 3;
  802b5c:	20e8b03a 	or	r20,r4,r3
						*--cp = to_char (_uquad & 7);
  802b60:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  802b64:	a546b03a 	or	r3,r20,r21
  802b68:	880b883a 	mov	r5,r17
						*--cp = to_char (_uquad & 7);
  802b6c:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  802b70:	183ff51e 	bne	r3,zero,802b48 <___vfprintf_internal_r+0xc80>
					if (flags & ALT && *cp != '0')
  802b74:	60c0004c 	andi	r3,r12,1
  802b78:	183fb926 	beq	r3,zero,802a60 <___vfprintf_internal_r+0xb98>
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	10800c18 	cmpnei	r2,r2,48
  802b8c:	103fb426 	beq	r2,zero,802a60 <___vfprintf_internal_r+0xb98>
						*--cp = '0';
  802b90:	00800c04 	movi	r2,48
  802b94:	297fff84 	addi	r5,r5,-2
  802b98:	88bfffc5 	stb	r2,-1(r17)
			size = buf + BUF - cp;
  802b9c:	d8802704 	addi	r2,sp,156
  802ba0:	116bc83a 	sub	r21,r2,r5
  802ba4:	db000415 	stw	r12,16(sp)
						*--cp = '0';
  802ba8:	2823883a 	mov	r17,r5
  802bac:	003f0b06 	br	8027dc <___vfprintf_internal_r+0x914>
			if (ch >= 'f') {	/* 'f' or 'g' */
  802bb0:	e2c01990 	cmplti	r11,fp,102
  802bb4:	5800b51e 	bne	r11,zero,802e8c <___vfprintf_internal_r+0xfc4>
				if (_fpvalue == 0) {
  802bb8:	d9000917 	ldw	r4,36(sp)
  802bbc:	d9400a17 	ldw	r5,40(sp)
  802bc0:	000d883a 	mov	r6,zero
  802bc4:	000f883a 	mov	r7,zero
  802bc8:	d8c00e15 	stw	r3,56(sp)
  802bcc:	080ead80 	call	80ead8 <__eqdf2>
  802bd0:	d8c00e17 	ldw	r3,56(sp)
  802bd4:	10014e1e 	bne	r2,zero,803110 <___vfprintf_internal_r+0x1248>
					PRINT ("0", 1);
  802bd8:	d8801b17 	ldw	r2,108(sp)
  802bdc:	01002074 	movhi	r4,129
  802be0:	210bb104 	addi	r4,r4,11972
  802be4:	10800044 	addi	r2,r2,1
  802be8:	18c00044 	addi	r3,r3,1
  802bec:	b1000015 	stw	r4,0(r22)
  802bf0:	01000044 	movi	r4,1
  802bf4:	d8801b15 	stw	r2,108(sp)
  802bf8:	b1000115 	stw	r4,4(r22)
  802bfc:	d8c01c15 	stw	r3,112(sp)
  802c00:	10800208 	cmpgei	r2,r2,8
  802c04:	1003141e 	bne	r2,zero,803858 <___vfprintf_internal_r+0x1990>
  802c08:	b5800204 	addi	r22,r22,8
					if (expt < ndig || flags & ALT) {
  802c0c:	d8801417 	ldw	r2,80(sp)
  802c10:	d9000817 	ldw	r4,32(sp)
  802c14:	1101d10e 	bge	r2,r4,80335c <___vfprintf_internal_r+0x1494>
						PRINT (decimal_point, decp_len);
  802c18:	d8800d17 	ldw	r2,52(sp)
  802c1c:	d9000b17 	ldw	r4,44(sp)
  802c20:	b0800015 	stw	r2,0(r22)
  802c24:	d8801b17 	ldw	r2,108(sp)
  802c28:	1907883a 	add	r3,r3,r4
  802c2c:	b1000115 	stw	r4,4(r22)
  802c30:	10800044 	addi	r2,r2,1
  802c34:	d8801b15 	stw	r2,108(sp)
  802c38:	d8c01c15 	stw	r3,112(sp)
  802c3c:	10800208 	cmpgei	r2,r2,8
  802c40:	1002141e 	bne	r2,zero,803494 <___vfprintf_internal_r+0x15cc>
  802c44:	b5800204 	addi	r22,r22,8
						PAD (ndig - 1, zeroes);
  802c48:	d8800817 	ldw	r2,32(sp)
  802c4c:	157fffc4 	addi	r21,r2,-1
  802c50:	057d930e 	bge	zero,r21,8022a0 <___vfprintf_internal_r+0x3d8>
  802c54:	01c02074 	movhi	r7,129
  802c58:	a9000450 	cmplti	r4,r21,17
  802c5c:	d8801b17 	ldw	r2,108(sp)
  802c60:	39cbb204 	addi	r7,r7,11976
  802c64:	2002f81e 	bne	r4,zero,803848 <___vfprintf_internal_r+0x1980>
  802c68:	07000404 	movi	fp,16
  802c6c:	3823883a 	mov	r17,r7
  802c70:	00000406 	br	802c84 <___vfprintf_internal_r+0xdbc>
  802c74:	b5800204 	addi	r22,r22,8
  802c78:	ad7ffc04 	addi	r21,r21,-16
  802c7c:	a9000448 	cmpgei	r4,r21,17
  802c80:	2002f026 	beq	r4,zero,803844 <___vfprintf_internal_r+0x197c>
  802c84:	10800044 	addi	r2,r2,1
  802c88:	18c00404 	addi	r3,r3,16
  802c8c:	b4400015 	stw	r17,0(r22)
  802c90:	b7000115 	stw	fp,4(r22)
  802c94:	d8c01c15 	stw	r3,112(sp)
  802c98:	d8801b15 	stw	r2,108(sp)
  802c9c:	11000208 	cmpgei	r4,r2,8
  802ca0:	203ff426 	beq	r4,zero,802c74 <___vfprintf_internal_r+0xdac>
  802ca4:	d9801a04 	addi	r6,sp,104
  802ca8:	900b883a 	mov	r5,r18
  802cac:	9809883a 	mov	r4,r19
  802cb0:	0809c180 	call	809c18 <__sprint_r>
  802cb4:	103d8b1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  802cb8:	d8c01c17 	ldw	r3,112(sp)
  802cbc:	d8801b17 	ldw	r2,108(sp)
  802cc0:	dd802704 	addi	r22,sp,156
  802cc4:	003fec06 	br	802c78 <___vfprintf_internal_r+0xdb0>
			PAD (width - realsz, zeroes);
  802cc8:	8519c83a 	sub	r12,r16,r20
  802ccc:	033d650e 	bge	zero,r12,802264 <___vfprintf_internal_r+0x39c>
  802cd0:	01c02074 	movhi	r7,129
  802cd4:	61000450 	cmplti	r4,r12,17
  802cd8:	d8801b17 	ldw	r2,108(sp)
  802cdc:	39cbb204 	addi	r7,r7,11976
  802ce0:	2000281e 	bne	r4,zero,802d84 <___vfprintf_internal_r+0xebc>
  802ce4:	dc400e15 	stw	r17,56(sp)
  802ce8:	dc000f15 	stw	r16,60(sp)
  802cec:	b009883a 	mov	r4,r22
  802cf0:	03400404 	movi	r13,16
  802cf4:	a02d883a 	mov	r22,r20
  802cf8:	6021883a 	mov	r16,r12
  802cfc:	4029883a 	mov	r20,r8
  802d00:	3823883a 	mov	r17,r7
  802d04:	00000406 	br	802d18 <___vfprintf_internal_r+0xe50>
  802d08:	843ffc04 	addi	r16,r16,-16
  802d0c:	81400448 	cmpgei	r5,r16,17
  802d10:	21000204 	addi	r4,r4,8
  802d14:	28001426 	beq	r5,zero,802d68 <___vfprintf_internal_r+0xea0>
  802d18:	10800044 	addi	r2,r2,1
  802d1c:	18c00404 	addi	r3,r3,16
  802d20:	24400015 	stw	r17,0(r4)
  802d24:	23400115 	stw	r13,4(r4)
  802d28:	d8c01c15 	stw	r3,112(sp)
  802d2c:	d8801b15 	stw	r2,108(sp)
  802d30:	11400208 	cmpgei	r5,r2,8
  802d34:	283ff426 	beq	r5,zero,802d08 <___vfprintf_internal_r+0xe40>
  802d38:	d9801a04 	addi	r6,sp,104
  802d3c:	900b883a 	mov	r5,r18
  802d40:	9809883a 	mov	r4,r19
  802d44:	0809c180 	call	809c18 <__sprint_r>
  802d48:	103d661e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  802d4c:	843ffc04 	addi	r16,r16,-16
  802d50:	81400448 	cmpgei	r5,r16,17
  802d54:	d8c01c17 	ldw	r3,112(sp)
  802d58:	d8801b17 	ldw	r2,108(sp)
  802d5c:	d9002704 	addi	r4,sp,156
  802d60:	03400404 	movi	r13,16
  802d64:	283fec1e 	bne	r5,zero,802d18 <___vfprintf_internal_r+0xe50>
  802d68:	8019883a 	mov	r12,r16
  802d6c:	880f883a 	mov	r7,r17
  802d70:	dc000f17 	ldw	r16,60(sp)
  802d74:	dc400e17 	ldw	r17,56(sp)
  802d78:	a011883a 	mov	r8,r20
  802d7c:	b029883a 	mov	r20,r22
  802d80:	202d883a 	mov	r22,r4
  802d84:	10800044 	addi	r2,r2,1
  802d88:	1b07883a 	add	r3,r3,r12
  802d8c:	d8801b15 	stw	r2,108(sp)
  802d90:	b1c00015 	stw	r7,0(r22)
  802d94:	b3000115 	stw	r12,4(r22)
  802d98:	d8c01c15 	stw	r3,112(sp)
  802d9c:	10800208 	cmpgei	r2,r2,8
  802da0:	1002bc1e 	bne	r2,zero,803894 <___vfprintf_internal_r+0x19cc>
		PAD (dprec - size, zeroes);
  802da4:	4551c83a 	sub	r8,r8,r21
			PAD (width - realsz, zeroes);
  802da8:	b5800204 	addi	r22,r22,8
		PAD (dprec - size, zeroes);
  802dac:	023d2f0e 	bge	zero,r8,80226c <___vfprintf_internal_r+0x3a4>
  802db0:	01c02074 	movhi	r7,129
  802db4:	41000450 	cmplti	r4,r8,17
  802db8:	d8801b17 	ldw	r2,108(sp)
  802dbc:	39cbb204 	addi	r7,r7,11976
  802dc0:	2000221e 	bne	r4,zero,802e4c <___vfprintf_internal_r+0xf84>
  802dc4:	dc400e15 	stw	r17,56(sp)
  802dc8:	dc000f15 	stw	r16,60(sp)
  802dcc:	03000404 	movi	r12,16
  802dd0:	4021883a 	mov	r16,r8
  802dd4:	3823883a 	mov	r17,r7
  802dd8:	00000406 	br	802dec <___vfprintf_internal_r+0xf24>
  802ddc:	843ffc04 	addi	r16,r16,-16
  802de0:	81000448 	cmpgei	r4,r16,17
  802de4:	b5800204 	addi	r22,r22,8
  802de8:	20001426 	beq	r4,zero,802e3c <___vfprintf_internal_r+0xf74>
  802dec:	10800044 	addi	r2,r2,1
  802df0:	18c00404 	addi	r3,r3,16
  802df4:	b4400015 	stw	r17,0(r22)
  802df8:	b3000115 	stw	r12,4(r22)
  802dfc:	d8c01c15 	stw	r3,112(sp)
  802e00:	d8801b15 	stw	r2,108(sp)
  802e04:	11000208 	cmpgei	r4,r2,8
  802e08:	203ff426 	beq	r4,zero,802ddc <___vfprintf_internal_r+0xf14>
  802e0c:	d9801a04 	addi	r6,sp,104
  802e10:	900b883a 	mov	r5,r18
  802e14:	9809883a 	mov	r4,r19
  802e18:	0809c180 	call	809c18 <__sprint_r>
  802e1c:	103d311e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  802e20:	843ffc04 	addi	r16,r16,-16
  802e24:	81000448 	cmpgei	r4,r16,17
  802e28:	d8c01c17 	ldw	r3,112(sp)
  802e2c:	d8801b17 	ldw	r2,108(sp)
  802e30:	dd802704 	addi	r22,sp,156
  802e34:	03000404 	movi	r12,16
  802e38:	203fec1e 	bne	r4,zero,802dec <___vfprintf_internal_r+0xf24>
  802e3c:	8011883a 	mov	r8,r16
  802e40:	880f883a 	mov	r7,r17
  802e44:	dc000f17 	ldw	r16,60(sp)
  802e48:	dc400e17 	ldw	r17,56(sp)
  802e4c:	10800044 	addi	r2,r2,1
  802e50:	1a07883a 	add	r3,r3,r8
  802e54:	d8801b15 	stw	r2,108(sp)
  802e58:	b1c00015 	stw	r7,0(r22)
  802e5c:	b2000115 	stw	r8,4(r22)
  802e60:	d8c01c15 	stw	r3,112(sp)
  802e64:	10800208 	cmpgei	r2,r2,8
  802e68:	1001341e 	bne	r2,zero,80333c <___vfprintf_internal_r+0x1474>
  802e6c:	b5800204 	addi	r22,r22,8
  802e70:	003cfe06 	br	80226c <___vfprintf_internal_r+0x3a4>
		FLUSH ();	/* copy out the I/O vectors */
  802e74:	d9801a04 	addi	r6,sp,104
  802e78:	900b883a 	mov	r5,r18
  802e7c:	9809883a 	mov	r4,r19
  802e80:	0809c180 	call	809c18 <__sprint_r>
  802e84:	103d1126 	beq	r2,zero,8022cc <___vfprintf_internal_r+0x404>
  802e88:	003d1606 	br	8022e4 <___vfprintf_internal_r+0x41c>
				if (ndig > 1 || flags & ALT) {
  802e8c:	d8800817 	ldw	r2,32(sp)
			PRINT (cp, size);
  802e90:	da001b17 	ldw	r8,108(sp)
					PRINT ("0", 1);
  802e94:	18c00044 	addi	r3,r3,1
				if (ndig > 1 || flags & ALT) {
  802e98:	10800088 	cmpgei	r2,r2,2
			PRINT (cp, size);
  802e9c:	45400044 	addi	r21,r8,1
  802ea0:	b7000204 	addi	fp,r22,8
				if (ndig > 1 || flags & ALT) {
  802ea4:	1000f326 	beq	r2,zero,803274 <___vfprintf_internal_r+0x13ac>
					PRINT (cp, 1);
  802ea8:	00800044 	movi	r2,1
  802eac:	b0800115 	stw	r2,4(r22)
  802eb0:	b4400015 	stw	r17,0(r22)
  802eb4:	d8c01c15 	stw	r3,112(sp)
  802eb8:	dd401b15 	stw	r21,108(sp)
  802ebc:	a8800210 	cmplti	r2,r21,8
  802ec0:	1001d826 	beq	r2,zero,803624 <___vfprintf_internal_r+0x175c>
					PRINT (decimal_point, decp_len);
  802ec4:	d8800b17 	ldw	r2,44(sp)
  802ec8:	d9000d17 	ldw	r4,52(sp)
  802ecc:	ad400044 	addi	r21,r21,1
  802ed0:	1887883a 	add	r3,r3,r2
  802ed4:	e0800115 	stw	r2,4(fp)
  802ed8:	e1000015 	stw	r4,0(fp)
  802edc:	d8c01c15 	stw	r3,112(sp)
  802ee0:	dd401b15 	stw	r21,108(sp)
  802ee4:	a8800208 	cmpgei	r2,r21,8
  802ee8:	1001d71e 	bne	r2,zero,803648 <___vfprintf_internal_r+0x1780>
  802eec:	e7000204 	addi	fp,fp,8
					if (_fpvalue) {
  802ef0:	d9000917 	ldw	r4,36(sp)
  802ef4:	d9400a17 	ldw	r5,40(sp)
						PRINT (cp, ndig - 1);
  802ef8:	aa000044 	addi	r8,r21,1
					if (_fpvalue) {
  802efc:	000d883a 	mov	r6,zero
  802f00:	000f883a 	mov	r7,zero
  802f04:	d8c00e15 	stw	r3,56(sp)
						PRINT (cp, ndig - 1);
  802f08:	da000715 	stw	r8,28(sp)
					if (_fpvalue) {
  802f0c:	080ead80 	call	80ead8 <__eqdf2>
						PAD (ndig - 1, zeroes);
  802f10:	d8c00817 	ldw	r3,32(sp)
						PRINT (cp, ndig - 1);
  802f14:	da000717 	ldw	r8,28(sp)
  802f18:	e5800204 	addi	r22,fp,8
						PAD (ndig - 1, zeroes);
  802f1c:	1affffc4 	addi	r11,r3,-1
					if (_fpvalue) {
  802f20:	d8c00e17 	ldw	r3,56(sp)
  802f24:	1000e526 	beq	r2,zero,8032bc <___vfprintf_internal_r+0x13f4>
					cp++;
  802f28:	8a400044 	addi	r9,r17,1
						PRINT (cp, ndig - 1);
  802f2c:	1ac7883a 	add	r3,r3,r11
  802f30:	da001b15 	stw	r8,108(sp)
  802f34:	e2400015 	stw	r9,0(fp)
  802f38:	e2c00115 	stw	r11,4(fp)
  802f3c:	d8c01c15 	stw	r3,112(sp)
  802f40:	42000208 	cmpgei	r8,r8,8
  802f44:	40013f1e 	bne	r8,zero,803444 <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  802f48:	e0800404 	addi	r2,fp,16
  802f4c:	aa000084 	addi	r8,r21,2
						PRINT (cp, ndig - 1);
  802f50:	b039883a 	mov	fp,r22
				PRINT (expstr, expsize);
  802f54:	102d883a 	mov	r22,r2
  802f58:	d9001017 	ldw	r4,64(sp)
  802f5c:	d8801644 	addi	r2,sp,89
  802f60:	da001b15 	stw	r8,108(sp)
  802f64:	20c7883a 	add	r3,r4,r3
  802f68:	e0800015 	stw	r2,0(fp)
  802f6c:	e1000115 	stw	r4,4(fp)
  802f70:	d8c01c15 	stw	r3,112(sp)
  802f74:	42000210 	cmplti	r8,r8,8
  802f78:	403cc91e 	bne	r8,zero,8022a0 <___vfprintf_internal_r+0x3d8>
  802f7c:	d9801a04 	addi	r6,sp,104
  802f80:	900b883a 	mov	r5,r18
  802f84:	9809883a 	mov	r4,r19
  802f88:	0809c180 	call	809c18 <__sprint_r>
  802f8c:	103cd51e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  802f90:	d8c01c17 	ldw	r3,112(sp)
				PRINT (expstr, expsize);
  802f94:	dd802704 	addi	r22,sp,156
  802f98:	003cc106 	br	8022a0 <___vfprintf_internal_r+0x3d8>
  802f9c:	2019883a 	mov	r12,r4
  802fa0:	003e9e06 	br	802a1c <___vfprintf_internal_r+0xb54>
			PAD (width - realsz, blanks);
  802fa4:	03002074 	movhi	r12,129
  802fa8:	39000450 	cmplti	r4,r7,17
  802fac:	d8801b17 	ldw	r2,108(sp)
  802fb0:	630bb604 	addi	r12,r12,11992
  802fb4:	2000321e 	bne	r4,zero,803080 <___vfprintf_internal_r+0x11b8>
  802fb8:	dc401115 	stw	r17,68(sp)
  802fbc:	b009883a 	mov	r4,r22
  802fc0:	9023883a 	mov	r17,r18
  802fc4:	a82d883a 	mov	r22,r21
  802fc8:	ddc01215 	stw	r23,72(sp)
  802fcc:	03c00404 	movi	r15,16
  802fd0:	a02f883a 	mov	r23,r20
  802fd4:	db800e15 	stw	r14,56(sp)
  802fd8:	8029883a 	mov	r20,r16
  802fdc:	db400f15 	stw	r13,60(sp)
  802fe0:	402b883a 	mov	r21,r8
  802fe4:	3821883a 	mov	r16,r7
  802fe8:	6025883a 	mov	r18,r12
  802fec:	00000406 	br	803000 <___vfprintf_internal_r+0x1138>
  802ff0:	843ffc04 	addi	r16,r16,-16
  802ff4:	81800448 	cmpgei	r6,r16,17
  802ff8:	21000204 	addi	r4,r4,8
  802ffc:	30001426 	beq	r6,zero,803050 <___vfprintf_internal_r+0x1188>
  803000:	10800044 	addi	r2,r2,1
  803004:	18c00404 	addi	r3,r3,16
  803008:	24800015 	stw	r18,0(r4)
  80300c:	23c00115 	stw	r15,4(r4)
  803010:	d8c01c15 	stw	r3,112(sp)
  803014:	d8801b15 	stw	r2,108(sp)
  803018:	11800208 	cmpgei	r6,r2,8
  80301c:	303ff426 	beq	r6,zero,802ff0 <___vfprintf_internal_r+0x1128>
  803020:	d9801a04 	addi	r6,sp,104
  803024:	880b883a 	mov	r5,r17
  803028:	9809883a 	mov	r4,r19
  80302c:	0809c180 	call	809c18 <__sprint_r>
  803030:	1002021e 	bne	r2,zero,80383c <___vfprintf_internal_r+0x1974>
  803034:	843ffc04 	addi	r16,r16,-16
  803038:	81800448 	cmpgei	r6,r16,17
  80303c:	d8c01c17 	ldw	r3,112(sp)
  803040:	d8801b17 	ldw	r2,108(sp)
  803044:	d9002704 	addi	r4,sp,156
  803048:	03c00404 	movi	r15,16
  80304c:	303fec1e 	bne	r6,zero,803000 <___vfprintf_internal_r+0x1138>
  803050:	800f883a 	mov	r7,r16
  803054:	9019883a 	mov	r12,r18
  803058:	a021883a 	mov	r16,r20
  80305c:	8825883a 	mov	r18,r17
  803060:	b829883a 	mov	r20,r23
  803064:	db800e17 	ldw	r14,56(sp)
  803068:	db400f17 	ldw	r13,60(sp)
  80306c:	ddc01217 	ldw	r23,72(sp)
  803070:	dc401117 	ldw	r17,68(sp)
  803074:	a811883a 	mov	r8,r21
  803078:	b02b883a 	mov	r21,r22
  80307c:	202d883a 	mov	r22,r4
  803080:	10800044 	addi	r2,r2,1
  803084:	19c7883a 	add	r3,r3,r7
  803088:	d8801b15 	stw	r2,108(sp)
  80308c:	b3000015 	stw	r12,0(r22)
  803090:	b1c00115 	stw	r7,4(r22)
  803094:	d8c01c15 	stw	r3,112(sp)
  803098:	10800208 	cmpgei	r2,r2,8
  80309c:	1001b01e 	bne	r2,zero,803760 <___vfprintf_internal_r+0x1898>
  8030a0:	b5800204 	addi	r22,r22,8
  8030a4:	003c5206 	br	8021f0 <___vfprintf_internal_r+0x328>
			PRINT (&sign, 1);
  8030a8:	d9801a04 	addi	r6,sp,104
  8030ac:	900b883a 	mov	r5,r18
  8030b0:	9809883a 	mov	r4,r19
  8030b4:	da001115 	stw	r8,68(sp)
  8030b8:	db400f15 	stw	r13,60(sp)
  8030bc:	db800e15 	stw	r14,56(sp)
  8030c0:	0809c180 	call	809c18 <__sprint_r>
  8030c4:	103c871e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
			PRINT (ox, 2);
  8030c8:	d8c01c17 	ldw	r3,112(sp)
			PRINT (&sign, 1);
  8030cc:	da001117 	ldw	r8,68(sp)
  8030d0:	db400f17 	ldw	r13,60(sp)
  8030d4:	db800e17 	ldw	r14,56(sp)
  8030d8:	dd802704 	addi	r22,sp,156
  8030dc:	003c5206 	br	802228 <___vfprintf_internal_r+0x360>
			PRINT (ox, 2);
  8030e0:	d9801a04 	addi	r6,sp,104
  8030e4:	900b883a 	mov	r5,r18
  8030e8:	9809883a 	mov	r4,r19
  8030ec:	da000f15 	stw	r8,60(sp)
  8030f0:	db400e15 	stw	r13,56(sp)
  8030f4:	0809c180 	call	809c18 <__sprint_r>
  8030f8:	103c7a1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  8030fc:	d8c01c17 	ldw	r3,112(sp)
			PRINT (ox, 2);
  803100:	da000f17 	ldw	r8,60(sp)
  803104:	db400e17 	ldw	r13,56(sp)
  803108:	dd802704 	addi	r22,sp,156
  80310c:	003c5306 	br	80225c <___vfprintf_internal_r+0x394>
				} else if (expt <= 0) {
  803110:	dd401417 	ldw	r21,80(sp)
  803114:	0541a00e 	bge	zero,r21,803798 <___vfprintf_internal_r+0x18d0>
					PRINTANDPAD(cp, convbuf + ndig,
  803118:	d8800717 	ldw	r2,28(sp)
  80311c:	d9000817 	ldw	r4,32(sp)
  803120:	102b883a 	mov	r21,r2
  803124:	2080b916 	blt	r4,r2,80340c <___vfprintf_internal_r+0x1544>
  803128:	05400a0e 	bge	zero,r21,803154 <___vfprintf_internal_r+0x128c>
  80312c:	d8801b17 	ldw	r2,108(sp)
  803130:	1d47883a 	add	r3,r3,r21
  803134:	b4400015 	stw	r17,0(r22)
  803138:	10800044 	addi	r2,r2,1
  80313c:	d8801b15 	stw	r2,108(sp)
  803140:	b5400115 	stw	r21,4(r22)
  803144:	d8c01c15 	stw	r3,112(sp)
  803148:	10800208 	cmpgei	r2,r2,8
  80314c:	1002b51e 	bne	r2,zero,803c24 <___vfprintf_internal_r+0x1d5c>
  803150:	b5800204 	addi	r22,r22,8
  803154:	a800cd16 	blt	r21,zero,80348c <___vfprintf_internal_r+0x15c4>
  803158:	d8800717 	ldw	r2,28(sp)
  80315c:	156bc83a 	sub	r21,r2,r21
  803160:	0540dc16 	blt	zero,r21,8034d4 <___vfprintf_internal_r+0x160c>
					if (expt < ndig || flags & ALT)
  803164:	dd401417 	ldw	r21,80(sp)
  803168:	d8800817 	ldw	r2,32(sp)
  80316c:	a880aa0e 	bge	r21,r2,803418 <___vfprintf_internal_r+0x1550>
					    PRINT (decimal_point, decp_len);
  803170:	d8800d17 	ldw	r2,52(sp)
  803174:	d9000b17 	ldw	r4,44(sp)
  803178:	b0800015 	stw	r2,0(r22)
  80317c:	d8801b17 	ldw	r2,108(sp)
  803180:	1907883a 	add	r3,r3,r4
  803184:	b1000115 	stw	r4,4(r22)
  803188:	10800044 	addi	r2,r2,1
  80318c:	d8801b15 	stw	r2,108(sp)
  803190:	d8c01c15 	stw	r3,112(sp)
  803194:	10800208 	cmpgei	r2,r2,8
  803198:	1002991e 	bne	r2,zero,803c00 <___vfprintf_internal_r+0x1d38>
  80319c:	b5800204 	addi	r22,r22,8
					PRINTANDPAD (cp, convbuf + ndig,
  8031a0:	d9000817 	ldw	r4,32(sp)
  8031a4:	d9400717 	ldw	r5,28(sp)
  8031a8:	2545c83a 	sub	r2,r4,r21
  8031ac:	2149c83a 	sub	r4,r4,r5
  8031b0:	102b883a 	mov	r21,r2
  8031b4:	2080010e 	bge	r4,r2,8031bc <___vfprintf_internal_r+0x12f4>
  8031b8:	202b883a 	mov	r21,r4
  8031bc:	05400c0e 	bge	zero,r21,8031f0 <___vfprintf_internal_r+0x1328>
					cp += lead;
  8031c0:	d9000717 	ldw	r4,28(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  8031c4:	1d47883a 	add	r3,r3,r21
  8031c8:	b5400115 	stw	r21,4(r22)
					cp += lead;
  8031cc:	8913883a 	add	r9,r17,r4
					PRINTANDPAD (cp, convbuf + ndig,
  8031d0:	d9001b17 	ldw	r4,108(sp)
  8031d4:	b2400015 	stw	r9,0(r22)
  8031d8:	d8c01c15 	stw	r3,112(sp)
  8031dc:	21000044 	addi	r4,r4,1
  8031e0:	d9001b15 	stw	r4,108(sp)
  8031e4:	21000208 	cmpgei	r4,r4,8
  8031e8:	2002b91e 	bne	r4,zero,803cd0 <___vfprintf_internal_r+0x1e08>
  8031ec:	b5800204 	addi	r22,r22,8
  8031f0:	a800010e 	bge	r21,zero,8031f8 <___vfprintf_internal_r+0x1330>
  8031f4:	002b883a 	mov	r21,zero
  8031f8:	156bc83a 	sub	r21,r2,r21
  8031fc:	057c280e 	bge	zero,r21,8022a0 <___vfprintf_internal_r+0x3d8>
  803200:	01c02074 	movhi	r7,129
  803204:	a9000450 	cmplti	r4,r21,17
  803208:	d8801b17 	ldw	r2,108(sp)
  80320c:	39cbb204 	addi	r7,r7,11976
  803210:	20018d1e 	bne	r4,zero,803848 <___vfprintf_internal_r+0x1980>
  803214:	07000404 	movi	fp,16
  803218:	3823883a 	mov	r17,r7
  80321c:	00000406 	br	803230 <___vfprintf_internal_r+0x1368>
  803220:	b5800204 	addi	r22,r22,8
  803224:	ad7ffc04 	addi	r21,r21,-16
  803228:	a9000448 	cmpgei	r4,r21,17
  80322c:	20018526 	beq	r4,zero,803844 <___vfprintf_internal_r+0x197c>
  803230:	10800044 	addi	r2,r2,1
  803234:	18c00404 	addi	r3,r3,16
  803238:	b4400015 	stw	r17,0(r22)
  80323c:	b7000115 	stw	fp,4(r22)
  803240:	d8c01c15 	stw	r3,112(sp)
  803244:	d8801b15 	stw	r2,108(sp)
  803248:	11000208 	cmpgei	r4,r2,8
  80324c:	203ff426 	beq	r4,zero,803220 <___vfprintf_internal_r+0x1358>
  803250:	d9801a04 	addi	r6,sp,104
  803254:	900b883a 	mov	r5,r18
  803258:	9809883a 	mov	r4,r19
  80325c:	0809c180 	call	809c18 <__sprint_r>
  803260:	103c201e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  803264:	d8c01c17 	ldw	r3,112(sp)
  803268:	d8801b17 	ldw	r2,108(sp)
  80326c:	dd802704 	addi	r22,sp,156
  803270:	003fec06 	br	803224 <___vfprintf_internal_r+0x135c>
				if (ndig > 1 || flags & ALT) {
  803274:	d8800417 	ldw	r2,16(sp)
  803278:	1080004c 	andi	r2,r2,1
  80327c:	103f0a1e 	bne	r2,zero,802ea8 <___vfprintf_internal_r+0xfe0>
					PRINT (cp, 1);
  803280:	00800044 	movi	r2,1
  803284:	dd401b15 	stw	r21,108(sp)
  803288:	b4400015 	stw	r17,0(r22)
  80328c:	b0800115 	stw	r2,4(r22)
  803290:	d8c01c15 	stw	r3,112(sp)
  803294:	ad400208 	cmpgei	r21,r21,8
  803298:	a8006a1e 	bne	r21,zero,803444 <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  80329c:	42000084 	addi	r8,r8,2
  8032a0:	b5800404 	addi	r22,r22,16
  8032a4:	003f2c06 	br	802f58 <___vfprintf_internal_r+0x1090>
			if (_uquad != 0 || prec != 0) {
  8032a8:	4002511e 	bne	r8,zero,803bf0 <___vfprintf_internal_r+0x1d28>
  8032ac:	0011883a 	mov	r8,zero
  8032b0:	002b883a 	mov	r21,zero
			cp = buf + BUF;
  8032b4:	dc402704 	addi	r17,sp,156
  8032b8:	003d4806 	br	8027dc <___vfprintf_internal_r+0x914>
						PAD (ndig - 1, zeroes);
  8032bc:	02ff260e 	bge	zero,r11,802f58 <___vfprintf_internal_r+0x1090>
  8032c0:	58800450 	cmplti	r2,r11,17
  8032c4:	01c02074 	movhi	r7,129
  8032c8:	1002d01e 	bne	r2,zero,803e0c <___vfprintf_internal_r+0x1f44>
  8032cc:	39cbb204 	addi	r7,r7,11976
  8032d0:	dc000715 	stw	r16,28(sp)
  8032d4:	05800404 	movi	r22,16
  8032d8:	5823883a 	mov	r17,r11
  8032dc:	402b883a 	mov	r21,r8
  8032e0:	3821883a 	mov	r16,r7
  8032e4:	00000506 	br	8032fc <___vfprintf_internal_r+0x1434>
  8032e8:	e7000204 	addi	fp,fp,8
  8032ec:	8c7ffc04 	addi	r17,r17,-16
  8032f0:	88800448 	cmpgei	r2,r17,17
  8032f4:	1001c526 	beq	r2,zero,803a0c <___vfprintf_internal_r+0x1b44>
  8032f8:	ad400044 	addi	r21,r21,1
  8032fc:	18c00404 	addi	r3,r3,16
  803300:	e4000015 	stw	r16,0(fp)
  803304:	e5800115 	stw	r22,4(fp)
  803308:	d8c01c15 	stw	r3,112(sp)
  80330c:	dd401b15 	stw	r21,108(sp)
  803310:	a8800208 	cmpgei	r2,r21,8
  803314:	103ff426 	beq	r2,zero,8032e8 <___vfprintf_internal_r+0x1420>
  803318:	d9801a04 	addi	r6,sp,104
  80331c:	900b883a 	mov	r5,r18
  803320:	9809883a 	mov	r4,r19
  803324:	0809c180 	call	809c18 <__sprint_r>
  803328:	103bee1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  80332c:	dd401b17 	ldw	r21,108(sp)
  803330:	d8c01c17 	ldw	r3,112(sp)
  803334:	df002704 	addi	fp,sp,156
  803338:	003fec06 	br	8032ec <___vfprintf_internal_r+0x1424>
		PAD (dprec - size, zeroes);
  80333c:	d9801a04 	addi	r6,sp,104
  803340:	900b883a 	mov	r5,r18
  803344:	9809883a 	mov	r4,r19
  803348:	0809c180 	call	809c18 <__sprint_r>
  80334c:	103be51e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  803350:	d8c01c17 	ldw	r3,112(sp)
		PAD (dprec - size, zeroes);
  803354:	dd802704 	addi	r22,sp,156
  803358:	003bc406 	br	80226c <___vfprintf_internal_r+0x3a4>
					if (expt < ndig || flags & ALT) {
  80335c:	d8800417 	ldw	r2,16(sp)
  803360:	1080004c 	andi	r2,r2,1
  803364:	103bce26 	beq	r2,zero,8022a0 <___vfprintf_internal_r+0x3d8>
  803368:	003e2b06 	br	802c18 <___vfprintf_internal_r+0xd50>
			cp = buf + BUF;
  80336c:	dc402704 	addi	r17,sp,156
  803370:	003d1a06 	br	8027dc <___vfprintf_internal_r+0x914>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  803374:	d9000517 	ldw	r4,20(sp)
  803378:	2005d7fa 	srai	r2,r4,31
  80337c:	19000015 	stw	r4,0(r3)
  803380:	18800115 	stw	r2,4(r3)
  803384:	003b0406 	br	801f98 <___vfprintf_internal_r+0xd0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
  803388:	18800017 	ldw	r2,0(r3)
  80338c:	d8800915 	stw	r2,36(sp)
  803390:	18800117 	ldw	r2,4(r3)
  803394:	d8800a15 	stw	r2,40(sp)
  803398:	003c7406 	br	80256c <___vfprintf_internal_r+0x6a4>
			_uquad = UARG ();
  80339c:	25000017 	ldw	r20,0(r4)
  8033a0:	002b883a 	mov	r21,zero
  8033a4:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  8033a8:	00800044 	movi	r2,1
  8033ac:	003c0006 	br	8023b0 <___vfprintf_internal_r+0x4e8>
				ox[0] = '0';
  8033b0:	00800c04 	movi	r2,48
  8033b4:	d8801385 	stb	r2,78(sp)
				ox[1] = ch;
  8033b8:	d8c013c5 	stb	r3,79(sp)
				flags |= HEXPREFIX;
  8033bc:	63000094 	ori	r12,r12,2
			base = HEX;
  8033c0:	00800084 	movi	r2,2
  8033c4:	003bfa06 	br	8023b0 <___vfprintf_internal_r+0x4e8>
			_uquad = UARG ();
  8033c8:	25000017 	ldw	r20,0(r4)
  8033cc:	002b883a 	mov	r21,zero
  8033d0:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  8033d4:	0005883a 	mov	r2,zero
  8033d8:	003bf506 	br	8023b0 <___vfprintf_internal_r+0x4e8>
hex:			_uquad = UARG ();
  8033dc:	2d000017 	ldw	r20,0(r5)
  8033e0:	002b883a 	mov	r21,zero
  8033e4:	d9000615 	stw	r4,24(sp)
  8033e8:	003d1f06 	br	802868 <___vfprintf_internal_r+0x9a0>
			_uquad = SARG ();
  8033ec:	25000017 	ldw	r20,0(r4)
  8033f0:	d8c00615 	stw	r3,24(sp)
  8033f4:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8033f8:	a805883a 	mov	r2,r21
  8033fc:	003ce506 	br	802794 <___vfprintf_internal_r+0x8cc>
			width = -width;
  803400:	0421c83a 	sub	r16,zero,r16
			width = GET_ARG (n, ap, int);
  803404:	d8800615 	stw	r2,24(sp)
  803408:	003db006 	br	802acc <___vfprintf_internal_r+0xc04>
  80340c:	202b883a 	mov	r21,r4
					PRINTANDPAD(cp, convbuf + ndig,
  803410:	057f4616 	blt	zero,r21,80312c <___vfprintf_internal_r+0x1264>
  803414:	003f4f06 	br	803154 <___vfprintf_internal_r+0x128c>
					if (expt < ndig || flags & ALT)
  803418:	d8800417 	ldw	r2,16(sp)
  80341c:	1080004c 	andi	r2,r2,1
  803420:	103f531e 	bne	r2,zero,803170 <___vfprintf_internal_r+0x12a8>
					PRINTANDPAD (cp, convbuf + ndig,
  803424:	d9000817 	ldw	r4,32(sp)
  803428:	d9400717 	ldw	r5,28(sp)
  80342c:	2545c83a 	sub	r2,r4,r21
  803430:	2179c83a 	sub	fp,r4,r5
  803434:	102b883a 	mov	r21,r2
  803438:	e0bf6d0e 	bge	fp,r2,8031f0 <___vfprintf_internal_r+0x1328>
  80343c:	e02b883a 	mov	r21,fp
  803440:	003f6b06 	br	8031f0 <___vfprintf_internal_r+0x1328>
					PRINT (cp, 1);
  803444:	d9801a04 	addi	r6,sp,104
  803448:	900b883a 	mov	r5,r18
  80344c:	9809883a 	mov	r4,r19
  803450:	0809c180 	call	809c18 <__sprint_r>
  803454:	103ba31e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
				PRINT (expstr, expsize);
  803458:	da001b17 	ldw	r8,108(sp)
  80345c:	d8c01c17 	ldw	r3,112(sp)
  803460:	dd802904 	addi	r22,sp,164
  803464:	42000044 	addi	r8,r8,1
					PRINT (cp, 1);
  803468:	df002704 	addi	fp,sp,156
  80346c:	003eba06 	br	802f58 <___vfprintf_internal_r+0x1090>
rflag:		ch = *fmt++;
  803470:	bf000043 	ldbu	fp,1(r23)
				flags |= QUADINT;
  803474:	63000814 	ori	r12,r12,32
				fmt++;
  803478:	bdc00044 	addi	r23,r23,1
  80347c:	e2c03fcc 	andi	r11,fp,255
  803480:	5ac0201c 	xori	r11,r11,128
  803484:	5affe004 	addi	r11,r11,-128
  803488:	003ad406 	br	801fdc <___vfprintf_internal_r+0x114>
					PRINTANDPAD(cp, convbuf + ndig,
  80348c:	002b883a 	mov	r21,zero
  803490:	003f3106 	br	803158 <___vfprintf_internal_r+0x1290>
						PRINT (decimal_point, decp_len);
  803494:	d9801a04 	addi	r6,sp,104
  803498:	900b883a 	mov	r5,r18
  80349c:	9809883a 	mov	r4,r19
  8034a0:	0809c180 	call	809c18 <__sprint_r>
  8034a4:	103b8f1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  8034a8:	d8c01c17 	ldw	r3,112(sp)
						PRINT (decimal_point, decp_len);
  8034ac:	dd802704 	addi	r22,sp,156
  8034b0:	003de506 	br	802c48 <___vfprintf_internal_r+0xd80>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  8034b4:	408001f0 	cmpltui	r2,r8,7
  8034b8:	402b883a 	mov	r21,r8
  8034bc:	1001a026 	beq	r2,zero,803b40 <___vfprintf_internal_r+0x1c78>
				cp = "(null)";
  8034c0:	04402074 	movhi	r17,129
  8034c4:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  8034c8:	d8c00615 	stw	r3,24(sp)
				cp = "(null)";
  8034cc:	8c4baf04 	addi	r17,r17,11964
  8034d0:	003b3a06 	br	8021bc <___vfprintf_internal_r+0x2f4>
					PRINTANDPAD(cp, convbuf + ndig,
  8034d4:	01c02074 	movhi	r7,129
  8034d8:	a9000450 	cmplti	r4,r21,17
  8034dc:	d8801b17 	ldw	r2,108(sp)
  8034e0:	39cbb204 	addi	r7,r7,11976
  8034e4:	2001831e 	bne	r4,zero,803af4 <___vfprintf_internal_r+0x1c2c>
  8034e8:	dc000e15 	stw	r16,56(sp)
  8034ec:	07000404 	movi	fp,16
  8034f0:	3821883a 	mov	r16,r7
  8034f4:	00000406 	br	803508 <___vfprintf_internal_r+0x1640>
  8034f8:	b5800204 	addi	r22,r22,8
  8034fc:	ad7ffc04 	addi	r21,r21,-16
  803500:	a9000448 	cmpgei	r4,r21,17
  803504:	20017926 	beq	r4,zero,803aec <___vfprintf_internal_r+0x1c24>
  803508:	10800044 	addi	r2,r2,1
  80350c:	18c00404 	addi	r3,r3,16
  803510:	b4000015 	stw	r16,0(r22)
  803514:	b7000115 	stw	fp,4(r22)
  803518:	d8c01c15 	stw	r3,112(sp)
  80351c:	d8801b15 	stw	r2,108(sp)
  803520:	11000208 	cmpgei	r4,r2,8
  803524:	203ff426 	beq	r4,zero,8034f8 <___vfprintf_internal_r+0x1630>
  803528:	d9801a04 	addi	r6,sp,104
  80352c:	900b883a 	mov	r5,r18
  803530:	9809883a 	mov	r4,r19
  803534:	0809c180 	call	809c18 <__sprint_r>
  803538:	103b6a1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  80353c:	d8c01c17 	ldw	r3,112(sp)
  803540:	d8801b17 	ldw	r2,108(sp)
  803544:	dd802704 	addi	r22,sp,156
  803548:	003fec06 	br	8034fc <___vfprintf_internal_r+0x1634>
  80354c:	1805883a 	mov	r2,r3
				} else if (expt >= ndig) { /* fixed g fmt */
  803550:	d8c00817 	ldw	r3,32(sp)
  803554:	10c15016 	blt	r2,r3,803a98 <___vfprintf_internal_r+0x1bd0>
					if (flags & ALT)
  803558:	6300004c 	andi	r12,r12,1
  80355c:	60017f1e 	bne	r12,zero,803b5c <___vfprintf_internal_r+0x1c94>
		realsz = dprec > size ? dprec : size;
  803560:	1029883a 	mov	r20,r2
  803564:	1000010e 	bge	r2,zero,80356c <___vfprintf_internal_r+0x16a4>
  803568:	0029883a 	mov	r20,zero
  80356c:	dd400717 	ldw	r21,28(sp)
  803570:	070019c4 	movi	fp,103
  803574:	00015006 	br	803ab8 <___vfprintf_internal_r+0x1bf0>
			cp = buf + BUF;
  803578:	dc402704 	addi	r17,sp,156
  80357c:	a805883a 	mov	r2,r21
  803580:	dc000715 	stw	r16,28(sp)
  803584:	902b883a 	mov	r21,r18
  803588:	8821883a 	mov	r16,r17
  80358c:	db000415 	stw	r12,16(sp)
  803590:	a023883a 	mov	r17,r20
  803594:	da000e15 	stw	r8,56(sp)
  803598:	9829883a 	mov	r20,r19
  80359c:	1025883a 	mov	r18,r2
  8035a0:	6827883a 	mov	r19,r13
					  *--cp = to_char (_uquad % 10);
  8035a4:	8809883a 	mov	r4,r17
  8035a8:	900b883a 	mov	r5,r18
  8035ac:	01800284 	movi	r6,10
  8035b0:	000f883a 	mov	r7,zero
  8035b4:	080d1180 	call	80d118 <__umoddi3>
  8035b8:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  8035bc:	8809883a 	mov	r4,r17
  8035c0:	900b883a 	mov	r5,r18
  8035c4:	01800284 	movi	r6,10
  8035c8:	000f883a 	mov	r7,zero
					  *--cp = to_char (_uquad % 10);
  8035cc:	80bfffc5 	stb	r2,-1(r16)
					  _uquad /= 10;
  8035d0:	080caf80 	call	80caf8 <__udivdi3>
  8035d4:	900d883a 	mov	r6,r18
  8035d8:	880f883a 	mov	r7,r17
					  *--cp = to_char (_uquad % 10);
  8035dc:	843fffc4 	addi	r16,r16,-1
					  _uquad /= 10;
  8035e0:	1023883a 	mov	r17,r2
  8035e4:	1825883a 	mov	r18,r3
					} while (_uquad != 0);
  8035e8:	303fee1e 	bne	r6,zero,8035a4 <___vfprintf_internal_r+0x16dc>
  8035ec:	39c002a8 	cmpgeui	r7,r7,10
  8035f0:	383fec1e 	bne	r7,zero,8035a4 <___vfprintf_internal_r+0x16dc>
			size = buf + BUF - cp;
  8035f4:	8023883a 	mov	r17,r16
  8035f8:	d8802704 	addi	r2,sp,156
  8035fc:	981b883a 	mov	r13,r19
  803600:	a825883a 	mov	r18,r21
  803604:	dc000717 	ldw	r16,28(sp)
  803608:	da000e17 	ldw	r8,56(sp)
  80360c:	a027883a 	mov	r19,r20
  803610:	146bc83a 	sub	r21,r2,r17
  803614:	003c7106 	br	8027dc <___vfprintf_internal_r+0x914>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  803618:	d8800517 	ldw	r2,20(sp)
  80361c:	18800015 	stw	r2,0(r3)
  803620:	003a5d06 	br	801f98 <___vfprintf_internal_r+0xd0>
					PRINT (cp, 1);
  803624:	d9801a04 	addi	r6,sp,104
  803628:	900b883a 	mov	r5,r18
  80362c:	9809883a 	mov	r4,r19
  803630:	0809c180 	call	809c18 <__sprint_r>
  803634:	103b2b1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
					PRINT (decimal_point, decp_len);
  803638:	d8c01c17 	ldw	r3,112(sp)
  80363c:	dd401b17 	ldw	r21,108(sp)
					PRINT (cp, 1);
  803640:	df002704 	addi	fp,sp,156
  803644:	003e1f06 	br	802ec4 <___vfprintf_internal_r+0xffc>
					PRINT (decimal_point, decp_len);
  803648:	d9801a04 	addi	r6,sp,104
  80364c:	900b883a 	mov	r5,r18
  803650:	9809883a 	mov	r4,r19
  803654:	0809c180 	call	809c18 <__sprint_r>
  803658:	103b221e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
						PRINT (cp, ndig - 1);
  80365c:	d8c01c17 	ldw	r3,112(sp)
  803660:	dd401b17 	ldw	r21,108(sp)
					PRINT (decimal_point, decp_len);
  803664:	df002704 	addi	fp,sp,156
  803668:	003e2106 	br	802ef0 <___vfprintf_internal_r+0x1028>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  80366c:	d8801804 	addi	r2,sp,96
  803670:	d8800315 	stw	r2,12(sp)
  803674:	d9400917 	ldw	r5,36(sp)
  803678:	d8801504 	addi	r2,sp,84
  80367c:	d8800215 	stw	r2,8(sp)
  803680:	d8801404 	addi	r2,sp,80
  803684:	da000015 	stw	r8,0(sp)
  803688:	180d883a 	mov	r6,r3
  80368c:	d8800115 	stw	r2,4(sp)
  803690:	01c000c4 	movi	r7,3
  803694:	9809883a 	mov	r4,r19
  803698:	db000f15 	stw	r12,60(sp)
  80369c:	da000815 	stw	r8,32(sp)
  8036a0:	d8c00715 	stw	r3,28(sp)
  8036a4:	08042b80 	call	8042b8 <_dtoa_r>
		bp = digits + ndigits;
  8036a8:	da000817 	ldw	r8,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8036ac:	1023883a 	mov	r17,r2
		bp = digits + ndigits;
  8036b0:	d8c00717 	ldw	r3,28(sp)
  8036b4:	1213883a 	add	r9,r2,r8
			if (*digits == '0' && value)
  8036b8:	88800007 	ldb	r2,0(r17)
  8036bc:	db000f17 	ldw	r12,60(sp)
  8036c0:	10800c20 	cmpeqi	r2,r2,48
  8036c4:	1001951e 	bne	r2,zero,803d1c <___vfprintf_internal_r+0x1e54>
			bp += *decpt;
  8036c8:	d8801417 	ldw	r2,80(sp)
  8036cc:	4893883a 	add	r9,r9,r2
		if (value == 0)	/* kludge for __dtoa irregularity */
  8036d0:	d9000917 	ldw	r4,36(sp)
  8036d4:	000d883a 	mov	r6,zero
  8036d8:	000f883a 	mov	r7,zero
  8036dc:	180b883a 	mov	r5,r3
  8036e0:	da400f15 	stw	r9,60(sp)
  8036e4:	da000815 	stw	r8,32(sp)
  8036e8:	db000715 	stw	r12,28(sp)
  8036ec:	080ead80 	call	80ead8 <__eqdf2>
  8036f0:	db000717 	ldw	r12,28(sp)
  8036f4:	da000817 	ldw	r8,32(sp)
  8036f8:	da400f17 	ldw	r9,60(sp)
  8036fc:	10000f1e 	bne	r2,zero,80373c <___vfprintf_internal_r+0x1874>
  803700:	4805883a 	mov	r2,r9
				if (expt <= -4 || expt > prec)
  803704:	d8c01417 	ldw	r3,80(sp)
	*length = rve - digits;
  803708:	1445c83a 	sub	r2,r2,r17
			if (ch == 'g' || ch == 'G') {
  80370c:	ad4011d8 	cmpnei	r21,r21,71
				if (expt <= -4 || expt > prec)
  803710:	d8c00715 	stw	r3,28(sp)
	*length = rve - digits;
  803714:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  803718:	a83bc526 	beq	r21,zero,802630 <___vfprintf_internal_r+0x768>
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
  80371c:	a03bc926 	beq	r20,zero,802644 <___vfprintf_internal_r+0x77c>
					if (expt > 0) {
  803720:	6080004c 	andi	r2,r12,1
  803724:	1204b03a 	or	r2,r2,r8
  803728:	00c11a0e 	bge	zero,r3,803b94 <___vfprintf_internal_r+0x1ccc>
						if (prec || flags & ALT)
  80372c:	1001981e 	bne	r2,zero,803d90 <___vfprintf_internal_r+0x1ec8>
  803730:	182b883a 	mov	r21,r3
  803734:	1829883a 	mov	r20,r3
  803738:	0000df06 	br	803ab8 <___vfprintf_internal_r+0x1bf0>
		while (rve < bp)
  80373c:	d8801817 	ldw	r2,96(sp)
  803740:	127ff02e 	bgeu	r2,r9,803704 <___vfprintf_internal_r+0x183c>
			*rve++ = '0';
  803744:	01000c04 	movi	r4,48
  803748:	10c00044 	addi	r3,r2,1
  80374c:	d8c01815 	stw	r3,96(sp)
  803750:	11000005 	stb	r4,0(r2)
		while (rve < bp)
  803754:	d8801817 	ldw	r2,96(sp)
  803758:	127ffb36 	bltu	r2,r9,803748 <___vfprintf_internal_r+0x1880>
  80375c:	003fe906 	br	803704 <___vfprintf_internal_r+0x183c>
			PAD (width - realsz, blanks);
  803760:	d9801a04 	addi	r6,sp,104
  803764:	900b883a 	mov	r5,r18
  803768:	9809883a 	mov	r4,r19
  80376c:	da001115 	stw	r8,68(sp)
  803770:	db400f15 	stw	r13,60(sp)
  803774:	db800e15 	stw	r14,56(sp)
  803778:	0809c180 	call	809c18 <__sprint_r>
  80377c:	103ad91e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
			PRINT (&sign, 1);
  803780:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, blanks);
  803784:	da001117 	ldw	r8,68(sp)
  803788:	db400f17 	ldw	r13,60(sp)
  80378c:	db800e17 	ldw	r14,56(sp)
  803790:	dd802704 	addi	r22,sp,156
  803794:	003a9606 	br	8021f0 <___vfprintf_internal_r+0x328>
					PRINT ("0", 1);
  803798:	d8801b17 	ldw	r2,108(sp)
  80379c:	01002074 	movhi	r4,129
  8037a0:	210bb104 	addi	r4,r4,11972
  8037a4:	10800044 	addi	r2,r2,1
  8037a8:	18c00044 	addi	r3,r3,1
  8037ac:	b1000015 	stw	r4,0(r22)
  8037b0:	01000044 	movi	r4,1
  8037b4:	d8801b15 	stw	r2,108(sp)
  8037b8:	b1000115 	stw	r4,4(r22)
  8037bc:	d8c01c15 	stw	r3,112(sp)
  8037c0:	10800208 	cmpgei	r2,r2,8
  8037c4:	1000d51e 	bne	r2,zero,803b1c <___vfprintf_internal_r+0x1c54>
  8037c8:	b5800204 	addi	r22,r22,8
					if (expt || ndig || flags & ALT) {
  8037cc:	a800631e 	bne	r21,zero,80395c <___vfprintf_internal_r+0x1a94>
  8037d0:	d8800417 	ldw	r2,16(sp)
  8037d4:	d9000817 	ldw	r4,32(sp)
  8037d8:	1080004c 	andi	r2,r2,1
  8037dc:	1104b03a 	or	r2,r2,r4
  8037e0:	103aaf26 	beq	r2,zero,8022a0 <___vfprintf_internal_r+0x3d8>
						PRINT (decimal_point, decp_len);
  8037e4:	d8800d17 	ldw	r2,52(sp)
  8037e8:	d9000b17 	ldw	r4,44(sp)
  8037ec:	b0800015 	stw	r2,0(r22)
  8037f0:	d8801b17 	ldw	r2,108(sp)
  8037f4:	20c7883a 	add	r3,r4,r3
  8037f8:	b1000115 	stw	r4,4(r22)
  8037fc:	10800044 	addi	r2,r2,1
  803800:	d8c01c15 	stw	r3,112(sp)
  803804:	d8801b15 	stw	r2,108(sp)
  803808:	11000208 	cmpgei	r4,r2,8
  80380c:	2000e51e 	bne	r4,zero,803ba4 <___vfprintf_internal_r+0x1cdc>
  803810:	b5800204 	addi	r22,r22,8
						PRINT (cp, ndig);
  803814:	d9000817 	ldw	r4,32(sp)
  803818:	10800044 	addi	r2,r2,1
  80381c:	d8801b15 	stw	r2,108(sp)
  803820:	20c7883a 	add	r3,r4,r3
  803824:	b4400015 	stw	r17,0(r22)
  803828:	b1000115 	stw	r4,4(r22)
  80382c:	d8c01c15 	stw	r3,112(sp)
  803830:	10800208 	cmpgei	r2,r2,8
  803834:	103a9926 	beq	r2,zero,80229c <___vfprintf_internal_r+0x3d4>
  803838:	003dd006 	br	802f7c <___vfprintf_internal_r+0x10b4>
  80383c:	8825883a 	mov	r18,r17
  803840:	003aa806 	br	8022e4 <___vfprintf_internal_r+0x41c>
  803844:	880f883a 	mov	r7,r17
					PRINTANDPAD (cp, convbuf + ndig,
  803848:	10800044 	addi	r2,r2,1
  80384c:	1d47883a 	add	r3,r3,r21
  803850:	b1c00015 	stw	r7,0(r22)
  803854:	003a8c06 	br	802288 <___vfprintf_internal_r+0x3c0>
					PRINT ("0", 1);
  803858:	d9801a04 	addi	r6,sp,104
  80385c:	900b883a 	mov	r5,r18
  803860:	9809883a 	mov	r4,r19
  803864:	0809c180 	call	809c18 <__sprint_r>
  803868:	103a9e1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
						PRINT (decimal_point, decp_len);
  80386c:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  803870:	dd802704 	addi	r22,sp,156
  803874:	003ce506 	br	802c0c <___vfprintf_internal_r+0xd44>
		value = -value;
  803878:	10e0003c 	xorhi	r3,r2,32768
		*sign = '-';
  80387c:	00800b44 	movi	r2,45
  803880:	d8800605 	stb	r2,24(sp)
  803884:	003b4506 	br	80259c <___vfprintf_internal_r+0x6d4>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  803888:	403b3e1e 	bne	r8,zero,802584 <___vfprintf_internal_r+0x6bc>
				prec = 1;
  80388c:	02000044 	movi	r8,1
  803890:	003b3c06 	br	802584 <___vfprintf_internal_r+0x6bc>
			PAD (width - realsz, zeroes);
  803894:	d9801a04 	addi	r6,sp,104
  803898:	900b883a 	mov	r5,r18
  80389c:	9809883a 	mov	r4,r19
  8038a0:	da000e15 	stw	r8,56(sp)
  8038a4:	0809c180 	call	809c18 <__sprint_r>
  8038a8:	103a8e1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  8038ac:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, zeroes);
  8038b0:	da000e17 	ldw	r8,56(sp)
  8038b4:	dd802704 	addi	r22,sp,156
  8038b8:	003a6a06 	br	802264 <___vfprintf_internal_r+0x39c>
				switch (base) {
  8038bc:	10c00060 	cmpeqi	r3,r2,1
  8038c0:	2019883a 	mov	r12,r4
  8038c4:	183c5726 	beq	r3,zero,802a24 <___vfprintf_internal_r+0xb5c>
  8038c8:	003bbf06 	br	8027c8 <___vfprintf_internal_r+0x900>
				prec = DEFPREC;
  8038cc:	02000184 	movi	r8,6
  8038d0:	003b2c06 	br	802584 <___vfprintf_internal_r+0x6bc>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8038d4:	d8801804 	addi	r2,sp,96
  8038d8:	d8800315 	stw	r2,12(sp)
  8038dc:	d9400917 	ldw	r5,36(sp)
  8038e0:	d8801504 	addi	r2,sp,84
			ndigits++;
  8038e4:	42400044 	addi	r9,r8,1
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8038e8:	d8800215 	stw	r2,8(sp)
  8038ec:	d8801404 	addi	r2,sp,80
  8038f0:	da400015 	stw	r9,0(sp)
  8038f4:	180d883a 	mov	r6,r3
  8038f8:	d8800115 	stw	r2,4(sp)
  8038fc:	01c00084 	movi	r7,2
  803900:	9809883a 	mov	r4,r19
  803904:	db001115 	stw	r12,68(sp)
			ndigits++;
  803908:	da000f15 	stw	r8,60(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  80390c:	da400815 	stw	r9,32(sp)
  803910:	d8c00715 	stw	r3,28(sp)
  803914:	08042b80 	call	8042b8 <_dtoa_r>
  803918:	d8c00717 	ldw	r3,28(sp)
  80391c:	da400817 	ldw	r9,32(sp)
  803920:	da000f17 	ldw	r8,60(sp)
  803924:	db001117 	ldw	r12,68(sp)
  803928:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  80392c:	e08011d8 	cmpnei	r2,fp,71
  803930:	103b3626 	beq	r2,zero,80260c <___vfprintf_internal_r+0x744>
		bp = digits + ndigits;
  803934:	8a53883a 	add	r9,r17,r9
		if (ch == 'f' || ch == 'F') {
  803938:	003f6506 	br	8036d0 <___vfprintf_internal_r+0x1808>
				size = strlen (cp);
  80393c:	8809883a 	mov	r4,r17
  803940:	db000415 	stw	r12,16(sp)
  803944:	d8c00615 	stw	r3,24(sp)
  803948:	0801e300 	call	801e30 <strlen>
  80394c:	db000417 	ldw	r12,16(sp)
  803950:	102b883a 	mov	r21,r2
  803954:	1029883a 	mov	r20,r2
  803958:	003a1806 	br	8021bc <___vfprintf_internal_r+0x2f4>
						PRINT (decimal_point, decp_len);
  80395c:	d8800d17 	ldw	r2,52(sp)
  803960:	d9000b17 	ldw	r4,44(sp)
  803964:	b0800015 	stw	r2,0(r22)
  803968:	d8801b17 	ldw	r2,108(sp)
  80396c:	20c7883a 	add	r3,r4,r3
  803970:	b1000115 	stw	r4,4(r22)
  803974:	10800044 	addi	r2,r2,1
  803978:	d8c01c15 	stw	r3,112(sp)
  80397c:	d8801b15 	stw	r2,108(sp)
  803980:	11000208 	cmpgei	r4,r2,8
  803984:	2000871e 	bne	r4,zero,803ba4 <___vfprintf_internal_r+0x1cdc>
  803988:	b5800204 	addi	r22,r22,8
						PAD (-expt, zeroes);
  80398c:	a83fa10e 	bge	r21,zero,803814 <___vfprintf_internal_r+0x194c>
  803990:	01c02074 	movhi	r7,129
  803994:	a93ffc08 	cmpgei	r4,r21,-16
  803998:	39cbb204 	addi	r7,r7,11976
  80399c:	056bc83a 	sub	r21,zero,r21
  8039a0:	2001021e 	bne	r4,zero,803dac <___vfprintf_internal_r+0x1ee4>
  8039a4:	dc000715 	stw	r16,28(sp)
  8039a8:	07000404 	movi	fp,16
  8039ac:	9021883a 	mov	r16,r18
  8039b0:	3825883a 	mov	r18,r7
  8039b4:	00000406 	br	8039c8 <___vfprintf_internal_r+0x1b00>
  8039b8:	b5800204 	addi	r22,r22,8
  8039bc:	ad7ffc04 	addi	r21,r21,-16
  8039c0:	a9800448 	cmpgei	r6,r21,17
  8039c4:	3000f626 	beq	r6,zero,803da0 <___vfprintf_internal_r+0x1ed8>
  8039c8:	10800044 	addi	r2,r2,1
  8039cc:	18c00404 	addi	r3,r3,16
  8039d0:	b4800015 	stw	r18,0(r22)
  8039d4:	b7000115 	stw	fp,4(r22)
  8039d8:	d8c01c15 	stw	r3,112(sp)
  8039dc:	d8801b15 	stw	r2,108(sp)
  8039e0:	11800208 	cmpgei	r6,r2,8
  8039e4:	303ff426 	beq	r6,zero,8039b8 <___vfprintf_internal_r+0x1af0>
  8039e8:	d9801a04 	addi	r6,sp,104
  8039ec:	800b883a 	mov	r5,r16
  8039f0:	9809883a 	mov	r4,r19
  8039f4:	0809c180 	call	809c18 <__sprint_r>
  8039f8:	1001071e 	bne	r2,zero,803e18 <___vfprintf_internal_r+0x1f50>
  8039fc:	d8c01c17 	ldw	r3,112(sp)
  803a00:	d8801b17 	ldw	r2,108(sp)
  803a04:	dd802704 	addi	r22,sp,156
  803a08:	003fec06 	br	8039bc <___vfprintf_internal_r+0x1af4>
						PAD (ndig - 1, zeroes);
  803a0c:	800f883a 	mov	r7,r16
  803a10:	dc000717 	ldw	r16,28(sp)
  803a14:	8817883a 	mov	r11,r17
  803a18:	aa000044 	addi	r8,r21,1
  803a1c:	e0800204 	addi	r2,fp,8
  803a20:	1ac7883a 	add	r3,r3,r11
  803a24:	e1c00015 	stw	r7,0(fp)
  803a28:	e2c00115 	stw	r11,4(fp)
  803a2c:	d8c01c15 	stw	r3,112(sp)
  803a30:	da001b15 	stw	r8,108(sp)
  803a34:	41000208 	cmpgei	r4,r8,8
  803a38:	203e821e 	bne	r4,zero,803444 <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  803a3c:	42000044 	addi	r8,r8,1
  803a40:	15800204 	addi	r22,r2,8
						PAD (ndig - 1, zeroes);
  803a44:	1039883a 	mov	fp,r2
  803a48:	003d4306 	br	802f58 <___vfprintf_internal_r+0x1090>
			_uquad = UARG ();
  803a4c:	25000017 	ldw	r20,0(r4)
  803a50:	002b883a 	mov	r21,zero
  803a54:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  803a58:	00800044 	movi	r2,1
  803a5c:	003a5406 	br	8023b0 <___vfprintf_internal_r+0x4e8>
			_uquad = UARG ();
  803a60:	25000017 	ldw	r20,0(r4)
  803a64:	002b883a 	mov	r21,zero
  803a68:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  803a6c:	0005883a 	mov	r2,zero
  803a70:	003a4f06 	br	8023b0 <___vfprintf_internal_r+0x4e8>
hex:			_uquad = UARG ();
  803a74:	2d000017 	ldw	r20,0(r5)
  803a78:	002b883a 	mov	r21,zero
  803a7c:	d9000615 	stw	r4,24(sp)
  803a80:	003b7906 	br	802868 <___vfprintf_internal_r+0x9a0>
			_uquad = SARG ();
  803a84:	25000017 	ldw	r20,0(r4)
  803a88:	d8c00615 	stw	r3,24(sp)
  803a8c:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  803a90:	a805883a 	mov	r2,r21
  803a94:	003b3f06 	br	802794 <___vfprintf_internal_r+0x8cc>
  803a98:	1805883a 	mov	r2,r3
					size = ndig + decp_len;
  803a9c:	d8c00b17 	ldw	r3,44(sp)
  803aa0:	10eb883a 	add	r21,r2,r3
					if (expt <= 0)
  803aa4:	d8800717 	ldw	r2,28(sp)
  803aa8:	0080370e 	bge	zero,r2,803b88 <___vfprintf_internal_r+0x1cc0>
		realsz = dprec > size ? dprec : size;
  803aac:	a829883a 	mov	r20,r21
  803ab0:	a8002e16 	blt	r21,zero,803b6c <___vfprintf_internal_r+0x1ca4>
  803ab4:	070019c4 	movi	fp,103
			if (softsign)
  803ab8:	d8800607 	ldb	r2,24(sp)
  803abc:	10000626 	beq	r2,zero,803ad8 <___vfprintf_internal_r+0x1c10>
				sign = '-';
  803ac0:	00800b44 	movi	r2,45
  803ac4:	d8801345 	stb	r2,77(sp)
  803ac8:	d8800e17 	ldw	r2,56(sp)
		dprec = 0;
  803acc:	0011883a 	mov	r8,zero
				sign = '-';
  803ad0:	d8800615 	stw	r2,24(sp)
  803ad4:	003b4906 	br	8027fc <___vfprintf_internal_r+0x934>
		if (sign)
  803ad8:	d8800e17 	ldw	r2,56(sp)
  803adc:	db401343 	ldbu	r13,77(sp)
		dprec = 0;
  803ae0:	0011883a 	mov	r8,zero
		if (sign)
  803ae4:	d8800615 	stw	r2,24(sp)
  803ae8:	003b4006 	br	8027ec <___vfprintf_internal_r+0x924>
  803aec:	800f883a 	mov	r7,r16
  803af0:	dc000e17 	ldw	r16,56(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  803af4:	10800044 	addi	r2,r2,1
  803af8:	1d47883a 	add	r3,r3,r21
  803afc:	d8801b15 	stw	r2,108(sp)
  803b00:	b1c00015 	stw	r7,0(r22)
  803b04:	b5400115 	stw	r21,4(r22)
  803b08:	d8c01c15 	stw	r3,112(sp)
  803b0c:	10800208 	cmpgei	r2,r2,8
  803b10:	10002f1e 	bne	r2,zero,803bd0 <___vfprintf_internal_r+0x1d08>
  803b14:	b5800204 	addi	r22,r22,8
  803b18:	003d9206 	br	803164 <___vfprintf_internal_r+0x129c>
					PRINT ("0", 1);
  803b1c:	d9801a04 	addi	r6,sp,104
  803b20:	900b883a 	mov	r5,r18
  803b24:	9809883a 	mov	r4,r19
  803b28:	0809c180 	call	809c18 <__sprint_r>
  803b2c:	1039ed1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
					if (expt || ndig || flags & ALT) {
  803b30:	dd401417 	ldw	r21,80(sp)
						PRINT (decimal_point, decp_len);
  803b34:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  803b38:	dd802704 	addi	r22,sp,156
  803b3c:	003f2306 	br	8037cc <___vfprintf_internal_r+0x1904>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  803b40:	05400184 	movi	r21,6
  803b44:	003e5e06 	br	8034c0 <___vfprintf_internal_r+0x15f8>
		exp = -exp;
  803b48:	00c00044 	movi	r3,1
  803b4c:	1887c83a 	sub	r3,r3,r2
		*p++ = '-';
  803b50:	00800b44 	movi	r2,45
  803b54:	d8801685 	stb	r2,90(sp)
  803b58:	003ac106 	br	802660 <___vfprintf_internal_r+0x798>
						size += decp_len;
  803b5c:	d8c00b17 	ldw	r3,44(sp)
  803b60:	10eb883a 	add	r21,r2,r3
		realsz = dprec > size ? dprec : size;
  803b64:	a829883a 	mov	r20,r21
  803b68:	a83fd20e 	bge	r21,zero,803ab4 <___vfprintf_internal_r+0x1bec>
  803b6c:	0029883a 	mov	r20,zero
  803b70:	003fd006 	br	803ab4 <___vfprintf_internal_r+0x1bec>
	FLUSH ();
  803b74:	d9801a04 	addi	r6,sp,104
  803b78:	900b883a 	mov	r5,r18
  803b7c:	9809883a 	mov	r4,r19
  803b80:	0809c180 	call	809c18 <__sprint_r>
  803b84:	0039d706 	br	8022e4 <___vfprintf_internal_r+0x41c>
						size += 1 - expt;
  803b88:	a8abc83a 	sub	r21,r21,r2
  803b8c:	ad400044 	addi	r21,r21,1
  803b90:	003fc606 	br	803aac <___vfprintf_internal_r+0x1be4>
						size = (prec || flags & ALT)
  803b94:	1000961e 	bne	r2,zero,803df0 <___vfprintf_internal_r+0x1f28>
  803b98:	05000044 	movi	r20,1
							  : 1;
  803b9c:	05400044 	movi	r21,1
					lead = expt;
  803ba0:	003fc506 	br	803ab8 <___vfprintf_internal_r+0x1bf0>
						PRINT (decimal_point, decp_len);
  803ba4:	d9801a04 	addi	r6,sp,104
  803ba8:	900b883a 	mov	r5,r18
  803bac:	9809883a 	mov	r4,r19
  803bb0:	0809c180 	call	809c18 <__sprint_r>
  803bb4:	1039cb1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
						PAD (-expt, zeroes);
  803bb8:	dd401417 	ldw	r21,80(sp)
						PRINT (cp, ndig);
  803bbc:	d8c01c17 	ldw	r3,112(sp)
  803bc0:	d8801b17 	ldw	r2,108(sp)
						PRINT (decimal_point, decp_len);
  803bc4:	dd802704 	addi	r22,sp,156
						PAD (-expt, zeroes);
  803bc8:	a83f120e 	bge	r21,zero,803814 <___vfprintf_internal_r+0x194c>
  803bcc:	003f7006 	br	803990 <___vfprintf_internal_r+0x1ac8>
					PRINTANDPAD(cp, convbuf + ndig,
  803bd0:	d9801a04 	addi	r6,sp,104
  803bd4:	900b883a 	mov	r5,r18
  803bd8:	9809883a 	mov	r4,r19
  803bdc:	0809c180 	call	809c18 <__sprint_r>
  803be0:	1039c01e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
					    PRINT (decimal_point, decp_len);
  803be4:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  803be8:	dd802704 	addi	r22,sp,156
  803bec:	003d5d06 	br	803164 <___vfprintf_internal_r+0x129c>
  803bf0:	1819883a 	mov	r12,r3
  803bf4:	003af406 	br	8027c8 <___vfprintf_internal_r+0x900>
		} while ((exp /= 10) > 9);
  803bf8:	080d6dc0 	call	80d6dc <__divsi3>
  803bfc:	003ab206 	br	8026c8 <___vfprintf_internal_r+0x800>
					    PRINT (decimal_point, decp_len);
  803c00:	d9801a04 	addi	r6,sp,104
  803c04:	900b883a 	mov	r5,r18
  803c08:	9809883a 	mov	r4,r19
  803c0c:	0809c180 	call	809c18 <__sprint_r>
  803c10:	1039b41e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
					PRINTANDPAD (cp, convbuf + ndig,
  803c14:	dd401417 	ldw	r21,80(sp)
  803c18:	d8c01c17 	ldw	r3,112(sp)
					    PRINT (decimal_point, decp_len);
  803c1c:	dd802704 	addi	r22,sp,156
  803c20:	003d5f06 	br	8031a0 <___vfprintf_internal_r+0x12d8>
					PRINTANDPAD(cp, convbuf + ndig,
  803c24:	d9801a04 	addi	r6,sp,104
  803c28:	900b883a 	mov	r5,r18
  803c2c:	9809883a 	mov	r4,r19
  803c30:	0809c180 	call	809c18 <__sprint_r>
  803c34:	1039ab1e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
					    PRINT (decimal_point, decp_len);
  803c38:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  803c3c:	dd802704 	addi	r22,sp,156
  803c40:	a83d450e 	bge	r21,zero,803158 <___vfprintf_internal_r+0x1290>
  803c44:	003e1106 	br	80348c <___vfprintf_internal_r+0x15c4>
		*--t = to_char (exp);
  803c48:	10800c04 	addi	r2,r2,48
  803c4c:	a825883a 	mov	r18,r21
  803c50:	882b883a 	mov	r21,r17
  803c54:	a8bfffc5 	stb	r2,-1(r21)
  803c58:	a17fff84 	addi	r5,r20,-2
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  803c5c:	d88019c4 	addi	r2,sp,103
		*--t = to_char (exp);
  803c60:	db000f17 	ldw	r12,60(sp)
  803c64:	dc001017 	ldw	r16,64(sp)
  803c68:	dc400717 	ldw	r17,28(sp)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  803c6c:	28806c2e 	bgeu	r5,r2,803e20 <___vfprintf_internal_r+0x1f58>
  803c70:	d8801a44 	addi	r2,sp,105
  803c74:	1529c83a 	sub	r20,r2,r20
  803c78:	d90016c4 	addi	r4,sp,91
  803c7c:	a00d883a 	mov	r6,r20
  803c80:	db000715 	stw	r12,28(sp)
  803c84:	08078fc0 	call	8078fc <memcpy>
  803c88:	d88016c4 	addi	r2,sp,91
  803c8c:	1505883a 	add	r2,r2,r20
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
  803c90:	d8c01644 	addi	r3,sp,89
  803c94:	db000717 	ldw	r12,28(sp)
  803c98:	10c5c83a 	sub	r2,r2,r3
  803c9c:	d8801015 	stw	r2,64(sp)
  803ca0:	1009883a 	mov	r4,r2
				if (ndig > 1 || flags & ALT)
  803ca4:	d8c00817 	ldw	r3,32(sp)
  803ca8:	18800088 	cmpgei	r2,r3,2
				size = expsize + ndig;
  803cac:	192b883a 	add	r21,r3,r4
				if (ndig > 1 || flags & ALT)
  803cb0:	10002c26 	beq	r2,zero,803d64 <___vfprintf_internal_r+0x1e9c>
					size += decp_len;
  803cb4:	d8800b17 	ldw	r2,44(sp)
  803cb8:	a8ab883a 	add	r21,r21,r2
		realsz = dprec > size ? dprec : size;
  803cbc:	a829883a 	mov	r20,r21
  803cc0:	a800010e 	bge	r21,zero,803cc8 <___vfprintf_internal_r+0x1e00>
  803cc4:	0029883a 	mov	r20,zero
		lead = 0;
  803cc8:	d8000715 	stw	zero,28(sp)
  803ccc:	003f7a06 	br	803ab8 <___vfprintf_internal_r+0x1bf0>
					PRINTANDPAD (cp, convbuf + ndig,
  803cd0:	d9801a04 	addi	r6,sp,104
  803cd4:	900b883a 	mov	r5,r18
  803cd8:	9809883a 	mov	r4,r19
  803cdc:	0809c180 	call	809c18 <__sprint_r>
  803ce0:	1039801e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
  803ce4:	d8801417 	ldw	r2,80(sp)
  803ce8:	d9000817 	ldw	r4,32(sp)
		FLUSH ();	/* copy out the I/O vectors */
  803cec:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  803cf0:	dd802704 	addi	r22,sp,156
  803cf4:	2085c83a 	sub	r2,r4,r2
  803cf8:	003d3d06 	br	8031f0 <___vfprintf_internal_r+0x1328>
			*p++ = '0';
  803cfc:	00800c04 	movi	r2,48
		*p++ = to_char (exp);
  803d00:	18c00c04 	addi	r3,r3,48
			*p++ = '0';
  803d04:	d88016c5 	stb	r2,91(sp)
		*p++ = to_char (exp);
  803d08:	00800104 	movi	r2,4
  803d0c:	d8c01705 	stb	r3,92(sp)
  803d10:	d8801015 	stw	r2,64(sp)
  803d14:	1009883a 	mov	r4,r2
  803d18:	003fe206 	br	803ca4 <___vfprintf_internal_r+0x1ddc>
			if (*digits == '0' && value)
  803d1c:	d9000917 	ldw	r4,36(sp)
  803d20:	180b883a 	mov	r5,r3
  803d24:	000d883a 	mov	r6,zero
  803d28:	000f883a 	mov	r7,zero
  803d2c:	da401115 	stw	r9,68(sp)
  803d30:	da000f15 	stw	r8,60(sp)
  803d34:	db000815 	stw	r12,32(sp)
  803d38:	d8c00715 	stw	r3,28(sp)
  803d3c:	080ead80 	call	80ead8 <__eqdf2>
  803d40:	d8c00717 	ldw	r3,28(sp)
  803d44:	db000817 	ldw	r12,32(sp)
  803d48:	da000f17 	ldw	r8,60(sp)
  803d4c:	da401117 	ldw	r9,68(sp)
  803d50:	103e5d26 	beq	r2,zero,8036c8 <___vfprintf_internal_r+0x1800>
				*decpt = -ndigits + 1;
  803d54:	00800044 	movi	r2,1
  803d58:	1205c83a 	sub	r2,r2,r8
  803d5c:	d8801415 	stw	r2,80(sp)
  803d60:	003e5a06 	br	8036cc <___vfprintf_internal_r+0x1804>
  803d64:	6080004c 	andi	r2,r12,1
  803d68:	d8800715 	stw	r2,28(sp)
				if (ndig > 1 || flags & ALT)
  803d6c:	103fd11e 	bne	r2,zero,803cb4 <___vfprintf_internal_r+0x1dec>
		realsz = dprec > size ? dprec : size;
  803d70:	a829883a 	mov	r20,r21
  803d74:	a83f500e 	bge	r21,zero,803ab8 <___vfprintf_internal_r+0x1bf0>
  803d78:	0029883a 	mov	r20,zero
							  : 1;
  803d7c:	003f4e06 	br	803ab8 <___vfprintf_internal_r+0x1bf0>
  803d80:	4029883a 	mov	r20,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  803d84:	d8c00615 	stw	r3,24(sp)
  803d88:	402b883a 	mov	r21,r8
  803d8c:	00390b06 	br	8021bc <___vfprintf_internal_r+0x2f4>
							size += prec + decp_len;
  803d90:	d8800b17 	ldw	r2,44(sp)
  803d94:	18ab883a 	add	r21,r3,r2
  803d98:	aa2b883a 	add	r21,r21,r8
  803d9c:	003ff406 	br	803d70 <___vfprintf_internal_r+0x1ea8>
  803da0:	900f883a 	mov	r7,r18
  803da4:	8025883a 	mov	r18,r16
  803da8:	dc000717 	ldw	r16,28(sp)
						PAD (-expt, zeroes);
  803dac:	10800044 	addi	r2,r2,1
  803db0:	1d47883a 	add	r3,r3,r21
  803db4:	b1c00015 	stw	r7,0(r22)
  803db8:	b5400115 	stw	r21,4(r22)
  803dbc:	d8c01c15 	stw	r3,112(sp)
  803dc0:	d8801b15 	stw	r2,108(sp)
  803dc4:	11000208 	cmpgei	r4,r2,8
  803dc8:	203e9126 	beq	r4,zero,803810 <___vfprintf_internal_r+0x1948>
  803dcc:	d9801a04 	addi	r6,sp,104
  803dd0:	900b883a 	mov	r5,r18
  803dd4:	9809883a 	mov	r4,r19
  803dd8:	0809c180 	call	809c18 <__sprint_r>
  803ddc:	1039411e 	bne	r2,zero,8022e4 <___vfprintf_internal_r+0x41c>
						PRINT (cp, ndig);
  803de0:	d8c01c17 	ldw	r3,112(sp)
  803de4:	d8801b17 	ldw	r2,108(sp)
						PAD (-expt, zeroes);
  803de8:	dd802704 	addi	r22,sp,156
  803dec:	003e8906 	br	803814 <___vfprintf_internal_r+0x194c>
							  ? prec + 1 + decp_len
  803df0:	d8800b17 	ldw	r2,44(sp)
  803df4:	15400044 	addi	r21,r2,1
  803df8:	aa2b883a 	add	r21,r21,r8
  803dfc:	003fdc06 	br	803d70 <___vfprintf_internal_r+0x1ea8>
		return (EOF);
  803e00:	00bfffc4 	movi	r2,-1
  803e04:	d8800515 	stw	r2,20(sp)
  803e08:	00393906 	br	8022f0 <___vfprintf_internal_r+0x428>
						PAD (ndig - 1, zeroes);
  803e0c:	b005883a 	mov	r2,r22
  803e10:	39cbb204 	addi	r7,r7,11976
  803e14:	003f0206 	br	803a20 <___vfprintf_internal_r+0x1b58>
  803e18:	8025883a 	mov	r18,r16
  803e1c:	00393106 	br	8022e4 <___vfprintf_internal_r+0x41c>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  803e20:	00800084 	movi	r2,2
  803e24:	d8801015 	stw	r2,64(sp)
  803e28:	1009883a 	mov	r4,r2
  803e2c:	003f9d06 	br	803ca4 <___vfprintf_internal_r+0x1ddc>
				prec = GET_ARG (n, ap, int);
  803e30:	d8c00617 	ldw	r3,24(sp)
  803e34:	1a000017 	ldw	r8,0(r3)
  803e38:	18c00104 	addi	r3,r3,4
				if (prec < 0)
  803e3c:	4000010e 	bge	r8,zero,803e44 <___vfprintf_internal_r+0x1f7c>
  803e40:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  803e44:	bf000043 	ldbu	fp,1(r23)
				prec = GET_ARG (n, ap, int);
  803e48:	d8c00615 	stw	r3,24(sp)
			if ((ch = *fmt++) == '*') {
  803e4c:	102f883a 	mov	r23,r2
  803e50:	e2c03fcc 	andi	r11,fp,255
  803e54:	5ac0201c 	xori	r11,r11,128
  803e58:	5affe004 	addi	r11,r11,-128
				goto rflag;
  803e5c:	00385f06 	br	801fdc <___vfprintf_internal_r+0x114>

00803e60 <__vfprintf_internal>:
{
  803e60:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  803e64:	d1200917 	ldw	r4,-32732(gp)
  803e68:	300f883a 	mov	r7,r6
  803e6c:	280d883a 	mov	r6,r5
  803e70:	100b883a 	mov	r5,r2
  803e74:	0801ec81 	jmpi	801ec8 <___vfprintf_internal_r>

00803e78 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  803e78:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  803e7c:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  803e80:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  803e84:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  803e88:	2a400917 	ldw	r9,36(r5)
{
  803e8c:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  803e90:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  803e94:	00c10004 	movi	r3,1024
{
  803e98:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  803e9c:	10bfff4c 	andi	r2,r2,65533
{
  803ea0:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  803ea4:	d80b883a 	mov	r5,sp
{
  803ea8:	dc811c15 	stw	r18,1136(sp)
  803eac:	dc411b15 	stw	r17,1132(sp)
  803eb0:	dfc11d15 	stw	ra,1140(sp)
  803eb4:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  803eb8:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  803ebc:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  803ec0:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  803ec4:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  803ec8:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  803ecc:	da000015 	stw	r8,0(sp)
  803ed0:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  803ed4:	d8c00215 	stw	r3,8(sp)
  803ed8:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  803edc:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  803ee0:	0801ec80 	call	801ec8 <___vfprintf_internal_r>
  803ee4:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  803ee8:	10000d0e 	bge	r2,zero,803f20 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  803eec:	d880030b 	ldhu	r2,12(sp)
  803ef0:	1080100c 	andi	r2,r2,64
  803ef4:	10000326 	beq	r2,zero,803f04 <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  803ef8:	8080030b 	ldhu	r2,12(r16)
  803efc:	10801014 	ori	r2,r2,64
  803f00:	8080030d 	sth	r2,12(r16)
}
  803f04:	8805883a 	mov	r2,r17
  803f08:	dfc11d17 	ldw	ra,1140(sp)
  803f0c:	dc811c17 	ldw	r18,1136(sp)
  803f10:	dc411b17 	ldw	r17,1132(sp)
  803f14:	dc011a17 	ldw	r16,1128(sp)
  803f18:	dec11e04 	addi	sp,sp,1144
  803f1c:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  803f20:	d80b883a 	mov	r5,sp
  803f24:	9009883a 	mov	r4,r18
  803f28:	0805cbc0 	call	805cbc <_fflush_r>
  803f2c:	103fef26 	beq	r2,zero,803eec <__sbprintf+0x74>
		ret = EOF;
  803f30:	047fffc4 	movi	r17,-1
  803f34:	003fed06 	br	803eec <__sbprintf+0x74>

00803f38 <__swsetup_r>:
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
  803f38:	d0a00917 	ldw	r2,-32732(gp)
{
  803f3c:	defffd04 	addi	sp,sp,-12
  803f40:	dc400115 	stw	r17,4(sp)
  803f44:	dc000015 	stw	r16,0(sp)
  803f48:	dfc00215 	stw	ra,8(sp)
  803f4c:	2023883a 	mov	r17,r4
  803f50:	2821883a 	mov	r16,r5
  CHECK_INIT (_REENT, fp);
  803f54:	10000226 	beq	r2,zero,803f60 <__swsetup_r+0x28>
  803f58:	10c00e17 	ldw	r3,56(r2)
  803f5c:	18001f26 	beq	r3,zero,803fdc <__swsetup_r+0xa4>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
  803f60:	8180030b 	ldhu	r6,12(r16)
  803f64:	30c0020c 	andi	r3,r6,8
  803f68:	3005883a 	mov	r2,r6
  803f6c:	18002126 	beq	r3,zero,803ff4 <__swsetup_r+0xbc>
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
  803f70:	80c00417 	ldw	r3,16(r16)
  803f74:	18002826 	beq	r3,zero,804018 <__swsetup_r+0xe0>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
  803f78:	1100004c 	andi	r4,r2,1
  803f7c:	20000b1e 	bne	r4,zero,803fac <__swsetup_r+0x74>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  803f80:	1100008c 	andi	r4,r2,2
  803f84:	20002e1e 	bne	r4,zero,804040 <__swsetup_r+0x108>
  803f88:	81000517 	ldw	r4,20(r16)
  803f8c:	81000215 	stw	r4,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
  803f90:	18000b26 	beq	r3,zero,803fc0 <__swsetup_r+0x88>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
  803f94:	0005883a 	mov	r2,zero
}
  803f98:	dfc00217 	ldw	ra,8(sp)
  803f9c:	dc400117 	ldw	r17,4(sp)
  803fa0:	dc000017 	ldw	r16,0(sp)
  803fa4:	dec00304 	addi	sp,sp,12
  803fa8:	f800283a 	ret
      fp->_lbfsize = -fp->_bf._size;
  803fac:	81000517 	ldw	r4,20(r16)
      fp->_w = 0;
  803fb0:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
  803fb4:	0109c83a 	sub	r4,zero,r4
  803fb8:	81000615 	stw	r4,24(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  803fbc:	183ff51e 	bne	r3,zero,803f94 <__swsetup_r+0x5c>
  803fc0:	10c0200c 	andi	r3,r2,128
  return 0;
  803fc4:	0005883a 	mov	r2,zero
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  803fc8:	183ff326 	beq	r3,zero,803f98 <__swsetup_r+0x60>
      fp->_flags |= __SERR;
  803fcc:	31801014 	ori	r6,r6,64
  803fd0:	8180030d 	sth	r6,12(r16)
      return EOF;
  803fd4:	00bfffc4 	movi	r2,-1
  803fd8:	003fef06 	br	803f98 <__swsetup_r+0x60>
  CHECK_INIT (_REENT, fp);
  803fdc:	1009883a 	mov	r4,r2
  803fe0:	08060e80 	call	8060e8 <__sinit>
  if ((fp->_flags & __SWR) == 0)
  803fe4:	8180030b 	ldhu	r6,12(r16)
  803fe8:	30c0020c 	andi	r3,r6,8
  803fec:	3005883a 	mov	r2,r6
  803ff0:	183fdf1e 	bne	r3,zero,803f70 <__swsetup_r+0x38>
      if ((fp->_flags & __SRW) == 0)
  803ff4:	3080040c 	andi	r2,r6,16
  803ff8:	10002126 	beq	r2,zero,804080 <__swsetup_r+0x148>
      if (fp->_flags & __SRD)
  803ffc:	3080010c 	andi	r2,r6,4
  804000:	1000111e 	bne	r2,zero,804048 <__swsetup_r+0x110>
  if (fp->_bf._base == NULL
  804004:	80c00417 	ldw	r3,16(r16)
      fp->_flags |= __SWR;
  804008:	30800214 	ori	r2,r6,8
  80400c:	8080030d 	sth	r2,12(r16)
  804010:	100d883a 	mov	r6,r2
  if (fp->_bf._base == NULL
  804014:	183fd81e 	bne	r3,zero,803f78 <__swsetup_r+0x40>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
  804018:	1100a00c 	andi	r4,r2,640
  80401c:	21008020 	cmpeqi	r4,r4,512
  804020:	203fd51e 	bne	r4,zero,803f78 <__swsetup_r+0x40>
    __smakebuf_r (ptr, fp);
  804024:	800b883a 	mov	r5,r16
  804028:	8809883a 	mov	r4,r17
  80402c:	0806dd80 	call	806dd8 <__smakebuf_r>
  if (fp->_flags & __SLBF)
  804030:	8180030b 	ldhu	r6,12(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804034:	80c00417 	ldw	r3,16(r16)
  if (fp->_flags & __SLBF)
  804038:	3005883a 	mov	r2,r6
  80403c:	003fce06 	br	803f78 <__swsetup_r+0x40>
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  804040:	0009883a 	mov	r4,zero
  804044:	003fd106 	br	803f8c <__swsetup_r+0x54>
	  if (HASUB (fp))
  804048:	81400c17 	ldw	r5,48(r16)
  80404c:	28000626 	beq	r5,zero,804068 <__swsetup_r+0x130>
	    FREEUB (ptr, fp);
  804050:	80801004 	addi	r2,r16,64
  804054:	28800326 	beq	r5,r2,804064 <__swsetup_r+0x12c>
  804058:	8809883a 	mov	r4,r17
  80405c:	08063a00 	call	8063a0 <_free_r>
	  fp->_flags &= ~(__SRD | __SEOF);
  804060:	8180030b 	ldhu	r6,12(r16)
	    FREEUB (ptr, fp);
  804064:	80000c15 	stw	zero,48(r16)
	  fp->_p = fp->_bf._base;
  804068:	80c00417 	ldw	r3,16(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
  80406c:	00bff6c4 	movi	r2,-37
  804070:	118c703a 	and	r6,r2,r6
	  fp->_r = 0;
  804074:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
  804078:	80c00015 	stw	r3,0(r16)
  80407c:	003fe206 	br	804008 <__swsetup_r+0xd0>
	  ptr->_errno = EBADF;
  804080:	00800244 	movi	r2,9
  804084:	88800015 	stw	r2,0(r17)
	  fp->_flags |= __SERR;
  804088:	31801014 	ori	r6,r6,64
  80408c:	8180030d 	sth	r6,12(r16)
	  return EOF;
  804090:	00bfffc4 	movi	r2,-1
  804094:	003fc006 	br	803f98 <__swsetup_r+0x60>

00804098 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
  804098:	defff204 	addi	sp,sp,-56
  80409c:	dc400515 	stw	r17,20(sp)
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
  8040a0:	20800417 	ldw	r2,16(r4)
  n = S->_wds;
  8040a4:	2c400417 	ldw	r17,16(r5)
{
  8040a8:	dfc00d15 	stw	ra,52(sp)
  8040ac:	df000c15 	stw	fp,48(sp)
  8040b0:	ddc00b15 	stw	r23,44(sp)
  8040b4:	dd800a15 	stw	r22,40(sp)
  8040b8:	dd400915 	stw	r21,36(sp)
  8040bc:	dd000815 	stw	r20,32(sp)
  8040c0:	dcc00715 	stw	r19,28(sp)
  8040c4:	dc800615 	stw	r18,24(sp)
  8040c8:	dc000415 	stw	r16,16(sp)
  8040cc:	d9000115 	stw	r4,4(sp)
  8040d0:	d9400215 	stw	r5,8(sp)
  if (b->_wds < n)
  8040d4:	14407616 	blt	r2,r17,8042b0 <quorem+0x218>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  8040d8:	8c7fffc4 	addi	r17,r17,-1
  8040dc:	882a90ba 	slli	r21,r17,2
  sx = S->_x;
  8040e0:	2f000504 	addi	fp,r5,20
  bx = b->_x;
  8040e4:	25800504 	addi	r22,r4,20
  sxe = sx + --n;
  8040e8:	e565883a 	add	r18,fp,r21
  bxe = bx + n;
  8040ec:	b545883a 	add	r2,r22,r21
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  8040f0:	95c00017 	ldw	r23,0(r18)
  8040f4:	15000017 	ldw	r20,0(r2)
  bx = b->_x;
  8040f8:	dd800015 	stw	r22,0(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  8040fc:	bdc00044 	addi	r23,r23,1
  804100:	b80b883a 	mov	r5,r23
  804104:	a009883a 	mov	r4,r20
  bxe = bx + n;
  804108:	d8800315 	stw	r2,12(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  80410c:	080d7d00 	call	80d7d0 <__udivsi3>
  804110:	1021883a 	mov	r16,r2
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
  804114:	a5c02f36 	bltu	r20,r23,8041d4 <quorem+0x13c>
  sx = S->_x;
  804118:	e029883a 	mov	r20,fp
    {
      borrow = 0;
      carry = 0;
  80411c:	002b883a 	mov	r21,zero
      borrow = 0;
  804120:	002f883a 	mov	r23,zero
      do
	{
#ifdef Pack_32
	  si = *sx++;
  804124:	a4c00017 	ldw	r19,0(r20)
	  ys = (si & 0xffff) * q + carry;
  804128:	800b883a 	mov	r5,r16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  80412c:	b5800104 	addi	r22,r22,4
	  ys = (si & 0xffff) * q + carry;
  804130:	993fffcc 	andi	r4,r19,65535
  804134:	080d8900 	call	80d890 <__mulsi3>
	  zs = (si >> 16) * q + (ys >> 16);
  804138:	9808d43a 	srli	r4,r19,16
  80413c:	800b883a 	mov	r5,r16
	  ys = (si & 0xffff) * q + carry;
  804140:	156b883a 	add	r21,r2,r21
	  zs = (si >> 16) * q + (ys >> 16);
  804144:	080d8900 	call	80d890 <__mulsi3>
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804148:	b0ffff17 	ldw	r3,-4(r22)
	  zs = (si >> 16) * q + (ys >> 16);
  80414c:	a80ad43a 	srli	r5,r21,16
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804150:	a93fffcc 	andi	r4,r21,65535
  804154:	19bfffcc 	andi	r6,r3,65535
  804158:	b909c83a 	sub	r4,r23,r4
  80415c:	2189883a 	add	r4,r4,r6
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  804160:	1806d43a 	srli	r3,r3,16
	  zs = (si >> 16) * q + (ys >> 16);
  804164:	1145883a 	add	r2,r2,r5
	  borrow = y >> 16;
  804168:	200bd43a 	srai	r5,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  80416c:	11bfffcc 	andi	r6,r2,65535
  804170:	1987c83a 	sub	r3,r3,r6
  804174:	1947883a 	add	r3,r3,r5
	  Storeinc (bx, z, y);
  804178:	180a943a 	slli	r5,r3,16
  80417c:	213fffcc 	andi	r4,r4,65535
	  si = *sx++;
  804180:	a5000104 	addi	r20,r20,4
	  Storeinc (bx, z, y);
  804184:	2908b03a 	or	r4,r5,r4
  804188:	b13fff15 	stw	r4,-4(r22)
	  carry = zs >> 16;
  80418c:	102ad43a 	srli	r21,r2,16
	  borrow = z >> 16;
  804190:	182fd43a 	srai	r23,r3,16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  804194:	953fe32e 	bgeu	r18,r20,804124 <quorem+0x8c>
      if (!*bxe)
  804198:	d8c00317 	ldw	r3,12(sp)
  80419c:	18800017 	ldw	r2,0(r3)
  8041a0:	10000c1e 	bne	r2,zero,8041d4 <quorem+0x13c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
  8041a4:	d8800017 	ldw	r2,0(sp)
  8041a8:	1d7fff04 	addi	r21,r3,-4
  8041ac:	15400436 	bltu	r2,r21,8041c0 <quorem+0x128>
  8041b0:	00000606 	br	8041cc <quorem+0x134>
  8041b4:	d8800017 	ldw	r2,0(sp)
	    --n;
  8041b8:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  8041bc:	1540032e 	bgeu	r2,r21,8041cc <quorem+0x134>
  8041c0:	a8800017 	ldw	r2,0(r21)
  8041c4:	ad7fff04 	addi	r21,r21,-4
  8041c8:	103ffa26 	beq	r2,zero,8041b4 <quorem+0x11c>
	  b->_wds = n;
  8041cc:	d8800117 	ldw	r2,4(sp)
  8041d0:	14400415 	stw	r17,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
  8041d4:	d9400217 	ldw	r5,8(sp)
  8041d8:	d9000117 	ldw	r4,4(sp)
  8041dc:	08089140 	call	808914 <__mcmp>
  8041e0:	10002616 	blt	r2,zero,80427c <quorem+0x1e4>
  bx = b->_x;
  8041e4:	d9400017 	ldw	r5,0(sp)
    {
      q++;
  8041e8:	84000044 	addi	r16,r16,1
      borrow = 0;
  8041ec:	0007883a 	mov	r3,zero
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
  8041f0:	e1000017 	ldw	r4,0(fp)
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  8041f4:	29800017 	ldw	r6,0(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  8041f8:	29400104 	addi	r5,r5,4
	  ys = (si & 0xffff) + carry;
  8041fc:	20bfffcc 	andi	r2,r4,65535
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804200:	1887c83a 	sub	r3,r3,r2
  804204:	30bfffcc 	andi	r2,r6,65535
  804208:	1885883a 	add	r2,r3,r2
	  zs = (si >> 16) + (ys >> 16);
  80420c:	2008d43a 	srli	r4,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  804210:	3006d43a 	srli	r3,r6,16
	  borrow = y >> 16;
  804214:	100fd43a 	srai	r7,r2,16
	  Storeinc (bx, z, y);
  804218:	11bfffcc 	andi	r6,r2,65535
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  80421c:	1907c83a 	sub	r3,r3,r4
  804220:	19c7883a 	add	r3,r3,r7
	  Storeinc (bx, z, y);
  804224:	1804943a 	slli	r2,r3,16
	  si = *sx++;
  804228:	e7000104 	addi	fp,fp,4
	  borrow = z >> 16;
  80422c:	1807d43a 	srai	r3,r3,16
	  Storeinc (bx, z, y);
  804230:	1184b03a 	or	r2,r2,r6
  804234:	28bfff15 	stw	r2,-4(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  804238:	973fed2e 	bgeu	r18,fp,8041f0 <quorem+0x158>
      bx = b->_x;
      bxe = bx + n;
  80423c:	880490ba 	slli	r2,r17,2
  804240:	d9000017 	ldw	r4,0(sp)
  804244:	2085883a 	add	r2,r4,r2
      if (!*bxe)
  804248:	10c00017 	ldw	r3,0(r2)
  80424c:	18000b1e 	bne	r3,zero,80427c <quorem+0x1e4>
	{
	  while (--bxe > bx && !*bxe)
  804250:	10bfff04 	addi	r2,r2,-4
  804254:	20800436 	bltu	r4,r2,804268 <quorem+0x1d0>
  804258:	00000606 	br	804274 <quorem+0x1dc>
  80425c:	d8c00017 	ldw	r3,0(sp)
	    --n;
  804260:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  804264:	1880032e 	bgeu	r3,r2,804274 <quorem+0x1dc>
  804268:	10c00017 	ldw	r3,0(r2)
  80426c:	10bfff04 	addi	r2,r2,-4
  804270:	183ffa26 	beq	r3,zero,80425c <quorem+0x1c4>
	  b->_wds = n;
  804274:	d8800117 	ldw	r2,4(sp)
  804278:	14400415 	stw	r17,16(r2)
	}
    }
  return q;
  80427c:	8005883a 	mov	r2,r16
}
  804280:	dfc00d17 	ldw	ra,52(sp)
  804284:	df000c17 	ldw	fp,48(sp)
  804288:	ddc00b17 	ldw	r23,44(sp)
  80428c:	dd800a17 	ldw	r22,40(sp)
  804290:	dd400917 	ldw	r21,36(sp)
  804294:	dd000817 	ldw	r20,32(sp)
  804298:	dcc00717 	ldw	r19,28(sp)
  80429c:	dc800617 	ldw	r18,24(sp)
  8042a0:	dc400517 	ldw	r17,20(sp)
  8042a4:	dc000417 	ldw	r16,16(sp)
  8042a8:	dec00e04 	addi	sp,sp,56
  8042ac:	f800283a 	ret
    return 0;
  8042b0:	0005883a 	mov	r2,zero
  8042b4:	003ff206 	br	804280 <quorem+0x1e8>

008042b8 <_dtoa_r>:
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
  8042b8:	20801017 	ldw	r2,64(r4)
{
  8042bc:	deffdc04 	addi	sp,sp,-144
  8042c0:	df002215 	stw	fp,136(sp)
  8042c4:	dc801c15 	stw	r18,112(sp)
  8042c8:	dc401b15 	stw	r17,108(sp)
  8042cc:	dc001a15 	stw	r16,104(sp)
  8042d0:	dfc02315 	stw	ra,140(sp)
  8042d4:	ddc02115 	stw	r23,132(sp)
  8042d8:	dd802015 	stw	r22,128(sp)
  8042dc:	dd401f15 	stw	r21,124(sp)
  8042e0:	dd001e15 	stw	r20,120(sp)
  8042e4:	dcc01d15 	stw	r19,116(sp)
  8042e8:	d9400115 	stw	r5,4(sp)
  8042ec:	d9c00315 	stw	r7,12(sp)
  8042f0:	dc002617 	ldw	r16,152(sp)
  8042f4:	2039883a 	mov	fp,r4
  8042f8:	3025883a 	mov	r18,r6
  d.d = _d;
  8042fc:	3023883a 	mov	r17,r6
  if (_REENT_MP_RESULT(ptr))
  804300:	10000826 	beq	r2,zero,804324 <_dtoa_r+0x6c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  804304:	21801117 	ldw	r6,68(r4)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804308:	00c00044 	movi	r3,1
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  80430c:	100b883a 	mov	r5,r2
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804310:	1986983a 	sll	r3,r3,r6
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  804314:	11800115 	stw	r6,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804318:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  80431c:	0807cf00 	call	807cf0 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
  804320:	e0001015 	stw	zero,64(fp)
    }

  if (word0 (d) & Sign_bit)
  804324:	9001aa16 	blt	r18,zero,8049d0 <_dtoa_r+0x718>
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
  804328:	80000015 	stw	zero,0(r16)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
  80432c:	909ffc2c 	andhi	r2,r18,32752
  804330:	00dffc34 	movhi	r3,32752
  804334:	10c1af26 	beq	r2,r3,8049f4 <_dtoa_r+0x73c>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
  804338:	d9000117 	ldw	r4,4(sp)
  80433c:	000d883a 	mov	r6,zero
  804340:	000f883a 	mov	r7,zero
  804344:	880b883a 	mov	r5,r17
  804348:	080ead80 	call	80ead8 <__eqdf2>
  80434c:	1000191e 	bne	r2,zero,8043b4 <_dtoa_r+0xfc>
    {
      *decpt = 1;
  804350:	d8c02517 	ldw	r3,148(sp)
  804354:	00800044 	movi	r2,1
  804358:	18800015 	stw	r2,0(r3)
      s = "0";
      if (rve)
  80435c:	d8802717 	ldw	r2,156(sp)
  804360:	10031b26 	beq	r2,zero,804fd0 <_dtoa_r+0xd18>
  804364:	1009883a 	mov	r4,r2
	*rve = s + 1;
  804368:	00802074 	movhi	r2,129
  80436c:	108bb144 	addi	r2,r2,11973
      return s;
  804370:	00c02074 	movhi	r3,129
	*rve = s + 1;
  804374:	20800015 	stw	r2,0(r4)
      return s;
  804378:	188bb104 	addi	r2,r3,11972
  80437c:	d8800215 	stw	r2,8(sp)
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
  804380:	d8800217 	ldw	r2,8(sp)
  804384:	dfc02317 	ldw	ra,140(sp)
  804388:	df002217 	ldw	fp,136(sp)
  80438c:	ddc02117 	ldw	r23,132(sp)
  804390:	dd802017 	ldw	r22,128(sp)
  804394:	dd401f17 	ldw	r21,124(sp)
  804398:	dd001e17 	ldw	r20,120(sp)
  80439c:	dcc01d17 	ldw	r19,116(sp)
  8043a0:	dc801c17 	ldw	r18,112(sp)
  8043a4:	dc401b17 	ldw	r17,108(sp)
  8043a8:	dc001a17 	ldw	r16,104(sp)
  8043ac:	dec02404 	addi	sp,sp,144
  8043b0:	f800283a 	ret
  b = d2b (ptr, d.d, &be, &bbits);
  8043b4:	dd000117 	ldw	r20,4(sp)
  8043b8:	d8801804 	addi	r2,sp,96
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  8043bc:	9020d53a 	srli	r16,r18,20
  b = d2b (ptr, d.d, &be, &bbits);
  8043c0:	d8800015 	stw	r2,0(sp)
  8043c4:	d9c01904 	addi	r7,sp,100
  8043c8:	a00b883a 	mov	r5,r20
  8043cc:	880d883a 	mov	r6,r17
  8043d0:	e009883a 	mov	r4,fp
  8043d4:	0808e180 	call	808e18 <__d2b>
  8043d8:	1027883a 	mov	r19,r2
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  8043dc:	8001991e 	bne	r16,zero,804a44 <_dtoa_r+0x78c>
      i = bbits + be + (Bias + (P - 1) - 1);
  8043e0:	d8801817 	ldw	r2,96(sp)
  8043e4:	dc001917 	ldw	r16,100(sp)
  8043e8:	d8800215 	stw	r2,8(sp)
  8043ec:	1421883a 	add	r16,r2,r16
  8043f0:	80810c84 	addi	r2,r16,1074
       : (word1 (d) << (32 - i));
  8043f4:	10c00850 	cmplti	r3,r2,33
  8043f8:	1803071e 	bne	r3,zero,805018 <_dtoa_r+0xd60>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
  8043fc:	01001004 	movi	r4,64
  804400:	2085c83a 	sub	r2,r4,r2
  804404:	90a4983a 	sll	r18,r18,r2
  804408:	d8800117 	ldw	r2,4(sp)
  80440c:	81010484 	addi	r4,r16,1042
  804410:	1108d83a 	srl	r4,r2,r4
       : (word1 (d) << (32 - i));
  804414:	9108b03a 	or	r4,r18,r4
      d2.d = x;
  804418:	080fec00 	call	80fec0 <__floatunsidf>
  80441c:	1009883a 	mov	r4,r2
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  804420:	017f8434 	movhi	r5,65040
      denorm = 1;
  804424:	00800044 	movi	r2,1
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  804428:	194b883a 	add	r5,r3,r5
      i -= (Bias + (P - 1) - 1) + 1;
  80442c:	843fffc4 	addi	r16,r16,-1
      denorm = 1;
  804430:	d8800c15 	stw	r2,48(sp)
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  804434:	000d883a 	mov	r6,zero
  804438:	01cffe34 	movhi	r7,16376
  80443c:	080f4d40 	call	80f4d4 <__subdf3>
  804440:	0198dbf4 	movhi	r6,25455
  804444:	01cff4f4 	movhi	r7,16339
  804448:	3190d844 	addi	r6,r6,17249
  80444c:	39e1e9c4 	addi	r7,r7,-30809
  804450:	180b883a 	mov	r5,r3
  804454:	1009883a 	mov	r4,r2
  804458:	080ed280 	call	80ed28 <__muldf3>
  80445c:	8009883a 	mov	r4,r16
  804460:	102b883a 	mov	r21,r2
  804464:	1825883a 	mov	r18,r3
  804468:	080fe080 	call	80fe08 <__floatsidf>
  80446c:	019427f4 	movhi	r6,20639
  804470:	01cff4f4 	movhi	r7,16339
  804474:	319e7ec4 	addi	r6,r6,31227
  804478:	39d104c4 	addi	r7,r7,17427
  80447c:	1009883a 	mov	r4,r2
  804480:	180b883a 	mov	r5,r3
  804484:	080ed280 	call	80ed28 <__muldf3>
  804488:	a809883a 	mov	r4,r21
  80448c:	900b883a 	mov	r5,r18
  804490:	100d883a 	mov	r6,r2
  804494:	180f883a 	mov	r7,r3
  804498:	080d8b80 	call	80d8b8 <__adddf3>
  80449c:	01a2d874 	movhi	r6,35681
  8044a0:	01cff1f4 	movhi	r7,16327
  8044a4:	31b22cc4 	addi	r6,r6,-14157
  8044a8:	39e28a04 	addi	r7,r7,-30168
  8044ac:	1009883a 	mov	r4,r2
  8044b0:	180b883a 	mov	r5,r3
  8044b4:	102d883a 	mov	r22,r2
  8044b8:	182b883a 	mov	r21,r3
  8044bc:	080d8b80 	call	80d8b8 <__adddf3>
  k = (int) ds;
  8044c0:	1009883a 	mov	r4,r2
  8044c4:	180b883a 	mov	r5,r3
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  8044c8:	1029883a 	mov	r20,r2
  8044cc:	182f883a 	mov	r23,r3
  k = (int) ds;
  8044d0:	080fd880 	call	80fd88 <__fixdfsi>
  if (ds < 0. && ds != k)
  8044d4:	01a2d874 	movhi	r6,35681
  8044d8:	01eff1f4 	movhi	r7,49095
  8044dc:	31b22cc4 	addi	r6,r6,-14157
  8044e0:	39e28a04 	addi	r7,r7,-30168
  8044e4:	b009883a 	mov	r4,r22
  8044e8:	a80b883a 	mov	r5,r21
  k = (int) ds;
  8044ec:	1025883a 	mov	r18,r2
  if (ds < 0. && ds != k)
  8044f0:	080ec400 	call	80ec40 <__ledf2>
  8044f4:	1000090e 	bge	r2,zero,80451c <_dtoa_r+0x264>
  8044f8:	9009883a 	mov	r4,r18
  8044fc:	080fe080 	call	80fe08 <__floatsidf>
  804500:	a00d883a 	mov	r6,r20
  804504:	b80f883a 	mov	r7,r23
  804508:	1009883a 	mov	r4,r2
  80450c:	180b883a 	mov	r5,r3
  804510:	080ead80 	call	80ead8 <__eqdf2>
  804514:	10000126 	beq	r2,zero,80451c <_dtoa_r+0x264>
    k--;			/* want k = floor(ds) */
  804518:	94bfffc4 	addi	r18,r18,-1
  j = bbits - i - 1;
  80451c:	d8800217 	ldw	r2,8(sp)
  804520:	1421c83a 	sub	r16,r2,r16
  if (k >= 0 && k <= Ten_pmax)
  804524:	908005e8 	cmpgeui	r2,r18,23
  j = bbits - i - 1;
  804528:	85ffffc4 	addi	r23,r16,-1
  if (k >= 0 && k <= Ten_pmax)
  80452c:	1002a01e 	bne	r2,zero,804fb0 <_dtoa_r+0xcf8>
      if (d.d < tens[k])
  804530:	900690fa 	slli	r3,r18,3
  804534:	00802074 	movhi	r2,129
  804538:	108c1204 	addi	r2,r2,12360
  80453c:	10c5883a 	add	r2,r2,r3
  804540:	11800017 	ldw	r6,0(r2)
  804544:	11c00117 	ldw	r7,4(r2)
  804548:	d9000117 	ldw	r4,4(sp)
  80454c:	880b883a 	mov	r5,r17
  804550:	080ec400 	call	80ec40 <__ledf2>
  804554:	1002750e 	bge	r2,zero,804f2c <_dtoa_r+0xc74>
      k_check = 0;
  804558:	d8000915 	stw	zero,36(sp)
	k--;
  80455c:	94bfffc4 	addi	r18,r18,-1
  if (j >= 0)
  804560:	b8029616 	blt	r23,zero,804fbc <_dtoa_r+0xd04>
      b2 = 0;
  804564:	d8000615 	stw	zero,24(sp)
  if (k >= 0)
  804568:	9002730e 	bge	r18,zero,804f38 <_dtoa_r+0xc80>
      b2 -= k;
  80456c:	d8800617 	ldw	r2,24(sp)
  if (mode < 0 || mode > 9)
  804570:	d8c00317 	ldw	r3,12(sp)
      b5 = -k;
  804574:	dc800515 	stw	r18,20(sp)
      b2 -= k;
  804578:	1485c83a 	sub	r2,r2,r18
  80457c:	d8800615 	stw	r2,24(sp)
      b5 = -k;
  804580:	0485c83a 	sub	r2,zero,r18
  804584:	d8800715 	stw	r2,28(sp)
  if (mode < 0 || mode > 9)
  804588:	188002a8 	cmpgeui	r2,r3,10
      s5 = 0;
  80458c:	0025883a 	mov	r18,zero
  if (mode < 0 || mode > 9)
  804590:	10026f1e 	bne	r2,zero,804f50 <_dtoa_r+0xc98>
  if (mode > 5)
  804594:	18800190 	cmplti	r2,r3,6
  804598:	10029d1e 	bne	r2,zero,805010 <_dtoa_r+0xd58>
      mode -= 4;
  80459c:	18bfff04 	addi	r2,r3,-4
  8045a0:	d8800315 	stw	r2,12(sp)
      try_quick = 0;
  8045a4:	0021883a 	mov	r16,zero
  8045a8:	1007883a 	mov	r3,r2
  switch (mode)
  8045ac:	18800120 	cmpeqi	r2,r3,4
  8045b0:	1003791e 	bne	r2,zero,805398 <_dtoa_r+0x10e0>
  8045b4:	18800160 	cmpeqi	r2,r3,5
  8045b8:	1003361e 	bne	r2,zero,805294 <_dtoa_r+0xfdc>
  8045bc:	188000a0 	cmpeqi	r2,r3,2
  8045c0:	10026e26 	beq	r2,zero,804f7c <_dtoa_r+0xcc4>
      leftright = 0;
  8045c4:	d8000815 	stw	zero,32(sp)
      if (ndigits <= 0)
  8045c8:	d8802417 	ldw	r2,144(sp)
  8045cc:	0083420e 	bge	zero,r2,8052d8 <_dtoa_r+0x1020>
  8045d0:	d8800b15 	stw	r2,44(sp)
  8045d4:	d8800415 	stw	r2,16(sp)
  8045d8:	100d883a 	mov	r6,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8045dc:	e0001115 	stw	zero,68(fp)
  8045e0:	30800610 	cmplti	r2,r6,24
  8045e4:	1005291e 	bne	r2,zero,805a8c <_dtoa_r+0x17d4>
  8045e8:	00c00044 	movi	r3,1
  j = sizeof (__ULong);
  8045ec:	00800104 	movi	r2,4
       j <<= 1)
  8045f0:	1085883a 	add	r2,r2,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8045f4:	11000504 	addi	r4,r2,20
    _REENT_MP_RESULT_K(ptr)++;
  8045f8:	180b883a 	mov	r5,r3
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8045fc:	18c00044 	addi	r3,r3,1
  804600:	313ffb2e 	bgeu	r6,r4,8045f0 <_dtoa_r+0x338>
  804604:	e1401115 	stw	r5,68(fp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  804608:	e009883a 	mov	r4,fp
  80460c:	0807c4c0 	call	807c4c <_Balloc>
  804610:	d8800215 	stw	r2,8(sp)
  804614:	10051626 	beq	r2,zero,805a70 <_dtoa_r+0x17b8>
  804618:	e0801015 	stw	r2,64(fp)
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
  80461c:	d8800417 	ldw	r2,16(sp)
  804620:	108003e8 	cmpgeui	r2,r2,15
  804624:	10011c1e 	bne	r2,zero,804a98 <_dtoa_r+0x7e0>
  804628:	80011b26 	beq	r16,zero,804a98 <_dtoa_r+0x7e0>
      if (k > 0)
  80462c:	d9000517 	ldw	r4,20(sp)
  804630:	0103a40e 	bge	zero,r4,8054c4 <_dtoa_r+0x120c>
	  ds = tens[k & 0xf];
  804634:	208003cc 	andi	r2,r4,15
  804638:	100690fa 	slli	r3,r2,3
	  j = k >> 4;
  80463c:	202dd13a 	srai	r22,r4,4
	  ds = tens[k & 0xf];
  804640:	00802074 	movhi	r2,129
  804644:	108c1204 	addi	r2,r2,12360
  804648:	10c5883a 	add	r2,r2,r3
	  if (j & Bletch)
  80464c:	b0c0040c 	andi	r3,r22,16
	  ds = tens[k & 0xf];
  804650:	12400017 	ldw	r9,0(r2)
  804654:	12000117 	ldw	r8,4(r2)
	  if (j & Bletch)
  804658:	18034926 	beq	r3,zero,805380 <_dtoa_r+0x10c8>
	      d.d /= bigtens[n_bigtens - 1];
  80465c:	00802074 	movhi	r2,129
  804660:	108c0804 	addi	r2,r2,12320
  804664:	11800817 	ldw	r6,32(r2)
  804668:	11c00917 	ldw	r7,36(r2)
  80466c:	d9000117 	ldw	r4,4(sp)
  804670:	880b883a 	mov	r5,r17
  804674:	da000e15 	stw	r8,56(sp)
  804678:	da400d15 	stw	r9,52(sp)
  80467c:	080e1a80 	call	80e1a8 <__divdf3>
  804680:	da400d17 	ldw	r9,52(sp)
  804684:	da000e17 	ldw	r8,56(sp)
	      j &= Bletch - 1;
  804688:	b58003cc 	andi	r22,r22,15
	      d.d /= bigtens[n_bigtens - 1];
  80468c:	1021883a 	mov	r16,r2
  804690:	d8c00a15 	stw	r3,40(sp)
	      ieps++;
  804694:	050000c4 	movi	r20,3
	  for (; j; j >>= 1, i++)
  804698:	b0001126 	beq	r22,zero,8046e0 <_dtoa_r+0x428>
  80469c:	05402074 	movhi	r21,129
  8046a0:	ad4c0804 	addi	r21,r21,12320
  8046a4:	4809883a 	mov	r4,r9
  8046a8:	400b883a 	mov	r5,r8
	    if (j & 1)
  8046ac:	b180004c 	andi	r6,r22,1
  8046b0:	30000626 	beq	r6,zero,8046cc <_dtoa_r+0x414>
		ds *= bigtens[i];
  8046b4:	a9800017 	ldw	r6,0(r21)
  8046b8:	a9c00117 	ldw	r7,4(r21)
		ieps++;
  8046bc:	a5000044 	addi	r20,r20,1
		ds *= bigtens[i];
  8046c0:	080ed280 	call	80ed28 <__muldf3>
  8046c4:	1009883a 	mov	r4,r2
  8046c8:	180b883a 	mov	r5,r3
	  for (; j; j >>= 1, i++)
  8046cc:	b02dd07a 	srai	r22,r22,1
  8046d0:	ad400204 	addi	r21,r21,8
  8046d4:	b03ff51e 	bne	r22,zero,8046ac <_dtoa_r+0x3f4>
  8046d8:	2013883a 	mov	r9,r4
  8046dc:	2811883a 	mov	r8,r5
	  d.d /= ds;
  8046e0:	d9400a17 	ldw	r5,40(sp)
  8046e4:	480d883a 	mov	r6,r9
  8046e8:	400f883a 	mov	r7,r8
  8046ec:	8009883a 	mov	r4,r16
  8046f0:	080e1a80 	call	80e1a8 <__divdf3>
  8046f4:	102d883a 	mov	r22,r2
  8046f8:	182b883a 	mov	r21,r3
      if (k_check && d.d < 1. && ilim > 0)
  8046fc:	d8800917 	ldw	r2,36(sp)
  804700:	10000626 	beq	r2,zero,80471c <_dtoa_r+0x464>
  804704:	000d883a 	mov	r6,zero
  804708:	01cffc34 	movhi	r7,16368
  80470c:	b009883a 	mov	r4,r22
  804710:	a80b883a 	mov	r5,r21
  804714:	080ec400 	call	80ec40 <__ledf2>
  804718:	10045716 	blt	r2,zero,805878 <_dtoa_r+0x15c0>
      eps.d = ieps * d.d + 7.;
  80471c:	a009883a 	mov	r4,r20
  804720:	080fe080 	call	80fe08 <__floatsidf>
  804724:	b00d883a 	mov	r6,r22
  804728:	a80f883a 	mov	r7,r21
  80472c:	1009883a 	mov	r4,r2
  804730:	180b883a 	mov	r5,r3
  804734:	080ed280 	call	80ed28 <__muldf3>
  804738:	000d883a 	mov	r6,zero
  80473c:	01d00734 	movhi	r7,16412
  804740:	1009883a 	mov	r4,r2
  804744:	180b883a 	mov	r5,r3
  804748:	080d8b80 	call	80d8b8 <__adddf3>
  80474c:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  804750:	00bf3034 	movhi	r2,64704
  804754:	1885883a 	add	r2,r3,r2
  804758:	d8800f15 	stw	r2,60(sp)
      if (ilim == 0)
  80475c:	d8800417 	ldw	r2,16(sp)
  804760:	10033a26 	beq	r2,zero,80544c <_dtoa_r+0x1194>
  804764:	d8800517 	ldw	r2,20(sp)
  804768:	d8801415 	stw	r2,80(sp)
  80476c:	d8800417 	ldw	r2,16(sp)
  804770:	d8800e15 	stw	r2,56(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804774:	10bfffc4 	addi	r2,r2,-1
  804778:	100690fa 	slli	r3,r2,3
  80477c:	00802074 	movhi	r2,129
  804780:	108c1204 	addi	r2,r2,12360
  804784:	10c5883a 	add	r2,r2,r3
  804788:	12c00017 	ldw	r11,0(r2)
  80478c:	13000117 	ldw	r12,4(r2)
	      L = d.d;
  804790:	a80b883a 	mov	r5,r21
  804794:	b009883a 	mov	r4,r22
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804798:	dac01215 	stw	r11,72(sp)
  80479c:	db001115 	stw	r12,68(sp)
	      L = d.d;
  8047a0:	080fd880 	call	80fd88 <__fixdfsi>
  8047a4:	1009883a 	mov	r4,r2
	      *s++ = '0' + (int) L;
  8047a8:	14000c04 	addi	r16,r2,48
	      d.d -= L;
  8047ac:	080fe080 	call	80fe08 <__floatsidf>
  8047b0:	100d883a 	mov	r6,r2
  8047b4:	180f883a 	mov	r7,r3
  8047b8:	b009883a 	mov	r4,r22
  8047bc:	a80b883a 	mov	r5,r21
  8047c0:	d8801515 	stw	r2,84(sp)
  8047c4:	d8c01615 	stw	r3,88(sp)
  8047c8:	080f4d40 	call	80f4d4 <__subdf3>
	      *s++ = '0' + (int) L;
  8047cc:	d9c00217 	ldw	r7,8(sp)
      if (leftright)
  8047d0:	db001117 	ldw	r12,68(sp)
	      *s++ = '0' + (int) L;
  8047d4:	8011883a 	mov	r8,r16
      if (leftright)
  8047d8:	dac01217 	ldw	r11,72(sp)
	      *s++ = '0' + (int) L;
  8047dc:	dc001315 	stw	r16,76(sp)
	      d.d -= L;
  8047e0:	1821883a 	mov	r16,r3
      if (leftright)
  8047e4:	d8c00817 	ldw	r3,32(sp)
	      *s++ = '0' + (int) L;
  8047e8:	39000044 	addi	r4,r7,1
  8047ec:	d9000a15 	stw	r4,40(sp)
	      d.d -= L;
  8047f0:	d8801015 	stw	r2,64(sp)
  8047f4:	da001115 	stw	r8,68(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8047f8:	580d883a 	mov	r6,r11
  8047fc:	600f883a 	mov	r7,r12
      if (leftright)
  804800:	1803c226 	beq	r3,zero,80570c <_dtoa_r+0x1454>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804804:	0009883a 	mov	r4,zero
  804808:	014ff834 	movhi	r5,16352
  80480c:	080e1a80 	call	80e1a8 <__divdf3>
  804810:	d9c00f17 	ldw	r7,60(sp)
  804814:	d9800d17 	ldw	r6,52(sp)
  804818:	1009883a 	mov	r4,r2
  80481c:	180b883a 	mov	r5,r3
  804820:	080f4d40 	call	80f4d4 <__subdf3>
	      *s++ = '0' + (int) L;
  804824:	d9c00217 	ldw	r7,8(sp)
  804828:	d9001317 	ldw	r4,76(sp)
	      if (d.d < eps.d)
  80482c:	d9801017 	ldw	r6,64(sp)
  804830:	180b883a 	mov	r5,r3
	      *s++ = '0' + (int) L;
  804834:	39000005 	stb	r4,0(r7)
	      if (d.d < eps.d)
  804838:	800f883a 	mov	r7,r16
  80483c:	1009883a 	mov	r4,r2
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804840:	1029883a 	mov	r20,r2
  804844:	d8c00f15 	stw	r3,60(sp)
	      if (d.d < eps.d)
  804848:	080eb580 	call	80eb58 <__gedf2>
  80484c:	da001117 	ldw	r8,68(sp)
  804850:	00846216 	blt	zero,r2,8059dc <_dtoa_r+0x1724>
	  for (i = 0;;)
  804854:	dc801315 	stw	r18,76(sp)
  804858:	ddc01715 	stw	r23,92(sp)
  80485c:	dc800f17 	ldw	r18,60(sp)
  804860:	dcc01115 	stw	r19,68(sp)
  804864:	df001215 	stw	fp,72(sp)
  804868:	dc400f15 	stw	r17,60(sp)
  80486c:	dcc01517 	ldw	r19,84(sp)
  804870:	ddc01617 	ldw	r23,88(sp)
  804874:	df001017 	ldw	fp,64(sp)
  804878:	d8000d15 	stw	zero,52(sp)
  80487c:	4023883a 	mov	r17,r8
  804880:	00002e06 	br	80493c <_dtoa_r+0x684>
	      if (++i >= ilim)
  804884:	d8800d17 	ldw	r2,52(sp)
  804888:	d8c00e17 	ldw	r3,56(sp)
  80488c:	10800044 	addi	r2,r2,1
  804890:	d8800d15 	stw	r2,52(sp)
  804894:	10c07b0e 	bge	r2,r3,804a84 <_dtoa_r+0x7cc>
	      eps.d *= 10.;
  804898:	a009883a 	mov	r4,r20
  80489c:	900b883a 	mov	r5,r18
  8048a0:	000d883a 	mov	r6,zero
  8048a4:	01d00934 	movhi	r7,16420
  8048a8:	080ed280 	call	80ed28 <__muldf3>
	      d.d *= 10.;
  8048ac:	000d883a 	mov	r6,zero
  8048b0:	01d00934 	movhi	r7,16420
  8048b4:	e009883a 	mov	r4,fp
  8048b8:	800b883a 	mov	r5,r16
	      eps.d *= 10.;
  8048bc:	1029883a 	mov	r20,r2
  8048c0:	1825883a 	mov	r18,r3
	      d.d *= 10.;
  8048c4:	080ed280 	call	80ed28 <__muldf3>
	      L = d.d;
  8048c8:	180b883a 	mov	r5,r3
  8048cc:	1009883a 	mov	r4,r2
	      d.d *= 10.;
  8048d0:	182b883a 	mov	r21,r3
  8048d4:	102d883a 	mov	r22,r2
	      L = d.d;
  8048d8:	080fd880 	call	80fd88 <__fixdfsi>
	      d.d -= L;
  8048dc:	1009883a 	mov	r4,r2
	      L = d.d;
  8048e0:	1023883a 	mov	r17,r2
	      d.d -= L;
  8048e4:	080fe080 	call	80fe08 <__floatsidf>
  8048e8:	100d883a 	mov	r6,r2
  8048ec:	180f883a 	mov	r7,r3
  8048f0:	b009883a 	mov	r4,r22
  8048f4:	a80b883a 	mov	r5,r21
  8048f8:	1027883a 	mov	r19,r2
  8048fc:	182f883a 	mov	r23,r3
  804900:	080f4d40 	call	80f4d4 <__subdf3>
	      if (d.d < eps.d)
  804904:	1009883a 	mov	r4,r2
	      d.d -= L;
  804908:	1039883a 	mov	fp,r2
	      *s++ = '0' + (int) L;
  80490c:	d8800a17 	ldw	r2,40(sp)
  804910:	8c400c04 	addi	r17,r17,48
	      if (d.d < eps.d)
  804914:	180b883a 	mov	r5,r3
  804918:	a00d883a 	mov	r6,r20
  80491c:	900f883a 	mov	r7,r18
	      *s++ = '0' + (int) L;
  804920:	14400005 	stb	r17,0(r2)
	      d.d -= L;
  804924:	1821883a 	mov	r16,r3
	      if (d.d < eps.d)
  804928:	080ec400 	call	80ec40 <__ledf2>
	      *s++ = '0' + (int) L;
  80492c:	d8c00a17 	ldw	r3,40(sp)
  804930:	18c00044 	addi	r3,r3,1
  804934:	d8c00a15 	stw	r3,40(sp)
	      if (d.d < eps.d)
  804938:	10040816 	blt	r2,zero,80595c <_dtoa_r+0x16a4>
	      if (1. - d.d < eps.d)
  80493c:	b00d883a 	mov	r6,r22
  804940:	a80f883a 	mov	r7,r21
  804944:	0009883a 	mov	r4,zero
  804948:	014ffc34 	movhi	r5,16368
  80494c:	080f4d40 	call	80f4d4 <__subdf3>
  804950:	980d883a 	mov	r6,r19
  804954:	b80f883a 	mov	r7,r23
  804958:	1009883a 	mov	r4,r2
  80495c:	180b883a 	mov	r5,r3
  804960:	080d8b80 	call	80d8b8 <__adddf3>
  804964:	a00d883a 	mov	r6,r20
  804968:	900f883a 	mov	r7,r18
  80496c:	1009883a 	mov	r4,r2
  804970:	180b883a 	mov	r5,r3
  804974:	080ec400 	call	80ec40 <__ledf2>
  804978:	103fc20e 	bge	r2,zero,804884 <_dtoa_r+0x5cc>
			k++;
  80497c:	d8801417 	ldw	r2,80(sp)
  804980:	dcc01117 	ldw	r19,68(sp)
  804984:	df001217 	ldw	fp,72(sp)
  804988:	10800044 	addi	r2,r2,1
  80498c:	dd000a17 	ldw	r20,40(sp)
  804990:	d9000217 	ldw	r4,8(sp)
  804994:	8811883a 	mov	r8,r17
  804998:	d8800515 	stw	r2,20(sp)
  80499c:	00000306 	br	8049ac <_dtoa_r+0x6f4>
		    if (s == s0)
  8049a0:	1903d626 	beq	r3,r4,8058fc <_dtoa_r+0x1644>
		  while (*--s == '9')
  8049a4:	1a3fffc3 	ldbu	r8,-1(r3)
  8049a8:	1829883a 	mov	r20,r3
  8049ac:	40803fcc 	andi	r2,r8,255
  8049b0:	1080201c 	xori	r2,r2,128
  8049b4:	10bfe004 	addi	r2,r2,-128
  8049b8:	10800e60 	cmpeqi	r2,r2,57
  8049bc:	a0ffffc4 	addi	r3,r20,-1
  8049c0:	103ff71e 	bne	r2,zero,8049a0 <_dtoa_r+0x6e8>
		  ++*s++;
  8049c4:	42000044 	addi	r8,r8,1
  8049c8:	1a000005 	stb	r8,0(r3)
  8049cc:	00014c06 	br	804f00 <_dtoa_r+0xc48>
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  8049d0:	04600034 	movhi	r17,32768
  8049d4:	8c7fffc4 	addi	r17,r17,-1
  8049d8:	9462703a 	and	r17,r18,r17
      *sign = 1;
  8049dc:	00800044 	movi	r2,1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  8049e0:	8825883a 	mov	r18,r17
      *sign = 1;
  8049e4:	80800015 	stw	r2,0(r16)
  if ((word0 (d) & Exp_mask) == Exp_mask)
  8049e8:	00dffc34 	movhi	r3,32752
  8049ec:	909ffc2c 	andhi	r2,r18,32752
  8049f0:	10fe511e 	bne	r2,r3,804338 <_dtoa_r+0x80>
      *decpt = 9999;
  8049f4:	d9002517 	ldw	r4,148(sp)
  8049f8:	00c9c3c4 	movi	r3,9999
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8049fc:	00800434 	movhi	r2,16
      *decpt = 9999;
  804a00:	20c00015 	stw	r3,0(r4)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  804a04:	d8c00117 	ldw	r3,4(sp)
  804a08:	10bfffc4 	addi	r2,r2,-1
  804a0c:	9084703a 	and	r2,r18,r2
  804a10:	10e6b03a 	or	r19,r2,r3
  804a14:	9800151e 	bne	r19,zero,804a6c <_dtoa_r+0x7b4>
      if (rve)
  804a18:	d8802717 	ldw	r2,156(sp)
  804a1c:	10041026 	beq	r2,zero,805a60 <_dtoa_r+0x17a8>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  804a20:	00802074 	movhi	r2,129
  804a24:	1007883a 	mov	r3,r2
  804a28:	18cbbb04 	addi	r3,r3,12012
	  s[3] ? s + 8 :
  804a2c:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  804a30:	d8c00215 	stw	r3,8(sp)
	  s[3] ? s + 8 :
  804a34:	108bbd04 	addi	r2,r2,12020
	*rve =
  804a38:	d8c02717 	ldw	r3,156(sp)
  804a3c:	18800015 	stw	r2,0(r3)
  804a40:	003e4f06 	br	804380 <_dtoa_r+0xc8>
      i = bbits + be + (Bias + (P - 1) - 1);
  804a44:	d8801817 	ldw	r2,96(sp)
      word0 (d2) &= Frac_mask1;
  804a48:	01400434 	movhi	r5,16
  804a4c:	297fffc4 	addi	r5,r5,-1
  804a50:	894a703a 	and	r5,r17,r5
      i = bbits + be + (Bias + (P - 1) - 1);
  804a54:	d8800215 	stw	r2,8(sp)
      d2.d = d.d;
  804a58:	a009883a 	mov	r4,r20
      word0 (d2) |= Exp_11;
  804a5c:	294ffc34 	orhi	r5,r5,16368
      i -= Bias;
  804a60:	843f0044 	addi	r16,r16,-1023
      denorm = 0;
  804a64:	d8000c15 	stw	zero,48(sp)
  804a68:	003e7206 	br	804434 <_dtoa_r+0x17c>
      if (rve)
  804a6c:	d8802717 	ldw	r2,156(sp)
  804a70:	1002011e 	bne	r2,zero,805278 <_dtoa_r+0xfc0>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  804a74:	00802074 	movhi	r2,129
  804a78:	108bba04 	addi	r2,r2,12008
  804a7c:	d8800215 	stw	r2,8(sp)
  804a80:	003e3f06 	br	804380 <_dtoa_r+0xc8>
  804a84:	dc801317 	ldw	r18,76(sp)
  804a88:	ddc01717 	ldw	r23,92(sp)
  804a8c:	dcc01117 	ldw	r19,68(sp)
  804a90:	df001217 	ldw	fp,72(sp)
  804a94:	dc400f17 	ldw	r17,60(sp)
  if (be >= 0 && k <= Int_max)
  804a98:	d8801917 	ldw	r2,100(sp)
  804a9c:	10007d16 	blt	r2,zero,804c94 <_dtoa_r+0x9dc>
  804aa0:	d9000517 	ldw	r4,20(sp)
  804aa4:	20c003c8 	cmpgei	r3,r4,15
  804aa8:	18007a1e 	bne	r3,zero,804c94 <_dtoa_r+0x9dc>
      ds = tens[k];
  804aac:	200690fa 	slli	r3,r4,3
  804ab0:	00802074 	movhi	r2,129
  804ab4:	108c1204 	addi	r2,r2,12360
  804ab8:	10c5883a 	add	r2,r2,r3
  804abc:	14800017 	ldw	r18,0(r2)
  804ac0:	10800117 	ldw	r2,4(r2)
  804ac4:	d8800315 	stw	r2,12(sp)
      if (ndigits < 0 && ilim <= 0)
  804ac8:	d8802417 	ldw	r2,144(sp)
  804acc:	1000140e 	bge	r2,zero,804b20 <_dtoa_r+0x868>
  804ad0:	d8800417 	ldw	r2,16(sp)
  804ad4:	00801216 	blt	zero,r2,804b20 <_dtoa_r+0x868>
	  if (ilim < 0 || d.d <= 5 * ds)
  804ad8:	1002711e 	bne	r2,zero,8054a0 <_dtoa_r+0x11e8>
  804adc:	d9400317 	ldw	r5,12(sp)
  804ae0:	000d883a 	mov	r6,zero
  804ae4:	01d00534 	movhi	r7,16404
  804ae8:	9009883a 	mov	r4,r18
  804aec:	080ed280 	call	80ed28 <__muldf3>
  804af0:	d9000117 	ldw	r4,4(sp)
  804af4:	100d883a 	mov	r6,r2
  804af8:	180f883a 	mov	r7,r3
  804afc:	880b883a 	mov	r5,r17
  804b00:	080ec400 	call	80ec40 <__ledf2>
	  S = mhi = 0;
  804b04:	d8000715 	stw	zero,28(sp)
  804b08:	0021883a 	mov	r16,zero
	  if (ilim < 0 || d.d <= 5 * ds)
  804b0c:	00820516 	blt	zero,r2,805324 <_dtoa_r+0x106c>
	  k = -1 - ndigits;
  804b10:	d8802417 	ldw	r2,144(sp)
	  goto ret;
  804b14:	dd000217 	ldw	r20,8(sp)
	  k = -1 - ndigits;
  804b18:	00a2303a 	nor	r17,zero,r2
	  goto ret;
  804b1c:	00020706 	br	80533c <_dtoa_r+0x1084>
	  L = d.d / ds;
  804b20:	dd000317 	ldw	r20,12(sp)
  804b24:	dc000117 	ldw	r16,4(sp)
  804b28:	900d883a 	mov	r6,r18
  804b2c:	a00f883a 	mov	r7,r20
  804b30:	8009883a 	mov	r4,r16
  804b34:	880b883a 	mov	r5,r17
  804b38:	080e1a80 	call	80e1a8 <__divdf3>
  804b3c:	180b883a 	mov	r5,r3
  804b40:	1009883a 	mov	r4,r2
  804b44:	080fd880 	call	80fd88 <__fixdfsi>
	  d.d -= L * ds;
  804b48:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  804b4c:	102f883a 	mov	r23,r2
	  d.d -= L * ds;
  804b50:	080fe080 	call	80fe08 <__floatsidf>
  804b54:	a00f883a 	mov	r7,r20
  804b58:	900d883a 	mov	r6,r18
  804b5c:	1009883a 	mov	r4,r2
  804b60:	180b883a 	mov	r5,r3
  804b64:	080ed280 	call	80ed28 <__muldf3>
  804b68:	8009883a 	mov	r4,r16
  804b6c:	880b883a 	mov	r5,r17
  804b70:	100d883a 	mov	r6,r2
  804b74:	180f883a 	mov	r7,r3
  804b78:	080f4d40 	call	80f4d4 <__subdf3>
	  *s++ = '0' + (int) L;
  804b7c:	d9400217 	ldw	r5,8(sp)
	  if (i == ilim)
  804b80:	d9000417 	ldw	r4,16(sp)
	  *s++ = '0' + (int) L;
  804b84:	ba000c04 	addi	r8,r23,48
  804b88:	2a000005 	stb	r8,0(r5)
	  if (i == ilim)
  804b8c:	21000060 	cmpeqi	r4,r4,1
	  d.d -= L * ds;
  804b90:	102b883a 	mov	r21,r2
  804b94:	182d883a 	mov	r22,r3
	  *s++ = '0' + (int) L;
  804b98:	2d000044 	addi	r20,r5,1
	  if (i == ilim)
  804b9c:	2002901e 	bne	r4,zero,8055e0 <_dtoa_r+0x1328>
  804ba0:	ddc00317 	ldw	r23,12(sp)
  804ba4:	0009883a 	mov	r4,zero
  804ba8:	014ffc34 	movhi	r5,16368
  804bac:	900d883a 	mov	r6,r18
  804bb0:	b80f883a 	mov	r7,r23
  804bb4:	080e1a80 	call	80e1a8 <__divdf3>
  804bb8:	a809883a 	mov	r4,r21
  804bbc:	b00b883a 	mov	r5,r22
  804bc0:	04000044 	movi	r16,1
  804bc4:	dcc00115 	stw	r19,4(sp)
  804bc8:	df000615 	stw	fp,24(sp)
  804bcc:	102b883a 	mov	r21,r2
  804bd0:	182d883a 	mov	r22,r3
  804bd4:	b823883a 	mov	r17,r23
  804bd8:	00001d06 	br	804c50 <_dtoa_r+0x998>
	  L = d.d / ds;
  804bdc:	a80d883a 	mov	r6,r21
  804be0:	b00f883a 	mov	r7,r22
  804be4:	b809883a 	mov	r4,r23
  804be8:	e00b883a 	mov	r5,fp
  804bec:	080ed280 	call	80ed28 <__muldf3>
  804bf0:	180b883a 	mov	r5,r3
  804bf4:	1009883a 	mov	r4,r2
  804bf8:	080fd880 	call	80fd88 <__fixdfsi>
	  d.d -= L * ds;
  804bfc:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  804c00:	1027883a 	mov	r19,r2
	  d.d -= L * ds;
  804c04:	080fe080 	call	80fe08 <__floatsidf>
  804c08:	900d883a 	mov	r6,r18
  804c0c:	880f883a 	mov	r7,r17
  804c10:	1009883a 	mov	r4,r2
  804c14:	180b883a 	mov	r5,r3
  804c18:	080ed280 	call	80ed28 <__muldf3>
  804c1c:	b809883a 	mov	r4,r23
  804c20:	e00b883a 	mov	r5,fp
  804c24:	100d883a 	mov	r6,r2
  804c28:	180f883a 	mov	r7,r3
  804c2c:	080f4d40 	call	80f4d4 <__subdf3>
  804c30:	1009883a 	mov	r4,r2
	  if (i == ilim)
  804c34:	d8800417 	ldw	r2,16(sp)
	  *s++ = '0' + (int) L;
  804c38:	9a000c04 	addi	r8,r19,48
  804c3c:	a2000005 	stb	r8,0(r20)
      for (i = 1;; i++)
  804c40:	84000044 	addi	r16,r16,1
	  *s++ = '0' + (int) L;
  804c44:	a5000044 	addi	r20,r20,1
	  d.d -= L * ds;
  804c48:	180b883a 	mov	r5,r3
	  if (i == ilim)
  804c4c:	80825f26 	beq	r16,r2,8055cc <_dtoa_r+0x1314>
	  if (!(d.d *= 10.))
  804c50:	000d883a 	mov	r6,zero
  804c54:	01d00934 	movhi	r7,16420
  804c58:	080ed280 	call	80ed28 <__muldf3>
  804c5c:	000d883a 	mov	r6,zero
  804c60:	000f883a 	mov	r7,zero
  804c64:	1009883a 	mov	r4,r2
  804c68:	180b883a 	mov	r5,r3
  804c6c:	102f883a 	mov	r23,r2
  804c70:	1839883a 	mov	fp,r3
  804c74:	080ead80 	call	80ead8 <__eqdf2>
  804c78:	103fd81e 	bne	r2,zero,804bdc <_dtoa_r+0x924>
  *decpt = k + 1;
  804c7c:	d8800517 	ldw	r2,20(sp)
  804c80:	dcc00117 	ldw	r19,4(sp)
  804c84:	df000617 	ldw	fp,24(sp)
  804c88:	10800044 	addi	r2,r2,1
  804c8c:	d8800515 	stw	r2,20(sp)
  804c90:	00009b06 	br	804f00 <_dtoa_r+0xc48>
  if (leftright)
  804c94:	d8c00817 	ldw	r3,32(sp)
  804c98:	1800d126 	beq	r3,zero,804fe0 <_dtoa_r+0xd28>
      if (mode < 2)
  804c9c:	d8c00317 	ldw	r3,12(sp)
  804ca0:	18c00088 	cmpgei	r3,r3,2
  804ca4:	1801cf26 	beq	r3,zero,8053e4 <_dtoa_r+0x112c>
	  j = ilim - 1;
  804ca8:	d8800417 	ldw	r2,16(sp)
  804cac:	153fffc4 	addi	r20,r2,-1
	  if (m5 >= j)
  804cb0:	d8800717 	ldw	r2,28(sp)
  804cb4:	1501b00e 	bge	r2,r20,805378 <_dtoa_r+0x10c0>
	      s5 += j -= m5;
  804cb8:	a085c83a 	sub	r2,r20,r2
  804cbc:	dd000715 	stw	r20,28(sp)
  804cc0:	90a5883a 	add	r18,r18,r2
	      m5 = 0;
  804cc4:	0029883a 	mov	r20,zero
	  if ((i = ilim) < 0)
  804cc8:	d8800417 	ldw	r2,16(sp)
  804ccc:	10027816 	blt	r2,zero,8056b0 <_dtoa_r+0x13f8>
  m2 = b2;
  804cd0:	d8c00617 	ldw	r3,24(sp)
      s2 += i;
  804cd4:	b8af883a 	add	r23,r23,r2
  804cd8:	1885883a 	add	r2,r3,r2
  m2 = b2;
  804cdc:	182b883a 	mov	r21,r3
      s2 += i;
  804ce0:	d8800615 	stw	r2,24(sp)
      mhi = i2b (ptr, 1);
  804ce4:	01400044 	movi	r5,1
  804ce8:	e009883a 	mov	r4,fp
  804cec:	08081b00 	call	8081b0 <__i2b>
  804cf0:	1021883a 	mov	r16,r2
  if (m2 > 0 && s2 > 0)
  804cf4:	0540080e 	bge	zero,r21,804d18 <_dtoa_r+0xa60>
  804cf8:	05c0070e 	bge	zero,r23,804d18 <_dtoa_r+0xa60>
      i = m2 < s2 ? m2 : s2;
  804cfc:	a805883a 	mov	r2,r21
  804d00:	bd419516 	blt	r23,r21,805358 <_dtoa_r+0x10a0>
      b2 -= i;
  804d04:	d8c00617 	ldw	r3,24(sp)
      m2 -= i;
  804d08:	a8abc83a 	sub	r21,r21,r2
      s2 -= i;
  804d0c:	b8afc83a 	sub	r23,r23,r2
      b2 -= i;
  804d10:	1887c83a 	sub	r3,r3,r2
  804d14:	d8c00615 	stw	r3,24(sp)
  if (b5 > 0)
  804d18:	d8800717 	ldw	r2,28(sp)
  804d1c:	10001426 	beq	r2,zero,804d70 <_dtoa_r+0xab8>
      if (leftright)
  804d20:	d8800817 	ldw	r2,32(sp)
  804d24:	1001e126 	beq	r2,zero,8054ac <_dtoa_r+0x11f4>
	  if (m5 > 0)
  804d28:	05000e0e 	bge	zero,r20,804d64 <_dtoa_r+0xaac>
	      mhi = pow5mult (ptr, mhi, m5);
  804d2c:	800b883a 	mov	r5,r16
  804d30:	a00d883a 	mov	r6,r20
  804d34:	e009883a 	mov	r4,fp
  804d38:	08085880 	call	808588 <__pow5mult>
	      b1 = mult (ptr, mhi, b);
  804d3c:	980d883a 	mov	r6,r19
  804d40:	100b883a 	mov	r5,r2
  804d44:	e009883a 	mov	r4,fp
	      mhi = pow5mult (ptr, mhi, m5);
  804d48:	1021883a 	mov	r16,r2
	      b1 = mult (ptr, mhi, b);
  804d4c:	08082600 	call	808260 <__multiply>
  804d50:	102d883a 	mov	r22,r2
	      Bfree (ptr, b);
  804d54:	980b883a 	mov	r5,r19
  804d58:	e009883a 	mov	r4,fp
  804d5c:	0807cf00 	call	807cf0 <_Bfree>
	      b = b1;
  804d60:	b027883a 	mov	r19,r22
         if ((j = b5 - m5) != 0)
  804d64:	d8800717 	ldw	r2,28(sp)
  804d68:	150dc83a 	sub	r6,r2,r20
  804d6c:	15024b1e 	bne	r2,r20,80569c <_dtoa_r+0x13e4>
  S = i2b (ptr, 1);
  804d70:	01400044 	movi	r5,1
  804d74:	e009883a 	mov	r4,fp
  804d78:	08081b00 	call	8081b0 <__i2b>
  804d7c:	d8800715 	stw	r2,28(sp)
  if (s5 > 0)
  804d80:	0480aa16 	blt	zero,r18,80502c <_dtoa_r+0xd74>
  if (mode < 2)
  804d84:	d8800317 	ldw	r2,12(sp)
  804d88:	10800088 	cmpgei	r2,r2,2
  804d8c:	10014426 	beq	r2,zero,8052a0 <_dtoa_r+0xfe8>
  spec_case = 0;
  804d90:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  804d94:	00800044 	movi	r2,1
  804d98:	9000ad1e 	bne	r18,zero,805050 <_dtoa_r+0xd98>
  804d9c:	15c5883a 	add	r2,r2,r23
  804da0:	108007cc 	andi	r2,r2,31
  804da4:	10009826 	beq	r2,zero,805008 <_dtoa_r+0xd50>
    i = 32 - i;
  804da8:	00c00804 	movi	r3,32
  804dac:	1887c83a 	sub	r3,r3,r2
  if (i > 4)
  804db0:	19000150 	cmplti	r4,r3,5
  804db4:	2003151e 	bne	r4,zero,805a0c <_dtoa_r+0x1754>
      i -= 4;
  804db8:	00c00704 	movi	r3,28
  804dbc:	1885c83a 	sub	r2,r3,r2
      b2 += i;
  804dc0:	d8c00617 	ldw	r3,24(sp)
      m2 += i;
  804dc4:	a8ab883a 	add	r21,r21,r2
      s2 += i;
  804dc8:	b8af883a 	add	r23,r23,r2
      b2 += i;
  804dcc:	1887883a 	add	r3,r3,r2
  804dd0:	d8c00615 	stw	r3,24(sp)
  if (b2 > 0)
  804dd4:	d8800617 	ldw	r2,24(sp)
  804dd8:	00808516 	blt	zero,r2,804ff0 <_dtoa_r+0xd38>
  if (s2 > 0)
  804ddc:	05c0050e 	bge	zero,r23,804df4 <_dtoa_r+0xb3c>
    S = lshift (ptr, S, s2);
  804de0:	d9400717 	ldw	r5,28(sp)
  804de4:	b80d883a 	mov	r6,r23
  804de8:	e009883a 	mov	r4,fp
  804dec:	080871c0 	call	80871c <__lshift>
  804df0:	d8800715 	stw	r2,28(sp)
  if (k_check)
  804df4:	d8800917 	ldw	r2,36(sp)
  804df8:	10010d1e 	bne	r2,zero,805230 <_dtoa_r+0xf78>
  if (ilim <= 0 && mode > 2)
  804dfc:	d8800417 	ldw	r2,16(sp)
  804e00:	0080fa0e 	bge	zero,r2,8051ec <_dtoa_r+0xf34>
  if (leftright)
  804e04:	d8800817 	ldw	r2,32(sp)
  804e08:	1000a51e 	bne	r2,zero,8050a0 <_dtoa_r+0xde8>
  *decpt = k + 1;
  804e0c:	d8800517 	ldw	r2,20(sp)
  804e10:	10800044 	addi	r2,r2,1
  804e14:	d8800515 	stw	r2,20(sp)
  if (ilim <= 0 && mode > 2)
  804e18:	dc800717 	ldw	r18,28(sp)
  804e1c:	dd000417 	ldw	r20,16(sp)
  804e20:	dd800217 	ldw	r22,8(sp)
  804e24:	04400044 	movi	r17,1
  804e28:	00000706 	br	804e48 <_dtoa_r+0xb90>
	b = multadd (ptr, b, 10, 0);
  804e2c:	980b883a 	mov	r5,r19
  804e30:	000f883a 	mov	r7,zero
  804e34:	01800284 	movi	r6,10
  804e38:	e009883a 	mov	r4,fp
  804e3c:	0807d140 	call	807d14 <__multadd>
  804e40:	1027883a 	mov	r19,r2
    for (i = 1;; i++)
  804e44:	8c400044 	addi	r17,r17,1
	*s++ = dig = quorem (b, S) + '0';
  804e48:	900b883a 	mov	r5,r18
  804e4c:	9809883a 	mov	r4,r19
  804e50:	08040980 	call	804098 <quorem>
  804e54:	15400c04 	addi	r21,r2,48
  804e58:	b445883a 	add	r2,r22,r17
  804e5c:	157fffc5 	stb	r21,-1(r2)
	if (i >= ilim)
  804e60:	8d3ff216 	blt	r17,r20,804e2c <_dtoa_r+0xb74>
	*s++ = dig = quorem (b, S) + '0';
  804e64:	ddc00417 	ldw	r23,16(sp)
  804e68:	05c1490e 	bge	zero,r23,805390 <_dtoa_r+0x10d8>
  804e6c:	d8800217 	ldw	r2,8(sp)
  mhi = mlo = 0;
  804e70:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  804e74:	15ef883a 	add	r23,r2,r23
  b = lshift (ptr, b, 1);
  804e78:	980b883a 	mov	r5,r19
  804e7c:	e009883a 	mov	r4,fp
  804e80:	01800044 	movi	r6,1
  804e84:	080871c0 	call	80871c <__lshift>
  j = cmp (b, S);
  804e88:	d9400717 	ldw	r5,28(sp)
  804e8c:	1009883a 	mov	r4,r2
  b = lshift (ptr, b, 1);
  804e90:	1027883a 	mov	r19,r2
  j = cmp (b, S);
  804e94:	08089140 	call	808914 <__mcmp>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  804e98:	0081420e 	bge	zero,r2,8053a4 <_dtoa_r+0x10ec>
  804e9c:	d9000217 	ldw	r4,8(sp)
  804ea0:	00000106 	br	804ea8 <_dtoa_r+0xbf0>
	if (s == s0)
  804ea4:	b9014826 	beq	r23,r4,8053c8 <_dtoa_r+0x1110>
      while (*--s == '9')
  804ea8:	b8ffffc3 	ldbu	r3,-1(r23)
  804eac:	b829883a 	mov	r20,r23
  804eb0:	bdffffc4 	addi	r23,r23,-1
  804eb4:	18803fcc 	andi	r2,r3,255
  804eb8:	1080201c 	xori	r2,r2,128
  804ebc:	10bfe004 	addi	r2,r2,-128
  804ec0:	10800e60 	cmpeqi	r2,r2,57
  804ec4:	103ff71e 	bne	r2,zero,804ea4 <_dtoa_r+0xbec>
      ++*s++;
  804ec8:	18c00044 	addi	r3,r3,1
  804ecc:	b8c00005 	stb	r3,0(r23)
  Bfree (ptr, S);
  804ed0:	d9400717 	ldw	r5,28(sp)
  804ed4:	e009883a 	mov	r4,fp
  804ed8:	0807cf00 	call	807cf0 <_Bfree>
  if (mhi)
  804edc:	80000826 	beq	r16,zero,804f00 <_dtoa_r+0xc48>
      if (mlo && mlo != mhi)
  804ee0:	88000426 	beq	r17,zero,804ef4 <_dtoa_r+0xc3c>
  804ee4:	8c000326 	beq	r17,r16,804ef4 <_dtoa_r+0xc3c>
	Bfree (ptr, mlo);
  804ee8:	880b883a 	mov	r5,r17
  804eec:	e009883a 	mov	r4,fp
  804ef0:	0807cf00 	call	807cf0 <_Bfree>
      Bfree (ptr, mhi);
  804ef4:	800b883a 	mov	r5,r16
  804ef8:	e009883a 	mov	r4,fp
  804efc:	0807cf00 	call	807cf0 <_Bfree>
  Bfree (ptr, b);
  804f00:	980b883a 	mov	r5,r19
  804f04:	e009883a 	mov	r4,fp
  804f08:	0807cf00 	call	807cf0 <_Bfree>
  *decpt = k + 1;
  804f0c:	d8802517 	ldw	r2,148(sp)
  804f10:	d8c00517 	ldw	r3,20(sp)
  *s = 0;
  804f14:	a0000005 	stb	zero,0(r20)
  *decpt = k + 1;
  804f18:	10c00015 	stw	r3,0(r2)
  if (rve)
  804f1c:	d8802717 	ldw	r2,156(sp)
  804f20:	103d1726 	beq	r2,zero,804380 <_dtoa_r+0xc8>
    *rve = s;
  804f24:	15000015 	stw	r20,0(r2)
  804f28:	003d1506 	br	804380 <_dtoa_r+0xc8>
      k_check = 0;
  804f2c:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  804f30:	b8002216 	blt	r23,zero,804fbc <_dtoa_r+0xd04>
      b2 = 0;
  804f34:	d8000615 	stw	zero,24(sp)
  if (mode < 0 || mode > 9)
  804f38:	d8c00317 	ldw	r3,12(sp)
  804f3c:	dc800515 	stw	r18,20(sp)
      b5 = 0;
  804f40:	d8000715 	stw	zero,28(sp)
  if (mode < 0 || mode > 9)
  804f44:	188002a8 	cmpgeui	r2,r3,10
      s2 += k;
  804f48:	bcaf883a 	add	r23,r23,r18
  if (mode < 0 || mode > 9)
  804f4c:	103d9126 	beq	r2,zero,804594 <_dtoa_r+0x2dc>
  leftright = 1;
  804f50:	00800044 	movi	r2,1
  804f54:	d8800815 	stw	r2,32(sp)
  ilim = ilim1 = -1;
  804f58:	00bfffc4 	movi	r2,-1
  try_quick = 1;
  804f5c:	04000044 	movi	r16,1
    mode = 0;
  804f60:	d8000315 	stw	zero,12(sp)
  ilim = ilim1 = -1;
  804f64:	d8800b15 	stw	r2,44(sp)
      ndigits = 0;
  804f68:	d8002415 	stw	zero,144(sp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  804f6c:	e0001115 	stw	zero,68(fp)
  804f70:	d8800415 	stw	r2,16(sp)
  804f74:	000b883a 	mov	r5,zero
  804f78:	003da306 	br	804608 <_dtoa_r+0x350>
  switch (mode)
  804f7c:	188000e0 	cmpeqi	r2,r3,3
      leftright = 0;
  804f80:	d8000815 	stw	zero,32(sp)
  switch (mode)
  804f84:	1002a626 	beq	r2,zero,805a20 <_dtoa_r+0x1768>
      i = ndigits + k + 1;
  804f88:	d8802417 	ldw	r2,144(sp)
  804f8c:	d8c00517 	ldw	r3,20(sp)
  804f90:	10c5883a 	add	r2,r2,r3
  804f94:	d8800b15 	stw	r2,44(sp)
  804f98:	10800044 	addi	r2,r2,1
  804f9c:	d8800415 	stw	r2,16(sp)
      if (i <= 0)
  804fa0:	100d883a 	mov	r6,r2
  804fa4:	00bd8d16 	blt	zero,r2,8045dc <_dtoa_r+0x324>
  804fa8:	01800044 	movi	r6,1
  804fac:	003d8b06 	br	8045dc <_dtoa_r+0x324>
  k_check = 1;
  804fb0:	00800044 	movi	r2,1
  804fb4:	d8800915 	stw	r2,36(sp)
  if (j >= 0)
  804fb8:	b83d6a0e 	bge	r23,zero,804564 <_dtoa_r+0x2ac>
      b2 = -j;
  804fbc:	00800044 	movi	r2,1
  804fc0:	1405c83a 	sub	r2,r2,r16
  804fc4:	d8800615 	stw	r2,24(sp)
      s2 = 0;
  804fc8:	002f883a 	mov	r23,zero
  804fcc:	003d6606 	br	804568 <_dtoa_r+0x2b0>
      return s;
  804fd0:	00802074 	movhi	r2,129
  804fd4:	108bb104 	addi	r2,r2,11972
  804fd8:	d8800215 	stw	r2,8(sp)
  804fdc:	003ce806 	br	804380 <_dtoa_r+0xc8>
  804fe0:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  804fe4:	dd400617 	ldw	r21,24(sp)
  mhi = mlo = 0;
  804fe8:	0021883a 	mov	r16,zero
  804fec:	003f4106 	br	804cf4 <_dtoa_r+0xa3c>
    b = lshift (ptr, b, b2);
  804ff0:	980b883a 	mov	r5,r19
  804ff4:	100d883a 	mov	r6,r2
  804ff8:	e009883a 	mov	r4,fp
  804ffc:	080871c0 	call	80871c <__lshift>
  805000:	1027883a 	mov	r19,r2
  805004:	003f7506 	br	804ddc <_dtoa_r+0xb24>
  805008:	00800704 	movi	r2,28
  80500c:	003f6c06 	br	804dc0 <_dtoa_r+0xb08>
  try_quick = 1;
  805010:	04000044 	movi	r16,1
  805014:	003d6506 	br	8045ac <_dtoa_r+0x2f4>
       : (word1 (d) << (32 - i));
  805018:	01000804 	movi	r4,32
  80501c:	2089c83a 	sub	r4,r4,r2
  805020:	d8800117 	ldw	r2,4(sp)
  805024:	1108983a 	sll	r4,r2,r4
  805028:	003cfb06 	br	804418 <_dtoa_r+0x160>
    S = pow5mult (ptr, S, s5);
  80502c:	100b883a 	mov	r5,r2
  805030:	900d883a 	mov	r6,r18
  805034:	e009883a 	mov	r4,fp
  805038:	08085880 	call	808588 <__pow5mult>
  if (mode < 2)
  80503c:	d8c00317 	ldw	r3,12(sp)
    S = pow5mult (ptr, S, s5);
  805040:	d8800715 	stw	r2,28(sp)
  if (mode < 2)
  805044:	18c00090 	cmplti	r3,r3,2
  805048:	1801441e 	bne	r3,zero,80555c <_dtoa_r+0x12a4>
  spec_case = 0;
  80504c:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  805050:	d8c00717 	ldw	r3,28(sp)
  805054:	18800417 	ldw	r2,16(r3)
  805058:	10800104 	addi	r2,r2,4
  80505c:	100490ba 	slli	r2,r2,2
  805060:	1885883a 	add	r2,r3,r2
  805064:	11000017 	ldw	r4,0(r2)
  805068:	080808c0 	call	80808c <__hi0bits>
  80506c:	00c00804 	movi	r3,32
  805070:	1885c83a 	sub	r2,r3,r2
  805074:	003f4906 	br	804d9c <_dtoa_r+0xae4>
	    mhi = multadd (ptr, mhi, 10, 0);
  805078:	800b883a 	mov	r5,r16
  80507c:	000f883a 	mov	r7,zero
  805080:	01800284 	movi	r6,10
  805084:	e009883a 	mov	r4,fp
  805088:	0807d140 	call	807d14 <__multadd>
  80508c:	1021883a 	mov	r16,r2
  if (ilim <= 0 && mode > 2)
  805090:	d8800b17 	ldw	r2,44(sp)
  805094:	0082470e 	bge	zero,r2,8059b4 <_dtoa_r+0x16fc>
	  k--;
  805098:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  80509c:	d8800415 	stw	r2,16(sp)
      if (m2 > 0)
  8050a0:	0540af16 	blt	zero,r21,805360 <_dtoa_r+0x10a8>
      if (spec_case)
  8050a4:	88016c1e 	bne	r17,zero,805658 <_dtoa_r+0x13a0>
  8050a8:	8025883a 	mov	r18,r16
  8050ac:	dd800217 	ldw	r22,8(sp)
  8050b0:	d8c00417 	ldw	r3,16(sp)
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  8050b4:	d8800117 	ldw	r2,4(sp)
  8050b8:	b5ffffc4 	addi	r23,r22,-1
  8050bc:	b8c7883a 	add	r3,r23,r3
  8050c0:	d8c00615 	stw	r3,24(sp)
  8050c4:	d8c00317 	ldw	r3,12(sp)
  8050c8:	1080004c 	andi	r2,r2,1
  8050cc:	d8800915 	stw	r2,36(sp)
  8050d0:	10c4b03a 	or	r2,r2,r3
  8050d4:	dd000717 	ldw	r20,28(sp)
  8050d8:	d8800815 	stw	r2,32(sp)
  8050dc:	00002b06 	br	80518c <_dtoa_r+0xed4>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8050e0:	9809883a 	mov	r4,r19
  8050e4:	d9400415 	stw	r5,16(sp)
  8050e8:	08089140 	call	808914 <__mcmp>
	  Bfree (ptr, delta);
  8050ec:	d9400417 	ldw	r5,16(sp)
  8050f0:	e009883a 	mov	r4,fp
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8050f4:	d8800115 	stw	r2,4(sp)
	  Bfree (ptr, delta);
  8050f8:	0807cf00 	call	807cf0 <_Bfree>
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  8050fc:	d8800117 	ldw	r2,4(sp)
  805100:	1000021e 	bne	r2,zero,80510c <_dtoa_r+0xe54>
  805104:	d8c00817 	ldw	r3,32(sp)
  805108:	18021b26 	beq	r3,zero,805978 <_dtoa_r+0x16c0>
         if ((j < 0) || ((j == 0) && !mode
  80510c:	b0c00044 	addi	r3,r22,1
  805110:	d8c00115 	stw	r3,4(sp)
  805114:	88011816 	blt	r17,zero,805578 <_dtoa_r+0x12c0>
	      && !(word1 (d) & 1)
  805118:	d8c00317 	ldw	r3,12(sp)
  80511c:	88e2b03a 	or	r17,r17,r3
  805120:	d8c00917 	ldw	r3,36(sp)
  805124:	1c62b03a 	or	r17,r3,r17
  805128:	88011326 	beq	r17,zero,805578 <_dtoa_r+0x12c0>
	  if (j1 > 0)
  80512c:	00816416 	blt	zero,r2,8056c0 <_dtoa_r+0x1408>
	  if (i == ilim)
  805130:	d8800617 	ldw	r2,24(sp)
	  *s++ = dig;
  805134:	b5400005 	stb	r21,0(r22)
	  if (i == ilim)
  805138:	15816c26 	beq	r2,r22,8056ec <_dtoa_r+0x1434>
	  b = multadd (ptr, b, 10, 0);
  80513c:	980b883a 	mov	r5,r19
  805140:	000f883a 	mov	r7,zero
  805144:	01800284 	movi	r6,10
  805148:	e009883a 	mov	r4,fp
  80514c:	0807d140 	call	807d14 <__multadd>
  805150:	1027883a 	mov	r19,r2
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  805154:	800b883a 	mov	r5,r16
  805158:	000f883a 	mov	r7,zero
  80515c:	01800284 	movi	r6,10
  805160:	e009883a 	mov	r4,fp
	  if (mlo == mhi)
  805164:	84801d26 	beq	r16,r18,8051dc <_dtoa_r+0xf24>
	      mlo = multadd (ptr, mlo, 10, 0);
  805168:	0807d140 	call	807d14 <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
  80516c:	900b883a 	mov	r5,r18
  805170:	000f883a 	mov	r7,zero
  805174:	01800284 	movi	r6,10
  805178:	e009883a 	mov	r4,fp
	      mlo = multadd (ptr, mlo, 10, 0);
  80517c:	1021883a 	mov	r16,r2
	      mhi = multadd (ptr, mhi, 10, 0);
  805180:	0807d140 	call	807d14 <__multadd>
  805184:	1025883a 	mov	r18,r2
	  dig = quorem (b, S) + '0';
  805188:	dd800117 	ldw	r22,4(sp)
  80518c:	a00b883a 	mov	r5,r20
  805190:	9809883a 	mov	r4,r19
  805194:	08040980 	call	804098 <quorem>
	  j = cmp (b, mlo);
  805198:	800b883a 	mov	r5,r16
  80519c:	9809883a 	mov	r4,r19
	  dig = quorem (b, S) + '0';
  8051a0:	102f883a 	mov	r23,r2
	  j = cmp (b, mlo);
  8051a4:	08089140 	call	808914 <__mcmp>
	  delta = diff (ptr, S, mhi);
  8051a8:	a00b883a 	mov	r5,r20
  8051ac:	900d883a 	mov	r6,r18
  8051b0:	e009883a 	mov	r4,fp
	  j = cmp (b, mlo);
  8051b4:	1023883a 	mov	r17,r2
	  delta = diff (ptr, S, mhi);
  8051b8:	080896c0 	call	80896c <__mdiff>
  8051bc:	100b883a 	mov	r5,r2
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8051c0:	10800317 	ldw	r2,12(r2)
	  dig = quorem (b, S) + '0';
  8051c4:	bd400c04 	addi	r21,r23,48
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8051c8:	103fc526 	beq	r2,zero,8050e0 <_dtoa_r+0xe28>
	  Bfree (ptr, delta);
  8051cc:	e009883a 	mov	r4,fp
  8051d0:	0807cf00 	call	807cf0 <_Bfree>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8051d4:	00800044 	movi	r2,1
  8051d8:	003fcc06 	br	80510c <_dtoa_r+0xe54>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  8051dc:	0807d140 	call	807d14 <__multadd>
  8051e0:	1021883a 	mov	r16,r2
  8051e4:	1025883a 	mov	r18,r2
  8051e8:	003fe706 	br	805188 <_dtoa_r+0xed0>
  if (ilim <= 0 && mode > 2)
  8051ec:	d8800317 	ldw	r2,12(sp)
  8051f0:	108000d0 	cmplti	r2,r2,3
  8051f4:	10003f26 	beq	r2,zero,8052f4 <_dtoa_r+0x103c>
  if (leftright)
  8051f8:	d8800817 	ldw	r2,32(sp)
  8051fc:	103fa81e 	bne	r2,zero,8050a0 <_dtoa_r+0xde8>
	*s++ = dig = quorem (b, S) + '0';
  805200:	d9400717 	ldw	r5,28(sp)
  805204:	9809883a 	mov	r4,r19
  mhi = mlo = 0;
  805208:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  80520c:	08040980 	call	804098 <quorem>
  805210:	15400c04 	addi	r21,r2,48
  805214:	d8800217 	ldw	r2,8(sp)
  805218:	15c00044 	addi	r23,r2,1
  80521c:	15400005 	stb	r21,0(r2)
  *decpt = k + 1;
  805220:	d8800517 	ldw	r2,20(sp)
  805224:	10800044 	addi	r2,r2,1
  805228:	d8800515 	stw	r2,20(sp)
  80522c:	003f1206 	br	804e78 <_dtoa_r+0xbc0>
      if (cmp (b, S) < 0)
  805230:	d9400717 	ldw	r5,28(sp)
  805234:	9809883a 	mov	r4,r19
  805238:	08089140 	call	808914 <__mcmp>
  80523c:	103eef0e 	bge	r2,zero,804dfc <_dtoa_r+0xb44>
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  805240:	980b883a 	mov	r5,r19
  805244:	000f883a 	mov	r7,zero
  805248:	01800284 	movi	r6,10
  80524c:	e009883a 	mov	r4,fp
  805250:	0807d140 	call	807d14 <__multadd>
	  k--;
  805254:	d8c00517 	ldw	r3,20(sp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  805258:	1027883a 	mov	r19,r2
	  if (leftright)
  80525c:	d8800817 	ldw	r2,32(sp)
	  k--;
  805260:	1cbfffc4 	addi	r18,r3,-1
	  if (leftright)
  805264:	103f841e 	bne	r2,zero,805078 <_dtoa_r+0xdc0>
  if (ilim <= 0 && mode > 2)
  805268:	d8800b17 	ldw	r2,44(sp)
  80526c:	0081ca0e 	bge	zero,r2,805998 <_dtoa_r+0x16e0>
  805270:	d8800415 	stw	r2,16(sp)
  805274:	003ee806 	br	804e18 <_dtoa_r+0xb60>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805278:	00802074 	movhi	r2,129
  80527c:	1007883a 	mov	r3,r2
  805280:	18cbba04 	addi	r3,r3,12008
	  s[3] ? s + 8 :
  805284:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805288:	d8c00215 	stw	r3,8(sp)
	  s[3] ? s + 8 :
  80528c:	108bbac4 	addi	r2,r2,12011
  805290:	003de906 	br	804a38 <_dtoa_r+0x780>
  switch (mode)
  805294:	00800044 	movi	r2,1
  805298:	d8800815 	stw	r2,32(sp)
  80529c:	003f3a06 	br	804f88 <_dtoa_r+0xcd0>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  8052a0:	d8800117 	ldw	r2,4(sp)
  8052a4:	103eba1e 	bne	r2,zero,804d90 <_dtoa_r+0xad8>
  8052a8:	00800434 	movhi	r2,16
  8052ac:	10bfffc4 	addi	r2,r2,-1
  8052b0:	8884703a 	and	r2,r17,r2
  8052b4:	103eb61e 	bne	r2,zero,804d90 <_dtoa_r+0xad8>
	  && word0 (d) & Exp_mask
  8052b8:	8c5ffc2c 	andhi	r17,r17,32752
  8052bc:	883eb426 	beq	r17,zero,804d90 <_dtoa_r+0xad8>
	  b2 += Log2P;
  8052c0:	d8800617 	ldw	r2,24(sp)
	  s2 += Log2P;
  8052c4:	bdc00044 	addi	r23,r23,1
	  spec_case = 1;
  8052c8:	04400044 	movi	r17,1
	  b2 += Log2P;
  8052cc:	10800044 	addi	r2,r2,1
  8052d0:	d8800615 	stw	r2,24(sp)
	  spec_case = 1;
  8052d4:	003eaf06 	br	804d94 <_dtoa_r+0xadc>
	ndigits = 1;
  8052d8:	00800044 	movi	r2,1
  8052dc:	d8800b15 	stw	r2,44(sp)
  8052e0:	d8802415 	stw	r2,144(sp)
  8052e4:	003f2106 	br	804f6c <_dtoa_r+0xcb4>
  if (ilim <= 0 && mode > 2)
  8052e8:	d8800b17 	ldw	r2,44(sp)
	  k--;
  8052ec:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  8052f0:	d8800415 	stw	r2,16(sp)
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
  8052f4:	d8800417 	ldw	r2,16(sp)
  8052f8:	103e051e 	bne	r2,zero,804b10 <_dtoa_r+0x858>
  8052fc:	d9400717 	ldw	r5,28(sp)
  805300:	e009883a 	mov	r4,fp
  805304:	000f883a 	mov	r7,zero
  805308:	01800144 	movi	r6,5
  80530c:	0807d140 	call	807d14 <__multadd>
  805310:	100b883a 	mov	r5,r2
  805314:	9809883a 	mov	r4,r19
  805318:	d8800715 	stw	r2,28(sp)
  80531c:	08089140 	call	808914 <__mcmp>
  805320:	00bdfb0e 	bge	zero,r2,804b10 <_dtoa_r+0x858>
      *s++ = '1';
  805324:	d8c00217 	ldw	r3,8(sp)
  805328:	00800c44 	movi	r2,49
  80532c:	18800005 	stb	r2,0(r3)
      k++;
  805330:	d8800517 	ldw	r2,20(sp)
      *s++ = '1';
  805334:	1d000044 	addi	r20,r3,1
      k++;
  805338:	14400044 	addi	r17,r2,1
  Bfree (ptr, S);
  80533c:	d9400717 	ldw	r5,28(sp)
  805340:	e009883a 	mov	r4,fp
  805344:	0807cf00 	call	807cf0 <_Bfree>
  *decpt = k + 1;
  805348:	88800044 	addi	r2,r17,1
  80534c:	d8800515 	stw	r2,20(sp)
  if (mhi)
  805350:	803ee81e 	bne	r16,zero,804ef4 <_dtoa_r+0xc3c>
  805354:	003eea06 	br	804f00 <_dtoa_r+0xc48>
      i = m2 < s2 ? m2 : s2;
  805358:	b805883a 	mov	r2,r23
  80535c:	003e6906 	br	804d04 <_dtoa_r+0xa4c>
	mhi = lshift (ptr, mhi, m2);
  805360:	800b883a 	mov	r5,r16
  805364:	a80d883a 	mov	r6,r21
  805368:	e009883a 	mov	r4,fp
  80536c:	080871c0 	call	80871c <__lshift>
  805370:	1021883a 	mov	r16,r2
  805374:	003f4b06 	br	8050a4 <_dtoa_r+0xdec>
	    m5 -= j;
  805378:	1529c83a 	sub	r20,r2,r20
  80537c:	003e5206 	br	804cc8 <_dtoa_r+0xa10>
  805380:	dc000117 	ldw	r16,4(sp)
  805384:	dc400a15 	stw	r17,40(sp)
      ieps = 2;			/* conservative */
  805388:	05000084 	movi	r20,2
  80538c:	003cc206 	br	804698 <_dtoa_r+0x3e0>
	*s++ = dig = quorem (b, S) + '0';
  805390:	05c00044 	movi	r23,1
  805394:	003eb506 	br	804e6c <_dtoa_r+0xbb4>
  switch (mode)
  805398:	00800044 	movi	r2,1
  80539c:	d8800815 	stw	r2,32(sp)
  8053a0:	003c8906 	br	8045c8 <_dtoa_r+0x310>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  8053a4:	1000021e 	bne	r2,zero,8053b0 <_dtoa_r+0x10f8>
  8053a8:	a8c0004c 	andi	r3,r21,1
  8053ac:	183ebb1e 	bne	r3,zero,804e9c <_dtoa_r+0xbe4>
      while (*--s == '0');
  8053b0:	b8bfffc7 	ldb	r2,-1(r23)
  8053b4:	b829883a 	mov	r20,r23
  8053b8:	bdffffc4 	addi	r23,r23,-1
  8053bc:	10800c20 	cmpeqi	r2,r2,48
  8053c0:	103ffb1e 	bne	r2,zero,8053b0 <_dtoa_r+0x10f8>
  8053c4:	003ec206 	br	804ed0 <_dtoa_r+0xc18>
	    *s++ = '1';
  8053c8:	d8c00217 	ldw	r3,8(sp)
  8053cc:	00800c44 	movi	r2,49
  8053d0:	18800005 	stb	r2,0(r3)
  *decpt = k + 1;
  8053d4:	d8800517 	ldw	r2,20(sp)
  8053d8:	10800044 	addi	r2,r2,1
  8053dc:	d8800515 	stw	r2,20(sp)
	    goto ret;
  8053e0:	003ebb06 	br	804ed0 <_dtoa_r+0xc18>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8053e4:	d8c00c17 	ldw	r3,48(sp)
  8053e8:	18011526 	beq	r3,zero,805840 <_dtoa_r+0x1588>
  m2 = b2;
  8053ec:	d8c00617 	ldw	r3,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8053f0:	10810cc4 	addi	r2,r2,1075
      s2 += i;
  8053f4:	b8af883a 	add	r23,r23,r2
  8053f8:	1885883a 	add	r2,r3,r2
  8053fc:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  805400:	182b883a 	mov	r21,r3
  805404:	d8800615 	stw	r2,24(sp)
  805408:	003e3606 	br	804ce4 <_dtoa_r+0xa2c>
      eps.d = ieps * d.d + 7.;
  80540c:	a009883a 	mov	r4,r20
  805410:	080fe080 	call	80fe08 <__floatsidf>
  805414:	b00d883a 	mov	r6,r22
  805418:	a80f883a 	mov	r7,r21
  80541c:	1009883a 	mov	r4,r2
  805420:	180b883a 	mov	r5,r3
  805424:	080ed280 	call	80ed28 <__muldf3>
  805428:	000d883a 	mov	r6,zero
  80542c:	01d00734 	movhi	r7,16412
  805430:	1009883a 	mov	r4,r2
  805434:	180b883a 	mov	r5,r3
  805438:	080d8b80 	call	80d8b8 <__adddf3>
  80543c:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  805440:	00bf3034 	movhi	r2,64704
  805444:	1885883a 	add	r2,r3,r2
  805448:	d8800f15 	stw	r2,60(sp)
	  d.d -= 5.;
  80544c:	b009883a 	mov	r4,r22
  805450:	a80b883a 	mov	r5,r21
  805454:	000d883a 	mov	r6,zero
  805458:	01d00534 	movhi	r7,16404
  80545c:	080f4d40 	call	80f4d4 <__subdf3>
	  if (d.d > eps.d)
  805460:	dd800d17 	ldw	r22,52(sp)
  805464:	dd400f17 	ldw	r21,60(sp)
  805468:	1009883a 	mov	r4,r2
  80546c:	b00d883a 	mov	r6,r22
  805470:	a80f883a 	mov	r7,r21
  805474:	180b883a 	mov	r5,r3
	  d.d -= 5.;
  805478:	1029883a 	mov	r20,r2
  80547c:	1821883a 	mov	r16,r3
	  if (d.d > eps.d)
  805480:	080eb580 	call	80eb58 <__gedf2>
  805484:	00812916 	blt	zero,r2,80592c <_dtoa_r+0x1674>
	  if (d.d < -eps.d)
  805488:	a9e0003c 	xorhi	r7,r21,32768
  80548c:	b00d883a 	mov	r6,r22
  805490:	a009883a 	mov	r4,r20
  805494:	800b883a 	mov	r5,r16
  805498:	080ec400 	call	80ec40 <__ledf2>
  80549c:	103d7e0e 	bge	r2,zero,804a98 <_dtoa_r+0x7e0>
	  S = mhi = 0;
  8054a0:	d8000715 	stw	zero,28(sp)
  8054a4:	0021883a 	mov	r16,zero
  8054a8:	003d9906 	br	804b10 <_dtoa_r+0x858>
	b = pow5mult (ptr, b, b5);
  8054ac:	d9800717 	ldw	r6,28(sp)
  8054b0:	980b883a 	mov	r5,r19
  8054b4:	e009883a 	mov	r4,fp
  8054b8:	08085880 	call	808588 <__pow5mult>
  8054bc:	1027883a 	mov	r19,r2
  8054c0:	003e2b06 	br	804d70 <_dtoa_r+0xab8>
      else if ((j1 = -k) != 0)
  8054c4:	2000e826 	beq	r4,zero,805868 <_dtoa_r+0x15b0>
  8054c8:	0121c83a 	sub	r16,zero,r4
	  d.d *= tens[j1 & 0xf];
  8054cc:	808003cc 	andi	r2,r16,15
  8054d0:	100690fa 	slli	r3,r2,3
  8054d4:	00802074 	movhi	r2,129
  8054d8:	108c1204 	addi	r2,r2,12360
  8054dc:	10c5883a 	add	r2,r2,r3
  8054e0:	11800017 	ldw	r6,0(r2)
  8054e4:	11c00117 	ldw	r7,4(r2)
  8054e8:	d9000117 	ldw	r4,4(sp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8054ec:	8021d13a 	srai	r16,r16,4
	  d.d *= tens[j1 & 0xf];
  8054f0:	880b883a 	mov	r5,r17
  8054f4:	080ed280 	call	80ed28 <__muldf3>
  8054f8:	102d883a 	mov	r22,r2
  8054fc:	182b883a 	mov	r21,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805500:	80013426 	beq	r16,zero,8059d4 <_dtoa_r+0x171c>
  805504:	02002074 	movhi	r8,129
  805508:	420c0804 	addi	r8,r8,12320
      ieps = 2;			/* conservative */
  80550c:	882d883a 	mov	r22,r17
  805510:	05000084 	movi	r20,2
  805514:	1009883a 	mov	r4,r2
  805518:	180b883a 	mov	r5,r3
  80551c:	4023883a 	mov	r17,r8
	    if (j & 1)
  805520:	8180004c 	andi	r6,r16,1
  805524:	30000626 	beq	r6,zero,805540 <_dtoa_r+0x1288>
		d.d *= bigtens[i];
  805528:	89800017 	ldw	r6,0(r17)
  80552c:	89c00117 	ldw	r7,4(r17)
		ieps++;
  805530:	a5000044 	addi	r20,r20,1
		d.d *= bigtens[i];
  805534:	080ed280 	call	80ed28 <__muldf3>
  805538:	1009883a 	mov	r4,r2
  80553c:	180b883a 	mov	r5,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805540:	8021d07a 	srai	r16,r16,1
  805544:	8c400204 	addi	r17,r17,8
  805548:	803ff51e 	bne	r16,zero,805520 <_dtoa_r+0x1268>
  80554c:	b023883a 	mov	r17,r22
  805550:	282b883a 	mov	r21,r5
  805554:	202d883a 	mov	r22,r4
  805558:	003c6806 	br	8046fc <_dtoa_r+0x444>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  80555c:	d8800117 	ldw	r2,4(sp)
  805560:	103eba1e 	bne	r2,zero,80504c <_dtoa_r+0xd94>
  805564:	00800434 	movhi	r2,16
  805568:	10bfffc4 	addi	r2,r2,-1
  80556c:	8884703a 	and	r2,r17,r2
  805570:	103f5126 	beq	r2,zero,8052b8 <_dtoa_r+0x1000>
  805574:	003eb506 	br	80504c <_dtoa_r+0xd94>
  *decpt = k + 1;
  805578:	d8c00517 	ldw	r3,20(sp)
  80557c:	b5000044 	addi	r20,r22,1
  805580:	18c00044 	addi	r3,r3,1
  805584:	d8c00515 	stw	r3,20(sp)
	      if (j1 > 0)
  805588:	00800c0e 	bge	zero,r2,8055bc <_dtoa_r+0x1304>
		  b = lshift (ptr, b, 1);
  80558c:	980b883a 	mov	r5,r19
  805590:	e009883a 	mov	r4,fp
  805594:	01800044 	movi	r6,1
  805598:	080871c0 	call	80871c <__lshift>
		  j1 = cmp (b, S);
  80559c:	d9400717 	ldw	r5,28(sp)
  8055a0:	1009883a 	mov	r4,r2
		  b = lshift (ptr, b, 1);
  8055a4:	1027883a 	mov	r19,r2
		  j1 = cmp (b, S);
  8055a8:	08089140 	call	808914 <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  8055ac:	0080e70e 	bge	zero,r2,80594c <_dtoa_r+0x1694>
		      && dig++ == '9')
  8055b0:	a8c00e60 	cmpeqi	r3,r21,57
  8055b4:	1800d61e 	bne	r3,zero,805910 <_dtoa_r+0x1658>
  8055b8:	bd400c44 	addi	r21,r23,49
	      goto ret;
  8055bc:	8023883a 	mov	r17,r16
	      *s++ = dig;
  8055c0:	b5400005 	stb	r21,0(r22)
	      goto ret;
  8055c4:	9021883a 	mov	r16,r18
  8055c8:	003e4106 	br	804ed0 <_dtoa_r+0xc18>
  8055cc:	982f883a 	mov	r23,r19
  8055d0:	df000617 	ldw	fp,24(sp)
  8055d4:	dcc00117 	ldw	r19,4(sp)
  8055d8:	202b883a 	mov	r21,r4
  8055dc:	182d883a 	mov	r22,r3
	      d.d += d.d;
  8055e0:	a80d883a 	mov	r6,r21
  8055e4:	a809883a 	mov	r4,r21
  8055e8:	b00f883a 	mov	r7,r22
  8055ec:	b00b883a 	mov	r5,r22
  8055f0:	da000115 	stw	r8,4(sp)
  8055f4:	080d8b80 	call	80d8b8 <__adddf3>
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  8055f8:	dd400317 	ldw	r21,12(sp)
  8055fc:	180b883a 	mov	r5,r3
  805600:	900d883a 	mov	r6,r18
  805604:	a80f883a 	mov	r7,r21
  805608:	1009883a 	mov	r4,r2
	      d.d += d.d;
  80560c:	1821883a 	mov	r16,r3
  805610:	1023883a 	mov	r17,r2
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  805614:	080eb580 	call	80eb58 <__gedf2>
			k++;
  805618:	d8c00517 	ldw	r3,20(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  80561c:	da000117 	ldw	r8,4(sp)
			k++;
  805620:	18c00044 	addi	r3,r3,1
  805624:	d8c00515 	stw	r3,20(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  805628:	00800916 	blt	zero,r2,805650 <_dtoa_r+0x1398>
  80562c:	900d883a 	mov	r6,r18
  805630:	a80f883a 	mov	r7,r21
  805634:	8809883a 	mov	r4,r17
  805638:	800b883a 	mov	r5,r16
  80563c:	080ead80 	call	80ead8 <__eqdf2>
  805640:	103e2f1e 	bne	r2,zero,804f00 <_dtoa_r+0xc48>
  805644:	bdc0004c 	andi	r23,r23,1
  805648:	da000117 	ldw	r8,4(sp)
  80564c:	b83e2c26 	beq	r23,zero,804f00 <_dtoa_r+0xc48>
  805650:	d9000217 	ldw	r4,8(sp)
  805654:	003cd506 	br	8049ac <_dtoa_r+0x6f4>
	  mhi = eBalloc (ptr, mhi->_k);
  805658:	81400117 	ldw	r5,4(r16)
  80565c:	e009883a 	mov	r4,fp
  805660:	0807c4c0 	call	807c4c <_Balloc>
  805664:	1023883a 	mov	r17,r2
  805668:	1000e126 	beq	r2,zero,8059f0 <_dtoa_r+0x1738>
	  Bcopy (mhi, mlo);
  80566c:	81800417 	ldw	r6,16(r16)
  805670:	81400304 	addi	r5,r16,12
  805674:	11000304 	addi	r4,r2,12
  805678:	31800084 	addi	r6,r6,2
  80567c:	300c90ba 	slli	r6,r6,2
  805680:	08078fc0 	call	8078fc <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
  805684:	01800044 	movi	r6,1
  805688:	880b883a 	mov	r5,r17
  80568c:	e009883a 	mov	r4,fp
  805690:	080871c0 	call	80871c <__lshift>
  805694:	1025883a 	mov	r18,r2
  805698:	003e8406 	br	8050ac <_dtoa_r+0xdf4>
	    b = pow5mult (ptr, b, j);
  80569c:	980b883a 	mov	r5,r19
  8056a0:	e009883a 	mov	r4,fp
  8056a4:	08085880 	call	808588 <__pow5mult>
  8056a8:	1027883a 	mov	r19,r2
  8056ac:	003db006 	br	804d70 <_dtoa_r+0xab8>
  8056b0:	1007883a 	mov	r3,r2
	      m2 -= i;
  8056b4:	d8800617 	ldw	r2,24(sp)
  8056b8:	10ebc83a 	sub	r21,r2,r3
	      i = 0;
  8056bc:	003d8906 	br	804ce4 <_dtoa_r+0xa2c>
  *decpt = k + 1;
  8056c0:	d8c00517 	ldw	r3,20(sp)
	      if (dig == '9')
  8056c4:	a8800e58 	cmpnei	r2,r21,57
  8056c8:	b5000044 	addi	r20,r22,1
  *decpt = k + 1;
  8056cc:	18c00044 	addi	r3,r3,1
  8056d0:	d8c00515 	stw	r3,20(sp)
	      if (dig == '9')
  8056d4:	10008e26 	beq	r2,zero,805910 <_dtoa_r+0x1658>
	      *s++ = dig + 1;
  8056d8:	a8c00044 	addi	r3,r21,1
	      goto ret;
  8056dc:	8023883a 	mov	r17,r16
	      *s++ = dig + 1;
  8056e0:	b0c00005 	stb	r3,0(r22)
	      goto ret;
  8056e4:	9021883a 	mov	r16,r18
  8056e8:	003df906 	br	804ed0 <_dtoa_r+0xc18>
  *decpt = k + 1;
  8056ec:	d8800517 	ldw	r2,20(sp)
  8056f0:	dd000117 	ldw	r20,4(sp)
  8056f4:	8023883a 	mov	r17,r16
  8056f8:	10800044 	addi	r2,r2,1
  8056fc:	d8800515 	stw	r2,20(sp)
  805700:	a02f883a 	mov	r23,r20
  805704:	9021883a 	mov	r16,r18
  805708:	003ddb06 	br	804e78 <_dtoa_r+0xbc0>
	  eps.d *= tens[ilim - 1];
  80570c:	d9000d17 	ldw	r4,52(sp)
  805710:	d9400f17 	ldw	r5,60(sp)
  805714:	080ed280 	call	80ed28 <__muldf3>
	      if (i == ilim)
  805718:	d9800e17 	ldw	r6,56(sp)
	      *s++ = '0' + (int) L;
  80571c:	d9400217 	ldw	r5,8(sp)
  805720:	d9001317 	ldw	r4,76(sp)
	  eps.d *= tens[ilim - 1];
  805724:	d8800d15 	stw	r2,52(sp)
  805728:	d8c00e15 	stw	r3,56(sp)
	      *s++ = '0' + (int) L;
  80572c:	29000005 	stb	r4,0(r5)
	      if (i == ilim)
  805730:	31000058 	cmpnei	r4,r6,1
  805734:	da001117 	ldw	r8,68(sp)
  805738:	29a9883a 	add	r20,r5,r6
  80573c:	20009b26 	beq	r4,zero,8059ac <_dtoa_r+0x16f4>
  805740:	dc400f15 	stw	r17,60(sp)
  805744:	d9001017 	ldw	r4,64(sp)
  805748:	dc400a17 	ldw	r17,40(sp)
  80574c:	800b883a 	mov	r5,r16
	  for (i = 1;; i++, d.d *= 10.)
  805750:	000d883a 	mov	r6,zero
  805754:	01d00934 	movhi	r7,16420
  805758:	080ed280 	call	80ed28 <__muldf3>
	      L = d.d;
  80575c:	180b883a 	mov	r5,r3
  805760:	1009883a 	mov	r4,r2
	  for (i = 1;; i++, d.d *= 10.)
  805764:	1821883a 	mov	r16,r3
  805768:	102d883a 	mov	r22,r2
	      L = d.d;
  80576c:	080fd880 	call	80fd88 <__fixdfsi>
	      d.d -= L;
  805770:	1009883a 	mov	r4,r2
	      L = d.d;
  805774:	102b883a 	mov	r21,r2
	      d.d -= L;
  805778:	080fe080 	call	80fe08 <__floatsidf>
  80577c:	b009883a 	mov	r4,r22
  805780:	800b883a 	mov	r5,r16
  805784:	100d883a 	mov	r6,r2
  805788:	180f883a 	mov	r7,r3
	      *s++ = '0' + (int) L;
  80578c:	ad400c04 	addi	r21,r21,48
  805790:	8c400044 	addi	r17,r17,1
	      d.d -= L;
  805794:	080f4d40 	call	80f4d4 <__subdf3>
	      *s++ = '0' + (int) L;
  805798:	8d7fffc5 	stb	r21,-1(r17)
	      d.d -= L;
  80579c:	1009883a 	mov	r4,r2
  8057a0:	180b883a 	mov	r5,r3
	      if (i == ilim)
  8057a4:	8d3fea1e 	bne	r17,r20,805750 <_dtoa_r+0x1498>
  8057a8:	dc400f17 	ldw	r17,60(sp)
  8057ac:	a811883a 	mov	r8,r21
  8057b0:	d8801015 	stw	r2,64(sp)
  8057b4:	1821883a 	mov	r16,r3
		  if (d.d > 0.5 + eps.d)
  8057b8:	d9000d17 	ldw	r4,52(sp)
  8057bc:	d9400e17 	ldw	r5,56(sp)
  8057c0:	000d883a 	mov	r6,zero
  8057c4:	01cff834 	movhi	r7,16352
  8057c8:	da000a15 	stw	r8,40(sp)
  8057cc:	080d8b80 	call	80d8b8 <__adddf3>
  8057d0:	d9801017 	ldw	r6,64(sp)
  8057d4:	800f883a 	mov	r7,r16
  8057d8:	1009883a 	mov	r4,r2
  8057dc:	180b883a 	mov	r5,r3
  8057e0:	080ec400 	call	80ec40 <__ledf2>
  8057e4:	da000a17 	ldw	r8,40(sp)
  8057e8:	10005316 	blt	r2,zero,805938 <_dtoa_r+0x1680>
		  else if (d.d < 0.5 - eps.d)
  8057ec:	d9800d17 	ldw	r6,52(sp)
  8057f0:	d9c00e17 	ldw	r7,56(sp)
  8057f4:	0009883a 	mov	r4,zero
  8057f8:	014ff834 	movhi	r5,16352
  8057fc:	080f4d40 	call	80f4d4 <__subdf3>
  805800:	d9801017 	ldw	r6,64(sp)
  805804:	800f883a 	mov	r7,r16
  805808:	1009883a 	mov	r4,r2
  80580c:	180b883a 	mov	r5,r3
  805810:	080eb580 	call	80eb58 <__gedf2>
  805814:	00bca00e 	bge	zero,r2,804a98 <_dtoa_r+0x7e0>
		      while (*--s == '0');
  805818:	a0bfffc7 	ldb	r2,-1(r20)
  80581c:	a007883a 	mov	r3,r20
  805820:	a53fffc4 	addi	r20,r20,-1
  805824:	10800c20 	cmpeqi	r2,r2,48
  805828:	103ffb1e 	bne	r2,zero,805818 <_dtoa_r+0x1560>
  *decpt = k + 1;
  80582c:	d8801417 	ldw	r2,80(sp)
  805830:	1829883a 	mov	r20,r3
  805834:	10800044 	addi	r2,r2,1
  805838:	d8800515 	stw	r2,20(sp)
  80583c:	003db006 	br	804f00 <_dtoa_r+0xc48>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805840:	d8c01817 	ldw	r3,96(sp)
  m2 = b2;
  805844:	d9000617 	ldw	r4,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805848:	00800d84 	movi	r2,54
  80584c:	10c5c83a 	sub	r2,r2,r3
      s2 += i;
  805850:	b8af883a 	add	r23,r23,r2
  805854:	2085883a 	add	r2,r4,r2
  805858:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  80585c:	202b883a 	mov	r21,r4
      s2 += i;
  805860:	d8800615 	stw	r2,24(sp)
  805864:	003d1f06 	br	804ce4 <_dtoa_r+0xa2c>
  805868:	dd800117 	ldw	r22,4(sp)
  80586c:	882b883a 	mov	r21,r17
      ieps = 2;			/* conservative */
  805870:	05000084 	movi	r20,2
  805874:	003ba106 	br	8046fc <_dtoa_r+0x444>
      if (k_check && d.d < 1. && ilim > 0)
  805878:	d8800417 	ldw	r2,16(sp)
  80587c:	103ee326 	beq	r2,zero,80540c <_dtoa_r+0x1154>
	  if (ilim1 <= 0)
  805880:	dc000b17 	ldw	r16,44(sp)
  805884:	043c840e 	bge	zero,r16,804a98 <_dtoa_r+0x7e0>
	  d.d *= 10.;
  805888:	a80b883a 	mov	r5,r21
  80588c:	b009883a 	mov	r4,r22
  805890:	000d883a 	mov	r6,zero
  805894:	01d00934 	movhi	r7,16420
  805898:	080ed280 	call	80ed28 <__muldf3>
      eps.d = ieps * d.d + 7.;
  80589c:	a1000044 	addi	r4,r20,1
	  d.d *= 10.;
  8058a0:	102d883a 	mov	r22,r2
  8058a4:	182b883a 	mov	r21,r3
      eps.d = ieps * d.d + 7.;
  8058a8:	080fe080 	call	80fe08 <__floatsidf>
  8058ac:	b00d883a 	mov	r6,r22
  8058b0:	a80f883a 	mov	r7,r21
  8058b4:	1009883a 	mov	r4,r2
  8058b8:	180b883a 	mov	r5,r3
  8058bc:	080ed280 	call	80ed28 <__muldf3>
  8058c0:	1009883a 	mov	r4,r2
  8058c4:	000d883a 	mov	r6,zero
  8058c8:	01d00734 	movhi	r7,16412
  8058cc:	180b883a 	mov	r5,r3
  8058d0:	080d8b80 	call	80d8b8 <__adddf3>
	  k--;
  8058d4:	d9000517 	ldw	r4,20(sp)
      eps.d = ieps * d.d + 7.;
  8058d8:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  8058dc:	00bf3034 	movhi	r2,64704
  8058e0:	1885883a 	add	r2,r3,r2
	  k--;
  8058e4:	213fffc4 	addi	r4,r4,-1
      word0 (eps) -= (P - 1) * Exp_msk1;
  8058e8:	d8800f15 	stw	r2,60(sp)
	  k--;
  8058ec:	d9001415 	stw	r4,80(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  8058f0:	dc000e15 	stw	r16,56(sp)
  8058f4:	8005883a 	mov	r2,r16
  8058f8:	003b9e06 	br	804774 <_dtoa_r+0x4bc>
  *decpt = k + 1;
  8058fc:	d8800517 	ldw	r2,20(sp)
			break;
  805900:	02000c44 	movi	r8,49
  *decpt = k + 1;
  805904:	10800044 	addi	r2,r2,1
  805908:	d8800515 	stw	r2,20(sp)
			break;
  80590c:	003c2e06 	br	8049c8 <_dtoa_r+0x710>
		  *s++ = '9';
  805910:	00800e44 	movi	r2,57
		  goto roundoff;
  805914:	8023883a 	mov	r17,r16
  805918:	d9000217 	ldw	r4,8(sp)
		  *s++ = '9';
  80591c:	b0800005 	stb	r2,0(r22)
  805920:	a02f883a 	mov	r23,r20
		  goto roundoff;
  805924:	9021883a 	mov	r16,r18
  805928:	003d5f06 	br	804ea8 <_dtoa_r+0xbf0>
	  S = mhi = 0;
  80592c:	d8000715 	stw	zero,28(sp)
  805930:	0021883a 	mov	r16,zero
  805934:	003e7b06 	br	805324 <_dtoa_r+0x106c>
			k++;
  805938:	d8801417 	ldw	r2,80(sp)
  80593c:	d9000217 	ldw	r4,8(sp)
  805940:	10800044 	addi	r2,r2,1
  805944:	d8800515 	stw	r2,20(sp)
  805948:	003c1806 	br	8049ac <_dtoa_r+0x6f4>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  80594c:	103f1b1e 	bne	r2,zero,8055bc <_dtoa_r+0x1304>
  805950:	a880004c 	andi	r2,r21,1
  805954:	103f161e 	bne	r2,zero,8055b0 <_dtoa_r+0x12f8>
  805958:	003f1806 	br	8055bc <_dtoa_r+0x1304>
  *decpt = k + 1;
  80595c:	d8801417 	ldw	r2,80(sp)
  805960:	dcc01117 	ldw	r19,68(sp)
  805964:	df001217 	ldw	fp,72(sp)
  805968:	10800044 	addi	r2,r2,1
  80596c:	d8800515 	stw	r2,20(sp)
	      *s++ = '0' + (int) L;
  805970:	1829883a 	mov	r20,r3
  805974:	003d6206 	br	804f00 <_dtoa_r+0xc48>
  *decpt = k + 1;
  805978:	d8c00517 	ldw	r3,20(sp)
	      if (dig == '9')
  80597c:	a8800e60 	cmpeqi	r2,r21,57
	      *s++ = dig;
  805980:	b5000044 	addi	r20,r22,1
  *decpt = k + 1;
  805984:	18c00044 	addi	r3,r3,1
  805988:	d8c00515 	stw	r3,20(sp)
	      if (dig == '9')
  80598c:	103fe01e 	bne	r2,zero,805910 <_dtoa_r+0x1658>
	      if (j > 0)
  805990:	047f0916 	blt	zero,r17,8055b8 <_dtoa_r+0x1300>
  805994:	003f0906 	br	8055bc <_dtoa_r+0x1304>
  if (ilim <= 0 && mode > 2)
  805998:	d8800317 	ldw	r2,12(sp)
  80599c:	108000c8 	cmpgei	r2,r2,3
  8059a0:	103e511e 	bne	r2,zero,8052e8 <_dtoa_r+0x1030>
	  k--;
  8059a4:	dc800515 	stw	r18,20(sp)
  8059a8:	003e1506 	br	805200 <_dtoa_r+0xf48>
	      *s++ = '0' + (int) L;
  8059ac:	dd000a17 	ldw	r20,40(sp)
  8059b0:	003f8106 	br	8057b8 <_dtoa_r+0x1500>
  if (ilim <= 0 && mode > 2)
  8059b4:	d8800317 	ldw	r2,12(sp)
  8059b8:	108000c8 	cmpgei	r2,r2,3
  8059bc:	103e4a1e 	bne	r2,zero,8052e8 <_dtoa_r+0x1030>
  8059c0:	d8800b17 	ldw	r2,44(sp)
	  k--;
  8059c4:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  8059c8:	d8800415 	stw	r2,16(sp)
      if (m2 > 0)
  8059cc:	057db50e 	bge	zero,r21,8050a4 <_dtoa_r+0xdec>
  8059d0:	003e6306 	br	805360 <_dtoa_r+0x10a8>
      ieps = 2;			/* conservative */
  8059d4:	05000084 	movi	r20,2
  8059d8:	003b4806 	br	8046fc <_dtoa_r+0x444>
  *decpt = k + 1;
  8059dc:	d8801417 	ldw	r2,80(sp)
	      *s++ = '0' + (int) L;
  8059e0:	dd000a17 	ldw	r20,40(sp)
  *decpt = k + 1;
  8059e4:	10800044 	addi	r2,r2,1
  8059e8:	d8800515 	stw	r2,20(sp)
  8059ec:	003d4406 	br	804f00 <_dtoa_r+0xc48>
	  mhi = eBalloc (ptr, mhi->_k);
  8059f0:	01c02074 	movhi	r7,129
  8059f4:	01002074 	movhi	r4,129
  8059f8:	39cbbe04 	addi	r7,r7,12024
  8059fc:	000d883a 	mov	r6,zero
  805a00:	0140ba84 	movi	r5,746
  805a04:	210bc304 	addi	r4,r4,12044
  805a08:	080b7900 	call	80b790 <__assert_func>
  else if (i < 4)
  805a0c:	18c00120 	cmpeqi	r3,r3,4
  805a10:	183cf01e 	bne	r3,zero,804dd4 <_dtoa_r+0xb1c>
      i += 28;
  805a14:	00c00f04 	movi	r3,60
  805a18:	1885c83a 	sub	r2,r3,r2
  805a1c:	003ce806 	br	804dc0 <_dtoa_r+0xb08>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805a20:	e0001115 	stw	zero,68(fp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  805a24:	000b883a 	mov	r5,zero
  805a28:	e009883a 	mov	r4,fp
  805a2c:	0807c4c0 	call	807c4c <_Balloc>
  805a30:	d8800215 	stw	r2,8(sp)
  805a34:	10000e26 	beq	r2,zero,805a70 <_dtoa_r+0x17b8>
  805a38:	d8800217 	ldw	r2,8(sp)
      ndigits = 0;
  805a3c:	d8002415 	stw	zero,144(sp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  805a40:	e0801015 	stw	r2,64(fp)
  ilim = ilim1 = -1;
  805a44:	00bfffc4 	movi	r2,-1
  805a48:	d8800415 	stw	r2,16(sp)
  leftright = 1;
  805a4c:	00800044 	movi	r2,1
  805a50:	d8800815 	stw	r2,32(sp)
  ilim = ilim1 = -1;
  805a54:	00bfffc4 	movi	r2,-1
  805a58:	d8800b15 	stw	r2,44(sp)
  805a5c:	003c0e06 	br	804a98 <_dtoa_r+0x7e0>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805a60:	00802074 	movhi	r2,129
  805a64:	108bbb04 	addi	r2,r2,12012
  805a68:	d8800215 	stw	r2,8(sp)
  805a6c:	003a4406 	br	804380 <_dtoa_r+0xc8>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  805a70:	01c02074 	movhi	r7,129
  805a74:	01002074 	movhi	r4,129
  805a78:	39cbbe04 	addi	r7,r7,12024
  805a7c:	000d883a 	mov	r6,zero
  805a80:	01406a84 	movi	r5,426
  805a84:	210bc304 	addi	r4,r4,12044
  805a88:	080b7900 	call	80b790 <__assert_func>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805a8c:	000b883a 	mov	r5,zero
  805a90:	003add06 	br	804608 <_dtoa_r+0x350>

00805a94 <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  805a94:	2880030b 	ldhu	r2,12(r5)
{
  805a98:	defffb04 	addi	sp,sp,-20
  805a9c:	dcc00315 	stw	r19,12(sp)
  805aa0:	dc000015 	stw	r16,0(sp)
  805aa4:	dfc00415 	stw	ra,16(sp)
  805aa8:	dc800215 	stw	r18,8(sp)
  805aac:	dc400115 	stw	r17,4(sp)
  if ((flags & __SWR) == 0)
  805ab0:	10c0020c 	andi	r3,r2,8
{
  805ab4:	2821883a 	mov	r16,r5
  805ab8:	2027883a 	mov	r19,r4
  if ((flags & __SWR) == 0)
  805abc:	18003f1e 	bne	r3,zero,805bbc <__sflush_r+0x128>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  805ac0:	28c00117 	ldw	r3,4(r5)
      fp->_flags |= __SNPT;
  805ac4:	10820014 	ori	r2,r2,2048
  805ac8:	2880030d 	sth	r2,12(r5)
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  805acc:	00c0550e 	bge	zero,r3,805c24 <__sflush_r+0x190>
  805ad0:	82000a17 	ldw	r8,40(r16)
  805ad4:	40003126 	beq	r8,zero,805b9c <__sflush_r+0x108>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
  805ad8:	9c400017 	ldw	r17,0(r19)
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
  805adc:	1104000c 	andi	r4,r2,4096
	  ptr->_errno = 0;
  805ae0:	98000015 	stw	zero,0(r19)
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  805ae4:	81400717 	ldw	r5,28(r16)
	  if (fp->_flags & __SOFF)
  805ae8:	1007883a 	mov	r3,r2
  805aec:	2000521e 	bne	r4,zero,805c38 <__sflush_r+0x1a4>
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  805af0:	01c00044 	movi	r7,1
  805af4:	000d883a 	mov	r6,zero
  805af8:	9809883a 	mov	r4,r19
  805afc:	403ee83a 	callr	r8
	      if (curoff == -1L && ptr->_errno != 0)
  805b00:	10ffffd8 	cmpnei	r3,r2,-1
  805b04:	18005826 	beq	r3,zero,805c68 <__sflush_r+0x1d4>
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
  805b08:	80c0030b 	ldhu	r3,12(r16)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  805b0c:	82000a17 	ldw	r8,40(r16)
  805b10:	81400717 	ldw	r5,28(r16)
          if (fp->_flags & __SRD)
  805b14:	18c0010c 	andi	r3,r3,4
  805b18:	18000626 	beq	r3,zero,805b34 <__sflush_r+0xa0>
              curoff -= fp->_r;
  805b1c:	81000117 	ldw	r4,4(r16)
              if (HASUB (fp))
  805b20:	80c00c17 	ldw	r3,48(r16)
              curoff -= fp->_r;
  805b24:	1105c83a 	sub	r2,r2,r4
              if (HASUB (fp))
  805b28:	18000226 	beq	r3,zero,805b34 <__sflush_r+0xa0>
                curoff -= fp->_ur;
  805b2c:	80c00f17 	ldw	r3,60(r16)
  805b30:	10c5c83a 	sub	r2,r2,r3
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  805b34:	100d883a 	mov	r6,r2
  805b38:	000f883a 	mov	r7,zero
  805b3c:	9809883a 	mov	r4,r19
  805b40:	403ee83a 	callr	r8
	  if (curoff != -1 || ptr->_errno == 0
  805b44:	10ffffd8 	cmpnei	r3,r2,-1
  805b48:	18003d1e 	bne	r3,zero,805c40 <__sflush_r+0x1ac>
  805b4c:	99000017 	ldw	r4,0(r19)
	      if (HASUB (fp))
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
  805b50:	80c0030b 	ldhu	r3,12(r16)
	  if (curoff != -1 || ptr->_errno == 0
  805b54:	20004e26 	beq	r4,zero,805c90 <__sflush_r+0x1fc>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  805b58:	21400760 	cmpeqi	r5,r4,29
  805b5c:	2800021e 	bne	r5,zero,805b68 <__sflush_r+0xd4>
  805b60:	210005a0 	cmpeqi	r4,r4,22
  805b64:	20002c26 	beq	r4,zero,805c18 <__sflush_r+0x184>
	      fp->_p = fp->_bf._base;
  805b68:	80800417 	ldw	r2,16(r16)
	      fp->_flags &= ~__SNPT;
  805b6c:	18fdffcc 	andi	r3,r3,63487
  805b70:	80c0030d 	sth	r3,12(r16)
	      fp->_r = 0;
  805b74:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  805b78:	80800015 	stw	r2,0(r16)
	      if (HASUB (fp))
  805b7c:	81400c17 	ldw	r5,48(r16)
	      ptr->_errno = tmp_errno;
  805b80:	9c400015 	stw	r17,0(r19)
	      if (HASUB (fp))
  805b84:	28000526 	beq	r5,zero,805b9c <__sflush_r+0x108>
		FREEUB (ptr, fp);
  805b88:	80801004 	addi	r2,r16,64
  805b8c:	28800226 	beq	r5,r2,805b98 <__sflush_r+0x104>
  805b90:	9809883a 	mov	r4,r19
  805b94:	08063a00 	call	8063a0 <_free_r>
  805b98:	80000c15 	stw	zero,48(r16)
	      return EOF;
	    }
	}
      return 0;
  805b9c:	0005883a 	mov	r2,zero
	}
      p += t;
      n -= t;
    }
  return 0;
}
  805ba0:	dfc00417 	ldw	ra,16(sp)
  805ba4:	dcc00317 	ldw	r19,12(sp)
  805ba8:	dc800217 	ldw	r18,8(sp)
  805bac:	dc400117 	ldw	r17,4(sp)
  805bb0:	dc000017 	ldw	r16,0(sp)
  805bb4:	dec00504 	addi	sp,sp,20
  805bb8:	f800283a 	ret
  if ((p = fp->_bf._base) == NULL)
  805bbc:	2c800417 	ldw	r18,16(r5)
  805bc0:	903ff626 	beq	r18,zero,805b9c <__sflush_r+0x108>
  n = fp->_p - p;		/* write this much */
  805bc4:	2c400017 	ldw	r17,0(r5)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  805bc8:	108000cc 	andi	r2,r2,3
  fp->_p = p;
  805bcc:	2c800015 	stw	r18,0(r5)
  n = fp->_p - p;		/* write this much */
  805bd0:	8ca3c83a 	sub	r17,r17,r18
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  805bd4:	1000161e 	bne	r2,zero,805c30 <__sflush_r+0x19c>
  805bd8:	28800517 	ldw	r2,20(r5)
  805bdc:	80800215 	stw	r2,8(r16)
  while (n > 0)
  805be0:	04400316 	blt	zero,r17,805bf0 <__sflush_r+0x15c>
  805be4:	003fed06 	br	805b9c <__sflush_r+0x108>
      p += t;
  805be8:	90a5883a 	add	r18,r18,r2
  while (n > 0)
  805bec:	047feb0e 	bge	zero,r17,805b9c <__sflush_r+0x108>
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
  805bf0:	80800917 	ldw	r2,36(r16)
  805bf4:	81400717 	ldw	r5,28(r16)
  805bf8:	880f883a 	mov	r7,r17
  805bfc:	900d883a 	mov	r6,r18
  805c00:	9809883a 	mov	r4,r19
  805c04:	103ee83a 	callr	r2
      n -= t;
  805c08:	88a3c83a 	sub	r17,r17,r2
      if (t <= 0)
  805c0c:	00bff616 	blt	zero,r2,805be8 <__sflush_r+0x154>
          fp->_flags |= __SERR;
  805c10:	80c0030b 	ldhu	r3,12(r16)
          return EOF;
  805c14:	00bfffc4 	movi	r2,-1
          fp->_flags |= __SERR;
  805c18:	18c01014 	ori	r3,r3,64
  805c1c:	80c0030d 	sth	r3,12(r16)
          return EOF;
  805c20:	003fdf06 	br	805ba0 <__sflush_r+0x10c>
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  805c24:	28c00f17 	ldw	r3,60(r5)
  805c28:	00ffa916 	blt	zero,r3,805ad0 <__sflush_r+0x3c>
  805c2c:	003fdb06 	br	805b9c <__sflush_r+0x108>
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  805c30:	0005883a 	mov	r2,zero
  805c34:	003fe906 	br	805bdc <__sflush_r+0x148>
	    curoff = fp->_offset;
  805c38:	80801417 	ldw	r2,80(r16)
  805c3c:	003fb506 	br	805b14 <__sflush_r+0x80>
	      fp->_flags &= ~__SNPT;
  805c40:	80c0030b 	ldhu	r3,12(r16)
	      fp->_p = fp->_bf._base;
  805c44:	81000417 	ldw	r4,16(r16)
	      fp->_r = 0;
  805c48:	80000115 	stw	zero,4(r16)
	      fp->_flags &= ~__SNPT;
  805c4c:	197dffcc 	andi	r5,r3,63487
  805c50:	8140030d 	sth	r5,12(r16)
	      fp->_p = fp->_bf._base;
  805c54:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  805c58:	18c4000c 	andi	r3,r3,4096
  805c5c:	183fc726 	beq	r3,zero,805b7c <__sflush_r+0xe8>
		fp->_offset = curoff;
  805c60:	80801415 	stw	r2,80(r16)
  805c64:	003fc506 	br	805b7c <__sflush_r+0xe8>
	      if (curoff == -1L && ptr->_errno != 0)
  805c68:	98c00017 	ldw	r3,0(r19)
  805c6c:	183fa626 	beq	r3,zero,805b08 <__sflush_r+0x74>
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  805c70:	19000760 	cmpeqi	r4,r3,29
  805c74:	20000e1e 	bne	r4,zero,805cb0 <__sflush_r+0x21c>
  805c78:	18c00598 	cmpnei	r3,r3,22
  805c7c:	18000c26 	beq	r3,zero,805cb0 <__sflush_r+0x21c>
		    fp->_flags |= __SERR;
  805c80:	80c0030b 	ldhu	r3,12(r16)
  805c84:	18c01014 	ori	r3,r3,64
  805c88:	80c0030d 	sth	r3,12(r16)
  805c8c:	003fc406 	br	805ba0 <__sflush_r+0x10c>
	      fp->_p = fp->_bf._base;
  805c90:	81000417 	ldw	r4,16(r16)
	      fp->_flags &= ~__SNPT;
  805c94:	197dffcc 	andi	r5,r3,63487
  805c98:	8140030d 	sth	r5,12(r16)
	      fp->_r = 0;
  805c9c:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  805ca0:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  805ca4:	18c4000c 	andi	r3,r3,4096
  805ca8:	183fb426 	beq	r3,zero,805b7c <__sflush_r+0xe8>
  805cac:	003fec06 	br	805c60 <__sflush_r+0x1cc>
		      ptr->_errno = tmp_errno;
  805cb0:	9c400015 	stw	r17,0(r19)
		      result = 0;
  805cb4:	0005883a 	mov	r2,zero
		      ptr->_errno = tmp_errno;
  805cb8:	003fb906 	br	805ba0 <__sflush_r+0x10c>

00805cbc <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
  805cbc:	defffd04 	addi	sp,sp,-12
  805cc0:	dc000115 	stw	r16,4(sp)
  805cc4:	dfc00215 	stw	ra,8(sp)
  805cc8:	2021883a 	mov	r16,r4
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
  805ccc:	20000226 	beq	r4,zero,805cd8 <_fflush_r+0x1c>
  805cd0:	20800e17 	ldw	r2,56(r4)
  805cd4:	10000726 	beq	r2,zero,805cf4 <_fflush_r+0x38>

  if (!fp->_flags)
  805cd8:	2880030f 	ldh	r2,12(r5)
  805cdc:	10000a1e 	bne	r2,zero,805d08 <_fflush_r+0x4c>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
  805ce0:	0005883a 	mov	r2,zero
  805ce4:	dfc00217 	ldw	ra,8(sp)
  805ce8:	dc000117 	ldw	r16,4(sp)
  805cec:	dec00304 	addi	sp,sp,12
  805cf0:	f800283a 	ret
  805cf4:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (ptr, fp);
  805cf8:	08060e80 	call	8060e8 <__sinit>
  805cfc:	d9400017 	ldw	r5,0(sp)
  if (!fp->_flags)
  805d00:	2880030f 	ldh	r2,12(r5)
  805d04:	103ff626 	beq	r2,zero,805ce0 <_fflush_r+0x24>
  ret = __sflush_r (ptr, fp);
  805d08:	8009883a 	mov	r4,r16
}
  805d0c:	dfc00217 	ldw	ra,8(sp)
  805d10:	dc000117 	ldw	r16,4(sp)
  805d14:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  805d18:	0805a941 	jmpi	805a94 <__sflush_r>

00805d1c <fflush>:
#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
  if (fp == NULL)
  805d1c:	20001626 	beq	r4,zero,805d78 <fflush+0x5c>
  805d20:	200b883a 	mov	r5,r4
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
  805d24:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (ptr, fp);
  805d28:	20000226 	beq	r4,zero,805d34 <fflush+0x18>
  805d2c:	20800e17 	ldw	r2,56(r4)
  805d30:	10000526 	beq	r2,zero,805d48 <fflush+0x2c>
  if (!fp->_flags)
  805d34:	2880030f 	ldh	r2,12(r5)
  805d38:	1000021e 	bne	r2,zero,805d44 <fflush+0x28>
}
  805d3c:	0005883a 	mov	r2,zero
  805d40:	f800283a 	ret
  ret = __sflush_r (ptr, fp);
  805d44:	0805a941 	jmpi	805a94 <__sflush_r>
{
  805d48:	defffd04 	addi	sp,sp,-12
  805d4c:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  805d50:	d9000015 	stw	r4,0(sp)
{
  805d54:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (ptr, fp);
  805d58:	08060e80 	call	8060e8 <__sinit>
  805d5c:	d9400117 	ldw	r5,4(sp)
  805d60:	d9000017 	ldw	r4,0(sp)
  if (!fp->_flags)
  805d64:	2880030f 	ldh	r2,12(r5)
  805d68:	10000726 	beq	r2,zero,805d88 <fflush+0x6c>
}
  805d6c:	dfc00217 	ldw	ra,8(sp)
  805d70:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  805d74:	0805a941 	jmpi	805a94 <__sflush_r>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
  805d78:	d1200817 	ldw	r4,-32736(gp)
  805d7c:	01402034 	movhi	r5,128
  805d80:	29572f04 	addi	r5,r5,23740
  805d84:	0806c1c1 	jmpi	806c1c <_fwalk_reent>
}
  805d88:	0005883a 	mov	r2,zero
  805d8c:	dfc00217 	ldw	ra,8(sp)
  805d90:	dec00304 	addi	sp,sp,12
  805d94:	f800283a 	ret

00805d98 <__fp_lock>:
{
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
}
  805d98:	0005883a 	mov	r2,zero
  805d9c:	f800283a 	ret

00805da0 <_cleanup_r>:
  (void) _fwalk_reent (ptr, cleanup_func);
  805da0:	01402074 	movhi	r5,129
  805da4:	296e3204 	addi	r5,r5,-18232
  805da8:	0806c1c1 	jmpi	806c1c <_fwalk_reent>

00805dac <__fp_unlock>:
  805dac:	0005883a 	mov	r2,zero
  805db0:	f800283a 	ret

00805db4 <__sfmoreglue>:
{
  805db4:	defffc04 	addi	sp,sp,-16
  805db8:	dc800215 	stw	r18,8(sp)
  805dbc:	2825883a 	mov	r18,r5
  805dc0:	dc000015 	stw	r16,0(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  805dc4:	01401a04 	movi	r5,104
{
  805dc8:	2021883a 	mov	r16,r4
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  805dcc:	913fffc4 	addi	r4,r18,-1
{
  805dd0:	dfc00315 	stw	ra,12(sp)
  805dd4:	dc400115 	stw	r17,4(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  805dd8:	080d8900 	call	80d890 <__mulsi3>
  805ddc:	8009883a 	mov	r4,r16
  805de0:	11401d04 	addi	r5,r2,116
  805de4:	1023883a 	mov	r17,r2
  805de8:	080701c0 	call	80701c <_malloc_r>
  805dec:	1021883a 	mov	r16,r2
  if (g == NULL)
  805df0:	10000726 	beq	r2,zero,805e10 <__sfmoreglue+0x5c>
  g->glue._iobs = &g->file;
  805df4:	11000304 	addi	r4,r2,12
  g->glue._next = NULL;
  805df8:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  805dfc:	14800115 	stw	r18,4(r2)
  g->glue._iobs = &g->file;
  805e00:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  805e04:	89801a04 	addi	r6,r17,104
  805e08:	000b883a 	mov	r5,zero
  805e0c:	0801b400 	call	801b40 <memset>
}
  805e10:	8005883a 	mov	r2,r16
  805e14:	dfc00317 	ldw	ra,12(sp)
  805e18:	dc800217 	ldw	r18,8(sp)
  805e1c:	dc400117 	ldw	r17,4(sp)
  805e20:	dc000017 	ldw	r16,0(sp)
  805e24:	dec00404 	addi	sp,sp,16
  805e28:	f800283a 	ret

00805e2c <__sfp>:
  if (!_GLOBAL_REENT->__sdidinit)
  805e2c:	d0a00817 	ldw	r2,-32736(gp)
{
  805e30:	defffb04 	addi	sp,sp,-20
  805e34:	dc400115 	stw	r17,4(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  805e38:	10c00e17 	ldw	r3,56(r2)
{
  805e3c:	dfc00415 	stw	ra,16(sp)
  805e40:	dcc00315 	stw	r19,12(sp)
  805e44:	dc800215 	stw	r18,8(sp)
  805e48:	dc000015 	stw	r16,0(sp)
  805e4c:	2023883a 	mov	r17,r4
  if (!_GLOBAL_REENT->__sdidinit)
  805e50:	18003126 	beq	r3,zero,805f18 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  805e54:	1100ba17 	ldw	r4,744(r2)
  805e58:	1140b917 	ldw	r5,740(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
  805e5c:	1400b804 	addi	r16,r2,736
  g->glue._niobs = n;
  805e60:	04c00104 	movi	r19,4
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  805e64:	297fffc4 	addi	r5,r5,-1
  805e68:	2800050e 	bge	r5,zero,805e80 <__sfp+0x54>
  805e6c:	00002406 	br	805f00 <__sfp+0xd4>
  805e70:	297fffc4 	addi	r5,r5,-1
  805e74:	28bfffd8 	cmpnei	r2,r5,-1
  805e78:	21001a04 	addi	r4,r4,104
  805e7c:	10002026 	beq	r2,zero,805f00 <__sfp+0xd4>
	if (fp->_flags == 0)
  805e80:	2080030f 	ldh	r2,12(r4)
  805e84:	103ffa1e 	bne	r2,zero,805e70 <__sfp+0x44>
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  805e88:	00bffff4 	movhi	r2,65535
  805e8c:	10800044 	addi	r2,r2,1
  fp->_flags2 = 0;
  805e90:	20001915 	stw	zero,100(r4)
  fp->_p = NULL;		/* no current pointer */
  805e94:	20000015 	stw	zero,0(r4)
  fp->_r = 0;
  805e98:	20000115 	stw	zero,4(r4)
  fp->_w = 0;			/* nothing to read or write */
  805e9c:	20000215 	stw	zero,8(r4)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  805ea0:	20800315 	stw	r2,12(r4)
  fp->_bf._base = NULL;		/* no buffer */
  805ea4:	20000415 	stw	zero,16(r4)
  fp->_bf._size = 0;
  805ea8:	20000515 	stw	zero,20(r4)
  fp->_lbfsize = 0;		/* not line buffered */
  805eac:	20000615 	stw	zero,24(r4)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
  805eb0:	20001705 	stb	zero,92(r4)
  805eb4:	20001745 	stb	zero,93(r4)
  805eb8:	20001785 	stb	zero,94(r4)
  805ebc:	200017c5 	stb	zero,95(r4)
  805ec0:	20001805 	stb	zero,96(r4)
  805ec4:	20001845 	stb	zero,97(r4)
  805ec8:	20001885 	stb	zero,98(r4)
  805ecc:	200018c5 	stb	zero,99(r4)
  fp->_ub._base = NULL;		/* no ungetc buffer */
  805ed0:	20000c15 	stw	zero,48(r4)
  fp->_ub._size = 0;
  805ed4:	20000d15 	stw	zero,52(r4)
  fp->_lb._base = NULL;		/* no line buffer */
  805ed8:	20001115 	stw	zero,68(r4)
  fp->_lb._size = 0;
  805edc:	20001215 	stw	zero,72(r4)
}
  805ee0:	2005883a 	mov	r2,r4
  805ee4:	dfc00417 	ldw	ra,16(sp)
  805ee8:	dcc00317 	ldw	r19,12(sp)
  805eec:	dc800217 	ldw	r18,8(sp)
  805ef0:	dc400117 	ldw	r17,4(sp)
  805ef4:	dc000017 	ldw	r16,0(sp)
  805ef8:	dec00504 	addi	sp,sp,20
  805efc:	f800283a 	ret
      if (g->_next == NULL &&
  805f00:	80800017 	ldw	r2,0(r16)
  805f04:	10005e26 	beq	r2,zero,806080 <__sfp+0x254>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  805f08:	11000217 	ldw	r4,8(r2)
  805f0c:	11400117 	ldw	r5,4(r2)
  805f10:	1021883a 	mov	r16,r2
  805f14:	003fd306 	br	805e64 <__sfp+0x38>
  s->__cleanup = _cleanup_r;	/* conservative */
  805f18:	01402034 	movhi	r5,128
  stdin_init (s->_stdin);
  805f1c:	10c00117 	ldw	r3,4(r2)
  s->__cleanup = _cleanup_r;	/* conservative */
  805f20:	29576804 	addi	r5,r5,23968
  805f24:	11400f15 	stw	r5,60(r2)
  s->__sglue._iobs = &s->__sf[0];
  805f28:	1100bb04 	addi	r4,r2,748
  s->__sglue._niobs = 3;
  805f2c:	014000c4 	movi	r5,3
  805f30:	1140b915 	stw	r5,740(r2)
  s->__sglue._iobs = &s->__sf[0];
  805f34:	1100ba15 	stw	r4,744(r2)
  s->__sglue._next = NULL;
  805f38:	1000b815 	stw	zero,736(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  805f3c:	18001705 	stb	zero,92(r3)
  805f40:	18001745 	stb	zero,93(r3)
  805f44:	18001785 	stb	zero,94(r3)
  805f48:	180017c5 	stb	zero,95(r3)
  805f4c:	18001805 	stb	zero,96(r3)
  805f50:	18001845 	stb	zero,97(r3)
  805f54:	18001885 	stb	zero,98(r3)
  805f58:	180018c5 	stb	zero,99(r3)
  ptr->_flags = flags;
  805f5c:	01000104 	movi	r4,4
  stdout_init (s->_stdout);
  805f60:	11400217 	ldw	r5,8(r2)
  ptr->_flags = flags;
  805f64:	19000315 	stw	r4,12(r3)
  ptr->_read = __sread;
  805f68:	02002074 	movhi	r8,129
  ptr->_write = __swrite;
  805f6c:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  805f70:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  805f74:	01002074 	movhi	r4,129
  ptr->_read = __sread;
  805f78:	42268804 	addi	r8,r8,-26080
  ptr->_write = __swrite;
  805f7c:	39e69f04 	addi	r7,r7,-25988
  ptr->_seek = __sseek;
  805f80:	31a6bf04 	addi	r6,r6,-25860
  ptr->_close = __sclose;
  805f84:	2126d604 	addi	r4,r4,-25768
  ptr->_flags = flags;
  805f88:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  805f8c:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  805f90:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  805f94:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  805f98:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  805f9c:	18000415 	stw	zero,16(r3)
  ptr->_bf._size = 0;
  805fa0:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  805fa4:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  805fa8:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  805fac:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  805fb0:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  805fb4:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  805fb8:	19000b15 	stw	r4,44(r3)
  ptr->_flags = flags;
  805fbc:	4a400284 	addi	r9,r9,10
  805fc0:	2a400315 	stw	r9,12(r5)
  ptr->_flags2 = 0;
  805fc4:	28001915 	stw	zero,100(r5)
  ptr->_p = 0;
  805fc8:	28000015 	stw	zero,0(r5)
  ptr->_r = 0;
  805fcc:	28000115 	stw	zero,4(r5)
  ptr->_w = 0;
  805fd0:	28000215 	stw	zero,8(r5)
  ptr->_bf._base = 0;
  805fd4:	28000415 	stw	zero,16(r5)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  805fd8:	28001705 	stb	zero,92(r5)
  805fdc:	28001745 	stb	zero,93(r5)
  805fe0:	28001785 	stb	zero,94(r5)
  805fe4:	280017c5 	stb	zero,95(r5)
  805fe8:	28001805 	stb	zero,96(r5)
  805fec:	28001845 	stb	zero,97(r5)
  805ff0:	28001885 	stb	zero,98(r5)
  805ff4:	280018c5 	stb	zero,99(r5)
  stderr_init (s->_stderr);
  805ff8:	10c00317 	ldw	r3,12(r2)
  ptr->_flags = flags;
  805ffc:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  806000:	28000515 	stw	zero,20(r5)
  ptr->_lbfsize = 0;
  806004:	28000615 	stw	zero,24(r5)
  ptr->_cookie = ptr;
  806008:	29400715 	stw	r5,28(r5)
  ptr->_read = __sread;
  80600c:	2a000815 	stw	r8,32(r5)
  ptr->_write = __swrite;
  806010:	29c00915 	stw	r7,36(r5)
  ptr->_seek = __sseek;
  806014:	29800a15 	stw	r6,40(r5)
  ptr->_close = __sclose;
  806018:	29000b15 	stw	r4,44(r5)
  ptr->_flags = flags;
  80601c:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  806020:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  806024:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  806028:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  80602c:	18000215 	stw	zero,8(r3)
  ptr->_flags = flags;
  806030:	1a400315 	stw	r9,12(r3)
  ptr->_bf._base = 0;
  806034:	18000415 	stw	zero,16(r3)
  ptr->_bf._size = 0;
  806038:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  80603c:	18000615 	stw	zero,24(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806040:	18001705 	stb	zero,92(r3)
  806044:	18001745 	stb	zero,93(r3)
  806048:	18001785 	stb	zero,94(r3)
  80604c:	180017c5 	stb	zero,95(r3)
  806050:	18001805 	stb	zero,96(r3)
  806054:	18001845 	stb	zero,97(r3)
  806058:	18001885 	stb	zero,98(r3)
  80605c:	180018c5 	stb	zero,99(r3)
  ptr->_cookie = ptr;
  806060:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  806064:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  806068:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  80606c:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  806070:	19000b15 	stw	r4,44(r3)
  s->__sdidinit = 1;
  806074:	00c00044 	movi	r3,1
  806078:	10c00e15 	stw	r3,56(r2)
}
  80607c:	003f7506 	br	805e54 <__sfp+0x28>
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806080:	01406b04 	movi	r5,428
  806084:	8809883a 	mov	r4,r17
  806088:	080701c0 	call	80701c <_malloc_r>
  80608c:	1025883a 	mov	r18,r2
  if (g == NULL)
  806090:	10000c26 	beq	r2,zero,8060c4 <__sfp+0x298>
  g->glue._iobs = &g->file;
  806094:	11000304 	addi	r4,r2,12
  806098:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  80609c:	000b883a 	mov	r5,zero
  g->glue._next = NULL;
  8060a0:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  8060a4:	14c00115 	stw	r19,4(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  8060a8:	01806804 	movi	r6,416
  8060ac:	0801b400 	call	801b40 <memset>
  8060b0:	1009883a 	mov	r4,r2
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  8060b4:	84800015 	stw	r18,0(r16)
  8060b8:	014000c4 	movi	r5,3
  8060bc:	9021883a 	mov	r16,r18
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8060c0:	003f6f06 	br	805e80 <__sfp+0x54>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  8060c4:	80000015 	stw	zero,0(r16)
  d->_errno = ENOMEM;
  8060c8:	00800304 	movi	r2,12
  8060cc:	88800015 	stw	r2,0(r17)
  return NULL;
  8060d0:	0009883a 	mov	r4,zero
  8060d4:	003f8206 	br	805ee0 <__sfp+0xb4>

008060d8 <_cleanup>:
  (void) _fwalk_reent (ptr, cleanup_func);
  8060d8:	d1200817 	ldw	r4,-32736(gp)
  8060dc:	01402074 	movhi	r5,129
  8060e0:	296e3204 	addi	r5,r5,-18232
  8060e4:	0806c1c1 	jmpi	806c1c <_fwalk_reent>

008060e8 <__sinit>:
  if (s->__sdidinit)
  8060e8:	20800e17 	ldw	r2,56(r4)
  8060ec:	1000591e 	bne	r2,zero,806254 <__sinit+0x16c>
  s->__cleanup = _cleanup_r;	/* conservative */
  8060f0:	00c02034 	movhi	r3,128
  stdin_init (s->_stdin);
  8060f4:	20800117 	ldw	r2,4(r4)
  s->__cleanup = _cleanup_r;	/* conservative */
  8060f8:	18d76804 	addi	r3,r3,23968
  8060fc:	20c00f15 	stw	r3,60(r4)
  s->__sglue._iobs = &s->__sf[0];
  806100:	2140bb04 	addi	r5,r4,748
  s->__sglue._niobs = 3;
  806104:	00c000c4 	movi	r3,3
  806108:	20c0b915 	stw	r3,740(r4)
  s->__sglue._iobs = &s->__sf[0];
  80610c:	2140ba15 	stw	r5,744(r4)
  s->__sglue._next = NULL;
  806110:	2000b815 	stw	zero,736(r4)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806114:	10001705 	stb	zero,92(r2)
  806118:	10001745 	stb	zero,93(r2)
  80611c:	10001785 	stb	zero,94(r2)
  806120:	100017c5 	stb	zero,95(r2)
  806124:	10001805 	stb	zero,96(r2)
  806128:	10001845 	stb	zero,97(r2)
  80612c:	10001885 	stb	zero,98(r2)
  806130:	100018c5 	stb	zero,99(r2)
  ptr->_flags = flags;
  806134:	00c00104 	movi	r3,4
  806138:	10c00315 	stw	r3,12(r2)
  ptr->_read = __sread;
  80613c:	02002074 	movhi	r8,129
  stdout_init (s->_stdout);
  806140:	20c00217 	ldw	r3,8(r4)
  ptr->_write = __swrite;
  806144:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  806148:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  80614c:	01402074 	movhi	r5,129
  ptr->_read = __sread;
  806150:	42268804 	addi	r8,r8,-26080
  ptr->_write = __swrite;
  806154:	39e69f04 	addi	r7,r7,-25988
  ptr->_seek = __sseek;
  806158:	31a6bf04 	addi	r6,r6,-25860
  ptr->_close = __sclose;
  80615c:	2966d604 	addi	r5,r5,-25768
  ptr->_flags = flags;
  806160:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  806164:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806168:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  80616c:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806170:	10000215 	stw	zero,8(r2)
  ptr->_bf._base = 0;
  806174:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806178:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  80617c:	10000615 	stw	zero,24(r2)
  ptr->_cookie = ptr;
  806180:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  806184:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806188:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  80618c:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806190:	11400b15 	stw	r5,44(r2)
  ptr->_flags = flags;
  806194:	4a400284 	addi	r9,r9,10
  806198:	1a400315 	stw	r9,12(r3)
  ptr->_flags2 = 0;
  80619c:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  8061a0:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  8061a4:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  8061a8:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  8061ac:	18000415 	stw	zero,16(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  8061b0:	18001705 	stb	zero,92(r3)
  8061b4:	18001745 	stb	zero,93(r3)
  8061b8:	18001785 	stb	zero,94(r3)
  8061bc:	180017c5 	stb	zero,95(r3)
  8061c0:	18001805 	stb	zero,96(r3)
  8061c4:	18001845 	stb	zero,97(r3)
  8061c8:	18001885 	stb	zero,98(r3)
  8061cc:	180018c5 	stb	zero,99(r3)
  stderr_init (s->_stderr);
  8061d0:	20800317 	ldw	r2,12(r4)
  ptr->_flags = flags;
  8061d4:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  8061d8:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  8061dc:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  8061e0:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  8061e4:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  8061e8:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  8061ec:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  8061f0:	19400b15 	stw	r5,44(r3)
  ptr->_flags = flags;
  8061f4:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  8061f8:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  8061fc:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806200:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806204:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
  806208:	12400315 	stw	r9,12(r2)
  ptr->_bf._base = 0;
  80620c:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806210:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  806214:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806218:	10001705 	stb	zero,92(r2)
  80621c:	10001745 	stb	zero,93(r2)
  806220:	10001785 	stb	zero,94(r2)
  806224:	100017c5 	stb	zero,95(r2)
  806228:	10001805 	stb	zero,96(r2)
  80622c:	10001845 	stb	zero,97(r2)
  806230:	10001885 	stb	zero,98(r2)
  806234:	100018c5 	stb	zero,99(r2)
  ptr->_cookie = ptr;
  806238:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  80623c:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806240:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  806244:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806248:	11400b15 	stw	r5,44(r2)
  s->__sdidinit = 1;
  80624c:	00800044 	movi	r2,1
  806250:	20800e15 	stw	r2,56(r4)
}
  806254:	f800283a 	ret

00806258 <__sfp_lock_acquire>:
}
  806258:	f800283a 	ret

0080625c <__sfp_lock_release>:
  80625c:	f800283a 	ret

00806260 <__sinit_lock_acquire>:
  806260:	f800283a 	ret

00806264 <__sinit_lock_release>:
  806264:	f800283a 	ret

00806268 <__fp_lock_all>:
void
__fp_lock_all (void)
{
  __sfp_lock_acquire ();

  (void) _fwalk (_REENT, __fp_lock);
  806268:	d1200917 	ldw	r4,-32732(gp)
  80626c:	01402034 	movhi	r5,128
  806270:	29576604 	addi	r5,r5,23960
  806274:	0806b841 	jmpi	806b84 <_fwalk>

00806278 <__fp_unlock_all>:
}

void
__fp_unlock_all (void)
{
  (void) _fwalk (_REENT, __fp_unlock);
  806278:	d1200917 	ldw	r4,-32732(gp)
  80627c:	01402034 	movhi	r5,128
  806280:	29576b04 	addi	r5,r5,23980
  806284:	0806b841 	jmpi	806b84 <_fwalk>

00806288 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
  806288:	defffb04 	addi	sp,sp,-20
  80628c:	dcc00315 	stw	r19,12(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
  806290:	04c02074 	movhi	r19,129
{
  806294:	dc800215 	stw	r18,8(sp)
  806298:	dc400115 	stw	r17,4(sp)
  80629c:	dc000015 	stw	r16,0(sp)
  8062a0:	dfc00415 	stw	ra,16(sp)
  8062a4:	2821883a 	mov	r16,r5
  top_size = chunksize(top);
  8062a8:	9cce6c04 	addi	r19,r19,14768
{
  8062ac:	2025883a 	mov	r18,r4
  MALLOC_LOCK;
  8062b0:	08106bc0 	call	8106bc <__malloc_lock>
  top_size = chunksize(top);
  8062b4:	98800217 	ldw	r2,8(r19)
  8062b8:	14400117 	ldw	r17,4(r2)
  8062bc:	00bfff04 	movi	r2,-4
  8062c0:	88a2703a 	and	r17,r17,r2
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
  8062c4:	8c21c83a 	sub	r16,r17,r16
  8062c8:	8403fbc4 	addi	r16,r16,4079
  8062cc:	8020d33a 	srli	r16,r16,12
  8062d0:	843fffc4 	addi	r16,r16,-1
  8062d4:	8020933a 	slli	r16,r16,12

  if (extra < (long)pagesz)  /* Not enough memory to release */
  8062d8:	80840008 	cmpgei	r2,r16,4096
  8062dc:	10000626 	beq	r2,zero,8062f8 <_malloc_trim_r+0x70>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
  8062e0:	000b883a 	mov	r5,zero
  8062e4:	9009883a 	mov	r4,r18
  8062e8:	08099d00 	call	8099d0 <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
  8062ec:	98c00217 	ldw	r3,8(r19)
  8062f0:	1c47883a 	add	r3,r3,r17
  8062f4:	10c00a26 	beq	r2,r3,806320 <_malloc_trim_r+0x98>
    MALLOC_UNLOCK;
  8062f8:	9009883a 	mov	r4,r18
  8062fc:	08106e00 	call	8106e0 <__malloc_unlock>
    return 0;
  806300:	0005883a 	mov	r2,zero
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
  806304:	dfc00417 	ldw	ra,16(sp)
  806308:	dcc00317 	ldw	r19,12(sp)
  80630c:	dc800217 	ldw	r18,8(sp)
  806310:	dc400117 	ldw	r17,4(sp)
  806314:	dc000017 	ldw	r16,0(sp)
  806318:	dec00504 	addi	sp,sp,20
  80631c:	f800283a 	ret
      new_brk = (char*)(MORECORE (-extra));
  806320:	040bc83a 	sub	r5,zero,r16
  806324:	9009883a 	mov	r4,r18
  806328:	08099d00 	call	8099d0 <_sbrk_r>
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
  80632c:	10bfffd8 	cmpnei	r2,r2,-1
  806330:	10000d26 	beq	r2,zero,806368 <_malloc_trim_r+0xe0>
        sbrked_mem -= extra;
  806334:	00802074 	movhi	r2,129
  806338:	109b9017 	ldw	r2,28224(r2)
        set_head(top, (top_size - extra) | PREV_INUSE);
  80633c:	98c00217 	ldw	r3,8(r19)
  806340:	8c23c83a 	sub	r17,r17,r16
  806344:	8c400054 	ori	r17,r17,1
        sbrked_mem -= extra;
  806348:	1421c83a 	sub	r16,r2,r16
        set_head(top, (top_size - extra) | PREV_INUSE);
  80634c:	1c400115 	stw	r17,4(r3)
        sbrked_mem -= extra;
  806350:	00802074 	movhi	r2,129
	MALLOC_UNLOCK;
  806354:	9009883a 	mov	r4,r18
        sbrked_mem -= extra;
  806358:	141b9015 	stw	r16,28224(r2)
	MALLOC_UNLOCK;
  80635c:	08106e00 	call	8106e0 <__malloc_unlock>
        return 1;
  806360:	00800044 	movi	r2,1
  806364:	003fe706 	br	806304 <_malloc_trim_r+0x7c>
        current_brk = (char*)(MORECORE (0));
  806368:	000b883a 	mov	r5,zero
  80636c:	9009883a 	mov	r4,r18
  806370:	08099d00 	call	8099d0 <_sbrk_r>
        top_size = current_brk - (char*)top;
  806374:	99000217 	ldw	r4,8(r19)
  806378:	1107c83a 	sub	r3,r2,r4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
  80637c:	19400410 	cmplti	r5,r3,16
  806380:	283fdd1e 	bne	r5,zero,8062f8 <_malloc_trim_r+0x70>
          sbrked_mem = current_brk - sbrk_base;
  806384:	d1600a17 	ldw	r5,-32728(gp)
          set_head(top, top_size | PREV_INUSE);
  806388:	18c00054 	ori	r3,r3,1
  80638c:	20c00115 	stw	r3,4(r4)
          sbrked_mem = current_brk - sbrk_base;
  806390:	1145c83a 	sub	r2,r2,r5
  806394:	01402074 	movhi	r5,129
  806398:	289b9015 	stw	r2,28224(r5)
          set_head(top, top_size | PREV_INUSE);
  80639c:	003fd606 	br	8062f8 <_malloc_trim_r+0x70>

008063a0 <_free_r>:
  if (mem == 0)                              /* free(0) has no effect */
  8063a0:	28004f26 	beq	r5,zero,8064e0 <_free_r+0x140>
{
  8063a4:	defffd04 	addi	sp,sp,-12
  8063a8:	dc400115 	stw	r17,4(sp)
  8063ac:	dc000015 	stw	r16,0(sp)
  8063b0:	2023883a 	mov	r17,r4
  MALLOC_LOCK;
  8063b4:	2821883a 	mov	r16,r5
{
  8063b8:	dfc00215 	stw	ra,8(sp)
  MALLOC_LOCK;
  8063bc:	08106bc0 	call	8106bc <__malloc_lock>
  hd = p->size;
  8063c0:	81ffff17 	ldw	r7,-4(r16)
  sz = hd & ~PREV_INUSE;
  8063c4:	00bfff84 	movi	r2,-2
  p = mem2chunk(mem);
  8063c8:	80fffe04 	addi	r3,r16,-8
  sz = hd & ~PREV_INUSE;
  8063cc:	3884703a 	and	r2,r7,r2
  if (next == top)                            /* merge with top */
  8063d0:	01002074 	movhi	r4,129
  next = chunk_at_offset(p, sz);
  8063d4:	188d883a 	add	r6,r3,r2
  if (next == top)                            /* merge with top */
  8063d8:	210e6c04 	addi	r4,r4,14768
  nextsz = chunksize(next);
  8063dc:	31400117 	ldw	r5,4(r6)
  if (next == top)                            /* merge with top */
  8063e0:	22000217 	ldw	r8,8(r4)
  nextsz = chunksize(next);
  8063e4:	027fff04 	movi	r9,-4
  8063e8:	2a4a703a 	and	r5,r5,r9
  if (next == top)                            /* merge with top */
  8063ec:	41806426 	beq	r8,r6,806580 <_free_r+0x1e0>
  set_head(next, nextsz);                    /* clear inuse bit */
  8063f0:	31400115 	stw	r5,4(r6)
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8063f4:	39c0004c 	andi	r7,r7,1
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8063f8:	3151883a 	add	r8,r6,r5
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8063fc:	3800281e 	bne	r7,zero,8064a0 <_free_r+0x100>
    prevsz = p->prev_size;
  806400:	82bffe17 	ldw	r10,-8(r16)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806404:	42000117 	ldw	r8,4(r8)
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806408:	01c02074 	movhi	r7,129
    p = chunk_at_offset(p, -prevsz);
  80640c:	1a87c83a 	sub	r3,r3,r10
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806410:	1a400217 	ldw	r9,8(r3)
  806414:	39ce6e04 	addi	r7,r7,14776
    sz += prevsz;
  806418:	1285883a 	add	r2,r2,r10
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  80641c:	4200004c 	andi	r8,r8,1
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806420:	49c04c26 	beq	r9,r7,806554 <_free_r+0x1b4>
      unlink(p, bck, fwd);
  806424:	1a800317 	ldw	r10,12(r3)
  806428:	4a800315 	stw	r10,12(r9)
  80642c:	52400215 	stw	r9,8(r10)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806430:	40006f26 	beq	r8,zero,8065f0 <_free_r+0x250>
  set_head(p, sz | PREV_INUSE);
  806434:	11400054 	ori	r5,r2,1
  806438:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  80643c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  806440:	11408028 	cmpgeui	r5,r2,512
  806444:	28002c1e 	bne	r5,zero,8064f8 <_free_r+0x158>
  806448:	100ad0fa 	srli	r5,r2,3
  80644c:	100cd17a 	srli	r6,r2,5
  806450:	00800044 	movi	r2,1
  806454:	29400044 	addi	r5,r5,1
  806458:	280a90fa 	slli	r5,r5,3
  80645c:	21c00117 	ldw	r7,4(r4)
  806460:	1184983a 	sll	r2,r2,r6
  806464:	214b883a 	add	r5,r4,r5
  806468:	29800017 	ldw	r6,0(r5)
  80646c:	11c4b03a 	or	r2,r2,r7
  806470:	29fffe04 	addi	r7,r5,-8
  806474:	19c00315 	stw	r7,12(r3)
  806478:	19800215 	stw	r6,8(r3)
  80647c:	20800115 	stw	r2,4(r4)
  806480:	28c00015 	stw	r3,0(r5)
  806484:	30c00315 	stw	r3,12(r6)
    MALLOC_UNLOCK;
  806488:	8809883a 	mov	r4,r17
}
  80648c:	dfc00217 	ldw	ra,8(sp)
  806490:	dc400117 	ldw	r17,4(sp)
  806494:	dc000017 	ldw	r16,0(sp)
  806498:	dec00304 	addi	sp,sp,12
    MALLOC_UNLOCK;
  80649c:	08106e01 	jmpi	8106e0 <__malloc_unlock>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8064a0:	41c00117 	ldw	r7,4(r8)
  8064a4:	39c0004c 	andi	r7,r7,1
  8064a8:	38000e1e 	bne	r7,zero,8064e4 <_free_r+0x144>
    sz += nextsz;
  8064ac:	01c02074 	movhi	r7,129
  8064b0:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  8064b4:	39ce6e04 	addi	r7,r7,14776
  8064b8:	31400217 	ldw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  8064bc:	12400054 	ori	r9,r2,1
  set_foot(p, sz);
  8064c0:	1891883a 	add	r8,r3,r2
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  8064c4:	29c05026 	beq	r5,r7,806608 <_free_r+0x268>
      unlink(next, bck, fwd);
  8064c8:	31800317 	ldw	r6,12(r6)
  8064cc:	29800315 	stw	r6,12(r5)
  8064d0:	31400215 	stw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  8064d4:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  8064d8:	40800015 	stw	r2,0(r8)
  if (!islr)
  8064dc:	003fd806 	br	806440 <_free_r+0xa0>
  8064e0:	f800283a 	ret
  set_head(p, sz | PREV_INUSE);
  8064e4:	11400054 	ori	r5,r2,1
  8064e8:	817fff15 	stw	r5,-4(r16)
  set_foot(p, sz);
  8064ec:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  8064f0:	11408028 	cmpgeui	r5,r2,512
  8064f4:	283fd426 	beq	r5,zero,806448 <_free_r+0xa8>
  8064f8:	100ad27a 	srli	r5,r2,9
  8064fc:	29800168 	cmpgeui	r6,r5,5
  806500:	3000321e 	bne	r6,zero,8065cc <_free_r+0x22c>
  806504:	100ad1ba 	srli	r5,r2,6
  806508:	29800e44 	addi	r6,r5,57
  80650c:	300c90fa 	slli	r6,r6,3
  806510:	29c00e04 	addi	r7,r5,56
  806514:	218d883a 	add	r6,r4,r6
  806518:	31400017 	ldw	r5,0(r6)
  80651c:	31bffe04 	addi	r6,r6,-8
  806520:	31404026 	beq	r6,r5,806624 <_free_r+0x284>
  806524:	01ffff04 	movi	r7,-4
  806528:	29000117 	ldw	r4,4(r5)
  80652c:	21c8703a 	and	r4,r4,r7
  806530:	1100022e 	bgeu	r2,r4,80653c <_free_r+0x19c>
  806534:	29400217 	ldw	r5,8(r5)
  806538:	317ffb1e 	bne	r6,r5,806528 <_free_r+0x188>
  80653c:	29800317 	ldw	r6,12(r5)
  806540:	19800315 	stw	r6,12(r3)
  806544:	19400215 	stw	r5,8(r3)
  806548:	30c00215 	stw	r3,8(r6)
  80654c:	28c00315 	stw	r3,12(r5)
  806550:	003fcd06 	br	806488 <_free_r+0xe8>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806554:	40004b1e 	bne	r8,zero,806684 <_free_r+0x2e4>
      unlink(next, bck, fwd);
  806558:	31000317 	ldw	r4,12(r6)
  80655c:	31800217 	ldw	r6,8(r6)
    sz += nextsz;
  806560:	2885883a 	add	r2,r5,r2
  set_head(p, sz | PREV_INUSE);
  806564:	11400054 	ori	r5,r2,1
      unlink(next, bck, fwd);
  806568:	31000315 	stw	r4,12(r6)
  80656c:	21800215 	stw	r6,8(r4)
  set_head(p, sz | PREV_INUSE);
  806570:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  806574:	1887883a 	add	r3,r3,r2
  806578:	18800015 	stw	r2,0(r3)
  if (!islr)
  80657c:	003fc206 	br	806488 <_free_r+0xe8>
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  806580:	39c0004c 	andi	r7,r7,1
    sz += nextsz;
  806584:	1145883a 	add	r2,r2,r5
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  806588:	3800071e 	bne	r7,zero,8065a8 <_free_r+0x208>
      prevsz = p->prev_size;
  80658c:	81fffe17 	ldw	r7,-8(r16)
      p = chunk_at_offset(p, -prevsz);
  806590:	19c7c83a 	sub	r3,r3,r7
      unlink(p, bck, fwd);
  806594:	19400317 	ldw	r5,12(r3)
  806598:	19800217 	ldw	r6,8(r3)
      sz += prevsz;
  80659c:	11c5883a 	add	r2,r2,r7
      unlink(p, bck, fwd);
  8065a0:	31400315 	stw	r5,12(r6)
  8065a4:	29800215 	stw	r6,8(r5)
    set_head(p, sz | PREV_INUSE);
  8065a8:	11800054 	ori	r6,r2,1
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  8065ac:	d1600b17 	ldw	r5,-32724(gp)
    set_head(p, sz | PREV_INUSE);
  8065b0:	19800115 	stw	r6,4(r3)
    top = p;
  8065b4:	20c00215 	stw	r3,8(r4)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  8065b8:	117fb336 	bltu	r2,r5,806488 <_free_r+0xe8>
      malloc_trim(RCALL top_pad); 
  8065bc:	d1675717 	ldw	r5,-25252(gp)
  8065c0:	8809883a 	mov	r4,r17
  8065c4:	08062880 	call	806288 <_malloc_trim_r>
  8065c8:	003faf06 	br	806488 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  8065cc:	29800568 	cmpgeui	r6,r5,21
  8065d0:	30000926 	beq	r6,zero,8065f8 <_free_r+0x258>
  8065d4:	29801568 	cmpgeui	r6,r5,85
  8065d8:	3000191e 	bne	r6,zero,806640 <_free_r+0x2a0>
  8065dc:	100ad33a 	srli	r5,r2,12
  8065e0:	29801bc4 	addi	r6,r5,111
  8065e4:	300c90fa 	slli	r6,r6,3
  8065e8:	29c01b84 	addi	r7,r5,110
  8065ec:	003fc906 	br	806514 <_free_r+0x174>
    sz += nextsz;
  8065f0:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  8065f4:	003fb006 	br	8064b8 <_free_r+0x118>
    frontlink(p, sz, idx, bck, fwd);  
  8065f8:	29801704 	addi	r6,r5,92
  8065fc:	300c90fa 	slli	r6,r6,3
  806600:	29c016c4 	addi	r7,r5,91
  806604:	003fc306 	br	806514 <_free_r+0x174>
      link_last_remainder(p);   
  806608:	20c00515 	stw	r3,20(r4)
  80660c:	20c00415 	stw	r3,16(r4)
  806610:	19c00315 	stw	r7,12(r3)
  806614:	19c00215 	stw	r7,8(r3)
  set_head(p, sz | PREV_INUSE);
  806618:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  80661c:	40800015 	stw	r2,0(r8)
  if (!islr)
  806620:	003f9906 	br	806488 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  806624:	380fd0ba 	srai	r7,r7,2
  806628:	00800044 	movi	r2,1
  80662c:	22000117 	ldw	r8,4(r4)
  806630:	11ce983a 	sll	r7,r2,r7
  806634:	3a0eb03a 	or	r7,r7,r8
  806638:	21c00115 	stw	r7,4(r4)
  80663c:	003fc006 	br	806540 <_free_r+0x1a0>
  806640:	29805568 	cmpgeui	r6,r5,341
  806644:	3000051e 	bne	r6,zero,80665c <_free_r+0x2bc>
  806648:	100ad3fa 	srli	r5,r2,15
  80664c:	29801e04 	addi	r6,r5,120
  806650:	300c90fa 	slli	r6,r6,3
  806654:	29c01dc4 	addi	r7,r5,119
  806658:	003fae06 	br	806514 <_free_r+0x174>
  80665c:	29415568 	cmpgeui	r5,r5,1365
  806660:	2800051e 	bne	r5,zero,806678 <_free_r+0x2d8>
  806664:	100ad4ba 	srli	r5,r2,18
  806668:	29801f44 	addi	r6,r5,125
  80666c:	300c90fa 	slli	r6,r6,3
  806670:	29c01f04 	addi	r7,r5,124
  806674:	003fa706 	br	806514 <_free_r+0x174>
  806678:	0180fe04 	movi	r6,1016
  80667c:	01c01f84 	movi	r7,126
  806680:	003fa406 	br	806514 <_free_r+0x174>
  set_head(p, sz | PREV_INUSE);
  806684:	11000054 	ori	r4,r2,1
  806688:	19000115 	stw	r4,4(r3)
  set_foot(p, sz);
  80668c:	30800015 	stw	r2,0(r6)
  if (!islr)
  806690:	003f7d06 	br	806488 <_free_r+0xe8>

00806694 <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
  806694:	30800217 	ldw	r2,8(r6)
  806698:	1000a326 	beq	r2,zero,806928 <__sfvwrite_r+0x294>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
  80669c:	29c0030b 	ldhu	r7,12(r5)
{
  8066a0:	defff304 	addi	sp,sp,-52
  8066a4:	dd800915 	stw	r22,36(sp)
  8066a8:	dd400815 	stw	r21,32(sp)
  8066ac:	dc000315 	stw	r16,12(sp)
  8066b0:	dfc00c15 	stw	ra,48(sp)
  8066b4:	df000b15 	stw	fp,44(sp)
  8066b8:	ddc00a15 	stw	r23,40(sp)
  8066bc:	dd000715 	stw	r20,28(sp)
  8066c0:	dcc00615 	stw	r19,24(sp)
  8066c4:	dc800515 	stw	r18,20(sp)
  8066c8:	dc400415 	stw	r17,16(sp)
  if (cantwrite (ptr, fp))
  8066cc:	3880020c 	andi	r2,r7,8
  8066d0:	302d883a 	mov	r22,r6
  8066d4:	202b883a 	mov	r21,r4
  8066d8:	2821883a 	mov	r16,r5
  8066dc:	10002226 	beq	r2,zero,806768 <__sfvwrite_r+0xd4>
  8066e0:	28800417 	ldw	r2,16(r5)
  8066e4:	10002026 	beq	r2,zero,806768 <__sfvwrite_r+0xd4>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
  8066e8:	3880008c 	andi	r2,r7,2
  iov = uio->uio_iov;
  8066ec:	b4400017 	ldw	r17,0(r22)
  if (fp->_flags & __SNBF)
  8066f0:	10002526 	beq	r2,zero,806788 <__sfvwrite_r+0xf4>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
  8066f4:	80800917 	ldw	r2,36(r16)
  8066f8:	81400717 	ldw	r5,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  8066fc:	05200034 	movhi	r20,32768
  register const char *p = NULL;
  806700:	0027883a 	mov	r19,zero
  len = 0;
  806704:	0025883a 	mov	r18,zero
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  806708:	a53f0004 	addi	r20,r20,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
  80670c:	980d883a 	mov	r6,r19
  806710:	a809883a 	mov	r4,r21
	  GETIOV (;);
  806714:	90001026 	beq	r18,zero,806758 <__sfvwrite_r+0xc4>
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  806718:	900f883a 	mov	r7,r18
  80671c:	a480012e 	bgeu	r20,r18,806724 <__sfvwrite_r+0x90>
  806720:	a00f883a 	mov	r7,r20
	  w = fp->_write (ptr, fp->_cookie, p,
  806724:	103ee83a 	callr	r2
	  if (w <= 0)
  806728:	00807a0e 	bge	zero,r2,806914 <__sfvwrite_r+0x280>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
  80672c:	b1000217 	ldw	r4,8(r22)
	  p += w;
  806730:	98a7883a 	add	r19,r19,r2
	  len -= w;
  806734:	90a5c83a 	sub	r18,r18,r2
      while ((uio->uio_resid -= w) != 0);
  806738:	2085c83a 	sub	r2,r4,r2
  80673c:	b0800215 	stw	r2,8(r22)
  806740:	10006326 	beq	r2,zero,8068d0 <__sfvwrite_r+0x23c>
	  w = fp->_write (ptr, fp->_cookie, p,
  806744:	80800917 	ldw	r2,36(r16)
  806748:	81400717 	ldw	r5,28(r16)
  80674c:	980d883a 	mov	r6,r19
  806750:	a809883a 	mov	r4,r21
	  GETIOV (;);
  806754:	903ff01e 	bne	r18,zero,806718 <__sfvwrite_r+0x84>
  806758:	8cc00017 	ldw	r19,0(r17)
  80675c:	8c800117 	ldw	r18,4(r17)
  806760:	8c400204 	addi	r17,r17,8
  806764:	003fe906 	br	80670c <__sfvwrite_r+0x78>
  if (cantwrite (ptr, fp))
  806768:	800b883a 	mov	r5,r16
  80676c:	a809883a 	mov	r4,r21
  806770:	0803f380 	call	803f38 <__swsetup_r>
  806774:	1001011e 	bne	r2,zero,806b7c <__sfvwrite_r+0x4e8>
  if (fp->_flags & __SNBF)
  806778:	81c0030b 	ldhu	r7,12(r16)
  iov = uio->uio_iov;
  80677c:	b4400017 	ldw	r17,0(r22)
  if (fp->_flags & __SNBF)
  806780:	3880008c 	andi	r2,r7,2
  806784:	103fdb1e 	bne	r2,zero,8066f4 <__sfvwrite_r+0x60>
    }
  else if ((fp->_flags & __SLBF) == 0)
  806788:	3880004c 	andi	r2,r7,1
	      nl = memchr ((void *) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
  80678c:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  806790:	82000017 	ldw	r8,0(r16)
  else if ((fp->_flags & __SLBF) == 0)
  806794:	1000661e 	bne	r2,zero,806930 <__sfvwrite_r+0x29c>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806798:	00a00034 	movhi	r2,32768
  80679c:	10bfff84 	addi	r2,r2,-2
  8067a0:	00e00034 	movhi	r3,32768
  8067a4:	d8800015 	stw	r2,0(sp)
  8067a8:	18bfffc4 	addi	r2,r3,-1
  register const char *p = NULL;
  8067ac:	0039883a 	mov	fp,zero
  len = 0;
  8067b0:	0027883a 	mov	r19,zero
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  8067b4:	d8800215 	stw	r2,8(sp)
	  GETIOV (;);
  8067b8:	98004126 	beq	r19,zero,8068c0 <__sfvwrite_r+0x22c>
	  if (fp->_flags & __SSTR)
  8067bc:	3880800c 	andi	r2,r7,512
  8067c0:	10009826 	beq	r2,zero,806a24 <__sfvwrite_r+0x390>
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
  8067c4:	902f883a 	mov	r23,r18
  8067c8:	9c80c336 	bltu	r19,r18,806ad8 <__sfvwrite_r+0x444>
  8067cc:	3881200c 	andi	r2,r7,1152
  8067d0:	10002626 	beq	r2,zero,80686c <__sfvwrite_r+0x1d8>
		  int newsize = fp->_bf._size * 3 / 2;
  8067d4:	81800517 	ldw	r6,20(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  8067d8:	81400417 	ldw	r5,16(r16)
		  if (newsize < curpos + len + 1)
  8067dc:	98800044 	addi	r2,r19,1
		  int newsize = fp->_bf._size * 3 / 2;
  8067e0:	3189883a 	add	r4,r6,r6
  8067e4:	2189883a 	add	r4,r4,r6
  8067e8:	2028d7fa 	srli	r20,r4,31
		  int curpos = (fp->_p - fp->_bf._base);
  8067ec:	4165c83a 	sub	r18,r8,r5
		  if (newsize < curpos + len + 1)
  8067f0:	1485883a 	add	r2,r2,r18
		  int newsize = fp->_bf._size * 3 / 2;
  8067f4:	a109883a 	add	r4,r20,r4
  8067f8:	2029d07a 	srai	r20,r4,1
		  if (newsize < curpos + len + 1)
  8067fc:	a00d883a 	mov	r6,r20
  806800:	a080022e 	bgeu	r20,r2,80680c <__sfvwrite_r+0x178>
		    newsize = curpos + len + 1;
  806804:	1029883a 	mov	r20,r2
  806808:	100d883a 	mov	r6,r2
		  if (fp->_flags & __SOPT)
  80680c:	39c1000c 	andi	r7,r7,1024
  806810:	3800ca26 	beq	r7,zero,806b3c <__sfvwrite_r+0x4a8>
		      str = (unsigned char *)_malloc_r (ptr, newsize);
  806814:	a809883a 	mov	r4,r21
  806818:	300b883a 	mov	r5,r6
  80681c:	080701c0 	call	80701c <_malloc_r>
  806820:	1009883a 	mov	r4,r2
		      if (!str)
  806824:	1000d126 	beq	r2,zero,806b6c <__sfvwrite_r+0x4d8>
		      memcpy (str, fp->_bf._base, curpos);
  806828:	81400417 	ldw	r5,16(r16)
  80682c:	900d883a 	mov	r6,r18
  806830:	08078fc0 	call	8078fc <memcpy>
  806834:	1009883a 	mov	r4,r2
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
  806838:	8080030b 	ldhu	r2,12(r16)
  80683c:	00fedfc4 	movi	r3,-1153
  806840:	10c4703a 	and	r2,r2,r3
  806844:	10802014 	ori	r2,r2,128
  806848:	8080030d 	sth	r2,12(r16)
		  fp->_p = str + curpos;
  80684c:	2491883a 	add	r8,r4,r18
		  fp->_w = newsize - curpos;
  806850:	a485c83a 	sub	r2,r20,r18
		  fp->_bf._base = str;
  806854:	81000415 	stw	r4,16(r16)
		  fp->_p = str + curpos;
  806858:	82000015 	stw	r8,0(r16)
		  fp->_bf._size = newsize;
  80685c:	85000515 	stw	r20,20(r16)
		  w = len;
  806860:	9825883a 	mov	r18,r19
		  fp->_w = newsize - curpos;
  806864:	80800215 	stw	r2,8(r16)
	      if (len < w)
  806868:	982f883a 	mov	r23,r19
	      COPY (w);		/* copy MIN(fp->_w,len), */
  80686c:	4009883a 	mov	r4,r8
  806870:	b80d883a 	mov	r6,r23
  806874:	e00b883a 	mov	r5,fp
  806878:	0807a880 	call	807a88 <memmove>
	      fp->_w -= w;
  80687c:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  806880:	80800017 	ldw	r2,0(r16)
  806884:	9829883a 	mov	r20,r19
	      fp->_w -= w;
  806888:	24a5c83a 	sub	r18,r4,r18
	      fp->_p += w;
  80688c:	15c5883a 	add	r2,r2,r23
	      fp->_w -= w;
  806890:	84800215 	stw	r18,8(r16)
	      fp->_p += w;
  806894:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
  806898:	0027883a 	mov	r19,zero
      while ((uio->uio_resid -= w) != 0);
  80689c:	b0800217 	ldw	r2,8(r22)
	  p += w;
  8068a0:	e539883a 	add	fp,fp,r20
      while ((uio->uio_resid -= w) != 0);
  8068a4:	1529c83a 	sub	r20,r2,r20
  8068a8:	b5000215 	stw	r20,8(r22)
  8068ac:	a0000826 	beq	r20,zero,8068d0 <__sfvwrite_r+0x23c>
	  if (fp->_flags & __SSTR)
  8068b0:	81c0030b 	ldhu	r7,12(r16)
	  w = fp->_w;
  8068b4:	84800217 	ldw	r18,8(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  8068b8:	82000017 	ldw	r8,0(r16)
	  GETIOV (;);
  8068bc:	983fbf1e 	bne	r19,zero,8067bc <__sfvwrite_r+0x128>
  8068c0:	8f000017 	ldw	fp,0(r17)
  8068c4:	8cc00117 	ldw	r19,4(r17)
  8068c8:	8c400204 	addi	r17,r17,8
  8068cc:	003fba06 	br	8067b8 <__sfvwrite_r+0x124>
    return 0;
  8068d0:	0005883a 	mov	r2,zero
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
  8068d4:	dfc00c17 	ldw	ra,48(sp)
  8068d8:	df000b17 	ldw	fp,44(sp)
  8068dc:	ddc00a17 	ldw	r23,40(sp)
  8068e0:	dd800917 	ldw	r22,36(sp)
  8068e4:	dd400817 	ldw	r21,32(sp)
  8068e8:	dd000717 	ldw	r20,28(sp)
  8068ec:	dcc00617 	ldw	r19,24(sp)
  8068f0:	dc800517 	ldw	r18,20(sp)
  8068f4:	dc400417 	ldw	r17,16(sp)
  8068f8:	dc000317 	ldw	r16,12(sp)
  8068fc:	dec00d04 	addi	sp,sp,52
  806900:	f800283a 	ret
	      if (_fflush_r (ptr, fp))
  806904:	800b883a 	mov	r5,r16
  806908:	a809883a 	mov	r4,r21
  80690c:	0805cbc0 	call	805cbc <_fflush_r>
  806910:	10002126 	beq	r2,zero,806998 <__sfvwrite_r+0x304>
  fp->_flags |= __SERR;
  806914:	8080030b 	ldhu	r2,12(r16)
  806918:	10801014 	ori	r2,r2,64
  80691c:	8080030d 	sth	r2,12(r16)
  return EOF;
  806920:	00bfffc4 	movi	r2,-1
  806924:	003feb06 	br	8068d4 <__sfvwrite_r+0x240>
    return 0;
  806928:	0005883a 	mov	r2,zero
}
  80692c:	f800283a 	ret
  len = 0;
  806930:	0027883a 	mov	r19,zero
      nldist = 0;
  806934:	0029883a 	mov	r20,zero
      nlknown = 0;
  806938:	0005883a 	mov	r2,zero
  register const char *p = NULL;
  80693c:	002f883a 	mov	r23,zero
	  GETIOV (nlknown = 0);
  806940:	98001e26 	beq	r19,zero,8069bc <__sfvwrite_r+0x328>
	  if (!nlknown)
  806944:	10002126 	beq	r2,zero,8069cc <__sfvwrite_r+0x338>
	  s = MIN (len, nldist);
  806948:	a005883a 	mov	r2,r20
  80694c:	9839883a 	mov	fp,r19
  806950:	14c0012e 	bgeu	r2,r19,806958 <__sfvwrite_r+0x2c4>
  806954:	1039883a 	mov	fp,r2
	  if (fp->_p > fp->_bf._base && s > w)
  806958:	80800417 	ldw	r2,16(r16)
	  w = fp->_w + fp->_bf._size;
  80695c:	81c00517 	ldw	r7,20(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  806960:	1200022e 	bgeu	r2,r8,80696c <__sfvwrite_r+0x2d8>
	  w = fp->_w + fp->_bf._size;
  806964:	3ca5883a 	add	r18,r7,r18
	  if (fp->_p > fp->_bf._base && s > w)
  806968:	97002216 	blt	r18,fp,8069f4 <__sfvwrite_r+0x360>
	  else if (s >= (w = fp->_bf._size))
  80696c:	e1c05d16 	blt	fp,r7,806ae4 <__sfvwrite_r+0x450>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  806970:	80800917 	ldw	r2,36(r16)
  806974:	81400717 	ldw	r5,28(r16)
  806978:	b80d883a 	mov	r6,r23
  80697c:	a809883a 	mov	r4,r21
  806980:	103ee83a 	callr	r2
  806984:	1025883a 	mov	r18,r2
	      if (w <= 0)
  806988:	00bfe20e 	bge	zero,r2,806914 <__sfvwrite_r+0x280>
	  if ((nldist -= w) == 0)
  80698c:	a4a9c83a 	sub	r20,r20,r18
  806990:	a03fdc26 	beq	r20,zero,806904 <__sfvwrite_r+0x270>
  806994:	00800044 	movi	r2,1
      while ((uio->uio_resid -= w) != 0);
  806998:	b1800217 	ldw	r6,8(r22)
	  p += w;
  80699c:	bcaf883a 	add	r23,r23,r18
	  len -= w;
  8069a0:	9ca7c83a 	sub	r19,r19,r18
      while ((uio->uio_resid -= w) != 0);
  8069a4:	34a5c83a 	sub	r18,r6,r18
  8069a8:	b4800215 	stw	r18,8(r22)
  8069ac:	903fc826 	beq	r18,zero,8068d0 <__sfvwrite_r+0x23c>
	  w = fp->_w + fp->_bf._size;
  8069b0:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  8069b4:	82000017 	ldw	r8,0(r16)
	  GETIOV (nlknown = 0);
  8069b8:	983fe21e 	bne	r19,zero,806944 <__sfvwrite_r+0x2b0>
  8069bc:	8cc00117 	ldw	r19,4(r17)
  8069c0:	8dc00017 	ldw	r23,0(r17)
  8069c4:	8c400204 	addi	r17,r17,8
  8069c8:	983ffc26 	beq	r19,zero,8069bc <__sfvwrite_r+0x328>
	      nl = memchr ((void *) p, '\n', len);
  8069cc:	980d883a 	mov	r6,r19
  8069d0:	01400284 	movi	r5,10
  8069d4:	b809883a 	mov	r4,r23
  8069d8:	da000015 	stw	r8,0(sp)
  8069dc:	080782c0 	call	80782c <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
  8069e0:	da000017 	ldw	r8,0(sp)
  8069e4:	10005226 	beq	r2,zero,806b30 <__sfvwrite_r+0x49c>
  8069e8:	10800044 	addi	r2,r2,1
  8069ec:	15e9c83a 	sub	r20,r2,r23
  8069f0:	003fd506 	br	806948 <__sfvwrite_r+0x2b4>
	      COPY (w);
  8069f4:	b80b883a 	mov	r5,r23
  8069f8:	4009883a 	mov	r4,r8
  8069fc:	900d883a 	mov	r6,r18
  806a00:	0807a880 	call	807a88 <memmove>
	      fp->_p += w;
  806a04:	80800017 	ldw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  806a08:	800b883a 	mov	r5,r16
  806a0c:	a809883a 	mov	r4,r21
	      fp->_p += w;
  806a10:	1485883a 	add	r2,r2,r18
  806a14:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  806a18:	0805cbc0 	call	805cbc <_fflush_r>
  806a1c:	103fdb26 	beq	r2,zero,80698c <__sfvwrite_r+0x2f8>
  806a20:	003fbc06 	br	806914 <__sfvwrite_r+0x280>
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
  806a24:	80800417 	ldw	r2,16(r16)
  806a28:	12001836 	bltu	r2,r8,806a8c <__sfvwrite_r+0x3f8>
  806a2c:	81400517 	ldw	r5,20(r16)
  806a30:	99401636 	bltu	r19,r5,806a8c <__sfvwrite_r+0x3f8>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806a34:	d8800017 	ldw	r2,0(sp)
  806a38:	14c03b2e 	bgeu	r2,r19,806b28 <__sfvwrite_r+0x494>
  806a3c:	d9000217 	ldw	r4,8(sp)
  806a40:	2144b03a 	or	r2,r4,r5
  806a44:	10800428 	cmpgeui	r2,r2,16
  806a48:	1000321e 	bne	r2,zero,806b14 <__sfvwrite_r+0x480>
  806a4c:	2008913a 	slli	r4,r4,4
  806a50:	00802074 	movhi	r2,129
  806a54:	2148b03a 	or	r4,r4,r5
  806a58:	2085883a 	add	r2,r4,r2
  806a5c:	110f6e03 	ldbu	r4,15800(r2)
  806a60:	080d8900 	call	80d890 <__mulsi3>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  806a64:	82000917 	ldw	r8,36(r16)
  806a68:	81400717 	ldw	r5,28(r16)
  806a6c:	100f883a 	mov	r7,r2
  806a70:	e00d883a 	mov	r6,fp
  806a74:	a809883a 	mov	r4,r21
  806a78:	403ee83a 	callr	r8
  806a7c:	1029883a 	mov	r20,r2
	      if (w <= 0)
  806a80:	00bfa40e 	bge	zero,r2,806914 <__sfvwrite_r+0x280>
	  len -= w;
  806a84:	9d27c83a 	sub	r19,r19,r20
  806a88:	003f8406 	br	80689c <__sfvwrite_r+0x208>
	      w = MIN (len, w);
  806a8c:	9029883a 	mov	r20,r18
  806a90:	9c80012e 	bgeu	r19,r18,806a98 <__sfvwrite_r+0x404>
  806a94:	9829883a 	mov	r20,r19
	      COPY (w);
  806a98:	4009883a 	mov	r4,r8
  806a9c:	a00d883a 	mov	r6,r20
  806aa0:	e00b883a 	mov	r5,fp
  806aa4:	0807a880 	call	807a88 <memmove>
	      fp->_w -= w;
  806aa8:	80800217 	ldw	r2,8(r16)
	      fp->_p += w;
  806aac:	81000017 	ldw	r4,0(r16)
	      fp->_w -= w;
  806ab0:	1505c83a 	sub	r2,r2,r20
	      fp->_p += w;
  806ab4:	2509883a 	add	r4,r4,r20
	      fp->_w -= w;
  806ab8:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
  806abc:	81000015 	stw	r4,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
  806ac0:	103ff01e 	bne	r2,zero,806a84 <__sfvwrite_r+0x3f0>
  806ac4:	800b883a 	mov	r5,r16
  806ac8:	a809883a 	mov	r4,r21
  806acc:	0805cbc0 	call	805cbc <_fflush_r>
  806ad0:	103fec26 	beq	r2,zero,806a84 <__sfvwrite_r+0x3f0>
  806ad4:	003f8f06 	br	806914 <__sfvwrite_r+0x280>
		w = len;
  806ad8:	9825883a 	mov	r18,r19
  806adc:	982f883a 	mov	r23,r19
  806ae0:	003f6206 	br	80686c <__sfvwrite_r+0x1d8>
	      COPY (w);
  806ae4:	4009883a 	mov	r4,r8
  806ae8:	e00d883a 	mov	r6,fp
  806aec:	b80b883a 	mov	r5,r23
  806af0:	0807a880 	call	807a88 <memmove>
	      fp->_w -= w;
  806af4:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  806af8:	80800017 	ldw	r2,0(r16)
  806afc:	e025883a 	mov	r18,fp
	      fp->_w -= w;
  806b00:	2709c83a 	sub	r4,r4,fp
	      fp->_p += w;
  806b04:	1705883a 	add	r2,r2,fp
	      fp->_w -= w;
  806b08:	81000215 	stw	r4,8(r16)
	      fp->_p += w;
  806b0c:	80800015 	stw	r2,0(r16)
  806b10:	003f9e06 	br	80698c <__sfvwrite_r+0x2f8>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806b14:	d9400115 	stw	r5,4(sp)
  806b18:	080d6dc0 	call	80d6dc <__divsi3>
  806b1c:	d9400117 	ldw	r5,4(sp)
  806b20:	1009883a 	mov	r4,r2
  806b24:	003fce06 	br	806a60 <__sfvwrite_r+0x3cc>
  806b28:	9809883a 	mov	r4,r19
  806b2c:	003fc406 	br	806a40 <__sfvwrite_r+0x3ac>
	      nldist = nl ? nl + 1 - p : len + 1;
  806b30:	98800044 	addi	r2,r19,1
  806b34:	1029883a 	mov	r20,r2
  806b38:	003f8406 	br	80694c <__sfvwrite_r+0x2b8>
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
  806b3c:	a809883a 	mov	r4,r21
  806b40:	080946c0 	call	80946c <_realloc_r>
  806b44:	1009883a 	mov	r4,r2
		      if (!str)
  806b48:	103f401e 	bne	r2,zero,80684c <__sfvwrite_r+0x1b8>
			  _free_r (ptr, fp->_bf._base);
  806b4c:	81400417 	ldw	r5,16(r16)
  806b50:	a809883a 	mov	r4,r21
  806b54:	08063a00 	call	8063a0 <_free_r>
			  fp->_flags &=  ~__SMBF;
  806b58:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  806b5c:	00c00304 	movi	r3,12
  806b60:	a8c00015 	stw	r3,0(r21)
			  fp->_flags &=  ~__SMBF;
  806b64:	10bfdfcc 	andi	r2,r2,65407
			  goto err;
  806b68:	003f6b06 	br	806918 <__sfvwrite_r+0x284>
			  ptr->_errno = ENOMEM;
  806b6c:	00c00304 	movi	r3,12
  fp->_flags |= __SERR;
  806b70:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  806b74:	a8c00015 	stw	r3,0(r21)
			  goto err;
  806b78:	003f6706 	br	806918 <__sfvwrite_r+0x284>
    return EOF;
  806b7c:	00bfffc4 	movi	r2,-1
  806b80:	003f5406 	br	8068d4 <__sfvwrite_r+0x240>

00806b84 <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
  806b84:	defffa04 	addi	sp,sp,-24
  806b88:	dd000415 	stw	r20,16(sp)
  806b8c:	dcc00315 	stw	r19,12(sp)
  806b90:	dc800215 	stw	r18,8(sp)
  806b94:	dfc00515 	stw	ra,20(sp)
  806b98:	dc400115 	stw	r17,4(sp)
  806b9c:	dc000015 	stw	r16,0(sp)
  806ba0:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  806ba4:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  806ba8:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806bac:	94400117 	ldw	r17,4(r18)
  806bb0:	94000217 	ldw	r16,8(r18)
  806bb4:	8c7fffc4 	addi	r17,r17,-1
  806bb8:	88000d16 	blt	r17,zero,806bf0 <_fwalk+0x6c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806bbc:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806bc0:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806bc4:	108000b0 	cmpltui	r2,r2,2
  806bc8:	1000061e 	bne	r2,zero,806be4 <_fwalk+0x60>
  806bcc:	8080038f 	ldh	r2,14(r16)
	ret |= (*function) (fp);
  806bd0:	8009883a 	mov	r4,r16
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806bd4:	10bfffe0 	cmpeqi	r2,r2,-1
  806bd8:	1000021e 	bne	r2,zero,806be4 <_fwalk+0x60>
	ret |= (*function) (fp);
  806bdc:	983ee83a 	callr	r19
  806be0:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806be4:	88bfffd8 	cmpnei	r2,r17,-1
  806be8:	84001a04 	addi	r16,r16,104
  806bec:	103ff31e 	bne	r2,zero,806bbc <_fwalk+0x38>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  806bf0:	94800017 	ldw	r18,0(r18)
  806bf4:	903fed1e 	bne	r18,zero,806bac <_fwalk+0x28>

  return ret;
}
  806bf8:	a005883a 	mov	r2,r20
  806bfc:	dfc00517 	ldw	ra,20(sp)
  806c00:	dd000417 	ldw	r20,16(sp)
  806c04:	dcc00317 	ldw	r19,12(sp)
  806c08:	dc800217 	ldw	r18,8(sp)
  806c0c:	dc400117 	ldw	r17,4(sp)
  806c10:	dc000017 	ldw	r16,0(sp)
  806c14:	dec00604 	addi	sp,sp,24
  806c18:	f800283a 	ret

00806c1c <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
  806c1c:	defff904 	addi	sp,sp,-28
  806c20:	dd400515 	stw	r21,20(sp)
  806c24:	dd000415 	stw	r20,16(sp)
  806c28:	dcc00315 	stw	r19,12(sp)
  806c2c:	dc800215 	stw	r18,8(sp)
  806c30:	dfc00615 	stw	ra,24(sp)
  806c34:	dc400115 	stw	r17,4(sp)
  806c38:	dc000015 	stw	r16,0(sp)
  806c3c:	202b883a 	mov	r21,r4
  806c40:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  806c44:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  806c48:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806c4c:	94400117 	ldw	r17,4(r18)
  806c50:	94000217 	ldw	r16,8(r18)
  806c54:	8c7fffc4 	addi	r17,r17,-1
  806c58:	88000e16 	blt	r17,zero,806c94 <_fwalk_reent+0x78>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806c5c:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806c60:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806c64:	108000b0 	cmpltui	r2,r2,2
  806c68:	1000071e 	bne	r2,zero,806c88 <_fwalk_reent+0x6c>
  806c6c:	8080038f 	ldh	r2,14(r16)
	ret |= (*reent_function) (ptr, fp);
  806c70:	800b883a 	mov	r5,r16
  806c74:	a809883a 	mov	r4,r21
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  806c78:	10bfffe0 	cmpeqi	r2,r2,-1
  806c7c:	1000021e 	bne	r2,zero,806c88 <_fwalk_reent+0x6c>
	ret |= (*reent_function) (ptr, fp);
  806c80:	983ee83a 	callr	r19
  806c84:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806c88:	88bfffd8 	cmpnei	r2,r17,-1
  806c8c:	84001a04 	addi	r16,r16,104
  806c90:	103ff21e 	bne	r2,zero,806c5c <_fwalk_reent+0x40>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  806c94:	94800017 	ldw	r18,0(r18)
  806c98:	903fec1e 	bne	r18,zero,806c4c <_fwalk_reent+0x30>

  return ret;
}
  806c9c:	a005883a 	mov	r2,r20
  806ca0:	dfc00617 	ldw	ra,24(sp)
  806ca4:	dd400517 	ldw	r21,20(sp)
  806ca8:	dd000417 	ldw	r20,16(sp)
  806cac:	dcc00317 	ldw	r19,12(sp)
  806cb0:	dc800217 	ldw	r18,8(sp)
  806cb4:	dc400117 	ldw	r17,4(sp)
  806cb8:	dc000017 	ldw	r16,0(sp)
  806cbc:	dec00704 	addi	sp,sp,28
  806cc0:	f800283a 	ret

00806cc4 <__localeconv_l>:
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
}
  806cc4:	20803c04 	addi	r2,r4,240
  806cc8:	f800283a 	ret

00806ccc <_localeconv_r>:
{
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
}
  806ccc:	00802074 	movhi	r2,129
  806cd0:	108e4d04 	addi	r2,r2,14644
  806cd4:	f800283a 	ret

00806cd8 <localeconv>:
#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
  return __localeconv_l (__get_current_locale ());
}
  806cd8:	00802074 	movhi	r2,129
  806cdc:	108e4d04 	addi	r2,r2,14644
  806ce0:	f800283a 	ret

00806ce4 <_setlocale_r>:
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
  806ce4:	30001626 	beq	r6,zero,806d40 <_setlocale_r+0x5c>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806ce8:	01402074 	movhi	r5,129
{
  806cec:	defffe04 	addi	sp,sp,-8
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806cf0:	294bde04 	addi	r5,r5,12152
  806cf4:	3009883a 	mov	r4,r6
{
  806cf8:	dc000015 	stw	r16,0(sp)
  806cfc:	dfc00115 	stw	ra,4(sp)
  806d00:	3021883a 	mov	r16,r6
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806d04:	0809b600 	call	809b60 <strcmp>
  806d08:	1000061e 	bne	r2,zero,806d24 <_setlocale_r+0x40>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
  806d0c:	00802074 	movhi	r2,129
  806d10:	108bdd04 	addi	r2,r2,12148
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
  806d14:	dfc00117 	ldw	ra,4(sp)
  806d18:	dc000017 	ldw	r16,0(sp)
  806d1c:	dec00204 	addi	sp,sp,8
  806d20:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806d24:	80800003 	ldbu	r2,0(r16)
  806d28:	10bfef44 	addi	r2,r2,-67
  806d2c:	10000726 	beq	r2,zero,806d4c <_setlocale_r+0x68>
	  && strcmp (locale, ""))
  806d30:	80800003 	ldbu	r2,0(r16)
  806d34:	103ff526 	beq	r2,zero,806d0c <_setlocale_r+0x28>
        return NULL;
  806d38:	0005883a 	mov	r2,zero
  806d3c:	003ff506 	br	806d14 <_setlocale_r+0x30>
  return "C";
  806d40:	00802074 	movhi	r2,129
  806d44:	108bdd04 	addi	r2,r2,12148
}
  806d48:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806d4c:	80800043 	ldbu	r2,1(r16)
  806d50:	103fee26 	beq	r2,zero,806d0c <_setlocale_r+0x28>
  806d54:	003ff606 	br	806d30 <_setlocale_r+0x4c>

00806d58 <__locale_mb_cur_max>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
#endif
}
  806d58:	00802074 	movhi	r2,129
  806d5c:	108e5b07 	ldb	r2,14700(r2)
  806d60:	f800283a 	ret

00806d64 <setlocale>:
  if (locale)
  806d64:	28001626 	beq	r5,zero,806dc0 <setlocale+0x5c>
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
  806d68:	defffe04 	addi	sp,sp,-8
  806d6c:	dc000015 	stw	r16,0(sp)
  806d70:	2821883a 	mov	r16,r5
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806d74:	01402074 	movhi	r5,129
  806d78:	294bde04 	addi	r5,r5,12152
  806d7c:	8009883a 	mov	r4,r16
{
  806d80:	dfc00115 	stw	ra,4(sp)
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806d84:	0809b600 	call	809b60 <strcmp>
  806d88:	1000061e 	bne	r2,zero,806da4 <setlocale+0x40>
  return "C";
  806d8c:	00802074 	movhi	r2,129
  806d90:	108bdd04 	addi	r2,r2,12148
  return _setlocale_r (_REENT, category, locale);
}
  806d94:	dfc00117 	ldw	ra,4(sp)
  806d98:	dc000017 	ldw	r16,0(sp)
  806d9c:	dec00204 	addi	sp,sp,8
  806da0:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806da4:	80800003 	ldbu	r2,0(r16)
  806da8:	10bfef44 	addi	r2,r2,-67
  806dac:	10000726 	beq	r2,zero,806dcc <setlocale+0x68>
	  && strcmp (locale, ""))
  806db0:	80800003 	ldbu	r2,0(r16)
  806db4:	103ff526 	beq	r2,zero,806d8c <setlocale+0x28>
        return NULL;
  806db8:	0005883a 	mov	r2,zero
  806dbc:	003ff506 	br	806d94 <setlocale+0x30>
  return "C";
  806dc0:	00802074 	movhi	r2,129
  806dc4:	108bdd04 	addi	r2,r2,12148
}
  806dc8:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  806dcc:	80800043 	ldbu	r2,1(r16)
  806dd0:	103fee26 	beq	r2,zero,806d8c <setlocale+0x28>
  806dd4:	003ff606 	br	806db0 <setlocale+0x4c>

00806dd8 <__smakebuf_r>:
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
  806dd8:	2880030b 	ldhu	r2,12(r5)
{
  806ddc:	deffe804 	addi	sp,sp,-96
  806de0:	dc001215 	stw	r16,72(sp)
  806de4:	dfc01715 	stw	ra,92(sp)
  806de8:	dd001615 	stw	r20,88(sp)
  806dec:	dcc01515 	stw	r19,84(sp)
  806df0:	dc801415 	stw	r18,80(sp)
  806df4:	dc401315 	stw	r17,76(sp)
  if (fp->_flags & __SNBF)
  806df8:	10c0008c 	andi	r3,r2,2
{
  806dfc:	2821883a 	mov	r16,r5
  if (fp->_flags & __SNBF)
  806e00:	18000d26 	beq	r3,zero,806e38 <__smakebuf_r+0x60>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
  806e04:	288010c4 	addi	r2,r5,67
  806e08:	28800015 	stw	r2,0(r5)
  806e0c:	28800415 	stw	r2,16(r5)
      fp->_bf._size = 1;
  806e10:	00800044 	movi	r2,1
  806e14:	28800515 	stw	r2,20(r5)
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
      fp->_flags |= flags;
    }
}
  806e18:	dfc01717 	ldw	ra,92(sp)
  806e1c:	dd001617 	ldw	r20,88(sp)
  806e20:	dcc01517 	ldw	r19,84(sp)
  806e24:	dc801417 	ldw	r18,80(sp)
  806e28:	dc401317 	ldw	r17,76(sp)
  806e2c:	dc001217 	ldw	r16,72(sp)
  806e30:	dec01804 	addi	sp,sp,96
  806e34:	f800283a 	ret

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  806e38:	2940038f 	ldh	r5,14(r5)
  806e3c:	2023883a 	mov	r17,r4
  806e40:	28002816 	blt	r5,zero,806ee4 <__smakebuf_r+0x10c>
  806e44:	d80d883a 	mov	r6,sp
  806e48:	080c0c00 	call	80c0c0 <_fstat_r>
  806e4c:	10002416 	blt	r2,zero,806ee0 <__smakebuf_r+0x108>
        *bufsize = BUFSIZ;
      return (0);
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
  806e50:	d8800117 	ldw	r2,4(sp)
  806e54:	10bc000c 	andi	r2,r2,61440
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
  806e58:	10880018 	cmpnei	r2,r2,8192
  806e5c:	1000371e 	bne	r2,zero,806f3c <__smakebuf_r+0x164>
  806e60:	8140038f 	ldh	r5,14(r16)
  806e64:	8809883a 	mov	r4,r17
  806e68:	080c1180 	call	80c118 <_isatty_r>
  806e6c:	10004026 	beq	r2,zero,806f70 <__smakebuf_r+0x198>
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  806e70:	8080030b 	ldhu	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  806e74:	80c010c4 	addi	r3,r16,67
  806e78:	80c00015 	stw	r3,0(r16)
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  806e7c:	10800054 	ori	r2,r2,1
  806e80:	8080030d 	sth	r2,12(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  806e84:	00800044 	movi	r2,1
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  806e88:	80c00415 	stw	r3,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  806e8c:	80800515 	stw	r2,20(r16)
  806e90:	04820004 	movi	r18,2048
  806e94:	05010004 	movi	r20,1024
  806e98:	04c00044 	movi	r19,1
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
  806e9c:	01410004 	movi	r5,1024
  if ((p = _malloc_r (ptr, size)) == NULL)
  806ea0:	8809883a 	mov	r4,r17
  806ea4:	080701c0 	call	80701c <_malloc_r>
  806ea8:	10001726 	beq	r2,zero,806f08 <__smakebuf_r+0x130>
      fp->_flags |= __SMBF;
  806eac:	80c0030b 	ldhu	r3,12(r16)
      ptr->__cleanup = _cleanup_r;
  806eb0:	01002034 	movhi	r4,128
  806eb4:	21176804 	addi	r4,r4,23968
  806eb8:	89000f15 	stw	r4,60(r17)
      fp->_flags |= __SMBF;
  806ebc:	18c02014 	ori	r3,r3,128
  806ec0:	80c0030d 	sth	r3,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
  806ec4:	80800015 	stw	r2,0(r16)
  806ec8:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
  806ecc:	85000515 	stw	r20,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  806ed0:	98001f1e 	bne	r19,zero,806f50 <__smakebuf_r+0x178>
      fp->_flags |= flags;
  806ed4:	90c6b03a 	or	r3,r18,r3
  806ed8:	80c0030d 	sth	r3,12(r16)
  806edc:	003fce06 	br	806e18 <__smakebuf_r+0x40>
      if (fp->_flags & __SMBF)
  806ee0:	8080030b 	ldhu	r2,12(r16)
  806ee4:	1080200c 	andi	r2,r2,128
  806ee8:	0025883a 	mov	r18,zero
  806eec:	10001426 	beq	r2,zero,806f40 <__smakebuf_r+0x168>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  806ef0:	01401004 	movi	r5,64
  if ((p = _malloc_r (ptr, size)) == NULL)
  806ef4:	8809883a 	mov	r4,r17
  806ef8:	05001004 	movi	r20,64
      *couldbetty = 0;
  806efc:	0027883a 	mov	r19,zero
  if ((p = _malloc_r (ptr, size)) == NULL)
  806f00:	080701c0 	call	80701c <_malloc_r>
  806f04:	103fe91e 	bne	r2,zero,806eac <__smakebuf_r+0xd4>
      if (!(fp->_flags & __SSTR))
  806f08:	8080030b 	ldhu	r2,12(r16)
  806f0c:	10c0800c 	andi	r3,r2,512
  806f10:	183fc11e 	bne	r3,zero,806e18 <__smakebuf_r+0x40>
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  806f14:	00ffff04 	movi	r3,-4
  806f18:	10c4703a 	and	r2,r2,r3
  806f1c:	10800094 	ori	r2,r2,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
  806f20:	80c010c4 	addi	r3,r16,67
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  806f24:	8080030d 	sth	r2,12(r16)
	  fp->_bf._size = 1;
  806f28:	00800044 	movi	r2,1
	  fp->_bf._base = fp->_p = fp->_nbuf;
  806f2c:	80c00015 	stw	r3,0(r16)
  806f30:	80c00415 	stw	r3,16(r16)
	  fp->_bf._size = 1;
  806f34:	80800515 	stw	r2,20(r16)
  806f38:	003fb706 	br	806e18 <__smakebuf_r+0x40>
  806f3c:	04820004 	movi	r18,2048
  806f40:	05010004 	movi	r20,1024
  806f44:	0027883a 	mov	r19,zero
  *bufsize = BUFSIZ;
  806f48:	01410004 	movi	r5,1024
  806f4c:	003fd406 	br	806ea0 <__smakebuf_r+0xc8>
      if (couldbetty && _isatty_r (ptr, fp->_file))
  806f50:	8140038f 	ldh	r5,14(r16)
  806f54:	8809883a 	mov	r4,r17
  806f58:	080c1180 	call	80c118 <_isatty_r>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  806f5c:	80c0030b 	ldhu	r3,12(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  806f60:	103fdc26 	beq	r2,zero,806ed4 <__smakebuf_r+0xfc>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  806f64:	18ffff0c 	andi	r3,r3,65532
  806f68:	18c00054 	ori	r3,r3,1
  806f6c:	003fd906 	br	806ed4 <__smakebuf_r+0xfc>
  806f70:	04820004 	movi	r18,2048
  806f74:	05010004 	movi	r20,1024
  806f78:	04c00044 	movi	r19,1
  *bufsize = BUFSIZ;
  806f7c:	01410004 	movi	r5,1024
  806f80:	003fc706 	br	806ea0 <__smakebuf_r+0xc8>

00806f84 <__swhatbuf_r>:
{
  806f84:	deffea04 	addi	sp,sp,-88
  806f88:	dc001215 	stw	r16,72(sp)
  806f8c:	2821883a 	mov	r16,r5
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  806f90:	2940038f 	ldh	r5,14(r5)
{
  806f94:	dc801415 	stw	r18,80(sp)
  806f98:	dc401315 	stw	r17,76(sp)
  806f9c:	dfc01515 	stw	ra,84(sp)
  806fa0:	3023883a 	mov	r17,r6
  806fa4:	3825883a 	mov	r18,r7
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  806fa8:	28001016 	blt	r5,zero,806fec <__swhatbuf_r+0x68>
  806fac:	d80d883a 	mov	r6,sp
  806fb0:	080c0c00 	call	80c0c0 <_fstat_r>
  806fb4:	10000d16 	blt	r2,zero,806fec <__swhatbuf_r+0x68>
  *couldbetty = S_ISCHR(st.st_mode);
  806fb8:	d8c00117 	ldw	r3,4(sp)
  return (snpt);
  806fbc:	00820004 	movi	r2,2048
  *couldbetty = S_ISCHR(st.st_mode);
  806fc0:	18fc000c 	andi	r3,r3,61440
  806fc4:	18c80020 	cmpeqi	r3,r3,8192
  806fc8:	90c00015 	stw	r3,0(r18)
  *bufsize = BUFSIZ;
  806fcc:	00c10004 	movi	r3,1024
  806fd0:	88c00015 	stw	r3,0(r17)
}
  806fd4:	dfc01517 	ldw	ra,84(sp)
  806fd8:	dc801417 	ldw	r18,80(sp)
  806fdc:	dc401317 	ldw	r17,76(sp)
  806fe0:	dc001217 	ldw	r16,72(sp)
  806fe4:	dec01604 	addi	sp,sp,88
  806fe8:	f800283a 	ret
  806fec:	8080030b 	ldhu	r2,12(r16)
      *couldbetty = 0;
  806ff0:	90000015 	stw	zero,0(r18)
      if (fp->_flags & __SMBF)
  806ff4:	1080200c 	andi	r2,r2,128
  806ff8:	10000426 	beq	r2,zero,80700c <__swhatbuf_r+0x88>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  806ffc:	00801004 	movi	r2,64
  807000:	88800015 	stw	r2,0(r17)
  807004:	0005883a 	mov	r2,zero
  807008:	003ff206 	br	806fd4 <__swhatbuf_r+0x50>
        *bufsize = BUFSIZ;
  80700c:	00810004 	movi	r2,1024
  807010:	88800015 	stw	r2,0(r17)
  807014:	0005883a 	mov	r2,zero
  807018:	003fee06 	br	806fd4 <__swhatbuf_r+0x50>

0080701c <_malloc_r>:
{
  80701c:	defff604 	addi	sp,sp,-40
  807020:	dc400115 	stw	r17,4(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807024:	2c4002c4 	addi	r17,r5,11
{
  807028:	dc800215 	stw	r18,8(sp)
  80702c:	dfc00915 	stw	ra,36(sp)
  807030:	df000815 	stw	fp,32(sp)
  807034:	ddc00715 	stw	r23,28(sp)
  807038:	dd800615 	stw	r22,24(sp)
  80703c:	dd400515 	stw	r21,20(sp)
  807040:	dd000415 	stw	r20,16(sp)
  807044:	dcc00315 	stw	r19,12(sp)
  807048:	dc000015 	stw	r16,0(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  80704c:	888005e8 	cmpgeui	r2,r17,23
{
  807050:	2025883a 	mov	r18,r4
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807054:	10001b1e 	bne	r2,zero,8070c4 <_malloc_r+0xa8>
  if (nb > INT_MAX || nb < bytes)
  807058:	29400468 	cmpgeui	r5,r5,17
  80705c:	2800821e 	bne	r5,zero,807268 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807060:	08106bc0 	call	8106bc <__malloc_lock>
  807064:	04400404 	movi	r17,16
  807068:	00800604 	movi	r2,24
  80706c:	01c00084 	movi	r7,2
    q = bin_at(idx);
  807070:	04c02074 	movhi	r19,129
  807074:	9cce6c04 	addi	r19,r19,14768
  807078:	9885883a 	add	r2,r19,r2
    victim = last(q);
  80707c:	14000117 	ldw	r16,4(r2)
    q = bin_at(idx);
  807080:	10fffe04 	addi	r3,r2,-8
    if (victim == q)
  807084:	80c08b26 	beq	r16,r3,8072b4 <_malloc_r+0x298>
      victim_size = chunksize(victim);
  807088:	80800117 	ldw	r2,4(r16)
      unlink(victim, bck, fwd);
  80708c:	81000317 	ldw	r4,12(r16)
      victim_size = chunksize(victim);
  807090:	00ffff04 	movi	r3,-4
  807094:	10c4703a 	and	r2,r2,r3
        unlink(victim, bck, fwd);
  807098:	81400217 	ldw	r5,8(r16)
        set_inuse_bit_at_offset(victim, victim_size);
  80709c:	8085883a 	add	r2,r16,r2
  8070a0:	10c00117 	ldw	r3,4(r2)
        unlink(victim, bck, fwd);
  8070a4:	29000315 	stw	r4,12(r5)
  8070a8:	21400215 	stw	r5,8(r4)
        set_inuse_bit_at_offset(victim, victim_size);
  8070ac:	18c00054 	ori	r3,r3,1
  8070b0:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
  8070b4:	9009883a 	mov	r4,r18
  8070b8:	08106e00 	call	8106e0 <__malloc_unlock>
        return chunk2mem(victim);
  8070bc:	80800204 	addi	r2,r16,8
  8070c0:	00006c06 	br	807274 <_malloc_r+0x258>
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  8070c4:	00bffe04 	movi	r2,-8
  8070c8:	88a2703a 	and	r17,r17,r2
  if (nb > INT_MAX || nb < bytes)
  8070cc:	88006616 	blt	r17,zero,807268 <_malloc_r+0x24c>
  8070d0:	89406536 	bltu	r17,r5,807268 <_malloc_r+0x24c>
  MALLOC_LOCK;
  8070d4:	08106bc0 	call	8106bc <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
  8070d8:	88807e28 	cmpgeui	r2,r17,504
  8070dc:	10011b26 	beq	r2,zero,80754c <_malloc_r+0x530>
    idx = bin_index(nb);
  8070e0:	8804d27a 	srli	r2,r17,9
  8070e4:	10006f26 	beq	r2,zero,8072a4 <_malloc_r+0x288>
  8070e8:	10c00168 	cmpgeui	r3,r2,5
  8070ec:	1800f71e 	bne	r3,zero,8074cc <_malloc_r+0x4b0>
  8070f0:	8804d1ba 	srli	r2,r17,6
    bin = bin_at(idx);
  8070f4:	11c00e44 	addi	r7,r2,57
  8070f8:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  8070fc:	12000e04 	addi	r8,r2,56
    bin = bin_at(idx);
  807100:	04c02074 	movhi	r19,129
  807104:	9cce6c04 	addi	r19,r19,14768
  807108:	9909883a 	add	r4,r19,r4
    for (victim = last(bin); victim != bin; victim = victim->bk)
  80710c:	24000117 	ldw	r16,4(r4)
    bin = bin_at(idx);
  807110:	213ffe04 	addi	r4,r4,-8
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807114:	24000b26 	beq	r4,r16,807144 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807118:	01bfff04 	movi	r6,-4
  80711c:	00000306 	br	80712c <_malloc_r+0x110>
      else if (remainder_size >= 0) /* exact fit */
  807120:	1800cf0e 	bge	r3,zero,807460 <_malloc_r+0x444>
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807124:	84000317 	ldw	r16,12(r16)
  807128:	24000626 	beq	r4,r16,807144 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  80712c:	80800117 	ldw	r2,4(r16)
  807130:	1184703a 	and	r2,r2,r6
      remainder_size = long_sub_size_t(victim_size, nb);
  807134:	1447c83a 	sub	r3,r2,r17
      if (remainder_size >= (long)MINSIZE) /* too big */
  807138:	19400408 	cmpgei	r5,r3,16
  80713c:	283ff826 	beq	r5,zero,807120 <_malloc_r+0x104>
  807140:	400f883a 	mov	r7,r8
  if ( (victim = last_remainder->fd) != last_remainder)
  807144:	9c000417 	ldw	r16,16(r19)
  807148:	02402074 	movhi	r9,129
  80714c:	4a4e6e04 	addi	r9,r9,14776
  807150:	82405f26 	beq	r16,r9,8072d0 <_malloc_r+0x2b4>
    victim_size = chunksize(victim);
  807154:	80c00117 	ldw	r3,4(r16)
  807158:	00bfff04 	movi	r2,-4
  80715c:	1884703a 	and	r2,r3,r2
    remainder_size = long_sub_size_t(victim_size, nb);
  807160:	1447c83a 	sub	r3,r2,r17
    if (remainder_size >= (long)MINSIZE) /* re-split */
  807164:	19000410 	cmplti	r4,r3,16
  807168:	20010326 	beq	r4,zero,807578 <_malloc_r+0x55c>
    clear_last_remainder;
  80716c:	9a400515 	stw	r9,20(r19)
  807170:	9a400415 	stw	r9,16(r19)
    if (remainder_size >= 0)  /* exhaust */
  807174:	1800f80e 	bge	r3,zero,807558 <_malloc_r+0x53c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807178:	10c08028 	cmpgeui	r3,r2,512
  80717c:	1800ba1e 	bne	r3,zero,807468 <_malloc_r+0x44c>
  807180:	1006d0fa 	srli	r3,r2,3
  807184:	1008d17a 	srli	r4,r2,5
  807188:	00800044 	movi	r2,1
  80718c:	18c00044 	addi	r3,r3,1
  807190:	180690fa 	slli	r3,r3,3
  807194:	99400117 	ldw	r5,4(r19)
  807198:	1104983a 	sll	r2,r2,r4
  80719c:	98c7883a 	add	r3,r19,r3
  8071a0:	19000017 	ldw	r4,0(r3)
  8071a4:	1144b03a 	or	r2,r2,r5
  8071a8:	197ffe04 	addi	r5,r3,-8
  8071ac:	81400315 	stw	r5,12(r16)
  8071b0:	81000215 	stw	r4,8(r16)
  8071b4:	98800115 	stw	r2,4(r19)
  8071b8:	1c000015 	stw	r16,0(r3)
  8071bc:	24000315 	stw	r16,12(r4)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8071c0:	3807d0ba 	srai	r3,r7,2
  8071c4:	01000044 	movi	r4,1
  8071c8:	20c8983a 	sll	r4,r4,r3
  8071cc:	11004536 	bltu	r2,r4,8072e4 <_malloc_r+0x2c8>
    if ( (block & binblocks) == 0) 
  8071d0:	2086703a 	and	r3,r4,r2
  8071d4:	18000a1e 	bne	r3,zero,807200 <_malloc_r+0x1e4>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  8071d8:	00ffff04 	movi	r3,-4
      block <<= 1;
  8071dc:	2109883a 	add	r4,r4,r4
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  8071e0:	38ce703a 	and	r7,r7,r3
      while ((block & binblocks) == 0)
  8071e4:	2086703a 	and	r3,r4,r2
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  8071e8:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  8071ec:	1800041e 	bne	r3,zero,807200 <_malloc_r+0x1e4>
        block <<= 1;
  8071f0:	2109883a 	add	r4,r4,r4
      while ((block & binblocks) == 0)
  8071f4:	2086703a 	and	r3,r4,r2
        idx += BINBLOCKWIDTH;
  8071f8:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  8071fc:	183ffc26 	beq	r3,zero,8071f0 <_malloc_r+0x1d4>
          victim_size = chunksize(victim);
  807200:	02bfff04 	movi	r10,-4
      q = bin = bin_at(idx);
  807204:	381690fa 	slli	r11,r7,3
  807208:	3819883a 	mov	r12,r7
  80720c:	9ad7883a 	add	r11,r19,r11
  807210:	5811883a 	mov	r8,r11
        for (victim = last(bin); victim != bin; victim = victim->bk)
  807214:	40800317 	ldw	r2,12(r8)
  807218:	4080b526 	beq	r8,r2,8074f0 <_malloc_r+0x4d4>
          victim_size = chunksize(victim);
  80721c:	10c00117 	ldw	r3,4(r2)
  807220:	1021883a 	mov	r16,r2
            unlink(victim, bck, fwd);
  807224:	10800317 	ldw	r2,12(r2)
          victim_size = chunksize(victim);
  807228:	1a86703a 	and	r3,r3,r10
          remainder_size = long_sub_size_t(victim_size, nb);
  80722c:	1c4bc83a 	sub	r5,r3,r17
          if (remainder_size >= (long)MINSIZE) /* split */
  807230:	29800410 	cmplti	r6,r5,16
  807234:	3000b326 	beq	r6,zero,807504 <_malloc_r+0x4e8>
          else if (remainder_size >= 0)  /* take */
  807238:	283ff716 	blt	r5,zero,807218 <_malloc_r+0x1fc>
            set_inuse_bit_at_offset(victim, victim_size);
  80723c:	80c7883a 	add	r3,r16,r3
  807240:	19400117 	ldw	r5,4(r3)
            unlink(victim, bck, fwd);
  807244:	81800217 	ldw	r6,8(r16)
	    MALLOC_UNLOCK;
  807248:	9009883a 	mov	r4,r18
            set_inuse_bit_at_offset(victim, victim_size);
  80724c:	29400054 	ori	r5,r5,1
  807250:	19400115 	stw	r5,4(r3)
            unlink(victim, bck, fwd);
  807254:	30800315 	stw	r2,12(r6)
  807258:	11800215 	stw	r6,8(r2)
	    MALLOC_UNLOCK;
  80725c:	08106e00 	call	8106e0 <__malloc_unlock>
            return chunk2mem(victim);
  807260:	80800204 	addi	r2,r16,8
  807264:	00000306 	br	807274 <_malloc_r+0x258>
    RERRNO = ENOMEM;
  807268:	00800304 	movi	r2,12
  80726c:	90800015 	stw	r2,0(r18)
    return 0;
  807270:	0005883a 	mov	r2,zero
}
  807274:	dfc00917 	ldw	ra,36(sp)
  807278:	df000817 	ldw	fp,32(sp)
  80727c:	ddc00717 	ldw	r23,28(sp)
  807280:	dd800617 	ldw	r22,24(sp)
  807284:	dd400517 	ldw	r21,20(sp)
  807288:	dd000417 	ldw	r20,16(sp)
  80728c:	dcc00317 	ldw	r19,12(sp)
  807290:	dc800217 	ldw	r18,8(sp)
  807294:	dc400117 	ldw	r17,4(sp)
  807298:	dc000017 	ldw	r16,0(sp)
  80729c:	dec00a04 	addi	sp,sp,40
  8072a0:	f800283a 	ret
  8072a4:	01008004 	movi	r4,512
  8072a8:	01c01004 	movi	r7,64
    idx = bin_index(nb);
  8072ac:	02000fc4 	movi	r8,63
  8072b0:	003f9306 	br	807100 <_malloc_r+0xe4>
      victim = last(q);
  8072b4:	14000317 	ldw	r16,12(r2)
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
  8072b8:	39c00084 	addi	r7,r7,2
    if (victim != q)
  8072bc:	143f721e 	bne	r2,r16,807088 <_malloc_r+0x6c>
  if ( (victim = last_remainder->fd) != last_remainder)
  8072c0:	9c000417 	ldw	r16,16(r19)
  8072c4:	02402074 	movhi	r9,129
  8072c8:	4a4e6e04 	addi	r9,r9,14776
  8072cc:	827fa11e 	bne	r16,r9,807154 <_malloc_r+0x138>
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8072d0:	3807d0ba 	srai	r3,r7,2
  8072d4:	01000044 	movi	r4,1
  8072d8:	98800117 	ldw	r2,4(r19)
  8072dc:	20c8983a 	sll	r4,r4,r3
  8072e0:	113fbb2e 	bgeu	r2,r4,8071d0 <_malloc_r+0x1b4>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  8072e4:	9c000217 	ldw	r16,8(r19)
  8072e8:	00bfff04 	movi	r2,-4
  8072ec:	85400117 	ldw	r21,4(r16)
  8072f0:	a8ac703a 	and	r22,r21,r2
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  8072f4:	b4400336 	bltu	r22,r17,807304 <_malloc_r+0x2e8>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  8072f8:	b445c83a 	sub	r2,r22,r17
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  8072fc:	10c00408 	cmpgei	r3,r2,16
  807300:	18004d1e 	bne	r3,zero,807438 <_malloc_r+0x41c>
  if (sbrk_base != (char*)(-1))
  807304:	d0a00a17 	ldw	r2,-32728(gp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807308:	d5675717 	ldw	r21,-25252(gp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
  80730c:	85b9883a 	add	fp,r16,r22
  if (sbrk_base != (char*)(-1))
  807310:	10bfffd8 	cmpnei	r2,r2,-1
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807314:	8d6b883a 	add	r21,r17,r21
  if (sbrk_base != (char*)(-1))
  807318:	1000d126 	beq	r2,zero,807660 <_malloc_r+0x644>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
  80731c:	ad4403c4 	addi	r21,r21,4111
  807320:	00bc0004 	movi	r2,-4096
  807324:	a8aa703a 	and	r21,r21,r2
  brk = (char*)(MORECORE (sbrk_size));
  807328:	a80b883a 	mov	r5,r21
  80732c:	9009883a 	mov	r4,r18
  807330:	08099d00 	call	8099d0 <_sbrk_r>
  807334:	102f883a 	mov	r23,r2
  if (brk == (char*)(MORECORE_FAILURE) || 
  807338:	10bfffd8 	cmpnei	r2,r2,-1
  80733c:	1000a326 	beq	r2,zero,8075cc <_malloc_r+0x5b0>
  807340:	bf00a136 	bltu	r23,fp,8075c8 <_malloc_r+0x5ac>
  sbrked_mem += sbrk_size;
  807344:	00802074 	movhi	r2,129
  807348:	151b9017 	ldw	r20,28224(r2)
  80734c:	ad29883a 	add	r20,r21,r20
  807350:	151b9015 	stw	r20,28224(r2)
  807354:	a007883a 	mov	r3,r20
  if (brk == old_end /* can just add bytes to current top, unless
  807358:	e5c0e726 	beq	fp,r23,8076f8 <_malloc_r+0x6dc>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
  80735c:	d0a00a17 	ldw	r2,-32728(gp)
  807360:	10bfffd8 	cmpnei	r2,r2,-1
  807364:	1000eb26 	beq	r2,zero,807714 <_malloc_r+0x6f8>
      sbrked_mem += brk - (char*)old_end;
  807368:	bf39c83a 	sub	fp,r23,fp
  80736c:	e0c7883a 	add	r3,fp,r3
  807370:	00802074 	movhi	r2,129
  807374:	10db9015 	stw	r3,28224(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
  807378:	bf0001cc 	andi	fp,r23,7
    if (front_misalign > 0) 
  80737c:	e000c126 	beq	fp,zero,807684 <_malloc_r+0x668>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
  807380:	bf2fc83a 	sub	r23,r23,fp
      brk += correction;
  807384:	bdc00204 	addi	r23,r23,8
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  807388:	05040204 	movi	r20,4104
  80738c:	a729c83a 	sub	r20,r20,fp
  807390:	bd6b883a 	add	r21,r23,r21
    correction &= (pagesz - 1);
  807394:	a569c83a 	sub	r20,r20,r21
  807398:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  80739c:	a00b883a 	mov	r5,r20
  8073a0:	9009883a 	mov	r4,r18
  8073a4:	08099d00 	call	8099d0 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  8073a8:	10ffffe0 	cmpeqi	r3,r2,-1
  8073ac:	1800ee1e 	bne	r3,zero,807768 <_malloc_r+0x74c>
    top_size = new_brk - brk + correction;
  8073b0:	15c5c83a 	sub	r2,r2,r23
  8073b4:	152b883a 	add	r21,r2,r20
    sbrked_mem += correction;
  8073b8:	00802074 	movhi	r2,129
  8073bc:	115b9017 	ldw	r5,28224(r2)
    top = (mchunkptr)brk;
  8073c0:	9dc00215 	stw	r23,8(r19)
    set_head(top, top_size | PREV_INUSE);
  8073c4:	ad400054 	ori	r21,r21,1
    sbrked_mem += correction;
  8073c8:	a169883a 	add	r20,r20,r5
  8073cc:	151b9015 	stw	r20,28224(r2)
    set_head(top, top_size | PREV_INUSE);
  8073d0:	bd400115 	stw	r21,4(r23)
    if (old_top != initial_top)
  8073d4:	84c0d126 	beq	r16,r19,80771c <_malloc_r+0x700>
      if (old_top_size < MINSIZE) 
  8073d8:	b0800428 	cmpgeui	r2,r22,16
  8073dc:	1000d126 	beq	r2,zero,807724 <_malloc_r+0x708>
      set_head_size(old_top, old_top_size);
  8073e0:	80c00117 	ldw	r3,4(r16)
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
  8073e4:	013ffe04 	movi	r4,-8
  8073e8:	b0bffd04 	addi	r2,r22,-12
  8073ec:	1104703a 	and	r2,r2,r4
      set_head_size(old_top, old_top_size);
  8073f0:	18c0004c 	andi	r3,r3,1
  8073f4:	1886b03a 	or	r3,r3,r2
  8073f8:	80c00115 	stw	r3,4(r16)
      chunk_at_offset(old_top, old_top_size          )->size =
  8073fc:	01000144 	movi	r4,5
  807400:	8087883a 	add	r3,r16,r2
  807404:	19000115 	stw	r4,4(r3)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
  807408:	19000215 	stw	r4,8(r3)
      if (old_top_size >= MINSIZE) 
  80740c:	10800428 	cmpgeui	r2,r2,16
  807410:	1000da1e 	bne	r2,zero,80777c <_malloc_r+0x760>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807414:	bd400117 	ldw	r21,4(r23)
  807418:	b821883a 	mov	r16,r23
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  80741c:	d0a75617 	ldw	r2,-25256(gp)
  807420:	1500012e 	bgeu	r2,r20,807428 <_malloc_r+0x40c>
    max_sbrked_mem = sbrked_mem;
  807424:	d5275615 	stw	r20,-25256(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
  807428:	d0a75517 	ldw	r2,-25260(gp)
  80742c:	1500692e 	bgeu	r2,r20,8075d4 <_malloc_r+0x5b8>
    max_total_mem = sbrked_mem;
  807430:	d5275515 	stw	r20,-25260(gp)
  807434:	00006706 	br	8075d4 <_malloc_r+0x5b8>
  set_head(victim, nb | PREV_INUSE);
  807438:	88c00054 	ori	r3,r17,1
  80743c:	80c00115 	stw	r3,4(r16)
  top = chunk_at_offset(victim, nb);
  807440:	8463883a 	add	r17,r16,r17
  set_head(top, remainder_size | PREV_INUSE);
  807444:	10800054 	ori	r2,r2,1
  top = chunk_at_offset(victim, nb);
  807448:	9c400215 	stw	r17,8(r19)
  set_head(top, remainder_size | PREV_INUSE);
  80744c:	88800115 	stw	r2,4(r17)
  MALLOC_UNLOCK;
  807450:	9009883a 	mov	r4,r18
  807454:	08106e00 	call	8106e0 <__malloc_unlock>
  return chunk2mem(victim);
  807458:	80800204 	addi	r2,r16,8
  80745c:	003f8506 	br	807274 <_malloc_r+0x258>
        unlink(victim, bck, fwd);
  807460:	81000317 	ldw	r4,12(r16)
  807464:	003f0c06 	br	807098 <_malloc_r+0x7c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807468:	1006d27a 	srli	r3,r2,9
  80746c:	19000168 	cmpgeui	r4,r3,5
  807470:	20005026 	beq	r4,zero,8075b4 <_malloc_r+0x598>
  807474:	19000568 	cmpgeui	r4,r3,21
  807478:	20008c1e 	bne	r4,zero,8076ac <_malloc_r+0x690>
  80747c:	19401704 	addi	r5,r3,92
  807480:	280a90fa 	slli	r5,r5,3
  807484:	190016c4 	addi	r4,r3,91
  807488:	994b883a 	add	r5,r19,r5
  80748c:	28c00017 	ldw	r3,0(r5)
  807490:	297ffe04 	addi	r5,r5,-8
  807494:	28c07426 	beq	r5,r3,807668 <_malloc_r+0x64c>
  807498:	01bfff04 	movi	r6,-4
  80749c:	19000117 	ldw	r4,4(r3)
  8074a0:	2188703a 	and	r4,r4,r6
  8074a4:	1100022e 	bgeu	r2,r4,8074b0 <_malloc_r+0x494>
  8074a8:	18c00217 	ldw	r3,8(r3)
  8074ac:	28fffb1e 	bne	r5,r3,80749c <_malloc_r+0x480>
  8074b0:	19400317 	ldw	r5,12(r3)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8074b4:	98800117 	ldw	r2,4(r19)
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8074b8:	81400315 	stw	r5,12(r16)
  8074bc:	80c00215 	stw	r3,8(r16)
  8074c0:	2c000215 	stw	r16,8(r5)
  8074c4:	1c000315 	stw	r16,12(r3)
  8074c8:	003f3d06 	br	8071c0 <_malloc_r+0x1a4>
    idx = bin_index(nb);
  8074cc:	10c00568 	cmpgeui	r3,r2,21
  8074d0:	18004a26 	beq	r3,zero,8075fc <_malloc_r+0x5e0>
  8074d4:	10c01568 	cmpgeui	r3,r2,85
  8074d8:	18007b1e 	bne	r3,zero,8076c8 <_malloc_r+0x6ac>
  8074dc:	8804d33a 	srli	r2,r17,12
    bin = bin_at(idx);
  8074e0:	11c01bc4 	addi	r7,r2,111
  8074e4:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  8074e8:	12001b84 	addi	r8,r2,110
  8074ec:	003f0406 	br	807100 <_malloc_r+0xe4>
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  8074f0:	63000044 	addi	r12,r12,1
  8074f4:	608000cc 	andi	r2,r12,3
       bin = next_bin(bin);
  8074f8:	42000204 	addi	r8,r8,8
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  8074fc:	103f451e 	bne	r2,zero,807214 <_malloc_r+0x1f8>
  807500:	00004506 	br	807618 <_malloc_r+0x5fc>
            unlink(victim, bck, fwd);
  807504:	81000217 	ldw	r4,8(r16)
            set_head(victim, nb | PREV_INUSE);
  807508:	89800054 	ori	r6,r17,1
  80750c:	81800115 	stw	r6,4(r16)
            unlink(victim, bck, fwd);
  807510:	20800315 	stw	r2,12(r4)
  807514:	11000215 	stw	r4,8(r2)
            remainder = chunk_at_offset(victim, nb);
  807518:	8463883a 	add	r17,r16,r17
            link_last_remainder(remainder);
  80751c:	9c400515 	stw	r17,20(r19)
  807520:	9c400415 	stw	r17,16(r19)
            set_head(remainder, remainder_size | PREV_INUSE);
  807524:	28800054 	ori	r2,r5,1
  807528:	88800115 	stw	r2,4(r17)
            link_last_remainder(remainder);
  80752c:	8a400315 	stw	r9,12(r17)
  807530:	8a400215 	stw	r9,8(r17)
            set_foot(remainder, remainder_size);
  807534:	80c7883a 	add	r3,r16,r3
  807538:	19400015 	stw	r5,0(r3)
	    MALLOC_UNLOCK;
  80753c:	9009883a 	mov	r4,r18
  807540:	08106e00 	call	8106e0 <__malloc_unlock>
            return chunk2mem(victim);
  807544:	80800204 	addi	r2,r16,8
  807548:	003f4a06 	br	807274 <_malloc_r+0x258>
    q = bin_at(idx);
  80754c:	880ed0fa 	srli	r7,r17,3
  807550:	88800204 	addi	r2,r17,8
  807554:	003ec606 	br	807070 <_malloc_r+0x54>
      set_inuse_bit_at_offset(victim, victim_size);
  807558:	8085883a 	add	r2,r16,r2
  80755c:	10c00117 	ldw	r3,4(r2)
      MALLOC_UNLOCK;
  807560:	9009883a 	mov	r4,r18
      set_inuse_bit_at_offset(victim, victim_size);
  807564:	18c00054 	ori	r3,r3,1
  807568:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
  80756c:	08106e00 	call	8106e0 <__malloc_unlock>
      return chunk2mem(victim);
  807570:	80800204 	addi	r2,r16,8
  807574:	003f3f06 	br	807274 <_malloc_r+0x258>
      set_head(victim, nb | PREV_INUSE);
  807578:	89000054 	ori	r4,r17,1
  80757c:	81000115 	stw	r4,4(r16)
      remainder = chunk_at_offset(victim, nb);
  807580:	8463883a 	add	r17,r16,r17
      link_last_remainder(remainder);
  807584:	9c400515 	stw	r17,20(r19)
  807588:	9c400415 	stw	r17,16(r19)
      set_head(remainder, remainder_size | PREV_INUSE);
  80758c:	19000054 	ori	r4,r3,1
  807590:	89000115 	stw	r4,4(r17)
      set_foot(remainder, remainder_size);
  807594:	8085883a 	add	r2,r16,r2
      link_last_remainder(remainder);
  807598:	8a400315 	stw	r9,12(r17)
  80759c:	8a400215 	stw	r9,8(r17)
      set_foot(remainder, remainder_size);
  8075a0:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
  8075a4:	9009883a 	mov	r4,r18
  8075a8:	08106e00 	call	8106e0 <__malloc_unlock>
      return chunk2mem(victim);
  8075ac:	80800204 	addi	r2,r16,8
  8075b0:	003f3006 	br	807274 <_malloc_r+0x258>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8075b4:	1006d1ba 	srli	r3,r2,6
  8075b8:	19400e44 	addi	r5,r3,57
  8075bc:	280a90fa 	slli	r5,r5,3
  8075c0:	19000e04 	addi	r4,r3,56
  8075c4:	003fb006 	br	807488 <_malloc_r+0x46c>
      (brk < old_end && old_top != initial_top))
  8075c8:	84c04626 	beq	r16,r19,8076e4 <_malloc_r+0x6c8>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8075cc:	9c000217 	ldw	r16,8(r19)
  8075d0:	85400117 	ldw	r21,4(r16)
  8075d4:	00bfff04 	movi	r2,-4
  8075d8:	a8aa703a 	and	r21,r21,r2
  8075dc:	ac45c83a 	sub	r2,r21,r17
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  8075e0:	ac400236 	bltu	r21,r17,8075ec <_malloc_r+0x5d0>
  8075e4:	10c00408 	cmpgei	r3,r2,16
  8075e8:	183f931e 	bne	r3,zero,807438 <_malloc_r+0x41c>
      MALLOC_UNLOCK;
  8075ec:	9009883a 	mov	r4,r18
  8075f0:	08106e00 	call	8106e0 <__malloc_unlock>
      return 0; /* propagate failure */
  8075f4:	0005883a 	mov	r2,zero
  8075f8:	003f1e06 	br	807274 <_malloc_r+0x258>
    bin = bin_at(idx);
  8075fc:	11c01704 	addi	r7,r2,92
  807600:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807604:	120016c4 	addi	r8,r2,91
  807608:	003ebd06 	br	807100 <_malloc_r+0xe4>
      } while (first(q) == q);
  80760c:	58800217 	ldw	r2,8(r11)
        --startidx;
  807610:	39ffffc4 	addi	r7,r7,-1
      } while (first(q) == q);
  807614:	12c06f1e 	bne	r2,r11,8077d4 <_malloc_r+0x7b8>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  807618:	388000cc 	andi	r2,r7,3
       q = prev_bin(q);
  80761c:	5afffe04 	addi	r11,r11,-8
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  807620:	103ffa1e 	bne	r2,zero,80760c <_malloc_r+0x5f0>
          binblocks &= ~block;
  807624:	98c00117 	ldw	r3,4(r19)
  807628:	0104303a 	nor	r2,zero,r4
  80762c:	10c4703a 	and	r2,r2,r3
  807630:	98800115 	stw	r2,4(r19)
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  807634:	2109883a 	add	r4,r4,r4
  807638:	113f2a36 	bltu	r2,r4,8072e4 <_malloc_r+0x2c8>
  80763c:	203f2926 	beq	r4,zero,8072e4 <_malloc_r+0x2c8>
        while ((block & binblocks) == 0)
  807640:	2086703a 	and	r3,r4,r2
  807644:	1800041e 	bne	r3,zero,807658 <_malloc_r+0x63c>
          block <<= 1;
  807648:	2109883a 	add	r4,r4,r4
        while ((block & binblocks) == 0)
  80764c:	2086703a 	and	r3,r4,r2
          idx += BINBLOCKWIDTH;
  807650:	63000104 	addi	r12,r12,4
        while ((block & binblocks) == 0)
  807654:	183ffc26 	beq	r3,zero,807648 <_malloc_r+0x62c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807658:	600f883a 	mov	r7,r12
  80765c:	003ee906 	br	807204 <_malloc_r+0x1e8>
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807660:	ad400404 	addi	r21,r21,16
  807664:	003f3006 	br	807328 <_malloc_r+0x30c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807668:	2009d0ba 	srai	r4,r4,2
  80766c:	00800044 	movi	r2,1
  807670:	99800117 	ldw	r6,4(r19)
  807674:	1104983a 	sll	r2,r2,r4
  807678:	1184b03a 	or	r2,r2,r6
  80767c:	98800115 	stw	r2,4(r19)
  807680:	003f8d06 	br	8074b8 <_malloc_r+0x49c>
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  807684:	bd69883a 	add	r20,r23,r21
  807688:	0529c83a 	sub	r20,zero,r20
  80768c:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  807690:	a00b883a 	mov	r5,r20
  807694:	9009883a 	mov	r4,r18
  807698:	08099d00 	call	8099d0 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  80769c:	10ffffe0 	cmpeqi	r3,r2,-1
  8076a0:	183f4326 	beq	r3,zero,8073b0 <_malloc_r+0x394>
	correction = 0;
  8076a4:	0029883a 	mov	r20,zero
  8076a8:	003f4306 	br	8073b8 <_malloc_r+0x39c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8076ac:	19001568 	cmpgeui	r4,r3,85
  8076b0:	20001f1e 	bne	r4,zero,807730 <_malloc_r+0x714>
  8076b4:	1006d33a 	srli	r3,r2,12
  8076b8:	19401bc4 	addi	r5,r3,111
  8076bc:	280a90fa 	slli	r5,r5,3
  8076c0:	19001b84 	addi	r4,r3,110
  8076c4:	003f7006 	br	807488 <_malloc_r+0x46c>
    idx = bin_index(nb);
  8076c8:	10c05568 	cmpgeui	r3,r2,341
  8076cc:	18001f1e 	bne	r3,zero,80774c <_malloc_r+0x730>
  8076d0:	8804d3fa 	srli	r2,r17,15
    bin = bin_at(idx);
  8076d4:	11c01e04 	addi	r7,r2,120
  8076d8:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  8076dc:	12001dc4 	addi	r8,r2,119
  8076e0:	003e8706 	br	807100 <_malloc_r+0xe4>
  sbrked_mem += sbrk_size;
  8076e4:	00802074 	movhi	r2,129
  8076e8:	10db9017 	ldw	r3,28224(r2)
  8076ec:	a8c7883a 	add	r3,r21,r3
  8076f0:	10db9015 	stw	r3,28224(r2)
  if (brk == old_end /* can just add bytes to current top, unless
  8076f4:	003f1906 	br	80735c <_malloc_r+0x340>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  8076f8:	e083ffcc 	andi	r2,fp,4095
  8076fc:	103f171e 	bne	r2,zero,80735c <_malloc_r+0x340>
    set_head(top, top_size | PREV_INUSE);
  807700:	9c000217 	ldw	r16,8(r19)
    top_size = sbrk_size + old_top_size;
  807704:	b56b883a 	add	r21,r22,r21
    set_head(top, top_size | PREV_INUSE);
  807708:	ad400054 	ori	r21,r21,1
  80770c:	85400115 	stw	r21,4(r16)
  807710:	003f4206 	br	80741c <_malloc_r+0x400>
      sbrk_base = brk;
  807714:	d5e00a15 	stw	r23,-32728(gp)
  807718:	003f1706 	br	807378 <_malloc_r+0x35c>
  80771c:	b821883a 	mov	r16,r23
  807720:	003f3e06 	br	80741c <_malloc_r+0x400>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
  807724:	00800044 	movi	r2,1
  807728:	b8800115 	stw	r2,4(r23)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  80772c:	003faf06 	br	8075ec <_malloc_r+0x5d0>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807730:	19005568 	cmpgeui	r4,r3,341
  807734:	2000191e 	bne	r4,zero,80779c <_malloc_r+0x780>
  807738:	1006d3fa 	srli	r3,r2,15
  80773c:	19401e04 	addi	r5,r3,120
  807740:	280a90fa 	slli	r5,r5,3
  807744:	19001dc4 	addi	r4,r3,119
  807748:	003f4f06 	br	807488 <_malloc_r+0x46c>
    idx = bin_index(nb);
  80774c:	10815568 	cmpgeui	r2,r2,1365
  807750:	1000191e 	bne	r2,zero,8077b8 <_malloc_r+0x79c>
  807754:	8804d4ba 	srli	r2,r17,18
    bin = bin_at(idx);
  807758:	11c01f44 	addi	r7,r2,125
  80775c:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807760:	12001f04 	addi	r8,r2,124
  807764:	003e6606 	br	807100 <_malloc_r+0xe4>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
  807768:	e73ffe04 	addi	fp,fp,-8
  80776c:	af2b883a 	add	r21,r21,fp
    top_size = new_brk - brk + correction;
  807770:	adebc83a 	sub	r21,r21,r23
	correction = 0;
  807774:	0029883a 	mov	r20,zero
  807778:	003f0f06 	br	8073b8 <_malloc_r+0x39c>
        fREe(RCALL chunk2mem(old_top));
  80777c:	81400204 	addi	r5,r16,8
  807780:	9009883a 	mov	r4,r18
  807784:	08063a00 	call	8063a0 <_free_r>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807788:	9c000217 	ldw	r16,8(r19)
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  80778c:	00802074 	movhi	r2,129
  807790:	151b9017 	ldw	r20,28224(r2)
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807794:	85400117 	ldw	r21,4(r16)
  807798:	003f2006 	br	80741c <_malloc_r+0x400>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  80779c:	18c15568 	cmpgeui	r3,r3,1365
  8077a0:	1800091e 	bne	r3,zero,8077c8 <_malloc_r+0x7ac>
  8077a4:	1006d4ba 	srli	r3,r2,18
  8077a8:	19401f44 	addi	r5,r3,125
  8077ac:	280a90fa 	slli	r5,r5,3
  8077b0:	19001f04 	addi	r4,r3,124
  8077b4:	003f3406 	br	807488 <_malloc_r+0x46c>
  8077b8:	0100fe04 	movi	r4,1016
  8077bc:	01c01fc4 	movi	r7,127
    idx = bin_index(nb);
  8077c0:	02001f84 	movi	r8,126
  8077c4:	003e4e06 	br	807100 <_malloc_r+0xe4>
  8077c8:	0140fe04 	movi	r5,1016
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8077cc:	01001f84 	movi	r4,126
  8077d0:	003f2d06 	br	807488 <_malloc_r+0x46c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  8077d4:	98800117 	ldw	r2,4(r19)
  8077d8:	003f9606 	br	807634 <_malloc_r+0x618>

008077dc <_mbtowc_r>:
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
  return __MBTOWC (r, pwc, s, n, state);
  8077dc:	00802074 	movhi	r2,129
  8077e0:	108e4a17 	ldw	r2,14632(r2)
  8077e4:	1000683a 	jmp	r2

008077e8 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
  8077e8:	deffff04 	addi	sp,sp,-4
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;

  if (pwc == NULL)
  8077ec:	28000826 	beq	r5,zero,807810 <__ascii_mbtowc+0x28>
    pwc = &dummy;

  if (s == NULL)
  8077f0:	30000926 	beq	r6,zero,807818 <__ascii_mbtowc+0x30>
    return 0;

  if (n == 0)
  8077f4:	38000b26 	beq	r7,zero,807824 <__ascii_mbtowc+0x3c>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
  8077f8:	30800003 	ldbu	r2,0(r6)
  8077fc:	28800015 	stw	r2,0(r5)
  
  if (*t == '\0')
  807800:	30800003 	ldbu	r2,0(r6)
  807804:	1004c03a 	cmpne	r2,r2,zero
    return 0;

  return 1;
}
  807808:	dec00104 	addi	sp,sp,4
  80780c:	f800283a 	ret
    pwc = &dummy;
  807810:	d80b883a 	mov	r5,sp
  if (s == NULL)
  807814:	303ff71e 	bne	r6,zero,8077f4 <__ascii_mbtowc+0xc>
    return 0;
  807818:	0005883a 	mov	r2,zero
}
  80781c:	dec00104 	addi	sp,sp,4
  807820:	f800283a 	ret
    return -2;
  807824:	00bfff84 	movi	r2,-2
  807828:	003ff706 	br	807808 <__ascii_mbtowc+0x20>

0080782c <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
  80782c:	208000cc 	andi	r2,r4,3
  unsigned char d = c;
  807830:	280f883a 	mov	r7,r5
  while (UNALIGNED (src))
  807834:	10000e26 	beq	r2,zero,807870 <memchr+0x44>
    {
      if (!length--)
  807838:	30bfffc4 	addi	r2,r6,-1
  80783c:	30001726 	beq	r6,zero,80789c <memchr+0x70>
  807840:	29803fcc 	andi	r6,r5,255
  807844:	00000606 	br	807860 <memchr+0x34>
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
  807848:	21000044 	addi	r4,r4,1
  while (UNALIGNED (src))
  80784c:	20c000cc 	andi	r3,r4,3
  807850:	18000826 	beq	r3,zero,807874 <memchr+0x48>
      if (!length--)
  807854:	10bfffc4 	addi	r2,r2,-1
  807858:	10ffffe0 	cmpeqi	r3,r2,-1
  80785c:	18000f1e 	bne	r3,zero,80789c <memchr+0x70>
      if (*src == d)
  807860:	20c00003 	ldbu	r3,0(r4)
  807864:	19bff81e 	bne	r3,r6,807848 <memchr+0x1c>
  807868:	2005883a 	mov	r2,r4
        return (void *) src;
      src++;
    }

  return NULL;
}
  80786c:	f800283a 	ret
  while (UNALIGNED (src))
  807870:	3005883a 	mov	r2,r6
  if (!TOO_SMALL (length))
  807874:	10c00128 	cmpgeui	r3,r2,4
  807878:	18000a1e 	bne	r3,zero,8078a4 <memchr+0x78>
  while (length--)
  80787c:	10001e26 	beq	r2,zero,8078f8 <memchr+0xcc>
  807880:	2087883a 	add	r3,r4,r2
  807884:	39803fcc 	andi	r6,r7,255
  while (UNALIGNED (src))
  807888:	2005883a 	mov	r2,r4
      if (*src == d)
  80788c:	11000003 	ldbu	r4,0(r2)
  807890:	21bff626 	beq	r4,r6,80786c <memchr+0x40>
      src++;
  807894:	10800044 	addi	r2,r2,1
  while (length--)
  807898:	10fffc1e 	bne	r2,r3,80788c <memchr+0x60>
        return NULL;
  80789c:	0005883a 	mov	r2,zero
  8078a0:	f800283a 	ret
      mask = d << 8 | d;
  8078a4:	29403fcc 	andi	r5,r5,255
  8078a8:	280c923a 	slli	r6,r5,8
          if (DETECTCHAR (*asrc, mask))
  8078ac:	027fbff4 	movhi	r9,65279
  8078b0:	02202074 	movhi	r8,32897
      mask = d << 8 | d;
  8078b4:	314ab03a 	or	r5,r6,r5
      mask = mask << 16 | mask;
  8078b8:	280c943a 	slli	r6,r5,16
          if (DETECTCHAR (*asrc, mask))
  8078bc:	4a7fbfc4 	addi	r9,r9,-257
  8078c0:	42202004 	addi	r8,r8,-32640
      mask = mask << 16 | mask;
  8078c4:	314cb03a 	or	r6,r6,r5
          if (DETECTCHAR (*asrc, mask))
  8078c8:	20c00017 	ldw	r3,0(r4)
  8078cc:	30c6f03a 	xor	r3,r6,r3
  8078d0:	1a4b883a 	add	r5,r3,r9
  8078d4:	00c6303a 	nor	r3,zero,r3
  8078d8:	28c6703a 	and	r3,r5,r3
  8078dc:	1a06703a 	and	r3,r3,r8
  8078e0:	183fe71e 	bne	r3,zero,807880 <memchr+0x54>
          length -= LBLOCKSIZE;
  8078e4:	10bfff04 	addi	r2,r2,-4
      while (length >= LBLOCKSIZE)
  8078e8:	10c00128 	cmpgeui	r3,r2,4
          asrc++;
  8078ec:	21000104 	addi	r4,r4,4
      while (length >= LBLOCKSIZE)
  8078f0:	183ff51e 	bne	r3,zero,8078c8 <memchr+0x9c>
  8078f4:	003fe106 	br	80787c <memchr+0x50>
  8078f8:	f800283a 	ret

008078fc <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  8078fc:	30c00430 	cmpltui	r3,r6,16
{
  807900:	2005883a 	mov	r2,r4
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  807904:	18002e1e 	bne	r3,zero,8079c0 <memcpy+0xc4>
  807908:	2906b03a 	or	r3,r5,r4
  80790c:	18c000cc 	andi	r3,r3,3
  807910:	1800501e 	bne	r3,zero,807a54 <memcpy+0x158>
  807914:	333ffc04 	addi	r12,r6,-16
  807918:	6018d13a 	srli	r12,r12,4
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;
  80791c:	280f883a 	mov	r7,r5
      aligned_dst = (long*)dst;
  807920:	2007883a 	mov	r3,r4
  807924:	63000044 	addi	r12,r12,1
  807928:	6018913a 	slli	r12,r12,4
  80792c:	2317883a 	add	r11,r4,r12

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
  807930:	3a800117 	ldw	r10,4(r7)
  807934:	3a000217 	ldw	r8,8(r7)
  807938:	39000317 	ldw	r4,12(r7)
  80793c:	3a400017 	ldw	r9,0(r7)
  807940:	18c00404 	addi	r3,r3,16
  807944:	1abffd15 	stw	r10,-12(r3)
  807948:	1a7ffc15 	stw	r9,-16(r3)
  80794c:	1a3ffe15 	stw	r8,-8(r3)
  807950:	193fff15 	stw	r4,-4(r3)
  807954:	39c00404 	addi	r7,r7,16
      while (len0 >= BIGBLOCKSIZE)
  807958:	58fff51e 	bne	r11,r3,807930 <memcpy+0x34>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
  80795c:	3100030c 	andi	r4,r6,12
          *aligned_dst++ = *aligned_src++;
  807960:	2b0b883a 	add	r5,r5,r12
          len0 -= BIGBLOCKSIZE;
  807964:	31c003cc 	andi	r7,r6,15
      while (len0 >= LITTLEBLOCKSIZE)
  807968:	20003d26 	beq	r4,zero,807a60 <memcpy+0x164>
        {
          *aligned_dst++ = *aligned_src++;
  80796c:	2a400017 	ldw	r9,0(r5)
          len0 -= LITTLEBLOCKSIZE;
  807970:	393fff04 	addi	r4,r7,-4
      while (len0 >= LITTLEBLOCKSIZE)
  807974:	22000130 	cmpltui	r8,r4,4
          *aligned_dst++ = *aligned_src++;
  807978:	1a400015 	stw	r9,0(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  80797c:	4000071e 	bne	r8,zero,80799c <memcpy+0xa0>
          *aligned_dst++ = *aligned_src++;
  807980:	2a000117 	ldw	r8,4(r5)
          len0 -= LITTLEBLOCKSIZE;
  807984:	39fffe04 	addi	r7,r7,-8
      while (len0 >= LITTLEBLOCKSIZE)
  807988:	39c00130 	cmpltui	r7,r7,4
          *aligned_dst++ = *aligned_src++;
  80798c:	1a000115 	stw	r8,4(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  807990:	3800021e 	bne	r7,zero,80799c <memcpy+0xa0>
          *aligned_dst++ = *aligned_src++;
  807994:	29c00217 	ldw	r7,8(r5)
  807998:	19c00215 	stw	r7,8(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  80799c:	2008d0ba 	srli	r4,r4,2
          len0 -= LITTLEBLOCKSIZE;
  8079a0:	318000cc 	andi	r6,r6,3
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
  8079a4:	32bfffc4 	addi	r10,r6,-1
  8079a8:	21000044 	addi	r4,r4,1
  8079ac:	200890ba 	slli	r4,r4,2
          *aligned_dst++ = *aligned_src++;
  8079b0:	1907883a 	add	r3,r3,r4
  8079b4:	290b883a 	add	r5,r5,r4
  while (len0--)
  8079b8:	3000041e 	bne	r6,zero,8079cc <memcpy+0xd0>
  8079bc:	f800283a 	ret
  char *dst = dst0;
  8079c0:	2007883a 	mov	r3,r4
  while (len0--)
  8079c4:	32bfffc4 	addi	r10,r6,-1
  8079c8:	303ffc26 	beq	r6,zero,8079bc <memcpy+0xc0>
  8079cc:	28c8b03a 	or	r4,r5,r3
  8079d0:	210000cc 	andi	r4,r4,3
  8079d4:	2000241e 	bne	r4,zero,807a68 <memcpy+0x16c>
  8079d8:	51000228 	cmpgeui	r4,r10,8
  8079dc:	20002226 	beq	r4,zero,807a68 <memcpy+0x16c>
  8079e0:	527fff44 	addi	r9,r10,-3
  8079e4:	4812d0ba 	srli	r9,r9,2
  8079e8:	51000044 	addi	r4,r10,1
  8079ec:	2811883a 	mov	r8,r5
  8079f0:	4a400044 	addi	r9,r9,1
  8079f4:	180f883a 	mov	r7,r3
  char *dst = dst0;
  8079f8:	000d883a 	mov	r6,zero
    *dst++ = *src++;
  8079fc:	42c00017 	ldw	r11,0(r8)
  807a00:	31800044 	addi	r6,r6,1
  807a04:	42000104 	addi	r8,r8,4
  807a08:	3ac00015 	stw	r11,0(r7)
  while (len0--)
  807a0c:	39c00104 	addi	r7,r7,4
  807a10:	327ffa36 	bltu	r6,r9,8079fc <memcpy+0x100>
  807a14:	481290ba 	slli	r9,r9,2
  807a18:	1a47883a 	add	r3,r3,r9
  807a1c:	2a4b883a 	add	r5,r5,r9
  807a20:	5255c83a 	sub	r10,r10,r9
  807a24:	22400a26 	beq	r4,r9,807a50 <memcpy+0x154>
    *dst++ = *src++;
  807a28:	29000003 	ldbu	r4,0(r5)
  807a2c:	19000005 	stb	r4,0(r3)
  while (len0--)
  807a30:	50000726 	beq	r10,zero,807a50 <memcpy+0x154>
    *dst++ = *src++;
  807a34:	29000043 	ldbu	r4,1(r5)
  while (len0--)
  807a38:	52800060 	cmpeqi	r10,r10,1
    *dst++ = *src++;
  807a3c:	19000045 	stb	r4,1(r3)
  while (len0--)
  807a40:	5000031e 	bne	r10,zero,807a50 <memcpy+0x154>
    *dst++ = *src++;
  807a44:	29000083 	ldbu	r4,2(r5)
  807a48:	19000085 	stb	r4,2(r3)
  while (len0--)
  807a4c:	f800283a 	ret

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  807a50:	f800283a 	ret
  while (len0--)
  807a54:	32bfffc4 	addi	r10,r6,-1
  char *dst = dst0;
  807a58:	2007883a 	mov	r3,r4
  807a5c:	003fdb06 	br	8079cc <memcpy+0xd0>
      while (len0 >= LITTLEBLOCKSIZE)
  807a60:	380d883a 	mov	r6,r7
  807a64:	003fd706 	br	8079c4 <memcpy+0xc8>
  807a68:	52800044 	addi	r10,r10,1
  807a6c:	1a95883a 	add	r10,r3,r10
    *dst++ = *src++;
  807a70:	29000003 	ldbu	r4,0(r5)
  807a74:	18c00044 	addi	r3,r3,1
  807a78:	29400044 	addi	r5,r5,1
  807a7c:	193fffc5 	stb	r4,-1(r3)
  while (len0--)
  807a80:	50fffb1e 	bne	r10,r3,807a70 <memcpy+0x174>
  807a84:	f800283a 	ret

00807a88 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
  807a88:	2005883a 	mov	r2,r4
  char *dst = dst_void;
  const char *src = src_void;
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
  807a8c:	29000a2e 	bgeu	r5,r4,807ab8 <memmove+0x30>
  807a90:	2989883a 	add	r4,r5,r6
  807a94:	1100082e 	bgeu	r2,r4,807ab8 <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
  807a98:	1187883a 	add	r3,r2,r6
      while (length--)
  807a9c:	30006426 	beq	r6,zero,807c30 <memmove+0x1a8>
	{
	  *--dst = *--src;
  807aa0:	217fffc3 	ldbu	r5,-1(r4)
  807aa4:	18ffffc4 	addi	r3,r3,-1
  807aa8:	213fffc4 	addi	r4,r4,-1
  807aac:	19400005 	stb	r5,0(r3)
      while (length--)
  807ab0:	10fffb1e 	bne	r2,r3,807aa0 <memmove+0x18>
  807ab4:	f800283a 	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  807ab8:	30c00430 	cmpltui	r3,r6,16
  807abc:	18002926 	beq	r3,zero,807b64 <memmove+0xdc>
  807ac0:	1007883a 	mov	r3,r2
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
  807ac4:	32bfffc4 	addi	r10,r6,-1
  807ac8:	30005d26 	beq	r6,zero,807c40 <memmove+0x1b8>
  807acc:	1948b03a 	or	r4,r3,r5
  807ad0:	29800044 	addi	r6,r5,1
  807ad4:	210000cc 	andi	r4,r4,3
  807ad8:	198fc83a 	sub	r7,r3,r6
  807adc:	2009003a 	cmpeq	r4,r4,zero
  807ae0:	39c000e8 	cmpgeui	r7,r7,3
  807ae4:	21c8703a 	and	r4,r4,r7
  807ae8:	20004a26 	beq	r4,zero,807c14 <memmove+0x18c>
  807aec:	51000268 	cmpgeui	r4,r10,9
  807af0:	20004826 	beq	r4,zero,807c14 <memmove+0x18c>
  807af4:	527fff44 	addi	r9,r10,-3
  807af8:	4812d0ba 	srli	r9,r9,2
  807afc:	52c00044 	addi	r11,r10,1
  807b00:	2811883a 	mov	r8,r5
  807b04:	4a400044 	addi	r9,r9,1
  807b08:	180f883a 	mov	r7,r3
  807b0c:	000d883a 	mov	r6,zero
        {
          *dst++ = *src++;
  807b10:	41000017 	ldw	r4,0(r8)
  807b14:	31800044 	addi	r6,r6,1
  807b18:	42000104 	addi	r8,r8,4
  807b1c:	39000015 	stw	r4,0(r7)
      while (length--)
  807b20:	39c00104 	addi	r7,r7,4
  807b24:	327ffa36 	bltu	r6,r9,807b10 <memmove+0x88>
  807b28:	481290ba 	slli	r9,r9,2
  807b2c:	1a47883a 	add	r3,r3,r9
  807b30:	2a4b883a 	add	r5,r5,r9
  807b34:	5249c83a 	sub	r4,r10,r9
  807b38:	5a403d26 	beq	r11,r9,807c30 <memmove+0x1a8>
          *dst++ = *src++;
  807b3c:	29800003 	ldbu	r6,0(r5)
  807b40:	19800005 	stb	r6,0(r3)
      while (length--)
  807b44:	20003a26 	beq	r4,zero,807c30 <memmove+0x1a8>
          *dst++ = *src++;
  807b48:	29800043 	ldbu	r6,1(r5)
      while (length--)
  807b4c:	21000060 	cmpeqi	r4,r4,1
          *dst++ = *src++;
  807b50:	19800045 	stb	r6,1(r3)
      while (length--)
  807b54:	2000361e 	bne	r4,zero,807c30 <memmove+0x1a8>
          *dst++ = *src++;
  807b58:	29000083 	ldbu	r4,2(r5)
  807b5c:	19000085 	stb	r4,2(r3)
      while (length--)
  807b60:	f800283a 	ret
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  807b64:	2886b03a 	or	r3,r5,r2
  807b68:	18c000cc 	andi	r3,r3,3
  807b6c:	1800311e 	bne	r3,zero,807c34 <memmove+0x1ac>
  807b70:	327ffc04 	addi	r9,r6,-16
  807b74:	4812d13a 	srli	r9,r9,4
  807b78:	280f883a 	mov	r7,r5
  807b7c:	1007883a 	mov	r3,r2
  807b80:	4a400044 	addi	r9,r9,1
  807b84:	4812913a 	slli	r9,r9,4
  807b88:	1251883a 	add	r8,r2,r9
              *aligned_dst++ = *aligned_src++;
  807b8c:	39000017 	ldw	r4,0(r7)
  807b90:	39c00404 	addi	r7,r7,16
  807b94:	18c00404 	addi	r3,r3,16
  807b98:	193ffc15 	stw	r4,-16(r3)
              *aligned_dst++ = *aligned_src++;
  807b9c:	393ffd17 	ldw	r4,-12(r7)
  807ba0:	193ffd15 	stw	r4,-12(r3)
              *aligned_dst++ = *aligned_src++;
  807ba4:	393ffe17 	ldw	r4,-8(r7)
  807ba8:	193ffe15 	stw	r4,-8(r3)
              *aligned_dst++ = *aligned_src++;
  807bac:	393fff17 	ldw	r4,-4(r7)
  807bb0:	193fff15 	stw	r4,-4(r3)
          while (length >= BIGBLOCKSIZE)
  807bb4:	40fff51e 	bne	r8,r3,807b8c <memmove+0x104>
          while (length >= LITTLEBLOCKSIZE)
  807bb8:	3100030c 	andi	r4,r6,12
              *aligned_dst++ = *aligned_src++;
  807bbc:	2a4b883a 	add	r5,r5,r9
              length -= BIGBLOCKSIZE;
  807bc0:	31c003cc 	andi	r7,r6,15
          while (length >= LITTLEBLOCKSIZE)
  807bc4:	20001f26 	beq	r4,zero,807c44 <memmove+0x1bc>
              *aligned_dst++ = *aligned_src++;
  807bc8:	2a400017 	ldw	r9,0(r5)
              length -= LITTLEBLOCKSIZE;
  807bcc:	393fff04 	addi	r4,r7,-4
          while (length >= LITTLEBLOCKSIZE)
  807bd0:	22000130 	cmpltui	r8,r4,4
              *aligned_dst++ = *aligned_src++;
  807bd4:	1a400015 	stw	r9,0(r3)
          while (length >= LITTLEBLOCKSIZE)
  807bd8:	4000071e 	bne	r8,zero,807bf8 <memmove+0x170>
              *aligned_dst++ = *aligned_src++;
  807bdc:	2a000117 	ldw	r8,4(r5)
              length -= LITTLEBLOCKSIZE;
  807be0:	39fffe04 	addi	r7,r7,-8
          while (length >= LITTLEBLOCKSIZE)
  807be4:	39c00130 	cmpltui	r7,r7,4
              *aligned_dst++ = *aligned_src++;
  807be8:	1a000115 	stw	r8,4(r3)
          while (length >= LITTLEBLOCKSIZE)
  807bec:	3800021e 	bne	r7,zero,807bf8 <memmove+0x170>
              *aligned_dst++ = *aligned_src++;
  807bf0:	29c00217 	ldw	r7,8(r5)
  807bf4:	19c00215 	stw	r7,8(r3)
          while (length >= LITTLEBLOCKSIZE)
  807bf8:	2008d0ba 	srli	r4,r4,2
              length -= LITTLEBLOCKSIZE;
  807bfc:	318000cc 	andi	r6,r6,3
  807c00:	21000044 	addi	r4,r4,1
  807c04:	200890ba 	slli	r4,r4,2
              *aligned_dst++ = *aligned_src++;
  807c08:	1907883a 	add	r3,r3,r4
  807c0c:	290b883a 	add	r5,r5,r4
  807c10:	003fac06 	br	807ac4 <memmove+0x3c>
  807c14:	52800044 	addi	r10,r10,1
  807c18:	1a95883a 	add	r10,r3,r10
          *dst++ = *src++;
  807c1c:	313fffc3 	ldbu	r4,-1(r6)
  807c20:	18c00044 	addi	r3,r3,1
  807c24:	31800044 	addi	r6,r6,1
  807c28:	193fffc5 	stb	r4,-1(r3)
      while (length--)
  807c2c:	1abffb1e 	bne	r3,r10,807c1c <memmove+0x194>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  807c30:	f800283a 	ret
      while (length--)
  807c34:	32bfffc4 	addi	r10,r6,-1
  807c38:	1007883a 	mov	r3,r2
  807c3c:	003fa306 	br	807acc <memmove+0x44>
  807c40:	f800283a 	ret
          while (length >= LITTLEBLOCKSIZE)
  807c44:	380d883a 	mov	r6,r7
  807c48:	003f9e06 	br	807ac4 <memmove+0x3c>

00807c4c <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807c4c:	20801317 	ldw	r2,76(r4)
{
  807c50:	defffc04 	addi	sp,sp,-16
  807c54:	dc400115 	stw	r17,4(sp)
  807c58:	dc000015 	stw	r16,0(sp)
  807c5c:	dfc00315 	stw	ra,12(sp)
  807c60:	dc800215 	stw	r18,8(sp)
  807c64:	2021883a 	mov	r16,r4
  807c68:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807c6c:	10000e26 	beq	r2,zero,807ca8 <_Balloc+0x5c>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  807c70:	880690ba 	slli	r3,r17,2
  807c74:	10c7883a 	add	r3,r2,r3
  807c78:	18800017 	ldw	r2,0(r3)
  807c7c:	10001126 	beq	r2,zero,807cc4 <_Balloc+0x78>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  807c80:	11000017 	ldw	r4,0(r2)
  807c84:	19000015 	stw	r4,0(r3)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
  807c88:	10000415 	stw	zero,16(r2)
  807c8c:	10000315 	stw	zero,12(r2)
  return rv;
}
  807c90:	dfc00317 	ldw	ra,12(sp)
  807c94:	dc800217 	ldw	r18,8(sp)
  807c98:	dc400117 	ldw	r17,4(sp)
  807c9c:	dc000017 	ldw	r16,0(sp)
  807ca0:	dec00404 	addi	sp,sp,16
  807ca4:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  807ca8:	01800844 	movi	r6,33
  807cac:	01400104 	movi	r5,4
  807cb0:	080b8040 	call	80b804 <_calloc_r>
  807cb4:	80801315 	stw	r2,76(r16)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807cb8:	103fed1e 	bne	r2,zero,807c70 <_Balloc+0x24>
	  return NULL;
  807cbc:	0005883a 	mov	r2,zero
  807cc0:	003ff306 	br	807c90 <_Balloc+0x44>
      x = 1 << k;
  807cc4:	04800044 	movi	r18,1
  807cc8:	9464983a 	sll	r18,r18,r17
      rv = (_Bigint *) _calloc_r (ptr,
  807ccc:	01400044 	movi	r5,1
  807cd0:	8009883a 	mov	r4,r16
				  sizeof (_Bigint) +
  807cd4:	91800144 	addi	r6,r18,5
      rv = (_Bigint *) _calloc_r (ptr,
  807cd8:	300c90ba 	slli	r6,r6,2
  807cdc:	080b8040 	call	80b804 <_calloc_r>
      if (rv == NULL) return NULL;
  807ce0:	103ff626 	beq	r2,zero,807cbc <_Balloc+0x70>
      rv->_k = k;
  807ce4:	14400115 	stw	r17,4(r2)
      rv->_maxwds = x;
  807ce8:	14800215 	stw	r18,8(r2)
  807cec:	003fe606 	br	807c88 <_Balloc+0x3c>

00807cf0 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
  807cf0:	28000726 	beq	r5,zero,807d10 <_Bfree+0x20>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  807cf4:	28c00117 	ldw	r3,4(r5)
  807cf8:	20801317 	ldw	r2,76(r4)
  807cfc:	180690ba 	slli	r3,r3,2
  807d00:	10c5883a 	add	r2,r2,r3
  807d04:	10c00017 	ldw	r3,0(r2)
  807d08:	28c00015 	stw	r3,0(r5)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  807d0c:	11400015 	stw	r5,0(r2)
    }
}
  807d10:	f800283a 	ret

00807d14 <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
  807d14:	defff704 	addi	sp,sp,-36
  807d18:	dc800215 	stw	r18,8(sp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  807d1c:	2c800417 	ldw	r18,16(r5)
{
  807d20:	ddc00715 	stw	r23,28(sp)
  807d24:	dd800615 	stw	r22,24(sp)
  807d28:	dd400515 	stw	r21,20(sp)
  807d2c:	dd000415 	stw	r20,16(sp)
  807d30:	dcc00315 	stw	r19,12(sp)
  807d34:	dc400115 	stw	r17,4(sp)
  807d38:	dfc00815 	stw	ra,32(sp)
  807d3c:	dc000015 	stw	r16,0(sp)
  807d40:	2827883a 	mov	r19,r5
  807d44:	2029883a 	mov	r20,r4
  807d48:	302b883a 	mov	r21,r6
  807d4c:	3823883a 	mov	r17,r7
  x = b->_x;
  807d50:	2d800504 	addi	r22,r5,20
  i = 0;
  807d54:	002f883a 	mov	r23,zero
  do
    {
#ifdef Pack_32
      xi = *x;
  807d58:	b4000017 	ldw	r16,0(r22)
      y = (xi & 0xffff) * m + a;
  807d5c:	a80b883a 	mov	r5,r21
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
  807d60:	b5800104 	addi	r22,r22,4
      y = (xi & 0xffff) * m + a;
  807d64:	813fffcc 	andi	r4,r16,65535
  807d68:	080d8900 	call	80d890 <__mulsi3>
      z = (xi >> 16) * m + (y >> 16);
  807d6c:	8008d43a 	srli	r4,r16,16
  807d70:	a80b883a 	mov	r5,r21
      y = (xi & 0xffff) * m + a;
  807d74:	1461883a 	add	r16,r2,r17
      z = (xi >> 16) * m + (y >> 16);
  807d78:	080d8900 	call	80d890 <__mulsi3>
  807d7c:	800ed43a 	srli	r7,r16,16
      *x++ = (z << 16) + (y & 0xffff);
  807d80:	843fffcc 	andi	r16,r16,65535
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
  807d84:	bdc00044 	addi	r23,r23,1
      z = (xi >> 16) * m + (y >> 16);
  807d88:	11c5883a 	add	r2,r2,r7
      *x++ = (z << 16) + (y & 0xffff);
  807d8c:	1006943a 	slli	r3,r2,16
      a = (int) (z >> 16);
  807d90:	1022d43a 	srli	r17,r2,16
      *x++ = (z << 16) + (y & 0xffff);
  807d94:	1c21883a 	add	r16,r3,r16
  807d98:	b43fff15 	stw	r16,-4(r22)
  while (++i < wds);
  807d9c:	bcbfee16 	blt	r23,r18,807d58 <__multadd+0x44>
  if (a)
  807da0:	88000826 	beq	r17,zero,807dc4 <__multadd+0xb0>
    {
      if (wds >= b->_maxwds)
  807da4:	98800217 	ldw	r2,8(r19)
  807da8:	9080120e 	bge	r18,r2,807df4 <__multadd+0xe0>
	  b1 = eBalloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
  807dac:	90800144 	addi	r2,r18,5
  807db0:	100490ba 	slli	r2,r2,2
  807db4:	94800044 	addi	r18,r18,1
  807db8:	9885883a 	add	r2,r19,r2
  807dbc:	14400015 	stw	r17,0(r2)
      b->_wds = wds;
  807dc0:	9c800415 	stw	r18,16(r19)
    }
  return b;
}
  807dc4:	9805883a 	mov	r2,r19
  807dc8:	dfc00817 	ldw	ra,32(sp)
  807dcc:	ddc00717 	ldw	r23,28(sp)
  807dd0:	dd800617 	ldw	r22,24(sp)
  807dd4:	dd400517 	ldw	r21,20(sp)
  807dd8:	dd000417 	ldw	r20,16(sp)
  807ddc:	dcc00317 	ldw	r19,12(sp)
  807de0:	dc800217 	ldw	r18,8(sp)
  807de4:	dc400117 	ldw	r17,4(sp)
  807de8:	dc000017 	ldw	r16,0(sp)
  807dec:	dec00904 	addi	sp,sp,36
  807df0:	f800283a 	ret
	  b1 = eBalloc (ptr, b->_k + 1);
  807df4:	9d400117 	ldw	r21,4(r19)
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807df8:	a0801317 	ldw	r2,76(r20)
	  b1 = eBalloc (ptr, b->_k + 1);
  807dfc:	ad400044 	addi	r21,r21,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807e00:	10001826 	beq	r2,zero,807e64 <__multadd+0x150>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  807e04:	a80690ba 	slli	r3,r21,2
  807e08:	10c5883a 	add	r2,r2,r3
  807e0c:	14000017 	ldw	r16,0(r2)
  807e10:	80002126 	beq	r16,zero,807e98 <__multadd+0x184>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  807e14:	80c00017 	ldw	r3,0(r16)
  807e18:	10c00015 	stw	r3,0(r2)
  rv->_sign = rv->_wds = 0;
  807e1c:	80000415 	stw	zero,16(r16)
	  Bcopy (b1, b);
  807e20:	99800417 	ldw	r6,16(r19)
  807e24:	99400304 	addi	r5,r19,12
  rv->_sign = rv->_wds = 0;
  807e28:	80000315 	stw	zero,12(r16)
	  Bcopy (b1, b);
  807e2c:	31800084 	addi	r6,r6,2
  807e30:	300c90ba 	slli	r6,r6,2
  807e34:	81000304 	addi	r4,r16,12
  807e38:	08078fc0 	call	8078fc <memcpy>
  if (v)
  807e3c:	98000726 	beq	r19,zero,807e5c <__multadd+0x148>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  807e40:	98c00117 	ldw	r3,4(r19)
  807e44:	a0801317 	ldw	r2,76(r20)
  807e48:	180690ba 	slli	r3,r3,2
  807e4c:	10c5883a 	add	r2,r2,r3
  807e50:	10c00017 	ldw	r3,0(r2)
  807e54:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  807e58:	14c00015 	stw	r19,0(r2)
  807e5c:	8027883a 	mov	r19,r16
  807e60:	003fd206 	br	807dac <__multadd+0x98>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  807e64:	01800844 	movi	r6,33
  807e68:	01400104 	movi	r5,4
  807e6c:	a009883a 	mov	r4,r20
  807e70:	080b8040 	call	80b804 <_calloc_r>
  807e74:	a0801315 	stw	r2,76(r20)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807e78:	103fe21e 	bne	r2,zero,807e04 <__multadd+0xf0>
	  b1 = eBalloc (ptr, b->_k + 1);
  807e7c:	01c02074 	movhi	r7,129
  807e80:	01002074 	movhi	r4,129
  807e84:	39cbbe04 	addi	r7,r7,12024
  807e88:	000d883a 	mov	r6,zero
  807e8c:	01402d44 	movi	r5,181
  807e90:	210be104 	addi	r4,r4,12164
  807e94:	080b7900 	call	80b790 <__assert_func>
      x = 1 << k;
  807e98:	05800044 	movi	r22,1
  807e9c:	b56c983a 	sll	r22,r22,r21
      rv = (_Bigint *) _calloc_r (ptr,
  807ea0:	01400044 	movi	r5,1
  807ea4:	a009883a 	mov	r4,r20
				  sizeof (_Bigint) +
  807ea8:	b1800144 	addi	r6,r22,5
      rv = (_Bigint *) _calloc_r (ptr,
  807eac:	300c90ba 	slli	r6,r6,2
  807eb0:	080b8040 	call	80b804 <_calloc_r>
  807eb4:	1021883a 	mov	r16,r2
      if (rv == NULL) return NULL;
  807eb8:	103ff026 	beq	r2,zero,807e7c <__multadd+0x168>
      rv->_k = k;
  807ebc:	15400115 	stw	r21,4(r2)
      rv->_maxwds = x;
  807ec0:	15800215 	stw	r22,8(r2)
  807ec4:	003fd506 	br	807e1c <__multadd+0x108>

00807ec8 <__s2b>:
{
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  807ec8:	38800204 	addi	r2,r7,8
{
  807ecc:	defff904 	addi	sp,sp,-28
  x = (nd + 8) / 9;
  807ed0:	10c00254 	ori	r3,r2,9
{
  807ed4:	dd400515 	stw	r21,20(sp)
  807ed8:	dcc00315 	stw	r19,12(sp)
  807edc:	dc800215 	stw	r18,8(sp)
  807ee0:	dc400115 	stw	r17,4(sp)
  807ee4:	dfc00615 	stw	ra,24(sp)
  807ee8:	dd000415 	stw	r20,16(sp)
  807eec:	dc000015 	stw	r16,0(sp)
  x = (nd + 8) / 9;
  807ef0:	18c00428 	cmpgeui	r3,r3,16
{
  807ef4:	3823883a 	mov	r17,r7
  807ef8:	2025883a 	mov	r18,r4
  807efc:	282b883a 	mov	r21,r5
  807f00:	3027883a 	mov	r19,r6
  x = (nd + 8) / 9;
  807f04:	18003d1e 	bne	r3,zero,807ffc <__s2b+0x134>
  807f08:	1004913a 	slli	r2,r2,4
  807f0c:	00c02074 	movhi	r3,129
  807f10:	10800254 	ori	r2,r2,9
  807f14:	10c7883a 	add	r3,r2,r3
  807f18:	188f6e03 	ldbu	r2,15800(r3)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  807f1c:	88c00290 	cmplti	r3,r17,10
  807f20:	18003b1e 	bne	r3,zero,808010 <__s2b+0x148>
  807f24:	00c00044 	movi	r3,1
  807f28:	0029883a 	mov	r20,zero
  807f2c:	18c7883a 	add	r3,r3,r3
  807f30:	a5000044 	addi	r20,r20,1
  807f34:	18bffd16 	blt	r3,r2,807f2c <__s2b+0x64>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807f38:	90801317 	ldw	r2,76(r18)
  807f3c:	10003726 	beq	r2,zero,80801c <__s2b+0x154>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  807f40:	a00690ba 	slli	r3,r20,2
  807f44:	10c5883a 	add	r2,r2,r3
  807f48:	11400017 	ldw	r5,0(r2)
  807f4c:	28004326 	beq	r5,zero,80805c <__s2b+0x194>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  807f50:	28c00017 	ldw	r3,0(r5)
  807f54:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  b = eBalloc (ptr, k);
  b->_x[0] = y9;
  807f58:	d8800717 	ldw	r2,28(sp)
  rv->_sign = rv->_wds = 0;
  807f5c:	28000315 	stw	zero,12(r5)
  b->_x[0] = y9;
  807f60:	28800515 	stw	r2,20(r5)
  b->_wds = 1;
  807f64:	00800044 	movi	r2,1
  807f68:	28800415 	stw	r2,16(r5)
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
  807f6c:	98800288 	cmpgei	r2,r19,10
  807f70:	10003726 	beq	r2,zero,808050 <__s2b+0x188>
    {
      s += 9;
  807f74:	ac000244 	addi	r16,r21,9
  807f78:	8029883a 	mov	r20,r16
  807f7c:	aceb883a 	add	r21,r21,r19
      do
	b = multadd (ptr, b, 10, *s++ - '0');
  807f80:	a1c00007 	ldb	r7,0(r20)
  807f84:	01800284 	movi	r6,10
  807f88:	9009883a 	mov	r4,r18
  807f8c:	39fff404 	addi	r7,r7,-48
  807f90:	0807d140 	call	807d14 <__multadd>
  807f94:	a5000044 	addi	r20,r20,1
  807f98:	100b883a 	mov	r5,r2
      while (++i < nd0);
  807f9c:	ad3ff81e 	bne	r21,r20,807f80 <__s2b+0xb8>
      s++;
  807fa0:	98bffe04 	addi	r2,r19,-8
  807fa4:	80a1883a 	add	r16,r16,r2
    }
  else
    s += 10;
  for (; i < nd; i++)
  807fa8:	9c400a0e 	bge	r19,r17,807fd4 <__s2b+0x10c>
  807fac:	8ce3c83a 	sub	r17,r17,r19
  807fb0:	8463883a 	add	r17,r16,r17
    b = multadd (ptr, b, 10, *s++ - '0');
  807fb4:	81c00007 	ldb	r7,0(r16)
  807fb8:	01800284 	movi	r6,10
  807fbc:	9009883a 	mov	r4,r18
  807fc0:	39fff404 	addi	r7,r7,-48
  807fc4:	0807d140 	call	807d14 <__multadd>
  807fc8:	84000044 	addi	r16,r16,1
  807fcc:	100b883a 	mov	r5,r2
  for (; i < nd; i++)
  807fd0:	847ff81e 	bne	r16,r17,807fb4 <__s2b+0xec>
  return b;
}
  807fd4:	2805883a 	mov	r2,r5
  807fd8:	dfc00617 	ldw	ra,24(sp)
  807fdc:	dd400517 	ldw	r21,20(sp)
  807fe0:	dd000417 	ldw	r20,16(sp)
  807fe4:	dcc00317 	ldw	r19,12(sp)
  807fe8:	dc800217 	ldw	r18,8(sp)
  807fec:	dc400117 	ldw	r17,4(sp)
  807ff0:	dc000017 	ldw	r16,0(sp)
  807ff4:	dec00704 	addi	sp,sp,28
  807ff8:	f800283a 	ret
  x = (nd + 8) / 9;
  807ffc:	01400244 	movi	r5,9
  808000:	1009883a 	mov	r4,r2
  808004:	080d6dc0 	call	80d6dc <__divsi3>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808008:	88c00290 	cmplti	r3,r17,10
  80800c:	183fc526 	beq	r3,zero,807f24 <__s2b+0x5c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808010:	90801317 	ldw	r2,76(r18)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808014:	0029883a 	mov	r20,zero
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808018:	103fc91e 	bne	r2,zero,807f40 <__s2b+0x78>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  80801c:	01800844 	movi	r6,33
  808020:	01400104 	movi	r5,4
  808024:	9009883a 	mov	r4,r18
  808028:	080b8040 	call	80b804 <_calloc_r>
  80802c:	90801315 	stw	r2,76(r18)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808030:	103fc31e 	bne	r2,zero,807f40 <__s2b+0x78>
  b = eBalloc (ptr, k);
  808034:	01c02074 	movhi	r7,129
  808038:	01002074 	movhi	r4,129
  80803c:	39cbbe04 	addi	r7,r7,12024
  808040:	000d883a 	mov	r6,zero
  808044:	01403384 	movi	r5,206
  808048:	210be104 	addi	r4,r4,12164
  80804c:	080b7900 	call	80b790 <__assert_func>
    s += 10;
  808050:	ac000284 	addi	r16,r21,10
  i = 9;
  808054:	04c00244 	movi	r19,9
  808058:	003fd306 	br	807fa8 <__s2b+0xe0>
      x = 1 << k;
  80805c:	04000044 	movi	r16,1
  808060:	8520983a 	sll	r16,r16,r20
      rv = (_Bigint *) _calloc_r (ptr,
  808064:	01400044 	movi	r5,1
  808068:	9009883a 	mov	r4,r18
				  sizeof (_Bigint) +
  80806c:	81800144 	addi	r6,r16,5
      rv = (_Bigint *) _calloc_r (ptr,
  808070:	300c90ba 	slli	r6,r6,2
  808074:	080b8040 	call	80b804 <_calloc_r>
  808078:	100b883a 	mov	r5,r2
      if (rv == NULL) return NULL;
  80807c:	103fed26 	beq	r2,zero,808034 <__s2b+0x16c>
      rv->_k = k;
  808080:	15000115 	stw	r20,4(r2)
      rv->_maxwds = x;
  808084:	14000215 	stw	r16,8(r2)
  808088:	003fb306 	br	807f58 <__s2b+0x90>

0080808c <__hi0bits>:
int
hi0bits (register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
  80808c:	20bfffec 	andhi	r2,r4,65535
  808090:	1000141e 	bne	r2,zero,8080e4 <__hi0bits+0x58>
    {
      k = 16;
      x <<= 16;
  808094:	2008943a 	slli	r4,r4,16
  808098:	01400604 	movi	r5,24
      k = 16;
  80809c:	00800404 	movi	r2,16
    }
  if (!(x & 0xff000000))
  8080a0:	20ffc02c 	andhi	r3,r4,65280
  8080a4:	1800021e 	bne	r3,zero,8080b0 <__hi0bits+0x24>
    {
      k += 8;
      x <<= 8;
  8080a8:	2008923a 	slli	r4,r4,8
      k += 8;
  8080ac:	2805883a 	mov	r2,r5
    }
  if (!(x & 0xf0000000))
  8080b0:	20fc002c 	andhi	r3,r4,61440
  8080b4:	1800021e 	bne	r3,zero,8080c0 <__hi0bits+0x34>
    {
      k += 4;
      x <<= 4;
  8080b8:	2008913a 	slli	r4,r4,4
      k += 4;
  8080bc:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0xc0000000))
  8080c0:	20f0002c 	andhi	r3,r4,49152
  8080c4:	1800021e 	bne	r3,zero,8080d0 <__hi0bits+0x44>
    {
      k += 2;
      x <<= 2;
  8080c8:	200890ba 	slli	r4,r4,2
      k += 2;
  8080cc:	10800084 	addi	r2,r2,2
    }
  if (!(x & 0x80000000))
  8080d0:	20000316 	blt	r4,zero,8080e0 <__hi0bits+0x54>
    {
      k++;
      if (!(x & 0x40000000))
  8080d4:	2110002c 	andhi	r4,r4,16384
      k++;
  8080d8:	10800044 	addi	r2,r2,1
      if (!(x & 0x40000000))
  8080dc:	20000426 	beq	r4,zero,8080f0 <__hi0bits+0x64>
	return 32;
    }
  return k;
}
  8080e0:	f800283a 	ret
  8080e4:	01400204 	movi	r5,8
  register int k = 0;
  8080e8:	0005883a 	mov	r2,zero
  8080ec:	003fec06 	br	8080a0 <__hi0bits+0x14>
	return 32;
  8080f0:	00800804 	movi	r2,32
}
  8080f4:	f800283a 	ret

008080f8 <__lo0bits>:

int
lo0bits (__ULong *y)
{
  register int k;
  register __ULong x = *y;
  8080f8:	20c00017 	ldw	r3,0(r4)

  if (x & 7)
  8080fc:	188001cc 	andi	r2,r3,7
  808100:	10000826 	beq	r2,zero,808124 <__lo0bits+0x2c>
    {
      if (x & 1)
  808104:	1880004c 	andi	r2,r3,1
  808108:	1000211e 	bne	r2,zero,808190 <__lo0bits+0x98>
	return 0;
      if (x & 2)
  80810c:	1880008c 	andi	r2,r3,2
  808110:	10002326 	beq	r2,zero,8081a0 <__lo0bits+0xa8>
	{
	  *y = x >> 1;
  808114:	1806d07a 	srli	r3,r3,1
	  return 1;
  808118:	00800044 	movi	r2,1
	  *y = x >> 1;
  80811c:	20c00015 	stw	r3,0(r4)
	  return 1;
  808120:	f800283a 	ret
	}
      *y = x >> 2;
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
  808124:	18bfffcc 	andi	r2,r3,65535
  808128:	10001526 	beq	r2,zero,808180 <__lo0bits+0x88>
  80812c:	01800204 	movi	r6,8
  k = 0;
  808130:	0005883a 	mov	r2,zero
    {
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
  808134:	19403fcc 	andi	r5,r3,255
  808138:	2800021e 	bne	r5,zero,808144 <__lo0bits+0x4c>
    {
      k += 8;
      x >>= 8;
  80813c:	1806d23a 	srli	r3,r3,8
      k += 8;
  808140:	3005883a 	mov	r2,r6
    }
  if (!(x & 0xf))
  808144:	194003cc 	andi	r5,r3,15
  808148:	2800021e 	bne	r5,zero,808154 <__lo0bits+0x5c>
    {
      k += 4;
      x >>= 4;
  80814c:	1806d13a 	srli	r3,r3,4
      k += 4;
  808150:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0x3))
  808154:	194000cc 	andi	r5,r3,3
  808158:	2800021e 	bne	r5,zero,808164 <__lo0bits+0x6c>
    {
      k += 2;
      x >>= 2;
  80815c:	1806d0ba 	srli	r3,r3,2
      k += 2;
  808160:	10800084 	addi	r2,r2,2
    }
  if (!(x & 1))
  808164:	1940004c 	andi	r5,r3,1
  808168:	2800031e 	bne	r5,zero,808178 <__lo0bits+0x80>
    {
      k++;
      x >>= 1;
  80816c:	1806d07a 	srli	r3,r3,1
      k++;
  808170:	10800044 	addi	r2,r2,1
      if (!x & 1)
  808174:	18000826 	beq	r3,zero,808198 <__lo0bits+0xa0>
	return 32;
    }
  *y = x;
  808178:	20c00015 	stw	r3,0(r4)
  return k;
  80817c:	f800283a 	ret
      x >>= 16;
  808180:	1806d43a 	srli	r3,r3,16
  808184:	01800604 	movi	r6,24
      k = 16;
  808188:	00800404 	movi	r2,16
  80818c:	003fe906 	br	808134 <__lo0bits+0x3c>
	return 0;
  808190:	0005883a 	mov	r2,zero
  808194:	f800283a 	ret
	return 32;
  808198:	00800804 	movi	r2,32
}
  80819c:	f800283a 	ret
      *y = x >> 2;
  8081a0:	1806d0ba 	srli	r3,r3,2
      return 2;
  8081a4:	00800084 	movi	r2,2
      *y = x >> 2;
  8081a8:	20c00015 	stw	r3,0(r4)
      return 2;
  8081ac:	f800283a 	ret

008081b0 <__i2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8081b0:	20c01317 	ldw	r3,76(r4)

_Bigint *
i2b (struct _reent * ptr, int i)
{
  8081b4:	defffd04 	addi	sp,sp,-12
  8081b8:	dc400115 	stw	r17,4(sp)
  8081bc:	dc000015 	stw	r16,0(sp)
  8081c0:	dfc00215 	stw	ra,8(sp)
  8081c4:	2021883a 	mov	r16,r4
  8081c8:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8081cc:	18000d26 	beq	r3,zero,808204 <__i2b+0x54>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8081d0:	18800117 	ldw	r2,4(r3)
  8081d4:	10001826 	beq	r2,zero,808238 <__i2b+0x88>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8081d8:	11000017 	ldw	r4,0(r2)
  8081dc:	19000115 	stw	r4,4(r3)
  _Bigint *b;

  b = eBalloc (ptr, 1);
  b->_x[0] = i;
  b->_wds = 1;
  8081e0:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  8081e4:	10000315 	stw	zero,12(r2)
  b->_x[0] = i;
  8081e8:	14400515 	stw	r17,20(r2)
  b->_wds = 1;
  8081ec:	10c00415 	stw	r3,16(r2)
  return b;
}
  8081f0:	dfc00217 	ldw	ra,8(sp)
  8081f4:	dc400117 	ldw	r17,4(sp)
  8081f8:	dc000017 	ldw	r16,0(sp)
  8081fc:	dec00304 	addi	sp,sp,12
  808200:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808204:	01800844 	movi	r6,33
  808208:	01400104 	movi	r5,4
  80820c:	080b8040 	call	80b804 <_calloc_r>
  808210:	80801315 	stw	r2,76(r16)
  808214:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808218:	103fed1e 	bne	r2,zero,8081d0 <__i2b+0x20>
  b = eBalloc (ptr, 1);
  80821c:	01c02074 	movhi	r7,129
  808220:	01002074 	movhi	r4,129
  808224:	39cbbe04 	addi	r7,r7,12024
  808228:	000d883a 	mov	r6,zero
  80822c:	01405004 	movi	r5,320
  808230:	210be104 	addi	r4,r4,12164
  808234:	080b7900 	call	80b790 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  808238:	01800704 	movi	r6,28
  80823c:	01400044 	movi	r5,1
  808240:	8009883a 	mov	r4,r16
  808244:	080b8040 	call	80b804 <_calloc_r>
      if (rv == NULL) return NULL;
  808248:	103ff426 	beq	r2,zero,80821c <__i2b+0x6c>
      rv->_k = k;
  80824c:	00c00044 	movi	r3,1
  808250:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  808254:	00c00084 	movi	r3,2
  808258:	10c00215 	stw	r3,8(r2)
  80825c:	003fe006 	br	8081e0 <__i2b+0x30>

00808260 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
  808260:	defff004 	addi	sp,sp,-64
  808264:	dd800c15 	stw	r22,48(sp)
  808268:	dc400715 	stw	r17,28(sp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
  80826c:	2d800417 	ldw	r22,16(r5)
  808270:	34400417 	ldw	r17,16(r6)
{
  808274:	dc800815 	stw	r18,32(sp)
  808278:	dc000615 	stw	r16,24(sp)
  80827c:	dfc00f15 	stw	ra,60(sp)
  808280:	df000e15 	stw	fp,56(sp)
  808284:	ddc00d15 	stw	r23,52(sp)
  808288:	dd400b15 	stw	r21,44(sp)
  80828c:	dd000a15 	stw	r20,40(sp)
  808290:	dcc00915 	stw	r19,36(sp)
  808294:	2825883a 	mov	r18,r5
  808298:	3021883a 	mov	r16,r6
  if (a->_wds < b->_wds)
  80829c:	b4400516 	blt	r22,r17,8082b4 <__multiply+0x54>
  8082a0:	8807883a 	mov	r3,r17
  8082a4:	2821883a 	mov	r16,r5
  8082a8:	b023883a 	mov	r17,r22
  8082ac:	3025883a 	mov	r18,r6
  8082b0:	182d883a 	mov	r22,r3
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
  8082b4:	80800217 	ldw	r2,8(r16)
  wc = wa + wb;
  8082b8:	8d87883a 	add	r3,r17,r22
  8082bc:	d8c00015 	stw	r3,0(sp)
  k = a->_k;
  8082c0:	84c00117 	ldw	r19,4(r16)
  if (wc > a->_maxwds)
  8082c4:	10c0010e 	bge	r2,r3,8082cc <__multiply+0x6c>
    k++;
  8082c8:	9cc00044 	addi	r19,r19,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8082cc:	20801317 	ldw	r2,76(r4)
  8082d0:	10009426 	beq	r2,zero,808524 <__multiply+0x2c4>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8082d4:	980690ba 	slli	r3,r19,2
  8082d8:	10c5883a 	add	r2,r2,r3
  8082dc:	10c00017 	ldw	r3,0(r2)
  8082e0:	d8c00515 	stw	r3,20(sp)
  8082e4:	18009d26 	beq	r3,zero,80855c <__multiply+0x2fc>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8082e8:	18c00017 	ldw	r3,0(r3)
  8082ec:	10c00015 	stw	r3,0(r2)
  c = eBalloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
  8082f0:	d8800017 	ldw	r2,0(sp)
  8082f4:	102690ba 	slli	r19,r2,2
  8082f8:	d8800517 	ldw	r2,20(sp)
  8082fc:	15000504 	addi	r20,r2,20
  rv->_sign = rv->_wds = 0;
  808300:	10000415 	stw	zero,16(r2)
  808304:	10000315 	stw	zero,12(r2)
  for (x = c->_x, xa = x + wc; x < xa; x++)
  808308:	a4c5883a 	add	r2,r20,r19
  80830c:	d8800115 	stw	r2,4(sp)
  808310:	a080092e 	bgeu	r20,r2,808338 <__multiply+0xd8>
    *x = 0;
  808314:	d8c00517 	ldw	r3,20(sp)
  808318:	000b883a 	mov	r5,zero
  80831c:	a009883a 	mov	r4,r20
  808320:	10cdc83a 	sub	r6,r2,r3
  808324:	31bffac4 	addi	r6,r6,-21
  808328:	300cd0ba 	srli	r6,r6,2
  80832c:	31800044 	addi	r6,r6,1
  808330:	300c90ba 	slli	r6,r6,2
  808334:	0801b400 	call	801b40 <memset>
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  808338:	b02c90ba 	slli	r22,r22,2
  xae = xa + wa;
  80833c:	882290ba 	slli	r17,r17,2
  xb = b->_x;
  808340:	94800504 	addi	r18,r18,20
  xa = a->_x;
  808344:	80800504 	addi	r2,r16,20
  xbe = xb + wb;
  808348:	9587883a 	add	r3,r18,r22
  xa = a->_x;
  80834c:	d8800315 	stw	r2,12(sp)
  xbe = xb + wb;
  808350:	d8c00215 	stw	r3,8(sp)
  xae = xa + wa;
  808354:	1463883a 	add	r17,r2,r17
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
  808358:	90c0542e 	bgeu	r18,r3,8084ac <__multiply+0x24c>
  80835c:	80800544 	addi	r2,r16,21
  808360:	88806d36 	bltu	r17,r2,808518 <__multiply+0x2b8>
  808364:	8c05c83a 	sub	r2,r17,r16
  808368:	10bffac4 	addi	r2,r2,-21
  80836c:	1004d0ba 	srli	r2,r2,2
  808370:	10800044 	addi	r2,r2,1
  808374:	100490ba 	slli	r2,r2,2
  808378:	d8800415 	stw	r2,16(sp)
  80837c:	00000606 	br	808398 <__multiply+0x138>
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
	  *xc = carry;
	}
      if ((y = *xb >> 16) != 0)
  808380:	102ad43a 	srli	r21,r2,16
  808384:	a800271e 	bne	r21,zero,808424 <__multiply+0x1c4>
  for (; xb < xbe; xb++, xc0++)
  808388:	d8800217 	ldw	r2,8(sp)
  80838c:	94800104 	addi	r18,r18,4
  808390:	a5000104 	addi	r20,r20,4
  808394:	9080452e 	bgeu	r18,r2,8084ac <__multiply+0x24c>
      if ((y = *xb & 0xffff) != 0)
  808398:	90800017 	ldw	r2,0(r18)
  80839c:	15ffffcc 	andi	r23,r2,65535
  8083a0:	b83ff726 	beq	r23,zero,808380 <__multiply+0x120>
	  x = xa;
  8083a4:	dd400317 	ldw	r21,12(sp)
  8083a8:	a02d883a 	mov	r22,r20
	  carry = 0;
  8083ac:	0027883a 	mov	r19,zero
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8083b0:	af000017 	ldw	fp,0(r21)
  8083b4:	b4000017 	ldw	r16,0(r22)
  8083b8:	b80b883a 	mov	r5,r23
  8083bc:	e13fffcc 	andi	r4,fp,65535
  8083c0:	080d8900 	call	80d890 <__mulsi3>
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083c4:	e008d43a 	srli	r4,fp,16
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8083c8:	823fffcc 	andi	r8,r16,65535
  8083cc:	1205883a 	add	r2,r2,r8
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083d0:	b80b883a 	mov	r5,r23
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8083d4:	14e7883a 	add	r19,r2,r19
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083d8:	8020d43a 	srli	r16,r16,16
  8083dc:	080d8900 	call	80d890 <__mulsi3>
	      carry = z >> 16;
  8083e0:	9808d43a 	srli	r4,r19,16
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083e4:	1405883a 	add	r2,r2,r16
	      Storeinc (xc, z2, z);
  8083e8:	98ffffcc 	andi	r3,r19,65535
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083ec:	1105883a 	add	r2,r2,r4
	      Storeinc (xc, z2, z);
  8083f0:	1008943a 	slli	r4,r2,16
  8083f4:	b5800104 	addi	r22,r22,4
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8083f8:	ad400104 	addi	r21,r21,4
	      Storeinc (xc, z2, z);
  8083fc:	20c6b03a 	or	r3,r4,r3
  808400:	b0ffff15 	stw	r3,-4(r22)
	      carry = z2 >> 16;
  808404:	1026d43a 	srli	r19,r2,16
	  while (x < xae);
  808408:	ac7fe936 	bltu	r21,r17,8083b0 <__multiply+0x150>
	  *xc = carry;
  80840c:	d8800417 	ldw	r2,16(sp)
  808410:	a085883a 	add	r2,r20,r2
  808414:	14c00015 	stw	r19,0(r2)
      if ((y = *xb >> 16) != 0)
  808418:	90800017 	ldw	r2,0(r18)
  80841c:	102ad43a 	srli	r21,r2,16
  808420:	a83fd926 	beq	r21,zero,808388 <__multiply+0x128>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
  808424:	a7000017 	ldw	fp,0(r20)
	  x = xa;
  808428:	ddc00317 	ldw	r23,12(sp)
	  z2 = *xc;
  80842c:	a027883a 	mov	r19,r20
  808430:	e021883a 	mov	r16,fp
	  carry = 0;
  808434:	002d883a 	mov	r22,zero
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  808438:	b900000b 	ldhu	r4,0(r23)
  80843c:	a80b883a 	mov	r5,r21
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
  808440:	9cc00104 	addi	r19,r19,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  808444:	080d8900 	call	80d890 <__mulsi3>
  808448:	800cd43a 	srli	r6,r16,16
	      Storeinc (xc, z, z2);
  80844c:	e0ffffcc 	andi	r3,fp,65535
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808450:	bdc00104 	addi	r23,r23,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  808454:	118d883a 	add	r6,r2,r6
  808458:	35ad883a 	add	r22,r6,r22
	      Storeinc (xc, z, z2);
  80845c:	b004943a 	slli	r2,r22,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808460:	9c000017 	ldw	r16,0(r19)
  808464:	a80b883a 	mov	r5,r21
	      Storeinc (xc, z, z2);
  808468:	10c6b03a 	or	r3,r2,r3
  80846c:	98ffff15 	stw	r3,-4(r19)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808470:	b93fff8b 	ldhu	r4,-2(r23)
  808474:	080d8900 	call	80d890 <__mulsi3>
	      carry = z >> 16;
  808478:	b00cd43a 	srli	r6,r22,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  80847c:	80ffffcc 	andi	r3,r16,65535
  808480:	10c7883a 	add	r3,r2,r3
  808484:	19b9883a 	add	fp,r3,r6
	      carry = z2 >> 16;
  808488:	e02cd43a 	srli	r22,fp,16
	    }
	  while (x < xae);
  80848c:	bc7fea36 	bltu	r23,r17,808438 <__multiply+0x1d8>
	  *xc = z2;
  808490:	d8800417 	ldw	r2,16(sp)
  for (; xb < xbe; xb++, xc0++)
  808494:	94800104 	addi	r18,r18,4
	  *xc = z2;
  808498:	a085883a 	add	r2,r20,r2
  80849c:	17000015 	stw	fp,0(r2)
  for (; xb < xbe; xb++, xc0++)
  8084a0:	d8800217 	ldw	r2,8(sp)
  8084a4:	a5000104 	addi	r20,r20,4
  8084a8:	90bfbb36 	bltu	r18,r2,808398 <__multiply+0x138>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
  8084ac:	d8800017 	ldw	r2,0(sp)
  8084b0:	00800516 	blt	zero,r2,8084c8 <__multiply+0x268>
  8084b4:	00000906 	br	8084dc <__multiply+0x27c>
  8084b8:	d8800017 	ldw	r2,0(sp)
  8084bc:	10bfffc4 	addi	r2,r2,-1
  8084c0:	d8800015 	stw	r2,0(sp)
  8084c4:	10000526 	beq	r2,zero,8084dc <__multiply+0x27c>
  8084c8:	d8c00117 	ldw	r3,4(sp)
  8084cc:	18bfff17 	ldw	r2,-4(r3)
  8084d0:	18ffff04 	addi	r3,r3,-4
  8084d4:	d8c00115 	stw	r3,4(sp)
  8084d8:	103ff726 	beq	r2,zero,8084b8 <__multiply+0x258>
  c->_wds = wc;
  8084dc:	d8800517 	ldw	r2,20(sp)
  8084e0:	d8c00017 	ldw	r3,0(sp)
  8084e4:	10c00415 	stw	r3,16(r2)
  return c;
}
  8084e8:	dfc00f17 	ldw	ra,60(sp)
  8084ec:	df000e17 	ldw	fp,56(sp)
  8084f0:	ddc00d17 	ldw	r23,52(sp)
  8084f4:	dd800c17 	ldw	r22,48(sp)
  8084f8:	dd400b17 	ldw	r21,44(sp)
  8084fc:	dd000a17 	ldw	r20,40(sp)
  808500:	dcc00917 	ldw	r19,36(sp)
  808504:	dc800817 	ldw	r18,32(sp)
  808508:	dc400717 	ldw	r17,28(sp)
  80850c:	dc000617 	ldw	r16,24(sp)
  808510:	dec01004 	addi	sp,sp,64
  808514:	f800283a 	ret
  808518:	00800104 	movi	r2,4
  80851c:	d8800415 	stw	r2,16(sp)
  808520:	003f9d06 	br	808398 <__multiply+0x138>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808524:	01800844 	movi	r6,33
  808528:	01400104 	movi	r5,4
  80852c:	d9000115 	stw	r4,4(sp)
  808530:	080b8040 	call	80b804 <_calloc_r>
  808534:	d9000117 	ldw	r4,4(sp)
  808538:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  80853c:	103f651e 	bne	r2,zero,8082d4 <__multiply+0x74>
  c = eBalloc (ptr, k);
  808540:	01c02074 	movhi	r7,129
  808544:	01002074 	movhi	r4,129
  808548:	39cbbe04 	addi	r7,r7,12024
  80854c:	000d883a 	mov	r6,zero
  808550:	01405744 	movi	r5,349
  808554:	210be104 	addi	r4,r4,12164
  808558:	080b7900 	call	80b790 <__assert_func>
      x = 1 << k;
  80855c:	05000044 	movi	r20,1
  808560:	a4e8983a 	sll	r20,r20,r19
      rv = (_Bigint *) _calloc_r (ptr,
  808564:	01400044 	movi	r5,1
				  sizeof (_Bigint) +
  808568:	a1800144 	addi	r6,r20,5
      rv = (_Bigint *) _calloc_r (ptr,
  80856c:	300c90ba 	slli	r6,r6,2
  808570:	080b8040 	call	80b804 <_calloc_r>
  808574:	d8800515 	stw	r2,20(sp)
      if (rv == NULL) return NULL;
  808578:	103ff126 	beq	r2,zero,808540 <__multiply+0x2e0>
      rv->_k = k;
  80857c:	14c00115 	stw	r19,4(r2)
      rv->_maxwds = x;
  808580:	15000215 	stw	r20,8(r2)
  808584:	003f5a06 	br	8082f0 <__multiply+0x90>

00808588 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
  808588:	defffb04 	addi	sp,sp,-20
  80858c:	dcc00315 	stw	r19,12(sp)
  808590:	dc000015 	stw	r16,0(sp)
  808594:	dfc00415 	stw	ra,16(sp)
  808598:	dc800215 	stw	r18,8(sp)
  80859c:	dc400115 	stw	r17,4(sp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
  8085a0:	308000cc 	andi	r2,r6,3
{
  8085a4:	3021883a 	mov	r16,r6
  8085a8:	2027883a 	mov	r19,r4
  if ((i = k & 3) != 0)
  8085ac:	10002d1e 	bne	r2,zero,808664 <__pow5mult+0xdc>
  8085b0:	2825883a 	mov	r18,r5
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
  8085b4:	8021d0ba 	srai	r16,r16,2
  8085b8:	80001926 	beq	r16,zero,808620 <__pow5mult+0x98>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
  8085bc:	9c401217 	ldw	r17,72(r19)
  8085c0:	8800061e 	bne	r17,zero,8085dc <__pow5mult+0x54>
  8085c4:	00002f06 	br	808684 <__pow5mult+0xfc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
  8085c8:	8021d07a 	srai	r16,r16,1
  8085cc:	80001426 	beq	r16,zero,808620 <__pow5mult+0x98>
	break;
      if (!(p51 = p5->_next))
  8085d0:	88800017 	ldw	r2,0(r17)
  8085d4:	10001a26 	beq	r2,zero,808640 <__pow5mult+0xb8>
{
  8085d8:	1023883a 	mov	r17,r2
      if (k & 1)
  8085dc:	8080004c 	andi	r2,r16,1
  8085e0:	103ff926 	beq	r2,zero,8085c8 <__pow5mult+0x40>
	  b1 = mult (ptr, b, p5);
  8085e4:	880d883a 	mov	r6,r17
  8085e8:	900b883a 	mov	r5,r18
  8085ec:	9809883a 	mov	r4,r19
  8085f0:	08082600 	call	808260 <__multiply>
  if (v)
  8085f4:	90001926 	beq	r18,zero,80865c <__pow5mult+0xd4>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8085f8:	91400117 	ldw	r5,4(r18)
  8085fc:	98c01317 	ldw	r3,76(r19)
      if (!(k >>= 1))
  808600:	8021d07a 	srai	r16,r16,1
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808604:	280a90ba 	slli	r5,r5,2
  808608:	1947883a 	add	r3,r3,r5
  80860c:	19000017 	ldw	r4,0(r3)
  808610:	91000015 	stw	r4,0(r18)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808614:	1c800015 	stw	r18,0(r3)
	  b = b1;
  808618:	1025883a 	mov	r18,r2
      if (!(k >>= 1))
  80861c:	803fec1e 	bne	r16,zero,8085d0 <__pow5mult+0x48>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
  808620:	9005883a 	mov	r2,r18
  808624:	dfc00417 	ldw	ra,16(sp)
  808628:	dcc00317 	ldw	r19,12(sp)
  80862c:	dc800217 	ldw	r18,8(sp)
  808630:	dc400117 	ldw	r17,4(sp)
  808634:	dc000017 	ldw	r16,0(sp)
  808638:	dec00504 	addi	sp,sp,20
  80863c:	f800283a 	ret
	  p51 = p5->_next = mult (ptr, p5, p5);
  808640:	880d883a 	mov	r6,r17
  808644:	880b883a 	mov	r5,r17
  808648:	9809883a 	mov	r4,r19
  80864c:	08082600 	call	808260 <__multiply>
  808650:	88800015 	stw	r2,0(r17)
	  p51->_next = 0;
  808654:	10000015 	stw	zero,0(r2)
  808658:	003fdf06 	br	8085d8 <__pow5mult+0x50>
	  b = b1;
  80865c:	1025883a 	mov	r18,r2
  808660:	003fd906 	br	8085c8 <__pow5mult+0x40>
    b = multadd (ptr, b, p05[i - 1], 0);
  808664:	100490ba 	slli	r2,r2,2
  808668:	00c02074 	movhi	r3,129
  80866c:	000f883a 	mov	r7,zero
  808670:	10c7883a 	add	r3,r2,r3
  808674:	198bfa17 	ldw	r6,12264(r3)
  808678:	0807d140 	call	807d14 <__multadd>
  80867c:	1025883a 	mov	r18,r2
  808680:	003fcc06 	br	8085b4 <__pow5mult+0x2c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808684:	98801317 	ldw	r2,76(r19)
  808688:	10000c26 	beq	r2,zero,8086bc <__pow5mult+0x134>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  80868c:	14400117 	ldw	r17,4(r2)
  808690:	88001726 	beq	r17,zero,8086f0 <__pow5mult+0x168>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808694:	88c00017 	ldw	r3,0(r17)
  808698:	10c00115 	stw	r3,4(r2)
  b->_x[0] = i;
  80869c:	00809c44 	movi	r2,625
  8086a0:	88800515 	stw	r2,20(r17)
  b->_wds = 1;
  8086a4:	00800044 	movi	r2,1
  rv->_sign = rv->_wds = 0;
  8086a8:	88000315 	stw	zero,12(r17)
  b->_wds = 1;
  8086ac:	88800415 	stw	r2,16(r17)
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
  8086b0:	9c401215 	stw	r17,72(r19)
      p5->_next = 0;
  8086b4:	88000015 	stw	zero,0(r17)
  8086b8:	003fc806 	br	8085dc <__pow5mult+0x54>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8086bc:	01800844 	movi	r6,33
  8086c0:	01400104 	movi	r5,4
  8086c4:	9809883a 	mov	r4,r19
  8086c8:	080b8040 	call	80b804 <_calloc_r>
  8086cc:	98801315 	stw	r2,76(r19)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8086d0:	103fee1e 	bne	r2,zero,80868c <__pow5mult+0x104>
  b = eBalloc (ptr, 1);
  8086d4:	01c02074 	movhi	r7,129
  8086d8:	01002074 	movhi	r4,129
  8086dc:	39cbbe04 	addi	r7,r7,12024
  8086e0:	000d883a 	mov	r6,zero
  8086e4:	01405004 	movi	r5,320
  8086e8:	210be104 	addi	r4,r4,12164
  8086ec:	080b7900 	call	80b790 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  8086f0:	01800704 	movi	r6,28
  8086f4:	01400044 	movi	r5,1
  8086f8:	9809883a 	mov	r4,r19
  8086fc:	080b8040 	call	80b804 <_calloc_r>
  808700:	1023883a 	mov	r17,r2
      if (rv == NULL) return NULL;
  808704:	103ff326 	beq	r2,zero,8086d4 <__pow5mult+0x14c>
      rv->_k = k;
  808708:	00800044 	movi	r2,1
  80870c:	88800115 	stw	r2,4(r17)
      rv->_maxwds = x;
  808710:	00800084 	movi	r2,2
  808714:	88800215 	stw	r2,8(r17)
  808718:	003fe006 	br	80869c <__pow5mult+0x114>

0080871c <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
  80871c:	defff604 	addi	sp,sp,-40
  808720:	ddc00715 	stw	r23,28(sp)
  808724:	dc800215 	stw	r18,8(sp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
  808728:	302fd17a 	srai	r23,r6,5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  80872c:	2c800417 	ldw	r18,16(r5)
  for (i = b->_maxwds; n1 > i; i <<= 1)
  808730:	28800217 	ldw	r2,8(r5)
{
  808734:	dd800615 	stw	r22,24(sp)
  n1 = n + b->_wds + 1;
  808738:	bca5883a 	add	r18,r23,r18
{
  80873c:	dd400515 	stw	r21,20(sp)
  808740:	dcc00315 	stw	r19,12(sp)
  808744:	dc400115 	stw	r17,4(sp)
  808748:	dc000015 	stw	r16,0(sp)
  80874c:	dfc00915 	stw	ra,36(sp)
  808750:	df000815 	stw	fp,32(sp)
  808754:	dd000415 	stw	r20,16(sp)
  n1 = n + b->_wds + 1;
  808758:	94400044 	addi	r17,r18,1
  k1 = b->_k;
  80875c:	2d400117 	ldw	r21,4(r5)
{
  808760:	2821883a 	mov	r16,r5
  808764:	302d883a 	mov	r22,r6
  808768:	2027883a 	mov	r19,r4
  for (i = b->_maxwds; n1 > i; i <<= 1)
  80876c:	1440030e 	bge	r2,r17,80877c <__lshift+0x60>
  808770:	1085883a 	add	r2,r2,r2
    k1++;
  808774:	ad400044 	addi	r21,r21,1
  for (i = b->_maxwds; n1 > i; i <<= 1)
  808778:	147ffd16 	blt	r2,r17,808770 <__lshift+0x54>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  80877c:	98801317 	ldw	r2,76(r19)
  808780:	10004b26 	beq	r2,zero,8088b0 <__lshift+0x194>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808784:	a80690ba 	slli	r3,r21,2
  808788:	10c5883a 	add	r2,r2,r3
  80878c:	15000017 	ldw	r20,0(r2)
  808790:	a0005426 	beq	r20,zero,8088e4 <__lshift+0x1c8>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808794:	a0c00017 	ldw	r3,0(r20)
  808798:	10c00015 	stw	r3,0(r2)
  rv->_sign = rv->_wds = 0;
  80879c:	a0000415 	stw	zero,16(r20)
  8087a0:	a0000315 	stw	zero,12(r20)
  b1 = eBalloc (ptr, k1);
  x1 = b1->_x;
  8087a4:	a1000504 	addi	r4,r20,20
  for (i = 0; i < n; i++)
  8087a8:	05c0050e 	bge	zero,r23,8087c0 <__lshift+0xa4>
    *x1++ = 0;
  8087ac:	b82e90ba 	slli	r23,r23,2
  8087b0:	000b883a 	mov	r5,zero
  8087b4:	b80d883a 	mov	r6,r23
  8087b8:	0801b400 	call	801b40 <memset>
  8087bc:	15c9883a 	add	r4,r2,r23
  x = b->_x;
  xe = x + b->_wds;
  8087c0:	82000417 	ldw	r8,16(r16)
  x = b->_x;
  8087c4:	80c00504 	addi	r3,r16,20
#ifdef Pack_32
  if (k &= 0x1f)
  8087c8:	b14007cc 	andi	r5,r22,31
  xe = x + b->_wds;
  8087cc:	401090ba 	slli	r8,r8,2
  8087d0:	1a11883a 	add	r8,r3,r8
  if (k &= 0x1f)
  8087d4:	28002e26 	beq	r5,zero,808890 <__lshift+0x174>
    {
      k1 = 32 - k;
  8087d8:	02400804 	movi	r9,32
  8087dc:	4953c83a 	sub	r9,r9,r5
  8087e0:	2005883a 	mov	r2,r4
      z = 0;
  8087e4:	000f883a 	mov	r7,zero
      do
	{
	  *x1++ = *x << k | z;
  8087e8:	19800017 	ldw	r6,0(r3)
  8087ec:	10800104 	addi	r2,r2,4
	  z = *x++ >> k1;
  8087f0:	18c00104 	addi	r3,r3,4
	  *x1++ = *x << k | z;
  8087f4:	314c983a 	sll	r6,r6,r5
  8087f8:	31ccb03a 	or	r6,r6,r7
  8087fc:	11bfff15 	stw	r6,-4(r2)
	  z = *x++ >> k1;
  808800:	19bfff17 	ldw	r6,-4(r3)
  808804:	324ed83a 	srl	r7,r6,r9
	}
      while (x < xe);
  808808:	1a3ff736 	bltu	r3,r8,8087e8 <__lshift+0xcc>
	  *x1++ = *x << k | z;
  80880c:	80800544 	addi	r2,r16,21
  808810:	40802536 	bltu	r8,r2,8088a8 <__lshift+0x18c>
  808814:	4407c83a 	sub	r3,r8,r16
  808818:	18fffac4 	addi	r3,r3,-21
  80881c:	1806d0ba 	srli	r3,r3,2
  808820:	18c00044 	addi	r3,r3,1
  808824:	180690ba 	slli	r3,r3,2
      if ((*x1 = z) != 0)
  808828:	20c7883a 	add	r3,r4,r3
  80882c:	19c00015 	stw	r7,0(r3)
  808830:	38000126 	beq	r7,zero,808838 <__lshift+0x11c>
  n1 = n + b->_wds + 1;
  808834:	8825883a 	mov	r18,r17
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  808838:	a4800415 	stw	r18,16(r20)
  if (v)
  80883c:	80000726 	beq	r16,zero,80885c <__lshift+0x140>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808840:	80c00117 	ldw	r3,4(r16)
  808844:	98801317 	ldw	r2,76(r19)
  808848:	180690ba 	slli	r3,r3,2
  80884c:	10c5883a 	add	r2,r2,r3
  808850:	10c00017 	ldw	r3,0(r2)
  808854:	80c00015 	stw	r3,0(r16)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808858:	14000015 	stw	r16,0(r2)
  Bfree (ptr, b);
  return b1;
}
  80885c:	a005883a 	mov	r2,r20
  808860:	dfc00917 	ldw	ra,36(sp)
  808864:	df000817 	ldw	fp,32(sp)
  808868:	ddc00717 	ldw	r23,28(sp)
  80886c:	dd800617 	ldw	r22,24(sp)
  808870:	dd400517 	ldw	r21,20(sp)
  808874:	dd000417 	ldw	r20,16(sp)
  808878:	dcc00317 	ldw	r19,12(sp)
  80887c:	dc800217 	ldw	r18,8(sp)
  808880:	dc400117 	ldw	r17,4(sp)
  808884:	dc000017 	ldw	r16,0(sp)
  808888:	dec00a04 	addi	sp,sp,40
  80888c:	f800283a 	ret
      *x1++ = *x++;
  808890:	18800017 	ldw	r2,0(r3)
  808894:	18c00104 	addi	r3,r3,4
  808898:	21000104 	addi	r4,r4,4
  80889c:	20bfff15 	stw	r2,-4(r4)
    while (x < xe);
  8088a0:	1a3ffb36 	bltu	r3,r8,808890 <__lshift+0x174>
  8088a4:	003fe406 	br	808838 <__lshift+0x11c>
	  *x1++ = *x << k | z;
  8088a8:	00c00104 	movi	r3,4
  8088ac:	003fde06 	br	808828 <__lshift+0x10c>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8088b0:	01800844 	movi	r6,33
  8088b4:	01400104 	movi	r5,4
  8088b8:	9809883a 	mov	r4,r19
  8088bc:	080b8040 	call	80b804 <_calloc_r>
  8088c0:	98801315 	stw	r2,76(r19)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8088c4:	103faf1e 	bne	r2,zero,808784 <__lshift+0x68>
  b1 = eBalloc (ptr, k1);
  8088c8:	01c02074 	movhi	r7,129
  8088cc:	01002074 	movhi	r4,129
  8088d0:	39cbbe04 	addi	r7,r7,12024
  8088d4:	000d883a 	mov	r6,zero
  8088d8:	01407644 	movi	r5,473
  8088dc:	210be104 	addi	r4,r4,12164
  8088e0:	080b7900 	call	80b790 <__assert_func>
      x = 1 << k;
  8088e4:	07000044 	movi	fp,1
  8088e8:	e578983a 	sll	fp,fp,r21
      rv = (_Bigint *) _calloc_r (ptr,
  8088ec:	01400044 	movi	r5,1
  8088f0:	9809883a 	mov	r4,r19
				  sizeof (_Bigint) +
  8088f4:	e1800144 	addi	r6,fp,5
      rv = (_Bigint *) _calloc_r (ptr,
  8088f8:	300c90ba 	slli	r6,r6,2
  8088fc:	080b8040 	call	80b804 <_calloc_r>
  808900:	1029883a 	mov	r20,r2
      if (rv == NULL) return NULL;
  808904:	103ff026 	beq	r2,zero,8088c8 <__lshift+0x1ac>
      rv->_k = k;
  808908:	15400115 	stw	r21,4(r2)
      rv->_maxwds = x;
  80890c:	17000215 	stw	fp,8(r2)
  808910:	003fa206 	br	80879c <__lshift+0x80>

00808914 <__mcmp>:
cmp (_Bigint * a, _Bigint * b)
{
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  808914:	21800417 	ldw	r6,16(r4)
  j = b->_wds;
  808918:	28c00417 	ldw	r3,16(r5)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
  80891c:	30c5c83a 	sub	r2,r6,r3
  808920:	30c00e1e 	bne	r6,r3,80895c <__mcmp+0x48>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
  808924:	180690ba 	slli	r3,r3,2
  xa0 = a->_x;
  808928:	21c00504 	addi	r7,r4,20
  xb0 = b->_x;
  80892c:	29400504 	addi	r5,r5,20
  xa = xa0 + j;
  808930:	38c9883a 	add	r4,r7,r3
  xb = xb0 + j;
  808934:	28c7883a 	add	r3,r5,r3
  808938:	00000106 	br	808940 <__mcmp+0x2c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
  80893c:	3900082e 	bgeu	r7,r4,808960 <__mcmp+0x4c>
      if (*--xa != *--xb)
  808940:	21bfff17 	ldw	r6,-4(r4)
  808944:	197fff17 	ldw	r5,-4(r3)
  808948:	213fff04 	addi	r4,r4,-4
  80894c:	18ffff04 	addi	r3,r3,-4
  808950:	317ffa26 	beq	r6,r5,80893c <__mcmp+0x28>
	return *xa < *xb ? -1 : 1;
  808954:	3140032e 	bgeu	r6,r5,808964 <__mcmp+0x50>
  808958:	00bfffc4 	movi	r2,-1
	break;
    }
  return 0;
}
  80895c:	f800283a 	ret
  808960:	f800283a 	ret
	return *xa < *xb ? -1 : 1;
  808964:	00800044 	movi	r2,1
  808968:	f800283a 	ret

0080896c <__mdiff>:
  i = a->_wds;
  80896c:	28800417 	ldw	r2,16(r5)
  j = b->_wds;
  808970:	30c00417 	ldw	r3,16(r6)

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
  808974:	defff904 	addi	sp,sp,-28
  808978:	dc800315 	stw	r18,12(sp)
  80897c:	dc400215 	stw	r17,8(sp)
  808980:	dc000115 	stw	r16,4(sp)
  808984:	dfc00615 	stw	ra,24(sp)
  808988:	dd000515 	stw	r20,20(sp)
  80898c:	dcc00415 	stw	r19,16(sp)
  808990:	2823883a 	mov	r17,r5
  808994:	3021883a 	mov	r16,r6
  if (i -= j)
  808998:	10e5c83a 	sub	r18,r2,r3
  80899c:	10c07d1e 	bne	r2,r3,808b94 <__mdiff+0x228>
  xa = xa0 + j;
  8089a0:	180c90ba 	slli	r6,r3,2
  xa0 = a->_x;
  8089a4:	29400504 	addi	r5,r5,20
  xb0 = b->_x;
  8089a8:	80c00504 	addi	r3,r16,20
  xa = xa0 + j;
  8089ac:	2985883a 	add	r2,r5,r6
  xb = xb0 + j;
  8089b0:	1987883a 	add	r3,r3,r6
  8089b4:	00000106 	br	8089bc <__mdiff+0x50>
      if (xa <= xa0)
  8089b8:	28807d2e 	bgeu	r5,r2,808bb0 <__mdiff+0x244>
      if (*--xa != *--xb)
  8089bc:	11ffff17 	ldw	r7,-4(r2)
  8089c0:	19bfff17 	ldw	r6,-4(r3)
  8089c4:	10bfff04 	addi	r2,r2,-4
  8089c8:	18ffff04 	addi	r3,r3,-4
  8089cc:	39bffa26 	beq	r7,r6,8089b8 <__mdiff+0x4c>
	return *xa < *xb ? -1 : 1;
  8089d0:	39805b36 	bltu	r7,r6,808b40 <__mdiff+0x1d4>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8089d4:	20801317 	ldw	r2,76(r4)
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = eBalloc (ptr, a->_k);
  8089d8:	8cc00117 	ldw	r19,4(r17)
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8089dc:	10005f26 	beq	r2,zero,808b5c <__mdiff+0x1f0>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8089e0:	980690ba 	slli	r3,r19,2
  8089e4:	10c7883a 	add	r3,r2,r3
  8089e8:	18800017 	ldw	r2,0(r3)
  8089ec:	10007b26 	beq	r2,zero,808bdc <__mdiff+0x270>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8089f0:	11000017 	ldw	r4,0(r2)
  8089f4:	19000015 	stw	r4,0(r3)
  rv->_sign = rv->_wds = 0;
  8089f8:	10000415 	stw	zero,16(r2)
  c->_sign = i;
  wa = a->_wds;
  8089fc:	8a000417 	ldw	r8,16(r17)
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
  808a00:	83400417 	ldw	r13,16(r16)
  xa = a->_x;
  808a04:	8b000504 	addi	r12,r17,20
  xae = xa + wa;
  808a08:	400890ba 	slli	r4,r8,2
  xbe = xb + wb;
  808a0c:	681a90ba 	slli	r13,r13,2
  xb = b->_x;
  808a10:	82800504 	addi	r10,r16,20
  xc = c->_x;
  808a14:	13800504 	addi	r14,r2,20
  c->_sign = i;
  808a18:	14800315 	stw	r18,12(r2)
  xae = xa + wa;
  808a1c:	6113883a 	add	r9,r12,r4
  xbe = xb + wb;
  808a20:	535b883a 	add	r13,r10,r13
  xc = c->_x;
  808a24:	701f883a 	mov	r15,r14
  xa = a->_x;
  808a28:	6017883a 	mov	r11,r12
  borrow = 0;
  808a2c:	0007883a 	mov	r3,zero
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  808a30:	59000017 	ldw	r4,0(r11)
  808a34:	51c00017 	ldw	r7,0(r10)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  808a38:	7bc00104 	addi	r15,r15,4
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  808a3c:	217fffcc 	andi	r5,r4,65535
  808a40:	28cb883a 	add	r5,r5,r3
  808a44:	38ffffcc 	andi	r3,r7,65535
  808a48:	28cbc83a 	sub	r5,r5,r3
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808a4c:	380ed43a 	srli	r7,r7,16
  808a50:	2006d43a 	srli	r3,r4,16
      borrow = y >> 16;
  808a54:	2809d43a 	srai	r4,r5,16
      Storeinc (xc, z, y);
  808a58:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808a5c:	19c7c83a 	sub	r3,r3,r7
  808a60:	1907883a 	add	r3,r3,r4
      Storeinc (xc, z, y);
  808a64:	180c943a 	slli	r6,r3,16
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808a68:	52800104 	addi	r10,r10,4
      borrow = z >> 16;
  808a6c:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  808a70:	314ab03a 	or	r5,r6,r5
  808a74:	797fff15 	stw	r5,-4(r15)
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808a78:	5ac00104 	addi	r11,r11,4
    }
  while (xb < xbe);
  808a7c:	537fec36 	bltu	r10,r13,808a30 <__mdiff+0xc4>
  808a80:	6c0fc83a 	sub	r7,r13,r16
  808a84:	39fffac4 	addi	r7,r7,-21
  808a88:	84000544 	addi	r16,r16,21
  808a8c:	380ed0ba 	srli	r7,r7,2
  808a90:	6c004536 	bltu	r13,r16,808ba8 <__mdiff+0x23c>
  808a94:	380890ba 	slli	r4,r7,2
  808a98:	7109883a 	add	r4,r14,r4
  808a9c:	6c004036 	bltu	r13,r16,808ba0 <__mdiff+0x234>
  808aa0:	39800044 	addi	r6,r7,1
  808aa4:	300c90ba 	slli	r6,r6,2
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808aa8:	6199883a 	add	r12,r12,r6
      Storeinc (xc, z, y);
  808aac:	719d883a 	add	r14,r14,r6
  while (xa < xae)
  808ab0:	6240152e 	bgeu	r12,r9,808b08 <__mdiff+0x19c>
      Storeinc (xc, z, y);
  808ab4:	700f883a 	mov	r7,r14
  while (xa < xae)
  808ab8:	600d883a 	mov	r6,r12
    {
      y = (*xa & 0xffff) + borrow;
  808abc:	31000017 	ldw	r4,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  808ac0:	39c00104 	addi	r7,r7,4
      z = (*xa++ >> 16) + borrow;
  808ac4:	31800104 	addi	r6,r6,4
      y = (*xa & 0xffff) + borrow;
  808ac8:	217fffcc 	andi	r5,r4,65535
  808acc:	28cb883a 	add	r5,r5,r3
      borrow = y >> 16;
  808ad0:	2815d43a 	srai	r10,r5,16
      z = (*xa++ >> 16) + borrow;
  808ad4:	2006d43a 	srli	r3,r4,16
      Storeinc (xc, z, y);
  808ad8:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) + borrow;
  808adc:	1a87883a 	add	r3,r3,r10
      Storeinc (xc, z, y);
  808ae0:	1814943a 	slli	r10,r3,16
      borrow = z >> 16;
  808ae4:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  808ae8:	514ab03a 	or	r5,r10,r5
  808aec:	397fff15 	stw	r5,-4(r7)
  while (xa < xae)
  808af0:	327ff236 	bltu	r6,r9,808abc <__mdiff+0x150>
  808af4:	493fffc4 	addi	r4,r9,-1
  808af8:	2309c83a 	sub	r4,r4,r12
  808afc:	2008d0ba 	srli	r4,r4,2
  808b00:	200890ba 	slli	r4,r4,2
  808b04:	7109883a 	add	r4,r14,r4
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
  808b08:	2800041e 	bne	r5,zero,808b1c <__mdiff+0x1b0>
  808b0c:	20ffff17 	ldw	r3,-4(r4)
    wa--;
  808b10:	423fffc4 	addi	r8,r8,-1
  while (!*--xc)
  808b14:	213fff04 	addi	r4,r4,-4
  808b18:	183ffc26 	beq	r3,zero,808b0c <__mdiff+0x1a0>
  c->_wds = wa;
  808b1c:	12000415 	stw	r8,16(r2)
  return c;
}
  808b20:	dfc00617 	ldw	ra,24(sp)
  808b24:	dd000517 	ldw	r20,20(sp)
  808b28:	dcc00417 	ldw	r19,16(sp)
  808b2c:	dc800317 	ldw	r18,12(sp)
  808b30:	dc400217 	ldw	r17,8(sp)
  808b34:	dc000117 	ldw	r16,4(sp)
  808b38:	dec00704 	addi	sp,sp,28
  808b3c:	f800283a 	ret
  if (i < 0)
  808b40:	8805883a 	mov	r2,r17
      a = b;
  808b44:	8023883a 	mov	r17,r16
      b = c;
  808b48:	1021883a 	mov	r16,r2
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808b4c:	20801317 	ldw	r2,76(r4)
  c = eBalloc (ptr, a->_k);
  808b50:	8cc00117 	ldw	r19,4(r17)
      i = 1;
  808b54:	04800044 	movi	r18,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808b58:	103fa11e 	bne	r2,zero,8089e0 <__mdiff+0x74>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808b5c:	01800844 	movi	r6,33
  808b60:	01400104 	movi	r5,4
  808b64:	d9000015 	stw	r4,0(sp)
  808b68:	080b8040 	call	80b804 <_calloc_r>
  808b6c:	d9000017 	ldw	r4,0(sp)
  808b70:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808b74:	103f9a1e 	bne	r2,zero,8089e0 <__mdiff+0x74>
  c = eBalloc (ptr, a->_k);
  808b78:	01c02074 	movhi	r7,129
  808b7c:	01002074 	movhi	r4,129
  808b80:	39cbbe04 	addi	r7,r7,12024
  808b84:	000d883a 	mov	r6,zero
  808b88:	01409004 	movi	r5,576
  808b8c:	210be104 	addi	r4,r4,12164
  808b90:	080b7900 	call	80b790 <__assert_func>
  if (i < 0)
  808b94:	903fea16 	blt	r18,zero,808b40 <__mdiff+0x1d4>
    i = 0;
  808b98:	0025883a 	mov	r18,zero
  808b9c:	003f8d06 	br	8089d4 <__mdiff+0x68>
  808ba0:	01800104 	movi	r6,4
  808ba4:	003fc006 	br	808aa8 <__mdiff+0x13c>
  808ba8:	0009883a 	mov	r4,zero
  808bac:	003fba06 	br	808a98 <__mdiff+0x12c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808bb0:	20c01317 	ldw	r3,76(r4)
  808bb4:	18001326 	beq	r3,zero,808c04 <__mdiff+0x298>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808bb8:	18800017 	ldw	r2,0(r3)
  808bbc:	10002026 	beq	r2,zero,808c40 <__mdiff+0x2d4>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808bc0:	11000017 	ldw	r4,0(r2)
  808bc4:	19000015 	stw	r4,0(r3)
      c->_wds = 1;
  808bc8:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  808bcc:	10000315 	stw	zero,12(r2)
      c->_wds = 1;
  808bd0:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
  808bd4:	10000515 	stw	zero,20(r2)
      return c;
  808bd8:	003fd106 	br	808b20 <__mdiff+0x1b4>
      x = 1 << k;
  808bdc:	05000044 	movi	r20,1
  808be0:	a4e8983a 	sll	r20,r20,r19
      rv = (_Bigint *) _calloc_r (ptr,
  808be4:	01400044 	movi	r5,1
				  sizeof (_Bigint) +
  808be8:	a1800144 	addi	r6,r20,5
      rv = (_Bigint *) _calloc_r (ptr,
  808bec:	300c90ba 	slli	r6,r6,2
  808bf0:	080b8040 	call	80b804 <_calloc_r>
      if (rv == NULL) return NULL;
  808bf4:	103fe026 	beq	r2,zero,808b78 <__mdiff+0x20c>
      rv->_k = k;
  808bf8:	14c00115 	stw	r19,4(r2)
      rv->_maxwds = x;
  808bfc:	15000215 	stw	r20,8(r2)
  808c00:	003f7d06 	br	8089f8 <__mdiff+0x8c>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808c04:	01800844 	movi	r6,33
  808c08:	01400104 	movi	r5,4
  808c0c:	d9000015 	stw	r4,0(sp)
  808c10:	080b8040 	call	80b804 <_calloc_r>
  808c14:	d9000017 	ldw	r4,0(sp)
  808c18:	1007883a 	mov	r3,r2
  808c1c:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808c20:	103fe51e 	bne	r2,zero,808bb8 <__mdiff+0x24c>
      c = eBalloc (ptr, 0);
  808c24:	01c02074 	movhi	r7,129
  808c28:	01002074 	movhi	r4,129
  808c2c:	39cbbe04 	addi	r7,r7,12024
  808c30:	000d883a 	mov	r6,zero
  808c34:	01408c84 	movi	r5,562
  808c38:	210be104 	addi	r4,r4,12164
  808c3c:	080b7900 	call	80b790 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  808c40:	01800604 	movi	r6,24
  808c44:	01400044 	movi	r5,1
  808c48:	080b8040 	call	80b804 <_calloc_r>
      if (rv == NULL) return NULL;
  808c4c:	103ff526 	beq	r2,zero,808c24 <__mdiff+0x2b8>
      rv->_maxwds = x;
  808c50:	00c00044 	movi	r3,1
      rv->_k = k;
  808c54:	10000115 	stw	zero,4(r2)
      rv->_maxwds = x;
  808c58:	10c00215 	stw	r3,8(r2)
  808c5c:	003fda06 	br	808bc8 <__mdiff+0x25c>

00808c60 <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
  808c60:	28dffc2c 	andhi	r3,r5,32752
  808c64:	017f3034 	movhi	r5,64704
  808c68:	1947883a 	add	r3,r3,r5
#ifndef Sudden_Underflow
  if (L > 0)
  808c6c:	00c0020e 	bge	zero,r3,808c78 <__ulp+0x18>
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
  808c70:	0005883a 	mov	r2,zero
  808c74:	f800283a 	ret
      L = -L >> Exp_shift;
  808c78:	00c7c83a 	sub	r3,zero,r3
  808c7c:	1807d53a 	srai	r3,r3,20
      if (L < Exp_shift)
  808c80:	18800508 	cmpgei	r2,r3,20
  808c84:	1000041e 	bne	r2,zero,808c98 <__ulp+0x38>
	  word0 (a) = 0x80000 >> L;
  808c88:	00800234 	movhi	r2,8
  808c8c:	10c7d83a 	sra	r3,r2,r3
	  word1 (a) = 0;
  808c90:	0005883a 	mov	r2,zero
  808c94:	f800283a 	ret
#endif
	}
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
  808c98:	193ffb04 	addi	r4,r3,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  808c9c:	208007c8 	cmpgei	r2,r4,31
	  word0 (a) = 0;
  808ca0:	0007883a 	mov	r3,zero
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  808ca4:	1000031e 	bne	r2,zero,808cb4 <__ulp+0x54>
  808ca8:	00a00034 	movhi	r2,32768
  808cac:	1104d83a 	srl	r2,r2,r4
  808cb0:	f800283a 	ret
  808cb4:	00800044 	movi	r2,1
#endif
	}
    }
#endif
  return a.d;
}
  808cb8:	f800283a 	ret

00808cbc <__b2d>:
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  808cbc:	22000417 	ldw	r8,16(r4)
  xa0 = a->_x;
  808cc0:	21c00504 	addi	r7,r4,20
  xa = xa0 + a->_wds;
  808cc4:	401090ba 	slli	r8,r8,2
  808cc8:	3a11883a 	add	r8,r7,r8
  y = *--xa;
  808ccc:	427fff17 	ldw	r9,-4(r8)
  808cd0:	42bfff04 	addi	r10,r8,-4
  if (!(x & 0xffff0000))
  808cd4:	48bfffec 	andhi	r2,r9,65535
  808cd8:	10001e1e 	bne	r2,zero,808d54 <__b2d+0x98>
      x <<= 16;
  808cdc:	480c943a 	slli	r6,r9,16
  808ce0:	00c00604 	movi	r3,24
      k = 16;
  808ce4:	01000404 	movi	r4,16
  if (!(x & 0xff000000))
  808ce8:	30bfc02c 	andhi	r2,r6,65280
  808cec:	1000021e 	bne	r2,zero,808cf8 <__b2d+0x3c>
      x <<= 8;
  808cf0:	300c923a 	slli	r6,r6,8
      k += 8;
  808cf4:	1809883a 	mov	r4,r3
  if (!(x & 0xf0000000))
  808cf8:	30bc002c 	andhi	r2,r6,61440
  808cfc:	1000021e 	bne	r2,zero,808d08 <__b2d+0x4c>
      x <<= 4;
  808d00:	300c913a 	slli	r6,r6,4
      k += 4;
  808d04:	21000104 	addi	r4,r4,4
  if (!(x & 0xc0000000))
  808d08:	30b0002c 	andhi	r2,r6,49152
  808d0c:	1000021e 	bne	r2,zero,808d18 <__b2d+0x5c>
      x <<= 2;
  808d10:	300c90ba 	slli	r6,r6,2
      k += 2;
  808d14:	21000084 	addi	r4,r4,2
  if (!(x & 0x80000000))
  808d18:	30000316 	blt	r6,zero,808d28 <__b2d+0x6c>
      if (!(x & 0x40000000))
  808d1c:	3190002c 	andhi	r6,r6,16384
      k++;
  808d20:	21000044 	addi	r4,r4,1
      if (!(x & 0x40000000))
  808d24:	30002326 	beq	r6,zero,808db4 <__b2d+0xf8>
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  *e = 32 - k;
  808d28:	00c00804 	movi	r3,32
  808d2c:	1905c83a 	sub	r2,r3,r4
  808d30:	28800015 	stw	r2,0(r5)
#ifdef Pack_32
  if (k < Ebits)
  808d34:	208002c8 	cmpgei	r2,r4,11
  808d38:	10000e26 	beq	r2,zero,808d74 <__b2d+0xb8>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
  808d3c:	213ffd44 	addi	r4,r4,-11
  z = xa > xa0 ? *--xa : 0;
  808d40:	3a80082e 	bgeu	r7,r10,808d64 <__b2d+0xa8>
  808d44:	40bffe17 	ldw	r2,-8(r8)
  if (k -= Ebits)
  808d48:	2000211e 	bne	r4,zero,808dd0 <__b2d+0x114>
      d1 = z << k | y >> (32 - k);
#endif
    }
  else
    {
      d0 = Exp_1 | y;
  808d4c:	48cffc34 	orhi	r3,r9,16368
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
  808d50:	f800283a 	ret
  808d54:	480d883a 	mov	r6,r9
  808d58:	00c00204 	movi	r3,8
  register int k = 0;
  808d5c:	0009883a 	mov	r4,zero
  808d60:	003fe106 	br	808ce8 <__b2d+0x2c>
  if (k -= Ebits)
  808d64:	2000161e 	bne	r4,zero,808dc0 <__b2d+0x104>
  z = xa > xa0 ? *--xa : 0;
  808d68:	0005883a 	mov	r2,zero
      d0 = Exp_1 | y;
  808d6c:	48cffc34 	orhi	r3,r9,16368
  return d.d;
  808d70:	f800283a 	ret
      d0 = Exp_1 | y >> (Ebits - k);
  808d74:	008002c4 	movi	r2,11
  808d78:	1105c83a 	sub	r2,r2,r4
  808d7c:	4886d83a 	srl	r3,r9,r2
  808d80:	18cffc34 	orhi	r3,r3,16368
      w = xa > xa0 ? *--xa : 0;
  808d84:	3a800536 	bltu	r7,r10,808d9c <__b2d+0xe0>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  808d88:	21000544 	addi	r4,r4,21
  808d8c:	4904983a 	sll	r2,r9,r4
  808d90:	000b883a 	mov	r5,zero
  808d94:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  808d98:	f800283a 	ret
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  808d9c:	417ffe17 	ldw	r5,-8(r8)
  808da0:	21000544 	addi	r4,r4,21
  808da4:	288ad83a 	srl	r5,r5,r2
  808da8:	4904983a 	sll	r2,r9,r4
  808dac:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  808db0:	f800283a 	ret
  *e = 32 - k;
  808db4:	28000015 	stw	zero,0(r5)
  z = xa > xa0 ? *--xa : 0;
  808db8:	3a801236 	bltu	r7,r10,808e04 <__b2d+0x148>
  808dbc:	01000544 	movi	r4,21
      d0 = Exp_1 | y << k | z >> (32 - k);
  808dc0:	4908983a 	sll	r4,r9,r4
  808dc4:	0005883a 	mov	r2,zero
  808dc8:	20cffc34 	orhi	r3,r4,16368
      y = xa > xa0 ? *--xa : 0;
  808dcc:	f800283a 	ret
  z = xa > xa0 ? *--xa : 0;
  808dd0:	423ffe04 	addi	r8,r8,-8
      d0 = Exp_1 | y << k | z >> (32 - k);
  808dd4:	190bc83a 	sub	r5,r3,r4
  808dd8:	4906983a 	sll	r3,r9,r4
  808ddc:	1152d83a 	srl	r9,r2,r5
      d1 = z << k | y >> (32 - k);
  808de0:	1104983a 	sll	r2,r2,r4
      d0 = Exp_1 | y << k | z >> (32 - k);
  808de4:	1a48b03a 	or	r4,r3,r9
  808de8:	20cffc34 	orhi	r3,r4,16368
      y = xa > xa0 ? *--xa : 0;
  808dec:	3a00042e 	bgeu	r7,r8,808e00 <__b2d+0x144>
      d1 = z << k | y >> (32 - k);
  808df0:	413fff17 	ldw	r4,-4(r8)
  808df4:	214ad83a 	srl	r5,r4,r5
  808df8:	1144b03a 	or	r2,r2,r5
  808dfc:	f800283a 	ret
}
  808e00:	f800283a 	ret
  z = xa > xa0 ? *--xa : 0;
  808e04:	40bffe17 	ldw	r2,-8(r8)
  808e08:	014002c4 	movi	r5,11
  808e0c:	423ffe04 	addi	r8,r8,-8
  if (k -= Ebits)
  808e10:	01000544 	movi	r4,21
  808e14:	003ff006 	br	808dd8 <__b2d+0x11c>

00808e18 <__d2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808e18:	20c01317 	ldw	r3,76(r4)
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
  808e1c:	defffb04 	addi	sp,sp,-20
  808e20:	dcc00315 	stw	r19,12(sp)
  808e24:	dc800215 	stw	r18,8(sp)
  808e28:	dc400115 	stw	r17,4(sp)
  808e2c:	dc000015 	stw	r16,0(sp)
  808e30:	dfc00415 	stw	ra,16(sp)
  808e34:	2023883a 	mov	r17,r4
  808e38:	2827883a 	mov	r19,r5
  808e3c:	3021883a 	mov	r16,r6
  808e40:	3825883a 	mov	r18,r7
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808e44:	18009a26 	beq	r3,zero,8090b0 <__d2b+0x298>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808e48:	18800117 	ldw	r2,4(r3)
  808e4c:	1000a526 	beq	r2,zero,8090e4 <__d2b+0x2cc>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808e50:	11000017 	ldw	r4,0(r2)
  808e54:	19000115 	stw	r4,4(r3)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  808e58:	8008d53a 	srli	r4,r16,20
  z = d0 & Frac_mask;
  808e5c:	01800434 	movhi	r6,16
  808e60:	31bfffc4 	addi	r6,r6,-1
  rv->_sign = rv->_wds = 0;
  808e64:	10000415 	stw	zero,16(r2)
  808e68:	10000315 	stw	zero,12(r2)
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  808e6c:	2101ffcc 	andi	r4,r4,2047
  z = d0 & Frac_mask;
  808e70:	818c703a 	and	r6,r16,r6
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  808e74:	20000126 	beq	r4,zero,808e7c <__d2b+0x64>
    z |= Exp_msk1;
  808e78:	31800434 	orhi	r6,r6,16
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
  808e7c:	98001f26 	beq	r19,zero,808efc <__d2b+0xe4>
  if (x & 7)
  808e80:	98c001cc 	andi	r3,r19,7
  808e84:	18005e26 	beq	r3,zero,809000 <__d2b+0x1e8>
      if (x & 1)
  808e88:	98c0004c 	andi	r3,r19,1
  808e8c:	1800811e 	bne	r3,zero,809094 <__d2b+0x27c>
      if (x & 2)
  808e90:	98c0008c 	andi	r3,r19,2
  808e94:	1800ab26 	beq	r3,zero,809144 <__d2b+0x32c>
	  *y = x >> 1;
  808e98:	9810d07a 	srli	r8,r19,1
    {
      y = d1;
      k = lo0bits (&y);
      if (k)
	{
         x[0] = y | z << (32 - k);
  808e9c:	300a97fa 	slli	r5,r6,31
	  return 1;
  808ea0:	00c00044 	movi	r3,1
	  z >>= k;
  808ea4:	30ccd83a 	srl	r6,r6,r3
         x[0] = y | z << (32 - k);
  808ea8:	4150b03a 	or	r8,r8,r5
  808eac:	12000515 	stw	r8,20(r2)
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
  808eb0:	11800615 	stw	r6,24(r2)
  808eb4:	30001a26 	beq	r6,zero,808f20 <__d2b+0x108>
  808eb8:	01400084 	movi	r5,2
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
      x[0] = z;
      i = b->_wds = 1;
  808ebc:	11400415 	stw	r5,16(r2)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
  808ec0:	20001a26 	beq	r4,zero,808f2c <__d2b+0x114>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
  808ec4:	213ef344 	addi	r4,r4,-1075
  808ec8:	20c9883a 	add	r4,r4,r3
  808ecc:	91000015 	stw	r4,0(r18)
      *bits = P - k;
  808ed0:	01000d44 	movi	r4,53
  808ed4:	20c7c83a 	sub	r3,r4,r3
  808ed8:	d9000517 	ldw	r4,20(sp)
  808edc:	20c00015 	stw	r3,0(r4)
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
  808ee0:	dfc00417 	ldw	ra,16(sp)
  808ee4:	dcc00317 	ldw	r19,12(sp)
  808ee8:	dc800217 	ldw	r18,8(sp)
  808eec:	dc400117 	ldw	r17,4(sp)
  808ef0:	dc000017 	ldw	r16,0(sp)
  808ef4:	dec00504 	addi	sp,sp,20
  808ef8:	f800283a 	ret
  if (x & 7)
  808efc:	30c001cc 	andi	r3,r6,7
  808f00:	18002926 	beq	r3,zero,808fa8 <__d2b+0x190>
      if (x & 1)
  808f04:	30c0004c 	andi	r3,r6,1
  808f08:	1800601e 	bne	r3,zero,80908c <__d2b+0x274>
      if (x & 2)
  808f0c:	30c0008c 	andi	r3,r6,2
  808f10:	18008926 	beq	r3,zero,809138 <__d2b+0x320>
	  *y = x >> 1;
  808f14:	300cd07a 	srli	r6,r6,1
	  return 1;
  808f18:	00c00844 	movi	r3,33
      x[0] = z;
  808f1c:	11800515 	stw	r6,20(r2)
      i = b->_wds = 1;
  808f20:	01400044 	movi	r5,1
  808f24:	11400415 	stw	r5,16(r2)
  if (de)
  808f28:	203fe61e 	bne	r4,zero,808ec4 <__d2b+0xac>
      *bits = 32 * i - hi0bits (x[i - 1]);
  808f2c:	280890ba 	slli	r4,r5,2
      *e = de - Bias - (P - 1) + 1 + k;
  808f30:	18fef384 	addi	r3,r3,-1074
  808f34:	90c00015 	stw	r3,0(r18)
      *bits = 32 * i - hi0bits (x[i - 1]);
  808f38:	1107883a 	add	r3,r2,r4
  808f3c:	18c00417 	ldw	r3,16(r3)
  808f40:	280a917a 	slli	r5,r5,5
  if (!(x & 0xffff0000))
  808f44:	193fffec 	andhi	r4,r3,65535
  808f48:	2000561e 	bne	r4,zero,8090a4 <__d2b+0x28c>
      x <<= 16;
  808f4c:	1806943a 	slli	r3,r3,16
  808f50:	01c00604 	movi	r7,24
      k = 16;
  808f54:	01000404 	movi	r4,16
  if (!(x & 0xff000000))
  808f58:	19bfc02c 	andhi	r6,r3,65280
  808f5c:	3000021e 	bne	r6,zero,808f68 <__d2b+0x150>
      x <<= 8;
  808f60:	1806923a 	slli	r3,r3,8
      k += 8;
  808f64:	3809883a 	mov	r4,r7
  if (!(x & 0xf0000000))
  808f68:	19bc002c 	andhi	r6,r3,61440
  808f6c:	3000021e 	bne	r6,zero,808f78 <__d2b+0x160>
      x <<= 4;
  808f70:	1806913a 	slli	r3,r3,4
      k += 4;
  808f74:	21000104 	addi	r4,r4,4
  if (!(x & 0xc0000000))
  808f78:	19b0002c 	andhi	r6,r3,49152
  808f7c:	3000021e 	bne	r6,zero,808f88 <__d2b+0x170>
      x <<= 2;
  808f80:	180690ba 	slli	r3,r3,2
      k += 2;
  808f84:	21000084 	addi	r4,r4,2
  if (!(x & 0x80000000))
  808f88:	18000316 	blt	r3,zero,808f98 <__d2b+0x180>
      if (!(x & 0x40000000))
  808f8c:	18d0002c 	andhi	r3,r3,16384
      k++;
  808f90:	21000044 	addi	r4,r4,1
      if (!(x & 0x40000000))
  808f94:	18006626 	beq	r3,zero,809130 <__d2b+0x318>
      *bits = 32 * i - hi0bits (x[i - 1]);
  808f98:	d8c00517 	ldw	r3,20(sp)
  808f9c:	290bc83a 	sub	r5,r5,r4
  808fa0:	19400015 	stw	r5,0(r3)
  return b;
  808fa4:	003fce06 	br	808ee0 <__d2b+0xc8>
  if (!(x & 0xffff))
  808fa8:	30ffffcc 	andi	r3,r6,65535
  808fac:	1800321e 	bne	r3,zero,809078 <__d2b+0x260>
      x >>= 16;
  808fb0:	300ad43a 	srli	r5,r6,16
  808fb4:	02000604 	movi	r8,24
      k = 16;
  808fb8:	00c00404 	movi	r3,16
      x >>= 16;
  808fbc:	280f883a 	mov	r7,r5
  if (!(x & 0xff))
  808fc0:	3800021e 	bne	r7,zero,808fcc <__d2b+0x1b4>
      x >>= 8;
  808fc4:	280ad23a 	srli	r5,r5,8
      k += 8;
  808fc8:	4007883a 	mov	r3,r8
  if (!(x & 0xf))
  808fcc:	29c003cc 	andi	r7,r5,15
  808fd0:	3800021e 	bne	r7,zero,808fdc <__d2b+0x1c4>
      x >>= 4;
  808fd4:	280ad13a 	srli	r5,r5,4
      k += 4;
  808fd8:	18c00104 	addi	r3,r3,4
  if (!(x & 0x3))
  808fdc:	29c000cc 	andi	r7,r5,3
  808fe0:	3800021e 	bne	r7,zero,808fec <__d2b+0x1d4>
      x >>= 2;
  808fe4:	280ad0ba 	srli	r5,r5,2
      k += 2;
  808fe8:	18c00084 	addi	r3,r3,2
  if (!(x & 1))
  808fec:	29c0004c 	andi	r7,r5,1
  808ff0:	38004626 	beq	r7,zero,80910c <__d2b+0x2f4>
      k += 32;
  808ff4:	18c00804 	addi	r3,r3,32
  808ff8:	280d883a 	mov	r6,r5
  808ffc:	003fc706 	br	808f1c <__d2b+0x104>
  if (!(x & 0xffff))
  809000:	98ffffcc 	andi	r3,r19,65535
  809004:	18001826 	beq	r3,zero,809068 <__d2b+0x250>
  809008:	9811883a 	mov	r8,r19
  80900c:	01c00204 	movi	r7,8
  k = 0;
  809010:	0007883a 	mov	r3,zero
  if (!(x & 0xff))
  809014:	41403fcc 	andi	r5,r8,255
  809018:	2800021e 	bne	r5,zero,809024 <__d2b+0x20c>
      x >>= 8;
  80901c:	4010d23a 	srli	r8,r8,8
      k += 8;
  809020:	3807883a 	mov	r3,r7
  if (!(x & 0xf))
  809024:	414003cc 	andi	r5,r8,15
  809028:	2800021e 	bne	r5,zero,809034 <__d2b+0x21c>
      x >>= 4;
  80902c:	4010d13a 	srli	r8,r8,4
      k += 4;
  809030:	18c00104 	addi	r3,r3,4
  if (!(x & 0x3))
  809034:	414000cc 	andi	r5,r8,3
  809038:	2800391e 	bne	r5,zero,809120 <__d2b+0x308>
      x >>= 2;
  80903c:	4010d0ba 	srli	r8,r8,2
      k += 2;
  809040:	18c00084 	addi	r3,r3,2
  if (!(x & 1))
  809044:	4140004c 	andi	r5,r8,1
  809048:	2800031e 	bne	r5,zero,809058 <__d2b+0x240>
      x >>= 1;
  80904c:	4010d07a 	srli	r8,r8,1
      k++;
  809050:	18c00044 	addi	r3,r3,1
      if (!x & 1)
  809054:	40003f26 	beq	r8,zero,809154 <__d2b+0x33c>
         x[0] = y | z << (32 - k);
  809058:	01400804 	movi	r5,32
  80905c:	28cbc83a 	sub	r5,r5,r3
  809060:	314a983a 	sll	r5,r6,r5
  809064:	003f8f06 	br	808ea4 <__d2b+0x8c>
      x >>= 16;
  809068:	9810d43a 	srli	r8,r19,16
  80906c:	01c00604 	movi	r7,24
      k = 16;
  809070:	00c00404 	movi	r3,16
  809074:	003fe706 	br	809014 <__d2b+0x1fc>
  if (!(x & 0xff))
  809078:	31c03fcc 	andi	r7,r6,255
  80907c:	300b883a 	mov	r5,r6
  809080:	02000204 	movi	r8,8
  k = 0;
  809084:	0007883a 	mov	r3,zero
  809088:	003fcd06 	br	808fc0 <__d2b+0x1a8>
  80908c:	00c00804 	movi	r3,32
  809090:	003fa206 	br	808f1c <__d2b+0x104>
  809094:	9811883a 	mov	r8,r19
	x[0] = y;
  809098:	12000515 	stw	r8,20(r2)
  80909c:	0007883a 	mov	r3,zero
  8090a0:	003f8306 	br	808eb0 <__d2b+0x98>
  8090a4:	01c00204 	movi	r7,8
  register int k = 0;
  8090a8:	0009883a 	mov	r4,zero
  8090ac:	003faa06 	br	808f58 <__d2b+0x140>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8090b0:	01800844 	movi	r6,33
  8090b4:	01400104 	movi	r5,4
  8090b8:	080b8040 	call	80b804 <_calloc_r>
  8090bc:	88801315 	stw	r2,76(r17)
  8090c0:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8090c4:	103f601e 	bne	r2,zero,808e48 <__d2b+0x30>
  b = eBalloc (ptr, 1);
  8090c8:	01c02074 	movhi	r7,129
  8090cc:	01002074 	movhi	r4,129
  8090d0:	39cbbe04 	addi	r7,r7,12024
  8090d4:	000d883a 	mov	r6,zero
  8090d8:	0140c284 	movi	r5,778
  8090dc:	210be104 	addi	r4,r4,12164
  8090e0:	080b7900 	call	80b790 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  8090e4:	01800704 	movi	r6,28
  8090e8:	01400044 	movi	r5,1
  8090ec:	8809883a 	mov	r4,r17
  8090f0:	080b8040 	call	80b804 <_calloc_r>
      if (rv == NULL) return NULL;
  8090f4:	103ff426 	beq	r2,zero,8090c8 <__d2b+0x2b0>
      rv->_k = k;
  8090f8:	00c00044 	movi	r3,1
  8090fc:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  809100:	00c00084 	movi	r3,2
  809104:	10c00215 	stw	r3,8(r2)
  809108:	003f5306 	br	808e58 <__d2b+0x40>
      x >>= 1;
  80910c:	280ad07a 	srli	r5,r5,1
      if (!x & 1)
  809110:	28001426 	beq	r5,zero,809164 <__d2b+0x34c>
      k += 32;
  809114:	18c00844 	addi	r3,r3,33
  809118:	280d883a 	mov	r6,r5
  80911c:	003f7f06 	br	808f1c <__d2b+0x104>
  if (!(x & 1))
  809120:	4140004c 	andi	r5,r8,1
  809124:	283fc926 	beq	r5,zero,80904c <__d2b+0x234>
      if (k)
  809128:	183fdb26 	beq	r3,zero,809098 <__d2b+0x280>
  80912c:	003fca06 	br	809058 <__d2b+0x240>
	return 32;
  809130:	01000804 	movi	r4,32
  809134:	003f9806 	br	808f98 <__d2b+0x180>
      *y = x >> 2;
  809138:	300cd0ba 	srli	r6,r6,2
      return 2;
  80913c:	00c00884 	movi	r3,34
  809140:	003f7606 	br	808f1c <__d2b+0x104>
      *y = x >> 2;
  809144:	9810d0ba 	srli	r8,r19,2
         x[0] = y | z << (32 - k);
  809148:	300a97ba 	slli	r5,r6,30
      return 2;
  80914c:	00c00084 	movi	r3,2
  809150:	003f5406 	br	808ea4 <__d2b+0x8c>
  809154:	300b883a 	mov	r5,r6
  809158:	9811883a 	mov	r8,r19
	return 32;
  80915c:	00c00804 	movi	r3,32
  809160:	003f5006 	br	808ea4 <__d2b+0x8c>
  809164:	00c01004 	movi	r3,64
  809168:	003f6c06 	br	808f1c <__d2b+0x104>

0080916c <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
  80916c:	defffc04 	addi	sp,sp,-16
  809170:	dc400215 	stw	r17,8(sp)
  809174:	2823883a 	mov	r17,r5
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  809178:	d80b883a 	mov	r5,sp
{
  80917c:	dc000115 	stw	r16,4(sp)
  809180:	dfc00315 	stw	ra,12(sp)
  809184:	2021883a 	mov	r16,r4
  da.d = b2d (a, &ka);
  809188:	0808cbc0 	call	808cbc <__b2d>
  xa = xa0 + a->_wds;
  80918c:	8b000417 	ldw	r12,16(r17)
  xa0 = a->_x;
  809190:	8a800504 	addi	r10,r17,20
  da.d = b2d (a, &ka);
  809194:	1009883a 	mov	r4,r2
  xa = xa0 + a->_wds;
  809198:	601690ba 	slli	r11,r12,2
  da.d = b2d (a, &ka);
  80919c:	180b883a 	mov	r5,r3
  xa = xa0 + a->_wds;
  8091a0:	52d7883a 	add	r11,r10,r11
  y = *--xa;
  8091a4:	5b7fff17 	ldw	r13,-4(r11)
  8091a8:	5bbfff04 	addi	r14,r11,-4
  if (!(x & 0xffff0000))
  8091ac:	68bfffec 	andhi	r2,r13,65535
  8091b0:	10002b1e 	bne	r2,zero,809260 <__ratio+0xf4>
      x <<= 16;
  8091b4:	680c943a 	slli	r6,r13,16
  8091b8:	00c00604 	movi	r3,24
      k = 16;
  8091bc:	02400404 	movi	r9,16
  if (!(x & 0xff000000))
  8091c0:	30bfc02c 	andhi	r2,r6,65280
  8091c4:	1000021e 	bne	r2,zero,8091d0 <__ratio+0x64>
      x <<= 8;
  8091c8:	300c923a 	slli	r6,r6,8
      k += 8;
  8091cc:	1813883a 	mov	r9,r3
  if (!(x & 0xf0000000))
  8091d0:	30bc002c 	andhi	r2,r6,61440
  8091d4:	1000021e 	bne	r2,zero,8091e0 <__ratio+0x74>
      x <<= 4;
  8091d8:	300c913a 	slli	r6,r6,4
      k += 4;
  8091dc:	4a400104 	addi	r9,r9,4
  if (!(x & 0xc0000000))
  8091e0:	30b0002c 	andhi	r2,r6,49152
  8091e4:	1000021e 	bne	r2,zero,8091f0 <__ratio+0x84>
      x <<= 2;
  8091e8:	300c90ba 	slli	r6,r6,2
      k += 2;
  8091ec:	4a400084 	addi	r9,r9,2
  if (!(x & 0x80000000))
  8091f0:	30000316 	blt	r6,zero,809200 <__ratio+0x94>
      if (!(x & 0x40000000))
  8091f4:	3190002c 	andhi	r6,r6,16384
      k++;
  8091f8:	4a400044 	addi	r9,r9,1
      if (!(x & 0x40000000))
  8091fc:	30002f26 	beq	r6,zero,8092bc <__ratio+0x150>
  *e = 32 - k;
  809200:	02000804 	movi	r8,32
  if (k < Ebits)
  809204:	488002c8 	cmpgei	r2,r9,11
  *e = 32 - k;
  809208:	4247c83a 	sub	r3,r8,r9
  if (k < Ebits)
  80920c:	10001e26 	beq	r2,zero,809288 <__ratio+0x11c>
  if (k -= Ebits)
  809210:	4a7ffd44 	addi	r9,r9,-11
  z = xa > xa0 ? *--xa : 0;
  809214:	5380162e 	bgeu	r10,r14,809270 <__ratio+0x104>
  809218:	59bffe17 	ldw	r6,-8(r11)
  if (k -= Ebits)
  80921c:	48002e1e 	bne	r9,zero,8092d8 <__ratio+0x16c>
      d0 = Exp_1 | y;
  809220:	69cffc34 	orhi	r7,r13,16368
  db.d = b2d (b, &kb);
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809224:	82000417 	ldw	r8,16(r16)
  809228:	d8800017 	ldw	r2,0(sp)
  80922c:	4311c83a 	sub	r8,r8,r12
  809230:	4010917a 	slli	r8,r8,5
  809234:	10c5c83a 	sub	r2,r2,r3
  809238:	4091883a 	add	r8,r8,r2
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
  80923c:	02000f0e 	bge	zero,r8,80927c <__ratio+0x110>
    word0 (da) += k * Exp_msk1;
  809240:	4010953a 	slli	r8,r8,20
  809244:	414b883a 	add	r5,r8,r5
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
  809248:	080e1a80 	call	80e1a8 <__divdf3>
}
  80924c:	dfc00317 	ldw	ra,12(sp)
  809250:	dc400217 	ldw	r17,8(sp)
  809254:	dc000117 	ldw	r16,4(sp)
  809258:	dec00404 	addi	sp,sp,16
  80925c:	f800283a 	ret
  809260:	680d883a 	mov	r6,r13
  809264:	00c00204 	movi	r3,8
  register int k = 0;
  809268:	0013883a 	mov	r9,zero
  80926c:	003fd406 	br	8091c0 <__ratio+0x54>
  if (k -= Ebits)
  809270:	4800151e 	bne	r9,zero,8092c8 <__ratio+0x15c>
  z = xa > xa0 ? *--xa : 0;
  809274:	000d883a 	mov	r6,zero
  809278:	003fe906 	br	809220 <__ratio+0xb4>
      word0 (db) += k * Exp_msk1;
  80927c:	4010953a 	slli	r8,r8,20
  809280:	3a0fc83a 	sub	r7,r7,r8
  809284:	003ff006 	br	809248 <__ratio+0xdc>
      d0 = Exp_1 | y >> (Ebits - k);
  809288:	018002c4 	movi	r6,11
  80928c:	324dc83a 	sub	r6,r6,r9
  809290:	698ed83a 	srl	r7,r13,r6
  809294:	39cffc34 	orhi	r7,r7,16368
      w = xa > xa0 ? *--xa : 0;
  809298:	53800536 	bltu	r10,r14,8092b0 <__ratio+0x144>
  80929c:	000d883a 	mov	r6,zero
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8092a0:	4a400544 	addi	r9,r9,21
  8092a4:	6a52983a 	sll	r9,r13,r9
  8092a8:	498cb03a 	or	r6,r9,r6
      goto ret_d;
  8092ac:	003fdd06 	br	809224 <__ratio+0xb8>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8092b0:	58bffe17 	ldw	r2,-8(r11)
  8092b4:	118cd83a 	srl	r6,r2,r6
  8092b8:	003ff906 	br	8092a0 <__ratio+0x134>
  z = xa > xa0 ? *--xa : 0;
  8092bc:	53801236 	bltu	r10,r14,809308 <__ratio+0x19c>
  8092c0:	02400544 	movi	r9,21
  *e = 32 - k;
  8092c4:	0007883a 	mov	r3,zero
      d0 = Exp_1 | y << k | z >> (32 - k);
  8092c8:	6a52983a 	sll	r9,r13,r9
  8092cc:	000d883a 	mov	r6,zero
  8092d0:	49cffc34 	orhi	r7,r9,16368
      y = xa > xa0 ? *--xa : 0;
  8092d4:	003fd306 	br	809224 <__ratio+0xb8>
  z = xa > xa0 ? *--xa : 0;
  8092d8:	5afffe04 	addi	r11,r11,-8
      d0 = Exp_1 | y << k | z >> (32 - k);
  8092dc:	4251c83a 	sub	r8,r8,r9
  8092e0:	3204d83a 	srl	r2,r6,r8
  8092e4:	6a4e983a 	sll	r7,r13,r9
      d1 = z << k | y >> (32 - k);
  8092e8:	324c983a 	sll	r6,r6,r9
      d0 = Exp_1 | y << k | z >> (32 - k);
  8092ec:	388eb03a 	or	r7,r7,r2
  8092f0:	39cffc34 	orhi	r7,r7,16368
      y = xa > xa0 ? *--xa : 0;
  8092f4:	52ffcb2e 	bgeu	r10,r11,809224 <__ratio+0xb8>
      d1 = z << k | y >> (32 - k);
  8092f8:	58bfff17 	ldw	r2,-4(r11)
  8092fc:	1210d83a 	srl	r8,r2,r8
  809300:	320cb03a 	or	r6,r6,r8
  809304:	003fc706 	br	809224 <__ratio+0xb8>
  z = xa > xa0 ? *--xa : 0;
  809308:	59bffe17 	ldw	r6,-8(r11)
  80930c:	020002c4 	movi	r8,11
  809310:	5afffe04 	addi	r11,r11,-8
  if (k -= Ebits)
  809314:	02400544 	movi	r9,21
  *e = 32 - k;
  809318:	0007883a 	mov	r3,zero
  80931c:	003ff006 	br	8092e0 <__ratio+0x174>

00809320 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
  809320:	defffe04 	addi	sp,sp,-8
  809324:	dc000015 	stw	r16,0(sp)
  809328:	dfc00115 	stw	ra,4(sp)
  double v = 1.0;
  if (dig < 24)
  80932c:	20800608 	cmpgei	r2,r4,24
{
  809330:	2021883a 	mov	r16,r4
  if (dig < 24)
  809334:	10000f26 	beq	r2,zero,809374 <_mprec_log10+0x54>
  double v = 1.0;
  809338:	0009883a 	mov	r4,zero
  80933c:	014ffc34 	movhi	r5,16368
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
  809340:	000d883a 	mov	r6,zero
  809344:	01d00934 	movhi	r7,16420
  809348:	080ed280 	call	80ed28 <__muldf3>
      dig--;
  80934c:	843fffc4 	addi	r16,r16,-1
      v *= 10;
  809350:	1009883a 	mov	r4,r2
  809354:	180b883a 	mov	r5,r3
  while (dig > 0)
  809358:	803ff91e 	bne	r16,zero,809340 <_mprec_log10+0x20>
    }
  return v;
}
  80935c:	2005883a 	mov	r2,r4
  809360:	2807883a 	mov	r3,r5
  809364:	dfc00117 	ldw	ra,4(sp)
  809368:	dc000017 	ldw	r16,0(sp)
  80936c:	dec00204 	addi	sp,sp,8
  809370:	f800283a 	ret
    return tens[dig];
  809374:	202090fa 	slli	r16,r4,3
  809378:	00802074 	movhi	r2,129
  80937c:	108c1204 	addi	r2,r2,12360
  809380:	1421883a 	add	r16,r2,r16
  809384:	81000017 	ldw	r4,0(r16)
  809388:	81400117 	ldw	r5,4(r16)
  80938c:	003ff306 	br	80935c <_mprec_log10+0x3c>

00809390 <__copybits>:
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
  809390:	297fffc4 	addi	r5,r5,-1
  809394:	280fd17a 	srai	r7,r5,5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
  809398:	31400417 	ldw	r5,16(r6)
	x = b->_x;
  80939c:	30800504 	addi	r2,r6,20
	ce = c + ((n-1) >> kshift) + 1;
  8093a0:	39c00044 	addi	r7,r7,1
	xe = x + b->_wds;
  8093a4:	280a90ba 	slli	r5,r5,2
	ce = c + ((n-1) >> kshift) + 1;
  8093a8:	380e90ba 	slli	r7,r7,2
	xe = x + b->_wds;
  8093ac:	114b883a 	add	r5,r2,r5
	ce = c + ((n-1) >> kshift) + 1;
  8093b0:	21cf883a 	add	r7,r4,r7
	while(x < xe)
  8093b4:	11400c2e 	bgeu	r2,r5,8093e8 <__copybits+0x58>
  8093b8:	2007883a 	mov	r3,r4
		*c++ = *x++;
  8093bc:	12000017 	ldw	r8,0(r2)
  8093c0:	10800104 	addi	r2,r2,4
  8093c4:	18c00104 	addi	r3,r3,4
  8093c8:	1a3fff15 	stw	r8,-4(r3)
	while(x < xe)
  8093cc:	117ffb36 	bltu	r2,r5,8093bc <__copybits+0x2c>
		*c++ = *x++;
  8093d0:	2985c83a 	sub	r2,r5,r6
  8093d4:	10bffac4 	addi	r2,r2,-21
  8093d8:	1004d0ba 	srli	r2,r2,2
  8093dc:	10800044 	addi	r2,r2,1
  8093e0:	100490ba 	slli	r2,r2,2
  8093e4:	2089883a 	add	r4,r4,r2
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
  8093e8:	21c0072e 	bgeu	r4,r7,809408 <__copybits+0x78>
		*c++ = 0;
  8093ec:	39bfffc4 	addi	r6,r7,-1
  8093f0:	310dc83a 	sub	r6,r6,r4
  8093f4:	300cd0ba 	srli	r6,r6,2
  8093f8:	000b883a 	mov	r5,zero
  8093fc:	31800044 	addi	r6,r6,1
  809400:	300c90ba 	slli	r6,r6,2
  809404:	0801b401 	jmpi	801b40 <memset>
}
  809408:	f800283a 	ret

0080940c <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
  80940c:	20c00417 	ldw	r3,16(r4)
	n = k >> kshift;
  809410:	280dd17a 	srai	r6,r5,5
	x = b->_x;
  809414:	21000504 	addi	r4,r4,20
	if (n > nwds)
  809418:	1980080e 	bge	r3,r6,80943c <__any_on+0x30>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
  80941c:	180490ba 	slli	r2,r3,2
  809420:	2085883a 	add	r2,r4,r2
	while(x > x0)
  809424:	20800f2e 	bgeu	r4,r2,809464 <__any_on+0x58>
		if (*--x)
  809428:	10ffff17 	ldw	r3,-4(r2)
  80942c:	10bfff04 	addi	r2,r2,-4
  809430:	183ffc26 	beq	r3,zero,809424 <__any_on+0x18>
			return 1;
  809434:	00800044 	movi	r2,1
			return 1;
	return 0;
}
  809438:	f800283a 	ret
		x1 = x2 = x[n];
  80943c:	300490ba 	slli	r2,r6,2
  809440:	2085883a 	add	r2,r4,r2
	else if (n < nwds && (k &= kmask)) {
  809444:	30fff70e 	bge	r6,r3,809424 <__any_on+0x18>
  809448:	294007cc 	andi	r5,r5,31
  80944c:	283ff526 	beq	r5,zero,809424 <__any_on+0x18>
		x1 = x2 = x[n];
  809450:	11800017 	ldw	r6,0(r2)
		x1 >>= k;
  809454:	3146d83a 	srl	r3,r6,r5
		x1 <<= k;
  809458:	194a983a 	sll	r5,r3,r5
		if (x1 != x2)
  80945c:	317ff51e 	bne	r6,r5,809434 <__any_on+0x28>
  809460:	003ff006 	br	809424 <__any_on+0x18>
	return 0;
  809464:	0005883a 	mov	r2,zero
  809468:	f800283a 	ret

0080946c <_realloc_r>:
{
  80946c:	defff504 	addi	sp,sp,-44
  809470:	dc800315 	stw	r18,12(sp)
  809474:	dfc00a15 	stw	ra,40(sp)
  809478:	df000915 	stw	fp,36(sp)
  80947c:	ddc00815 	stw	r23,32(sp)
  809480:	dd800715 	stw	r22,28(sp)
  809484:	dd400615 	stw	r21,24(sp)
  809488:	dd000515 	stw	r20,20(sp)
  80948c:	dcc00415 	stw	r19,16(sp)
  809490:	dc400215 	stw	r17,8(sp)
  809494:	dc000115 	stw	r16,4(sp)
  809498:	3025883a 	mov	r18,r6
  if (oldmem == 0) return mALLOc(RCALL bytes);
  80949c:	28008b26 	beq	r5,zero,8096cc <_realloc_r+0x260>
  8094a0:	2821883a 	mov	r16,r5
  8094a4:	2027883a 	mov	r19,r4
  nb = request2size(bytes);
  8094a8:	944002c4 	addi	r17,r18,11
  MALLOC_LOCK;
  8094ac:	08106bc0 	call	8106bc <__malloc_lock>
  nb = request2size(bytes);
  8094b0:	888005f0 	cmpltui	r2,r17,23
  8094b4:	1000521e 	bne	r2,zero,809600 <_realloc_r+0x194>
  8094b8:	017ffe04 	movi	r5,-8
  8094bc:	8962703a 	and	r17,r17,r5
  if (nb > INT_MAX || nb < bytes)
  8094c0:	8807883a 	mov	r3,r17
  8094c4:	88005116 	blt	r17,zero,80960c <_realloc_r+0x1a0>
  8094c8:	8c805036 	bltu	r17,r18,80960c <_realloc_r+0x1a0>
  newsize = oldsize = chunksize(oldp);
  8094cc:	80bfff17 	ldw	r2,-4(r16)
  8094d0:	017fff04 	movi	r5,-4
  newp    = oldp    = mem2chunk(oldmem);
  8094d4:	857ffe04 	addi	r21,r16,-8
  newsize = oldsize = chunksize(oldp);
  8094d8:	1168703a 	and	r20,r2,r5
    next = chunk_at_offset(oldp, oldsize);
  8094dc:	ad2d883a 	add	r22,r21,r20
  if ((long)(oldsize) < (long)(nb))  
  8094e0:	a0c0390e 	bge	r20,r3,8095c8 <_realloc_r+0x15c>
    if (next == top || !inuse(next)) 
  8094e4:	07002074 	movhi	fp,129
  8094e8:	e70e6c04 	addi	fp,fp,14768
  8094ec:	e2000217 	ldw	r8,8(fp)
  8094f0:	b1000117 	ldw	r4,4(r22)
  8094f4:	45808e26 	beq	r8,r22,809730 <_realloc_r+0x2c4>
  8094f8:	01bfff84 	movi	r6,-2
  8094fc:	218c703a 	and	r6,r4,r6
  809500:	b18d883a 	add	r6,r22,r6
  809504:	31800117 	ldw	r6,4(r6)
  809508:	3180004c 	andi	r6,r6,1
  80950c:	30004f1e 	bne	r6,zero,80964c <_realloc_r+0x1e0>
      nextsize = chunksize(next);
  809510:	2148703a 	and	r4,r4,r5
      else if (((long)(nextsize + newsize) >= (long)(nb)))
  809514:	a10b883a 	add	r5,r20,r4
  809518:	28c0bf0e 	bge	r5,r3,809818 <_realloc_r+0x3ac>
    if (!prev_inuse(oldp))
  80951c:	1080004c 	andi	r2,r2,1
  809520:	10004c1e 	bne	r2,zero,809654 <_realloc_r+0x1e8>
      prev = prev_chunk(oldp);
  809524:	81fffe17 	ldw	r7,-8(r16)
      prevsize = chunksize(prev);
  809528:	00bfff04 	movi	r2,-4
      prev = prev_chunk(oldp);
  80952c:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  809530:	39400117 	ldw	r5,4(r7)
  809534:	288a703a 	and	r5,r5,r2
      if (next != 0)
  809538:	b0000426 	beq	r22,zero,80954c <_realloc_r+0xe0>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  80953c:	a16f883a 	add	r23,r20,r5
  809540:	b92f883a 	add	r23,r23,r4
        if (next == top)
  809544:	4580bf26 	beq	r8,r22,809844 <_realloc_r+0x3d8>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
  809548:	b8c0930e 	bge	r23,r3,809798 <_realloc_r+0x32c>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
  80954c:	38004126 	beq	r7,zero,809654 <_realloc_r+0x1e8>
  809550:	a16f883a 	add	r23,r20,r5
  809554:	b8c03f16 	blt	r23,r3,809654 <_realloc_r+0x1e8>
        unlink(prev, bck, fwd);
  809558:	38800317 	ldw	r2,12(r7)
  80955c:	38c00217 	ldw	r3,8(r7)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809560:	a1bfff04 	addi	r6,r20,-4
  809564:	31400968 	cmpgeui	r5,r6,37
        unlink(prev, bck, fwd);
  809568:	18800315 	stw	r2,12(r3)
  80956c:	10c00215 	stw	r3,8(r2)
        newmem = chunk2mem(newp);
  809570:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809574:	3ded883a 	add	r22,r7,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809578:	2800941e 	bne	r5,zero,8097cc <_realloc_r+0x360>
  80957c:	30800530 	cmpltui	r2,r6,20
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809580:	80c00017 	ldw	r3,0(r16)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809584:	1000df1e 	bne	r2,zero,809904 <_realloc_r+0x498>
  809588:	38c00215 	stw	r3,8(r7)
  80958c:	80c00117 	ldw	r3,4(r16)
  809590:	30800728 	cmpgeui	r2,r6,28
  809594:	38c00315 	stw	r3,12(r7)
  809598:	1000dc1e 	bne	r2,zero,80990c <_realloc_r+0x4a0>
  80959c:	80c00217 	ldw	r3,8(r16)
  8095a0:	38800404 	addi	r2,r7,16
  8095a4:	84000204 	addi	r16,r16,8
  8095a8:	10c00015 	stw	r3,0(r2)
  8095ac:	80c00117 	ldw	r3,4(r16)
        newsize += prevsize;
  8095b0:	b829883a 	mov	r20,r23
  8095b4:	382b883a 	mov	r21,r7
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8095b8:	10c00115 	stw	r3,4(r2)
  8095bc:	80c00217 	ldw	r3,8(r16)
  8095c0:	2021883a 	mov	r16,r4
  8095c4:	10c00215 	stw	r3,8(r2)
    set_head_size(newp, nb);
  8095c8:	a9800117 	ldw	r6,4(r21)
  remainder_size = long_sub_size_t(newsize, nb);
  8095cc:	a445c83a 	sub	r2,r20,r17
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  8095d0:	10c00430 	cmpltui	r3,r2,16
    set_head_size(newp, nb);
  8095d4:	3180004c 	andi	r6,r6,1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  8095d8:	18004926 	beq	r3,zero,809700 <_realloc_r+0x294>
    set_head_size(newp, newsize);
  8095dc:	a18cb03a 	or	r6,r20,r6
  8095e0:	a9800115 	stw	r6,4(r21)
    set_inuse_bit_at_offset(newp, newsize);
  8095e4:	b0800117 	ldw	r2,4(r22)
  8095e8:	10800054 	ori	r2,r2,1
  8095ec:	b0800115 	stw	r2,4(r22)
  MALLOC_UNLOCK;
  8095f0:	9809883a 	mov	r4,r19
  8095f4:	08106e00 	call	8106e0 <__malloc_unlock>
  return chunk2mem(newp);
  8095f8:	8025883a 	mov	r18,r16
  8095fc:	00000606 	br	809618 <_realloc_r+0x1ac>
  nb = request2size(bytes);
  809600:	04400404 	movi	r17,16
  if (nb > INT_MAX || nb < bytes)
  809604:	00c00404 	movi	r3,16
  809608:	8cbfb02e 	bgeu	r17,r18,8094cc <_realloc_r+0x60>
    RERRNO = ENOMEM;
  80960c:	00800304 	movi	r2,12
  809610:	98800015 	stw	r2,0(r19)
    return 0;
  809614:	0025883a 	mov	r18,zero
}
  809618:	9005883a 	mov	r2,r18
  80961c:	dfc00a17 	ldw	ra,40(sp)
  809620:	df000917 	ldw	fp,36(sp)
  809624:	ddc00817 	ldw	r23,32(sp)
  809628:	dd800717 	ldw	r22,28(sp)
  80962c:	dd400617 	ldw	r21,24(sp)
  809630:	dd000517 	ldw	r20,20(sp)
  809634:	dcc00417 	ldw	r19,16(sp)
  809638:	dc800317 	ldw	r18,12(sp)
  80963c:	dc400217 	ldw	r17,8(sp)
  809640:	dc000117 	ldw	r16,4(sp)
  809644:	dec00b04 	addi	sp,sp,44
  809648:	f800283a 	ret
    if (!prev_inuse(oldp))
  80964c:	1080004c 	andi	r2,r2,1
  809650:	10006c26 	beq	r2,zero,809804 <_realloc_r+0x398>
    newmem = mALLOc (RCALL bytes);
  809654:	900b883a 	mov	r5,r18
  809658:	9809883a 	mov	r4,r19
  80965c:	080701c0 	call	80701c <_malloc_r>
  809660:	1025883a 	mov	r18,r2
    if (newmem == 0)  /* propagate failure */
  809664:	10001626 	beq	r2,zero,8096c0 <_realloc_r+0x254>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
  809668:	80bfff17 	ldw	r2,-4(r16)
  80966c:	013fff84 	movi	r4,-2
  809670:	90fffe04 	addi	r3,r18,-8
  809674:	1104703a 	and	r2,r2,r4
  809678:	a885883a 	add	r2,r21,r2
  80967c:	10c05b26 	beq	r2,r3,8097ec <_realloc_r+0x380>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809680:	a1bfff04 	addi	r6,r20,-4
  809684:	30800968 	cmpgeui	r2,r6,37
  809688:	10006a1e 	bne	r2,zero,809834 <_realloc_r+0x3c8>
  80968c:	30800530 	cmpltui	r2,r6,20
  809690:	81000017 	ldw	r4,0(r16)
  809694:	10003726 	beq	r2,zero,809774 <_realloc_r+0x308>
  809698:	9005883a 	mov	r2,r18
  80969c:	8007883a 	mov	r3,r16
  8096a0:	11000015 	stw	r4,0(r2)
  8096a4:	19000117 	ldw	r4,4(r3)
  8096a8:	11000115 	stw	r4,4(r2)
  8096ac:	18c00217 	ldw	r3,8(r3)
  8096b0:	10c00215 	stw	r3,8(r2)
    fREe(RCALL oldmem);
  8096b4:	800b883a 	mov	r5,r16
  8096b8:	9809883a 	mov	r4,r19
  8096bc:	08063a00 	call	8063a0 <_free_r>
    MALLOC_UNLOCK;
  8096c0:	9809883a 	mov	r4,r19
  8096c4:	08106e00 	call	8106e0 <__malloc_unlock>
    return newmem;
  8096c8:	003fd306 	br	809618 <_realloc_r+0x1ac>
  if (oldmem == 0) return mALLOc(RCALL bytes);
  8096cc:	300b883a 	mov	r5,r6
}
  8096d0:	dfc00a17 	ldw	ra,40(sp)
  8096d4:	df000917 	ldw	fp,36(sp)
  8096d8:	ddc00817 	ldw	r23,32(sp)
  8096dc:	dd800717 	ldw	r22,28(sp)
  8096e0:	dd400617 	ldw	r21,24(sp)
  8096e4:	dd000517 	ldw	r20,20(sp)
  8096e8:	dcc00417 	ldw	r19,16(sp)
  8096ec:	dc800317 	ldw	r18,12(sp)
  8096f0:	dc400217 	ldw	r17,8(sp)
  8096f4:	dc000117 	ldw	r16,4(sp)
  8096f8:	dec00b04 	addi	sp,sp,44
  if (oldmem == 0) return mALLOc(RCALL bytes);
  8096fc:	080701c1 	jmpi	80701c <_malloc_r>
    set_head_size(newp, nb);
  809700:	344cb03a 	or	r6,r6,r17
  809704:	a9800115 	stw	r6,4(r21)
    remainder = chunk_at_offset(newp, nb);
  809708:	ac4b883a 	add	r5,r21,r17
    set_head(remainder, remainder_size | PREV_INUSE);
  80970c:	10800054 	ori	r2,r2,1
  809710:	28800115 	stw	r2,4(r5)
    set_inuse_bit_at_offset(remainder, remainder_size);
  809714:	b0800117 	ldw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809718:	29400204 	addi	r5,r5,8
  80971c:	9809883a 	mov	r4,r19
    set_inuse_bit_at_offset(remainder, remainder_size);
  809720:	10800054 	ori	r2,r2,1
  809724:	b0800115 	stw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809728:	08063a00 	call	8063a0 <_free_r>
  80972c:	003fb006 	br	8095f0 <_realloc_r+0x184>
      nextsize = chunksize(next);
  809730:	2148703a 	and	r4,r4,r5
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
  809734:	a10b883a 	add	r5,r20,r4
  809738:	89800404 	addi	r6,r17,16
  80973c:	29bf7716 	blt	r5,r6,80951c <_realloc_r+0xb0>
          top = chunk_at_offset(oldp, nb);
  809740:	ac6b883a 	add	r21,r21,r17
          set_head(top, (newsize - nb) | PREV_INUSE);
  809744:	2c45c83a 	sub	r2,r5,r17
          top = chunk_at_offset(oldp, nb);
  809748:	e5400215 	stw	r21,8(fp)
          set_head(top, (newsize - nb) | PREV_INUSE);
  80974c:	10800054 	ori	r2,r2,1
  809750:	a8800115 	stw	r2,4(r21)
          set_head_size(oldp, nb);
  809754:	80bfff17 	ldw	r2,-4(r16)
	  MALLOC_UNLOCK;
  809758:	9809883a 	mov	r4,r19
          return chunk2mem(oldp);
  80975c:	8025883a 	mov	r18,r16
          set_head_size(oldp, nb);
  809760:	1080004c 	andi	r2,r2,1
  809764:	1462b03a 	or	r17,r2,r17
  809768:	847fff15 	stw	r17,-4(r16)
	  MALLOC_UNLOCK;
  80976c:	08106e00 	call	8106e0 <__malloc_unlock>
          return chunk2mem(oldp);
  809770:	003fa906 	br	809618 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809774:	91000015 	stw	r4,0(r18)
  809778:	80c00117 	ldw	r3,4(r16)
  80977c:	30800728 	cmpgeui	r2,r6,28
  809780:	90c00115 	stw	r3,4(r18)
  809784:	1000551e 	bne	r2,zero,8098dc <_realloc_r+0x470>
  809788:	81000217 	ldw	r4,8(r16)
  80978c:	80c00204 	addi	r3,r16,8
  809790:	90800204 	addi	r2,r18,8
  809794:	003fc206 	br	8096a0 <_realloc_r+0x234>
          unlink(next, bck, fwd);
  809798:	b0800317 	ldw	r2,12(r22)
  80979c:	b0c00217 	ldw	r3,8(r22)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097a0:	a1bfff04 	addi	r6,r20,-4
  8097a4:	31400968 	cmpgeui	r5,r6,37
          unlink(next, bck, fwd);
  8097a8:	18800315 	stw	r2,12(r3)
  8097ac:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
  8097b0:	38c00217 	ldw	r3,8(r7)
  8097b4:	38800317 	ldw	r2,12(r7)
          newmem = chunk2mem(newp);
  8097b8:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  8097bc:	3ded883a 	add	r22,r7,r23
          unlink(prev, bck, fwd);
  8097c0:	18800315 	stw	r2,12(r3)
  8097c4:	10c00215 	stw	r3,8(r2)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097c8:	283f6c26 	beq	r5,zero,80957c <_realloc_r+0x110>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097cc:	800b883a 	mov	r5,r16
  8097d0:	d9c00015 	stw	r7,0(sp)
  8097d4:	0807a880 	call	807a88 <memmove>
  8097d8:	d9c00017 	ldw	r7,0(sp)
  8097dc:	1021883a 	mov	r16,r2
        newsize += prevsize;
  8097e0:	b829883a 	mov	r20,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097e4:	382b883a 	mov	r21,r7
  8097e8:	003f7706 	br	8095c8 <_realloc_r+0x15c>
      newsize += chunksize(newp);
  8097ec:	90bfff17 	ldw	r2,-4(r18)
  8097f0:	00ffff04 	movi	r3,-4
  8097f4:	10c4703a 	and	r2,r2,r3
  8097f8:	a0a9883a 	add	r20,r20,r2
    set_inuse_bit_at_offset(remainder, remainder_size);
  8097fc:	ad2d883a 	add	r22,r21,r20
      goto split;
  809800:	003f7106 	br	8095c8 <_realloc_r+0x15c>
      prev = prev_chunk(oldp);
  809804:	81fffe17 	ldw	r7,-8(r16)
  809808:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  80980c:	38800117 	ldw	r2,4(r7)
  809810:	114a703a 	and	r5,r2,r5
      if (next != 0)
  809814:	003f4d06 	br	80954c <_realloc_r+0xe0>
        unlink(next, bck, fwd);
  809818:	b0800317 	ldw	r2,12(r22)
  80981c:	b0c00217 	ldw	r3,8(r22)
        newsize  += nextsize;
  809820:	2829883a 	mov	r20,r5
    set_inuse_bit_at_offset(remainder, remainder_size);
  809824:	a96d883a 	add	r22,r21,r5
        unlink(next, bck, fwd);
  809828:	18800315 	stw	r2,12(r3)
  80982c:	10c00215 	stw	r3,8(r2)
        goto split;
  809830:	003f6506 	br	8095c8 <_realloc_r+0x15c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809834:	800b883a 	mov	r5,r16
  809838:	9009883a 	mov	r4,r18
  80983c:	0807a880 	call	807a88 <memmove>
  809840:	003f9c06 	br	8096b4 <_realloc_r+0x248>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  809844:	88800404 	addi	r2,r17,16
  809848:	b8bf4016 	blt	r23,r2,80954c <_realloc_r+0xe0>
            unlink(prev, bck, fwd);
  80984c:	38800317 	ldw	r2,12(r7)
  809850:	38c00217 	ldw	r3,8(r7)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809854:	a1bfff04 	addi	r6,r20,-4
  809858:	31000968 	cmpgeui	r4,r6,37
            unlink(prev, bck, fwd);
  80985c:	18800315 	stw	r2,12(r3)
  809860:	10c00215 	stw	r3,8(r2)
            newmem = chunk2mem(newp);
  809864:	3c800204 	addi	r18,r7,8
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809868:	20003b1e 	bne	r4,zero,809958 <_realloc_r+0x4ec>
  80986c:	30800530 	cmpltui	r2,r6,20
  809870:	80c00017 	ldw	r3,0(r16)
  809874:	1000361e 	bne	r2,zero,809950 <_realloc_r+0x4e4>
  809878:	38c00215 	stw	r3,8(r7)
  80987c:	80c00117 	ldw	r3,4(r16)
  809880:	30800728 	cmpgeui	r2,r6,28
  809884:	38c00315 	stw	r3,12(r7)
  809888:	1000401e 	bne	r2,zero,80998c <_realloc_r+0x520>
  80988c:	80c00217 	ldw	r3,8(r16)
  809890:	38800404 	addi	r2,r7,16
  809894:	84000204 	addi	r16,r16,8
  809898:	10c00015 	stw	r3,0(r2)
  80989c:	80c00117 	ldw	r3,4(r16)
  8098a0:	10c00115 	stw	r3,4(r2)
  8098a4:	80c00217 	ldw	r3,8(r16)
  8098a8:	10c00215 	stw	r3,8(r2)
            top = chunk_at_offset(newp, nb);
  8098ac:	3c47883a 	add	r3,r7,r17
            set_head(top, (newsize - nb) | PREV_INUSE);
  8098b0:	bc45c83a 	sub	r2,r23,r17
            top = chunk_at_offset(newp, nb);
  8098b4:	e0c00215 	stw	r3,8(fp)
            set_head(top, (newsize - nb) | PREV_INUSE);
  8098b8:	10800054 	ori	r2,r2,1
  8098bc:	18800115 	stw	r2,4(r3)
            set_head_size(newp, nb);
  8098c0:	38800117 	ldw	r2,4(r7)
	    MALLOC_UNLOCK;
  8098c4:	9809883a 	mov	r4,r19
            set_head_size(newp, nb);
  8098c8:	1080004c 	andi	r2,r2,1
  8098cc:	1462b03a 	or	r17,r2,r17
  8098d0:	3c400115 	stw	r17,4(r7)
	    MALLOC_UNLOCK;
  8098d4:	08106e00 	call	8106e0 <__malloc_unlock>
            return newmem;
  8098d8:	003f4f06 	br	809618 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8098dc:	80800217 	ldw	r2,8(r16)
  8098e0:	31800920 	cmpeqi	r6,r6,36
  8098e4:	90800215 	stw	r2,8(r18)
  8098e8:	80800317 	ldw	r2,12(r16)
  8098ec:	90800315 	stw	r2,12(r18)
  8098f0:	81000417 	ldw	r4,16(r16)
  8098f4:	30000f1e 	bne	r6,zero,809934 <_realloc_r+0x4c8>
  8098f8:	80c00404 	addi	r3,r16,16
  8098fc:	90800404 	addi	r2,r18,16
  809900:	003f6706 	br	8096a0 <_realloc_r+0x234>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809904:	2005883a 	mov	r2,r4
  809908:	003f2706 	br	8095a8 <_realloc_r+0x13c>
  80990c:	80800217 	ldw	r2,8(r16)
  809910:	31800920 	cmpeqi	r6,r6,36
  809914:	38800415 	stw	r2,16(r7)
  809918:	80800317 	ldw	r2,12(r16)
  80991c:	38800515 	stw	r2,20(r7)
  809920:	80c00417 	ldw	r3,16(r16)
  809924:	3000121e 	bne	r6,zero,809970 <_realloc_r+0x504>
  809928:	38800604 	addi	r2,r7,24
  80992c:	84000404 	addi	r16,r16,16
  809930:	003f1d06 	br	8095a8 <_realloc_r+0x13c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809934:	91000415 	stw	r4,16(r18)
  809938:	81000517 	ldw	r4,20(r16)
  80993c:	80c00604 	addi	r3,r16,24
  809940:	90800604 	addi	r2,r18,24
  809944:	91000515 	stw	r4,20(r18)
  809948:	81000617 	ldw	r4,24(r16)
  80994c:	003f5406 	br	8096a0 <_realloc_r+0x234>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809950:	9005883a 	mov	r2,r18
  809954:	003fd006 	br	809898 <_realloc_r+0x42c>
  809958:	800b883a 	mov	r5,r16
  80995c:	9009883a 	mov	r4,r18
  809960:	d9c00015 	stw	r7,0(sp)
  809964:	0807a880 	call	807a88 <memmove>
  809968:	d9c00017 	ldw	r7,0(sp)
  80996c:	003fcf06 	br	8098ac <_realloc_r+0x440>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809970:	84000604 	addi	r16,r16,24
  809974:	38c00615 	stw	r3,24(r7)
  809978:	80ffff17 	ldw	r3,-4(r16)
  80997c:	38800804 	addi	r2,r7,32
  809980:	38c00715 	stw	r3,28(r7)
  809984:	80c00017 	ldw	r3,0(r16)
  809988:	003f0706 	br	8095a8 <_realloc_r+0x13c>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80998c:	80800217 	ldw	r2,8(r16)
  809990:	31800920 	cmpeqi	r6,r6,36
  809994:	38800415 	stw	r2,16(r7)
  809998:	80800317 	ldw	r2,12(r16)
  80999c:	38800515 	stw	r2,20(r7)
  8099a0:	80c00417 	ldw	r3,16(r16)
  8099a4:	3000031e 	bne	r6,zero,8099b4 <_realloc_r+0x548>
  8099a8:	38800604 	addi	r2,r7,24
  8099ac:	84000404 	addi	r16,r16,16
  8099b0:	003fb906 	br	809898 <_realloc_r+0x42c>
  8099b4:	84000604 	addi	r16,r16,24
  8099b8:	38c00615 	stw	r3,24(r7)
  8099bc:	80ffff17 	ldw	r3,-4(r16)
  8099c0:	38800804 	addi	r2,r7,32
  8099c4:	38c00715 	stw	r3,28(r7)
  8099c8:	80c00017 	ldw	r3,0(r16)
  8099cc:	003fb206 	br	809898 <_realloc_r+0x42c>

008099d0 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
  8099d0:	defffe04 	addi	sp,sp,-8
  8099d4:	dc000015 	stw	r16,0(sp)
  8099d8:	2021883a 	mov	r16,r4
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  8099dc:	2809883a 	mov	r4,r5
{
  8099e0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  8099e4:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  8099e8:	08108b80 	call	8108b8 <sbrk>
  8099ec:	10ffffd8 	cmpnei	r3,r2,-1
  8099f0:	18000426 	beq	r3,zero,809a04 <_sbrk_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  8099f4:	dfc00117 	ldw	ra,4(sp)
  8099f8:	dc000017 	ldw	r16,0(sp)
  8099fc:	dec00204 	addi	sp,sp,8
  809a00:	f800283a 	ret
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  809a04:	d0e75817 	ldw	r3,-25248(gp)
  809a08:	183ffa26 	beq	r3,zero,8099f4 <_sbrk_r+0x24>
    ptr->_errno = errno;
  809a0c:	80c00015 	stw	r3,0(r16)
}
  809a10:	dfc00117 	ldw	ra,4(sp)
  809a14:	dc000017 	ldw	r16,0(sp)
  809a18:	dec00204 	addi	sp,sp,8
  809a1c:	f800283a 	ret

00809a20 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
  809a20:	defffe04 	addi	sp,sp,-8
  809a24:	dc000015 	stw	r16,0(sp)
  809a28:	2821883a 	mov	r16,r5
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
  809a2c:	2940038f 	ldh	r5,14(r5)
{
  809a30:	dfc00115 	stw	ra,4(sp)
  ret = _read_r (ptr, fp->_file, buf, n);
  809a34:	080c1c40 	call	80c1c4 <_read_r>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
  809a38:	10000716 	blt	r2,zero,809a58 <__sread+0x38>
    fp->_offset += ret;
  809a3c:	80c01417 	ldw	r3,80(r16)
  809a40:	1887883a 	add	r3,r3,r2
  809a44:	80c01415 	stw	r3,80(r16)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
  809a48:	dfc00117 	ldw	ra,4(sp)
  809a4c:	dc000017 	ldw	r16,0(sp)
  809a50:	dec00204 	addi	sp,sp,8
  809a54:	f800283a 	ret
    fp->_flags &= ~__SOFF;	/* paranoia */
  809a58:	80c0030b 	ldhu	r3,12(r16)
  809a5c:	18fbffcc 	andi	r3,r3,61439
  809a60:	80c0030d 	sth	r3,12(r16)
}
  809a64:	dfc00117 	ldw	ra,4(sp)
  809a68:	dc000017 	ldw	r16,0(sp)
  809a6c:	dec00204 	addi	sp,sp,8
  809a70:	f800283a 	ret

00809a74 <__seofread>:
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
  809a74:	0005883a 	mov	r2,zero
  809a78:	f800283a 	ret

00809a7c <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
  809a7c:	2880030b 	ldhu	r2,12(r5)
{
  809a80:	defffb04 	addi	sp,sp,-20
  809a84:	dcc00315 	stw	r19,12(sp)
  809a88:	dc800215 	stw	r18,8(sp)
  809a8c:	dc400115 	stw	r17,4(sp)
  809a90:	dc000015 	stw	r16,0(sp)
  809a94:	dfc00415 	stw	ra,16(sp)
  if (fp->_flags & __SAPP)
  809a98:	10c0400c 	andi	r3,r2,256
{
  809a9c:	2821883a 	mov	r16,r5
  809aa0:	2023883a 	mov	r17,r4
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  809aa4:	2940038f 	ldh	r5,14(r5)
{
  809aa8:	3025883a 	mov	r18,r6
  809aac:	3827883a 	mov	r19,r7
  if (fp->_flags & __SAPP)
  809ab0:	18000c1e 	bne	r3,zero,809ae4 <__swrite+0x68>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  809ab4:	10bbffcc 	andi	r2,r2,61439
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
  809ab8:	980f883a 	mov	r7,r19
  809abc:	900d883a 	mov	r6,r18
  809ac0:	8809883a 	mov	r4,r17
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  809ac4:	8080030d 	sth	r2,12(r16)
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
  809ac8:	dfc00417 	ldw	ra,16(sp)
  809acc:	dcc00317 	ldw	r19,12(sp)
  809ad0:	dc800217 	ldw	r18,8(sp)
  809ad4:	dc400117 	ldw	r17,4(sp)
  809ad8:	dc000017 	ldw	r16,0(sp)
  809adc:	dec00504 	addi	sp,sp,20
  w = _write_r (ptr, fp->_file, buf, n);
  809ae0:	080b6e41 	jmpi	80b6e4 <_write_r>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  809ae4:	01c00084 	movi	r7,2
  809ae8:	000d883a 	mov	r6,zero
  809aec:	080c1680 	call	80c168 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  809af0:	8080030b 	ldhu	r2,12(r16)
  w = _write_r (ptr, fp->_file, buf, n);
  809af4:	8140038f 	ldh	r5,14(r16)
  809af8:	003fee06 	br	809ab4 <__swrite+0x38>

00809afc <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
  809afc:	defffe04 	addi	sp,sp,-8
  809b00:	dc000015 	stw	r16,0(sp)
  809b04:	2821883a 	mov	r16,r5
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  809b08:	2940038f 	ldh	r5,14(r5)
{
  809b0c:	dfc00115 	stw	ra,4(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  809b10:	080c1680 	call	80c168 <_lseek_r>
  if (ret == -1L)
  809b14:	10ffffd8 	cmpnei	r3,r2,-1
  809b18:	18000826 	beq	r3,zero,809b3c <__sseek+0x40>
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
  809b1c:	80c0030b 	ldhu	r3,12(r16)
      fp->_offset = ret;
  809b20:	80801415 	stw	r2,80(r16)
      fp->_flags |= __SOFF;
  809b24:	18c40014 	ori	r3,r3,4096
  809b28:	80c0030d 	sth	r3,12(r16)
    }
  return ret;
}
  809b2c:	dfc00117 	ldw	ra,4(sp)
  809b30:	dc000017 	ldw	r16,0(sp)
  809b34:	dec00204 	addi	sp,sp,8
  809b38:	f800283a 	ret
    fp->_flags &= ~__SOFF;
  809b3c:	80c0030b 	ldhu	r3,12(r16)
  809b40:	18fbffcc 	andi	r3,r3,61439
  809b44:	80c0030d 	sth	r3,12(r16)
}
  809b48:	dfc00117 	ldw	ra,4(sp)
  809b4c:	dc000017 	ldw	r16,0(sp)
  809b50:	dec00204 	addi	sp,sp,8
  809b54:	f800283a 	ret

00809b58 <__sclose>:
__sclose (struct _reent *ptr,
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
  809b58:	2940038f 	ldh	r5,14(r5)
  809b5c:	080b7401 	jmpi	80b740 <_close_r>

00809b60 <strcmp>:
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
  809b60:	2144b03a 	or	r2,r4,r5
  809b64:	108000cc 	andi	r2,r2,3
  809b68:	1000141e 	bne	r2,zero,809bbc <strcmp+0x5c>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
  809b6c:	20800017 	ldw	r2,0(r4)
  809b70:	28c00017 	ldw	r3,0(r5)
  809b74:	10c0111e 	bne	r2,r3,809bbc <strcmp+0x5c>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
  809b78:	01ffbff4 	movhi	r7,65279
  809b7c:	01a02074 	movhi	r6,32897
  809b80:	39ffbfc4 	addi	r7,r7,-257
  809b84:	31a02004 	addi	r6,r6,-32640
  809b88:	00000306 	br	809b98 <strcmp+0x38>
      while (*a1 == *a2)
  809b8c:	20800017 	ldw	r2,0(r4)
  809b90:	28c00017 	ldw	r3,0(r5)
  809b94:	10c0091e 	bne	r2,r3,809bbc <strcmp+0x5c>
          if (DETECTNULL (*a1))
  809b98:	11c7883a 	add	r3,r2,r7
  809b9c:	0084303a 	nor	r2,zero,r2
  809ba0:	1884703a 	and	r2,r3,r2
  809ba4:	1184703a 	and	r2,r2,r6
	    return 0;

          a1++;
  809ba8:	21000104 	addi	r4,r4,4
          a2++;
  809bac:	29400104 	addi	r5,r5,4
          if (DETECTNULL (*a1))
  809bb0:	103ff626 	beq	r2,zero,809b8c <strcmp+0x2c>
	    return 0;
  809bb4:	0005883a 	mov	r2,zero
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  809bb8:	f800283a 	ret
  while (*s1 != '\0' && *s1 == *s2)
  809bbc:	20c00003 	ldbu	r3,0(r4)
  809bc0:	18803fcc 	andi	r2,r3,255
  809bc4:	1080201c 	xori	r2,r2,128
  809bc8:	10bfe004 	addi	r2,r2,-128
  809bcc:	1000071e 	bne	r2,zero,809bec <strcmp+0x8c>
  809bd0:	00000a06 	br	809bfc <strcmp+0x9c>
  809bd4:	20c00003 	ldbu	r3,0(r4)
      s2++;
  809bd8:	29400044 	addi	r5,r5,1
  while (*s1 != '\0' && *s1 == *s2)
  809bdc:	18803fcc 	andi	r2,r3,255
  809be0:	1080201c 	xori	r2,r2,128
  809be4:	10bfe004 	addi	r2,r2,-128
  809be8:	10000726 	beq	r2,zero,809c08 <strcmp+0xa8>
  809bec:	29800007 	ldb	r6,0(r5)
      s1++;
  809bf0:	21000044 	addi	r4,r4,1
  while (*s1 != '\0' && *s1 == *s2)
  809bf4:	30bff726 	beq	r6,r2,809bd4 <strcmp+0x74>
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
  809bf8:	18803fcc 	andi	r2,r3,255
  809bfc:	28c00003 	ldbu	r3,0(r5)
  809c00:	10c5c83a 	sub	r2,r2,r3
  809c04:	f800283a 	ret
  809c08:	28c00003 	ldbu	r3,0(r5)
  809c0c:	0005883a 	mov	r2,zero
  809c10:	10c5c83a 	sub	r2,r2,r3
  809c14:	f800283a 	ret

00809c18 <__sprint_r>:
	if (uio->uio_resid == 0) {
  809c18:	30800217 	ldw	r2,8(r6)
{
  809c1c:	defff604 	addi	sp,sp,-40
  809c20:	dcc00315 	stw	r19,12(sp)
  809c24:	dfc00915 	stw	ra,36(sp)
  809c28:	df000815 	stw	fp,32(sp)
  809c2c:	ddc00715 	stw	r23,28(sp)
  809c30:	dd800615 	stw	r22,24(sp)
  809c34:	dd400515 	stw	r21,20(sp)
  809c38:	dd000415 	stw	r20,16(sp)
  809c3c:	dc800215 	stw	r18,8(sp)
  809c40:	dc400115 	stw	r17,4(sp)
  809c44:	dc000015 	stw	r16,0(sp)
  809c48:	3027883a 	mov	r19,r6
	if (uio->uio_resid == 0) {
  809c4c:	10001826 	beq	r2,zero,809cb0 <__sprint_r+0x98>
	if (fp->_flags2 & __SWID) {
  809c50:	28c01917 	ldw	r3,100(r5)
  809c54:	2821883a 	mov	r16,r5
  809c58:	18c8000c 	andi	r3,r3,8192
  809c5c:	18002126 	beq	r3,zero,809ce4 <__sprint_r+0xcc>
		iov = uio->uio_iov;
  809c60:	35000017 	ldw	r20,0(r6)
  809c64:	2023883a 	mov	r17,r4
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809c68:	05bfff04 	movi	r22,-4
			len = iov->iov_len / sizeof (wchar_t);
  809c6c:	a5400117 	ldw	r21,4(r20)
			p = (wchar_t *) iov->iov_base;
  809c70:	a5c00017 	ldw	r23,0(r20)
			len = iov->iov_len / sizeof (wchar_t);
  809c74:	a824d0ba 	srli	r18,r21,2
			for (i = 0; i < len; i++) {
  809c78:	90001d26 	beq	r18,zero,809cf0 <__sprint_r+0xd8>
  809c7c:	0039883a 	mov	fp,zero
  809c80:	00000206 	br	809c8c <__sprint_r+0x74>
  809c84:	bdc00104 	addi	r23,r23,4
  809c88:	97001826 	beq	r18,fp,809cec <__sprint_r+0xd4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809c8c:	b9400017 	ldw	r5,0(r23)
  809c90:	800d883a 	mov	r6,r16
  809c94:	8809883a 	mov	r4,r17
  809c98:	080bcd80 	call	80bcd8 <_fputwc_r>
  809c9c:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809ca0:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809ca4:	103ff726 	beq	r2,zero,809c84 <__sprint_r+0x6c>
					err = -1;
  809ca8:	00bfffc4 	movi	r2,-1
	uio->uio_resid = 0;
  809cac:	98000215 	stw	zero,8(r19)
	uio->uio_iovcnt = 0;
  809cb0:	98000115 	stw	zero,4(r19)
}
  809cb4:	dfc00917 	ldw	ra,36(sp)
  809cb8:	df000817 	ldw	fp,32(sp)
  809cbc:	ddc00717 	ldw	r23,28(sp)
  809cc0:	dd800617 	ldw	r22,24(sp)
  809cc4:	dd400517 	ldw	r21,20(sp)
  809cc8:	dd000417 	ldw	r20,16(sp)
  809ccc:	dcc00317 	ldw	r19,12(sp)
  809cd0:	dc800217 	ldw	r18,8(sp)
  809cd4:	dc400117 	ldw	r17,4(sp)
  809cd8:	dc000017 	ldw	r16,0(sp)
  809cdc:	dec00a04 	addi	sp,sp,40
  809ce0:	f800283a 	ret
		err = __sfvwrite_r(ptr, fp, uio);
  809ce4:	08066940 	call	806694 <__sfvwrite_r>
  809ce8:	003ff006 	br	809cac <__sprint_r+0x94>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809cec:	98800217 	ldw	r2,8(r19)
  809cf0:	adaa703a 	and	r21,r21,r22
  809cf4:	1545c83a 	sub	r2,r2,r21
  809cf8:	98800215 	stw	r2,8(r19)
  809cfc:	a5000204 	addi	r20,r20,8
		for (; uio->uio_resid != 0;
  809d00:	103fda1e 	bne	r2,zero,809c6c <__sprint_r+0x54>
  809d04:	003fe906 	br	809cac <__sprint_r+0x94>

00809d08 <___vfiprintf_internal_r>:
{
  809d08:	deffcc04 	addi	sp,sp,-208
  809d0c:	dd002e15 	stw	r20,184(sp)
  809d10:	dc002a15 	stw	r16,168(sp)
  809d14:	dfc03315 	stw	ra,204(sp)
  809d18:	df003215 	stw	fp,200(sp)
  809d1c:	ddc03115 	stw	r23,196(sp)
  809d20:	dd803015 	stw	r22,192(sp)
  809d24:	dd402f15 	stw	r21,188(sp)
  809d28:	dcc02d15 	stw	r19,180(sp)
  809d2c:	dc802c15 	stw	r18,176(sp)
  809d30:	dc402b15 	stw	r17,172(sp)
  809d34:	d9800215 	stw	r6,8(sp)
  809d38:	d9c00715 	stw	r7,28(sp)
  809d3c:	2021883a 	mov	r16,r4
  809d40:	2829883a 	mov	r20,r5
	CHECK_INIT (data, fp);
  809d44:	20000226 	beq	r4,zero,809d50 <___vfiprintf_internal_r+0x48>
  809d48:	20800e17 	ldw	r2,56(r4)
  809d4c:	10014f26 	beq	r2,zero,80a28c <___vfiprintf_internal_r+0x584>
	ORIENT(fp, -1);
  809d50:	a080030b 	ldhu	r2,12(r20)
  809d54:	10c8000c 	andi	r3,r2,8192
  809d58:	1800061e 	bne	r3,zero,809d74 <___vfiprintf_internal_r+0x6c>
	_newlib_flockfile_start (fp);
  809d5c:	a0c01917 	ldw	r3,100(r20)
	ORIENT(fp, -1);
  809d60:	0137ffc4 	movi	r4,-8193
  809d64:	10880014 	ori	r2,r2,8192
  809d68:	1906703a 	and	r3,r3,r4
  809d6c:	a080030d 	sth	r2,12(r20)
  809d70:	a0c01915 	stw	r3,100(r20)
	if (cantwrite (data, fp)) {
  809d74:	10c0020c 	andi	r3,r2,8
  809d78:	1800e126 	beq	r3,zero,80a100 <___vfiprintf_internal_r+0x3f8>
  809d7c:	a0c00417 	ldw	r3,16(r20)
  809d80:	1800df26 	beq	r3,zero,80a100 <___vfiprintf_internal_r+0x3f8>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  809d84:	1080068c 	andi	r2,r2,26
  809d88:	10800298 	cmpnei	r2,r2,10
  809d8c:	1000e426 	beq	r2,zero,80a120 <___vfiprintf_internal_r+0x418>
	uio.uio_iov = iovp = iov;
  809d90:	d8801a04 	addi	r2,sp,104
  809d94:	d8800d15 	stw	r2,52(sp)
	uio.uio_resid = 0;
  809d98:	d8000f15 	stw	zero,60(sp)
	uio.uio_iovcnt = 0;
  809d9c:	d8000e15 	stw	zero,56(sp)
	uio.uio_iov = iovp = iov;
  809da0:	1025883a 	mov	r18,r2
	char *xdigs = NULL;	/* digits for [xX] conversion */
  809da4:	d8000a15 	stw	zero,40(sp)
	ret = 0;
  809da8:	d8000615 	stw	zero,24(sp)
                while (*fmt != '\0' && *fmt != '%')
  809dac:	d8800217 	ldw	r2,8(sp)
  809db0:	10800007 	ldb	r2,0(r2)
  809db4:	1000ff26 	beq	r2,zero,80a1b4 <___vfiprintf_internal_r+0x4ac>
  809db8:	ddc00217 	ldw	r23,8(sp)
  809dbc:	00000306 	br	809dcc <___vfiprintf_internal_r+0xc4>
  809dc0:	b8800047 	ldb	r2,1(r23)
                    fmt += 1;
  809dc4:	bdc00044 	addi	r23,r23,1
                while (*fmt != '\0' && *fmt != '%')
  809dc8:	1000e726 	beq	r2,zero,80a168 <___vfiprintf_internal_r+0x460>
  809dcc:	10c00958 	cmpnei	r3,r2,37
  809dd0:	183ffb1e 	bne	r3,zero,809dc0 <___vfiprintf_internal_r+0xb8>
		if ((m = fmt - cp) != 0) {
  809dd4:	d8c00217 	ldw	r3,8(sp)
  809dd8:	b8e3c83a 	sub	r17,r23,r3
  809ddc:	b8c0e51e 	bne	r23,r3,80a174 <___vfiprintf_internal_r+0x46c>
		fmt++;		/* skip over '%' */
  809de0:	b8800047 	ldb	r2,1(r23)
  809de4:	b8c00044 	addi	r3,r23,1
rflag:		ch = *fmt++;
  809de8:	000b883a 	mov	r5,zero
		prec = -1;
  809dec:	01ffffc4 	movi	r7,-1
		width = 0;
  809df0:	d8000115 	stw	zero,4(sp)
		flags = 0;
  809df4:	002d883a 	mov	r22,zero
rflag:		ch = *fmt++;
  809df8:	18c00044 	addi	r3,r3,1
reswitch:	switch (ch) {
  809dfc:	113ff804 	addi	r4,r2,-32
  809e00:	21801668 	cmpgeui	r6,r4,89
  809e04:	30006e1e 	bne	r6,zero,809fc0 <___vfiprintf_internal_r+0x2b8>
  809e08:	200890ba 	slli	r4,r4,2
  809e0c:	01802074 	movhi	r6,129
  809e10:	218d883a 	add	r6,r4,r6
  809e14:	31a78717 	ldw	r6,-25060(r6)
  809e18:	3000683a 	jmp	r6
  809e1c:	0080a5ec 	andhi	r2,zero,663
  809e20:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e24:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e28:	0080a5e0 	cmpeqi	r2,zero,663
  809e2c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e30:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e34:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e38:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e3c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e40:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e44:	0080a5b4 	movhi	r2,662
  809e48:	0080a5a8 	cmpgeui	r2,zero,662
  809e4c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e50:	0080a590 	cmplti	r2,zero,662
  809e54:	0080a544 	movi	r2,661
  809e58:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e5c:	0080a538 	rdprs	r2,zero,660
  809e60:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e64:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e68:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e6c:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e70:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e74:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e78:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e7c:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e80:	00809f80 	call	809f8 <__alt_mem_sdram-0x77f608>
  809e84:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e88:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e8c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e90:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e94:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e98:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809e9c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ea0:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ea4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ea8:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809eac:	0080a444 	movi	r2,657
  809eb0:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809eb4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809eb8:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ebc:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ec0:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ec4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ec8:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ecc:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ed0:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ed4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ed8:	0080a6c0 	call	80a6c <__alt_mem_sdram-0x77f594>
  809edc:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ee0:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ee4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ee8:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809eec:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ef0:	0080a690 	cmplti	r2,zero,666
  809ef4:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809ef8:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809efc:	0080a644 	movi	r2,665
  809f00:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f04:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f08:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f0c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f10:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f14:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f18:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f1c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f20:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f24:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f28:	0080a614 	movui	r2,664
  809f2c:	0080a294 	movui	r2,650
  809f30:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f34:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f38:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f3c:	0080a314 	movui	r2,652
  809f40:	0080a294 	movui	r2,650
  809f44:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f48:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f4c:	0080a72c 	andhi	r2,zero,668
  809f50:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f54:	0080a6f0 	cmpltui	r2,zero,667
  809f58:	0080b3a4 	muli	r2,zero,718
  809f5c:	0080a408 	cmpgei	r2,zero,656
  809f60:	0080a740 	call	80a74 <__alt_mem_sdram-0x77f58c>
  809f64:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f68:	0080a3bc 	xorhi	r2,zero,654
  809f6c:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f70:	0080b3b0 	cmpltui	r2,zero,718
  809f74:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f78:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809f7c:	0080a320 	cmpeqi	r2,zero,652
			n = 0;
  809f80:	d8000115 	stw	zero,4(sp)
  809f84:	11bff404 	addi	r6,r2,-48
				n = 10 * n + to_digit (ch);
  809f88:	da000117 	ldw	r8,4(sp)
				ch = *fmt++;
  809f8c:	18800007 	ldb	r2,0(r3)
  809f90:	18c00044 	addi	r3,r3,1
				n = 10 * n + to_digit (ch);
  809f94:	400890ba 	slli	r4,r8,2
  809f98:	2209883a 	add	r4,r4,r8
  809f9c:	2109883a 	add	r4,r4,r4
  809fa0:	3109883a 	add	r4,r6,r4
			} while (is_digit (ch));
  809fa4:	11bff404 	addi	r6,r2,-48
				n = 10 * n + to_digit (ch);
  809fa8:	d9000115 	stw	r4,4(sp)
			} while (is_digit (ch));
  809fac:	310002b0 	cmpltui	r4,r6,10
  809fb0:	203ff51e 	bne	r4,zero,809f88 <___vfiprintf_internal_r+0x280>
reswitch:	switch (ch) {
  809fb4:	113ff804 	addi	r4,r2,-32
  809fb8:	21801668 	cmpgeui	r6,r4,89
  809fbc:	303f9226 	beq	r6,zero,809e08 <___vfiprintf_internal_r+0x100>
  809fc0:	d8c00215 	stw	r3,8(sp)
  809fc4:	d9400c45 	stb	r5,49(sp)
			if (ch == '\0')
  809fc8:	10007a26 	beq	r2,zero,80a1b4 <___vfiprintf_internal_r+0x4ac>
			*cp = ch;
  809fcc:	d8801005 	stb	r2,64(sp)
			break;
  809fd0:	00800044 	movi	r2,1
			sign = '\0';
  809fd4:	d8000c45 	stb	zero,49(sp)
			break;
  809fd8:	d8800015 	stw	r2,0(sp)
			size = 1;
  809fdc:	d8800515 	stw	r2,20(sp)
			cp = buf;
  809fe0:	dcc01004 	addi	r19,sp,64
			cp = buf + BUF;
  809fe4:	dd800315 	stw	r22,12(sp)
  809fe8:	d8000415 	stw	zero,16(sp)
		if (flags & HEXPREFIX)
  809fec:	d8800317 	ldw	r2,12(sp)
  809ff0:	1080008c 	andi	r2,r2,2
  809ff4:	d8800915 	stw	r2,36(sp)
  809ff8:	10000326 	beq	r2,zero,80a008 <___vfiprintf_internal_r+0x300>
			realsz+= 2;
  809ffc:	d8800017 	ldw	r2,0(sp)
  80a000:	10800084 	addi	r2,r2,2
  80a004:	d8800015 	stw	r2,0(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a008:	d8c00317 	ldw	r3,12(sp)
			PRINT (&sign, 1);
  80a00c:	d8800e17 	ldw	r2,56(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a010:	18c0210c 	andi	r3,r3,132
  80a014:	180d883a 	mov	r6,r3
  80a018:	d8c00815 	stw	r3,32(sp)
			PRINT (&sign, 1);
  80a01c:	11400044 	addi	r5,r2,1
  80a020:	d8c00f17 	ldw	r3,60(sp)
  80a024:	2809883a 	mov	r4,r5
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a028:	3000041e 	bne	r6,zero,80a03c <___vfiprintf_internal_r+0x334>
			PAD (width - realsz, blanks);
  80a02c:	d9800117 	ldw	r6,4(sp)
  80a030:	d9c00017 	ldw	r7,0(sp)
  80a034:	31ebc83a 	sub	r21,r6,r7
  80a038:	05437816 	blt	zero,r21,80ae1c <___vfiprintf_internal_r+0x1114>
		if (sign)
  80a03c:	d9800c47 	ldb	r6,49(sp)
			PRINT (&sign, 1);
  80a040:	91400204 	addi	r5,r18,8
		if (sign)
  80a044:	3001d326 	beq	r6,zero,80a794 <___vfiprintf_internal_r+0xa8c>
			PRINT (&sign, 1);
  80a048:	d8800c44 	addi	r2,sp,49
  80a04c:	18c00044 	addi	r3,r3,1
  80a050:	90800015 	stw	r2,0(r18)
  80a054:	00800044 	movi	r2,1
  80a058:	90800115 	stw	r2,4(r18)
  80a05c:	d8c00f15 	stw	r3,60(sp)
  80a060:	d9000e15 	stw	r4,56(sp)
  80a064:	20800208 	cmpgei	r2,r4,8
  80a068:	1001c626 	beq	r2,zero,80a784 <___vfiprintf_internal_r+0xa7c>
	if (uio->uio_resid == 0) {
  80a06c:	18034026 	beq	r3,zero,80ad70 <___vfiprintf_internal_r+0x1068>
	if (fp->_flags2 & __SWID) {
  80a070:	a0801917 	ldw	r2,100(r20)
  80a074:	1088000c 	andi	r2,r2,8192
  80a078:	10033826 	beq	r2,zero,80ad5c <___vfiprintf_internal_r+0x1054>
		iov = uio->uio_iov;
  80a07c:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a080:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  80a084:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80a088:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80a08c:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  80a090:	a8044326 	beq	r21,zero,80b1a0 <___vfiprintf_internal_r+0x1498>
  80a094:	0039883a 	mov	fp,zero
  80a098:	00000206 	br	80a0a4 <___vfiprintf_internal_r+0x39c>
  80a09c:	8c400104 	addi	r17,r17,4
  80a0a0:	af043e26 	beq	r21,fp,80b19c <___vfiprintf_internal_r+0x1494>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a0a4:	89400017 	ldw	r5,0(r17)
  80a0a8:	a00d883a 	mov	r6,r20
  80a0ac:	8009883a 	mov	r4,r16
  80a0b0:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a0b4:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a0b8:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a0bc:	103ff726 	beq	r2,zero,80a09c <___vfiprintf_internal_r+0x394>
	return (__sferror (fp) ? EOF : ret);
  80a0c0:	a080030b 	ldhu	r2,12(r20)
  80a0c4:	1080100c 	andi	r2,r2,64
  80a0c8:	1005261e 	bne	r2,zero,80b564 <___vfiprintf_internal_r+0x185c>
}
  80a0cc:	d8800617 	ldw	r2,24(sp)
  80a0d0:	dfc03317 	ldw	ra,204(sp)
  80a0d4:	df003217 	ldw	fp,200(sp)
  80a0d8:	ddc03117 	ldw	r23,196(sp)
  80a0dc:	dd803017 	ldw	r22,192(sp)
  80a0e0:	dd402f17 	ldw	r21,188(sp)
  80a0e4:	dd002e17 	ldw	r20,184(sp)
  80a0e8:	dcc02d17 	ldw	r19,180(sp)
  80a0ec:	dc802c17 	ldw	r18,176(sp)
  80a0f0:	dc402b17 	ldw	r17,172(sp)
  80a0f4:	dc002a17 	ldw	r16,168(sp)
  80a0f8:	dec03404 	addi	sp,sp,208
  80a0fc:	f800283a 	ret
	if (cantwrite (data, fp)) {
  80a100:	a00b883a 	mov	r5,r20
  80a104:	8009883a 	mov	r4,r16
  80a108:	0803f380 	call	803f38 <__swsetup_r>
  80a10c:	1005151e 	bne	r2,zero,80b564 <___vfiprintf_internal_r+0x185c>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a110:	a080030b 	ldhu	r2,12(r20)
  80a114:	1080068c 	andi	r2,r2,26
  80a118:	10800298 	cmpnei	r2,r2,10
  80a11c:	103f1c1e 	bne	r2,zero,809d90 <___vfiprintf_internal_r+0x88>
  80a120:	a080038f 	ldh	r2,14(r20)
  80a124:	103f1a16 	blt	r2,zero,809d90 <___vfiprintf_internal_r+0x88>
		return (__sbprintf (data, fp, fmt0, ap));
  80a128:	d9c00717 	ldw	r7,28(sp)
  80a12c:	d9800217 	ldw	r6,8(sp)
  80a130:	a00b883a 	mov	r5,r20
  80a134:	8009883a 	mov	r4,r16
}
  80a138:	dfc03317 	ldw	ra,204(sp)
  80a13c:	df003217 	ldw	fp,200(sp)
  80a140:	ddc03117 	ldw	r23,196(sp)
  80a144:	dd803017 	ldw	r22,192(sp)
  80a148:	dd402f17 	ldw	r21,188(sp)
  80a14c:	dd002e17 	ldw	r20,184(sp)
  80a150:	dcc02d17 	ldw	r19,180(sp)
  80a154:	dc802c17 	ldw	r18,176(sp)
  80a158:	dc402b17 	ldw	r17,172(sp)
  80a15c:	dc002a17 	ldw	r16,168(sp)
  80a160:	dec03404 	addi	sp,sp,208
		return (__sbprintf (data, fp, fmt0, ap));
  80a164:	080b5e81 	jmpi	80b5e8 <__sbprintf>
		if ((m = fmt - cp) != 0) {
  80a168:	d8c00217 	ldw	r3,8(sp)
  80a16c:	b8e3c83a 	sub	r17,r23,r3
  80a170:	b8c01026 	beq	r23,r3,80a1b4 <___vfiprintf_internal_r+0x4ac>
			PRINT (cp, m);
  80a174:	d8c00217 	ldw	r3,8(sp)
  80a178:	d9000f17 	ldw	r4,60(sp)
  80a17c:	94400115 	stw	r17,4(r18)
  80a180:	90c00015 	stw	r3,0(r18)
  80a184:	d8c00e17 	ldw	r3,56(sp)
  80a188:	8909883a 	add	r4,r17,r4
  80a18c:	d9000f15 	stw	r4,60(sp)
  80a190:	18c00044 	addi	r3,r3,1
  80a194:	d8c00e15 	stw	r3,56(sp)
  80a198:	18c00208 	cmpgei	r3,r3,8
  80a19c:	18001c1e 	bne	r3,zero,80a210 <___vfiprintf_internal_r+0x508>
  80a1a0:	94800204 	addi	r18,r18,8
			ret += m;
  80a1a4:	d8c00617 	ldw	r3,24(sp)
  80a1a8:	1c47883a 	add	r3,r3,r17
  80a1ac:	d8c00615 	stw	r3,24(sp)
                if (*fmt == '\0')
  80a1b0:	103f0b1e 	bne	r2,zero,809de0 <___vfiprintf_internal_r+0xd8>
	FLUSH ();
  80a1b4:	d8800f17 	ldw	r2,60(sp)
  80a1b8:	103fc126 	beq	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
	if (fp->_flags2 & __SWID) {
  80a1bc:	a0c01917 	ldw	r3,100(r20)
  80a1c0:	18c8000c 	andi	r3,r3,8192
  80a1c4:	1804f126 	beq	r3,zero,80b58c <___vfiprintf_internal_r+0x1884>
		iov = uio->uio_iov;
  80a1c8:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a1cc:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  80a1d0:	95400117 	ldw	r21,4(r18)
			p = (wchar_t *) iov->iov_base;
  80a1d4:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80a1d8:	a826d0ba 	srli	r19,r21,2
			for (i = 0; i < len; i++) {
  80a1dc:	9804e526 	beq	r19,zero,80b574 <___vfiprintf_internal_r+0x186c>
  80a1e0:	002d883a 	mov	r22,zero
  80a1e4:	00000206 	br	80a1f0 <___vfiprintf_internal_r+0x4e8>
  80a1e8:	8c400104 	addi	r17,r17,4
  80a1ec:	9d84e026 	beq	r19,r22,80b570 <___vfiprintf_internal_r+0x1868>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a1f0:	89400017 	ldw	r5,0(r17)
  80a1f4:	a00d883a 	mov	r6,r20
  80a1f8:	8009883a 	mov	r4,r16
  80a1fc:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a200:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a204:	b5800044 	addi	r22,r22,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a208:	103ff726 	beq	r2,zero,80a1e8 <___vfiprintf_internal_r+0x4e0>
  80a20c:	003fac06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
	if (uio->uio_resid == 0) {
  80a210:	2003de26 	beq	r4,zero,80b18c <___vfiprintf_internal_r+0x1484>
	if (fp->_flags2 & __SWID) {
  80a214:	a0801917 	ldw	r2,100(r20)
  80a218:	1088000c 	andi	r2,r2,8192
  80a21c:	10001126 	beq	r2,zero,80a264 <___vfiprintf_internal_r+0x55c>
		iov = uio->uio_iov;
  80a220:	dcc00d17 	ldw	r19,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80a224:	9d800117 	ldw	r22,4(r19)
			p = (wchar_t *) iov->iov_base;
  80a228:	9c800017 	ldw	r18,0(r19)
			len = iov->iov_len / sizeof (wchar_t);
  80a22c:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  80a230:	a803d026 	beq	r21,zero,80b174 <___vfiprintf_internal_r+0x146c>
  80a234:	0039883a 	mov	fp,zero
  80a238:	00000206 	br	80a244 <___vfiprintf_internal_r+0x53c>
  80a23c:	94800104 	addi	r18,r18,4
  80a240:	af03cb26 	beq	r21,fp,80b170 <___vfiprintf_internal_r+0x1468>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a244:	91400017 	ldw	r5,0(r18)
  80a248:	a00d883a 	mov	r6,r20
  80a24c:	8009883a 	mov	r4,r16
  80a250:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a254:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a258:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a25c:	103ff726 	beq	r2,zero,80a23c <___vfiprintf_internal_r+0x534>
  80a260:	003f9706 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80a264:	d9800d04 	addi	r6,sp,52
  80a268:	a00b883a 	mov	r5,r20
  80a26c:	8009883a 	mov	r4,r16
  80a270:	08066940 	call	806694 <__sfvwrite_r>
	uio->uio_resid = 0;
  80a274:	d8000f15 	stw	zero,60(sp)
	uio->uio_iovcnt = 0;
  80a278:	d8000e15 	stw	zero,56(sp)
			PRINT (cp, m);
  80a27c:	103f901e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80a280:	b8800007 	ldb	r2,0(r23)
  80a284:	dc801a04 	addi	r18,sp,104
  80a288:	003fc606 	br	80a1a4 <___vfiprintf_internal_r+0x49c>
	CHECK_INIT (data, fp);
  80a28c:	08060e80 	call	8060e8 <__sinit>
  80a290:	003eaf06 	br	809d50 <___vfiprintf_internal_r+0x48>
  80a294:	d9c00415 	stw	r7,16(sp)
  80a298:	d8c00215 	stw	r3,8(sp)
  80a29c:	d9400c45 	stb	r5,49(sp)
			_uquad = SARG ();
  80a2a0:	b080080c 	andi	r2,r22,32
  80a2a4:	10006d26 	beq	r2,zero,80a45c <___vfiprintf_internal_r+0x754>
  80a2a8:	d8c00717 	ldw	r3,28(sp)
  80a2ac:	18800117 	ldw	r2,4(r3)
  80a2b0:	1c400017 	ldw	r17,0(r3)
  80a2b4:	18c00204 	addi	r3,r3,8
  80a2b8:	d8c00715 	stw	r3,28(sp)
  80a2bc:	102f883a 	mov	r23,r2
			if ((quad_t)_uquad < 0)
  80a2c0:	10007116 	blt	r2,zero,80a488 <___vfiprintf_internal_r+0x780>
number:			if ((dprec = prec) >= 0)
  80a2c4:	d8800417 	ldw	r2,16(sp)
			if (!sign)
  80a2c8:	dd400c43 	ldbu	r21,49(sp)
number:			if ((dprec = prec) >= 0)
  80a2cc:	10bfffd8 	cmpnei	r2,r2,-1
  80a2d0:	10000626 	beq	r2,zero,80a2ec <___vfiprintf_internal_r+0x5e4>
				flags &= ~ZEROPAD;
  80a2d4:	00ffdfc4 	movi	r3,-129
  80a2d8:	b0c6703a 	and	r3,r22,r3
			if (_uquad != 0 || prec != 0) {
  80a2dc:	8dc4b03a 	or	r2,r17,r23
				flags &= ~ZEROPAD;
  80a2e0:	d8c00315 	stw	r3,12(sp)
			if (_uquad != 0 || prec != 0) {
  80a2e4:	1003bf26 	beq	r2,zero,80b1e4 <___vfiprintf_internal_r+0x14dc>
  80a2e8:	182d883a 	mov	r22,r3
					if (_uquad < 10) {
  80a2ec:	b802b51e 	bne	r23,zero,80adc4 <___vfiprintf_internal_r+0x10bc>
  80a2f0:	888002a8 	cmpgeui	r2,r17,10
  80a2f4:	1002b31e 	bne	r2,zero,80adc4 <___vfiprintf_internal_r+0x10bc>
						*--cp = to_char(_uquad);
  80a2f8:	8c400c04 	addi	r17,r17,48
						break;
  80a2fc:	00800044 	movi	r2,1
						*--cp = to_char(_uquad);
  80a300:	dc4019c5 	stb	r17,103(sp)
						break;
  80a304:	dd800315 	stw	r22,12(sp)
  80a308:	d8800515 	stw	r2,20(sp)
						*--cp = to_char(_uquad);
  80a30c:	dcc019c4 	addi	r19,sp,103
						break;
  80a310:	00007d06 	br	80a508 <___vfiprintf_internal_r+0x800>
				flags |= SHORTINT;
  80a314:	18800007 	ldb	r2,0(r3)
  80a318:	b5801014 	ori	r22,r22,64
			goto rflag;
  80a31c:	003eb606 	br	809df8 <___vfiprintf_internal_r+0xf0>
			xdigs = "0123456789abcdef";
  80a320:	00802074 	movhi	r2,129
  80a324:	108ba504 	addi	r2,r2,11924
  80a328:	d8c00215 	stw	r3,8(sp)
  80a32c:	d8800a15 	stw	r2,40(sp)
  80a330:	d9c00415 	stw	r7,16(sp)
  80a334:	d9400c45 	stb	r5,49(sp)
hex:			_uquad = UARG ();
  80a338:	b080080c 	andi	r2,r22,32
			_uquad = SARG ();
  80a33c:	00c01e04 	movi	r3,120
hex:			_uquad = UARG ();
  80a340:	1000c926 	beq	r2,zero,80a668 <___vfiprintf_internal_r+0x960>
  80a344:	d8800717 	ldw	r2,28(sp)
  80a348:	14400017 	ldw	r17,0(r2)
  80a34c:	15c00117 	ldw	r23,4(r2)
  80a350:	10800204 	addi	r2,r2,8
  80a354:	d8800715 	stw	r2,28(sp)
			if (flags & ALT && _uquad != 0) {
  80a358:	b080004c 	andi	r2,r22,1
  80a35c:	10000226 	beq	r2,zero,80a368 <___vfiprintf_internal_r+0x660>
  80a360:	8dc4b03a 	or	r2,r17,r23
  80a364:	1003e01e 	bne	r2,zero,80b2e8 <___vfiprintf_internal_r+0x15e0>
			base = HEX;
  80a368:	00800084 	movi	r2,2
number:			if ((dprec = prec) >= 0)
  80a36c:	d9400417 	ldw	r5,16(sp)
nosign:			sign = '\0';
  80a370:	d8000c45 	stb	zero,49(sp)
  80a374:	002b883a 	mov	r21,zero
number:			if ((dprec = prec) >= 0)
  80a378:	28ffffe0 	cmpeqi	r3,r5,-1
  80a37c:	18004d1e 	bne	r3,zero,80a4b4 <___vfiprintf_internal_r+0x7ac>
				flags &= ~ZEROPAD;
  80a380:	013fdfc4 	movi	r4,-129
  80a384:	b108703a 	and	r4,r22,r4
			if (_uquad != 0 || prec != 0) {
  80a388:	8dc6b03a 	or	r3,r17,r23
				flags &= ~ZEROPAD;
  80a38c:	d9000315 	stw	r4,12(sp)
			if (_uquad != 0 || prec != 0) {
  80a390:	1802831e 	bne	r3,zero,80ada0 <___vfiprintf_internal_r+0x1098>
  80a394:	28041e1e 	bne	r5,zero,80b410 <___vfiprintf_internal_r+0x1708>
                       else if (base == OCT && (flags & ALT))
  80a398:	1003941e 	bne	r2,zero,80b1ec <___vfiprintf_internal_r+0x14e4>
  80a39c:	b080004c 	andi	r2,r22,1
  80a3a0:	d8800515 	stw	r2,20(sp)
  80a3a4:	1003c926 	beq	r2,zero,80b2cc <___vfiprintf_internal_r+0x15c4>
                         *--cp = '0';
  80a3a8:	00800c04 	movi	r2,48
  80a3ac:	d88019c5 	stb	r2,103(sp)
  80a3b0:	dcc019c4 	addi	r19,sp,103
  80a3b4:	d8800517 	ldw	r2,20(sp)
  80a3b8:	00005306 	br	80a508 <___vfiprintf_internal_r+0x800>
			cp = GET_ARG (N, ap, char_ptr_t);
  80a3bc:	d8800717 	ldw	r2,28(sp)
  80a3c0:	d9c00415 	stw	r7,16(sp)
  80a3c4:	d8c00215 	stw	r3,8(sp)
  80a3c8:	14c00017 	ldw	r19,0(r2)
			sign = '\0';
  80a3cc:	d8000c45 	stb	zero,49(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80a3d0:	14400104 	addi	r17,r2,4
			if (cp == NULL) {
  80a3d4:	98041926 	beq	r19,zero,80b43c <___vfiprintf_internal_r+0x1734>
			if (prec >= 0) {
  80a3d8:	38bfffe0 	cmpeqi	r2,r7,-1
  80a3dc:	380d883a 	mov	r6,r7
  80a3e0:	1003ea1e 	bne	r2,zero,80b38c <___vfiprintf_internal_r+0x1684>
				char *p = memchr (cp, 0, prec);
  80a3e4:	000b883a 	mov	r5,zero
  80a3e8:	9809883a 	mov	r4,r19
  80a3ec:	080782c0 	call	80782c <memchr>
				if (p != NULL)
  80a3f0:	10045026 	beq	r2,zero,80b534 <___vfiprintf_internal_r+0x182c>
					size = p - cp;
  80a3f4:	14c5c83a 	sub	r2,r2,r19
  80a3f8:	d8800515 	stw	r2,20(sp)
  80a3fc:	d8800015 	stw	r2,0(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80a400:	dc400715 	stw	r17,28(sp)
  80a404:	003ef706 	br	809fe4 <___vfiprintf_internal_r+0x2dc>
			xdigs = "0123456789abcdef";
  80a408:	d8c00215 	stw	r3,8(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a40c:	d8c00717 	ldw	r3,28(sp)
			ox[0] = '0';
  80a410:	009e0c04 	movi	r2,30768
			xdigs = "0123456789abcdef";
  80a414:	01002074 	movhi	r4,129
			ox[0] = '0';
  80a418:	d8800c8d 	sth	r2,50(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a41c:	18800104 	addi	r2,r3,4
  80a420:	d8800715 	stw	r2,28(sp)
			xdigs = "0123456789abcdef";
  80a424:	208ba504 	addi	r2,r4,11924
  80a428:	d8800a15 	stw	r2,40(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a42c:	1c400017 	ldw	r17,0(r3)
			xdigs = "0123456789abcdef";
  80a430:	d9c00415 	stw	r7,16(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a434:	002f883a 	mov	r23,zero
			flags |= HEXPREFIX;
  80a438:	b5800094 	ori	r22,r22,2
			base = HEX;
  80a43c:	00800084 	movi	r2,2
			goto nosign;
  80a440:	003fca06 	br	80a36c <___vfiprintf_internal_r+0x664>
			flags |= LONGINT;
  80a444:	b5800414 	ori	r22,r22,16
  80a448:	d9c00415 	stw	r7,16(sp)
  80a44c:	d8c00215 	stw	r3,8(sp)
  80a450:	d9400c45 	stb	r5,49(sp)
			_uquad = SARG ();
  80a454:	b080080c 	andi	r2,r22,32
  80a458:	103f931e 	bne	r2,zero,80a2a8 <___vfiprintf_internal_r+0x5a0>
			width = GET_ARG (n, ap, int);
  80a45c:	d9000717 	ldw	r4,28(sp)
			_uquad = SARG ();
  80a460:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  80a464:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  80a468:	1003ae1e 	bne	r2,zero,80b324 <___vfiprintf_internal_r+0x161c>
  80a46c:	b080100c 	andi	r2,r22,64
  80a470:	10040626 	beq	r2,zero,80b48c <___vfiprintf_internal_r+0x1784>
  80a474:	2440000f 	ldh	r17,0(r4)
  80a478:	d8c00715 	stw	r3,28(sp)
  80a47c:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  80a480:	b805883a 	mov	r2,r23
  80a484:	103f8f0e 	bge	r2,zero,80a2c4 <___vfiprintf_internal_r+0x5bc>
number:			if ((dprec = prec) >= 0)
  80a488:	d9400417 	ldw	r5,16(sp)
				_uquad = -_uquad;
  80a48c:	8804c03a 	cmpne	r2,r17,zero
  80a490:	05efc83a 	sub	r23,zero,r23
  80a494:	b8afc83a 	sub	r23,r23,r2
				sign = '-';
  80a498:	00800b44 	movi	r2,45
  80a49c:	d8800c45 	stb	r2,49(sp)
number:			if ((dprec = prec) >= 0)
  80a4a0:	28ffffe0 	cmpeqi	r3,r5,-1
				_uquad = -_uquad;
  80a4a4:	0463c83a 	sub	r17,zero,r17
				sign = '-';
  80a4a8:	05400b44 	movi	r21,45
			base = DEC;
  80a4ac:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  80a4b0:	183fb326 	beq	r3,zero,80a380 <___vfiprintf_internal_r+0x678>
				switch (base) {
  80a4b4:	10c00060 	cmpeqi	r3,r2,1
  80a4b8:	183f8c1e 	bne	r3,zero,80a2ec <___vfiprintf_internal_r+0x5e4>
  80a4bc:	108000a0 	cmpeqi	r2,r2,2
			cp = buf + BUF;
  80a4c0:	dcc01a04 	addi	r19,sp,104
  80a4c4:	10010226 	beq	r2,zero,80a8d0 <___vfiprintf_internal_r+0xbc8>
  80a4c8:	d9000a17 	ldw	r4,40(sp)
						*--cp = xdigs[_uquad & 15];
  80a4cc:	888003cc 	andi	r2,r17,15
						_uquad >>= 4;
  80a4d0:	b806973a 	slli	r3,r23,28
  80a4d4:	8822d13a 	srli	r17,r17,4
						*--cp = xdigs[_uquad & 15];
  80a4d8:	2085883a 	add	r2,r4,r2
  80a4dc:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  80a4e0:	b82ed13a 	srli	r23,r23,4
  80a4e4:	1c62b03a 	or	r17,r3,r17
						*--cp = xdigs[_uquad & 15];
  80a4e8:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80a4ec:	8dc4b03a 	or	r2,r17,r23
						*--cp = xdigs[_uquad & 15];
  80a4f0:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80a4f4:	103ff51e 	bne	r2,zero,80a4cc <___vfiprintf_internal_r+0x7c4>
			size = buf + BUF - cp;
  80a4f8:	d8801a04 	addi	r2,sp,104
  80a4fc:	14c5c83a 	sub	r2,r2,r19
  80a500:	d8800515 	stw	r2,20(sp)
  80a504:	dd800315 	stw	r22,12(sp)
		realsz = dprec > size ? dprec : size;
  80a508:	d8c00417 	ldw	r3,16(sp)
  80a50c:	d8800015 	stw	r2,0(sp)
  80a510:	10c0010e 	bge	r2,r3,80a518 <___vfiprintf_internal_r+0x810>
  80a514:	d8c00015 	stw	r3,0(sp)
		if (sign)
  80a518:	ad403fcc 	andi	r21,r21,255
  80a51c:	ad40201c 	xori	r21,r21,128
  80a520:	ad7fe004 	addi	r21,r21,-128
  80a524:	a83eb126 	beq	r21,zero,809fec <___vfiprintf_internal_r+0x2e4>
			realsz++;
  80a528:	d8800017 	ldw	r2,0(sp)
  80a52c:	10800044 	addi	r2,r2,1
  80a530:	d8800015 	stw	r2,0(sp)
  80a534:	003ead06 	br	809fec <___vfiprintf_internal_r+0x2e4>
			flags |= ZEROPAD;
  80a538:	18800007 	ldb	r2,0(r3)
  80a53c:	b5802014 	ori	r22,r22,128
			goto rflag;
  80a540:	003e2d06 	br	809df8 <___vfiprintf_internal_r+0xf0>
			if ((ch = *fmt++) == '*') {
  80a544:	18800007 	ldb	r2,0(r3)
  80a548:	19000044 	addi	r4,r3,1
  80a54c:	11800aa0 	cmpeqi	r6,r2,42
  80a550:	3004131e 	bne	r6,zero,80b5a0 <___vfiprintf_internal_r+0x1898>
			while (is_digit (ch)) {
  80a554:	11bff404 	addi	r6,r2,-48
  80a558:	30c002b0 	cmpltui	r3,r6,10
  80a55c:	1803ef26 	beq	r3,zero,80b51c <___vfiprintf_internal_r+0x1814>
			if ((ch = *fmt++) == '*') {
  80a560:	2007883a 	mov	r3,r4
			n = 0;
  80a564:	000f883a 	mov	r7,zero
				n = 10 * n + to_digit (ch);
  80a568:	380890ba 	slli	r4,r7,2
				ch = *fmt++;
  80a56c:	18800007 	ldb	r2,0(r3)
  80a570:	18c00044 	addi	r3,r3,1
				n = 10 * n + to_digit (ch);
  80a574:	21c9883a 	add	r4,r4,r7
  80a578:	2109883a 	add	r4,r4,r4
  80a57c:	218f883a 	add	r7,r4,r6
			while (is_digit (ch)) {
  80a580:	11bff404 	addi	r6,r2,-48
  80a584:	310002b0 	cmpltui	r4,r6,10
  80a588:	203ff71e 	bne	r4,zero,80a568 <___vfiprintf_internal_r+0x860>
  80a58c:	003e1b06 	br	809dfc <___vfiprintf_internal_r+0xf4>
			if ((ch = *fmt++) == '*') {
  80a590:	18800003 	ldbu	r2,0(r3)
			flags |= LADJUST;
  80a594:	10803fcc 	andi	r2,r2,255
  80a598:	1080201c 	xori	r2,r2,128
  80a59c:	b5800114 	ori	r22,r22,4
			goto rflag;
  80a5a0:	10bfe004 	addi	r2,r2,-128
  80a5a4:	003e1406 	br	809df8 <___vfiprintf_internal_r+0xf0>
			goto rflag;
  80a5a8:	18800007 	ldb	r2,0(r3)
			sign = '+';
  80a5ac:	01400ac4 	movi	r5,43
			goto rflag;
  80a5b0:	003e1106 	br	809df8 <___vfiprintf_internal_r+0xf0>
			width = GET_ARG (n, ap, int);
  80a5b4:	d9000717 	ldw	r4,28(sp)
			if ((ch = *fmt++) == '*') {
  80a5b8:	18800003 	ldbu	r2,0(r3)
			width = GET_ARG (n, ap, int);
  80a5bc:	21800017 	ldw	r6,0(r4)
  80a5c0:	21000104 	addi	r4,r4,4
  80a5c4:	d9800115 	stw	r6,4(sp)
			if (width >= 0)
  80a5c8:	30036516 	blt	r6,zero,80b360 <___vfiprintf_internal_r+0x1658>
			width = GET_ARG (n, ap, int);
  80a5cc:	d9000715 	stw	r4,28(sp)
  80a5d0:	10803fcc 	andi	r2,r2,255
  80a5d4:	1080201c 	xori	r2,r2,128
  80a5d8:	10bfe004 	addi	r2,r2,-128
  80a5dc:	003e0606 	br	809df8 <___vfiprintf_internal_r+0xf0>
			flags |= ALT;
  80a5e0:	18800007 	ldb	r2,0(r3)
  80a5e4:	b5800054 	ori	r22,r22,1
			goto rflag;
  80a5e8:	003e0306 	br	809df8 <___vfiprintf_internal_r+0xf0>
			if (!sign)
  80a5ec:	29003fcc 	andi	r4,r5,255
  80a5f0:	2100201c 	xori	r4,r4,128
  80a5f4:	213fe004 	addi	r4,r4,-128
			if ((ch = *fmt++) == '*') {
  80a5f8:	18800003 	ldbu	r2,0(r3)
			if (!sign)
  80a5fc:	203ff41e 	bne	r4,zero,80a5d0 <___vfiprintf_internal_r+0x8c8>
  80a600:	10803fcc 	andi	r2,r2,255
  80a604:	1080201c 	xori	r2,r2,128
				sign = ' ';
  80a608:	01400804 	movi	r5,32
  80a60c:	10bfe004 	addi	r2,r2,-128
  80a610:	003df906 	br	809df8 <___vfiprintf_internal_r+0xf0>
				*cp = GET_ARG (N, ap, int);
  80a614:	d8c00215 	stw	r3,8(sp)
  80a618:	d8c00717 	ldw	r3,28(sp)
			sign = '\0';
  80a61c:	d8000c45 	stb	zero,49(sp)
			cp = buf;
  80a620:	dcc01004 	addi	r19,sp,64
				*cp = GET_ARG (N, ap, int);
  80a624:	18800017 	ldw	r2,0(r3)
  80a628:	18c00104 	addi	r3,r3,4
  80a62c:	d8c00715 	stw	r3,28(sp)
  80a630:	d8801005 	stb	r2,64(sp)
			break;
  80a634:	00800044 	movi	r2,1
  80a638:	d8800015 	stw	r2,0(sp)
				size = 1;
  80a63c:	d8800515 	stw	r2,20(sp)
			break;
  80a640:	003e6806 	br	809fe4 <___vfiprintf_internal_r+0x2dc>
			xdigs = "0123456789ABCDEF";
  80a644:	00802074 	movhi	r2,129
  80a648:	108baa04 	addi	r2,r2,11944
  80a64c:	d8c00215 	stw	r3,8(sp)
  80a650:	d8800a15 	stw	r2,40(sp)
  80a654:	d9c00415 	stw	r7,16(sp)
  80a658:	d9400c45 	stb	r5,49(sp)
hex:			_uquad = UARG ();
  80a65c:	b080080c 	andi	r2,r22,32
			xdigs = "0123456789abcdef";
  80a660:	00c01604 	movi	r3,88
hex:			_uquad = UARG ();
  80a664:	103f371e 	bne	r2,zero,80a344 <___vfiprintf_internal_r+0x63c>
			width = GET_ARG (n, ap, int);
  80a668:	d9400717 	ldw	r5,28(sp)
hex:			_uquad = UARG ();
  80a66c:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  80a670:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  80a674:	1003221e 	bne	r2,zero,80b300 <___vfiprintf_internal_r+0x15f8>
  80a678:	b080100c 	andi	r2,r22,64
  80a67c:	10037f26 	beq	r2,zero,80b47c <___vfiprintf_internal_r+0x1774>
  80a680:	2c40000b 	ldhu	r17,0(r5)
  80a684:	002f883a 	mov	r23,zero
  80a688:	d9000715 	stw	r4,28(sp)
  80a68c:	003f3206 	br	80a358 <___vfiprintf_internal_r+0x650>
			flags |= LONGINT;
  80a690:	d9c00415 	stw	r7,16(sp)
  80a694:	d8c00215 	stw	r3,8(sp)
  80a698:	b5800414 	ori	r22,r22,16
			_uquad = UARG ();
  80a69c:	b080080c 	andi	r2,r22,32
  80a6a0:	1002d726 	beq	r2,zero,80b200 <___vfiprintf_internal_r+0x14f8>
  80a6a4:	d8c00717 	ldw	r3,28(sp)
			base = DEC;
  80a6a8:	00800044 	movi	r2,1
			_uquad = UARG ();
  80a6ac:	1c400017 	ldw	r17,0(r3)
  80a6b0:	1dc00117 	ldw	r23,4(r3)
  80a6b4:	18c00204 	addi	r3,r3,8
  80a6b8:	d8c00715 	stw	r3,28(sp)
  80a6bc:	003f2b06 	br	80a36c <___vfiprintf_internal_r+0x664>
			flags |= LONGINT;
  80a6c0:	d9c00415 	stw	r7,16(sp)
  80a6c4:	d8c00215 	stw	r3,8(sp)
  80a6c8:	b5800414 	ori	r22,r22,16
			_uquad = UARG ();
  80a6cc:	b080080c 	andi	r2,r22,32
  80a6d0:	1002d626 	beq	r2,zero,80b22c <___vfiprintf_internal_r+0x1524>
  80a6d4:	d8c00717 	ldw	r3,28(sp)
			base = OCT;
  80a6d8:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  80a6dc:	1c400017 	ldw	r17,0(r3)
  80a6e0:	1dc00117 	ldw	r23,4(r3)
  80a6e4:	18c00204 	addi	r3,r3,8
  80a6e8:	d8c00715 	stw	r3,28(sp)
  80a6ec:	003f1f06 	br	80a36c <___vfiprintf_internal_r+0x664>
			width = GET_ARG (n, ap, int);
  80a6f0:	d9000717 	ldw	r4,28(sp)
  80a6f4:	d8c00215 	stw	r3,8(sp)
  80a6f8:	d9400c45 	stb	r5,49(sp)
  80a6fc:	20c00017 	ldw	r3,0(r4)
  80a700:	21000104 	addi	r4,r4,4
			if (flags & QUADINT)
  80a704:	b080080c 	andi	r2,r22,32
			width = GET_ARG (n, ap, int);
  80a708:	d9000715 	stw	r4,28(sp)
			if (flags & QUADINT)
  80a70c:	10030f1e 	bne	r2,zero,80b34c <___vfiprintf_internal_r+0x1644>
			if (flags & LONGINT)
  80a710:	b080040c 	andi	r2,r22,16
  80a714:	1003291e 	bne	r2,zero,80b3bc <___vfiprintf_internal_r+0x16b4>
			else if (flags & SHORTINT)
  80a718:	b580100c 	andi	r22,r22,64
  80a71c:	b0032726 	beq	r22,zero,80b3bc <___vfiprintf_internal_r+0x16b4>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  80a720:	d8800617 	ldw	r2,24(sp)
  80a724:	1880000d 	sth	r2,0(r3)
  80a728:	003da006 	br	809dac <___vfiprintf_internal_r+0xa4>
			if (*fmt == 'l') {
  80a72c:	18800007 	ldb	r2,0(r3)
  80a730:	11001b18 	cmpnei	r4,r2,108
  80a734:	20032f26 	beq	r4,zero,80b3f4 <___vfiprintf_internal_r+0x16ec>
				flags |= LONGINT;
  80a738:	b5800414 	ori	r22,r22,16
  80a73c:	003dae06 	br	809df8 <___vfiprintf_internal_r+0xf0>
			flags |= QUADINT;
  80a740:	18800007 	ldb	r2,0(r3)
  80a744:	b5800814 	ori	r22,r22,32
			goto rflag;
  80a748:	003dab06 	br	809df8 <___vfiprintf_internal_r+0xf0>
		err = __sfvwrite_r(ptr, fp, uio);
  80a74c:	d9800d04 	addi	r6,sp,52
  80a750:	a00b883a 	mov	r5,r20
  80a754:	8009883a 	mov	r4,r16
  80a758:	08066940 	call	806694 <__sfvwrite_r>
			PAD (width - realsz, blanks);
  80a75c:	103e581e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		if (sign)
  80a760:	d8800c47 	ldb	r2,49(sp)
  80a764:	10030226 	beq	r2,zero,80b370 <___vfiprintf_internal_r+0x1668>
			PRINT (&sign, 1);
  80a768:	d8800c44 	addi	r2,sp,49
  80a76c:	d8801a15 	stw	r2,104(sp)
  80a770:	00800044 	movi	r2,1
  80a774:	d8801b15 	stw	r2,108(sp)
  80a778:	d9401c04 	addi	r5,sp,112
  80a77c:	01000044 	movi	r4,1
  80a780:	00c00044 	movi	r3,1
			PRINT (ox, 2);
  80a784:	2005883a 	mov	r2,r4
  80a788:	2825883a 	mov	r18,r5
  80a78c:	21000044 	addi	r4,r4,1
  80a790:	29400204 	addi	r5,r5,8
		if (flags & HEXPREFIX)
  80a794:	d9800917 	ldw	r6,36(sp)
  80a798:	30002826 	beq	r6,zero,80a83c <___vfiprintf_internal_r+0xb34>
			PRINT (ox, 2);
  80a79c:	d8800c84 	addi	r2,sp,50
  80a7a0:	18c00084 	addi	r3,r3,2
  80a7a4:	90800015 	stw	r2,0(r18)
  80a7a8:	00800084 	movi	r2,2
  80a7ac:	90800115 	stw	r2,4(r18)
  80a7b0:	d8c00f15 	stw	r3,60(sp)
  80a7b4:	d9000e15 	stw	r4,56(sp)
  80a7b8:	20800208 	cmpgei	r2,r4,8
  80a7bc:	10026926 	beq	r2,zero,80b164 <___vfiprintf_internal_r+0x145c>
	if (uio->uio_resid == 0) {
  80a7c0:	18028326 	beq	r3,zero,80b1d0 <___vfiprintf_internal_r+0x14c8>
	if (fp->_flags2 & __SWID) {
  80a7c4:	a0801917 	ldw	r2,100(r20)
  80a7c8:	1088000c 	andi	r2,r2,8192
  80a7cc:	10001226 	beq	r2,zero,80a818 <___vfiprintf_internal_r+0xb10>
		iov = uio->uio_iov;
  80a7d0:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a7d4:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  80a7d8:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80a7dc:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80a7e0:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  80a7e4:	a8027526 	beq	r21,zero,80b1bc <___vfiprintf_internal_r+0x14b4>
  80a7e8:	0039883a 	mov	fp,zero
  80a7ec:	00000206 	br	80a7f8 <___vfiprintf_internal_r+0xaf0>
  80a7f0:	8c400104 	addi	r17,r17,4
  80a7f4:	af027026 	beq	r21,fp,80b1b8 <___vfiprintf_internal_r+0x14b0>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a7f8:	89400017 	ldw	r5,0(r17)
  80a7fc:	a00d883a 	mov	r6,r20
  80a800:	8009883a 	mov	r4,r16
  80a804:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a808:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a80c:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a810:	103ff726 	beq	r2,zero,80a7f0 <___vfiprintf_internal_r+0xae8>
  80a814:	003e2a06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80a818:	d9800d04 	addi	r6,sp,52
  80a81c:	a00b883a 	mov	r5,r20
  80a820:	8009883a 	mov	r4,r16
  80a824:	08066940 	call	806694 <__sfvwrite_r>
			PRINT (ox, 2);
  80a828:	103e251e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80a82c:	d9401c04 	addi	r5,sp,112
  80a830:	01000044 	movi	r4,1
  80a834:	0007883a 	mov	r3,zero
  80a838:	dc801a04 	addi	r18,sp,104
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  80a83c:	d9800817 	ldw	r6,32(sp)
  80a840:	35c02018 	cmpnei	r23,r6,128
  80a844:	b8008326 	beq	r23,zero,80aa54 <___vfiprintf_internal_r+0xd4c>
		PAD (dprec - size, zeroes);
  80a848:	d9800417 	ldw	r6,16(sp)
  80a84c:	d9c00517 	ldw	r7,20(sp)
  80a850:	31ebc83a 	sub	r21,r6,r7
  80a854:	0540e116 	blt	zero,r21,80abdc <___vfiprintf_internal_r+0xed4>
		PRINT (cp, size);
  80a858:	d9800517 	ldw	r6,20(sp)
  80a85c:	94c00015 	stw	r19,0(r18)
  80a860:	d9000e15 	stw	r4,56(sp)
  80a864:	30c5883a 	add	r2,r6,r3
  80a868:	91800115 	stw	r6,4(r18)
  80a86c:	d8800f15 	stw	r2,60(sp)
  80a870:	20c00210 	cmplti	r3,r4,8
  80a874:	18003e1e 	bne	r3,zero,80a970 <___vfiprintf_internal_r+0xc68>
	if (uio->uio_resid == 0) {
  80a878:	10006726 	beq	r2,zero,80aa18 <___vfiprintf_internal_r+0xd10>
	if (fp->_flags2 & __SWID) {
  80a87c:	a0c01917 	ldw	r3,100(r20)
  80a880:	18c8000c 	andi	r3,r3,8192
  80a884:	18005e26 	beq	r3,zero,80aa00 <___vfiprintf_internal_r+0xcf8>
		iov = uio->uio_iov;
  80a888:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a88c:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  80a890:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80a894:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80a898:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  80a89c:	98014326 	beq	r19,zero,80adac <___vfiprintf_internal_r+0x10a4>
  80a8a0:	002f883a 	mov	r23,zero
  80a8a4:	00000206 	br	80a8b0 <___vfiprintf_internal_r+0xba8>
  80a8a8:	8c400104 	addi	r17,r17,4
  80a8ac:	9dc13e26 	beq	r19,r23,80ada8 <___vfiprintf_internal_r+0x10a0>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a8b0:	89400017 	ldw	r5,0(r17)
  80a8b4:	a00d883a 	mov	r6,r20
  80a8b8:	8009883a 	mov	r4,r16
  80a8bc:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a8c0:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a8c4:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a8c8:	103ff726 	beq	r2,zero,80a8a8 <___vfiprintf_internal_r+0xba0>
  80a8cc:	003dfc06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
						_uquad >>= 3;
  80a8d0:	8806d0fa 	srli	r3,r17,3
  80a8d4:	b808977a 	slli	r4,r23,29
  80a8d8:	b82ed0fa 	srli	r23,r23,3
						*--cp = to_char (_uquad & 7);
  80a8dc:	8c4001cc 	andi	r17,r17,7
  80a8e0:	88800c04 	addi	r2,r17,48
						_uquad >>= 3;
  80a8e4:	20e2b03a 	or	r17,r4,r3
						*--cp = to_char (_uquad & 7);
  80a8e8:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80a8ec:	8dc6b03a 	or	r3,r17,r23
  80a8f0:	980b883a 	mov	r5,r19
						*--cp = to_char (_uquad & 7);
  80a8f4:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80a8f8:	183ff51e 	bne	r3,zero,80a8d0 <___vfiprintf_internal_r+0xbc8>
					if (flags & ALT && *cp != '0')
  80a8fc:	b0c0004c 	andi	r3,r22,1
  80a900:	183efd26 	beq	r3,zero,80a4f8 <___vfiprintf_internal_r+0x7f0>
  80a904:	10803fcc 	andi	r2,r2,255
  80a908:	1080201c 	xori	r2,r2,128
  80a90c:	10bfe004 	addi	r2,r2,-128
  80a910:	10800c18 	cmpnei	r2,r2,48
  80a914:	103ef826 	beq	r2,zero,80a4f8 <___vfiprintf_internal_r+0x7f0>
						*--cp = '0';
  80a918:	00800c04 	movi	r2,48
  80a91c:	297fff84 	addi	r5,r5,-2
  80a920:	98bfffc5 	stb	r2,-1(r19)
			size = buf + BUF - cp;
  80a924:	d8801a04 	addi	r2,sp,104
  80a928:	1145c83a 	sub	r2,r2,r5
  80a92c:	d8800515 	stw	r2,20(sp)
  80a930:	dd800315 	stw	r22,12(sp)
						*--cp = '0';
  80a934:	2827883a 	mov	r19,r5
  80a938:	003ef306 	br	80a508 <___vfiprintf_internal_r+0x800>
		err = __sfvwrite_r(ptr, fp, uio);
  80a93c:	d9800d04 	addi	r6,sp,52
  80a940:	a00b883a 	mov	r5,r20
  80a944:	8009883a 	mov	r4,r16
  80a948:	08066940 	call	806694 <__sfvwrite_r>
		PAD (dprec - size, zeroes);
  80a94c:	103ddc1e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		PRINT (cp, size);
  80a950:	d8800517 	ldw	r2,20(sp)
  80a954:	00c00044 	movi	r3,1
  80a958:	dcc01a15 	stw	r19,104(sp)
  80a95c:	d8801b15 	stw	r2,108(sp)
  80a960:	d8800f15 	stw	r2,60(sp)
  80a964:	d8c00e15 	stw	r3,56(sp)
  80a968:	d9401c04 	addi	r5,sp,112
  80a96c:	01000044 	movi	r4,1
		if (flags & LADJUST)
  80a970:	d8c00317 	ldw	r3,12(sp)
  80a974:	18c0010c 	andi	r3,r3,4
  80a978:	18000426 	beq	r3,zero,80a98c <___vfiprintf_internal_r+0xc84>
			PAD (width - realsz, blanks);
  80a97c:	d8c00117 	ldw	r3,4(sp)
  80a980:	d9800017 	ldw	r6,0(sp)
  80a984:	19a5c83a 	sub	r18,r3,r6
  80a988:	04817a16 	blt	zero,r18,80af74 <___vfiprintf_internal_r+0x126c>
		ret += width > realsz ? width : realsz;
  80a98c:	d8c00117 	ldw	r3,4(sp)
  80a990:	d9000017 	ldw	r4,0(sp)
  80a994:	1900010e 	bge	r3,r4,80a99c <___vfiprintf_internal_r+0xc94>
  80a998:	2007883a 	mov	r3,r4
  80a99c:	d9000617 	ldw	r4,24(sp)
  80a9a0:	20c7883a 	add	r3,r4,r3
  80a9a4:	d8c00615 	stw	r3,24(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80a9a8:	10002726 	beq	r2,zero,80aa48 <___vfiprintf_internal_r+0xd40>
	if (fp->_flags2 & __SWID) {
  80a9ac:	a0c01917 	ldw	r3,100(r20)
  80a9b0:	18c8000c 	andi	r3,r3,8192
  80a9b4:	1800e026 	beq	r3,zero,80ad38 <___vfiprintf_internal_r+0x1030>
		iov = uio->uio_iov;
  80a9b8:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a9bc:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  80a9c0:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80a9c4:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80a9c8:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  80a9cc:	98016026 	beq	r19,zero,80af50 <___vfiprintf_internal_r+0x1248>
  80a9d0:	002f883a 	mov	r23,zero
  80a9d4:	00000206 	br	80a9e0 <___vfiprintf_internal_r+0xcd8>
  80a9d8:	8c400104 	addi	r17,r17,4
  80a9dc:	9dc15b26 	beq	r19,r23,80af4c <___vfiprintf_internal_r+0x1244>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a9e0:	89400017 	ldw	r5,0(r17)
  80a9e4:	a00d883a 	mov	r6,r20
  80a9e8:	8009883a 	mov	r4,r16
  80a9ec:	080bcd80 	call	80bcd8 <_fputwc_r>
  80a9f0:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a9f4:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a9f8:	103ff726 	beq	r2,zero,80a9d8 <___vfiprintf_internal_r+0xcd0>
  80a9fc:	003db006 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80aa00:	d9800d04 	addi	r6,sp,52
  80aa04:	a00b883a 	mov	r5,r20
  80aa08:	8009883a 	mov	r4,r16
  80aa0c:	08066940 	call	806694 <__sfvwrite_r>
	uio->uio_resid = 0;
  80aa10:	d8000f15 	stw	zero,60(sp)
		PRINT (cp, size);
  80aa14:	103daa1e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		if (flags & LADJUST)
  80aa18:	d8800317 	ldw	r2,12(sp)
  80aa1c:	1080010c 	andi	r2,r2,4
  80aa20:	1000c126 	beq	r2,zero,80ad28 <___vfiprintf_internal_r+0x1020>
			PAD (width - realsz, blanks);
  80aa24:	d8800117 	ldw	r2,4(sp)
  80aa28:	d8c00017 	ldw	r3,0(sp)
  80aa2c:	10e5c83a 	sub	r18,r2,r3
  80aa30:	04814d16 	blt	zero,r18,80af68 <___vfiprintf_internal_r+0x1260>
		ret += width > realsz ? width : realsz;
  80aa34:	10c0010e 	bge	r2,r3,80aa3c <___vfiprintf_internal_r+0xd34>
  80aa38:	1805883a 	mov	r2,r3
  80aa3c:	d8c00617 	ldw	r3,24(sp)
  80aa40:	1885883a 	add	r2,r3,r2
  80aa44:	d8800615 	stw	r2,24(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80aa48:	d8000e15 	stw	zero,56(sp)
  80aa4c:	dc801a04 	addi	r18,sp,104
  80aa50:	003cd606 	br	809dac <___vfiprintf_internal_r+0xa4>
			PAD (width - realsz, zeroes);
  80aa54:	d9800117 	ldw	r6,4(sp)
  80aa58:	d9c00017 	ldw	r7,0(sp)
  80aa5c:	31ebc83a 	sub	r21,r6,r7
  80aa60:	057f790e 	bge	zero,r21,80a848 <___vfiprintf_internal_r+0xb40>
  80aa64:	a9800450 	cmplti	r6,r21,17
  80aa68:	05802074 	movhi	r22,129
  80aa6c:	3002b91e 	bne	r6,zero,80b554 <___vfiprintf_internal_r+0x184c>
  80aa70:	b58c4404 	addi	r22,r22,12560
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80aa74:	dcc00815 	stw	r19,32(sp)
  80aa78:	00000606 	br	80aa94 <___vfiprintf_internal_r+0xd8c>
			PAD (width - realsz, zeroes);
  80aa7c:	11800084 	addi	r6,r2,2
  80aa80:	94800204 	addi	r18,r18,8
  80aa84:	2005883a 	mov	r2,r4
  80aa88:	ad7ffc04 	addi	r21,r21,-16
  80aa8c:	a9000448 	cmpgei	r4,r21,17
  80aa90:	20002926 	beq	r4,zero,80ab38 <___vfiprintf_internal_r+0xe30>
  80aa94:	11000044 	addi	r4,r2,1
  80aa98:	01400404 	movi	r5,16
  80aa9c:	18c00404 	addi	r3,r3,16
  80aaa0:	91400115 	stw	r5,4(r18)
  80aaa4:	95800015 	stw	r22,0(r18)
  80aaa8:	d8c00f15 	stw	r3,60(sp)
  80aaac:	d9000e15 	stw	r4,56(sp)
  80aab0:	21400208 	cmpgei	r5,r4,8
  80aab4:	283ff126 	beq	r5,zero,80aa7c <___vfiprintf_internal_r+0xd74>
	if (uio->uio_resid == 0) {
  80aab8:	18004426 	beq	r3,zero,80abcc <___vfiprintf_internal_r+0xec4>
	if (fp->_flags2 & __SWID) {
  80aabc:	a0801917 	ldw	r2,100(r20)
  80aac0:	1088000c 	andi	r2,r2,8192
  80aac4:	10001126 	beq	r2,zero,80ab0c <___vfiprintf_internal_r+0xe04>
		iov = uio->uio_iov;
  80aac8:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80aacc:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  80aad0:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80aad4:	b826d0ba 	srli	r19,r23,2
			for (i = 0; i < len; i++) {
  80aad8:	98003626 	beq	r19,zero,80abb4 <___vfiprintf_internal_r+0xeac>
  80aadc:	0039883a 	mov	fp,zero
  80aae0:	00000206 	br	80aaec <___vfiprintf_internal_r+0xde4>
  80aae4:	8c400104 	addi	r17,r17,4
  80aae8:	9f003126 	beq	r19,fp,80abb0 <___vfiprintf_internal_r+0xea8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80aaec:	89400017 	ldw	r5,0(r17)
  80aaf0:	a00d883a 	mov	r6,r20
  80aaf4:	8009883a 	mov	r4,r16
  80aaf8:	080bcd80 	call	80bcd8 <_fputwc_r>
  80aafc:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80ab00:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80ab04:	103ff726 	beq	r2,zero,80aae4 <___vfiprintf_internal_r+0xddc>
  80ab08:	003d6d06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80ab0c:	d9800d04 	addi	r6,sp,52
  80ab10:	a00b883a 	mov	r5,r20
  80ab14:	8009883a 	mov	r4,r16
  80ab18:	08066940 	call	806694 <__sfvwrite_r>
			PAD (width - realsz, zeroes);
  80ab1c:	103d681e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80ab20:	ad7ffc04 	addi	r21,r21,-16
  80ab24:	a9000448 	cmpgei	r4,r21,17
  80ab28:	01800044 	movi	r6,1
  80ab2c:	0007883a 	mov	r3,zero
  80ab30:	dc801a04 	addi	r18,sp,104
  80ab34:	203fd71e 	bne	r4,zero,80aa94 <___vfiprintf_internal_r+0xd8c>
  80ab38:	dcc00817 	ldw	r19,32(sp)
  80ab3c:	91c00204 	addi	r7,r18,8
  80ab40:	1d47883a 	add	r3,r3,r21
  80ab44:	95800015 	stw	r22,0(r18)
  80ab48:	95400115 	stw	r21,4(r18)
  80ab4c:	d8c00f15 	stw	r3,60(sp)
  80ab50:	d9800e15 	stw	r6,56(sp)
  80ab54:	30800208 	cmpgei	r2,r6,8
  80ab58:	1001de26 	beq	r2,zero,80b2d4 <___vfiprintf_internal_r+0x15cc>
	if (uio->uio_resid == 0) {
  80ab5c:	18021f26 	beq	r3,zero,80b3dc <___vfiprintf_internal_r+0x16d4>
	if (fp->_flags2 & __SWID) {
  80ab60:	a0801917 	ldw	r2,100(r20)
  80ab64:	1088000c 	andi	r2,r2,8192
  80ab68:	10021726 	beq	r2,zero,80b3c8 <___vfiprintf_internal_r+0x16c0>
		iov = uio->uio_iov;
  80ab6c:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80ab70:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  80ab74:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80ab78:	b82ad0ba 	srli	r21,r23,2
			for (i = 0; i < len; i++) {
  80ab7c:	a8025526 	beq	r21,zero,80b4d4 <___vfiprintf_internal_r+0x17cc>
  80ab80:	0039883a 	mov	fp,zero
  80ab84:	00000206 	br	80ab90 <___vfiprintf_internal_r+0xe88>
  80ab88:	8c400104 	addi	r17,r17,4
  80ab8c:	af025026 	beq	r21,fp,80b4d0 <___vfiprintf_internal_r+0x17c8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80ab90:	89400017 	ldw	r5,0(r17)
  80ab94:	a00d883a 	mov	r6,r20
  80ab98:	8009883a 	mov	r4,r16
  80ab9c:	080bcd80 	call	80bcd8 <_fputwc_r>
  80aba0:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80aba4:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80aba8:	103ff726 	beq	r2,zero,80ab88 <___vfiprintf_internal_r+0xe80>
  80abac:	003d4406 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80abb0:	d8c00f17 	ldw	r3,60(sp)
  80abb4:	00bfff04 	movi	r2,-4
  80abb8:	b8ae703a 	and	r23,r23,r2
  80abbc:	1dc7c83a 	sub	r3,r3,r23
  80abc0:	d8c00f15 	stw	r3,60(sp)
  80abc4:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80abc8:	183fc01e 	bne	r3,zero,80aacc <___vfiprintf_internal_r+0xdc4>
	uio->uio_iovcnt = 0;
  80abcc:	01800044 	movi	r6,1
  80abd0:	0005883a 	mov	r2,zero
			PAD (width - realsz, zeroes);
  80abd4:	dc801a04 	addi	r18,sp,104
  80abd8:	003fab06 	br	80aa88 <___vfiprintf_internal_r+0xd80>
  80abdc:	05802074 	movhi	r22,129
  80abe0:	b58c4404 	addi	r22,r22,12560
		PAD (dprec - size, zeroes);
  80abe4:	a9800450 	cmplti	r6,r21,17
  80abe8:	3002371e 	bne	r6,zero,80b4c8 <___vfiprintf_internal_r+0x17c0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80abec:	dcc00415 	stw	r19,16(sp)
  80abf0:	00000606 	br	80ac0c <___vfiprintf_internal_r+0xf04>
		PAD (dprec - size, zeroes);
  80abf4:	11000084 	addi	r4,r2,2
  80abf8:	94800204 	addi	r18,r18,8
  80abfc:	2805883a 	mov	r2,r5
  80ac00:	ad7ffc04 	addi	r21,r21,-16
  80ac04:	a9400448 	cmpgei	r5,r21,17
  80ac08:	28002926 	beq	r5,zero,80acb0 <___vfiprintf_internal_r+0xfa8>
  80ac0c:	11400044 	addi	r5,r2,1
  80ac10:	01000404 	movi	r4,16
  80ac14:	18c00404 	addi	r3,r3,16
  80ac18:	91000115 	stw	r4,4(r18)
  80ac1c:	95800015 	stw	r22,0(r18)
  80ac20:	d8c00f15 	stw	r3,60(sp)
  80ac24:	d9400e15 	stw	r5,56(sp)
  80ac28:	29000208 	cmpgei	r4,r5,8
  80ac2c:	203ff126 	beq	r4,zero,80abf4 <___vfiprintf_internal_r+0xeec>
	if (uio->uio_resid == 0) {
  80ac30:	18003326 	beq	r3,zero,80ad00 <___vfiprintf_internal_r+0xff8>
	if (fp->_flags2 & __SWID) {
  80ac34:	a0801917 	ldw	r2,100(r20)
  80ac38:	1088000c 	andi	r2,r2,8192
  80ac3c:	10001126 	beq	r2,zero,80ac84 <___vfiprintf_internal_r+0xf7c>
		iov = uio->uio_iov;
  80ac40:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80ac44:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  80ac48:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80ac4c:	b826d0ba 	srli	r19,r23,2
			for (i = 0; i < len; i++) {
  80ac50:	98002526 	beq	r19,zero,80ace8 <___vfiprintf_internal_r+0xfe0>
  80ac54:	0039883a 	mov	fp,zero
  80ac58:	00000206 	br	80ac64 <___vfiprintf_internal_r+0xf5c>
  80ac5c:	8c400104 	addi	r17,r17,4
  80ac60:	9f002026 	beq	r19,fp,80ace4 <___vfiprintf_internal_r+0xfdc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80ac64:	89400017 	ldw	r5,0(r17)
  80ac68:	a00d883a 	mov	r6,r20
  80ac6c:	8009883a 	mov	r4,r16
  80ac70:	080bcd80 	call	80bcd8 <_fputwc_r>
  80ac74:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80ac78:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80ac7c:	103ff726 	beq	r2,zero,80ac5c <___vfiprintf_internal_r+0xf54>
  80ac80:	003d0f06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80ac84:	d9800d04 	addi	r6,sp,52
  80ac88:	a00b883a 	mov	r5,r20
  80ac8c:	8009883a 	mov	r4,r16
  80ac90:	08066940 	call	806694 <__sfvwrite_r>
		PAD (dprec - size, zeroes);
  80ac94:	103d0a1e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80ac98:	ad7ffc04 	addi	r21,r21,-16
  80ac9c:	a9400448 	cmpgei	r5,r21,17
  80aca0:	01000044 	movi	r4,1
  80aca4:	0007883a 	mov	r3,zero
  80aca8:	dc801a04 	addi	r18,sp,104
  80acac:	283fd71e 	bne	r5,zero,80ac0c <___vfiprintf_internal_r+0xf04>
  80acb0:	dcc00417 	ldw	r19,16(sp)
  80acb4:	91800204 	addi	r6,r18,8
  80acb8:	1d47883a 	add	r3,r3,r21
  80acbc:	95800015 	stw	r22,0(r18)
  80acc0:	95400115 	stw	r21,4(r18)
  80acc4:	d8c00f15 	stw	r3,60(sp)
  80acc8:	d9000e15 	stw	r4,56(sp)
  80accc:	20800208 	cmpgei	r2,r4,8
  80acd0:	1001071e 	bne	r2,zero,80b0f0 <___vfiprintf_internal_r+0x13e8>
		PRINT (cp, size);
  80acd4:	21000044 	addi	r4,r4,1
  80acd8:	31400204 	addi	r5,r6,8
		PAD (dprec - size, zeroes);
  80acdc:	3025883a 	mov	r18,r6
  80ace0:	003edd06 	br	80a858 <___vfiprintf_internal_r+0xb50>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80ace4:	d8c00f17 	ldw	r3,60(sp)
  80ace8:	00bfff04 	movi	r2,-4
  80acec:	b8ae703a 	and	r23,r23,r2
  80acf0:	1dc7c83a 	sub	r3,r3,r23
  80acf4:	d8c00f15 	stw	r3,60(sp)
  80acf8:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80acfc:	183fd11e 	bne	r3,zero,80ac44 <___vfiprintf_internal_r+0xf3c>
	uio->uio_iovcnt = 0;
  80ad00:	01000044 	movi	r4,1
  80ad04:	0005883a 	mov	r2,zero
		PAD (dprec - size, zeroes);
  80ad08:	dc801a04 	addi	r18,sp,104
  80ad0c:	003fbc06 	br	80ac00 <___vfiprintf_internal_r+0xef8>
		err = __sfvwrite_r(ptr, fp, uio);
  80ad10:	d9800d04 	addi	r6,sp,52
  80ad14:	a00b883a 	mov	r5,r20
  80ad18:	8009883a 	mov	r4,r16
  80ad1c:	08066940 	call	806694 <__sfvwrite_r>
	uio->uio_resid = 0;
  80ad20:	d8000f15 	stw	zero,60(sp)
			PAD (width - realsz, blanks);
  80ad24:	103ce61e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		ret += width > realsz ? width : realsz;
  80ad28:	d8800117 	ldw	r2,4(sp)
  80ad2c:	d8c00017 	ldw	r3,0(sp)
  80ad30:	10ff420e 	bge	r2,r3,80aa3c <___vfiprintf_internal_r+0xd34>
  80ad34:	003f4006 	br	80aa38 <___vfiprintf_internal_r+0xd30>
		err = __sfvwrite_r(ptr, fp, uio);
  80ad38:	d9800d04 	addi	r6,sp,52
  80ad3c:	a00b883a 	mov	r5,r20
  80ad40:	8009883a 	mov	r4,r16
  80ad44:	08066940 	call	806694 <__sfvwrite_r>
	uio->uio_resid = 0;
  80ad48:	d8000f15 	stw	zero,60(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80ad4c:	103cdc1e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80ad50:	d8000e15 	stw	zero,56(sp)
  80ad54:	dc801a04 	addi	r18,sp,104
  80ad58:	003c1406 	br	809dac <___vfiprintf_internal_r+0xa4>
		err = __sfvwrite_r(ptr, fp, uio);
  80ad5c:	d9800d04 	addi	r6,sp,52
  80ad60:	a00b883a 	mov	r5,r20
  80ad64:	8009883a 	mov	r4,r16
  80ad68:	08066940 	call	806694 <__sfvwrite_r>
			PRINT (&sign, 1);
  80ad6c:	103cd41e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		if (flags & HEXPREFIX)
  80ad70:	d8800917 	ldw	r2,36(sp)
  80ad74:	103ead26 	beq	r2,zero,80a82c <___vfiprintf_internal_r+0xb24>
			PRINT (ox, 2);
  80ad78:	d8800c84 	addi	r2,sp,50
  80ad7c:	d8801a15 	stw	r2,104(sp)
  80ad80:	00800084 	movi	r2,2
  80ad84:	d8801b15 	stw	r2,108(sp)
  80ad88:	dc801c04 	addi	r18,sp,112
  80ad8c:	00800044 	movi	r2,1
  80ad90:	00c00084 	movi	r3,2
		PRINT (cp, size);
  80ad94:	11000044 	addi	r4,r2,1
  80ad98:	91400204 	addi	r5,r18,8
  80ad9c:	003ea706 	br	80a83c <___vfiprintf_internal_r+0xb34>
  80ada0:	202d883a 	mov	r22,r4
  80ada4:	003dc306 	br	80a4b4 <___vfiprintf_internal_r+0x7ac>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80ada8:	d8800f17 	ldw	r2,60(sp)
  80adac:	b56c703a 	and	r22,r22,r21
  80adb0:	1585c83a 	sub	r2,r2,r22
  80adb4:	d8800f15 	stw	r2,60(sp)
  80adb8:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80adbc:	103eb41e 	bne	r2,zero,80a890 <___vfiprintf_internal_r+0xb88>
  80adc0:	003f1506 	br	80aa18 <___vfiprintf_internal_r+0xd10>
			cp = buf + BUF;
  80adc4:	dcc01a04 	addi	r19,sp,104
					  *--cp = to_char (_uquad % 10);
  80adc8:	8809883a 	mov	r4,r17
  80adcc:	b80b883a 	mov	r5,r23
  80add0:	01800284 	movi	r6,10
  80add4:	000f883a 	mov	r7,zero
  80add8:	080d1180 	call	80d118 <__umoddi3>
  80addc:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  80ade0:	8809883a 	mov	r4,r17
  80ade4:	b80b883a 	mov	r5,r23
					  *--cp = to_char (_uquad % 10);
  80ade8:	98bfffc5 	stb	r2,-1(r19)
					  _uquad /= 10;
  80adec:	01800284 	movi	r6,10
  80adf0:	000f883a 	mov	r7,zero
  80adf4:	080caf80 	call	80caf8 <__udivdi3>
  80adf8:	b809883a 	mov	r4,r23
  80adfc:	880b883a 	mov	r5,r17
					  *--cp = to_char (_uquad % 10);
  80ae00:	9cffffc4 	addi	r19,r19,-1
					  _uquad /= 10;
  80ae04:	1023883a 	mov	r17,r2
  80ae08:	182f883a 	mov	r23,r3
					} while (_uquad != 0);
  80ae0c:	203fee1e 	bne	r4,zero,80adc8 <___vfiprintf_internal_r+0x10c0>
  80ae10:	294002a8 	cmpgeui	r5,r5,10
  80ae14:	283fec1e 	bne	r5,zero,80adc8 <___vfiprintf_internal_r+0x10c0>
  80ae18:	003db706 	br	80a4f8 <___vfiprintf_internal_r+0x7f0>
			PAD (width - realsz, blanks);
  80ae1c:	a9000450 	cmplti	r4,r21,17
  80ae20:	07002074 	movhi	fp,129
  80ae24:	2001c01e 	bne	r4,zero,80b528 <___vfiprintf_internal_r+0x1820>
  80ae28:	e70c4804 	addi	fp,fp,12576
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80ae2c:	dcc00b15 	stw	r19,44(sp)
  80ae30:	00000706 	br	80ae50 <___vfiprintf_internal_r+0x1148>
			PAD (width - realsz, blanks);
  80ae34:	11800084 	addi	r6,r2,2
  80ae38:	94800204 	addi	r18,r18,8
  80ae3c:	2805883a 	mov	r2,r5
  80ae40:	ad7ffc04 	addi	r21,r21,-16
  80ae44:	a9000448 	cmpgei	r4,r21,17
  80ae48:	20002926 	beq	r4,zero,80aef0 <___vfiprintf_internal_r+0x11e8>
  80ae4c:	11400044 	addi	r5,r2,1
  80ae50:	01000404 	movi	r4,16
  80ae54:	18c00404 	addi	r3,r3,16
  80ae58:	91000115 	stw	r4,4(r18)
  80ae5c:	97000015 	stw	fp,0(r18)
  80ae60:	d8c00f15 	stw	r3,60(sp)
  80ae64:	d9400e15 	stw	r5,56(sp)
  80ae68:	29000208 	cmpgei	r4,r5,8
  80ae6c:	203ff126 	beq	r4,zero,80ae34 <___vfiprintf_internal_r+0x112c>
	if (uio->uio_resid == 0) {
  80ae70:	18003226 	beq	r3,zero,80af3c <___vfiprintf_internal_r+0x1234>
	if (fp->_flags2 & __SWID) {
  80ae74:	a0801917 	ldw	r2,100(r20)
  80ae78:	1088000c 	andi	r2,r2,8192
  80ae7c:	10001126 	beq	r2,zero,80aec4 <___vfiprintf_internal_r+0x11bc>
		iov = uio->uio_iov;
  80ae80:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80ae84:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80ae88:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80ae8c:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  80ae90:	98002426 	beq	r19,zero,80af24 <___vfiprintf_internal_r+0x121c>
  80ae94:	002f883a 	mov	r23,zero
  80ae98:	00000206 	br	80aea4 <___vfiprintf_internal_r+0x119c>
  80ae9c:	8c400104 	addi	r17,r17,4
  80aea0:	9dc01f26 	beq	r19,r23,80af20 <___vfiprintf_internal_r+0x1218>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80aea4:	89400017 	ldw	r5,0(r17)
  80aea8:	a00d883a 	mov	r6,r20
  80aeac:	8009883a 	mov	r4,r16
  80aeb0:	080bcd80 	call	80bcd8 <_fputwc_r>
  80aeb4:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80aeb8:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80aebc:	103ff726 	beq	r2,zero,80ae9c <___vfiprintf_internal_r+0x1194>
  80aec0:	003c7f06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80aec4:	d9800d04 	addi	r6,sp,52
  80aec8:	a00b883a 	mov	r5,r20
  80aecc:	8009883a 	mov	r4,r16
  80aed0:	08066940 	call	806694 <__sfvwrite_r>
			PAD (width - realsz, blanks);
  80aed4:	103c7a1e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80aed8:	ad7ffc04 	addi	r21,r21,-16
  80aedc:	a9000448 	cmpgei	r4,r21,17
  80aee0:	01800044 	movi	r6,1
  80aee4:	0007883a 	mov	r3,zero
  80aee8:	dc801a04 	addi	r18,sp,104
  80aeec:	203fd71e 	bne	r4,zero,80ae4c <___vfiprintf_internal_r+0x1144>
  80aef0:	dcc00b17 	ldw	r19,44(sp)
  80aef4:	1d47883a 	add	r3,r3,r21
  80aef8:	97000015 	stw	fp,0(r18)
  80aefc:	95400115 	stw	r21,4(r18)
  80af00:	d8c00f15 	stw	r3,60(sp)
  80af04:	d9800e15 	stw	r6,56(sp)
  80af08:	30800208 	cmpgei	r2,r6,8
  80af0c:	1000d21e 	bne	r2,zero,80b258 <___vfiprintf_internal_r+0x1550>
  80af10:	94800204 	addi	r18,r18,8
			PRINT (&sign, 1);
  80af14:	31000044 	addi	r4,r6,1
  80af18:	3005883a 	mov	r2,r6
  80af1c:	003c4706 	br	80a03c <___vfiprintf_internal_r+0x334>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80af20:	d8c00f17 	ldw	r3,60(sp)
  80af24:	00bfff04 	movi	r2,-4
  80af28:	b0ac703a 	and	r22,r22,r2
  80af2c:	1d87c83a 	sub	r3,r3,r22
  80af30:	d8c00f15 	stw	r3,60(sp)
  80af34:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80af38:	183fd21e 	bne	r3,zero,80ae84 <___vfiprintf_internal_r+0x117c>
	uio->uio_iovcnt = 0;
  80af3c:	0005883a 	mov	r2,zero
  80af40:	01800044 	movi	r6,1
			PAD (width - realsz, blanks);
  80af44:	dc801a04 	addi	r18,sp,104
  80af48:	003fbd06 	br	80ae40 <___vfiprintf_internal_r+0x1138>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80af4c:	d8800f17 	ldw	r2,60(sp)
  80af50:	b56c703a 	and	r22,r22,r21
  80af54:	1585c83a 	sub	r2,r2,r22
  80af58:	d8800f15 	stw	r2,60(sp)
  80af5c:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80af60:	103e971e 	bne	r2,zero,80a9c0 <___vfiprintf_internal_r+0xcb8>
  80af64:	003eb806 	br	80aa48 <___vfiprintf_internal_r+0xd40>
			PAD (width - realsz, blanks);
  80af68:	0009883a 	mov	r4,zero
  80af6c:	0005883a 	mov	r2,zero
  80af70:	d9401a04 	addi	r5,sp,104
  80af74:	90c00450 	cmplti	r3,r18,17
  80af78:	07002074 	movhi	fp,129
  80af7c:	1801721e 	bne	r3,zero,80b548 <___vfiprintf_internal_r+0x1840>
  80af80:	e70c4804 	addi	fp,fp,12576
  80af84:	05800404 	movi	r22,16
  80af88:	00000606 	br	80afa4 <___vfiprintf_internal_r+0x129c>
  80af8c:	21800084 	addi	r6,r4,2
  80af90:	29400204 	addi	r5,r5,8
  80af94:	1809883a 	mov	r4,r3
  80af98:	94bffc04 	addi	r18,r18,-16
  80af9c:	90c00448 	cmpgei	r3,r18,17
  80afa0:	18002a26 	beq	r3,zero,80b04c <___vfiprintf_internal_r+0x1344>
  80afa4:	20c00044 	addi	r3,r4,1
  80afa8:	10800404 	addi	r2,r2,16
  80afac:	2f000015 	stw	fp,0(r5)
  80afb0:	2d800115 	stw	r22,4(r5)
  80afb4:	d8800f15 	stw	r2,60(sp)
  80afb8:	d8c00e15 	stw	r3,56(sp)
  80afbc:	19800220 	cmpeqi	r6,r3,8
  80afc0:	303ff226 	beq	r6,zero,80af8c <___vfiprintf_internal_r+0x1284>
	if (uio->uio_resid == 0) {
  80afc4:	10004626 	beq	r2,zero,80b0e0 <___vfiprintf_internal_r+0x13d8>
	if (fp->_flags2 & __SWID) {
  80afc8:	a0c01917 	ldw	r3,100(r20)
  80afcc:	18c8000c 	andi	r3,r3,8192
  80afd0:	18001226 	beq	r3,zero,80b01c <___vfiprintf_internal_r+0x1314>
		iov = uio->uio_iov;
  80afd4:	dcc00d17 	ldw	r19,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80afd8:	98c00117 	ldw	r3,4(r19)
			p = (wchar_t *) iov->iov_base;
  80afdc:	9dc00017 	ldw	r23,0(r19)
			len = iov->iov_len / sizeof (wchar_t);
  80afe0:	1822d0ba 	srli	r17,r3,2
  80afe4:	d8c00315 	stw	r3,12(sp)
			for (i = 0; i < len; i++) {
  80afe8:	88003626 	beq	r17,zero,80b0c4 <___vfiprintf_internal_r+0x13bc>
  80afec:	002b883a 	mov	r21,zero
  80aff0:	00000206 	br	80affc <___vfiprintf_internal_r+0x12f4>
  80aff4:	bdc00104 	addi	r23,r23,4
  80aff8:	8d403126 	beq	r17,r21,80b0c0 <___vfiprintf_internal_r+0x13b8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80affc:	b9400017 	ldw	r5,0(r23)
  80b000:	a00d883a 	mov	r6,r20
  80b004:	8009883a 	mov	r4,r16
  80b008:	080bcd80 	call	80bcd8 <_fputwc_r>
  80b00c:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80b010:	ad400044 	addi	r21,r21,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b014:	103ff726 	beq	r2,zero,80aff4 <___vfiprintf_internal_r+0x12ec>
  80b018:	003c2906 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80b01c:	8009883a 	mov	r4,r16
  80b020:	d9800d04 	addi	r6,sp,52
  80b024:	a00b883a 	mov	r5,r20
  80b028:	08066940 	call	806694 <__sfvwrite_r>
  80b02c:	1009883a 	mov	r4,r2
			PAD (width - realsz, blanks);
  80b030:	103c231e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
  80b034:	94bffc04 	addi	r18,r18,-16
  80b038:	90c00448 	cmpgei	r3,r18,17
  80b03c:	01800044 	movi	r6,1
  80b040:	0005883a 	mov	r2,zero
  80b044:	d9401a04 	addi	r5,sp,104
  80b048:	183fd61e 	bne	r3,zero,80afa4 <___vfiprintf_internal_r+0x129c>
  80b04c:	1485883a 	add	r2,r2,r18
  80b050:	d9800e15 	stw	r6,56(sp)
  80b054:	2f000015 	stw	fp,0(r5)
  80b058:	2c800115 	stw	r18,4(r5)
  80b05c:	d8800f15 	stw	r2,60(sp)
  80b060:	31800218 	cmpnei	r6,r6,8
  80b064:	303e491e 	bne	r6,zero,80a98c <___vfiprintf_internal_r+0xc84>
	if (uio->uio_resid == 0) {
  80b068:	103f2f26 	beq	r2,zero,80ad28 <___vfiprintf_internal_r+0x1020>
	if (fp->_flags2 & __SWID) {
  80b06c:	a0c01917 	ldw	r3,100(r20)
  80b070:	18c8000c 	andi	r3,r3,8192
  80b074:	183f2626 	beq	r3,zero,80ad10 <___vfiprintf_internal_r+0x1008>
		iov = uio->uio_iov;
  80b078:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b07c:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  80b080:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80b084:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80b088:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  80b08c:	9800f526 	beq	r19,zero,80b464 <___vfiprintf_internal_r+0x175c>
  80b090:	002f883a 	mov	r23,zero
  80b094:	00000206 	br	80b0a0 <___vfiprintf_internal_r+0x1398>
  80b098:	8c400104 	addi	r17,r17,4
  80b09c:	9dc0f026 	beq	r19,r23,80b460 <___vfiprintf_internal_r+0x1758>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b0a0:	89400017 	ldw	r5,0(r17)
  80b0a4:	a00d883a 	mov	r6,r20
  80b0a8:	8009883a 	mov	r4,r16
  80b0ac:	080bcd80 	call	80bcd8 <_fputwc_r>
  80b0b0:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80b0b4:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b0b8:	103ff726 	beq	r2,zero,80b098 <___vfiprintf_internal_r+0x1390>
  80b0bc:	003c0006 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b0c0:	d8800f17 	ldw	r2,60(sp)
  80b0c4:	d8c00317 	ldw	r3,12(sp)
  80b0c8:	013fff04 	movi	r4,-4
  80b0cc:	9cc00204 	addi	r19,r19,8
  80b0d0:	192a703a 	and	r21,r3,r4
  80b0d4:	1545c83a 	sub	r2,r2,r21
  80b0d8:	d8800f15 	stw	r2,60(sp)
		for (; uio->uio_resid != 0;
  80b0dc:	103fbe1e 	bne	r2,zero,80afd8 <___vfiprintf_internal_r+0x12d0>
	uio->uio_iovcnt = 0;
  80b0e0:	01800044 	movi	r6,1
  80b0e4:	0009883a 	mov	r4,zero
			PAD (width - realsz, blanks);
  80b0e8:	d9401a04 	addi	r5,sp,104
  80b0ec:	003faa06 	br	80af98 <___vfiprintf_internal_r+0x1290>
	if (uio->uio_resid == 0) {
  80b0f0:	183e1726 	beq	r3,zero,80a950 <___vfiprintf_internal_r+0xc48>
	if (fp->_flags2 & __SWID) {
  80b0f4:	a0801917 	ldw	r2,100(r20)
  80b0f8:	1088000c 	andi	r2,r2,8192
  80b0fc:	103e0f26 	beq	r2,zero,80a93c <___vfiprintf_internal_r+0xc34>
		iov = uio->uio_iov;
  80b100:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b104:	05bfff04 	movi	r22,-4
			len = iov->iov_len / sizeof (wchar_t);
  80b108:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  80b10c:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80b110:	b82ad0ba 	srli	r21,r23,2
			for (i = 0; i < len; i++) {
  80b114:	a8006726 	beq	r21,zero,80b2b4 <___vfiprintf_internal_r+0x15ac>
  80b118:	0039883a 	mov	fp,zero
  80b11c:	00000206 	br	80b128 <___vfiprintf_internal_r+0x1420>
  80b120:	8c400104 	addi	r17,r17,4
  80b124:	af006226 	beq	r21,fp,80b2b0 <___vfiprintf_internal_r+0x15a8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b128:	89400017 	ldw	r5,0(r17)
  80b12c:	a00d883a 	mov	r6,r20
  80b130:	8009883a 	mov	r4,r16
  80b134:	080bcd80 	call	80bcd8 <_fputwc_r>
  80b138:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80b13c:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b140:	103ff726 	beq	r2,zero,80b120 <___vfiprintf_internal_r+0x1418>
  80b144:	003bde06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
			PRINT (ox, 2);
  80b148:	d8800c84 	addi	r2,sp,50
  80b14c:	d8801a15 	stw	r2,104(sp)
  80b150:	00800084 	movi	r2,2
  80b154:	d8801b15 	stw	r2,108(sp)
			PRINT (&sign, 1);
  80b158:	d9401c04 	addi	r5,sp,112
			PRINT (ox, 2);
  80b15c:	01000044 	movi	r4,1
  80b160:	00c00084 	movi	r3,2
  80b164:	2825883a 	mov	r18,r5
  80b168:	2005883a 	mov	r2,r4
  80b16c:	003f0906 	br	80ad94 <___vfiprintf_internal_r+0x108c>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b170:	d9000f17 	ldw	r4,60(sp)
  80b174:	00bfff04 	movi	r2,-4
  80b178:	b0ac703a 	and	r22,r22,r2
  80b17c:	2589c83a 	sub	r4,r4,r22
  80b180:	d9000f15 	stw	r4,60(sp)
  80b184:	9cc00204 	addi	r19,r19,8
		for (; uio->uio_resid != 0;
  80b188:	203c261e 	bne	r4,zero,80a224 <___vfiprintf_internal_r+0x51c>
	uio->uio_iovcnt = 0;
  80b18c:	b8800007 	ldb	r2,0(r23)
  80b190:	d8000e15 	stw	zero,56(sp)
			PRINT (cp, m);
  80b194:	dc801a04 	addi	r18,sp,104
  80b198:	003c0206 	br	80a1a4 <___vfiprintf_internal_r+0x49c>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b19c:	d8c00f17 	ldw	r3,60(sp)
  80b1a0:	b5ec703a 	and	r22,r22,r23
  80b1a4:	1d87c83a 	sub	r3,r3,r22
  80b1a8:	d8c00f15 	stw	r3,60(sp)
  80b1ac:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b1b0:	183bb41e 	bne	r3,zero,80a084 <___vfiprintf_internal_r+0x37c>
  80b1b4:	003eee06 	br	80ad70 <___vfiprintf_internal_r+0x1068>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b1b8:	d8c00f17 	ldw	r3,60(sp)
  80b1bc:	b5ec703a 	and	r22,r22,r23
  80b1c0:	1d87c83a 	sub	r3,r3,r22
  80b1c4:	d8c00f15 	stw	r3,60(sp)
  80b1c8:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b1cc:	183d821e 	bne	r3,zero,80a7d8 <___vfiprintf_internal_r+0xad0>
	uio->uio_iovcnt = 0;
  80b1d0:	d9401c04 	addi	r5,sp,112
  80b1d4:	01000044 	movi	r4,1
  80b1d8:	0005883a 	mov	r2,zero
			PRINT (ox, 2);
  80b1dc:	dc801a04 	addi	r18,sp,104
  80b1e0:	003d9606 	br	80a83c <___vfiprintf_internal_r+0xb34>
			if (_uquad != 0 || prec != 0) {
  80b1e4:	d8800417 	ldw	r2,16(sp)
  80b1e8:	1000ca1e 	bne	r2,zero,80b514 <___vfiprintf_internal_r+0x180c>
  80b1ec:	d8000515 	stw	zero,20(sp)
  80b1f0:	d8800517 	ldw	r2,20(sp)
  80b1f4:	d8000415 	stw	zero,16(sp)
			cp = buf + BUF;
  80b1f8:	dcc01a04 	addi	r19,sp,104
  80b1fc:	003cc206 	br	80a508 <___vfiprintf_internal_r+0x800>
			width = GET_ARG (n, ap, int);
  80b200:	d9000717 	ldw	r4,28(sp)
			_uquad = UARG ();
  80b204:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  80b208:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80b20c:	1000401e 	bne	r2,zero,80b310 <___vfiprintf_internal_r+0x1608>
  80b210:	b080100c 	andi	r2,r22,64
  80b214:	1000a726 	beq	r2,zero,80b4b4 <___vfiprintf_internal_r+0x17ac>
  80b218:	2440000b 	ldhu	r17,0(r4)
  80b21c:	002f883a 	mov	r23,zero
  80b220:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  80b224:	00800044 	movi	r2,1
  80b228:	003c5006 	br	80a36c <___vfiprintf_internal_r+0x664>
			width = GET_ARG (n, ap, int);
  80b22c:	d9000717 	ldw	r4,28(sp)
			_uquad = UARG ();
  80b230:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  80b234:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80b238:	10003f1e 	bne	r2,zero,80b338 <___vfiprintf_internal_r+0x1630>
  80b23c:	b080100c 	andi	r2,r22,64
  80b240:	10009726 	beq	r2,zero,80b4a0 <___vfiprintf_internal_r+0x1798>
  80b244:	2440000b 	ldhu	r17,0(r4)
  80b248:	002f883a 	mov	r23,zero
  80b24c:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  80b250:	0005883a 	mov	r2,zero
  80b254:	003c4506 	br	80a36c <___vfiprintf_internal_r+0x664>
	if (uio->uio_resid == 0) {
  80b258:	183d4126 	beq	r3,zero,80a760 <___vfiprintf_internal_r+0xa58>
	if (fp->_flags2 & __SWID) {
  80b25c:	a0801917 	ldw	r2,100(r20)
  80b260:	1088000c 	andi	r2,r2,8192
  80b264:	103d3926 	beq	r2,zero,80a74c <___vfiprintf_internal_r+0xa44>
		iov = uio->uio_iov;
  80b268:	dd400d17 	ldw	r21,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b26c:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  80b270:	ad800117 	ldw	r22,4(r21)
			p = (wchar_t *) iov->iov_base;
  80b274:	ac400017 	ldw	r17,0(r21)
			len = iov->iov_len / sizeof (wchar_t);
  80b278:	b024d0ba 	srli	r18,r22,2
			for (i = 0; i < len; i++) {
  80b27c:	90006926 	beq	r18,zero,80b424 <___vfiprintf_internal_r+0x171c>
  80b280:	0039883a 	mov	fp,zero
  80b284:	00000206 	br	80b290 <___vfiprintf_internal_r+0x1588>
  80b288:	8c400104 	addi	r17,r17,4
  80b28c:	97006426 	beq	r18,fp,80b420 <___vfiprintf_internal_r+0x1718>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b290:	89400017 	ldw	r5,0(r17)
  80b294:	a00d883a 	mov	r6,r20
  80b298:	8009883a 	mov	r4,r16
  80b29c:	080bcd80 	call	80bcd8 <_fputwc_r>
  80b2a0:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80b2a4:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80b2a8:	103ff726 	beq	r2,zero,80b288 <___vfiprintf_internal_r+0x1580>
  80b2ac:	003b8406 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b2b0:	d8c00f17 	ldw	r3,60(sp)
  80b2b4:	bdae703a 	and	r23,r23,r22
  80b2b8:	1dc7c83a 	sub	r3,r3,r23
  80b2bc:	d8c00f15 	stw	r3,60(sp)
  80b2c0:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b2c4:	183f901e 	bne	r3,zero,80b108 <___vfiprintf_internal_r+0x1400>
  80b2c8:	003da106 	br	80a950 <___vfiprintf_internal_r+0xc48>
			cp = buf + BUF;
  80b2cc:	dcc01a04 	addi	r19,sp,104
  80b2d0:	003c8d06 	br	80a508 <___vfiprintf_internal_r+0x800>
		PRINT (cp, size);
  80b2d4:	31000044 	addi	r4,r6,1
  80b2d8:	39400204 	addi	r5,r7,8
  80b2dc:	3005883a 	mov	r2,r6
			PAD (width - realsz, zeroes);
  80b2e0:	3825883a 	mov	r18,r7
  80b2e4:	003d5806 	br	80a848 <___vfiprintf_internal_r+0xb40>
				ox[0] = '0';
  80b2e8:	00800c04 	movi	r2,48
  80b2ec:	d8800c85 	stb	r2,50(sp)
				ox[1] = ch;
  80b2f0:	d8c00cc5 	stb	r3,51(sp)
				flags |= HEXPREFIX;
  80b2f4:	b5800094 	ori	r22,r22,2
			base = HEX;
  80b2f8:	00800084 	movi	r2,2
  80b2fc:	003c1b06 	br	80a36c <___vfiprintf_internal_r+0x664>
hex:			_uquad = UARG ();
  80b300:	2c400017 	ldw	r17,0(r5)
  80b304:	002f883a 	mov	r23,zero
  80b308:	d9000715 	stw	r4,28(sp)
  80b30c:	003c1206 	br	80a358 <___vfiprintf_internal_r+0x650>
			_uquad = UARG ();
  80b310:	24400017 	ldw	r17,0(r4)
  80b314:	002f883a 	mov	r23,zero
  80b318:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  80b31c:	00800044 	movi	r2,1
  80b320:	003c1206 	br	80a36c <___vfiprintf_internal_r+0x664>
			_uquad = SARG ();
  80b324:	24400017 	ldw	r17,0(r4)
  80b328:	d8c00715 	stw	r3,28(sp)
  80b32c:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  80b330:	b805883a 	mov	r2,r23
  80b334:	003be206 	br	80a2c0 <___vfiprintf_internal_r+0x5b8>
			_uquad = UARG ();
  80b338:	24400017 	ldw	r17,0(r4)
  80b33c:	002f883a 	mov	r23,zero
  80b340:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  80b344:	0005883a 	mov	r2,zero
  80b348:	003c0806 	br	80a36c <___vfiprintf_internal_r+0x664>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  80b34c:	d9000617 	ldw	r4,24(sp)
  80b350:	2005d7fa 	srai	r2,r4,31
  80b354:	19000015 	stw	r4,0(r3)
  80b358:	18800115 	stw	r2,4(r3)
  80b35c:	003a9306 	br	809dac <___vfiprintf_internal_r+0xa4>
			width = -width;
  80b360:	018dc83a 	sub	r6,zero,r6
  80b364:	d9800115 	stw	r6,4(sp)
			width = GET_ARG (n, ap, int);
  80b368:	d9000715 	stw	r4,28(sp)
  80b36c:	003c8906 	br	80a594 <___vfiprintf_internal_r+0x88c>
		if (flags & HEXPREFIX)
  80b370:	d8800917 	ldw	r2,36(sp)
  80b374:	103f741e 	bne	r2,zero,80b148 <___vfiprintf_internal_r+0x1440>
			PRINT (&sign, 1);
  80b378:	d9401c04 	addi	r5,sp,112
		if (flags & HEXPREFIX)
  80b37c:	01000044 	movi	r4,1
  80b380:	0007883a 	mov	r3,zero
  80b384:	dc801a04 	addi	r18,sp,104
  80b388:	003d2f06 	br	80a848 <___vfiprintf_internal_r+0xb40>
				size = strlen (cp);
  80b38c:	9809883a 	mov	r4,r19
  80b390:	0801e300 	call	801e30 <strlen>
  80b394:	d8800515 	stw	r2,20(sp)
  80b398:	d8800015 	stw	r2,0(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80b39c:	dc400715 	stw	r17,28(sp)
  80b3a0:	003b1006 	br	809fe4 <___vfiprintf_internal_r+0x2dc>
  80b3a4:	d9c00415 	stw	r7,16(sp)
  80b3a8:	d8c00215 	stw	r3,8(sp)
  80b3ac:	003cc706 	br	80a6cc <___vfiprintf_internal_r+0x9c4>
  80b3b0:	d9c00415 	stw	r7,16(sp)
  80b3b4:	d8c00215 	stw	r3,8(sp)
  80b3b8:	003cb806 	br	80a69c <___vfiprintf_internal_r+0x994>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  80b3bc:	d8800617 	ldw	r2,24(sp)
  80b3c0:	18800015 	stw	r2,0(r3)
  80b3c4:	003a7906 	br	809dac <___vfiprintf_internal_r+0xa4>
		err = __sfvwrite_r(ptr, fp, uio);
  80b3c8:	d9800d04 	addi	r6,sp,52
  80b3cc:	a00b883a 	mov	r5,r20
  80b3d0:	8009883a 	mov	r4,r16
  80b3d4:	08066940 	call	806694 <__sfvwrite_r>
			PAD (width - realsz, zeroes);
  80b3d8:	103b391e 	bne	r2,zero,80a0c0 <___vfiprintf_internal_r+0x3b8>
		PAD (dprec - size, zeroes);
  80b3dc:	d8800417 	ldw	r2,16(sp)
  80b3e0:	d8c00517 	ldw	r3,20(sp)
  80b3e4:	10ebc83a 	sub	r21,r2,r3
  80b3e8:	05404116 	blt	zero,r21,80b4f0 <___vfiprintf_internal_r+0x17e8>
  80b3ec:	1805883a 	mov	r2,r3
  80b3f0:	003d5806 	br	80a954 <___vfiprintf_internal_r+0xc4c>
rflag:		ch = *fmt++;
  80b3f4:	18800043 	ldbu	r2,1(r3)
				flags |= QUADINT;
  80b3f8:	b5800814 	ori	r22,r22,32
				fmt++;
  80b3fc:	18c00044 	addi	r3,r3,1
  80b400:	10803fcc 	andi	r2,r2,255
  80b404:	1080201c 	xori	r2,r2,128
  80b408:	10bfe004 	addi	r2,r2,-128
  80b40c:	003a7a06 	br	809df8 <___vfiprintf_internal_r+0xf0>
				switch (base) {
  80b410:	10c00060 	cmpeqi	r3,r2,1
  80b414:	202d883a 	mov	r22,r4
  80b418:	183c2826 	beq	r3,zero,80a4bc <___vfiprintf_internal_r+0x7b4>
  80b41c:	003bb606 	br	80a2f8 <___vfiprintf_internal_r+0x5f0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b420:	d8c00f17 	ldw	r3,60(sp)
  80b424:	b5ec703a 	and	r22,r22,r23
  80b428:	1d87c83a 	sub	r3,r3,r22
  80b42c:	d8c00f15 	stw	r3,60(sp)
  80b430:	ad400204 	addi	r21,r21,8
		for (; uio->uio_resid != 0;
  80b434:	183f8e1e 	bne	r3,zero,80b270 <___vfiprintf_internal_r+0x1568>
  80b438:	003cc906 	br	80a760 <___vfiprintf_internal_r+0xa58>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b43c:	d9c00515 	stw	r7,20(sp)
  80b440:	388001f0 	cmpltui	r2,r7,7
  80b444:	10003026 	beq	r2,zero,80b508 <___vfiprintf_internal_r+0x1800>
  80b448:	d8800517 	ldw	r2,20(sp)
				cp = "(null)";
  80b44c:	04c02074 	movhi	r19,129
			cp = GET_ARG (N, ap, char_ptr_t);
  80b450:	dc400715 	stw	r17,28(sp)
  80b454:	d8800015 	stw	r2,0(sp)
				cp = "(null)";
  80b458:	9ccbaf04 	addi	r19,r19,11964
  80b45c:	003ae106 	br	809fe4 <___vfiprintf_internal_r+0x2dc>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b460:	d8800f17 	ldw	r2,60(sp)
  80b464:	b56c703a 	and	r22,r22,r21
  80b468:	1585c83a 	sub	r2,r2,r22
  80b46c:	d8800f15 	stw	r2,60(sp)
  80b470:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b474:	103f021e 	bne	r2,zero,80b080 <___vfiprintf_internal_r+0x1378>
  80b478:	003e2b06 	br	80ad28 <___vfiprintf_internal_r+0x1020>
hex:			_uquad = UARG ();
  80b47c:	2c400017 	ldw	r17,0(r5)
  80b480:	002f883a 	mov	r23,zero
  80b484:	d9000715 	stw	r4,28(sp)
  80b488:	003bb306 	br	80a358 <___vfiprintf_internal_r+0x650>
			_uquad = SARG ();
  80b48c:	24400017 	ldw	r17,0(r4)
  80b490:	d8c00715 	stw	r3,28(sp)
  80b494:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  80b498:	b805883a 	mov	r2,r23
  80b49c:	003b8806 	br	80a2c0 <___vfiprintf_internal_r+0x5b8>
			_uquad = UARG ();
  80b4a0:	24400017 	ldw	r17,0(r4)
  80b4a4:	002f883a 	mov	r23,zero
  80b4a8:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  80b4ac:	0005883a 	mov	r2,zero
  80b4b0:	003bae06 	br	80a36c <___vfiprintf_internal_r+0x664>
			_uquad = UARG ();
  80b4b4:	24400017 	ldw	r17,0(r4)
  80b4b8:	002f883a 	mov	r23,zero
  80b4bc:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  80b4c0:	00800044 	movi	r2,1
  80b4c4:	003ba906 	br	80a36c <___vfiprintf_internal_r+0x664>
		PAD (dprec - size, zeroes);
  80b4c8:	280d883a 	mov	r6,r5
  80b4cc:	003dfa06 	br	80acb8 <___vfiprintf_internal_r+0xfb0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b4d0:	d8c00f17 	ldw	r3,60(sp)
  80b4d4:	00bfff04 	movi	r2,-4
  80b4d8:	b8ae703a 	and	r23,r23,r2
  80b4dc:	1dc7c83a 	sub	r3,r3,r23
  80b4e0:	d8c00f15 	stw	r3,60(sp)
  80b4e4:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b4e8:	183da11e 	bne	r3,zero,80ab70 <___vfiprintf_internal_r+0xe68>
  80b4ec:	003fbb06 	br	80b3dc <___vfiprintf_internal_r+0x16d4>
		PAD (dprec - size, zeroes);
  80b4f0:	d9401c04 	addi	r5,sp,112
  80b4f4:	01000044 	movi	r4,1
  80b4f8:	0005883a 	mov	r2,zero
  80b4fc:	0007883a 	mov	r3,zero
  80b500:	dc801a04 	addi	r18,sp,104
  80b504:	003db706 	br	80abe4 <___vfiprintf_internal_r+0xedc>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b508:	00800184 	movi	r2,6
  80b50c:	d8800515 	stw	r2,20(sp)
  80b510:	003fcd06 	br	80b448 <___vfiprintf_internal_r+0x1740>
  80b514:	182d883a 	mov	r22,r3
  80b518:	003b7706 	br	80a2f8 <___vfiprintf_internal_r+0x5f0>
			if ((ch = *fmt++) == '*') {
  80b51c:	2007883a 	mov	r3,r4
			n = 0;
  80b520:	000f883a 	mov	r7,zero
  80b524:	003a3506 	br	809dfc <___vfiprintf_internal_r+0xf4>
			PAD (width - realsz, blanks);
  80b528:	280d883a 	mov	r6,r5
  80b52c:	e70c4804 	addi	fp,fp,12576
  80b530:	003e7006 	br	80aef4 <___vfiprintf_internal_r+0x11ec>
  80b534:	d8800417 	ldw	r2,16(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80b538:	dc400715 	stw	r17,28(sp)
  80b53c:	d8800015 	stw	r2,0(sp)
  80b540:	d8800515 	stw	r2,20(sp)
  80b544:	003aa706 	br	809fe4 <___vfiprintf_internal_r+0x2dc>
			PAD (width - realsz, blanks);
  80b548:	21800044 	addi	r6,r4,1
  80b54c:	e70c4804 	addi	fp,fp,12576
  80b550:	003ebe06 	br	80b04c <___vfiprintf_internal_r+0x1344>
			PAD (width - realsz, zeroes);
  80b554:	280f883a 	mov	r7,r5
  80b558:	200d883a 	mov	r6,r4
  80b55c:	b58c4404 	addi	r22,r22,12560
  80b560:	003d7706 	br	80ab40 <___vfiprintf_internal_r+0xe38>
		return (EOF);
  80b564:	00bfffc4 	movi	r2,-1
  80b568:	d8800615 	stw	r2,24(sp)
  80b56c:	003ad706 	br	80a0cc <___vfiprintf_internal_r+0x3c4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80b570:	d8800f17 	ldw	r2,60(sp)
  80b574:	adea703a 	and	r21,r21,r23
  80b578:	1545c83a 	sub	r2,r2,r21
  80b57c:	d8800f15 	stw	r2,60(sp)
  80b580:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80b584:	103b121e 	bne	r2,zero,80a1d0 <___vfiprintf_internal_r+0x4c8>
  80b588:	003acd06 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80b58c:	d9800d04 	addi	r6,sp,52
  80b590:	a00b883a 	mov	r5,r20
  80b594:	8009883a 	mov	r4,r16
  80b598:	08066940 	call	806694 <__sfvwrite_r>
	return (err);
  80b59c:	003ac806 	br	80a0c0 <___vfiprintf_internal_r+0x3b8>
				prec = GET_ARG (n, ap, int);
  80b5a0:	d8800717 	ldw	r2,28(sp)
  80b5a4:	11c00017 	ldw	r7,0(r2)
  80b5a8:	11800104 	addi	r6,r2,4
				if (prec < 0)
  80b5ac:	3800010e 	bge	r7,zero,80b5b4 <___vfiprintf_internal_r+0x18ac>
  80b5b0:	01ffffc4 	movi	r7,-1
rflag:		ch = *fmt++;
  80b5b4:	18800043 	ldbu	r2,1(r3)
				prec = GET_ARG (n, ap, int);
  80b5b8:	d9800715 	stw	r6,28(sp)
			if ((ch = *fmt++) == '*') {
  80b5bc:	2007883a 	mov	r3,r4
  80b5c0:	10803fcc 	andi	r2,r2,255
  80b5c4:	1080201c 	xori	r2,r2,128
  80b5c8:	10bfe004 	addi	r2,r2,-128
				goto rflag;
  80b5cc:	003a0a06 	br	809df8 <___vfiprintf_internal_r+0xf0>

0080b5d0 <__vfiprintf_internal>:
{
  80b5d0:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80b5d4:	d1200917 	ldw	r4,-32732(gp)
  80b5d8:	300f883a 	mov	r7,r6
  80b5dc:	280d883a 	mov	r6,r5
  80b5e0:	100b883a 	mov	r5,r2
  80b5e4:	0809d081 	jmpi	809d08 <___vfiprintf_internal_r>

0080b5e8 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  80b5e8:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  80b5ec:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  80b5f0:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  80b5f4:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  80b5f8:	2a400917 	ldw	r9,36(r5)
{
  80b5fc:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  80b600:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  80b604:	00c10004 	movi	r3,1024
{
  80b608:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  80b60c:	10bfff4c 	andi	r2,r2,65533
{
  80b610:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b614:	d80b883a 	mov	r5,sp
{
  80b618:	dc811c15 	stw	r18,1136(sp)
  80b61c:	dc411b15 	stw	r17,1132(sp)
  80b620:	dfc11d15 	stw	ra,1140(sp)
  80b624:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  80b628:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  80b62c:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  80b630:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80b634:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  80b638:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  80b63c:	da000015 	stw	r8,0(sp)
  80b640:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80b644:	d8c00215 	stw	r3,8(sp)
  80b648:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  80b64c:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b650:	0809d080 	call	809d08 <___vfiprintf_internal_r>
  80b654:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b658:	10000d0e 	bge	r2,zero,80b690 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  80b65c:	d880030b 	ldhu	r2,12(sp)
  80b660:	1080100c 	andi	r2,r2,64
  80b664:	10000326 	beq	r2,zero,80b674 <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  80b668:	8080030b 	ldhu	r2,12(r16)
  80b66c:	10801014 	ori	r2,r2,64
  80b670:	8080030d 	sth	r2,12(r16)
}
  80b674:	8805883a 	mov	r2,r17
  80b678:	dfc11d17 	ldw	ra,1140(sp)
  80b67c:	dc811c17 	ldw	r18,1136(sp)
  80b680:	dc411b17 	ldw	r17,1132(sp)
  80b684:	dc011a17 	ldw	r16,1128(sp)
  80b688:	dec11e04 	addi	sp,sp,1144
  80b68c:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b690:	d80b883a 	mov	r5,sp
  80b694:	9009883a 	mov	r4,r18
  80b698:	0805cbc0 	call	805cbc <_fflush_r>
  80b69c:	103fef26 	beq	r2,zero,80b65c <__sbprintf+0x74>
		ret = EOF;
  80b6a0:	047fffc4 	movi	r17,-1
  80b6a4:	003fed06 	br	80b65c <__sbprintf+0x74>

0080b6a8 <_wctomb_r>:
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
  return __WCTOMB (r, s, _wchar, state);
  80b6a8:	00802074 	movhi	r2,129
  80b6ac:	108e4917 	ldw	r2,14628(r2)
  80b6b0:	1000683a 	jmp	r2

0080b6b4 <__ascii_wctomb>:
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;

  if (s == NULL)
  80b6b4:	28000926 	beq	r5,zero,80b6dc <__ascii_wctomb+0x28>
    return 0;
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
  80b6b8:	30804030 	cmpltui	r2,r6,256
  80b6bc:	10000326 	beq	r2,zero,80b6cc <__ascii_wctomb+0x18>
    {
      r->_errno = EILSEQ;
      return -1;
    }

  *s = (char) wchar;
  80b6c0:	29800005 	stb	r6,0(r5)
  return 1;
  80b6c4:	00800044 	movi	r2,1
  80b6c8:	f800283a 	ret
      r->_errno = EILSEQ;
  80b6cc:	00802284 	movi	r2,138
  80b6d0:	20800015 	stw	r2,0(r4)
      return -1;
  80b6d4:	00bfffc4 	movi	r2,-1
  80b6d8:	f800283a 	ret
    return 0;
  80b6dc:	0005883a 	mov	r2,zero
}
  80b6e0:	f800283a 	ret

0080b6e4 <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
  80b6e4:	2807883a 	mov	r3,r5
  80b6e8:	defffe04 	addi	sp,sp,-8
  80b6ec:	dc000015 	stw	r16,0(sp)
  80b6f0:	300b883a 	mov	r5,r6
  80b6f4:	2021883a 	mov	r16,r4
  80b6f8:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b6fc:	1809883a 	mov	r4,r3
{
  80b700:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b704:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b708:	0810a600 	call	810a60 <write>
  80b70c:	10ffffd8 	cmpnei	r3,r2,-1
  80b710:	18000426 	beq	r3,zero,80b724 <_write_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b714:	dfc00117 	ldw	ra,4(sp)
  80b718:	dc000017 	ldw	r16,0(sp)
  80b71c:	dec00204 	addi	sp,sp,8
  80b720:	f800283a 	ret
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b724:	d0e75817 	ldw	r3,-25248(gp)
  80b728:	183ffa26 	beq	r3,zero,80b714 <_write_r+0x30>
    ptr->_errno = errno;
  80b72c:	80c00015 	stw	r3,0(r16)
}
  80b730:	dfc00117 	ldw	ra,4(sp)
  80b734:	dc000017 	ldw	r16,0(sp)
  80b738:	dec00204 	addi	sp,sp,8
  80b73c:	f800283a 	ret

0080b740 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80b740:	defffe04 	addi	sp,sp,-8
  80b744:	dc000015 	stw	r16,0(sp)
  80b748:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b74c:	2809883a 	mov	r4,r5
{
  80b750:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b754:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b758:	080ff8c0 	call	80ff8c <close>
  80b75c:	10ffffd8 	cmpnei	r3,r2,-1
  80b760:	18000426 	beq	r3,zero,80b774 <_close_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80b764:	dfc00117 	ldw	ra,4(sp)
  80b768:	dc000017 	ldw	r16,0(sp)
  80b76c:	dec00204 	addi	sp,sp,8
  80b770:	f800283a 	ret
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b774:	d0e75817 	ldw	r3,-25248(gp)
  80b778:	183ffa26 	beq	r3,zero,80b764 <_close_r+0x24>
    ptr->_errno = errno;
  80b77c:	80c00015 	stw	r3,0(r16)
}
  80b780:	dfc00117 	ldw	ra,4(sp)
  80b784:	dc000017 	ldw	r16,0(sp)
  80b788:	dec00204 	addi	sp,sp,8
  80b78c:	f800283a 	ret

0080b790 <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
  80b790:	3005883a 	mov	r2,r6
  fiprintf(stderr,
  80b794:	d1a00917 	ldw	r6,-32732(gp)
{
  80b798:	defffc04 	addi	sp,sp,-16
  80b79c:	3807883a 	mov	r3,r7
  80b7a0:	dfc00315 	stw	ra,12(sp)
  fiprintf(stderr,
  80b7a4:	32400317 	ldw	r9,12(r6)
{
  80b7a8:	200f883a 	mov	r7,r4
  80b7ac:	2811883a 	mov	r8,r5
  80b7b0:	180d883a 	mov	r6,r3
  fiprintf(stderr,
  80b7b4:	10000a26 	beq	r2,zero,80b7e0 <__assert_func+0x50>
  80b7b8:	00c02074 	movhi	r3,129
  80b7bc:	18cc4c04 	addi	r3,r3,12592
  80b7c0:	01402074 	movhi	r5,129
  80b7c4:	294c5004 	addi	r5,r5,12608
  80b7c8:	4809883a 	mov	r4,r9
  80b7cc:	d8c00115 	stw	r3,4(sp)
  80b7d0:	da000015 	stw	r8,0(sp)
  80b7d4:	d8800215 	stw	r2,8(sp)
  80b7d8:	080badc0 	call	80badc <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
  80b7dc:	080c5a80 	call	80c5a8 <abort>
  fiprintf(stderr,
  80b7e0:	00c02074 	movhi	r3,129
  80b7e4:	18cc4f04 	addi	r3,r3,12604
  80b7e8:	1805883a 	mov	r2,r3
  80b7ec:	003ff406 	br	80b7c0 <__assert_func+0x30>

0080b7f0 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
  80b7f0:	deffff04 	addi	sp,sp,-4
   __assert_func (file, line, NULL, failedexpr);
  80b7f4:	300f883a 	mov	r7,r6
  80b7f8:	000d883a 	mov	r6,zero
{
  80b7fc:	dfc00015 	stw	ra,0(sp)
   __assert_func (file, line, NULL, failedexpr);
  80b800:	080b7900 	call	80b790 <__assert_func>

0080b804 <_calloc_r>:
{
  80b804:	defffe04 	addi	sp,sp,-8
  80b808:	dc000015 	stw	r16,0(sp)
  80b80c:	2021883a 	mov	r16,r4
  80b810:	2809883a 	mov	r4,r5
  INTERNAL_SIZE_T sz = n * elem_size;
  80b814:	300b883a 	mov	r5,r6
{
  80b818:	dfc00115 	stw	ra,4(sp)
  INTERNAL_SIZE_T sz = n * elem_size;
  80b81c:	080d8900 	call	80d890 <__mulsi3>
  mem = mALLOc (RCALL sz);
  80b820:	8009883a 	mov	r4,r16
  80b824:	100b883a 	mov	r5,r2
  80b828:	080701c0 	call	80701c <_malloc_r>
  80b82c:	1009883a 	mov	r4,r2
  if (mem == 0) 
  80b830:	10000c26 	beq	r2,zero,80b864 <_calloc_r+0x60>
    csz = chunksize(p);
  80b834:	11bfff17 	ldw	r6,-4(r2)
  80b838:	00bfff04 	movi	r2,-4
  80b83c:	308c703a 	and	r6,r6,r2
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80b840:	31bfff04 	addi	r6,r6,-4
  80b844:	30800968 	cmpgeui	r2,r6,37
  80b848:	1000151e 	bne	r2,zero,80b8a0 <_calloc_r+0x9c>
  80b84c:	30800530 	cmpltui	r2,r6,20
  80b850:	10000926 	beq	r2,zero,80b878 <_calloc_r+0x74>
  80b854:	2005883a 	mov	r2,r4
  80b858:	10000015 	stw	zero,0(r2)
  80b85c:	10000115 	stw	zero,4(r2)
  80b860:	10000215 	stw	zero,8(r2)
}
  80b864:	2005883a 	mov	r2,r4
  80b868:	dfc00117 	ldw	ra,4(sp)
  80b86c:	dc000017 	ldw	r16,0(sp)
  80b870:	dec00204 	addi	sp,sp,8
  80b874:	f800283a 	ret
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80b878:	20000015 	stw	zero,0(r4)
  80b87c:	20000115 	stw	zero,4(r4)
  80b880:	30800728 	cmpgeui	r2,r6,28
  80b884:	10000a26 	beq	r2,zero,80b8b0 <_calloc_r+0xac>
  80b888:	20000215 	stw	zero,8(r4)
  80b88c:	20000315 	stw	zero,12(r4)
  80b890:	31800920 	cmpeqi	r6,r6,36
  80b894:	3000081e 	bne	r6,zero,80b8b8 <_calloc_r+0xb4>
  80b898:	20800404 	addi	r2,r4,16
  80b89c:	003fee06 	br	80b858 <_calloc_r+0x54>
  80b8a0:	000b883a 	mov	r5,zero
  80b8a4:	0801b400 	call	801b40 <memset>
  80b8a8:	1009883a 	mov	r4,r2
  80b8ac:	003fed06 	br	80b864 <_calloc_r+0x60>
  80b8b0:	20800204 	addi	r2,r4,8
  80b8b4:	003fe806 	br	80b858 <_calloc_r+0x54>
  80b8b8:	20000415 	stw	zero,16(r4)
  80b8bc:	20800604 	addi	r2,r4,24
  80b8c0:	20000515 	stw	zero,20(r4)
  80b8c4:	003fe406 	br	80b858 <_calloc_r+0x54>

0080b8c8 <_fclose_r>:
#include "local.h"

int
_fclose_r (struct _reent *rptr,
      register FILE * fp)
{
  80b8c8:	defffc04 	addi	sp,sp,-16
  80b8cc:	dfc00315 	stw	ra,12(sp)
  80b8d0:	dc800215 	stw	r18,8(sp)
  80b8d4:	dc400115 	stw	r17,4(sp)
  80b8d8:	dc000015 	stw	r16,0(sp)
  int r;

  if (fp == NULL)
  80b8dc:	28000726 	beq	r5,zero,80b8fc <_fclose_r+0x34>
  80b8e0:	2821883a 	mov	r16,r5
  80b8e4:	2023883a 	mov	r17,r4
    return (0);			/* on NULL */

  CHECK_INIT (rptr, fp);
  80b8e8:	20000226 	beq	r4,zero,80b8f4 <_fclose_r+0x2c>
  80b8ec:	20800e17 	ldw	r2,56(r4)
  80b8f0:	10002726 	beq	r2,zero,80b990 <_fclose_r+0xc8>
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  if (!(fp->_flags2 & __SNLK))
    _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
  80b8f4:	8080030f 	ldh	r2,12(r16)
  80b8f8:	1000081e 	bne	r2,zero,80b91c <_fclose_r+0x54>
    return (0);			/* on NULL */
  80b8fc:	0025883a 	mov	r18,zero
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
  80b900:	9005883a 	mov	r2,r18
  80b904:	dfc00317 	ldw	ra,12(sp)
  80b908:	dc800217 	ldw	r18,8(sp)
  80b90c:	dc400117 	ldw	r17,4(sp)
  80b910:	dc000017 	ldw	r16,0(sp)
  80b914:	dec00404 	addi	sp,sp,16
  80b918:	f800283a 	ret
  r = __sflush_r (rptr, fp);
  80b91c:	800b883a 	mov	r5,r16
  80b920:	8809883a 	mov	r4,r17
  80b924:	0805a940 	call	805a94 <__sflush_r>
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80b928:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80b92c:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80b930:	18000426 	beq	r3,zero,80b944 <_fclose_r+0x7c>
  80b934:	81400717 	ldw	r5,28(r16)
  80b938:	8809883a 	mov	r4,r17
  80b93c:	183ee83a 	callr	r3
  80b940:	10001716 	blt	r2,zero,80b9a0 <_fclose_r+0xd8>
  if (fp->_flags & __SMBF)
  80b944:	8080030b 	ldhu	r2,12(r16)
  80b948:	1080200c 	andi	r2,r2,128
  80b94c:	1000181e 	bne	r2,zero,80b9b0 <_fclose_r+0xe8>
  if (HASUB (fp))
  80b950:	81400c17 	ldw	r5,48(r16)
  80b954:	28000526 	beq	r5,zero,80b96c <_fclose_r+0xa4>
    FREEUB (rptr, fp);
  80b958:	80801004 	addi	r2,r16,64
  80b95c:	28800226 	beq	r5,r2,80b968 <_fclose_r+0xa0>
  80b960:	8809883a 	mov	r4,r17
  80b964:	08063a00 	call	8063a0 <_free_r>
  80b968:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80b96c:	81401117 	ldw	r5,68(r16)
  80b970:	28000326 	beq	r5,zero,80b980 <_fclose_r+0xb8>
    FREELB (rptr, fp);
  80b974:	8809883a 	mov	r4,r17
  80b978:	08063a00 	call	8063a0 <_free_r>
  80b97c:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80b980:	08062580 	call	806258 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80b984:	8000030d 	sth	zero,12(r16)
  __sfp_lock_release ();
  80b988:	080625c0 	call	80625c <__sfp_lock_release>
  return (r);
  80b98c:	003fdc06 	br	80b900 <_fclose_r+0x38>
  CHECK_INIT (rptr, fp);
  80b990:	08060e80 	call	8060e8 <__sinit>
  if (fp->_flags == 0)		/* not open! */
  80b994:	8080030f 	ldh	r2,12(r16)
  80b998:	103fd826 	beq	r2,zero,80b8fc <_fclose_r+0x34>
  80b99c:	003fdf06 	br	80b91c <_fclose_r+0x54>
  if (fp->_flags & __SMBF)
  80b9a0:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80b9a4:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80b9a8:	1080200c 	andi	r2,r2,128
  80b9ac:	103fe826 	beq	r2,zero,80b950 <_fclose_r+0x88>
    _free_r (rptr, (char *) fp->_bf._base);
  80b9b0:	81400417 	ldw	r5,16(r16)
  80b9b4:	8809883a 	mov	r4,r17
  80b9b8:	08063a00 	call	8063a0 <_free_r>
  80b9bc:	003fe406 	br	80b950 <_fclose_r+0x88>

0080b9c0 <fclose>:

#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
  80b9c0:	defffc04 	addi	sp,sp,-16
  80b9c4:	dfc00315 	stw	ra,12(sp)
  80b9c8:	dc800215 	stw	r18,8(sp)
  80b9cc:	dc400115 	stw	r17,4(sp)
  80b9d0:	dc000015 	stw	r16,0(sp)
  if (fp == NULL)
  80b9d4:	20000726 	beq	r4,zero,80b9f4 <fclose+0x34>
  return _fclose_r(_REENT, fp);
  80b9d8:	d4600917 	ldw	r17,-32732(gp)
  CHECK_INIT (rptr, fp);
  80b9dc:	2021883a 	mov	r16,r4
  80b9e0:	88000226 	beq	r17,zero,80b9ec <fclose+0x2c>
  80b9e4:	88800e17 	ldw	r2,56(r17)
  80b9e8:	10002726 	beq	r2,zero,80ba88 <fclose+0xc8>
  if (fp->_flags == 0)		/* not open! */
  80b9ec:	8080030f 	ldh	r2,12(r16)
  80b9f0:	1000081e 	bne	r2,zero,80ba14 <fclose+0x54>
    return (0);			/* on NULL */
  80b9f4:	0025883a 	mov	r18,zero
}
  80b9f8:	9005883a 	mov	r2,r18
  80b9fc:	dfc00317 	ldw	ra,12(sp)
  80ba00:	dc800217 	ldw	r18,8(sp)
  80ba04:	dc400117 	ldw	r17,4(sp)
  80ba08:	dc000017 	ldw	r16,0(sp)
  80ba0c:	dec00404 	addi	sp,sp,16
  80ba10:	f800283a 	ret
  r = __sflush_r (rptr, fp);
  80ba14:	800b883a 	mov	r5,r16
  80ba18:	8809883a 	mov	r4,r17
  80ba1c:	0805a940 	call	805a94 <__sflush_r>
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80ba20:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80ba24:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80ba28:	18000426 	beq	r3,zero,80ba3c <fclose+0x7c>
  80ba2c:	81400717 	ldw	r5,28(r16)
  80ba30:	8809883a 	mov	r4,r17
  80ba34:	183ee83a 	callr	r3
  80ba38:	10001816 	blt	r2,zero,80ba9c <fclose+0xdc>
  if (fp->_flags & __SMBF)
  80ba3c:	8080030b 	ldhu	r2,12(r16)
  80ba40:	1080200c 	andi	r2,r2,128
  80ba44:	1000191e 	bne	r2,zero,80baac <fclose+0xec>
  if (HASUB (fp))
  80ba48:	81400c17 	ldw	r5,48(r16)
  80ba4c:	28000526 	beq	r5,zero,80ba64 <fclose+0xa4>
    FREEUB (rptr, fp);
  80ba50:	80801004 	addi	r2,r16,64
  80ba54:	28800226 	beq	r5,r2,80ba60 <fclose+0xa0>
  80ba58:	8809883a 	mov	r4,r17
  80ba5c:	08063a00 	call	8063a0 <_free_r>
  80ba60:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80ba64:	81401117 	ldw	r5,68(r16)
  80ba68:	28000326 	beq	r5,zero,80ba78 <fclose+0xb8>
    FREELB (rptr, fp);
  80ba6c:	8809883a 	mov	r4,r17
  80ba70:	08063a00 	call	8063a0 <_free_r>
  80ba74:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80ba78:	08062580 	call	806258 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80ba7c:	8000030d 	sth	zero,12(r16)
  __sfp_lock_release ();
  80ba80:	080625c0 	call	80625c <__sfp_lock_release>
  return _fclose_r(_REENT, fp);
  80ba84:	003fdc06 	br	80b9f8 <fclose+0x38>
  CHECK_INIT (rptr, fp);
  80ba88:	8809883a 	mov	r4,r17
  80ba8c:	08060e80 	call	8060e8 <__sinit>
  if (fp->_flags == 0)		/* not open! */
  80ba90:	8080030f 	ldh	r2,12(r16)
  80ba94:	103fd726 	beq	r2,zero,80b9f4 <fclose+0x34>
  80ba98:	003fde06 	br	80ba14 <fclose+0x54>
  if (fp->_flags & __SMBF)
  80ba9c:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80baa0:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80baa4:	1080200c 	andi	r2,r2,128
  80baa8:	103fe726 	beq	r2,zero,80ba48 <fclose+0x88>
    _free_r (rptr, (char *) fp->_bf._base);
  80baac:	81400417 	ldw	r5,16(r16)
  80bab0:	8809883a 	mov	r4,r17
  80bab4:	08063a00 	call	8063a0 <_free_r>
  80bab8:	003fe306 	br	80ba48 <fclose+0x88>

0080babc <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
  80babc:	defffe04 	addi	sp,sp,-8
  80bac0:	dfc00015 	stw	ra,0(sp)
  80bac4:	d9c00115 	stw	r7,4(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
  80bac8:	d9c00104 	addi	r7,sp,4
  80bacc:	080c2200 	call	80c220 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bad0:	dfc00017 	ldw	ra,0(sp)
  80bad4:	dec00204 	addi	sp,sp,8
  80bad8:	f800283a 	ret

0080badc <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
  80badc:	defffd04 	addi	sp,sp,-12
  80bae0:	2005883a 	mov	r2,r4
  80bae4:	dfc00015 	stw	ra,0(sp)
  80bae8:	d9800115 	stw	r6,4(sp)
  80baec:	d9c00215 	stw	r7,8(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
  80baf0:	d1200917 	ldw	r4,-32732(gp)
  80baf4:	280d883a 	mov	r6,r5
  80baf8:	d9c00104 	addi	r7,sp,4
  80bafc:	100b883a 	mov	r5,r2
  80bb00:	080c2200 	call	80c220 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bb04:	dfc00017 	ldw	ra,0(sp)
  80bb08:	dec00304 	addi	sp,sp,12
  80bb0c:	f800283a 	ret

0080bb10 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
  80bb10:	defffa04 	addi	sp,sp,-24
  80bb14:	dcc00415 	stw	r19,16(sp)
  80bb18:	dc800315 	stw	r18,12(sp)
  80bb1c:	dc000115 	stw	r16,4(sp)
  80bb20:	dfc00515 	stw	ra,20(sp)
  80bb24:	dc400215 	stw	r17,8(sp)
  80bb28:	2027883a 	mov	r19,r4
  80bb2c:	2825883a 	mov	r18,r5
  80bb30:	3021883a 	mov	r16,r6
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80bb34:	0806d580 	call	806d58 <__locale_mb_cur_max>
  80bb38:	10800058 	cmpnei	r2,r2,1
  80bb3c:	1000241e 	bne	r2,zero,80bbd0 <__fputwc+0xc0>
  80bb40:	90bfffc4 	addi	r2,r18,-1
  80bb44:	10803fe8 	cmpgeui	r2,r2,255
  80bb48:	1000211e 	bne	r2,zero,80bbd0 <__fputwc+0xc0>
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bb4c:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80bb50:	dc8000c5 	stb	r18,3(sp)
  80bb54:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bb58:	10bfffc4 	addi	r2,r2,-1
  80bb5c:	80800215 	stw	r2,8(r16)
      len = 1;
  80bb60:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bb64:	10002816 	blt	r2,zero,80bc08 <__fputwc+0xf8>
  80bb68:	80800017 	ldw	r2,0(r16)
  80bb6c:	11400005 	stb	r5,0(r2)
  80bb70:	80800017 	ldw	r2,0(r16)
  80bb74:	10800044 	addi	r2,r2,1
  80bb78:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80bb7c:	8c400060 	cmpeqi	r17,r17,1
  80bb80:	88000a1e 	bne	r17,zero,80bbac <__fputwc+0x9c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bb84:	80800217 	ldw	r2,8(r16)
  80bb88:	d9400103 	ldbu	r5,4(sp)
  80bb8c:	10bfffc4 	addi	r2,r2,-1
  80bb90:	80800215 	stw	r2,8(r16)
  80bb94:	10002716 	blt	r2,zero,80bc34 <__fputwc+0x124>
  80bb98:	80800017 	ldw	r2,0(r16)
  80bb9c:	11400005 	stb	r5,0(r2)
  80bba0:	80800017 	ldw	r2,0(r16)
  80bba4:	10800044 	addi	r2,r2,1
  80bba8:	80800015 	stw	r2,0(r16)
      return WEOF;

  return (wint_t) wc;
  80bbac:	9023883a 	mov	r17,r18
}
  80bbb0:	8805883a 	mov	r2,r17
  80bbb4:	dfc00517 	ldw	ra,20(sp)
  80bbb8:	dcc00417 	ldw	r19,16(sp)
  80bbbc:	dc800317 	ldw	r18,12(sp)
  80bbc0:	dc400217 	ldw	r17,8(sp)
  80bbc4:	dc000117 	ldw	r16,4(sp)
  80bbc8:	dec00604 	addi	sp,sp,24
  80bbcc:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80bbd0:	81c01704 	addi	r7,r16,92
  80bbd4:	900d883a 	mov	r6,r18
  80bbd8:	d94000c4 	addi	r5,sp,3
  80bbdc:	9809883a 	mov	r4,r19
  80bbe0:	080c4b80 	call	80c4b8 <_wcrtomb_r>
  80bbe4:	1023883a 	mov	r17,r2
  80bbe8:	10bfffd8 	cmpnei	r2,r2,-1
  80bbec:	10002f26 	beq	r2,zero,80bcac <__fputwc+0x19c>
  for (i = 0; i < len; i++)
  80bbf0:	883fee26 	beq	r17,zero,80bbac <__fputwc+0x9c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bbf4:	80800217 	ldw	r2,8(r16)
  80bbf8:	d94000c3 	ldbu	r5,3(sp)
  80bbfc:	10bfffc4 	addi	r2,r2,-1
  80bc00:	80800215 	stw	r2,8(r16)
  80bc04:	103fd80e 	bge	r2,zero,80bb68 <__fputwc+0x58>
  80bc08:	80c00617 	ldw	r3,24(r16)
  80bc0c:	10c01916 	blt	r2,r3,80bc74 <__fputwc+0x164>
  80bc10:	80800017 	ldw	r2,0(r16)
  80bc14:	11400005 	stb	r5,0(r2)
  80bc18:	80800017 	ldw	r2,0(r16)
  80bc1c:	10c00003 	ldbu	r3,0(r2)
  80bc20:	18c00298 	cmpnei	r3,r3,10
  80bc24:	18002526 	beq	r3,zero,80bcbc <__fputwc+0x1ac>
  80bc28:	10800044 	addi	r2,r2,1
  80bc2c:	80800015 	stw	r2,0(r16)
  80bc30:	003fd206 	br	80bb7c <__fputwc+0x6c>
  80bc34:	80c00617 	ldw	r3,24(r16)
  80bc38:	10c01516 	blt	r2,r3,80bc90 <__fputwc+0x180>
  80bc3c:	80800017 	ldw	r2,0(r16)
  80bc40:	11400005 	stb	r5,0(r2)
  80bc44:	80800017 	ldw	r2,0(r16)
  80bc48:	10c00003 	ldbu	r3,0(r2)
  80bc4c:	18c002a0 	cmpeqi	r3,r3,10
  80bc50:	183fd426 	beq	r3,zero,80bba4 <__fputwc+0x94>
  80bc54:	800d883a 	mov	r6,r16
  80bc58:	01400284 	movi	r5,10
  80bc5c:	9809883a 	mov	r4,r19
  80bc60:	080c2240 	call	80c224 <__swbuf_r>
  80bc64:	10bfffe0 	cmpeqi	r2,r2,-1
  80bc68:	103fd026 	beq	r2,zero,80bbac <__fputwc+0x9c>
      return WEOF;
  80bc6c:	047fffc4 	movi	r17,-1
  80bc70:	003fcf06 	br	80bbb0 <__fputwc+0xa0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bc74:	800d883a 	mov	r6,r16
  80bc78:	29403fcc 	andi	r5,r5,255
  80bc7c:	9809883a 	mov	r4,r19
  80bc80:	080c2240 	call	80c224 <__swbuf_r>
  80bc84:	10bfffe0 	cmpeqi	r2,r2,-1
  80bc88:	103fbc26 	beq	r2,zero,80bb7c <__fputwc+0x6c>
  80bc8c:	003ff706 	br	80bc6c <__fputwc+0x15c>
  80bc90:	800d883a 	mov	r6,r16
  80bc94:	29403fcc 	andi	r5,r5,255
  80bc98:	9809883a 	mov	r4,r19
  80bc9c:	080c2240 	call	80c224 <__swbuf_r>
  80bca0:	10bfffd8 	cmpnei	r2,r2,-1
  80bca4:	103fc11e 	bne	r2,zero,80bbac <__fputwc+0x9c>
  80bca8:	003ff006 	br	80bc6c <__fputwc+0x15c>
	  fp->_flags |= __SERR;
  80bcac:	8080030b 	ldhu	r2,12(r16)
  80bcb0:	10801014 	ori	r2,r2,64
  80bcb4:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80bcb8:	003fbd06 	br	80bbb0 <__fputwc+0xa0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bcbc:	800d883a 	mov	r6,r16
  80bcc0:	01400284 	movi	r5,10
  80bcc4:	9809883a 	mov	r4,r19
  80bcc8:	080c2240 	call	80c224 <__swbuf_r>
  80bccc:	10bfffe0 	cmpeqi	r2,r2,-1
  80bcd0:	103faa26 	beq	r2,zero,80bb7c <__fputwc+0x6c>
  80bcd4:	003fe506 	br	80bc6c <__fputwc+0x15c>

0080bcd8 <_fputwc_r>:
	FILE *fp)
{
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
  80bcd8:	3080030b 	ldhu	r2,12(r6)
{
  80bcdc:	defffa04 	addi	sp,sp,-24
  80bce0:	dcc00415 	stw	r19,16(sp)
  80bce4:	dc800315 	stw	r18,12(sp)
  80bce8:	dc000115 	stw	r16,4(sp)
  80bcec:	dfc00515 	stw	ra,20(sp)
  80bcf0:	dc400215 	stw	r17,8(sp)
  ORIENT(fp, 1);
  80bcf4:	10c8000c 	andi	r3,r2,8192
{
  80bcf8:	3021883a 	mov	r16,r6
  80bcfc:	2027883a 	mov	r19,r4
  80bd00:	2825883a 	mov	r18,r5
  ORIENT(fp, 1);
  80bd04:	1800051e 	bne	r3,zero,80bd1c <_fputwc_r+0x44>
  _newlib_flockfile_start (fp);
  80bd08:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80bd0c:	10880014 	ori	r2,r2,8192
  80bd10:	3080030d 	sth	r2,12(r6)
  80bd14:	18880014 	ori	r2,r3,8192
  80bd18:	30801915 	stw	r2,100(r6)
  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80bd1c:	0806d580 	call	806d58 <__locale_mb_cur_max>
  80bd20:	10800058 	cmpnei	r2,r2,1
  80bd24:	1000241e 	bne	r2,zero,80bdb8 <_fputwc_r+0xe0>
  80bd28:	90bfffc4 	addi	r2,r18,-1
  80bd2c:	10803fe8 	cmpgeui	r2,r2,255
  80bd30:	1000211e 	bne	r2,zero,80bdb8 <_fputwc_r+0xe0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd34:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80bd38:	dc8000c5 	stb	r18,3(sp)
  80bd3c:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd40:	10bfffc4 	addi	r2,r2,-1
  80bd44:	80800215 	stw	r2,8(r16)
      len = 1;
  80bd48:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd4c:	10002816 	blt	r2,zero,80bdf0 <_fputwc_r+0x118>
  80bd50:	80800017 	ldw	r2,0(r16)
  80bd54:	11400005 	stb	r5,0(r2)
  80bd58:	80800017 	ldw	r2,0(r16)
  80bd5c:	10800044 	addi	r2,r2,1
  80bd60:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80bd64:	8c400060 	cmpeqi	r17,r17,1
  80bd68:	88000a1e 	bne	r17,zero,80bd94 <_fputwc_r+0xbc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd6c:	80800217 	ldw	r2,8(r16)
  80bd70:	d9400103 	ldbu	r5,4(sp)
  80bd74:	10bfffc4 	addi	r2,r2,-1
  80bd78:	80800215 	stw	r2,8(r16)
  80bd7c:	10002716 	blt	r2,zero,80be1c <_fputwc_r+0x144>
  80bd80:	80800017 	ldw	r2,0(r16)
  80bd84:	11400005 	stb	r5,0(r2)
  80bd88:	80800017 	ldw	r2,0(r16)
  80bd8c:	10800044 	addi	r2,r2,1
  80bd90:	80800015 	stw	r2,0(r16)
  return (wint_t) wc;
  80bd94:	9023883a 	mov	r17,r18
  r = __fputwc(ptr, wc, fp);
  _newlib_flockfile_end (fp);
  return r;
}
  80bd98:	8805883a 	mov	r2,r17
  80bd9c:	dfc00517 	ldw	ra,20(sp)
  80bda0:	dcc00417 	ldw	r19,16(sp)
  80bda4:	dc800317 	ldw	r18,12(sp)
  80bda8:	dc400217 	ldw	r17,8(sp)
  80bdac:	dc000117 	ldw	r16,4(sp)
  80bdb0:	dec00604 	addi	sp,sp,24
  80bdb4:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80bdb8:	81c01704 	addi	r7,r16,92
  80bdbc:	900d883a 	mov	r6,r18
  80bdc0:	d94000c4 	addi	r5,sp,3
  80bdc4:	9809883a 	mov	r4,r19
  80bdc8:	080c4b80 	call	80c4b8 <_wcrtomb_r>
  80bdcc:	1023883a 	mov	r17,r2
  80bdd0:	10bfffd8 	cmpnei	r2,r2,-1
  80bdd4:	10002f26 	beq	r2,zero,80be94 <_fputwc_r+0x1bc>
  for (i = 0; i < len; i++)
  80bdd8:	883fee26 	beq	r17,zero,80bd94 <_fputwc_r+0xbc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bddc:	80800217 	ldw	r2,8(r16)
  80bde0:	d94000c3 	ldbu	r5,3(sp)
  80bde4:	10bfffc4 	addi	r2,r2,-1
  80bde8:	80800215 	stw	r2,8(r16)
  80bdec:	103fd80e 	bge	r2,zero,80bd50 <_fputwc_r+0x78>
  80bdf0:	80c00617 	ldw	r3,24(r16)
  80bdf4:	10c01916 	blt	r2,r3,80be5c <_fputwc_r+0x184>
  80bdf8:	80800017 	ldw	r2,0(r16)
  80bdfc:	11400005 	stb	r5,0(r2)
  80be00:	80800017 	ldw	r2,0(r16)
  80be04:	10c00003 	ldbu	r3,0(r2)
  80be08:	18c00298 	cmpnei	r3,r3,10
  80be0c:	18002526 	beq	r3,zero,80bea4 <_fputwc_r+0x1cc>
  80be10:	10800044 	addi	r2,r2,1
  80be14:	80800015 	stw	r2,0(r16)
  80be18:	003fd206 	br	80bd64 <_fputwc_r+0x8c>
  80be1c:	80c00617 	ldw	r3,24(r16)
  80be20:	10c01516 	blt	r2,r3,80be78 <_fputwc_r+0x1a0>
  80be24:	80800017 	ldw	r2,0(r16)
  80be28:	11400005 	stb	r5,0(r2)
  80be2c:	80800017 	ldw	r2,0(r16)
  80be30:	10c00003 	ldbu	r3,0(r2)
  80be34:	18c002a0 	cmpeqi	r3,r3,10
  80be38:	183fd426 	beq	r3,zero,80bd8c <_fputwc_r+0xb4>
  80be3c:	800d883a 	mov	r6,r16
  80be40:	01400284 	movi	r5,10
  80be44:	9809883a 	mov	r4,r19
  80be48:	080c2240 	call	80c224 <__swbuf_r>
  80be4c:	10bfffe0 	cmpeqi	r2,r2,-1
  80be50:	103fd026 	beq	r2,zero,80bd94 <_fputwc_r+0xbc>
      return WEOF;
  80be54:	047fffc4 	movi	r17,-1
  80be58:	003fcf06 	br	80bd98 <_fputwc_r+0xc0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80be5c:	800d883a 	mov	r6,r16
  80be60:	29403fcc 	andi	r5,r5,255
  80be64:	9809883a 	mov	r4,r19
  80be68:	080c2240 	call	80c224 <__swbuf_r>
  80be6c:	10bfffe0 	cmpeqi	r2,r2,-1
  80be70:	103fbc26 	beq	r2,zero,80bd64 <_fputwc_r+0x8c>
  80be74:	003ff706 	br	80be54 <_fputwc_r+0x17c>
  80be78:	800d883a 	mov	r6,r16
  80be7c:	29403fcc 	andi	r5,r5,255
  80be80:	9809883a 	mov	r4,r19
  80be84:	080c2240 	call	80c224 <__swbuf_r>
  80be88:	10bfffd8 	cmpnei	r2,r2,-1
  80be8c:	103fc11e 	bne	r2,zero,80bd94 <_fputwc_r+0xbc>
  80be90:	003ff006 	br	80be54 <_fputwc_r+0x17c>
	  fp->_flags |= __SERR;
  80be94:	8080030b 	ldhu	r2,12(r16)
  80be98:	10801014 	ori	r2,r2,64
  80be9c:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80bea0:	003fbd06 	br	80bd98 <_fputwc_r+0xc0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bea4:	800d883a 	mov	r6,r16
  80bea8:	01400284 	movi	r5,10
  80beac:	9809883a 	mov	r4,r19
  80beb0:	080c2240 	call	80c224 <__swbuf_r>
  80beb4:	10bfffe0 	cmpeqi	r2,r2,-1
  80beb8:	103faa26 	beq	r2,zero,80bd64 <_fputwc_r+0x8c>
  80bebc:	003fe506 	br	80be54 <_fputwc_r+0x17c>

0080bec0 <fputwc>:

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
  80bec0:	defffa04 	addi	sp,sp,-24
  80bec4:	dcc00415 	stw	r19,16(sp)
  struct _reent *reent = _REENT;
  80bec8:	d4e00917 	ldw	r19,-32732(gp)
{
  80becc:	dc800315 	stw	r18,12(sp)
  80bed0:	dc000115 	stw	r16,4(sp)
  80bed4:	dfc00515 	stw	ra,20(sp)
  80bed8:	dc400215 	stw	r17,8(sp)
  80bedc:	2025883a 	mov	r18,r4
  80bee0:	2821883a 	mov	r16,r5

  CHECK_INIT(reent, fp);
  80bee4:	98000226 	beq	r19,zero,80bef0 <fputwc+0x30>
  80bee8:	98800e17 	ldw	r2,56(r19)
  80beec:	10004826 	beq	r2,zero,80c010 <fputwc+0x150>
  ORIENT(fp, 1);
  80bef0:	8080030b 	ldhu	r2,12(r16)
  80bef4:	10c8000c 	andi	r3,r2,8192
  80bef8:	1800051e 	bne	r3,zero,80bf10 <fputwc+0x50>
  _newlib_flockfile_start (fp);
  80befc:	80c01917 	ldw	r3,100(r16)
  ORIENT(fp, 1);
  80bf00:	10880014 	ori	r2,r2,8192
  80bf04:	8080030d 	sth	r2,12(r16)
  80bf08:	18880014 	ori	r2,r3,8192
  80bf0c:	80801915 	stw	r2,100(r16)
  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80bf10:	0806d580 	call	806d58 <__locale_mb_cur_max>
  80bf14:	10800058 	cmpnei	r2,r2,1
  80bf18:	1000241e 	bne	r2,zero,80bfac <fputwc+0xec>
  80bf1c:	90bfffc4 	addi	r2,r18,-1
  80bf20:	10803fe8 	cmpgeui	r2,r2,255
  80bf24:	1000211e 	bne	r2,zero,80bfac <fputwc+0xec>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bf28:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80bf2c:	dc8000c5 	stb	r18,3(sp)
  80bf30:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bf34:	10bfffc4 	addi	r2,r2,-1
  80bf38:	80800215 	stw	r2,8(r16)
      len = 1;
  80bf3c:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bf40:	10002816 	blt	r2,zero,80bfe4 <fputwc+0x124>
  80bf44:	80800017 	ldw	r2,0(r16)
  80bf48:	11400005 	stb	r5,0(r2)
  80bf4c:	80800017 	ldw	r2,0(r16)
  80bf50:	10800044 	addi	r2,r2,1
  80bf54:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80bf58:	8c400060 	cmpeqi	r17,r17,1
  80bf5c:	88000a1e 	bne	r17,zero,80bf88 <fputwc+0xc8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bf60:	80800217 	ldw	r2,8(r16)
  80bf64:	d9400103 	ldbu	r5,4(sp)
  80bf68:	10bfffc4 	addi	r2,r2,-1
  80bf6c:	80800215 	stw	r2,8(r16)
  80bf70:	10002a16 	blt	r2,zero,80c01c <fputwc+0x15c>
  80bf74:	80800017 	ldw	r2,0(r16)
  80bf78:	11400005 	stb	r5,0(r2)
  80bf7c:	80800017 	ldw	r2,0(r16)
  80bf80:	10800044 	addi	r2,r2,1
  80bf84:	80800015 	stw	r2,0(r16)
  return (wint_t) wc;
  80bf88:	9023883a 	mov	r17,r18
  return _fputwc_r (reent, wc, fp);
}
  80bf8c:	8805883a 	mov	r2,r17
  80bf90:	dfc00517 	ldw	ra,20(sp)
  80bf94:	dcc00417 	ldw	r19,16(sp)
  80bf98:	dc800317 	ldw	r18,12(sp)
  80bf9c:	dc400217 	ldw	r17,8(sp)
  80bfa0:	dc000117 	ldw	r16,4(sp)
  80bfa4:	dec00604 	addi	sp,sp,24
  80bfa8:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80bfac:	81c01704 	addi	r7,r16,92
  80bfb0:	900d883a 	mov	r6,r18
  80bfb4:	d94000c4 	addi	r5,sp,3
  80bfb8:	9809883a 	mov	r4,r19
  80bfbc:	080c4b80 	call	80c4b8 <_wcrtomb_r>
  80bfc0:	1023883a 	mov	r17,r2
  80bfc4:	10bfffd8 	cmpnei	r2,r2,-1
  80bfc8:	10003226 	beq	r2,zero,80c094 <fputwc+0x1d4>
  for (i = 0; i < len; i++)
  80bfcc:	883fee26 	beq	r17,zero,80bf88 <fputwc+0xc8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bfd0:	80800217 	ldw	r2,8(r16)
  80bfd4:	d94000c3 	ldbu	r5,3(sp)
  80bfd8:	10bfffc4 	addi	r2,r2,-1
  80bfdc:	80800215 	stw	r2,8(r16)
  80bfe0:	103fd80e 	bge	r2,zero,80bf44 <fputwc+0x84>
  80bfe4:	80c00617 	ldw	r3,24(r16)
  80bfe8:	10c01c16 	blt	r2,r3,80c05c <fputwc+0x19c>
  80bfec:	80800017 	ldw	r2,0(r16)
  80bff0:	11400005 	stb	r5,0(r2)
  80bff4:	80800017 	ldw	r2,0(r16)
  80bff8:	10c00003 	ldbu	r3,0(r2)
  80bffc:	18c00298 	cmpnei	r3,r3,10
  80c000:	18002826 	beq	r3,zero,80c0a4 <fputwc+0x1e4>
  80c004:	10800044 	addi	r2,r2,1
  80c008:	80800015 	stw	r2,0(r16)
  80c00c:	003fd206 	br	80bf58 <fputwc+0x98>
  CHECK_INIT(reent, fp);
  80c010:	9809883a 	mov	r4,r19
  80c014:	08060e80 	call	8060e8 <__sinit>
  80c018:	003fb506 	br	80bef0 <fputwc+0x30>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80c01c:	80c00617 	ldw	r3,24(r16)
  80c020:	10c01516 	blt	r2,r3,80c078 <fputwc+0x1b8>
  80c024:	80800017 	ldw	r2,0(r16)
  80c028:	11400005 	stb	r5,0(r2)
  80c02c:	80800017 	ldw	r2,0(r16)
  80c030:	10c00003 	ldbu	r3,0(r2)
  80c034:	18c002a0 	cmpeqi	r3,r3,10
  80c038:	183fd126 	beq	r3,zero,80bf80 <fputwc+0xc0>
  80c03c:	800d883a 	mov	r6,r16
  80c040:	01400284 	movi	r5,10
  80c044:	9809883a 	mov	r4,r19
  80c048:	080c2240 	call	80c224 <__swbuf_r>
  80c04c:	10bfffe0 	cmpeqi	r2,r2,-1
  80c050:	103fcd26 	beq	r2,zero,80bf88 <fputwc+0xc8>
      return WEOF;
  80c054:	047fffc4 	movi	r17,-1
  80c058:	003fcc06 	br	80bf8c <fputwc+0xcc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80c05c:	800d883a 	mov	r6,r16
  80c060:	29403fcc 	andi	r5,r5,255
  80c064:	9809883a 	mov	r4,r19
  80c068:	080c2240 	call	80c224 <__swbuf_r>
  80c06c:	10bfffe0 	cmpeqi	r2,r2,-1
  80c070:	103fb926 	beq	r2,zero,80bf58 <fputwc+0x98>
  80c074:	003ff706 	br	80c054 <fputwc+0x194>
  80c078:	800d883a 	mov	r6,r16
  80c07c:	29403fcc 	andi	r5,r5,255
  80c080:	9809883a 	mov	r4,r19
  80c084:	080c2240 	call	80c224 <__swbuf_r>
  80c088:	10bfffd8 	cmpnei	r2,r2,-1
  80c08c:	103fbe1e 	bne	r2,zero,80bf88 <fputwc+0xc8>
  80c090:	003ff006 	br	80c054 <fputwc+0x194>
	  fp->_flags |= __SERR;
  80c094:	8080030b 	ldhu	r2,12(r16)
  80c098:	10801014 	ori	r2,r2,64
  80c09c:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80c0a0:	003fba06 	br	80bf8c <fputwc+0xcc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80c0a4:	800d883a 	mov	r6,r16
  80c0a8:	01400284 	movi	r5,10
  80c0ac:	9809883a 	mov	r4,r19
  80c0b0:	080c2240 	call	80c224 <__swbuf_r>
  80c0b4:	10bfffe0 	cmpeqi	r2,r2,-1
  80c0b8:	103fa726 	beq	r2,zero,80bf58 <fputwc+0x98>
  80c0bc:	003fe506 	br	80c054 <fputwc+0x194>

0080c0c0 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
  80c0c0:	2807883a 	mov	r3,r5
  80c0c4:	defffe04 	addi	sp,sp,-8
  80c0c8:	dc000015 	stw	r16,0(sp)
  80c0cc:	300b883a 	mov	r5,r6
  80c0d0:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80c0d4:	1809883a 	mov	r4,r3
{
  80c0d8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c0dc:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80c0e0:	08101080 	call	810108 <fstat>
  80c0e4:	10ffffd8 	cmpnei	r3,r2,-1
  80c0e8:	18000426 	beq	r3,zero,80c0fc <_fstat_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80c0ec:	dfc00117 	ldw	ra,4(sp)
  80c0f0:	dc000017 	ldw	r16,0(sp)
  80c0f4:	dec00204 	addi	sp,sp,8
  80c0f8:	f800283a 	ret
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80c0fc:	d0e75817 	ldw	r3,-25248(gp)
  80c100:	183ffa26 	beq	r3,zero,80c0ec <_fstat_r+0x2c>
    ptr->_errno = errno;
  80c104:	80c00015 	stw	r3,0(r16)
}
  80c108:	dfc00117 	ldw	ra,4(sp)
  80c10c:	dc000017 	ldw	r16,0(sp)
  80c110:	dec00204 	addi	sp,sp,8
  80c114:	f800283a 	ret

0080c118 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80c118:	defffe04 	addi	sp,sp,-8
  80c11c:	dc000015 	stw	r16,0(sp)
  80c120:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80c124:	2809883a 	mov	r4,r5
{
  80c128:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c12c:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80c130:	08102200 	call	810220 <isatty>
  80c134:	10ffffd8 	cmpnei	r3,r2,-1
  80c138:	18000426 	beq	r3,zero,80c14c <_isatty_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80c13c:	dfc00117 	ldw	ra,4(sp)
  80c140:	dc000017 	ldw	r16,0(sp)
  80c144:	dec00204 	addi	sp,sp,8
  80c148:	f800283a 	ret
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80c14c:	d0e75817 	ldw	r3,-25248(gp)
  80c150:	183ffa26 	beq	r3,zero,80c13c <_isatty_r+0x24>
    ptr->_errno = errno;
  80c154:	80c00015 	stw	r3,0(r16)
}
  80c158:	dfc00117 	ldw	ra,4(sp)
  80c15c:	dc000017 	ldw	r16,0(sp)
  80c160:	dec00204 	addi	sp,sp,8
  80c164:	f800283a 	ret

0080c168 <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
  80c168:	2807883a 	mov	r3,r5
  80c16c:	defffe04 	addi	sp,sp,-8
  80c170:	dc000015 	stw	r16,0(sp)
  80c174:	300b883a 	mov	r5,r6
  80c178:	2021883a 	mov	r16,r4
  80c17c:	380d883a 	mov	r6,r7
  _off_t ret;

  errno = 0;
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80c180:	1809883a 	mov	r4,r3
{
  80c184:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c188:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80c18c:	08105600 	call	810560 <lseek>
  80c190:	10ffffd8 	cmpnei	r3,r2,-1
  80c194:	18000426 	beq	r3,zero,80c1a8 <_lseek_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80c198:	dfc00117 	ldw	ra,4(sp)
  80c19c:	dc000017 	ldw	r16,0(sp)
  80c1a0:	dec00204 	addi	sp,sp,8
  80c1a4:	f800283a 	ret
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80c1a8:	d0e75817 	ldw	r3,-25248(gp)
  80c1ac:	183ffa26 	beq	r3,zero,80c198 <_lseek_r+0x30>
    ptr->_errno = errno;
  80c1b0:	80c00015 	stw	r3,0(r16)
}
  80c1b4:	dfc00117 	ldw	ra,4(sp)
  80c1b8:	dc000017 	ldw	r16,0(sp)
  80c1bc:	dec00204 	addi	sp,sp,8
  80c1c0:	f800283a 	ret

0080c1c4 <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
  80c1c4:	2807883a 	mov	r3,r5
  80c1c8:	defffe04 	addi	sp,sp,-8
  80c1cc:	dc000015 	stw	r16,0(sp)
  80c1d0:	300b883a 	mov	r5,r6
  80c1d4:	2021883a 	mov	r16,r4
  80c1d8:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c1dc:	1809883a 	mov	r4,r3
{
  80c1e0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c1e4:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c1e8:	08107400 	call	810740 <read>
  80c1ec:	10ffffd8 	cmpnei	r3,r2,-1
  80c1f0:	18000426 	beq	r3,zero,80c204 <_read_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80c1f4:	dfc00117 	ldw	ra,4(sp)
  80c1f8:	dc000017 	ldw	r16,0(sp)
  80c1fc:	dec00204 	addi	sp,sp,8
  80c200:	f800283a 	ret
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80c204:	d0e75817 	ldw	r3,-25248(gp)
  80c208:	183ffa26 	beq	r3,zero,80c1f4 <_read_r+0x30>
    ptr->_errno = errno;
  80c20c:	80c00015 	stw	r3,0(r16)
}
  80c210:	dfc00117 	ldw	ra,4(sp)
  80c214:	dc000017 	ldw	r16,0(sp)
  80c218:	dec00204 	addi	sp,sp,8
  80c21c:	f800283a 	ret

0080c220 <_vfiprintf_r>:
{
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
  80c220:	0809d081 	jmpi	809d08 <___vfiprintf_internal_r>

0080c224 <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
  80c224:	defffb04 	addi	sp,sp,-20
  80c228:	dcc00315 	stw	r19,12(sp)
  80c22c:	dc400115 	stw	r17,4(sp)
  80c230:	dc000015 	stw	r16,0(sp)
  80c234:	dfc00415 	stw	ra,16(sp)
  80c238:	dc800215 	stw	r18,8(sp)
  80c23c:	2027883a 	mov	r19,r4
  80c240:	2823883a 	mov	r17,r5
  80c244:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
  80c248:	20000226 	beq	r4,zero,80c254 <__swbuf_r+0x30>
  80c24c:	20800e17 	ldw	r2,56(r4)
  80c250:	10003e26 	beq	r2,zero,80c34c <__swbuf_r+0x128>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
  80c254:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80c258:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80c25c:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80c260:	1880020c 	andi	r2,r3,8
  80c264:	10001f26 	beq	r2,zero,80c2e4 <__swbuf_r+0xc0>
  80c268:	80800417 	ldw	r2,16(r16)
  80c26c:	10001d26 	beq	r2,zero,80c2e4 <__swbuf_r+0xc0>
    return EOF;
  c = (unsigned char) c;

  ORIENT (fp, -1);
  80c270:	1948000c 	andi	r5,r3,8192
  80c274:	8c803fcc 	andi	r18,r17,255
  80c278:	28002326 	beq	r5,zero,80c308 <__swbuf_r+0xe4>
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
  80c27c:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80c280:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c284:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c288:	1100290e 	bge	r2,r4,80c330 <__swbuf_r+0x10c>
	return EOF;
      n = 0;
    }
  fp->_w--;
  *fp->_p++ = c;
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c28c:	10800044 	addi	r2,r2,1
  fp->_w--;
  80c290:	81400217 	ldw	r5,8(r16)
  *fp->_p++ = c;
  80c294:	19000044 	addi	r4,r3,1
  80c298:	81000015 	stw	r4,0(r16)
  fp->_w--;
  80c29c:	297fffc4 	addi	r5,r5,-1
  80c2a0:	81400215 	stw	r5,8(r16)
  *fp->_p++ = c;
  80c2a4:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c2a8:	80c00517 	ldw	r3,20(r16)
  80c2ac:	18802926 	beq	r3,r2,80c354 <__swbuf_r+0x130>
  80c2b0:	8080030b 	ldhu	r2,12(r16)
  80c2b4:	1080004c 	andi	r2,r2,1
  80c2b8:	10000226 	beq	r2,zero,80c2c4 <__swbuf_r+0xa0>
  80c2bc:	90800298 	cmpnei	r2,r18,10
  80c2c0:	10002426 	beq	r2,zero,80c354 <__swbuf_r+0x130>
    if (_fflush_r (ptr, fp))
      return EOF;
  return c;
}
  80c2c4:	9005883a 	mov	r2,r18
  80c2c8:	dfc00417 	ldw	ra,16(sp)
  80c2cc:	dcc00317 	ldw	r19,12(sp)
  80c2d0:	dc800217 	ldw	r18,8(sp)
  80c2d4:	dc400117 	ldw	r17,4(sp)
  80c2d8:	dc000017 	ldw	r16,0(sp)
  80c2dc:	dec00504 	addi	sp,sp,20
  80c2e0:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80c2e4:	800b883a 	mov	r5,r16
  80c2e8:	9809883a 	mov	r4,r19
  80c2ec:	0803f380 	call	803f38 <__swsetup_r>
  80c2f0:	10001c1e 	bne	r2,zero,80c364 <__swbuf_r+0x140>
  ORIENT (fp, -1);
  80c2f4:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c2f8:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80c2fc:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80c300:	1948000c 	andi	r5,r3,8192
  80c304:	283fdd1e 	bne	r5,zero,80c27c <__swbuf_r+0x58>
  80c308:	81001917 	ldw	r4,100(r16)
  80c30c:	18c80014 	ori	r3,r3,8192
  80c310:	0177ffc4 	movi	r5,-8193
  80c314:	2148703a 	and	r4,r4,r5
  80c318:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c31c:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80c320:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80c324:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c328:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c32c:	113fd716 	blt	r2,r4,80c28c <__swbuf_r+0x68>
      if (_fflush_r (ptr, fp))
  80c330:	800b883a 	mov	r5,r16
  80c334:	9809883a 	mov	r4,r19
  80c338:	0805cbc0 	call	805cbc <_fflush_r>
  80c33c:	1000091e 	bne	r2,zero,80c364 <__swbuf_r+0x140>
  *fp->_p++ = c;
  80c340:	80c00017 	ldw	r3,0(r16)
  80c344:	00800044 	movi	r2,1
  80c348:	003fd106 	br	80c290 <__swbuf_r+0x6c>
  CHECK_INIT (ptr, fp);
  80c34c:	08060e80 	call	8060e8 <__sinit>
  80c350:	003fc006 	br	80c254 <__swbuf_r+0x30>
    if (_fflush_r (ptr, fp))
  80c354:	800b883a 	mov	r5,r16
  80c358:	9809883a 	mov	r4,r19
  80c35c:	0805cbc0 	call	805cbc <_fflush_r>
  80c360:	103fd826 	beq	r2,zero,80c2c4 <__swbuf_r+0xa0>
    return EOF;
  80c364:	04bfffc4 	movi	r18,-1
  80c368:	003fd606 	br	80c2c4 <__swbuf_r+0xa0>

0080c36c <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
  80c36c:	defffb04 	addi	sp,sp,-20
  80c370:	dcc00315 	stw	r19,12(sp)
  return __swbuf_r (_REENT, c, fp);
  80c374:	d4e00917 	ldw	r19,-32732(gp)
{
  80c378:	dc400115 	stw	r17,4(sp)
  80c37c:	dc000015 	stw	r16,0(sp)
  80c380:	dfc00415 	stw	ra,16(sp)
  80c384:	dc800215 	stw	r18,8(sp)
  80c388:	2023883a 	mov	r17,r4
  80c38c:	2821883a 	mov	r16,r5
  CHECK_INIT (ptr, fp);
  80c390:	98000226 	beq	r19,zero,80c39c <__swbuf+0x30>
  80c394:	98800e17 	ldw	r2,56(r19)
  80c398:	10003e26 	beq	r2,zero,80c494 <__swbuf+0x128>
  fp->_w = fp->_lbfsize;
  80c39c:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80c3a0:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80c3a4:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80c3a8:	1880020c 	andi	r2,r3,8
  80c3ac:	10001f26 	beq	r2,zero,80c42c <__swbuf+0xc0>
  80c3b0:	80800417 	ldw	r2,16(r16)
  80c3b4:	10001d26 	beq	r2,zero,80c42c <__swbuf+0xc0>
  ORIENT (fp, -1);
  80c3b8:	1908000c 	andi	r4,r3,8192
  80c3bc:	8c803fcc 	andi	r18,r17,255
  80c3c0:	20002326 	beq	r4,zero,80c450 <__swbuf+0xe4>
  n = fp->_p - fp->_bf._base;
  80c3c4:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80c3c8:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c3cc:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c3d0:	1100290e 	bge	r2,r4,80c478 <__swbuf+0x10c>
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c3d4:	10800044 	addi	r2,r2,1
  fp->_w--;
  80c3d8:	81000217 	ldw	r4,8(r16)
  *fp->_p++ = c;
  80c3dc:	19400044 	addi	r5,r3,1
  80c3e0:	81400015 	stw	r5,0(r16)
  fp->_w--;
  80c3e4:	213fffc4 	addi	r4,r4,-1
  80c3e8:	81000215 	stw	r4,8(r16)
  *fp->_p++ = c;
  80c3ec:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c3f0:	80c00517 	ldw	r3,20(r16)
  80c3f4:	18802a26 	beq	r3,r2,80c4a0 <__swbuf+0x134>
  80c3f8:	8080030b 	ldhu	r2,12(r16)
  80c3fc:	1080004c 	andi	r2,r2,1
  80c400:	10000226 	beq	r2,zero,80c40c <__swbuf+0xa0>
  80c404:	90800298 	cmpnei	r2,r18,10
  80c408:	10002526 	beq	r2,zero,80c4a0 <__swbuf+0x134>
}
  80c40c:	9005883a 	mov	r2,r18
  80c410:	dfc00417 	ldw	ra,16(sp)
  80c414:	dcc00317 	ldw	r19,12(sp)
  80c418:	dc800217 	ldw	r18,8(sp)
  80c41c:	dc400117 	ldw	r17,4(sp)
  80c420:	dc000017 	ldw	r16,0(sp)
  80c424:	dec00504 	addi	sp,sp,20
  80c428:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80c42c:	800b883a 	mov	r5,r16
  80c430:	9809883a 	mov	r4,r19
  80c434:	0803f380 	call	803f38 <__swsetup_r>
  80c438:	10001d1e 	bne	r2,zero,80c4b0 <__swbuf+0x144>
  ORIENT (fp, -1);
  80c43c:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c440:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80c444:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80c448:	1908000c 	andi	r4,r3,8192
  80c44c:	203fdd1e 	bne	r4,zero,80c3c4 <__swbuf+0x58>
  80c450:	81001917 	ldw	r4,100(r16)
  80c454:	18c80014 	ori	r3,r3,8192
  80c458:	0177ffc4 	movi	r5,-8193
  80c45c:	2148703a 	and	r4,r4,r5
  80c460:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c464:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80c468:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80c46c:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c470:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c474:	113fd716 	blt	r2,r4,80c3d4 <__swbuf+0x68>
      if (_fflush_r (ptr, fp))
  80c478:	800b883a 	mov	r5,r16
  80c47c:	9809883a 	mov	r4,r19
  80c480:	0805cbc0 	call	805cbc <_fflush_r>
  80c484:	10000a1e 	bne	r2,zero,80c4b0 <__swbuf+0x144>
  *fp->_p++ = c;
  80c488:	80c00017 	ldw	r3,0(r16)
  80c48c:	00800044 	movi	r2,1
  80c490:	003fd106 	br	80c3d8 <__swbuf+0x6c>
  CHECK_INIT (ptr, fp);
  80c494:	9809883a 	mov	r4,r19
  80c498:	08060e80 	call	8060e8 <__sinit>
  80c49c:	003fbf06 	br	80c39c <__swbuf+0x30>
    if (_fflush_r (ptr, fp))
  80c4a0:	800b883a 	mov	r5,r16
  80c4a4:	9809883a 	mov	r4,r19
  80c4a8:	0805cbc0 	call	805cbc <_fflush_r>
  80c4ac:	103fd726 	beq	r2,zero,80c40c <__swbuf+0xa0>
    return EOF;
  80c4b0:	04bfffc4 	movi	r18,-1
  80c4b4:	003fd506 	br	80c40c <__swbuf+0xa0>

0080c4b8 <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
  80c4b8:	defffa04 	addi	sp,sp,-24
  80c4bc:	dc400415 	stw	r17,16(sp)
  80c4c0:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c4c4:	00802074 	movhi	r2,129
{
  80c4c8:	dfc00515 	stw	ra,20(sp)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c4cc:	108e4917 	ldw	r2,14628(r2)
{
  80c4d0:	2023883a 	mov	r17,r4
  80c4d4:	3821883a 	mov	r16,r7
  if (s == NULL)
  80c4d8:	28000826 	beq	r5,zero,80c4fc <_wcrtomb_r+0x44>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
  80c4dc:	103ee83a 	callr	r2

  if (retval == -1)
  80c4e0:	10ffffd8 	cmpnei	r3,r2,-1
  80c4e4:	18000a26 	beq	r3,zero,80c510 <_wcrtomb_r+0x58>
      ptr->_errno = EILSEQ;
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
}
  80c4e8:	dfc00517 	ldw	ra,20(sp)
  80c4ec:	dc400417 	ldw	r17,16(sp)
  80c4f0:	dc000317 	ldw	r16,12(sp)
  80c4f4:	dec00604 	addi	sp,sp,24
  80c4f8:	f800283a 	ret
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c4fc:	000d883a 	mov	r6,zero
  80c500:	d9400084 	addi	r5,sp,2
  80c504:	103ee83a 	callr	r2
  if (retval == -1)
  80c508:	10ffffd8 	cmpnei	r3,r2,-1
  80c50c:	183ff61e 	bne	r3,zero,80c4e8 <_wcrtomb_r+0x30>
      ptr->_errno = EILSEQ;
  80c510:	00802284 	movi	r2,138
      ps->__count = 0;
  80c514:	80000015 	stw	zero,0(r16)
      ptr->_errno = EILSEQ;
  80c518:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c51c:	00bfffc4 	movi	r2,-1
  80c520:	003ff106 	br	80c4e8 <_wcrtomb_r+0x30>

0080c524 <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
  80c524:	defffa04 	addi	sp,sp,-24
  80c528:	dc400415 	stw	r17,16(sp)
  80c52c:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c530:	00c02074 	movhi	r3,129
{
  80c534:	dfc00515 	stw	ra,20(sp)
  struct _reent *reent = _REENT;
  80c538:	d4600917 	ldw	r17,-32732(gp)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c53c:	18ce4917 	ldw	r3,14628(r3)
{
  80c540:	3021883a 	mov	r16,r6
  if (s == NULL)
  80c544:	20000c26 	beq	r4,zero,80c578 <wcrtomb+0x54>
  80c548:	280d883a 	mov	r6,r5
  else
    retval = __WCTOMB (reent, s, wc, ps);
  80c54c:	800f883a 	mov	r7,r16
  80c550:	200b883a 	mov	r5,r4
  80c554:	8809883a 	mov	r4,r17
  80c558:	183ee83a 	callr	r3

  if (retval == -1)
  80c55c:	10ffffd8 	cmpnei	r3,r2,-1
  80c560:	18000c26 	beq	r3,zero,80c594 <wcrtomb+0x70>
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80c564:	dfc00517 	ldw	ra,20(sp)
  80c568:	dc400417 	ldw	r17,16(sp)
  80c56c:	dc000317 	ldw	r16,12(sp)
  80c570:	dec00604 	addi	sp,sp,24
  80c574:	f800283a 	ret
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c578:	300f883a 	mov	r7,r6
  80c57c:	d9400084 	addi	r5,sp,2
  80c580:	000d883a 	mov	r6,zero
  80c584:	8809883a 	mov	r4,r17
  80c588:	183ee83a 	callr	r3
  if (retval == -1)
  80c58c:	10ffffd8 	cmpnei	r3,r2,-1
  80c590:	183ff41e 	bne	r3,zero,80c564 <wcrtomb+0x40>
      reent->_errno = EILSEQ;
  80c594:	00802284 	movi	r2,138
      ps->__count = 0;
  80c598:	80000015 	stw	zero,0(r16)
      reent->_errno = EILSEQ;
  80c59c:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c5a0:	00bfffc4 	movi	r2,-1
  80c5a4:	003fef06 	br	80c564 <wcrtomb+0x40>

0080c5a8 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
  80c5a8:	deffff04 	addi	sp,sp,-4
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
  80c5ac:	01000184 	movi	r4,6
{
  80c5b0:	dfc00015 	stw	ra,0(sp)
      raise (SIGABRT);
  80c5b4:	080c8340 	call	80c834 <raise>
      _exit (1);
  80c5b8:	01000044 	movi	r4,1
  80c5bc:	08100940 	call	810094 <_exit>

0080c5c0 <_init_signal_r>:
int
_init_signal_r (struct _reent *ptr)
{
  int i;

  if (ptr->_sig_func == NULL)
  80c5c0:	2080b717 	ldw	r2,732(r4)
  80c5c4:	10000226 	beq	r2,zero,80c5d0 <_init_signal_r+0x10>

      for (i = 0; i < NSIG; i++)
	ptr->_sig_func[i] = SIG_DFL;
    }

  return 0;
  80c5c8:	0005883a 	mov	r2,zero
}
  80c5cc:	f800283a 	ret
{
  80c5d0:	defffe04 	addi	sp,sp,-8
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c5d4:	01402004 	movi	r5,128
{
  80c5d8:	dc000015 	stw	r16,0(sp)
  80c5dc:	dfc00115 	stw	ra,4(sp)
  80c5e0:	2021883a 	mov	r16,r4
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c5e4:	080701c0 	call	80701c <_malloc_r>
  80c5e8:	8080b715 	stw	r2,732(r16)
  80c5ec:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c5f0:	10000826 	beq	r2,zero,80c614 <_init_signal_r+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c5f4:	01802004 	movi	r6,128
  80c5f8:	000b883a 	mov	r5,zero
  80c5fc:	0801b400 	call	801b40 <memset>
  return 0;
  80c600:	0005883a 	mov	r2,zero
}
  80c604:	dfc00117 	ldw	ra,4(sp)
  80c608:	dc000017 	ldw	r16,0(sp)
  80c60c:	dec00204 	addi	sp,sp,8
  80c610:	f800283a 	ret
	return -1;
  80c614:	00bfffc4 	movi	r2,-1
  80c618:	003ffa06 	br	80c604 <_init_signal_r+0x44>

0080c61c <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
  80c61c:	defffc04 	addi	sp,sp,-16
  80c620:	dc400115 	stw	r17,4(sp)
  80c624:	dfc00315 	stw	ra,12(sp)
  80c628:	dc800215 	stw	r18,8(sp)
  80c62c:	dc000015 	stw	r16,0(sp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
  80c630:	28800830 	cmpltui	r2,r5,32
{
  80c634:	2023883a 	mov	r17,r4
  if (sig < 0 || sig >= NSIG)
  80c638:	10000e26 	beq	r2,zero,80c674 <_signal_r+0x58>
    {
      ptr->_errno = EINVAL;
      return SIG_ERR;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c63c:	20c0b717 	ldw	r3,732(r4)
  80c640:	2821883a 	mov	r16,r5
  80c644:	3025883a 	mov	r18,r6
  80c648:	18000e26 	beq	r3,zero,80c684 <_signal_r+0x68>
    return SIG_ERR;
  
  old_func = ptr->_sig_func[sig];
  80c64c:	802090ba 	slli	r16,r16,2
  80c650:	1c21883a 	add	r16,r3,r16
  80c654:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c658:	84800015 	stw	r18,0(r16)

  return old_func;
}
  80c65c:	dfc00317 	ldw	ra,12(sp)
  80c660:	dc800217 	ldw	r18,8(sp)
  80c664:	dc400117 	ldw	r17,4(sp)
  80c668:	dc000017 	ldw	r16,0(sp)
  80c66c:	dec00404 	addi	sp,sp,16
  80c670:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c674:	00800584 	movi	r2,22
  80c678:	20800015 	stw	r2,0(r4)
      return SIG_ERR;
  80c67c:	00bfffc4 	movi	r2,-1
  80c680:	003ff606 	br	80c65c <_signal_r+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c684:	01402004 	movi	r5,128
  80c688:	080701c0 	call	80701c <_malloc_r>
  80c68c:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c690:	10000626 	beq	r2,zero,80c6ac <_signal_r+0x90>
	ptr->_sig_func[i] = SIG_DFL;
  80c694:	01802004 	movi	r6,128
  80c698:	000b883a 	mov	r5,zero
  80c69c:	1009883a 	mov	r4,r2
  80c6a0:	0801b400 	call	801b40 <memset>
  80c6a4:	1007883a 	mov	r3,r2
  80c6a8:	003fe806 	br	80c64c <_signal_r+0x30>
    return SIG_ERR;
  80c6ac:	00bfffc4 	movi	r2,-1
  80c6b0:	003fea06 	br	80c65c <_signal_r+0x40>

0080c6b4 <_raise_r>:
_raise_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c6b4:	28800830 	cmpltui	r2,r5,32
  80c6b8:	10002b26 	beq	r2,zero,80c768 <_raise_r+0xb4>
    {
      ptr->_errno = EINVAL;
      return -1;
    }

  if (ptr->_sig_func == NULL)
  80c6bc:	2080b717 	ldw	r2,732(r4)
{
  80c6c0:	defffd04 	addi	sp,sp,-12
  80c6c4:	dc000115 	stw	r16,4(sp)
  80c6c8:	dfc00215 	stw	ra,8(sp)
  80c6cc:	2821883a 	mov	r16,r5
  if (ptr->_sig_func == NULL)
  80c6d0:	10001026 	beq	r2,zero,80c714 <_raise_r+0x60>
    func = SIG_DFL;
  else
    func = ptr->_sig_func[sig];
  80c6d4:	280690ba 	slli	r3,r5,2
  80c6d8:	10c5883a 	add	r2,r2,r3
  80c6dc:	10c00017 	ldw	r3,0(r2)

  if (func == SIG_DFL)
  80c6e0:	18000c26 	beq	r3,zero,80c714 <_raise_r+0x60>
    return _kill_r (ptr, _getpid_r (ptr), sig);
  else if (func == SIG_IGN)
  80c6e4:	19400060 	cmpeqi	r5,r3,1
  80c6e8:	28001a1e 	bne	r5,zero,80c754 <_raise_r+0xa0>
    return 0;
  else if (func == SIG_ERR)
  80c6ec:	197fffd8 	cmpnei	r5,r3,-1
  80c6f0:	28001126 	beq	r5,zero,80c738 <_raise_r+0x84>
      ptr->_errno = EINVAL;
      return 1;
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c6f4:	10000015 	stw	zero,0(r2)
      func (sig);
  80c6f8:	8009883a 	mov	r4,r16
  80c6fc:	183ee83a 	callr	r3
      return 0;
  80c700:	0005883a 	mov	r2,zero
    }
}
  80c704:	dfc00217 	ldw	ra,8(sp)
  80c708:	dc000117 	ldw	r16,4(sp)
  80c70c:	dec00304 	addi	sp,sp,12
  80c710:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c714:	d9000015 	stw	r4,0(sp)
  80c718:	080caf40 	call	80caf4 <_getpid_r>
  80c71c:	d9000017 	ldw	r4,0(sp)
  80c720:	800d883a 	mov	r6,r16
  80c724:	100b883a 	mov	r5,r2
}
  80c728:	dfc00217 	ldw	ra,8(sp)
  80c72c:	dc000117 	ldw	r16,4(sp)
  80c730:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c734:	080ca9c1 	jmpi	80ca9c <_kill_r>
      ptr->_errno = EINVAL;
  80c738:	00800584 	movi	r2,22
  80c73c:	20800015 	stw	r2,0(r4)
      return 1;
  80c740:	00800044 	movi	r2,1
}
  80c744:	dfc00217 	ldw	ra,8(sp)
  80c748:	dc000117 	ldw	r16,4(sp)
  80c74c:	dec00304 	addi	sp,sp,12
  80c750:	f800283a 	ret
    return 0;
  80c754:	0005883a 	mov	r2,zero
}
  80c758:	dfc00217 	ldw	ra,8(sp)
  80c75c:	dc000117 	ldw	r16,4(sp)
  80c760:	dec00304 	addi	sp,sp,12
  80c764:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c768:	00800584 	movi	r2,22
  80c76c:	20800015 	stw	r2,0(r4)
      return -1;
  80c770:	00bfffc4 	movi	r2,-1
}
  80c774:	f800283a 	ret

0080c778 <__sigtramp_r>:
__sigtramp_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c778:	28800830 	cmpltui	r2,r5,32
  80c77c:	10002b26 	beq	r2,zero,80c82c <__sigtramp_r+0xb4>
    {
      return -1;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c780:	20c0b717 	ldw	r3,732(r4)
{
  80c784:	defffd04 	addi	sp,sp,-12
  80c788:	dc400115 	stw	r17,4(sp)
  80c78c:	dc000015 	stw	r16,0(sp)
  80c790:	dfc00215 	stw	ra,8(sp)
  80c794:	2821883a 	mov	r16,r5
  80c798:	2023883a 	mov	r17,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c79c:	18001326 	beq	r3,zero,80c7ec <__sigtramp_r+0x74>
    return -1;

  func = ptr->_sig_func[sig];
  80c7a0:	800490ba 	slli	r2,r16,2
  80c7a4:	1887883a 	add	r3,r3,r2
  80c7a8:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80c7ac:	10000d26 	beq	r2,zero,80c7e4 <__sigtramp_r+0x6c>
    return 1;
  else if (func == SIG_ERR)
  80c7b0:	113fffe0 	cmpeqi	r4,r2,-1
  80c7b4:	2000191e 	bne	r4,zero,80c81c <__sigtramp_r+0xa4>
    return 2;
  else if (func == SIG_IGN)
  80c7b8:	11000060 	cmpeqi	r4,r2,1
  80c7bc:	2000151e 	bne	r4,zero,80c814 <__sigtramp_r+0x9c>
    return 3;
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c7c0:	18000015 	stw	zero,0(r3)
      func (sig);
  80c7c4:	8009883a 	mov	r4,r16
  80c7c8:	103ee83a 	callr	r2
      return 0;
  80c7cc:	0005883a 	mov	r2,zero
    }
}
  80c7d0:	dfc00217 	ldw	ra,8(sp)
  80c7d4:	dc400117 	ldw	r17,4(sp)
  80c7d8:	dc000017 	ldw	r16,0(sp)
  80c7dc:	dec00304 	addi	sp,sp,12
  80c7e0:	f800283a 	ret
    return 1;
  80c7e4:	00800044 	movi	r2,1
  80c7e8:	003ff906 	br	80c7d0 <__sigtramp_r+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c7ec:	01402004 	movi	r5,128
  80c7f0:	080701c0 	call	80701c <_malloc_r>
  80c7f4:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c7f8:	10000a26 	beq	r2,zero,80c824 <__sigtramp_r+0xac>
	ptr->_sig_func[i] = SIG_DFL;
  80c7fc:	01802004 	movi	r6,128
  80c800:	000b883a 	mov	r5,zero
  80c804:	1009883a 	mov	r4,r2
  80c808:	0801b400 	call	801b40 <memset>
  80c80c:	1007883a 	mov	r3,r2
  80c810:	003fe306 	br	80c7a0 <__sigtramp_r+0x28>
    return 3;
  80c814:	008000c4 	movi	r2,3
  80c818:	003fed06 	br	80c7d0 <__sigtramp_r+0x58>
    return 2;
  80c81c:	00800084 	movi	r2,2
  80c820:	003feb06 	br	80c7d0 <__sigtramp_r+0x58>
      return -1;
  80c824:	00bfffc4 	movi	r2,-1
  80c828:	003fe906 	br	80c7d0 <__sigtramp_r+0x58>
  80c82c:	00bfffc4 	movi	r2,-1
}
  80c830:	f800283a 	ret

0080c834 <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
  80c834:	defffd04 	addi	sp,sp,-12
  80c838:	dc400115 	stw	r17,4(sp)
  80c83c:	dfc00215 	stw	ra,8(sp)
  80c840:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c844:	20800830 	cmpltui	r2,r4,32
  return _raise_r (_REENT, sig);
  80c848:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c84c:	10002326 	beq	r2,zero,80c8dc <raise+0xa8>
  if (ptr->_sig_func == NULL)
  80c850:	8880b717 	ldw	r2,732(r17)
  80c854:	2021883a 	mov	r16,r4
  80c858:	10001026 	beq	r2,zero,80c89c <raise+0x68>
    func = ptr->_sig_func[sig];
  80c85c:	200690ba 	slli	r3,r4,2
  80c860:	10c5883a 	add	r2,r2,r3
  80c864:	10c00017 	ldw	r3,0(r2)
  if (func == SIG_DFL)
  80c868:	18000c26 	beq	r3,zero,80c89c <raise+0x68>
  else if (func == SIG_IGN)
  80c86c:	19400060 	cmpeqi	r5,r3,1
  80c870:	2800181e 	bne	r5,zero,80c8d4 <raise+0xa0>
  else if (func == SIG_ERR)
  80c874:	197fffd8 	cmpnei	r5,r3,-1
  80c878:	28001226 	beq	r5,zero,80c8c4 <raise+0x90>
      ptr->_sig_func[sig] = SIG_DFL;
  80c87c:	10000015 	stw	zero,0(r2)
      func (sig);
  80c880:	183ee83a 	callr	r3
      return 0;
  80c884:	0005883a 	mov	r2,zero
}
  80c888:	dfc00217 	ldw	ra,8(sp)
  80c88c:	dc400117 	ldw	r17,4(sp)
  80c890:	dc000017 	ldw	r16,0(sp)
  80c894:	dec00304 	addi	sp,sp,12
  80c898:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c89c:	8809883a 	mov	r4,r17
  80c8a0:	080caf40 	call	80caf4 <_getpid_r>
  80c8a4:	800d883a 	mov	r6,r16
  80c8a8:	100b883a 	mov	r5,r2
  80c8ac:	8809883a 	mov	r4,r17
}
  80c8b0:	dfc00217 	ldw	ra,8(sp)
  80c8b4:	dc400117 	ldw	r17,4(sp)
  80c8b8:	dc000017 	ldw	r16,0(sp)
  80c8bc:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c8c0:	080ca9c1 	jmpi	80ca9c <_kill_r>
      ptr->_errno = EINVAL;
  80c8c4:	00800584 	movi	r2,22
  80c8c8:	88800015 	stw	r2,0(r17)
      return 1;
  80c8cc:	00800044 	movi	r2,1
  80c8d0:	003fed06 	br	80c888 <raise+0x54>
    return 0;
  80c8d4:	0005883a 	mov	r2,zero
  return _raise_r (_REENT, sig);
  80c8d8:	003feb06 	br	80c888 <raise+0x54>
      ptr->_errno = EINVAL;
  80c8dc:	00800584 	movi	r2,22
  80c8e0:	88800015 	stw	r2,0(r17)
      return -1;
  80c8e4:	00bfffc4 	movi	r2,-1
  80c8e8:	003fe706 	br	80c888 <raise+0x54>

0080c8ec <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
  80c8ec:	defffc04 	addi	sp,sp,-16
  80c8f0:	dc800215 	stw	r18,8(sp)
  80c8f4:	dfc00315 	stw	ra,12(sp)
  80c8f8:	dc400115 	stw	r17,4(sp)
  80c8fc:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c900:	20800830 	cmpltui	r2,r4,32
  return _signal_r (_REENT, sig, func);
  80c904:	d4a00917 	ldw	r18,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c908:	10000e26 	beq	r2,zero,80c944 <signal+0x58>
  80c90c:	2021883a 	mov	r16,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c910:	9100b717 	ldw	r4,732(r18)
  80c914:	2823883a 	mov	r17,r5
  80c918:	20000e26 	beq	r4,zero,80c954 <signal+0x68>
  old_func = ptr->_sig_func[sig];
  80c91c:	802090ba 	slli	r16,r16,2
  80c920:	2421883a 	add	r16,r4,r16
  80c924:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c928:	84400015 	stw	r17,0(r16)
}
  80c92c:	dfc00317 	ldw	ra,12(sp)
  80c930:	dc800217 	ldw	r18,8(sp)
  80c934:	dc400117 	ldw	r17,4(sp)
  80c938:	dc000017 	ldw	r16,0(sp)
  80c93c:	dec00404 	addi	sp,sp,16
  80c940:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c944:	00800584 	movi	r2,22
  80c948:	90800015 	stw	r2,0(r18)
      return SIG_ERR;
  80c94c:	00bfffc4 	movi	r2,-1
  80c950:	003ff606 	br	80c92c <signal+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c954:	9009883a 	mov	r4,r18
  80c958:	01402004 	movi	r5,128
  80c95c:	080701c0 	call	80701c <_malloc_r>
  80c960:	9080b715 	stw	r2,732(r18)
  80c964:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c968:	10000526 	beq	r2,zero,80c980 <signal+0x94>
	ptr->_sig_func[i] = SIG_DFL;
  80c96c:	01802004 	movi	r6,128
  80c970:	000b883a 	mov	r5,zero
  80c974:	0801b400 	call	801b40 <memset>
  80c978:	1009883a 	mov	r4,r2
  80c97c:	003fe706 	br	80c91c <signal+0x30>
    return SIG_ERR;
  80c980:	00bfffc4 	movi	r2,-1
  return _signal_r (_REENT, sig, func);
  80c984:	003fe906 	br	80c92c <signal+0x40>

0080c988 <_init_signal>:

int 
_init_signal (void)
{
  80c988:	defffe04 	addi	sp,sp,-8
  80c98c:	dc000015 	stw	r16,0(sp)
  return _init_signal_r (_REENT);
  80c990:	d4200917 	ldw	r16,-32732(gp)
{
  80c994:	dfc00115 	stw	ra,4(sp)
  if (ptr->_sig_func == NULL)
  80c998:	8080b717 	ldw	r2,732(r16)
  80c99c:	10000526 	beq	r2,zero,80c9b4 <_init_signal+0x2c>
  return 0;
  80c9a0:	0005883a 	mov	r2,zero
}
  80c9a4:	dfc00117 	ldw	ra,4(sp)
  80c9a8:	dc000017 	ldw	r16,0(sp)
  80c9ac:	dec00204 	addi	sp,sp,8
  80c9b0:	f800283a 	ret
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c9b4:	8009883a 	mov	r4,r16
  80c9b8:	01402004 	movi	r5,128
  80c9bc:	080701c0 	call	80701c <_malloc_r>
  80c9c0:	8080b715 	stw	r2,732(r16)
  80c9c4:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c9c8:	10000426 	beq	r2,zero,80c9dc <_init_signal+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c9cc:	01802004 	movi	r6,128
  80c9d0:	000b883a 	mov	r5,zero
  80c9d4:	0801b400 	call	801b40 <memset>
  80c9d8:	003ff106 	br	80c9a0 <_init_signal+0x18>
	return -1;
  80c9dc:	00bfffc4 	movi	r2,-1
  return _init_signal_r (_REENT);
  80c9e0:	003ff006 	br	80c9a4 <_init_signal+0x1c>

0080c9e4 <__sigtramp>:

int
__sigtramp (int sig)
{
  80c9e4:	defffd04 	addi	sp,sp,-12
  80c9e8:	dc400115 	stw	r17,4(sp)
  80c9ec:	dfc00215 	stw	ra,8(sp)
  80c9f0:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c9f4:	20800830 	cmpltui	r2,r4,32
  return __sigtramp_r (_REENT, sig);
  80c9f8:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c9fc:	10002526 	beq	r2,zero,80ca94 <__sigtramp+0xb0>
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80ca00:	88c0b717 	ldw	r3,732(r17)
  80ca04:	2021883a 	mov	r16,r4
  80ca08:	18001326 	beq	r3,zero,80ca58 <__sigtramp+0x74>
  func = ptr->_sig_func[sig];
  80ca0c:	800890ba 	slli	r4,r16,2
  80ca10:	1907883a 	add	r3,r3,r4
  80ca14:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80ca18:	10000d26 	beq	r2,zero,80ca50 <__sigtramp+0x6c>
  else if (func == SIG_ERR)
  80ca1c:	113fffe0 	cmpeqi	r4,r2,-1
  80ca20:	20001a1e 	bne	r4,zero,80ca8c <__sigtramp+0xa8>
  else if (func == SIG_IGN)
  80ca24:	11000060 	cmpeqi	r4,r2,1
  80ca28:	2000161e 	bne	r4,zero,80ca84 <__sigtramp+0xa0>
      ptr->_sig_func[sig] = SIG_DFL;
  80ca2c:	18000015 	stw	zero,0(r3)
      func (sig);
  80ca30:	8009883a 	mov	r4,r16
  80ca34:	103ee83a 	callr	r2
      return 0;
  80ca38:	0005883a 	mov	r2,zero
}
  80ca3c:	dfc00217 	ldw	ra,8(sp)
  80ca40:	dc400117 	ldw	r17,4(sp)
  80ca44:	dc000017 	ldw	r16,0(sp)
  80ca48:	dec00304 	addi	sp,sp,12
  80ca4c:	f800283a 	ret
    return 1;
  80ca50:	00800044 	movi	r2,1
  80ca54:	003ff906 	br	80ca3c <__sigtramp+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80ca58:	01402004 	movi	r5,128
  80ca5c:	8809883a 	mov	r4,r17
  80ca60:	080701c0 	call	80701c <_malloc_r>
  80ca64:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80ca68:	10000a26 	beq	r2,zero,80ca94 <__sigtramp+0xb0>
	ptr->_sig_func[i] = SIG_DFL;
  80ca6c:	01802004 	movi	r6,128
  80ca70:	000b883a 	mov	r5,zero
  80ca74:	1009883a 	mov	r4,r2
  80ca78:	0801b400 	call	801b40 <memset>
  80ca7c:	1007883a 	mov	r3,r2
  80ca80:	003fe206 	br	80ca0c <__sigtramp+0x28>
    return 3;
  80ca84:	008000c4 	movi	r2,3
  return __sigtramp_r (_REENT, sig);
  80ca88:	003fec06 	br	80ca3c <__sigtramp+0x58>
    return 2;
  80ca8c:	00800084 	movi	r2,2
  80ca90:	003fea06 	br	80ca3c <__sigtramp+0x58>
      return -1;
  80ca94:	00bfffc4 	movi	r2,-1
  80ca98:	003fe806 	br	80ca3c <__sigtramp+0x58>

0080ca9c <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
  80ca9c:	2807883a 	mov	r3,r5
  80caa0:	defffe04 	addi	sp,sp,-8
  80caa4:	dc000015 	stw	r16,0(sp)
  80caa8:	300b883a 	mov	r5,r6
  80caac:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80cab0:	1809883a 	mov	r4,r3
{
  80cab4:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80cab8:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80cabc:	081030c0 	call	81030c <kill>
  80cac0:	10ffffd8 	cmpnei	r3,r2,-1
  80cac4:	18000426 	beq	r3,zero,80cad8 <_kill_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80cac8:	dfc00117 	ldw	ra,4(sp)
  80cacc:	dc000017 	ldw	r16,0(sp)
  80cad0:	dec00204 	addi	sp,sp,8
  80cad4:	f800283a 	ret
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80cad8:	d0e75817 	ldw	r3,-25248(gp)
  80cadc:	183ffa26 	beq	r3,zero,80cac8 <_kill_r+0x2c>
    ptr->_errno = errno;
  80cae0:	80c00015 	stw	r3,0(r16)
}
  80cae4:	dfc00117 	ldw	ra,4(sp)
  80cae8:	dc000017 	ldw	r16,0(sp)
  80caec:	dec00204 	addi	sp,sp,8
  80caf0:	f800283a 	ret

0080caf4 <_getpid_r>:

int
_getpid_r (struct _reent *ptr)
{
  int ret;
  ret = _getpid ();
  80caf4:	08101c41 	jmpi	8101c4 <getpid>

0080caf8 <__udivdi3>:
  80caf8:	defff504 	addi	sp,sp,-44
  80cafc:	dd000515 	stw	r20,20(sp)
  80cb00:	dc800315 	stw	r18,12(sp)
  80cb04:	dfc00a15 	stw	ra,40(sp)
  80cb08:	df000915 	stw	fp,36(sp)
  80cb0c:	ddc00815 	stw	r23,32(sp)
  80cb10:	dd800715 	stw	r22,28(sp)
  80cb14:	dd400615 	stw	r21,24(sp)
  80cb18:	dcc00415 	stw	r19,16(sp)
  80cb1c:	dc400215 	stw	r17,8(sp)
  80cb20:	dc000115 	stw	r16,4(sp)
  80cb24:	2029883a 	mov	r20,r4
  80cb28:	2825883a 	mov	r18,r5
  80cb2c:	3800461e 	bne	r7,zero,80cc48 <__udivdi3+0x150>
  80cb30:	3823883a 	mov	r17,r7
  80cb34:	3021883a 	mov	r16,r6
  80cb38:	2027883a 	mov	r19,r4
  80cb3c:	2980622e 	bgeu	r5,r6,80ccc8 <__udivdi3+0x1d0>
  80cb40:	00bfffd4 	movui	r2,65535
  80cb44:	282b883a 	mov	r21,r5
  80cb48:	1180aa2e 	bgeu	r2,r6,80cdf4 <__udivdi3+0x2fc>
  80cb4c:	00804034 	movhi	r2,256
  80cb50:	30815a36 	bltu	r6,r2,80d0bc <__udivdi3+0x5c4>
  80cb54:	3006d63a 	srli	r3,r6,24
  80cb58:	04400604 	movi	r17,24
  80cb5c:	00802074 	movhi	r2,129
  80cb60:	1885883a 	add	r2,r3,r2
  80cb64:	108b6503 	ldbu	r2,11668(r2)
  80cb68:	00c00804 	movi	r3,32
  80cb6c:	1463883a 	add	r17,r2,r17
  80cb70:	1c45c83a 	sub	r2,r3,r17
  80cb74:	1c400526 	beq	r3,r17,80cb8c <__udivdi3+0x94>
  80cb78:	9086983a 	sll	r3,r18,r2
  80cb7c:	a462d83a 	srl	r17,r20,r17
  80cb80:	30a0983a 	sll	r16,r6,r2
  80cb84:	a0a6983a 	sll	r19,r20,r2
  80cb88:	88eab03a 	or	r21,r17,r3
  80cb8c:	802cd43a 	srli	r22,r16,16
  80cb90:	a809883a 	mov	r4,r21
  80cb94:	853fffcc 	andi	r20,r16,65535
  80cb98:	b00b883a 	mov	r5,r22
  80cb9c:	080d8340 	call	80d834 <__umodsi3>
  80cba0:	a809883a 	mov	r4,r21
  80cba4:	b00b883a 	mov	r5,r22
  80cba8:	1025883a 	mov	r18,r2
  80cbac:	080d7d00 	call	80d7d0 <__udivsi3>
  80cbb0:	a009883a 	mov	r4,r20
  80cbb4:	100b883a 	mov	r5,r2
  80cbb8:	102b883a 	mov	r21,r2
  80cbbc:	080d8900 	call	80d890 <__mulsi3>
  80cbc0:	9024943a 	slli	r18,r18,16
  80cbc4:	9808d43a 	srli	r4,r19,16
  80cbc8:	9108b03a 	or	r4,r18,r4
  80cbcc:	2080052e 	bgeu	r4,r2,80cbe4 <__udivdi3+0xec>
  80cbd0:	2409883a 	add	r4,r4,r16
  80cbd4:	a8ffffc4 	addi	r3,r21,-1
  80cbd8:	24000136 	bltu	r4,r16,80cbe0 <__udivdi3+0xe8>
  80cbdc:	20814836 	bltu	r4,r2,80d100 <__udivdi3+0x608>
  80cbe0:	182b883a 	mov	r21,r3
  80cbe4:	20a3c83a 	sub	r17,r4,r2
  80cbe8:	8809883a 	mov	r4,r17
  80cbec:	b00b883a 	mov	r5,r22
  80cbf0:	080d8340 	call	80d834 <__umodsi3>
  80cbf4:	8809883a 	mov	r4,r17
  80cbf8:	1023883a 	mov	r17,r2
  80cbfc:	b00b883a 	mov	r5,r22
  80cc00:	8822943a 	slli	r17,r17,16
  80cc04:	080d7d00 	call	80d7d0 <__udivsi3>
  80cc08:	100b883a 	mov	r5,r2
  80cc0c:	a009883a 	mov	r4,r20
  80cc10:	9cffffcc 	andi	r19,r19,65535
  80cc14:	1025883a 	mov	r18,r2
  80cc18:	8ce6b03a 	or	r19,r17,r19
  80cc1c:	080d8900 	call	80d890 <__mulsi3>
  80cc20:	9880052e 	bgeu	r19,r2,80cc38 <__udivdi3+0x140>
  80cc24:	84e7883a 	add	r19,r16,r19
  80cc28:	90ffffc4 	addi	r3,r18,-1
  80cc2c:	9c000136 	bltu	r19,r16,80cc34 <__udivdi3+0x13c>
  80cc30:	98813136 	bltu	r19,r2,80d0f8 <__udivdi3+0x600>
  80cc34:	1825883a 	mov	r18,r3
  80cc38:	a80c943a 	slli	r6,r21,16
  80cc3c:	0007883a 	mov	r3,zero
  80cc40:	3484b03a 	or	r2,r6,r18
  80cc44:	00000306 	br	80cc54 <__udivdi3+0x15c>
  80cc48:	29c00e2e 	bgeu	r5,r7,80cc84 <__udivdi3+0x18c>
  80cc4c:	0007883a 	mov	r3,zero
  80cc50:	0005883a 	mov	r2,zero
  80cc54:	dfc00a17 	ldw	ra,40(sp)
  80cc58:	df000917 	ldw	fp,36(sp)
  80cc5c:	ddc00817 	ldw	r23,32(sp)
  80cc60:	dd800717 	ldw	r22,28(sp)
  80cc64:	dd400617 	ldw	r21,24(sp)
  80cc68:	dd000517 	ldw	r20,20(sp)
  80cc6c:	dcc00417 	ldw	r19,16(sp)
  80cc70:	dc800317 	ldw	r18,12(sp)
  80cc74:	dc400217 	ldw	r17,8(sp)
  80cc78:	dc000117 	ldw	r16,4(sp)
  80cc7c:	dec00b04 	addi	sp,sp,44
  80cc80:	f800283a 	ret
  80cc84:	00bfffd4 	movui	r2,65535
  80cc88:	11c05f2e 	bgeu	r2,r7,80ce08 <__udivdi3+0x310>
  80cc8c:	00804034 	movhi	r2,256
  80cc90:	3880fc36 	bltu	r7,r2,80d084 <__udivdi3+0x58c>
  80cc94:	3804d63a 	srli	r2,r7,24
  80cc98:	01000604 	movi	r4,24
  80cc9c:	00c02074 	movhi	r3,129
  80cca0:	10c7883a 	add	r3,r2,r3
  80cca4:	188b6503 	ldbu	r2,11668(r3)
  80cca8:	00c00804 	movi	r3,32
  80ccac:	1105883a 	add	r2,r2,r4
  80ccb0:	18a3c83a 	sub	r17,r3,r2
  80ccb4:	1880901e 	bne	r3,r2,80cef8 <__udivdi3+0x400>
  80ccb8:	3c80f736 	bltu	r7,r18,80d098 <__udivdi3+0x5a0>
  80ccbc:	a185403a 	cmpgeu	r2,r20,r6
  80ccc0:	0007883a 	mov	r3,zero
  80ccc4:	003fe306 	br	80cc54 <__udivdi3+0x15c>
  80ccc8:	3000041e 	bne	r6,zero,80ccdc <__udivdi3+0x1e4>
  80cccc:	000b883a 	mov	r5,zero
  80ccd0:	01000044 	movi	r4,1
  80ccd4:	080d7d00 	call	80d7d0 <__udivsi3>
  80ccd8:	1021883a 	mov	r16,r2
  80ccdc:	00bfffd4 	movui	r2,65535
  80cce0:	14003f2e 	bgeu	r2,r16,80cde0 <__udivdi3+0x2e8>
  80cce4:	00804034 	movhi	r2,256
  80cce8:	8080f136 	bltu	r16,r2,80d0b0 <__udivdi3+0x5b8>
  80ccec:	8006d63a 	srli	r3,r16,24
  80ccf0:	04400604 	movi	r17,24
  80ccf4:	00802074 	movhi	r2,129
  80ccf8:	1885883a 	add	r2,r3,r2
  80ccfc:	108b6503 	ldbu	r2,11668(r2)
  80cd00:	00c00804 	movi	r3,32
  80cd04:	1463883a 	add	r17,r2,r17
  80cd08:	1c45c83a 	sub	r2,r3,r17
  80cd0c:	1c40431e 	bne	r3,r17,80ce1c <__udivdi3+0x324>
  80cd10:	802cd43a 	srli	r22,r16,16
  80cd14:	9423c83a 	sub	r17,r18,r16
  80cd18:	853fffcc 	andi	r20,r16,65535
  80cd1c:	00c00044 	movi	r3,1
  80cd20:	b00b883a 	mov	r5,r22
  80cd24:	8809883a 	mov	r4,r17
  80cd28:	d8c00015 	stw	r3,0(sp)
  80cd2c:	080d8340 	call	80d834 <__umodsi3>
  80cd30:	b00b883a 	mov	r5,r22
  80cd34:	8809883a 	mov	r4,r17
  80cd38:	1025883a 	mov	r18,r2
  80cd3c:	080d7d00 	call	80d7d0 <__udivsi3>
  80cd40:	1009883a 	mov	r4,r2
  80cd44:	a00b883a 	mov	r5,r20
  80cd48:	102b883a 	mov	r21,r2
  80cd4c:	080d8900 	call	80d890 <__mulsi3>
  80cd50:	9024943a 	slli	r18,r18,16
  80cd54:	9808d43a 	srli	r4,r19,16
  80cd58:	d8c00017 	ldw	r3,0(sp)
  80cd5c:	9108b03a 	or	r4,r18,r4
  80cd60:	2080052e 	bgeu	r4,r2,80cd78 <__udivdi3+0x280>
  80cd64:	2409883a 	add	r4,r4,r16
  80cd68:	a97fffc4 	addi	r5,r21,-1
  80cd6c:	24000136 	bltu	r4,r16,80cd74 <__udivdi3+0x27c>
  80cd70:	2080e636 	bltu	r4,r2,80d10c <__udivdi3+0x614>
  80cd74:	282b883a 	mov	r21,r5
  80cd78:	20a3c83a 	sub	r17,r4,r2
  80cd7c:	8809883a 	mov	r4,r17
  80cd80:	b00b883a 	mov	r5,r22
  80cd84:	d8c00015 	stw	r3,0(sp)
  80cd88:	080d8340 	call	80d834 <__umodsi3>
  80cd8c:	8809883a 	mov	r4,r17
  80cd90:	1023883a 	mov	r17,r2
  80cd94:	b00b883a 	mov	r5,r22
  80cd98:	8822943a 	slli	r17,r17,16
  80cd9c:	080d7d00 	call	80d7d0 <__udivsi3>
  80cda0:	a00b883a 	mov	r5,r20
  80cda4:	1009883a 	mov	r4,r2
  80cda8:	9cffffcc 	andi	r19,r19,65535
  80cdac:	1025883a 	mov	r18,r2
  80cdb0:	8ce6b03a 	or	r19,r17,r19
  80cdb4:	080d8900 	call	80d890 <__mulsi3>
  80cdb8:	d8c00017 	ldw	r3,0(sp)
  80cdbc:	9880052e 	bgeu	r19,r2,80cdd4 <__udivdi3+0x2dc>
  80cdc0:	84e7883a 	add	r19,r16,r19
  80cdc4:	913fffc4 	addi	r4,r18,-1
  80cdc8:	9c000136 	bltu	r19,r16,80cdd0 <__udivdi3+0x2d8>
  80cdcc:	9880c836 	bltu	r19,r2,80d0f0 <__udivdi3+0x5f8>
  80cdd0:	2025883a 	mov	r18,r4
  80cdd4:	a80c943a 	slli	r6,r21,16
  80cdd8:	3484b03a 	or	r2,r6,r18
  80cddc:	003f9d06 	br	80cc54 <__udivdi3+0x15c>
  80cde0:	80804030 	cmpltui	r2,r16,256
  80cde4:	1000b81e 	bne	r2,zero,80d0c8 <__udivdi3+0x5d0>
  80cde8:	8006d23a 	srli	r3,r16,8
  80cdec:	04400204 	movi	r17,8
  80cdf0:	003fc006 	br	80ccf4 <__udivdi3+0x1fc>
  80cdf4:	30804030 	cmpltui	r2,r6,256
  80cdf8:	1000a51e 	bne	r2,zero,80d090 <__udivdi3+0x598>
  80cdfc:	3006d23a 	srli	r3,r6,8
  80ce00:	04400204 	movi	r17,8
  80ce04:	003f5506 	br	80cb5c <__udivdi3+0x64>
  80ce08:	38804030 	cmpltui	r2,r7,256
  80ce0c:	1000a51e 	bne	r2,zero,80d0a4 <__udivdi3+0x5ac>
  80ce10:	3804d23a 	srli	r2,r7,8
  80ce14:	01000204 	movi	r4,8
  80ce18:	003fa006 	br	80cc9c <__udivdi3+0x1a4>
  80ce1c:	80a0983a 	sll	r16,r16,r2
  80ce20:	946ed83a 	srl	r23,r18,r17
  80ce24:	9086983a 	sll	r3,r18,r2
  80ce28:	802cd43a 	srli	r22,r16,16
  80ce2c:	a462d83a 	srl	r17,r20,r17
  80ce30:	b809883a 	mov	r4,r23
  80ce34:	b00b883a 	mov	r5,r22
  80ce38:	88eab03a 	or	r21,r17,r3
  80ce3c:	a0a6983a 	sll	r19,r20,r2
  80ce40:	080d8340 	call	80d834 <__umodsi3>
  80ce44:	b809883a 	mov	r4,r23
  80ce48:	b00b883a 	mov	r5,r22
  80ce4c:	1025883a 	mov	r18,r2
  80ce50:	853fffcc 	andi	r20,r16,65535
  80ce54:	080d7d00 	call	80d7d0 <__udivsi3>
  80ce58:	a009883a 	mov	r4,r20
  80ce5c:	100b883a 	mov	r5,r2
  80ce60:	102f883a 	mov	r23,r2
  80ce64:	080d8900 	call	80d890 <__mulsi3>
  80ce68:	9024943a 	slli	r18,r18,16
  80ce6c:	a808d43a 	srli	r4,r21,16
  80ce70:	9108b03a 	or	r4,r18,r4
  80ce74:	2080062e 	bgeu	r4,r2,80ce90 <__udivdi3+0x398>
  80ce78:	2409883a 	add	r4,r4,r16
  80ce7c:	b8ffffc4 	addi	r3,r23,-1
  80ce80:	24009936 	bltu	r4,r16,80d0e8 <__udivdi3+0x5f0>
  80ce84:	2080982e 	bgeu	r4,r2,80d0e8 <__udivdi3+0x5f0>
  80ce88:	bdffff84 	addi	r23,r23,-2
  80ce8c:	2409883a 	add	r4,r4,r16
  80ce90:	20a3c83a 	sub	r17,r4,r2
  80ce94:	8809883a 	mov	r4,r17
  80ce98:	b00b883a 	mov	r5,r22
  80ce9c:	080d8340 	call	80d834 <__umodsi3>
  80cea0:	1025883a 	mov	r18,r2
  80cea4:	8809883a 	mov	r4,r17
  80cea8:	b00b883a 	mov	r5,r22
  80ceac:	9024943a 	slli	r18,r18,16
  80ceb0:	080d7d00 	call	80d7d0 <__udivsi3>
  80ceb4:	100b883a 	mov	r5,r2
  80ceb8:	a009883a 	mov	r4,r20
  80cebc:	ac7fffcc 	andi	r17,r21,65535
  80cec0:	1039883a 	mov	fp,r2
  80cec4:	9462b03a 	or	r17,r18,r17
  80cec8:	080d8900 	call	80d890 <__mulsi3>
  80cecc:	8880062e 	bgeu	r17,r2,80cee8 <__udivdi3+0x3f0>
  80ced0:	8c23883a 	add	r17,r17,r16
  80ced4:	e0ffffc4 	addi	r3,fp,-1
  80ced8:	8c007f36 	bltu	r17,r16,80d0d8 <__udivdi3+0x5e0>
  80cedc:	88807e2e 	bgeu	r17,r2,80d0d8 <__udivdi3+0x5e0>
  80cee0:	e73fff84 	addi	fp,fp,-2
  80cee4:	8c23883a 	add	r17,r17,r16
  80cee8:	b806943a 	slli	r3,r23,16
  80ceec:	88a3c83a 	sub	r17,r17,r2
  80cef0:	1f06b03a 	or	r3,r3,fp
  80cef4:	003f8a06 	br	80cd20 <__udivdi3+0x228>
  80cef8:	30a6d83a 	srl	r19,r6,r2
  80cefc:	3c4e983a 	sll	r7,r7,r17
  80cf00:	90a0d83a 	srl	r16,r18,r2
  80cf04:	9446983a 	sll	r3,r18,r17
  80cf08:	99e6b03a 	or	r19,r19,r7
  80cf0c:	a084d83a 	srl	r2,r20,r2
  80cf10:	9838d43a 	srli	fp,r19,16
  80cf14:	8009883a 	mov	r4,r16
  80cf18:	10eab03a 	or	r21,r2,r3
  80cf1c:	e00b883a 	mov	r5,fp
  80cf20:	346c983a 	sll	r22,r6,r17
  80cf24:	dd400015 	stw	r21,0(sp)
  80cf28:	080d8340 	call	80d834 <__umodsi3>
  80cf2c:	8009883a 	mov	r4,r16
  80cf30:	e00b883a 	mov	r5,fp
  80cf34:	102f883a 	mov	r23,r2
  80cf38:	9cbfffcc 	andi	r18,r19,65535
  80cf3c:	080d7d00 	call	80d7d0 <__udivsi3>
  80cf40:	9009883a 	mov	r4,r18
  80cf44:	100b883a 	mov	r5,r2
  80cf48:	1021883a 	mov	r16,r2
  80cf4c:	080d8900 	call	80d890 <__mulsi3>
  80cf50:	b82e943a 	slli	r23,r23,16
  80cf54:	a808d43a 	srli	r4,r21,16
  80cf58:	b908b03a 	or	r4,r23,r4
  80cf5c:	2080062e 	bgeu	r4,r2,80cf78 <__udivdi3+0x480>
  80cf60:	24c9883a 	add	r4,r4,r19
  80cf64:	817fffc4 	addi	r5,r16,-1
  80cf68:	24c05d36 	bltu	r4,r19,80d0e0 <__udivdi3+0x5e8>
  80cf6c:	20805c2e 	bgeu	r4,r2,80d0e0 <__udivdi3+0x5e8>
  80cf70:	843fff84 	addi	r16,r16,-2
  80cf74:	24c9883a 	add	r4,r4,r19
  80cf78:	20abc83a 	sub	r21,r4,r2
  80cf7c:	a809883a 	mov	r4,r21
  80cf80:	e00b883a 	mov	r5,fp
  80cf84:	080d8340 	call	80d834 <__umodsi3>
  80cf88:	a809883a 	mov	r4,r21
  80cf8c:	e00b883a 	mov	r5,fp
  80cf90:	102b883a 	mov	r21,r2
  80cf94:	080d7d00 	call	80d7d0 <__udivsi3>
  80cf98:	9009883a 	mov	r4,r18
  80cf9c:	100b883a 	mov	r5,r2
  80cfa0:	102f883a 	mov	r23,r2
  80cfa4:	080d8900 	call	80d890 <__mulsi3>
  80cfa8:	d8c00017 	ldw	r3,0(sp)
  80cfac:	a82a943a 	slli	r21,r21,16
  80cfb0:	100d883a 	mov	r6,r2
  80cfb4:	1cbfffcc 	andi	r18,r3,65535
  80cfb8:	aca4b03a 	or	r18,r21,r18
  80cfbc:	9080062e 	bgeu	r18,r2,80cfd8 <__udivdi3+0x4e0>
  80cfc0:	94e5883a 	add	r18,r18,r19
  80cfc4:	b8bfffc4 	addi	r2,r23,-1
  80cfc8:	94c04136 	bltu	r18,r19,80d0d0 <__udivdi3+0x5d8>
  80cfcc:	9180402e 	bgeu	r18,r6,80d0d0 <__udivdi3+0x5d8>
  80cfd0:	bdffff84 	addi	r23,r23,-2
  80cfd4:	94e5883a 	add	r18,r18,r19
  80cfd8:	8004943a 	slli	r2,r16,16
  80cfdc:	bd7fffcc 	andi	r21,r23,65535
  80cfe0:	b73fffcc 	andi	fp,r22,65535
  80cfe4:	15e0b03a 	or	r16,r2,r23
  80cfe8:	8026d43a 	srli	r19,r16,16
  80cfec:	a809883a 	mov	r4,r21
  80cff0:	e00b883a 	mov	r5,fp
  80cff4:	91a5c83a 	sub	r18,r18,r6
  80cff8:	b02cd43a 	srli	r22,r22,16
  80cffc:	080d8900 	call	80d890 <__mulsi3>
  80d000:	9809883a 	mov	r4,r19
  80d004:	e00b883a 	mov	r5,fp
  80d008:	102f883a 	mov	r23,r2
  80d00c:	080d8900 	call	80d890 <__mulsi3>
  80d010:	9809883a 	mov	r4,r19
  80d014:	b00b883a 	mov	r5,r22
  80d018:	1027883a 	mov	r19,r2
  80d01c:	080d8900 	call	80d890 <__mulsi3>
  80d020:	a809883a 	mov	r4,r21
  80d024:	b00b883a 	mov	r5,r22
  80d028:	102b883a 	mov	r21,r2
  80d02c:	080d8900 	call	80d890 <__mulsi3>
  80d030:	b806d43a 	srli	r3,r23,16
  80d034:	14c5883a 	add	r2,r2,r19
  80d038:	1887883a 	add	r3,r3,r2
  80d03c:	1cc0022e 	bgeu	r3,r19,80d048 <__udivdi3+0x550>
  80d040:	00800074 	movhi	r2,1
  80d044:	a8ab883a 	add	r21,r21,r2
  80d048:	1804d43a 	srli	r2,r3,16
  80d04c:	156b883a 	add	r21,r2,r21
  80d050:	95400936 	bltu	r18,r21,80d078 <__udivdi3+0x580>
  80d054:	95400326 	beq	r18,r21,80d064 <__udivdi3+0x56c>
  80d058:	8005883a 	mov	r2,r16
  80d05c:	0007883a 	mov	r3,zero
  80d060:	003efc06 	br	80cc54 <__udivdi3+0x15c>
  80d064:	1806943a 	slli	r3,r3,16
  80d068:	a44c983a 	sll	r6,r20,r17
  80d06c:	bdffffcc 	andi	r23,r23,65535
  80d070:	1dc7883a 	add	r3,r3,r23
  80d074:	30fff82e 	bgeu	r6,r3,80d058 <__udivdi3+0x560>
  80d078:	80bfffc4 	addi	r2,r16,-1
  80d07c:	0007883a 	mov	r3,zero
  80d080:	003ef406 	br	80cc54 <__udivdi3+0x15c>
  80d084:	3804d43a 	srli	r2,r7,16
  80d088:	01000404 	movi	r4,16
  80d08c:	003f0306 	br	80cc9c <__udivdi3+0x1a4>
  80d090:	3007883a 	mov	r3,r6
  80d094:	003eb106 	br	80cb5c <__udivdi3+0x64>
  80d098:	0007883a 	mov	r3,zero
  80d09c:	00800044 	movi	r2,1
  80d0a0:	003eec06 	br	80cc54 <__udivdi3+0x15c>
  80d0a4:	3805883a 	mov	r2,r7
  80d0a8:	0009883a 	mov	r4,zero
  80d0ac:	003efb06 	br	80cc9c <__udivdi3+0x1a4>
  80d0b0:	8006d43a 	srli	r3,r16,16
  80d0b4:	04400404 	movi	r17,16
  80d0b8:	003f0e06 	br	80ccf4 <__udivdi3+0x1fc>
  80d0bc:	3006d43a 	srli	r3,r6,16
  80d0c0:	04400404 	movi	r17,16
  80d0c4:	003ea506 	br	80cb5c <__udivdi3+0x64>
  80d0c8:	8007883a 	mov	r3,r16
  80d0cc:	003f0906 	br	80ccf4 <__udivdi3+0x1fc>
  80d0d0:	102f883a 	mov	r23,r2
  80d0d4:	003fc006 	br	80cfd8 <__udivdi3+0x4e0>
  80d0d8:	1839883a 	mov	fp,r3
  80d0dc:	003f8206 	br	80cee8 <__udivdi3+0x3f0>
  80d0e0:	2821883a 	mov	r16,r5
  80d0e4:	003fa406 	br	80cf78 <__udivdi3+0x480>
  80d0e8:	182f883a 	mov	r23,r3
  80d0ec:	003f6806 	br	80ce90 <__udivdi3+0x398>
  80d0f0:	94bfff84 	addi	r18,r18,-2
  80d0f4:	003f3706 	br	80cdd4 <__udivdi3+0x2dc>
  80d0f8:	94bfff84 	addi	r18,r18,-2
  80d0fc:	003ece06 	br	80cc38 <__udivdi3+0x140>
  80d100:	ad7fff84 	addi	r21,r21,-2
  80d104:	2409883a 	add	r4,r4,r16
  80d108:	003eb606 	br	80cbe4 <__udivdi3+0xec>
  80d10c:	ad7fff84 	addi	r21,r21,-2
  80d110:	2409883a 	add	r4,r4,r16
  80d114:	003f1806 	br	80cd78 <__udivdi3+0x280>

0080d118 <__umoddi3>:
  80d118:	defff304 	addi	sp,sp,-52
  80d11c:	dc400415 	stw	r17,16(sp)
  80d120:	dc000315 	stw	r16,12(sp)
  80d124:	dfc00c15 	stw	ra,48(sp)
  80d128:	df000b15 	stw	fp,44(sp)
  80d12c:	ddc00a15 	stw	r23,40(sp)
  80d130:	dd800915 	stw	r22,36(sp)
  80d134:	dd400815 	stw	r21,32(sp)
  80d138:	dd000715 	stw	r20,28(sp)
  80d13c:	dcc00615 	stw	r19,24(sp)
  80d140:	dc800515 	stw	r18,20(sp)
  80d144:	2823883a 	mov	r17,r5
  80d148:	2021883a 	mov	r16,r4
  80d14c:	38003b1e 	bne	r7,zero,80d23c <__umoddi3+0x124>
  80d150:	3825883a 	mov	r18,r7
  80d154:	3029883a 	mov	r20,r6
  80d158:	2027883a 	mov	r19,r4
  80d15c:	29805b2e 	bgeu	r5,r6,80d2cc <__umoddi3+0x1b4>
  80d160:	00bfffd4 	movui	r2,65535
  80d164:	282d883a 	mov	r22,r5
  80d168:	11809a2e 	bgeu	r2,r6,80d3d4 <__umoddi3+0x2bc>
  80d16c:	00804034 	movhi	r2,256
  80d170:	30814436 	bltu	r6,r2,80d684 <__umoddi3+0x56c>
  80d174:	3006d63a 	srli	r3,r6,24
  80d178:	04800604 	movi	r18,24
  80d17c:	00802074 	movhi	r2,129
  80d180:	1885883a 	add	r2,r3,r2
  80d184:	108b6503 	ldbu	r2,11668(r2)
  80d188:	00c00804 	movi	r3,32
  80d18c:	1485883a 	add	r2,r2,r18
  80d190:	18a5c83a 	sub	r18,r3,r2
  80d194:	18800526 	beq	r3,r2,80d1ac <__umoddi3+0x94>
  80d198:	8ca2983a 	sll	r17,r17,r18
  80d19c:	8084d83a 	srl	r2,r16,r2
  80d1a0:	34a8983a 	sll	r20,r6,r18
  80d1a4:	84a6983a 	sll	r19,r16,r18
  80d1a8:	146cb03a 	or	r22,r2,r17
  80d1ac:	a02ed43a 	srli	r23,r20,16
  80d1b0:	b009883a 	mov	r4,r22
  80d1b4:	a57fffcc 	andi	r21,r20,65535
  80d1b8:	b80b883a 	mov	r5,r23
  80d1bc:	080d8340 	call	80d834 <__umodsi3>
  80d1c0:	b80b883a 	mov	r5,r23
  80d1c4:	b009883a 	mov	r4,r22
  80d1c8:	1023883a 	mov	r17,r2
  80d1cc:	080d7d00 	call	80d7d0 <__udivsi3>
  80d1d0:	a809883a 	mov	r4,r21
  80d1d4:	100b883a 	mov	r5,r2
  80d1d8:	080d8900 	call	80d890 <__mulsi3>
  80d1dc:	8822943a 	slli	r17,r17,16
  80d1e0:	9808d43a 	srli	r4,r19,16
  80d1e4:	8908b03a 	or	r4,r17,r4
  80d1e8:	2080042e 	bgeu	r4,r2,80d1fc <__umoddi3+0xe4>
  80d1ec:	2509883a 	add	r4,r4,r20
  80d1f0:	25000236 	bltu	r4,r20,80d1fc <__umoddi3+0xe4>
  80d1f4:	2080012e 	bgeu	r4,r2,80d1fc <__umoddi3+0xe4>
  80d1f8:	2509883a 	add	r4,r4,r20
  80d1fc:	20a1c83a 	sub	r16,r4,r2
  80d200:	b80b883a 	mov	r5,r23
  80d204:	8009883a 	mov	r4,r16
  80d208:	080d8340 	call	80d834 <__umodsi3>
  80d20c:	b80b883a 	mov	r5,r23
  80d210:	8009883a 	mov	r4,r16
  80d214:	1023883a 	mov	r17,r2
  80d218:	080d7d00 	call	80d7d0 <__udivsi3>
  80d21c:	8822943a 	slli	r17,r17,16
  80d220:	100b883a 	mov	r5,r2
  80d224:	a809883a 	mov	r4,r21
  80d228:	080d8900 	call	80d890 <__mulsi3>
  80d22c:	98ffffcc 	andi	r3,r19,65535
  80d230:	88c6b03a 	or	r3,r17,r3
  80d234:	18805e2e 	bgeu	r3,r2,80d3b0 <__umoddi3+0x298>
  80d238:	00005906 	br	80d3a0 <__umoddi3+0x288>
  80d23c:	2005883a 	mov	r2,r4
  80d240:	29c00d2e 	bgeu	r5,r7,80d278 <__umoddi3+0x160>
  80d244:	2807883a 	mov	r3,r5
  80d248:	dfc00c17 	ldw	ra,48(sp)
  80d24c:	df000b17 	ldw	fp,44(sp)
  80d250:	ddc00a17 	ldw	r23,40(sp)
  80d254:	dd800917 	ldw	r22,36(sp)
  80d258:	dd400817 	ldw	r21,32(sp)
  80d25c:	dd000717 	ldw	r20,28(sp)
  80d260:	dcc00617 	ldw	r19,24(sp)
  80d264:	dc800517 	ldw	r18,20(sp)
  80d268:	dc400417 	ldw	r17,16(sp)
  80d26c:	dc000317 	ldw	r16,12(sp)
  80d270:	dec00d04 	addi	sp,sp,52
  80d274:	f800283a 	ret
  80d278:	013fffd4 	movui	r4,65535
  80d27c:	2807883a 	mov	r3,r5
  80d280:	21c0592e 	bgeu	r4,r7,80d3e8 <__umoddi3+0x2d0>
  80d284:	01004034 	movhi	r4,256
  80d288:	39010336 	bltu	r7,r4,80d698 <__umoddi3+0x580>
  80d28c:	3808d63a 	srli	r4,r7,24
  80d290:	02000604 	movi	r8,24
  80d294:	01402074 	movhi	r5,129
  80d298:	214b883a 	add	r5,r4,r5
  80d29c:	2d0b6503 	ldbu	r20,11668(r5)
  80d2a0:	01000804 	movi	r4,32
  80d2a4:	a229883a 	add	r20,r20,r8
  80d2a8:	252bc83a 	sub	r21,r4,r20
  80d2ac:	2500531e 	bne	r4,r20,80d3fc <__umoddi3+0x2e4>
  80d2b0:	3c400136 	bltu	r7,r17,80d2b8 <__umoddi3+0x1a0>
  80d2b4:	81bfe436 	bltu	r16,r6,80d248 <__umoddi3+0x130>
  80d2b8:	8185c83a 	sub	r2,r16,r6
  80d2bc:	89cfc83a 	sub	r7,r17,r7
  80d2c0:	8087803a 	cmpltu	r3,r16,r2
  80d2c4:	38c7c83a 	sub	r3,r7,r3
  80d2c8:	003fdf06 	br	80d248 <__umoddi3+0x130>
  80d2cc:	3000041e 	bne	r6,zero,80d2e0 <__umoddi3+0x1c8>
  80d2d0:	000b883a 	mov	r5,zero
  80d2d4:	01000044 	movi	r4,1
  80d2d8:	080d7d00 	call	80d7d0 <__udivsi3>
  80d2dc:	1029883a 	mov	r20,r2
  80d2e0:	00bfffd4 	movui	r2,65535
  80d2e4:	1500362e 	bgeu	r2,r20,80d3c0 <__umoddi3+0x2a8>
  80d2e8:	00804034 	movhi	r2,256
  80d2ec:	a080ed36 	bltu	r20,r2,80d6a4 <__umoddi3+0x58c>
  80d2f0:	a006d63a 	srli	r3,r20,24
  80d2f4:	04800604 	movi	r18,24
  80d2f8:	00802074 	movhi	r2,129
  80d2fc:	1885883a 	add	r2,r3,r2
  80d300:	158b6503 	ldbu	r22,11668(r2)
  80d304:	00800804 	movi	r2,32
  80d308:	b4ad883a 	add	r22,r22,r18
  80d30c:	15a5c83a 	sub	r18,r2,r22
  80d310:	1580a51e 	bne	r2,r22,80d5a8 <__umoddi3+0x490>
  80d314:	a02ed43a 	srli	r23,r20,16
  80d318:	8d23c83a 	sub	r17,r17,r20
  80d31c:	a57fffcc 	andi	r21,r20,65535
  80d320:	8809883a 	mov	r4,r17
  80d324:	b80b883a 	mov	r5,r23
  80d328:	080d8340 	call	80d834 <__umodsi3>
  80d32c:	8809883a 	mov	r4,r17
  80d330:	b80b883a 	mov	r5,r23
  80d334:	1023883a 	mov	r17,r2
  80d338:	080d7d00 	call	80d7d0 <__udivsi3>
  80d33c:	1009883a 	mov	r4,r2
  80d340:	a80b883a 	mov	r5,r21
  80d344:	080d8900 	call	80d890 <__mulsi3>
  80d348:	8822943a 	slli	r17,r17,16
  80d34c:	9808d43a 	srli	r4,r19,16
  80d350:	8908b03a 	or	r4,r17,r4
  80d354:	2080032e 	bgeu	r4,r2,80d364 <__umoddi3+0x24c>
  80d358:	2509883a 	add	r4,r4,r20
  80d35c:	25000136 	bltu	r4,r20,80d364 <__umoddi3+0x24c>
  80d360:	2080dc36 	bltu	r4,r2,80d6d4 <__umoddi3+0x5bc>
  80d364:	20a1c83a 	sub	r16,r4,r2
  80d368:	b80b883a 	mov	r5,r23
  80d36c:	8009883a 	mov	r4,r16
  80d370:	080d8340 	call	80d834 <__umodsi3>
  80d374:	b80b883a 	mov	r5,r23
  80d378:	8009883a 	mov	r4,r16
  80d37c:	1023883a 	mov	r17,r2
  80d380:	8822943a 	slli	r17,r17,16
  80d384:	080d7d00 	call	80d7d0 <__udivsi3>
  80d388:	a80b883a 	mov	r5,r21
  80d38c:	1009883a 	mov	r4,r2
  80d390:	080d8900 	call	80d890 <__mulsi3>
  80d394:	9cffffcc 	andi	r19,r19,65535
  80d398:	8cc6b03a 	or	r3,r17,r19
  80d39c:	1880042e 	bgeu	r3,r2,80d3b0 <__umoddi3+0x298>
  80d3a0:	1d07883a 	add	r3,r3,r20
  80d3a4:	1d000236 	bltu	r3,r20,80d3b0 <__umoddi3+0x298>
  80d3a8:	1880012e 	bgeu	r3,r2,80d3b0 <__umoddi3+0x298>
  80d3ac:	1d07883a 	add	r3,r3,r20
  80d3b0:	1885c83a 	sub	r2,r3,r2
  80d3b4:	1484d83a 	srl	r2,r2,r18
  80d3b8:	0007883a 	mov	r3,zero
  80d3bc:	003fa206 	br	80d248 <__umoddi3+0x130>
  80d3c0:	a0804030 	cmpltui	r2,r20,256
  80d3c4:	1000ba1e 	bne	r2,zero,80d6b0 <__umoddi3+0x598>
  80d3c8:	a006d23a 	srli	r3,r20,8
  80d3cc:	04800204 	movi	r18,8
  80d3d0:	003fc906 	br	80d2f8 <__umoddi3+0x1e0>
  80d3d4:	30804030 	cmpltui	r2,r6,256
  80d3d8:	1000ad1e 	bne	r2,zero,80d690 <__umoddi3+0x578>
  80d3dc:	3006d23a 	srli	r3,r6,8
  80d3e0:	04800204 	movi	r18,8
  80d3e4:	003f6506 	br	80d17c <__umoddi3+0x64>
  80d3e8:	39004030 	cmpltui	r4,r7,256
  80d3ec:	2000b21e 	bne	r4,zero,80d6b8 <__umoddi3+0x5a0>
  80d3f0:	3808d23a 	srli	r4,r7,8
  80d3f4:	02000204 	movi	r8,8
  80d3f8:	003fa606 	br	80d294 <__umoddi3+0x17c>
  80d3fc:	3d4e983a 	sll	r7,r7,r21
  80d400:	3508d83a 	srl	r4,r6,r20
  80d404:	8d2cd83a 	srl	r22,r17,r20
  80d408:	8504d83a 	srl	r2,r16,r20
  80d40c:	21e4b03a 	or	r18,r4,r7
  80d410:	8d62983a 	sll	r17,r17,r21
  80d414:	9026d43a 	srli	r19,r18,16
  80d418:	354c983a 	sll	r6,r6,r21
  80d41c:	1444b03a 	or	r2,r2,r17
  80d420:	b009883a 	mov	r4,r22
  80d424:	980b883a 	mov	r5,r19
  80d428:	d9800115 	stw	r6,4(sp)
  80d42c:	d8800015 	stw	r2,0(sp)
  80d430:	080d8340 	call	80d834 <__umodsi3>
  80d434:	980b883a 	mov	r5,r19
  80d438:	b009883a 	mov	r4,r22
  80d43c:	102f883a 	mov	r23,r2
  80d440:	947fffcc 	andi	r17,r18,65535
  80d444:	080d7d00 	call	80d7d0 <__udivsi3>
  80d448:	8809883a 	mov	r4,r17
  80d44c:	100b883a 	mov	r5,r2
  80d450:	1039883a 	mov	fp,r2
  80d454:	080d8900 	call	80d890 <__mulsi3>
  80d458:	d8c00017 	ldw	r3,0(sp)
  80d45c:	b82e943a 	slli	r23,r23,16
  80d460:	8560983a 	sll	r16,r16,r21
  80d464:	1808d43a 	srli	r4,r3,16
  80d468:	b908b03a 	or	r4,r23,r4
  80d46c:	2080062e 	bgeu	r4,r2,80d488 <__umoddi3+0x370>
  80d470:	2489883a 	add	r4,r4,r18
  80d474:	e17fffc4 	addi	r5,fp,-1
  80d478:	24809436 	bltu	r4,r18,80d6cc <__umoddi3+0x5b4>
  80d47c:	2080932e 	bgeu	r4,r2,80d6cc <__umoddi3+0x5b4>
  80d480:	e73fff84 	addi	fp,fp,-2
  80d484:	2489883a 	add	r4,r4,r18
  80d488:	20adc83a 	sub	r22,r4,r2
  80d48c:	980b883a 	mov	r5,r19
  80d490:	b009883a 	mov	r4,r22
  80d494:	080d8340 	call	80d834 <__umodsi3>
  80d498:	980b883a 	mov	r5,r19
  80d49c:	b009883a 	mov	r4,r22
  80d4a0:	102f883a 	mov	r23,r2
  80d4a4:	080d7d00 	call	80d7d0 <__udivsi3>
  80d4a8:	100b883a 	mov	r5,r2
  80d4ac:	8809883a 	mov	r4,r17
  80d4b0:	d8800215 	stw	r2,8(sp)
  80d4b4:	080d8900 	call	80d890 <__mulsi3>
  80d4b8:	d8c00017 	ldw	r3,0(sp)
  80d4bc:	b82e943a 	slli	r23,r23,16
  80d4c0:	d9400217 	ldw	r5,8(sp)
  80d4c4:	1c7fffcc 	andi	r17,r3,65535
  80d4c8:	bc62b03a 	or	r17,r23,r17
  80d4cc:	8880062e 	bgeu	r17,r2,80d4e8 <__umoddi3+0x3d0>
  80d4d0:	8ca3883a 	add	r17,r17,r18
  80d4d4:	28ffffc4 	addi	r3,r5,-1
  80d4d8:	8c807a36 	bltu	r17,r18,80d6c4 <__umoddi3+0x5ac>
  80d4dc:	8880792e 	bgeu	r17,r2,80d6c4 <__umoddi3+0x5ac>
  80d4e0:	297fff84 	addi	r5,r5,-2
  80d4e4:	8ca3883a 	add	r17,r17,r18
  80d4e8:	e02c943a 	slli	r22,fp,16
  80d4ec:	d9c00117 	ldw	r7,4(sp)
  80d4f0:	29bfffcc 	andi	r6,r5,65535
  80d4f4:	b16cb03a 	or	r22,r22,r5
  80d4f8:	38ffffcc 	andi	r3,r7,65535
  80d4fc:	b02cd43a 	srli	r22,r22,16
  80d500:	180b883a 	mov	r5,r3
  80d504:	3009883a 	mov	r4,r6
  80d508:	3838d43a 	srli	fp,r7,16
  80d50c:	182f883a 	mov	r23,r3
  80d510:	d9800015 	stw	r6,0(sp)
  80d514:	88a3c83a 	sub	r17,r17,r2
  80d518:	080d8900 	call	80d890 <__mulsi3>
  80d51c:	b80b883a 	mov	r5,r23
  80d520:	b009883a 	mov	r4,r22
  80d524:	102f883a 	mov	r23,r2
  80d528:	080d8900 	call	80d890 <__mulsi3>
  80d52c:	e00b883a 	mov	r5,fp
  80d530:	b009883a 	mov	r4,r22
  80d534:	102d883a 	mov	r22,r2
  80d538:	080d8900 	call	80d890 <__mulsi3>
  80d53c:	d9800017 	ldw	r6,0(sp)
  80d540:	e00b883a 	mov	r5,fp
  80d544:	1039883a 	mov	fp,r2
  80d548:	3009883a 	mov	r4,r6
  80d54c:	080d8900 	call	80d890 <__mulsi3>
  80d550:	b808d43a 	srli	r4,r23,16
  80d554:	1585883a 	add	r2,r2,r22
  80d558:	2089883a 	add	r4,r4,r2
  80d55c:	2580022e 	bgeu	r4,r22,80d568 <__umoddi3+0x450>
  80d560:	00800074 	movhi	r2,1
  80d564:	e0b9883a 	add	fp,fp,r2
  80d568:	2006d43a 	srli	r3,r4,16
  80d56c:	2008943a 	slli	r4,r4,16
  80d570:	bdffffcc 	andi	r23,r23,65535
  80d574:	1f07883a 	add	r3,r3,fp
  80d578:	25c9883a 	add	r4,r4,r23
  80d57c:	88c03a36 	bltu	r17,r3,80d668 <__umoddi3+0x550>
  80d580:	88c03826 	beq	r17,r3,80d664 <__umoddi3+0x54c>
  80d584:	8109c83a 	sub	r4,r16,r4
  80d588:	8121803a 	cmpltu	r16,r16,r4
  80d58c:	88c7c83a 	sub	r3,r17,r3
  80d590:	1c07c83a 	sub	r3,r3,r16
  80d594:	1d04983a 	sll	r2,r3,r20
  80d598:	2548d83a 	srl	r4,r4,r21
  80d59c:	1d46d83a 	srl	r3,r3,r21
  80d5a0:	1104b03a 	or	r2,r2,r4
  80d5a4:	003f2806 	br	80d248 <__umoddi3+0x130>
  80d5a8:	a4a8983a 	sll	r20,r20,r18
  80d5ac:	8da6d83a 	srl	r19,r17,r22
  80d5b0:	8ca2983a 	sll	r17,r17,r18
  80d5b4:	a02ed43a 	srli	r23,r20,16
  80d5b8:	9809883a 	mov	r4,r19
  80d5bc:	85acd83a 	srl	r22,r16,r22
  80d5c0:	b80b883a 	mov	r5,r23
  80d5c4:	080d8340 	call	80d834 <__umodsi3>
  80d5c8:	9809883a 	mov	r4,r19
  80d5cc:	b80b883a 	mov	r5,r23
  80d5d0:	b46cb03a 	or	r22,r22,r17
  80d5d4:	a57fffcc 	andi	r21,r20,65535
  80d5d8:	1023883a 	mov	r17,r2
  80d5dc:	080d7d00 	call	80d7d0 <__udivsi3>
  80d5e0:	a809883a 	mov	r4,r21
  80d5e4:	100b883a 	mov	r5,r2
  80d5e8:	080d8900 	call	80d890 <__mulsi3>
  80d5ec:	8822943a 	slli	r17,r17,16
  80d5f0:	b008d43a 	srli	r4,r22,16
  80d5f4:	84a6983a 	sll	r19,r16,r18
  80d5f8:	8908b03a 	or	r4,r17,r4
  80d5fc:	2080042e 	bgeu	r4,r2,80d610 <__umoddi3+0x4f8>
  80d600:	2509883a 	add	r4,r4,r20
  80d604:	25000236 	bltu	r4,r20,80d610 <__umoddi3+0x4f8>
  80d608:	2080012e 	bgeu	r4,r2,80d610 <__umoddi3+0x4f8>
  80d60c:	2509883a 	add	r4,r4,r20
  80d610:	20a1c83a 	sub	r16,r4,r2
  80d614:	8009883a 	mov	r4,r16
  80d618:	b80b883a 	mov	r5,r23
  80d61c:	080d8340 	call	80d834 <__umodsi3>
  80d620:	8009883a 	mov	r4,r16
  80d624:	1021883a 	mov	r16,r2
  80d628:	b80b883a 	mov	r5,r23
  80d62c:	8020943a 	slli	r16,r16,16
  80d630:	080d7d00 	call	80d7d0 <__udivsi3>
  80d634:	100b883a 	mov	r5,r2
  80d638:	a809883a 	mov	r4,r21
  80d63c:	b47fffcc 	andi	r17,r22,65535
  80d640:	080d8900 	call	80d890 <__mulsi3>
  80d644:	8462b03a 	or	r17,r16,r17
  80d648:	8880042e 	bgeu	r17,r2,80d65c <__umoddi3+0x544>
  80d64c:	8d23883a 	add	r17,r17,r20
  80d650:	8d000236 	bltu	r17,r20,80d65c <__umoddi3+0x544>
  80d654:	8880012e 	bgeu	r17,r2,80d65c <__umoddi3+0x544>
  80d658:	8d23883a 	add	r17,r17,r20
  80d65c:	88a3c83a 	sub	r17,r17,r2
  80d660:	003f2f06 	br	80d320 <__umoddi3+0x208>
  80d664:	813fc72e 	bgeu	r16,r4,80d584 <__umoddi3+0x46c>
  80d668:	d8800117 	ldw	r2,4(sp)
  80d66c:	20a7c83a 	sub	r19,r4,r2
  80d670:	24c9803a 	cmpltu	r4,r4,r19
  80d674:	2489883a 	add	r4,r4,r18
  80d678:	1907c83a 	sub	r3,r3,r4
  80d67c:	9809883a 	mov	r4,r19
  80d680:	003fc006 	br	80d584 <__umoddi3+0x46c>
  80d684:	3006d43a 	srli	r3,r6,16
  80d688:	04800404 	movi	r18,16
  80d68c:	003ebb06 	br	80d17c <__umoddi3+0x64>
  80d690:	3007883a 	mov	r3,r6
  80d694:	003eb906 	br	80d17c <__umoddi3+0x64>
  80d698:	3808d43a 	srli	r4,r7,16
  80d69c:	02000404 	movi	r8,16
  80d6a0:	003efc06 	br	80d294 <__umoddi3+0x17c>
  80d6a4:	a006d43a 	srli	r3,r20,16
  80d6a8:	04800404 	movi	r18,16
  80d6ac:	003f1206 	br	80d2f8 <__umoddi3+0x1e0>
  80d6b0:	a007883a 	mov	r3,r20
  80d6b4:	003f1006 	br	80d2f8 <__umoddi3+0x1e0>
  80d6b8:	3809883a 	mov	r4,r7
  80d6bc:	0011883a 	mov	r8,zero
  80d6c0:	003ef406 	br	80d294 <__umoddi3+0x17c>
  80d6c4:	180b883a 	mov	r5,r3
  80d6c8:	003f8706 	br	80d4e8 <__umoddi3+0x3d0>
  80d6cc:	2839883a 	mov	fp,r5
  80d6d0:	003f6d06 	br	80d488 <__umoddi3+0x370>
  80d6d4:	2509883a 	add	r4,r4,r20
  80d6d8:	003f2206 	br	80d364 <__umoddi3+0x24c>

0080d6dc <__divsi3>:
  80d6dc:	20001a16 	blt	r4,zero,80d748 <__divsi3+0x6c>
  80d6e0:	000f883a 	mov	r7,zero
  80d6e4:	2800020e 	bge	r5,zero,80d6f0 <__divsi3+0x14>
  80d6e8:	014bc83a 	sub	r5,zero,r5
  80d6ec:	39c0005c 	xori	r7,r7,1
  80d6f0:	200d883a 	mov	r6,r4
  80d6f4:	00c00044 	movi	r3,1
  80d6f8:	2900092e 	bgeu	r5,r4,80d720 <__divsi3+0x44>
  80d6fc:	00800804 	movi	r2,32
  80d700:	00c00044 	movi	r3,1
  80d704:	00000106 	br	80d70c <__divsi3+0x30>
  80d708:	10001226 	beq	r2,zero,80d754 <__divsi3+0x78>
  80d70c:	294b883a 	add	r5,r5,r5
  80d710:	10bfffc4 	addi	r2,r2,-1
  80d714:	18c7883a 	add	r3,r3,r3
  80d718:	293ffb36 	bltu	r5,r4,80d708 <__divsi3+0x2c>
  80d71c:	18000d26 	beq	r3,zero,80d754 <__divsi3+0x78>
  80d720:	0005883a 	mov	r2,zero
  80d724:	31400236 	bltu	r6,r5,80d730 <__divsi3+0x54>
  80d728:	314dc83a 	sub	r6,r6,r5
  80d72c:	10c4b03a 	or	r2,r2,r3
  80d730:	1806d07a 	srli	r3,r3,1
  80d734:	280ad07a 	srli	r5,r5,1
  80d738:	183ffa1e 	bne	r3,zero,80d724 <__divsi3+0x48>
  80d73c:	38000126 	beq	r7,zero,80d744 <__divsi3+0x68>
  80d740:	0085c83a 	sub	r2,zero,r2
  80d744:	f800283a 	ret
  80d748:	0109c83a 	sub	r4,zero,r4
  80d74c:	01c00044 	movi	r7,1
  80d750:	003fe406 	br	80d6e4 <__divsi3+0x8>
  80d754:	0005883a 	mov	r2,zero
  80d758:	003ff806 	br	80d73c <__divsi3+0x60>

0080d75c <__modsi3>:
  80d75c:	20001916 	blt	r4,zero,80d7c4 <__modsi3+0x68>
  80d760:	000f883a 	mov	r7,zero
  80d764:	2005883a 	mov	r2,r4
  80d768:	2800010e 	bge	r5,zero,80d770 <__modsi3+0x14>
  80d76c:	014bc83a 	sub	r5,zero,r5
  80d770:	00c00044 	movi	r3,1
  80d774:	2900092e 	bgeu	r5,r4,80d79c <__modsi3+0x40>
  80d778:	01800804 	movi	r6,32
  80d77c:	00c00044 	movi	r3,1
  80d780:	00000106 	br	80d788 <__modsi3+0x2c>
  80d784:	30000d26 	beq	r6,zero,80d7bc <__modsi3+0x60>
  80d788:	294b883a 	add	r5,r5,r5
  80d78c:	31bfffc4 	addi	r6,r6,-1
  80d790:	18c7883a 	add	r3,r3,r3
  80d794:	293ffb36 	bltu	r5,r4,80d784 <__modsi3+0x28>
  80d798:	18000826 	beq	r3,zero,80d7bc <__modsi3+0x60>
  80d79c:	1806d07a 	srli	r3,r3,1
  80d7a0:	11400136 	bltu	r2,r5,80d7a8 <__modsi3+0x4c>
  80d7a4:	1145c83a 	sub	r2,r2,r5
  80d7a8:	280ad07a 	srli	r5,r5,1
  80d7ac:	183ffb1e 	bne	r3,zero,80d79c <__modsi3+0x40>
  80d7b0:	38000126 	beq	r7,zero,80d7b8 <__modsi3+0x5c>
  80d7b4:	0085c83a 	sub	r2,zero,r2
  80d7b8:	f800283a 	ret
  80d7bc:	2005883a 	mov	r2,r4
  80d7c0:	003ffb06 	br	80d7b0 <__modsi3+0x54>
  80d7c4:	0109c83a 	sub	r4,zero,r4
  80d7c8:	01c00044 	movi	r7,1
  80d7cc:	003fe506 	br	80d764 <__modsi3+0x8>

0080d7d0 <__udivsi3>:
  80d7d0:	200d883a 	mov	r6,r4
  80d7d4:	2900152e 	bgeu	r5,r4,80d82c <__udivsi3+0x5c>
  80d7d8:	28001416 	blt	r5,zero,80d82c <__udivsi3+0x5c>
  80d7dc:	00800804 	movi	r2,32
  80d7e0:	00c00044 	movi	r3,1
  80d7e4:	00000206 	br	80d7f0 <__udivsi3+0x20>
  80d7e8:	10000e26 	beq	r2,zero,80d824 <__udivsi3+0x54>
  80d7ec:	28000516 	blt	r5,zero,80d804 <__udivsi3+0x34>
  80d7f0:	294b883a 	add	r5,r5,r5
  80d7f4:	10bfffc4 	addi	r2,r2,-1
  80d7f8:	18c7883a 	add	r3,r3,r3
  80d7fc:	293ffa36 	bltu	r5,r4,80d7e8 <__udivsi3+0x18>
  80d800:	18000826 	beq	r3,zero,80d824 <__udivsi3+0x54>
  80d804:	0005883a 	mov	r2,zero
  80d808:	31400236 	bltu	r6,r5,80d814 <__udivsi3+0x44>
  80d80c:	314dc83a 	sub	r6,r6,r5
  80d810:	10c4b03a 	or	r2,r2,r3
  80d814:	1806d07a 	srli	r3,r3,1
  80d818:	280ad07a 	srli	r5,r5,1
  80d81c:	183ffa1e 	bne	r3,zero,80d808 <__udivsi3+0x38>
  80d820:	f800283a 	ret
  80d824:	0005883a 	mov	r2,zero
  80d828:	f800283a 	ret
  80d82c:	00c00044 	movi	r3,1
  80d830:	003ff406 	br	80d804 <__udivsi3+0x34>

0080d834 <__umodsi3>:
  80d834:	2005883a 	mov	r2,r4
  80d838:	2900132e 	bgeu	r5,r4,80d888 <__umodsi3+0x54>
  80d83c:	28001216 	blt	r5,zero,80d888 <__umodsi3+0x54>
  80d840:	01800804 	movi	r6,32
  80d844:	00c00044 	movi	r3,1
  80d848:	00000206 	br	80d854 <__umodsi3+0x20>
  80d84c:	30000c26 	beq	r6,zero,80d880 <__umodsi3+0x4c>
  80d850:	28000516 	blt	r5,zero,80d868 <__umodsi3+0x34>
  80d854:	294b883a 	add	r5,r5,r5
  80d858:	31bfffc4 	addi	r6,r6,-1
  80d85c:	18c7883a 	add	r3,r3,r3
  80d860:	293ffa36 	bltu	r5,r4,80d84c <__umodsi3+0x18>
  80d864:	18000626 	beq	r3,zero,80d880 <__umodsi3+0x4c>
  80d868:	1806d07a 	srli	r3,r3,1
  80d86c:	11400136 	bltu	r2,r5,80d874 <__umodsi3+0x40>
  80d870:	1145c83a 	sub	r2,r2,r5
  80d874:	280ad07a 	srli	r5,r5,1
  80d878:	183ffb1e 	bne	r3,zero,80d868 <__umodsi3+0x34>
  80d87c:	f800283a 	ret
  80d880:	2005883a 	mov	r2,r4
  80d884:	f800283a 	ret
  80d888:	00c00044 	movi	r3,1
  80d88c:	003ff606 	br	80d868 <__umodsi3+0x34>

0080d890 <__mulsi3>:
  80d890:	0005883a 	mov	r2,zero
  80d894:	20000726 	beq	r4,zero,80d8b4 <__mulsi3+0x24>
  80d898:	20c0004c 	andi	r3,r4,1
  80d89c:	2008d07a 	srli	r4,r4,1
  80d8a0:	18000126 	beq	r3,zero,80d8a8 <__mulsi3+0x18>
  80d8a4:	1145883a 	add	r2,r2,r5
  80d8a8:	294b883a 	add	r5,r5,r5
  80d8ac:	203ffa1e 	bne	r4,zero,80d898 <__mulsi3+0x8>
  80d8b0:	f800283a 	ret
  80d8b4:	f800283a 	ret

0080d8b8 <__adddf3>:
  80d8b8:	02000434 	movhi	r8,16
  80d8bc:	423fffc4 	addi	r8,r8,-1
  80d8c0:	2806d53a 	srli	r3,r5,20
  80d8c4:	3804d53a 	srli	r2,r7,20
  80d8c8:	2a14703a 	and	r10,r5,r8
  80d8cc:	3a12703a 	and	r9,r7,r8
  80d8d0:	280ad7fa 	srli	r5,r5,31
  80d8d4:	501490fa 	slli	r10,r10,3
  80d8d8:	2018d77a 	srli	r12,r4,29
  80d8dc:	481290fa 	slli	r9,r9,3
  80d8e0:	3016d77a 	srli	r11,r6,29
  80d8e4:	380ed7fa 	srli	r7,r7,31
  80d8e8:	defffb04 	addi	sp,sp,-20
  80d8ec:	dc800215 	stw	r18,8(sp)
  80d8f0:	dc000015 	stw	r16,0(sp)
  80d8f4:	1c81ffcc 	andi	r18,r3,2047
  80d8f8:	1081ffcc 	andi	r2,r2,2047
  80d8fc:	dfc00415 	stw	ra,16(sp)
  80d900:	dcc00315 	stw	r19,12(sp)
  80d904:	dc400115 	stw	r17,4(sp)
  80d908:	201c90fa 	slli	r14,r4,3
  80d90c:	301a90fa 	slli	r13,r6,3
  80d910:	2821883a 	mov	r16,r5
  80d914:	6294b03a 	or	r10,r12,r10
  80d918:	5a52b03a 	or	r9,r11,r9
  80d91c:	9087c83a 	sub	r3,r18,r2
  80d920:	29c06126 	beq	r5,r7,80daa8 <__adddf3+0x1f0>
  80d924:	00c0550e 	bge	zero,r3,80da7c <__adddf3+0x1c4>
  80d928:	10007326 	beq	r2,zero,80daf8 <__adddf3+0x240>
  80d92c:	9081ffd8 	cmpnei	r2,r18,2047
  80d930:	1000bd26 	beq	r2,zero,80dc28 <__adddf3+0x370>
  80d934:	4a402034 	orhi	r9,r9,128
  80d938:	18800e48 	cmpgei	r2,r3,57
  80d93c:	1000ef1e 	bne	r2,zero,80dcfc <__adddf3+0x444>
  80d940:	18800808 	cmpgei	r2,r3,32
  80d944:	1001321e 	bne	r2,zero,80de10 <__adddf3+0x558>
  80d948:	00800804 	movi	r2,32
  80d94c:	10c5c83a 	sub	r2,r2,r3
  80d950:	68c8d83a 	srl	r4,r13,r3
  80d954:	48a2983a 	sll	r17,r9,r2
  80d958:	689a983a 	sll	r13,r13,r2
  80d95c:	48c6d83a 	srl	r3,r9,r3
  80d960:	8922b03a 	or	r17,r17,r4
  80d964:	681ac03a 	cmpne	r13,r13,zero
  80d968:	8b62b03a 	or	r17,r17,r13
  80d96c:	50d5c83a 	sub	r10,r10,r3
  80d970:	7463c83a 	sub	r17,r14,r17
  80d974:	7451803a 	cmpltu	r8,r14,r17
  80d978:	5211c83a 	sub	r8,r10,r8
  80d97c:	4080202c 	andhi	r2,r8,128
  80d980:	10008d26 	beq	r2,zero,80dbb8 <__adddf3+0x300>
  80d984:	02402034 	movhi	r9,128
  80d988:	4a7fffc4 	addi	r9,r9,-1
  80d98c:	4266703a 	and	r19,r8,r9
  80d990:	9800b326 	beq	r19,zero,80dc60 <__adddf3+0x3a8>
  80d994:	9809883a 	mov	r4,r19
  80d998:	0801aec0 	call	801aec <__clzsi2>
  80d99c:	10fffe04 	addi	r3,r2,-8
  80d9a0:	02000804 	movi	r8,32
  80d9a4:	40d1c83a 	sub	r8,r8,r3
  80d9a8:	8a10d83a 	srl	r8,r17,r8
  80d9ac:	98d2983a 	sll	r9,r19,r3
  80d9b0:	88e2983a 	sll	r17,r17,r3
  80d9b4:	4250b03a 	or	r8,r8,r9
  80d9b8:	1c80b216 	blt	r3,r18,80dc84 <__adddf3+0x3cc>
  80d9bc:	1c87c83a 	sub	r3,r3,r18
  80d9c0:	19000044 	addi	r4,r3,1
  80d9c4:	20800808 	cmpgei	r2,r4,32
  80d9c8:	10006f1e 	bne	r2,zero,80db88 <__adddf3+0x2d0>
  80d9cc:	00800804 	movi	r2,32
  80d9d0:	1105c83a 	sub	r2,r2,r4
  80d9d4:	8906d83a 	srl	r3,r17,r4
  80d9d8:	88a2983a 	sll	r17,r17,r2
  80d9dc:	4084983a 	sll	r2,r8,r2
  80d9e0:	4110d83a 	srl	r8,r8,r4
  80d9e4:	8822c03a 	cmpne	r17,r17,zero
  80d9e8:	10c4b03a 	or	r2,r2,r3
  80d9ec:	1462b03a 	or	r17,r2,r17
  80d9f0:	0025883a 	mov	r18,zero
  80d9f4:	888001cc 	andi	r2,r17,7
  80d9f8:	10000726 	beq	r2,zero,80da18 <__adddf3+0x160>
  80d9fc:	888003cc 	andi	r2,r17,15
  80da00:	10800120 	cmpeqi	r2,r2,4
  80da04:	1000041e 	bne	r2,zero,80da18 <__adddf3+0x160>
  80da08:	88c00104 	addi	r3,r17,4
  80da0c:	1c63803a 	cmpltu	r17,r3,r17
  80da10:	4451883a 	add	r8,r8,r17
  80da14:	1823883a 	mov	r17,r3
  80da18:	4080202c 	andhi	r2,r8,128
  80da1c:	10006826 	beq	r2,zero,80dbc0 <__adddf3+0x308>
  80da20:	90c00044 	addi	r3,r18,1
  80da24:	1881ffe0 	cmpeqi	r2,r3,2047
  80da28:	18c1ffcc 	andi	r3,r3,2047
  80da2c:	10007a1e 	bne	r2,zero,80dc18 <__adddf3+0x360>
  80da30:	00bfe034 	movhi	r2,65408
  80da34:	10bfffc4 	addi	r2,r2,-1
  80da38:	4090703a 	and	r8,r8,r2
  80da3c:	4004977a 	slli	r2,r8,29
  80da40:	4010927a 	slli	r8,r8,9
  80da44:	8822d0fa 	srli	r17,r17,3
  80da48:	4010d33a 	srli	r8,r8,12
  80da4c:	1444b03a 	or	r2,r2,r17
  80da50:	1806953a 	slli	r3,r3,20
  80da54:	802097fa 	slli	r16,r16,31
  80da58:	1a06b03a 	or	r3,r3,r8
  80da5c:	1c06b03a 	or	r3,r3,r16
  80da60:	dfc00417 	ldw	ra,16(sp)
  80da64:	dcc00317 	ldw	r19,12(sp)
  80da68:	dc800217 	ldw	r18,8(sp)
  80da6c:	dc400117 	ldw	r17,4(sp)
  80da70:	dc000017 	ldw	r16,0(sp)
  80da74:	dec00504 	addi	sp,sp,20
  80da78:	f800283a 	ret
  80da7c:	18002626 	beq	r3,zero,80db18 <__adddf3+0x260>
  80da80:	1487c83a 	sub	r3,r2,r18
  80da84:	9000ba1e 	bne	r18,zero,80dd70 <__adddf3+0x4b8>
  80da88:	5388b03a 	or	r4,r10,r14
  80da8c:	20011826 	beq	r4,zero,80def0 <__adddf3+0x638>
  80da90:	193fffc4 	addi	r4,r3,-1
  80da94:	20015726 	beq	r4,zero,80dff4 <__adddf3+0x73c>
  80da98:	18c1ffd8 	cmpnei	r3,r3,2047
  80da9c:	18013026 	beq	r3,zero,80df60 <__adddf3+0x6a8>
  80daa0:	2007883a 	mov	r3,r4
  80daa4:	0000b506 	br	80dd7c <__adddf3+0x4c4>
  80daa8:	00c07b0e 	bge	zero,r3,80dc98 <__adddf3+0x3e0>
  80daac:	10002e26 	beq	r2,zero,80db68 <__adddf3+0x2b0>
  80dab0:	9081ffd8 	cmpnei	r2,r18,2047
  80dab4:	10005c26 	beq	r2,zero,80dc28 <__adddf3+0x370>
  80dab8:	4a402034 	orhi	r9,r9,128
  80dabc:	18800e48 	cmpgei	r2,r3,57
  80dac0:	10004b1e 	bne	r2,zero,80dbf0 <__adddf3+0x338>
  80dac4:	18800808 	cmpgei	r2,r3,32
  80dac8:	1000ec26 	beq	r2,zero,80de7c <__adddf3+0x5c4>
  80dacc:	1c7ff804 	addi	r17,r3,-32
  80dad0:	19000820 	cmpeqi	r4,r3,32
  80dad4:	4c44d83a 	srl	r2,r9,r17
  80dad8:	2000041e 	bne	r4,zero,80daec <__adddf3+0x234>
  80dadc:	01001004 	movi	r4,64
  80dae0:	20c7c83a 	sub	r3,r4,r3
  80dae4:	48d2983a 	sll	r9,r9,r3
  80dae8:	6a5ab03a 	or	r13,r13,r9
  80daec:	6822c03a 	cmpne	r17,r13,zero
  80daf0:	88a2b03a 	or	r17,r17,r2
  80daf4:	00004006 	br	80dbf8 <__adddf3+0x340>
  80daf8:	4b44b03a 	or	r2,r9,r13
  80dafc:	10008226 	beq	r2,zero,80dd08 <__adddf3+0x450>
  80db00:	18bfffc4 	addi	r2,r3,-1
  80db04:	10011026 	beq	r2,zero,80df48 <__adddf3+0x690>
  80db08:	18c1ffd8 	cmpnei	r3,r3,2047
  80db0c:	18004626 	beq	r3,zero,80dc28 <__adddf3+0x370>
  80db10:	1007883a 	mov	r3,r2
  80db14:	003f8806 	br	80d938 <__adddf3+0x80>
  80db18:	90800044 	addi	r2,r18,1
  80db1c:	1081ff8c 	andi	r2,r2,2046
  80db20:	1000a51e 	bne	r2,zero,80ddb8 <__adddf3+0x500>
  80db24:	538ab03a 	or	r5,r10,r14
  80db28:	4b44b03a 	or	r2,r9,r13
  80db2c:	9000f81e 	bne	r18,zero,80df10 <__adddf3+0x658>
  80db30:	28013726 	beq	r5,zero,80e010 <__adddf3+0x758>
  80db34:	10011226 	beq	r2,zero,80df80 <__adddf3+0x6c8>
  80db38:	7363c83a 	sub	r17,r14,r13
  80db3c:	7445803a 	cmpltu	r2,r14,r17
  80db40:	5251c83a 	sub	r8,r10,r9
  80db44:	4091c83a 	sub	r8,r8,r2
  80db48:	4080202c 	andhi	r2,r8,128
  80db4c:	10018f26 	beq	r2,zero,80e18c <__adddf3+0x8d4>
  80db50:	6ba3c83a 	sub	r17,r13,r14
  80db54:	4a95c83a 	sub	r10,r9,r10
  80db58:	6c51803a 	cmpltu	r8,r13,r17
  80db5c:	5211c83a 	sub	r8,r10,r8
  80db60:	3821883a 	mov	r16,r7
  80db64:	003fa306 	br	80d9f4 <__adddf3+0x13c>
  80db68:	4b44b03a 	or	r2,r9,r13
  80db6c:	10006626 	beq	r2,zero,80dd08 <__adddf3+0x450>
  80db70:	18bfffc4 	addi	r2,r3,-1
  80db74:	1000ec26 	beq	r2,zero,80df28 <__adddf3+0x670>
  80db78:	18c1ffd8 	cmpnei	r3,r3,2047
  80db7c:	18012d26 	beq	r3,zero,80e034 <__adddf3+0x77c>
  80db80:	1007883a 	mov	r3,r2
  80db84:	003fcd06 	br	80dabc <__adddf3+0x204>
  80db88:	18fff844 	addi	r3,r3,-31
  80db8c:	20800820 	cmpeqi	r2,r4,32
  80db90:	40c6d83a 	srl	r3,r8,r3
  80db94:	1000041e 	bne	r2,zero,80dba8 <__adddf3+0x2f0>
  80db98:	00801004 	movi	r2,64
  80db9c:	1109c83a 	sub	r4,r2,r4
  80dba0:	4110983a 	sll	r8,r8,r4
  80dba4:	8a22b03a 	or	r17,r17,r8
  80dba8:	8822c03a 	cmpne	r17,r17,zero
  80dbac:	88e2b03a 	or	r17,r17,r3
  80dbb0:	0011883a 	mov	r8,zero
  80dbb4:	0025883a 	mov	r18,zero
  80dbb8:	888001cc 	andi	r2,r17,7
  80dbbc:	103f8f1e 	bne	r2,zero,80d9fc <__adddf3+0x144>
  80dbc0:	8822d0fa 	srli	r17,r17,3
  80dbc4:	4004977a 	slli	r2,r8,29
  80dbc8:	4014d0fa 	srli	r10,r8,3
  80dbcc:	9007883a 	mov	r3,r18
  80dbd0:	8884b03a 	or	r2,r17,r2
  80dbd4:	1901ffe0 	cmpeqi	r4,r3,2047
  80dbd8:	2000191e 	bne	r4,zero,80dc40 <__adddf3+0x388>
  80dbdc:	02000434 	movhi	r8,16
  80dbe0:	423fffc4 	addi	r8,r8,-1
  80dbe4:	5210703a 	and	r8,r10,r8
  80dbe8:	18c1ffcc 	andi	r3,r3,2047
  80dbec:	003f9806 	br	80da50 <__adddf3+0x198>
  80dbf0:	4b62b03a 	or	r17,r9,r13
  80dbf4:	8822c03a 	cmpne	r17,r17,zero
  80dbf8:	8ba3883a 	add	r17,r17,r14
  80dbfc:	8b91803a 	cmpltu	r8,r17,r14
  80dc00:	4291883a 	add	r8,r8,r10
  80dc04:	4080202c 	andhi	r2,r8,128
  80dc08:	103feb26 	beq	r2,zero,80dbb8 <__adddf3+0x300>
  80dc0c:	94800044 	addi	r18,r18,1
  80dc10:	9081ffe0 	cmpeqi	r2,r18,2047
  80dc14:	10007426 	beq	r2,zero,80dde8 <__adddf3+0x530>
  80dc18:	00c1ffc4 	movi	r3,2047
  80dc1c:	0011883a 	mov	r8,zero
  80dc20:	0005883a 	mov	r2,zero
  80dc24:	003f8a06 	br	80da50 <__adddf3+0x198>
  80dc28:	500a977a 	slli	r5,r10,29
  80dc2c:	00c80034 	movhi	r3,8192
  80dc30:	18ffffc4 	addi	r3,r3,-1
  80dc34:	5014d0fa 	srli	r10,r10,3
  80dc38:	20c4703a 	and	r2,r4,r3
  80dc3c:	1144b03a 	or	r2,r2,r5
  80dc40:	1286b03a 	or	r3,r2,r10
  80dc44:	18015426 	beq	r3,zero,80e198 <__adddf3+0x8e0>
  80dc48:	00c00434 	movhi	r3,16
  80dc4c:	18ffffc4 	addi	r3,r3,-1
  80dc50:	52000234 	orhi	r8,r10,8
  80dc54:	40d0703a 	and	r8,r8,r3
  80dc58:	00c1ffc4 	movi	r3,2047
  80dc5c:	003f7c06 	br	80da50 <__adddf3+0x198>
  80dc60:	8809883a 	mov	r4,r17
  80dc64:	0801aec0 	call	801aec <__clzsi2>
  80dc68:	10c00604 	addi	r3,r2,24
  80dc6c:	19000808 	cmpgei	r4,r3,32
  80dc70:	203f4b26 	beq	r4,zero,80d9a0 <__adddf3+0xe8>
  80dc74:	123ffe04 	addi	r8,r2,-8
  80dc78:	8a10983a 	sll	r8,r17,r8
  80dc7c:	0023883a 	mov	r17,zero
  80dc80:	1cbf4e0e 	bge	r3,r18,80d9bc <__adddf3+0x104>
  80dc84:	00bfe034 	movhi	r2,65408
  80dc88:	10bfffc4 	addi	r2,r2,-1
  80dc8c:	90e5c83a 	sub	r18,r18,r3
  80dc90:	4090703a 	and	r8,r8,r2
  80dc94:	003f5706 	br	80d9f4 <__adddf3+0x13c>
  80dc98:	18002226 	beq	r3,zero,80dd24 <__adddf3+0x46c>
  80dc9c:	1487c83a 	sub	r3,r2,r18
  80dca0:	90006e26 	beq	r18,zero,80de5c <__adddf3+0x5a4>
  80dca4:	1101ffd8 	cmpnei	r4,r2,2047
  80dca8:	2000e926 	beq	r4,zero,80e050 <__adddf3+0x798>
  80dcac:	52802034 	orhi	r10,r10,128
  80dcb0:	19000e48 	cmpgei	r4,r3,57
  80dcb4:	2000b91e 	bne	r4,zero,80df9c <__adddf3+0x6e4>
  80dcb8:	19000808 	cmpgei	r4,r3,32
  80dcbc:	2001101e 	bne	r4,zero,80e100 <__adddf3+0x848>
  80dcc0:	01000804 	movi	r4,32
  80dcc4:	20c9c83a 	sub	r4,r4,r3
  80dcc8:	5122983a 	sll	r17,r10,r4
  80dccc:	70cad83a 	srl	r5,r14,r3
  80dcd0:	7108983a 	sll	r4,r14,r4
  80dcd4:	50d4d83a 	srl	r10,r10,r3
  80dcd8:	8962b03a 	or	r17,r17,r5
  80dcdc:	2008c03a 	cmpne	r4,r4,zero
  80dce0:	8922b03a 	or	r17,r17,r4
  80dce4:	4a93883a 	add	r9,r9,r10
  80dce8:	8b63883a 	add	r17,r17,r13
  80dcec:	8b51803a 	cmpltu	r8,r17,r13
  80dcf0:	4251883a 	add	r8,r8,r9
  80dcf4:	1025883a 	mov	r18,r2
  80dcf8:	003fc206 	br	80dc04 <__adddf3+0x34c>
  80dcfc:	4b62b03a 	or	r17,r9,r13
  80dd00:	8822c03a 	cmpne	r17,r17,zero
  80dd04:	003f1a06 	br	80d970 <__adddf3+0xb8>
  80dd08:	500c977a 	slli	r6,r10,29
  80dd0c:	01480034 	movhi	r5,8192
  80dd10:	297fffc4 	addi	r5,r5,-1
  80dd14:	2144703a 	and	r2,r4,r5
  80dd18:	5014d0fa 	srli	r10,r10,3
  80dd1c:	1184b03a 	or	r2,r2,r6
  80dd20:	003fac06 	br	80dbd4 <__adddf3+0x31c>
  80dd24:	90800044 	addi	r2,r18,1
  80dd28:	1141ff8c 	andi	r5,r2,2046
  80dd2c:	28005e1e 	bne	r5,zero,80dea8 <__adddf3+0x5f0>
  80dd30:	5384b03a 	or	r2,r10,r14
  80dd34:	9000a71e 	bne	r18,zero,80dfd4 <__adddf3+0x71c>
  80dd38:	1000e526 	beq	r2,zero,80e0d0 <__adddf3+0x818>
  80dd3c:	4b44b03a 	or	r2,r9,r13
  80dd40:	10008f26 	beq	r2,zero,80df80 <__adddf3+0x6c8>
  80dd44:	7363883a 	add	r17,r14,r13
  80dd48:	5255883a 	add	r10,r10,r9
  80dd4c:	8b91803a 	cmpltu	r8,r17,r14
  80dd50:	5211883a 	add	r8,r10,r8
  80dd54:	4080202c 	andhi	r2,r8,128
  80dd58:	103f9726 	beq	r2,zero,80dbb8 <__adddf3+0x300>
  80dd5c:	00bfe034 	movhi	r2,65408
  80dd60:	10bfffc4 	addi	r2,r2,-1
  80dd64:	4090703a 	and	r8,r8,r2
  80dd68:	04800044 	movi	r18,1
  80dd6c:	003f9206 	br	80dbb8 <__adddf3+0x300>
  80dd70:	1101ffd8 	cmpnei	r4,r2,2047
  80dd74:	20007a26 	beq	r4,zero,80df60 <__adddf3+0x6a8>
  80dd78:	52802034 	orhi	r10,r10,128
  80dd7c:	19000e48 	cmpgei	r4,r3,57
  80dd80:	20002e1e 	bne	r4,zero,80de3c <__adddf3+0x584>
  80dd84:	19000808 	cmpgei	r4,r3,32
  80dd88:	2000871e 	bne	r4,zero,80dfa8 <__adddf3+0x6f0>
  80dd8c:	01000804 	movi	r4,32
  80dd90:	20c9c83a 	sub	r4,r4,r3
  80dd94:	5122983a 	sll	r17,r10,r4
  80dd98:	70cad83a 	srl	r5,r14,r3
  80dd9c:	711c983a 	sll	r14,r14,r4
  80dda0:	50d4d83a 	srl	r10,r10,r3
  80dda4:	8962b03a 	or	r17,r17,r5
  80dda8:	701cc03a 	cmpne	r14,r14,zero
  80ddac:	8ba2b03a 	or	r17,r17,r14
  80ddb0:	4a93c83a 	sub	r9,r9,r10
  80ddb4:	00002306 	br	80de44 <__adddf3+0x58c>
  80ddb8:	7363c83a 	sub	r17,r14,r13
  80ddbc:	5267c83a 	sub	r19,r10,r9
  80ddc0:	7451803a 	cmpltu	r8,r14,r17
  80ddc4:	9a27c83a 	sub	r19,r19,r8
  80ddc8:	9880202c 	andhi	r2,r19,128
  80ddcc:	1000421e 	bne	r2,zero,80ded8 <__adddf3+0x620>
  80ddd0:	8cc4b03a 	or	r2,r17,r19
  80ddd4:	103eee1e 	bne	r2,zero,80d990 <__adddf3+0xd8>
  80ddd8:	0015883a 	mov	r10,zero
  80dddc:	0021883a 	mov	r16,zero
  80dde0:	003f7e06 	br	80dbdc <__adddf3+0x324>
  80dde4:	04800084 	movi	r18,2
  80dde8:	00bfe034 	movhi	r2,65408
  80ddec:	10bfffc4 	addi	r2,r2,-1
  80ddf0:	8806d07a 	srli	r3,r17,1
  80ddf4:	4090703a 	and	r8,r8,r2
  80ddf8:	400497fa 	slli	r2,r8,31
  80ddfc:	8c40004c 	andi	r17,r17,1
  80de00:	1c62b03a 	or	r17,r3,r17
  80de04:	4010d07a 	srli	r8,r8,1
  80de08:	1462b03a 	or	r17,r2,r17
  80de0c:	003ef906 	br	80d9f4 <__adddf3+0x13c>
  80de10:	1c7ff804 	addi	r17,r3,-32
  80de14:	19000820 	cmpeqi	r4,r3,32
  80de18:	4c44d83a 	srl	r2,r9,r17
  80de1c:	2000041e 	bne	r4,zero,80de30 <__adddf3+0x578>
  80de20:	01001004 	movi	r4,64
  80de24:	20c7c83a 	sub	r3,r4,r3
  80de28:	48d2983a 	sll	r9,r9,r3
  80de2c:	6a5ab03a 	or	r13,r13,r9
  80de30:	6822c03a 	cmpne	r17,r13,zero
  80de34:	88a2b03a 	or	r17,r17,r2
  80de38:	003ecd06 	br	80d970 <__adddf3+0xb8>
  80de3c:	5394b03a 	or	r10,r10,r14
  80de40:	5022c03a 	cmpne	r17,r10,zero
  80de44:	6c63c83a 	sub	r17,r13,r17
  80de48:	6c51803a 	cmpltu	r8,r13,r17
  80de4c:	4a11c83a 	sub	r8,r9,r8
  80de50:	3821883a 	mov	r16,r7
  80de54:	1025883a 	mov	r18,r2
  80de58:	003ec806 	br	80d97c <__adddf3+0xc4>
  80de5c:	5388b03a 	or	r4,r10,r14
  80de60:	20008226 	beq	r4,zero,80e06c <__adddf3+0x7b4>
  80de64:	193fffc4 	addi	r4,r3,-1
  80de68:	2000b026 	beq	r4,zero,80e12c <__adddf3+0x874>
  80de6c:	18c1ffd8 	cmpnei	r3,r3,2047
  80de70:	18007726 	beq	r3,zero,80e050 <__adddf3+0x798>
  80de74:	2007883a 	mov	r3,r4
  80de78:	003f8d06 	br	80dcb0 <__adddf3+0x3f8>
  80de7c:	00800804 	movi	r2,32
  80de80:	10c5c83a 	sub	r2,r2,r3
  80de84:	68c8d83a 	srl	r4,r13,r3
  80de88:	48a2983a 	sll	r17,r9,r2
  80de8c:	689a983a 	sll	r13,r13,r2
  80de90:	48c6d83a 	srl	r3,r9,r3
  80de94:	8922b03a 	or	r17,r17,r4
  80de98:	681ac03a 	cmpne	r13,r13,zero
  80de9c:	8b62b03a 	or	r17,r17,r13
  80dea0:	50d5883a 	add	r10,r10,r3
  80dea4:	003f5406 	br	80dbf8 <__adddf3+0x340>
  80dea8:	10c1ffe0 	cmpeqi	r3,r2,2047
  80deac:	183f5a1e 	bne	r3,zero,80dc18 <__adddf3+0x360>
  80deb0:	7351883a 	add	r8,r14,r13
  80deb4:	4387803a 	cmpltu	r3,r8,r14
  80deb8:	5255883a 	add	r10,r10,r9
  80debc:	50c7883a 	add	r3,r10,r3
  80dec0:	401ad07a 	srli	r13,r8,1
  80dec4:	182297fa 	slli	r17,r3,31
  80dec8:	1810d07a 	srli	r8,r3,1
  80decc:	1025883a 	mov	r18,r2
  80ded0:	8b62b03a 	or	r17,r17,r13
  80ded4:	003f3806 	br	80dbb8 <__adddf3+0x300>
  80ded8:	6ba3c83a 	sub	r17,r13,r14
  80dedc:	4a93c83a 	sub	r9,r9,r10
  80dee0:	6c51803a 	cmpltu	r8,r13,r17
  80dee4:	4a27c83a 	sub	r19,r9,r8
  80dee8:	3821883a 	mov	r16,r7
  80deec:	003ea806 	br	80d990 <__adddf3+0xd8>
  80def0:	480a977a 	slli	r5,r9,29
  80def4:	01080034 	movhi	r4,8192
  80def8:	213fffc4 	addi	r4,r4,-1
  80defc:	3104703a 	and	r2,r6,r4
  80df00:	4814d0fa 	srli	r10,r9,3
  80df04:	1144b03a 	or	r2,r2,r5
  80df08:	3821883a 	mov	r16,r7
  80df0c:	003f3106 	br	80dbd4 <__adddf3+0x31c>
  80df10:	28005d1e 	bne	r5,zero,80e088 <__adddf3+0x7d0>
  80df14:	1000121e 	bne	r2,zero,80df60 <__adddf3+0x6a8>
  80df18:	0021883a 	mov	r16,zero
  80df1c:	4015883a 	mov	r10,r8
  80df20:	00bfffc4 	movi	r2,-1
  80df24:	003f4806 	br	80dc48 <__adddf3+0x390>
  80df28:	7363883a 	add	r17,r14,r13
  80df2c:	5255883a 	add	r10,r10,r9
  80df30:	8b91803a 	cmpltu	r8,r17,r14
  80df34:	5211883a 	add	r8,r10,r8
  80df38:	4080202c 	andhi	r2,r8,128
  80df3c:	103fa91e 	bne	r2,zero,80dde4 <__adddf3+0x52c>
  80df40:	04800044 	movi	r18,1
  80df44:	003f1c06 	br	80dbb8 <__adddf3+0x300>
  80df48:	7363c83a 	sub	r17,r14,r13
  80df4c:	5255c83a 	sub	r10,r10,r9
  80df50:	7451803a 	cmpltu	r8,r14,r17
  80df54:	5211c83a 	sub	r8,r10,r8
  80df58:	04800044 	movi	r18,1
  80df5c:	003e8706 	br	80d97c <__adddf3+0xc4>
  80df60:	4806977a 	slli	r3,r9,29
  80df64:	00880034 	movhi	r2,8192
  80df68:	10bfffc4 	addi	r2,r2,-1
  80df6c:	3084703a 	and	r2,r6,r2
  80df70:	4814d0fa 	srli	r10,r9,3
  80df74:	10c4b03a 	or	r2,r2,r3
  80df78:	3821883a 	mov	r16,r7
  80df7c:	003f3006 	br	80dc40 <__adddf3+0x388>
  80df80:	500a977a 	slli	r5,r10,29
  80df84:	00880034 	movhi	r2,8192
  80df88:	10bfffc4 	addi	r2,r2,-1
  80df8c:	2084703a 	and	r2,r4,r2
  80df90:	5014d0fa 	srli	r10,r10,3
  80df94:	1144b03a 	or	r2,r2,r5
  80df98:	003f1006 	br	80dbdc <__adddf3+0x324>
  80df9c:	5394b03a 	or	r10,r10,r14
  80dfa0:	5022c03a 	cmpne	r17,r10,zero
  80dfa4:	003f5006 	br	80dce8 <__adddf3+0x430>
  80dfa8:	1c7ff804 	addi	r17,r3,-32
  80dfac:	19400820 	cmpeqi	r5,r3,32
  80dfb0:	5448d83a 	srl	r4,r10,r17
  80dfb4:	2800041e 	bne	r5,zero,80dfc8 <__adddf3+0x710>
  80dfb8:	01401004 	movi	r5,64
  80dfbc:	28c7c83a 	sub	r3,r5,r3
  80dfc0:	50d4983a 	sll	r10,r10,r3
  80dfc4:	729cb03a 	or	r14,r14,r10
  80dfc8:	7022c03a 	cmpne	r17,r14,zero
  80dfcc:	8922b03a 	or	r17,r17,r4
  80dfd0:	003f9c06 	br	80de44 <__adddf3+0x58c>
  80dfd4:	10005a1e 	bne	r2,zero,80e140 <__adddf3+0x888>
  80dfd8:	4804977a 	slli	r2,r9,29
  80dfdc:	00c80034 	movhi	r3,8192
  80dfe0:	18ffffc4 	addi	r3,r3,-1
  80dfe4:	30cc703a 	and	r6,r6,r3
  80dfe8:	4814d0fa 	srli	r10,r9,3
  80dfec:	1184b03a 	or	r2,r2,r6
  80dff0:	003f1306 	br	80dc40 <__adddf3+0x388>
  80dff4:	6ba3c83a 	sub	r17,r13,r14
  80dff8:	4a95c83a 	sub	r10,r9,r10
  80dffc:	6c51803a 	cmpltu	r8,r13,r17
  80e000:	5211c83a 	sub	r8,r10,r8
  80e004:	3821883a 	mov	r16,r7
  80e008:	04800044 	movi	r18,1
  80e00c:	003e5b06 	br	80d97c <__adddf3+0xc4>
  80e010:	103f7126 	beq	r2,zero,80ddd8 <__adddf3+0x520>
  80e014:	4808977a 	slli	r4,r9,29
  80e018:	00880034 	movhi	r2,8192
  80e01c:	10bfffc4 	addi	r2,r2,-1
  80e020:	3084703a 	and	r2,r6,r2
  80e024:	4814d0fa 	srli	r10,r9,3
  80e028:	1104b03a 	or	r2,r2,r4
  80e02c:	3821883a 	mov	r16,r7
  80e030:	003eea06 	br	80dbdc <__adddf3+0x324>
  80e034:	5006977a 	slli	r3,r10,29
  80e038:	00880034 	movhi	r2,8192
  80e03c:	10bfffc4 	addi	r2,r2,-1
  80e040:	2084703a 	and	r2,r4,r2
  80e044:	5014d0fa 	srli	r10,r10,3
  80e048:	10c4b03a 	or	r2,r2,r3
  80e04c:	003efc06 	br	80dc40 <__adddf3+0x388>
  80e050:	4806977a 	slli	r3,r9,29
  80e054:	00880034 	movhi	r2,8192
  80e058:	10bfffc4 	addi	r2,r2,-1
  80e05c:	3084703a 	and	r2,r6,r2
  80e060:	4814d0fa 	srli	r10,r9,3
  80e064:	10c4b03a 	or	r2,r2,r3
  80e068:	003ef506 	br	80dc40 <__adddf3+0x388>
  80e06c:	4808977a 	slli	r4,r9,29
  80e070:	00880034 	movhi	r2,8192
  80e074:	10bfffc4 	addi	r2,r2,-1
  80e078:	3084703a 	and	r2,r6,r2
  80e07c:	4814d0fa 	srli	r10,r9,3
  80e080:	1104b03a 	or	r2,r2,r4
  80e084:	003ed306 	br	80dbd4 <__adddf3+0x31c>
  80e088:	500a977a 	slli	r5,r10,29
  80e08c:	5014d0fa 	srli	r10,r10,3
  80e090:	10001626 	beq	r2,zero,80e0ec <__adddf3+0x834>
  80e094:	00c80034 	movhi	r3,8192
  80e098:	18ffffc4 	addi	r3,r3,-1
  80e09c:	20c4703a 	and	r2,r4,r3
  80e0a0:	5100022c 	andhi	r4,r10,8
  80e0a4:	1144b03a 	or	r2,r2,r5
  80e0a8:	203ee526 	beq	r4,zero,80dc40 <__adddf3+0x388>
  80e0ac:	4808d0fa 	srli	r4,r9,3
  80e0b0:	2140022c 	andhi	r5,r4,8
  80e0b4:	283ee21e 	bne	r5,zero,80dc40 <__adddf3+0x388>
  80e0b8:	4812977a 	slli	r9,r9,29
  80e0bc:	30c4703a 	and	r2,r6,r3
  80e0c0:	3821883a 	mov	r16,r7
  80e0c4:	1244b03a 	or	r2,r2,r9
  80e0c8:	2015883a 	mov	r10,r4
  80e0cc:	003edc06 	br	80dc40 <__adddf3+0x388>
  80e0d0:	4804977a 	slli	r2,r9,29
  80e0d4:	01080034 	movhi	r4,8192
  80e0d8:	213fffc4 	addi	r4,r4,-1
  80e0dc:	310c703a 	and	r6,r6,r4
  80e0e0:	4814d0fa 	srli	r10,r9,3
  80e0e4:	1184b03a 	or	r2,r2,r6
  80e0e8:	003ebc06 	br	80dbdc <__adddf3+0x324>
  80e0ec:	00880034 	movhi	r2,8192
  80e0f0:	10bfffc4 	addi	r2,r2,-1
  80e0f4:	2084703a 	and	r2,r4,r2
  80e0f8:	1144b03a 	or	r2,r2,r5
  80e0fc:	003ed006 	br	80dc40 <__adddf3+0x388>
  80e100:	193ff804 	addi	r4,r3,-32
  80e104:	19400820 	cmpeqi	r5,r3,32
  80e108:	5108d83a 	srl	r4,r10,r4
  80e10c:	2800041e 	bne	r5,zero,80e120 <__adddf3+0x868>
  80e110:	01401004 	movi	r5,64
  80e114:	28c7c83a 	sub	r3,r5,r3
  80e118:	50d4983a 	sll	r10,r10,r3
  80e11c:	729cb03a 	or	r14,r14,r10
  80e120:	7022c03a 	cmpne	r17,r14,zero
  80e124:	8922b03a 	or	r17,r17,r4
  80e128:	003eef06 	br	80dce8 <__adddf3+0x430>
  80e12c:	7363883a 	add	r17,r14,r13
  80e130:	5255883a 	add	r10,r10,r9
  80e134:	8b51803a 	cmpltu	r8,r17,r13
  80e138:	5211883a 	add	r8,r10,r8
  80e13c:	003f7e06 	br	80df38 <__adddf3+0x680>
  80e140:	4b50b03a 	or	r8,r9,r13
  80e144:	500a977a 	slli	r5,r10,29
  80e148:	5014d0fa 	srli	r10,r10,3
  80e14c:	403fe726 	beq	r8,zero,80e0ec <__adddf3+0x834>
  80e150:	00c80034 	movhi	r3,8192
  80e154:	18ffffc4 	addi	r3,r3,-1
  80e158:	20c4703a 	and	r2,r4,r3
  80e15c:	5100022c 	andhi	r4,r10,8
  80e160:	1144b03a 	or	r2,r2,r5
  80e164:	203eb626 	beq	r4,zero,80dc40 <__adddf3+0x388>
  80e168:	4808d0fa 	srli	r4,r9,3
  80e16c:	2140022c 	andhi	r5,r4,8
  80e170:	283eb31e 	bne	r5,zero,80dc40 <__adddf3+0x388>
  80e174:	4804977a 	slli	r2,r9,29
  80e178:	30cc703a 	and	r6,r6,r3
  80e17c:	3821883a 	mov	r16,r7
  80e180:	3084b03a 	or	r2,r6,r2
  80e184:	2015883a 	mov	r10,r4
  80e188:	003ead06 	br	80dc40 <__adddf3+0x388>
  80e18c:	8a04b03a 	or	r2,r17,r8
  80e190:	103f1126 	beq	r2,zero,80ddd8 <__adddf3+0x520>
  80e194:	003e8806 	br	80dbb8 <__adddf3+0x300>
  80e198:	0005883a 	mov	r2,zero
  80e19c:	00c1ffc4 	movi	r3,2047
  80e1a0:	0011883a 	mov	r8,zero
  80e1a4:	003e2a06 	br	80da50 <__adddf3+0x198>

0080e1a8 <__divdf3>:
  80e1a8:	2810d53a 	srli	r8,r5,20
  80e1ac:	defff004 	addi	sp,sp,-64
  80e1b0:	dc000615 	stw	r16,24(sp)
  80e1b4:	04000434 	movhi	r16,16
  80e1b8:	df000e15 	stw	fp,56(sp)
  80e1bc:	ddc00d15 	stw	r23,52(sp)
  80e1c0:	dd800c15 	stw	r22,48(sp)
  80e1c4:	dd000a15 	stw	r20,40(sp)
  80e1c8:	843fffc4 	addi	r16,r16,-1
  80e1cc:	dfc00f15 	stw	ra,60(sp)
  80e1d0:	dd400b15 	stw	r21,44(sp)
  80e1d4:	dcc00915 	stw	r19,36(sp)
  80e1d8:	dc800815 	stw	r18,32(sp)
  80e1dc:	dc400715 	stw	r17,28(sp)
  80e1e0:	4201ffcc 	andi	r8,r8,2047
  80e1e4:	282ed7fa 	srli	r23,r5,31
  80e1e8:	3039883a 	mov	fp,r6
  80e1ec:	382d883a 	mov	r22,r7
  80e1f0:	2029883a 	mov	r20,r4
  80e1f4:	2c20703a 	and	r16,r5,r16
  80e1f8:	40006826 	beq	r8,zero,80e39c <__divdf3+0x1f4>
  80e1fc:	4081ffe0 	cmpeqi	r2,r8,2047
  80e200:	1000791e 	bne	r2,zero,80e3e8 <__divdf3+0x240>
  80e204:	2026d77a 	srli	r19,r4,29
  80e208:	800a90fa 	slli	r5,r16,3
  80e20c:	202890fa 	slli	r20,r4,3
  80e210:	44bf0044 	addi	r18,r8,-1023
  80e214:	994ab03a 	or	r5,r19,r5
  80e218:	2cc02034 	orhi	r19,r5,128
  80e21c:	0021883a 	mov	r16,zero
  80e220:	0023883a 	mov	r17,zero
  80e224:	b010d53a 	srli	r8,r22,20
  80e228:	00c00434 	movhi	r3,16
  80e22c:	18ffffc4 	addi	r3,r3,-1
  80e230:	4201ffcc 	andi	r8,r8,2047
  80e234:	b02ad7fa 	srli	r21,r22,31
  80e238:	b0ec703a 	and	r22,r22,r3
  80e23c:	40004626 	beq	r8,zero,80e358 <__divdf3+0x1b0>
  80e240:	4081ffe0 	cmpeqi	r2,r8,2047
  80e244:	10006f1e 	bne	r2,zero,80e404 <__divdf3+0x25c>
  80e248:	b00690fa 	slli	r3,r22,3
  80e24c:	e004d77a 	srli	r2,fp,29
  80e250:	e01290fa 	slli	r9,fp,3
  80e254:	423f0044 	addi	r8,r8,-1023
  80e258:	10c6b03a 	or	r3,r2,r3
  80e25c:	1d802034 	orhi	r22,r3,128
  80e260:	9225c83a 	sub	r18,r18,r8
  80e264:	0007883a 	mov	r3,zero
  80e268:	80800428 	cmpgeui	r2,r16,16
  80e26c:	bd4ef03a 	xor	r7,r23,r21
  80e270:	1000a71e 	bne	r2,zero,80e510 <__divdf3+0x368>
  80e274:	800c90ba 	slli	r6,r16,2
  80e278:	00802074 	movhi	r2,129
  80e27c:	3085883a 	add	r2,r6,r2
  80e280:	10b8a217 	ldw	r2,-7544(r2)
  80e284:	1000683a 	jmp	r2
  80e288:	0080e510 	cmplti	r2,zero,916
  80e28c:	0080e334 	movhi	r2,908
  80e290:	0080e2e4 	muli	r2,zero,907
  80e294:	0080e344 	movi	r2,909
  80e298:	0080e2e4 	muli	r2,zero,907
  80e29c:	0080e4b4 	movhi	r2,914
  80e2a0:	0080e2e4 	muli	r2,zero,907
  80e2a4:	0080e344 	movi	r2,909
  80e2a8:	0080e334 	movhi	r2,908
  80e2ac:	0080e334 	movhi	r2,908
  80e2b0:	0080e4b4 	movhi	r2,914
  80e2b4:	0080e344 	movi	r2,909
  80e2b8:	0080e2c8 	cmpgei	r2,zero,907
  80e2bc:	0080e2c8 	cmpgei	r2,zero,907
  80e2c0:	0080e2c8 	cmpgei	r2,zero,907
  80e2c4:	0080e4cc 	andi	r2,zero,915
  80e2c8:	b80f883a 	mov	r7,r23
  80e2cc:	888000a0 	cmpeqi	r2,r17,2
  80e2d0:	1000181e 	bne	r2,zero,80e334 <__divdf3+0x18c>
  80e2d4:	888000e0 	cmpeqi	r2,r17,3
  80e2d8:	1001f61e 	bne	r2,zero,80eab4 <__divdf3+0x90c>
  80e2dc:	88800060 	cmpeqi	r2,r17,1
  80e2e0:	10006126 	beq	r2,zero,80e468 <__divdf3+0x2c0>
  80e2e4:	0007883a 	mov	r3,zero
  80e2e8:	000b883a 	mov	r5,zero
  80e2ec:	0029883a 	mov	r20,zero
  80e2f0:	1806953a 	slli	r3,r3,20
  80e2f4:	380e97fa 	slli	r7,r7,31
  80e2f8:	a005883a 	mov	r2,r20
  80e2fc:	1946b03a 	or	r3,r3,r5
  80e300:	19c6b03a 	or	r3,r3,r7
  80e304:	dfc00f17 	ldw	ra,60(sp)
  80e308:	df000e17 	ldw	fp,56(sp)
  80e30c:	ddc00d17 	ldw	r23,52(sp)
  80e310:	dd800c17 	ldw	r22,48(sp)
  80e314:	dd400b17 	ldw	r21,44(sp)
  80e318:	dd000a17 	ldw	r20,40(sp)
  80e31c:	dcc00917 	ldw	r19,36(sp)
  80e320:	dc800817 	ldw	r18,32(sp)
  80e324:	dc400717 	ldw	r17,28(sp)
  80e328:	dc000617 	ldw	r16,24(sp)
  80e32c:	dec01004 	addi	sp,sp,64
  80e330:	f800283a 	ret
  80e334:	00c1ffc4 	movi	r3,2047
  80e338:	000b883a 	mov	r5,zero
  80e33c:	0029883a 	mov	r20,zero
  80e340:	003feb06 	br	80e2f0 <__divdf3+0x148>
  80e344:	a80f883a 	mov	r7,r21
  80e348:	b027883a 	mov	r19,r22
  80e34c:	4829883a 	mov	r20,r9
  80e350:	1823883a 	mov	r17,r3
  80e354:	003fdd06 	br	80e2cc <__divdf3+0x124>
  80e358:	b712b03a 	or	r9,r22,fp
  80e35c:	48003e26 	beq	r9,zero,80e458 <__divdf3+0x2b0>
  80e360:	b0017726 	beq	r22,zero,80e940 <__divdf3+0x798>
  80e364:	b009883a 	mov	r4,r22
  80e368:	0801aec0 	call	801aec <__clzsi2>
  80e36c:	117ffd44 	addi	r5,r2,-11
  80e370:	01000744 	movi	r4,29
  80e374:	127ffe04 	addi	r9,r2,-8
  80e378:	2149c83a 	sub	r4,r4,r5
  80e37c:	b246983a 	sll	r3,r22,r9
  80e380:	e108d83a 	srl	r4,fp,r4
  80e384:	e252983a 	sll	r9,fp,r9
  80e388:	20ecb03a 	or	r22,r4,r3
  80e38c:	1491883a 	add	r8,r2,r18
  80e390:	4480fcc4 	addi	r18,r8,1011
  80e394:	0007883a 	mov	r3,zero
  80e398:	003fb306 	br	80e268 <__divdf3+0xc0>
  80e39c:	8126b03a 	or	r19,r16,r4
  80e3a0:	2023883a 	mov	r17,r4
  80e3a4:	98002726 	beq	r19,zero,80e444 <__divdf3+0x29c>
  80e3a8:	80017026 	beq	r16,zero,80e96c <__divdf3+0x7c4>
  80e3ac:	8009883a 	mov	r4,r16
  80e3b0:	0801aec0 	call	801aec <__clzsi2>
  80e3b4:	113ffd44 	addi	r4,r2,-11
  80e3b8:	00c00744 	movi	r3,29
  80e3bc:	14fffe04 	addi	r19,r2,-8
  80e3c0:	1907c83a 	sub	r3,r3,r4
  80e3c4:	84ca983a 	sll	r5,r16,r19
  80e3c8:	88c6d83a 	srl	r3,r17,r3
  80e3cc:	8ce8983a 	sll	r20,r17,r19
  80e3d0:	1966b03a 	or	r19,r3,r5
  80e3d4:	023f0344 	movi	r8,-1011
  80e3d8:	40a5c83a 	sub	r18,r8,r2
  80e3dc:	0021883a 	mov	r16,zero
  80e3e0:	0023883a 	mov	r17,zero
  80e3e4:	003f8f06 	br	80e224 <__divdf3+0x7c>
  80e3e8:	8126b03a 	or	r19,r16,r4
  80e3ec:	9800101e 	bne	r19,zero,80e430 <__divdf3+0x288>
  80e3f0:	0029883a 	mov	r20,zero
  80e3f4:	04000204 	movi	r16,8
  80e3f8:	0481ffc4 	movi	r18,2047
  80e3fc:	04400084 	movi	r17,2
  80e400:	003f8806 	br	80e224 <__divdf3+0x7c>
  80e404:	b712b03a 	or	r9,r22,fp
  80e408:	94be0044 	addi	r18,r18,-2047
  80e40c:	4800041e 	bne	r9,zero,80e420 <__divdf3+0x278>
  80e410:	84000094 	ori	r16,r16,2
  80e414:	002d883a 	mov	r22,zero
  80e418:	00c00084 	movi	r3,2
  80e41c:	003f9206 	br	80e268 <__divdf3+0xc0>
  80e420:	840000d4 	ori	r16,r16,3
  80e424:	e013883a 	mov	r9,fp
  80e428:	00c000c4 	movi	r3,3
  80e42c:	003f8e06 	br	80e268 <__divdf3+0xc0>
  80e430:	8027883a 	mov	r19,r16
  80e434:	0481ffc4 	movi	r18,2047
  80e438:	04000304 	movi	r16,12
  80e43c:	044000c4 	movi	r17,3
  80e440:	003f7806 	br	80e224 <__divdf3+0x7c>
  80e444:	0029883a 	mov	r20,zero
  80e448:	04000104 	movi	r16,4
  80e44c:	0025883a 	mov	r18,zero
  80e450:	04400044 	movi	r17,1
  80e454:	003f7306 	br	80e224 <__divdf3+0x7c>
  80e458:	84000054 	ori	r16,r16,1
  80e45c:	002d883a 	mov	r22,zero
  80e460:	00c00044 	movi	r3,1
  80e464:	003f8006 	br	80e268 <__divdf3+0xc0>
  80e468:	9440ffc4 	addi	r17,r18,1023
  80e46c:	0441050e 	bge	zero,r17,80e884 <__divdf3+0x6dc>
  80e470:	a08001cc 	andi	r2,r20,7
  80e474:	10016c1e 	bne	r2,zero,80ea28 <__divdf3+0x880>
  80e478:	a008d0fa 	srli	r4,r20,3
  80e47c:	9880402c 	andhi	r2,r19,256
  80e480:	10000426 	beq	r2,zero,80e494 <__divdf3+0x2ec>
  80e484:	00bfc034 	movhi	r2,65280
  80e488:	10bfffc4 	addi	r2,r2,-1
  80e48c:	98a6703a 	and	r19,r19,r2
  80e490:	94410004 	addi	r17,r18,1024
  80e494:	8881ffc8 	cmpgei	r2,r17,2047
  80e498:	103fa61e 	bne	r2,zero,80e334 <__divdf3+0x18c>
  80e49c:	9828977a 	slli	r20,r19,29
  80e4a0:	980a927a 	slli	r5,r19,9
  80e4a4:	88c1ffcc 	andi	r3,r17,2047
  80e4a8:	a128b03a 	or	r20,r20,r4
  80e4ac:	280ad33a 	srli	r5,r5,12
  80e4b0:	003f8f06 	br	80e2f0 <__divdf3+0x148>
  80e4b4:	01400434 	movhi	r5,16
  80e4b8:	000f883a 	mov	r7,zero
  80e4bc:	297fffc4 	addi	r5,r5,-1
  80e4c0:	053fffc4 	movi	r20,-1
  80e4c4:	00c1ffc4 	movi	r3,2047
  80e4c8:	003f8906 	br	80e2f0 <__divdf3+0x148>
  80e4cc:	9880022c 	andhi	r2,r19,8
  80e4d0:	10000926 	beq	r2,zero,80e4f8 <__divdf3+0x350>
  80e4d4:	b080022c 	andhi	r2,r22,8
  80e4d8:	1000071e 	bne	r2,zero,80e4f8 <__divdf3+0x350>
  80e4dc:	00800434 	movhi	r2,16
  80e4e0:	b1400234 	orhi	r5,r22,8
  80e4e4:	10bfffc4 	addi	r2,r2,-1
  80e4e8:	288a703a 	and	r5,r5,r2
  80e4ec:	a80f883a 	mov	r7,r21
  80e4f0:	4829883a 	mov	r20,r9
  80e4f4:	003ff306 	br	80e4c4 <__divdf3+0x31c>
  80e4f8:	00800434 	movhi	r2,16
  80e4fc:	99400234 	orhi	r5,r19,8
  80e500:	10bfffc4 	addi	r2,r2,-1
  80e504:	288a703a 	and	r5,r5,r2
  80e508:	b80f883a 	mov	r7,r23
  80e50c:	003fed06 	br	80e4c4 <__divdf3+0x31c>
  80e510:	b4c10536 	bltu	r22,r19,80e928 <__divdf3+0x780>
  80e514:	b4c10326 	beq	r22,r19,80e924 <__divdf3+0x77c>
  80e518:	94bfffc4 	addi	r18,r18,-1
  80e51c:	a039883a 	mov	fp,r20
  80e520:	9821883a 	mov	r16,r19
  80e524:	0023883a 	mov	r17,zero
  80e528:	b006923a 	slli	r3,r22,8
  80e52c:	482cd63a 	srli	r22,r9,24
  80e530:	8009883a 	mov	r4,r16
  80e534:	182ed43a 	srli	r23,r3,16
  80e538:	b0ecb03a 	or	r22,r22,r3
  80e53c:	d9c00015 	stw	r7,0(sp)
  80e540:	b80b883a 	mov	r5,r23
  80e544:	482a923a 	slli	r21,r9,8
  80e548:	b53fffcc 	andi	r20,r22,65535
  80e54c:	080d7d00 	call	80d7d0 <__udivsi3>
  80e550:	100b883a 	mov	r5,r2
  80e554:	a009883a 	mov	r4,r20
  80e558:	1027883a 	mov	r19,r2
  80e55c:	080d8900 	call	80d890 <__mulsi3>
  80e560:	8009883a 	mov	r4,r16
  80e564:	b80b883a 	mov	r5,r23
  80e568:	1021883a 	mov	r16,r2
  80e56c:	080d8340 	call	80d834 <__umodsi3>
  80e570:	1004943a 	slli	r2,r2,16
  80e574:	e008d43a 	srli	r4,fp,16
  80e578:	d9c00017 	ldw	r7,0(sp)
  80e57c:	2088b03a 	or	r4,r4,r2
  80e580:	2400042e 	bgeu	r4,r16,80e594 <__divdf3+0x3ec>
  80e584:	2589883a 	add	r4,r4,r22
  80e588:	98bfffc4 	addi	r2,r19,-1
  80e58c:	2581082e 	bgeu	r4,r22,80e9b0 <__divdf3+0x808>
  80e590:	1027883a 	mov	r19,r2
  80e594:	2421c83a 	sub	r16,r4,r16
  80e598:	b80b883a 	mov	r5,r23
  80e59c:	8009883a 	mov	r4,r16
  80e5a0:	d9c00215 	stw	r7,8(sp)
  80e5a4:	080d7d00 	call	80d7d0 <__udivsi3>
  80e5a8:	100b883a 	mov	r5,r2
  80e5ac:	a009883a 	mov	r4,r20
  80e5b0:	d8800115 	stw	r2,4(sp)
  80e5b4:	080d8900 	call	80d890 <__mulsi3>
  80e5b8:	b80b883a 	mov	r5,r23
  80e5bc:	8009883a 	mov	r4,r16
  80e5c0:	d8800015 	stw	r2,0(sp)
  80e5c4:	080d8340 	call	80d834 <__umodsi3>
  80e5c8:	100c943a 	slli	r6,r2,16
  80e5cc:	d8c00017 	ldw	r3,0(sp)
  80e5d0:	e73fffcc 	andi	fp,fp,65535
  80e5d4:	e18cb03a 	or	r6,fp,r6
  80e5d8:	da000117 	ldw	r8,4(sp)
  80e5dc:	d9c00217 	ldw	r7,8(sp)
  80e5e0:	30c0042e 	bgeu	r6,r3,80e5f4 <__divdf3+0x44c>
  80e5e4:	358d883a 	add	r6,r6,r22
  80e5e8:	40bfffc4 	addi	r2,r8,-1
  80e5ec:	3580ec2e 	bgeu	r6,r22,80e9a0 <__divdf3+0x7f8>
  80e5f0:	1011883a 	mov	r8,r2
  80e5f4:	9826943a 	slli	r19,r19,16
  80e5f8:	af3fffcc 	andi	fp,r21,65535
  80e5fc:	30c7c83a 	sub	r3,r6,r3
  80e600:	9a26b03a 	or	r19,r19,r8
  80e604:	9810d43a 	srli	r8,r19,16
  80e608:	9abfffcc 	andi	r10,r19,65535
  80e60c:	5009883a 	mov	r4,r10
  80e610:	e00b883a 	mov	r5,fp
  80e614:	d9c00515 	stw	r7,20(sp)
  80e618:	d8c00315 	stw	r3,12(sp)
  80e61c:	da800415 	stw	r10,16(sp)
  80e620:	da000015 	stw	r8,0(sp)
  80e624:	080d8900 	call	80d890 <__mulsi3>
  80e628:	da000017 	ldw	r8,0(sp)
  80e62c:	e00b883a 	mov	r5,fp
  80e630:	d8800215 	stw	r2,8(sp)
  80e634:	4009883a 	mov	r4,r8
  80e638:	080d8900 	call	80d890 <__mulsi3>
  80e63c:	da000017 	ldw	r8,0(sp)
  80e640:	a820d43a 	srli	r16,r21,16
  80e644:	d8800115 	stw	r2,4(sp)
  80e648:	4009883a 	mov	r4,r8
  80e64c:	800b883a 	mov	r5,r16
  80e650:	080d8900 	call	80d890 <__mulsi3>
  80e654:	da800417 	ldw	r10,16(sp)
  80e658:	8009883a 	mov	r4,r16
  80e65c:	d8800015 	stw	r2,0(sp)
  80e660:	500b883a 	mov	r5,r10
  80e664:	080d8900 	call	80d890 <__mulsi3>
  80e668:	d9800217 	ldw	r6,8(sp)
  80e66c:	da000117 	ldw	r8,4(sp)
  80e670:	da400017 	ldw	r9,0(sp)
  80e674:	3008d43a 	srli	r4,r6,16
  80e678:	1205883a 	add	r2,r2,r8
  80e67c:	d8c00317 	ldw	r3,12(sp)
  80e680:	2089883a 	add	r4,r4,r2
  80e684:	d9c00517 	ldw	r7,20(sp)
  80e688:	2200022e 	bgeu	r4,r8,80e694 <__divdf3+0x4ec>
  80e68c:	00800074 	movhi	r2,1
  80e690:	4893883a 	add	r9,r9,r2
  80e694:	200ad43a 	srli	r5,r4,16
  80e698:	2008943a 	slli	r4,r4,16
  80e69c:	31bfffcc 	andi	r6,r6,65535
  80e6a0:	2a4b883a 	add	r5,r5,r9
  80e6a4:	218d883a 	add	r6,r4,r6
  80e6a8:	19409436 	bltu	r3,r5,80e8fc <__divdf3+0x754>
  80e6ac:	19409226 	beq	r3,r5,80e8f8 <__divdf3+0x750>
  80e6b0:	898dc83a 	sub	r6,r17,r6
  80e6b4:	89a3803a 	cmpltu	r17,r17,r6
  80e6b8:	1947c83a 	sub	r3,r3,r5
  80e6bc:	1c47c83a 	sub	r3,r3,r17
  80e6c0:	9440ffc4 	addi	r17,r18,1023
  80e6c4:	b0c0d326 	beq	r22,r3,80ea14 <__divdf3+0x86c>
  80e6c8:	1809883a 	mov	r4,r3
  80e6cc:	b80b883a 	mov	r5,r23
  80e6d0:	d9800315 	stw	r6,12(sp)
  80e6d4:	d9c00215 	stw	r7,8(sp)
  80e6d8:	d8c00015 	stw	r3,0(sp)
  80e6dc:	080d7d00 	call	80d7d0 <__udivsi3>
  80e6e0:	100b883a 	mov	r5,r2
  80e6e4:	a009883a 	mov	r4,r20
  80e6e8:	d8800115 	stw	r2,4(sp)
  80e6ec:	080d8900 	call	80d890 <__mulsi3>
  80e6f0:	d8c00017 	ldw	r3,0(sp)
  80e6f4:	b80b883a 	mov	r5,r23
  80e6f8:	d8800015 	stw	r2,0(sp)
  80e6fc:	1809883a 	mov	r4,r3
  80e700:	080d8340 	call	80d834 <__umodsi3>
  80e704:	d9800317 	ldw	r6,12(sp)
  80e708:	1006943a 	slli	r3,r2,16
  80e70c:	da400017 	ldw	r9,0(sp)
  80e710:	3008d43a 	srli	r4,r6,16
  80e714:	da000117 	ldw	r8,4(sp)
  80e718:	d9c00217 	ldw	r7,8(sp)
  80e71c:	20c6b03a 	or	r3,r4,r3
  80e720:	1a40062e 	bgeu	r3,r9,80e73c <__divdf3+0x594>
  80e724:	1d87883a 	add	r3,r3,r22
  80e728:	40bfffc4 	addi	r2,r8,-1
  80e72c:	1d80c836 	bltu	r3,r22,80ea50 <__divdf3+0x8a8>
  80e730:	1a40c72e 	bgeu	r3,r9,80ea50 <__divdf3+0x8a8>
  80e734:	423fff84 	addi	r8,r8,-2
  80e738:	1d87883a 	add	r3,r3,r22
  80e73c:	1a47c83a 	sub	r3,r3,r9
  80e740:	1809883a 	mov	r4,r3
  80e744:	b80b883a 	mov	r5,r23
  80e748:	d9800415 	stw	r6,16(sp)
  80e74c:	d9c00315 	stw	r7,12(sp)
  80e750:	da000215 	stw	r8,8(sp)
  80e754:	d8c00115 	stw	r3,4(sp)
  80e758:	080d7d00 	call	80d7d0 <__udivsi3>
  80e75c:	100b883a 	mov	r5,r2
  80e760:	a009883a 	mov	r4,r20
  80e764:	d8800015 	stw	r2,0(sp)
  80e768:	080d8900 	call	80d890 <__mulsi3>
  80e76c:	d8c00117 	ldw	r3,4(sp)
  80e770:	b80b883a 	mov	r5,r23
  80e774:	102f883a 	mov	r23,r2
  80e778:	1809883a 	mov	r4,r3
  80e77c:	080d8340 	call	80d834 <__umodsi3>
  80e780:	d9800417 	ldw	r6,16(sp)
  80e784:	1004943a 	slli	r2,r2,16
  80e788:	da400017 	ldw	r9,0(sp)
  80e78c:	31bfffcc 	andi	r6,r6,65535
  80e790:	308cb03a 	or	r6,r6,r2
  80e794:	da000217 	ldw	r8,8(sp)
  80e798:	d9c00317 	ldw	r7,12(sp)
  80e79c:	35c0062e 	bgeu	r6,r23,80e7b8 <__divdf3+0x610>
  80e7a0:	358d883a 	add	r6,r6,r22
  80e7a4:	48bfffc4 	addi	r2,r9,-1
  80e7a8:	3580a736 	bltu	r6,r22,80ea48 <__divdf3+0x8a0>
  80e7ac:	35c0a62e 	bgeu	r6,r23,80ea48 <__divdf3+0x8a0>
  80e7b0:	4a7fff84 	addi	r9,r9,-2
  80e7b4:	358d883a 	add	r6,r6,r22
  80e7b8:	4028943a 	slli	r20,r8,16
  80e7bc:	35d5c83a 	sub	r10,r6,r23
  80e7c0:	e009883a 	mov	r4,fp
  80e7c4:	a268b03a 	or	r20,r20,r9
  80e7c8:	a23fffcc 	andi	r8,r20,65535
  80e7cc:	a02ed43a 	srli	r23,r20,16
  80e7d0:	400b883a 	mov	r5,r8
  80e7d4:	d9c00315 	stw	r7,12(sp)
  80e7d8:	da800215 	stw	r10,8(sp)
  80e7dc:	da000115 	stw	r8,4(sp)
  80e7e0:	080d8900 	call	80d890 <__mulsi3>
  80e7e4:	e00b883a 	mov	r5,fp
  80e7e8:	b809883a 	mov	r4,r23
  80e7ec:	1039883a 	mov	fp,r2
  80e7f0:	080d8900 	call	80d890 <__mulsi3>
  80e7f4:	8009883a 	mov	r4,r16
  80e7f8:	b80b883a 	mov	r5,r23
  80e7fc:	d8800015 	stw	r2,0(sp)
  80e800:	080d8900 	call	80d890 <__mulsi3>
  80e804:	da000117 	ldw	r8,4(sp)
  80e808:	8009883a 	mov	r4,r16
  80e80c:	1021883a 	mov	r16,r2
  80e810:	400b883a 	mov	r5,r8
  80e814:	080d8900 	call	80d890 <__mulsi3>
  80e818:	d9800017 	ldw	r6,0(sp)
  80e81c:	e006d43a 	srli	r3,fp,16
  80e820:	da800217 	ldw	r10,8(sp)
  80e824:	1185883a 	add	r2,r2,r6
  80e828:	1887883a 	add	r3,r3,r2
  80e82c:	d9c00317 	ldw	r7,12(sp)
  80e830:	1980022e 	bgeu	r3,r6,80e83c <__divdf3+0x694>
  80e834:	00800074 	movhi	r2,1
  80e838:	80a1883a 	add	r16,r16,r2
  80e83c:	1808d43a 	srli	r4,r3,16
  80e840:	1806943a 	slli	r3,r3,16
  80e844:	e73fffcc 	andi	fp,fp,65535
  80e848:	2409883a 	add	r4,r4,r16
  80e84c:	1f07883a 	add	r3,r3,fp
  80e850:	51000436 	bltu	r10,r4,80e864 <__divdf3+0x6bc>
  80e854:	51000226 	beq	r10,r4,80e860 <__divdf3+0x6b8>
  80e858:	a5000054 	ori	r20,r20,1
  80e85c:	003f0306 	br	80e46c <__divdf3+0x2c4>
  80e860:	183f0226 	beq	r3,zero,80e46c <__divdf3+0x2c4>
  80e864:	b28d883a 	add	r6,r22,r10
  80e868:	a0bfffc4 	addi	r2,r20,-1
  80e86c:	35806536 	bltu	r6,r22,80ea04 <__divdf3+0x85c>
  80e870:	31008036 	bltu	r6,r4,80ea74 <__divdf3+0x8cc>
  80e874:	31009426 	beq	r6,r4,80eac8 <__divdf3+0x920>
  80e878:	1029883a 	mov	r20,r2
  80e87c:	003ff606 	br	80e858 <__divdf3+0x6b0>
  80e880:	053fffc4 	movi	r20,-1
  80e884:	01400044 	movi	r5,1
  80e888:	2c4bc83a 	sub	r5,r5,r17
  80e88c:	28800e48 	cmpgei	r2,r5,57
  80e890:	103e941e 	bne	r2,zero,80e2e4 <__divdf3+0x13c>
  80e894:	28800808 	cmpgei	r2,r5,32
  80e898:	1000491e 	bne	r2,zero,80e9c0 <__divdf3+0x818>
  80e89c:	92010784 	addi	r8,r18,1054
  80e8a0:	9a04983a 	sll	r2,r19,r8
  80e8a4:	a146d83a 	srl	r3,r20,r5
  80e8a8:	a210983a 	sll	r8,r20,r8
  80e8ac:	994ad83a 	srl	r5,r19,r5
  80e8b0:	10e8b03a 	or	r20,r2,r3
  80e8b4:	4010c03a 	cmpne	r8,r8,zero
  80e8b8:	a228b03a 	or	r20,r20,r8
  80e8bc:	a08001cc 	andi	r2,r20,7
  80e8c0:	10000726 	beq	r2,zero,80e8e0 <__divdf3+0x738>
  80e8c4:	a08003cc 	andi	r2,r20,15
  80e8c8:	10800120 	cmpeqi	r2,r2,4
  80e8cc:	1000041e 	bne	r2,zero,80e8e0 <__divdf3+0x738>
  80e8d0:	a0800104 	addi	r2,r20,4
  80e8d4:	1529803a 	cmpltu	r20,r2,r20
  80e8d8:	2d0b883a 	add	r5,r5,r20
  80e8dc:	1029883a 	mov	r20,r2
  80e8e0:	2880202c 	andhi	r2,r5,128
  80e8e4:	10006f26 	beq	r2,zero,80eaa4 <__divdf3+0x8fc>
  80e8e8:	00c00044 	movi	r3,1
  80e8ec:	000b883a 	mov	r5,zero
  80e8f0:	0029883a 	mov	r20,zero
  80e8f4:	003e7e06 	br	80e2f0 <__divdf3+0x148>
  80e8f8:	89bf6d2e 	bgeu	r17,r6,80e6b0 <__divdf3+0x508>
  80e8fc:	8d63883a 	add	r17,r17,r21
  80e900:	8d45803a 	cmpltu	r2,r17,r21
  80e904:	1585883a 	add	r2,r2,r22
  80e908:	1887883a 	add	r3,r3,r2
  80e90c:	98bfffc4 	addi	r2,r19,-1
  80e910:	b0c0202e 	bgeu	r22,r3,80e994 <__divdf3+0x7ec>
  80e914:	19405136 	bltu	r3,r5,80ea5c <__divdf3+0x8b4>
  80e918:	28c04f26 	beq	r5,r3,80ea58 <__divdf3+0x8b0>
  80e91c:	1027883a 	mov	r19,r2
  80e920:	003f6306 	br	80e6b0 <__divdf3+0x508>
  80e924:	a27efc36 	bltu	r20,r9,80e518 <__divdf3+0x370>
  80e928:	983897fa 	slli	fp,r19,31
  80e92c:	a004d07a 	srli	r2,r20,1
  80e930:	9820d07a 	srli	r16,r19,1
  80e934:	a02297fa 	slli	r17,r20,31
  80e938:	e0b8b03a 	or	fp,fp,r2
  80e93c:	003efa06 	br	80e528 <__divdf3+0x380>
  80e940:	e009883a 	mov	r4,fp
  80e944:	0801aec0 	call	801aec <__clzsi2>
  80e948:	11400544 	addi	r5,r2,21
  80e94c:	29000748 	cmpgei	r4,r5,29
  80e950:	1007883a 	mov	r3,r2
  80e954:	10800804 	addi	r2,r2,32
  80e958:	203e8526 	beq	r4,zero,80e370 <__divdf3+0x1c8>
  80e95c:	18fffe04 	addi	r3,r3,-8
  80e960:	e0ec983a 	sll	r22,fp,r3
  80e964:	0013883a 	mov	r9,zero
  80e968:	003e8806 	br	80e38c <__divdf3+0x1e4>
  80e96c:	0801aec0 	call	801aec <__clzsi2>
  80e970:	11000544 	addi	r4,r2,21
  80e974:	20c00748 	cmpgei	r3,r4,29
  80e978:	100b883a 	mov	r5,r2
  80e97c:	10800804 	addi	r2,r2,32
  80e980:	183e8d26 	beq	r3,zero,80e3b8 <__divdf3+0x210>
  80e984:	297ffe04 	addi	r5,r5,-8
  80e988:	a166983a 	sll	r19,r20,r5
  80e98c:	0029883a 	mov	r20,zero
  80e990:	003e9006 	br	80e3d4 <__divdf3+0x22c>
  80e994:	b0ffe11e 	bne	r22,r3,80e91c <__divdf3+0x774>
  80e998:	8d7fe036 	bltu	r17,r21,80e91c <__divdf3+0x774>
  80e99c:	003fdd06 	br	80e914 <__divdf3+0x76c>
  80e9a0:	30ff132e 	bgeu	r6,r3,80e5f0 <__divdf3+0x448>
  80e9a4:	423fff84 	addi	r8,r8,-2
  80e9a8:	358d883a 	add	r6,r6,r22
  80e9ac:	003f1106 	br	80e5f4 <__divdf3+0x44c>
  80e9b0:	243ef72e 	bgeu	r4,r16,80e590 <__divdf3+0x3e8>
  80e9b4:	9cffff84 	addi	r19,r19,-2
  80e9b8:	2589883a 	add	r4,r4,r22
  80e9bc:	003ef506 	br	80e594 <__divdf3+0x3ec>
  80e9c0:	00fff844 	movi	r3,-31
  80e9c4:	1c47c83a 	sub	r3,r3,r17
  80e9c8:	29400820 	cmpeqi	r5,r5,32
  80e9cc:	98c6d83a 	srl	r3,r19,r3
  80e9d0:	2800031e 	bne	r5,zero,80e9e0 <__divdf3+0x838>
  80e9d4:	91410f84 	addi	r5,r18,1086
  80e9d8:	994a983a 	sll	r5,r19,r5
  80e9dc:	a168b03a 	or	r20,r20,r5
  80e9e0:	a028c03a 	cmpne	r20,r20,zero
  80e9e4:	a0e8b03a 	or	r20,r20,r3
  80e9e8:	a4c001cc 	andi	r19,r20,7
  80e9ec:	9800291e 	bne	r19,zero,80ea94 <__divdf3+0x8ec>
  80e9f0:	000b883a 	mov	r5,zero
  80e9f4:	a028d0fa 	srli	r20,r20,3
  80e9f8:	0007883a 	mov	r3,zero
  80e9fc:	a4e8b03a 	or	r20,r20,r19
  80ea00:	003e3b06 	br	80e2f0 <__divdf3+0x148>
  80ea04:	1029883a 	mov	r20,r2
  80ea08:	313f931e 	bne	r6,r4,80e858 <__divdf3+0x6b0>
  80ea0c:	1d7f921e 	bne	r3,r21,80e858 <__divdf3+0x6b0>
  80ea10:	003e9606 	br	80e46c <__divdf3+0x2c4>
  80ea14:	047f9a0e 	bge	zero,r17,80e880 <__divdf3+0x6d8>
  80ea18:	0009883a 	mov	r4,zero
  80ea1c:	05000044 	movi	r20,1
  80ea20:	9d27883a 	add	r19,r19,r20
  80ea24:	003e9506 	br	80e47c <__divdf3+0x2d4>
  80ea28:	a08003cc 	andi	r2,r20,15
  80ea2c:	10800118 	cmpnei	r2,r2,4
  80ea30:	103e9126 	beq	r2,zero,80e478 <__divdf3+0x2d0>
  80ea34:	a1000104 	addi	r4,r20,4
  80ea38:	00bffec4 	movi	r2,-5
  80ea3c:	2008d0fa 	srli	r4,r4,3
  80ea40:	1529803a 	cmpltu	r20,r2,r20
  80ea44:	003ff606 	br	80ea20 <__divdf3+0x878>
  80ea48:	1013883a 	mov	r9,r2
  80ea4c:	003f5a06 	br	80e7b8 <__divdf3+0x610>
  80ea50:	1011883a 	mov	r8,r2
  80ea54:	003f3906 	br	80e73c <__divdf3+0x594>
  80ea58:	89bfb02e 	bgeu	r17,r6,80e91c <__divdf3+0x774>
  80ea5c:	8d63883a 	add	r17,r17,r21
  80ea60:	8d45803a 	cmpltu	r2,r17,r21
  80ea64:	1585883a 	add	r2,r2,r22
  80ea68:	9cffff84 	addi	r19,r19,-2
  80ea6c:	1887883a 	add	r3,r3,r2
  80ea70:	003f0f06 	br	80e6b0 <__divdf3+0x508>
  80ea74:	ad45883a 	add	r2,r21,r21
  80ea78:	156b803a 	cmpltu	r21,r2,r21
  80ea7c:	adad883a 	add	r22,r21,r22
  80ea80:	358d883a 	add	r6,r6,r22
  80ea84:	a53fff84 	addi	r20,r20,-2
  80ea88:	102b883a 	mov	r21,r2
  80ea8c:	313fdf26 	beq	r6,r4,80ea0c <__divdf3+0x864>
  80ea90:	003f7106 	br	80e858 <__divdf3+0x6b0>
  80ea94:	a08003cc 	andi	r2,r20,15
  80ea98:	10800118 	cmpnei	r2,r2,4
  80ea9c:	000b883a 	mov	r5,zero
  80eaa0:	103f8b1e 	bne	r2,zero,80e8d0 <__divdf3+0x728>
  80eaa4:	2804927a 	slli	r2,r5,9
  80eaa8:	2826977a 	slli	r19,r5,29
  80eaac:	100ad33a 	srli	r5,r2,12
  80eab0:	003fd006 	br	80e9f4 <__divdf3+0x84c>
  80eab4:	00800434 	movhi	r2,16
  80eab8:	99400234 	orhi	r5,r19,8
  80eabc:	10bfffc4 	addi	r2,r2,-1
  80eac0:	288a703a 	and	r5,r5,r2
  80eac4:	003e7f06 	br	80e4c4 <__divdf3+0x31c>
  80eac8:	a8ffea36 	bltu	r21,r3,80ea74 <__divdf3+0x8cc>
  80eacc:	1029883a 	mov	r20,r2
  80ead0:	1d7f611e 	bne	r3,r21,80e858 <__divdf3+0x6b0>
  80ead4:	003e6506 	br	80e46c <__divdf3+0x2c4>

0080ead8 <__eqdf2>:
  80ead8:	2810d53a 	srli	r8,r5,20
  80eadc:	3806d53a 	srli	r3,r7,20
  80eae0:	00800434 	movhi	r2,16
  80eae4:	4201ffcc 	andi	r8,r8,2047
  80eae8:	10bfffc4 	addi	r2,r2,-1
  80eaec:	4241ffd8 	cmpnei	r9,r8,2047
  80eaf0:	2814d7fa 	srli	r10,r5,31
  80eaf4:	3816d7fa 	srli	r11,r7,31
  80eaf8:	288a703a 	and	r5,r5,r2
  80eafc:	388e703a 	and	r7,r7,r2
  80eb00:	1881ffcc 	andi	r2,r3,2047
  80eb04:	48000626 	beq	r9,zero,80eb20 <__eqdf2+0x48>
  80eb08:	10c1ffe0 	cmpeqi	r3,r2,2047
  80eb0c:	1800021e 	bne	r3,zero,80eb18 <__eqdf2+0x40>
  80eb10:	4080011e 	bne	r8,r2,80eb18 <__eqdf2+0x40>
  80eb14:	29c00826 	beq	r5,r7,80eb38 <__eqdf2+0x60>
  80eb18:	00800044 	movi	r2,1
  80eb1c:	f800283a 	ret
  80eb20:	2906b03a 	or	r3,r5,r4
  80eb24:	183ffc1e 	bne	r3,zero,80eb18 <__eqdf2+0x40>
  80eb28:	1081ffd8 	cmpnei	r2,r2,2047
  80eb2c:	103ffa1e 	bne	r2,zero,80eb18 <__eqdf2+0x40>
  80eb30:	398eb03a 	or	r7,r7,r6
  80eb34:	383ff81e 	bne	r7,zero,80eb18 <__eqdf2+0x40>
  80eb38:	21bff71e 	bne	r4,r6,80eb18 <__eqdf2+0x40>
  80eb3c:	52c00426 	beq	r10,r11,80eb50 <__eqdf2+0x78>
  80eb40:	403ff51e 	bne	r8,zero,80eb18 <__eqdf2+0x40>
  80eb44:	290ab03a 	or	r5,r5,r4
  80eb48:	2804c03a 	cmpne	r2,r5,zero
  80eb4c:	f800283a 	ret
  80eb50:	0005883a 	mov	r2,zero
  80eb54:	f800283a 	ret

0080eb58 <__gedf2>:
  80eb58:	2810d53a 	srli	r8,r5,20
  80eb5c:	3812d53a 	srli	r9,r7,20
  80eb60:	00c00434 	movhi	r3,16
  80eb64:	4201ffcc 	andi	r8,r8,2047
  80eb68:	18ffffc4 	addi	r3,r3,-1
  80eb6c:	4281ffd8 	cmpnei	r10,r8,2047
  80eb70:	2816d7fa 	srli	r11,r5,31
  80eb74:	3804d7fa 	srli	r2,r7,31
  80eb78:	28ca703a 	and	r5,r5,r3
  80eb7c:	38ce703a 	and	r7,r7,r3
  80eb80:	48c1ffcc 	andi	r3,r9,2047
  80eb84:	50000a26 	beq	r10,zero,80ebb0 <__gedf2+0x58>
  80eb88:	1a41ffd8 	cmpnei	r9,r3,2047
  80eb8c:	48000c26 	beq	r9,zero,80ebc0 <__gedf2+0x68>
  80eb90:	4000171e 	bne	r8,zero,80ebf0 <__gedf2+0x98>
  80eb94:	2912b03a 	or	r9,r5,r4
  80eb98:	1800121e 	bne	r3,zero,80ebe4 <__gedf2+0x8c>
  80eb9c:	3994b03a 	or	r10,r7,r6
  80eba0:	5000101e 	bne	r10,zero,80ebe4 <__gedf2+0x8c>
  80eba4:	48000a1e 	bne	r9,zero,80ebd0 <__gedf2+0x78>
  80eba8:	0005883a 	mov	r2,zero
  80ebac:	f800283a 	ret
  80ebb0:	2912b03a 	or	r9,r5,r4
  80ebb4:	48001d1e 	bne	r9,zero,80ec2c <__gedf2+0xd4>
  80ebb8:	1a41ffe0 	cmpeqi	r9,r3,2047
  80ebbc:	48000c26 	beq	r9,zero,80ebf0 <__gedf2+0x98>
  80ebc0:	3992b03a 	or	r9,r7,r6
  80ebc4:	4800191e 	bne	r9,zero,80ec2c <__gedf2+0xd4>
  80ebc8:	40000526 	beq	r8,zero,80ebe0 <__gedf2+0x88>
  80ebcc:	58800c26 	beq	r11,r2,80ec00 <__gedf2+0xa8>
  80ebd0:	00800044 	movi	r2,1
  80ebd4:	58000526 	beq	r11,zero,80ebec <__gedf2+0x94>
  80ebd8:	00bfffc4 	movi	r2,-1
  80ebdc:	f800283a 	ret
  80ebe0:	2912b03a 	or	r9,r5,r4
  80ebe4:	483ff91e 	bne	r9,zero,80ebcc <__gedf2+0x74>
  80ebe8:	103ffb26 	beq	r2,zero,80ebd8 <__gedf2+0x80>
  80ebec:	f800283a 	ret
  80ebf0:	183ff61e 	bne	r3,zero,80ebcc <__gedf2+0x74>
  80ebf4:	3992b03a 	or	r9,r7,r6
  80ebf8:	483ff41e 	bne	r9,zero,80ebcc <__gedf2+0x74>
  80ebfc:	003ff406 	br	80ebd0 <__gedf2+0x78>
  80ec00:	1a000716 	blt	r3,r8,80ec20 <__gedf2+0xc8>
  80ec04:	40fff816 	blt	r8,r3,80ebe8 <__gedf2+0x90>
  80ec08:	397ff136 	bltu	r7,r5,80ebd0 <__gedf2+0x78>
  80ec0c:	29c00926 	beq	r5,r7,80ec34 <__gedf2+0xdc>
  80ec10:	29ffe52e 	bgeu	r5,r7,80eba8 <__gedf2+0x50>
  80ec14:	583ff026 	beq	r11,zero,80ebd8 <__gedf2+0x80>
  80ec18:	5805883a 	mov	r2,r11
  80ec1c:	f800283a 	ret
  80ec20:	103fed1e 	bne	r2,zero,80ebd8 <__gedf2+0x80>
  80ec24:	00800044 	movi	r2,1
  80ec28:	f800283a 	ret
  80ec2c:	00bfff84 	movi	r2,-2
  80ec30:	f800283a 	ret
  80ec34:	313fe636 	bltu	r6,r4,80ebd0 <__gedf2+0x78>
  80ec38:	21bfdb2e 	bgeu	r4,r6,80eba8 <__gedf2+0x50>
  80ec3c:	003ff506 	br	80ec14 <__gedf2+0xbc>

0080ec40 <__ledf2>:
  80ec40:	2810d53a 	srli	r8,r5,20
  80ec44:	3812d53a 	srli	r9,r7,20
  80ec48:	00c00434 	movhi	r3,16
  80ec4c:	4201ffcc 	andi	r8,r8,2047
  80ec50:	18ffffc4 	addi	r3,r3,-1
  80ec54:	4281ffd8 	cmpnei	r10,r8,2047
  80ec58:	2816d7fa 	srli	r11,r5,31
  80ec5c:	3804d7fa 	srli	r2,r7,31
  80ec60:	28ca703a 	and	r5,r5,r3
  80ec64:	38ce703a 	and	r7,r7,r3
  80ec68:	48c1ffcc 	andi	r3,r9,2047
  80ec6c:	50000a26 	beq	r10,zero,80ec98 <__ledf2+0x58>
  80ec70:	1a41ffd8 	cmpnei	r9,r3,2047
  80ec74:	48000c26 	beq	r9,zero,80eca8 <__ledf2+0x68>
  80ec78:	4000191e 	bne	r8,zero,80ece0 <__ledf2+0xa0>
  80ec7c:	2912b03a 	or	r9,r5,r4
  80ec80:	18000d1e 	bne	r3,zero,80ecb8 <__ledf2+0x78>
  80ec84:	3994b03a 	or	r10,r7,r6
  80ec88:	50000b1e 	bne	r10,zero,80ecb8 <__ledf2+0x78>
  80ec8c:	48000c1e 	bne	r9,zero,80ecc0 <__ledf2+0x80>
  80ec90:	0005883a 	mov	r2,zero
  80ec94:	f800283a 	ret
  80ec98:	2912b03a 	or	r9,r5,r4
  80ec9c:	48000c1e 	bne	r9,zero,80ecd0 <__ledf2+0x90>
  80eca0:	1a41ffe0 	cmpeqi	r9,r3,2047
  80eca4:	48000e26 	beq	r9,zero,80ece0 <__ledf2+0xa0>
  80eca8:	3992b03a 	or	r9,r7,r6
  80ecac:	4800081e 	bne	r9,zero,80ecd0 <__ledf2+0x90>
  80ecb0:	4000021e 	bne	r8,zero,80ecbc <__ledf2+0x7c>
  80ecb4:	2912b03a 	or	r9,r5,r4
  80ecb8:	48000726 	beq	r9,zero,80ecd8 <__ledf2+0x98>
  80ecbc:	58800c26 	beq	r11,r2,80ecf0 <__ledf2+0xb0>
  80ecc0:	00800044 	movi	r2,1
  80ecc4:	58000526 	beq	r11,zero,80ecdc <__ledf2+0x9c>
  80ecc8:	00bfffc4 	movi	r2,-1
  80eccc:	f800283a 	ret
  80ecd0:	00800084 	movi	r2,2
  80ecd4:	f800283a 	ret
  80ecd8:	103ffb26 	beq	r2,zero,80ecc8 <__ledf2+0x88>
  80ecdc:	f800283a 	ret
  80ece0:	183ff61e 	bne	r3,zero,80ecbc <__ledf2+0x7c>
  80ece4:	3992b03a 	or	r9,r7,r6
  80ece8:	483ff41e 	bne	r9,zero,80ecbc <__ledf2+0x7c>
  80ecec:	003ff406 	br	80ecc0 <__ledf2+0x80>
  80ecf0:	1a00030e 	bge	r3,r8,80ed00 <__ledf2+0xc0>
  80ecf4:	103ff41e 	bne	r2,zero,80ecc8 <__ledf2+0x88>
  80ecf8:	00800044 	movi	r2,1
  80ecfc:	f800283a 	ret
  80ed00:	40fff516 	blt	r8,r3,80ecd8 <__ledf2+0x98>
  80ed04:	397fee36 	bltu	r7,r5,80ecc0 <__ledf2+0x80>
  80ed08:	29c00426 	beq	r5,r7,80ed1c <__ledf2+0xdc>
  80ed0c:	29ffe02e 	bgeu	r5,r7,80ec90 <__ledf2+0x50>
  80ed10:	583fed26 	beq	r11,zero,80ecc8 <__ledf2+0x88>
  80ed14:	5805883a 	mov	r2,r11
  80ed18:	f800283a 	ret
  80ed1c:	313fe836 	bltu	r6,r4,80ecc0 <__ledf2+0x80>
  80ed20:	21bfdb2e 	bgeu	r4,r6,80ec90 <__ledf2+0x50>
  80ed24:	003ffa06 	br	80ed10 <__ledf2+0xd0>

0080ed28 <__muldf3>:
  80ed28:	2810d53a 	srli	r8,r5,20
  80ed2c:	defff004 	addi	sp,sp,-64
  80ed30:	00800434 	movhi	r2,16
  80ed34:	df000e15 	stw	fp,56(sp)
  80ed38:	dd000a15 	stw	r20,40(sp)
  80ed3c:	dcc00915 	stw	r19,36(sp)
  80ed40:	dc400715 	stw	r17,28(sp)
  80ed44:	10bfffc4 	addi	r2,r2,-1
  80ed48:	dfc00f15 	stw	ra,60(sp)
  80ed4c:	ddc00d15 	stw	r23,52(sp)
  80ed50:	dd800c15 	stw	r22,48(sp)
  80ed54:	dd400b15 	stw	r21,44(sp)
  80ed58:	dc800815 	stw	r18,32(sp)
  80ed5c:	dc000615 	stw	r16,24(sp)
  80ed60:	4201ffcc 	andi	r8,r8,2047
  80ed64:	2828d7fa 	srli	r20,r5,31
  80ed68:	2023883a 	mov	r17,r4
  80ed6c:	3039883a 	mov	fp,r6
  80ed70:	28a6703a 	and	r19,r5,r2
  80ed74:	40013426 	beq	r8,zero,80f248 <__muldf3+0x520>
  80ed78:	4081ffe0 	cmpeqi	r2,r8,2047
  80ed7c:	1001461e 	bne	r2,zero,80f298 <__muldf3+0x570>
  80ed80:	980a90fa 	slli	r5,r19,3
  80ed84:	2026d77a 	srli	r19,r4,29
  80ed88:	202490fa 	slli	r18,r4,3
  80ed8c:	423f0044 	addi	r8,r8,-1023
  80ed90:	9966b03a 	or	r19,r19,r5
  80ed94:	9cc02034 	orhi	r19,r19,128
  80ed98:	002b883a 	mov	r21,zero
  80ed9c:	002d883a 	mov	r22,zero
  80eda0:	3804d53a 	srli	r2,r7,20
  80eda4:	00c00434 	movhi	r3,16
  80eda8:	18ffffc4 	addi	r3,r3,-1
  80edac:	1081ffcc 	andi	r2,r2,2047
  80edb0:	382ed7fa 	srli	r23,r7,31
  80edb4:	38e0703a 	and	r16,r7,r3
  80edb8:	10011026 	beq	r2,zero,80f1fc <__muldf3+0x4d4>
  80edbc:	10c1ffe0 	cmpeqi	r3,r2,2047
  80edc0:	18013c1e 	bne	r3,zero,80f2b4 <__muldf3+0x58c>
  80edc4:	e008d77a 	srli	r4,fp,29
  80edc8:	802090fa 	slli	r16,r16,3
  80edcc:	e02290fa 	slli	r17,fp,3
  80edd0:	10bf0044 	addi	r2,r2,-1023
  80edd4:	2420b03a 	or	r16,r4,r16
  80edd8:	84002034 	orhi	r16,r16,128
  80eddc:	4091883a 	add	r8,r8,r2
  80ede0:	0009883a 	mov	r4,zero
  80ede4:	a8800428 	cmpgeui	r2,r21,16
  80ede8:	a5ccf03a 	xor	r6,r20,r23
  80edec:	41c00044 	addi	r7,r8,1
  80edf0:	1000371e 	bne	r2,zero,80eed0 <__muldf3+0x1a8>
  80edf4:	a80490ba 	slli	r2,r21,2
  80edf8:	00c02074 	movhi	r3,129
  80edfc:	10c7883a 	add	r3,r2,r3
  80ee00:	18bb8217 	ldw	r2,-4600(r3)
  80ee04:	1000683a 	jmp	r2
  80ee08:	0080eed0 	cmplti	r2,zero,955
  80ee0c:	0080ee4c 	andi	r2,zero,953
  80ee10:	0080ee4c 	andi	r2,zero,953
  80ee14:	0080ee48 	cmpgei	r2,zero,953
  80ee18:	0080ee58 	cmpnei	r2,zero,953
  80ee1c:	0080ee58 	cmpnei	r2,zero,953
  80ee20:	0080f328 	cmpgeui	r2,zero,972
  80ee24:	0080ee48 	cmpgei	r2,zero,953
  80ee28:	0080ee58 	cmpnei	r2,zero,953
  80ee2c:	0080f328 	cmpgeui	r2,zero,972
  80ee30:	0080ee58 	cmpnei	r2,zero,953
  80ee34:	0080ee48 	cmpgei	r2,zero,953
  80ee38:	0080f2d0 	cmplti	r2,zero,971
  80ee3c:	0080f2d0 	cmplti	r2,zero,971
  80ee40:	0080f2d0 	cmplti	r2,zero,971
  80ee44:	0080f3b4 	movhi	r2,974
  80ee48:	b80d883a 	mov	r6,r23
  80ee4c:	8027883a 	mov	r19,r16
  80ee50:	8825883a 	mov	r18,r17
  80ee54:	202d883a 	mov	r22,r4
  80ee58:	b08000a0 	cmpeqi	r2,r22,2
  80ee5c:	1000181e 	bne	r2,zero,80eec0 <__muldf3+0x198>
  80ee60:	b08000e0 	cmpeqi	r2,r22,3
  80ee64:	1001961e 	bne	r2,zero,80f4c0 <__muldf3+0x798>
  80ee68:	b0800060 	cmpeqi	r2,r22,1
  80ee6c:	1000c926 	beq	r2,zero,80f194 <__muldf3+0x46c>
  80ee70:	0007883a 	mov	r3,zero
  80ee74:	0027883a 	mov	r19,zero
  80ee78:	0025883a 	mov	r18,zero
  80ee7c:	1806953a 	slli	r3,r3,20
  80ee80:	300c97fa 	slli	r6,r6,31
  80ee84:	9005883a 	mov	r2,r18
  80ee88:	1cc6b03a 	or	r3,r3,r19
  80ee8c:	1986b03a 	or	r3,r3,r6
  80ee90:	dfc00f17 	ldw	ra,60(sp)
  80ee94:	df000e17 	ldw	fp,56(sp)
  80ee98:	ddc00d17 	ldw	r23,52(sp)
  80ee9c:	dd800c17 	ldw	r22,48(sp)
  80eea0:	dd400b17 	ldw	r21,44(sp)
  80eea4:	dd000a17 	ldw	r20,40(sp)
  80eea8:	dcc00917 	ldw	r19,36(sp)
  80eeac:	dc800817 	ldw	r18,32(sp)
  80eeb0:	dc400717 	ldw	r17,28(sp)
  80eeb4:	dc000617 	ldw	r16,24(sp)
  80eeb8:	dec01004 	addi	sp,sp,64
  80eebc:	f800283a 	ret
  80eec0:	00c1ffc4 	movi	r3,2047
  80eec4:	0027883a 	mov	r19,zero
  80eec8:	0025883a 	mov	r18,zero
  80eecc:	003feb06 	br	80ee7c <__muldf3+0x154>
  80eed0:	9028d43a 	srli	r20,r18,16
  80eed4:	8f3fffcc 	andi	fp,r17,65535
  80eed8:	957fffcc 	andi	r21,r18,65535
  80eedc:	a80b883a 	mov	r5,r21
  80eee0:	e009883a 	mov	r4,fp
  80eee4:	d9800315 	stw	r6,12(sp)
  80eee8:	da000215 	stw	r8,8(sp)
  80eeec:	d9c00115 	stw	r7,4(sp)
  80eef0:	8822d43a 	srli	r17,r17,16
  80eef4:	080d8900 	call	80d890 <__mulsi3>
  80eef8:	e00b883a 	mov	r5,fp
  80eefc:	a009883a 	mov	r4,r20
  80ef00:	102d883a 	mov	r22,r2
  80ef04:	080d8900 	call	80d890 <__mulsi3>
  80ef08:	880b883a 	mov	r5,r17
  80ef0c:	a009883a 	mov	r4,r20
  80ef10:	102f883a 	mov	r23,r2
  80ef14:	080d8900 	call	80d890 <__mulsi3>
  80ef18:	a80b883a 	mov	r5,r21
  80ef1c:	8809883a 	mov	r4,r17
  80ef20:	d8800015 	stw	r2,0(sp)
  80ef24:	080d8900 	call	80d890 <__mulsi3>
  80ef28:	b006d43a 	srli	r3,r22,16
  80ef2c:	15e5883a 	add	r18,r2,r23
  80ef30:	d9c00117 	ldw	r7,4(sp)
  80ef34:	1c87883a 	add	r3,r3,r18
  80ef38:	da000217 	ldw	r8,8(sp)
  80ef3c:	d9800317 	ldw	r6,12(sp)
  80ef40:	1dc0042e 	bgeu	r3,r23,80ef54 <__muldf3+0x22c>
  80ef44:	d9000017 	ldw	r4,0(sp)
  80ef48:	00800074 	movhi	r2,1
  80ef4c:	2085883a 	add	r2,r4,r2
  80ef50:	d8800015 	stw	r2,0(sp)
  80ef54:	1804943a 	slli	r2,r3,16
  80ef58:	85ffffcc 	andi	r23,r16,65535
  80ef5c:	b5bfffcc 	andi	r22,r22,65535
  80ef60:	1585883a 	add	r2,r2,r22
  80ef64:	a80b883a 	mov	r5,r21
  80ef68:	b809883a 	mov	r4,r23
  80ef6c:	1824d43a 	srli	r18,r3,16
  80ef70:	d9800515 	stw	r6,20(sp)
  80ef74:	da000415 	stw	r8,16(sp)
  80ef78:	d9c00315 	stw	r7,12(sp)
  80ef7c:	8020d43a 	srli	r16,r16,16
  80ef80:	d8800115 	stw	r2,4(sp)
  80ef84:	080d8900 	call	80d890 <__mulsi3>
  80ef88:	a009883a 	mov	r4,r20
  80ef8c:	b80b883a 	mov	r5,r23
  80ef90:	d8800215 	stw	r2,8(sp)
  80ef94:	080d8900 	call	80d890 <__mulsi3>
  80ef98:	a009883a 	mov	r4,r20
  80ef9c:	800b883a 	mov	r5,r16
  80efa0:	102d883a 	mov	r22,r2
  80efa4:	080d8900 	call	80d890 <__mulsi3>
  80efa8:	a80b883a 	mov	r5,r21
  80efac:	8009883a 	mov	r4,r16
  80efb0:	1029883a 	mov	r20,r2
  80efb4:	080d8900 	call	80d890 <__mulsi3>
  80efb8:	da800217 	ldw	r10,8(sp)
  80efbc:	1585883a 	add	r2,r2,r22
  80efc0:	d9c00317 	ldw	r7,12(sp)
  80efc4:	5006d43a 	srli	r3,r10,16
  80efc8:	da000417 	ldw	r8,16(sp)
  80efcc:	d9800517 	ldw	r6,20(sp)
  80efd0:	1887883a 	add	r3,r3,r2
  80efd4:	1d80022e 	bgeu	r3,r22,80efe0 <__muldf3+0x2b8>
  80efd8:	00800074 	movhi	r2,1
  80efdc:	a0a9883a 	add	r20,r20,r2
  80efe0:	1804d43a 	srli	r2,r3,16
  80efe4:	1806943a 	slli	r3,r3,16
  80efe8:	982cd43a 	srli	r22,r19,16
  80efec:	9d7fffcc 	andi	r21,r19,65535
  80eff0:	e009883a 	mov	r4,fp
  80eff4:	54ffffcc 	andi	r19,r10,65535
  80eff8:	a80b883a 	mov	r5,r21
  80effc:	1ce7883a 	add	r19,r3,r19
  80f000:	d9800515 	stw	r6,20(sp)
  80f004:	da000415 	stw	r8,16(sp)
  80f008:	d9c00315 	stw	r7,12(sp)
  80f00c:	1529883a 	add	r20,r2,r20
  80f010:	080d8900 	call	80d890 <__mulsi3>
  80f014:	e00b883a 	mov	r5,fp
  80f018:	b009883a 	mov	r4,r22
  80f01c:	d8800215 	stw	r2,8(sp)
  80f020:	080d8900 	call	80d890 <__mulsi3>
  80f024:	8809883a 	mov	r4,r17
  80f028:	b00b883a 	mov	r5,r22
  80f02c:	1039883a 	mov	fp,r2
  80f030:	080d8900 	call	80d890 <__mulsi3>
  80f034:	8809883a 	mov	r4,r17
  80f038:	a80b883a 	mov	r5,r21
  80f03c:	1023883a 	mov	r17,r2
  80f040:	080d8900 	call	80d890 <__mulsi3>
  80f044:	d8c00217 	ldw	r3,8(sp)
  80f048:	1705883a 	add	r2,r2,fp
  80f04c:	d9c00317 	ldw	r7,12(sp)
  80f050:	1808d43a 	srli	r4,r3,16
  80f054:	da000417 	ldw	r8,16(sp)
  80f058:	d9800517 	ldw	r6,20(sp)
  80f05c:	2089883a 	add	r4,r4,r2
  80f060:	94e5883a 	add	r18,r18,r19
  80f064:	2700022e 	bgeu	r4,fp,80f070 <__muldf3+0x348>
  80f068:	00800074 	movhi	r2,1
  80f06c:	88a3883a 	add	r17,r17,r2
  80f070:	2004d43a 	srli	r2,r4,16
  80f074:	2038943a 	slli	fp,r4,16
  80f078:	18ffffcc 	andi	r3,r3,65535
  80f07c:	b809883a 	mov	r4,r23
  80f080:	a80b883a 	mov	r5,r21
  80f084:	d9800415 	stw	r6,16(sp)
  80f088:	da000315 	stw	r8,12(sp)
  80f08c:	d9c00215 	stw	r7,8(sp)
  80f090:	e0f9883a 	add	fp,fp,r3
  80f094:	1463883a 	add	r17,r2,r17
  80f098:	080d8900 	call	80d890 <__mulsi3>
  80f09c:	b80b883a 	mov	r5,r23
  80f0a0:	b009883a 	mov	r4,r22
  80f0a4:	102f883a 	mov	r23,r2
  80f0a8:	080d8900 	call	80d890 <__mulsi3>
  80f0ac:	b00b883a 	mov	r5,r22
  80f0b0:	8009883a 	mov	r4,r16
  80f0b4:	102d883a 	mov	r22,r2
  80f0b8:	080d8900 	call	80d890 <__mulsi3>
  80f0bc:	a80b883a 	mov	r5,r21
  80f0c0:	8009883a 	mov	r4,r16
  80f0c4:	1021883a 	mov	r16,r2
  80f0c8:	080d8900 	call	80d890 <__mulsi3>
  80f0cc:	b80ad43a 	srli	r5,r23,16
  80f0d0:	1585883a 	add	r2,r2,r22
  80f0d4:	d9c00217 	ldw	r7,8(sp)
  80f0d8:	288b883a 	add	r5,r5,r2
  80f0dc:	da000317 	ldw	r8,12(sp)
  80f0e0:	d9800417 	ldw	r6,16(sp)
  80f0e4:	2d80022e 	bgeu	r5,r22,80f0f0 <__muldf3+0x3c8>
  80f0e8:	00800074 	movhi	r2,1
  80f0ec:	80a1883a 	add	r16,r16,r2
  80f0f0:	2806943a 	slli	r3,r5,16
  80f0f4:	d8800017 	ldw	r2,0(sp)
  80f0f8:	bdffffcc 	andi	r23,r23,65535
  80f0fc:	1dc7883a 	add	r3,r3,r23
  80f100:	90ab883a 	add	r21,r18,r2
  80f104:	acd5803a 	cmpltu	r10,r21,r19
  80f108:	1d07883a 	add	r3,r3,r20
  80f10c:	af2b883a 	add	r21,r21,fp
  80f110:	1a97883a 	add	r11,r3,r10
  80f114:	af09803a 	cmpltu	r4,r21,fp
  80f118:	2826d43a 	srli	r19,r5,16
  80f11c:	5c53883a 	add	r9,r11,r17
  80f120:	4905883a 	add	r2,r9,r4
  80f124:	1d07803a 	cmpltu	r3,r3,r20
  80f128:	5a95803a 	cmpltu	r10,r11,r10
  80f12c:	1a86b03a 	or	r3,r3,r10
  80f130:	1109803a 	cmpltu	r4,r2,r4
  80f134:	4c53803a 	cmpltu	r9,r9,r17
  80f138:	1ce7883a 	add	r19,r3,r19
  80f13c:	4908b03a 	or	r4,r9,r4
  80f140:	a824927a 	slli	r18,r21,9
  80f144:	d8c00117 	ldw	r3,4(sp)
  80f148:	9927883a 	add	r19,r19,r4
  80f14c:	9c27883a 	add	r19,r19,r16
  80f150:	9826927a 	slli	r19,r19,9
  80f154:	a82ad5fa 	srli	r21,r21,23
  80f158:	100ad5fa 	srli	r5,r2,23
  80f15c:	90e4b03a 	or	r18,r18,r3
  80f160:	1004927a 	slli	r2,r2,9
  80f164:	9024c03a 	cmpne	r18,r18,zero
  80f168:	9564b03a 	or	r18,r18,r21
  80f16c:	98c0402c 	andhi	r3,r19,256
  80f170:	90a4b03a 	or	r18,r18,r2
  80f174:	9966b03a 	or	r19,r19,r5
  80f178:	1800b626 	beq	r3,zero,80f454 <__muldf3+0x72c>
  80f17c:	9006d07a 	srli	r3,r18,1
  80f180:	980497fa 	slli	r2,r19,31
  80f184:	9480004c 	andi	r18,r18,1
  80f188:	9826d07a 	srli	r19,r19,1
  80f18c:	1c86b03a 	or	r3,r3,r18
  80f190:	18a4b03a 	or	r18,r3,r2
  80f194:	3900ffc4 	addi	r4,r7,1023
  80f198:	0100690e 	bge	zero,r4,80f340 <__muldf3+0x618>
  80f19c:	908001cc 	andi	r2,r18,7
  80f1a0:	10000726 	beq	r2,zero,80f1c0 <__muldf3+0x498>
  80f1a4:	908003cc 	andi	r2,r18,15
  80f1a8:	10800120 	cmpeqi	r2,r2,4
  80f1ac:	1000041e 	bne	r2,zero,80f1c0 <__muldf3+0x498>
  80f1b0:	90800104 	addi	r2,r18,4
  80f1b4:	14a5803a 	cmpltu	r18,r2,r18
  80f1b8:	9ca7883a 	add	r19,r19,r18
  80f1bc:	1025883a 	mov	r18,r2
  80f1c0:	9880402c 	andhi	r2,r19,256
  80f1c4:	10000426 	beq	r2,zero,80f1d8 <__muldf3+0x4b0>
  80f1c8:	00bfc034 	movhi	r2,65280
  80f1cc:	10bfffc4 	addi	r2,r2,-1
  80f1d0:	98a6703a 	and	r19,r19,r2
  80f1d4:	39010004 	addi	r4,r7,1024
  80f1d8:	2081ffc8 	cmpgei	r2,r4,2047
  80f1dc:	103f381e 	bne	r2,zero,80eec0 <__muldf3+0x198>
  80f1e0:	9804977a 	slli	r2,r19,29
  80f1e4:	9024d0fa 	srli	r18,r18,3
  80f1e8:	9826927a 	slli	r19,r19,9
  80f1ec:	20c1ffcc 	andi	r3,r4,2047
  80f1f0:	14a4b03a 	or	r18,r2,r18
  80f1f4:	9826d33a 	srli	r19,r19,12
  80f1f8:	003f2006 	br	80ee7c <__muldf3+0x154>
  80f1fc:	8722b03a 	or	r17,r16,fp
  80f200:	88004526 	beq	r17,zero,80f318 <__muldf3+0x5f0>
  80f204:	da000015 	stw	r8,0(sp)
  80f208:	80008626 	beq	r16,zero,80f424 <__muldf3+0x6fc>
  80f20c:	8009883a 	mov	r4,r16
  80f210:	0801aec0 	call	801aec <__clzsi2>
  80f214:	da000017 	ldw	r8,0(sp)
  80f218:	117ffd44 	addi	r5,r2,-11
  80f21c:	01000744 	movi	r4,29
  80f220:	147ffe04 	addi	r17,r2,-8
  80f224:	2149c83a 	sub	r4,r4,r5
  80f228:	8460983a 	sll	r16,r16,r17
  80f22c:	e108d83a 	srl	r4,fp,r4
  80f230:	e462983a 	sll	r17,fp,r17
  80f234:	2420b03a 	or	r16,r4,r16
  80f238:	4091c83a 	sub	r8,r8,r2
  80f23c:	423f0344 	addi	r8,r8,-1011
  80f240:	0009883a 	mov	r4,zero
  80f244:	003ee706 	br	80ede4 <__muldf3+0xbc>
  80f248:	9924b03a 	or	r18,r19,r4
  80f24c:	90002d26 	beq	r18,zero,80f304 <__muldf3+0x5dc>
  80f250:	d9c00015 	stw	r7,0(sp)
  80f254:	98006826 	beq	r19,zero,80f3f8 <__muldf3+0x6d0>
  80f258:	9809883a 	mov	r4,r19
  80f25c:	0801aec0 	call	801aec <__clzsi2>
  80f260:	d9c00017 	ldw	r7,0(sp)
  80f264:	113ffd44 	addi	r4,r2,-11
  80f268:	00c00744 	movi	r3,29
  80f26c:	14bffe04 	addi	r18,r2,-8
  80f270:	1907c83a 	sub	r3,r3,r4
  80f274:	9ca6983a 	sll	r19,r19,r18
  80f278:	88c6d83a 	srl	r3,r17,r3
  80f27c:	8ca4983a 	sll	r18,r17,r18
  80f280:	1ce6b03a 	or	r19,r3,r19
  80f284:	023f0344 	movi	r8,-1011
  80f288:	4091c83a 	sub	r8,r8,r2
  80f28c:	002b883a 	mov	r21,zero
  80f290:	002d883a 	mov	r22,zero
  80f294:	003ec206 	br	80eda0 <__muldf3+0x78>
  80f298:	9924b03a 	or	r18,r19,r4
  80f29c:	9000141e 	bne	r18,zero,80f2f0 <__muldf3+0x5c8>
  80f2a0:	0027883a 	mov	r19,zero
  80f2a4:	05400204 	movi	r21,8
  80f2a8:	0201ffc4 	movi	r8,2047
  80f2ac:	05800084 	movi	r22,2
  80f2b0:	003ebb06 	br	80eda0 <__muldf3+0x78>
  80f2b4:	8722b03a 	or	r17,r16,fp
  80f2b8:	4201ffc4 	addi	r8,r8,2047
  80f2bc:	8800081e 	bne	r17,zero,80f2e0 <__muldf3+0x5b8>
  80f2c0:	ad400094 	ori	r21,r21,2
  80f2c4:	0021883a 	mov	r16,zero
  80f2c8:	01000084 	movi	r4,2
  80f2cc:	003ec506 	br	80ede4 <__muldf3+0xbc>
  80f2d0:	b08000a0 	cmpeqi	r2,r22,2
  80f2d4:	a00d883a 	mov	r6,r20
  80f2d8:	103ee126 	beq	r2,zero,80ee60 <__muldf3+0x138>
  80f2dc:	003ef806 	br	80eec0 <__muldf3+0x198>
  80f2e0:	ad4000d4 	ori	r21,r21,3
  80f2e4:	e023883a 	mov	r17,fp
  80f2e8:	010000c4 	movi	r4,3
  80f2ec:	003ebd06 	br	80ede4 <__muldf3+0xbc>
  80f2f0:	2025883a 	mov	r18,r4
  80f2f4:	05400304 	movi	r21,12
  80f2f8:	0201ffc4 	movi	r8,2047
  80f2fc:	058000c4 	movi	r22,3
  80f300:	003ea706 	br	80eda0 <__muldf3+0x78>
  80f304:	0027883a 	mov	r19,zero
  80f308:	05400104 	movi	r21,4
  80f30c:	0011883a 	mov	r8,zero
  80f310:	05800044 	movi	r22,1
  80f314:	003ea206 	br	80eda0 <__muldf3+0x78>
  80f318:	ad400054 	ori	r21,r21,1
  80f31c:	0021883a 	mov	r16,zero
  80f320:	01000044 	movi	r4,1
  80f324:	003eaf06 	br	80ede4 <__muldf3+0xbc>
  80f328:	04c00434 	movhi	r19,16
  80f32c:	000d883a 	mov	r6,zero
  80f330:	9cffffc4 	addi	r19,r19,-1
  80f334:	04bfffc4 	movi	r18,-1
  80f338:	00c1ffc4 	movi	r3,2047
  80f33c:	003ecf06 	br	80ee7c <__muldf3+0x154>
  80f340:	00800044 	movi	r2,1
  80f344:	1105c83a 	sub	r2,r2,r4
  80f348:	10c00e48 	cmpgei	r3,r2,57
  80f34c:	183ec81e 	bne	r3,zero,80ee70 <__muldf3+0x148>
  80f350:	10c00808 	cmpgei	r3,r2,32
  80f354:	1800411e 	bne	r3,zero,80f45c <__muldf3+0x734>
  80f358:	39c10784 	addi	r7,r7,1054
  80f35c:	99c6983a 	sll	r3,r19,r7
  80f360:	9088d83a 	srl	r4,r18,r2
  80f364:	91ce983a 	sll	r7,r18,r7
  80f368:	98a6d83a 	srl	r19,r19,r2
  80f36c:	1904b03a 	or	r2,r3,r4
  80f370:	3824c03a 	cmpne	r18,r7,zero
  80f374:	1484b03a 	or	r2,r2,r18
  80f378:	10c001cc 	andi	r3,r2,7
  80f37c:	18000726 	beq	r3,zero,80f39c <__muldf3+0x674>
  80f380:	10c003cc 	andi	r3,r2,15
  80f384:	18c00120 	cmpeqi	r3,r3,4
  80f388:	1800041e 	bne	r3,zero,80f39c <__muldf3+0x674>
  80f38c:	10c00104 	addi	r3,r2,4
  80f390:	1885803a 	cmpltu	r2,r3,r2
  80f394:	98a7883a 	add	r19,r19,r2
  80f398:	1805883a 	mov	r2,r3
  80f39c:	98c0202c 	andhi	r3,r19,128
  80f3a0:	18004326 	beq	r3,zero,80f4b0 <__muldf3+0x788>
  80f3a4:	00c00044 	movi	r3,1
  80f3a8:	0027883a 	mov	r19,zero
  80f3ac:	0025883a 	mov	r18,zero
  80f3b0:	003eb206 	br	80ee7c <__muldf3+0x154>
  80f3b4:	9880022c 	andhi	r2,r19,8
  80f3b8:	10000926 	beq	r2,zero,80f3e0 <__muldf3+0x6b8>
  80f3bc:	8080022c 	andhi	r2,r16,8
  80f3c0:	1000071e 	bne	r2,zero,80f3e0 <__muldf3+0x6b8>
  80f3c4:	00800434 	movhi	r2,16
  80f3c8:	84c00234 	orhi	r19,r16,8
  80f3cc:	10bfffc4 	addi	r2,r2,-1
  80f3d0:	98a6703a 	and	r19,r19,r2
  80f3d4:	b80d883a 	mov	r6,r23
  80f3d8:	8825883a 	mov	r18,r17
  80f3dc:	003fd606 	br	80f338 <__muldf3+0x610>
  80f3e0:	00800434 	movhi	r2,16
  80f3e4:	9cc00234 	orhi	r19,r19,8
  80f3e8:	10bfffc4 	addi	r2,r2,-1
  80f3ec:	98a6703a 	and	r19,r19,r2
  80f3f0:	a00d883a 	mov	r6,r20
  80f3f4:	003fd006 	br	80f338 <__muldf3+0x610>
  80f3f8:	0801aec0 	call	801aec <__clzsi2>
  80f3fc:	11000544 	addi	r4,r2,21
  80f400:	21400748 	cmpgei	r5,r4,29
  80f404:	1007883a 	mov	r3,r2
  80f408:	d9c00017 	ldw	r7,0(sp)
  80f40c:	10800804 	addi	r2,r2,32
  80f410:	283f9526 	beq	r5,zero,80f268 <__muldf3+0x540>
  80f414:	18fffe04 	addi	r3,r3,-8
  80f418:	88e6983a 	sll	r19,r17,r3
  80f41c:	0025883a 	mov	r18,zero
  80f420:	003f9806 	br	80f284 <__muldf3+0x55c>
  80f424:	e009883a 	mov	r4,fp
  80f428:	0801aec0 	call	801aec <__clzsi2>
  80f42c:	11400544 	addi	r5,r2,21
  80f430:	29000748 	cmpgei	r4,r5,29
  80f434:	1007883a 	mov	r3,r2
  80f438:	da000017 	ldw	r8,0(sp)
  80f43c:	10800804 	addi	r2,r2,32
  80f440:	203f7626 	beq	r4,zero,80f21c <__muldf3+0x4f4>
  80f444:	1c3ffe04 	addi	r16,r3,-8
  80f448:	e420983a 	sll	r16,fp,r16
  80f44c:	0023883a 	mov	r17,zero
  80f450:	003f7906 	br	80f238 <__muldf3+0x510>
  80f454:	400f883a 	mov	r7,r8
  80f458:	003f4e06 	br	80f194 <__muldf3+0x46c>
  80f45c:	00fff844 	movi	r3,-31
  80f460:	1907c83a 	sub	r3,r3,r4
  80f464:	10800820 	cmpeqi	r2,r2,32
  80f468:	98c6d83a 	srl	r3,r19,r3
  80f46c:	1000031e 	bne	r2,zero,80f47c <__muldf3+0x754>
  80f470:	39c10f84 	addi	r7,r7,1086
  80f474:	99e6983a 	sll	r19,r19,r7
  80f478:	94e4b03a 	or	r18,r18,r19
  80f47c:	9024c03a 	cmpne	r18,r18,zero
  80f480:	90c4b03a 	or	r2,r18,r3
  80f484:	148001cc 	andi	r18,r2,7
  80f488:	9000051e 	bne	r18,zero,80f4a0 <__muldf3+0x778>
  80f48c:	0027883a 	mov	r19,zero
  80f490:	1004d0fa 	srli	r2,r2,3
  80f494:	0007883a 	mov	r3,zero
  80f498:	14a4b03a 	or	r18,r2,r18
  80f49c:	003e7706 	br	80ee7c <__muldf3+0x154>
  80f4a0:	10c003cc 	andi	r3,r2,15
  80f4a4:	18c00118 	cmpnei	r3,r3,4
  80f4a8:	0027883a 	mov	r19,zero
  80f4ac:	183fb71e 	bne	r3,zero,80f38c <__muldf3+0x664>
  80f4b0:	9806927a 	slli	r3,r19,9
  80f4b4:	9824977a 	slli	r18,r19,29
  80f4b8:	1826d33a 	srli	r19,r3,12
  80f4bc:	003ff406 	br	80f490 <__muldf3+0x768>
  80f4c0:	00800434 	movhi	r2,16
  80f4c4:	9cc00234 	orhi	r19,r19,8
  80f4c8:	10bfffc4 	addi	r2,r2,-1
  80f4cc:	98a6703a 	and	r19,r19,r2
  80f4d0:	003f9906 	br	80f338 <__muldf3+0x610>

0080f4d4 <__subdf3>:
  80f4d4:	00800434 	movhi	r2,16
  80f4d8:	3810d53a 	srli	r8,r7,20
  80f4dc:	10bfffc4 	addi	r2,r2,-1
  80f4e0:	2806d53a 	srli	r3,r5,20
  80f4e4:	2892703a 	and	r9,r5,r2
  80f4e8:	3884703a 	and	r2,r7,r2
  80f4ec:	280ad7fa 	srli	r5,r5,31
  80f4f0:	481290fa 	slli	r9,r9,3
  80f4f4:	2018d77a 	srli	r12,r4,29
  80f4f8:	100490fa 	slli	r2,r2,3
  80f4fc:	3016d77a 	srli	r11,r6,29
  80f500:	defffb04 	addi	sp,sp,-20
  80f504:	4201ffcc 	andi	r8,r8,2047
  80f508:	dc800215 	stw	r18,8(sp)
  80f50c:	dc400115 	stw	r17,4(sp)
  80f510:	1c81ffcc 	andi	r18,r3,2047
  80f514:	dfc00415 	stw	ra,16(sp)
  80f518:	dcc00315 	stw	r19,12(sp)
  80f51c:	dc000015 	stw	r16,0(sp)
  80f520:	4281ffd8 	cmpnei	r10,r8,2047
  80f524:	2823883a 	mov	r17,r5
  80f528:	201c90fa 	slli	r14,r4,3
  80f52c:	380ed7fa 	srli	r7,r7,31
  80f530:	301a90fa 	slli	r13,r6,3
  80f534:	29403fcc 	andi	r5,r5,255
  80f538:	6252b03a 	or	r9,r12,r9
  80f53c:	589eb03a 	or	r15,r11,r2
  80f540:	9207c83a 	sub	r3,r18,r8
  80f544:	50006826 	beq	r10,zero,80f6e8 <__subdf3+0x214>
  80f548:	3ac0005c 	xori	r11,r7,1
  80f54c:	2ac07326 	beq	r5,r11,80f71c <__subdf3+0x248>
  80f550:	00c0590e 	bge	zero,r3,80f6b8 <__subdf3+0x1e4>
  80f554:	4000691e 	bne	r8,zero,80f6fc <__subdf3+0x228>
  80f558:	7b44b03a 	or	r2,r15,r13
  80f55c:	1000fb26 	beq	r2,zero,80f94c <__subdf3+0x478>
  80f560:	18bfffc4 	addi	r2,r3,-1
  80f564:	10019126 	beq	r2,zero,80fbac <__subdf3+0x6d8>
  80f568:	18c1ffd8 	cmpnei	r3,r3,2047
  80f56c:	1800c326 	beq	r3,zero,80f87c <__subdf3+0x3a8>
  80f570:	1007883a 	mov	r3,r2
  80f574:	18800e48 	cmpgei	r2,r3,57
  80f578:	1000651e 	bne	r2,zero,80f710 <__subdf3+0x23c>
  80f57c:	18800808 	cmpgei	r2,r3,32
  80f580:	1001331e 	bne	r2,zero,80fa50 <__subdf3+0x57c>
  80f584:	00800804 	movi	r2,32
  80f588:	10c5c83a 	sub	r2,r2,r3
  80f58c:	78a0983a 	sll	r16,r15,r2
  80f590:	68c8d83a 	srl	r4,r13,r3
  80f594:	689a983a 	sll	r13,r13,r2
  80f598:	78c4d83a 	srl	r2,r15,r3
  80f59c:	8120b03a 	or	r16,r16,r4
  80f5a0:	681ac03a 	cmpne	r13,r13,zero
  80f5a4:	8360b03a 	or	r16,r16,r13
  80f5a8:	4893c83a 	sub	r9,r9,r2
  80f5ac:	7421c83a 	sub	r16,r14,r16
  80f5b0:	7409803a 	cmpltu	r4,r14,r16
  80f5b4:	4909c83a 	sub	r4,r9,r4
  80f5b8:	2080202c 	andhi	r2,r4,128
  80f5bc:	10009326 	beq	r2,zero,80f80c <__subdf3+0x338>
  80f5c0:	04c02034 	movhi	r19,128
  80f5c4:	9cffffc4 	addi	r19,r19,-1
  80f5c8:	24e6703a 	and	r19,r4,r19
  80f5cc:	9800b926 	beq	r19,zero,80f8b4 <__subdf3+0x3e0>
  80f5d0:	9809883a 	mov	r4,r19
  80f5d4:	0801aec0 	call	801aec <__clzsi2>
  80f5d8:	10fffe04 	addi	r3,r2,-8
  80f5dc:	01000804 	movi	r4,32
  80f5e0:	20c9c83a 	sub	r4,r4,r3
  80f5e4:	8108d83a 	srl	r4,r16,r4
  80f5e8:	98e6983a 	sll	r19,r19,r3
  80f5ec:	80e0983a 	sll	r16,r16,r3
  80f5f0:	24c8b03a 	or	r4,r4,r19
  80f5f4:	1c80b816 	blt	r3,r18,80f8d8 <__subdf3+0x404>
  80f5f8:	1c87c83a 	sub	r3,r3,r18
  80f5fc:	19400044 	addi	r5,r3,1
  80f600:	28800808 	cmpgei	r2,r5,32
  80f604:	1000751e 	bne	r2,zero,80f7dc <__subdf3+0x308>
  80f608:	00800804 	movi	r2,32
  80f60c:	1145c83a 	sub	r2,r2,r5
  80f610:	8146d83a 	srl	r3,r16,r5
  80f614:	80a0983a 	sll	r16,r16,r2
  80f618:	2084983a 	sll	r2,r4,r2
  80f61c:	2148d83a 	srl	r4,r4,r5
  80f620:	8020c03a 	cmpne	r16,r16,zero
  80f624:	10c4b03a 	or	r2,r2,r3
  80f628:	1420b03a 	or	r16,r2,r16
  80f62c:	0025883a 	mov	r18,zero
  80f630:	808001cc 	andi	r2,r16,7
  80f634:	10000726 	beq	r2,zero,80f654 <__subdf3+0x180>
  80f638:	808003cc 	andi	r2,r16,15
  80f63c:	10800120 	cmpeqi	r2,r2,4
  80f640:	1000041e 	bne	r2,zero,80f654 <__subdf3+0x180>
  80f644:	80800104 	addi	r2,r16,4
  80f648:	1421803a 	cmpltu	r16,r2,r16
  80f64c:	2409883a 	add	r4,r4,r16
  80f650:	1021883a 	mov	r16,r2
  80f654:	2080202c 	andhi	r2,r4,128
  80f658:	10006e26 	beq	r2,zero,80f814 <__subdf3+0x340>
  80f65c:	90c00044 	addi	r3,r18,1
  80f660:	1881ffe0 	cmpeqi	r2,r3,2047
  80f664:	18c1ffcc 	andi	r3,r3,2047
  80f668:	1000801e 	bne	r2,zero,80f86c <__subdf3+0x398>
  80f66c:	00bfe034 	movhi	r2,65408
  80f670:	10bfffc4 	addi	r2,r2,-1
  80f674:	2088703a 	and	r4,r4,r2
  80f678:	2004977a 	slli	r2,r4,29
  80f67c:	2008927a 	slli	r4,r4,9
  80f680:	8020d0fa 	srli	r16,r16,3
  80f684:	2008d33a 	srli	r4,r4,12
  80f688:	1404b03a 	or	r2,r2,r16
  80f68c:	1806953a 	slli	r3,r3,20
  80f690:	882297fa 	slli	r17,r17,31
  80f694:	1906b03a 	or	r3,r3,r4
  80f698:	1c46b03a 	or	r3,r3,r17
  80f69c:	dfc00417 	ldw	ra,16(sp)
  80f6a0:	dcc00317 	ldw	r19,12(sp)
  80f6a4:	dc800217 	ldw	r18,8(sp)
  80f6a8:	dc400117 	ldw	r17,4(sp)
  80f6ac:	dc000017 	ldw	r16,0(sp)
  80f6b0:	dec00504 	addi	sp,sp,20
  80f6b4:	f800283a 	ret
  80f6b8:	18002c26 	beq	r3,zero,80f76c <__subdf3+0x298>
  80f6bc:	4487c83a 	sub	r3,r8,r18
  80f6c0:	5823883a 	mov	r17,r11
  80f6c4:	9000bb1e 	bne	r18,zero,80f9b4 <__subdf3+0x4e0>
  80f6c8:	4b84b03a 	or	r2,r9,r14
  80f6cc:	10011726 	beq	r2,zero,80fb2c <__subdf3+0x658>
  80f6d0:	18bfffc4 	addi	r2,r3,-1
  80f6d4:	10016326 	beq	r2,zero,80fc64 <__subdf3+0x790>
  80f6d8:	18c1ffd8 	cmpnei	r3,r3,2047
  80f6dc:	18012c26 	beq	r3,zero,80fb90 <__subdf3+0x6bc>
  80f6e0:	1007883a 	mov	r3,r2
  80f6e4:	0000b506 	br	80f9bc <__subdf3+0x4e8>
  80f6e8:	7b44b03a 	or	r2,r15,r13
  80f6ec:	103f9626 	beq	r2,zero,80f548 <__subdf3+0x74>
  80f6f0:	3ac03fcc 	andi	r11,r7,255
  80f6f4:	29c07d26 	beq	r5,r7,80f8ec <__subdf3+0x418>
  80f6f8:	00ffef0e 	bge	zero,r3,80f6b8 <__subdf3+0x1e4>
  80f6fc:	9081ffd8 	cmpnei	r2,r18,2047
  80f700:	10005e26 	beq	r2,zero,80f87c <__subdf3+0x3a8>
  80f704:	18800e48 	cmpgei	r2,r3,57
  80f708:	7bc02034 	orhi	r15,r15,128
  80f70c:	103f9b26 	beq	r2,zero,80f57c <__subdf3+0xa8>
  80f710:	7b60b03a 	or	r16,r15,r13
  80f714:	8020c03a 	cmpne	r16,r16,zero
  80f718:	003fa406 	br	80f5ac <__subdf3+0xd8>
  80f71c:	00c0730e 	bge	zero,r3,80f8ec <__subdf3+0x418>
  80f720:	40002626 	beq	r8,zero,80f7bc <__subdf3+0x2e8>
  80f724:	9081ffd8 	cmpnei	r2,r18,2047
  80f728:	10005426 	beq	r2,zero,80f87c <__subdf3+0x3a8>
  80f72c:	7bc02034 	orhi	r15,r15,128
  80f730:	18800e48 	cmpgei	r2,r3,57
  80f734:	1000431e 	bne	r2,zero,80f844 <__subdf3+0x370>
  80f738:	18800808 	cmpgei	r2,r3,32
  80f73c:	1000de26 	beq	r2,zero,80fab8 <__subdf3+0x5e4>
  80f740:	1c3ff804 	addi	r16,r3,-32
  80f744:	18800820 	cmpeqi	r2,r3,32
  80f748:	7c0ad83a 	srl	r5,r15,r16
  80f74c:	1000041e 	bne	r2,zero,80f760 <__subdf3+0x28c>
  80f750:	00801004 	movi	r2,64
  80f754:	10c5c83a 	sub	r2,r2,r3
  80f758:	7884983a 	sll	r2,r15,r2
  80f75c:	689ab03a 	or	r13,r13,r2
  80f760:	6820c03a 	cmpne	r16,r13,zero
  80f764:	8160b03a 	or	r16,r16,r5
  80f768:	00003806 	br	80f84c <__subdf3+0x378>
  80f76c:	90800044 	addi	r2,r18,1
  80f770:	1081ff8c 	andi	r2,r2,2046
  80f774:	1000a01e 	bne	r2,zero,80f9f8 <__subdf3+0x524>
  80f778:	4b8ab03a 	or	r5,r9,r14
  80f77c:	7b44b03a 	or	r2,r15,r13
  80f780:	9000f11e 	bne	r18,zero,80fb48 <__subdf3+0x674>
  80f784:	28012e26 	beq	r5,zero,80fc40 <__subdf3+0x76c>
  80f788:	10010e26 	beq	r2,zero,80fbc4 <__subdf3+0x6f0>
  80f78c:	7361c83a 	sub	r16,r14,r13
  80f790:	7405803a 	cmpltu	r2,r14,r16
  80f794:	4bc9c83a 	sub	r4,r9,r15
  80f798:	2089c83a 	sub	r4,r4,r2
  80f79c:	2080202c 	andhi	r2,r4,128
  80f7a0:	10016d26 	beq	r2,zero,80fd58 <__subdf3+0x884>
  80f7a4:	6ba1c83a 	sub	r16,r13,r14
  80f7a8:	7a49c83a 	sub	r4,r15,r9
  80f7ac:	6c1b803a 	cmpltu	r13,r13,r16
  80f7b0:	2349c83a 	sub	r4,r4,r13
  80f7b4:	5823883a 	mov	r17,r11
  80f7b8:	003f9d06 	br	80f630 <__subdf3+0x15c>
  80f7bc:	7b44b03a 	or	r2,r15,r13
  80f7c0:	10006226 	beq	r2,zero,80f94c <__subdf3+0x478>
  80f7c4:	18bfffc4 	addi	r2,r3,-1
  80f7c8:	1000e926 	beq	r2,zero,80fb70 <__subdf3+0x69c>
  80f7cc:	18c1ffd8 	cmpnei	r3,r3,2047
  80f7d0:	18012a26 	beq	r3,zero,80fc7c <__subdf3+0x7a8>
  80f7d4:	1007883a 	mov	r3,r2
  80f7d8:	003fd506 	br	80f730 <__subdf3+0x25c>
  80f7dc:	18fff844 	addi	r3,r3,-31
  80f7e0:	28800820 	cmpeqi	r2,r5,32
  80f7e4:	20c6d83a 	srl	r3,r4,r3
  80f7e8:	1000041e 	bne	r2,zero,80f7fc <__subdf3+0x328>
  80f7ec:	00801004 	movi	r2,64
  80f7f0:	114bc83a 	sub	r5,r2,r5
  80f7f4:	2148983a 	sll	r4,r4,r5
  80f7f8:	8120b03a 	or	r16,r16,r4
  80f7fc:	8020c03a 	cmpne	r16,r16,zero
  80f800:	80e0b03a 	or	r16,r16,r3
  80f804:	0009883a 	mov	r4,zero
  80f808:	0025883a 	mov	r18,zero
  80f80c:	808001cc 	andi	r2,r16,7
  80f810:	103f891e 	bne	r2,zero,80f638 <__subdf3+0x164>
  80f814:	8020d0fa 	srli	r16,r16,3
  80f818:	2004977a 	slli	r2,r4,29
  80f81c:	2012d0fa 	srli	r9,r4,3
  80f820:	9007883a 	mov	r3,r18
  80f824:	8084b03a 	or	r2,r16,r2
  80f828:	1901ffe0 	cmpeqi	r4,r3,2047
  80f82c:	2000191e 	bne	r4,zero,80f894 <__subdf3+0x3c0>
  80f830:	01000434 	movhi	r4,16
  80f834:	213fffc4 	addi	r4,r4,-1
  80f838:	4908703a 	and	r4,r9,r4
  80f83c:	18c1ffcc 	andi	r3,r3,2047
  80f840:	003f9206 	br	80f68c <__subdf3+0x1b8>
  80f844:	7b60b03a 	or	r16,r15,r13
  80f848:	8020c03a 	cmpne	r16,r16,zero
  80f84c:	83a1883a 	add	r16,r16,r14
  80f850:	8389803a 	cmpltu	r4,r16,r14
  80f854:	2249883a 	add	r4,r4,r9
  80f858:	2080202c 	andhi	r2,r4,128
  80f85c:	103feb26 	beq	r2,zero,80f80c <__subdf3+0x338>
  80f860:	94800044 	addi	r18,r18,1
  80f864:	9081ffe0 	cmpeqi	r2,r18,2047
  80f868:	10006f26 	beq	r2,zero,80fa28 <__subdf3+0x554>
  80f86c:	00c1ffc4 	movi	r3,2047
  80f870:	0009883a 	mov	r4,zero
  80f874:	0005883a 	mov	r2,zero
  80f878:	003f8406 	br	80f68c <__subdf3+0x1b8>
  80f87c:	4806977a 	slli	r3,r9,29
  80f880:	00880034 	movhi	r2,8192
  80f884:	10bfffc4 	addi	r2,r2,-1
  80f888:	4812d0fa 	srli	r9,r9,3
  80f88c:	2088703a 	and	r4,r4,r2
  80f890:	20c4b03a 	or	r2,r4,r3
  80f894:	4886b03a 	or	r3,r9,r2
  80f898:	18013726 	beq	r3,zero,80fd78 <__subdf3+0x8a4>
  80f89c:	00c00434 	movhi	r3,16
  80f8a0:	18ffffc4 	addi	r3,r3,-1
  80f8a4:	49000234 	orhi	r4,r9,8
  80f8a8:	20c8703a 	and	r4,r4,r3
  80f8ac:	00c1ffc4 	movi	r3,2047
  80f8b0:	003f7606 	br	80f68c <__subdf3+0x1b8>
  80f8b4:	8009883a 	mov	r4,r16
  80f8b8:	0801aec0 	call	801aec <__clzsi2>
  80f8bc:	10c00604 	addi	r3,r2,24
  80f8c0:	19000808 	cmpgei	r4,r3,32
  80f8c4:	203f4526 	beq	r4,zero,80f5dc <__subdf3+0x108>
  80f8c8:	113ffe04 	addi	r4,r2,-8
  80f8cc:	8108983a 	sll	r4,r16,r4
  80f8d0:	0021883a 	mov	r16,zero
  80f8d4:	1cbf480e 	bge	r3,r18,80f5f8 <__subdf3+0x124>
  80f8d8:	00bfe034 	movhi	r2,65408
  80f8dc:	10bfffc4 	addi	r2,r2,-1
  80f8e0:	90e5c83a 	sub	r18,r18,r3
  80f8e4:	2088703a 	and	r4,r4,r2
  80f8e8:	003f5106 	br	80f630 <__subdf3+0x15c>
  80f8ec:	18001e26 	beq	r3,zero,80f968 <__subdf3+0x494>
  80f8f0:	4487c83a 	sub	r3,r8,r18
  80f8f4:	90006826 	beq	r18,zero,80fa98 <__subdf3+0x5c4>
  80f8f8:	5000a526 	beq	r10,zero,80fb90 <__subdf3+0x6bc>
  80f8fc:	4a402034 	orhi	r9,r9,128
  80f900:	18800e48 	cmpgei	r2,r3,57
  80f904:	1000b61e 	bne	r2,zero,80fbe0 <__subdf3+0x70c>
  80f908:	18800808 	cmpgei	r2,r3,32
  80f90c:	1001021e 	bne	r2,zero,80fd18 <__subdf3+0x844>
  80f910:	00800804 	movi	r2,32
  80f914:	10c5c83a 	sub	r2,r2,r3
  80f918:	48a0983a 	sll	r16,r9,r2
  80f91c:	70c8d83a 	srl	r4,r14,r3
  80f920:	7084983a 	sll	r2,r14,r2
  80f924:	48d2d83a 	srl	r9,r9,r3
  80f928:	8120b03a 	or	r16,r16,r4
  80f92c:	1004c03a 	cmpne	r2,r2,zero
  80f930:	80a0b03a 	or	r16,r16,r2
  80f934:	7a5f883a 	add	r15,r15,r9
  80f938:	8361883a 	add	r16,r16,r13
  80f93c:	8349803a 	cmpltu	r4,r16,r13
  80f940:	23c9883a 	add	r4,r4,r15
  80f944:	4025883a 	mov	r18,r8
  80f948:	003fc306 	br	80f858 <__subdf3+0x384>
  80f94c:	480a977a 	slli	r5,r9,29
  80f950:	00880034 	movhi	r2,8192
  80f954:	10bfffc4 	addi	r2,r2,-1
  80f958:	2088703a 	and	r4,r4,r2
  80f95c:	4812d0fa 	srli	r9,r9,3
  80f960:	2144b03a 	or	r2,r4,r5
  80f964:	003fb006 	br	80f828 <__subdf3+0x354>
  80f968:	90800044 	addi	r2,r18,1
  80f96c:	1141ff8c 	andi	r5,r2,2046
  80f970:	28005c1e 	bne	r5,zero,80fae4 <__subdf3+0x610>
  80f974:	4b84b03a 	or	r2,r9,r14
  80f978:	9000a71e 	bne	r18,zero,80fc18 <__subdf3+0x744>
  80f97c:	1000df26 	beq	r2,zero,80fcfc <__subdf3+0x828>
  80f980:	7b44b03a 	or	r2,r15,r13
  80f984:	10008f26 	beq	r2,zero,80fbc4 <__subdf3+0x6f0>
  80f988:	7361883a 	add	r16,r14,r13
  80f98c:	4bc9883a 	add	r4,r9,r15
  80f990:	839d803a 	cmpltu	r14,r16,r14
  80f994:	2389883a 	add	r4,r4,r14
  80f998:	2080202c 	andhi	r2,r4,128
  80f99c:	103f9b26 	beq	r2,zero,80f80c <__subdf3+0x338>
  80f9a0:	00bfe034 	movhi	r2,65408
  80f9a4:	10bfffc4 	addi	r2,r2,-1
  80f9a8:	2088703a 	and	r4,r4,r2
  80f9ac:	04800044 	movi	r18,1
  80f9b0:	003f9606 	br	80f80c <__subdf3+0x338>
  80f9b4:	50007626 	beq	r10,zero,80fb90 <__subdf3+0x6bc>
  80f9b8:	4a402034 	orhi	r9,r9,128
  80f9bc:	18800e48 	cmpgei	r2,r3,57
  80f9c0:	10002e1e 	bne	r2,zero,80fa7c <__subdf3+0x5a8>
  80f9c4:	18800808 	cmpgei	r2,r3,32
  80f9c8:	1000881e 	bne	r2,zero,80fbec <__subdf3+0x718>
  80f9cc:	00800804 	movi	r2,32
  80f9d0:	10c5c83a 	sub	r2,r2,r3
  80f9d4:	48a0983a 	sll	r16,r9,r2
  80f9d8:	70c8d83a 	srl	r4,r14,r3
  80f9dc:	709c983a 	sll	r14,r14,r2
  80f9e0:	48d2d83a 	srl	r9,r9,r3
  80f9e4:	8120b03a 	or	r16,r16,r4
  80f9e8:	701cc03a 	cmpne	r14,r14,zero
  80f9ec:	83a0b03a 	or	r16,r16,r14
  80f9f0:	7a5fc83a 	sub	r15,r15,r9
  80f9f4:	00002306 	br	80fa84 <__subdf3+0x5b0>
  80f9f8:	7361c83a 	sub	r16,r14,r13
  80f9fc:	4be7c83a 	sub	r19,r9,r15
  80fa00:	7409803a 	cmpltu	r4,r14,r16
  80fa04:	9927c83a 	sub	r19,r19,r4
  80fa08:	9880202c 	andhi	r2,r19,128
  80fa0c:	1000411e 	bne	r2,zero,80fb14 <__subdf3+0x640>
  80fa10:	84c4b03a 	or	r2,r16,r19
  80fa14:	103eed1e 	bne	r2,zero,80f5cc <__subdf3+0xf8>
  80fa18:	0013883a 	mov	r9,zero
  80fa1c:	0023883a 	mov	r17,zero
  80fa20:	003f8306 	br	80f830 <__subdf3+0x35c>
  80fa24:	04800084 	movi	r18,2
  80fa28:	00bfe034 	movhi	r2,65408
  80fa2c:	10bfffc4 	addi	r2,r2,-1
  80fa30:	8006d07a 	srli	r3,r16,1
  80fa34:	2088703a 	and	r4,r4,r2
  80fa38:	200497fa 	slli	r2,r4,31
  80fa3c:	8400004c 	andi	r16,r16,1
  80fa40:	1c20b03a 	or	r16,r3,r16
  80fa44:	2008d07a 	srli	r4,r4,1
  80fa48:	1420b03a 	or	r16,r2,r16
  80fa4c:	003ef806 	br	80f630 <__subdf3+0x15c>
  80fa50:	1c3ff804 	addi	r16,r3,-32
  80fa54:	18800820 	cmpeqi	r2,r3,32
  80fa58:	7c0ad83a 	srl	r5,r15,r16
  80fa5c:	1000041e 	bne	r2,zero,80fa70 <__subdf3+0x59c>
  80fa60:	00801004 	movi	r2,64
  80fa64:	10c5c83a 	sub	r2,r2,r3
  80fa68:	7884983a 	sll	r2,r15,r2
  80fa6c:	689ab03a 	or	r13,r13,r2
  80fa70:	6820c03a 	cmpne	r16,r13,zero
  80fa74:	8160b03a 	or	r16,r16,r5
  80fa78:	003ecc06 	br	80f5ac <__subdf3+0xd8>
  80fa7c:	4b92b03a 	or	r9,r9,r14
  80fa80:	4820c03a 	cmpne	r16,r9,zero
  80fa84:	6c21c83a 	sub	r16,r13,r16
  80fa88:	6c09803a 	cmpltu	r4,r13,r16
  80fa8c:	7909c83a 	sub	r4,r15,r4
  80fa90:	4025883a 	mov	r18,r8
  80fa94:	003ec806 	br	80f5b8 <__subdf3+0xe4>
  80fa98:	4b84b03a 	or	r2,r9,r14
  80fa9c:	10007e26 	beq	r2,zero,80fc98 <__subdf3+0x7c4>
  80faa0:	18bfffc4 	addi	r2,r3,-1
  80faa4:	1000a726 	beq	r2,zero,80fd44 <__subdf3+0x870>
  80faa8:	18c1ffd8 	cmpnei	r3,r3,2047
  80faac:	18003826 	beq	r3,zero,80fb90 <__subdf3+0x6bc>
  80fab0:	1007883a 	mov	r3,r2
  80fab4:	003f9206 	br	80f900 <__subdf3+0x42c>
  80fab8:	00800804 	movi	r2,32
  80fabc:	10c5c83a 	sub	r2,r2,r3
  80fac0:	78a0983a 	sll	r16,r15,r2
  80fac4:	68c8d83a 	srl	r4,r13,r3
  80fac8:	689a983a 	sll	r13,r13,r2
  80facc:	78c4d83a 	srl	r2,r15,r3
  80fad0:	8120b03a 	or	r16,r16,r4
  80fad4:	681ac03a 	cmpne	r13,r13,zero
  80fad8:	8360b03a 	or	r16,r16,r13
  80fadc:	4893883a 	add	r9,r9,r2
  80fae0:	003f5a06 	br	80f84c <__subdf3+0x378>
  80fae4:	10c1ffe0 	cmpeqi	r3,r2,2047
  80fae8:	183f601e 	bne	r3,zero,80f86c <__subdf3+0x398>
  80faec:	735b883a 	add	r13,r14,r13
  80faf0:	6b9d803a 	cmpltu	r14,r13,r14
  80faf4:	4bc9883a 	add	r4,r9,r15
  80faf8:	2389883a 	add	r4,r4,r14
  80fafc:	202097fa 	slli	r16,r4,31
  80fb00:	681ad07a 	srli	r13,r13,1
  80fb04:	2008d07a 	srli	r4,r4,1
  80fb08:	1025883a 	mov	r18,r2
  80fb0c:	8360b03a 	or	r16,r16,r13
  80fb10:	003f3e06 	br	80f80c <__subdf3+0x338>
  80fb14:	6ba1c83a 	sub	r16,r13,r14
  80fb18:	7a49c83a 	sub	r4,r15,r9
  80fb1c:	6c1b803a 	cmpltu	r13,r13,r16
  80fb20:	2367c83a 	sub	r19,r4,r13
  80fb24:	5823883a 	mov	r17,r11
  80fb28:	003ea806 	br	80f5cc <__subdf3+0xf8>
  80fb2c:	7808977a 	slli	r4,r15,29
  80fb30:	00880034 	movhi	r2,8192
  80fb34:	10bfffc4 	addi	r2,r2,-1
  80fb38:	308c703a 	and	r6,r6,r2
  80fb3c:	7812d0fa 	srli	r9,r15,3
  80fb40:	3104b03a 	or	r2,r6,r4
  80fb44:	003f3806 	br	80f828 <__subdf3+0x354>
  80fb48:	28005a1e 	bne	r5,zero,80fcb4 <__subdf3+0x7e0>
  80fb4c:	10008526 	beq	r2,zero,80fd64 <__subdf3+0x890>
  80fb50:	7806977a 	slli	r3,r15,29
  80fb54:	00880034 	movhi	r2,8192
  80fb58:	10bfffc4 	addi	r2,r2,-1
  80fb5c:	3084703a 	and	r2,r6,r2
  80fb60:	7812d0fa 	srli	r9,r15,3
  80fb64:	10c4b03a 	or	r2,r2,r3
  80fb68:	5823883a 	mov	r17,r11
  80fb6c:	003f4906 	br	80f894 <__subdf3+0x3c0>
  80fb70:	7361883a 	add	r16,r14,r13
  80fb74:	4bc9883a 	add	r4,r9,r15
  80fb78:	839d803a 	cmpltu	r14,r16,r14
  80fb7c:	2389883a 	add	r4,r4,r14
  80fb80:	2080202c 	andhi	r2,r4,128
  80fb84:	103fa71e 	bne	r2,zero,80fa24 <__subdf3+0x550>
  80fb88:	04800044 	movi	r18,1
  80fb8c:	003f1f06 	br	80f80c <__subdf3+0x338>
  80fb90:	7806977a 	slli	r3,r15,29
  80fb94:	00880034 	movhi	r2,8192
  80fb98:	10bfffc4 	addi	r2,r2,-1
  80fb9c:	3084703a 	and	r2,r6,r2
  80fba0:	7812d0fa 	srli	r9,r15,3
  80fba4:	10c4b03a 	or	r2,r2,r3
  80fba8:	003f3a06 	br	80f894 <__subdf3+0x3c0>
  80fbac:	7361c83a 	sub	r16,r14,r13
  80fbb0:	4bc9c83a 	sub	r4,r9,r15
  80fbb4:	741d803a 	cmpltu	r14,r14,r16
  80fbb8:	2389c83a 	sub	r4,r4,r14
  80fbbc:	04800044 	movi	r18,1
  80fbc0:	003e7d06 	br	80f5b8 <__subdf3+0xe4>
  80fbc4:	480a977a 	slli	r5,r9,29
  80fbc8:	00880034 	movhi	r2,8192
  80fbcc:	10bfffc4 	addi	r2,r2,-1
  80fbd0:	2084703a 	and	r2,r4,r2
  80fbd4:	4812d0fa 	srli	r9,r9,3
  80fbd8:	1144b03a 	or	r2,r2,r5
  80fbdc:	003f1406 	br	80f830 <__subdf3+0x35c>
  80fbe0:	4b92b03a 	or	r9,r9,r14
  80fbe4:	4820c03a 	cmpne	r16,r9,zero
  80fbe8:	003f5306 	br	80f938 <__subdf3+0x464>
  80fbec:	1c3ff804 	addi	r16,r3,-32
  80fbf0:	19000820 	cmpeqi	r4,r3,32
  80fbf4:	4c04d83a 	srl	r2,r9,r16
  80fbf8:	2000041e 	bne	r4,zero,80fc0c <__subdf3+0x738>
  80fbfc:	01001004 	movi	r4,64
  80fc00:	20c7c83a 	sub	r3,r4,r3
  80fc04:	48d2983a 	sll	r9,r9,r3
  80fc08:	725cb03a 	or	r14,r14,r9
  80fc0c:	7020c03a 	cmpne	r16,r14,zero
  80fc10:	80a0b03a 	or	r16,r16,r2
  80fc14:	003f9b06 	br	80fa84 <__subdf3+0x5b0>
  80fc18:	103fdd26 	beq	r2,zero,80fb90 <__subdf3+0x6bc>
  80fc1c:	7b5ab03a 	or	r13,r15,r13
  80fc20:	480a977a 	slli	r5,r9,29
  80fc24:	4812d0fa 	srli	r9,r9,3
  80fc28:	6800251e 	bne	r13,zero,80fcc0 <__subdf3+0x7ec>
  80fc2c:	00880034 	movhi	r2,8192
  80fc30:	10bfffc4 	addi	r2,r2,-1
  80fc34:	2084703a 	and	r2,r4,r2
  80fc38:	1144b03a 	or	r2,r2,r5
  80fc3c:	003f1506 	br	80f894 <__subdf3+0x3c0>
  80fc40:	103f7526 	beq	r2,zero,80fa18 <__subdf3+0x544>
  80fc44:	7808977a 	slli	r4,r15,29
  80fc48:	00880034 	movhi	r2,8192
  80fc4c:	10bfffc4 	addi	r2,r2,-1
  80fc50:	3084703a 	and	r2,r6,r2
  80fc54:	7812d0fa 	srli	r9,r15,3
  80fc58:	1104b03a 	or	r2,r2,r4
  80fc5c:	5823883a 	mov	r17,r11
  80fc60:	003ef306 	br	80f830 <__subdf3+0x35c>
  80fc64:	6ba1c83a 	sub	r16,r13,r14
  80fc68:	7a49c83a 	sub	r4,r15,r9
  80fc6c:	6c1b803a 	cmpltu	r13,r13,r16
  80fc70:	2349c83a 	sub	r4,r4,r13
  80fc74:	04800044 	movi	r18,1
  80fc78:	003e4f06 	br	80f5b8 <__subdf3+0xe4>
  80fc7c:	4806977a 	slli	r3,r9,29
  80fc80:	00880034 	movhi	r2,8192
  80fc84:	10bfffc4 	addi	r2,r2,-1
  80fc88:	2084703a 	and	r2,r4,r2
  80fc8c:	4812d0fa 	srli	r9,r9,3
  80fc90:	10c4b03a 	or	r2,r2,r3
  80fc94:	003eff06 	br	80f894 <__subdf3+0x3c0>
  80fc98:	7808977a 	slli	r4,r15,29
  80fc9c:	00880034 	movhi	r2,8192
  80fca0:	10bfffc4 	addi	r2,r2,-1
  80fca4:	3084703a 	and	r2,r6,r2
  80fca8:	7812d0fa 	srli	r9,r15,3
  80fcac:	1104b03a 	or	r2,r2,r4
  80fcb0:	003edd06 	br	80f828 <__subdf3+0x354>
  80fcb4:	480a977a 	slli	r5,r9,29
  80fcb8:	4812d0fa 	srli	r9,r9,3
  80fcbc:	103fdb26 	beq	r2,zero,80fc2c <__subdf3+0x758>
  80fcc0:	00c80034 	movhi	r3,8192
  80fcc4:	18ffffc4 	addi	r3,r3,-1
  80fcc8:	20c4703a 	and	r2,r4,r3
  80fccc:	4900022c 	andhi	r4,r9,8
  80fcd0:	1144b03a 	or	r2,r2,r5
  80fcd4:	203eef26 	beq	r4,zero,80f894 <__subdf3+0x3c0>
  80fcd8:	7808d0fa 	srli	r4,r15,3
  80fcdc:	2140022c 	andhi	r5,r4,8
  80fce0:	283eec1e 	bne	r5,zero,80f894 <__subdf3+0x3c0>
  80fce4:	7804977a 	slli	r2,r15,29
  80fce8:	30cc703a 	and	r6,r6,r3
  80fcec:	5823883a 	mov	r17,r11
  80fcf0:	3084b03a 	or	r2,r6,r2
  80fcf4:	2013883a 	mov	r9,r4
  80fcf8:	003ee606 	br	80f894 <__subdf3+0x3c0>
  80fcfc:	7808977a 	slli	r4,r15,29
  80fd00:	00880034 	movhi	r2,8192
  80fd04:	10bfffc4 	addi	r2,r2,-1
  80fd08:	3084703a 	and	r2,r6,r2
  80fd0c:	7812d0fa 	srli	r9,r15,3
  80fd10:	1104b03a 	or	r2,r2,r4
  80fd14:	003ec606 	br	80f830 <__subdf3+0x35c>
  80fd18:	18bff804 	addi	r2,r3,-32
  80fd1c:	19000820 	cmpeqi	r4,r3,32
  80fd20:	4884d83a 	srl	r2,r9,r2
  80fd24:	2000041e 	bne	r4,zero,80fd38 <__subdf3+0x864>
  80fd28:	01001004 	movi	r4,64
  80fd2c:	20c7c83a 	sub	r3,r4,r3
  80fd30:	48d2983a 	sll	r9,r9,r3
  80fd34:	725cb03a 	or	r14,r14,r9
  80fd38:	7020c03a 	cmpne	r16,r14,zero
  80fd3c:	80a0b03a 	or	r16,r16,r2
  80fd40:	003efd06 	br	80f938 <__subdf3+0x464>
  80fd44:	7361883a 	add	r16,r14,r13
  80fd48:	4bc9883a 	add	r4,r9,r15
  80fd4c:	835b803a 	cmpltu	r13,r16,r13
  80fd50:	2349883a 	add	r4,r4,r13
  80fd54:	003f8a06 	br	80fb80 <__subdf3+0x6ac>
  80fd58:	8104b03a 	or	r2,r16,r4
  80fd5c:	103f2e26 	beq	r2,zero,80fa18 <__subdf3+0x544>
  80fd60:	003eaa06 	br	80f80c <__subdf3+0x338>
  80fd64:	02400434 	movhi	r9,16
  80fd68:	0023883a 	mov	r17,zero
  80fd6c:	00bfffc4 	movi	r2,-1
  80fd70:	4a7fffc4 	addi	r9,r9,-1
  80fd74:	003ec906 	br	80f89c <__subdf3+0x3c8>
  80fd78:	0005883a 	mov	r2,zero
  80fd7c:	00c1ffc4 	movi	r3,2047
  80fd80:	0009883a 	mov	r4,zero
  80fd84:	003e4106 	br	80f68c <__subdf3+0x1b8>

0080fd88 <__fixdfsi>:
  80fd88:	2806d53a 	srli	r3,r5,20
  80fd8c:	01800434 	movhi	r6,16
  80fd90:	31bfffc4 	addi	r6,r6,-1
  80fd94:	18c1ffcc 	andi	r3,r3,2047
  80fd98:	19c0ffd0 	cmplti	r7,r3,1023
  80fd9c:	2810d7fa 	srli	r8,r5,31
  80fda0:	298a703a 	and	r5,r5,r6
  80fda4:	3800061e 	bne	r7,zero,80fdc0 <__fixdfsi+0x38>
  80fda8:	18810790 	cmplti	r2,r3,1054
  80fdac:	1000061e 	bne	r2,zero,80fdc8 <__fixdfsi+0x40>
  80fdb0:	00a00034 	movhi	r2,32768
  80fdb4:	10bfffc4 	addi	r2,r2,-1
  80fdb8:	4085883a 	add	r2,r8,r2
  80fdbc:	f800283a 	ret
  80fdc0:	0005883a 	mov	r2,zero
  80fdc4:	f800283a 	ret
  80fdc8:	01810cc4 	movi	r6,1075
  80fdcc:	30cdc83a 	sub	r6,r6,r3
  80fdd0:	30800808 	cmpgei	r2,r6,32
  80fdd4:	29400434 	orhi	r5,r5,16
  80fdd8:	1000071e 	bne	r2,zero,80fdf8 <__fixdfsi+0x70>
  80fddc:	18befb44 	addi	r2,r3,-1043
  80fde0:	2884983a 	sll	r2,r5,r2
  80fde4:	2188d83a 	srl	r4,r4,r6
  80fde8:	1104b03a 	or	r2,r2,r4
  80fdec:	403ff526 	beq	r8,zero,80fdc4 <__fixdfsi+0x3c>
  80fdf0:	0085c83a 	sub	r2,zero,r2
  80fdf4:	f800283a 	ret
  80fdf8:	008104c4 	movi	r2,1043
  80fdfc:	10c5c83a 	sub	r2,r2,r3
  80fe00:	2884d83a 	srl	r2,r5,r2
  80fe04:	003ff906 	br	80fdec <__fixdfsi+0x64>

0080fe08 <__floatsidf>:
  80fe08:	defffd04 	addi	sp,sp,-12
  80fe0c:	dfc00215 	stw	ra,8(sp)
  80fe10:	dc400115 	stw	r17,4(sp)
  80fe14:	dc000015 	stw	r16,0(sp)
  80fe18:	20001326 	beq	r4,zero,80fe68 <__floatsidf+0x60>
  80fe1c:	2022d7fa 	srli	r17,r4,31
  80fe20:	2021883a 	mov	r16,r4
  80fe24:	20002416 	blt	r4,zero,80feb8 <__floatsidf+0xb0>
  80fe28:	8009883a 	mov	r4,r16
  80fe2c:	0801aec0 	call	801aec <__clzsi2>
  80fe30:	01010784 	movi	r4,1054
  80fe34:	2089c83a 	sub	r4,r4,r2
  80fe38:	114002c8 	cmpgei	r5,r2,11
  80fe3c:	20c1ffcc 	andi	r3,r4,2047
  80fe40:	2800161e 	bne	r5,zero,80fe9c <__floatsidf+0x94>
  80fe44:	010002c4 	movi	r4,11
  80fe48:	2089c83a 	sub	r4,r4,r2
  80fe4c:	810ad83a 	srl	r5,r16,r4
  80fe50:	01000434 	movhi	r4,16
  80fe54:	10800544 	addi	r2,r2,21
  80fe58:	213fffc4 	addi	r4,r4,-1
  80fe5c:	8084983a 	sll	r2,r16,r2
  80fe60:	290a703a 	and	r5,r5,r4
  80fe64:	00000406 	br	80fe78 <__floatsidf+0x70>
  80fe68:	0023883a 	mov	r17,zero
  80fe6c:	0007883a 	mov	r3,zero
  80fe70:	000b883a 	mov	r5,zero
  80fe74:	0005883a 	mov	r2,zero
  80fe78:	1808953a 	slli	r4,r3,20
  80fe7c:	880697fa 	slli	r3,r17,31
  80fe80:	2148b03a 	or	r4,r4,r5
  80fe84:	20c6b03a 	or	r3,r4,r3
  80fe88:	dfc00217 	ldw	ra,8(sp)
  80fe8c:	dc400117 	ldw	r17,4(sp)
  80fe90:	dc000017 	ldw	r16,0(sp)
  80fe94:	dec00304 	addi	sp,sp,12
  80fe98:	f800283a 	ret
  80fe9c:	10bffd44 	addi	r2,r2,-11
  80fea0:	808a983a 	sll	r5,r16,r2
  80fea4:	00800434 	movhi	r2,16
  80fea8:	10bfffc4 	addi	r2,r2,-1
  80feac:	288a703a 	and	r5,r5,r2
  80feb0:	0005883a 	mov	r2,zero
  80feb4:	003ff006 	br	80fe78 <__floatsidf+0x70>
  80feb8:	0121c83a 	sub	r16,zero,r4
  80febc:	003fda06 	br	80fe28 <__floatsidf+0x20>

0080fec0 <__floatunsidf>:
  80fec0:	defffe04 	addi	sp,sp,-8
  80fec4:	dc000015 	stw	r16,0(sp)
  80fec8:	dfc00115 	stw	ra,4(sp)
  80fecc:	2021883a 	mov	r16,r4
  80fed0:	20000f26 	beq	r4,zero,80ff10 <__floatunsidf+0x50>
  80fed4:	0801aec0 	call	801aec <__clzsi2>
  80fed8:	00c10784 	movi	r3,1054
  80fedc:	1887c83a 	sub	r3,r3,r2
  80fee0:	110002c8 	cmpgei	r4,r2,11
  80fee4:	18c1ffcc 	andi	r3,r3,2047
  80fee8:	2000121e 	bne	r4,zero,80ff34 <__floatunsidf+0x74>
  80feec:	014002c4 	movi	r5,11
  80fef0:	288bc83a 	sub	r5,r5,r2
  80fef4:	814ad83a 	srl	r5,r16,r5
  80fef8:	01000434 	movhi	r4,16
  80fefc:	10800544 	addi	r2,r2,21
  80ff00:	213fffc4 	addi	r4,r4,-1
  80ff04:	80a0983a 	sll	r16,r16,r2
  80ff08:	290a703a 	and	r5,r5,r4
  80ff0c:	00000206 	br	80ff18 <__floatunsidf+0x58>
  80ff10:	0007883a 	mov	r3,zero
  80ff14:	000b883a 	mov	r5,zero
  80ff18:	1806953a 	slli	r3,r3,20
  80ff1c:	8005883a 	mov	r2,r16
  80ff20:	1946b03a 	or	r3,r3,r5
  80ff24:	dfc00117 	ldw	ra,4(sp)
  80ff28:	dc000017 	ldw	r16,0(sp)
  80ff2c:	dec00204 	addi	sp,sp,8
  80ff30:	f800283a 	ret
  80ff34:	117ffd44 	addi	r5,r2,-11
  80ff38:	814a983a 	sll	r5,r16,r5
  80ff3c:	00800434 	movhi	r2,16
  80ff40:	10bfffc4 	addi	r2,r2,-1
  80ff44:	288a703a 	and	r5,r5,r2
  80ff48:	0021883a 	mov	r16,zero
  80ff4c:	003ff206 	br	80ff18 <__floatunsidf+0x58>

0080ff50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ff50:	defffe04 	addi	sp,sp,-8
  80ff54:	dfc00115 	stw	ra,4(sp)
  80ff58:	df000015 	stw	fp,0(sp)
  80ff5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ff60:	d0a01117 	ldw	r2,-32700(gp)
  80ff64:	10000326 	beq	r2,zero,80ff74 <alt_get_errno+0x24>
  80ff68:	d0a01117 	ldw	r2,-32700(gp)
  80ff6c:	103ee83a 	callr	r2
  80ff70:	00000106 	br	80ff78 <alt_get_errno+0x28>
  80ff74:	d0a75804 	addi	r2,gp,-25248
}
  80ff78:	e037883a 	mov	sp,fp
  80ff7c:	dfc00117 	ldw	ra,4(sp)
  80ff80:	df000017 	ldw	fp,0(sp)
  80ff84:	dec00204 	addi	sp,sp,8
  80ff88:	f800283a 	ret

0080ff8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80ff8c:	defffb04 	addi	sp,sp,-20
  80ff90:	dfc00415 	stw	ra,16(sp)
  80ff94:	df000315 	stw	fp,12(sp)
  80ff98:	df000304 	addi	fp,sp,12
  80ff9c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ffa0:	e0bffd17 	ldw	r2,-12(fp)
  80ffa4:	10000916 	blt	r2,zero,80ffcc <close+0x40>
  80ffa8:	e0fffd17 	ldw	r3,-12(fp)
  80ffac:	1805883a 	mov	r2,r3
  80ffb0:	1085883a 	add	r2,r2,r2
  80ffb4:	10c5883a 	add	r2,r2,r3
  80ffb8:	100490ba 	slli	r2,r2,2
  80ffbc:	00c02074 	movhi	r3,129
  80ffc0:	18cfb804 	addi	r3,r3,16096
  80ffc4:	10c5883a 	add	r2,r2,r3
  80ffc8:	00000106 	br	80ffd0 <close+0x44>
  80ffcc:	0005883a 	mov	r2,zero
  80ffd0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80ffd4:	e0bfff17 	ldw	r2,-4(fp)
  80ffd8:	10001926 	beq	r2,zero,810040 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ffdc:	e0bfff17 	ldw	r2,-4(fp)
  80ffe0:	10800017 	ldw	r2,0(r2)
  80ffe4:	10800417 	ldw	r2,16(r2)
  80ffe8:	10000626 	beq	r2,zero,810004 <close+0x78>
  80ffec:	e0bfff17 	ldw	r2,-4(fp)
  80fff0:	10800017 	ldw	r2,0(r2)
  80fff4:	10800417 	ldw	r2,16(r2)
  80fff8:	e13fff17 	ldw	r4,-4(fp)
  80fffc:	103ee83a 	callr	r2
  810000:	00000106 	br	810008 <close+0x7c>
  810004:	0005883a 	mov	r2,zero
  810008:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81000c:	e13ffd17 	ldw	r4,-12(fp)
  810010:	08108480 	call	810848 <alt_release_fd>
    if (rval < 0)
  810014:	e0bffe17 	ldw	r2,-8(fp)
  810018:	1000070e 	bge	r2,zero,810038 <close+0xac>
    {
      ALT_ERRNO = -rval;
  81001c:	080ff500 	call	80ff50 <alt_get_errno>
  810020:	1007883a 	mov	r3,r2
  810024:	e0bffe17 	ldw	r2,-8(fp)
  810028:	0085c83a 	sub	r2,zero,r2
  81002c:	18800015 	stw	r2,0(r3)
      return -1;
  810030:	00bfffc4 	movi	r2,-1
  810034:	00000706 	br	810054 <close+0xc8>
    }
    return 0;
  810038:	0005883a 	mov	r2,zero
  81003c:	00000506 	br	810054 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810040:	080ff500 	call	80ff50 <alt_get_errno>
  810044:	1007883a 	mov	r3,r2
  810048:	00801444 	movi	r2,81
  81004c:	18800015 	stw	r2,0(r3)
    return -1;
  810050:	00bfffc4 	movi	r2,-1
  }
}
  810054:	e037883a 	mov	sp,fp
  810058:	dfc00117 	ldw	ra,4(sp)
  81005c:	df000017 	ldw	fp,0(sp)
  810060:	dec00204 	addi	sp,sp,8
  810064:	f800283a 	ret

00810068 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810068:	defffc04 	addi	sp,sp,-16
  81006c:	df000315 	stw	fp,12(sp)
  810070:	df000304 	addi	fp,sp,12
  810074:	e13fff15 	stw	r4,-4(fp)
  810078:	e17ffe15 	stw	r5,-8(fp)
  81007c:	e1bffd15 	stw	r6,-12(fp)
  return len;
  810080:	e0bffd17 	ldw	r2,-12(fp)
}
  810084:	e037883a 	mov	sp,fp
  810088:	df000017 	ldw	fp,0(sp)
  81008c:	dec00104 	addi	sp,sp,4
  810090:	f800283a 	ret

00810094 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810094:	defffd04 	addi	sp,sp,-12
  810098:	df000215 	stw	fp,8(sp)
  81009c:	df000204 	addi	fp,sp,8
  8100a0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8100a4:	0001883a 	nop
  8100a8:	e0bffe17 	ldw	r2,-8(fp)
  8100ac:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8100b0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8100b4:	10000226 	beq	r2,zero,8100c0 <_exit+0x2c>
    ALT_SIM_FAIL();
  8100b8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  8100bc:	00000106 	br	8100c4 <_exit+0x30>
    ALT_SIM_PASS();
  8100c0:	002af0b0 	cmpltui	zero,zero,43970
}
  8100c4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8100c8:	003fff06 	br	8100c8 <_exit+0x34>

008100cc <alt_get_errno>:
{
  8100cc:	defffe04 	addi	sp,sp,-8
  8100d0:	dfc00115 	stw	ra,4(sp)
  8100d4:	df000015 	stw	fp,0(sp)
  8100d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8100dc:	d0a01117 	ldw	r2,-32700(gp)
  8100e0:	10000326 	beq	r2,zero,8100f0 <alt_get_errno+0x24>
  8100e4:	d0a01117 	ldw	r2,-32700(gp)
  8100e8:	103ee83a 	callr	r2
  8100ec:	00000106 	br	8100f4 <alt_get_errno+0x28>
  8100f0:	d0a75804 	addi	r2,gp,-25248
}
  8100f4:	e037883a 	mov	sp,fp
  8100f8:	dfc00117 	ldw	ra,4(sp)
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00204 	addi	sp,sp,8
  810104:	f800283a 	ret

00810108 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810108:	defffb04 	addi	sp,sp,-20
  81010c:	dfc00415 	stw	ra,16(sp)
  810110:	df000315 	stw	fp,12(sp)
  810114:	df000304 	addi	fp,sp,12
  810118:	e13ffe15 	stw	r4,-8(fp)
  81011c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810120:	e0bffe17 	ldw	r2,-8(fp)
  810124:	10000916 	blt	r2,zero,81014c <fstat+0x44>
  810128:	e0fffe17 	ldw	r3,-8(fp)
  81012c:	1805883a 	mov	r2,r3
  810130:	1085883a 	add	r2,r2,r2
  810134:	10c5883a 	add	r2,r2,r3
  810138:	100490ba 	slli	r2,r2,2
  81013c:	00c02074 	movhi	r3,129
  810140:	18cfb804 	addi	r3,r3,16096
  810144:	10c5883a 	add	r2,r2,r3
  810148:	00000106 	br	810150 <fstat+0x48>
  81014c:	0005883a 	mov	r2,zero
  810150:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810154:	e0bfff17 	ldw	r2,-4(fp)
  810158:	10001026 	beq	r2,zero,81019c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81015c:	e0bfff17 	ldw	r2,-4(fp)
  810160:	10800017 	ldw	r2,0(r2)
  810164:	10800817 	ldw	r2,32(r2)
  810168:	10000726 	beq	r2,zero,810188 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  81016c:	e0bfff17 	ldw	r2,-4(fp)
  810170:	10800017 	ldw	r2,0(r2)
  810174:	10800817 	ldw	r2,32(r2)
  810178:	e17ffd17 	ldw	r5,-12(fp)
  81017c:	e13fff17 	ldw	r4,-4(fp)
  810180:	103ee83a 	callr	r2
  810184:	00000a06 	br	8101b0 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810188:	e0bffd17 	ldw	r2,-12(fp)
  81018c:	00c80004 	movi	r3,8192
  810190:	10c00115 	stw	r3,4(r2)
      return 0;
  810194:	0005883a 	mov	r2,zero
  810198:	00000506 	br	8101b0 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81019c:	08100cc0 	call	8100cc <alt_get_errno>
  8101a0:	1007883a 	mov	r3,r2
  8101a4:	00801444 	movi	r2,81
  8101a8:	18800015 	stw	r2,0(r3)
    return -1;
  8101ac:	00bfffc4 	movi	r2,-1
  }
}
  8101b0:	e037883a 	mov	sp,fp
  8101b4:	dfc00117 	ldw	ra,4(sp)
  8101b8:	df000017 	ldw	fp,0(sp)
  8101bc:	dec00204 	addi	sp,sp,8
  8101c0:	f800283a 	ret

008101c4 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  8101c4:	deffff04 	addi	sp,sp,-4
  8101c8:	df000015 	stw	fp,0(sp)
  8101cc:	d839883a 	mov	fp,sp
  return 0;
  8101d0:	0005883a 	mov	r2,zero
}
  8101d4:	e037883a 	mov	sp,fp
  8101d8:	df000017 	ldw	fp,0(sp)
  8101dc:	dec00104 	addi	sp,sp,4
  8101e0:	f800283a 	ret

008101e4 <alt_get_errno>:
{
  8101e4:	defffe04 	addi	sp,sp,-8
  8101e8:	dfc00115 	stw	ra,4(sp)
  8101ec:	df000015 	stw	fp,0(sp)
  8101f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8101f4:	d0a01117 	ldw	r2,-32700(gp)
  8101f8:	10000326 	beq	r2,zero,810208 <alt_get_errno+0x24>
  8101fc:	d0a01117 	ldw	r2,-32700(gp)
  810200:	103ee83a 	callr	r2
  810204:	00000106 	br	81020c <alt_get_errno+0x28>
  810208:	d0a75804 	addi	r2,gp,-25248
}
  81020c:	e037883a 	mov	sp,fp
  810210:	dfc00117 	ldw	ra,4(sp)
  810214:	df000017 	ldw	fp,0(sp)
  810218:	dec00204 	addi	sp,sp,8
  81021c:	f800283a 	ret

00810220 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810220:	deffea04 	addi	sp,sp,-88
  810224:	dfc01515 	stw	ra,84(sp)
  810228:	df001415 	stw	fp,80(sp)
  81022c:	df001404 	addi	fp,sp,80
  810230:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810234:	e0bfec17 	ldw	r2,-80(fp)
  810238:	10000916 	blt	r2,zero,810260 <isatty+0x40>
  81023c:	e0ffec17 	ldw	r3,-80(fp)
  810240:	1805883a 	mov	r2,r3
  810244:	1085883a 	add	r2,r2,r2
  810248:	10c5883a 	add	r2,r2,r3
  81024c:	100490ba 	slli	r2,r2,2
  810250:	00c02074 	movhi	r3,129
  810254:	18cfb804 	addi	r3,r3,16096
  810258:	10c5883a 	add	r2,r2,r3
  81025c:	00000106 	br	810264 <isatty+0x44>
  810260:	0005883a 	mov	r2,zero
  810264:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810268:	e0bfff17 	ldw	r2,-4(fp)
  81026c:	10000e26 	beq	r2,zero,8102a8 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810270:	e0bfff17 	ldw	r2,-4(fp)
  810274:	10800017 	ldw	r2,0(r2)
  810278:	10800817 	ldw	r2,32(r2)
  81027c:	1000021e 	bne	r2,zero,810288 <isatty+0x68>
    {
      return 1;
  810280:	00800044 	movi	r2,1
  810284:	00000d06 	br	8102bc <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810288:	e0bfed04 	addi	r2,fp,-76
  81028c:	100b883a 	mov	r5,r2
  810290:	e13fec17 	ldw	r4,-80(fp)
  810294:	08101080 	call	810108 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810298:	e0bfee17 	ldw	r2,-72(fp)
  81029c:	10880020 	cmpeqi	r2,r2,8192
  8102a0:	10803fcc 	andi	r2,r2,255
  8102a4:	00000506 	br	8102bc <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8102a8:	08101e40 	call	8101e4 <alt_get_errno>
  8102ac:	1007883a 	mov	r3,r2
  8102b0:	00801444 	movi	r2,81
  8102b4:	18800015 	stw	r2,0(r3)
    return 0;
  8102b8:	0005883a 	mov	r2,zero
  }
}
  8102bc:	e037883a 	mov	sp,fp
  8102c0:	dfc00117 	ldw	ra,4(sp)
  8102c4:	df000017 	ldw	fp,0(sp)
  8102c8:	dec00204 	addi	sp,sp,8
  8102cc:	f800283a 	ret

008102d0 <alt_get_errno>:
{
  8102d0:	defffe04 	addi	sp,sp,-8
  8102d4:	dfc00115 	stw	ra,4(sp)
  8102d8:	df000015 	stw	fp,0(sp)
  8102dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8102e0:	d0a01117 	ldw	r2,-32700(gp)
  8102e4:	10000326 	beq	r2,zero,8102f4 <alt_get_errno+0x24>
  8102e8:	d0a01117 	ldw	r2,-32700(gp)
  8102ec:	103ee83a 	callr	r2
  8102f0:	00000106 	br	8102f8 <alt_get_errno+0x28>
  8102f4:	d0a75804 	addi	r2,gp,-25248
}
  8102f8:	e037883a 	mov	sp,fp
  8102fc:	dfc00117 	ldw	ra,4(sp)
  810300:	df000017 	ldw	fp,0(sp)
  810304:	dec00204 	addi	sp,sp,8
  810308:	f800283a 	ret

0081030c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  81030c:	defffb04 	addi	sp,sp,-20
  810310:	dfc00415 	stw	ra,16(sp)
  810314:	df000315 	stw	fp,12(sp)
  810318:	df000304 	addi	fp,sp,12
  81031c:	e13ffe15 	stw	r4,-8(fp)
  810320:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  810324:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  810328:	e0bffe17 	ldw	r2,-8(fp)
  81032c:	00802e16 	blt	zero,r2,8103e8 <kill+0xdc>
  810330:	e0bffd17 	ldw	r2,-12(fp)
  810334:	10800828 	cmpgeui	r2,r2,32
  810338:	1000281e 	bne	r2,zero,8103dc <kill+0xd0>
  81033c:	e0bffd17 	ldw	r2,-12(fp)
  810340:	100690ba 	slli	r3,r2,2
  810344:	00802074 	movhi	r2,129
  810348:	1885883a 	add	r2,r3,r2
  81034c:	1080d517 	ldw	r2,852(r2)
  810350:	1000683a 	jmp	r2
  810354:	008103fc 	xorhi	r2,zero,1039
  810358:	008103dc 	xori	r2,zero,1039
  81035c:	008103dc 	xori	r2,zero,1039
  810360:	008103d4 	movui	r2,1039
  810364:	008103d4 	movui	r2,1039
  810368:	008103d4 	movui	r2,1039
  81036c:	008103d4 	movui	r2,1039
  810370:	008103dc 	xori	r2,zero,1039
  810374:	008103d4 	movui	r2,1039
  810378:	008103d4 	movui	r2,1039
  81037c:	008103d4 	movui	r2,1039
  810380:	008103d4 	movui	r2,1039
  810384:	008103d4 	movui	r2,1039
  810388:	008103d4 	movui	r2,1039
  81038c:	008103d4 	movui	r2,1039
  810390:	008103d4 	movui	r2,1039
  810394:	008103fc 	xorhi	r2,zero,1039
  810398:	008103dc 	xori	r2,zero,1039
  81039c:	008103dc 	xori	r2,zero,1039
  8103a0:	008103dc 	xori	r2,zero,1039
  8103a4:	008103fc 	xorhi	r2,zero,1039
  8103a8:	008103dc 	xori	r2,zero,1039
  8103ac:	008103dc 	xori	r2,zero,1039
  8103b0:	008103d4 	movui	r2,1039
  8103b4:	008103d4 	movui	r2,1039
  8103b8:	008103d4 	movui	r2,1039
  8103bc:	008103d4 	movui	r2,1039
  8103c0:	008103d4 	movui	r2,1039
  8103c4:	008103dc 	xori	r2,zero,1039
  8103c8:	008103dc 	xori	r2,zero,1039
  8103cc:	008103d4 	movui	r2,1039
  8103d0:	008103d4 	movui	r2,1039
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  8103d4:	0009883a 	mov	r4,zero
  8103d8:	08100940 	call	810094 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  8103dc:	00800584 	movi	r2,22
  8103e0:	e0bfff15 	stw	r2,-4(fp)
  8103e4:	00000606 	br	810400 <kill+0xf4>
    }
  }

  else if (pid > 0)
  8103e8:	e0bffe17 	ldw	r2,-8(fp)
  8103ec:	0080040e 	bge	zero,r2,810400 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  8103f0:	008000c4 	movi	r2,3
  8103f4:	e0bfff15 	stw	r2,-4(fp)
  8103f8:	00000106 	br	810400 <kill+0xf4>
      break;
  8103fc:	0001883a 	nop
  }

  if (status)
  810400:	e0bfff17 	ldw	r2,-4(fp)
  810404:	10000626 	beq	r2,zero,810420 <kill+0x114>
  {
    ALT_ERRNO = status;
  810408:	08102d00 	call	8102d0 <alt_get_errno>
  81040c:	1007883a 	mov	r3,r2
  810410:	e0bfff17 	ldw	r2,-4(fp)
  810414:	18800015 	stw	r2,0(r3)
    return -1;
  810418:	00bfffc4 	movi	r2,-1
  81041c:	00000106 	br	810424 <kill+0x118>
  }

  return 0;
  810420:	0005883a 	mov	r2,zero
}
  810424:	e037883a 	mov	sp,fp
  810428:	dfc00117 	ldw	ra,4(sp)
  81042c:	df000017 	ldw	fp,0(sp)
  810430:	dec00204 	addi	sp,sp,8
  810434:	f800283a 	ret

00810438 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810438:	defffc04 	addi	sp,sp,-16
  81043c:	df000315 	stw	fp,12(sp)
  810440:	df000304 	addi	fp,sp,12
  810444:	e13fff15 	stw	r4,-4(fp)
  810448:	e17ffe15 	stw	r5,-8(fp)
  81044c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  810450:	e0fffe17 	ldw	r3,-8(fp)
  810454:	e0bfff17 	ldw	r2,-4(fp)
  810458:	18800c26 	beq	r3,r2,81048c <alt_load_section+0x54>
  {
    while( to != end )
  81045c:	00000806 	br	810480 <alt_load_section+0x48>
    {
      *to++ = *from++;
  810460:	e0ffff17 	ldw	r3,-4(fp)
  810464:	18800104 	addi	r2,r3,4
  810468:	e0bfff15 	stw	r2,-4(fp)
  81046c:	e0bffe17 	ldw	r2,-8(fp)
  810470:	11000104 	addi	r4,r2,4
  810474:	e13ffe15 	stw	r4,-8(fp)
  810478:	18c00017 	ldw	r3,0(r3)
  81047c:	10c00015 	stw	r3,0(r2)
    while( to != end )
  810480:	e0fffe17 	ldw	r3,-8(fp)
  810484:	e0bffd17 	ldw	r2,-12(fp)
  810488:	18bff51e 	bne	r3,r2,810460 <alt_load_section+0x28>
    }
  }
}
  81048c:	0001883a 	nop
  810490:	e037883a 	mov	sp,fp
  810494:	df000017 	ldw	fp,0(sp)
  810498:	dec00104 	addi	sp,sp,4
  81049c:	f800283a 	ret

008104a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8104a0:	defffe04 	addi	sp,sp,-8
  8104a4:	dfc00115 	stw	ra,4(sp)
  8104a8:	df000015 	stw	fp,0(sp)
  8104ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8104b0:	01802074 	movhi	r6,129
  8104b4:	31944604 	addi	r6,r6,20760
  8104b8:	01402074 	movhi	r5,129
  8104bc:	294d0804 	addi	r5,r5,13344
  8104c0:	01002074 	movhi	r4,129
  8104c4:	21144604 	addi	r4,r4,20760
  8104c8:	08104380 	call	810438 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8104cc:	01802034 	movhi	r6,128
  8104d0:	31808e04 	addi	r6,r6,568
  8104d4:	01402034 	movhi	r5,128
  8104d8:	29400804 	addi	r5,r5,32
  8104dc:	01002034 	movhi	r4,128
  8104e0:	21000804 	addi	r4,r4,32
  8104e4:	08104380 	call	810438 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8104e8:	01802074 	movhi	r6,129
  8104ec:	318d0804 	addi	r6,r6,13344
  8104f0:	01402074 	movhi	r5,129
  8104f4:	294a6704 	addi	r5,r5,10652
  8104f8:	01002074 	movhi	r4,129
  8104fc:	210a6704 	addi	r4,r4,10652
  810500:	08104380 	call	810438 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810504:	08118e00 	call	8118e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810508:	0811ad80 	call	811ad8 <alt_icache_flush_all>
}
  81050c:	0001883a 	nop
  810510:	e037883a 	mov	sp,fp
  810514:	dfc00117 	ldw	ra,4(sp)
  810518:	df000017 	ldw	fp,0(sp)
  81051c:	dec00204 	addi	sp,sp,8
  810520:	f800283a 	ret

00810524 <alt_get_errno>:
{
  810524:	defffe04 	addi	sp,sp,-8
  810528:	dfc00115 	stw	ra,4(sp)
  81052c:	df000015 	stw	fp,0(sp)
  810530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810534:	d0a01117 	ldw	r2,-32700(gp)
  810538:	10000326 	beq	r2,zero,810548 <alt_get_errno+0x24>
  81053c:	d0a01117 	ldw	r2,-32700(gp)
  810540:	103ee83a 	callr	r2
  810544:	00000106 	br	81054c <alt_get_errno+0x28>
  810548:	d0a75804 	addi	r2,gp,-25248
}
  81054c:	e037883a 	mov	sp,fp
  810550:	dfc00117 	ldw	ra,4(sp)
  810554:	df000017 	ldw	fp,0(sp)
  810558:	dec00204 	addi	sp,sp,8
  81055c:	f800283a 	ret

00810560 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810560:	defff904 	addi	sp,sp,-28
  810564:	dfc00615 	stw	ra,24(sp)
  810568:	df000515 	stw	fp,20(sp)
  81056c:	df000504 	addi	fp,sp,20
  810570:	e13ffd15 	stw	r4,-12(fp)
  810574:	e17ffc15 	stw	r5,-16(fp)
  810578:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81057c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810580:	e0bffd17 	ldw	r2,-12(fp)
  810584:	10000916 	blt	r2,zero,8105ac <lseek+0x4c>
  810588:	e0fffd17 	ldw	r3,-12(fp)
  81058c:	1805883a 	mov	r2,r3
  810590:	1085883a 	add	r2,r2,r2
  810594:	10c5883a 	add	r2,r2,r3
  810598:	100490ba 	slli	r2,r2,2
  81059c:	00c02074 	movhi	r3,129
  8105a0:	18cfb804 	addi	r3,r3,16096
  8105a4:	10c5883a 	add	r2,r2,r3
  8105a8:	00000106 	br	8105b0 <lseek+0x50>
  8105ac:	0005883a 	mov	r2,zero
  8105b0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  8105b4:	e0bffe17 	ldw	r2,-8(fp)
  8105b8:	10001026 	beq	r2,zero,8105fc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8105bc:	e0bffe17 	ldw	r2,-8(fp)
  8105c0:	10800017 	ldw	r2,0(r2)
  8105c4:	10800717 	ldw	r2,28(r2)
  8105c8:	10000926 	beq	r2,zero,8105f0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8105cc:	e0bffe17 	ldw	r2,-8(fp)
  8105d0:	10800017 	ldw	r2,0(r2)
  8105d4:	10800717 	ldw	r2,28(r2)
  8105d8:	e1bffb17 	ldw	r6,-20(fp)
  8105dc:	e17ffc17 	ldw	r5,-16(fp)
  8105e0:	e13ffe17 	ldw	r4,-8(fp)
  8105e4:	103ee83a 	callr	r2
  8105e8:	e0bfff15 	stw	r2,-4(fp)
  8105ec:	00000506 	br	810604 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8105f0:	00bfde84 	movi	r2,-134
  8105f4:	e0bfff15 	stw	r2,-4(fp)
  8105f8:	00000206 	br	810604 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  8105fc:	00bfebc4 	movi	r2,-81
  810600:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  810604:	e0bfff17 	ldw	r2,-4(fp)
  810608:	1000070e 	bge	r2,zero,810628 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  81060c:	08105240 	call	810524 <alt_get_errno>
  810610:	1007883a 	mov	r3,r2
  810614:	e0bfff17 	ldw	r2,-4(fp)
  810618:	0085c83a 	sub	r2,zero,r2
  81061c:	18800015 	stw	r2,0(r3)
    rc = -1;
  810620:	00bfffc4 	movi	r2,-1
  810624:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  810628:	e0bfff17 	ldw	r2,-4(fp)
}
  81062c:	e037883a 	mov	sp,fp
  810630:	dfc00117 	ldw	ra,4(sp)
  810634:	df000017 	ldw	fp,0(sp)
  810638:	dec00204 	addi	sp,sp,8
  81063c:	f800283a 	ret

00810640 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810640:	defffd04 	addi	sp,sp,-12
  810644:	dfc00215 	stw	ra,8(sp)
  810648:	df000115 	stw	fp,4(sp)
  81064c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810650:	0009883a 	mov	r4,zero
  810654:	0810b980 	call	810b98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  810658:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81065c:	0810bd40 	call	810bd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810660:	01802074 	movhi	r6,129
  810664:	318d0004 	addi	r6,r6,13312
  810668:	01402074 	movhi	r5,129
  81066c:	294d0004 	addi	r5,r5,13312
  810670:	01002074 	movhi	r4,129
  810674:	210d0004 	addi	r4,r4,13312
  810678:	0811e780 	call	811e78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81067c:	0811a100 	call	811a10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810680:	01002074 	movhi	r4,129
  810684:	21069d04 	addi	r4,r4,6772
  810688:	08126b40 	call	8126b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81068c:	d0a75917 	ldw	r2,-25244(gp)
  810690:	d0e75a17 	ldw	r3,-25240(gp)
  810694:	d1275b17 	ldw	r4,-25236(gp)
  810698:	200d883a 	mov	r6,r4
  81069c:	180b883a 	mov	r5,r3
  8106a0:	1009883a 	mov	r4,r2
  8106a4:	08003e00 	call	8003e0 <main>
  8106a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8106ac:	01000044 	movi	r4,1
  8106b0:	080ff8c0 	call	80ff8c <close>
  exit (result);
  8106b4:	e13fff17 	ldw	r4,-4(fp)
  8106b8:	08126c80 	call	8126c8 <exit>

008106bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8106bc:	defffe04 	addi	sp,sp,-8
  8106c0:	df000115 	stw	fp,4(sp)
  8106c4:	df000104 	addi	fp,sp,4
  8106c8:	e13fff15 	stw	r4,-4(fp)
}
  8106cc:	0001883a 	nop
  8106d0:	e037883a 	mov	sp,fp
  8106d4:	df000017 	ldw	fp,0(sp)
  8106d8:	dec00104 	addi	sp,sp,4
  8106dc:	f800283a 	ret

008106e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8106e0:	defffe04 	addi	sp,sp,-8
  8106e4:	df000115 	stw	fp,4(sp)
  8106e8:	df000104 	addi	fp,sp,4
  8106ec:	e13fff15 	stw	r4,-4(fp)
}
  8106f0:	0001883a 	nop
  8106f4:	e037883a 	mov	sp,fp
  8106f8:	df000017 	ldw	fp,0(sp)
  8106fc:	dec00104 	addi	sp,sp,4
  810700:	f800283a 	ret

00810704 <alt_get_errno>:
{
  810704:	defffe04 	addi	sp,sp,-8
  810708:	dfc00115 	stw	ra,4(sp)
  81070c:	df000015 	stw	fp,0(sp)
  810710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810714:	d0a01117 	ldw	r2,-32700(gp)
  810718:	10000326 	beq	r2,zero,810728 <alt_get_errno+0x24>
  81071c:	d0a01117 	ldw	r2,-32700(gp)
  810720:	103ee83a 	callr	r2
  810724:	00000106 	br	81072c <alt_get_errno+0x28>
  810728:	d0a75804 	addi	r2,gp,-25248
}
  81072c:	e037883a 	mov	sp,fp
  810730:	dfc00117 	ldw	ra,4(sp)
  810734:	df000017 	ldw	fp,0(sp)
  810738:	dec00204 	addi	sp,sp,8
  81073c:	f800283a 	ret

00810740 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810740:	defff904 	addi	sp,sp,-28
  810744:	dfc00615 	stw	ra,24(sp)
  810748:	df000515 	stw	fp,20(sp)
  81074c:	df000504 	addi	fp,sp,20
  810750:	e13ffd15 	stw	r4,-12(fp)
  810754:	e17ffc15 	stw	r5,-16(fp)
  810758:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81075c:	e0bffd17 	ldw	r2,-12(fp)
  810760:	10000916 	blt	r2,zero,810788 <read+0x48>
  810764:	e0fffd17 	ldw	r3,-12(fp)
  810768:	1805883a 	mov	r2,r3
  81076c:	1085883a 	add	r2,r2,r2
  810770:	10c5883a 	add	r2,r2,r3
  810774:	100490ba 	slli	r2,r2,2
  810778:	00c02074 	movhi	r3,129
  81077c:	18cfb804 	addi	r3,r3,16096
  810780:	10c5883a 	add	r2,r2,r3
  810784:	00000106 	br	81078c <read+0x4c>
  810788:	0005883a 	mov	r2,zero
  81078c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810790:	e0bfff17 	ldw	r2,-4(fp)
  810794:	10002226 	beq	r2,zero,810820 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810798:	e0bfff17 	ldw	r2,-4(fp)
  81079c:	10800217 	ldw	r2,8(r2)
  8107a0:	108000cc 	andi	r2,r2,3
  8107a4:	10800060 	cmpeqi	r2,r2,1
  8107a8:	1000181e 	bne	r2,zero,81080c <read+0xcc>
        (fd->dev->read))
  8107ac:	e0bfff17 	ldw	r2,-4(fp)
  8107b0:	10800017 	ldw	r2,0(r2)
  8107b4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8107b8:	10001426 	beq	r2,zero,81080c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8107bc:	e0bfff17 	ldw	r2,-4(fp)
  8107c0:	10800017 	ldw	r2,0(r2)
  8107c4:	10800517 	ldw	r2,20(r2)
  8107c8:	e0fffb17 	ldw	r3,-20(fp)
  8107cc:	180d883a 	mov	r6,r3
  8107d0:	e17ffc17 	ldw	r5,-16(fp)
  8107d4:	e13fff17 	ldw	r4,-4(fp)
  8107d8:	103ee83a 	callr	r2
  8107dc:	e0bffe15 	stw	r2,-8(fp)
  8107e0:	e0bffe17 	ldw	r2,-8(fp)
  8107e4:	1000070e 	bge	r2,zero,810804 <read+0xc4>
        {
          ALT_ERRNO = -rval;
  8107e8:	08107040 	call	810704 <alt_get_errno>
  8107ec:	1007883a 	mov	r3,r2
  8107f0:	e0bffe17 	ldw	r2,-8(fp)
  8107f4:	0085c83a 	sub	r2,zero,r2
  8107f8:	18800015 	stw	r2,0(r3)
          return -1;
  8107fc:	00bfffc4 	movi	r2,-1
  810800:	00000c06 	br	810834 <read+0xf4>
        }
        return rval;
  810804:	e0bffe17 	ldw	r2,-8(fp)
  810808:	00000a06 	br	810834 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81080c:	08107040 	call	810704 <alt_get_errno>
  810810:	1007883a 	mov	r3,r2
  810814:	00800344 	movi	r2,13
  810818:	18800015 	stw	r2,0(r3)
  81081c:	00000406 	br	810830 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  810820:	08107040 	call	810704 <alt_get_errno>
  810824:	1007883a 	mov	r3,r2
  810828:	00801444 	movi	r2,81
  81082c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810830:	00bfffc4 	movi	r2,-1
}
  810834:	e037883a 	mov	sp,fp
  810838:	dfc00117 	ldw	ra,4(sp)
  81083c:	df000017 	ldw	fp,0(sp)
  810840:	dec00204 	addi	sp,sp,8
  810844:	f800283a 	ret

00810848 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  810848:	defffe04 	addi	sp,sp,-8
  81084c:	df000115 	stw	fp,4(sp)
  810850:	df000104 	addi	fp,sp,4
  810854:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810858:	e0bfff17 	ldw	r2,-4(fp)
  81085c:	108000d0 	cmplti	r2,r2,3
  810860:	1000101e 	bne	r2,zero,8108a4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  810864:	e0ffff17 	ldw	r3,-4(fp)
  810868:	1805883a 	mov	r2,r3
  81086c:	1085883a 	add	r2,r2,r2
  810870:	10c5883a 	add	r2,r2,r3
  810874:	100490ba 	slli	r2,r2,2
  810878:	00c02074 	movhi	r3,129
  81087c:	10c7883a 	add	r3,r2,r3
  810880:	180fba15 	stw	zero,16104(r3)
    alt_fd_list[fd].dev      = 0;
  810884:	e0ffff17 	ldw	r3,-4(fp)
  810888:	1805883a 	mov	r2,r3
  81088c:	1085883a 	add	r2,r2,r2
  810890:	10c5883a 	add	r2,r2,r3
  810894:	100490ba 	slli	r2,r2,2
  810898:	00c02074 	movhi	r3,129
  81089c:	10c7883a 	add	r3,r2,r3
  8108a0:	180fb815 	stw	zero,16096(r3)
  }
}
  8108a4:	0001883a 	nop
  8108a8:	e037883a 	mov	sp,fp
  8108ac:	df000017 	ldw	fp,0(sp)
  8108b0:	dec00104 	addi	sp,sp,4
  8108b4:	f800283a 	ret

008108b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8108b8:	defff904 	addi	sp,sp,-28
  8108bc:	df000615 	stw	fp,24(sp)
  8108c0:	df000604 	addi	fp,sp,24
  8108c4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  8108c8:	0005303a 	rdctl	r2,status
  8108cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8108d0:	e0fffd17 	ldw	r3,-12(fp)
  8108d4:	00bfff84 	movi	r2,-2
  8108d8:	1884703a 	and	r2,r3,r2
  8108dc:	1001703a 	wrctl	status,r2
  return context;
  8108e0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8108e4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8108e8:	d0a01217 	ldw	r2,-32696(gp)
  8108ec:	10c000c4 	addi	r3,r2,3
  8108f0:	00bfff04 	movi	r2,-4
  8108f4:	1884703a 	and	r2,r3,r2
  8108f8:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8108fc:	d0e01217 	ldw	r3,-32696(gp)
  810900:	e0bffa17 	ldw	r2,-24(fp)
  810904:	1887883a 	add	r3,r3,r2
  810908:	00804034 	movhi	r2,256
  81090c:	10800004 	addi	r2,r2,0
  810910:	10c0072e 	bgeu	r2,r3,810930 <sbrk+0x78>
  810914:	e0bfff17 	ldw	r2,-4(fp)
  810918:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  81091c:	e0bffc17 	ldw	r2,-16(fp)
  810920:	1001703a 	wrctl	status,r2
}
  810924:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  810928:	00bfffc4 	movi	r2,-1
  81092c:	00000c06 	br	810960 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  810930:	d0a01217 	ldw	r2,-32696(gp)
  810934:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  810938:	d0e01217 	ldw	r3,-32696(gp)
  81093c:	e0bffa17 	ldw	r2,-24(fp)
  810940:	1885883a 	add	r2,r3,r2
  810944:	d0a01215 	stw	r2,-32696(gp)
  810948:	e0bfff17 	ldw	r2,-4(fp)
  81094c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  810950:	e0bffb17 	ldw	r2,-20(fp)
  810954:	1001703a 	wrctl	status,r2
}
  810958:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81095c:	e0bffe17 	ldw	r2,-8(fp)
} 
  810960:	e037883a 	mov	sp,fp
  810964:	df000017 	ldw	fp,0(sp)
  810968:	dec00104 	addi	sp,sp,4
  81096c:	f800283a 	ret

00810970 <alt_get_errno>:
{
  810970:	defffe04 	addi	sp,sp,-8
  810974:	dfc00115 	stw	ra,4(sp)
  810978:	df000015 	stw	fp,0(sp)
  81097c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810980:	d0a01117 	ldw	r2,-32700(gp)
  810984:	10000326 	beq	r2,zero,810994 <alt_get_errno+0x24>
  810988:	d0a01117 	ldw	r2,-32700(gp)
  81098c:	103ee83a 	callr	r2
  810990:	00000106 	br	810998 <alt_get_errno+0x28>
  810994:	d0a75804 	addi	r2,gp,-25248
}
  810998:	e037883a 	mov	sp,fp
  81099c:	dfc00117 	ldw	ra,4(sp)
  8109a0:	df000017 	ldw	fp,0(sp)
  8109a4:	dec00204 	addi	sp,sp,8
  8109a8:	f800283a 	ret

008109ac <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  8109ac:	defffc04 	addi	sp,sp,-16
  8109b0:	dfc00315 	stw	ra,12(sp)
  8109b4:	df000215 	stw	fp,8(sp)
  8109b8:	df000204 	addi	fp,sp,8
  8109bc:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8109c0:	d0a75e17 	ldw	r2,-25224(gp)
  clock_t ticks = alt_nticks(); 
  8109c4:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
  8109c8:	d0a75d17 	ldw	r2,-25228(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8109cc:	1000061e 	bne	r2,zero,8109e8 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  8109d0:	08109700 	call	810970 <alt_get_errno>
  8109d4:	1007883a 	mov	r3,r2
  8109d8:	00801604 	movi	r2,88
  8109dc:	18800015 	stw	r2,0(r3)
    return 0;
  8109e0:	0005883a 	mov	r2,zero
  8109e4:	00000a06 	br	810a10 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  8109e8:	e0bffe17 	ldw	r2,-8(fp)
  8109ec:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  8109f0:	e0bffe17 	ldw	r2,-8(fp)
  8109f4:	e0ffff17 	ldw	r3,-4(fp)
  8109f8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  8109fc:	e0bffe17 	ldw	r2,-8(fp)
  810a00:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  810a04:	e0bffe17 	ldw	r2,-8(fp)
  810a08:	10000315 	stw	zero,12(r2)

  return ticks;
  810a0c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a10:	e037883a 	mov	sp,fp
  810a14:	dfc00117 	ldw	ra,4(sp)
  810a18:	df000017 	ldw	fp,0(sp)
  810a1c:	dec00204 	addi	sp,sp,8
  810a20:	f800283a 	ret

00810a24 <alt_get_errno>:
{
  810a24:	defffe04 	addi	sp,sp,-8
  810a28:	dfc00115 	stw	ra,4(sp)
  810a2c:	df000015 	stw	fp,0(sp)
  810a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810a34:	d0a01117 	ldw	r2,-32700(gp)
  810a38:	10000326 	beq	r2,zero,810a48 <alt_get_errno+0x24>
  810a3c:	d0a01117 	ldw	r2,-32700(gp)
  810a40:	103ee83a 	callr	r2
  810a44:	00000106 	br	810a4c <alt_get_errno+0x28>
  810a48:	d0a75804 	addi	r2,gp,-25248
}
  810a4c:	e037883a 	mov	sp,fp
  810a50:	dfc00117 	ldw	ra,4(sp)
  810a54:	df000017 	ldw	fp,0(sp)
  810a58:	dec00204 	addi	sp,sp,8
  810a5c:	f800283a 	ret

00810a60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810a60:	defff904 	addi	sp,sp,-28
  810a64:	dfc00615 	stw	ra,24(sp)
  810a68:	df000515 	stw	fp,20(sp)
  810a6c:	df000504 	addi	fp,sp,20
  810a70:	e13ffd15 	stw	r4,-12(fp)
  810a74:	e17ffc15 	stw	r5,-16(fp)
  810a78:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810a7c:	e0bffd17 	ldw	r2,-12(fp)
  810a80:	10000916 	blt	r2,zero,810aa8 <write+0x48>
  810a84:	e0fffd17 	ldw	r3,-12(fp)
  810a88:	1805883a 	mov	r2,r3
  810a8c:	1085883a 	add	r2,r2,r2
  810a90:	10c5883a 	add	r2,r2,r3
  810a94:	100490ba 	slli	r2,r2,2
  810a98:	00c02074 	movhi	r3,129
  810a9c:	18cfb804 	addi	r3,r3,16096
  810aa0:	10c5883a 	add	r2,r2,r3
  810aa4:	00000106 	br	810aac <write+0x4c>
  810aa8:	0005883a 	mov	r2,zero
  810aac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810ab0:	e0bfff17 	ldw	r2,-4(fp)
  810ab4:	10002126 	beq	r2,zero,810b3c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810ab8:	e0bfff17 	ldw	r2,-4(fp)
  810abc:	10800217 	ldw	r2,8(r2)
  810ac0:	108000cc 	andi	r2,r2,3
  810ac4:	10001826 	beq	r2,zero,810b28 <write+0xc8>
  810ac8:	e0bfff17 	ldw	r2,-4(fp)
  810acc:	10800017 	ldw	r2,0(r2)
  810ad0:	10800617 	ldw	r2,24(r2)
  810ad4:	10001426 	beq	r2,zero,810b28 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  810ad8:	e0bfff17 	ldw	r2,-4(fp)
  810adc:	10800017 	ldw	r2,0(r2)
  810ae0:	10800617 	ldw	r2,24(r2)
  810ae4:	e0fffb17 	ldw	r3,-20(fp)
  810ae8:	180d883a 	mov	r6,r3
  810aec:	e17ffc17 	ldw	r5,-16(fp)
  810af0:	e13fff17 	ldw	r4,-4(fp)
  810af4:	103ee83a 	callr	r2
  810af8:	e0bffe15 	stw	r2,-8(fp)
  810afc:	e0bffe17 	ldw	r2,-8(fp)
  810b00:	1000070e 	bge	r2,zero,810b20 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  810b04:	0810a240 	call	810a24 <alt_get_errno>
  810b08:	1007883a 	mov	r3,r2
  810b0c:	e0bffe17 	ldw	r2,-8(fp)
  810b10:	0085c83a 	sub	r2,zero,r2
  810b14:	18800015 	stw	r2,0(r3)
        return -1;
  810b18:	00bfffc4 	movi	r2,-1
  810b1c:	00000c06 	br	810b50 <write+0xf0>
      }
      return rval;
  810b20:	e0bffe17 	ldw	r2,-8(fp)
  810b24:	00000a06 	br	810b50 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810b28:	0810a240 	call	810a24 <alt_get_errno>
  810b2c:	1007883a 	mov	r3,r2
  810b30:	00800344 	movi	r2,13
  810b34:	18800015 	stw	r2,0(r3)
  810b38:	00000406 	br	810b4c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810b3c:	0810a240 	call	810a24 <alt_get_errno>
  810b40:	1007883a 	mov	r3,r2
  810b44:	00801444 	movi	r2,81
  810b48:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810b4c:	00bfffc4 	movi	r2,-1
}
  810b50:	e037883a 	mov	sp,fp
  810b54:	dfc00117 	ldw	ra,4(sp)
  810b58:	df000017 	ldw	fp,0(sp)
  810b5c:	dec00204 	addi	sp,sp,8
  810b60:	f800283a 	ret

00810b64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810b64:	defffd04 	addi	sp,sp,-12
  810b68:	dfc00215 	stw	ra,8(sp)
  810b6c:	df000115 	stw	fp,4(sp)
  810b70:	df000104 	addi	fp,sp,4
  810b74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  810b78:	d1600e04 	addi	r5,gp,-32712
  810b7c:	e13fff17 	ldw	r4,-4(fp)
  810b80:	08119680 	call	811968 <alt_dev_llist_insert>
}
  810b84:	e037883a 	mov	sp,fp
  810b88:	dfc00117 	ldw	ra,4(sp)
  810b8c:	df000017 	ldw	fp,0(sp)
  810b90:	dec00204 	addi	sp,sp,8
  810b94:	f800283a 	ret

00810b98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810b98:	defffd04 	addi	sp,sp,-12
  810b9c:	dfc00215 	stw	ra,8(sp)
  810ba0:	df000115 	stw	fp,4(sp)
  810ba4:	df000104 	addi	fp,sp,4
  810ba8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  810bac:	08123180 	call	812318 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810bb0:	00800044 	movi	r2,1
  810bb4:	1001703a 	wrctl	status,r2
}
  810bb8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  810bbc:	0001883a 	nop
  810bc0:	e037883a 	mov	sp,fp
  810bc4:	dfc00117 	ldw	ra,4(sp)
  810bc8:	df000017 	ldw	fp,0(sp)
  810bcc:	dec00204 	addi	sp,sp,8
  810bd0:	f800283a 	ret

00810bd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810bd4:	defffe04 	addi	sp,sp,-8
  810bd8:	dfc00115 	stw	ra,4(sp)
  810bdc:	df000015 	stw	fp,0(sp)
  810be0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  810be4:	01c0fa04 	movi	r7,1000
  810be8:	01800044 	movi	r6,1
  810bec:	000b883a 	mov	r5,zero
  810bf0:	01004034 	movhi	r4,256
  810bf4:	21040004 	addi	r4,r4,4096
  810bf8:	08117280 	call	811728 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810bfc:	01800404 	movi	r6,16
  810c00:	000b883a 	mov	r5,zero
  810c04:	01002074 	movhi	r4,129
  810c08:	21102204 	addi	r4,r4,16520
  810c0c:	0810d9c0 	call	810d9c <altera_avalon_jtag_uart_init>
  810c10:	01002074 	movhi	r4,129
  810c14:	21101804 	addi	r4,r4,16480
  810c18:	0810b640 	call	810b64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  810c1c:	0001883a 	nop
}
  810c20:	0001883a 	nop
  810c24:	e037883a 	mov	sp,fp
  810c28:	dfc00117 	ldw	ra,4(sp)
  810c2c:	df000017 	ldw	fp,0(sp)
  810c30:	dec00204 	addi	sp,sp,8
  810c34:	f800283a 	ret

00810c38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810c38:	defffa04 	addi	sp,sp,-24
  810c3c:	dfc00515 	stw	ra,20(sp)
  810c40:	df000415 	stw	fp,16(sp)
  810c44:	df000404 	addi	fp,sp,16
  810c48:	e13ffe15 	stw	r4,-8(fp)
  810c4c:	e17ffd15 	stw	r5,-12(fp)
  810c50:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810c54:	e0bffe17 	ldw	r2,-8(fp)
  810c58:	10800017 	ldw	r2,0(r2)
  810c5c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810c60:	e0bfff17 	ldw	r2,-4(fp)
  810c64:	10c00a04 	addi	r3,r2,40
  810c68:	e0bffe17 	ldw	r2,-8(fp)
  810c6c:	10800217 	ldw	r2,8(r2)
  810c70:	100f883a 	mov	r7,r2
  810c74:	e1bffc17 	ldw	r6,-16(fp)
  810c78:	e17ffd17 	ldw	r5,-12(fp)
  810c7c:	1809883a 	mov	r4,r3
  810c80:	08112640 	call	811264 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810c84:	e037883a 	mov	sp,fp
  810c88:	dfc00117 	ldw	ra,4(sp)
  810c8c:	df000017 	ldw	fp,0(sp)
  810c90:	dec00204 	addi	sp,sp,8
  810c94:	f800283a 	ret

00810c98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810c98:	defffa04 	addi	sp,sp,-24
  810c9c:	dfc00515 	stw	ra,20(sp)
  810ca0:	df000415 	stw	fp,16(sp)
  810ca4:	df000404 	addi	fp,sp,16
  810ca8:	e13ffe15 	stw	r4,-8(fp)
  810cac:	e17ffd15 	stw	r5,-12(fp)
  810cb0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810cb4:	e0bffe17 	ldw	r2,-8(fp)
  810cb8:	10800017 	ldw	r2,0(r2)
  810cbc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810cc0:	e0bfff17 	ldw	r2,-4(fp)
  810cc4:	10c00a04 	addi	r3,r2,40
  810cc8:	e0bffe17 	ldw	r2,-8(fp)
  810ccc:	10800217 	ldw	r2,8(r2)
  810cd0:	100f883a 	mov	r7,r2
  810cd4:	e1bffc17 	ldw	r6,-16(fp)
  810cd8:	e17ffd17 	ldw	r5,-12(fp)
  810cdc:	1809883a 	mov	r4,r3
  810ce0:	08114840 	call	811484 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810ce4:	e037883a 	mov	sp,fp
  810ce8:	dfc00117 	ldw	ra,4(sp)
  810cec:	df000017 	ldw	fp,0(sp)
  810cf0:	dec00204 	addi	sp,sp,8
  810cf4:	f800283a 	ret

00810cf8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810cf8:	defffc04 	addi	sp,sp,-16
  810cfc:	dfc00315 	stw	ra,12(sp)
  810d00:	df000215 	stw	fp,8(sp)
  810d04:	df000204 	addi	fp,sp,8
  810d08:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810d0c:	e0bffe17 	ldw	r2,-8(fp)
  810d10:	10800017 	ldw	r2,0(r2)
  810d14:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810d18:	e0bfff17 	ldw	r2,-4(fp)
  810d1c:	10c00a04 	addi	r3,r2,40
  810d20:	e0bffe17 	ldw	r2,-8(fp)
  810d24:	10800217 	ldw	r2,8(r2)
  810d28:	100b883a 	mov	r5,r2
  810d2c:	1809883a 	mov	r4,r3
  810d30:	08111080 	call	811108 <altera_avalon_jtag_uart_close>
}
  810d34:	e037883a 	mov	sp,fp
  810d38:	dfc00117 	ldw	ra,4(sp)
  810d3c:	df000017 	ldw	fp,0(sp)
  810d40:	dec00204 	addi	sp,sp,8
  810d44:	f800283a 	ret

00810d48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810d48:	defffa04 	addi	sp,sp,-24
  810d4c:	dfc00515 	stw	ra,20(sp)
  810d50:	df000415 	stw	fp,16(sp)
  810d54:	df000404 	addi	fp,sp,16
  810d58:	e13ffe15 	stw	r4,-8(fp)
  810d5c:	e17ffd15 	stw	r5,-12(fp)
  810d60:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810d64:	e0bffe17 	ldw	r2,-8(fp)
  810d68:	10800017 	ldw	r2,0(r2)
  810d6c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810d70:	e0bfff17 	ldw	r2,-4(fp)
  810d74:	10800a04 	addi	r2,r2,40
  810d78:	e1bffc17 	ldw	r6,-16(fp)
  810d7c:	e17ffd17 	ldw	r5,-12(fp)
  810d80:	1009883a 	mov	r4,r2
  810d84:	08111700 	call	811170 <altera_avalon_jtag_uart_ioctl>
}
  810d88:	e037883a 	mov	sp,fp
  810d8c:	dfc00117 	ldw	ra,4(sp)
  810d90:	df000017 	ldw	fp,0(sp)
  810d94:	dec00204 	addi	sp,sp,8
  810d98:	f800283a 	ret

00810d9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810d9c:	defffa04 	addi	sp,sp,-24
  810da0:	dfc00515 	stw	ra,20(sp)
  810da4:	df000415 	stw	fp,16(sp)
  810da8:	df000404 	addi	fp,sp,16
  810dac:	e13fff15 	stw	r4,-4(fp)
  810db0:	e17ffe15 	stw	r5,-8(fp)
  810db4:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810db8:	e0bfff17 	ldw	r2,-4(fp)
  810dbc:	00c00044 	movi	r3,1
  810dc0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810dc4:	e0bfff17 	ldw	r2,-4(fp)
  810dc8:	10800017 	ldw	r2,0(r2)
  810dcc:	10800104 	addi	r2,r2,4
  810dd0:	1007883a 	mov	r3,r2
  810dd4:	e0bfff17 	ldw	r2,-4(fp)
  810dd8:	10800817 	ldw	r2,32(r2)
  810ddc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810de0:	e0bffe17 	ldw	r2,-8(fp)
  810de4:	e0fffd17 	ldw	r3,-12(fp)
  810de8:	d8000015 	stw	zero,0(sp)
  810dec:	e1ffff17 	ldw	r7,-4(fp)
  810df0:	01802074 	movhi	r6,129
  810df4:	31839704 	addi	r6,r6,3676
  810df8:	180b883a 	mov	r5,r3
  810dfc:	1009883a 	mov	r4,r2
  810e00:	0811b0c0 	call	811b0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810e04:	e0bfff17 	ldw	r2,-4(fp)
  810e08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810e0c:	e0bfff17 	ldw	r2,-4(fp)
  810e10:	10800204 	addi	r2,r2,8
  810e14:	d0e75d17 	ldw	r3,-25228(gp)
  810e18:	e1ffff17 	ldw	r7,-4(fp)
  810e1c:	01802074 	movhi	r6,129
  810e20:	31841a04 	addi	r6,r6,4200
  810e24:	180b883a 	mov	r5,r3
  810e28:	1009883a 	mov	r4,r2
  810e2c:	08117ac0 	call	8117ac <alt_alarm_start>
  810e30:	1000040e 	bge	r2,zero,810e44 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810e34:	e0ffff17 	ldw	r3,-4(fp)
  810e38:	00a00034 	movhi	r2,32768
  810e3c:	10bfffc4 	addi	r2,r2,-1
  810e40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810e44:	0001883a 	nop
  810e48:	e037883a 	mov	sp,fp
  810e4c:	dfc00117 	ldw	ra,4(sp)
  810e50:	df000017 	ldw	fp,0(sp)
  810e54:	dec00204 	addi	sp,sp,8
  810e58:	f800283a 	ret

00810e5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810e5c:	defff804 	addi	sp,sp,-32
  810e60:	df000715 	stw	fp,28(sp)
  810e64:	df000704 	addi	fp,sp,28
  810e68:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810e6c:	e0bff917 	ldw	r2,-28(fp)
  810e70:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  810e74:	e0bffd17 	ldw	r2,-12(fp)
  810e78:	10800017 	ldw	r2,0(r2)
  810e7c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e80:	e0bffc17 	ldw	r2,-16(fp)
  810e84:	10800104 	addi	r2,r2,4
  810e88:	10800037 	ldwio	r2,0(r2)
  810e8c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810e90:	e0bffb17 	ldw	r2,-20(fp)
  810e94:	1080c00c 	andi	r2,r2,768
  810e98:	10006d26 	beq	r2,zero,811050 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810e9c:	e0bffb17 	ldw	r2,-20(fp)
  810ea0:	1080400c 	andi	r2,r2,256
  810ea4:	10003526 	beq	r2,zero,810f7c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810ea8:	00800074 	movhi	r2,1
  810eac:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	10800a17 	ldw	r2,40(r2)
  810eb8:	10800044 	addi	r2,r2,1
  810ebc:	1081ffcc 	andi	r2,r2,2047
  810ec0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  810ec4:	e0bffd17 	ldw	r2,-12(fp)
  810ec8:	10800b17 	ldw	r2,44(r2)
  810ecc:	e0fffa17 	ldw	r3,-24(fp)
  810ed0:	18801526 	beq	r3,r2,810f28 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810ed4:	e0bffc17 	ldw	r2,-16(fp)
  810ed8:	10800037 	ldwio	r2,0(r2)
  810edc:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810ee0:	e0bfff17 	ldw	r2,-4(fp)
  810ee4:	10a0000c 	andi	r2,r2,32768
  810ee8:	10001126 	beq	r2,zero,810f30 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810eec:	e0bffd17 	ldw	r2,-12(fp)
  810ef0:	10800a17 	ldw	r2,40(r2)
  810ef4:	e0ffff17 	ldw	r3,-4(fp)
  810ef8:	1809883a 	mov	r4,r3
  810efc:	e0fffd17 	ldw	r3,-12(fp)
  810f00:	1885883a 	add	r2,r3,r2
  810f04:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810f08:	e0bffd17 	ldw	r2,-12(fp)
  810f0c:	10800a17 	ldw	r2,40(r2)
  810f10:	10800044 	addi	r2,r2,1
  810f14:	10c1ffcc 	andi	r3,r2,2047
  810f18:	e0bffd17 	ldw	r2,-12(fp)
  810f1c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810f20:	0001883a 	nop
      {
  810f24:	003fe206 	br	810eb0 <altera_avalon_jtag_uart_irq+0x54>
          break;
  810f28:	0001883a 	nop
  810f2c:	00000106 	br	810f34 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  810f30:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810f34:	e0bfff17 	ldw	r2,-4(fp)
  810f38:	10bfffec 	andhi	r2,r2,65535
  810f3c:	10000f26 	beq	r2,zero,810f7c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810f40:	e0bffd17 	ldw	r2,-12(fp)
  810f44:	10c00817 	ldw	r3,32(r2)
  810f48:	00bfff84 	movi	r2,-2
  810f4c:	1886703a 	and	r3,r3,r2
  810f50:	e0bffd17 	ldw	r2,-12(fp)
  810f54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810f58:	e0bffc17 	ldw	r2,-16(fp)
  810f5c:	10800104 	addi	r2,r2,4
  810f60:	1007883a 	mov	r3,r2
  810f64:	e0bffd17 	ldw	r2,-12(fp)
  810f68:	10800817 	ldw	r2,32(r2)
  810f6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810f70:	e0bffc17 	ldw	r2,-16(fp)
  810f74:	10800104 	addi	r2,r2,4
  810f78:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810f7c:	e0bffb17 	ldw	r2,-20(fp)
  810f80:	1080800c 	andi	r2,r2,512
  810f84:	103fbe26 	beq	r2,zero,810e80 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810f88:	e0bffb17 	ldw	r2,-20(fp)
  810f8c:	1004d43a 	srli	r2,r2,16
  810f90:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810f94:	00001406 	br	810fe8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810f98:	e0bffc17 	ldw	r2,-16(fp)
  810f9c:	e0fffd17 	ldw	r3,-12(fp)
  810fa0:	18c00d17 	ldw	r3,52(r3)
  810fa4:	e13ffd17 	ldw	r4,-12(fp)
  810fa8:	20c7883a 	add	r3,r4,r3
  810fac:	18c20e03 	ldbu	r3,2104(r3)
  810fb0:	18c03fcc 	andi	r3,r3,255
  810fb4:	18c0201c 	xori	r3,r3,128
  810fb8:	18ffe004 	addi	r3,r3,-128
  810fbc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810fc0:	e0bffd17 	ldw	r2,-12(fp)
  810fc4:	10800d17 	ldw	r2,52(r2)
  810fc8:	10800044 	addi	r2,r2,1
  810fcc:	10c1ffcc 	andi	r3,r2,2047
  810fd0:	e0bffd17 	ldw	r2,-12(fp)
  810fd4:	10c00d15 	stw	r3,52(r2)
  810fd8:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810fdc:	e0bffe17 	ldw	r2,-8(fp)
  810fe0:	10bfffc4 	addi	r2,r2,-1
  810fe4:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  810fe8:	e0bffe17 	ldw	r2,-8(fp)
  810fec:	10000526 	beq	r2,zero,811004 <altera_avalon_jtag_uart_irq+0x1a8>
  810ff0:	e0bffd17 	ldw	r2,-12(fp)
  810ff4:	10c00d17 	ldw	r3,52(r2)
  810ff8:	e0bffd17 	ldw	r2,-12(fp)
  810ffc:	10800c17 	ldw	r2,48(r2)
  811000:	18bfe51e 	bne	r3,r2,810f98 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  811004:	e0bffe17 	ldw	r2,-8(fp)
  811008:	103f9d26 	beq	r2,zero,810e80 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81100c:	e0bffd17 	ldw	r2,-12(fp)
  811010:	10c00817 	ldw	r3,32(r2)
  811014:	00bfff44 	movi	r2,-3
  811018:	1886703a 	and	r3,r3,r2
  81101c:	e0bffd17 	ldw	r2,-12(fp)
  811020:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811024:	e0bffd17 	ldw	r2,-12(fp)
  811028:	10800017 	ldw	r2,0(r2)
  81102c:	10800104 	addi	r2,r2,4
  811030:	1007883a 	mov	r3,r2
  811034:	e0bffd17 	ldw	r2,-12(fp)
  811038:	10800817 	ldw	r2,32(r2)
  81103c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811040:	e0bffc17 	ldw	r2,-16(fp)
  811044:	10800104 	addi	r2,r2,4
  811048:	10800037 	ldwio	r2,0(r2)
  {
  81104c:	003f8c06 	br	810e80 <altera_avalon_jtag_uart_irq+0x24>
      break;
  811050:	0001883a 	nop
      }
    }
  }
}
  811054:	0001883a 	nop
  811058:	e037883a 	mov	sp,fp
  81105c:	df000017 	ldw	fp,0(sp)
  811060:	dec00104 	addi	sp,sp,4
  811064:	f800283a 	ret

00811068 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811068:	defffc04 	addi	sp,sp,-16
  81106c:	df000315 	stw	fp,12(sp)
  811070:	df000304 	addi	fp,sp,12
  811074:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811078:	e0bffd17 	ldw	r2,-12(fp)
  81107c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811080:	e0bfff17 	ldw	r2,-4(fp)
  811084:	10800017 	ldw	r2,0(r2)
  811088:	10800104 	addi	r2,r2,4
  81108c:	10800037 	ldwio	r2,0(r2)
  811090:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811094:	e0bffe17 	ldw	r2,-8(fp)
  811098:	1081000c 	andi	r2,r2,1024
  81109c:	10000b26 	beq	r2,zero,8110cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8110a0:	e0bfff17 	ldw	r2,-4(fp)
  8110a4:	10800017 	ldw	r2,0(r2)
  8110a8:	10800104 	addi	r2,r2,4
  8110ac:	1007883a 	mov	r3,r2
  8110b0:	e0bfff17 	ldw	r2,-4(fp)
  8110b4:	10800817 	ldw	r2,32(r2)
  8110b8:	10810014 	ori	r2,r2,1024
  8110bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8110c0:	e0bfff17 	ldw	r2,-4(fp)
  8110c4:	10000915 	stw	zero,36(r2)
  8110c8:	00000a06 	br	8110f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8110cc:	e0bfff17 	ldw	r2,-4(fp)
  8110d0:	10c00917 	ldw	r3,36(r2)
  8110d4:	00a00034 	movhi	r2,32768
  8110d8:	10bfff04 	addi	r2,r2,-4
  8110dc:	10c00536 	bltu	r2,r3,8110f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8110e0:	e0bfff17 	ldw	r2,-4(fp)
  8110e4:	10800917 	ldw	r2,36(r2)
  8110e8:	10c00044 	addi	r3,r2,1
  8110ec:	e0bfff17 	ldw	r2,-4(fp)
  8110f0:	10c00915 	stw	r3,36(r2)
  8110f4:	d0a75d17 	ldw	r2,-25228(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8110f8:	e037883a 	mov	sp,fp
  8110fc:	df000017 	ldw	fp,0(sp)
  811100:	dec00104 	addi	sp,sp,4
  811104:	f800283a 	ret

00811108 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811108:	defffd04 	addi	sp,sp,-12
  81110c:	df000215 	stw	fp,8(sp)
  811110:	df000204 	addi	fp,sp,8
  811114:	e13fff15 	stw	r4,-4(fp)
  811118:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81111c:	00000506 	br	811134 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811120:	e0bffe17 	ldw	r2,-8(fp)
  811124:	1090000c 	andi	r2,r2,16384
  811128:	10000226 	beq	r2,zero,811134 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81112c:	00bffd44 	movi	r2,-11
  811130:	00000b06 	br	811160 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811134:	e0bfff17 	ldw	r2,-4(fp)
  811138:	10c00d17 	ldw	r3,52(r2)
  81113c:	e0bfff17 	ldw	r2,-4(fp)
  811140:	10800c17 	ldw	r2,48(r2)
  811144:	18800526 	beq	r3,r2,81115c <altera_avalon_jtag_uart_close+0x54>
  811148:	e0bfff17 	ldw	r2,-4(fp)
  81114c:	10c00917 	ldw	r3,36(r2)
  811150:	e0bfff17 	ldw	r2,-4(fp)
  811154:	10800117 	ldw	r2,4(r2)
  811158:	18bff136 	bltu	r3,r2,811120 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  81115c:	0005883a 	mov	r2,zero
}
  811160:	e037883a 	mov	sp,fp
  811164:	df000017 	ldw	fp,0(sp)
  811168:	dec00104 	addi	sp,sp,4
  81116c:	f800283a 	ret

00811170 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811170:	defffa04 	addi	sp,sp,-24
  811174:	df000515 	stw	fp,20(sp)
  811178:	df000504 	addi	fp,sp,20
  81117c:	e13ffd15 	stw	r4,-12(fp)
  811180:	e17ffc15 	stw	r5,-16(fp)
  811184:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  811188:	00bff9c4 	movi	r2,-25
  81118c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  811190:	e0bffc17 	ldw	r2,-16(fp)
  811194:	109a8060 	cmpeqi	r2,r2,27137
  811198:	1000041e 	bne	r2,zero,8111ac <altera_avalon_jtag_uart_ioctl+0x3c>
  81119c:	e0bffc17 	ldw	r2,-16(fp)
  8111a0:	109a80a0 	cmpeqi	r2,r2,27138
  8111a4:	1000181e 	bne	r2,zero,811208 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  8111a8:	00002906 	br	811250 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  8111ac:	e0bffd17 	ldw	r2,-12(fp)
  8111b0:	10c00117 	ldw	r3,4(r2)
  8111b4:	00a00034 	movhi	r2,32768
  8111b8:	10bfffc4 	addi	r2,r2,-1
  8111bc:	18802126 	beq	r3,r2,811244 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  8111c0:	e0bffb17 	ldw	r2,-20(fp)
  8111c4:	10800017 	ldw	r2,0(r2)
  8111c8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8111cc:	e0bffe17 	ldw	r2,-8(fp)
  8111d0:	10800090 	cmplti	r2,r2,2
  8111d4:	1000061e 	bne	r2,zero,8111f0 <altera_avalon_jtag_uart_ioctl+0x80>
  8111d8:	e0fffe17 	ldw	r3,-8(fp)
  8111dc:	00a00034 	movhi	r2,32768
  8111e0:	10bfffc4 	addi	r2,r2,-1
  8111e4:	18800226 	beq	r3,r2,8111f0 <altera_avalon_jtag_uart_ioctl+0x80>
  8111e8:	e0bffe17 	ldw	r2,-8(fp)
  8111ec:	00000206 	br	8111f8 <altera_avalon_jtag_uart_ioctl+0x88>
  8111f0:	00a00034 	movhi	r2,32768
  8111f4:	10bfff84 	addi	r2,r2,-2
  8111f8:	e0fffd17 	ldw	r3,-12(fp)
  8111fc:	18800115 	stw	r2,4(r3)
      rc = 0;
  811200:	e03fff15 	stw	zero,-4(fp)
    break;
  811204:	00000f06 	br	811244 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  811208:	e0bffd17 	ldw	r2,-12(fp)
  81120c:	10c00117 	ldw	r3,4(r2)
  811210:	00a00034 	movhi	r2,32768
  811214:	10bfffc4 	addi	r2,r2,-1
  811218:	18800c26 	beq	r3,r2,81124c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81121c:	e0bffd17 	ldw	r2,-12(fp)
  811220:	10c00917 	ldw	r3,36(r2)
  811224:	e0bffd17 	ldw	r2,-12(fp)
  811228:	10800117 	ldw	r2,4(r2)
  81122c:	1885803a 	cmpltu	r2,r3,r2
  811230:	10c03fcc 	andi	r3,r2,255
  811234:	e0bffb17 	ldw	r2,-20(fp)
  811238:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81123c:	e03fff15 	stw	zero,-4(fp)
    break;
  811240:	00000206 	br	81124c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  811244:	0001883a 	nop
  811248:	00000106 	br	811250 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  81124c:	0001883a 	nop
  }

  return rc;
  811250:	e0bfff17 	ldw	r2,-4(fp)
}
  811254:	e037883a 	mov	sp,fp
  811258:	df000017 	ldw	fp,0(sp)
  81125c:	dec00104 	addi	sp,sp,4
  811260:	f800283a 	ret

00811264 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811264:	defff304 	addi	sp,sp,-52
  811268:	dfc00c15 	stw	ra,48(sp)
  81126c:	df000b15 	stw	fp,44(sp)
  811270:	df000b04 	addi	fp,sp,44
  811274:	e13ff815 	stw	r4,-32(fp)
  811278:	e17ff715 	stw	r5,-36(fp)
  81127c:	e1bff615 	stw	r6,-40(fp)
  811280:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  811284:	e0bff717 	ldw	r2,-36(fp)
  811288:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81128c:	00004706 	br	8113ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811290:	e0bff817 	ldw	r2,-32(fp)
  811294:	10800a17 	ldw	r2,40(r2)
  811298:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  81129c:	e0bff817 	ldw	r2,-32(fp)
  8112a0:	10800b17 	ldw	r2,44(r2)
  8112a4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  8112a8:	e0fffd17 	ldw	r3,-12(fp)
  8112ac:	e0bffc17 	ldw	r2,-16(fp)
  8112b0:	18800536 	bltu	r3,r2,8112c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8112b4:	e0fffd17 	ldw	r3,-12(fp)
  8112b8:	e0bffc17 	ldw	r2,-16(fp)
  8112bc:	1885c83a 	sub	r2,r3,r2
  8112c0:	e0bffe15 	stw	r2,-8(fp)
  8112c4:	00000406 	br	8112d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8112c8:	00c20004 	movi	r3,2048
  8112cc:	e0bffc17 	ldw	r2,-16(fp)
  8112d0:	1885c83a 	sub	r2,r3,r2
  8112d4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  8112d8:	e0bffe17 	ldw	r2,-8(fp)
  8112dc:	10001e26 	beq	r2,zero,811358 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8112e0:	e0fff617 	ldw	r3,-40(fp)
  8112e4:	e0bffe17 	ldw	r2,-8(fp)
  8112e8:	1880022e 	bgeu	r3,r2,8112f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8112ec:	e0bff617 	ldw	r2,-40(fp)
  8112f0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8112f4:	e0bff817 	ldw	r2,-32(fp)
  8112f8:	10c00e04 	addi	r3,r2,56
  8112fc:	e0bffc17 	ldw	r2,-16(fp)
  811300:	1885883a 	add	r2,r3,r2
  811304:	e1bffe17 	ldw	r6,-8(fp)
  811308:	100b883a 	mov	r5,r2
  81130c:	e13fff17 	ldw	r4,-4(fp)
  811310:	08078fc0 	call	8078fc <memcpy>
      ptr   += n;
  811314:	e0ffff17 	ldw	r3,-4(fp)
  811318:	e0bffe17 	ldw	r2,-8(fp)
  81131c:	1885883a 	add	r2,r3,r2
  811320:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  811324:	e0fff617 	ldw	r3,-40(fp)
  811328:	e0bffe17 	ldw	r2,-8(fp)
  81132c:	1885c83a 	sub	r2,r3,r2
  811330:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811334:	e0fffc17 	ldw	r3,-16(fp)
  811338:	e0bffe17 	ldw	r2,-8(fp)
  81133c:	1885883a 	add	r2,r3,r2
  811340:	10c1ffcc 	andi	r3,r2,2047
  811344:	e0bff817 	ldw	r2,-32(fp)
  811348:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81134c:	e0bff617 	ldw	r2,-40(fp)
  811350:	00bfcf16 	blt	zero,r2,811290 <altera_avalon_jtag_uart_read+0x2c>
  811354:	00000106 	br	81135c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  811358:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  81135c:	e0ffff17 	ldw	r3,-4(fp)
  811360:	e0bff717 	ldw	r2,-36(fp)
  811364:	1880141e 	bne	r3,r2,8113b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811368:	e0bff517 	ldw	r2,-44(fp)
  81136c:	1090000c 	andi	r2,r2,16384
  811370:	1000131e 	bne	r2,zero,8113c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811374:	0001883a 	nop
  811378:	e0bff817 	ldw	r2,-32(fp)
  81137c:	10800a17 	ldw	r2,40(r2)
  811380:	e0fffd17 	ldw	r3,-12(fp)
  811384:	1880051e 	bne	r3,r2,81139c <altera_avalon_jtag_uart_read+0x138>
  811388:	e0bff817 	ldw	r2,-32(fp)
  81138c:	10c00917 	ldw	r3,36(r2)
  811390:	e0bff817 	ldw	r2,-32(fp)
  811394:	10800117 	ldw	r2,4(r2)
  811398:	18bff736 	bltu	r3,r2,811378 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81139c:	e0bff817 	ldw	r2,-32(fp)
  8113a0:	10800a17 	ldw	r2,40(r2)
  8113a4:	e0fffd17 	ldw	r3,-12(fp)
  8113a8:	18800726 	beq	r3,r2,8113c8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  8113ac:	e0bff617 	ldw	r2,-40(fp)
  8113b0:	00bfb716 	blt	zero,r2,811290 <altera_avalon_jtag_uart_read+0x2c>
  8113b4:	00000506 	br	8113cc <altera_avalon_jtag_uart_read+0x168>
      break;
  8113b8:	0001883a 	nop
  8113bc:	00000306 	br	8113cc <altera_avalon_jtag_uart_read+0x168>
      break;
  8113c0:	0001883a 	nop
  8113c4:	00000106 	br	8113cc <altera_avalon_jtag_uart_read+0x168>
      break;
  8113c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8113cc:	e0ffff17 	ldw	r3,-4(fp)
  8113d0:	e0bff717 	ldw	r2,-36(fp)
  8113d4:	18801926 	beq	r3,r2,81143c <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  8113d8:	0005303a 	rdctl	r2,status
  8113dc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113e0:	e0fff917 	ldw	r3,-28(fp)
  8113e4:	00bfff84 	movi	r2,-2
  8113e8:	1884703a 	and	r2,r3,r2
  8113ec:	1001703a 	wrctl	status,r2
  return context;
  8113f0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8113f4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8113f8:	e0bff817 	ldw	r2,-32(fp)
  8113fc:	10800817 	ldw	r2,32(r2)
  811400:	10c00054 	ori	r3,r2,1
  811404:	e0bff817 	ldw	r2,-32(fp)
  811408:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81140c:	e0bff817 	ldw	r2,-32(fp)
  811410:	10800017 	ldw	r2,0(r2)
  811414:	10800104 	addi	r2,r2,4
  811418:	1007883a 	mov	r3,r2
  81141c:	e0bff817 	ldw	r2,-32(fp)
  811420:	10800817 	ldw	r2,32(r2)
  811424:	18800035 	stwio	r2,0(r3)
  811428:	e0bffb17 	ldw	r2,-20(fp)
  81142c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  811430:	e0bffa17 	ldw	r2,-24(fp)
  811434:	1001703a 	wrctl	status,r2
}
  811438:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81143c:	e0ffff17 	ldw	r3,-4(fp)
  811440:	e0bff717 	ldw	r2,-36(fp)
  811444:	18800426 	beq	r3,r2,811458 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  811448:	e0ffff17 	ldw	r3,-4(fp)
  81144c:	e0bff717 	ldw	r2,-36(fp)
  811450:	1885c83a 	sub	r2,r3,r2
  811454:	00000606 	br	811470 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  811458:	e0bff517 	ldw	r2,-44(fp)
  81145c:	1090000c 	andi	r2,r2,16384
  811460:	10000226 	beq	r2,zero,81146c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  811464:	00bffd44 	movi	r2,-11
  811468:	00000106 	br	811470 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  81146c:	00bffec4 	movi	r2,-5
}
  811470:	e037883a 	mov	sp,fp
  811474:	dfc00117 	ldw	ra,4(sp)
  811478:	df000017 	ldw	fp,0(sp)
  81147c:	dec00204 	addi	sp,sp,8
  811480:	f800283a 	ret

00811484 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811484:	defff304 	addi	sp,sp,-52
  811488:	dfc00c15 	stw	ra,48(sp)
  81148c:	df000b15 	stw	fp,44(sp)
  811490:	df000b04 	addi	fp,sp,44
  811494:	e13ff815 	stw	r4,-32(fp)
  811498:	e17ff715 	stw	r5,-36(fp)
  81149c:	e1bff615 	stw	r6,-40(fp)
  8114a0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8114a4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8114a8:	e0bff717 	ldw	r2,-36(fp)
  8114ac:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8114b0:	00003706 	br	811590 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8114b4:	e0bff817 	ldw	r2,-32(fp)
  8114b8:	10800c17 	ldw	r2,48(r2)
  8114bc:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  8114c0:	e0bff817 	ldw	r2,-32(fp)
  8114c4:	10800d17 	ldw	r2,52(r2)
  8114c8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  8114cc:	e0fffc17 	ldw	r3,-16(fp)
  8114d0:	e0bfff17 	ldw	r2,-4(fp)
  8114d4:	1880062e 	bgeu	r3,r2,8114f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8114d8:	e0ffff17 	ldw	r3,-4(fp)
  8114dc:	e0bffc17 	ldw	r2,-16(fp)
  8114e0:	1885c83a 	sub	r2,r3,r2
  8114e4:	10bfffc4 	addi	r2,r2,-1
  8114e8:	e0bffe15 	stw	r2,-8(fp)
  8114ec:	00000b06 	br	81151c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8114f0:	e0bfff17 	ldw	r2,-4(fp)
  8114f4:	10000526 	beq	r2,zero,81150c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8114f8:	00c20004 	movi	r3,2048
  8114fc:	e0bffc17 	ldw	r2,-16(fp)
  811500:	1885c83a 	sub	r2,r3,r2
  811504:	e0bffe15 	stw	r2,-8(fp)
  811508:	00000406 	br	81151c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81150c:	00c1ffc4 	movi	r3,2047
  811510:	e0bffc17 	ldw	r2,-16(fp)
  811514:	1885c83a 	sub	r2,r3,r2
  811518:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  81151c:	e0bffe17 	ldw	r2,-8(fp)
  811520:	10001e26 	beq	r2,zero,81159c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811524:	e0fff617 	ldw	r3,-40(fp)
  811528:	e0bffe17 	ldw	r2,-8(fp)
  81152c:	1880022e 	bgeu	r3,r2,811538 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811530:	e0bff617 	ldw	r2,-40(fp)
  811534:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  811538:	e0bff817 	ldw	r2,-32(fp)
  81153c:	10c20e04 	addi	r3,r2,2104
  811540:	e0bffc17 	ldw	r2,-16(fp)
  811544:	1885883a 	add	r2,r3,r2
  811548:	e1bffe17 	ldw	r6,-8(fp)
  81154c:	e17ff717 	ldw	r5,-36(fp)
  811550:	1009883a 	mov	r4,r2
  811554:	08078fc0 	call	8078fc <memcpy>
      ptr   += n;
  811558:	e0fff717 	ldw	r3,-36(fp)
  81155c:	e0bffe17 	ldw	r2,-8(fp)
  811560:	1885883a 	add	r2,r3,r2
  811564:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  811568:	e0fff617 	ldw	r3,-40(fp)
  81156c:	e0bffe17 	ldw	r2,-8(fp)
  811570:	1885c83a 	sub	r2,r3,r2
  811574:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811578:	e0fffc17 	ldw	r3,-16(fp)
  81157c:	e0bffe17 	ldw	r2,-8(fp)
  811580:	1885883a 	add	r2,r3,r2
  811584:	10c1ffcc 	andi	r3,r2,2047
  811588:	e0bff817 	ldw	r2,-32(fp)
  81158c:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  811590:	e0bff617 	ldw	r2,-40(fp)
  811594:	00bfc716 	blt	zero,r2,8114b4 <altera_avalon_jtag_uart_write+0x30>
  811598:	00000106 	br	8115a0 <altera_avalon_jtag_uart_write+0x11c>
        break;
  81159c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  8115a0:	0005303a 	rdctl	r2,status
  8115a4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115a8:	e0fff917 	ldw	r3,-28(fp)
  8115ac:	00bfff84 	movi	r2,-2
  8115b0:	1884703a 	and	r2,r3,r2
  8115b4:	1001703a 	wrctl	status,r2
  return context;
  8115b8:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8115bc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8115c0:	e0bff817 	ldw	r2,-32(fp)
  8115c4:	10800817 	ldw	r2,32(r2)
  8115c8:	10c00094 	ori	r3,r2,2
  8115cc:	e0bff817 	ldw	r2,-32(fp)
  8115d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8115d4:	e0bff817 	ldw	r2,-32(fp)
  8115d8:	10800017 	ldw	r2,0(r2)
  8115dc:	10800104 	addi	r2,r2,4
  8115e0:	1007883a 	mov	r3,r2
  8115e4:	e0bff817 	ldw	r2,-32(fp)
  8115e8:	10800817 	ldw	r2,32(r2)
  8115ec:	18800035 	stwio	r2,0(r3)
  8115f0:	e0bffb17 	ldw	r2,-20(fp)
  8115f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  8115f8:	e0bffa17 	ldw	r2,-24(fp)
  8115fc:	1001703a 	wrctl	status,r2
}
  811600:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811604:	e0bff617 	ldw	r2,-40(fp)
  811608:	0080100e 	bge	zero,r2,81164c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  81160c:	e0bff517 	ldw	r2,-44(fp)
  811610:	1090000c 	andi	r2,r2,16384
  811614:	1000101e 	bne	r2,zero,811658 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811618:	0001883a 	nop
  81161c:	e0bff817 	ldw	r2,-32(fp)
  811620:	10800d17 	ldw	r2,52(r2)
  811624:	e0ffff17 	ldw	r3,-4(fp)
  811628:	1880051e 	bne	r3,r2,811640 <altera_avalon_jtag_uart_write+0x1bc>
  81162c:	e0bff817 	ldw	r2,-32(fp)
  811630:	10c00917 	ldw	r3,36(r2)
  811634:	e0bff817 	ldw	r2,-32(fp)
  811638:	10800117 	ldw	r2,4(r2)
  81163c:	18bff736 	bltu	r3,r2,81161c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811640:	e0bff817 	ldw	r2,-32(fp)
  811644:	10800917 	ldw	r2,36(r2)
  811648:	1000051e 	bne	r2,zero,811660 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  81164c:	e0bff617 	ldw	r2,-40(fp)
  811650:	00bfcf16 	blt	zero,r2,811590 <altera_avalon_jtag_uart_write+0x10c>
  811654:	00000306 	br	811664 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  811658:	0001883a 	nop
  81165c:	00000106 	br	811664 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  811660:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  811664:	e0fff717 	ldw	r3,-36(fp)
  811668:	e0bffd17 	ldw	r2,-12(fp)
  81166c:	18800426 	beq	r3,r2,811680 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  811670:	e0fff717 	ldw	r3,-36(fp)
  811674:	e0bffd17 	ldw	r2,-12(fp)
  811678:	1885c83a 	sub	r2,r3,r2
  81167c:	00000606 	br	811698 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  811680:	e0bff517 	ldw	r2,-44(fp)
  811684:	1090000c 	andi	r2,r2,16384
  811688:	10000226 	beq	r2,zero,811694 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  81168c:	00bffd44 	movi	r2,-11
  811690:	00000106 	br	811698 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  811694:	00bffec4 	movi	r2,-5
}
  811698:	e037883a 	mov	sp,fp
  81169c:	dfc00117 	ldw	ra,4(sp)
  8116a0:	df000017 	ldw	fp,0(sp)
  8116a4:	dec00204 	addi	sp,sp,8
  8116a8:	f800283a 	ret

008116ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8116ac:	defffa04 	addi	sp,sp,-24
  8116b0:	dfc00515 	stw	ra,20(sp)
  8116b4:	df000415 	stw	fp,16(sp)
  8116b8:	df000404 	addi	fp,sp,16
  8116bc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8116c0:	0007883a 	mov	r3,zero
  8116c4:	e0bffc17 	ldw	r2,-16(fp)
  8116c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8116cc:	e0bffc17 	ldw	r2,-16(fp)
  8116d0:	10800104 	addi	r2,r2,4
  8116d4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  8116d8:	0005303a 	rdctl	r2,status
  8116dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116e0:	e0fffd17 	ldw	r3,-12(fp)
  8116e4:	00bfff84 	movi	r2,-2
  8116e8:	1884703a 	and	r2,r3,r2
  8116ec:	1001703a 	wrctl	status,r2
  return context;
  8116f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8116f4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  8116f8:	08122100 	call	812210 <alt_tick>
  8116fc:	e0bfff17 	ldw	r2,-4(fp)
  811700:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  811704:	e0bffe17 	ldw	r2,-8(fp)
  811708:	1001703a 	wrctl	status,r2
}
  81170c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  811710:	0001883a 	nop
  811714:	e037883a 	mov	sp,fp
  811718:	dfc00117 	ldw	ra,4(sp)
  81171c:	df000017 	ldw	fp,0(sp)
  811720:	dec00204 	addi	sp,sp,8
  811724:	f800283a 	ret

00811728 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  811728:	defff804 	addi	sp,sp,-32
  81172c:	dfc00715 	stw	ra,28(sp)
  811730:	df000615 	stw	fp,24(sp)
  811734:	df000604 	addi	fp,sp,24
  811738:	e13ffe15 	stw	r4,-8(fp)
  81173c:	e17ffd15 	stw	r5,-12(fp)
  811740:	e1bffc15 	stw	r6,-16(fp)
  811744:	e1fffb15 	stw	r7,-20(fp)
  811748:	e0bffb17 	ldw	r2,-20(fp)
  81174c:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
  811750:	d0a75d17 	ldw	r2,-25228(gp)
  811754:	1000031e 	bne	r2,zero,811764 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
  811758:	e0bfff17 	ldw	r2,-4(fp)
  81175c:	d0a75d15 	stw	r2,-25228(gp)
    return 0;
  811760:	00000106 	br	811768 <alt_avalon_timer_sc_init+0x40>
    return -1;
  811764:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  811768:	e0bffe17 	ldw	r2,-8(fp)
  81176c:	10800104 	addi	r2,r2,4
  811770:	00c001c4 	movi	r3,7
  811774:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  811778:	d8000015 	stw	zero,0(sp)
  81177c:	e1fffe17 	ldw	r7,-8(fp)
  811780:	01802074 	movhi	r6,129
  811784:	3185ab04 	addi	r6,r6,5804
  811788:	e17ffc17 	ldw	r5,-16(fp)
  81178c:	e13ffd17 	ldw	r4,-12(fp)
  811790:	0811b0c0 	call	811b0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  811794:	0001883a 	nop
  811798:	e037883a 	mov	sp,fp
  81179c:	dfc00117 	ldw	ra,4(sp)
  8117a0:	df000017 	ldw	fp,0(sp)
  8117a4:	dec00204 	addi	sp,sp,8
  8117a8:	f800283a 	ret

008117ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8117ac:	defff504 	addi	sp,sp,-44
  8117b0:	df000a15 	stw	fp,40(sp)
  8117b4:	df000a04 	addi	fp,sp,40
  8117b8:	e13ff915 	stw	r4,-28(fp)
  8117bc:	e17ff815 	stw	r5,-32(fp)
  8117c0:	e1bff715 	stw	r6,-36(fp)
  8117c4:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8117c8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  8117cc:	d0a75d17 	ldw	r2,-25228(gp)
  
  if (alt_ticks_per_second ())
  8117d0:	10003e26 	beq	r2,zero,8118cc <alt_alarm_start+0x120>
  {
    if (alarm)
  8117d4:	e0bff917 	ldw	r2,-28(fp)
  8117d8:	10003a26 	beq	r2,zero,8118c4 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  8117dc:	e0bff917 	ldw	r2,-28(fp)
  8117e0:	e0fff717 	ldw	r3,-36(fp)
  8117e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8117e8:	e0bff917 	ldw	r2,-28(fp)
  8117ec:	e0fff617 	ldw	r3,-40(fp)
  8117f0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  8117f4:	0005303a 	rdctl	r2,status
  8117f8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8117fc:	e0fffd17 	ldw	r3,-12(fp)
  811800:	00bfff84 	movi	r2,-2
  811804:	1884703a 	and	r2,r3,r2
  811808:	1001703a 	wrctl	status,r2
  return context;
  81180c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  811810:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
  811814:	d0a75e17 	ldw	r2,-25224(gp)
      
      current_nticks = alt_nticks();
  811818:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81181c:	e0fff817 	ldw	r3,-32(fp)
  811820:	e0bfff17 	ldw	r2,-4(fp)
  811824:	1885883a 	add	r2,r3,r2
  811828:	10c00044 	addi	r3,r2,1
  81182c:	e0bff917 	ldw	r2,-28(fp)
  811830:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  811834:	e0bff917 	ldw	r2,-28(fp)
  811838:	10c00217 	ldw	r3,8(r2)
  81183c:	e0bfff17 	ldw	r2,-4(fp)
  811840:	1880042e 	bgeu	r3,r2,811854 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  811844:	e0bff917 	ldw	r2,-28(fp)
  811848:	00c00044 	movi	r3,1
  81184c:	10c00405 	stb	r3,16(r2)
  811850:	00000206 	br	81185c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  811854:	e0bff917 	ldw	r2,-28(fp)
  811858:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81185c:	e0bff917 	ldw	r2,-28(fp)
  811860:	d0e01404 	addi	r3,gp,-32688
  811864:	e0fffb15 	stw	r3,-20(fp)
  811868:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81186c:	e0bffa17 	ldw	r2,-24(fp)
  811870:	e0fffb17 	ldw	r3,-20(fp)
  811874:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  811878:	e0bffb17 	ldw	r2,-20(fp)
  81187c:	10c00017 	ldw	r3,0(r2)
  811880:	e0bffa17 	ldw	r2,-24(fp)
  811884:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811888:	e0bffb17 	ldw	r2,-20(fp)
  81188c:	10800017 	ldw	r2,0(r2)
  811890:	e0fffa17 	ldw	r3,-24(fp)
  811894:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811898:	e0bffb17 	ldw	r2,-20(fp)
  81189c:	e0fffa17 	ldw	r3,-24(fp)
  8118a0:	10c00015 	stw	r3,0(r2)
}
  8118a4:	0001883a 	nop
  8118a8:	e0bffe17 	ldw	r2,-8(fp)
  8118ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  8118b0:	e0bffc17 	ldw	r2,-16(fp)
  8118b4:	1001703a 	wrctl	status,r2
}
  8118b8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  8118bc:	0005883a 	mov	r2,zero
  8118c0:	00000306 	br	8118d0 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  8118c4:	00bffa84 	movi	r2,-22
  8118c8:	00000106 	br	8118d0 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  8118cc:	00bfde84 	movi	r2,-134
  }
}
  8118d0:	e037883a 	mov	sp,fp
  8118d4:	df000017 	ldw	fp,0(sp)
  8118d8:	dec00104 	addi	sp,sp,4
  8118dc:	f800283a 	ret

008118e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8118e0:	defffe04 	addi	sp,sp,-8
  8118e4:	df000115 	stw	fp,4(sp)
  8118e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8118ec:	e03fff15 	stw	zero,-4(fp)
  8118f0:	00000506 	br	811908 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
  8118f8:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8118fc:	e0bfff17 	ldw	r2,-4(fp)
  811900:	10800804 	addi	r2,r2,32
  811904:	e0bfff15 	stw	r2,-4(fp)
  811908:	e0bfff17 	ldw	r2,-4(fp)
  81190c:	10820030 	cmpltui	r2,r2,2048
  811910:	103ff81e 	bne	r2,zero,8118f4 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811914:	0001883a 	nop
  811918:	0001883a 	nop
  81191c:	e037883a 	mov	sp,fp
  811920:	df000017 	ldw	fp,0(sp)
  811924:	dec00104 	addi	sp,sp,4
  811928:	f800283a 	ret

0081192c <alt_get_errno>:
{
  81192c:	defffe04 	addi	sp,sp,-8
  811930:	dfc00115 	stw	ra,4(sp)
  811934:	df000015 	stw	fp,0(sp)
  811938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81193c:	d0a01117 	ldw	r2,-32700(gp)
  811940:	10000326 	beq	r2,zero,811950 <alt_get_errno+0x24>
  811944:	d0a01117 	ldw	r2,-32700(gp)
  811948:	103ee83a 	callr	r2
  81194c:	00000106 	br	811954 <alt_get_errno+0x28>
  811950:	d0a75804 	addi	r2,gp,-25248
}
  811954:	e037883a 	mov	sp,fp
  811958:	dfc00117 	ldw	ra,4(sp)
  81195c:	df000017 	ldw	fp,0(sp)
  811960:	dec00204 	addi	sp,sp,8
  811964:	f800283a 	ret

00811968 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  811968:	defffa04 	addi	sp,sp,-24
  81196c:	dfc00515 	stw	ra,20(sp)
  811970:	df000415 	stw	fp,16(sp)
  811974:	df000404 	addi	fp,sp,16
  811978:	e13ffd15 	stw	r4,-12(fp)
  81197c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  811980:	e0bffd17 	ldw	r2,-12(fp)
  811984:	10000326 	beq	r2,zero,811994 <alt_dev_llist_insert+0x2c>
  811988:	e0bffd17 	ldw	r2,-12(fp)
  81198c:	10800217 	ldw	r2,8(r2)
  811990:	1000061e 	bne	r2,zero,8119ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811994:	081192c0 	call	81192c <alt_get_errno>
  811998:	1007883a 	mov	r3,r2
  81199c:	00800584 	movi	r2,22
  8119a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8119a4:	00bffa84 	movi	r2,-22
  8119a8:	00001406 	br	8119fc <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8119ac:	e0bffd17 	ldw	r2,-12(fp)
  8119b0:	e0fffc17 	ldw	r3,-16(fp)
  8119b4:	e0ffff15 	stw	r3,-4(fp)
  8119b8:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  8119bc:	e0bffe17 	ldw	r2,-8(fp)
  8119c0:	e0ffff17 	ldw	r3,-4(fp)
  8119c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8119c8:	e0bfff17 	ldw	r2,-4(fp)
  8119cc:	10c00017 	ldw	r3,0(r2)
  8119d0:	e0bffe17 	ldw	r2,-8(fp)
  8119d4:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  8119d8:	e0bfff17 	ldw	r2,-4(fp)
  8119dc:	10800017 	ldw	r2,0(r2)
  8119e0:	e0fffe17 	ldw	r3,-8(fp)
  8119e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8119e8:	e0bfff17 	ldw	r2,-4(fp)
  8119ec:	e0fffe17 	ldw	r3,-8(fp)
  8119f0:	10c00015 	stw	r3,0(r2)
}
  8119f4:	0001883a 	nop

  return 0;  
  8119f8:	0005883a 	mov	r2,zero
}
  8119fc:	e037883a 	mov	sp,fp
  811a00:	dfc00117 	ldw	ra,4(sp)
  811a04:	df000017 	ldw	fp,0(sp)
  811a08:	dec00204 	addi	sp,sp,8
  811a0c:	f800283a 	ret

00811a10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811a10:	defffd04 	addi	sp,sp,-12
  811a14:	dfc00215 	stw	ra,8(sp)
  811a18:	df000115 	stw	fp,4(sp)
  811a1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811a20:	00802074 	movhi	r2,129
  811a24:	108a6604 	addi	r2,r2,10648
  811a28:	e0bfff15 	stw	r2,-4(fp)
  811a2c:	00000606 	br	811a48 <_do_ctors+0x38>
        (*ctor) (); 
  811a30:	e0bfff17 	ldw	r2,-4(fp)
  811a34:	10800017 	ldw	r2,0(r2)
  811a38:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811a3c:	e0bfff17 	ldw	r2,-4(fp)
  811a40:	10bfff04 	addi	r2,r2,-4
  811a44:	e0bfff15 	stw	r2,-4(fp)
  811a48:	e0ffff17 	ldw	r3,-4(fp)
  811a4c:	00802074 	movhi	r2,129
  811a50:	108a6704 	addi	r2,r2,10652
  811a54:	18bff62e 	bgeu	r3,r2,811a30 <_do_ctors+0x20>
}
  811a58:	0001883a 	nop
  811a5c:	0001883a 	nop
  811a60:	e037883a 	mov	sp,fp
  811a64:	dfc00117 	ldw	ra,4(sp)
  811a68:	df000017 	ldw	fp,0(sp)
  811a6c:	dec00204 	addi	sp,sp,8
  811a70:	f800283a 	ret

00811a74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811a74:	defffd04 	addi	sp,sp,-12
  811a78:	dfc00215 	stw	ra,8(sp)
  811a7c:	df000115 	stw	fp,4(sp)
  811a80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811a84:	00802074 	movhi	r2,129
  811a88:	108a6604 	addi	r2,r2,10648
  811a8c:	e0bfff15 	stw	r2,-4(fp)
  811a90:	00000606 	br	811aac <_do_dtors+0x38>
        (*dtor) (); 
  811a94:	e0bfff17 	ldw	r2,-4(fp)
  811a98:	10800017 	ldw	r2,0(r2)
  811a9c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811aa0:	e0bfff17 	ldw	r2,-4(fp)
  811aa4:	10bfff04 	addi	r2,r2,-4
  811aa8:	e0bfff15 	stw	r2,-4(fp)
  811aac:	e0ffff17 	ldw	r3,-4(fp)
  811ab0:	00802074 	movhi	r2,129
  811ab4:	108a6704 	addi	r2,r2,10652
  811ab8:	18bff62e 	bgeu	r3,r2,811a94 <_do_dtors+0x20>
}
  811abc:	0001883a 	nop
  811ac0:	0001883a 	nop
  811ac4:	e037883a 	mov	sp,fp
  811ac8:	dfc00117 	ldw	ra,4(sp)
  811acc:	df000017 	ldw	fp,0(sp)
  811ad0:	dec00204 	addi	sp,sp,8
  811ad4:	f800283a 	ret

00811ad8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811ad8:	defffe04 	addi	sp,sp,-8
  811adc:	dfc00115 	stw	ra,4(sp)
  811ae0:	df000015 	stw	fp,0(sp)
  811ae4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811ae8:	01420004 	movi	r5,2048
  811aec:	0009883a 	mov	r4,zero
  811af0:	081258c0 	call	81258c <alt_icache_flush>
#endif
}
  811af4:	0001883a 	nop
  811af8:	e037883a 	mov	sp,fp
  811afc:	dfc00117 	ldw	ra,4(sp)
  811b00:	df000017 	ldw	fp,0(sp)
  811b04:	dec00204 	addi	sp,sp,8
  811b08:	f800283a 	ret

00811b0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811b0c:	defff904 	addi	sp,sp,-28
  811b10:	dfc00615 	stw	ra,24(sp)
  811b14:	df000515 	stw	fp,20(sp)
  811b18:	df000504 	addi	fp,sp,20
  811b1c:	e13fff15 	stw	r4,-4(fp)
  811b20:	e17ffe15 	stw	r5,-8(fp)
  811b24:	e1bffd15 	stw	r6,-12(fp)
  811b28:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811b2c:	e0800217 	ldw	r2,8(fp)
  811b30:	d8800015 	stw	r2,0(sp)
  811b34:	e1fffc17 	ldw	r7,-16(fp)
  811b38:	e1bffd17 	ldw	r6,-12(fp)
  811b3c:	e17ffe17 	ldw	r5,-8(fp)
  811b40:	e13fff17 	ldw	r4,-4(fp)
  811b44:	0811cbc0 	call	811cbc <alt_iic_isr_register>
}  
  811b48:	e037883a 	mov	sp,fp
  811b4c:	dfc00117 	ldw	ra,4(sp)
  811b50:	df000017 	ldw	fp,0(sp)
  811b54:	dec00204 	addi	sp,sp,8
  811b58:	f800283a 	ret

00811b5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  811b5c:	defff904 	addi	sp,sp,-28
  811b60:	df000615 	stw	fp,24(sp)
  811b64:	df000604 	addi	fp,sp,24
  811b68:	e13ffb15 	stw	r4,-20(fp)
  811b6c:	e17ffa15 	stw	r5,-24(fp)
  811b70:	e0bffa17 	ldw	r2,-24(fp)
  811b74:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811b78:	0005303a 	rdctl	r2,status
  811b7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b80:	e0fffe17 	ldw	r3,-8(fp)
  811b84:	00bfff84 	movi	r2,-2
  811b88:	1884703a 	and	r2,r3,r2
  811b8c:	1001703a 	wrctl	status,r2
  return context;
  811b90:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811b94:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  811b98:	00c00044 	movi	r3,1
  811b9c:	e0bfff17 	ldw	r2,-4(fp)
  811ba0:	1884983a 	sll	r2,r3,r2
  811ba4:	1007883a 	mov	r3,r2
  811ba8:	d0a75c17 	ldw	r2,-25232(gp)
  811bac:	1884b03a 	or	r2,r3,r2
  811bb0:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811bb4:	d0a75c17 	ldw	r2,-25232(gp)
  811bb8:	100170fa 	wrctl	ienable,r2
  811bbc:	e0bffd17 	ldw	r2,-12(fp)
  811bc0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811bc4:	e0bffc17 	ldw	r2,-16(fp)
  811bc8:	1001703a 	wrctl	status,r2
}
  811bcc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  811bd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811bd4:	e037883a 	mov	sp,fp
  811bd8:	df000017 	ldw	fp,0(sp)
  811bdc:	dec00104 	addi	sp,sp,4
  811be0:	f800283a 	ret

00811be4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811be4:	defff904 	addi	sp,sp,-28
  811be8:	df000615 	stw	fp,24(sp)
  811bec:	df000604 	addi	fp,sp,24
  811bf0:	e13ffb15 	stw	r4,-20(fp)
  811bf4:	e17ffa15 	stw	r5,-24(fp)
  811bf8:	e0bffa17 	ldw	r2,-24(fp)
  811bfc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811c00:	0005303a 	rdctl	r2,status
  811c04:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c08:	e0fffe17 	ldw	r3,-8(fp)
  811c0c:	00bfff84 	movi	r2,-2
  811c10:	1884703a 	and	r2,r3,r2
  811c14:	1001703a 	wrctl	status,r2
  return context;
  811c18:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  811c1c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  811c20:	00c00044 	movi	r3,1
  811c24:	e0bfff17 	ldw	r2,-4(fp)
  811c28:	1884983a 	sll	r2,r3,r2
  811c2c:	0084303a 	nor	r2,zero,r2
  811c30:	1007883a 	mov	r3,r2
  811c34:	d0a75c17 	ldw	r2,-25232(gp)
  811c38:	1884703a 	and	r2,r3,r2
  811c3c:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811c40:	d0a75c17 	ldw	r2,-25232(gp)
  811c44:	100170fa 	wrctl	ienable,r2
  811c48:	e0bffd17 	ldw	r2,-12(fp)
  811c4c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811c50:	e0bffc17 	ldw	r2,-16(fp)
  811c54:	1001703a 	wrctl	status,r2
}
  811c58:	0001883a 	nop
  return 0;
  811c5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  811c60:	e037883a 	mov	sp,fp
  811c64:	df000017 	ldw	fp,0(sp)
  811c68:	dec00104 	addi	sp,sp,4
  811c6c:	f800283a 	ret

00811c70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  811c70:	defffc04 	addi	sp,sp,-16
  811c74:	df000315 	stw	fp,12(sp)
  811c78:	df000304 	addi	fp,sp,12
  811c7c:	e13ffe15 	stw	r4,-8(fp)
  811c80:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811c84:	000530fa 	rdctl	r2,ienable
  811c88:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811c8c:	00c00044 	movi	r3,1
  811c90:	e0bffd17 	ldw	r2,-12(fp)
  811c94:	1884983a 	sll	r2,r3,r2
  811c98:	1007883a 	mov	r3,r2
  811c9c:	e0bfff17 	ldw	r2,-4(fp)
  811ca0:	1884703a 	and	r2,r3,r2
  811ca4:	1004c03a 	cmpne	r2,r2,zero
  811ca8:	10803fcc 	andi	r2,r2,255
}
  811cac:	e037883a 	mov	sp,fp
  811cb0:	df000017 	ldw	fp,0(sp)
  811cb4:	dec00104 	addi	sp,sp,4
  811cb8:	f800283a 	ret

00811cbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811cbc:	defff504 	addi	sp,sp,-44
  811cc0:	dfc00a15 	stw	ra,40(sp)
  811cc4:	df000915 	stw	fp,36(sp)
  811cc8:	df000904 	addi	fp,sp,36
  811ccc:	e13ffa15 	stw	r4,-24(fp)
  811cd0:	e17ff915 	stw	r5,-28(fp)
  811cd4:	e1bff815 	stw	r6,-32(fp)
  811cd8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  811cdc:	00bffa84 	movi	r2,-22
  811ce0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811ce4:	e0bff917 	ldw	r2,-28(fp)
  811ce8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811cec:	e0bffe17 	ldw	r2,-8(fp)
  811cf0:	10800808 	cmpgei	r2,r2,32
  811cf4:	1000251e 	bne	r2,zero,811d8c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  811cf8:	0005303a 	rdctl	r2,status
  811cfc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d00:	e0fffc17 	ldw	r3,-16(fp)
  811d04:	00bfff84 	movi	r2,-2
  811d08:	1884703a 	and	r2,r3,r2
  811d0c:	1001703a 	wrctl	status,r2
  return context;
  811d10:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811d14:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  811d18:	e0bffe17 	ldw	r2,-8(fp)
  811d1c:	100890fa 	slli	r4,r2,3
  811d20:	e0fff817 	ldw	r3,-32(fp)
  811d24:	00802074 	movhi	r2,129
  811d28:	2085883a 	add	r2,r4,r2
  811d2c:	10db9a15 	stw	r3,28264(r2)
    alt_irq[id].context = isr_context;
  811d30:	e0bffe17 	ldw	r2,-8(fp)
  811d34:	100890fa 	slli	r4,r2,3
  811d38:	e0fff717 	ldw	r3,-36(fp)
  811d3c:	00802074 	movhi	r2,129
  811d40:	2085883a 	add	r2,r4,r2
  811d44:	10db9b15 	stw	r3,28268(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811d48:	e0bff817 	ldw	r2,-32(fp)
  811d4c:	10000526 	beq	r2,zero,811d64 <alt_iic_isr_register+0xa8>
  811d50:	e0bffe17 	ldw	r2,-8(fp)
  811d54:	100b883a 	mov	r5,r2
  811d58:	e13ffa17 	ldw	r4,-24(fp)
  811d5c:	0811b5c0 	call	811b5c <alt_ic_irq_enable>
  811d60:	00000406 	br	811d74 <alt_iic_isr_register+0xb8>
  811d64:	e0bffe17 	ldw	r2,-8(fp)
  811d68:	100b883a 	mov	r5,r2
  811d6c:	e13ffa17 	ldw	r4,-24(fp)
  811d70:	0811be40 	call	811be4 <alt_ic_irq_disable>
  811d74:	e0bfff15 	stw	r2,-4(fp)
  811d78:	e0bffd17 	ldw	r2,-12(fp)
  811d7c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  811d80:	e0bffb17 	ldw	r2,-20(fp)
  811d84:	1001703a 	wrctl	status,r2
}
  811d88:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  811d8c:	e0bfff17 	ldw	r2,-4(fp)
}
  811d90:	e037883a 	mov	sp,fp
  811d94:	dfc00117 	ldw	ra,4(sp)
  811d98:	df000017 	ldw	fp,0(sp)
  811d9c:	dec00204 	addi	sp,sp,8
  811da0:	f800283a 	ret

00811da4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811da4:	defff904 	addi	sp,sp,-28
  811da8:	dfc00615 	stw	ra,24(sp)
  811dac:	df000515 	stw	fp,20(sp)
  811db0:	df000504 	addi	fp,sp,20
  811db4:	e13ffe15 	stw	r4,-8(fp)
  811db8:	e17ffd15 	stw	r5,-12(fp)
  811dbc:	e1bffc15 	stw	r6,-16(fp)
  811dc0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  811dc4:	e1bffb17 	ldw	r6,-20(fp)
  811dc8:	e17ffc17 	ldw	r5,-16(fp)
  811dcc:	e13ffd17 	ldw	r4,-12(fp)
  811dd0:	081200c0 	call	81200c <open>
  811dd4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  811dd8:	e0bfff17 	ldw	r2,-4(fp)
  811ddc:	10002016 	blt	r2,zero,811e60 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  811de0:	e0ffff17 	ldw	r3,-4(fp)
  811de4:	1805883a 	mov	r2,r3
  811de8:	1085883a 	add	r2,r2,r2
  811dec:	10c5883a 	add	r2,r2,r3
  811df0:	100490ba 	slli	r2,r2,2
  811df4:	00c02074 	movhi	r3,129
  811df8:	10c7883a 	add	r3,r2,r3
  811dfc:	18cfb817 	ldw	r3,16096(r3)
  811e00:	e0bffe17 	ldw	r2,-8(fp)
  811e04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811e08:	e0ffff17 	ldw	r3,-4(fp)
  811e0c:	1805883a 	mov	r2,r3
  811e10:	1085883a 	add	r2,r2,r2
  811e14:	10c5883a 	add	r2,r2,r3
  811e18:	100490ba 	slli	r2,r2,2
  811e1c:	00c02074 	movhi	r3,129
  811e20:	10c7883a 	add	r3,r2,r3
  811e24:	18cfb917 	ldw	r3,16100(r3)
  811e28:	e0bffe17 	ldw	r2,-8(fp)
  811e2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811e30:	e0ffff17 	ldw	r3,-4(fp)
  811e34:	1805883a 	mov	r2,r3
  811e38:	1085883a 	add	r2,r2,r2
  811e3c:	10c5883a 	add	r2,r2,r3
  811e40:	100490ba 	slli	r2,r2,2
  811e44:	00c02074 	movhi	r3,129
  811e48:	10c7883a 	add	r3,r2,r3
  811e4c:	18cfba17 	ldw	r3,16104(r3)
  811e50:	e0bffe17 	ldw	r2,-8(fp)
  811e54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811e58:	e13fff17 	ldw	r4,-4(fp)
  811e5c:	08108480 	call	810848 <alt_release_fd>
  }
} 
  811e60:	0001883a 	nop
  811e64:	e037883a 	mov	sp,fp
  811e68:	dfc00117 	ldw	ra,4(sp)
  811e6c:	df000017 	ldw	fp,0(sp)
  811e70:	dec00204 	addi	sp,sp,8
  811e74:	f800283a 	ret

00811e78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811e78:	defffb04 	addi	sp,sp,-20
  811e7c:	dfc00415 	stw	ra,16(sp)
  811e80:	df000315 	stw	fp,12(sp)
  811e84:	df000304 	addi	fp,sp,12
  811e88:	e13fff15 	stw	r4,-4(fp)
  811e8c:	e17ffe15 	stw	r5,-8(fp)
  811e90:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811e94:	01c07fc4 	movi	r7,511
  811e98:	01800044 	movi	r6,1
  811e9c:	e17fff17 	ldw	r5,-4(fp)
  811ea0:	01002074 	movhi	r4,129
  811ea4:	210fbb04 	addi	r4,r4,16108
  811ea8:	0811da40 	call	811da4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811eac:	01c07fc4 	movi	r7,511
  811eb0:	000d883a 	mov	r6,zero
  811eb4:	e17ffe17 	ldw	r5,-8(fp)
  811eb8:	01002074 	movhi	r4,129
  811ebc:	210fb804 	addi	r4,r4,16096
  811ec0:	0811da40 	call	811da4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811ec4:	01c07fc4 	movi	r7,511
  811ec8:	01800044 	movi	r6,1
  811ecc:	e17ffd17 	ldw	r5,-12(fp)
  811ed0:	01002074 	movhi	r4,129
  811ed4:	210fbe04 	addi	r4,r4,16120
  811ed8:	0811da40 	call	811da4 <alt_open_fd>
}  
  811edc:	0001883a 	nop
  811ee0:	e037883a 	mov	sp,fp
  811ee4:	dfc00117 	ldw	ra,4(sp)
  811ee8:	df000017 	ldw	fp,0(sp)
  811eec:	dec00204 	addi	sp,sp,8
  811ef0:	f800283a 	ret

00811ef4 <alt_get_errno>:
{
  811ef4:	defffe04 	addi	sp,sp,-8
  811ef8:	dfc00115 	stw	ra,4(sp)
  811efc:	df000015 	stw	fp,0(sp)
  811f00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811f04:	d0a01117 	ldw	r2,-32700(gp)
  811f08:	10000326 	beq	r2,zero,811f18 <alt_get_errno+0x24>
  811f0c:	d0a01117 	ldw	r2,-32700(gp)
  811f10:	103ee83a 	callr	r2
  811f14:	00000106 	br	811f1c <alt_get_errno+0x28>
  811f18:	d0a75804 	addi	r2,gp,-25248
}
  811f1c:	e037883a 	mov	sp,fp
  811f20:	dfc00117 	ldw	ra,4(sp)
  811f24:	df000017 	ldw	fp,0(sp)
  811f28:	dec00204 	addi	sp,sp,8
  811f2c:	f800283a 	ret

00811f30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811f30:	defffd04 	addi	sp,sp,-12
  811f34:	df000215 	stw	fp,8(sp)
  811f38:	df000204 	addi	fp,sp,8
  811f3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811f40:	e0bffe17 	ldw	r2,-8(fp)
  811f44:	10800217 	ldw	r2,8(r2)
  811f48:	10d00034 	orhi	r3,r2,16384
  811f4c:	e0bffe17 	ldw	r2,-8(fp)
  811f50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811f54:	e03fff15 	stw	zero,-4(fp)
  811f58:	00002306 	br	811fe8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811f5c:	e0ffff17 	ldw	r3,-4(fp)
  811f60:	1805883a 	mov	r2,r3
  811f64:	1085883a 	add	r2,r2,r2
  811f68:	10c5883a 	add	r2,r2,r3
  811f6c:	100490ba 	slli	r2,r2,2
  811f70:	00c02074 	movhi	r3,129
  811f74:	10c7883a 	add	r3,r2,r3
  811f78:	18cfb817 	ldw	r3,16096(r3)
  811f7c:	e0bffe17 	ldw	r2,-8(fp)
  811f80:	10800017 	ldw	r2,0(r2)
  811f84:	1880151e 	bne	r3,r2,811fdc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811f88:	e0ffff17 	ldw	r3,-4(fp)
  811f8c:	1805883a 	mov	r2,r3
  811f90:	1085883a 	add	r2,r2,r2
  811f94:	10c5883a 	add	r2,r2,r3
  811f98:	100490ba 	slli	r2,r2,2
  811f9c:	00c02074 	movhi	r3,129
  811fa0:	10c7883a 	add	r3,r2,r3
  811fa4:	188fba17 	ldw	r2,16104(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  811fa8:	10000c0e 	bge	r2,zero,811fdc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  811fac:	e0ffff17 	ldw	r3,-4(fp)
  811fb0:	1805883a 	mov	r2,r3
  811fb4:	1085883a 	add	r2,r2,r2
  811fb8:	10c5883a 	add	r2,r2,r3
  811fbc:	100490ba 	slli	r2,r2,2
  811fc0:	00c02074 	movhi	r3,129
  811fc4:	18cfb804 	addi	r3,r3,16096
  811fc8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811fcc:	e0fffe17 	ldw	r3,-8(fp)
  811fd0:	18800226 	beq	r3,r2,811fdc <alt_file_locked+0xac>
    {
      return -EACCES;
  811fd4:	00bffcc4 	movi	r2,-13
  811fd8:	00000806 	br	811ffc <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  811fdc:	e0bfff17 	ldw	r2,-4(fp)
  811fe0:	10800044 	addi	r2,r2,1
  811fe4:	e0bfff15 	stw	r2,-4(fp)
  811fe8:	d0a01017 	ldw	r2,-32704(gp)
  811fec:	1007883a 	mov	r3,r2
  811ff0:	e0bfff17 	ldw	r2,-4(fp)
  811ff4:	18bfd92e 	bgeu	r3,r2,811f5c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811ff8:	0005883a 	mov	r2,zero
}
  811ffc:	e037883a 	mov	sp,fp
  812000:	df000017 	ldw	fp,0(sp)
  812004:	dec00104 	addi	sp,sp,4
  812008:	f800283a 	ret

0081200c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81200c:	defff604 	addi	sp,sp,-40
  812010:	dfc00915 	stw	ra,36(sp)
  812014:	df000815 	stw	fp,32(sp)
  812018:	df000804 	addi	fp,sp,32
  81201c:	e13ffa15 	stw	r4,-24(fp)
  812020:	e17ff915 	stw	r5,-28(fp)
  812024:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  812028:	00bfffc4 	movi	r2,-1
  81202c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  812030:	00bffb44 	movi	r2,-19
  812034:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  812038:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81203c:	d1600e04 	addi	r5,gp,-32712
  812040:	e13ffa17 	ldw	r4,-24(fp)
  812044:	081233c0 	call	81233c <alt_find_dev>
  812048:	e0bfff15 	stw	r2,-4(fp)
  81204c:	e0bfff17 	ldw	r2,-4(fp)
  812050:	1000051e 	bne	r2,zero,812068 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  812054:	e13ffa17 	ldw	r4,-24(fp)
  812058:	08123cc0 	call	8123cc <alt_find_file>
  81205c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  812060:	00800044 	movi	r2,1
  812064:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  812068:	e0bfff17 	ldw	r2,-4(fp)
  81206c:	10002c26 	beq	r2,zero,812120 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  812070:	e13fff17 	ldw	r4,-4(fp)
  812074:	08124d40 	call	8124d4 <alt_get_fd>
  812078:	e0bffe15 	stw	r2,-8(fp)
  81207c:	e0bffe17 	ldw	r2,-8(fp)
  812080:	1000030e 	bge	r2,zero,812090 <open+0x84>
    {
      status = index;
  812084:	e0bffe17 	ldw	r2,-8(fp)
  812088:	e0bffd15 	stw	r2,-12(fp)
  81208c:	00002606 	br	812128 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  812090:	e0fffe17 	ldw	r3,-8(fp)
  812094:	1805883a 	mov	r2,r3
  812098:	1085883a 	add	r2,r2,r2
  81209c:	10c5883a 	add	r2,r2,r3
  8120a0:	100490ba 	slli	r2,r2,2
  8120a4:	00c02074 	movhi	r3,129
  8120a8:	18cfb804 	addi	r3,r3,16096
  8120ac:	10c5883a 	add	r2,r2,r3
  8120b0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8120b4:	e0fff917 	ldw	r3,-28(fp)
  8120b8:	00900034 	movhi	r2,16384
  8120bc:	10bfffc4 	addi	r2,r2,-1
  8120c0:	1886703a 	and	r3,r3,r2
  8120c4:	e0bffb17 	ldw	r2,-20(fp)
  8120c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8120cc:	e0bffc17 	ldw	r2,-16(fp)
  8120d0:	1000051e 	bne	r2,zero,8120e8 <open+0xdc>
  8120d4:	e13ffb17 	ldw	r4,-20(fp)
  8120d8:	0811f300 	call	811f30 <alt_file_locked>
  8120dc:	e0bffd15 	stw	r2,-12(fp)
  8120e0:	e0bffd17 	ldw	r2,-12(fp)
  8120e4:	10001016 	blt	r2,zero,812128 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8120e8:	e0bfff17 	ldw	r2,-4(fp)
  8120ec:	10800317 	ldw	r2,12(r2)
  8120f0:	10000826 	beq	r2,zero,812114 <open+0x108>
  8120f4:	e0bfff17 	ldw	r2,-4(fp)
  8120f8:	10800317 	ldw	r2,12(r2)
  8120fc:	e1fff817 	ldw	r7,-32(fp)
  812100:	e1bff917 	ldw	r6,-28(fp)
  812104:	e17ffa17 	ldw	r5,-24(fp)
  812108:	e13ffb17 	ldw	r4,-20(fp)
  81210c:	103ee83a 	callr	r2
  812110:	00000106 	br	812118 <open+0x10c>
  812114:	0005883a 	mov	r2,zero
  812118:	e0bffd15 	stw	r2,-12(fp)
  81211c:	00000206 	br	812128 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812120:	00bffb44 	movi	r2,-19
  812124:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  812128:	e0bffd17 	ldw	r2,-12(fp)
  81212c:	1000090e 	bge	r2,zero,812154 <open+0x148>
  {
    alt_release_fd (index);  
  812130:	e13ffe17 	ldw	r4,-8(fp)
  812134:	08108480 	call	810848 <alt_release_fd>
    ALT_ERRNO = -status;
  812138:	0811ef40 	call	811ef4 <alt_get_errno>
  81213c:	1007883a 	mov	r3,r2
  812140:	e0bffd17 	ldw	r2,-12(fp)
  812144:	0085c83a 	sub	r2,zero,r2
  812148:	18800015 	stw	r2,0(r3)
    return -1;
  81214c:	00bfffc4 	movi	r2,-1
  812150:	00000106 	br	812158 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  812154:	e0bffe17 	ldw	r2,-8(fp)
}
  812158:	e037883a 	mov	sp,fp
  81215c:	dfc00117 	ldw	ra,4(sp)
  812160:	df000017 	ldw	fp,0(sp)
  812164:	dec00204 	addi	sp,sp,8
  812168:	f800283a 	ret

0081216c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81216c:	defffa04 	addi	sp,sp,-24
  812170:	df000515 	stw	fp,20(sp)
  812174:	df000504 	addi	fp,sp,20
  812178:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  81217c:	0005303a 	rdctl	r2,status
  812180:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812184:	e0fffc17 	ldw	r3,-16(fp)
  812188:	00bfff84 	movi	r2,-2
  81218c:	1884703a 	and	r2,r3,r2
  812190:	1001703a 	wrctl	status,r2
  return context;
  812194:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  812198:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  81219c:	e0bffb17 	ldw	r2,-20(fp)
  8121a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8121a4:	e0bffd17 	ldw	r2,-12(fp)
  8121a8:	10800017 	ldw	r2,0(r2)
  8121ac:	e0fffd17 	ldw	r3,-12(fp)
  8121b0:	18c00117 	ldw	r3,4(r3)
  8121b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8121b8:	e0bffd17 	ldw	r2,-12(fp)
  8121bc:	10800117 	ldw	r2,4(r2)
  8121c0:	e0fffd17 	ldw	r3,-12(fp)
  8121c4:	18c00017 	ldw	r3,0(r3)
  8121c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8121cc:	e0bffd17 	ldw	r2,-12(fp)
  8121d0:	e0fffd17 	ldw	r3,-12(fp)
  8121d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8121d8:	e0bffd17 	ldw	r2,-12(fp)
  8121dc:	e0fffd17 	ldw	r3,-12(fp)
  8121e0:	10c00015 	stw	r3,0(r2)
} 
  8121e4:	0001883a 	nop
  8121e8:	e0bfff17 	ldw	r2,-4(fp)
  8121ec:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  8121f0:	e0bffe17 	ldw	r2,-8(fp)
  8121f4:	1001703a 	wrctl	status,r2
}
  8121f8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  8121fc:	0001883a 	nop
  812200:	e037883a 	mov	sp,fp
  812204:	df000017 	ldw	fp,0(sp)
  812208:	dec00104 	addi	sp,sp,4
  81220c:	f800283a 	ret

00812210 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  812210:	defffb04 	addi	sp,sp,-20
  812214:	dfc00415 	stw	ra,16(sp)
  812218:	df000315 	stw	fp,12(sp)
  81221c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  812220:	d0a01417 	ldw	r2,-32688(gp)
  812224:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  812228:	d0a75e17 	ldw	r2,-25224(gp)
  81222c:	10800044 	addi	r2,r2,1
  812230:	d0a75e15 	stw	r2,-25224(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  812234:	00002e06 	br	8122f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  812238:	e0bfff17 	ldw	r2,-4(fp)
  81223c:	10800017 	ldw	r2,0(r2)
  812240:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  812244:	e0bfff17 	ldw	r2,-4(fp)
  812248:	10800403 	ldbu	r2,16(r2)
  81224c:	10803fcc 	andi	r2,r2,255
  812250:	10000426 	beq	r2,zero,812264 <alt_tick+0x54>
  812254:	d0a75e17 	ldw	r2,-25224(gp)
  812258:	1000021e 	bne	r2,zero,812264 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81225c:	e0bfff17 	ldw	r2,-4(fp)
  812260:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  812264:	e0bfff17 	ldw	r2,-4(fp)
  812268:	10800217 	ldw	r2,8(r2)
  81226c:	d0e75e17 	ldw	r3,-25224(gp)
  812270:	18801d36 	bltu	r3,r2,8122e8 <alt_tick+0xd8>
  812274:	e0bfff17 	ldw	r2,-4(fp)
  812278:	10800403 	ldbu	r2,16(r2)
  81227c:	10803fcc 	andi	r2,r2,255
  812280:	1000191e 	bne	r2,zero,8122e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  812284:	e0bfff17 	ldw	r2,-4(fp)
  812288:	10800317 	ldw	r2,12(r2)
  81228c:	e0ffff17 	ldw	r3,-4(fp)
  812290:	18c00517 	ldw	r3,20(r3)
  812294:	1809883a 	mov	r4,r3
  812298:	103ee83a 	callr	r2
  81229c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8122a0:	e0bffd17 	ldw	r2,-12(fp)
  8122a4:	1000031e 	bne	r2,zero,8122b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8122a8:	e13fff17 	ldw	r4,-4(fp)
  8122ac:	081216c0 	call	81216c <alt_alarm_stop>
  8122b0:	00000d06 	br	8122e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8122b4:	e0bfff17 	ldw	r2,-4(fp)
  8122b8:	10c00217 	ldw	r3,8(r2)
  8122bc:	e0bffd17 	ldw	r2,-12(fp)
  8122c0:	1887883a 	add	r3,r3,r2
  8122c4:	e0bfff17 	ldw	r2,-4(fp)
  8122c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8122cc:	e0bfff17 	ldw	r2,-4(fp)
  8122d0:	10c00217 	ldw	r3,8(r2)
  8122d4:	d0a75e17 	ldw	r2,-25224(gp)
  8122d8:	1880032e 	bgeu	r3,r2,8122e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8122dc:	e0bfff17 	ldw	r2,-4(fp)
  8122e0:	00c00044 	movi	r3,1
  8122e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8122e8:	e0bffe17 	ldw	r2,-8(fp)
  8122ec:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  8122f0:	e0ffff17 	ldw	r3,-4(fp)
  8122f4:	d0a01404 	addi	r2,gp,-32688
  8122f8:	18bfcf1e 	bne	r3,r2,812238 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8122fc:	0001883a 	nop
}
  812300:	0001883a 	nop
  812304:	e037883a 	mov	sp,fp
  812308:	dfc00117 	ldw	ra,4(sp)
  81230c:	df000017 	ldw	fp,0(sp)
  812310:	dec00204 	addi	sp,sp,8
  812314:	f800283a 	ret

00812318 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812318:	deffff04 	addi	sp,sp,-4
  81231c:	df000015 	stw	fp,0(sp)
  812320:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812324:	000170fa 	wrctl	ienable,zero
}
  812328:	0001883a 	nop
  81232c:	e037883a 	mov	sp,fp
  812330:	df000017 	ldw	fp,0(sp)
  812334:	dec00104 	addi	sp,sp,4
  812338:	f800283a 	ret

0081233c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81233c:	defffa04 	addi	sp,sp,-24
  812340:	dfc00515 	stw	ra,20(sp)
  812344:	df000415 	stw	fp,16(sp)
  812348:	df000404 	addi	fp,sp,16
  81234c:	e13ffd15 	stw	r4,-12(fp)
  812350:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812354:	e0bffc17 	ldw	r2,-16(fp)
  812358:	10800017 	ldw	r2,0(r2)
  81235c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812360:	e13ffd17 	ldw	r4,-12(fp)
  812364:	0801e300 	call	801e30 <strlen>
  812368:	10800044 	addi	r2,r2,1
  81236c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812370:	00000d06 	br	8123a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812374:	e0bfff17 	ldw	r2,-4(fp)
  812378:	10800217 	ldw	r2,8(r2)
  81237c:	e0fffe17 	ldw	r3,-8(fp)
  812380:	180d883a 	mov	r6,r3
  812384:	e17ffd17 	ldw	r5,-12(fp)
  812388:	1009883a 	mov	r4,r2
  81238c:	08126f80 	call	8126f8 <memcmp>
  812390:	1000021e 	bne	r2,zero,81239c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812394:	e0bfff17 	ldw	r2,-4(fp)
  812398:	00000706 	br	8123b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81239c:	e0bfff17 	ldw	r2,-4(fp)
  8123a0:	10800017 	ldw	r2,0(r2)
  8123a4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  8123a8:	e0ffff17 	ldw	r3,-4(fp)
  8123ac:	e0bffc17 	ldw	r2,-16(fp)
  8123b0:	18bff01e 	bne	r3,r2,812374 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  8123b4:	0005883a 	mov	r2,zero
}
  8123b8:	e037883a 	mov	sp,fp
  8123bc:	dfc00117 	ldw	ra,4(sp)
  8123c0:	df000017 	ldw	fp,0(sp)
  8123c4:	dec00204 	addi	sp,sp,8
  8123c8:	f800283a 	ret

008123cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8123cc:	defffb04 	addi	sp,sp,-20
  8123d0:	dfc00415 	stw	ra,16(sp)
  8123d4:	df000315 	stw	fp,12(sp)
  8123d8:	df000304 	addi	fp,sp,12
  8123dc:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8123e0:	d0a00c17 	ldw	r2,-32720(gp)
  8123e4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8123e8:	00003106 	br	8124b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8123ec:	e0bfff17 	ldw	r2,-4(fp)
  8123f0:	10800217 	ldw	r2,8(r2)
  8123f4:	1009883a 	mov	r4,r2
  8123f8:	0801e300 	call	801e30 <strlen>
  8123fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812400:	e0bfff17 	ldw	r2,-4(fp)
  812404:	10c00217 	ldw	r3,8(r2)
  812408:	e0bffe17 	ldw	r2,-8(fp)
  81240c:	10bfffc4 	addi	r2,r2,-1
  812410:	1885883a 	add	r2,r3,r2
  812414:	10800003 	ldbu	r2,0(r2)
  812418:	10803fcc 	andi	r2,r2,255
  81241c:	1080201c 	xori	r2,r2,128
  812420:	10bfe004 	addi	r2,r2,-128
  812424:	10800bd8 	cmpnei	r2,r2,47
  812428:	1000031e 	bne	r2,zero,812438 <alt_find_file+0x6c>
    {
      len -= 1;
  81242c:	e0bffe17 	ldw	r2,-8(fp)
  812430:	10bfffc4 	addi	r2,r2,-1
  812434:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812438:	e0bffe17 	ldw	r2,-8(fp)
  81243c:	e0fffd17 	ldw	r3,-12(fp)
  812440:	1885883a 	add	r2,r3,r2
  812444:	10800003 	ldbu	r2,0(r2)
  812448:	10803fcc 	andi	r2,r2,255
  81244c:	1080201c 	xori	r2,r2,128
  812450:	10bfe004 	addi	r2,r2,-128
  812454:	10800be0 	cmpeqi	r2,r2,47
  812458:	1000081e 	bne	r2,zero,81247c <alt_find_file+0xb0>
  81245c:	e0bffe17 	ldw	r2,-8(fp)
  812460:	e0fffd17 	ldw	r3,-12(fp)
  812464:	1885883a 	add	r2,r3,r2
  812468:	10800003 	ldbu	r2,0(r2)
  81246c:	10803fcc 	andi	r2,r2,255
  812470:	1080201c 	xori	r2,r2,128
  812474:	10bfe004 	addi	r2,r2,-128
  812478:	10000a1e 	bne	r2,zero,8124a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  81247c:	e0bfff17 	ldw	r2,-4(fp)
  812480:	10800217 	ldw	r2,8(r2)
  812484:	e0fffe17 	ldw	r3,-8(fp)
  812488:	180d883a 	mov	r6,r3
  81248c:	e17ffd17 	ldw	r5,-12(fp)
  812490:	1009883a 	mov	r4,r2
  812494:	08126f80 	call	8126f8 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  812498:	1000021e 	bne	r2,zero,8124a4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  81249c:	e0bfff17 	ldw	r2,-4(fp)
  8124a0:	00000706 	br	8124c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8124a4:	e0bfff17 	ldw	r2,-4(fp)
  8124a8:	10800017 	ldw	r2,0(r2)
  8124ac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  8124b0:	e0ffff17 	ldw	r3,-4(fp)
  8124b4:	d0a00c04 	addi	r2,gp,-32720
  8124b8:	18bfcc1e 	bne	r3,r2,8123ec <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  8124bc:	0005883a 	mov	r2,zero
}
  8124c0:	e037883a 	mov	sp,fp
  8124c4:	dfc00117 	ldw	ra,4(sp)
  8124c8:	df000017 	ldw	fp,0(sp)
  8124cc:	dec00204 	addi	sp,sp,8
  8124d0:	f800283a 	ret

008124d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8124d4:	defffc04 	addi	sp,sp,-16
  8124d8:	df000315 	stw	fp,12(sp)
  8124dc:	df000304 	addi	fp,sp,12
  8124e0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  8124e4:	00bffa04 	movi	r2,-24
  8124e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8124ec:	e03fff15 	stw	zero,-4(fp)
  8124f0:	00001d06 	br	812568 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  8124f4:	e0ffff17 	ldw	r3,-4(fp)
  8124f8:	1805883a 	mov	r2,r3
  8124fc:	1085883a 	add	r2,r2,r2
  812500:	10c5883a 	add	r2,r2,r3
  812504:	100490ba 	slli	r2,r2,2
  812508:	00c02074 	movhi	r3,129
  81250c:	10c7883a 	add	r3,r2,r3
  812510:	188fb817 	ldw	r2,16096(r3)
  812514:	1000111e 	bne	r2,zero,81255c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  812518:	e0ffff17 	ldw	r3,-4(fp)
  81251c:	1805883a 	mov	r2,r3
  812520:	1085883a 	add	r2,r2,r2
  812524:	10c5883a 	add	r2,r2,r3
  812528:	100490ba 	slli	r2,r2,2
  81252c:	e13ffd17 	ldw	r4,-12(fp)
  812530:	00c02074 	movhi	r3,129
  812534:	10c7883a 	add	r3,r2,r3
  812538:	190fb815 	stw	r4,16096(r3)
      if (i > alt_max_fd)
  81253c:	d0e01017 	ldw	r3,-32704(gp)
  812540:	e0bfff17 	ldw	r2,-4(fp)
  812544:	1880020e 	bge	r3,r2,812550 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  812548:	e0bfff17 	ldw	r2,-4(fp)
  81254c:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  812550:	e0bfff17 	ldw	r2,-4(fp)
  812554:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  812558:	00000706 	br	812578 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  81255c:	e0bfff17 	ldw	r2,-4(fp)
  812560:	10800044 	addi	r2,r2,1
  812564:	e0bfff15 	stw	r2,-4(fp)
  812568:	e0bfff17 	ldw	r2,-4(fp)
  81256c:	10800810 	cmplti	r2,r2,32
  812570:	103fe01e 	bne	r2,zero,8124f4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  812574:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  812578:	e0bffe17 	ldw	r2,-8(fp)
}
  81257c:	e037883a 	mov	sp,fp
  812580:	df000017 	ldw	fp,0(sp)
  812584:	dec00104 	addi	sp,sp,4
  812588:	f800283a 	ret

0081258c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81258c:	defffb04 	addi	sp,sp,-20
  812590:	df000415 	stw	fp,16(sp)
  812594:	df000404 	addi	fp,sp,16
  812598:	e13ffd15 	stw	r4,-12(fp)
  81259c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8125a0:	e0bffc17 	ldw	r2,-16(fp)
  8125a4:	10820070 	cmpltui	r2,r2,2049
  8125a8:	1000021e 	bne	r2,zero,8125b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8125ac:	00820004 	movi	r2,2048
  8125b0:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  8125b4:	e0fffd17 	ldw	r3,-12(fp)
  8125b8:	e0bffc17 	ldw	r2,-16(fp)
  8125bc:	1885883a 	add	r2,r3,r2
  8125c0:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8125c4:	e0bffd17 	ldw	r2,-12(fp)
  8125c8:	e0bfff15 	stw	r2,-4(fp)
  8125cc:	00000506 	br	8125e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8125d0:	e0bfff17 	ldw	r2,-4(fp)
  8125d4:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8125d8:	e0bfff17 	ldw	r2,-4(fp)
  8125dc:	10800804 	addi	r2,r2,32
  8125e0:	e0bfff15 	stw	r2,-4(fp)
  8125e4:	e0ffff17 	ldw	r3,-4(fp)
  8125e8:	e0bffe17 	ldw	r2,-8(fp)
  8125ec:	18bff836 	bltu	r3,r2,8125d0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8125f0:	e0bffd17 	ldw	r2,-12(fp)
  8125f4:	108007cc 	andi	r2,r2,31
  8125f8:	10000226 	beq	r2,zero,812604 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8125fc:	e0bfff17 	ldw	r2,-4(fp)
  812600:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812604:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812608:	0001883a 	nop
  81260c:	e037883a 	mov	sp,fp
  812610:	df000017 	ldw	fp,0(sp)
  812614:	dec00104 	addi	sp,sp,4
  812618:	f800283a 	ret

0081261c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81261c:	defffe04 	addi	sp,sp,-8
  812620:	df000115 	stw	fp,4(sp)
  812624:	df000104 	addi	fp,sp,4
  812628:	e13fff15 	stw	r4,-4(fp)
  81262c:	e0bfff17 	ldw	r2,-4(fp)
  812630:	10bffe84 	addi	r2,r2,-6
  812634:	10c00428 	cmpgeui	r3,r2,16
  812638:	1800191e 	bne	r3,zero,8126a0 <alt_exception_cause_generated_bad_addr+0x84>
  81263c:	100690ba 	slli	r3,r2,2
  812640:	00802074 	movhi	r2,129
  812644:	1885883a 	add	r2,r3,r2
  812648:	10899417 	ldw	r2,9808(r2)
  81264c:	1000683a 	jmp	r2
  812650:	00812690 	cmplti	r2,zero,1178
  812654:	00812690 	cmplti	r2,zero,1178
  812658:	008126a0 	cmpeqi	r2,zero,1178
  81265c:	008126a0 	cmpeqi	r2,zero,1178
  812660:	008126a0 	cmpeqi	r2,zero,1178
  812664:	00812690 	cmplti	r2,zero,1178
  812668:	00812698 	cmpnei	r2,zero,1178
  81266c:	008126a0 	cmpeqi	r2,zero,1178
  812670:	00812690 	cmplti	r2,zero,1178
  812674:	00812690 	cmplti	r2,zero,1178
  812678:	008126a0 	cmpeqi	r2,zero,1178
  81267c:	00812690 	cmplti	r2,zero,1178
  812680:	00812698 	cmpnei	r2,zero,1178
  812684:	008126a0 	cmpeqi	r2,zero,1178
  812688:	008126a0 	cmpeqi	r2,zero,1178
  81268c:	00812690 	cmplti	r2,zero,1178
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812690:	00800044 	movi	r2,1
  812694:	00000306 	br	8126a4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812698:	0005883a 	mov	r2,zero
  81269c:	00000106 	br	8126a4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  8126a0:	0005883a 	mov	r2,zero
  }
}
  8126a4:	e037883a 	mov	sp,fp
  8126a8:	df000017 	ldw	fp,0(sp)
  8126ac:	dec00104 	addi	sp,sp,4
  8126b0:	f800283a 	ret

008126b4 <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
  8126b4:	200b883a 	mov	r5,r4
  8126b8:	000f883a 	mov	r7,zero
  8126bc:	000d883a 	mov	r6,zero
  8126c0:	0009883a 	mov	r4,zero
  8126c4:	08127701 	jmpi	812770 <__register_exitproc>

008126c8 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
  8126c8:	defffe04 	addi	sp,sp,-8
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
  8126cc:	000b883a 	mov	r5,zero
{
  8126d0:	dc000015 	stw	r16,0(sp)
  8126d4:	dfc00115 	stw	ra,4(sp)
  8126d8:	2021883a 	mov	r16,r4
    __call_exitprocs (code, NULL);
  8126dc:	08127fc0 	call	8127fc <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
  8126e0:	d1200817 	ldw	r4,-32736(gp)
  8126e4:	20800f17 	ldw	r2,60(r4)
  8126e8:	10000126 	beq	r2,zero,8126f0 <exit+0x28>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
  8126ec:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
  8126f0:	8009883a 	mov	r4,r16
  8126f4:	08100940 	call	810094 <_exit>

008126f8 <memcmp>:
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
  8126f8:	30800130 	cmpltui	r2,r6,4
  8126fc:	10000b1e 	bne	r2,zero,81272c <memcmp+0x34>
  812700:	2144b03a 	or	r2,r4,r5
  812704:	108000cc 	andi	r2,r2,3
  812708:	1000171e 	bne	r2,zero,812768 <memcmp+0x70>
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
        {
          if (*a1 != *a2) 
  81270c:	20c00017 	ldw	r3,0(r4)
  812710:	28800017 	ldw	r2,0(r5)
  812714:	1880141e 	bne	r3,r2,812768 <memcmp+0x70>
   	    break;
          a1++;
          a2++;
          n -= LBLOCKSIZE;
  812718:	31bfff04 	addi	r6,r6,-4
      while (n >= LBLOCKSIZE)
  81271c:	30800128 	cmpgeui	r2,r6,4
          a1++;
  812720:	21000104 	addi	r4,r4,4
          a2++;
  812724:	29400104 	addi	r5,r5,4
      while (n >= LBLOCKSIZE)
  812728:	103ff81e 	bne	r2,zero,81270c <memcmp+0x14>

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
  81272c:	30bfffc4 	addi	r2,r6,-1
  812730:	30000b26 	beq	r6,zero,812760 <memcmp+0x68>
  812734:	11800044 	addi	r6,r2,1
  812738:	218d883a 	add	r6,r4,r6
  81273c:	00000106 	br	812744 <memcmp+0x4c>
  812740:	21800726 	beq	r4,r6,812760 <memcmp+0x68>
    {
      if (*s1 != *s2)
  812744:	20800003 	ldbu	r2,0(r4)
  812748:	28c00003 	ldbu	r3,0(r5)
	return *s1 - *s2;
      s1++;
  81274c:	21000044 	addi	r4,r4,1
      s2++;
  812750:	29400044 	addi	r5,r5,1
      if (*s1 != *s2)
  812754:	10fffa26 	beq	r2,r3,812740 <memcmp+0x48>
	return *s1 - *s2;
  812758:	10c5c83a 	sub	r2,r2,r3
  81275c:	f800283a 	ret
    }

  return 0;
  812760:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  812764:	f800283a 	ret
  while (n--)
  812768:	30bfffc4 	addi	r2,r6,-1
  81276c:	003ff106 	br	812734 <memcmp+0x3c>

00812770 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
  812770:	d0e00817 	ldw	r3,-32736(gp)
  812774:	18805217 	ldw	r2,328(r3)
  if (p == NULL)
  812778:	10001726 	beq	r2,zero,8127d8 <__register_exitproc+0x68>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
  81277c:	10c00117 	ldw	r3,4(r2)
  812780:	1a000808 	cmpgei	r8,r3,32
  812784:	40001b1e 	bne	r8,zero,8127f4 <__register_exitproc+0x84>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
  812788:	20000b26 	beq	r4,zero,8127b8 <__register_exitproc+0x48>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
  81278c:	181090ba 	slli	r8,r3,2
      args->_fntypes |= (1 << p->_ind);
  812790:	02400044 	movi	r9,1
  812794:	48d2983a 	sll	r9,r9,r3
  812798:	1211883a 	add	r8,r2,r8
      args->_fnargs[p->_ind] = arg;
  81279c:	41802215 	stw	r6,136(r8)
      args->_fntypes |= (1 << p->_ind);
  8127a0:	11806217 	ldw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
  8127a4:	21000098 	cmpnei	r4,r4,2
      args->_fntypes |= (1 << p->_ind);
  8127a8:	324cb03a 	or	r6,r6,r9
  8127ac:	11806215 	stw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
  8127b0:	41c04215 	stw	r7,264(r8)
      if (type == __et_cxa)
  8127b4:	20000b26 	beq	r4,zero,8127e4 <__register_exitproc+0x74>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
  8127b8:	19000084 	addi	r4,r3,2
  8127bc:	200890ba 	slli	r4,r4,2
  8127c0:	18c00044 	addi	r3,r3,1
  8127c4:	10c00115 	stw	r3,4(r2)
  8127c8:	1105883a 	add	r2,r2,r4
  8127cc:	11400015 	stw	r5,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
  8127d0:	0005883a 	mov	r2,zero
  8127d4:	f800283a 	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  8127d8:	18805304 	addi	r2,r3,332
  8127dc:	18805215 	stw	r2,328(r3)
  8127e0:	003fe606 	br	81277c <__register_exitproc+0xc>
	args->_is_cxa |= (1 << p->_ind);
  8127e4:	11006317 	ldw	r4,396(r2)
  8127e8:	2252b03a 	or	r9,r4,r9
  8127ec:	12406315 	stw	r9,396(r2)
  8127f0:	003ff106 	br	8127b8 <__register_exitproc+0x48>
      return -1;
  8127f4:	00bfffc4 	movi	r2,-1
}
  8127f8:	f800283a 	ret

008127fc <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
  8127fc:	defff704 	addi	sp,sp,-36
  812800:	dcc00315 	stw	r19,12(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
  812804:	d4e00817 	ldw	r19,-32736(gp)
{
  812808:	dd800615 	stw	r22,24(sp)
  81280c:	dfc00815 	stw	ra,32(sp)
  p = _GLOBAL_ATEXIT;
  812810:	9d805217 	ldw	r22,328(r19)
{
  812814:	ddc00715 	stw	r23,28(sp)
  812818:	dd400515 	stw	r21,20(sp)
  81281c:	dd000415 	stw	r20,16(sp)
  812820:	dc800215 	stw	r18,8(sp)
  812824:	dc400115 	stw	r17,4(sp)
  812828:	dc000015 	stw	r16,0(sp)
  lastp = &_GLOBAL_ATEXIT;
  while (p)
  81282c:	b0002226 	beq	r22,zero,8128b8 <__call_exitprocs+0xbc>
  812830:	202b883a 	mov	r21,r4
  812834:	2825883a 	mov	r18,r5
  812838:	05000044 	movi	r20,1
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
  81283c:	b0800117 	ldw	r2,4(r22)
  812840:	143fffc4 	addi	r16,r2,-1
  812844:	80001c16 	blt	r16,zero,8128b8 <__call_exitprocs+0xbc>
  812848:	14400044 	addi	r17,r2,1
  81284c:	882290ba 	slli	r17,r17,2
  812850:	b463883a 	add	r17,r22,r17
  812854:	9000051e 	bne	r18,zero,81286c <__call_exitprocs+0x70>
  812858:	00003306 	br	812928 <__call_exitprocs+0x12c>
  81285c:	843fffc4 	addi	r16,r16,-1
  812860:	80bfffd8 	cmpnei	r2,r16,-1
  812864:	8c7fff04 	addi	r17,r17,-4
  812868:	10001326 	beq	r2,zero,8128b8 <__call_exitprocs+0xbc>
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
  81286c:	88804017 	ldw	r2,256(r17)
  812870:	14bffa1e 	bne	r2,r18,81285c <__call_exitprocs+0x60>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
	  if (n == p->_ind - 1)
  812874:	b5c00117 	ldw	r23,4(r22)
	  fn = p->_fns[n];
  812878:	89800017 	ldw	r6,0(r17)
	  if (n == p->_ind - 1)
  81287c:	b8bfffc4 	addi	r2,r23,-1
  812880:	14003726 	beq	r2,r16,812960 <__call_exitprocs+0x164>
	    p->_ind--;
	  else
	    p->_fns[n] = NULL;
  812884:	88000015 	stw	zero,0(r17)

	  /* Skip functions that have already been called.  */
	  if (!fn)
  812888:	303ff426 	beq	r6,zero,81285c <__call_exitprocs+0x60>
	  i = 1 << n;
  81288c:	a406983a 	sll	r3,r20,r16
	    continue;

	  ind = p->_ind;

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
  812890:	b0806217 	ldw	r2,392(r22)
  812894:	1884703a 	and	r2,r3,r2
  812898:	1000291e 	bne	r2,zero,812940 <__call_exitprocs+0x144>
	    fn ();
  81289c:	303ee83a 	callr	r6
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
  8128a0:	b0800117 	ldw	r2,4(r22)
  p = _GLOBAL_ATEXIT;
  8128a4:	98c05217 	ldw	r3,328(r19)
	  if (ind != p->_ind || *lastp != p)
  8128a8:	15c0011e 	bne	r2,r23,8128b0 <__call_exitprocs+0xb4>
  8128ac:	b0ffeb26 	beq	r22,r3,81285c <__call_exitprocs+0x60>
  p = _GLOBAL_ATEXIT;
  8128b0:	182d883a 	mov	r22,r3
  while (p)
  8128b4:	183fe11e 	bne	r3,zero,81283c <__call_exitprocs+0x40>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
  8128b8:	dfc00817 	ldw	ra,32(sp)
  8128bc:	ddc00717 	ldw	r23,28(sp)
  8128c0:	dd800617 	ldw	r22,24(sp)
  8128c4:	dd400517 	ldw	r21,20(sp)
  8128c8:	dd000417 	ldw	r20,16(sp)
  8128cc:	dcc00317 	ldw	r19,12(sp)
  8128d0:	dc800217 	ldw	r18,8(sp)
  8128d4:	dc400117 	ldw	r17,4(sp)
  8128d8:	dc000017 	ldw	r16,0(sp)
  8128dc:	dec00904 	addi	sp,sp,36
  8128e0:	f800283a 	ret
	    p->_ind--;
  8128e4:	b4000115 	stw	r16,4(r22)
  8128e8:	802f883a 	mov	r23,r16
	  if (!fn)
  8128ec:	10000926 	beq	r2,zero,812914 <__call_exitprocs+0x118>
	  i = 1 << n;
  8128f0:	a40c983a 	sll	r6,r20,r16
	  if (!args || (args->_fntypes & i) == 0)
  8128f4:	b0c06217 	ldw	r3,392(r22)
  8128f8:	30c6703a 	and	r3,r6,r3
  8128fc:	18001d1e 	bne	r3,zero,812974 <__call_exitprocs+0x178>
	    fn ();
  812900:	103ee83a 	callr	r2
	  if (ind != p->_ind || *lastp != p)
  812904:	b0800117 	ldw	r2,4(r22)
  p = _GLOBAL_ATEXIT;
  812908:	98c05217 	ldw	r3,328(r19)
	  if (ind != p->_ind || *lastp != p)
  81290c:	15ffe81e 	bne	r2,r23,8128b0 <__call_exitprocs+0xb4>
  812910:	1dbfe71e 	bne	r3,r22,8128b0 <__call_exitprocs+0xb4>
      for (n = p->_ind - 1; n >= 0; n--)
  812914:	843fffc4 	addi	r16,r16,-1
  812918:	80bfffd8 	cmpnei	r2,r16,-1
  81291c:	8c7fff04 	addi	r17,r17,-4
  812920:	103fe526 	beq	r2,zero,8128b8 <__call_exitprocs+0xbc>
  812924:	b0800117 	ldw	r2,4(r22)
	  if (n == p->_ind - 1)
  812928:	10ffffc4 	addi	r3,r2,-1
  81292c:	102f883a 	mov	r23,r2
	  fn = p->_fns[n];
  812930:	88800017 	ldw	r2,0(r17)
	  if (n == p->_ind - 1)
  812934:	1c3feb26 	beq	r3,r16,8128e4 <__call_exitprocs+0xe8>
	    p->_fns[n] = NULL;
  812938:	88000015 	stw	zero,0(r17)
  81293c:	003feb06 	br	8128ec <__call_exitprocs+0xf0>
	  else if ((args->_is_cxa & i) == 0)
  812940:	b0806317 	ldw	r2,396(r22)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812944:	89002017 	ldw	r4,128(r17)
	  else if ((args->_is_cxa & i) == 0)
  812948:	1886703a 	and	r3,r3,r2
  81294c:	1800071e 	bne	r3,zero,81296c <__call_exitprocs+0x170>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812950:	200b883a 	mov	r5,r4
  812954:	a809883a 	mov	r4,r21
  812958:	303ee83a 	callr	r6
  81295c:	003fd006 	br	8128a0 <__call_exitprocs+0xa4>
	    p->_ind--;
  812960:	b4000115 	stw	r16,4(r22)
  812964:	802f883a 	mov	r23,r16
  812968:	003fc706 	br	812888 <__call_exitprocs+0x8c>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  81296c:	303ee83a 	callr	r6
  812970:	003fcb06 	br	8128a0 <__call_exitprocs+0xa4>
	  else if ((args->_is_cxa & i) == 0)
  812974:	b0c06317 	ldw	r3,396(r22)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812978:	89002017 	ldw	r4,128(r17)
	  else if ((args->_is_cxa & i) == 0)
  81297c:	30cc703a 	and	r6,r6,r3
  812980:	30000226 	beq	r6,zero,81298c <__call_exitprocs+0x190>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  812984:	103ee83a 	callr	r2
  812988:	003fde06 	br	812904 <__call_exitprocs+0x108>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  81298c:	200b883a 	mov	r5,r4
  812990:	a809883a 	mov	r4,r21
  812994:	103ee83a 	callr	r2
  812998:	003fda06 	br	812904 <__call_exitprocs+0x108>
