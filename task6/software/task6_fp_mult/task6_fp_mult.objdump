
task6_fp_mult.elf:     file format elf32-littlenios2
task6_fp_mult.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001307c memsz 0x0001307c flags r-x
    LOAD off    0x0001409c vaddr 0x0081309c paddr 0x00814c94 align 2**12
         filesz 0x00001bf8 memsz 0x00001bf8 flags rw-
    LOAD off    0x0001688c vaddr 0x0081688c paddr 0x0081688c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012388  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000adc  008125c0  008125c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf8  0081309c  00814c94  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0081688c  0081688c  0001688c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008169e4  008169e4  00015c94  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00015c94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001280  00000000  00000000  00015cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00030ca7  00000000  00000000  00016f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ca08  00000000  00000000  00047bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001b1b5  00000000  00000000  000545f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000028ac  00000000  00000000  0006f7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004ff9  00000000  00000000  00072058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00022dd2  00000000  00000000  00077051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  00099e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d30  00000000  00000000  00099e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000a040a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000a040d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a0410  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a0411  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a0412  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a0416  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a041a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a041e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a0427  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a0430  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000a0439  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000a044b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  000a0483  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ed55  00000000  00000000  000a551c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
008125c0 l    d  .rodata	00000000 .rodata
0081309c l    d  .rwdata	00000000 .rwdata
0081688c l    d  .bss	00000000 .bss
008169e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_fp_mult_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
0081262c l     O .rodata	00000080 npio2_hw
008126ac l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
008129f0 l     O .rodata	0000000c init_jk
008129c4 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804e10 l     F .text	000000c0 __sbprintf
00812b54 l     O .rodata	00000010 blanks.1
00812b44 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805030 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806c9c l     F .text	00000008 __fp_lock
00806cb0 l     F .text	00000008 __fp_unlock
00806cb8 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081309c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812c68 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a340 l     F .text	000000f4 __sprint_r.part.0
0080b7a8 l     F .text	000000c0 __sbprintf
00812d9c l     O .rodata	00000010 blanks.1
00812d8c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
0080ba88 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fbf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fd10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fd74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080fe8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080ff78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008100e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008101cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008103ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814c84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
008107c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00810878 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008109b8 l     F .text	00000034 alt_dev_reg
00813bdc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810cb0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810ebc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811500 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811bf8 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00811d48 l     F .text	0000003c alt_get_errno
00811d84 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008168b8 g     O .bss	00000004 alt_instruction_exception_handler
00809a48 g     F .text	00000070 _mprec_log10
00809b34 g     F .text	00000060 __any_on
0080becc g     F .text	00000050 _isatty_r
00812c74 g     O .rodata	00000028 __mprec_tinytens
008102e8 g     F .text	0000007c alt_main
00802b84 g     F .text	000000cc _puts_r
008168e4 g     O .bss	00000100 alt_irq
0080bf1c g     F .text	0000005c _lseek_r
00814c94 g       *ABS*	00000000 __flash_rwdata_start
0080e72c g     F .text	00000080 .hidden __eqdf2
008169e4 g       *ABS*	00000000 __alt_heap_start
00814c48 g     O .rwdata	00000004 c_term1
0080c718 g     F .text	00000058 _kill_r
00802b50 g     F .text	00000034 printf
0080c134 g     F .text	0000006c _wcrtomb_r
0080c298 g     F .text	00000098 _signal_r
0080a224 g     F .text	0000005c __sseek
00806ff8 g     F .text	00000010 __sinit
0080bfd8 g     F .text	00000148 __swbuf_r
00807a6c g     F .text	00000074 _setlocale_r
00806e20 g     F .text	00000078 __sfmoreglue
00810388 g     F .text	00000024 __malloc_unlock
00808788 g     F .text	0000012c memmove
00806fe8 g     F .text	00000010 _cleanup
008089a4 g     F .text	000000a4 _Balloc
00802814 g     F .text	00000070 .hidden __fixsfsi
00814c44 g     O .rwdata	00000004 coeff3
0080e7ac g     F .text	000000e8 .hidden __gtdf2
00811fc0 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00810800 g     F .text	00000078 times
00807a4c g     F .text	00000008 __localeconv_l
008006f0 g     F .text	00000468 __ieee754_rem_pio2f
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080be74 g     F .text	00000058 _fstat_r
0081689c g     O .bss	00000004 errno
0080a19c g     F .text	00000008 __seofread
008168a4 g     O .bss	00000004 alt_argv
0081cc3c g       *ABS*	00000000 _gp
00802380 g     F .text	00000494 .hidden __subsf3
0080fe6c g     F .text	00000020 getpid
00813a5c g     O .rwdata	00000180 alt_fd_list
00811fe4 g     F .text	00000090 alt_find_dev
00808688 g     F .text	00000100 memcpy
00806ca4 g     F .text	0000000c _cleanup_r
0080fab0 g     F .text	000000b8 .hidden __floatsidf
00811ccc g     F .text	0000007c alt_io_redirect
0080e894 g     F .text	000000e8 .hidden __ltdf2
008125c0 g       *ABS*	00000000 __DTOR_END__
00802c50 g     F .text	0000000c puts
008122c4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
008099a4 g     F .text	000000a4 __ratio
00814c58 g     O .rwdata	00000004 c_term5
0080b790 g     F .text	00000018 __vfiprintf_internal
008110b8 g     F .text	00000220 altera_avalon_jtag_uart_read
00802b20 g     F .text	00000030 _printf_r
0080d44c g     F .text	00000064 .hidden __udivsi3
0080fec8 g     F .text	000000b0 isatty
0080c330 g     F .text	000000c4 _raise_r
0080b950 g     F .text	00000060 __assert_func
00812cc4 g     O .rodata	000000c8 __mprec_tens
00812234 g     F .text	00000090 alt_icache_flush
00816898 g     O .bss	00000004 __malloc_top_pad
0080c770 g     F .text	00000004 _getpid_r
00807a54 g     F .text	0000000c _localeconv_r
00808e14 g     F .text	000000b0 __i2b
00807444 g     F .text	000004c8 __sfvwrite_r
0080c3f4 g     F .text	000000bc __sigtramp_r
0080a0f8 g     F .text	00000050 _sbrk_r
0080bf78 g     F .text	0000005c _read_r
00814c7c g     O .rwdata	00000004 alt_max_fd
0080bb48 g     F .text	00000070 _fclose_r
00806c20 g     F .text	0000007c fflush
00816894 g     O .bss	00000004 __malloc_max_sbrked_mem
008029a8 g     F .text	000000fc .hidden __extendsfdf2
0080d50c g     F .text	000008f0 .hidden __adddf3
00801e58 g     F .text	00000070 .hidden __nesf2
00809738 g     F .text	00000108 __b2d
0080cd94 g     F .text	000005c4 .hidden __umoddi3
00810208 g     F .text	000000e0 lseek
00814c5c g     O .rwdata	00000004 _global_impure_ptr
00809b94 g     F .text	00000564 _realloc_r
008016d8 g     F .text	00000110 __kernel_sinf
008169e4 g       *ABS*	00000000 __bss_end
00811b10 g     F .text	000000e8 alt_iic_isr_register
008106bc g     F .text	00000108 alt_tick
0080c774 g     F .text	00000620 .hidden __udivdi3
0080bddc g     F .text	00000024 _fputwc_r
00812c9c g     O .rodata	00000028 __mprec_bigtens
00808bc8 g     F .text	00000138 __s2b
0080c224 g     F .text	00000018 abort
0080fb68 g     F .text	00000090 .hidden __floatunsidf
00809458 g     F .text	00000058 __mcmp
00807018 g     F .text	00000010 __fp_lock_all
00811ac4 g     F .text	0000004c alt_ic_irq_enabled
00810618 g     F .text	000000a4 alt_alarm_stop
00800654 g     F .text	0000009c cosf
008168b4 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
00813a34 g     O .rwdata	00000028 alt_dev_null
00811734 g     F .text	0000004c alt_dcache_flush_all
00808d00 g     F .text	00000064 __hi0bits
0080fa30 g     F .text	00000080 .hidden __fixdfsi
00800b58 g     F .text	000001d0 __kernel_cosf
00814c94 g       *ABS*	00000000 __ram_rwdata_end
00814c74 g     O .rwdata	00000008 alt_dev_list
008108b4 g     F .text	00000104 write
00801ec8 g     F .text	000000b8 .hidden __gtsf2
0081309c g       *ABS*	00000000 __ram_rodata_end
0080fdb0 g     F .text	000000bc fstat
0080ffb4 g     F .text	0000012c kill
00814c54 g     O .rwdata	00000004 c_term4
0080e894 g     F .text	000000e8 .hidden __ledf2
00800404 g     F .text	00000120 theFunction
00809188 g     F .text	00000148 __pow5mult
0080a44c g     F .text	00001344 ___vfiprintf_internal_r
0080d4b0 g     F .text	0000005c .hidden __umodsi3
008169e4 g       *ABS*	00000000 end
00810bf0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
008125c0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081157c g     F .text	00000084 alt_avalon_timer_sc_init
00802aa4 g     F .text	00000054 .hidden __clzsi2
008112d8 g     F .text	00000228 altera_avalon_jtag_uart_write
00807008 g     F .text	00000004 __sfp_lock_acquire
008085b8 g     F .text	000000d0 memchr
00802cf4 g     F .text	00002104 ___vfprintf_internal_r
00807150 g     F .text	000002f4 _free_r
00812ef0 g     O .rodata	00000180 _ctype_b
00807ae0 g     F .text	0000000c __locale_mb_cur_max
008124a4 g     F .text	0000011c __call_exitprocs
00814c64 g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
008168ac g     O .bss	00000004 _alt_tick_rate
008092d0 g     F .text	00000188 __lshift
008168b0 g     O .bss	00000004 _alt_nticks
0080c568 g     F .text	0000009c signal
008103e8 g     F .text	00000108 read
00810a28 g     F .text	00000064 alt_sys_init
00802884 g     F .text	00000124 .hidden __floatsisf
00812418 g     F .text	0000008c __register_exitproc
00808ec4 g     F .text	000002c4 __multiply
00810f5c g     F .text	00000068 altera_avalon_jtag_uart_close
00802af8 g     F .text	00000028 .hidden __mulsi3
0081309c g       *ABS*	00000000 __ram_rwdata_start
008125c0 g       *ABS*	00000000 __ram_rodata_start
008168bc g     O .bss	00000028 __malloc_current_mallinfo
00801e58 g     F .text	00000070 .hidden __eqsf2
00809840 g     F .text	00000164 __d2b
00814c4c g     O .rwdata	00000004 c_term2
00810a8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081217c g     F .text	000000b8 alt_get_fd
0080b900 g     F .text	00000050 _close_r
00800284 g     F .text	000000a8 generateVector
008123a0 g     F .text	00000078 memcmp
00810b4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008169e4 g       *ABS*	00000000 __alt_stack_base
00810b9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804ed0 g     F .text	00000160 __swsetup_r
0080ddfc g     F .text	00000930 .hidden __divdf3
00806e98 g     F .text	00000150 __sfp
00809ab8 g     F .text	0000007c __copybits
0081362c g     O .rwdata	00000408 __malloc_av_
00807014 g     F .text	00000004 __sinit_lock_release
0080e97c g     F .text	000007ac .hidden __muldf3
0080a148 g     F .text	00000054 __sread
00812074 g     F .text	00000108 alt_find_file
008117bc g     F .text	000000a8 alt_dev_llist_insert
00810364 g     F .text	00000024 __malloc_lock
00810560 g     F .text	000000b8 sbrk
008018d0 g     F .text	0000011c scalbnf
00806bc0 g     F .text	00000060 _fflush_r
0080b9c4 g     F .text	000000c4 _calloc_r
0081688c g       *ABS*	00000000 __bss_start
008088b4 g     F .text	000000f0 memset
00800524 g     F .text	00000130 main
008168a8 g     O .bss	00000004 alt_envp
00816890 g     O .bss	00000004 __malloc_max_total_mem
00810aec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c120 g     F .text	00000014 __swbuf
0080a280 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080bbb8 g     F .text	0000006c fclose
00805250 g     F .text	00001748 _dtoa_r
00807da8 g     F .text	000007c0 _malloc_r
0080b874 g     F .text	00000030 __ascii_wctomb
00814c80 g     O .rwdata	00000004 alt_errno
0080bc24 g     F .text	00000020 _fiprintf_r
0080c604 g     F .text	0000005c _init_signal
0080790c g     F .text	00000098 _fwalk
00808568 g     F .text	0000000c _mbtowc_r
0080d358 g     F .text	00000080 .hidden __divsi3
00807038 g     F .text	00000118 _malloc_trim_r
008125c0 g       *ABS*	00000000 __CTOR_END__
00801f80 g     F .text	00000400 .hidden __mulsf3
0080a288 g     F .text	000000b8 strcmp
008125c0 g       *ABS*	00000000 __flash_rodata_start
008125c0 g       *ABS*	00000000 __DTOR_LIST__
0080e72c g     F .text	00000080 .hidden __nedf2
008109ec g     F .text	0000003c alt_irq_init
008104f0 g     F .text	00000070 alt_release_fd
008129fc g     O .rodata	00000100 .hidden __clz_tab
0081688c g     O .bss	00000004 _PathLocale
0081235c g     F .text	00000014 atexit
00801ec8 g     F .text	000000b8 .hidden __gesf2
0080032c g     F .text	000000d8 sumVector
0080b8a4 g     F .text	0000005c _write_r
00814c40 g     O .rwdata	00000004 coeff2
00807aec g     F .text	00000074 setlocale
00814c60 g     O .rwdata	00000004 _impure_ptr
008168a0 g     O .bss	00000004 alt_argc
00806998 g     F .text	00000228 __sflush_r
008118c8 g     F .text	00000064 _do_dtors
00814c50 g     O .rwdata	00000004 c_term3
00800020 g       .exceptions	00000000 alt_irq_entry
00808574 g     F .text	00000044 __ascii_mbtowc
008096dc g     F .text	0000005c __ulp
00807028 g     F .text	00000010 __fp_unlock_all
00814c6c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807a60 g     F .text	0000000c localeconv
00807d10 g     F .text	00000098 __swhatbuf_r
00811960 g     F .text	00000050 alt_ic_isr_register
00814c94 g       *ABS*	00000000 _edata
008169e4 g       *ABS*	00000000 _end
0080bc78 g     F .text	00000164 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
00810fc4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00811a38 g     F .text	0000008c alt_ic_irq_disable
0080a1a4 g     F .text	00000080 __swrite
00814c68 g     O .rwdata	00000004 __malloc_trim_threshold
00812370 g     F .text	00000030 exit
0080bc44 g     F .text	00000034 fiprintf
0080bfd4 g     F .text	00000004 _vfiprintf_r
008079a4 g     F .text	000000a8 _fwalk_reent
008094b0 g     F .text	0000022c __mdiff
0080d3d8 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080700c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00812dec g     O .rodata	00000101 _ctype_
0080f9dc g     F .text	00000054 .hidden __unorddf2
0080fd3c g     F .text	00000038 _exit
00800d28 g     F .text	000009b0 __kernel_rem_pio2f
00811600 g     F .text	00000134 alt_alarm_start
00807b60 g     F .text	000001b0 __smakebuf_r
00802c5c g     F .text	00000098 strlen
0080c23c g     F .text	0000005c _init_signal_r
00811e60 g     F .text	00000160 open
0080e7ac g     F .text	000000e8 .hidden __gedf2
0080b9b0 g     F .text	00000014 __assert
0080a434 g     F .text	00000018 __sprint_r
0081192c g     F .text	00000034 alt_icache_flush_all
008017e8 g     F .text	000000e8 floorf
00814c90 g     O .rwdata	00000004 alt_priority_mask
008119b0 g     F .text	00000088 alt_ic_irq_enable
00804df8 g     F .text	00000018 __vfprintf_internal
0080b868 g     F .text	0000000c _wctomb_r
0080f128 g     F .text	000008b4 .hidden __subdf3
00808d64 g     F .text	000000b0 __lo0bits
00814c88 g     O .rwdata	00000008 alt_alarm_list
00811864 g     F .text	00000064 _do_ctors
0080c660 g     F .text	000000b8 __sigtramp
0080c1a0 g     F .text	00000084 wcrtomb
00814c3c g     O .rwdata	00000004 coeff1
0080fc34 g     F .text	000000dc close
008019ec g     F .text	0000046c .hidden __addsf3
008134c0 g     O .rwdata	0000016c __global_locale
00810148 g     F .text	00000084 alt_load
0080be00 g     F .text	00000074 fputwc
0080c4b0 g     F .text	000000b8 raise
00807010 g     F .text	00000004 __sinit_lock_acquire
00808a6c g     F .text	0000015c __multadd
00808a48 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10da3917 	ldw	r3,26852(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	109a3a17 	ldw	r2,26856(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a71f17 	ldw	r2,-25476(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a71f17 	ldw	r2,-25476(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6b30f14 	ori	gp,gp,52284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	109a2314 	ori	r2,r2,26764

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18da7914 	ori	r3,r3,27108

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	08101480 	call	810148 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	08102e80 	call	8102e8 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <generateVector>:

#else

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
  800284:	defffb04 	addi	sp,sp,-20
  800288:	dfc00415 	stw	ra,16(sp)
  80028c:	df000315 	stw	fp,12(sp)
  800290:	dc000215 	stw	r16,8(sp)
  800294:	df000304 	addi	fp,sp,12
  800298:	e13ffd15 	stw	r4,-12(fp)
  int i;
  x[0] = 0;
  80029c:	e0bffd17 	ldw	r2,-12(fp)
  8002a0:	10000015 	stw	zero,0(r2)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  8002a4:	00800044 	movi	r2,1
  8002a8:	e0bffe15 	stw	r2,-8(fp)
  8002ac:	00001406 	br	800300 <generateVector+0x7c>
  8002b0:	e0fffe17 	ldw	r3,-8(fp)
  8002b4:	00900034 	movhi	r2,16384
  8002b8:	10bfffc4 	addi	r2,r2,-1
  8002bc:	1885883a 	add	r2,r3,r2
  8002c0:	100490ba 	slli	r2,r2,2
  8002c4:	e0fffd17 	ldw	r3,-12(fp)
  8002c8:	1885883a 	add	r2,r3,r2
  8002cc:	11000017 	ldw	r4,0(r2)
  8002d0:	e0bffe17 	ldw	r2,-8(fp)
  8002d4:	100490ba 	slli	r2,r2,2
  8002d8:	e0fffd17 	ldw	r3,-12(fp)
  8002dc:	18a1883a 	add	r16,r3,r2
  8002e0:	01502834 	movhi	r5,16544
  8002e4:	08019ec0 	call	8019ec <__addsf3>
  8002e8:	1007883a 	mov	r3,r2
  8002ec:	1805883a 	mov	r2,r3
  8002f0:	80800015 	stw	r2,0(r16)
  8002f4:	e0bffe17 	ldw	r2,-8(fp)
  8002f8:	10800044 	addi	r2,r2,1
  8002fc:	e0bffe15 	stw	r2,-8(fp)
  800300:	e0bffe17 	ldw	r2,-8(fp)
  800304:	10800d10 	cmplti	r2,r2,52
  800308:	103fe91e 	bne	r2,zero,8002b0 <generateVector+0x2c>
}
  80030c:	0001883a 	nop
  800310:	0001883a 	nop
  800314:	e6ffff04 	addi	sp,fp,-4
  800318:	dfc00217 	ldw	ra,8(sp)
  80031c:	df000117 	ldw	fp,4(sp)
  800320:	dc000017 	ldw	r16,0(sp)
  800324:	dec00304 	addi	sp,sp,12
  800328:	f800283a 	ret

0080032c <sumVector>:

#endif

float sumVector(float x[0], int M)
{
  80032c:	defff904 	addi	sp,sp,-28
  800330:	dfc00615 	stw	ra,24(sp)
  800334:	df000515 	stw	fp,20(sp)
  800338:	dc000415 	stw	r16,16(sp)
  80033c:	df000504 	addi	fp,sp,20
  800340:	e13ffc15 	stw	r4,-16(fp)
  800344:	e17ffb15 	stw	r5,-20(fp)
  float sum = 0;
  800348:	e03ffe15 	stw	zero,-8(fp)
  int i = 0;
  80034c:	e03ffd15 	stw	zero,-12(fp)
  for (; i < M; i++) 
  800350:	00002006 	br	8003d4 <sumVector+0xa8>
  {
    sum += (x[i] + x[i] * x[i]);
  800354:	e0bffd17 	ldw	r2,-12(fp)
  800358:	100490ba 	slli	r2,r2,2
  80035c:	e0fffc17 	ldw	r3,-16(fp)
  800360:	1885883a 	add	r2,r3,r2
  800364:	14000017 	ldw	r16,0(r2)
  800368:	e0bffd17 	ldw	r2,-12(fp)
  80036c:	100490ba 	slli	r2,r2,2
  800370:	e0fffc17 	ldw	r3,-16(fp)
  800374:	1885883a 	add	r2,r3,r2
  800378:	11000017 	ldw	r4,0(r2)
  80037c:	e0bffd17 	ldw	r2,-12(fp)
  800380:	100490ba 	slli	r2,r2,2
  800384:	e0fffc17 	ldw	r3,-16(fp)
  800388:	1885883a 	add	r2,r3,r2
  80038c:	10c00017 	ldw	r3,0(r2)
  800390:	180b883a 	mov	r5,r3
  800394:	0801f800 	call	801f80 <__mulsf3>
  800398:	1007883a 	mov	r3,r2
  80039c:	1805883a 	mov	r2,r3
  8003a0:	100b883a 	mov	r5,r2
  8003a4:	8009883a 	mov	r4,r16
  8003a8:	08019ec0 	call	8019ec <__addsf3>
  8003ac:	1007883a 	mov	r3,r2
  8003b0:	1805883a 	mov	r2,r3
  8003b4:	100b883a 	mov	r5,r2
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	08019ec0 	call	8019ec <__addsf3>
  8003c0:	1007883a 	mov	r3,r2
  8003c4:	e0fffe15 	stw	r3,-8(fp)
  for (; i < M; i++) 
  8003c8:	e0bffd17 	ldw	r2,-12(fp)
  8003cc:	10800044 	addi	r2,r2,1
  8003d0:	e0bffd15 	stw	r2,-12(fp)
  8003d4:	e0fffd17 	ldw	r3,-12(fp)
  8003d8:	e0bffb17 	ldw	r2,-20(fp)
  8003dc:	18bfdd16 	blt	r3,r2,800354 <sumVector+0x28>
  }

  return sum;
  8003e0:	e0bffe17 	ldw	r2,-8(fp)
  8003e4:	1007883a 	mov	r3,r2
}
  8003e8:	1805883a 	mov	r2,r3
  8003ec:	e6ffff04 	addi	sp,fp,-4
  8003f0:	dfc00217 	ldw	ra,8(sp)
  8003f4:	df000117 	ldw	fp,4(sp)
  8003f8:	dc000017 	ldw	r16,0(sp)
  8003fc:	dec00304 	addi	sp,sp,12
  800400:	f800283a 	ret

00800404 <theFunction>:
      c_term2 = 1 / 24.0f, 
      c_term3 = - 1 / 720.0f,
      c_term4 = 1 / 40320.0f,
      c_term5 = - 1 / 3628800.0f;

float theFunction(float x[0], int M) {
  800404:	defff504 	addi	sp,sp,-44
  800408:	dfc00a15 	stw	ra,40(sp)
  80040c:	df000915 	stw	fp,36(sp)
  800410:	df000904 	addi	fp,sp,36
  800414:	e13ff815 	stw	r4,-32(fp)
  800418:	e17ff715 	stw	r5,-36(fp)
  float sum = 0;
  80041c:	e03fff15 	stw	zero,-4(fp)
  int i = 0;
  800420:	e03ffe15 	stw	zero,-8(fp)
  for (; i < M; i++) 
  800424:	00003406 	br	8004f8 <theFunction+0xf4>
  {
    const float cos_term = FP_MUL(FP_ADD(x[i], -128.0f), coeff2);
  800428:	e0bffe17 	ldw	r2,-8(fp)
  80042c:	100490ba 	slli	r2,r2,2
  800430:	e0fff817 	ldw	r3,-32(fp)
  800434:	1887883a 	add	r3,r3,r2
  800438:	18800017 	ldw	r2,0(r3)
  80043c:	00f0c034 	movhi	r3,49920
  800440:	10c5c072 	custom	1,r2,r2,r3
  800444:	00cf0034 	movhi	r3,15360
  800448:	10c5c032 	custom	0,r2,r2,r3
  80044c:	e0bffd15 	stw	r2,-12(fp)
    const float cos_2 = FP_MUL(cos_term, cos_term);
  800450:	e0bffd17 	ldw	r2,-12(fp)
  800454:	e0fffd17 	ldw	r3,-12(fp)
  800458:	10c5c032 	custom	0,r2,r2,r3
  80045c:	e0bffc15 	stw	r2,-16(fp)
    const float cos_4 = FP_MUL(cos_2, cos_2);
  800460:	e0bffc17 	ldw	r2,-16(fp)
  800464:	e0fffc17 	ldw	r3,-16(fp)
  800468:	10c5c032 	custom	0,r2,r2,r3
  80046c:	e0bffb15 	stw	r2,-20(fp)
    const float cos_6 = FP_MUL(cos_4, cos_2);
  800470:	e0bffb17 	ldw	r2,-20(fp)
  800474:	e0fffc17 	ldw	r3,-16(fp)
  800478:	10c5c032 	custom	0,r2,r2,r3
  80047c:	e0bffa15 	stw	r2,-24(fp)
    // const float cos_8 = FP_MUL(cos_4, cos_4);
    // const float cos_10 = FP_MUL(cos_8, cos_2);
    // const float cos_12 = FP_MUL(cos_6, cos_6);

    const float cosine = cosf(cos_term);
  800480:	e13ffd17 	ldw	r4,-12(fp)
  800484:	08006540 	call	800654 <cosf>
  800488:	e0bff915 	stw	r2,-28(fp)
    //     // , FP_ADD(FP_MUL(cos_8, c_term4), FP_MUL(cos_10, c_term5)))
    //     ;



    sum = FP_ADD(sum, FP_ADD(FP_MUL(coeff1,x[i]), FP_MUL(FP_MUL(x[i],x[i]),cosine)));
  80048c:	008fc034 	movhi	r2,16128
  800490:	e0fffe17 	ldw	r3,-8(fp)
  800494:	180690ba 	slli	r3,r3,2
  800498:	e13ff817 	ldw	r4,-32(fp)
  80049c:	20c9883a 	add	r4,r4,r3
  8004a0:	20c00017 	ldw	r3,0(r4)
  8004a4:	10c5c032 	custom	0,r2,r2,r3
  8004a8:	e0fffe17 	ldw	r3,-8(fp)
  8004ac:	180690ba 	slli	r3,r3,2
  8004b0:	e13ff817 	ldw	r4,-32(fp)
  8004b4:	20c9883a 	add	r4,r4,r3
  8004b8:	20c00017 	ldw	r3,0(r4)
  8004bc:	e13ffe17 	ldw	r4,-8(fp)
  8004c0:	200890ba 	slli	r4,r4,2
  8004c4:	e17ff817 	ldw	r5,-32(fp)
  8004c8:	290b883a 	add	r5,r5,r4
  8004cc:	29000017 	ldw	r4,0(r5)
  8004d0:	1907c032 	custom	0,r3,r3,r4
  8004d4:	e13ff917 	ldw	r4,-28(fp)
  8004d8:	1907c032 	custom	0,r3,r3,r4
  8004dc:	10c7c072 	custom	1,r3,r2,r3
  8004e0:	e0bfff17 	ldw	r2,-4(fp)
  8004e4:	10c5c072 	custom	1,r2,r2,r3
  8004e8:	e0bfff15 	stw	r2,-4(fp)
  for (; i < M; i++) 
  8004ec:	e0bffe17 	ldw	r2,-8(fp)
  8004f0:	10800044 	addi	r2,r2,1
  8004f4:	e0bffe15 	stw	r2,-8(fp)
  8004f8:	e0fffe17 	ldw	r3,-8(fp)
  8004fc:	e0bff717 	ldw	r2,-36(fp)
  800500:	18bfc916 	blt	r3,r2,800428 <theFunction+0x24>
  }

  return sum;
  800504:	e0bfff17 	ldw	r2,-4(fp)
  800508:	1007883a 	mov	r3,r2
}
  80050c:	1805883a 	mov	r2,r3
  800510:	e037883a 	mov	sp,fp
  800514:	dfc00117 	ldw	ra,4(sp)
  800518:	df000017 	ldw	fp,0(sp)
  80051c:	dec00204 	addi	sp,sp,8
  800520:	f800283a 	ret

00800524 <main>:

int main(int argc, char* argv[])
{
  800524:	deffc104 	addi	sp,sp,-252
  800528:	dfc03e15 	stw	ra,248(sp)
  80052c:	df003d15 	stw	fp,244(sp)
  800530:	df003d04 	addi	fp,sp,244
  800534:	e13fc415 	stw	r4,-240(fp)
  800538:	e17fc315 	stw	r5,-244(fp)
  const int numIterations = NUM_CASES;
  80053c:	0080fa04 	movi	r2,1000
  800540:	e0bffe15 	stw	r2,-8(fp)
  printf("Task 3!\n");
  800544:	01002074 	movhi	r4,129
  800548:	21097004 	addi	r4,r4,9664
  80054c:	0802c500 	call	802c50 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800550:	d0a71c17 	ldw	r2,-25488(gp)
  printf("Ticks per second: %ld\n", alt_ticks_per_second());
  800554:	100b883a 	mov	r5,r2
  800558:	01002074 	movhi	r4,129
  80055c:	21097204 	addi	r4,r4,9672
  800560:	0802b500 	call	802b50 <printf>
  printf("Running %d tests\n", numIterations);
  800564:	e17ffe17 	ldw	r5,-8(fp)
  800568:	01002074 	movhi	r4,129
  80056c:	21097804 	addi	r4,r4,9696
  800570:	0802b500 	call	802b50 <printf>


  // Returned result
  volatile float y;

  generateVector(x);
  800574:	e0bfc904 	addi	r2,fp,-220
  800578:	1009883a 	mov	r4,r2
  80057c:	08002840 	call	800284 <generateVector>

  volatile clock_t exec_t1, exec_t2;

  // const int numIterations = 1 << TEST_REPEAT;

  exec_t1 = times(NULL);
  800580:	0009883a 	mov	r4,zero
  800584:	08108000 	call	810800 <times>
  800588:	e0bfc715 	stw	r2,-228(fp)

  int y1 = 0;
  80058c:	e03ffd15 	stw	zero,-12(fp)

  for (int i = 0; i < numIterations; i++) {
  800590:	e03fff15 	stw	zero,-4(fp)
  800594:	00000906 	br	8005bc <main+0x98>
    y = theFunction(x, N);
  800598:	e0bfc904 	addi	r2,fp,-220
  80059c:	01400d04 	movi	r5,52
  8005a0:	1009883a 	mov	r4,r2
  8005a4:	08004040 	call	800404 <theFunction>
  8005a8:	1007883a 	mov	r3,r2
  8005ac:	e0ffc815 	stw	r3,-224(fp)
  for (int i = 0; i < numIterations; i++) {
  8005b0:	e0bfff17 	ldw	r2,-4(fp)
  8005b4:	10800044 	addi	r2,r2,1
  8005b8:	e0bfff15 	stw	r2,-4(fp)
  8005bc:	e0ffff17 	ldw	r3,-4(fp)
  8005c0:	e0bffe17 	ldw	r2,-8(fp)
  8005c4:	18bff416 	blt	r3,r2,800598 <main+0x74>
  }

  // till here
  exec_t2 = times(NULL);
  8005c8:	0009883a 	mov	r4,zero
  8005cc:	08108000 	call	810800 <times>
  8005d0:	e0bfc615 	stw	r2,-232(fp)

  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  8005d4:	e0ffc617 	ldw	r3,-232(fp)
  8005d8:	e0bfc717 	ldw	r2,-228(fp)
  8005dc:	1885c83a 	sub	r2,r3,r2
  8005e0:	e0bfc515 	stw	r2,-236(fp)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  8005e4:	e0bfc517 	ldw	r2,-236(fp)
  8005e8:	100b883a 	mov	r5,r2
  8005ec:	01002074 	movhi	r4,129
  8005f0:	21097d04 	addi	r4,r4,9716
  8005f4:	0802b500 	call	802b50 <printf>
  printf("RESULT: %f, %x\n", y, *(int*)(&y));
  8005f8:	e0bfc817 	ldw	r2,-224(fp)
  8005fc:	1009883a 	mov	r4,r2
  800600:	08029a80 	call	8029a8 <__extendsfdf2>
  800604:	1011883a 	mov	r8,r2
  800608:	1813883a 	mov	r9,r3
  80060c:	e0bfc804 	addi	r2,fp,-224
  800610:	10800017 	ldw	r2,0(r2)
  800614:	100f883a 	mov	r7,r2
  800618:	400b883a 	mov	r5,r8
  80061c:	480d883a 	mov	r6,r9
  800620:	01002074 	movhi	r4,129
  800624:	21098204 	addi	r4,r4,9736
  800628:	0802b500 	call	802b50 <printf>
  printf("Num Iterations: %d\n", y1);
  80062c:	e17ffd17 	ldw	r5,-12(fp)
  800630:	01002074 	movhi	r4,129
  800634:	21098604 	addi	r4,r4,9752
  800638:	0802b500 	call	802b50 <printf>
  // printf("Total ticks %d for %d iters\n", elapsedTicks , numIterations);
  // printf("Time Taken: %f\n",(float) elapsedTicks/numIterations);


  return 0;
  80063c:	0005883a 	mov	r2,zero
}
  800640:	e037883a 	mov	sp,fp
  800644:	dfc00117 	ldw	ra,4(sp)
  800648:	df000017 	ldw	fp,0(sp)
  80064c:	dec00204 	addi	sp,sp,8
  800650:	f800283a 	ret

00800654 <cosf>:
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
  800654:	00a00034 	movhi	r2,32768
  800658:	10bfffc4 	addi	r2,r2,-1
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  80065c:	00cfd274 	movhi	r3,16201
	ix &= 0x7fffffff;
  800660:	1104703a 	and	r2,r2,r4
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800664:	18c3f604 	addi	r3,r3,4056
  800668:	1880160e 	bge	r3,r2,8006c4 <cosf+0x70>
{
  80066c:	defffd04 	addi	sp,sp,-12
  800670:	dfc00215 	stw	ra,8(sp)

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
  800674:	00dfe034 	movhi	r3,32640
  800678:	10c00516 	blt	r2,r3,800690 <cosf+0x3c>
  80067c:	200b883a 	mov	r5,r4
  800680:	08023800 	call	802380 <__subsf3>
		case 2: return -__kernel_cosf(y[0],y[1]);
		default:
		        return  __kernel_sinf(y[0],y[1],1);
	    }
	}
}
  800684:	dfc00217 	ldw	ra,8(sp)
  800688:	dec00304 	addi	sp,sp,12
  80068c:	f800283a 	ret
	    n = __ieee754_rem_pio2f(x,y);
  800690:	d80b883a 	mov	r5,sp
  800694:	08006f00 	call	8006f0 <__ieee754_rem_pio2f>
	    switch(n&3) {
  800698:	108000cc 	andi	r2,r2,3
  80069c:	10c00060 	cmpeqi	r3,r2,1
		        return  __kernel_sinf(y[0],y[1],1);
  8006a0:	d9400117 	ldw	r5,4(sp)
  8006a4:	d9000017 	ldw	r4,0(sp)
	    switch(n&3) {
  8006a8:	1800081e 	bne	r3,zero,8006cc <cosf+0x78>
  8006ac:	10c000a0 	cmpeqi	r3,r2,2
  8006b0:	18000c1e 	bne	r3,zero,8006e4 <cosf+0x90>
  8006b4:	10000926 	beq	r2,zero,8006dc <cosf+0x88>
		        return  __kernel_sinf(y[0],y[1],1);
  8006b8:	01800044 	movi	r6,1
  8006bc:	08016d80 	call	8016d8 <__kernel_sinf>
  8006c0:	003ff006 	br	800684 <cosf+0x30>
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  8006c4:	000b883a 	mov	r5,zero
  8006c8:	0800b581 	jmpi	800b58 <__kernel_cosf>
		case 1: return -__kernel_sinf(y[0],y[1],1);
  8006cc:	01800044 	movi	r6,1
  8006d0:	08016d80 	call	8016d8 <__kernel_sinf>
  8006d4:	10a0003c 	xorhi	r2,r2,32768
  8006d8:	003fea06 	br	800684 <cosf+0x30>
		case 0: return  __kernel_cosf(y[0],y[1]);
  8006dc:	0800b580 	call	800b58 <__kernel_cosf>
  8006e0:	003fe806 	br	800684 <cosf+0x30>
		case 2: return -__kernel_cosf(y[0],y[1]);
  8006e4:	0800b580 	call	800b58 <__kernel_cosf>
  8006e8:	10a0003c 	xorhi	r2,r2,32768
  8006ec:	003fe506 	br	800684 <cosf+0x30>

008006f0 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
  8006f0:	defff104 	addi	sp,sp,-60
  8006f4:	dc000515 	stw	r16,20(sp)
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
  8006f8:	04200034 	movhi	r16,32768
  8006fc:	843fffc4 	addi	r16,r16,-1
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800700:	008fd274 	movhi	r2,16201
{
  800704:	dc400615 	stw	r17,24(sp)
  800708:	dfc00e15 	stw	ra,56(sp)
  80070c:	df000d15 	stw	fp,52(sp)
  800710:	ddc00c15 	stw	r23,48(sp)
  800714:	dd800b15 	stw	r22,44(sp)
  800718:	dd400a15 	stw	r21,40(sp)
  80071c:	dd000915 	stw	r20,36(sp)
  800720:	dcc00815 	stw	r19,32(sp)
  800724:	dc800715 	stw	r18,28(sp)
	ix = hx&0x7fffffff;
  800728:	8120703a 	and	r16,r16,r4
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  80072c:	1083f604 	addi	r2,r2,4056
{
  800730:	2007883a 	mov	r3,r4
  800734:	2823883a 	mov	r17,r5
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800738:	14005b0e 	bge	r2,r16,8008a8 <__ieee754_rem_pio2f+0x1b8>
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
  80073c:	009005f4 	movhi	r2,16407
  800740:	10b2f8c4 	addi	r2,r2,-13341
  800744:	2027883a 	mov	r19,r4
  800748:	14002516 	blt	r2,r16,8007e0 <__ieee754_rem_pio2f+0xf0>
	    if(hx>0) { 
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  80074c:	00bffc04 	movi	r2,-16
  800750:	80a0703a 	and	r16,r16,r2
	    if(hx>0) { 
  800754:	0100eb0e 	bge	zero,r4,800b04 <__ieee754_rem_pio2f+0x414>
		z = x - pio2_1;
  800758:	014ff274 	movhi	r5,16329
  80075c:	2943e004 	addi	r5,r5,3968
  800760:	08023800 	call	802380 <__subsf3>
  800764:	1025883a 	mov	r18,r2
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800768:	008ff274 	movhi	r2,16329
  80076c:	1083f404 	addi	r2,r2,4048
		    y[0] = z - pio2_1t;
  800770:	014dcd74 	movhi	r5,14133
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800774:	80808826 	beq	r16,r2,800998 <__ieee754_rem_pio2f+0x2a8>
		    y[0] = z - pio2_1t;
  800778:	9009883a 	mov	r4,r18
  80077c:	295110c4 	addi	r5,r5,17475
  800780:	08023800 	call	802380 <__subsf3>
		    y[1] = (z-y[0])-pio2_1t;
  800784:	9009883a 	mov	r4,r18
  800788:	100b883a 	mov	r5,r2
		    y[0] = z - pio2_1t;
  80078c:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_1t;
  800790:	08023800 	call	802380 <__subsf3>
  800794:	014dcd74 	movhi	r5,14133
  800798:	295110c4 	addi	r5,r5,17475
  80079c:	1009883a 	mov	r4,r2
  8007a0:	08023800 	call	802380 <__subsf3>
  8007a4:	88800115 	stw	r2,4(r17)
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
  8007a8:	04800044 	movi	r18,1
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
  8007ac:	9005883a 	mov	r2,r18
  8007b0:	dfc00e17 	ldw	ra,56(sp)
  8007b4:	df000d17 	ldw	fp,52(sp)
  8007b8:	ddc00c17 	ldw	r23,48(sp)
  8007bc:	dd800b17 	ldw	r22,44(sp)
  8007c0:	dd400a17 	ldw	r21,40(sp)
  8007c4:	dd000917 	ldw	r20,36(sp)
  8007c8:	dcc00817 	ldw	r19,32(sp)
  8007cc:	dc800717 	ldw	r18,28(sp)
  8007d0:	dc400617 	ldw	r17,24(sp)
  8007d4:	dc000517 	ldw	r16,20(sp)
  8007d8:	dec00f04 	addi	sp,sp,60
  8007dc:	f800283a 	ret
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
  8007e0:	0090d274 	movhi	r2,17225
  8007e4:	1083e004 	addi	r2,r2,3968
  8007e8:	14003316 	blt	r2,r16,8008b8 <__ieee754_rem_pio2f+0x1c8>
	    n  = (__int32_t) (t*invpio2+half);
  8007ec:	010fc8f4 	movhi	r4,16163
  8007f0:	213e6104 	addi	r4,r4,-1660
  8007f4:	008fc034 	movhi	r2,16128
  8007f8:	2409c032 	custom	0,r4,r4,r16
  8007fc:	2089c072 	custom	1,r4,r4,r2
  800800:	08028140 	call	802814 <__fixsfsi>
	    fn = (float)n;
  800804:	1009883a 	mov	r4,r2
	    n  = (__int32_t) (t*invpio2+half);
  800808:	1025883a 	mov	r18,r2
	    fn = (float)n;
  80080c:	08028840 	call	802884 <__floatsisf>
	    r  = t-fn*pio2_1;
  800810:	014ff274 	movhi	r5,16329
  800814:	2943e004 	addi	r5,r5,3968
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800818:	050dcd74 	movhi	r20,14133
	    fn = (float)n;
  80081c:	102b883a 	mov	r21,r2
	    r  = t-fn*pio2_1;
  800820:	114bc032 	custom	0,r5,r2,r5
  800824:	8009883a 	mov	r4,r16
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800828:	a51110c4 	addi	r20,r20,17475
	    r  = t-fn*pio2_1;
  80082c:	08023800 	call	802380 <__subsf3>
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800830:	ad29c032 	custom	0,r20,r21,r20
		y[0] = r-w;	/* quick check no cancellation */
  800834:	1009883a 	mov	r4,r2
  800838:	a00b883a 	mov	r5,r20
	    r  = t-fn*pio2_1;
  80083c:	102f883a 	mov	r23,r2
		y[0] = r-w;	/* quick check no cancellation */
  800840:	08023800 	call	802380 <__subsf3>
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800844:	90c00808 	cmpgei	r3,r18,32
	    r  = t-fn*pio2_1;
  800848:	b809883a 	mov	r4,r23
		y[0] = r-w;	/* quick check no cancellation */
  80084c:	102d883a 	mov	r22,r2
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800850:	1800641e 	bne	r3,zero,8009e4 <__ieee754_rem_pio2f+0x2f4>
  800854:	900a90ba 	slli	r5,r18,2
  800858:	00c02074 	movhi	r3,129
  80085c:	28c7883a 	add	r3,r5,r3
  800860:	19498a17 	ldw	r5,9768(r3)
  800864:	00ffc004 	movi	r3,-256
  800868:	80c6703a 	and	r3,r16,r3
  80086c:	19405d26 	beq	r3,r5,8009e4 <__ieee754_rem_pio2f+0x2f4>
		    	y[0] = r-w;
  800870:	88800015 	stw	r2,0(r17)
	    y[1] = (r-y[0])-w;
  800874:	b00b883a 	mov	r5,r22
  800878:	08023800 	call	802380 <__subsf3>
  80087c:	a00b883a 	mov	r5,r20
  800880:	1009883a 	mov	r4,r2
  800884:	08023800 	call	802380 <__subsf3>
  800888:	88800115 	stw	r2,4(r17)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
  80088c:	983fc70e 	bge	r19,zero,8007ac <__ieee754_rem_pio2f+0xbc>
  800890:	b5a0003c 	xorhi	r22,r22,32768
  800894:	10a0003c 	xorhi	r2,r2,32768
  800898:	8d800015 	stw	r22,0(r17)
  80089c:	88800115 	stw	r2,4(r17)
  8008a0:	04a5c83a 	sub	r18,zero,r18
  8008a4:	003fc106 	br	8007ac <__ieee754_rem_pio2f+0xbc>
	    {y[0] = x; y[1] = 0; return 0;}
  8008a8:	89000015 	stw	r4,0(r17)
  8008ac:	28000115 	stw	zero,4(r5)
  8008b0:	0025883a 	mov	r18,zero
  8008b4:	003fbd06 	br	8007ac <__ieee754_rem_pio2f+0xbc>
	if(!FLT_UWORD_IS_FINITE(ix)) {
  8008b8:	009fe034 	movhi	r2,32640
  8008bc:	8080840e 	bge	r16,r2,800ad0 <__ieee754_rem_pio2f+0x3e0>
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
  8008c0:	8025d5fa 	srai	r18,r16,23
  8008c4:	94bfde84 	addi	r18,r18,-134
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
  8008c8:	900495fa 	slli	r2,r18,23
  8008cc:	80a1c83a 	sub	r16,r16,r2
		tx[i] = (float)((__int32_t)(z));
  8008d0:	8009883a 	mov	r4,r16
  8008d4:	08028140 	call	802814 <__fixsfsi>
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	08028840 	call	802884 <__floatsisf>
		z     = (z-tx[i])*two8;
  8008e0:	100b883a 	mov	r5,r2
  8008e4:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  8008e8:	d8800215 	stw	r2,8(sp)
		z     = (z-tx[i])*two8;
  8008ec:	0410e034 	movhi	r16,17280
  8008f0:	08023800 	call	802380 <__subsf3>
  8008f4:	1421c032 	custom	0,r16,r2,r16
		tx[i] = (float)((__int32_t)(z));
  8008f8:	8009883a 	mov	r4,r16
  8008fc:	08028140 	call	802814 <__fixsfsi>
  800900:	1009883a 	mov	r4,r2
  800904:	08028840 	call	802884 <__floatsisf>
		z     = (z-tx[i])*two8;
  800908:	100b883a 	mov	r5,r2
  80090c:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  800910:	1029883a 	mov	r20,r2
  800914:	d8800315 	stw	r2,12(sp)
		z     = (z-tx[i])*two8;
  800918:	08023800 	call	802380 <__subsf3>
  80091c:	00d0e034 	movhi	r3,17280
  800920:	10c5c032 	custom	0,r2,r2,r3
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800924:	000b883a 	mov	r5,zero
  800928:	1009883a 	mov	r4,r2
	tx[2] = z;
  80092c:	d8800415 	stw	r2,16(sp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800930:	0801e580 	call	801e58 <__eqsf2>
  800934:	1000711e 	bne	r2,zero,800afc <__ieee754_rem_pio2f+0x40c>
  800938:	000b883a 	mov	r5,zero
  80093c:	a009883a 	mov	r4,r20
  800940:	0801e580 	call	801e58 <__eqsf2>
  800944:	10006b1e 	bne	r2,zero,800af4 <__ieee754_rem_pio2f+0x404>
  800948:	01c00044 	movi	r7,1
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
  80094c:	00802074 	movhi	r2,129
  800950:	1089ab04 	addi	r2,r2,9900
  800954:	d8800115 	stw	r2,4(sp)
  800958:	00800084 	movi	r2,2
  80095c:	900d883a 	mov	r6,r18
  800960:	d8800015 	stw	r2,0(sp)
  800964:	880b883a 	mov	r5,r17
  800968:	d9000204 	addi	r4,sp,8
  80096c:	0800d280 	call	800d28 <__kernel_rem_pio2f>
  800970:	1025883a 	mov	r18,r2
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
  800974:	983f8d0e 	bge	r19,zero,8007ac <__ieee754_rem_pio2f+0xbc>
  800978:	88c00017 	ldw	r3,0(r17)
  80097c:	88800117 	ldw	r2,4(r17)
  800980:	04a5c83a 	sub	r18,zero,r18
  800984:	18e0003c 	xorhi	r3,r3,32768
  800988:	10a0003c 	xorhi	r2,r2,32768
  80098c:	88c00015 	stw	r3,0(r17)
  800990:	88800115 	stw	r2,4(r17)
  800994:	003f8506 	br	8007ac <__ieee754_rem_pio2f+0xbc>
		    z -= pio2_2;
  800998:	9009883a 	mov	r4,r18
  80099c:	29510004 	addi	r5,r5,17408
  8009a0:	08023800 	call	802380 <__subsf3>
		    y[0] = z - pio2_2t;
  8009a4:	014ba1b4 	movhi	r5,11910
  8009a8:	2968c204 	addi	r5,r5,-23800
  8009ac:	1009883a 	mov	r4,r2
		    z -= pio2_2;
  8009b0:	1021883a 	mov	r16,r2
		    y[0] = z - pio2_2t;
  8009b4:	08023800 	call	802380 <__subsf3>
		    y[1] = (z-y[0])-pio2_2t;
  8009b8:	100b883a 	mov	r5,r2
  8009bc:	8009883a 	mov	r4,r16
		    y[0] = z - pio2_2t;
  8009c0:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_2t;
  8009c4:	08023800 	call	802380 <__subsf3>
  8009c8:	014ba1b4 	movhi	r5,11910
  8009cc:	2968c204 	addi	r5,r5,-23800
  8009d0:	1009883a 	mov	r4,r2
  8009d4:	08023800 	call	802380 <__subsf3>
  8009d8:	88800115 	stw	r2,4(r17)
		return 1;
  8009dc:	04800044 	movi	r18,1
  8009e0:	003f7206 	br	8007ac <__ieee754_rem_pio2f+0xbc>
	        i = j-((high>>23)&0xff);
  8009e4:	1006d5fa 	srli	r3,r2,23
	        j  = ix>>23;
  8009e8:	8021d5fa 	srai	r16,r16,23
	        i = j-((high>>23)&0xff);
  8009ec:	18c03fcc 	andi	r3,r3,255
  8009f0:	80c7c83a 	sub	r3,r16,r3
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
  8009f4:	18c00248 	cmpgei	r3,r3,9
  8009f8:	183f9d26 	beq	r3,zero,800870 <__ieee754_rem_pio2f+0x180>
		    w  = fn*pio2_2;	
  8009fc:	014dcd74 	movhi	r5,14133
  800a00:	29510004 	addi	r5,r5,17408
  800a04:	a969c032 	custom	0,r20,r21,r5
		    r  = t-w;
  800a08:	a00b883a 	mov	r5,r20
  800a0c:	b809883a 	mov	r4,r23
  800a10:	08023800 	call	802380 <__subsf3>
		    w  = fn*pio2_2t-((t-r)-w);	
  800a14:	100b883a 	mov	r5,r2
  800a18:	b809883a 	mov	r4,r23
		    r  = t-w;
  800a1c:	1039883a 	mov	fp,r2
		    w  = fn*pio2_2t-((t-r)-w);	
  800a20:	08023800 	call	802380 <__subsf3>
  800a24:	a00b883a 	mov	r5,r20
  800a28:	1009883a 	mov	r4,r2
  800a2c:	08023800 	call	802380 <__subsf3>
  800a30:	010ba1b4 	movhi	r4,11910
  800a34:	2128c204 	addi	r4,r4,-23800
  800a38:	100b883a 	mov	r5,r2
  800a3c:	a909c032 	custom	0,r4,r21,r4
  800a40:	08023800 	call	802380 <__subsf3>
		    y[0] = r-w;
  800a44:	100b883a 	mov	r5,r2
  800a48:	e009883a 	mov	r4,fp
		    w  = fn*pio2_2t-((t-r)-w);	
  800a4c:	1029883a 	mov	r20,r2
		    y[0] = r-w;
  800a50:	08023800 	call	802380 <__subsf3>
		    i = j-((high>>23)&0xff);
  800a54:	1006d5fa 	srli	r3,r2,23
		    y[0] = r-w;
  800a58:	102d883a 	mov	r22,r2
		    i = j-((high>>23)&0xff);
  800a5c:	18c03fcc 	andi	r3,r3,255
  800a60:	80e1c83a 	sub	r16,r16,r3
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
  800a64:	84000688 	cmpgei	r16,r16,26
  800a68:	80001f26 	beq	r16,zero,800ae8 <__ieee754_rem_pio2f+0x3f8>
		    	w  = fn*pio2_3;	
  800a6c:	008ba1b4 	movhi	r2,11910
  800a70:	10a8c004 	addi	r2,r2,-23808
  800a74:	a8a1c032 	custom	0,r16,r21,r2
		    	r  = t-w;
  800a78:	800b883a 	mov	r5,r16
  800a7c:	e009883a 	mov	r4,fp
  800a80:	08023800 	call	802380 <__subsf3>
		    	w  = fn*pio2_3t-((t-r)-w);	
  800a84:	100b883a 	mov	r5,r2
  800a88:	e009883a 	mov	r4,fp
		    	r  = t-w;
  800a8c:	102d883a 	mov	r22,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800a90:	08023800 	call	802380 <__subsf3>
  800a94:	800b883a 	mov	r5,r16
  800a98:	1009883a 	mov	r4,r2
  800a9c:	08023800 	call	802380 <__subsf3>
  800aa0:	01092374 	movhi	r4,9357
  800aa4:	210c4c84 	addi	r4,r4,12594
  800aa8:	100b883a 	mov	r5,r2
  800aac:	a909c032 	custom	0,r4,r21,r4
  800ab0:	08023800 	call	802380 <__subsf3>
		    	y[0] = r-w;
  800ab4:	b009883a 	mov	r4,r22
  800ab8:	100b883a 	mov	r5,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800abc:	1029883a 	mov	r20,r2
		    	y[0] = r-w;
  800ac0:	08023800 	call	802380 <__subsf3>
		    	r  = t-w;
  800ac4:	b009883a 	mov	r4,r22
		    	y[0] = r-w;
  800ac8:	102d883a 	mov	r22,r2
  800acc:	003f6806 	br	800870 <__ieee754_rem_pio2f+0x180>
	    y[0]=y[1]=x-x; return 0;
  800ad0:	200b883a 	mov	r5,r4
  800ad4:	08023800 	call	802380 <__subsf3>
  800ad8:	88800115 	stw	r2,4(r17)
  800adc:	88800015 	stw	r2,0(r17)
  800ae0:	0025883a 	mov	r18,zero
  800ae4:	003f3106 	br	8007ac <__ieee754_rem_pio2f+0xbc>
		    y[0] = r-w;
  800ae8:	88800015 	stw	r2,0(r17)
		    r  = t-w;
  800aec:	e009883a 	mov	r4,fp
  800af0:	003f6006 	br	800874 <__ieee754_rem_pio2f+0x184>
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800af4:	01c00084 	movi	r7,2
  800af8:	003f9406 	br	80094c <__ieee754_rem_pio2f+0x25c>
	nx = 3;
  800afc:	01c000c4 	movi	r7,3
  800b00:	003f9206 	br	80094c <__ieee754_rem_pio2f+0x25c>
		z = x + pio2_1;
  800b04:	010ff274 	movhi	r4,16329
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b08:	008ff274 	movhi	r2,16329
		z = x + pio2_1;
  800b0c:	2103e004 	addi	r4,r4,3968
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b10:	1083f404 	addi	r2,r2,4048
		z = x + pio2_1;
  800b14:	1909c072 	custom	1,r4,r3,r4
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b18:	80800926 	beq	r16,r2,800b40 <__ieee754_rem_pio2f+0x450>
		    y[0] = z + pio2_1t;
  800b1c:	040dcd74 	movhi	r16,14133
  800b20:	841110c4 	addi	r16,r16,17475
		    y[0] = z + pio2_2t;
  800b24:	240bc072 	custom	1,r5,r4,r16
  800b28:	89400015 	stw	r5,0(r17)
		    y[1] = (z-y[0])+pio2_2t;
  800b2c:	08023800 	call	802380 <__subsf3>
  800b30:	1421c072 	custom	1,r16,r2,r16
  800b34:	8c000115 	stw	r16,4(r17)
		return -1;
  800b38:	04bfffc4 	movi	r18,-1
  800b3c:	003f1b06 	br	8007ac <__ieee754_rem_pio2f+0xbc>
		    z += pio2_2;
  800b40:	008dcd74 	movhi	r2,14133
  800b44:	10910004 	addi	r2,r2,17408
		    y[0] = z + pio2_2t;
  800b48:	040ba1b4 	movhi	r16,11910
		    z += pio2_2;
  800b4c:	2089c072 	custom	1,r4,r4,r2
		    y[0] = z + pio2_2t;
  800b50:	8428c204 	addi	r16,r16,-23800
  800b54:	003ff306 	br	800b24 <__ieee754_rem_pio2f+0x434>

00800b58 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
  800b58:	defff904 	addi	sp,sp,-28
  800b5c:	dc400115 	stw	r17,4(sp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800b60:	04600034 	movhi	r17,32768
  800b64:	8c7fffc4 	addi	r17,r17,-1
{
  800b68:	dd000415 	stw	r20,16(sp)
  800b6c:	dc800215 	stw	r18,8(sp)
  800b70:	dfc00615 	stw	ra,24(sp)
  800b74:	dd400515 	stw	r21,20(sp)
  800b78:	dcc00315 	stw	r19,12(sp)
  800b7c:	dc000015 	stw	r16,0(sp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800b80:	8922703a 	and	r17,r17,r4
	if(ix<0x32000000) {			/* if x < 2**27 */
  800b84:	008c8034 	movhi	r2,12800
{
  800b88:	2029883a 	mov	r20,r4
  800b8c:	2825883a 	mov	r18,r5
	if(ix<0x32000000) {			/* if x < 2**27 */
  800b90:	8880260e 	bge	r17,r2,800c2c <__kernel_cosf+0xd4>
	    if(((int)x)==0) return one;		/* generate inexact */
  800b94:	08028140 	call	802814 <__fixsfsi>
  800b98:	10006126 	beq	r2,zero,800d20 <__kernel_cosf+0x1c8>
	}
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800b9c:	012b5234 	movhi	r4,44360
	z  = x*x;
  800ba0:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800ba4:	2135d384 	addi	r4,r4,-10418
  800ba8:	008c43f4 	movhi	r2,12559
  800bac:	109d3d84 	addi	r2,r2,29942
  800bb0:	9909c032 	custom	0,r4,r19,r4
  800bb4:	2089c072 	custom	1,r4,r4,r2
  800bb8:	014d2534 	movhi	r5,13460
  800bbc:	297c9f04 	addi	r5,r5,-3460
  800bc0:	24c9c032 	custom	0,r4,r4,r19
  800bc4:	08023800 	call	802380 <__subsf3>
  800bc8:	00cdf434 	movhi	r3,14288
  800bcc:	18c34044 	addi	r3,r3,3329
  800bd0:	14c9c032 	custom	0,r4,r2,r19
  800bd4:	20c9c072 	custom	1,r4,r4,r3
  800bd8:	014eadb4 	movhi	r5,15030
  800bdc:	2942d844 	addi	r5,r5,2913
  800be0:	24c9c032 	custom	0,r4,r4,r19
  800be4:	08023800 	call	802380 <__subsf3>
  800be8:	00cf4af4 	movhi	r3,15659
  800bec:	14e1c032 	custom	0,r16,r2,r19
  800bf0:	18eaaac4 	addi	r3,r3,-21845
  800bf4:	80e1c072 	custom	1,r16,r16,r3
  800bf8:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
  800bfc:	a48bc032 	custom	0,r5,r20,r18
  800c00:	9c09c032 	custom	0,r4,r19,r16
  800c04:	044fc034 	movhi	r17,16128
  800c08:	08023800 	call	802380 <__subsf3>
  800c0c:	9c63c032 	custom	0,r17,r19,r17
  800c10:	8809883a 	mov	r4,r17
  800c14:	100b883a 	mov	r5,r2
  800c18:	08023800 	call	802380 <__subsf3>
  800c1c:	100b883a 	mov	r5,r2
  800c20:	010fe034 	movhi	r4,16256
  800c24:	08023800 	call	802380 <__subsf3>
  800c28:	00003106 	br	800cf0 <__kernel_cosf+0x198>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c2c:	012b5234 	movhi	r4,44360
	z  = x*x;
  800c30:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c34:	2135d384 	addi	r4,r4,-10418
  800c38:	008c43f4 	movhi	r2,12559
  800c3c:	109d3d84 	addi	r2,r2,29942
  800c40:	9909c032 	custom	0,r4,r19,r4
  800c44:	2089c072 	custom	1,r4,r4,r2
  800c48:	014d2534 	movhi	r5,13460
  800c4c:	297c9f04 	addi	r5,r5,-3460
  800c50:	24c9c032 	custom	0,r4,r4,r19
  800c54:	08023800 	call	802380 <__subsf3>
  800c58:	00cdf434 	movhi	r3,14288
  800c5c:	18c34044 	addi	r3,r3,3329
  800c60:	14c9c032 	custom	0,r4,r2,r19
  800c64:	20c9c072 	custom	1,r4,r4,r3
  800c68:	014eadb4 	movhi	r5,15030
  800c6c:	24c9c032 	custom	0,r4,r4,r19
  800c70:	2942d844 	addi	r5,r5,2913
  800c74:	08023800 	call	802380 <__subsf3>
  800c78:	010f4af4 	movhi	r4,15659
  800c7c:	14e1c032 	custom	0,r16,r2,r19
  800c80:	212aaac4 	addi	r4,r4,-21845
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800c84:	00cfa6b4 	movhi	r3,16026
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c88:	8121c072 	custom	1,r16,r16,r4
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800c8c:	18e66644 	addi	r3,r3,-26215
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c90:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800c94:	1c7fd90e 	bge	r3,r17,800bfc <__kernel_cosf+0xa4>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
  800c98:	008fd234 	movhi	r2,16200
  800c9c:	14401d16 	blt	r2,r17,800d14 <__kernel_cosf+0x1bc>
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800ca0:	017fc034 	movhi	r5,65280
  800ca4:	894b883a 	add	r5,r17,r5
	    }
	    hz = (float)0.5*z-qx;
	    a  = one-qx;
  800ca8:	010fe034 	movhi	r4,16256
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800cac:	2823883a 	mov	r17,r5
	    a  = one-qx;
  800cb0:	08023800 	call	802380 <__subsf3>
  800cb4:	102b883a 	mov	r21,r2
	    hz = (float)0.5*z-qx;
  800cb8:	010fc034 	movhi	r4,16128
  800cbc:	880b883a 	mov	r5,r17
  800cc0:	9909c032 	custom	0,r4,r19,r4
  800cc4:	08023800 	call	802380 <__subsf3>
	    return a - (hz - (z*r-x*y));
  800cc8:	a48bc032 	custom	0,r5,r20,r18
  800ccc:	9c09c032 	custom	0,r4,r19,r16
	    hz = (float)0.5*z-qx;
  800cd0:	1023883a 	mov	r17,r2
	    return a - (hz - (z*r-x*y));
  800cd4:	08023800 	call	802380 <__subsf3>
  800cd8:	100b883a 	mov	r5,r2
  800cdc:	8809883a 	mov	r4,r17
  800ce0:	08023800 	call	802380 <__subsf3>
  800ce4:	100b883a 	mov	r5,r2
  800ce8:	a809883a 	mov	r4,r21
  800cec:	08023800 	call	802380 <__subsf3>
	}
}
  800cf0:	dfc00617 	ldw	ra,24(sp)
  800cf4:	dd400517 	ldw	r21,20(sp)
  800cf8:	dd000417 	ldw	r20,16(sp)
  800cfc:	dcc00317 	ldw	r19,12(sp)
  800d00:	dc800217 	ldw	r18,8(sp)
  800d04:	dc400117 	ldw	r17,4(sp)
  800d08:	dc000017 	ldw	r16,0(sp)
  800d0c:	dec00704 	addi	sp,sp,28
  800d10:	f800283a 	ret
  800d14:	054fce34 	movhi	r21,16184
		qx = (float)0.28125;
  800d18:	044fa434 	movhi	r17,16016
  800d1c:	003fe606 	br	800cb8 <__kernel_cosf+0x160>
	    if(((int)x)==0) return one;		/* generate inexact */
  800d20:	008fe034 	movhi	r2,16256
  800d24:	003ff206 	br	800cf0 <__kernel_cosf+0x198>

00800d28 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
  800d28:	deff9a04 	addi	sp,sp,-408
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
  800d2c:	d8806617 	ldw	r2,408(sp)
{
  800d30:	dd806215 	stw	r22,392(sp)
  800d34:	dd006015 	stw	r20,384(sp)
	jk = init_jk[prec];
  800d38:	100690ba 	slli	r3,r2,2
  800d3c:	00802074 	movhi	r2,129
{
  800d40:	dfc06515 	stw	ra,404(sp)
	jk = init_jk[prec];
  800d44:	1885883a 	add	r2,r3,r2
  800d48:	150a7c17 	ldw	r20,10736(r2)
{
  800d4c:	df006415 	stw	fp,400(sp)
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
  800d50:	38bfffc4 	addi	r2,r7,-1
{
  800d54:	ddc06315 	stw	r23,396(sp)
  800d58:	dd406115 	stw	r21,388(sp)
  800d5c:	dcc05f15 	stw	r19,380(sp)
  800d60:	dc805e15 	stw	r18,376(sp)
  800d64:	dc405d15 	stw	r17,372(sp)
  800d68:	dc005c15 	stw	r16,368(sp)
  800d6c:	d9800b15 	stw	r6,44(sp)
  800d70:	d9c00615 	stw	r7,24(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  800d74:	30ffff10 	cmplti	r3,r6,-4
{
  800d78:	d9000515 	stw	r4,20(sp)
  800d7c:	d9400815 	stw	r5,32(sp)
	jx =  nx-1;
  800d80:	102d883a 	mov	r22,r2
	jv = (e0-3)/8; if(jv<0) jv=0;
  800d84:	1801e11e 	bne	r3,zero,80150c <__kernel_rem_pio2f+0x7e4>
  800d88:	30bfff44 	addi	r2,r6,-3
  800d8c:	1001e316 	blt	r2,zero,80151c <__kernel_rem_pio2f+0x7f4>
  800d90:	1005d0fa 	srai	r2,r2,3
  800d94:	d8800415 	stw	r2,16(sp)
	q0 =  e0-8*(jv+1);
  800d98:	10800044 	addi	r2,r2,1
  800d9c:	100490fa 	slli	r2,r2,3
  800da0:	d8800a15 	stw	r2,40(sp)
  800da4:	d9000b17 	ldw	r4,44(sp)
  800da8:	d9400a17 	ldw	r5,40(sp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
  800dac:	a585883a 	add	r2,r20,r22
	q0 =  e0-8*(jv+1);
  800db0:	2149c83a 	sub	r4,r4,r5
  800db4:	d9000115 	stw	r4,4(sp)
	j = jv-jx; m = jx+jk;
  800db8:	d9000417 	ldw	r4,16(sp)
  800dbc:	25a1c83a 	sub	r16,r4,r22
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  800dc0:	10000e16 	blt	r2,zero,800dfc <__kernel_rem_pio2f+0xd4>
  800dc4:	802490ba 	slli	r18,r16,2
  800dc8:	d8c06717 	ldw	r3,412(sp)
  800dcc:	10800044 	addi	r2,r2,1
  800dd0:	dc402004 	addi	r17,sp,128
  800dd4:	1ca5883a 	add	r18,r3,r18
  800dd8:	1427883a 	add	r19,r2,r16
  800ddc:	80010f16 	blt	r16,zero,80121c <__kernel_rem_pio2f+0x4f4>
  800de0:	91000017 	ldw	r4,0(r18)
  800de4:	08028840 	call	802884 <__floatsisf>
  800de8:	88800015 	stw	r2,0(r17)
  800dec:	84000044 	addi	r16,r16,1
  800df0:	8c400104 	addi	r17,r17,4
  800df4:	94800104 	addi	r18,r18,4
  800df8:	84fff81e 	bne	r16,r19,800ddc <__kernel_rem_pio2f+0xb4>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
  800dfc:	a0001c16 	blt	r20,zero,800e70 <__kernel_rem_pio2f+0x148>
  800e00:	b01090ba 	slli	r8,r22,2
  800e04:	d8802004 	addi	r2,sp,128
  800e08:	db400517 	ldw	r13,20(sp)
  800e0c:	41c00104 	addi	r7,r8,4
  800e10:	1211883a 	add	r8,r2,r8
  800e14:	d8800617 	ldw	r2,24(sp)
  800e18:	b019883a 	mov	r12,r22
  800e1c:	da804804 	addi	r10,sp,288
  800e20:	b013883a 	mov	r9,r22
  800e24:	a097883a 	add	r11,r20,r2
  800e28:	3b4f883a 	add	r7,r7,r13
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800e2c:	000b883a 	mov	r5,zero
  800e30:	60000a16 	blt	r12,zero,800e5c <__kernel_rem_pio2f+0x134>
  800e34:	4009883a 	mov	r4,r8
  800e38:	6805883a 	mov	r2,r13
  800e3c:	000b883a 	mov	r5,zero
  800e40:	10c00017 	ldw	r3,0(r2)
  800e44:	21800017 	ldw	r6,0(r4)
  800e48:	10800104 	addi	r2,r2,4
  800e4c:	213fff04 	addi	r4,r4,-4
  800e50:	1987c032 	custom	0,r3,r3,r6
  800e54:	28cbc072 	custom	1,r5,r5,r3
  800e58:	11fff91e 	bne	r2,r7,800e40 <__kernel_rem_pio2f+0x118>
	    q[i] = fw;
  800e5c:	51400015 	stw	r5,0(r10)
	for (i=0;i<=jk;i++) {
  800e60:	4a400044 	addi	r9,r9,1
  800e64:	52800104 	addi	r10,r10,4
  800e68:	42000104 	addi	r8,r8,4
  800e6c:	4affef1e 	bne	r9,r11,800e2c <__kernel_rem_pio2f+0x104>
  800e70:	d8c00617 	ldw	r3,24(sp)
  800e74:	d9000517 	ldw	r4,20(sp)
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800e78:	a0bfffc4 	addi	r2,r20,-1
  800e7c:	180690ba 	slli	r3,r3,2
  800e80:	100490ba 	slli	r2,r2,2
  800e84:	a02a90ba 	slli	r21,r20,2
  800e88:	21ffff04 	addi	r7,r4,-4
  800e8c:	38f9883a 	add	fp,r7,r3
  800e90:	d8c05c04 	addi	r3,sp,368
  800e94:	d9000c04 	addi	r4,sp,48
  800e98:	1885883a 	add	r2,r3,r2
	jk = init_jk[prec];
  800e9c:	a025883a 	mov	r18,r20
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800ea0:	dd000315 	stw	r20,12(sp)
  800ea4:	256b883a 	add	r21,r4,r21
  800ea8:	dcc04804 	addi	r19,sp,288
  800eac:	d8800715 	stw	r2,28(sp)
  800eb0:	b029883a 	mov	r20,r22
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800eb4:	900690ba 	slli	r3,r18,2
  800eb8:	d8805c04 	addi	r2,sp,368
  800ebc:	d8c00015 	stw	r3,0(sp)
  800ec0:	10c5883a 	add	r2,r2,r3
  800ec4:	147fec17 	ldw	r17,-80(r2)
  800ec8:	0480140e 	bge	zero,r18,800f1c <__kernel_rem_pio2f+0x1f4>
  800ecc:	98e1883a 	add	r16,r19,r3
  800ed0:	dd800c04 	addi	r22,sp,48
	    fw    =  (float)((__int32_t)(twon8* z));
  800ed4:	010ee034 	movhi	r4,15232
  800ed8:	8909c032 	custom	0,r4,r17,r4
  800edc:	08028140 	call	802814 <__fixsfsi>
  800ee0:	1009883a 	mov	r4,r2
  800ee4:	08028840 	call	802884 <__floatsisf>
	    iq[i] =  (__int32_t)(z-two8*fw);
  800ee8:	0150e034 	movhi	r5,17280
  800eec:	8809883a 	mov	r4,r17
  800ef0:	114bc032 	custom	0,r5,r2,r5
	    fw    =  (float)((__int32_t)(twon8* z));
  800ef4:	102f883a 	mov	r23,r2
	    iq[i] =  (__int32_t)(z-two8*fw);
  800ef8:	08023800 	call	802380 <__subsf3>
  800efc:	1009883a 	mov	r4,r2
  800f00:	08028140 	call	802814 <__fixsfsi>
	    z     =  q[j-1]+fw;
  800f04:	847fff17 	ldw	r17,-4(r16)
	    iq[i] =  (__int32_t)(z-two8*fw);
  800f08:	b0800015 	stw	r2,0(r22)
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800f0c:	843fff04 	addi	r16,r16,-4
	    z     =  q[j-1]+fw;
  800f10:	bc63c072 	custom	1,r17,r23,r17
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800f14:	b5800104 	addi	r22,r22,4
  800f18:	9c3fee1e 	bne	r19,r16,800ed4 <__kernel_rem_pio2f+0x1ac>
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800f1c:	dc000117 	ldw	r16,4(sp)
  800f20:	8809883a 	mov	r4,r17
  800f24:	800b883a 	mov	r5,r16
  800f28:	08018d00 	call	8018d0 <scalbnf>
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f2c:	010f8034 	movhi	r4,15872
  800f30:	1109c032 	custom	0,r4,r2,r4
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800f34:	1023883a 	mov	r17,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f38:	08017e80 	call	8017e8 <floorf>
  800f3c:	01504034 	movhi	r5,16640
  800f40:	114bc032 	custom	0,r5,r2,r5
  800f44:	8809883a 	mov	r4,r17
  800f48:	08023800 	call	802380 <__subsf3>
	n  = (__int32_t) z;
  800f4c:	1009883a 	mov	r4,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f50:	102f883a 	mov	r23,r2
	n  = (__int32_t) z;
  800f54:	08028140 	call	802814 <__fixsfsi>
	z -= (float)n;
  800f58:	1009883a 	mov	r4,r2
	n  = (__int32_t) z;
  800f5c:	1023883a 	mov	r17,r2
	z -= (float)n;
  800f60:	08028840 	call	802884 <__floatsisf>
  800f64:	100b883a 	mov	r5,r2
  800f68:	b809883a 	mov	r4,r23
  800f6c:	08023800 	call	802380 <__subsf3>
  800f70:	1011883a 	mov	r8,r2
  800f74:	100d883a 	mov	r6,r2
	if(q0>0) {	/* need iq[jz-1] to determine n */
  800f78:	0400560e 	bge	zero,r16,8010d4 <__kernel_rem_pio2f+0x3ac>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800f7c:	90bfffc4 	addi	r2,r18,-1
  800f80:	100490ba 	slli	r2,r2,2
  800f84:	d9005c04 	addi	r4,sp,368
  800f88:	00c00204 	movi	r3,8
  800f8c:	2085883a 	add	r2,r4,r2
  800f90:	113fb017 	ldw	r4,-320(r2)
  800f94:	1c07c83a 	sub	r3,r3,r16
	    ih = iq[jz-1]>>(7-q0);
  800f98:	05c001c4 	movi	r23,7
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800f9c:	20cbd83a 	sra	r5,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  800fa0:	bc2fc83a 	sub	r23,r23,r16
	    iq[jz-1] -= i<<(8-q0);
  800fa4:	28c6983a 	sll	r3,r5,r3
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800fa8:	8963883a 	add	r17,r17,r5
	    iq[jz-1] -= i<<(8-q0);
  800fac:	20c7c83a 	sub	r3,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  800fb0:	1defd83a 	sra	r23,r3,r23
	    iq[jz-1] -= i<<(8-q0);
  800fb4:	10ffb015 	stw	r3,-320(r2)
	if(ih>0) {	/* q > 0.5 */
  800fb8:	05c04f16 	blt	zero,r23,8010f8 <__kernel_rem_pio2f+0x3d0>
	if(z==zero) {
  800fbc:	3009883a 	mov	r4,r6
  800fc0:	000b883a 	mov	r5,zero
  800fc4:	d9800215 	stw	r6,8(sp)
  800fc8:	0801e580 	call	801e58 <__eqsf2>
  800fcc:	d9800217 	ldw	r6,8(sp)
  800fd0:	1001561e 	bne	r2,zero,80152c <__kernel_rem_pio2f+0x804>
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  800fd4:	d8800317 	ldw	r2,12(sp)
  800fd8:	923fffc4 	addi	r8,r18,-1
  800fdc:	40800916 	blt	r8,r2,801004 <__kernel_rem_pio2f+0x2dc>
  800fe0:	d8800017 	ldw	r2,0(sp)
  800fe4:	d8c00c04 	addi	r3,sp,48
  800fe8:	1885883a 	add	r2,r3,r2
	    j = 0;
  800fec:	0007883a 	mov	r3,zero
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  800ff0:	113fff17 	ldw	r4,-4(r2)
  800ff4:	10bfff04 	addi	r2,r2,-4
  800ff8:	1906b03a 	or	r3,r3,r4
  800ffc:	157ffc1e 	bne	r2,r21,800ff0 <__kernel_rem_pio2f+0x2c8>
	    if(j==0) { /* need recomputation */
  801000:	1800981e 	bne	r3,zero,801264 <__kernel_rem_pio2f+0x53c>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  801004:	d8800717 	ldw	r2,28(sp)
  801008:	10bfb017 	ldw	r2,-320(r2)
  80100c:	1000921e 	bne	r2,zero,801258 <__kernel_rem_pio2f+0x530>
  801010:	a805883a 	mov	r2,r21
  801014:	04400044 	movi	r17,1
  801018:	10fffe17 	ldw	r3,-8(r2)
  80101c:	8c400044 	addi	r17,r17,1
  801020:	10bfff04 	addi	r2,r2,-4
  801024:	183ffc26 	beq	r3,zero,801018 <__kernel_rem_pio2f+0x2f0>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  801028:	95800044 	addi	r22,r18,1
  80102c:	9463883a 	add	r17,r18,r17
  801030:	d8800417 	ldw	r2,16(sp)
  801034:	90af883a 	add	r23,r18,r2
  801038:	d8800617 	ldw	r2,24(sp)
  80103c:	b82e90ba 	slli	r23,r23,2
  801040:	14a5883a 	add	r18,r2,r18
  801044:	d8806717 	ldw	r2,412(sp)
  801048:	902490ba 	slli	r18,r18,2
  80104c:	15ef883a 	add	r23,r2,r23
  801050:	d8802004 	addi	r2,sp,128
  801054:	14a5883a 	add	r18,r2,r18
  801058:	d8800017 	ldw	r2,0(sp)
  80105c:	dd400015 	stw	r21,0(sp)
  801060:	98a1883a 	add	r16,r19,r2
  801064:	802b883a 	mov	r21,r16
  801068:	dc000517 	ldw	r16,20(sp)
		    f[jx+i] = (float) ipio2[jv+i];
  80106c:	b9000117 	ldw	r4,4(r23)
  801070:	08028840 	call	802884 <__floatsisf>
  801074:	90800015 	stw	r2,0(r18)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  801078:	a0001416 	blt	r20,zero,8010cc <__kernel_rem_pio2f+0x3a4>
  80107c:	900b883a 	mov	r5,r18
  801080:	8009883a 	mov	r4,r16
  801084:	000d883a 	mov	r6,zero
  801088:	00000206 	br	801094 <__kernel_rem_pio2f+0x36c>
  80108c:	28800017 	ldw	r2,0(r5)
  801090:	21000104 	addi	r4,r4,4
  801094:	20c00017 	ldw	r3,0(r4)
  801098:	297fff04 	addi	r5,r5,-4
  80109c:	10c5c032 	custom	0,r2,r2,r3
  8010a0:	308dc072 	custom	1,r6,r6,r2
  8010a4:	273ff91e 	bne	r4,fp,80108c <__kernel_rem_pio2f+0x364>
		    q[i] = fw;
  8010a8:	a9800115 	stw	r6,4(r21)
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  8010ac:	b5800044 	addi	r22,r22,1
  8010b0:	bdc00104 	addi	r23,r23,4
  8010b4:	94800104 	addi	r18,r18,4
  8010b8:	ad400104 	addi	r21,r21,4
  8010bc:	8dbfeb0e 	bge	r17,r22,80106c <__kernel_rem_pio2f+0x344>
  8010c0:	dd400017 	ldw	r21,0(sp)
  8010c4:	8825883a 	mov	r18,r17
  8010c8:	003f7a06 	br	800eb4 <__kernel_rem_pio2f+0x18c>
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  8010cc:	000d883a 	mov	r6,zero
  8010d0:	003ff506 	br	8010a8 <__kernel_rem_pio2f+0x380>
	else if(q0==0) ih = iq[jz-1]>>8;
  8010d4:	d8800117 	ldw	r2,4(sp)
  8010d8:	1000551e 	bne	r2,zero,801230 <__kernel_rem_pio2f+0x508>
  8010dc:	90bfffc4 	addi	r2,r18,-1
  8010e0:	100490ba 	slli	r2,r2,2
  8010e4:	d8c05c04 	addi	r3,sp,368
  8010e8:	1885883a 	add	r2,r3,r2
  8010ec:	15ffb017 	ldw	r23,-320(r2)
  8010f0:	b82fd23a 	srai	r23,r23,8
	if(ih>0) {	/* q > 0.5 */
  8010f4:	05ffb10e 	bge	zero,r23,800fbc <__kernel_rem_pio2f+0x294>
	    n += 1; carry = 0;
  8010f8:	8c400044 	addi	r17,r17,1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8010fc:	0481090e 	bge	zero,r18,801524 <__kernel_rem_pio2f+0x7fc>
		j = iq[i];
  801100:	da400c17 	ldw	r9,48(sp)
		    if(j!=0) {
  801104:	4800471e 	bne	r9,zero,801224 <__kernel_rem_pio2f+0x4fc>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801108:	90800060 	cmpeqi	r2,r18,1
  80110c:	1000241e 	bne	r2,zero,8011a0 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  801110:	da400d17 	ldw	r9,52(sp)
  801114:	d9000d04 	addi	r4,sp,52
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801118:	00c00044 	movi	r3,1
  80111c:	18800044 	addi	r2,r3,1
  801120:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  801124:	4800061e 	bne	r9,zero,801140 <__kernel_rem_pio2f+0x418>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801128:	90801d26 	beq	r18,r2,8011a0 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  80112c:	22400017 	ldw	r9,0(r4)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801130:	1007883a 	mov	r3,r2
  801134:	18800044 	addi	r2,r3,1
  801138:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  80113c:	483ffa26 	beq	r9,zero,801128 <__kernel_rem_pio2f+0x400>
			carry = 1; iq[i] = 0x100- j;
  801140:	180690ba 	slli	r3,r3,2
  801144:	01004004 	movi	r4,256
  801148:	2253c83a 	sub	r9,r4,r9
  80114c:	d9005c04 	addi	r4,sp,368
  801150:	20c7883a 	add	r3,r4,r3
  801154:	1a7fb015 	stw	r9,-320(r3)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801158:	1480100e 	bge	r2,r18,80119c <__kernel_rem_pio2f+0x474>
		j = iq[i];
  80115c:	d8c00017 	ldw	r3,0(sp)
  801160:	100490ba 	slli	r2,r2,2
  801164:	d9000c04 	addi	r4,sp,48
  801168:	20cb883a 	add	r5,r4,r3
  80116c:	d8c05c04 	addi	r3,sp,368
  801170:	1887883a 	add	r3,r3,r2
  801174:	d9c00c04 	addi	r7,sp,48
  801178:	18ffb017 	ldw	r3,-320(r3)
		} else  iq[i] = 0xff - j;
  80117c:	01003fc4 	movi	r4,255
  801180:	3885883a 	add	r2,r7,r2
  801184:	00000106 	br	80118c <__kernel_rem_pio2f+0x464>
		j = iq[i];
  801188:	10c00017 	ldw	r3,0(r2)
		} else  iq[i] = 0xff - j;
  80118c:	20c7c83a 	sub	r3,r4,r3
  801190:	10c00015 	stw	r3,0(r2)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801194:	10800104 	addi	r2,r2,4
  801198:	117ffb1e 	bne	r2,r5,801188 <__kernel_rem_pio2f+0x460>
  80119c:	02400044 	movi	r9,1
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
  8011a0:	d8c00117 	ldw	r3,4(sp)
  8011a4:	00c00b0e 	bge	zero,r3,8011d4 <__kernel_rem_pio2f+0x4ac>
	        switch(q0) {
  8011a8:	18800060 	cmpeqi	r2,r3,1
  8011ac:	1000c71e 	bne	r2,zero,8014cc <__kernel_rem_pio2f+0x7a4>
  8011b0:	188000a0 	cmpeqi	r2,r3,2
  8011b4:	10000726 	beq	r2,zero,8011d4 <__kernel_rem_pio2f+0x4ac>
	    	   iq[jz-1] &= 0x3f; break;
  8011b8:	90bfffc4 	addi	r2,r18,-1
  8011bc:	100490ba 	slli	r2,r2,2
  8011c0:	d8c05c04 	addi	r3,sp,368
  8011c4:	1885883a 	add	r2,r3,r2
  8011c8:	10ffb017 	ldw	r3,-320(r2)
  8011cc:	18c00fcc 	andi	r3,r3,63
  8011d0:	10ffb015 	stw	r3,-320(r2)
	    if(ih==2) {
  8011d4:	b8800098 	cmpnei	r2,r23,2
  8011d8:	103f781e 	bne	r2,zero,800fbc <__kernel_rem_pio2f+0x294>
		z = one - z;
  8011dc:	400b883a 	mov	r5,r8
  8011e0:	010fe034 	movhi	r4,16256
  8011e4:	da400215 	stw	r9,8(sp)
  8011e8:	08023800 	call	802380 <__subsf3>
		if(carry!=0) z -= scalbnf(one,(int)q0);
  8011ec:	da400217 	ldw	r9,8(sp)
		z = one - z;
  8011f0:	102d883a 	mov	r22,r2
  8011f4:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  8011f8:	483f7026 	beq	r9,zero,800fbc <__kernel_rem_pio2f+0x294>
  8011fc:	d9400117 	ldw	r5,4(sp)
  801200:	010fe034 	movhi	r4,16256
  801204:	08018d00 	call	8018d0 <scalbnf>
  801208:	100b883a 	mov	r5,r2
  80120c:	b009883a 	mov	r4,r22
  801210:	08023800 	call	802380 <__subsf3>
  801214:	100d883a 	mov	r6,r2
  801218:	003f6806 	br	800fbc <__kernel_rem_pio2f+0x294>
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  80121c:	0005883a 	mov	r2,zero
  801220:	003ef106 	br	800de8 <__kernel_rem_pio2f+0xc0>
		    if(j!=0) {
  801224:	00800044 	movi	r2,1
  801228:	0007883a 	mov	r3,zero
  80122c:	003fc406 	br	801140 <__kernel_rem_pio2f+0x418>
	else if(z>=(float)0.5) ih=2;
  801230:	4009883a 	mov	r4,r8
  801234:	014fc034 	movhi	r5,16128
  801238:	da000915 	stw	r8,36(sp)
  80123c:	da000215 	stw	r8,8(sp)
  801240:	0801ec80 	call	801ec8 <__gesf2>
  801244:	da000217 	ldw	r8,8(sp)
  801248:	d9800917 	ldw	r6,36(sp)
  80124c:	1000a70e 	bge	r2,zero,8014ec <__kernel_rem_pio2f+0x7c4>
	ih = 0;
  801250:	002f883a 	mov	r23,zero
  801254:	003f5906 	br	800fbc <__kernel_rem_pio2f+0x294>
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  801258:	95800044 	addi	r22,r18,1
  80125c:	b023883a 	mov	r17,r22
  801260:	003f7306 	br	801030 <__kernel_rem_pio2f+0x308>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
  801264:	d8c00117 	ldw	r3,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  801268:	400490ba 	slli	r2,r8,2
  80126c:	dd000317 	ldw	r20,12(sp)
	    jz -= 1; q0 -= 8;
  801270:	193ffe04 	addi	r4,r3,-8
	    while(iq[jz]==0) { jz--; q0-=8;}
  801274:	d8c05c04 	addi	r3,sp,368
  801278:	1887883a 	add	r3,r3,r2
  80127c:	18ffb017 	ldw	r3,-320(r3)
	    jz -= 1; q0 -= 8;
  801280:	d9000115 	stw	r4,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  801284:	b839883a 	mov	fp,r23
  801288:	1800091e 	bne	r3,zero,8012b0 <__kernel_rem_pio2f+0x588>
  80128c:	d8c00c04 	addi	r3,sp,48
  801290:	1885883a 	add	r2,r3,r2
  801294:	2007883a 	mov	r3,r4
  801298:	113fff17 	ldw	r4,-4(r2)
  80129c:	423fffc4 	addi	r8,r8,-1
  8012a0:	10bfff04 	addi	r2,r2,-4
  8012a4:	18fffe04 	addi	r3,r3,-8
  8012a8:	203ffb26 	beq	r4,zero,801298 <__kernel_rem_pio2f+0x570>
  8012ac:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
  8012b0:	d9400117 	ldw	r5,4(sp)
  8012b4:	010fe034 	movhi	r4,16256
  8012b8:	da000015 	stw	r8,0(sp)
  8012bc:	08018d00 	call	8018d0 <scalbnf>
	for(i=jz;i>=0;i--) {
  8012c0:	da000017 	ldw	r8,0(sp)
	fw = scalbnf(one,(int)q0);
  8012c4:	102d883a 	mov	r22,r2
	for(i=jz;i>=0;i--) {
  8012c8:	4000f316 	blt	r8,zero,801698 <__kernel_rem_pio2f+0x970>
  8012cc:	402090ba 	slli	r16,r8,2
  8012d0:	d8804804 	addi	r2,sp,288
  8012d4:	402f883a 	mov	r23,r8
  8012d8:	1427883a 	add	r19,r2,r16
  8012dc:	d8800c04 	addi	r2,sp,48
  8012e0:	1425883a 	add	r18,r2,r16
  8012e4:	982b883a 	mov	r21,r19
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  8012e8:	91000017 	ldw	r4,0(r18)
	for(i=jz;i>=0;i--) {
  8012ec:	ad7fff04 	addi	r21,r21,-4
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  8012f0:	08028840 	call	802884 <__floatsisf>
  8012f4:	1585c032 	custom	0,r2,r2,r22
  8012f8:	010ee034 	movhi	r4,15232
  8012fc:	9007883a 	mov	r3,r18
  801300:	a8800115 	stw	r2,4(r21)
	for(i=jz;i>=0;i--) {
  801304:	d8800c04 	addi	r2,sp,48
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  801308:	b12dc032 	custom	0,r22,r22,r4
	for(i=jz;i>=0;i--) {
  80130c:	94bfff04 	addi	r18,r18,-4
  801310:	10fff51e 	bne	r2,r3,8012e8 <__kernel_rem_pio2f+0x5c0>
  801314:	dc803404 	addi	r18,sp,208
  801318:	b811883a 	mov	r8,r23
  80131c:	9015883a 	mov	r10,r18
  801320:	0013883a 	mov	r9,zero
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  801324:	a0001716 	blt	r20,zero,801384 <__kernel_rem_pio2f+0x65c>
  801328:	01402074 	movhi	r5,129
  80132c:	294a7204 	addi	r5,r5,10696
  801330:	9809883a 	mov	r4,r19
  801334:	00cff274 	movhi	r3,16329
  801338:	000d883a 	mov	r6,zero
  80133c:	0005883a 	mov	r2,zero
  801340:	00000306 	br	801350 <__kernel_rem_pio2f+0x628>
  801344:	48800816 	blt	r9,r2,801368 <__kernel_rem_pio2f+0x640>
  801348:	28c00017 	ldw	r3,0(r5)
  80134c:	29400104 	addi	r5,r5,4
  801350:	21c00017 	ldw	r7,0(r4)
  801354:	10800044 	addi	r2,r2,1
  801358:	21000104 	addi	r4,r4,4
  80135c:	19c7c032 	custom	0,r3,r3,r7
  801360:	30cdc072 	custom	1,r6,r6,r3
  801364:	a0bff70e 	bge	r20,r2,801344 <__kernel_rem_pio2f+0x61c>
	    fq[jz-i] = fw;
  801368:	51800015 	stw	r6,0(r10)
	for(i=jz;i>=0;i--) {
  80136c:	48800044 	addi	r2,r9,1
  801370:	52800104 	addi	r10,r10,4
  801374:	9cffff04 	addi	r19,r19,-4
  801378:	42400426 	beq	r8,r9,80138c <__kernel_rem_pio2f+0x664>
  80137c:	1013883a 	mov	r9,r2
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  801380:	a03fe90e 	bge	r20,zero,801328 <__kernel_rem_pio2f+0x600>
  801384:	000d883a 	mov	r6,zero
  801388:	003ff706 	br	801368 <__kernel_rem_pio2f+0x640>
	}

    /* compress fq[] into y[] */
	switch(prec) {
  80138c:	d8806617 	ldw	r2,408(sp)
  801390:	108000c8 	cmpgei	r2,r2,3
  801394:	10001b1e 	bne	r2,zero,801404 <__kernel_rem_pio2f+0x6dc>
  801398:	d8806617 	ldw	r2,408(sp)
  80139c:	00808c16 	blt	zero,r2,8015d0 <__kernel_rem_pio2f+0x8a8>
  8013a0:	10000b1e 	bne	r2,zero,8013d0 <__kernel_rem_pio2f+0x6a8>
  8013a4:	9421883a 	add	r16,r18,r16
  8013a8:	0005883a 	mov	r2,zero
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
  8013ac:	81000017 	ldw	r4,0(r16)
  8013b0:	8007883a 	mov	r3,r16
  8013b4:	843fff04 	addi	r16,r16,-4
  8013b8:	1105c072 	custom	1,r2,r2,r4
  8013bc:	90fffb1e 	bne	r18,r3,8013ac <__kernel_rem_pio2f+0x684>
		y[0] = (ih==0)? fw: -fw; 
  8013c0:	e0000126 	beq	fp,zero,8013c8 <__kernel_rem_pio2f+0x6a0>
  8013c4:	10a0003c 	xorhi	r2,r2,32768
  8013c8:	d8c00817 	ldw	r3,32(sp)
  8013cc:	18800015 	stw	r2,0(r3)
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
		}
	}
	return n&7;
  8013d0:	888001cc 	andi	r2,r17,7
}
  8013d4:	dfc06517 	ldw	ra,404(sp)
  8013d8:	df006417 	ldw	fp,400(sp)
  8013dc:	ddc06317 	ldw	r23,396(sp)
  8013e0:	dd806217 	ldw	r22,392(sp)
  8013e4:	dd406117 	ldw	r21,388(sp)
  8013e8:	dd006017 	ldw	r20,384(sp)
  8013ec:	dcc05f17 	ldw	r19,380(sp)
  8013f0:	dc805e17 	ldw	r18,376(sp)
  8013f4:	dc405d17 	ldw	r17,372(sp)
  8013f8:	dc005c17 	ldw	r16,368(sp)
  8013fc:	dec06604 	addi	sp,sp,408
  801400:	f800283a 	ret
	switch(prec) {
  801404:	d8806617 	ldw	r2,408(sp)
  801408:	108000e0 	cmpeqi	r2,r2,3
  80140c:	103ff026 	beq	r2,zero,8013d0 <__kernel_rem_pio2f+0x6a8>
		for (i=jz;i>0;i--) {
  801410:	4000ad26 	beq	r8,zero,8016c8 <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  801414:	d8805c04 	addi	r2,sp,368
  801418:	1405883a 	add	r2,r2,r16
  80141c:	153fd817 	ldw	r20,-160(r2)
  801420:	9427883a 	add	r19,r18,r16
  801424:	402b883a 	mov	r21,r8
  801428:	993fff17 	ldw	r4,-4(r19)
  80142c:	a02d883a 	mov	r22,r20
		for (i=jz;i>0;i--) {
  801430:	9cffff04 	addi	r19,r19,-4
		    fw      = fq[i-1]+fq[i]; 
  801434:	a129c072 	custom	1,r20,r20,r4
		    fq[i]  += fq[i-1]-fw;
  801438:	a00b883a 	mov	r5,r20
  80143c:	08023800 	call	802380 <__subsf3>
  801440:	1585c072 	custom	1,r2,r2,r22
  801444:	98800115 	stw	r2,4(r19)
		    fq[i-1] = fw;
  801448:	9d000015 	stw	r20,0(r19)
		for (i=jz;i>0;i--) {
  80144c:	94fff61e 	bne	r18,r19,801428 <__kernel_rem_pio2f+0x700>
		for (i=jz;i>1;i--) {
  801450:	aa000088 	cmpgei	r8,r21,2
  801454:	40009c26 	beq	r8,zero,8016c8 <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  801458:	d8805c04 	addi	r2,sp,368
  80145c:	1405883a 	add	r2,r2,r16
  801460:	14ffd817 	ldw	r19,-160(r2)
  801464:	9425883a 	add	r18,r18,r16
  801468:	dd003504 	addi	r20,sp,212
  80146c:	9021883a 	mov	r16,r18
  801470:	813fff17 	ldw	r4,-4(r16)
  801474:	982b883a 	mov	r21,r19
		for (i=jz;i>1;i--) {
  801478:	843fff04 	addi	r16,r16,-4
		    fw      = fq[i-1]+fq[i]; 
  80147c:	9927c072 	custom	1,r19,r19,r4
		    fq[i]  += fq[i-1]-fw;
  801480:	980b883a 	mov	r5,r19
  801484:	08023800 	call	802380 <__subsf3>
  801488:	1545c072 	custom	1,r2,r2,r21
  80148c:	80800115 	stw	r2,4(r16)
		    fq[i-1] = fw;
  801490:	84c00015 	stw	r19,0(r16)
		for (i=jz;i>1;i--) {
  801494:	a43ff61e 	bne	r20,r16,801470 <__kernel_rem_pio2f+0x748>
  801498:	0005883a 	mov	r2,zero
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  80149c:	90c00017 	ldw	r3,0(r18)
  8014a0:	94bfff04 	addi	r18,r18,-4
  8014a4:	10c5c072 	custom	1,r2,r2,r3
  8014a8:	a4bffc1e 	bne	r20,r18,80149c <__kernel_rem_pio2f+0x774>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
  8014ac:	d9003417 	ldw	r4,208(sp)
  8014b0:	d8c03517 	ldw	r3,212(sp)
		if(ih==0) {
  8014b4:	e000691e 	bne	fp,zero,80165c <__kernel_rem_pio2f+0x934>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  8014b8:	d9400817 	ldw	r5,32(sp)
  8014bc:	29000015 	stw	r4,0(r5)
  8014c0:	28c00115 	stw	r3,4(r5)
  8014c4:	28800215 	stw	r2,8(r5)
  8014c8:	003fc106 	br	8013d0 <__kernel_rem_pio2f+0x6a8>
	    	   iq[jz-1] &= 0x7f; break;
  8014cc:	90bfffc4 	addi	r2,r18,-1
  8014d0:	100490ba 	slli	r2,r2,2
  8014d4:	d8c05c04 	addi	r3,sp,368
  8014d8:	1885883a 	add	r2,r3,r2
  8014dc:	10ffb017 	ldw	r3,-320(r2)
  8014e0:	18c01fcc 	andi	r3,r3,127
  8014e4:	10ffb015 	stw	r3,-320(r2)
  8014e8:	003f3a06 	br	8011d4 <__kernel_rem_pio2f+0x4ac>
	    n += 1; carry = 0;
  8014ec:	8c400044 	addi	r17,r17,1
	else if(z>=(float)0.5) ih=2;
  8014f0:	05c00084 	movi	r23,2
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8014f4:	04bf0216 	blt	zero,r18,801100 <__kernel_rem_pio2f+0x3d8>
		z = one - z;
  8014f8:	400b883a 	mov	r5,r8
  8014fc:	010fe034 	movhi	r4,16256
  801500:	08023800 	call	802380 <__subsf3>
  801504:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  801508:	003eac06 	br	800fbc <__kernel_rem_pio2f+0x294>
  80150c:	00800204 	movi	r2,8
  801510:	d8800a15 	stw	r2,40(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  801514:	d8000415 	stw	zero,16(sp)
  801518:	003e2206 	br	800da4 <__kernel_rem_pio2f+0x7c>
  80151c:	30800104 	addi	r2,r6,4
  801520:	003e1b06 	br	800d90 <__kernel_rem_pio2f+0x68>
	    n += 1; carry = 0;
  801524:	0013883a 	mov	r9,zero
  801528:	003f1d06 	br	8011a0 <__kernel_rem_pio2f+0x478>
	    z = scalbnf(z,-(int)q0);
  80152c:	d8800a17 	ldw	r2,40(sp)
  801530:	d8c00b17 	ldw	r3,44(sp)
  801534:	3009883a 	mov	r4,r6
  801538:	dd000317 	ldw	r20,12(sp)
  80153c:	10cbc83a 	sub	r5,r2,r3
  801540:	08018d00 	call	8018d0 <scalbnf>
	    if(z>=two8) { 
  801544:	0150e034 	movhi	r5,17280
  801548:	1009883a 	mov	r4,r2
	    z = scalbnf(z,-(int)q0);
  80154c:	b839883a 	mov	fp,r23
  801550:	1027883a 	mov	r19,r2
	    if(z>=two8) { 
  801554:	0801ec80 	call	801ec8 <__gesf2>
  801558:	10003816 	blt	r2,zero,80163c <__kernel_rem_pio2f+0x914>
		fw = (float)((__int32_t)(twon8*z));
  80155c:	010ee034 	movhi	r4,15232
  801560:	9909c032 	custom	0,r4,r19,r4
  801564:	08028140 	call	802814 <__fixsfsi>
  801568:	1009883a 	mov	r4,r2
  80156c:	08028840 	call	802884 <__floatsisf>
		iq[jz] = (__int32_t)(z-two8*fw);
  801570:	0150e034 	movhi	r5,17280
  801574:	114bc032 	custom	0,r5,r2,r5
  801578:	9809883a 	mov	r4,r19
		fw = (float)((__int32_t)(twon8*z));
  80157c:	102b883a 	mov	r21,r2
		iq[jz] = (__int32_t)(z-two8*fw);
  801580:	08023800 	call	802380 <__subsf3>
		jz += 1; q0 += 8;
  801584:	92000044 	addi	r8,r18,1
		iq[jz] = (__int32_t)(z-two8*fw);
  801588:	1009883a 	mov	r4,r2
		jz += 1; q0 += 8;
  80158c:	da000215 	stw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  801590:	08028140 	call	802814 <__fixsfsi>
		iq[jz] = (__int32_t) fw;
  801594:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  801598:	d9000017 	ldw	r4,0(sp)
  80159c:	d8c05c04 	addi	r3,sp,368
		iq[jz] = (__int32_t) fw;
  8015a0:	402490ba 	slli	r18,r8,2
		iq[jz] = (__int32_t)(z-two8*fw);
  8015a4:	1921883a 	add	r16,r3,r4
  8015a8:	80bfb015 	stw	r2,-320(r16)
		iq[jz] = (__int32_t) fw;
  8015ac:	a809883a 	mov	r4,r21
  8015b0:	1ca5883a 	add	r18,r3,r18
  8015b4:	08028140 	call	802814 <__fixsfsi>
		jz += 1; q0 += 8;
  8015b8:	d8c00117 	ldw	r3,4(sp)
  8015bc:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t) fw;
  8015c0:	90bfb015 	stw	r2,-320(r18)
		jz += 1; q0 += 8;
  8015c4:	18c00204 	addi	r3,r3,8
  8015c8:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
  8015cc:	003f3806 	br	8012b0 <__kernel_rem_pio2f+0x588>
		for (i=jz;i>=0;i--) fw += fq[i]; 
  8015d0:	9421883a 	add	r16,r18,r16
		fw = 0.0;
  8015d4:	000b883a 	mov	r5,zero
		for (i=jz;i>=0;i--) fw += fq[i]; 
  8015d8:	80c00017 	ldw	r3,0(r16)
  8015dc:	8005883a 	mov	r2,r16
  8015e0:	843fff04 	addi	r16,r16,-4
  8015e4:	28cbc072 	custom	1,r5,r5,r3
  8015e8:	90bffb1e 	bne	r18,r2,8015d8 <__kernel_rem_pio2f+0x8b0>
		y[0] = (ih==0)? fw: -fw; 
  8015ec:	da000015 	stw	r8,0(sp)
		fw = fq[0]-fw;
  8015f0:	d9003417 	ldw	r4,208(sp)
		y[0] = (ih==0)? fw: -fw; 
  8015f4:	e000211e 	bne	fp,zero,80167c <__kernel_rem_pio2f+0x954>
  8015f8:	d8800817 	ldw	r2,32(sp)
  8015fc:	11400015 	stw	r5,0(r2)
		fw = fq[0]-fw;
  801600:	08023800 	call	802380 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  801604:	da000017 	ldw	r8,0(sp)
  801608:	0200090e 	bge	zero,r8,801630 <__kernel_rem_pio2f+0x908>
  80160c:	d9003504 	addi	r4,sp,212
  801610:	00c00044 	movi	r3,1
  801614:	21400017 	ldw	r5,0(r4)
  801618:	18c00044 	addi	r3,r3,1
  80161c:	21000104 	addi	r4,r4,4
  801620:	1145c072 	custom	1,r2,r2,r5
  801624:	40fffb0e 	bge	r8,r3,801614 <__kernel_rem_pio2f+0x8ec>
		y[1] = (ih==0)? fw: -fw; 
  801628:	e0000126 	beq	fp,zero,801630 <__kernel_rem_pio2f+0x908>
  80162c:	10a0003c 	xorhi	r2,r2,32768
  801630:	d8c00817 	ldw	r3,32(sp)
  801634:	18800115 	stw	r2,4(r3)
		break;
  801638:	003f6506 	br	8013d0 <__kernel_rem_pio2f+0x6a8>
	    } else iq[jz] = (__int32_t) z ;
  80163c:	9809883a 	mov	r4,r19
  801640:	08028140 	call	802814 <__fixsfsi>
  801644:	d9000017 	ldw	r4,0(sp)
  801648:	d8c05c04 	addi	r3,sp,368
  80164c:	9011883a 	mov	r8,r18
  801650:	1921883a 	add	r16,r3,r4
  801654:	80bfb015 	stw	r2,-320(r16)
  801658:	003f1506 	br	8012b0 <__kernel_rem_pio2f+0x588>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  80165c:	d9400817 	ldw	r5,32(sp)
  801660:	2120003c 	xorhi	r4,r4,32768
  801664:	18e0003c 	xorhi	r3,r3,32768
  801668:	10a0003c 	xorhi	r2,r2,32768
  80166c:	29000015 	stw	r4,0(r5)
  801670:	28c00115 	stw	r3,4(r5)
  801674:	28800215 	stw	r2,8(r5)
  801678:	003f5506 	br	8013d0 <__kernel_rem_pio2f+0x6a8>
		y[0] = (ih==0)? fw: -fw; 
  80167c:	d8c00817 	ldw	r3,32(sp)
  801680:	28a0003c 	xorhi	r2,r5,32768
  801684:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
  801688:	08023800 	call	802380 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  80168c:	da000017 	ldw	r8,0(sp)
  801690:	023fde16 	blt	zero,r8,80160c <__kernel_rem_pio2f+0x8e4>
  801694:	003fe506 	br	80162c <__kernel_rem_pio2f+0x904>
	switch(prec) {
  801698:	d8806617 	ldw	r2,408(sp)
  80169c:	108000c8 	cmpgei	r2,r2,3
  8016a0:	1000061e 	bne	r2,zero,8016bc <__kernel_rem_pio2f+0x994>
  8016a4:	d8806617 	ldw	r2,408(sp)
  8016a8:	00800916 	blt	zero,r2,8016d0 <__kernel_rem_pio2f+0x9a8>
  8016ac:	103f481e 	bne	r2,zero,8013d0 <__kernel_rem_pio2f+0x6a8>
  8016b0:	0005883a 	mov	r2,zero
		y[0] = (ih==0)? fw: -fw; 
  8016b4:	e03f4426 	beq	fp,zero,8013c8 <__kernel_rem_pio2f+0x6a0>
  8016b8:	003f4206 	br	8013c4 <__kernel_rem_pio2f+0x69c>
	switch(prec) {
  8016bc:	d8806617 	ldw	r2,408(sp)
  8016c0:	108000e0 	cmpeqi	r2,r2,3
  8016c4:	103f4226 	beq	r2,zero,8013d0 <__kernel_rem_pio2f+0x6a8>
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  8016c8:	0005883a 	mov	r2,zero
  8016cc:	003f7706 	br	8014ac <__kernel_rem_pio2f+0x784>
		fw = 0.0;
  8016d0:	000b883a 	mov	r5,zero
  8016d4:	003fc506 	br	8015ec <__kernel_rem_pio2f+0x8c4>

008016d8 <__kernel_sinf>:
#endif
{
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
  8016d8:	00a00034 	movhi	r2,32768
{
  8016dc:	defffa04 	addi	sp,sp,-24
	ix &= 0x7fffffff;			/* high word of x */
  8016e0:	10bfffc4 	addi	r2,r2,-1
{
  8016e4:	dcc00315 	stw	r19,12(sp)
  8016e8:	dc800215 	stw	r18,8(sp)
  8016ec:	dc000015 	stw	r16,0(sp)
  8016f0:	dfc00515 	stw	ra,20(sp)
  8016f4:	dd000415 	stw	r20,16(sp)
  8016f8:	dc400115 	stw	r17,4(sp)
	ix &= 0x7fffffff;			/* high word of x */
  8016fc:	1104703a 	and	r2,r2,r4
	if(ix<0x32000000)			/* |x| < 2**-27 */
  801700:	00cc8034 	movhi	r3,12800
{
  801704:	2021883a 	mov	r16,r4
  801708:	2827883a 	mov	r19,r5
  80170c:	3025883a 	mov	r18,r6
	if(ix<0x32000000)			/* |x| < 2**-27 */
  801710:	10c0020e 	bge	r2,r3,80171c <__kernel_sinf+0x44>
	   {if((int)x==0) return x;}		/* generate inexact */
  801714:	08028140 	call	802814 <__fixsfsi>
  801718:	10003126 	beq	r2,zero,8017e0 <__kernel_sinf+0x108>
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  80171c:	010bcbf4 	movhi	r4,12079
	z	=  x*x;
  801720:	8423c032 	custom	0,r17,r16,r16
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  801724:	213274c4 	addi	r4,r4,-13869
  801728:	014cb5f4 	movhi	r5,13015
  80172c:	294bcd04 	addi	r5,r5,12084
  801730:	8909c032 	custom	0,r4,r17,r4
  801734:	08023800 	call	802380 <__subsf3>
  801738:	00cd8e74 	movhi	r3,13881
  80173c:	18fbc6c4 	addi	r3,r3,-4325
  801740:	1449c032 	custom	0,r4,r2,r17
  801744:	20c9c072 	custom	1,r4,r4,r3
  801748:	014e5434 	movhi	r5,14672
  80174c:	29434044 	addi	r5,r5,3329
  801750:	2449c032 	custom	0,r4,r4,r17
  801754:	08023800 	call	802380 <__subsf3>
  801758:	00cf0274 	movhi	r3,15369
  80175c:	1445c032 	custom	0,r2,r2,r17
  801760:	18e22244 	addi	r3,r3,-30583
	v	=  z*x;
  801764:	8469c032 	custom	0,r20,r16,r17
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  801768:	10c5c072 	custom	1,r2,r2,r3
	if(iy==0) return x+v*(S1+z*r);
  80176c:	90001526 	beq	r18,zero,8017c4 <__kernel_sinf+0xec>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
  801770:	010fc034 	movhi	r4,16128
  801774:	a08bc032 	custom	0,r5,r20,r2
  801778:	9909c032 	custom	0,r4,r19,r4
  80177c:	08023800 	call	802380 <__subsf3>
  801780:	980b883a 	mov	r5,r19
  801784:	1449c032 	custom	0,r4,r2,r17
  801788:	08023800 	call	802380 <__subsf3>
  80178c:	00cf8af4 	movhi	r3,15915
  801790:	18eaaac4 	addi	r3,r3,-21845
  801794:	a0e9c032 	custom	0,r20,r20,r3
  801798:	150bc072 	custom	1,r5,r2,r20
  80179c:	8009883a 	mov	r4,r16
  8017a0:	08023800 	call	802380 <__subsf3>
}
  8017a4:	dfc00517 	ldw	ra,20(sp)
  8017a8:	dd000417 	ldw	r20,16(sp)
  8017ac:	dcc00317 	ldw	r19,12(sp)
  8017b0:	dc800217 	ldw	r18,8(sp)
  8017b4:	dc400117 	ldw	r17,4(sp)
  8017b8:	dc000017 	ldw	r16,0(sp)
  8017bc:	dec00604 	addi	sp,sp,24
  8017c0:	f800283a 	ret
	if(iy==0) return x+v*(S1+z*r);
  8017c4:	014f8af4 	movhi	r5,15915
  8017c8:	296aaac4 	addi	r5,r5,-21845
  8017cc:	8889c032 	custom	0,r4,r17,r2
  8017d0:	08023800 	call	802380 <__subsf3>
  8017d4:	1505c032 	custom	0,r2,r2,r20
  8017d8:	1405c072 	custom	1,r2,r2,r16
  8017dc:	003ff106 	br	8017a4 <__kernel_sinf+0xcc>
	   {if((int)x==0) return x;}		/* generate inexact */
  8017e0:	8005883a 	mov	r2,r16
  8017e4:	003fef06 	br	8017a4 <__kernel_sinf+0xcc>

008017e8 <floorf>:
#endif
{
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
  8017e8:	00a00034 	movhi	r2,32768
{
  8017ec:	defffb04 	addi	sp,sp,-20
	ix = (i0&0x7fffffff);
  8017f0:	10bfffc4 	addi	r2,r2,-1
{
  8017f4:	dc400115 	stw	r17,4(sp)
	ix = (i0&0x7fffffff);
  8017f8:	1122703a 	and	r17,r2,r4
{
  8017fc:	dc800215 	stw	r18,8(sp)
	j0 = (ix>>23)-0x7f;
  801800:	8824d5fa 	srli	r18,r17,23
{
  801804:	dc000015 	stw	r16,0(sp)
  801808:	dfc00415 	stw	ra,16(sp)
	j0 = (ix>>23)-0x7f;
  80180c:	94bfe044 	addi	r18,r18,-127
{
  801810:	dcc00315 	stw	r19,12(sp)
	if(j0<23) {
  801814:	908005c8 	cmpgei	r2,r18,23
{
  801818:	2021883a 	mov	r16,r4
	if(j0<23) {
  80181c:	1000251e 	bne	r2,zero,8018b4 <floorf+0xcc>
  801820:	2027883a 	mov	r19,r4
	    if(j0<0) { 	/* raise inexact if x != 0 */
  801824:	90001216 	blt	r18,zero,801870 <floorf+0x88>
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
			{ i0=0xbf800000;}
		}
	    } else {
		i = (0x007fffff)>>j0;
  801828:	00802034 	movhi	r2,128
  80182c:	10bfffc4 	addi	r2,r2,-1
  801830:	14a3d83a 	sra	r17,r2,r18
		if((i0&i)==0) return x; /* x is integral */
  801834:	8904703a 	and	r2,r17,r4
  801838:	10001626 	beq	r2,zero,801894 <floorf+0xac>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
  80183c:	011c52b4 	movhi	r4,29002
  801840:	213cb284 	addi	r4,r4,-3382
  801844:	000b883a 	mov	r5,zero
  801848:	8109c072 	custom	1,r4,r16,r4
  80184c:	0801ec80 	call	801ec8 <__gesf2>
  801850:	0080100e 	bge	zero,r2,801894 <floorf+0xac>
		    if(i0<0) i0 += (0x00800000)>>j0;
  801854:	8000030e 	bge	r16,zero,801864 <floorf+0x7c>
  801858:	00802034 	movhi	r2,128
  80185c:	1485d83a 	sra	r2,r2,r18
  801860:	1427883a 	add	r19,r2,r16
		    i0 &= (~i);
  801864:	0460303a 	nor	r16,zero,r17
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
  801868:	84c4703a 	and	r2,r16,r19
  80186c:	00000a06 	br	801898 <floorf+0xb0>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
  801870:	011c52b4 	movhi	r4,29002
  801874:	213cb284 	addi	r4,r4,-3382
  801878:	000b883a 	mov	r5,zero
  80187c:	8109c072 	custom	1,r4,r16,r4
  801880:	0801ec80 	call	801ec8 <__gesf2>
  801884:	0080030e 	bge	zero,r2,801894 <floorf+0xac>
		    if(i0>=0) {i0=0;} 
  801888:	80000e16 	blt	r16,zero,8018c4 <floorf+0xdc>
  80188c:	0005883a 	mov	r2,zero
  801890:	00000106 	br	801898 <floorf+0xb0>
		if((i0&i)==0) return x; /* x is integral */
  801894:	8005883a 	mov	r2,r16
	return x;
}
  801898:	dfc00417 	ldw	ra,16(sp)
  80189c:	dcc00317 	ldw	r19,12(sp)
  8018a0:	dc800217 	ldw	r18,8(sp)
  8018a4:	dc400117 	ldw	r17,4(sp)
  8018a8:	dc000017 	ldw	r16,0(sp)
  8018ac:	dec00504 	addi	sp,sp,20
  8018b0:	f800283a 	ret
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
  8018b4:	009fe034 	movhi	r2,32640
  8018b8:	88bff636 	bltu	r17,r2,801894 <floorf+0xac>
  8018bc:	2105c072 	custom	1,r2,r4,r4
  8018c0:	003ff506 	br	801898 <floorf+0xb0>
		    else if(!FLT_UWORD_IS_ZERO(ix))
  8018c4:	883ff326 	beq	r17,zero,801894 <floorf+0xac>
  8018c8:	00afe034 	movhi	r2,49024
  8018cc:	003ff206 	br	801898 <floorf+0xb0>

008018d0 <scalbnf>:
{
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
  8018d0:	00e00034 	movhi	r3,32768
  8018d4:	18ffffc4 	addi	r3,r3,-1
  8018d8:	1906703a 	and	r3,r3,r4
	GET_FLOAT_WORD(ix,x);
  8018dc:	2005883a 	mov	r2,r4
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
  8018e0:	18001b26 	beq	r3,zero,801950 <scalbnf+0x80>
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
  8018e4:	019fe034 	movhi	r6,32640
  8018e8:	1980172e 	bgeu	r3,r6,801948 <scalbnf+0x78>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
  8018ec:	209fe02c 	andhi	r2,r4,32640
  8018f0:	1000181e 	bne	r2,zero,801954 <scalbnf+0x84>
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
  8018f4:	00bffff4 	movhi	r2,65535
	    x *= two25;
  8018f8:	00d30034 	movhi	r3,19456
            if (n< -50000) return tiny*x; 	/*underflow*/
  8018fc:	108f2c04 	addi	r2,r2,15536
	    x *= two25;
  801900:	20c9c032 	custom	0,r4,r4,r3
            if (n< -50000) return tiny*x; 	/*underflow*/
  801904:	28802c16 	blt	r5,r2,8019b8 <scalbnf+0xe8>
	    k = ((ix&0x7f800000)>>23) - 25; 
  801908:	2007d5fa 	srai	r3,r4,23
	    GET_FLOAT_WORD(ix,x);
  80190c:	2005883a 	mov	r2,r4
	    k = ((ix&0x7f800000)>>23) - 25; 
  801910:	18c03fcc 	andi	r3,r3,255
  801914:	18fff9c4 	addi	r3,r3,-25
        }
        k = k+n; 
  801918:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  80191c:	19803fd0 	cmplti	r6,r3,255
  801920:	3000111e 	bne	r6,zero,801968 <scalbnf+0x98>
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
  801924:	009c52b4 	movhi	r2,29002
  801928:	10bcb284 	addi	r2,r2,-3382
  80192c:	2000020e 	bge	r4,zero,801938 <scalbnf+0x68>
  801930:	00bc52b4 	movhi	r2,61770
  801934:	10bcb284 	addi	r2,r2,-3382
  801938:	011c52b4 	movhi	r4,29002
  80193c:	213cb284 	addi	r4,r4,-3382
  801940:	1105c032 	custom	0,r2,r2,r4
  801944:	f800283a 	ret
	    return x+x;		/* NaN or Inf */
  801948:	2105c072 	custom	1,r2,r4,r4
  80194c:	f800283a 	ret
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
        return x*twom25;
}
  801950:	f800283a 	ret
        k = hx>>23;		/* extract exponent */
  801954:	1806d5fa 	srli	r3,r3,23
	GET_FLOAT_WORD(ix,x);
  801958:	2005883a 	mov	r2,r4
        k = k+n; 
  80195c:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  801960:	19803fd0 	cmplti	r6,r3,255
  801964:	303fef26 	beq	r6,zero,801924 <scalbnf+0x54>
        if (k > 0) 				/* normal result */
  801968:	00c00d16 	blt	zero,r3,8019a0 <scalbnf+0xd0>
        if (k < FLT_SMALLEST_EXP) {
  80196c:	19bffa88 	cmpgei	r6,r3,-22
  801970:	3000151e 	bne	r6,zero,8019c8 <scalbnf+0xf8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
  801974:	00b0d414 	movui	r2,50000
  801978:	117fea16 	blt	r2,r5,801924 <scalbnf+0x54>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
  80197c:	008368b4 	movhi	r2,3490
  801980:	10909804 	addi	r2,r2,16992
  801984:	2000020e 	bge	r4,zero,801990 <scalbnf+0xc0>
  801988:	00a368b4 	movhi	r2,36258
  80198c:	10909804 	addi	r2,r2,16992
  801990:	010368b4 	movhi	r4,3490
  801994:	21109804 	addi	r4,r4,16992
  801998:	1105c032 	custom	0,r2,r2,r4
  80199c:	f800283a 	ret
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
  8019a0:	180695fa 	slli	r3,r3,23
  8019a4:	01202034 	movhi	r4,32896
  8019a8:	213fffc4 	addi	r4,r4,-1
  8019ac:	1104703a 	and	r2,r2,r4
  8019b0:	10c4b03a 	or	r2,r2,r3
  8019b4:	f800283a 	ret
            if (n< -50000) return tiny*x; 	/*underflow*/
  8019b8:	008368b4 	movhi	r2,3490
  8019bc:	10909804 	addi	r2,r2,16992
  8019c0:	2085c032 	custom	0,r2,r4,r2
  8019c4:	f800283a 	ret
        k += 25;				/* subnormal result */
  8019c8:	18c00644 	addi	r3,r3,25
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
  8019cc:	180695fa 	slli	r3,r3,23
  8019d0:	01202034 	movhi	r4,32896
  8019d4:	213fffc4 	addi	r4,r4,-1
  8019d8:	1104703a 	and	r2,r2,r4
  8019dc:	1884b03a 	or	r2,r3,r2
        return x*twom25;
  8019e0:	010cc034 	movhi	r4,13056
  8019e4:	1105c032 	custom	0,r2,r2,r4
  8019e8:	f800283a 	ret

008019ec <__addsf3>:
  8019ec:	defffc04 	addi	sp,sp,-16
  8019f0:	2806d5fa 	srli	r3,r5,23
  8019f4:	dc000015 	stw	r16,0(sp)
  8019f8:	2020d5fa 	srli	r16,r4,23
  8019fc:	200cd7fa 	srli	r6,r4,31
  801a00:	00802034 	movhi	r2,128
  801a04:	2812d7fa 	srli	r9,r5,31
  801a08:	10bfffc4 	addi	r2,r2,-1
  801a0c:	1114703a 	and	r10,r2,r4
  801a10:	1b003fcc 	andi	r12,r3,255
  801a14:	dc400115 	stw	r17,4(sp)
  801a18:	84003fcc 	andi	r16,r16,255
  801a1c:	115a703a 	and	r13,r2,r5
  801a20:	dfc00315 	stw	ra,12(sp)
  801a24:	dc800215 	stw	r18,8(sp)
  801a28:	500e90fa 	slli	r7,r10,3
  801a2c:	681090fa 	slli	r8,r13,3
  801a30:	5007883a 	mov	r3,r10
  801a34:	3023883a 	mov	r17,r6
  801a38:	8317c83a 	sub	r11,r16,r12
  801a3c:	32403926 	beq	r6,r9,801b24 <__addsf3+0x138>
  801a40:	02c02e0e 	bge	zero,r11,801afc <__addsf3+0x110>
  801a44:	60004c26 	beq	r12,zero,801b78 <__addsf3+0x18c>
  801a48:	80803fe0 	cmpeqi	r2,r16,255
  801a4c:	1000801e 	bne	r2,zero,801c50 <__addsf3+0x264>
  801a50:	42010034 	orhi	r8,r8,1024
  801a54:	58800710 	cmplti	r2,r11,28
  801a58:	10009e1e 	bne	r2,zero,801cd4 <__addsf3+0x2e8>
  801a5c:	01000044 	movi	r4,1
  801a60:	3909c83a 	sub	r4,r7,r4
  801a64:	2081002c 	andhi	r2,r4,1024
  801a68:	10006826 	beq	r2,zero,801c0c <__addsf3+0x220>
  801a6c:	04810034 	movhi	r18,1024
  801a70:	94bfffc4 	addi	r18,r18,-1
  801a74:	24a4703a 	and	r18,r4,r18
  801a78:	9009883a 	mov	r4,r18
  801a7c:	0802aa40 	call	802aa4 <__clzsi2>
  801a80:	10bffec4 	addi	r2,r2,-5
  801a84:	9088983a 	sll	r4,r18,r2
  801a88:	1400880e 	bge	r2,r16,801cac <__addsf3+0x2c0>
  801a8c:	00ff0034 	movhi	r3,64512
  801a90:	18ffffc4 	addi	r3,r3,-1
  801a94:	80a1c83a 	sub	r16,r16,r2
  801a98:	20c8703a 	and	r4,r4,r3
  801a9c:	208001cc 	andi	r2,r4,7
  801aa0:	10000426 	beq	r2,zero,801ab4 <__addsf3+0xc8>
  801aa4:	208003cc 	andi	r2,r4,15
  801aa8:	10800120 	cmpeqi	r2,r2,4
  801aac:	1000011e 	bne	r2,zero,801ab4 <__addsf3+0xc8>
  801ab0:	21000104 	addi	r4,r4,4
  801ab4:	2081002c 	andhi	r2,r4,1024
  801ab8:	10005626 	beq	r2,zero,801c14 <__addsf3+0x228>
  801abc:	84000044 	addi	r16,r16,1
  801ac0:	80803fe0 	cmpeqi	r2,r16,255
  801ac4:	1000461e 	bne	r2,zero,801be0 <__addsf3+0x1f4>
  801ac8:	200491ba 	slli	r2,r4,6
  801acc:	1006d27a 	srli	r3,r2,9
  801ad0:	84003fcc 	andi	r16,r16,255
  801ad4:	800495fa 	slli	r2,r16,23
  801ad8:	882297fa 	slli	r17,r17,31
  801adc:	10c4b03a 	or	r2,r2,r3
  801ae0:	1444b03a 	or	r2,r2,r17
  801ae4:	dfc00317 	ldw	ra,12(sp)
  801ae8:	dc800217 	ldw	r18,8(sp)
  801aec:	dc400117 	ldw	r17,4(sp)
  801af0:	dc000017 	ldw	r16,0(sp)
  801af4:	dec00404 	addi	sp,sp,16
  801af8:	f800283a 	ret
  801afc:	58002526 	beq	r11,zero,801b94 <__addsf3+0x1a8>
  801b00:	6417c83a 	sub	r11,r12,r16
  801b04:	8000821e 	bne	r16,zero,801d10 <__addsf3+0x324>
  801b08:	38006426 	beq	r7,zero,801c9c <__addsf3+0x2b0>
  801b0c:	58bfffc4 	addi	r2,r11,-1
  801b10:	1000c226 	beq	r2,zero,801e1c <__addsf3+0x430>
  801b14:	5ac03fe0 	cmpeqi	r11,r11,255
  801b18:	58004b1e 	bne	r11,zero,801c48 <__addsf3+0x25c>
  801b1c:	1017883a 	mov	r11,r2
  801b20:	00007e06 	br	801d1c <__addsf3+0x330>
  801b24:	02c0510e 	bge	zero,r11,801c6c <__addsf3+0x280>
  801b28:	60002626 	beq	r12,zero,801bc4 <__addsf3+0x1d8>
  801b2c:	80803fe0 	cmpeqi	r2,r16,255
  801b30:	1000471e 	bne	r2,zero,801c50 <__addsf3+0x264>
  801b34:	42010034 	orhi	r8,r8,1024
  801b38:	58800710 	cmplti	r2,r11,28
  801b3c:	10007e1e 	bne	r2,zero,801d38 <__addsf3+0x34c>
  801b40:	01000044 	movi	r4,1
  801b44:	21c9883a 	add	r4,r4,r7
  801b48:	2081002c 	andhi	r2,r4,1024
  801b4c:	10002f26 	beq	r2,zero,801c0c <__addsf3+0x220>
  801b50:	84000044 	addi	r16,r16,1
  801b54:	80803fe0 	cmpeqi	r2,r16,255
  801b58:	1000211e 	bne	r2,zero,801be0 <__addsf3+0x1f4>
  801b5c:	2004d07a 	srli	r2,r4,1
  801b60:	00df8034 	movhi	r3,32256
  801b64:	18ffffc4 	addi	r3,r3,-1
  801b68:	2100004c 	andi	r4,r4,1
  801b6c:	10c4703a 	and	r2,r2,r3
  801b70:	1108b03a 	or	r4,r2,r4
  801b74:	003fc906 	br	801a9c <__addsf3+0xb0>
  801b78:	40004a26 	beq	r8,zero,801ca4 <__addsf3+0x2b8>
  801b7c:	58bfffc4 	addi	r2,r11,-1
  801b80:	10009326 	beq	r2,zero,801dd0 <__addsf3+0x3e4>
  801b84:	59003fe0 	cmpeqi	r4,r11,255
  801b88:	2000311e 	bne	r4,zero,801c50 <__addsf3+0x264>
  801b8c:	1017883a 	mov	r11,r2
  801b90:	003fb006 	br	801a54 <__addsf3+0x68>
  801b94:	81800044 	addi	r6,r16,1
  801b98:	31803f8c 	andi	r6,r6,254
  801b9c:	3000541e 	bne	r6,zero,801cf0 <__addsf3+0x304>
  801ba0:	80007e1e 	bne	r16,zero,801d9c <__addsf3+0x3b0>
  801ba4:	3800a326 	beq	r7,zero,801e34 <__addsf3+0x448>
  801ba8:	40009326 	beq	r8,zero,801df8 <__addsf3+0x40c>
  801bac:	3a09c83a 	sub	r4,r7,r8
  801bb0:	2081002c 	andhi	r2,r4,1024
  801bb4:	1000a626 	beq	r2,zero,801e50 <__addsf3+0x464>
  801bb8:	41c9c83a 	sub	r4,r8,r7
  801bbc:	4823883a 	mov	r17,r9
  801bc0:	003fb606 	br	801a9c <__addsf3+0xb0>
  801bc4:	40003726 	beq	r8,zero,801ca4 <__addsf3+0x2b8>
  801bc8:	58bfffc4 	addi	r2,r11,-1
  801bcc:	10007b26 	beq	r2,zero,801dbc <__addsf3+0x3d0>
  801bd0:	5ac03fe0 	cmpeqi	r11,r11,255
  801bd4:	58001e1e 	bne	r11,zero,801c50 <__addsf3+0x264>
  801bd8:	1017883a 	mov	r11,r2
  801bdc:	003fd606 	br	801b38 <__addsf3+0x14c>
  801be0:	043fffc4 	movi	r16,-1
  801be4:	0007883a 	mov	r3,zero
  801be8:	003fb906 	br	801ad0 <__addsf3+0xe4>
  801bec:	80800044 	addi	r2,r16,1
  801bf0:	11803f8c 	andi	r6,r2,254
  801bf4:	30005726 	beq	r6,zero,801d54 <__addsf3+0x368>
  801bf8:	10c03fe0 	cmpeqi	r3,r2,255
  801bfc:	183ff81e 	bne	r3,zero,801be0 <__addsf3+0x1f4>
  801c00:	3a09883a 	add	r4,r7,r8
  801c04:	2008d07a 	srli	r4,r4,1
  801c08:	1021883a 	mov	r16,r2
  801c0c:	208001cc 	andi	r2,r4,7
  801c10:	103fa41e 	bne	r2,zero,801aa4 <__addsf3+0xb8>
  801c14:	2014d0fa 	srli	r10,r4,3
  801c18:	80803fe0 	cmpeqi	r2,r16,255
  801c1c:	10000c1e 	bne	r2,zero,801c50 <__addsf3+0x264>
  801c20:	00802034 	movhi	r2,128
  801c24:	10bfffc4 	addi	r2,r2,-1
  801c28:	5086703a 	and	r3,r10,r2
  801c2c:	003fa806 	br	801ad0 <__addsf3+0xe4>
  801c30:	38000626 	beq	r7,zero,801c4c <__addsf3+0x260>
  801c34:	40000626 	beq	r8,zero,801c50 <__addsf3+0x264>
  801c38:	2080102c 	andhi	r2,r4,64
  801c3c:	10000426 	beq	r2,zero,801c50 <__addsf3+0x264>
  801c40:	2940102c 	andhi	r5,r5,64
  801c44:	2800021e 	bne	r5,zero,801c50 <__addsf3+0x264>
  801c48:	4823883a 	mov	r17,r9
  801c4c:	6815883a 	mov	r10,r13
  801c50:	503fe326 	beq	r10,zero,801be0 <__addsf3+0x1f4>
  801c54:	00802034 	movhi	r2,128
  801c58:	50c01034 	orhi	r3,r10,64
  801c5c:	10bfffc4 	addi	r2,r2,-1
  801c60:	1886703a 	and	r3,r3,r2
  801c64:	043fffc4 	movi	r16,-1
  801c68:	003f9906 	br	801ad0 <__addsf3+0xe4>
  801c6c:	583fdf26 	beq	r11,zero,801bec <__addsf3+0x200>
  801c70:	6417c83a 	sub	r11,r12,r16
  801c74:	80004226 	beq	r16,zero,801d80 <__addsf3+0x394>
  801c78:	60803fe0 	cmpeqi	r2,r12,255
  801c7c:	103ff31e 	bne	r2,zero,801c4c <__addsf3+0x260>
  801c80:	39c10034 	orhi	r7,r7,1024
  801c84:	58800710 	cmplti	r2,r11,28
  801c88:	10005d1e 	bne	r2,zero,801e00 <__addsf3+0x414>
  801c8c:	01000044 	movi	r4,1
  801c90:	2209883a 	add	r4,r4,r8
  801c94:	6021883a 	mov	r16,r12
  801c98:	003fab06 	br	801b48 <__addsf3+0x15c>
  801c9c:	4823883a 	mov	r17,r9
  801ca0:	6815883a 	mov	r10,r13
  801ca4:	5821883a 	mov	r16,r11
  801ca8:	003fdb06 	br	801c18 <__addsf3+0x22c>
  801cac:	1405c83a 	sub	r2,r2,r16
  801cb0:	14800044 	addi	r18,r2,1
  801cb4:	00800804 	movi	r2,32
  801cb8:	1485c83a 	sub	r2,r2,r18
  801cbc:	2084983a 	sll	r2,r4,r2
  801cc0:	2488d83a 	srl	r4,r4,r18
  801cc4:	0021883a 	mov	r16,zero
  801cc8:	1004c03a 	cmpne	r2,r2,zero
  801ccc:	1108b03a 	or	r4,r2,r4
  801cd0:	003f7206 	br	801a9c <__addsf3+0xb0>
  801cd4:	01000804 	movi	r4,32
  801cd8:	22c9c83a 	sub	r4,r4,r11
  801cdc:	4108983a 	sll	r4,r8,r4
  801ce0:	42d0d83a 	srl	r8,r8,r11
  801ce4:	2008c03a 	cmpne	r4,r4,zero
  801ce8:	2208b03a 	or	r4,r4,r8
  801cec:	003f5c06 	br	801a60 <__addsf3+0x74>
  801cf0:	3a25c83a 	sub	r18,r7,r8
  801cf4:	9081002c 	andhi	r2,r18,1024
  801cf8:	10002d1e 	bne	r2,zero,801db0 <__addsf3+0x3c4>
  801cfc:	903f5e1e 	bne	r18,zero,801a78 <__addsf3+0x8c>
  801d00:	0023883a 	mov	r17,zero
  801d04:	0021883a 	mov	r16,zero
  801d08:	0007883a 	mov	r3,zero
  801d0c:	003f7006 	br	801ad0 <__addsf3+0xe4>
  801d10:	60803fe0 	cmpeqi	r2,r12,255
  801d14:	103fcc1e 	bne	r2,zero,801c48 <__addsf3+0x25c>
  801d18:	39c10034 	orhi	r7,r7,1024
  801d1c:	58800710 	cmplti	r2,r11,28
  801d20:	10002e1e 	bne	r2,zero,801ddc <__addsf3+0x3f0>
  801d24:	01000044 	movi	r4,1
  801d28:	4109c83a 	sub	r4,r8,r4
  801d2c:	4823883a 	mov	r17,r9
  801d30:	6021883a 	mov	r16,r12
  801d34:	003f4b06 	br	801a64 <__addsf3+0x78>
  801d38:	01000804 	movi	r4,32
  801d3c:	22c9c83a 	sub	r4,r4,r11
  801d40:	4108983a 	sll	r4,r8,r4
  801d44:	42d0d83a 	srl	r8,r8,r11
  801d48:	2008c03a 	cmpne	r4,r4,zero
  801d4c:	2208b03a 	or	r4,r4,r8
  801d50:	003f7c06 	br	801b44 <__addsf3+0x158>
  801d54:	803fb61e 	bne	r16,zero,801c30 <__addsf3+0x244>
  801d58:	38003a26 	beq	r7,zero,801e44 <__addsf3+0x458>
  801d5c:	40002626 	beq	r8,zero,801df8 <__addsf3+0x40c>
  801d60:	3a09883a 	add	r4,r7,r8
  801d64:	2081002c 	andhi	r2,r4,1024
  801d68:	103fa826 	beq	r2,zero,801c0c <__addsf3+0x220>
  801d6c:	00bf0034 	movhi	r2,64512
  801d70:	10bfffc4 	addi	r2,r2,-1
  801d74:	2088703a 	and	r4,r4,r2
  801d78:	04000044 	movi	r16,1
  801d7c:	003fa306 	br	801c0c <__addsf3+0x220>
  801d80:	383fc726 	beq	r7,zero,801ca0 <__addsf3+0x2b4>
  801d84:	58bfffc4 	addi	r2,r11,-1
  801d88:	10000c26 	beq	r2,zero,801dbc <__addsf3+0x3d0>
  801d8c:	5ac03fe0 	cmpeqi	r11,r11,255
  801d90:	583fae1e 	bne	r11,zero,801c4c <__addsf3+0x260>
  801d94:	1017883a 	mov	r11,r2
  801d98:	003fba06 	br	801c84 <__addsf3+0x298>
  801d9c:	383fa51e 	bne	r7,zero,801c34 <__addsf3+0x248>
  801da0:	403fa91e 	bne	r8,zero,801c48 <__addsf3+0x25c>
  801da4:	0023883a 	mov	r17,zero
  801da8:	1007883a 	mov	r3,r2
  801dac:	003fad06 	br	801c64 <__addsf3+0x278>
  801db0:	41e5c83a 	sub	r18,r8,r7
  801db4:	4823883a 	mov	r17,r9
  801db8:	003f2f06 	br	801a78 <__addsf3+0x8c>
  801dbc:	3a09883a 	add	r4,r7,r8
  801dc0:	2081002c 	andhi	r2,r4,1024
  801dc4:	10001926 	beq	r2,zero,801e2c <__addsf3+0x440>
  801dc8:	04000084 	movi	r16,2
  801dcc:	003f6306 	br	801b5c <__addsf3+0x170>
  801dd0:	3a09c83a 	sub	r4,r7,r8
  801dd4:	04000044 	movi	r16,1
  801dd8:	003f2206 	br	801a64 <__addsf3+0x78>
  801ddc:	00800804 	movi	r2,32
  801de0:	12c5c83a 	sub	r2,r2,r11
  801de4:	3884983a 	sll	r2,r7,r2
  801de8:	3aced83a 	srl	r7,r7,r11
  801dec:	1008c03a 	cmpne	r4,r2,zero
  801df0:	21c8b03a 	or	r4,r4,r7
  801df4:	003fcc06 	br	801d28 <__addsf3+0x33c>
  801df8:	0021883a 	mov	r16,zero
  801dfc:	003f3406 	br	801ad0 <__addsf3+0xe4>
  801e00:	01000804 	movi	r4,32
  801e04:	22c9c83a 	sub	r4,r4,r11
  801e08:	3908983a 	sll	r4,r7,r4
  801e0c:	3aced83a 	srl	r7,r7,r11
  801e10:	2008c03a 	cmpne	r4,r4,zero
  801e14:	21c8b03a 	or	r4,r4,r7
  801e18:	003f9d06 	br	801c90 <__addsf3+0x2a4>
  801e1c:	41c9c83a 	sub	r4,r8,r7
  801e20:	4823883a 	mov	r17,r9
  801e24:	04000044 	movi	r16,1
  801e28:	003f0e06 	br	801a64 <__addsf3+0x78>
  801e2c:	04000044 	movi	r16,1
  801e30:	003f7606 	br	801c0c <__addsf3+0x220>
  801e34:	403fb226 	beq	r8,zero,801d00 <__addsf3+0x314>
  801e38:	4823883a 	mov	r17,r9
  801e3c:	6807883a 	mov	r3,r13
  801e40:	003f2306 	br	801ad0 <__addsf3+0xe4>
  801e44:	6807883a 	mov	r3,r13
  801e48:	0021883a 	mov	r16,zero
  801e4c:	003f2006 	br	801ad0 <__addsf3+0xe4>
  801e50:	203fab26 	beq	r4,zero,801d00 <__addsf3+0x314>
  801e54:	003f6d06 	br	801c0c <__addsf3+0x220>

00801e58 <__eqsf2>:
  801e58:	200cd5fa 	srli	r6,r4,23
  801e5c:	2806d5fa 	srli	r3,r5,23
  801e60:	00802034 	movhi	r2,128
  801e64:	31803fcc 	andi	r6,r6,255
  801e68:	10bfffc4 	addi	r2,r2,-1
  801e6c:	31c03fd8 	cmpnei	r7,r6,255
  801e70:	2010d7fa 	srli	r8,r4,31
  801e74:	2812d7fa 	srli	r9,r5,31
  801e78:	1108703a 	and	r4,r2,r4
  801e7c:	18c03fcc 	andi	r3,r3,255
  801e80:	1144703a 	and	r2,r2,r5
  801e84:	38000626 	beq	r7,zero,801ea0 <__eqsf2+0x48>
  801e88:	19403fe0 	cmpeqi	r5,r3,255
  801e8c:	2800021e 	bne	r5,zero,801e98 <__eqsf2+0x40>
  801e90:	30c0011e 	bne	r6,r3,801e98 <__eqsf2+0x40>
  801e94:	20800626 	beq	r4,r2,801eb0 <__eqsf2+0x58>
  801e98:	00800044 	movi	r2,1
  801e9c:	f800283a 	ret
  801ea0:	203ffd1e 	bne	r4,zero,801e98 <__eqsf2+0x40>
  801ea4:	18c03fd8 	cmpnei	r3,r3,255
  801ea8:	183ffb1e 	bne	r3,zero,801e98 <__eqsf2+0x40>
  801eac:	103ffa1e 	bne	r2,zero,801e98 <__eqsf2+0x40>
  801eb0:	42400326 	beq	r8,r9,801ec0 <__eqsf2+0x68>
  801eb4:	303ff81e 	bne	r6,zero,801e98 <__eqsf2+0x40>
  801eb8:	2004c03a 	cmpne	r2,r4,zero
  801ebc:	f800283a 	ret
  801ec0:	0005883a 	mov	r2,zero
  801ec4:	f800283a 	ret

00801ec8 <__gesf2>:
  801ec8:	200cd5fa 	srli	r6,r4,23
  801ecc:	280ed5fa 	srli	r7,r5,23
  801ed0:	00c02034 	movhi	r3,128
  801ed4:	31803fcc 	andi	r6,r6,255
  801ed8:	18ffffc4 	addi	r3,r3,-1
  801edc:	32003fd8 	cmpnei	r8,r6,255
  801ee0:	2012d7fa 	srli	r9,r4,31
  801ee4:	2804d7fa 	srli	r2,r5,31
  801ee8:	1908703a 	and	r4,r3,r4
  801eec:	1946703a 	and	r3,r3,r5
  801ef0:	39403fcc 	andi	r5,r7,255
  801ef4:	40000826 	beq	r8,zero,801f18 <__gesf2+0x50>
  801ef8:	29c03fd8 	cmpnei	r7,r5,255
  801efc:	38000926 	beq	r7,zero,801f24 <__gesf2+0x5c>
  801f00:	3000121e 	bne	r6,zero,801f4c <__gesf2+0x84>
  801f04:	28000e1e 	bne	r5,zero,801f40 <__gesf2+0x78>
  801f08:	18000d1e 	bne	r3,zero,801f40 <__gesf2+0x78>
  801f0c:	2000081e 	bne	r4,zero,801f30 <__gesf2+0x68>
  801f10:	0005883a 	mov	r2,zero
  801f14:	f800283a 	ret
  801f18:	2000171e 	bne	r4,zero,801f78 <__gesf2+0xb0>
  801f1c:	29c03fe0 	cmpeqi	r7,r5,255
  801f20:	38000a26 	beq	r7,zero,801f4c <__gesf2+0x84>
  801f24:	1800141e 	bne	r3,zero,801f78 <__gesf2+0xb0>
  801f28:	30000526 	beq	r6,zero,801f40 <__gesf2+0x78>
  801f2c:	48800a26 	beq	r9,r2,801f58 <__gesf2+0x90>
  801f30:	00800044 	movi	r2,1
  801f34:	48000426 	beq	r9,zero,801f48 <__gesf2+0x80>
  801f38:	00bfffc4 	movi	r2,-1
  801f3c:	f800283a 	ret
  801f40:	203ffa1e 	bne	r4,zero,801f2c <__gesf2+0x64>
  801f44:	103ffc26 	beq	r2,zero,801f38 <__gesf2+0x70>
  801f48:	f800283a 	ret
  801f4c:	283ff71e 	bne	r5,zero,801f2c <__gesf2+0x64>
  801f50:	183ff61e 	bne	r3,zero,801f2c <__gesf2+0x64>
  801f54:	003ff606 	br	801f30 <__gesf2+0x68>
  801f58:	29800416 	blt	r5,r6,801f6c <__gesf2+0xa4>
  801f5c:	317ff916 	blt	r6,r5,801f44 <__gesf2+0x7c>
  801f60:	19000236 	bltu	r3,r4,801f6c <__gesf2+0xa4>
  801f64:	20ffea2e 	bgeu	r4,r3,801f10 <__gesf2+0x48>
  801f68:	003ff606 	br	801f44 <__gesf2+0x7c>
  801f6c:	103ff21e 	bne	r2,zero,801f38 <__gesf2+0x70>
  801f70:	00800044 	movi	r2,1
  801f74:	f800283a 	ret
  801f78:	00bfff84 	movi	r2,-2
  801f7c:	f800283a 	ret

00801f80 <__mulsf3>:
  801f80:	defff504 	addi	sp,sp,-44
  801f84:	dc400215 	stw	r17,8(sp)
  801f88:	2022d5fa 	srli	r17,r4,23
  801f8c:	dc000115 	stw	r16,4(sp)
  801f90:	04002034 	movhi	r16,128
  801f94:	dd800715 	stw	r22,28(sp)
  801f98:	843fffc4 	addi	r16,r16,-1
  801f9c:	dfc00a15 	stw	ra,40(sp)
  801fa0:	df000915 	stw	fp,36(sp)
  801fa4:	ddc00815 	stw	r23,32(sp)
  801fa8:	dd400615 	stw	r21,24(sp)
  801fac:	dd000515 	stw	r20,20(sp)
  801fb0:	dcc00415 	stw	r19,16(sp)
  801fb4:	dc800315 	stw	r18,12(sp)
  801fb8:	8c403fcc 	andi	r17,r17,255
  801fbc:	202cd7fa 	srli	r22,r4,31
  801fc0:	8120703a 	and	r16,r16,r4
  801fc4:	88008d26 	beq	r17,zero,8021fc <__mulsf3+0x27c>
  801fc8:	88803fe0 	cmpeqi	r2,r17,255
  801fcc:	1000901e 	bne	r2,zero,802210 <__mulsf3+0x290>
  801fd0:	802090fa 	slli	r16,r16,3
  801fd4:	8c7fe044 	addi	r17,r17,-127
  801fd8:	0025883a 	mov	r18,zero
  801fdc:	84010034 	orhi	r16,r16,1024
  801fe0:	0029883a 	mov	r20,zero
  801fe4:	2804d5fa 	srli	r2,r5,23
  801fe8:	01002034 	movhi	r4,128
  801fec:	213fffc4 	addi	r4,r4,-1
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	282ed7fa 	srli	r23,r5,31
  801ff8:	2166703a 	and	r19,r4,r5
  801ffc:	10007b26 	beq	r2,zero,8021ec <__mulsf3+0x26c>
  802000:	10c03fe0 	cmpeqi	r3,r2,255
  802004:	1800871e 	bne	r3,zero,802224 <__mulsf3+0x2a4>
  802008:	980890fa 	slli	r4,r19,3
  80200c:	10bfe044 	addi	r2,r2,-127
  802010:	88a3883a 	add	r17,r17,r2
  802014:	24c10034 	orhi	r19,r4,1024
  802018:	0007883a 	mov	r3,zero
  80201c:	90800428 	cmpgeui	r2,r18,16
  802020:	b5eaf03a 	xor	r21,r22,r23
  802024:	8f000044 	addi	fp,r17,1
  802028:	1000341e 	bne	r2,zero,8020fc <__mulsf3+0x17c>
  80202c:	902490ba 	slli	r18,r18,2
  802030:	00802034 	movhi	r2,128
  802034:	9085883a 	add	r2,r18,r2
  802038:	10881017 	ldw	r2,8256(r2)
  80203c:	1000683a 	jmp	r2
  802040:	008020fc 	xorhi	r2,zero,131
  802044:	00802084 	movi	r2,130
  802048:	00802084 	movi	r2,130
  80204c:	00802080 	call	80208 <__alt_mem_sdram-0x77fdf8>
  802050:	0080208c 	andi	r2,zero,130
  802054:	0080208c 	andi	r2,zero,130
  802058:	008022b0 	cmpltui	r2,zero,138
  80205c:	00802080 	call	80208 <__alt_mem_sdram-0x77fdf8>
  802060:	0080208c 	andi	r2,zero,130
  802064:	008022b0 	cmpltui	r2,zero,138
  802068:	0080208c 	andi	r2,zero,130
  80206c:	00802080 	call	80208 <__alt_mem_sdram-0x77fdf8>
  802070:	00802238 	rdprs	r2,zero,136
  802074:	00802238 	rdprs	r2,zero,136
  802078:	00802238 	rdprs	r2,zero,136
  80207c:	00802314 	movui	r2,140
  802080:	b82b883a 	mov	r21,r23
  802084:	9821883a 	mov	r16,r19
  802088:	1829883a 	mov	r20,r3
  80208c:	a08000a0 	cmpeqi	r2,r20,2
  802090:	1000171e 	bne	r2,zero,8020f0 <__mulsf3+0x170>
  802094:	a08000e0 	cmpeqi	r2,r20,3
  802098:	1000b41e 	bne	r2,zero,80236c <__mulsf3+0x3ec>
  80209c:	a0800060 	cmpeqi	r2,r20,1
  8020a0:	10003f26 	beq	r2,zero,8021a0 <__mulsf3+0x220>
  8020a4:	0007883a 	mov	r3,zero
  8020a8:	0009883a 	mov	r4,zero
  8020ac:	1c003fcc 	andi	r16,r3,255
  8020b0:	802095fa 	slli	r16,r16,23
  8020b4:	a80497fa 	slli	r2,r21,31
  8020b8:	8120b03a 	or	r16,r16,r4
  8020bc:	8084b03a 	or	r2,r16,r2
  8020c0:	dfc00a17 	ldw	ra,40(sp)
  8020c4:	df000917 	ldw	fp,36(sp)
  8020c8:	ddc00817 	ldw	r23,32(sp)
  8020cc:	dd800717 	ldw	r22,28(sp)
  8020d0:	dd400617 	ldw	r21,24(sp)
  8020d4:	dd000517 	ldw	r20,20(sp)
  8020d8:	dcc00417 	ldw	r19,16(sp)
  8020dc:	dc800317 	ldw	r18,12(sp)
  8020e0:	dc400217 	ldw	r17,8(sp)
  8020e4:	dc000117 	ldw	r16,4(sp)
  8020e8:	dec00b04 	addi	sp,sp,44
  8020ec:	f800283a 	ret
  8020f0:	00ffffc4 	movi	r3,-1
  8020f4:	0009883a 	mov	r4,zero
  8020f8:	003fec06 	br	8020ac <__mulsf3+0x12c>
  8020fc:	8028d43a 	srli	r20,r16,16
  802100:	9cbfffcc 	andi	r18,r19,65535
  802104:	843fffcc 	andi	r16,r16,65535
  802108:	900b883a 	mov	r5,r18
  80210c:	8009883a 	mov	r4,r16
  802110:	0802af80 	call	802af8 <__mulsi3>
  802114:	9826d43a 	srli	r19,r19,16
  802118:	900b883a 	mov	r5,r18
  80211c:	a009883a 	mov	r4,r20
  802120:	1025883a 	mov	r18,r2
  802124:	0802af80 	call	802af8 <__mulsi3>
  802128:	980b883a 	mov	r5,r19
  80212c:	a009883a 	mov	r4,r20
  802130:	1029883a 	mov	r20,r2
  802134:	0802af80 	call	802af8 <__mulsi3>
  802138:	9809883a 	mov	r4,r19
  80213c:	800b883a 	mov	r5,r16
  802140:	1027883a 	mov	r19,r2
  802144:	0802af80 	call	802af8 <__mulsi3>
  802148:	9006d43a 	srli	r3,r18,16
  80214c:	1505883a 	add	r2,r2,r20
  802150:	1887883a 	add	r3,r3,r2
  802154:	1d00022e 	bgeu	r3,r20,802160 <__mulsf3+0x1e0>
  802158:	00800074 	movhi	r2,1
  80215c:	98a7883a 	add	r19,r19,r2
  802160:	1808943a 	slli	r4,r3,16
  802164:	1820d43a 	srli	r16,r3,16
  802168:	94bfffcc 	andi	r18,r18,65535
  80216c:	2489883a 	add	r4,r4,r18
  802170:	200a91ba 	slli	r5,r4,6
  802174:	84e1883a 	add	r16,r16,r19
  802178:	802091ba 	slli	r16,r16,6
  80217c:	2008d6ba 	srli	r4,r4,26
  802180:	2804c03a 	cmpne	r2,r5,zero
  802184:	80c2002c 	andhi	r3,r16,2048
  802188:	1108b03a 	or	r4,r2,r4
  80218c:	8120b03a 	or	r16,r16,r4
  802190:	18007026 	beq	r3,zero,802354 <__mulsf3+0x3d4>
  802194:	8004d07a 	srli	r2,r16,1
  802198:	8400004c 	andi	r16,r16,1
  80219c:	1420b03a 	or	r16,r2,r16
  8021a0:	e0c01fc4 	addi	r3,fp,127
  8021a4:	00c0470e 	bge	zero,r3,8022c4 <__mulsf3+0x344>
  8021a8:	808001cc 	andi	r2,r16,7
  8021ac:	10000426 	beq	r2,zero,8021c0 <__mulsf3+0x240>
  8021b0:	808003cc 	andi	r2,r16,15
  8021b4:	10800120 	cmpeqi	r2,r2,4
  8021b8:	1000011e 	bne	r2,zero,8021c0 <__mulsf3+0x240>
  8021bc:	84000104 	addi	r16,r16,4
  8021c0:	8082002c 	andhi	r2,r16,2048
  8021c4:	10000426 	beq	r2,zero,8021d8 <__mulsf3+0x258>
  8021c8:	00be0034 	movhi	r2,63488
  8021cc:	10bfffc4 	addi	r2,r2,-1
  8021d0:	80a0703a 	and	r16,r16,r2
  8021d4:	e0c02004 	addi	r3,fp,128
  8021d8:	18803fc8 	cmpgei	r2,r3,255
  8021dc:	103fc41e 	bne	r2,zero,8020f0 <__mulsf3+0x170>
  8021e0:	802091ba 	slli	r16,r16,6
  8021e4:	8008d27a 	srli	r4,r16,9
  8021e8:	003fb006 	br	8020ac <__mulsf3+0x12c>
  8021ec:	9800281e 	bne	r19,zero,802290 <__mulsf3+0x310>
  8021f0:	94800054 	ori	r18,r18,1
  8021f4:	00c00044 	movi	r3,1
  8021f8:	003f8806 	br	80201c <__mulsf3+0x9c>
  8021fc:	8000191e 	bne	r16,zero,802264 <__mulsf3+0x2e4>
  802200:	04800104 	movi	r18,4
  802204:	0023883a 	mov	r17,zero
  802208:	05000044 	movi	r20,1
  80220c:	003f7506 	br	801fe4 <__mulsf3+0x64>
  802210:	8000101e 	bne	r16,zero,802254 <__mulsf3+0x2d4>
  802214:	04800204 	movi	r18,8
  802218:	04403fc4 	movi	r17,255
  80221c:	05000084 	movi	r20,2
  802220:	003f7006 	br	801fe4 <__mulsf3+0x64>
  802224:	8c403fc4 	addi	r17,r17,255
  802228:	9800071e 	bne	r19,zero,802248 <__mulsf3+0x2c8>
  80222c:	94800094 	ori	r18,r18,2
  802230:	00c00084 	movi	r3,2
  802234:	003f7906 	br	80201c <__mulsf3+0x9c>
  802238:	a08000a0 	cmpeqi	r2,r20,2
  80223c:	b02b883a 	mov	r21,r22
  802240:	103f9426 	beq	r2,zero,802094 <__mulsf3+0x114>
  802244:	003faa06 	br	8020f0 <__mulsf3+0x170>
  802248:	948000d4 	ori	r18,r18,3
  80224c:	00c000c4 	movi	r3,3
  802250:	003f7206 	br	80201c <__mulsf3+0x9c>
  802254:	04800304 	movi	r18,12
  802258:	04403fc4 	movi	r17,255
  80225c:	050000c4 	movi	r20,3
  802260:	003f6006 	br	801fe4 <__mulsf3+0x64>
  802264:	8009883a 	mov	r4,r16
  802268:	d9400015 	stw	r5,0(sp)
  80226c:	0802aa40 	call	802aa4 <__clzsi2>
  802270:	10fffec4 	addi	r3,r2,-5
  802274:	047fe284 	movi	r17,-118
  802278:	80e0983a 	sll	r16,r16,r3
  80227c:	d9400017 	ldw	r5,0(sp)
  802280:	88a3c83a 	sub	r17,r17,r2
  802284:	0025883a 	mov	r18,zero
  802288:	0029883a 	mov	r20,zero
  80228c:	003f5506 	br	801fe4 <__mulsf3+0x64>
  802290:	9809883a 	mov	r4,r19
  802294:	0802aa40 	call	802aa4 <__clzsi2>
  802298:	10fffec4 	addi	r3,r2,-5
  80229c:	88a3c83a 	sub	r17,r17,r2
  8022a0:	98e6983a 	sll	r19,r19,r3
  8022a4:	8c7fe284 	addi	r17,r17,-118
  8022a8:	0007883a 	mov	r3,zero
  8022ac:	003f5b06 	br	80201c <__mulsf3+0x9c>
  8022b0:	01002034 	movhi	r4,128
  8022b4:	002b883a 	mov	r21,zero
  8022b8:	213fffc4 	addi	r4,r4,-1
  8022bc:	00ffffc4 	movi	r3,-1
  8022c0:	003f7a06 	br	8020ac <__mulsf3+0x12c>
  8022c4:	00800044 	movi	r2,1
  8022c8:	10c7c83a 	sub	r3,r2,r3
  8022cc:	18800708 	cmpgei	r2,r3,28
  8022d0:	103f741e 	bne	r2,zero,8020a4 <__mulsf3+0x124>
  8022d4:	e1002784 	addi	r4,fp,158
  8022d8:	8108983a 	sll	r4,r16,r4
  8022dc:	80e0d83a 	srl	r16,r16,r3
  8022e0:	2008c03a 	cmpne	r4,r4,zero
  8022e4:	8120b03a 	or	r16,r16,r4
  8022e8:	808001cc 	andi	r2,r16,7
  8022ec:	10000426 	beq	r2,zero,802300 <__mulsf3+0x380>
  8022f0:	808003cc 	andi	r2,r16,15
  8022f4:	10800120 	cmpeqi	r2,r2,4
  8022f8:	1000011e 	bne	r2,zero,802300 <__mulsf3+0x380>
  8022fc:	84000104 	addi	r16,r16,4
  802300:	8081002c 	andhi	r2,r16,1024
  802304:	10001526 	beq	r2,zero,80235c <__mulsf3+0x3dc>
  802308:	00c00044 	movi	r3,1
  80230c:	0009883a 	mov	r4,zero
  802310:	003f6606 	br	8020ac <__mulsf3+0x12c>
  802314:	8080102c 	andhi	r2,r16,64
  802318:	10000826 	beq	r2,zero,80233c <__mulsf3+0x3bc>
  80231c:	9880102c 	andhi	r2,r19,64
  802320:	1000061e 	bne	r2,zero,80233c <__mulsf3+0x3bc>
  802324:	00802034 	movhi	r2,128
  802328:	99001034 	orhi	r4,r19,64
  80232c:	10bfffc4 	addi	r2,r2,-1
  802330:	2088703a 	and	r4,r4,r2
  802334:	b82b883a 	mov	r21,r23
  802338:	003fe006 	br	8022bc <__mulsf3+0x33c>
  80233c:	00802034 	movhi	r2,128
  802340:	81001034 	orhi	r4,r16,64
  802344:	10bfffc4 	addi	r2,r2,-1
  802348:	2088703a 	and	r4,r4,r2
  80234c:	b02b883a 	mov	r21,r22
  802350:	003fda06 	br	8022bc <__mulsf3+0x33c>
  802354:	8839883a 	mov	fp,r17
  802358:	003f9106 	br	8021a0 <__mulsf3+0x220>
  80235c:	802091ba 	slli	r16,r16,6
  802360:	0007883a 	mov	r3,zero
  802364:	8008d27a 	srli	r4,r16,9
  802368:	003f5006 	br	8020ac <__mulsf3+0x12c>
  80236c:	00802034 	movhi	r2,128
  802370:	81001034 	orhi	r4,r16,64
  802374:	10bfffc4 	addi	r2,r2,-1
  802378:	2088703a 	and	r4,r4,r2
  80237c:	003fcf06 	br	8022bc <__mulsf3+0x33c>

00802380 <__subsf3>:
  802380:	2804d5fa 	srli	r2,r5,23
  802384:	2006d5fa 	srli	r3,r4,23
  802388:	200cd7fa 	srli	r6,r4,31
  80238c:	01c02034 	movhi	r7,128
  802390:	defffc04 	addi	sp,sp,-16
  802394:	39ffffc4 	addi	r7,r7,-1
  802398:	12803fcc 	andi	r10,r2,255
  80239c:	3908703a 	and	r4,r7,r4
  8023a0:	dc800215 	stw	r18,8(sp)
  8023a4:	394e703a 	and	r7,r7,r5
  8023a8:	dc400115 	stw	r17,4(sp)
  8023ac:	1c803fcc 	andi	r18,r3,255
  8023b0:	dfc00315 	stw	ra,12(sp)
  8023b4:	dc000015 	stw	r16,0(sp)
  8023b8:	50803fd8 	cmpnei	r2,r10,255
  8023bc:	3023883a 	mov	r17,r6
  8023c0:	201090fa 	slli	r8,r4,3
  8023c4:	280ad7fa 	srli	r5,r5,31
  8023c8:	381290fa 	slli	r9,r7,3
  8023cc:	2019883a 	mov	r12,r4
  8023d0:	31803fcc 	andi	r6,r6,255
  8023d4:	9297c83a 	sub	r11,r18,r10
  8023d8:	10003f26 	beq	r2,zero,8024d8 <__subsf3+0x158>
  8023dc:	2880005c 	xori	r2,r5,1
  8023e0:	30804526 	beq	r6,r2,8024f8 <__subsf3+0x178>
  8023e4:	02c0310e 	bge	zero,r11,8024ac <__subsf3+0x12c>
  8023e8:	50003f1e 	bne	r10,zero,8024e8 <__subsf3+0x168>
  8023ec:	48009526 	beq	r9,zero,802644 <__subsf3+0x2c4>
  8023f0:	58bfffc4 	addi	r2,r11,-1
  8023f4:	1000de26 	beq	r2,zero,802770 <__subsf3+0x3f0>
  8023f8:	59003fe0 	cmpeqi	r4,r11,255
  8023fc:	20007d1e 	bne	r4,zero,8025f4 <__subsf3+0x274>
  802400:	1017883a 	mov	r11,r2
  802404:	58800710 	cmplti	r2,r11,28
  802408:	10009a1e 	bne	r2,zero,802674 <__subsf3+0x2f4>
  80240c:	01000044 	movi	r4,1
  802410:	4109c83a 	sub	r4,r8,r4
  802414:	2081002c 	andhi	r2,r4,1024
  802418:	10006a26 	beq	r2,zero,8025c4 <__subsf3+0x244>
  80241c:	04010034 	movhi	r16,1024
  802420:	843fffc4 	addi	r16,r16,-1
  802424:	2420703a 	and	r16,r4,r16
  802428:	8009883a 	mov	r4,r16
  80242c:	0802aa40 	call	802aa4 <__clzsi2>
  802430:	10bffec4 	addi	r2,r2,-5
  802434:	8088983a 	sll	r4,r16,r2
  802438:	1480840e 	bge	r2,r18,80264c <__subsf3+0x2cc>
  80243c:	00ff0034 	movhi	r3,64512
  802440:	18ffffc4 	addi	r3,r3,-1
  802444:	90a5c83a 	sub	r18,r18,r2
  802448:	20c8703a 	and	r4,r4,r3
  80244c:	208001cc 	andi	r2,r4,7
  802450:	10000426 	beq	r2,zero,802464 <__subsf3+0xe4>
  802454:	208003cc 	andi	r2,r4,15
  802458:	10800120 	cmpeqi	r2,r2,4
  80245c:	1000011e 	bne	r2,zero,802464 <__subsf3+0xe4>
  802460:	21000104 	addi	r4,r4,4
  802464:	2081002c 	andhi	r2,r4,1024
  802468:	10005826 	beq	r2,zero,8025cc <__subsf3+0x24c>
  80246c:	90c00044 	addi	r3,r18,1
  802470:	18803fe0 	cmpeqi	r2,r3,255
  802474:	1000481e 	bne	r2,zero,802598 <__subsf3+0x218>
  802478:	200891ba 	slli	r4,r4,6
  80247c:	2008d27a 	srli	r4,r4,9
  802480:	18803fcc 	andi	r2,r3,255
  802484:	100495fa 	slli	r2,r2,23
  802488:	880697fa 	slli	r3,r17,31
  80248c:	1108b03a 	or	r4,r2,r4
  802490:	20c4b03a 	or	r2,r4,r3
  802494:	dfc00317 	ldw	ra,12(sp)
  802498:	dc800217 	ldw	r18,8(sp)
  80249c:	dc400117 	ldw	r17,4(sp)
  8024a0:	dc000017 	ldw	r16,0(sp)
  8024a4:	dec00404 	addi	sp,sp,16
  8024a8:	f800283a 	ret
  8024ac:	58002726 	beq	r11,zero,80254c <__subsf3+0x1cc>
  8024b0:	5497c83a 	sub	r11,r10,r18
  8024b4:	1023883a 	mov	r17,r2
  8024b8:	9000751e 	bne	r18,zero,802690 <__subsf3+0x310>
  8024bc:	40006026 	beq	r8,zero,802640 <__subsf3+0x2c0>
  8024c0:	58bfffc4 	addi	r2,r11,-1
  8024c4:	1000cb26 	beq	r2,zero,8027f4 <__subsf3+0x474>
  8024c8:	5ac03fe0 	cmpeqi	r11,r11,255
  8024cc:	5800481e 	bne	r11,zero,8025f0 <__subsf3+0x270>
  8024d0:	1017883a 	mov	r11,r2
  8024d4:	00007106 	br	80269c <__subsf3+0x31c>
  8024d8:	483fc026 	beq	r9,zero,8023dc <__subsf3+0x5c>
  8024dc:	28803fcc 	andi	r2,r5,255
  8024e0:	31404b26 	beq	r6,r5,802610 <__subsf3+0x290>
  8024e4:	02fff10e 	bge	zero,r11,8024ac <__subsf3+0x12c>
  8024e8:	90803fe0 	cmpeqi	r2,r18,255
  8024ec:	1000411e 	bne	r2,zero,8025f4 <__subsf3+0x274>
  8024f0:	4a410034 	orhi	r9,r9,1024
  8024f4:	003fc306 	br	802404 <__subsf3+0x84>
  8024f8:	02c0450e 	bge	zero,r11,802610 <__subsf3+0x290>
  8024fc:	50001f26 	beq	r10,zero,80257c <__subsf3+0x1fc>
  802500:	90803fe0 	cmpeqi	r2,r18,255
  802504:	10003b1e 	bne	r2,zero,8025f4 <__subsf3+0x274>
  802508:	4a410034 	orhi	r9,r9,1024
  80250c:	58800710 	cmplti	r2,r11,28
  802510:	1000701e 	bne	r2,zero,8026d4 <__subsf3+0x354>
  802514:	01000044 	movi	r4,1
  802518:	2209883a 	add	r4,r4,r8
  80251c:	2081002c 	andhi	r2,r4,1024
  802520:	10002826 	beq	r2,zero,8025c4 <__subsf3+0x244>
  802524:	94800044 	addi	r18,r18,1
  802528:	90803fe0 	cmpeqi	r2,r18,255
  80252c:	10001a1e 	bne	r2,zero,802598 <__subsf3+0x218>
  802530:	2004d07a 	srli	r2,r4,1
  802534:	00df8034 	movhi	r3,32256
  802538:	18ffffc4 	addi	r3,r3,-1
  80253c:	2100004c 	andi	r4,r4,1
  802540:	10c4703a 	and	r2,r2,r3
  802544:	1108b03a 	or	r4,r2,r4
  802548:	003fc006 	br	80244c <__subsf3+0xcc>
  80254c:	90c00044 	addi	r3,r18,1
  802550:	18c03f8c 	andi	r3,r3,254
  802554:	1800571e 	bne	r3,zero,8026b4 <__subsf3+0x334>
  802558:	90007a1e 	bne	r18,zero,802744 <__subsf3+0x3c4>
  80255c:	4000a126 	beq	r8,zero,8027e4 <__subsf3+0x464>
  802560:	48008d26 	beq	r9,zero,802798 <__subsf3+0x418>
  802564:	4249c83a 	sub	r4,r8,r9
  802568:	20c1002c 	andhi	r3,r4,1024
  80256c:	1800a726 	beq	r3,zero,80280c <__subsf3+0x48c>
  802570:	4a09c83a 	sub	r4,r9,r8
  802574:	1023883a 	mov	r17,r2
  802578:	003fb406 	br	80244c <__subsf3+0xcc>
  80257c:	48003126 	beq	r9,zero,802644 <__subsf3+0x2c4>
  802580:	58bfffc4 	addi	r2,r11,-1
  802584:	10007526 	beq	r2,zero,80275c <__subsf3+0x3dc>
  802588:	5ac03fe0 	cmpeqi	r11,r11,255
  80258c:	5800191e 	bne	r11,zero,8025f4 <__subsf3+0x274>
  802590:	1017883a 	mov	r11,r2
  802594:	003fdd06 	br	80250c <__subsf3+0x18c>
  802598:	00ffffc4 	movi	r3,-1
  80259c:	0009883a 	mov	r4,zero
  8025a0:	003fb706 	br	802480 <__subsf3+0x100>
  8025a4:	90c00044 	addi	r3,r18,1
  8025a8:	19403f8c 	andi	r5,r3,254
  8025ac:	28005026 	beq	r5,zero,8026f0 <__subsf3+0x370>
  8025b0:	18803fe0 	cmpeqi	r2,r3,255
  8025b4:	103ff81e 	bne	r2,zero,802598 <__subsf3+0x218>
  8025b8:	4249883a 	add	r4,r8,r9
  8025bc:	2008d07a 	srli	r4,r4,1
  8025c0:	1825883a 	mov	r18,r3
  8025c4:	208001cc 	andi	r2,r4,7
  8025c8:	103fa21e 	bne	r2,zero,802454 <__subsf3+0xd4>
  8025cc:	2018d0fa 	srli	r12,r4,3
  8025d0:	90803fe0 	cmpeqi	r2,r18,255
  8025d4:	1000071e 	bne	r2,zero,8025f4 <__subsf3+0x274>
  8025d8:	01002034 	movhi	r4,128
  8025dc:	213fffc4 	addi	r4,r4,-1
  8025e0:	6108703a 	and	r4,r12,r4
  8025e4:	9007883a 	mov	r3,r18
  8025e8:	003fa506 	br	802480 <__subsf3+0x100>
  8025ec:	40006c1e 	bne	r8,zero,8027a0 <__subsf3+0x420>
  8025f0:	3819883a 	mov	r12,r7
  8025f4:	603fe826 	beq	r12,zero,802598 <__subsf3+0x218>
  8025f8:	00802034 	movhi	r2,128
  8025fc:	61001034 	orhi	r4,r12,64
  802600:	10bfffc4 	addi	r2,r2,-1
  802604:	2088703a 	and	r4,r4,r2
  802608:	00ffffc4 	movi	r3,-1
  80260c:	003f9c06 	br	802480 <__subsf3+0x100>
  802610:	583fe426 	beq	r11,zero,8025a4 <__subsf3+0x224>
  802614:	5497c83a 	sub	r11,r10,r18
  802618:	90004026 	beq	r18,zero,80271c <__subsf3+0x39c>
  80261c:	50803fe0 	cmpeqi	r2,r10,255
  802620:	103ff31e 	bne	r2,zero,8025f0 <__subsf3+0x270>
  802624:	42010034 	orhi	r8,r8,1024
  802628:	58800710 	cmplti	r2,r11,28
  80262c:	1000641e 	bne	r2,zero,8027c0 <__subsf3+0x440>
  802630:	01000044 	movi	r4,1
  802634:	2249883a 	add	r4,r4,r9
  802638:	5025883a 	mov	r18,r10
  80263c:	003fb706 	br	80251c <__subsf3+0x19c>
  802640:	3819883a 	mov	r12,r7
  802644:	5825883a 	mov	r18,r11
  802648:	003fe106 	br	8025d0 <__subsf3+0x250>
  80264c:	1485c83a 	sub	r2,r2,r18
  802650:	14000044 	addi	r16,r2,1
  802654:	00800804 	movi	r2,32
  802658:	1405c83a 	sub	r2,r2,r16
  80265c:	2084983a 	sll	r2,r4,r2
  802660:	2408d83a 	srl	r4,r4,r16
  802664:	0025883a 	mov	r18,zero
  802668:	1004c03a 	cmpne	r2,r2,zero
  80266c:	1108b03a 	or	r4,r2,r4
  802670:	003f7606 	br	80244c <__subsf3+0xcc>
  802674:	01000804 	movi	r4,32
  802678:	22c9c83a 	sub	r4,r4,r11
  80267c:	4908983a 	sll	r4,r9,r4
  802680:	4ad2d83a 	srl	r9,r9,r11
  802684:	2008c03a 	cmpne	r4,r4,zero
  802688:	2248b03a 	or	r4,r4,r9
  80268c:	003f6006 	br	802410 <__subsf3+0x90>
  802690:	50803fe0 	cmpeqi	r2,r10,255
  802694:	103fd61e 	bne	r2,zero,8025f0 <__subsf3+0x270>
  802698:	42010034 	orhi	r8,r8,1024
  80269c:	58800710 	cmplti	r2,r11,28
  8026a0:	1000361e 	bne	r2,zero,80277c <__subsf3+0x3fc>
  8026a4:	01000044 	movi	r4,1
  8026a8:	4909c83a 	sub	r4,r9,r4
  8026ac:	5025883a 	mov	r18,r10
  8026b0:	003f5806 	br	802414 <__subsf3+0x94>
  8026b4:	4261c83a 	sub	r16,r8,r9
  8026b8:	80c1002c 	andhi	r3,r16,1024
  8026bc:	18001e1e 	bne	r3,zero,802738 <__subsf3+0x3b8>
  8026c0:	803f591e 	bne	r16,zero,802428 <__subsf3+0xa8>
  8026c4:	0023883a 	mov	r17,zero
  8026c8:	0007883a 	mov	r3,zero
  8026cc:	0009883a 	mov	r4,zero
  8026d0:	003f6b06 	br	802480 <__subsf3+0x100>
  8026d4:	01000804 	movi	r4,32
  8026d8:	22c9c83a 	sub	r4,r4,r11
  8026dc:	4908983a 	sll	r4,r9,r4
  8026e0:	4ad2d83a 	srl	r9,r9,r11
  8026e4:	2008c03a 	cmpne	r4,r4,zero
  8026e8:	2248b03a 	or	r4,r4,r9
  8026ec:	003f8a06 	br	802518 <__subsf3+0x198>
  8026f0:	903fbe1e 	bne	r18,zero,8025ec <__subsf3+0x26c>
  8026f4:	40004226 	beq	r8,zero,802800 <__subsf3+0x480>
  8026f8:	48002726 	beq	r9,zero,802798 <__subsf3+0x418>
  8026fc:	4249883a 	add	r4,r8,r9
  802700:	2081002c 	andhi	r2,r4,1024
  802704:	103faf26 	beq	r2,zero,8025c4 <__subsf3+0x244>
  802708:	00bf0034 	movhi	r2,64512
  80270c:	10bfffc4 	addi	r2,r2,-1
  802710:	2088703a 	and	r4,r4,r2
  802714:	04800044 	movi	r18,1
  802718:	003faa06 	br	8025c4 <__subsf3+0x244>
  80271c:	403fc826 	beq	r8,zero,802640 <__subsf3+0x2c0>
  802720:	58bfffc4 	addi	r2,r11,-1
  802724:	10000d26 	beq	r2,zero,80275c <__subsf3+0x3dc>
  802728:	5ac03fe0 	cmpeqi	r11,r11,255
  80272c:	583fb01e 	bne	r11,zero,8025f0 <__subsf3+0x270>
  802730:	1017883a 	mov	r11,r2
  802734:	003fbc06 	br	802628 <__subsf3+0x2a8>
  802738:	4a21c83a 	sub	r16,r9,r8
  80273c:	1023883a 	mov	r17,r2
  802740:	003f3906 	br	802428 <__subsf3+0xa8>
  802744:	4000161e 	bne	r8,zero,8027a0 <__subsf3+0x420>
  802748:	48001a1e 	bne	r9,zero,8027b4 <__subsf3+0x434>
  80274c:	01002034 	movhi	r4,128
  802750:	0023883a 	mov	r17,zero
  802754:	213fffc4 	addi	r4,r4,-1
  802758:	003fab06 	br	802608 <__subsf3+0x288>
  80275c:	4249883a 	add	r4,r8,r9
  802760:	2081002c 	andhi	r2,r4,1024
  802764:	10001d26 	beq	r2,zero,8027dc <__subsf3+0x45c>
  802768:	04800084 	movi	r18,2
  80276c:	003f7006 	br	802530 <__subsf3+0x1b0>
  802770:	4249c83a 	sub	r4,r8,r9
  802774:	04800044 	movi	r18,1
  802778:	003f2606 	br	802414 <__subsf3+0x94>
  80277c:	00c00804 	movi	r3,32
  802780:	1ac7c83a 	sub	r3,r3,r11
  802784:	40c6983a 	sll	r3,r8,r3
  802788:	42d0d83a 	srl	r8,r8,r11
  80278c:	1808c03a 	cmpne	r4,r3,zero
  802790:	2208b03a 	or	r4,r4,r8
  802794:	003fc406 	br	8026a8 <__subsf3+0x328>
  802798:	0007883a 	mov	r3,zero
  80279c:	003f3806 	br	802480 <__subsf3+0x100>
  8027a0:	483f9426 	beq	r9,zero,8025f4 <__subsf3+0x274>
  8027a4:	2100102c 	andhi	r4,r4,64
  8027a8:	203f9226 	beq	r4,zero,8025f4 <__subsf3+0x274>
  8027ac:	38c0102c 	andhi	r3,r7,64
  8027b0:	183f901e 	bne	r3,zero,8025f4 <__subsf3+0x274>
  8027b4:	1023883a 	mov	r17,r2
  8027b8:	3819883a 	mov	r12,r7
  8027bc:	003f8d06 	br	8025f4 <__subsf3+0x274>
  8027c0:	01000804 	movi	r4,32
  8027c4:	22c9c83a 	sub	r4,r4,r11
  8027c8:	4106983a 	sll	r3,r8,r4
  8027cc:	42d0d83a 	srl	r8,r8,r11
  8027d0:	1808c03a 	cmpne	r4,r3,zero
  8027d4:	2208b03a 	or	r4,r4,r8
  8027d8:	003f9606 	br	802634 <__subsf3+0x2b4>
  8027dc:	04800044 	movi	r18,1
  8027e0:	003f7806 	br	8025c4 <__subsf3+0x244>
  8027e4:	483fb726 	beq	r9,zero,8026c4 <__subsf3+0x344>
  8027e8:	1023883a 	mov	r17,r2
  8027ec:	3809883a 	mov	r4,r7
  8027f0:	003f2306 	br	802480 <__subsf3+0x100>
  8027f4:	4a09c83a 	sub	r4,r9,r8
  8027f8:	04800044 	movi	r18,1
  8027fc:	003f0506 	br	802414 <__subsf3+0x94>
  802800:	3809883a 	mov	r4,r7
  802804:	0007883a 	mov	r3,zero
  802808:	003f1d06 	br	802480 <__subsf3+0x100>
  80280c:	203fad26 	beq	r4,zero,8026c4 <__subsf3+0x344>
  802810:	003f6c06 	br	8025c4 <__subsf3+0x244>

00802814 <__fixsfsi>:
  802814:	200ad5fa 	srli	r5,r4,23
  802818:	00c02034 	movhi	r3,128
  80281c:	18ffffc4 	addi	r3,r3,-1
  802820:	29403fcc 	andi	r5,r5,255
  802824:	29801fd0 	cmplti	r6,r5,127
  802828:	200ed7fa 	srli	r7,r4,31
  80282c:	1906703a 	and	r3,r3,r4
  802830:	3000061e 	bne	r6,zero,80284c <__fixsfsi+0x38>
  802834:	28802790 	cmplti	r2,r5,158
  802838:	1000061e 	bne	r2,zero,802854 <__fixsfsi+0x40>
  80283c:	00a00034 	movhi	r2,32768
  802840:	10bfffc4 	addi	r2,r2,-1
  802844:	3885883a 	add	r2,r7,r2
  802848:	f800283a 	ret
  80284c:	0005883a 	mov	r2,zero
  802850:	f800283a 	ret
  802854:	28802590 	cmplti	r2,r5,150
  802858:	18c02034 	orhi	r3,r3,128
  80285c:	1000051e 	bne	r2,zero,802874 <__fixsfsi+0x60>
  802860:	28bfda84 	addi	r2,r5,-150
  802864:	1884983a 	sll	r2,r3,r2
  802868:	383ff926 	beq	r7,zero,802850 <__fixsfsi+0x3c>
  80286c:	0085c83a 	sub	r2,zero,r2
  802870:	f800283a 	ret
  802874:	00802584 	movi	r2,150
  802878:	1145c83a 	sub	r2,r2,r5
  80287c:	1884d83a 	srl	r2,r3,r2
  802880:	003ff906 	br	802868 <__fixsfsi+0x54>

00802884 <__floatsisf>:
  802884:	defffd04 	addi	sp,sp,-12
  802888:	dfc00215 	stw	ra,8(sp)
  80288c:	dc400115 	stw	r17,4(sp)
  802890:	dc000015 	stw	r16,0(sp)
  802894:	20001226 	beq	r4,zero,8028e0 <__floatsisf+0x5c>
  802898:	2022d7fa 	srli	r17,r4,31
  80289c:	2021883a 	mov	r16,r4
  8028a0:	20003816 	blt	r4,zero,802984 <__floatsisf+0x100>
  8028a4:	8009883a 	mov	r4,r16
  8028a8:	0802aa40 	call	802aa4 <__clzsi2>
  8028ac:	1009883a 	mov	r4,r2
  8028b0:	00802784 	movi	r2,158
  8028b4:	1105c83a 	sub	r2,r2,r4
  8028b8:	10c025c8 	cmpgei	r3,r2,151
  8028bc:	1800151e 	bne	r3,zero,802914 <__floatsisf+0x90>
  8028c0:	20c00248 	cmpgei	r3,r4,9
  8028c4:	18003126 	beq	r3,zero,80298c <__floatsisf+0x108>
  8028c8:	213ffe04 	addi	r4,r4,-8
  8028cc:	8120983a 	sll	r16,r16,r4
  8028d0:	00c02034 	movhi	r3,128
  8028d4:	18ffffc4 	addi	r3,r3,-1
  8028d8:	80e0703a 	and	r16,r16,r3
  8028dc:	00000306 	br	8028ec <__floatsisf+0x68>
  8028e0:	0023883a 	mov	r17,zero
  8028e4:	0005883a 	mov	r2,zero
  8028e8:	0021883a 	mov	r16,zero
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	100495fa 	slli	r2,r2,23
  8028f4:	882297fa 	slli	r17,r17,31
  8028f8:	1404b03a 	or	r2,r2,r16
  8028fc:	1444b03a 	or	r2,r2,r17
  802900:	dfc00217 	ldw	ra,8(sp)
  802904:	dc400117 	ldw	r17,4(sp)
  802908:	dc000017 	ldw	r16,0(sp)
  80290c:	dec00304 	addi	sp,sp,12
  802910:	f800283a 	ret
  802914:	10c02690 	cmplti	r3,r2,154
  802918:	1800071e 	bne	r3,zero,802938 <__floatsisf+0xb4>
  80291c:	20c006c4 	addi	r3,r4,27
  802920:	01400144 	movi	r5,5
  802924:	80c6983a 	sll	r3,r16,r3
  802928:	290bc83a 	sub	r5,r5,r4
  80292c:	814ad83a 	srl	r5,r16,r5
  802930:	1806c03a 	cmpne	r3,r3,zero
  802934:	28e0b03a 	or	r16,r5,r3
  802938:	20c00188 	cmpgei	r3,r4,6
  80293c:	1800171e 	bne	r3,zero,80299c <__floatsisf+0x118>
  802940:	00ff0034 	movhi	r3,64512
  802944:	18ffffc4 	addi	r3,r3,-1
  802948:	818001cc 	andi	r6,r16,7
  80294c:	80ca703a 	and	r5,r16,r3
  802950:	30000926 	beq	r6,zero,802978 <__floatsisf+0xf4>
  802954:	818003cc 	andi	r6,r16,15
  802958:	31800120 	cmpeqi	r6,r6,4
  80295c:	3000061e 	bne	r6,zero,802978 <__floatsisf+0xf4>
  802960:	29400104 	addi	r5,r5,4
  802964:	2981002c 	andhi	r6,r5,1024
  802968:	30000326 	beq	r6,zero,802978 <__floatsisf+0xf4>
  80296c:	28ca703a 	and	r5,r5,r3
  802970:	00c027c4 	movi	r3,159
  802974:	1905c83a 	sub	r2,r3,r4
  802978:	282091ba 	slli	r16,r5,6
  80297c:	8020d27a 	srli	r16,r16,9
  802980:	003fda06 	br	8028ec <__floatsisf+0x68>
  802984:	0121c83a 	sub	r16,zero,r4
  802988:	003fc606 	br	8028a4 <__floatsisf+0x20>
  80298c:	01002034 	movhi	r4,128
  802990:	213fffc4 	addi	r4,r4,-1
  802994:	8120703a 	and	r16,r16,r4
  802998:	003fd406 	br	8028ec <__floatsisf+0x68>
  80299c:	20fffec4 	addi	r3,r4,-5
  8029a0:	80e0983a 	sll	r16,r16,r3
  8029a4:	003fe606 	br	802940 <__floatsisf+0xbc>

008029a8 <__extendsfdf2>:
  8029a8:	200ad5fa 	srli	r5,r4,23
  8029ac:	defffd04 	addi	sp,sp,-12
  8029b0:	dc000015 	stw	r16,0(sp)
  8029b4:	29403fcc 	andi	r5,r5,255
  8029b8:	04002034 	movhi	r16,128
  8029bc:	28800044 	addi	r2,r5,1
  8029c0:	dc400115 	stw	r17,4(sp)
  8029c4:	843fffc4 	addi	r16,r16,-1
  8029c8:	dfc00215 	stw	ra,8(sp)
  8029cc:	10803f8c 	andi	r2,r2,254
  8029d0:	2022d7fa 	srli	r17,r4,31
  8029d4:	8120703a 	and	r16,r16,r4
  8029d8:	10000d26 	beq	r2,zero,802a10 <__extendsfdf2+0x68>
  8029dc:	8008d0fa 	srli	r4,r16,3
  8029e0:	8020977a 	slli	r16,r16,29
  8029e4:	28c0e004 	addi	r3,r5,896
  8029e8:	180a953a 	slli	r5,r3,20
  8029ec:	880697fa 	slli	r3,r17,31
  8029f0:	8005883a 	mov	r2,r16
  8029f4:	290ab03a 	or	r5,r5,r4
  8029f8:	28c6b03a 	or	r3,r5,r3
  8029fc:	dfc00217 	ldw	ra,8(sp)
  802a00:	dc400117 	ldw	r17,4(sp)
  802a04:	dc000017 	ldw	r16,0(sp)
  802a08:	dec00304 	addi	sp,sp,12
  802a0c:	f800283a 	ret
  802a10:	2800111e 	bne	r5,zero,802a58 <__extendsfdf2+0xb0>
  802a14:	80001926 	beq	r16,zero,802a7c <__extendsfdf2+0xd4>
  802a18:	8009883a 	mov	r4,r16
  802a1c:	0802aa40 	call	802aa4 <__clzsi2>
  802a20:	10c002c8 	cmpgei	r3,r2,11
  802a24:	18001b1e 	bne	r3,zero,802a94 <__extendsfdf2+0xec>
  802a28:	010002c4 	movi	r4,11
  802a2c:	2089c83a 	sub	r4,r4,r2
  802a30:	10c00544 	addi	r3,r2,21
  802a34:	810ad83a 	srl	r5,r16,r4
  802a38:	80e0983a 	sll	r16,r16,r3
  802a3c:	01000434 	movhi	r4,16
  802a40:	00c0e244 	movi	r3,905
  802a44:	213fffc4 	addi	r4,r4,-1
  802a48:	1887c83a 	sub	r3,r3,r2
  802a4c:	2908703a 	and	r4,r5,r4
  802a50:	18c1ffcc 	andi	r3,r3,2047
  802a54:	003fe406 	br	8029e8 <__extendsfdf2+0x40>
  802a58:	80000b26 	beq	r16,zero,802a88 <__extendsfdf2+0xe0>
  802a5c:	800ad0fa 	srli	r5,r16,3
  802a60:	00800434 	movhi	r2,16
  802a64:	10bfffc4 	addi	r2,r2,-1
  802a68:	29000234 	orhi	r4,r5,8
  802a6c:	8020977a 	slli	r16,r16,29
  802a70:	2088703a 	and	r4,r4,r2
  802a74:	00c1ffc4 	movi	r3,2047
  802a78:	003fdb06 	br	8029e8 <__extendsfdf2+0x40>
  802a7c:	0007883a 	mov	r3,zero
  802a80:	0009883a 	mov	r4,zero
  802a84:	003fd806 	br	8029e8 <__extendsfdf2+0x40>
  802a88:	00c1ffc4 	movi	r3,2047
  802a8c:	0009883a 	mov	r4,zero
  802a90:	003fd506 	br	8029e8 <__extendsfdf2+0x40>
  802a94:	113ffd44 	addi	r4,r2,-11
  802a98:	810a983a 	sll	r5,r16,r4
  802a9c:	0021883a 	mov	r16,zero
  802aa0:	003fe606 	br	802a3c <__extendsfdf2+0x94>

00802aa4 <__clzsi2>:
  802aa4:	00bfffd4 	movui	r2,65535
  802aa8:	11000436 	bltu	r2,r4,802abc <__clzsi2+0x18>
  802aac:	20804030 	cmpltui	r2,r4,256
  802ab0:	10000e26 	beq	r2,zero,802aec <__clzsi2+0x48>
  802ab4:	01400804 	movi	r5,32
  802ab8:	00000406 	br	802acc <__clzsi2+0x28>
  802abc:	00804034 	movhi	r2,256
  802ac0:	20800736 	bltu	r4,r2,802ae0 <__clzsi2+0x3c>
  802ac4:	2008d63a 	srli	r4,r4,24
  802ac8:	01400204 	movi	r5,8
  802acc:	00c02074 	movhi	r3,129
  802ad0:	20c7883a 	add	r3,r4,r3
  802ad4:	188a7f03 	ldbu	r2,10748(r3)
  802ad8:	2885c83a 	sub	r2,r5,r2
  802adc:	f800283a 	ret
  802ae0:	2008d43a 	srli	r4,r4,16
  802ae4:	01400404 	movi	r5,16
  802ae8:	003ff806 	br	802acc <__clzsi2+0x28>
  802aec:	2008d23a 	srli	r4,r4,8
  802af0:	01400604 	movi	r5,24
  802af4:	003ff506 	br	802acc <__clzsi2+0x28>

00802af8 <__mulsi3>:
  802af8:	0005883a 	mov	r2,zero
  802afc:	20000726 	beq	r4,zero,802b1c <__mulsi3+0x24>
  802b00:	20c0004c 	andi	r3,r4,1
  802b04:	2008d07a 	srli	r4,r4,1
  802b08:	18000126 	beq	r3,zero,802b10 <__mulsi3+0x18>
  802b0c:	1145883a 	add	r2,r2,r5
  802b10:	294b883a 	add	r5,r5,r5
  802b14:	203ffa1e 	bne	r4,zero,802b00 <__mulsi3+0x8>
  802b18:	f800283a 	ret
  802b1c:	f800283a 	ret

00802b20 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
  802b20:	defffd04 	addi	sp,sp,-12
  802b24:	2805883a 	mov	r2,r5
  802b28:	dfc00015 	stw	ra,0(sp)
  802b2c:	d9800115 	stw	r6,4(sp)
  802b30:	d9c00215 	stw	r7,8(sp)
  va_start (ap, fmt);
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
  802b34:	21400217 	ldw	r5,8(r4)
  802b38:	d9c00104 	addi	r7,sp,4
  802b3c:	100d883a 	mov	r6,r2
  802b40:	0802cf40 	call	802cf4 <___vfprintf_internal_r>
  va_end (ap);
  return ret;
}
  802b44:	dfc00017 	ldw	ra,0(sp)
  802b48:	dec00304 	addi	sp,sp,12
  802b4c:	f800283a 	ret

00802b50 <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
  802b50:	defffc04 	addi	sp,sp,-16
  802b54:	dfc00015 	stw	ra,0(sp)
  802b58:	d9400115 	stw	r5,4(sp)
  802b5c:	d9800215 	stw	r6,8(sp)
  802b60:	d9c00315 	stw	r7,12(sp)
  va_start (ap, fmt);
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
  802b64:	d0a00917 	ldw	r2,-32732(gp)
  802b68:	200b883a 	mov	r5,r4
  802b6c:	d9800104 	addi	r6,sp,4
  802b70:	11000217 	ldw	r4,8(r2)
  802b74:	0804df80 	call	804df8 <__vfprintf_internal>
  va_end (ap);
  return ret;
}
  802b78:	dfc00017 	ldw	ra,0(sp)
  802b7c:	dec00404 	addi	sp,sp,16
  802b80:	f800283a 	ret

00802b84 <_puts_r>:
 */

int
_puts_r (struct _reent *ptr,
       const char * s)
{
  802b84:	defff504 	addi	sp,sp,-44
  802b88:	dc000815 	stw	r16,32(sp)
  802b8c:	2021883a 	mov	r16,r4
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
  802b90:	2809883a 	mov	r4,r5
{
  802b94:	dc400915 	stw	r17,36(sp)
  802b98:	dfc00a15 	stw	ra,40(sp)
  802b9c:	2823883a 	mov	r17,r5
  size_t c = strlen (s);
  802ba0:	0802c5c0 	call	802c5c <strlen>

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  802ba4:	11000044 	addi	r4,r2,1
  iov[0].iov_len = c;
  802ba8:	d8800515 	stw	r2,20(sp)
  iov[1].iov_len = 1;
  802bac:	00800044 	movi	r2,1
  iov[1].iov_base = "\n";
  802bb0:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  802bb4:	d8800715 	stw	r2,28(sp)
  uio.uio_iov = &iov[0];
  802bb8:	d8800404 	addi	r2,sp,16
  iov[1].iov_base = "\n";
  802bbc:	18cabf04 	addi	r3,r3,11004
  uio.uio_iov = &iov[0];
  802bc0:	d8800115 	stw	r2,4(sp)
  uio.uio_iovcnt = 2;
  802bc4:	00800084 	movi	r2,2
  iov[0].iov_base = s;
  802bc8:	dc400415 	stw	r17,16(sp)
  iov[1].iov_base = "\n";
  802bcc:	d8c00615 	stw	r3,24(sp)
  uio.uio_resid = c + 1;
  802bd0:	d9000315 	stw	r4,12(sp)
  uio.uio_iovcnt = 2;
  802bd4:	d8800215 	stw	r2,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  802bd8:	81400217 	ldw	r5,8(r16)
  CHECK_INIT (ptr, fp);
  802bdc:	80000226 	beq	r16,zero,802be8 <_puts_r+0x64>
  802be0:	80800e17 	ldw	r2,56(r16)
  802be4:	10001326 	beq	r2,zero,802c34 <_puts_r+0xb0>
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  802be8:	2880030b 	ldhu	r2,12(r5)
  802bec:	10c8000c 	andi	r3,r2,8192
  802bf0:	1800061e 	bne	r3,zero,802c0c <_puts_r+0x88>
  _newlib_flockfile_start (fp);
  802bf4:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  802bf8:	0137ffc4 	movi	r4,-8193
  802bfc:	10880014 	ori	r2,r2,8192
  802c00:	1906703a 	and	r3,r3,r4
  802c04:	2880030d 	sth	r2,12(r5)
  802c08:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  802c0c:	d9800104 	addi	r6,sp,4
  802c10:	8009883a 	mov	r4,r16
  802c14:	08074440 	call	807444 <__sfvwrite_r>
  802c18:	10000b1e 	bne	r2,zero,802c48 <_puts_r+0xc4>
  802c1c:	00800284 	movi	r2,10

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
  802c20:	dfc00a17 	ldw	ra,40(sp)
  802c24:	dc400917 	ldw	r17,36(sp)
  802c28:	dc000817 	ldw	r16,32(sp)
  802c2c:	dec00b04 	addi	sp,sp,44
  802c30:	f800283a 	ret
  CHECK_INIT (ptr, fp);
  802c34:	8009883a 	mov	r4,r16
  802c38:	d9400015 	stw	r5,0(sp)
  802c3c:	0806ff80 	call	806ff8 <__sinit>
  802c40:	d9400017 	ldw	r5,0(sp)
  802c44:	003fe806 	br	802be8 <_puts_r+0x64>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  802c48:	00bfffc4 	movi	r2,-1
  return result;
  802c4c:	003ff406 	br	802c20 <_puts_r+0x9c>

00802c50 <puts>:

#ifndef _REENT_ONLY

int
puts (char const * s)
{
  802c50:	200b883a 	mov	r5,r4
  return _puts_r (_REENT, s);
  802c54:	d1200917 	ldw	r4,-32732(gp)
  802c58:	0802b841 	jmpi	802b84 <_puts_r>

00802c5c <strlen>:

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
  802c5c:	208000cc 	andi	r2,r4,3
  802c60:	10000926 	beq	r2,zero,802c88 <strlen+0x2c>
  802c64:	2005883a 	mov	r2,r4
  802c68:	00000306 	br	802c78 <strlen+0x1c>
    {
      if (!*str)
	return str - start;
      str++;
  802c6c:	10800044 	addi	r2,r2,1
  while (UNALIGNED (str))
  802c70:	10c000cc 	andi	r3,r2,3
  802c74:	18000526 	beq	r3,zero,802c8c <strlen+0x30>
      if (!*str)
  802c78:	10c00007 	ldb	r3,0(r2)
  802c7c:	183ffb1e 	bne	r3,zero,802c6c <strlen+0x10>

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
    str++;
  return str - start;
  802c80:	1105c83a 	sub	r2,r2,r4
}
  802c84:	f800283a 	ret
  while (UNALIGNED (str))
  802c88:	2005883a 	mov	r2,r4
  while (!DETECTNULL (*aligned_addr))
  802c8c:	11400017 	ldw	r5,0(r2)
  802c90:	01ffbff4 	movhi	r7,65279
  802c94:	39ffbfc4 	addi	r7,r7,-257
  802c98:	29c7883a 	add	r3,r5,r7
  802c9c:	01a02074 	movhi	r6,32897
  802ca0:	014a303a 	nor	r5,zero,r5
  802ca4:	1946703a 	and	r3,r3,r5
  802ca8:	31a02004 	addi	r6,r6,-32640
  802cac:	1986703a 	and	r3,r3,r6
  802cb0:	1800071e 	bne	r3,zero,802cd0 <strlen+0x74>
  802cb4:	11400117 	ldw	r5,4(r2)
    aligned_addr++;
  802cb8:	10800104 	addi	r2,r2,4
  while (!DETECTNULL (*aligned_addr))
  802cbc:	29c7883a 	add	r3,r5,r7
  802cc0:	014a303a 	nor	r5,zero,r5
  802cc4:	1946703a 	and	r3,r3,r5
  802cc8:	1986703a 	and	r3,r3,r6
  802ccc:	183ff926 	beq	r3,zero,802cb4 <strlen+0x58>
  while (*str)
  802cd0:	10c00007 	ldb	r3,0(r2)
  802cd4:	183fea26 	beq	r3,zero,802c80 <strlen+0x24>
  802cd8:	10c00047 	ldb	r3,1(r2)
    str++;
  802cdc:	10800044 	addi	r2,r2,1
  while (*str)
  802ce0:	183fe726 	beq	r3,zero,802c80 <strlen+0x24>
  802ce4:	10c00047 	ldb	r3,1(r2)
    str++;
  802ce8:	10800044 	addi	r2,r2,1
  while (*str)
  802cec:	183ffa1e 	bne	r3,zero,802cd8 <strlen+0x7c>
  802cf0:	003fe306 	br	802c80 <strlen+0x24>

00802cf4 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
  802cf4:	deffbf04 	addi	sp,sp,-260
  802cf8:	dfc04015 	stw	ra,256(sp)
  802cfc:	dd803d15 	stw	r22,244(sp)
  802d00:	dcc03a15 	stw	r19,232(sp)
  802d04:	dc803915 	stw	r18,228(sp)
  802d08:	2027883a 	mov	r19,r4
  802d0c:	2825883a 	mov	r18,r5
  802d10:	302d883a 	mov	r22,r6
  802d14:	d9c00615 	stw	r7,24(sp)
  802d18:	df003f15 	stw	fp,252(sp)
  802d1c:	ddc03e15 	stw	r23,248(sp)
  802d20:	dd403c15 	stw	r21,240(sp)
  802d24:	dd003b15 	stw	r20,236(sp)
  802d28:	dc403815 	stw	r17,224(sp)
  802d2c:	dc003715 	stw	r16,220(sp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
  802d30:	0807a540 	call	807a54 <_localeconv_r>
  802d34:	10800017 	ldw	r2,0(r2)
	size_t decp_len = strlen (decimal_point);
  802d38:	1009883a 	mov	r4,r2
	char *decimal_point = _localeconv_r (data)->decimal_point;
  802d3c:	d8800d15 	stw	r2,52(sp)
	size_t decp_len = strlen (decimal_point);
  802d40:	0802c5c0 	call	802c5c <strlen>
  802d44:	d8800b15 	stw	r2,44(sp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
  802d48:	98000226 	beq	r19,zero,802d54 <___vfprintf_internal_r+0x60>
  802d4c:	98800e17 	ldw	r2,56(r19)
  802d50:	1001e026 	beq	r2,zero,8034d4 <___vfprintf_internal_r+0x7e0>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
  802d54:	9080030b 	ldhu	r2,12(r18)
  802d58:	10c8000c 	andi	r3,r2,8192
  802d5c:	1800061e 	bne	r3,zero,802d78 <___vfprintf_internal_r+0x84>
	_newlib_flockfile_start (fp);
  802d60:	90c01917 	ldw	r3,100(r18)
	ORIENT(fp, -1);
  802d64:	0137ffc4 	movi	r4,-8193
  802d68:	10880014 	ori	r2,r2,8192
  802d6c:	1906703a 	and	r3,r3,r4
  802d70:	9080030d 	sth	r2,12(r18)
  802d74:	90c01915 	stw	r3,100(r18)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
  802d78:	10c0020c 	andi	r3,r2,8
  802d7c:	1800fc26 	beq	r3,zero,803170 <___vfprintf_internal_r+0x47c>
  802d80:	90c00417 	ldw	r3,16(r18)
  802d84:	1800fa26 	beq	r3,zero,803170 <___vfprintf_internal_r+0x47c>
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  802d88:	1080068c 	andi	r2,r2,26
  802d8c:	10800298 	cmpnei	r2,r2,10
  802d90:	1000ff26 	beq	r2,zero,803190 <___vfprintf_internal_r+0x49c>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
  802d94:	d8802704 	addi	r2,sp,156
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
  802d98:	b02f883a 	mov	r23,r22
	uio.uio_iov = iovp = iov;
  802d9c:	d8801a15 	stw	r2,104(sp)
	uio.uio_resid = 0;
  802da0:	d8001c15 	stw	zero,112(sp)
	uio.uio_iovcnt = 0;
  802da4:	d8001b15 	stw	zero,108(sp)
	int ndig = 0;		/* actual number of digits returned by cvt */
  802da8:	d8000815 	stw	zero,32(sp)
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
  802dac:	d8000915 	stw	zero,36(sp)
  802db0:	d8000a15 	stw	zero,40(sp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
  802db4:	d8000c15 	stw	zero,48(sp)
	int expsize = 0;	/* character count for expstr */
  802db8:	d8001015 	stw	zero,64(sp)
	ret = 0;
  802dbc:	d8000515 	stw	zero,20(sp)
			PRINT (cp, m);
  802dc0:	102d883a 	mov	r22,r2
                while (*fmt != '\0' && *fmt != '%')
  802dc4:	b8800007 	ldb	r2,0(r23)
  802dc8:	1000d726 	beq	r2,zero,803128 <___vfprintf_internal_r+0x434>
  802dcc:	b821883a 	mov	r16,r23
  802dd0:	00000306 	br	802de0 <___vfprintf_internal_r+0xec>
  802dd4:	80800047 	ldb	r2,1(r16)
                    fmt += 1;
  802dd8:	84000044 	addi	r16,r16,1
                while (*fmt != '\0' && *fmt != '%')
  802ddc:	10012226 	beq	r2,zero,803268 <___vfprintf_internal_r+0x574>
  802de0:	10800958 	cmpnei	r2,r2,37
  802de4:	103ffb1e 	bne	r2,zero,802dd4 <___vfprintf_internal_r+0xe0>
		if ((m = fmt - cp) != 0) {
  802de8:	85e3c83a 	sub	r17,r16,r23
  802dec:	85c1201e 	bne	r16,r23,803270 <___vfprintf_internal_r+0x57c>
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
  802df0:	80800003 	ldbu	r2,0(r16)
  802df4:	10803fcc 	andi	r2,r2,255
  802df8:	1080201c 	xori	r2,r2,128
  802dfc:	10bfe004 	addi	r2,r2,-128
  802e00:	1000c926 	beq	r2,zero,803128 <___vfprintf_internal_r+0x434>
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
  802e04:	82c00047 	ldb	r11,1(r16)
  802e08:	85c00044 	addi	r23,r16,1

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
  802e0c:	d8001345 	stb	zero,77(sp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
  802e10:	0009883a 	mov	r4,zero
  802e14:	000b883a 	mov	r5,zero
		prec = -1;
  802e18:	023fffc4 	movi	r8,-1
		width = 0;
  802e1c:	0021883a 	mov	r16,zero
		flags = 0;
  802e20:	0019883a 	mov	r12,zero
rflag:		ch = *fmt++;
  802e24:	bdc00044 	addi	r23,r23,1
  802e28:	5839883a 	mov	fp,r11
reswitch:	switch (ch) {
  802e2c:	e0bff804 	addi	r2,fp,-32
  802e30:	10c01668 	cmpgeui	r3,r2,89
  802e34:	18006c1e 	bne	r3,zero,802fe8 <___vfprintf_internal_r+0x2f4>
  802e38:	100490ba 	slli	r2,r2,2
  802e3c:	00c02034 	movhi	r3,128
  802e40:	10c7883a 	add	r3,r2,r3
  802e44:	188b9317 	ldw	r2,11852(r3)
  802e48:	1000683a 	jmp	r2
  802e4c:	0080379c 	xori	r2,zero,222
  802e50:	00802fe8 	cmpgeui	r2,zero,191
  802e54:	00802fe8 	cmpgeui	r2,zero,191
  802e58:	00803790 	cmplti	r2,zero,222
  802e5c:	00802fe8 	cmpgeui	r2,zero,191
  802e60:	00802fe8 	cmpgeui	r2,zero,191
  802e64:	00802fe8 	cmpgeui	r2,zero,191
  802e68:	00802fe8 	cmpgeui	r2,zero,191
  802e6c:	00802fe8 	cmpgeui	r2,zero,191
  802e70:	00802fe8 	cmpgeui	r2,zero,191
  802e74:	00803768 	cmpgeui	r2,zero,221
  802e78:	00803758 	cmpnei	r2,zero,221
  802e7c:	00802fe8 	cmpgeui	r2,zero,191
  802e80:	00803740 	call	80374 <__alt_mem_sdram-0x77fc8c>
  802e84:	008036f4 	movhi	r2,219
  802e88:	00802fe8 	cmpgeui	r2,zero,191
  802e8c:	008036e8 	cmpgeui	r2,zero,219
  802e90:	00802fb0 	cmpltui	r2,zero,190
  802e94:	00802fb0 	cmpltui	r2,zero,190
  802e98:	00802fb0 	cmpltui	r2,zero,190
  802e9c:	00802fb0 	cmpltui	r2,zero,190
  802ea0:	00802fb0 	cmpltui	r2,zero,190
  802ea4:	00802fb0 	cmpltui	r2,zero,190
  802ea8:	00802fb0 	cmpltui	r2,zero,190
  802eac:	00802fb0 	cmpltui	r2,zero,190
  802eb0:	00802fb0 	cmpltui	r2,zero,190
  802eb4:	00802fe8 	cmpgeui	r2,zero,191
  802eb8:	00802fe8 	cmpgeui	r2,zero,191
  802ebc:	00802fe8 	cmpgeui	r2,zero,191
  802ec0:	00802fe8 	cmpgeui	r2,zero,191
  802ec4:	00802fe8 	cmpgeui	r2,zero,191
  802ec8:	00802fe8 	cmpgeui	r2,zero,191
  802ecc:	00802fe8 	cmpgeui	r2,zero,191
  802ed0:	00802fe8 	cmpgeui	r2,zero,191
  802ed4:	00802fe8 	cmpgeui	r2,zero,191
  802ed8:	00802fe8 	cmpgeui	r2,zero,191
  802edc:	00803600 	call	80360 <__alt_mem_sdram-0x77fca0>
  802ee0:	008032cc 	andi	r2,zero,203
  802ee4:	00802fe8 	cmpgeui	r2,zero,191
  802ee8:	008032cc 	andi	r2,zero,203
  802eec:	00802fe8 	cmpgeui	r2,zero,191
  802ef0:	00802fe8 	cmpgeui	r2,zero,191
  802ef4:	00802fe8 	cmpgeui	r2,zero,191
  802ef8:	00802fe8 	cmpgeui	r2,zero,191
  802efc:	008035f4 	movhi	r2,215
  802f00:	00802fe8 	cmpgeui	r2,zero,191
  802f04:	00802fe8 	cmpgeui	r2,zero,191
  802f08:	00803200 	call	80320 <__alt_mem_sdram-0x77fce0>
  802f0c:	00802fe8 	cmpgeui	r2,zero,191
  802f10:	00802fe8 	cmpgeui	r2,zero,191
  802f14:	00802fe8 	cmpgeui	r2,zero,191
  802f18:	00802fe8 	cmpgeui	r2,zero,191
  802f1c:	00802fe8 	cmpgeui	r2,zero,191
  802f20:	008031d8 	cmpnei	r2,zero,199
  802f24:	00802fe8 	cmpgeui	r2,zero,191
  802f28:	00802fe8 	cmpgeui	r2,zero,191
  802f2c:	008035ac 	andhi	r2,zero,214
  802f30:	00802fe8 	cmpgeui	r2,zero,191
  802f34:	00802fe8 	cmpgeui	r2,zero,191
  802f38:	00802fe8 	cmpgeui	r2,zero,191
  802f3c:	00802fe8 	cmpgeui	r2,zero,191
  802f40:	00802fe8 	cmpgeui	r2,zero,191
  802f44:	00802fe8 	cmpgeui	r2,zero,191
  802f48:	00802fe8 	cmpgeui	r2,zero,191
  802f4c:	00802fe8 	cmpgeui	r2,zero,191
  802f50:	00802fe8 	cmpgeui	r2,zero,191
  802f54:	00802fe8 	cmpgeui	r2,zero,191
  802f58:	00803584 	movi	r2,214
  802f5c:	008034e0 	cmpeqi	r2,zero,211
  802f60:	008032cc 	andi	r2,zero,203
  802f64:	008032cc 	andi	r2,zero,203
  802f68:	008032cc 	andi	r2,zero,203
  802f6c:	00803578 	rdprs	r2,zero,213
  802f70:	008034e0 	cmpeqi	r2,zero,211
  802f74:	00802fe8 	cmpgeui	r2,zero,191
  802f78:	00802fe8 	cmpgeui	r2,zero,191
  802f7c:	008038f0 	cmpltui	r2,zero,227
  802f80:	00802fe8 	cmpgeui	r2,zero,191
  802f84:	008038b4 	movhi	r2,226
  802f88:	00803204 	movi	r2,200
  802f8c:	00803874 	movhi	r2,225
  802f90:	00803868 	cmpgeui	r2,zero,225
  802f94:	00802fe8 	cmpgeui	r2,zero,191
  802f98:	00803810 	cmplti	r2,zero,224
  802f9c:	00802fe8 	cmpgeui	r2,zero,191
  802fa0:	008031dc 	xori	r2,zero,199
  802fa4:	00802fe8 	cmpgeui	r2,zero,191
  802fa8:	00802fe8 	cmpgeui	r2,zero,191
  802fac:	008037c8 	cmpgei	r2,zero,223
#endif
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
  802fb0:	0021883a 	mov	r16,zero
  802fb4:	e0fff404 	addi	r3,fp,-48
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
  802fb8:	800490ba 	slli	r2,r16,2
				ch = *fmt++;
  802fbc:	bf000007 	ldb	fp,0(r23)
  802fc0:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  802fc4:	1421883a 	add	r16,r2,r16
  802fc8:	8421883a 	add	r16,r16,r16
  802fcc:	1c21883a 	add	r16,r3,r16
			} while (is_digit (ch));
  802fd0:	e0fff404 	addi	r3,fp,-48
  802fd4:	188002b0 	cmpltui	r2,r3,10
  802fd8:	103ff71e 	bne	r2,zero,802fb8 <___vfprintf_internal_r+0x2c4>
reswitch:	switch (ch) {
  802fdc:	e0bff804 	addi	r2,fp,-32
  802fe0:	10c01668 	cmpgeui	r3,r2,89
  802fe4:	183f9426 	beq	r3,zero,802e38 <___vfprintf_internal_r+0x144>
  802fe8:	21003fcc 	andi	r4,r4,255
  802fec:	2006871e 	bne	r4,zero,804a0c <___vfprintf_internal_r+0x1d18>

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
  802ff0:	e0004d26 	beq	fp,zero,803128 <___vfprintf_internal_r+0x434>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
  802ff4:	df001d05 	stb	fp,116(sp)
			size = 1;
			sign = '\0';
  802ff8:	d8001345 	stb	zero,77(sp)
			break;
  802ffc:	05000044 	movi	r20,1
			size = 1;
  803000:	05400044 	movi	r21,1
			cp = buf;
  803004:	dc401d04 	addi	r17,sp,116
		dprec = 0;
  803008:	db000415 	stw	r12,16(sp)
  80300c:	0011883a 	mov	r8,zero
  803010:	d8000715 	stw	zero,28(sp)
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
  803014:	d8800417 	ldw	r2,16(sp)
  803018:	1380008c 	andi	r14,r2,2
  80301c:	70000126 	beq	r14,zero,803024 <___vfprintf_internal_r+0x330>
			realsz+= 2;
  803020:	a5000084 	addi	r20,r20,2

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  803024:	d8800417 	ldw	r2,16(sp)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
  803028:	d8c01c17 	ldw	r3,112(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80302c:	1340210c 	andi	r13,r2,132
  803030:	6800021e 	bne	r13,zero,80303c <___vfprintf_internal_r+0x348>
			PAD (width - realsz, blanks);
  803034:	850fc83a 	sub	r7,r16,r20
  803038:	01c34516 	blt	zero,r7,803d50 <___vfprintf_internal_r+0x105c>
		if (sign)
  80303c:	d8801347 	ldb	r2,77(sp)
  803040:	10000c26 	beq	r2,zero,803074 <___vfprintf_internal_r+0x380>
			PRINT (&sign, 1);
  803044:	d8801b17 	ldw	r2,108(sp)
  803048:	d9001344 	addi	r4,sp,77
  80304c:	18c00044 	addi	r3,r3,1
  803050:	10800044 	addi	r2,r2,1
  803054:	b1000015 	stw	r4,0(r22)
  803058:	01000044 	movi	r4,1
  80305c:	d8801b15 	stw	r2,108(sp)
  803060:	b1000115 	stw	r4,4(r22)
  803064:	d8c01c15 	stw	r3,112(sp)
  803068:	10800208 	cmpgei	r2,r2,8
  80306c:	1003791e 	bne	r2,zero,803e54 <___vfprintf_internal_r+0x1160>
  803070:	b5800204 	addi	r22,r22,8
		if (flags & HEXPREFIX)
  803074:	70000c26 	beq	r14,zero,8030a8 <___vfprintf_internal_r+0x3b4>
			PRINT (ox, 2);
  803078:	d8801b17 	ldw	r2,108(sp)
  80307c:	d9001384 	addi	r4,sp,78
  803080:	18c00084 	addi	r3,r3,2
  803084:	10800044 	addi	r2,r2,1
  803088:	b1000015 	stw	r4,0(r22)
  80308c:	01000084 	movi	r4,2
  803090:	d8801b15 	stw	r2,108(sp)
  803094:	b1000115 	stw	r4,4(r22)
  803098:	d8c01c15 	stw	r3,112(sp)
  80309c:	10800208 	cmpgei	r2,r2,8
  8030a0:	10037a1e 	bne	r2,zero,803e8c <___vfprintf_internal_r+0x1198>
  8030a4:	b5800204 	addi	r22,r22,8

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  8030a8:	6b402018 	cmpnei	r13,r13,128
  8030ac:	68025b26 	beq	r13,zero,803a1c <___vfprintf_internal_r+0xd28>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
  8030b0:	4551c83a 	sub	r8,r8,r21
  8030b4:	02029316 	blt	zero,r8,803b04 <___vfprintf_internal_r+0xe10>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
  8030b8:	d8800417 	ldw	r2,16(sp)
  8030bc:	1080400c 	andi	r2,r2,256
  8030c0:	1002101e 	bne	r2,zero,803904 <___vfprintf_internal_r+0xc10>
			PRINT (cp, size);
  8030c4:	d8801b17 	ldw	r2,108(sp)
  8030c8:	1d47883a 	add	r3,r3,r21
  8030cc:	b4400015 	stw	r17,0(r22)
  8030d0:	10800044 	addi	r2,r2,1
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
  8030d4:	b5400115 	stw	r21,4(r22)
  8030d8:	d8801b15 	stw	r2,108(sp)
  8030dc:	d8c01c15 	stw	r3,112(sp)
  8030e0:	10800208 	cmpgei	r2,r2,8
  8030e4:	1003101e 	bne	r2,zero,803d28 <___vfprintf_internal_r+0x1034>
  8030e8:	b5800204 	addi	r22,r22,8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
  8030ec:	d8800417 	ldw	r2,16(sp)
  8030f0:	1440010c 	andi	r17,r2,4
  8030f4:	88000226 	beq	r17,zero,803100 <___vfprintf_internal_r+0x40c>
			PAD (width - realsz, blanks);
  8030f8:	8523c83a 	sub	r17,r16,r20
  8030fc:	0440c616 	blt	zero,r17,803418 <___vfprintf_internal_r+0x724>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
  803100:	8500010e 	bge	r16,r20,803108 <___vfprintf_internal_r+0x414>
  803104:	a021883a 	mov	r16,r20
  803108:	d8800517 	ldw	r2,20(sp)
  80310c:	1405883a 	add	r2,r2,r16
  803110:	d8800515 	stw	r2,20(sp)

		FLUSH ();	/* copy out the I/O vectors */
  803114:	1802c21e 	bne	r3,zero,803c20 <___vfprintf_internal_r+0xf2c>
                while (*fmt != '\0' && *fmt != '%')
  803118:	b8800007 	ldb	r2,0(r23)
		FLUSH ();	/* copy out the I/O vectors */
  80311c:	d8001b15 	stw	zero,108(sp)
  803120:	dd802704 	addi	r22,sp,156
                while (*fmt != '\0' && *fmt != '%')
  803124:	103f291e 	bne	r2,zero,802dcc <___vfprintf_internal_r+0xd8>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
  803128:	d8801c17 	ldw	r2,112(sp)
  80312c:	1006391e 	bne	r2,zero,804a14 <___vfprintf_internal_r+0x1d20>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
  803130:	9080030b 	ldhu	r2,12(r18)
  803134:	1080100c 	andi	r2,r2,64
  803138:	1006cf1e 	bne	r2,zero,804c78 <___vfprintf_internal_r+0x1f84>
	/* NOTREACHED */
}
  80313c:	d8800517 	ldw	r2,20(sp)
  803140:	dfc04017 	ldw	ra,256(sp)
  803144:	df003f17 	ldw	fp,252(sp)
  803148:	ddc03e17 	ldw	r23,248(sp)
  80314c:	dd803d17 	ldw	r22,244(sp)
  803150:	dd403c17 	ldw	r21,240(sp)
  803154:	dd003b17 	ldw	r20,236(sp)
  803158:	dcc03a17 	ldw	r19,232(sp)
  80315c:	dc803917 	ldw	r18,228(sp)
  803160:	dc403817 	ldw	r17,224(sp)
  803164:	dc003717 	ldw	r16,220(sp)
  803168:	dec04104 	addi	sp,sp,260
  80316c:	f800283a 	ret
	if (cantwrite (data, fp)) {
  803170:	900b883a 	mov	r5,r18
  803174:	9809883a 	mov	r4,r19
  803178:	0804ed00 	call	804ed0 <__swsetup_r>
  80317c:	1006be1e 	bne	r2,zero,804c78 <___vfprintf_internal_r+0x1f84>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  803180:	9080030b 	ldhu	r2,12(r18)
  803184:	1080068c 	andi	r2,r2,26
  803188:	10800298 	cmpnei	r2,r2,10
  80318c:	103f011e 	bne	r2,zero,802d94 <___vfprintf_internal_r+0xa0>
  803190:	9080038f 	ldh	r2,14(r18)
  803194:	103eff16 	blt	r2,zero,802d94 <___vfprintf_internal_r+0xa0>
		return (__sbprintf (data, fp, fmt0, ap));
  803198:	d9c00617 	ldw	r7,24(sp)
  80319c:	b00d883a 	mov	r6,r22
  8031a0:	900b883a 	mov	r5,r18
  8031a4:	9809883a 	mov	r4,r19
}
  8031a8:	dfc04017 	ldw	ra,256(sp)
  8031ac:	df003f17 	ldw	fp,252(sp)
  8031b0:	ddc03e17 	ldw	r23,248(sp)
  8031b4:	dd803d17 	ldw	r22,244(sp)
  8031b8:	dd403c17 	ldw	r21,240(sp)
  8031bc:	dd003b17 	ldw	r20,236(sp)
  8031c0:	dcc03a17 	ldw	r19,232(sp)
  8031c4:	dc803917 	ldw	r18,228(sp)
  8031c8:	dc403817 	ldw	r17,224(sp)
  8031cc:	dc003717 	ldw	r16,220(sp)
  8031d0:	dec04104 	addi	sp,sp,260
		return (__sbprintf (data, fp, fmt0, ap));
  8031d4:	0804e101 	jmpi	804e10 <__sbprintf>
			flags |= LONGINT;
  8031d8:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  8031dc:	6080080c 	andi	r2,r12,32
  8031e0:	10008126 	beq	r2,zero,8033e8 <___vfprintf_internal_r+0x6f4>
  8031e4:	d8c00617 	ldw	r3,24(sp)
			base = DEC;
  8031e8:	00800044 	movi	r2,1
			_uquad = UARG ();
  8031ec:	1d000017 	ldw	r20,0(r3)
  8031f0:	1d400117 	ldw	r21,4(r3)
  8031f4:	18c00204 	addi	r3,r3,8
  8031f8:	d8c00615 	stw	r3,24(sp)
  8031fc:	00000906 	br	803224 <___vfprintf_internal_r+0x530>
			flags |= LONGINT;
  803200:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  803204:	6080080c 	andi	r2,r12,32
  803208:	10006b26 	beq	r2,zero,8033b8 <___vfprintf_internal_r+0x6c4>
  80320c:	d8c00617 	ldw	r3,24(sp)
			base = OCT;
  803210:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  803214:	1d000017 	ldw	r20,0(r3)
  803218:	1d400117 	ldw	r21,4(r3)
  80321c:	18c00204 	addi	r3,r3,8
  803220:	d8c00615 	stw	r3,24(sp)
nosign:			sign = '\0';
  803224:	d8001345 	stb	zero,77(sp)
number:			if ((dprec = prec) >= 0)
  803228:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  80322c:	001b883a 	mov	r13,zero
number:			if ((dprec = prec) >= 0)
  803230:	18010e1e 	bne	r3,zero,80366c <___vfprintf_internal_r+0x978>
				flags &= ~ZEROPAD;
  803234:	047fdfc4 	movi	r17,-129
  803238:	6448703a 	and	r4,r12,r17
			if (_uquad != 0 || prec != 0) {
  80323c:	a546b03a 	or	r3,r20,r21
				flags &= ~ZEROPAD;
  803240:	d9000415 	stw	r4,16(sp)
			if (_uquad != 0 || prec != 0) {
  803244:	1802c01e 	bne	r3,zero,803d48 <___vfprintf_internal_r+0x1054>
  803248:	40025f1e 	bne	r8,zero,803bc8 <___vfprintf_internal_r+0xed4>
                       else if (base == OCT && (flags & ALT))
  80324c:	1003751e 	bne	r2,zero,804024 <___vfprintf_internal_r+0x1330>
  803250:	6540004c 	andi	r21,r12,1
  803254:	a803b026 	beq	r21,zero,804118 <___vfprintf_internal_r+0x1424>
                         *--cp = '0';
  803258:	00800c04 	movi	r2,48
  80325c:	d88026c5 	stb	r2,155(sp)
  803260:	dc4026c4 	addi	r17,sp,155
  803264:	0000ba06 	br	803550 <___vfprintf_internal_r+0x85c>
		if ((m = fmt - cp) != 0) {
  803268:	85e3c83a 	sub	r17,r16,r23
  80326c:	85ffae26 	beq	r16,r23,803128 <___vfprintf_internal_r+0x434>
			PRINT (cp, m);
  803270:	d8c01c17 	ldw	r3,112(sp)
  803274:	d8801b17 	ldw	r2,108(sp)
  803278:	b5c00015 	stw	r23,0(r22)
  80327c:	1c47883a 	add	r3,r3,r17
  803280:	10800044 	addi	r2,r2,1
  803284:	d8801b15 	stw	r2,108(sp)
  803288:	b4400115 	stw	r17,4(r22)
  80328c:	d8c01c15 	stw	r3,112(sp)
  803290:	10800208 	cmpgei	r2,r2,8
  803294:	1000061e 	bne	r2,zero,8032b0 <___vfprintf_internal_r+0x5bc>
  803298:	b5800204 	addi	r22,r22,8
			ret += m;
  80329c:	d8c00517 	ldw	r3,20(sp)
                if (*fmt == '\0')
  8032a0:	80800003 	ldbu	r2,0(r16)
			ret += m;
  8032a4:	1c47883a 	add	r3,r3,r17
  8032a8:	d8c00515 	stw	r3,20(sp)
  8032ac:	003ed106 	br	802df4 <___vfprintf_internal_r+0x100>
			PRINT (cp, m);
  8032b0:	d9801a04 	addi	r6,sp,104
  8032b4:	900b883a 	mov	r5,r18
  8032b8:	9809883a 	mov	r4,r19
  8032bc:	080a4340 	call	80a434 <__sprint_r>
  8032c0:	103f9b1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  8032c4:	dd802704 	addi	r22,sp,156
  8032c8:	003ff406 	br	80329c <___vfprintf_internal_r+0x5a8>
  8032cc:	21003fcc 	andi	r4,r4,255
  8032d0:	2006671e 	bne	r4,zero,804c70 <___vfprintf_internal_r+0x1f7c>
			_uquad = SARG ();
  8032d4:	d8c00617 	ldw	r3,24(sp)
			if (flags & LONGDBL) {
  8032d8:	6080020c 	andi	r2,r12,8
			_uquad = SARG ();
  8032dc:	19000204 	addi	r4,r3,8
  8032e0:	d9000e15 	stw	r4,56(sp)
			if (flags & LONGDBL) {
  8032e4:	1003a71e 	bne	r2,zero,804184 <___vfprintf_internal_r+0x1490>
				_fpvalue = GET_ARG (N, ap, double);
  8032e8:	d8800617 	ldw	r2,24(sp)
  8032ec:	10c00017 	ldw	r3,0(r2)
  8032f0:	10800117 	ldw	r2,4(r2)
  8032f4:	d8c00915 	stw	r3,36(sp)
  8032f8:	d8800a15 	stw	r2,40(sp)
			if (isinf (_fpvalue)) {
  8032fc:	dd400a17 	ldw	r21,40(sp)
  803300:	dd000917 	ldw	r20,36(sp)
  803304:	00a00034 	movhi	r2,32768
  803308:	10bfffc4 	addi	r2,r2,-1
  80330c:	a8a2703a 	and	r17,r21,r2
  803310:	01dffc34 	movhi	r7,32752
  803314:	01bfffc4 	movi	r6,-1
  803318:	39ffffc4 	addi	r7,r7,-1
  80331c:	a009883a 	mov	r4,r20
  803320:	880b883a 	mov	r5,r17
  803324:	da000615 	stw	r8,24(sp)
  803328:	db000415 	stw	r12,16(sp)
  80332c:	080f9dc0 	call	80f9dc <__unorddf2>
  803330:	db000417 	ldw	r12,16(sp)
  803334:	da000617 	ldw	r8,24(sp)
  803338:	1004641e 	bne	r2,zero,8044cc <___vfprintf_internal_r+0x17d8>
  80333c:	01dffc34 	movhi	r7,32752
  803340:	01bfffc4 	movi	r6,-1
  803344:	39ffffc4 	addi	r7,r7,-1
  803348:	a009883a 	mov	r4,r20
  80334c:	880b883a 	mov	r5,r17
  803350:	080e8940 	call	80e894 <__ledf2>
  803354:	db000417 	ldw	r12,16(sp)
  803358:	da000617 	ldw	r8,24(sp)
  80335c:	00845b0e 	bge	zero,r2,8044cc <___vfprintf_internal_r+0x17d8>
				if (_fpvalue < 0)
  803360:	000d883a 	mov	r6,zero
  803364:	000f883a 	mov	r7,zero
  803368:	a009883a 	mov	r4,r20
  80336c:	a80b883a 	mov	r5,r21
  803370:	080e8940 	call	80e894 <__ledf2>
  803374:	db000417 	ldw	r12,16(sp)
  803378:	10059116 	blt	r2,zero,8049c0 <___vfprintf_internal_r+0x1ccc>
		if (sign)
  80337c:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  803380:	e0801210 	cmplti	r2,fp,72
  803384:	1005391e 	bne	r2,zero,80486c <___vfprintf_internal_r+0x1b78>
					cp = "inf";
  803388:	04402074 	movhi	r17,129
  80338c:	8c4ac104 	addi	r17,r17,11012
				flags &= ~ZEROPAD;
  803390:	00bfdfc4 	movi	r2,-129
  803394:	6084703a 	and	r2,r12,r2
  803398:	d8800415 	stw	r2,16(sp)
				break;
  80339c:	d8800e17 	ldw	r2,56(sp)
  8033a0:	050000c4 	movi	r20,3
				size = 3;
  8033a4:	054000c4 	movi	r21,3
				break;
  8033a8:	d8800615 	stw	r2,24(sp)
		dprec = 0;
  8033ac:	0011883a 	mov	r8,zero
		lead = 0;
  8033b0:	d8000715 	stw	zero,28(sp)
				break;
  8033b4:	00006a06 	br	803560 <___vfprintf_internal_r+0x86c>
			width = GET_ARG (n, ap, int);
  8033b8:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  8033bc:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8033c0:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  8033c4:	10036a1e 	bne	r2,zero,804170 <___vfprintf_internal_r+0x147c>
  8033c8:	6080100c 	andi	r2,r12,64
  8033cc:	10052126 	beq	r2,zero,804854 <___vfprintf_internal_r+0x1b60>
  8033d0:	d8800617 	ldw	r2,24(sp)
  8033d4:	002b883a 	mov	r21,zero
  8033d8:	d8c00615 	stw	r3,24(sp)
  8033dc:	1500000b 	ldhu	r20,0(r2)
			base = OCT;
  8033e0:	0005883a 	mov	r2,zero
  8033e4:	003f8f06 	br	803224 <___vfprintf_internal_r+0x530>
			width = GET_ARG (n, ap, int);
  8033e8:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  8033ec:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8033f0:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  8033f4:	1003501e 	bne	r2,zero,804138 <___vfprintf_internal_r+0x1444>
  8033f8:	6080100c 	andi	r2,r12,64
  8033fc:	10055926 	beq	r2,zero,804964 <___vfprintf_internal_r+0x1c70>
  803400:	d8800617 	ldw	r2,24(sp)
  803404:	002b883a 	mov	r21,zero
  803408:	d8c00615 	stw	r3,24(sp)
  80340c:	1500000b 	ldhu	r20,0(r2)
			base = DEC;
  803410:	00800044 	movi	r2,1
  803414:	003f8306 	br	803224 <___vfprintf_internal_r+0x530>
			PAD (width - realsz, blanks);
  803418:	03002074 	movhi	r12,129
  80341c:	89000450 	cmplti	r4,r17,17
  803420:	d8801b17 	ldw	r2,108(sp)
  803424:	630ad504 	addi	r12,r12,11092
  803428:	20001b1e 	bne	r4,zero,803498 <___vfprintf_internal_r+0x7a4>
  80342c:	05400404 	movi	r21,16
  803430:	6039883a 	mov	fp,r12
  803434:	00000406 	br	803448 <___vfprintf_internal_r+0x754>
  803438:	8c7ffc04 	addi	r17,r17,-16
  80343c:	89000448 	cmpgei	r4,r17,17
  803440:	b5800204 	addi	r22,r22,8
  803444:	20001326 	beq	r4,zero,803494 <___vfprintf_internal_r+0x7a0>
  803448:	10800044 	addi	r2,r2,1
  80344c:	18c00404 	addi	r3,r3,16
  803450:	b7000015 	stw	fp,0(r22)
  803454:	b5400115 	stw	r21,4(r22)
  803458:	d8c01c15 	stw	r3,112(sp)
  80345c:	d8801b15 	stw	r2,108(sp)
  803460:	11000208 	cmpgei	r4,r2,8
  803464:	203ff426 	beq	r4,zero,803438 <___vfprintf_internal_r+0x744>
  803468:	d9801a04 	addi	r6,sp,104
  80346c:	900b883a 	mov	r5,r18
  803470:	9809883a 	mov	r4,r19
  803474:	080a4340 	call	80a434 <__sprint_r>
  803478:	103f2d1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  80347c:	8c7ffc04 	addi	r17,r17,-16
  803480:	89000448 	cmpgei	r4,r17,17
  803484:	d8c01c17 	ldw	r3,112(sp)
  803488:	d8801b17 	ldw	r2,108(sp)
  80348c:	dd802704 	addi	r22,sp,156
  803490:	203fed1e 	bne	r4,zero,803448 <___vfprintf_internal_r+0x754>
  803494:	e019883a 	mov	r12,fp
  803498:	10800044 	addi	r2,r2,1
  80349c:	1c47883a 	add	r3,r3,r17
  8034a0:	d8801b15 	stw	r2,108(sp)
  8034a4:	b3000015 	stw	r12,0(r22)
  8034a8:	b4400115 	stw	r17,4(r22)
  8034ac:	d8c01c15 	stw	r3,112(sp)
  8034b0:	10800210 	cmplti	r2,r2,8
  8034b4:	103f121e 	bne	r2,zero,803100 <___vfprintf_internal_r+0x40c>
  8034b8:	d9801a04 	addi	r6,sp,104
  8034bc:	900b883a 	mov	r5,r18
  8034c0:	9809883a 	mov	r4,r19
  8034c4:	080a4340 	call	80a434 <__sprint_r>
  8034c8:	103f191e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  8034cc:	d8c01c17 	ldw	r3,112(sp)
  8034d0:	003f0b06 	br	803100 <___vfprintf_internal_r+0x40c>
	CHECK_INIT (data, fp);
  8034d4:	9809883a 	mov	r4,r19
  8034d8:	0806ff80 	call	806ff8 <__sinit>
  8034dc:	003e1d06 	br	802d54 <___vfprintf_internal_r+0x60>
  8034e0:	21003fcc 	andi	r4,r4,255
  8034e4:	2005de1e 	bne	r4,zero,804c60 <___vfprintf_internal_r+0x1f6c>
			_uquad = SARG ();
  8034e8:	6080080c 	andi	r2,r12,32
  8034ec:	10004926 	beq	r2,zero,803614 <___vfprintf_internal_r+0x920>
  8034f0:	d8c00617 	ldw	r3,24(sp)
  8034f4:	18800117 	ldw	r2,4(r3)
  8034f8:	1d000017 	ldw	r20,0(r3)
  8034fc:	18c00204 	addi	r3,r3,8
  803500:	d8c00615 	stw	r3,24(sp)
  803504:	102b883a 	mov	r21,r2
			if ((quad_t)_uquad < 0)
  803508:	10004e16 	blt	r2,zero,803644 <___vfprintf_internal_r+0x950>
number:			if ((dprec = prec) >= 0)
  80350c:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  803510:	db401343 	ldbu	r13,77(sp)
number:			if ((dprec = prec) >= 0)
  803514:	10000626 	beq	r2,zero,803530 <___vfprintf_internal_r+0x83c>
				flags &= ~ZEROPAD;
  803518:	047fdfc4 	movi	r17,-129
  80351c:	6446703a 	and	r3,r12,r17
			if (_uquad != 0 || prec != 0) {
  803520:	a544b03a 	or	r2,r20,r21
				flags &= ~ZEROPAD;
  803524:	d8c00415 	stw	r3,16(sp)
			if (_uquad != 0 || prec != 0) {
  803528:	1002bd26 	beq	r2,zero,804020 <___vfprintf_internal_r+0x132c>
				flags &= ~ZEROPAD;
  80352c:	db000417 	ldw	r12,16(sp)
					if (_uquad < 10) {
  803530:	a803701e 	bne	r21,zero,8042f4 <___vfprintf_internal_r+0x1600>
  803534:	a08002a8 	cmpgeui	r2,r20,10
  803538:	10036e1e 	bne	r2,zero,8042f4 <___vfprintf_internal_r+0x1600>
						*--cp = to_char(_uquad);
  80353c:	a5000c04 	addi	r20,r20,48
  803540:	dd0026c5 	stb	r20,155(sp)
						break;
  803544:	db000415 	stw	r12,16(sp)
  803548:	05400044 	movi	r21,1
						*--cp = to_char(_uquad);
  80354c:	dc4026c4 	addi	r17,sp,155
		realsz = dprec > size ? dprec : size;
  803550:	4029883a 	mov	r20,r8
  803554:	4540010e 	bge	r8,r21,80355c <___vfprintf_internal_r+0x868>
  803558:	a829883a 	mov	r20,r21
		lead = 0;
  80355c:	d8000715 	stw	zero,28(sp)
		if (sign)
  803560:	6b403fcc 	andi	r13,r13,255
  803564:	6b40201c 	xori	r13,r13,128
  803568:	6b7fe004 	addi	r13,r13,-128
  80356c:	683ea926 	beq	r13,zero,803014 <___vfprintf_internal_r+0x320>
			realsz++;
  803570:	a5000044 	addi	r20,r20,1
  803574:	003ea706 	br	803014 <___vfprintf_internal_r+0x320>
				flags |= SHORTINT;
  803578:	bac00007 	ldb	r11,0(r23)
  80357c:	63001014 	ori	r12,r12,64
			goto rflag;
  803580:	003e2806 	br	802e24 <___vfprintf_internal_r+0x130>
				*cp = GET_ARG (N, ap, int);
  803584:	d8c00617 	ldw	r3,24(sp)
			sign = '\0';
  803588:	d8001345 	stb	zero,77(sp)
			break;
  80358c:	05000044 	movi	r20,1
				*cp = GET_ARG (N, ap, int);
  803590:	18800017 	ldw	r2,0(r3)
  803594:	18c00104 	addi	r3,r3,4
  803598:	d8c00615 	stw	r3,24(sp)
  80359c:	d8801d05 	stb	r2,116(sp)
				size = 1;
  8035a0:	05400044 	movi	r21,1
			cp = buf;
  8035a4:	dc401d04 	addi	r17,sp,116
			break;
  8035a8:	003e9706 	br	803008 <___vfprintf_internal_r+0x314>
  8035ac:	21003fcc 	andi	r4,r4,255
  8035b0:	2005a71e 	bne	r4,zero,804c50 <___vfprintf_internal_r+0x1f5c>
			xdigs = "0123456789ABCDEF";
  8035b4:	00802074 	movhi	r2,129
  8035b8:	108ac904 	addi	r2,r2,11044
  8035bc:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  8035c0:	6080080c 	andi	r2,r12,32
  8035c4:	10008726 	beq	r2,zero,8037e4 <___vfprintf_internal_r+0xaf0>
  8035c8:	d8800617 	ldw	r2,24(sp)
  8035cc:	15000017 	ldw	r20,0(r2)
  8035d0:	15400117 	ldw	r21,4(r2)
  8035d4:	10800204 	addi	r2,r2,8
  8035d8:	d8800615 	stw	r2,24(sp)
			if (flags & ALT && _uquad != 0) {
  8035dc:	6080004c 	andi	r2,r12,1
  8035e0:	10000226 	beq	r2,zero,8035ec <___vfprintf_internal_r+0x8f8>
  8035e4:	a544b03a 	or	r2,r20,r21
  8035e8:	1002cd1e 	bne	r2,zero,804120 <___vfprintf_internal_r+0x142c>
			base = HEX;
  8035ec:	00800084 	movi	r2,2
  8035f0:	003f0c06 	br	803224 <___vfprintf_internal_r+0x530>
			flags |= LONGDBL;
  8035f4:	bac00007 	ldb	r11,0(r23)
  8035f8:	63000214 	ori	r12,r12,8
			goto rflag;
  8035fc:	003e0906 	br	802e24 <___vfprintf_internal_r+0x130>
  803600:	21003fcc 	andi	r4,r4,255
  803604:	2005981e 	bne	r4,zero,804c68 <___vfprintf_internal_r+0x1f74>
			flags |= LONGINT;
  803608:	63000414 	ori	r12,r12,16
			_uquad = SARG ();
  80360c:	6080080c 	andi	r2,r12,32
  803610:	103fb71e 	bne	r2,zero,8034f0 <___vfprintf_internal_r+0x7fc>
			width = GET_ARG (n, ap, int);
  803614:	d9000617 	ldw	r4,24(sp)
			_uquad = SARG ();
  803618:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  80361c:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  803620:	1002dd1e 	bne	r2,zero,804198 <___vfprintf_internal_r+0x14a4>
  803624:	6080100c 	andi	r2,r12,64
  803628:	10048426 	beq	r2,zero,80483c <___vfprintf_internal_r+0x1b48>
  80362c:	d8800617 	ldw	r2,24(sp)
  803630:	d8c00615 	stw	r3,24(sp)
  803634:	1500000f 	ldh	r20,0(r2)
  803638:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  80363c:	a805883a 	mov	r2,r21
  803640:	103fb20e 	bge	r2,zero,80350c <___vfprintf_internal_r+0x818>
				_uquad = -_uquad;
  803644:	a004c03a 	cmpne	r2,r20,zero
  803648:	056bc83a 	sub	r21,zero,r21
  80364c:	a8abc83a 	sub	r21,r21,r2
				sign = '-';
  803650:	00800b44 	movi	r2,45
  803654:	d8801345 	stb	r2,77(sp)
number:			if ((dprec = prec) >= 0)
  803658:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  80365c:	0529c83a 	sub	r20,zero,r20
				sign = '-';
  803660:	03400b44 	movi	r13,45
			base = DEC;
  803664:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  803668:	183ef226 	beq	r3,zero,803234 <___vfprintf_internal_r+0x540>
				switch (base) {
  80366c:	10c00060 	cmpeqi	r3,r2,1
  803670:	183faf1e 	bne	r3,zero,803530 <___vfprintf_internal_r+0x83c>
  803674:	108000a0 	cmpeqi	r2,r2,2
  803678:	1001581e 	bne	r2,zero,803bdc <___vfprintf_internal_r+0xee8>
			cp = buf + BUF;
  80367c:	dc402704 	addi	r17,sp,156
						_uquad >>= 3;
  803680:	a006d0fa 	srli	r3,r20,3
  803684:	a808977a 	slli	r4,r21,29
  803688:	a82ad0fa 	srli	r21,r21,3
						*--cp = to_char (_uquad & 7);
  80368c:	a50001cc 	andi	r20,r20,7
  803690:	a0800c04 	addi	r2,r20,48
						_uquad >>= 3;
  803694:	20e8b03a 	or	r20,r4,r3
						*--cp = to_char (_uquad & 7);
  803698:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  80369c:	a546b03a 	or	r3,r20,r21
  8036a0:	880b883a 	mov	r5,r17
						*--cp = to_char (_uquad & 7);
  8036a4:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  8036a8:	183ff51e 	bne	r3,zero,803680 <___vfprintf_internal_r+0x98c>
					if (flags & ALT && *cp != '0')
  8036ac:	60c0004c 	andi	r3,r12,1
  8036b0:	18015726 	beq	r3,zero,803c10 <___vfprintf_internal_r+0xf1c>
  8036b4:	10803fcc 	andi	r2,r2,255
  8036b8:	1080201c 	xori	r2,r2,128
  8036bc:	10bfe004 	addi	r2,r2,-128
  8036c0:	10800c18 	cmpnei	r2,r2,48
  8036c4:	10015226 	beq	r2,zero,803c10 <___vfprintf_internal_r+0xf1c>
						*--cp = '0';
  8036c8:	00800c04 	movi	r2,48
  8036cc:	297fff84 	addi	r5,r5,-2
  8036d0:	88bfffc5 	stb	r2,-1(r17)
			size = buf + BUF - cp;
  8036d4:	d8802704 	addi	r2,sp,156
  8036d8:	116bc83a 	sub	r21,r2,r5
  8036dc:	db000415 	stw	r12,16(sp)
						*--cp = '0';
  8036e0:	2823883a 	mov	r17,r5
  8036e4:	003f9a06 	br	803550 <___vfprintf_internal_r+0x85c>
			flags |= ZEROPAD;
  8036e8:	bac00007 	ldb	r11,0(r23)
  8036ec:	63002014 	ori	r12,r12,128
			goto rflag;
  8036f0:	003dcc06 	br	802e24 <___vfprintf_internal_r+0x130>
			if ((ch = *fmt++) == '*') {
  8036f4:	bf000007 	ldb	fp,0(r23)
  8036f8:	b8800044 	addi	r2,r23,1
  8036fc:	e0c00aa0 	cmpeqi	r3,fp,42
  803700:	1805b11e 	bne	r3,zero,804dc8 <___vfprintf_internal_r+0x20d4>
			while (is_digit (ch)) {
  803704:	e0fff404 	addi	r3,fp,-48
  803708:	198002b0 	cmpltui	r6,r3,10
			if ((ch = *fmt++) == '*') {
  80370c:	102f883a 	mov	r23,r2
			n = 0;
  803710:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  803714:	303dc526 	beq	r6,zero,802e2c <___vfprintf_internal_r+0x138>
				n = 10 * n + to_digit (ch);
  803718:	400490ba 	slli	r2,r8,2
				ch = *fmt++;
  80371c:	bf000007 	ldb	fp,0(r23)
  803720:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  803724:	1211883a 	add	r8,r2,r8
  803728:	4211883a 	add	r8,r8,r8
  80372c:	40d1883a 	add	r8,r8,r3
			while (is_digit (ch)) {
  803730:	e0fff404 	addi	r3,fp,-48
  803734:	188002b0 	cmpltui	r2,r3,10
  803738:	103ff71e 	bne	r2,zero,803718 <___vfprintf_internal_r+0xa24>
  80373c:	003dbb06 	br	802e2c <___vfprintf_internal_r+0x138>
			if ((ch = *fmt++) == '*') {
  803740:	bf000003 	ldbu	fp,0(r23)
			flags |= LADJUST;
  803744:	e2c03fcc 	andi	r11,fp,255
  803748:	5ac0201c 	xori	r11,r11,128
  80374c:	63000114 	ori	r12,r12,4
			goto rflag;
  803750:	5affe004 	addi	r11,r11,-128
  803754:	003db306 	br	802e24 <___vfprintf_internal_r+0x130>
			goto rflag;
  803758:	bac00007 	ldb	r11,0(r23)
  80375c:	01000044 	movi	r4,1
			sign = '+';
  803760:	01400ac4 	movi	r5,43
			goto rflag;
  803764:	003daf06 	br	802e24 <___vfprintf_internal_r+0x130>
			width = GET_ARG (n, ap, int);
  803768:	d8800617 	ldw	r2,24(sp)
			if ((ch = *fmt++) == '*') {
  80376c:	bf000003 	ldbu	fp,0(r23)
			width = GET_ARG (n, ap, int);
  803770:	14000017 	ldw	r16,0(r2)
  803774:	10800104 	addi	r2,r2,4
			if (width >= 0)
  803778:	80028c16 	blt	r16,zero,8041ac <___vfprintf_internal_r+0x14b8>
			width = GET_ARG (n, ap, int);
  80377c:	d8800615 	stw	r2,24(sp)
  803780:	e2c03fcc 	andi	r11,fp,255
  803784:	5ac0201c 	xori	r11,r11,128
  803788:	5affe004 	addi	r11,r11,-128
  80378c:	003da506 	br	802e24 <___vfprintf_internal_r+0x130>
			flags |= ALT;
  803790:	bac00007 	ldb	r11,0(r23)
  803794:	63000054 	ori	r12,r12,1
			goto rflag;
  803798:	003da206 	br	802e24 <___vfprintf_internal_r+0x130>
			if (!sign)
  80379c:	28803fcc 	andi	r2,r5,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
			if ((ch = *fmt++) == '*') {
  8037a8:	bf000003 	ldbu	fp,0(r23)
			if (!sign)
  8037ac:	103ff41e 	bne	r2,zero,803780 <___vfprintf_internal_r+0xa8c>
  8037b0:	e2c03fcc 	andi	r11,fp,255
  8037b4:	5ac0201c 	xori	r11,r11,128
  8037b8:	01000044 	movi	r4,1
				sign = ' ';
  8037bc:	01400804 	movi	r5,32
  8037c0:	5affe004 	addi	r11,r11,-128
  8037c4:	003d9706 	br	802e24 <___vfprintf_internal_r+0x130>
  8037c8:	21003fcc 	andi	r4,r4,255
  8037cc:	20051e1e 	bne	r4,zero,804c48 <___vfprintf_internal_r+0x1f54>
			xdigs = "0123456789abcdef";
  8037d0:	00802074 	movhi	r2,129
  8037d4:	108ac404 	addi	r2,r2,11024
  8037d8:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  8037dc:	6080080c 	andi	r2,r12,32
  8037e0:	103f791e 	bne	r2,zero,8035c8 <___vfprintf_internal_r+0x8d4>
			width = GET_ARG (n, ap, int);
  8037e4:	d9000617 	ldw	r4,24(sp)
hex:			_uquad = UARG ();
  8037e8:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  8037ec:	20c00104 	addi	r3,r4,4
hex:			_uquad = UARG ();
  8037f0:	10025b1e 	bne	r2,zero,804160 <___vfprintf_internal_r+0x146c>
  8037f4:	6080100c 	andi	r2,r12,64
  8037f8:	10046026 	beq	r2,zero,80497c <___vfprintf_internal_r+0x1c88>
  8037fc:	d8800617 	ldw	r2,24(sp)
  803800:	002b883a 	mov	r21,zero
  803804:	d8c00615 	stw	r3,24(sp)
  803808:	1500000b 	ldhu	r20,0(r2)
  80380c:	003f7306 	br	8035dc <___vfprintf_internal_r+0x8e8>
			cp = GET_ARG (N, ap, char_ptr_t);
  803810:	d8800617 	ldw	r2,24(sp)
			sign = '\0';
  803814:	d8001345 	stb	zero,77(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  803818:	14400017 	ldw	r17,0(r2)
  80381c:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  803820:	88028e26 	beq	r17,zero,80425c <___vfprintf_internal_r+0x1568>
			if (prec >= 0) {
  803824:	40bfffe0 	cmpeqi	r2,r8,-1
  803828:	1003c01e 	bne	r2,zero,80472c <___vfprintf_internal_r+0x1a38>
				char *p = memchr (cp, 0, prec);
  80382c:	400d883a 	mov	r6,r8
  803830:	000b883a 	mov	r5,zero
  803834:	8809883a 	mov	r4,r17
  803838:	d8c00715 	stw	r3,28(sp)
  80383c:	db000615 	stw	r12,24(sp)
  803840:	da000415 	stw	r8,16(sp)
  803844:	08085b80 	call	8085b8 <memchr>
				if (p != NULL)
  803848:	da000417 	ldw	r8,16(sp)
  80384c:	db000617 	ldw	r12,24(sp)
  803850:	d8c00717 	ldw	r3,28(sp)
  803854:	1004ec26 	beq	r2,zero,804c08 <___vfprintf_internal_r+0x1f14>
					size = p - cp;
  803858:	146bc83a 	sub	r21,r2,r17
  80385c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  803860:	d8c00615 	stw	r3,24(sp)
  803864:	003de806 	br	803008 <___vfprintf_internal_r+0x314>
			flags |= QUADINT;
  803868:	bac00007 	ldb	r11,0(r23)
  80386c:	63000814 	ori	r12,r12,32
			goto rflag;
  803870:	003d6c06 	br	802e24 <___vfprintf_internal_r+0x130>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  803874:	d8c00617 	ldw	r3,24(sp)
			ox[0] = '0';
  803878:	00800c04 	movi	r2,48
  80387c:	d8801385 	stb	r2,78(sp)
			ox[1] = ch = 'x';
  803880:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  803884:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  803888:	d88013c5 	stb	r2,79(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80388c:	18800104 	addi	r2,r3,4
  803890:	d8800615 	stw	r2,24(sp)
			xdigs = "0123456789abcdef";
  803894:	208ac404 	addi	r2,r4,11024
  803898:	d8800c15 	stw	r2,48(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80389c:	1d000017 	ldw	r20,0(r3)
  8038a0:	002b883a 	mov	r21,zero
			flags |= HEXPREFIX;
  8038a4:	63000094 	ori	r12,r12,2
			base = HEX;
  8038a8:	00800084 	movi	r2,2
			ox[1] = ch = 'x';
  8038ac:	07001e04 	movi	fp,120
			goto nosign;
  8038b0:	003e5c06 	br	803224 <___vfprintf_internal_r+0x530>
  8038b4:	21003fcc 	andi	r4,r4,255
  8038b8:	2004e71e 	bne	r4,zero,804c58 <___vfprintf_internal_r+0x1f64>
			width = GET_ARG (n, ap, int);
  8038bc:	d9000617 	ldw	r4,24(sp)
			if (flags & QUADINT)
  8038c0:	6080080c 	andi	r2,r12,32
			width = GET_ARG (n, ap, int);
  8038c4:	20c00017 	ldw	r3,0(r4)
  8038c8:	21000104 	addi	r4,r4,4
  8038cc:	d9000615 	stw	r4,24(sp)
			if (flags & QUADINT)
  8038d0:	10021e1e 	bne	r2,zero,80414c <___vfprintf_internal_r+0x1458>
			if (flags & LONGINT)
  8038d4:	6080040c 	andi	r2,r12,16
  8038d8:	1002ae1e 	bne	r2,zero,804394 <___vfprintf_internal_r+0x16a0>
			else if (flags & SHORTINT)
  8038dc:	6300100c 	andi	r12,r12,64
  8038e0:	6002ac26 	beq	r12,zero,804394 <___vfprintf_internal_r+0x16a0>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  8038e4:	d8800517 	ldw	r2,20(sp)
  8038e8:	1880000d 	sth	r2,0(r3)
  8038ec:	003d3506 	br	802dc4 <___vfprintf_internal_r+0xd0>
			if (*fmt == 'l') {
  8038f0:	bac00007 	ldb	r11,0(r23)
  8038f4:	58801b18 	cmpnei	r2,r11,108
  8038f8:	10024926 	beq	r2,zero,804220 <___vfprintf_internal_r+0x152c>
				flags |= LONGINT;
  8038fc:	63000414 	ori	r12,r12,16
  803900:	003d4806 	br	802e24 <___vfprintf_internal_r+0x130>
			if (ch >= 'f') {	/* 'f' or 'g' */
  803904:	e2c01990 	cmplti	r11,fp,102
  803908:	5800cb1e 	bne	r11,zero,803c38 <___vfprintf_internal_r+0xf44>
				if (_fpvalue == 0) {
  80390c:	d9000917 	ldw	r4,36(sp)
  803910:	d9400a17 	ldw	r5,40(sp)
  803914:	000d883a 	mov	r6,zero
  803918:	000f883a 	mov	r7,zero
  80391c:	d8c00e15 	stw	r3,56(sp)
  803920:	080e72c0 	call	80e72c <__eqdf2>
  803924:	d8c00e17 	ldw	r3,56(sp)
  803928:	1001641e 	bne	r2,zero,803ebc <___vfprintf_internal_r+0x11c8>
					PRINT ("0", 1);
  80392c:	d8801b17 	ldw	r2,108(sp)
  803930:	01002074 	movhi	r4,129
  803934:	210ad004 	addi	r4,r4,11072
  803938:	10800044 	addi	r2,r2,1
  80393c:	18c00044 	addi	r3,r3,1
  803940:	b1000015 	stw	r4,0(r22)
  803944:	01000044 	movi	r4,1
  803948:	d8801b15 	stw	r2,108(sp)
  80394c:	b1000115 	stw	r4,4(r22)
  803950:	d8c01c15 	stw	r3,112(sp)
  803954:	10800208 	cmpgei	r2,r2,8
  803958:	1003621e 	bne	r2,zero,8046e4 <___vfprintf_internal_r+0x19f0>
  80395c:	b5800204 	addi	r22,r22,8
					if (expt < ndig || flags & ALT) {
  803960:	d8801417 	ldw	r2,80(sp)
  803964:	d9000817 	ldw	r4,32(sp)
  803968:	1101e70e 	bge	r2,r4,804108 <___vfprintf_internal_r+0x1414>
						PRINT (decimal_point, decp_len);
  80396c:	d8800d17 	ldw	r2,52(sp)
  803970:	d9000b17 	ldw	r4,44(sp)
  803974:	b0800015 	stw	r2,0(r22)
  803978:	d8801b17 	ldw	r2,108(sp)
  80397c:	1907883a 	add	r3,r3,r4
  803980:	b1000115 	stw	r4,4(r22)
  803984:	10800044 	addi	r2,r2,1
  803988:	d8801b15 	stw	r2,108(sp)
  80398c:	d8c01c15 	stw	r3,112(sp)
  803990:	10800208 	cmpgei	r2,r2,8
  803994:	1002291e 	bne	r2,zero,80423c <___vfprintf_internal_r+0x1548>
  803998:	b5800204 	addi	r22,r22,8
						PAD (ndig - 1, zeroes);
  80399c:	d8800817 	ldw	r2,32(sp)
  8039a0:	157fffc4 	addi	r21,r2,-1
  8039a4:	057dd10e 	bge	zero,r21,8030ec <___vfprintf_internal_r+0x3f8>
  8039a8:	01c02074 	movhi	r7,129
  8039ac:	a9000450 	cmplti	r4,r21,17
  8039b0:	d8801b17 	ldw	r2,108(sp)
  8039b4:	39cad104 	addi	r7,r7,11076
  8039b8:	2003461e 	bne	r4,zero,8046d4 <___vfprintf_internal_r+0x19e0>
  8039bc:	07000404 	movi	fp,16
  8039c0:	3823883a 	mov	r17,r7
  8039c4:	00000406 	br	8039d8 <___vfprintf_internal_r+0xce4>
  8039c8:	b5800204 	addi	r22,r22,8
  8039cc:	ad7ffc04 	addi	r21,r21,-16
  8039d0:	a9000448 	cmpgei	r4,r21,17
  8039d4:	20033e26 	beq	r4,zero,8046d0 <___vfprintf_internal_r+0x19dc>
  8039d8:	10800044 	addi	r2,r2,1
  8039dc:	18c00404 	addi	r3,r3,16
  8039e0:	b4400015 	stw	r17,0(r22)
  8039e4:	b7000115 	stw	fp,4(r22)
  8039e8:	d8c01c15 	stw	r3,112(sp)
  8039ec:	d8801b15 	stw	r2,108(sp)
  8039f0:	11000208 	cmpgei	r4,r2,8
  8039f4:	203ff426 	beq	r4,zero,8039c8 <___vfprintf_internal_r+0xcd4>
  8039f8:	d9801a04 	addi	r6,sp,104
  8039fc:	900b883a 	mov	r5,r18
  803a00:	9809883a 	mov	r4,r19
  803a04:	080a4340 	call	80a434 <__sprint_r>
  803a08:	103dc91e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  803a0c:	d8c01c17 	ldw	r3,112(sp)
  803a10:	d8801b17 	ldw	r2,108(sp)
  803a14:	dd802704 	addi	r22,sp,156
  803a18:	003fec06 	br	8039cc <___vfprintf_internal_r+0xcd8>
			PAD (width - realsz, zeroes);
  803a1c:	8519c83a 	sub	r12,r16,r20
  803a20:	033da30e 	bge	zero,r12,8030b0 <___vfprintf_internal_r+0x3bc>
  803a24:	01c02074 	movhi	r7,129
  803a28:	61000450 	cmplti	r4,r12,17
  803a2c:	d8801b17 	ldw	r2,108(sp)
  803a30:	39cad104 	addi	r7,r7,11076
  803a34:	2000281e 	bne	r4,zero,803ad8 <___vfprintf_internal_r+0xde4>
  803a38:	dc400e15 	stw	r17,56(sp)
  803a3c:	dc000f15 	stw	r16,60(sp)
  803a40:	b009883a 	mov	r4,r22
  803a44:	03400404 	movi	r13,16
  803a48:	a02d883a 	mov	r22,r20
  803a4c:	6021883a 	mov	r16,r12
  803a50:	4029883a 	mov	r20,r8
  803a54:	3823883a 	mov	r17,r7
  803a58:	00000406 	br	803a6c <___vfprintf_internal_r+0xd78>
  803a5c:	843ffc04 	addi	r16,r16,-16
  803a60:	81400448 	cmpgei	r5,r16,17
  803a64:	21000204 	addi	r4,r4,8
  803a68:	28001426 	beq	r5,zero,803abc <___vfprintf_internal_r+0xdc8>
  803a6c:	10800044 	addi	r2,r2,1
  803a70:	18c00404 	addi	r3,r3,16
  803a74:	24400015 	stw	r17,0(r4)
  803a78:	23400115 	stw	r13,4(r4)
  803a7c:	d8c01c15 	stw	r3,112(sp)
  803a80:	d8801b15 	stw	r2,108(sp)
  803a84:	11400208 	cmpgei	r5,r2,8
  803a88:	283ff426 	beq	r5,zero,803a5c <___vfprintf_internal_r+0xd68>
  803a8c:	d9801a04 	addi	r6,sp,104
  803a90:	900b883a 	mov	r5,r18
  803a94:	9809883a 	mov	r4,r19
  803a98:	080a4340 	call	80a434 <__sprint_r>
  803a9c:	103da41e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  803aa0:	843ffc04 	addi	r16,r16,-16
  803aa4:	81400448 	cmpgei	r5,r16,17
  803aa8:	d8c01c17 	ldw	r3,112(sp)
  803aac:	d8801b17 	ldw	r2,108(sp)
  803ab0:	d9002704 	addi	r4,sp,156
  803ab4:	03400404 	movi	r13,16
  803ab8:	283fec1e 	bne	r5,zero,803a6c <___vfprintf_internal_r+0xd78>
  803abc:	8019883a 	mov	r12,r16
  803ac0:	880f883a 	mov	r7,r17
  803ac4:	dc000f17 	ldw	r16,60(sp)
  803ac8:	dc400e17 	ldw	r17,56(sp)
  803acc:	a011883a 	mov	r8,r20
  803ad0:	b029883a 	mov	r20,r22
  803ad4:	202d883a 	mov	r22,r4
  803ad8:	10800044 	addi	r2,r2,1
  803adc:	1b07883a 	add	r3,r3,r12
  803ae0:	d8801b15 	stw	r2,108(sp)
  803ae4:	b1c00015 	stw	r7,0(r22)
  803ae8:	b3000115 	stw	r12,4(r22)
  803aec:	d8c01c15 	stw	r3,112(sp)
  803af0:	10800208 	cmpgei	r2,r2,8
  803af4:	1003031e 	bne	r2,zero,804704 <___vfprintf_internal_r+0x1a10>
		PAD (dprec - size, zeroes);
  803af8:	4551c83a 	sub	r8,r8,r21
			PAD (width - realsz, zeroes);
  803afc:	b5800204 	addi	r22,r22,8
		PAD (dprec - size, zeroes);
  803b00:	023d6d0e 	bge	zero,r8,8030b8 <___vfprintf_internal_r+0x3c4>
  803b04:	01c02074 	movhi	r7,129
  803b08:	41000450 	cmplti	r4,r8,17
  803b0c:	d8801b17 	ldw	r2,108(sp)
  803b10:	39cad104 	addi	r7,r7,11076
  803b14:	2000221e 	bne	r4,zero,803ba0 <___vfprintf_internal_r+0xeac>
  803b18:	dc400e15 	stw	r17,56(sp)
  803b1c:	dc000f15 	stw	r16,60(sp)
  803b20:	03000404 	movi	r12,16
  803b24:	4021883a 	mov	r16,r8
  803b28:	3823883a 	mov	r17,r7
  803b2c:	00000406 	br	803b40 <___vfprintf_internal_r+0xe4c>
  803b30:	843ffc04 	addi	r16,r16,-16
  803b34:	81000448 	cmpgei	r4,r16,17
  803b38:	b5800204 	addi	r22,r22,8
  803b3c:	20001426 	beq	r4,zero,803b90 <___vfprintf_internal_r+0xe9c>
  803b40:	10800044 	addi	r2,r2,1
  803b44:	18c00404 	addi	r3,r3,16
  803b48:	b4400015 	stw	r17,0(r22)
  803b4c:	b3000115 	stw	r12,4(r22)
  803b50:	d8c01c15 	stw	r3,112(sp)
  803b54:	d8801b15 	stw	r2,108(sp)
  803b58:	11000208 	cmpgei	r4,r2,8
  803b5c:	203ff426 	beq	r4,zero,803b30 <___vfprintf_internal_r+0xe3c>
  803b60:	d9801a04 	addi	r6,sp,104
  803b64:	900b883a 	mov	r5,r18
  803b68:	9809883a 	mov	r4,r19
  803b6c:	080a4340 	call	80a434 <__sprint_r>
  803b70:	103d6f1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  803b74:	843ffc04 	addi	r16,r16,-16
  803b78:	81000448 	cmpgei	r4,r16,17
  803b7c:	d8c01c17 	ldw	r3,112(sp)
  803b80:	d8801b17 	ldw	r2,108(sp)
  803b84:	dd802704 	addi	r22,sp,156
  803b88:	03000404 	movi	r12,16
  803b8c:	203fec1e 	bne	r4,zero,803b40 <___vfprintf_internal_r+0xe4c>
  803b90:	8011883a 	mov	r8,r16
  803b94:	880f883a 	mov	r7,r17
  803b98:	dc000f17 	ldw	r16,60(sp)
  803b9c:	dc400e17 	ldw	r17,56(sp)
  803ba0:	10800044 	addi	r2,r2,1
  803ba4:	1a07883a 	add	r3,r3,r8
  803ba8:	d8801b15 	stw	r2,108(sp)
  803bac:	b1c00015 	stw	r7,0(r22)
  803bb0:	b2000115 	stw	r8,4(r22)
  803bb4:	d8c01c15 	stw	r3,112(sp)
  803bb8:	10800208 	cmpgei	r2,r2,8
  803bbc:	10014a1e 	bne	r2,zero,8040e8 <___vfprintf_internal_r+0x13f4>
  803bc0:	b5800204 	addi	r22,r22,8
  803bc4:	003d3c06 	br	8030b8 <___vfprintf_internal_r+0x3c4>
				switch (base) {
  803bc8:	10c00060 	cmpeqi	r3,r2,1
  803bcc:	1803bc1e 	bne	r3,zero,804ac0 <___vfprintf_internal_r+0x1dcc>
  803bd0:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  803bd4:	db000417 	ldw	r12,16(sp)
  803bd8:	103ea826 	beq	r2,zero,80367c <___vfprintf_internal_r+0x988>
			cp = buf + BUF;
  803bdc:	d9000c17 	ldw	r4,48(sp)
  803be0:	dc402704 	addi	r17,sp,156
						*--cp = xdigs[_uquad & 15];
  803be4:	a08003cc 	andi	r2,r20,15
						_uquad >>= 4;
  803be8:	a806973a 	slli	r3,r21,28
  803bec:	a028d13a 	srli	r20,r20,4
						*--cp = xdigs[_uquad & 15];
  803bf0:	2085883a 	add	r2,r4,r2
  803bf4:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  803bf8:	a82ad13a 	srli	r21,r21,4
  803bfc:	1d28b03a 	or	r20,r3,r20
						*--cp = xdigs[_uquad & 15];
  803c00:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  803c04:	a544b03a 	or	r2,r20,r21
						*--cp = xdigs[_uquad & 15];
  803c08:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  803c0c:	103ff51e 	bne	r2,zero,803be4 <___vfprintf_internal_r+0xef0>
			size = buf + BUF - cp;
  803c10:	d8802704 	addi	r2,sp,156
  803c14:	146bc83a 	sub	r21,r2,r17
  803c18:	db000415 	stw	r12,16(sp)
  803c1c:	003e4c06 	br	803550 <___vfprintf_internal_r+0x85c>
		FLUSH ();	/* copy out the I/O vectors */
  803c20:	d9801a04 	addi	r6,sp,104
  803c24:	900b883a 	mov	r5,r18
  803c28:	9809883a 	mov	r4,r19
  803c2c:	080a4340 	call	80a434 <__sprint_r>
  803c30:	103d3926 	beq	r2,zero,803118 <___vfprintf_internal_r+0x424>
  803c34:	003d3e06 	br	803130 <___vfprintf_internal_r+0x43c>
				if (ndig > 1 || flags & ALT) {
  803c38:	d8800817 	ldw	r2,32(sp)
			PRINT (cp, size);
  803c3c:	da001b17 	ldw	r8,108(sp)
					PRINT ("0", 1);
  803c40:	18c00044 	addi	r3,r3,1
				if (ndig > 1 || flags & ALT) {
  803c44:	10800088 	cmpgei	r2,r2,2
			PRINT (cp, size);
  803c48:	45400044 	addi	r21,r8,1
  803c4c:	b7000204 	addi	fp,r22,8
				if (ndig > 1 || flags & ALT) {
  803c50:	1000f826 	beq	r2,zero,804034 <___vfprintf_internal_r+0x1340>
					PRINT (cp, 1);
  803c54:	00800044 	movi	r2,1
  803c58:	b0800115 	stw	r2,4(r22)
  803c5c:	b4400015 	stw	r17,0(r22)
  803c60:	d8c01c15 	stw	r3,112(sp)
  803c64:	dd401b15 	stw	r21,108(sp)
  803c68:	a8800210 	cmplti	r2,r21,8
  803c6c:	1001cc26 	beq	r2,zero,8043a0 <___vfprintf_internal_r+0x16ac>
					PRINT (decimal_point, decp_len);
  803c70:	d8800b17 	ldw	r2,44(sp)
  803c74:	d9000d17 	ldw	r4,52(sp)
  803c78:	ad400044 	addi	r21,r21,1
  803c7c:	1887883a 	add	r3,r3,r2
  803c80:	e0800115 	stw	r2,4(fp)
  803c84:	e1000015 	stw	r4,0(fp)
  803c88:	d8c01c15 	stw	r3,112(sp)
  803c8c:	dd401b15 	stw	r21,108(sp)
  803c90:	a8800208 	cmpgei	r2,r21,8
  803c94:	1001cb1e 	bne	r2,zero,8043c4 <___vfprintf_internal_r+0x16d0>
  803c98:	e7000204 	addi	fp,fp,8
					if (_fpvalue) {
  803c9c:	d9000917 	ldw	r4,36(sp)
  803ca0:	d9400a17 	ldw	r5,40(sp)
						PRINT (cp, ndig - 1);
  803ca4:	aa000044 	addi	r8,r21,1
					if (_fpvalue) {
  803ca8:	000d883a 	mov	r6,zero
  803cac:	000f883a 	mov	r7,zero
  803cb0:	d8c00e15 	stw	r3,56(sp)
						PRINT (cp, ndig - 1);
  803cb4:	da000715 	stw	r8,28(sp)
					if (_fpvalue) {
  803cb8:	080e72c0 	call	80e72c <__eqdf2>
						PAD (ndig - 1, zeroes);
  803cbc:	d8c00817 	ldw	r3,32(sp)
						PRINT (cp, ndig - 1);
  803cc0:	da000717 	ldw	r8,28(sp)
  803cc4:	e5800204 	addi	r22,fp,8
						PAD (ndig - 1, zeroes);
  803cc8:	1affffc4 	addi	r11,r3,-1
					if (_fpvalue) {
  803ccc:	d8c00e17 	ldw	r3,56(sp)
  803cd0:	1000e526 	beq	r2,zero,804068 <___vfprintf_internal_r+0x1374>
					cp++;
  803cd4:	8a400044 	addi	r9,r17,1
						PRINT (cp, ndig - 1);
  803cd8:	1ac7883a 	add	r3,r3,r11
  803cdc:	da001b15 	stw	r8,108(sp)
  803ce0:	e2400015 	stw	r9,0(fp)
  803ce4:	e2c00115 	stw	r11,4(fp)
  803ce8:	d8c01c15 	stw	r3,112(sp)
  803cec:	42000208 	cmpgei	r8,r8,8
  803cf0:	40013e1e 	bne	r8,zero,8041ec <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  803cf4:	e0800404 	addi	r2,fp,16
  803cf8:	aa000084 	addi	r8,r21,2
						PRINT (cp, ndig - 1);
  803cfc:	b039883a 	mov	fp,r22
				PRINT (expstr, expsize);
  803d00:	102d883a 	mov	r22,r2
  803d04:	d9001017 	ldw	r4,64(sp)
  803d08:	d8801644 	addi	r2,sp,89
  803d0c:	da001b15 	stw	r8,108(sp)
  803d10:	20c7883a 	add	r3,r4,r3
  803d14:	e0800015 	stw	r2,0(fp)
  803d18:	e1000115 	stw	r4,4(fp)
  803d1c:	d8c01c15 	stw	r3,112(sp)
  803d20:	42000210 	cmplti	r8,r8,8
  803d24:	403cf11e 	bne	r8,zero,8030ec <___vfprintf_internal_r+0x3f8>
  803d28:	d9801a04 	addi	r6,sp,104
  803d2c:	900b883a 	mov	r5,r18
  803d30:	9809883a 	mov	r4,r19
  803d34:	080a4340 	call	80a434 <__sprint_r>
  803d38:	103cfd1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  803d3c:	d8c01c17 	ldw	r3,112(sp)
				PRINT (expstr, expsize);
  803d40:	dd802704 	addi	r22,sp,156
  803d44:	003ce906 	br	8030ec <___vfprintf_internal_r+0x3f8>
				flags &= ~ZEROPAD;
  803d48:	db000417 	ldw	r12,16(sp)
  803d4c:	003e4706 	br	80366c <___vfprintf_internal_r+0x978>
			PAD (width - realsz, blanks);
  803d50:	03002074 	movhi	r12,129
  803d54:	39000450 	cmplti	r4,r7,17
  803d58:	d8801b17 	ldw	r2,108(sp)
  803d5c:	630ad504 	addi	r12,r12,11092
  803d60:	2000321e 	bne	r4,zero,803e2c <___vfprintf_internal_r+0x1138>
  803d64:	dc401115 	stw	r17,68(sp)
  803d68:	b009883a 	mov	r4,r22
  803d6c:	9023883a 	mov	r17,r18
  803d70:	a82d883a 	mov	r22,r21
  803d74:	ddc01215 	stw	r23,72(sp)
  803d78:	03c00404 	movi	r15,16
  803d7c:	a02f883a 	mov	r23,r20
  803d80:	db800e15 	stw	r14,56(sp)
  803d84:	8029883a 	mov	r20,r16
  803d88:	db400f15 	stw	r13,60(sp)
  803d8c:	402b883a 	mov	r21,r8
  803d90:	3821883a 	mov	r16,r7
  803d94:	6025883a 	mov	r18,r12
  803d98:	00000406 	br	803dac <___vfprintf_internal_r+0x10b8>
  803d9c:	843ffc04 	addi	r16,r16,-16
  803da0:	81800448 	cmpgei	r6,r16,17
  803da4:	21000204 	addi	r4,r4,8
  803da8:	30001426 	beq	r6,zero,803dfc <___vfprintf_internal_r+0x1108>
  803dac:	10800044 	addi	r2,r2,1
  803db0:	18c00404 	addi	r3,r3,16
  803db4:	24800015 	stw	r18,0(r4)
  803db8:	23c00115 	stw	r15,4(r4)
  803dbc:	d8c01c15 	stw	r3,112(sp)
  803dc0:	d8801b15 	stw	r2,108(sp)
  803dc4:	11800208 	cmpgei	r6,r2,8
  803dc8:	303ff426 	beq	r6,zero,803d9c <___vfprintf_internal_r+0x10a8>
  803dcc:	d9801a04 	addi	r6,sp,104
  803dd0:	880b883a 	mov	r5,r17
  803dd4:	9809883a 	mov	r4,r19
  803dd8:	080a4340 	call	80a434 <__sprint_r>
  803ddc:	1001b91e 	bne	r2,zero,8044c4 <___vfprintf_internal_r+0x17d0>
  803de0:	843ffc04 	addi	r16,r16,-16
  803de4:	81800448 	cmpgei	r6,r16,17
  803de8:	d8c01c17 	ldw	r3,112(sp)
  803dec:	d8801b17 	ldw	r2,108(sp)
  803df0:	d9002704 	addi	r4,sp,156
  803df4:	03c00404 	movi	r15,16
  803df8:	303fec1e 	bne	r6,zero,803dac <___vfprintf_internal_r+0x10b8>
  803dfc:	800f883a 	mov	r7,r16
  803e00:	9019883a 	mov	r12,r18
  803e04:	a021883a 	mov	r16,r20
  803e08:	8825883a 	mov	r18,r17
  803e0c:	b829883a 	mov	r20,r23
  803e10:	db800e17 	ldw	r14,56(sp)
  803e14:	db400f17 	ldw	r13,60(sp)
  803e18:	ddc01217 	ldw	r23,72(sp)
  803e1c:	dc401117 	ldw	r17,68(sp)
  803e20:	a811883a 	mov	r8,r21
  803e24:	b02b883a 	mov	r21,r22
  803e28:	202d883a 	mov	r22,r4
  803e2c:	10800044 	addi	r2,r2,1
  803e30:	19c7883a 	add	r3,r3,r7
  803e34:	d8801b15 	stw	r2,108(sp)
  803e38:	b3000015 	stw	r12,0(r22)
  803e3c:	b1c00115 	stw	r7,4(r22)
  803e40:	d8c01c15 	stw	r3,112(sp)
  803e44:	10800208 	cmpgei	r2,r2,8
  803e48:	1001671e 	bne	r2,zero,8043e8 <___vfprintf_internal_r+0x16f4>
  803e4c:	b5800204 	addi	r22,r22,8
  803e50:	003c7a06 	br	80303c <___vfprintf_internal_r+0x348>
			PRINT (&sign, 1);
  803e54:	d9801a04 	addi	r6,sp,104
  803e58:	900b883a 	mov	r5,r18
  803e5c:	9809883a 	mov	r4,r19
  803e60:	da001115 	stw	r8,68(sp)
  803e64:	db400f15 	stw	r13,60(sp)
  803e68:	db800e15 	stw	r14,56(sp)
  803e6c:	080a4340 	call	80a434 <__sprint_r>
  803e70:	103caf1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
			PRINT (ox, 2);
  803e74:	d8c01c17 	ldw	r3,112(sp)
			PRINT (&sign, 1);
  803e78:	da001117 	ldw	r8,68(sp)
  803e7c:	db400f17 	ldw	r13,60(sp)
  803e80:	db800e17 	ldw	r14,56(sp)
  803e84:	dd802704 	addi	r22,sp,156
  803e88:	003c7a06 	br	803074 <___vfprintf_internal_r+0x380>
			PRINT (ox, 2);
  803e8c:	d9801a04 	addi	r6,sp,104
  803e90:	900b883a 	mov	r5,r18
  803e94:	9809883a 	mov	r4,r19
  803e98:	da000f15 	stw	r8,60(sp)
  803e9c:	db400e15 	stw	r13,56(sp)
  803ea0:	080a4340 	call	80a434 <__sprint_r>
  803ea4:	103ca21e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  803ea8:	d8c01c17 	ldw	r3,112(sp)
			PRINT (ox, 2);
  803eac:	da000f17 	ldw	r8,60(sp)
  803eb0:	db400e17 	ldw	r13,56(sp)
  803eb4:	dd802704 	addi	r22,sp,156
  803eb8:	003c7b06 	br	8030a8 <___vfprintf_internal_r+0x3b4>
				} else if (expt <= 0) {
  803ebc:	d9401417 	ldw	r5,80(sp)
  803ec0:	0141570e 	bge	zero,r5,804420 <___vfprintf_internal_r+0x172c>
					PRINTANDPAD(cp, convbuf + ndig,
  803ec4:	d8800717 	ldw	r2,28(sp)
  803ec8:	d9000817 	ldw	r4,32(sp)
  803ecc:	102b883a 	mov	r21,r2
  803ed0:	2080b916 	blt	r4,r2,8041b8 <___vfprintf_internal_r+0x14c4>
  803ed4:	05400a0e 	bge	zero,r21,803f00 <___vfprintf_internal_r+0x120c>
  803ed8:	d8801b17 	ldw	r2,108(sp)
  803edc:	1d47883a 	add	r3,r3,r21
  803ee0:	b4400015 	stw	r17,0(r22)
  803ee4:	10800044 	addi	r2,r2,1
  803ee8:	d8801b15 	stw	r2,108(sp)
  803eec:	b5400115 	stw	r21,4(r22)
  803ef0:	d8c01c15 	stw	r3,112(sp)
  803ef4:	10800208 	cmpgei	r2,r2,8
  803ef8:	10032d1e 	bne	r2,zero,804bb0 <___vfprintf_internal_r+0x1ebc>
  803efc:	b5800204 	addi	r22,r22,8
  803f00:	a800c516 	blt	r21,zero,804218 <___vfprintf_internal_r+0x1524>
  803f04:	d8800717 	ldw	r2,28(sp)
  803f08:	156bc83a 	sub	r21,r2,r21
  803f0c:	0540db16 	blt	zero,r21,80427c <___vfprintf_internal_r+0x1588>
					if (expt < ndig || flags & ALT)
  803f10:	dd401417 	ldw	r21,80(sp)
  803f14:	d8800817 	ldw	r2,32(sp)
  803f18:	a880aa0e 	bge	r21,r2,8041c4 <___vfprintf_internal_r+0x14d0>
					    PRINT (decimal_point, decp_len);
  803f1c:	d8800d17 	ldw	r2,52(sp)
  803f20:	d9000b17 	ldw	r4,44(sp)
  803f24:	b0800015 	stw	r2,0(r22)
  803f28:	d8801b17 	ldw	r2,108(sp)
  803f2c:	1907883a 	add	r3,r3,r4
  803f30:	b1000115 	stw	r4,4(r22)
  803f34:	10800044 	addi	r2,r2,1
  803f38:	d8801b15 	stw	r2,108(sp)
  803f3c:	d8c01c15 	stw	r3,112(sp)
  803f40:	10800208 	cmpgei	r2,r2,8
  803f44:	1003111e 	bne	r2,zero,804b8c <___vfprintf_internal_r+0x1e98>
  803f48:	b5800204 	addi	r22,r22,8
					PRINTANDPAD (cp, convbuf + ndig,
  803f4c:	d9000817 	ldw	r4,32(sp)
  803f50:	d9400717 	ldw	r5,28(sp)
  803f54:	2545c83a 	sub	r2,r4,r21
  803f58:	2149c83a 	sub	r4,r4,r5
  803f5c:	102b883a 	mov	r21,r2
  803f60:	2080010e 	bge	r4,r2,803f68 <___vfprintf_internal_r+0x1274>
  803f64:	202b883a 	mov	r21,r4
  803f68:	05400c0e 	bge	zero,r21,803f9c <___vfprintf_internal_r+0x12a8>
					cp += lead;
  803f6c:	d9000717 	ldw	r4,28(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  803f70:	1d47883a 	add	r3,r3,r21
  803f74:	b5400115 	stw	r21,4(r22)
					cp += lead;
  803f78:	8913883a 	add	r9,r17,r4
					PRINTANDPAD (cp, convbuf + ndig,
  803f7c:	d9001b17 	ldw	r4,108(sp)
  803f80:	b2400015 	stw	r9,0(r22)
  803f84:	d8c01c15 	stw	r3,112(sp)
  803f88:	21000044 	addi	r4,r4,1
  803f8c:	d9001b15 	stw	r4,108(sp)
  803f90:	21000208 	cmpgei	r4,r4,8
  803f94:	2003111e 	bne	r4,zero,804bdc <___vfprintf_internal_r+0x1ee8>
  803f98:	b5800204 	addi	r22,r22,8
  803f9c:	a800010e 	bge	r21,zero,803fa4 <___vfprintf_internal_r+0x12b0>
  803fa0:	002b883a 	mov	r21,zero
  803fa4:	156bc83a 	sub	r21,r2,r21
  803fa8:	057c500e 	bge	zero,r21,8030ec <___vfprintf_internal_r+0x3f8>
  803fac:	01c02074 	movhi	r7,129
  803fb0:	a9000450 	cmplti	r4,r21,17
  803fb4:	d8801b17 	ldw	r2,108(sp)
  803fb8:	39cad104 	addi	r7,r7,11076
  803fbc:	2001c51e 	bne	r4,zero,8046d4 <___vfprintf_internal_r+0x19e0>
  803fc0:	07000404 	movi	fp,16
  803fc4:	3823883a 	mov	r17,r7
  803fc8:	00000406 	br	803fdc <___vfprintf_internal_r+0x12e8>
  803fcc:	b5800204 	addi	r22,r22,8
  803fd0:	ad7ffc04 	addi	r21,r21,-16
  803fd4:	a9000448 	cmpgei	r4,r21,17
  803fd8:	2001bd26 	beq	r4,zero,8046d0 <___vfprintf_internal_r+0x19dc>
  803fdc:	10800044 	addi	r2,r2,1
  803fe0:	18c00404 	addi	r3,r3,16
  803fe4:	b4400015 	stw	r17,0(r22)
  803fe8:	b7000115 	stw	fp,4(r22)
  803fec:	d8c01c15 	stw	r3,112(sp)
  803ff0:	d8801b15 	stw	r2,108(sp)
  803ff4:	11000208 	cmpgei	r4,r2,8
  803ff8:	203ff426 	beq	r4,zero,803fcc <___vfprintf_internal_r+0x12d8>
  803ffc:	d9801a04 	addi	r6,sp,104
  804000:	900b883a 	mov	r5,r18
  804004:	9809883a 	mov	r4,r19
  804008:	080a4340 	call	80a434 <__sprint_r>
  80400c:	103c481e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  804010:	d8c01c17 	ldw	r3,112(sp)
  804014:	d8801b17 	ldw	r2,108(sp)
  804018:	dd802704 	addi	r22,sp,156
  80401c:	003fec06 	br	803fd0 <___vfprintf_internal_r+0x12dc>
			if (_uquad != 0 || prec != 0) {
  804020:	4002a71e 	bne	r8,zero,804ac0 <___vfprintf_internal_r+0x1dcc>
  804024:	0011883a 	mov	r8,zero
  804028:	002b883a 	mov	r21,zero
			cp = buf + BUF;
  80402c:	dc402704 	addi	r17,sp,156
  804030:	003d4706 	br	803550 <___vfprintf_internal_r+0x85c>
				if (ndig > 1 || flags & ALT) {
  804034:	d8800417 	ldw	r2,16(sp)
  804038:	1080004c 	andi	r2,r2,1
  80403c:	103f051e 	bne	r2,zero,803c54 <___vfprintf_internal_r+0xf60>
					PRINT (cp, 1);
  804040:	00800044 	movi	r2,1
  804044:	dd401b15 	stw	r21,108(sp)
  804048:	b4400015 	stw	r17,0(r22)
  80404c:	b0800115 	stw	r2,4(r22)
  804050:	d8c01c15 	stw	r3,112(sp)
  804054:	ad400208 	cmpgei	r21,r21,8
  804058:	a800641e 	bne	r21,zero,8041ec <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  80405c:	42000084 	addi	r8,r8,2
  804060:	b5800404 	addi	r22,r22,16
  804064:	003f2706 	br	803d04 <___vfprintf_internal_r+0x1010>
						PAD (ndig - 1, zeroes);
  804068:	02ff260e 	bge	zero,r11,803d04 <___vfprintf_internal_r+0x1010>
  80406c:	58800450 	cmplti	r2,r11,17
  804070:	01c02074 	movhi	r7,129
  804074:	10034c1e 	bne	r2,zero,804da8 <___vfprintf_internal_r+0x20b4>
  804078:	39cad104 	addi	r7,r7,11076
  80407c:	dc000715 	stw	r16,28(sp)
  804080:	05800404 	movi	r22,16
  804084:	5823883a 	mov	r17,r11
  804088:	402b883a 	mov	r21,r8
  80408c:	3821883a 	mov	r16,r7
  804090:	00000506 	br	8040a8 <___vfprintf_internal_r+0x13b4>
  804094:	e7000204 	addi	fp,fp,8
  804098:	8c7ffc04 	addi	r17,r17,-16
  80409c:	88800448 	cmpgei	r2,r17,17
  8040a0:	1001d626 	beq	r2,zero,8047fc <___vfprintf_internal_r+0x1b08>
  8040a4:	ad400044 	addi	r21,r21,1
  8040a8:	18c00404 	addi	r3,r3,16
  8040ac:	e4000015 	stw	r16,0(fp)
  8040b0:	e5800115 	stw	r22,4(fp)
  8040b4:	d8c01c15 	stw	r3,112(sp)
  8040b8:	dd401b15 	stw	r21,108(sp)
  8040bc:	a8800208 	cmpgei	r2,r21,8
  8040c0:	103ff426 	beq	r2,zero,804094 <___vfprintf_internal_r+0x13a0>
  8040c4:	d9801a04 	addi	r6,sp,104
  8040c8:	900b883a 	mov	r5,r18
  8040cc:	9809883a 	mov	r4,r19
  8040d0:	080a4340 	call	80a434 <__sprint_r>
  8040d4:	103c161e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  8040d8:	dd401b17 	ldw	r21,108(sp)
  8040dc:	d8c01c17 	ldw	r3,112(sp)
  8040e0:	df002704 	addi	fp,sp,156
  8040e4:	003fec06 	br	804098 <___vfprintf_internal_r+0x13a4>
		PAD (dprec - size, zeroes);
  8040e8:	d9801a04 	addi	r6,sp,104
  8040ec:	900b883a 	mov	r5,r18
  8040f0:	9809883a 	mov	r4,r19
  8040f4:	080a4340 	call	80a434 <__sprint_r>
  8040f8:	103c0d1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  8040fc:	d8c01c17 	ldw	r3,112(sp)
		PAD (dprec - size, zeroes);
  804100:	dd802704 	addi	r22,sp,156
  804104:	003bec06 	br	8030b8 <___vfprintf_internal_r+0x3c4>
					if (expt < ndig || flags & ALT) {
  804108:	d8800417 	ldw	r2,16(sp)
  80410c:	1080004c 	andi	r2,r2,1
  804110:	103bf626 	beq	r2,zero,8030ec <___vfprintf_internal_r+0x3f8>
  804114:	003e1506 	br	80396c <___vfprintf_internal_r+0xc78>
			cp = buf + BUF;
  804118:	dc402704 	addi	r17,sp,156
  80411c:	003d0c06 	br	803550 <___vfprintf_internal_r+0x85c>
				ox[0] = '0';
  804120:	00800c04 	movi	r2,48
  804124:	d8801385 	stb	r2,78(sp)
				ox[1] = ch;
  804128:	df0013c5 	stb	fp,79(sp)
				flags |= HEXPREFIX;
  80412c:	63000094 	ori	r12,r12,2
			base = HEX;
  804130:	00800084 	movi	r2,2
  804134:	003c3b06 	br	803224 <___vfprintf_internal_r+0x530>
			_uquad = UARG ();
  804138:	25000017 	ldw	r20,0(r4)
  80413c:	002b883a 	mov	r21,zero
  804140:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  804144:	00800044 	movi	r2,1
  804148:	003c3606 	br	803224 <___vfprintf_internal_r+0x530>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  80414c:	d9000517 	ldw	r4,20(sp)
  804150:	2005d7fa 	srai	r2,r4,31
  804154:	19000015 	stw	r4,0(r3)
  804158:	18800115 	stw	r2,4(r3)
  80415c:	003b1906 	br	802dc4 <___vfprintf_internal_r+0xd0>
hex:			_uquad = UARG ();
  804160:	25000017 	ldw	r20,0(r4)
  804164:	002b883a 	mov	r21,zero
  804168:	d8c00615 	stw	r3,24(sp)
  80416c:	003d1b06 	br	8035dc <___vfprintf_internal_r+0x8e8>
			_uquad = UARG ();
  804170:	25000017 	ldw	r20,0(r4)
  804174:	002b883a 	mov	r21,zero
  804178:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  80417c:	0005883a 	mov	r2,zero
  804180:	003c2806 	br	803224 <___vfprintf_internal_r+0x530>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
  804184:	18800017 	ldw	r2,0(r3)
  804188:	d8800915 	stw	r2,36(sp)
  80418c:	18800117 	ldw	r2,4(r3)
  804190:	d8800a15 	stw	r2,40(sp)
  804194:	003c5906 	br	8032fc <___vfprintf_internal_r+0x608>
			_uquad = SARG ();
  804198:	25000017 	ldw	r20,0(r4)
  80419c:	d8c00615 	stw	r3,24(sp)
  8041a0:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8041a4:	a805883a 	mov	r2,r21
  8041a8:	003cd706 	br	803508 <___vfprintf_internal_r+0x814>
			width = -width;
  8041ac:	0421c83a 	sub	r16,zero,r16
			width = GET_ARG (n, ap, int);
  8041b0:	d8800615 	stw	r2,24(sp)
  8041b4:	003d6306 	br	803744 <___vfprintf_internal_r+0xa50>
  8041b8:	202b883a 	mov	r21,r4
					PRINTANDPAD(cp, convbuf + ndig,
  8041bc:	057f4616 	blt	zero,r21,803ed8 <___vfprintf_internal_r+0x11e4>
  8041c0:	003f4f06 	br	803f00 <___vfprintf_internal_r+0x120c>
					if (expt < ndig || flags & ALT)
  8041c4:	d8800417 	ldw	r2,16(sp)
  8041c8:	1080004c 	andi	r2,r2,1
  8041cc:	103f531e 	bne	r2,zero,803f1c <___vfprintf_internal_r+0x1228>
					PRINTANDPAD (cp, convbuf + ndig,
  8041d0:	d9000817 	ldw	r4,32(sp)
  8041d4:	d9400717 	ldw	r5,28(sp)
  8041d8:	2545c83a 	sub	r2,r4,r21
  8041dc:	216bc83a 	sub	r21,r4,r5
  8041e0:	157f6e0e 	bge	r2,r21,803f9c <___vfprintf_internal_r+0x12a8>
  8041e4:	102b883a 	mov	r21,r2
  8041e8:	003f6c06 	br	803f9c <___vfprintf_internal_r+0x12a8>
					PRINT (cp, 1);
  8041ec:	d9801a04 	addi	r6,sp,104
  8041f0:	900b883a 	mov	r5,r18
  8041f4:	9809883a 	mov	r4,r19
  8041f8:	080a4340 	call	80a434 <__sprint_r>
  8041fc:	103bcc1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
				PRINT (expstr, expsize);
  804200:	da001b17 	ldw	r8,108(sp)
  804204:	d8c01c17 	ldw	r3,112(sp)
  804208:	dd802904 	addi	r22,sp,164
  80420c:	42000044 	addi	r8,r8,1
					PRINT (cp, 1);
  804210:	df002704 	addi	fp,sp,156
  804214:	003ebb06 	br	803d04 <___vfprintf_internal_r+0x1010>
					PRINTANDPAD(cp, convbuf + ndig,
  804218:	002b883a 	mov	r21,zero
  80421c:	003f3906 	br	803f04 <___vfprintf_internal_r+0x1210>
rflag:		ch = *fmt++;
  804220:	bf000043 	ldbu	fp,1(r23)
				flags |= QUADINT;
  804224:	63000814 	ori	r12,r12,32
				fmt++;
  804228:	bdc00044 	addi	r23,r23,1
  80422c:	e2c03fcc 	andi	r11,fp,255
  804230:	5ac0201c 	xori	r11,r11,128
  804234:	5affe004 	addi	r11,r11,-128
  804238:	003afa06 	br	802e24 <___vfprintf_internal_r+0x130>
						PRINT (decimal_point, decp_len);
  80423c:	d9801a04 	addi	r6,sp,104
  804240:	900b883a 	mov	r5,r18
  804244:	9809883a 	mov	r4,r19
  804248:	080a4340 	call	80a434 <__sprint_r>
  80424c:	103bb81e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  804250:	d8c01c17 	ldw	r3,112(sp)
						PRINT (decimal_point, decp_len);
  804254:	dd802704 	addi	r22,sp,156
  804258:	003dd006 	br	80399c <___vfprintf_internal_r+0xca8>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80425c:	408001f0 	cmpltui	r2,r8,7
  804260:	402b883a 	mov	r21,r8
  804264:	1001e726 	beq	r2,zero,804a04 <___vfprintf_internal_r+0x1d10>
				cp = "(null)";
  804268:	04402074 	movhi	r17,129
  80426c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  804270:	d8c00615 	stw	r3,24(sp)
				cp = "(null)";
  804274:	8c4ace04 	addi	r17,r17,11064
  804278:	003b6306 	br	803008 <___vfprintf_internal_r+0x314>
					PRINTANDPAD(cp, convbuf + ndig,
  80427c:	01c02074 	movhi	r7,129
  804280:	a9000450 	cmplti	r4,r21,17
  804284:	d8801b17 	ldw	r2,108(sp)
  804288:	39cad104 	addi	r7,r7,11076
  80428c:	2001c21e 	bne	r4,zero,804998 <___vfprintf_internal_r+0x1ca4>
  804290:	dc000e15 	stw	r16,56(sp)
  804294:	07000404 	movi	fp,16
  804298:	3821883a 	mov	r16,r7
  80429c:	00000406 	br	8042b0 <___vfprintf_internal_r+0x15bc>
  8042a0:	b5800204 	addi	r22,r22,8
  8042a4:	ad7ffc04 	addi	r21,r21,-16
  8042a8:	a9000448 	cmpgei	r4,r21,17
  8042ac:	2001b826 	beq	r4,zero,804990 <___vfprintf_internal_r+0x1c9c>
  8042b0:	10800044 	addi	r2,r2,1
  8042b4:	18c00404 	addi	r3,r3,16
  8042b8:	b4000015 	stw	r16,0(r22)
  8042bc:	b7000115 	stw	fp,4(r22)
  8042c0:	d8c01c15 	stw	r3,112(sp)
  8042c4:	d8801b15 	stw	r2,108(sp)
  8042c8:	11000208 	cmpgei	r4,r2,8
  8042cc:	203ff426 	beq	r4,zero,8042a0 <___vfprintf_internal_r+0x15ac>
  8042d0:	d9801a04 	addi	r6,sp,104
  8042d4:	900b883a 	mov	r5,r18
  8042d8:	9809883a 	mov	r4,r19
  8042dc:	080a4340 	call	80a434 <__sprint_r>
  8042e0:	103b931e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  8042e4:	d8c01c17 	ldw	r3,112(sp)
  8042e8:	d8801b17 	ldw	r2,108(sp)
  8042ec:	dd802704 	addi	r22,sp,156
  8042f0:	003fec06 	br	8042a4 <___vfprintf_internal_r+0x15b0>
			cp = buf + BUF;
  8042f4:	dc402704 	addi	r17,sp,156
  8042f8:	a805883a 	mov	r2,r21
  8042fc:	dc000715 	stw	r16,28(sp)
  804300:	902b883a 	mov	r21,r18
  804304:	8821883a 	mov	r16,r17
  804308:	db000415 	stw	r12,16(sp)
  80430c:	a023883a 	mov	r17,r20
  804310:	da000e15 	stw	r8,56(sp)
  804314:	9829883a 	mov	r20,r19
  804318:	1025883a 	mov	r18,r2
  80431c:	6827883a 	mov	r19,r13
					  *--cp = to_char (_uquad % 10);
  804320:	8809883a 	mov	r4,r17
  804324:	900b883a 	mov	r5,r18
  804328:	01800284 	movi	r6,10
  80432c:	000f883a 	mov	r7,zero
  804330:	080cd940 	call	80cd94 <__umoddi3>
  804334:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  804338:	8809883a 	mov	r4,r17
  80433c:	900b883a 	mov	r5,r18
  804340:	01800284 	movi	r6,10
  804344:	000f883a 	mov	r7,zero
					  *--cp = to_char (_uquad % 10);
  804348:	80bfffc5 	stb	r2,-1(r16)
					  _uquad /= 10;
  80434c:	080c7740 	call	80c774 <__udivdi3>
  804350:	900d883a 	mov	r6,r18
  804354:	880f883a 	mov	r7,r17
					  *--cp = to_char (_uquad % 10);
  804358:	843fffc4 	addi	r16,r16,-1
					  _uquad /= 10;
  80435c:	1023883a 	mov	r17,r2
  804360:	1825883a 	mov	r18,r3
					} while (_uquad != 0);
  804364:	303fee1e 	bne	r6,zero,804320 <___vfprintf_internal_r+0x162c>
  804368:	39c002a8 	cmpgeui	r7,r7,10
  80436c:	383fec1e 	bne	r7,zero,804320 <___vfprintf_internal_r+0x162c>
			size = buf + BUF - cp;
  804370:	8023883a 	mov	r17,r16
  804374:	d8802704 	addi	r2,sp,156
  804378:	981b883a 	mov	r13,r19
  80437c:	a825883a 	mov	r18,r21
  804380:	dc000717 	ldw	r16,28(sp)
  804384:	da000e17 	ldw	r8,56(sp)
  804388:	a027883a 	mov	r19,r20
  80438c:	146bc83a 	sub	r21,r2,r17
  804390:	003c6f06 	br	803550 <___vfprintf_internal_r+0x85c>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  804394:	d8800517 	ldw	r2,20(sp)
  804398:	18800015 	stw	r2,0(r3)
  80439c:	003a8906 	br	802dc4 <___vfprintf_internal_r+0xd0>
					PRINT (cp, 1);
  8043a0:	d9801a04 	addi	r6,sp,104
  8043a4:	900b883a 	mov	r5,r18
  8043a8:	9809883a 	mov	r4,r19
  8043ac:	080a4340 	call	80a434 <__sprint_r>
  8043b0:	103b5f1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
					PRINT (decimal_point, decp_len);
  8043b4:	d8c01c17 	ldw	r3,112(sp)
  8043b8:	dd401b17 	ldw	r21,108(sp)
					PRINT (cp, 1);
  8043bc:	df002704 	addi	fp,sp,156
  8043c0:	003e2b06 	br	803c70 <___vfprintf_internal_r+0xf7c>
					PRINT (decimal_point, decp_len);
  8043c4:	d9801a04 	addi	r6,sp,104
  8043c8:	900b883a 	mov	r5,r18
  8043cc:	9809883a 	mov	r4,r19
  8043d0:	080a4340 	call	80a434 <__sprint_r>
  8043d4:	103b561e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig - 1);
  8043d8:	d8c01c17 	ldw	r3,112(sp)
  8043dc:	dd401b17 	ldw	r21,108(sp)
					PRINT (decimal_point, decp_len);
  8043e0:	df002704 	addi	fp,sp,156
  8043e4:	003e2d06 	br	803c9c <___vfprintf_internal_r+0xfa8>
			PAD (width - realsz, blanks);
  8043e8:	d9801a04 	addi	r6,sp,104
  8043ec:	900b883a 	mov	r5,r18
  8043f0:	9809883a 	mov	r4,r19
  8043f4:	da001115 	stw	r8,68(sp)
  8043f8:	db400f15 	stw	r13,60(sp)
  8043fc:	db800e15 	stw	r14,56(sp)
  804400:	080a4340 	call	80a434 <__sprint_r>
  804404:	103b4a1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
			PRINT (&sign, 1);
  804408:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, blanks);
  80440c:	da001117 	ldw	r8,68(sp)
  804410:	db400f17 	ldw	r13,60(sp)
  804414:	db800e17 	ldw	r14,56(sp)
  804418:	dd802704 	addi	r22,sp,156
  80441c:	003b0706 	br	80303c <___vfprintf_internal_r+0x348>
					PRINT ("0", 1);
  804420:	d8801b17 	ldw	r2,108(sp)
  804424:	01002074 	movhi	r4,129
  804428:	210ad004 	addi	r4,r4,11072
  80442c:	10800044 	addi	r2,r2,1
  804430:	18c00044 	addi	r3,r3,1
  804434:	b1000015 	stw	r4,0(r22)
  804438:	01000044 	movi	r4,1
  80443c:	d8801b15 	stw	r2,108(sp)
  804440:	b1000115 	stw	r4,4(r22)
  804444:	d8c01c15 	stw	r3,112(sp)
  804448:	10800208 	cmpgei	r2,r2,8
  80444c:	1001641e 	bne	r2,zero,8049e0 <___vfprintf_internal_r+0x1cec>
  804450:	b5800204 	addi	r22,r22,8
					if (expt || ndig || flags & ALT) {
  804454:	2800bd1e 	bne	r5,zero,80474c <___vfprintf_internal_r+0x1a58>
  804458:	d8800417 	ldw	r2,16(sp)
  80445c:	d9000817 	ldw	r4,32(sp)
  804460:	1080004c 	andi	r2,r2,1
  804464:	1104b03a 	or	r2,r2,r4
  804468:	103b2026 	beq	r2,zero,8030ec <___vfprintf_internal_r+0x3f8>
						PRINT (decimal_point, decp_len);
  80446c:	d8800d17 	ldw	r2,52(sp)
  804470:	d9000b17 	ldw	r4,44(sp)
  804474:	b0800015 	stw	r2,0(r22)
  804478:	d8801b17 	ldw	r2,108(sp)
  80447c:	20c7883a 	add	r3,r4,r3
  804480:	b1000115 	stw	r4,4(r22)
  804484:	10800044 	addi	r2,r2,1
  804488:	d8c01c15 	stw	r3,112(sp)
  80448c:	d8801b15 	stw	r2,108(sp)
  804490:	11000208 	cmpgei	r4,r2,8
  804494:	2001771e 	bne	r4,zero,804a74 <___vfprintf_internal_r+0x1d80>
  804498:	b5800204 	addi	r22,r22,8
						PRINT (cp, ndig);
  80449c:	d9000817 	ldw	r4,32(sp)
  8044a0:	10800044 	addi	r2,r2,1
  8044a4:	d8801b15 	stw	r2,108(sp)
  8044a8:	20c7883a 	add	r3,r4,r3
  8044ac:	b4400015 	stw	r17,0(r22)
  8044b0:	b1000115 	stw	r4,4(r22)
  8044b4:	d8c01c15 	stw	r3,112(sp)
  8044b8:	10800208 	cmpgei	r2,r2,8
  8044bc:	103b0a26 	beq	r2,zero,8030e8 <___vfprintf_internal_r+0x3f4>
  8044c0:	003e1906 	br	803d28 <___vfprintf_internal_r+0x1034>
  8044c4:	8825883a 	mov	r18,r17
  8044c8:	003b1906 	br	803130 <___vfprintf_internal_r+0x43c>
			if (isnan (_fpvalue)) {
  8044cc:	d9000917 	ldw	r4,36(sp)
  8044d0:	d9400a17 	ldw	r5,40(sp)
  8044d4:	da000615 	stw	r8,24(sp)
  8044d8:	200d883a 	mov	r6,r4
  8044dc:	280f883a 	mov	r7,r5
  8044e0:	db000415 	stw	r12,16(sp)
  8044e4:	080f9dc0 	call	80f9dc <__unorddf2>
  8044e8:	db000417 	ldw	r12,16(sp)
  8044ec:	da000617 	ldw	r8,24(sp)
  8044f0:	1002061e 	bne	r2,zero,804d0c <___vfprintf_internal_r+0x2018>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8044f4:	057ff7c4 	movi	r21,-33
			if (prec == -1) {
  8044f8:	40bfffe0 	cmpeqi	r2,r8,-1
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8044fc:	e56a703a 	and	r21,fp,r21
			if (prec == -1) {
  804500:	1001b41e 	bne	r2,zero,804bd4 <___vfprintf_internal_r+0x1ee0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  804504:	a88011d8 	cmpnei	r2,r21,71
  804508:	10015726 	beq	r2,zero,804a68 <___vfprintf_internal_r+0x1d74>
			flags |= FPT;
  80450c:	60804014 	ori	r2,r12,256
  804510:	d8800415 	stw	r2,16(sp)
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
  804514:	d8800a17 	ldw	r2,40(sp)
  804518:	10012d16 	blt	r2,zero,8049d0 <___vfprintf_internal_r+0x1cdc>
  80451c:	dd000a17 	ldw	r20,40(sp)
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
  804520:	d8000605 	stb	zero,24(sp)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
  804524:	e08019a0 	cmpeqi	r2,fp,102
  804528:	d8800f15 	stw	r2,60(sp)
  80452c:	1000d21e 	bne	r2,zero,804878 <___vfprintf_internal_r+0x1b84>
  804530:	e08011a0 	cmpeqi	r2,fp,70
  804534:	1000d01e 	bne	r2,zero,804878 <___vfprintf_internal_r+0x1b84>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
  804538:	a8801158 	cmpnei	r2,r21,69
  80453c:	10016226 	beq	r2,zero,804ac8 <___vfprintf_internal_r+0x1dd4>
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804540:	d8801804 	addi	r2,sp,96
  804544:	d8800315 	stw	r2,12(sp)
  804548:	d9400917 	ldw	r5,36(sp)
  80454c:	d8801504 	addi	r2,sp,84
  804550:	d8800215 	stw	r2,8(sp)
  804554:	d8801404 	addi	r2,sp,80
  804558:	da000015 	stw	r8,0(sp)
  80455c:	9809883a 	mov	r4,r19
  804560:	d8800115 	stw	r2,4(sp)
  804564:	01c00084 	movi	r7,2
  804568:	a00d883a 	mov	r6,r20
  80456c:	db000815 	stw	r12,32(sp)
  804570:	da000715 	stw	r8,28(sp)
  804574:	08052500 	call	805250 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804578:	da000717 	ldw	r8,28(sp)
  80457c:	e10019d8 	cmpnei	r4,fp,103
  804580:	db000817 	ldw	r12,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804584:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804588:	4007883a 	mov	r3,r8
  80458c:	2001621e 	bne	r4,zero,804b18 <___vfprintf_internal_r+0x1e24>
  804590:	6080004c 	andi	r2,r12,1
  804594:	1001621e 	bne	r2,zero,804b20 <___vfprintf_internal_r+0x1e2c>
				if (expt <= -4 || expt > prec)
  804598:	d8801417 	ldw	r2,80(sp)
			if (ch == 'g' || ch == 'G') {
  80459c:	ad4011e0 	cmpeqi	r21,r21,71
				if (expt <= -4 || expt > prec)
  8045a0:	d8800715 	stw	r2,28(sp)
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
  8045a4:	d8801817 	ldw	r2,96(sp)
  8045a8:	1445c83a 	sub	r2,r2,r17
  8045ac:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  8045b0:	a8000526 	beq	r21,zero,8045c8 <___vfprintf_internal_r+0x18d4>
				if (expt <= -4 || expt > prec)
  8045b4:	d8c00717 	ldw	r3,28(sp)
  8045b8:	18bfff50 	cmplti	r2,r3,-3
  8045bc:	1000011e 	bne	r2,zero,8045c4 <___vfprintf_internal_r+0x18d0>
  8045c0:	40c1670e 	bge	r8,r3,804b60 <___vfprintf_internal_r+0x1e6c>
					ch -= 2; /* 'e' or 'E' */
  8045c4:	e73fff84 	addi	fp,fp,-2
				--expt;
  8045c8:	d8800717 	ldw	r2,28(sp)
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
  8045cc:	df001645 	stb	fp,89(sp)
				--expt;
  8045d0:	157fffc4 	addi	r21,r2,-1
  8045d4:	dd401415 	stw	r21,80(sp)
	if (exp < 0) {
  8045d8:	a801d416 	blt	r21,zero,804d2c <___vfprintf_internal_r+0x2038>
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
  8045dc:	00800ac4 	movi	r2,43
  8045e0:	d8801685 	stb	r2,90(sp)
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
  8045e4:	a8800290 	cmplti	r2,r21,10
  8045e8:	1001c11e 	bne	r2,zero,804cf0 <___vfprintf_internal_r+0x1ffc>
	t = expbuf + MAXEXPLEN;
  8045ec:	d98019c4 	addi	r6,sp,103
  8045f0:	9029883a 	mov	r20,r18
  8045f4:	dc400715 	stw	r17,28(sp)
  8045f8:	8025883a 	mov	r18,r16
  8045fc:	db000f15 	stw	r12,60(sp)
  804600:	3021883a 	mov	r16,r6
		do {
			*--t = to_char (exp % 10);
  804604:	a809883a 	mov	r4,r21
  804608:	01400284 	movi	r5,10
  80460c:	080d3d80 	call	80d3d8 <__modsi3>
  804610:	10800c04 	addi	r2,r2,48
		} while ((exp /= 10) > 9);
  804614:	a809883a 	mov	r4,r21
			*--t = to_char (exp % 10);
  804618:	80bfffc5 	stb	r2,-1(r16)
		} while ((exp /= 10) > 9);
  80461c:	01400284 	movi	r5,10
  804620:	080d3580 	call	80d358 <__divsi3>
  804624:	a9001908 	cmpgei	r4,r21,100
  804628:	8023883a 	mov	r17,r16
  80462c:	102b883a 	mov	r21,r2
			*--t = to_char (exp % 10);
  804630:	843fffc4 	addi	r16,r16,-1
		} while ((exp /= 10) > 9);
  804634:	203ff31e 	bne	r4,zero,804604 <___vfprintf_internal_r+0x1910>
		*--t = to_char (exp);
  804638:	800d883a 	mov	r6,r16
  80463c:	11000c04 	addi	r4,r2,48
  804640:	9021883a 	mov	r16,r18
  804644:	a025883a 	mov	r18,r20
  804648:	8829883a 	mov	r20,r17
  80464c:	a0bfff84 	addi	r2,r20,-2
  804650:	313fffc5 	stb	r4,-1(r6)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804654:	d8c019c4 	addi	r3,sp,103
		*--t = to_char (exp);
  804658:	db000f17 	ldw	r12,60(sp)
  80465c:	dc400717 	ldw	r17,28(sp)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804660:	10c1d62e 	bgeu	r2,r3,804dbc <___vfprintf_internal_r+0x20c8>
  804664:	d8c016c4 	addi	r3,sp,91
  804668:	00000106 	br	804670 <___vfprintf_internal_r+0x197c>
  80466c:	11000003 	ldbu	r4,0(r2)
  804670:	19000005 	stb	r4,0(r3)
  804674:	10800044 	addi	r2,r2,1
  804678:	d90019c4 	addi	r4,sp,103
  80467c:	18c00044 	addi	r3,r3,1
  804680:	113ffa1e 	bne	r2,r4,80466c <___vfprintf_internal_r+0x1978>
  804684:	d8801a44 	addi	r2,sp,105
  804688:	d8c016c4 	addi	r3,sp,91
  80468c:	1505c83a 	sub	r2,r2,r20
  804690:	1885883a 	add	r2,r3,r2
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
  804694:	d8c01644 	addi	r3,sp,89
  804698:	10c5c83a 	sub	r2,r2,r3
  80469c:	d8801015 	stw	r2,64(sp)
				if (ndig > 1 || flags & ALT)
  8046a0:	d8c00817 	ldw	r3,32(sp)
				size = expsize + ndig;
  8046a4:	d9001017 	ldw	r4,64(sp)
				if (ndig > 1 || flags & ALT)
  8046a8:	18800088 	cmpgei	r2,r3,2
				size = expsize + ndig;
  8046ac:	192b883a 	add	r21,r3,r4
				if (ndig > 1 || flags & ALT)
  8046b0:	1001aa26 	beq	r2,zero,804d5c <___vfprintf_internal_r+0x2068>
					size += decp_len;
  8046b4:	d8800b17 	ldw	r2,44(sp)
  8046b8:	a8ab883a 	add	r21,r21,r2
		realsz = dprec > size ? dprec : size;
  8046bc:	a829883a 	mov	r20,r21
  8046c0:	a800010e 	bge	r21,zero,8046c8 <___vfprintf_internal_r+0x19d4>
  8046c4:	0029883a 	mov	r20,zero
		lead = 0;
  8046c8:	d8000715 	stw	zero,28(sp)
  8046cc:	00009d06 	br	804944 <___vfprintf_internal_r+0x1c50>
  8046d0:	880f883a 	mov	r7,r17
					PRINTANDPAD (cp, convbuf + ndig,
  8046d4:	10800044 	addi	r2,r2,1
  8046d8:	1d47883a 	add	r3,r3,r21
  8046dc:	b1c00015 	stw	r7,0(r22)
  8046e0:	003a7c06 	br	8030d4 <___vfprintf_internal_r+0x3e0>
					PRINT ("0", 1);
  8046e4:	d9801a04 	addi	r6,sp,104
  8046e8:	900b883a 	mov	r5,r18
  8046ec:	9809883a 	mov	r4,r19
  8046f0:	080a4340 	call	80a434 <__sprint_r>
  8046f4:	103a8e1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
						PRINT (decimal_point, decp_len);
  8046f8:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  8046fc:	dd802704 	addi	r22,sp,156
  804700:	003c9706 	br	803960 <___vfprintf_internal_r+0xc6c>
			PAD (width - realsz, zeroes);
  804704:	d9801a04 	addi	r6,sp,104
  804708:	900b883a 	mov	r5,r18
  80470c:	9809883a 	mov	r4,r19
  804710:	da000e15 	stw	r8,56(sp)
  804714:	080a4340 	call	80a434 <__sprint_r>
  804718:	103a851e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  80471c:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, zeroes);
  804720:	da000e17 	ldw	r8,56(sp)
  804724:	dd802704 	addi	r22,sp,156
  804728:	003a6106 	br	8030b0 <___vfprintf_internal_r+0x3bc>
				size = strlen (cp);
  80472c:	8809883a 	mov	r4,r17
  804730:	db000415 	stw	r12,16(sp)
  804734:	d8c00615 	stw	r3,24(sp)
  804738:	0802c5c0 	call	802c5c <strlen>
  80473c:	db000417 	ldw	r12,16(sp)
  804740:	102b883a 	mov	r21,r2
  804744:	1029883a 	mov	r20,r2
  804748:	003a2f06 	br	803008 <___vfprintf_internal_r+0x314>
						PRINT (decimal_point, decp_len);
  80474c:	d8800d17 	ldw	r2,52(sp)
  804750:	d9000b17 	ldw	r4,44(sp)
  804754:	b0800015 	stw	r2,0(r22)
  804758:	d8801b17 	ldw	r2,108(sp)
  80475c:	20c7883a 	add	r3,r4,r3
  804760:	b1000115 	stw	r4,4(r22)
  804764:	10800044 	addi	r2,r2,1
  804768:	d8c01c15 	stw	r3,112(sp)
  80476c:	d8801b15 	stw	r2,108(sp)
  804770:	11000208 	cmpgei	r4,r2,8
  804774:	2000bf1e 	bne	r4,zero,804a74 <___vfprintf_internal_r+0x1d80>
  804778:	b5800204 	addi	r22,r22,8
						PAD (-expt, zeroes);
  80477c:	283f470e 	bge	r5,zero,80449c <___vfprintf_internal_r+0x17a8>
  804780:	01c02074 	movhi	r7,129
  804784:	293ffc08 	cmpgei	r4,r5,-16
  804788:	39cad104 	addi	r7,r7,11076
  80478c:	0179c83a 	sub	fp,zero,r5
  804790:	20013f1e 	bne	r4,zero,804c90 <___vfprintf_internal_r+0x1f9c>
  804794:	dc000715 	stw	r16,28(sp)
  804798:	05400404 	movi	r21,16
  80479c:	9021883a 	mov	r16,r18
  8047a0:	3825883a 	mov	r18,r7
  8047a4:	00000406 	br	8047b8 <___vfprintf_internal_r+0x1ac4>
  8047a8:	b5800204 	addi	r22,r22,8
  8047ac:	e73ffc04 	addi	fp,fp,-16
  8047b0:	e1800448 	cmpgei	r6,fp,17
  8047b4:	30013326 	beq	r6,zero,804c84 <___vfprintf_internal_r+0x1f90>
  8047b8:	10800044 	addi	r2,r2,1
  8047bc:	18c00404 	addi	r3,r3,16
  8047c0:	b4800015 	stw	r18,0(r22)
  8047c4:	b5400115 	stw	r21,4(r22)
  8047c8:	d8c01c15 	stw	r3,112(sp)
  8047cc:	d8801b15 	stw	r2,108(sp)
  8047d0:	11800208 	cmpgei	r6,r2,8
  8047d4:	303ff426 	beq	r6,zero,8047a8 <___vfprintf_internal_r+0x1ab4>
  8047d8:	d9801a04 	addi	r6,sp,104
  8047dc:	800b883a 	mov	r5,r16
  8047e0:	9809883a 	mov	r4,r19
  8047e4:	080a4340 	call	80a434 <__sprint_r>
  8047e8:	1001721e 	bne	r2,zero,804db4 <___vfprintf_internal_r+0x20c0>
  8047ec:	d8c01c17 	ldw	r3,112(sp)
  8047f0:	d8801b17 	ldw	r2,108(sp)
  8047f4:	dd802704 	addi	r22,sp,156
  8047f8:	003fec06 	br	8047ac <___vfprintf_internal_r+0x1ab8>
						PAD (ndig - 1, zeroes);
  8047fc:	800f883a 	mov	r7,r16
  804800:	dc000717 	ldw	r16,28(sp)
  804804:	8817883a 	mov	r11,r17
  804808:	aa000044 	addi	r8,r21,1
  80480c:	e0800204 	addi	r2,fp,8
  804810:	1ac7883a 	add	r3,r3,r11
  804814:	e1c00015 	stw	r7,0(fp)
  804818:	e2c00115 	stw	r11,4(fp)
  80481c:	d8c01c15 	stw	r3,112(sp)
  804820:	da001b15 	stw	r8,108(sp)
  804824:	41000208 	cmpgei	r4,r8,8
  804828:	203e701e 	bne	r4,zero,8041ec <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  80482c:	42000044 	addi	r8,r8,1
  804830:	15800204 	addi	r22,r2,8
						PAD (ndig - 1, zeroes);
  804834:	1039883a 	mov	fp,r2
  804838:	003d3206 	br	803d04 <___vfprintf_internal_r+0x1010>
			_uquad = SARG ();
  80483c:	d8800617 	ldw	r2,24(sp)
  804840:	d8c00615 	stw	r3,24(sp)
  804844:	15000017 	ldw	r20,0(r2)
  804848:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  80484c:	a805883a 	mov	r2,r21
  804850:	003b2d06 	br	803508 <___vfprintf_internal_r+0x814>
			_uquad = UARG ();
  804854:	d8800617 	ldw	r2,24(sp)
  804858:	002b883a 	mov	r21,zero
  80485c:	d8c00615 	stw	r3,24(sp)
  804860:	15000017 	ldw	r20,0(r2)
			base = OCT;
  804864:	0005883a 	mov	r2,zero
  804868:	003a6e06 	br	803224 <___vfprintf_internal_r+0x530>
					cp = "INF";
  80486c:	04402074 	movhi	r17,129
  804870:	8c4ac004 	addi	r17,r17,11008
				flags &= ~ZEROPAD;
  804874:	003ac606 	br	803390 <___vfprintf_internal_r+0x69c>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804878:	d8801804 	addi	r2,sp,96
  80487c:	d8800315 	stw	r2,12(sp)
  804880:	d9400917 	ldw	r5,36(sp)
  804884:	d8801504 	addi	r2,sp,84
  804888:	d8800215 	stw	r2,8(sp)
  80488c:	d8801404 	addi	r2,sp,80
  804890:	da000015 	stw	r8,0(sp)
  804894:	d8800115 	stw	r2,4(sp)
  804898:	01c000c4 	movi	r7,3
  80489c:	a00d883a 	mov	r6,r20
  8048a0:	9809883a 	mov	r4,r19
  8048a4:	db000815 	stw	r12,32(sp)
  8048a8:	da000715 	stw	r8,28(sp)
  8048ac:	08052500 	call	805250 <_dtoa_r>
		bp = digits + ndigits;
  8048b0:	da000717 	ldw	r8,28(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8048b4:	1023883a 	mov	r17,r2
		bp = digits + ndigits;
  8048b8:	db000817 	ldw	r12,32(sp)
  8048bc:	1207883a 	add	r3,r2,r8
			if (*digits == '0' && value)
  8048c0:	88800007 	ldb	r2,0(r17)
  8048c4:	10800c20 	cmpeqi	r2,r2,48
  8048c8:	1000571e 	bne	r2,zero,804a28 <___vfprintf_internal_r+0x1d34>
			bp += *decpt;
  8048cc:	d8801417 	ldw	r2,80(sp)
  8048d0:	1893883a 	add	r9,r3,r2
		if (value == 0)	/* kludge for __dtoa irregularity */
  8048d4:	d9000917 	ldw	r4,36(sp)
  8048d8:	000d883a 	mov	r6,zero
  8048dc:	000f883a 	mov	r7,zero
  8048e0:	a00b883a 	mov	r5,r20
  8048e4:	da401115 	stw	r9,68(sp)
  8048e8:	da000815 	stw	r8,32(sp)
  8048ec:	db000715 	stw	r12,28(sp)
  8048f0:	080e72c0 	call	80e72c <__eqdf2>
  8048f4:	db000717 	ldw	r12,28(sp)
  8048f8:	da000817 	ldw	r8,32(sp)
  8048fc:	da401117 	ldw	r9,68(sp)
  804900:	1000891e 	bne	r2,zero,804b28 <___vfprintf_internal_r+0x1e34>
  804904:	4805883a 	mov	r2,r9
				if (expt <= -4 || expt > prec)
  804908:	d8c01417 	ldw	r3,80(sp)
	*length = rve - digits;
  80490c:	1445c83a 	sub	r2,r2,r17
			if (ch == 'g' || ch == 'G') {
  804910:	ad4011d8 	cmpnei	r21,r21,71
				if (expt <= -4 || expt > prec)
  804914:	d8c00715 	stw	r3,28(sp)
	*length = rve - digits;
  804918:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  80491c:	a83f2526 	beq	r21,zero,8045b4 <___vfprintf_internal_r+0x18c0>
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
  804920:	d8800f17 	ldw	r2,60(sp)
  804924:	103f2826 	beq	r2,zero,8045c8 <___vfprintf_internal_r+0x18d4>
					if (expt > 0) {
  804928:	d8c00717 	ldw	r3,28(sp)
  80492c:	6080004c 	andi	r2,r12,1
  804930:	1204b03a 	or	r2,r2,r8
  804934:	00c1140e 	bge	zero,r3,804d88 <___vfprintf_internal_r+0x2094>
						if (prec || flags & ALT)
  804938:	1001011e 	bne	r2,zero,804d40 <___vfprintf_internal_r+0x204c>
  80493c:	dd400717 	ldw	r21,28(sp)
  804940:	a829883a 	mov	r20,r21
			if (softsign)
  804944:	d8800607 	ldb	r2,24(sp)
  804948:	10008026 	beq	r2,zero,804b4c <___vfprintf_internal_r+0x1e58>
				sign = '-';
  80494c:	00800b44 	movi	r2,45
  804950:	d8801345 	stb	r2,77(sp)
  804954:	d8800e17 	ldw	r2,56(sp)
		dprec = 0;
  804958:	0011883a 	mov	r8,zero
				sign = '-';
  80495c:	d8800615 	stw	r2,24(sp)
  804960:	003b0306 	br	803570 <___vfprintf_internal_r+0x87c>
			_uquad = UARG ();
  804964:	d8800617 	ldw	r2,24(sp)
  804968:	002b883a 	mov	r21,zero
  80496c:	d8c00615 	stw	r3,24(sp)
  804970:	15000017 	ldw	r20,0(r2)
			base = DEC;
  804974:	00800044 	movi	r2,1
  804978:	003a2a06 	br	803224 <___vfprintf_internal_r+0x530>
hex:			_uquad = UARG ();
  80497c:	d8800617 	ldw	r2,24(sp)
  804980:	002b883a 	mov	r21,zero
  804984:	d8c00615 	stw	r3,24(sp)
  804988:	15000017 	ldw	r20,0(r2)
  80498c:	003b1306 	br	8035dc <___vfprintf_internal_r+0x8e8>
  804990:	800f883a 	mov	r7,r16
  804994:	dc000e17 	ldw	r16,56(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804998:	10800044 	addi	r2,r2,1
  80499c:	1d47883a 	add	r3,r3,r21
  8049a0:	d8801b15 	stw	r2,108(sp)
  8049a4:	b1c00015 	stw	r7,0(r22)
  8049a8:	b5400115 	stw	r21,4(r22)
  8049ac:	d8c01c15 	stw	r3,112(sp)
  8049b0:	10800208 	cmpgei	r2,r2,8
  8049b4:	10003a1e 	bne	r2,zero,804aa0 <___vfprintf_internal_r+0x1dac>
  8049b8:	b5800204 	addi	r22,r22,8
  8049bc:	003d5406 	br	803f10 <___vfprintf_internal_r+0x121c>
					sign = '-';
  8049c0:	00800b44 	movi	r2,45
  8049c4:	d8801345 	stb	r2,77(sp)
  8049c8:	03400b44 	movi	r13,45
  8049cc:	003a6c06 	br	803380 <___vfprintf_internal_r+0x68c>
		value = -value;
  8049d0:	1520003c 	xorhi	r20,r2,32768
		*sign = '-';
  8049d4:	00800b44 	movi	r2,45
  8049d8:	d8800605 	stb	r2,24(sp)
  8049dc:	003ed106 	br	804524 <___vfprintf_internal_r+0x1830>
					PRINT ("0", 1);
  8049e0:	d9801a04 	addi	r6,sp,104
  8049e4:	900b883a 	mov	r5,r18
  8049e8:	9809883a 	mov	r4,r19
  8049ec:	080a4340 	call	80a434 <__sprint_r>
  8049f0:	1039cf1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
					if (expt || ndig || flags & ALT) {
  8049f4:	d9401417 	ldw	r5,80(sp)
						PRINT (decimal_point, decp_len);
  8049f8:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  8049fc:	dd802704 	addi	r22,sp,156
  804a00:	003e9406 	br	804454 <___vfprintf_internal_r+0x1760>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  804a04:	05400184 	movi	r21,6
  804a08:	003e1706 	br	804268 <___vfprintf_internal_r+0x1574>
  804a0c:	d9401345 	stb	r5,77(sp)
  804a10:	00397706 	br	802ff0 <___vfprintf_internal_r+0x2fc>
	FLUSH ();
  804a14:	d9801a04 	addi	r6,sp,104
  804a18:	900b883a 	mov	r5,r18
  804a1c:	9809883a 	mov	r4,r19
  804a20:	080a4340 	call	80a434 <__sprint_r>
  804a24:	0039c206 	br	803130 <___vfprintf_internal_r+0x43c>
			if (*digits == '0' && value)
  804a28:	d9000917 	ldw	r4,36(sp)
  804a2c:	000d883a 	mov	r6,zero
  804a30:	000f883a 	mov	r7,zero
  804a34:	a00b883a 	mov	r5,r20
  804a38:	d8c01115 	stw	r3,68(sp)
  804a3c:	da000815 	stw	r8,32(sp)
  804a40:	db000715 	stw	r12,28(sp)
  804a44:	080e72c0 	call	80e72c <__eqdf2>
  804a48:	db000717 	ldw	r12,28(sp)
  804a4c:	da000817 	ldw	r8,32(sp)
  804a50:	d8c01117 	ldw	r3,68(sp)
  804a54:	103f9d26 	beq	r2,zero,8048cc <___vfprintf_internal_r+0x1bd8>
				*decpt = -ndigits + 1;
  804a58:	00800044 	movi	r2,1
  804a5c:	1205c83a 	sub	r2,r2,r8
  804a60:	d8801415 	stw	r2,80(sp)
  804a64:	003f9a06 	br	8048d0 <___vfprintf_internal_r+0x1bdc>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  804a68:	403ea81e 	bne	r8,zero,80450c <___vfprintf_internal_r+0x1818>
				prec = 1;
  804a6c:	02000044 	movi	r8,1
  804a70:	003ea606 	br	80450c <___vfprintf_internal_r+0x1818>
						PRINT (decimal_point, decp_len);
  804a74:	d9801a04 	addi	r6,sp,104
  804a78:	900b883a 	mov	r5,r18
  804a7c:	9809883a 	mov	r4,r19
  804a80:	080a4340 	call	80a434 <__sprint_r>
  804a84:	1039aa1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
						PAD (-expt, zeroes);
  804a88:	d9401417 	ldw	r5,80(sp)
						PRINT (cp, ndig);
  804a8c:	d8c01c17 	ldw	r3,112(sp)
  804a90:	d8801b17 	ldw	r2,108(sp)
						PRINT (decimal_point, decp_len);
  804a94:	dd802704 	addi	r22,sp,156
						PAD (-expt, zeroes);
  804a98:	283e800e 	bge	r5,zero,80449c <___vfprintf_internal_r+0x17a8>
  804a9c:	003f3806 	br	804780 <___vfprintf_internal_r+0x1a8c>
					PRINTANDPAD(cp, convbuf + ndig,
  804aa0:	d9801a04 	addi	r6,sp,104
  804aa4:	900b883a 	mov	r5,r18
  804aa8:	9809883a 	mov	r4,r19
  804aac:	080a4340 	call	80a434 <__sprint_r>
  804ab0:	10399f1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804ab4:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804ab8:	dd802704 	addi	r22,sp,156
  804abc:	003d1406 	br	803f10 <___vfprintf_internal_r+0x121c>
				flags &= ~ZEROPAD;
  804ac0:	db000417 	ldw	r12,16(sp)
  804ac4:	003a9d06 	br	80353c <___vfprintf_internal_r+0x848>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804ac8:	d8801804 	addi	r2,sp,96
  804acc:	d8800315 	stw	r2,12(sp)
  804ad0:	d9400917 	ldw	r5,36(sp)
  804ad4:	d8801504 	addi	r2,sp,84
			ndigits++;
  804ad8:	40c00044 	addi	r3,r8,1
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804adc:	d8800215 	stw	r2,8(sp)
  804ae0:	d8801404 	addi	r2,sp,80
  804ae4:	d8c00015 	stw	r3,0(sp)
  804ae8:	d8800115 	stw	r2,4(sp)
  804aec:	01c00084 	movi	r7,2
  804af0:	a00d883a 	mov	r6,r20
  804af4:	9809883a 	mov	r4,r19
  804af8:	db001115 	stw	r12,68(sp)
			ndigits++;
  804afc:	da000815 	stw	r8,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804b00:	d8c00715 	stw	r3,28(sp)
  804b04:	08052500 	call	805250 <_dtoa_r>
  804b08:	d8c00717 	ldw	r3,28(sp)
  804b0c:	da000817 	ldw	r8,32(sp)
  804b10:	db001117 	ldw	r12,68(sp)
  804b14:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  804b18:	e08011d8 	cmpnei	r2,fp,71
  804b1c:	103e9c26 	beq	r2,zero,804590 <___vfprintf_internal_r+0x189c>
		bp = digits + ndigits;
  804b20:	88d3883a 	add	r9,r17,r3
		if (ch == 'f' || ch == 'F') {
  804b24:	003f6b06 	br	8048d4 <___vfprintf_internal_r+0x1be0>
		while (rve < bp)
  804b28:	d8801817 	ldw	r2,96(sp)
  804b2c:	127f762e 	bgeu	r2,r9,804908 <___vfprintf_internal_r+0x1c14>
			*rve++ = '0';
  804b30:	01000c04 	movi	r4,48
  804b34:	10c00044 	addi	r3,r2,1
  804b38:	d8c01815 	stw	r3,96(sp)
  804b3c:	11000005 	stb	r4,0(r2)
		while (rve < bp)
  804b40:	d8801817 	ldw	r2,96(sp)
  804b44:	127ffb36 	bltu	r2,r9,804b34 <___vfprintf_internal_r+0x1e40>
  804b48:	003f6f06 	br	804908 <___vfprintf_internal_r+0x1c14>
		if (sign)
  804b4c:	d8800e17 	ldw	r2,56(sp)
  804b50:	db401343 	ldbu	r13,77(sp)
		dprec = 0;
  804b54:	0011883a 	mov	r8,zero
		if (sign)
  804b58:	d8800615 	stw	r2,24(sp)
  804b5c:	003a8006 	br	803560 <___vfprintf_internal_r+0x86c>
				} else if (expt >= ndig) { /* fixed g fmt */
  804b60:	d8800717 	ldw	r2,28(sp)
  804b64:	d8c00817 	ldw	r3,32(sp)
  804b68:	10c02b16 	blt	r2,r3,804c18 <___vfprintf_internal_r+0x1f24>
					if (flags & ALT)
  804b6c:	6300004c 	andi	r12,r12,1
  804b70:	6000581e 	bne	r12,zero,804cd4 <___vfprintf_internal_r+0x1fe0>
		realsz = dprec > size ? dprec : size;
  804b74:	1029883a 	mov	r20,r2
  804b78:	1000010e 	bge	r2,zero,804b80 <___vfprintf_internal_r+0x1e8c>
  804b7c:	0029883a 	mov	r20,zero
  804b80:	dd400717 	ldw	r21,28(sp)
  804b84:	070019c4 	movi	fp,103
  804b88:	003f6e06 	br	804944 <___vfprintf_internal_r+0x1c50>
					    PRINT (decimal_point, decp_len);
  804b8c:	d9801a04 	addi	r6,sp,104
  804b90:	900b883a 	mov	r5,r18
  804b94:	9809883a 	mov	r4,r19
  804b98:	080a4340 	call	80a434 <__sprint_r>
  804b9c:	1039641e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
					PRINTANDPAD (cp, convbuf + ndig,
  804ba0:	dd401417 	ldw	r21,80(sp)
  804ba4:	d8c01c17 	ldw	r3,112(sp)
					    PRINT (decimal_point, decp_len);
  804ba8:	dd802704 	addi	r22,sp,156
  804bac:	003ce706 	br	803f4c <___vfprintf_internal_r+0x1258>
					PRINTANDPAD(cp, convbuf + ndig,
  804bb0:	d9801a04 	addi	r6,sp,104
  804bb4:	900b883a 	mov	r5,r18
  804bb8:	9809883a 	mov	r4,r19
  804bbc:	080a4340 	call	80a434 <__sprint_r>
  804bc0:	10395b1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804bc4:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804bc8:	dd802704 	addi	r22,sp,156
  804bcc:	a83ccd0e 	bge	r21,zero,803f04 <___vfprintf_internal_r+0x1210>
  804bd0:	003d9106 	br	804218 <___vfprintf_internal_r+0x1524>
				prec = DEFPREC;
  804bd4:	02000184 	movi	r8,6
  804bd8:	003e4c06 	br	80450c <___vfprintf_internal_r+0x1818>
					PRINTANDPAD (cp, convbuf + ndig,
  804bdc:	d9801a04 	addi	r6,sp,104
  804be0:	900b883a 	mov	r5,r18
  804be4:	9809883a 	mov	r4,r19
  804be8:	080a4340 	call	80a434 <__sprint_r>
  804bec:	1039501e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
  804bf0:	d8801417 	ldw	r2,80(sp)
  804bf4:	d9000817 	ldw	r4,32(sp)
		FLUSH ();	/* copy out the I/O vectors */
  804bf8:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  804bfc:	dd802704 	addi	r22,sp,156
  804c00:	2085c83a 	sub	r2,r4,r2
  804c04:	003ce506 	br	803f9c <___vfprintf_internal_r+0x12a8>
  804c08:	4029883a 	mov	r20,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  804c0c:	d8c00615 	stw	r3,24(sp)
  804c10:	402b883a 	mov	r21,r8
  804c14:	0038fc06 	br	803008 <___vfprintf_internal_r+0x314>
					size = ndig + decp_len;
  804c18:	d8800817 	ldw	r2,32(sp)
  804c1c:	d8c00b17 	ldw	r3,44(sp)
  804c20:	10eb883a 	add	r21,r2,r3
					if (expt <= 0)
  804c24:	d8800717 	ldw	r2,28(sp)
  804c28:	00800316 	blt	zero,r2,804c38 <___vfprintf_internal_r+0x1f44>
						size += 1 - expt;
  804c2c:	d8800717 	ldw	r2,28(sp)
  804c30:	a8abc83a 	sub	r21,r21,r2
  804c34:	ad400044 	addi	r21,r21,1
		realsz = dprec > size ? dprec : size;
  804c38:	a829883a 	mov	r20,r21
  804c3c:	a8002a16 	blt	r21,zero,804ce8 <___vfprintf_internal_r+0x1ff4>
  804c40:	070019c4 	movi	fp,103
  804c44:	003f3f06 	br	804944 <___vfprintf_internal_r+0x1c50>
  804c48:	d9401345 	stb	r5,77(sp)
  804c4c:	003ae006 	br	8037d0 <___vfprintf_internal_r+0xadc>
  804c50:	d9401345 	stb	r5,77(sp)
  804c54:	003a5706 	br	8035b4 <___vfprintf_internal_r+0x8c0>
  804c58:	d9401345 	stb	r5,77(sp)
  804c5c:	003b1706 	br	8038bc <___vfprintf_internal_r+0xbc8>
  804c60:	d9401345 	stb	r5,77(sp)
  804c64:	003a2006 	br	8034e8 <___vfprintf_internal_r+0x7f4>
  804c68:	d9401345 	stb	r5,77(sp)
  804c6c:	003a6606 	br	803608 <___vfprintf_internal_r+0x914>
  804c70:	d9401345 	stb	r5,77(sp)
  804c74:	00399706 	br	8032d4 <___vfprintf_internal_r+0x5e0>
		return (EOF);
  804c78:	00bfffc4 	movi	r2,-1
  804c7c:	d8800515 	stw	r2,20(sp)
  804c80:	00392e06 	br	80313c <___vfprintf_internal_r+0x448>
  804c84:	900f883a 	mov	r7,r18
  804c88:	8025883a 	mov	r18,r16
  804c8c:	dc000717 	ldw	r16,28(sp)
						PAD (-expt, zeroes);
  804c90:	10800044 	addi	r2,r2,1
  804c94:	1f07883a 	add	r3,r3,fp
  804c98:	b1c00015 	stw	r7,0(r22)
  804c9c:	b7000115 	stw	fp,4(r22)
  804ca0:	d8c01c15 	stw	r3,112(sp)
  804ca4:	d8801b15 	stw	r2,108(sp)
  804ca8:	11000208 	cmpgei	r4,r2,8
  804cac:	203dfa26 	beq	r4,zero,804498 <___vfprintf_internal_r+0x17a4>
  804cb0:	d9801a04 	addi	r6,sp,104
  804cb4:	900b883a 	mov	r5,r18
  804cb8:	9809883a 	mov	r4,r19
  804cbc:	080a4340 	call	80a434 <__sprint_r>
  804cc0:	10391b1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig);
  804cc4:	d8c01c17 	ldw	r3,112(sp)
  804cc8:	d8801b17 	ldw	r2,108(sp)
						PAD (-expt, zeroes);
  804ccc:	dd802704 	addi	r22,sp,156
  804cd0:	003df206 	br	80449c <___vfprintf_internal_r+0x17a8>
						size += decp_len;
  804cd4:	d8800717 	ldw	r2,28(sp)
  804cd8:	d8c00b17 	ldw	r3,44(sp)
  804cdc:	10eb883a 	add	r21,r2,r3
		realsz = dprec > size ? dprec : size;
  804ce0:	a829883a 	mov	r20,r21
  804ce4:	a83fd60e 	bge	r21,zero,804c40 <___vfprintf_internal_r+0x1f4c>
  804ce8:	0029883a 	mov	r20,zero
  804cec:	003fd406 	br	804c40 <___vfprintf_internal_r+0x1f4c>
			*p++ = '0';
  804cf0:	00800c04 	movi	r2,48
		*p++ = to_char (exp);
  804cf4:	ad400c04 	addi	r21,r21,48
			*p++ = '0';
  804cf8:	d88016c5 	stb	r2,91(sp)
		*p++ = to_char (exp);
  804cfc:	00800104 	movi	r2,4
  804d00:	dd401705 	stb	r21,92(sp)
  804d04:	d8801015 	stw	r2,64(sp)
  804d08:	003e6506 	br	8046a0 <___vfprintf_internal_r+0x19ac>
				if (signbit (_fpvalue))
  804d0c:	d8800a17 	ldw	r2,40(sp)
  804d10:	10001916 	blt	r2,zero,804d78 <___vfprintf_internal_r+0x2084>
		if (sign)
  804d14:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  804d18:	e0801210 	cmplti	r2,fp,72
  804d1c:	1000131e 	bne	r2,zero,804d6c <___vfprintf_internal_r+0x2078>
					cp = "nan";
  804d20:	04402074 	movhi	r17,129
  804d24:	8c4ac304 	addi	r17,r17,11020
  804d28:	00399906 	br	803390 <___vfprintf_internal_r+0x69c>
		exp = -exp;
  804d2c:	05400044 	movi	r21,1
  804d30:	a8abc83a 	sub	r21,r21,r2
		*p++ = '-';
  804d34:	00800b44 	movi	r2,45
  804d38:	d8801685 	stb	r2,90(sp)
  804d3c:	003e2906 	br	8045e4 <___vfprintf_internal_r+0x18f0>
							size += prec + decp_len;
  804d40:	d8800b17 	ldw	r2,44(sp)
  804d44:	18ab883a 	add	r21,r3,r2
  804d48:	aa2b883a 	add	r21,r21,r8
		realsz = dprec > size ? dprec : size;
  804d4c:	a829883a 	mov	r20,r21
  804d50:	a83efc0e 	bge	r21,zero,804944 <___vfprintf_internal_r+0x1c50>
  804d54:	0029883a 	mov	r20,zero
							  : 1;
  804d58:	003efa06 	br	804944 <___vfprintf_internal_r+0x1c50>
  804d5c:	6080004c 	andi	r2,r12,1
  804d60:	d8800715 	stw	r2,28(sp)
				if (ndig > 1 || flags & ALT)
  804d64:	103e531e 	bne	r2,zero,8046b4 <___vfprintf_internal_r+0x19c0>
  804d68:	003ff806 	br	804d4c <___vfprintf_internal_r+0x2058>
					cp = "NAN";
  804d6c:	04402074 	movhi	r17,129
  804d70:	8c4ac204 	addi	r17,r17,11016
  804d74:	00398606 	br	803390 <___vfprintf_internal_r+0x69c>
					sign = '-';
  804d78:	00800b44 	movi	r2,45
  804d7c:	d8801345 	stb	r2,77(sp)
  804d80:	03400b44 	movi	r13,45
  804d84:	003fe406 	br	804d18 <___vfprintf_internal_r+0x2024>
						size = (prec || flags & ALT)
  804d88:	1000031e 	bne	r2,zero,804d98 <___vfprintf_internal_r+0x20a4>
  804d8c:	05000044 	movi	r20,1
							  : 1;
  804d90:	05400044 	movi	r21,1
					lead = expt;
  804d94:	003eeb06 	br	804944 <___vfprintf_internal_r+0x1c50>
							  ? prec + 1 + decp_len
  804d98:	d8800b17 	ldw	r2,44(sp)
  804d9c:	15400044 	addi	r21,r2,1
  804da0:	aa2b883a 	add	r21,r21,r8
  804da4:	003fe906 	br	804d4c <___vfprintf_internal_r+0x2058>
						PAD (ndig - 1, zeroes);
  804da8:	b005883a 	mov	r2,r22
  804dac:	39cad104 	addi	r7,r7,11076
  804db0:	003e9706 	br	804810 <___vfprintf_internal_r+0x1b1c>
  804db4:	8025883a 	mov	r18,r16
  804db8:	0038dd06 	br	803130 <___vfprintf_internal_r+0x43c>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  804dbc:	00800084 	movi	r2,2
  804dc0:	d8801015 	stw	r2,64(sp)
  804dc4:	003e3606 	br	8046a0 <___vfprintf_internal_r+0x19ac>
				prec = GET_ARG (n, ap, int);
  804dc8:	d8c00617 	ldw	r3,24(sp)
  804dcc:	1a000017 	ldw	r8,0(r3)
  804dd0:	18c00104 	addi	r3,r3,4
				if (prec < 0)
  804dd4:	4000010e 	bge	r8,zero,804ddc <___vfprintf_internal_r+0x20e8>
  804dd8:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  804ddc:	bf000043 	ldbu	fp,1(r23)
				prec = GET_ARG (n, ap, int);
  804de0:	d8c00615 	stw	r3,24(sp)
			if ((ch = *fmt++) == '*') {
  804de4:	102f883a 	mov	r23,r2
  804de8:	e2c03fcc 	andi	r11,fp,255
  804dec:	5ac0201c 	xori	r11,r11,128
  804df0:	5affe004 	addi	r11,r11,-128
				goto rflag;
  804df4:	00380b06 	br	802e24 <___vfprintf_internal_r+0x130>

00804df8 <__vfprintf_internal>:
{
  804df8:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  804dfc:	d1200917 	ldw	r4,-32732(gp)
  804e00:	300f883a 	mov	r7,r6
  804e04:	280d883a 	mov	r6,r5
  804e08:	100b883a 	mov	r5,r2
  804e0c:	0802cf41 	jmpi	802cf4 <___vfprintf_internal_r>

00804e10 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  804e10:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  804e14:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  804e18:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  804e1c:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  804e20:	2a400917 	ldw	r9,36(r5)
{
  804e24:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  804e28:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  804e2c:	00c10004 	movi	r3,1024
{
  804e30:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  804e34:	10bfff4c 	andi	r2,r2,65533
{
  804e38:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  804e3c:	d80b883a 	mov	r5,sp
{
  804e40:	dc811c15 	stw	r18,1136(sp)
  804e44:	dc411b15 	stw	r17,1132(sp)
  804e48:	dfc11d15 	stw	ra,1140(sp)
  804e4c:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  804e50:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  804e54:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  804e58:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  804e5c:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  804e60:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  804e64:	da000015 	stw	r8,0(sp)
  804e68:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  804e6c:	d8c00215 	stw	r3,8(sp)
  804e70:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  804e74:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  804e78:	0802cf40 	call	802cf4 <___vfprintf_internal_r>
  804e7c:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804e80:	10000d0e 	bge	r2,zero,804eb8 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  804e84:	d880030b 	ldhu	r2,12(sp)
  804e88:	1080100c 	andi	r2,r2,64
  804e8c:	10000326 	beq	r2,zero,804e9c <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  804e90:	8080030b 	ldhu	r2,12(r16)
  804e94:	10801014 	ori	r2,r2,64
  804e98:	8080030d 	sth	r2,12(r16)
}
  804e9c:	8805883a 	mov	r2,r17
  804ea0:	dfc11d17 	ldw	ra,1140(sp)
  804ea4:	dc811c17 	ldw	r18,1136(sp)
  804ea8:	dc411b17 	ldw	r17,1132(sp)
  804eac:	dc011a17 	ldw	r16,1128(sp)
  804eb0:	dec11e04 	addi	sp,sp,1144
  804eb4:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804eb8:	d80b883a 	mov	r5,sp
  804ebc:	9009883a 	mov	r4,r18
  804ec0:	0806bc00 	call	806bc0 <_fflush_r>
  804ec4:	103fef26 	beq	r2,zero,804e84 <__sbprintf+0x74>
		ret = EOF;
  804ec8:	047fffc4 	movi	r17,-1
  804ecc:	003fed06 	br	804e84 <__sbprintf+0x74>

00804ed0 <__swsetup_r>:
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
  804ed0:	d0a00917 	ldw	r2,-32732(gp)
{
  804ed4:	defffd04 	addi	sp,sp,-12
  804ed8:	dc400115 	stw	r17,4(sp)
  804edc:	dc000015 	stw	r16,0(sp)
  804ee0:	dfc00215 	stw	ra,8(sp)
  804ee4:	2023883a 	mov	r17,r4
  804ee8:	2821883a 	mov	r16,r5
  CHECK_INIT (_REENT, fp);
  804eec:	10000226 	beq	r2,zero,804ef8 <__swsetup_r+0x28>
  804ef0:	10c00e17 	ldw	r3,56(r2)
  804ef4:	18001f26 	beq	r3,zero,804f74 <__swsetup_r+0xa4>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
  804ef8:	8180030b 	ldhu	r6,12(r16)
  804efc:	30c0020c 	andi	r3,r6,8
  804f00:	3005883a 	mov	r2,r6
  804f04:	18002126 	beq	r3,zero,804f8c <__swsetup_r+0xbc>
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
  804f08:	80c00417 	ldw	r3,16(r16)
  804f0c:	18002826 	beq	r3,zero,804fb0 <__swsetup_r+0xe0>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
  804f10:	1100004c 	andi	r4,r2,1
  804f14:	20000b1e 	bne	r4,zero,804f44 <__swsetup_r+0x74>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  804f18:	1100008c 	andi	r4,r2,2
  804f1c:	20002e1e 	bne	r4,zero,804fd8 <__swsetup_r+0x108>
  804f20:	81000517 	ldw	r4,20(r16)
  804f24:	81000215 	stw	r4,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804f28:	18000b26 	beq	r3,zero,804f58 <__swsetup_r+0x88>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
  804f2c:	0005883a 	mov	r2,zero
}
  804f30:	dfc00217 	ldw	ra,8(sp)
  804f34:	dc400117 	ldw	r17,4(sp)
  804f38:	dc000017 	ldw	r16,0(sp)
  804f3c:	dec00304 	addi	sp,sp,12
  804f40:	f800283a 	ret
      fp->_lbfsize = -fp->_bf._size;
  804f44:	81000517 	ldw	r4,20(r16)
      fp->_w = 0;
  804f48:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
  804f4c:	0109c83a 	sub	r4,zero,r4
  804f50:	81000615 	stw	r4,24(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804f54:	183ff51e 	bne	r3,zero,804f2c <__swsetup_r+0x5c>
  804f58:	10c0200c 	andi	r3,r2,128
  return 0;
  804f5c:	0005883a 	mov	r2,zero
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804f60:	183ff326 	beq	r3,zero,804f30 <__swsetup_r+0x60>
      fp->_flags |= __SERR;
  804f64:	31801014 	ori	r6,r6,64
  804f68:	8180030d 	sth	r6,12(r16)
      return EOF;
  804f6c:	00bfffc4 	movi	r2,-1
  804f70:	003fef06 	br	804f30 <__swsetup_r+0x60>
  CHECK_INIT (_REENT, fp);
  804f74:	1009883a 	mov	r4,r2
  804f78:	0806ff80 	call	806ff8 <__sinit>
  if ((fp->_flags & __SWR) == 0)
  804f7c:	8180030b 	ldhu	r6,12(r16)
  804f80:	30c0020c 	andi	r3,r6,8
  804f84:	3005883a 	mov	r2,r6
  804f88:	183fdf1e 	bne	r3,zero,804f08 <__swsetup_r+0x38>
      if ((fp->_flags & __SRW) == 0)
  804f8c:	3080040c 	andi	r2,r6,16
  804f90:	10002126 	beq	r2,zero,805018 <__swsetup_r+0x148>
      if (fp->_flags & __SRD)
  804f94:	3080010c 	andi	r2,r6,4
  804f98:	1000111e 	bne	r2,zero,804fe0 <__swsetup_r+0x110>
  if (fp->_bf._base == NULL
  804f9c:	80c00417 	ldw	r3,16(r16)
      fp->_flags |= __SWR;
  804fa0:	30800214 	ori	r2,r6,8
  804fa4:	8080030d 	sth	r2,12(r16)
  804fa8:	100d883a 	mov	r6,r2
  if (fp->_bf._base == NULL
  804fac:	183fd81e 	bne	r3,zero,804f10 <__swsetup_r+0x40>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
  804fb0:	1100a00c 	andi	r4,r2,640
  804fb4:	21008020 	cmpeqi	r4,r4,512
  804fb8:	203fd51e 	bne	r4,zero,804f10 <__swsetup_r+0x40>
    __smakebuf_r (ptr, fp);
  804fbc:	800b883a 	mov	r5,r16
  804fc0:	8809883a 	mov	r4,r17
  804fc4:	0807b600 	call	807b60 <__smakebuf_r>
  if (fp->_flags & __SLBF)
  804fc8:	8180030b 	ldhu	r6,12(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804fcc:	80c00417 	ldw	r3,16(r16)
  if (fp->_flags & __SLBF)
  804fd0:	3005883a 	mov	r2,r6
  804fd4:	003fce06 	br	804f10 <__swsetup_r+0x40>
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  804fd8:	0009883a 	mov	r4,zero
  804fdc:	003fd106 	br	804f24 <__swsetup_r+0x54>
	  if (HASUB (fp))
  804fe0:	81400c17 	ldw	r5,48(r16)
  804fe4:	28000626 	beq	r5,zero,805000 <__swsetup_r+0x130>
	    FREEUB (ptr, fp);
  804fe8:	80801004 	addi	r2,r16,64
  804fec:	28800326 	beq	r5,r2,804ffc <__swsetup_r+0x12c>
  804ff0:	8809883a 	mov	r4,r17
  804ff4:	08071500 	call	807150 <_free_r>
	  fp->_flags &= ~(__SRD | __SEOF);
  804ff8:	8180030b 	ldhu	r6,12(r16)
	    FREEUB (ptr, fp);
  804ffc:	80000c15 	stw	zero,48(r16)
	  fp->_p = fp->_bf._base;
  805000:	80c00417 	ldw	r3,16(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
  805004:	00bff6c4 	movi	r2,-37
  805008:	118c703a 	and	r6,r2,r6
	  fp->_r = 0;
  80500c:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
  805010:	80c00015 	stw	r3,0(r16)
  805014:	003fe206 	br	804fa0 <__swsetup_r+0xd0>
	  ptr->_errno = EBADF;
  805018:	00800244 	movi	r2,9
  80501c:	88800015 	stw	r2,0(r17)
	  fp->_flags |= __SERR;
  805020:	31801014 	ori	r6,r6,64
  805024:	8180030d 	sth	r6,12(r16)
	  return EOF;
  805028:	00bfffc4 	movi	r2,-1
  80502c:	003fc006 	br	804f30 <__swsetup_r+0x60>

00805030 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
  805030:	defff204 	addi	sp,sp,-56
  805034:	dc400515 	stw	r17,20(sp)
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
  805038:	20800417 	ldw	r2,16(r4)
  n = S->_wds;
  80503c:	2c400417 	ldw	r17,16(r5)
{
  805040:	dfc00d15 	stw	ra,52(sp)
  805044:	df000c15 	stw	fp,48(sp)
  805048:	ddc00b15 	stw	r23,44(sp)
  80504c:	dd800a15 	stw	r22,40(sp)
  805050:	dd400915 	stw	r21,36(sp)
  805054:	dd000815 	stw	r20,32(sp)
  805058:	dcc00715 	stw	r19,28(sp)
  80505c:	dc800615 	stw	r18,24(sp)
  805060:	dc000415 	stw	r16,16(sp)
  805064:	d9000115 	stw	r4,4(sp)
  805068:	d9400215 	stw	r5,8(sp)
  if (b->_wds < n)
  80506c:	14407616 	blt	r2,r17,805248 <quorem+0x218>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  805070:	8c7fffc4 	addi	r17,r17,-1
  805074:	882a90ba 	slli	r21,r17,2
  sx = S->_x;
  805078:	2f000504 	addi	fp,r5,20
  bx = b->_x;
  80507c:	25800504 	addi	r22,r4,20
  sxe = sx + --n;
  805080:	e565883a 	add	r18,fp,r21
  bxe = bx + n;
  805084:	b545883a 	add	r2,r22,r21
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  805088:	95c00017 	ldw	r23,0(r18)
  80508c:	15000017 	ldw	r20,0(r2)
  bx = b->_x;
  805090:	dd800015 	stw	r22,0(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  805094:	bdc00044 	addi	r23,r23,1
  805098:	b80b883a 	mov	r5,r23
  80509c:	a009883a 	mov	r4,r20
  bxe = bx + n;
  8050a0:	d8800315 	stw	r2,12(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  8050a4:	080d44c0 	call	80d44c <__udivsi3>
  8050a8:	1021883a 	mov	r16,r2
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
  8050ac:	a5c02f36 	bltu	r20,r23,80516c <quorem+0x13c>
  sx = S->_x;
  8050b0:	e029883a 	mov	r20,fp
    {
      borrow = 0;
      carry = 0;
  8050b4:	002b883a 	mov	r21,zero
      borrow = 0;
  8050b8:	002f883a 	mov	r23,zero
      do
	{
#ifdef Pack_32
	  si = *sx++;
  8050bc:	a4c00017 	ldw	r19,0(r20)
	  ys = (si & 0xffff) * q + carry;
  8050c0:	800b883a 	mov	r5,r16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  8050c4:	b5800104 	addi	r22,r22,4
	  ys = (si & 0xffff) * q + carry;
  8050c8:	993fffcc 	andi	r4,r19,65535
  8050cc:	0802af80 	call	802af8 <__mulsi3>
	  zs = (si >> 16) * q + (ys >> 16);
  8050d0:	9808d43a 	srli	r4,r19,16
  8050d4:	800b883a 	mov	r5,r16
	  ys = (si & 0xffff) * q + carry;
  8050d8:	156b883a 	add	r21,r2,r21
	  zs = (si >> 16) * q + (ys >> 16);
  8050dc:	0802af80 	call	802af8 <__mulsi3>
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  8050e0:	b0ffff17 	ldw	r3,-4(r22)
	  zs = (si >> 16) * q + (ys >> 16);
  8050e4:	a80ad43a 	srli	r5,r21,16
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  8050e8:	a93fffcc 	andi	r4,r21,65535
  8050ec:	19bfffcc 	andi	r6,r3,65535
  8050f0:	b909c83a 	sub	r4,r23,r4
  8050f4:	2189883a 	add	r4,r4,r6
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8050f8:	1806d43a 	srli	r3,r3,16
	  zs = (si >> 16) * q + (ys >> 16);
  8050fc:	1145883a 	add	r2,r2,r5
	  borrow = y >> 16;
  805100:	200bd43a 	srai	r5,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  805104:	11bfffcc 	andi	r6,r2,65535
  805108:	1987c83a 	sub	r3,r3,r6
  80510c:	1947883a 	add	r3,r3,r5
	  Storeinc (bx, z, y);
  805110:	180a943a 	slli	r5,r3,16
  805114:	213fffcc 	andi	r4,r4,65535
	  si = *sx++;
  805118:	a5000104 	addi	r20,r20,4
	  Storeinc (bx, z, y);
  80511c:	2908b03a 	or	r4,r5,r4
  805120:	b13fff15 	stw	r4,-4(r22)
	  carry = zs >> 16;
  805124:	102ad43a 	srli	r21,r2,16
	  borrow = z >> 16;
  805128:	182fd43a 	srai	r23,r3,16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  80512c:	953fe32e 	bgeu	r18,r20,8050bc <quorem+0x8c>
      if (!*bxe)
  805130:	d8c00317 	ldw	r3,12(sp)
  805134:	18800017 	ldw	r2,0(r3)
  805138:	10000c1e 	bne	r2,zero,80516c <quorem+0x13c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
  80513c:	d8800017 	ldw	r2,0(sp)
  805140:	1d7fff04 	addi	r21,r3,-4
  805144:	15400436 	bltu	r2,r21,805158 <quorem+0x128>
  805148:	00000606 	br	805164 <quorem+0x134>
  80514c:	d8800017 	ldw	r2,0(sp)
	    --n;
  805150:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  805154:	1540032e 	bgeu	r2,r21,805164 <quorem+0x134>
  805158:	a8800017 	ldw	r2,0(r21)
  80515c:	ad7fff04 	addi	r21,r21,-4
  805160:	103ffa26 	beq	r2,zero,80514c <quorem+0x11c>
	  b->_wds = n;
  805164:	d8800117 	ldw	r2,4(sp)
  805168:	14400415 	stw	r17,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
  80516c:	d9400217 	ldw	r5,8(sp)
  805170:	d9000117 	ldw	r4,4(sp)
  805174:	08094580 	call	809458 <__mcmp>
  805178:	10002616 	blt	r2,zero,805214 <quorem+0x1e4>
  bx = b->_x;
  80517c:	d9400017 	ldw	r5,0(sp)
    {
      q++;
  805180:	84000044 	addi	r16,r16,1
      borrow = 0;
  805184:	0007883a 	mov	r3,zero
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
  805188:	e1000017 	ldw	r4,0(fp)
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  80518c:	29800017 	ldw	r6,0(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  805190:	29400104 	addi	r5,r5,4
	  ys = (si & 0xffff) + carry;
  805194:	20bfffcc 	andi	r2,r4,65535
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  805198:	1887c83a 	sub	r3,r3,r2
  80519c:	30bfffcc 	andi	r2,r6,65535
  8051a0:	1885883a 	add	r2,r3,r2
	  zs = (si >> 16) + (ys >> 16);
  8051a4:	2008d43a 	srli	r4,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8051a8:	3006d43a 	srli	r3,r6,16
	  borrow = y >> 16;
  8051ac:	100fd43a 	srai	r7,r2,16
	  Storeinc (bx, z, y);
  8051b0:	11bfffcc 	andi	r6,r2,65535
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8051b4:	1907c83a 	sub	r3,r3,r4
  8051b8:	19c7883a 	add	r3,r3,r7
	  Storeinc (bx, z, y);
  8051bc:	1804943a 	slli	r2,r3,16
	  si = *sx++;
  8051c0:	e7000104 	addi	fp,fp,4
	  borrow = z >> 16;
  8051c4:	1807d43a 	srai	r3,r3,16
	  Storeinc (bx, z, y);
  8051c8:	1184b03a 	or	r2,r2,r6
  8051cc:	28bfff15 	stw	r2,-4(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  8051d0:	973fed2e 	bgeu	r18,fp,805188 <quorem+0x158>
      bx = b->_x;
      bxe = bx + n;
  8051d4:	880490ba 	slli	r2,r17,2
  8051d8:	d9000017 	ldw	r4,0(sp)
  8051dc:	2085883a 	add	r2,r4,r2
      if (!*bxe)
  8051e0:	10c00017 	ldw	r3,0(r2)
  8051e4:	18000b1e 	bne	r3,zero,805214 <quorem+0x1e4>
	{
	  while (--bxe > bx && !*bxe)
  8051e8:	10bfff04 	addi	r2,r2,-4
  8051ec:	20800436 	bltu	r4,r2,805200 <quorem+0x1d0>
  8051f0:	00000606 	br	80520c <quorem+0x1dc>
  8051f4:	d8c00017 	ldw	r3,0(sp)
	    --n;
  8051f8:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  8051fc:	1880032e 	bgeu	r3,r2,80520c <quorem+0x1dc>
  805200:	10c00017 	ldw	r3,0(r2)
  805204:	10bfff04 	addi	r2,r2,-4
  805208:	183ffa26 	beq	r3,zero,8051f4 <quorem+0x1c4>
	  b->_wds = n;
  80520c:	d8800117 	ldw	r2,4(sp)
  805210:	14400415 	stw	r17,16(r2)
	}
    }
  return q;
  805214:	8005883a 	mov	r2,r16
}
  805218:	dfc00d17 	ldw	ra,52(sp)
  80521c:	df000c17 	ldw	fp,48(sp)
  805220:	ddc00b17 	ldw	r23,44(sp)
  805224:	dd800a17 	ldw	r22,40(sp)
  805228:	dd400917 	ldw	r21,36(sp)
  80522c:	dd000817 	ldw	r20,32(sp)
  805230:	dcc00717 	ldw	r19,28(sp)
  805234:	dc800617 	ldw	r18,24(sp)
  805238:	dc400517 	ldw	r17,20(sp)
  80523c:	dc000417 	ldw	r16,16(sp)
  805240:	dec00e04 	addi	sp,sp,56
  805244:	f800283a 	ret
    return 0;
  805248:	0005883a 	mov	r2,zero
  80524c:	003ff206 	br	805218 <quorem+0x1e8>

00805250 <_dtoa_r>:
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
  805250:	20801017 	ldw	r2,64(r4)
{
  805254:	deffe204 	addi	sp,sp,-120
  805258:	ddc01b15 	stw	r23,108(sp)
  80525c:	dcc01715 	stw	r19,92(sp)
  805260:	dc801615 	stw	r18,88(sp)
  805264:	dc401515 	stw	r17,84(sp)
  805268:	dc001415 	stw	r16,80(sp)
  80526c:	dfc01d15 	stw	ra,116(sp)
  805270:	df001c15 	stw	fp,112(sp)
  805274:	dd801a15 	stw	r22,104(sp)
  805278:	dd401915 	stw	r21,100(sp)
  80527c:	dd001815 	stw	r20,96(sp)
  805280:	d9c00215 	stw	r7,8(sp)
  805284:	dc002017 	ldw	r16,128(sp)
  805288:	202f883a 	mov	r23,r4
  80528c:	3025883a 	mov	r18,r6
  805290:	2827883a 	mov	r19,r5
  d.d = _d;
  805294:	3023883a 	mov	r17,r6
  if (_REENT_MP_RESULT(ptr))
  805298:	10000826 	beq	r2,zero,8052bc <_dtoa_r+0x6c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  80529c:	21801117 	ldw	r6,68(r4)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  8052a0:	00c00044 	movi	r3,1
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  8052a4:	100b883a 	mov	r5,r2
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  8052a8:	1986983a 	sll	r3,r3,r6
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  8052ac:	11800115 	stw	r6,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  8052b0:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  8052b4:	0808a480 	call	808a48 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
  8052b8:	b8001015 	stw	zero,64(r23)
    }

  if (word0 (d) & Sign_bit)
  8052bc:	90018816 	blt	r18,zero,8058e0 <_dtoa_r+0x690>
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
  8052c0:	80000015 	stw	zero,0(r16)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
  8052c4:	909ffc2c 	andhi	r2,r18,32752
  8052c8:	00dffc34 	movhi	r3,32752
  8052cc:	10c18d26 	beq	r2,r3,805904 <_dtoa_r+0x6b4>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
  8052d0:	000d883a 	mov	r6,zero
  8052d4:	000f883a 	mov	r7,zero
  8052d8:	9809883a 	mov	r4,r19
  8052dc:	880b883a 	mov	r5,r17
  8052e0:	080e72c0 	call	80e72c <__eqdf2>
  8052e4:	1000191e 	bne	r2,zero,80534c <_dtoa_r+0xfc>
    {
      *decpt = 1;
  8052e8:	d8c01f17 	ldw	r3,124(sp)
  8052ec:	00800044 	movi	r2,1
  8052f0:	18800015 	stw	r2,0(r3)
      s = "0";
      if (rve)
  8052f4:	d8802117 	ldw	r2,132(sp)
  8052f8:	1002f926 	beq	r2,zero,805ee0 <_dtoa_r+0xc90>
	*rve = s + 1;
  8052fc:	d9002117 	ldw	r4,132(sp)
  805300:	00802074 	movhi	r2,129
  805304:	108ad044 	addi	r2,r2,11073
      return s;
  805308:	00c02074 	movhi	r3,129
	*rve = s + 1;
  80530c:	20800015 	stw	r2,0(r4)
      return s;
  805310:	188ad004 	addi	r2,r3,11072
  805314:	d8800115 	stw	r2,4(sp)
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
  805318:	d8800117 	ldw	r2,4(sp)
  80531c:	dfc01d17 	ldw	ra,116(sp)
  805320:	df001c17 	ldw	fp,112(sp)
  805324:	ddc01b17 	ldw	r23,108(sp)
  805328:	dd801a17 	ldw	r22,104(sp)
  80532c:	dd401917 	ldw	r21,100(sp)
  805330:	dd001817 	ldw	r20,96(sp)
  805334:	dcc01717 	ldw	r19,92(sp)
  805338:	dc801617 	ldw	r18,88(sp)
  80533c:	dc401517 	ldw	r17,84(sp)
  805340:	dc001417 	ldw	r16,80(sp)
  805344:	dec01e04 	addi	sp,sp,120
  805348:	f800283a 	ret
  b = d2b (ptr, d.d, &be, &bbits);
  80534c:	d8801204 	addi	r2,sp,72
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  805350:	9020d53a 	srli	r16,r18,20
  b = d2b (ptr, d.d, &be, &bbits);
  805354:	d8800015 	stw	r2,0(sp)
  805358:	d9c01304 	addi	r7,sp,76
  80535c:	980b883a 	mov	r5,r19
  805360:	880d883a 	mov	r6,r17
  805364:	b809883a 	mov	r4,r23
  805368:	08098400 	call	809840 <__d2b>
  80536c:	1039883a 	mov	fp,r2
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  805370:	8001771e 	bne	r16,zero,805950 <_dtoa_r+0x700>
      i = bbits + be + (Bias + (P - 1) - 1);
  805374:	dd001217 	ldw	r20,72(sp)
  805378:	dc001317 	ldw	r16,76(sp)
  80537c:	a421883a 	add	r16,r20,r16
  805380:	80810c84 	addi	r2,r16,1074
       : (word1 (d) << (32 - i));
  805384:	10c00850 	cmplti	r3,r2,33
  805388:	1802e51e 	bne	r3,zero,805f20 <_dtoa_r+0xcd0>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
  80538c:	01001004 	movi	r4,64
  805390:	2085c83a 	sub	r2,r4,r2
  805394:	81010484 	addi	r4,r16,1042
  805398:	90a4983a 	sll	r18,r18,r2
  80539c:	9908d83a 	srl	r4,r19,r4
       : (word1 (d) << (32 - i));
  8053a0:	9108b03a 	or	r4,r18,r4
      d2.d = x;
  8053a4:	080fb680 	call	80fb68 <__floatunsidf>
  8053a8:	1009883a 	mov	r4,r2
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  8053ac:	017f8434 	movhi	r5,65040
      denorm = 1;
  8053b0:	00800044 	movi	r2,1
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  8053b4:	194b883a 	add	r5,r3,r5
      i -= (Bias + (P - 1) - 1) + 1;
  8053b8:	843fffc4 	addi	r16,r16,-1
      denorm = 1;
  8053bc:	d8800a15 	stw	r2,40(sp)
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  8053c0:	000d883a 	mov	r6,zero
  8053c4:	01cffe34 	movhi	r7,16376
  8053c8:	080f1280 	call	80f128 <__subdf3>
  8053cc:	0198dbf4 	movhi	r6,25455
  8053d0:	01cff4f4 	movhi	r7,16339
  8053d4:	3190d844 	addi	r6,r6,17249
  8053d8:	39e1e9c4 	addi	r7,r7,-30809
  8053dc:	1009883a 	mov	r4,r2
  8053e0:	180b883a 	mov	r5,r3
  8053e4:	080e97c0 	call	80e97c <__muldf3>
  8053e8:	01a2d874 	movhi	r6,35681
  8053ec:	01cff1f4 	movhi	r7,16327
  8053f0:	31b22cc4 	addi	r6,r6,-14157
  8053f4:	39e28a04 	addi	r7,r7,-30168
  8053f8:	180b883a 	mov	r5,r3
  8053fc:	1009883a 	mov	r4,r2
  805400:	080d50c0 	call	80d50c <__adddf3>
  805404:	8009883a 	mov	r4,r16
  805408:	102b883a 	mov	r21,r2
  80540c:	1825883a 	mov	r18,r3
  805410:	080fab00 	call	80fab0 <__floatsidf>
  805414:	019427f4 	movhi	r6,20639
  805418:	01cff4f4 	movhi	r7,16339
  80541c:	319e7ec4 	addi	r6,r6,31227
  805420:	39d104c4 	addi	r7,r7,17427
  805424:	1009883a 	mov	r4,r2
  805428:	180b883a 	mov	r5,r3
  80542c:	080e97c0 	call	80e97c <__muldf3>
  805430:	100d883a 	mov	r6,r2
  805434:	180f883a 	mov	r7,r3
  805438:	a809883a 	mov	r4,r21
  80543c:	900b883a 	mov	r5,r18
  805440:	080d50c0 	call	80d50c <__adddf3>
  k = (int) ds;
  805444:	1009883a 	mov	r4,r2
  805448:	180b883a 	mov	r5,r3
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  80544c:	1025883a 	mov	r18,r2
  805450:	182d883a 	mov	r22,r3
  k = (int) ds;
  805454:	080fa300 	call	80fa30 <__fixdfsi>
  if (ds < 0. && ds != k)
  805458:	000d883a 	mov	r6,zero
  80545c:	000f883a 	mov	r7,zero
  805460:	9009883a 	mov	r4,r18
  805464:	b00b883a 	mov	r5,r22
  k = (int) ds;
  805468:	102b883a 	mov	r21,r2
  80546c:	d8800315 	stw	r2,12(sp)
  if (ds < 0. && ds != k)
  805470:	080e8940 	call	80e894 <__ledf2>
  805474:	10028f16 	blt	r2,zero,805eb4 <_dtoa_r+0xc64>
  if (k >= 0 && k <= Ten_pmax)
  805478:	dc800317 	ldw	r18,12(sp)
  j = bbits - i - 1;
  80547c:	a421c83a 	sub	r16,r20,r16
  805480:	85bfffc4 	addi	r22,r16,-1
  if (k >= 0 && k <= Ten_pmax)
  805484:	908005e8 	cmpgeui	r2,r18,23
  805488:	1002821e 	bne	r2,zero,805e94 <_dtoa_r+0xc44>
      if (d.d < tens[k])
  80548c:	900690fa 	slli	r3,r18,3
  805490:	00802074 	movhi	r2,129
  805494:	108b3104 	addi	r2,r2,11460
  805498:	10c5883a 	add	r2,r2,r3
  80549c:	11800017 	ldw	r6,0(r2)
  8054a0:	11c00117 	ldw	r7,4(r2)
  8054a4:	9809883a 	mov	r4,r19
  8054a8:	880b883a 	mov	r5,r17
  8054ac:	080e8940 	call	80e894 <__ledf2>
  8054b0:	1002550e 	bge	r2,zero,805e08 <_dtoa_r+0xbb8>
	k--;
  8054b4:	90bfffc4 	addi	r2,r18,-1
  8054b8:	d8800315 	stw	r2,12(sp)
      k_check = 0;
  8054bc:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  8054c0:	b0027716 	blt	r22,zero,805ea0 <_dtoa_r+0xc50>
      b2 = 0;
  8054c4:	d8000615 	stw	zero,24(sp)
  if (k >= 0)
  8054c8:	d8800317 	ldw	r2,12(sp)
  8054cc:	1002510e 	bge	r2,zero,805e14 <_dtoa_r+0xbc4>
      b2 -= k;
  8054d0:	d8800317 	ldw	r2,12(sp)
  8054d4:	d8c00617 	ldw	r3,24(sp)
      s5 = 0;
  8054d8:	d8000315 	stw	zero,12(sp)
      b5 = -k;
  8054dc:	d8800415 	stw	r2,16(sp)
      b2 -= k;
  8054e0:	1887c83a 	sub	r3,r3,r2
  8054e4:	d8c00615 	stw	r3,24(sp)
      b5 = -k;
  8054e8:	0087c83a 	sub	r3,zero,r2
  8054ec:	d8c00815 	stw	r3,32(sp)
  if (mode < 0 || mode > 9)
  8054f0:	d8c00217 	ldw	r3,8(sp)
  8054f4:	188002a8 	cmpgeui	r2,r3,10
  8054f8:	10024d1e 	bne	r2,zero,805e30 <_dtoa_r+0xbe0>
  if (mode > 5)
  8054fc:	18800190 	cmplti	r2,r3,6
  805500:	10028b1e 	bne	r2,zero,805f30 <_dtoa_r+0xce0>
      mode -= 4;
  805504:	18bfff04 	addi	r2,r3,-4
  805508:	d8800215 	stw	r2,8(sp)
      try_quick = 0;
  80550c:	0021883a 	mov	r16,zero
  switch (mode)
  805510:	d8c00217 	ldw	r3,8(sp)
  805514:	18800120 	cmpeqi	r2,r3,4
  805518:	10035d1e 	bne	r2,zero,806290 <_dtoa_r+0x1040>
  80551c:	18800160 	cmpeqi	r2,r3,5
  805520:	10031b1e 	bne	r2,zero,806190 <_dtoa_r+0xf40>
  805524:	188000a0 	cmpeqi	r2,r3,2
  805528:	10024d26 	beq	r2,zero,805e60 <_dtoa_r+0xc10>
      leftright = 0;
  80552c:	d8000715 	stw	zero,28(sp)
      if (ndigits <= 0)
  805530:	d8801e17 	ldw	r2,120(sp)
  805534:	0083260e 	bge	zero,r2,8061d0 <_dtoa_r+0xf80>
  805538:	d8800b15 	stw	r2,44(sp)
  80553c:	d8800515 	stw	r2,20(sp)
  805540:	100d883a 	mov	r6,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805544:	b8001115 	stw	zero,68(r23)
  805548:	30800610 	cmplti	r2,r6,24
  80554c:	1004f11e 	bne	r2,zero,806914 <_dtoa_r+0x16c4>
  805550:	00c00044 	movi	r3,1
  j = sizeof (__ULong);
  805554:	00800104 	movi	r2,4
       j <<= 1)
  805558:	1085883a 	add	r2,r2,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  80555c:	11000504 	addi	r4,r2,20
    _REENT_MP_RESULT_K(ptr)++;
  805560:	180b883a 	mov	r5,r3
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805564:	18c00044 	addi	r3,r3,1
  805568:	313ffb2e 	bgeu	r6,r4,805558 <_dtoa_r+0x308>
  80556c:	b9401115 	stw	r5,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  805570:	b809883a 	mov	r4,r23
  805574:	08089a40 	call	8089a4 <_Balloc>
  805578:	d8800115 	stw	r2,4(sp)
  80557c:	1004de26 	beq	r2,zero,8068f8 <_dtoa_r+0x16a8>
  805580:	d8800117 	ldw	r2,4(sp)
  805584:	b8801015 	stw	r2,64(r23)
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
  805588:	d8800517 	ldw	r2,20(sp)
  80558c:	108003e8 	cmpgeui	r2,r2,15
  805590:	1001021e 	bne	r2,zero,80599c <_dtoa_r+0x74c>
  805594:	80010126 	beq	r16,zero,80599c <_dtoa_r+0x74c>
      if (k > 0)
  805598:	d9000417 	ldw	r4,16(sp)
  80559c:	01038b0e 	bge	zero,r4,8063cc <_dtoa_r+0x117c>
	  ds = tens[k & 0xf];
  8055a0:	208003cc 	andi	r2,r4,15
  8055a4:	100690fa 	slli	r3,r2,3
	  j = k >> 4;
  8055a8:	2029d13a 	srai	r20,r4,4
	  ds = tens[k & 0xf];
  8055ac:	00802074 	movhi	r2,129
  8055b0:	108b3104 	addi	r2,r2,11460
  8055b4:	10c5883a 	add	r2,r2,r3
	  if (j & Bletch)
  8055b8:	a0c0040c 	andi	r3,r20,16
	  ds = tens[k & 0xf];
  8055bc:	12800017 	ldw	r10,0(r2)
  8055c0:	12400117 	ldw	r9,4(r2)
	  if (j & Bletch)
  8055c4:	18032c26 	beq	r3,zero,806278 <_dtoa_r+0x1028>
	      d.d /= bigtens[n_bigtens - 1];
  8055c8:	00802074 	movhi	r2,129
  8055cc:	108b2704 	addi	r2,r2,11420
  8055d0:	11800817 	ldw	r6,32(r2)
  8055d4:	11c00917 	ldw	r7,36(r2)
  8055d8:	9809883a 	mov	r4,r19
  8055dc:	880b883a 	mov	r5,r17
  8055e0:	da400e15 	stw	r9,56(sp)
  8055e4:	da800d15 	stw	r10,52(sp)
  8055e8:	080ddfc0 	call	80ddfc <__divdf3>
  8055ec:	da800d17 	ldw	r10,52(sp)
  8055f0:	da400e17 	ldw	r9,56(sp)
	      j &= Bletch - 1;
  8055f4:	a50003cc 	andi	r20,r20,15
	      d.d /= bigtens[n_bigtens - 1];
  8055f8:	d8800c15 	stw	r2,48(sp)
  8055fc:	1825883a 	mov	r18,r3
	      ieps++;
  805600:	054000c4 	movi	r21,3
	  for (; j; j >>= 1, i++)
  805604:	a0001126 	beq	r20,zero,80564c <_dtoa_r+0x3fc>
  805608:	04002074 	movhi	r16,129
  80560c:	840b2704 	addi	r16,r16,11420
  805610:	5009883a 	mov	r4,r10
  805614:	480b883a 	mov	r5,r9
	    if (j & 1)
  805618:	a180004c 	andi	r6,r20,1
  80561c:	30000626 	beq	r6,zero,805638 <_dtoa_r+0x3e8>
		ds *= bigtens[i];
  805620:	81800017 	ldw	r6,0(r16)
  805624:	81c00117 	ldw	r7,4(r16)
		ieps++;
  805628:	ad400044 	addi	r21,r21,1
		ds *= bigtens[i];
  80562c:	080e97c0 	call	80e97c <__muldf3>
  805630:	1009883a 	mov	r4,r2
  805634:	180b883a 	mov	r5,r3
	  for (; j; j >>= 1, i++)
  805638:	a029d07a 	srai	r20,r20,1
  80563c:	84000204 	addi	r16,r16,8
  805640:	a03ff51e 	bne	r20,zero,805618 <_dtoa_r+0x3c8>
  805644:	2015883a 	mov	r10,r4
  805648:	2813883a 	mov	r9,r5
	  d.d /= ds;
  80564c:	d9000c17 	ldw	r4,48(sp)
  805650:	900b883a 	mov	r5,r18
  805654:	500d883a 	mov	r6,r10
  805658:	480f883a 	mov	r7,r9
  80565c:	080ddfc0 	call	80ddfc <__divdf3>
  805660:	1021883a 	mov	r16,r2
  805664:	1825883a 	mov	r18,r3
      if (k_check && d.d < 1. && ilim > 0)
  805668:	d8800917 	ldw	r2,36(sp)
  80566c:	10000626 	beq	r2,zero,805688 <_dtoa_r+0x438>
  805670:	000d883a 	mov	r6,zero
  805674:	01cffc34 	movhi	r7,16368
  805678:	8009883a 	mov	r4,r16
  80567c:	900b883a 	mov	r5,r18
  805680:	080e8940 	call	80e894 <__ledf2>
  805684:	10044416 	blt	r2,zero,806798 <_dtoa_r+0x1548>
      eps.d = ieps * d.d + 7.;
  805688:	a809883a 	mov	r4,r21
  80568c:	080fab00 	call	80fab0 <__floatsidf>
  805690:	800d883a 	mov	r6,r16
  805694:	900f883a 	mov	r7,r18
  805698:	1009883a 	mov	r4,r2
  80569c:	180b883a 	mov	r5,r3
  8056a0:	080e97c0 	call	80e97c <__muldf3>
  8056a4:	000d883a 	mov	r6,zero
  8056a8:	01d00734 	movhi	r7,16412
  8056ac:	1009883a 	mov	r4,r2
  8056b0:	180b883a 	mov	r5,r3
  8056b4:	080d50c0 	call	80d50c <__adddf3>
  8056b8:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  8056bc:	00bf3034 	movhi	r2,64704
  8056c0:	1885883a 	add	r2,r3,r2
  8056c4:	d8800c15 	stw	r2,48(sp)
      if (ilim == 0)
  8056c8:	d8800517 	ldw	r2,20(sp)
  8056cc:	10032226 	beq	r2,zero,806358 <_dtoa_r+0x1108>
  8056d0:	d8800417 	ldw	r2,16(sp)
  8056d4:	d8801115 	stw	r2,68(sp)
  8056d8:	d8800517 	ldw	r2,20(sp)
  8056dc:	d8800d15 	stw	r2,52(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8056e0:	d8800d17 	ldw	r2,52(sp)
	      L = d.d;
  8056e4:	900b883a 	mov	r5,r18
  8056e8:	8009883a 	mov	r4,r16
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8056ec:	10bfffc4 	addi	r2,r2,-1
  8056f0:	100690fa 	slli	r3,r2,3
  8056f4:	00802074 	movhi	r2,129
  8056f8:	108b3104 	addi	r2,r2,11460
  8056fc:	10c5883a 	add	r2,r2,r3
  805700:	12800017 	ldw	r10,0(r2)
  805704:	12c00117 	ldw	r11,4(r2)
  805708:	da800f15 	stw	r10,60(sp)
  80570c:	dac00e15 	stw	r11,56(sp)
	      L = d.d;
  805710:	080fa300 	call	80fa30 <__fixdfsi>
  805714:	1009883a 	mov	r4,r2
	      *s++ = '0' + (int) L;
  805718:	10800c04 	addi	r2,r2,48
  80571c:	d8801015 	stw	r2,64(sp)
	      d.d -= L;
  805720:	080fab00 	call	80fab0 <__floatsidf>
  805724:	8009883a 	mov	r4,r16
  805728:	100d883a 	mov	r6,r2
  80572c:	180f883a 	mov	r7,r3
  805730:	900b883a 	mov	r5,r18
  805734:	080f1280 	call	80f128 <__subdf3>
	      *s++ = '0' + (int) L;
  805738:	d9000117 	ldw	r4,4(sp)
      if (leftright)
  80573c:	dac00e17 	ldw	r11,56(sp)
  805740:	da800f17 	ldw	r10,60(sp)
	      d.d -= L;
  805744:	1825883a 	mov	r18,r3
      if (leftright)
  805748:	d8c00717 	ldw	r3,28(sp)
	      *s++ = '0' + (int) L;
  80574c:	25400044 	addi	r21,r4,1
	      d.d -= L;
  805750:	1021883a 	mov	r16,r2
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805754:	500d883a 	mov	r6,r10
  805758:	580f883a 	mov	r7,r11
      if (leftright)
  80575c:	1803b626 	beq	r3,zero,806638 <_dtoa_r+0x13e8>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805760:	0009883a 	mov	r4,zero
  805764:	014ff834 	movhi	r5,16352
  805768:	080ddfc0 	call	80ddfc <__divdf3>
  80576c:	d9c00c17 	ldw	r7,48(sp)
  805770:	a00d883a 	mov	r6,r20
  805774:	1009883a 	mov	r4,r2
  805778:	180b883a 	mov	r5,r3
  80577c:	080f1280 	call	80f128 <__subdf3>
	      *s++ = '0' + (int) L;
  805780:	d9000117 	ldw	r4,4(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  805784:	1029883a 	mov	r20,r2
	      *s++ = '0' + (int) L;
  805788:	d8801017 	ldw	r2,64(sp)
	      if (d.d < eps.d)
  80578c:	800d883a 	mov	r6,r16
  805790:	900f883a 	mov	r7,r18
	      *s++ = '0' + (int) L;
  805794:	20800005 	stb	r2,0(r4)
	      if (d.d < eps.d)
  805798:	180b883a 	mov	r5,r3
  80579c:	a009883a 	mov	r4,r20
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8057a0:	d8c00c15 	stw	r3,48(sp)
	      if (d.d < eps.d)
  8057a4:	080e7ac0 	call	80e7ac <__gedf2>
  8057a8:	0083e716 	blt	zero,r2,806748 <_dtoa_r+0x14f8>
	  for (i = 0;;)
  8057ac:	0005883a 	mov	r2,zero
  8057b0:	dd800e15 	stw	r22,56(sp)
  8057b4:	dc400f15 	stw	r17,60(sp)
  8057b8:	dd800d17 	ldw	r22,52(sp)
  8057bc:	dc400c17 	ldw	r17,48(sp)
  8057c0:	ddc00d15 	stw	r23,52(sp)
  8057c4:	dcc00c15 	stw	r19,48(sp)
  8057c8:	1027883a 	mov	r19,r2
  8057cc:	00002606 	br	805868 <_dtoa_r+0x618>
	      if (++i >= ilim)
  8057d0:	9cc00044 	addi	r19,r19,1
  8057d4:	9d806d0e 	bge	r19,r22,80598c <_dtoa_r+0x73c>
	      eps.d *= 10.;
  8057d8:	a009883a 	mov	r4,r20
  8057dc:	880b883a 	mov	r5,r17
  8057e0:	000d883a 	mov	r6,zero
  8057e4:	01d00934 	movhi	r7,16420
  8057e8:	080e97c0 	call	80e97c <__muldf3>
	      d.d *= 10.;
  8057ec:	000d883a 	mov	r6,zero
  8057f0:	01d00934 	movhi	r7,16420
  8057f4:	8009883a 	mov	r4,r16
  8057f8:	900b883a 	mov	r5,r18
	      eps.d *= 10.;
  8057fc:	1029883a 	mov	r20,r2
  805800:	1823883a 	mov	r17,r3
	      d.d *= 10.;
  805804:	080e97c0 	call	80e97c <__muldf3>
	      L = d.d;
  805808:	180b883a 	mov	r5,r3
  80580c:	1009883a 	mov	r4,r2
	      d.d *= 10.;
  805810:	1821883a 	mov	r16,r3
  805814:	1025883a 	mov	r18,r2
	      L = d.d;
  805818:	080fa300 	call	80fa30 <__fixdfsi>
	      d.d -= L;
  80581c:	1009883a 	mov	r4,r2
	      L = d.d;
  805820:	102f883a 	mov	r23,r2
	      d.d -= L;
  805824:	080fab00 	call	80fab0 <__floatsidf>
  805828:	9009883a 	mov	r4,r18
  80582c:	800b883a 	mov	r5,r16
  805830:	100d883a 	mov	r6,r2
  805834:	180f883a 	mov	r7,r3
  805838:	080f1280 	call	80f128 <__subdf3>
	      *s++ = '0' + (int) L;
  80583c:	ad400044 	addi	r21,r21,1
  805840:	ba000c04 	addi	r8,r23,48
  805844:	aa3fffc5 	stb	r8,-1(r21)
	      if (d.d < eps.d)
  805848:	a00d883a 	mov	r6,r20
  80584c:	880f883a 	mov	r7,r17
  805850:	1009883a 	mov	r4,r2
  805854:	180b883a 	mov	r5,r3
	      d.d -= L;
  805858:	1021883a 	mov	r16,r2
  80585c:	1825883a 	mov	r18,r3
	      if (d.d < eps.d)
  805860:	080e8940 	call	80e894 <__ledf2>
  805864:	10040516 	blt	r2,zero,80687c <_dtoa_r+0x162c>
	      if (1. - d.d < eps.d)
  805868:	800d883a 	mov	r6,r16
  80586c:	900f883a 	mov	r7,r18
  805870:	0009883a 	mov	r4,zero
  805874:	014ffc34 	movhi	r5,16368
  805878:	080f1280 	call	80f128 <__subdf3>
  80587c:	a00d883a 	mov	r6,r20
  805880:	880f883a 	mov	r7,r17
  805884:	1009883a 	mov	r4,r2
  805888:	180b883a 	mov	r5,r3
  80588c:	080e8940 	call	80e894 <__ledf2>
  805890:	103fcf0e 	bge	r2,zero,8057d0 <_dtoa_r+0x580>
			k++;
  805894:	d8801117 	ldw	r2,68(sp)
  805898:	ddc00d17 	ldw	r23,52(sp)
  80589c:	d9000117 	ldw	r4,4(sp)
  8058a0:	10800044 	addi	r2,r2,1
  8058a4:	d8800415 	stw	r2,16(sp)
  8058a8:	a829883a 	mov	r20,r21
  8058ac:	00000106 	br	8058b4 <_dtoa_r+0x664>
		    if (s == s0)
  8058b0:	a103da26 	beq	r20,r4,80681c <_dtoa_r+0x15cc>
		  while (*--s == '9')
  8058b4:	a0ffffc3 	ldbu	r3,-1(r20)
  8058b8:	a02b883a 	mov	r21,r20
  8058bc:	a53fffc4 	addi	r20,r20,-1
  8058c0:	18803fcc 	andi	r2,r3,255
  8058c4:	1080201c 	xori	r2,r2,128
  8058c8:	10bfe004 	addi	r2,r2,-128
  8058cc:	10800e60 	cmpeqi	r2,r2,57
  8058d0:	103ff71e 	bne	r2,zero,8058b0 <_dtoa_r+0x660>
		  ++*s++;
  8058d4:	18c00044 	addi	r3,r3,1
  8058d8:	a0c00005 	stb	r3,0(r20)
  8058dc:	00013f06 	br	805ddc <_dtoa_r+0xb8c>
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  8058e0:	04600034 	movhi	r17,32768
  8058e4:	8c7fffc4 	addi	r17,r17,-1
  8058e8:	9462703a 	and	r17,r18,r17
      *sign = 1;
  8058ec:	00800044 	movi	r2,1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  8058f0:	8825883a 	mov	r18,r17
      *sign = 1;
  8058f4:	80800015 	stw	r2,0(r16)
  if ((word0 (d) & Exp_mask) == Exp_mask)
  8058f8:	00dffc34 	movhi	r3,32752
  8058fc:	909ffc2c 	andhi	r2,r18,32752
  805900:	10fe731e 	bne	r2,r3,8052d0 <_dtoa_r+0x80>
      *decpt = 9999;
  805904:	d9001f17 	ldw	r4,124(sp)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805908:	00800434 	movhi	r2,16
  80590c:	10bfffc4 	addi	r2,r2,-1
  805910:	9084703a 	and	r2,r18,r2
      *decpt = 9999;
  805914:	00c9c3c4 	movi	r3,9999
  805918:	20c00015 	stw	r3,0(r4)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80591c:	14e6b03a 	or	r19,r2,r19
  805920:	9800141e 	bne	r19,zero,805974 <_dtoa_r+0x724>
      if (rve)
  805924:	d8802117 	ldw	r2,132(sp)
  805928:	10041226 	beq	r2,zero,806974 <_dtoa_r+0x1724>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80592c:	00802074 	movhi	r2,129
  805930:	1007883a 	mov	r3,r2
  805934:	18cada04 	addi	r3,r3,11112
	  s[3] ? s + 8 :
  805938:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80593c:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  805940:	108adc04 	addi	r2,r2,11120
	*rve =
  805944:	d8c02117 	ldw	r3,132(sp)
  805948:	18800015 	stw	r2,0(r3)
  80594c:	003e7206 	br	805318 <_dtoa_r+0xc8>
      word0 (d2) &= Frac_mask1;
  805950:	01400434 	movhi	r5,16
  805954:	297fffc4 	addi	r5,r5,-1
  805958:	894a703a 	and	r5,r17,r5
      i = bbits + be + (Bias + (P - 1) - 1);
  80595c:	dd001217 	ldw	r20,72(sp)
      d2.d = d.d;
  805960:	9809883a 	mov	r4,r19
      word0 (d2) |= Exp_11;
  805964:	294ffc34 	orhi	r5,r5,16368
      i -= Bias;
  805968:	843f0044 	addi	r16,r16,-1023
      denorm = 0;
  80596c:	d8000a15 	stw	zero,40(sp)
  805970:	003e9306 	br	8053c0 <_dtoa_r+0x170>
      if (rve)
  805974:	d8802117 	ldw	r2,132(sp)
  805978:	1001fe1e 	bne	r2,zero,806174 <_dtoa_r+0xf24>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80597c:	00802074 	movhi	r2,129
  805980:	108ad904 	addi	r2,r2,11108
  805984:	d8800115 	stw	r2,4(sp)
  805988:	003e6306 	br	805318 <_dtoa_r+0xc8>
  80598c:	dd800e17 	ldw	r22,56(sp)
  805990:	ddc00d17 	ldw	r23,52(sp)
  805994:	dc400f17 	ldw	r17,60(sp)
  805998:	dcc00c17 	ldw	r19,48(sp)
  if (be >= 0 && k <= Int_max)
  80599c:	d8801317 	ldw	r2,76(sp)
  8059a0:	10006e16 	blt	r2,zero,805b5c <_dtoa_r+0x90c>
  8059a4:	d9000417 	ldw	r4,16(sp)
  8059a8:	20c003c8 	cmpgei	r3,r4,15
  8059ac:	18006b1e 	bne	r3,zero,805b5c <_dtoa_r+0x90c>
      ds = tens[k];
  8059b0:	200690fa 	slli	r3,r4,3
  8059b4:	00802074 	movhi	r2,129
  8059b8:	108b3104 	addi	r2,r2,11460
  8059bc:	10c5883a 	add	r2,r2,r3
  8059c0:	14000017 	ldw	r16,0(r2)
  8059c4:	14800117 	ldw	r18,4(r2)
      if (ndigits < 0 && ilim <= 0)
  8059c8:	d8801e17 	ldw	r2,120(sp)
  8059cc:	1000150e 	bge	r2,zero,805a24 <_dtoa_r+0x7d4>
  8059d0:	d8800517 	ldw	r2,20(sp)
  8059d4:	00801316 	blt	zero,r2,805a24 <_dtoa_r+0x7d4>
	  if (ilim < 0 || d.d <= 5 * ds)
  8059d8:	d8800517 	ldw	r2,20(sp)
  8059dc:	1002721e 	bne	r2,zero,8063a8 <_dtoa_r+0x1158>
  8059e0:	8009883a 	mov	r4,r16
  8059e4:	000d883a 	mov	r6,zero
  8059e8:	01d00534 	movhi	r7,16404
  8059ec:	900b883a 	mov	r5,r18
  8059f0:	080e97c0 	call	80e97c <__muldf3>
  8059f4:	100d883a 	mov	r6,r2
  8059f8:	180f883a 	mov	r7,r3
  8059fc:	9809883a 	mov	r4,r19
  805a00:	880b883a 	mov	r5,r17
  805a04:	080e8940 	call	80e894 <__ledf2>
	  S = mhi = 0;
  805a08:	0029883a 	mov	r20,zero
  805a0c:	0021883a 	mov	r16,zero
	  if (ilim < 0 || d.d <= 5 * ds)
  805a10:	00820216 	blt	zero,r2,80621c <_dtoa_r+0xfcc>
	  k = -1 - ndigits;
  805a14:	d8801e17 	ldw	r2,120(sp)
	  goto ret;
  805a18:	dd400117 	ldw	r21,4(sp)
	  k = -1 - ndigits;
  805a1c:	00a2303a 	nor	r17,zero,r2
	  goto ret;
  805a20:	00020406 	br	806234 <_dtoa_r+0xfe4>
	  L = d.d / ds;
  805a24:	800d883a 	mov	r6,r16
  805a28:	900f883a 	mov	r7,r18
  805a2c:	9809883a 	mov	r4,r19
  805a30:	880b883a 	mov	r5,r17
  805a34:	080ddfc0 	call	80ddfc <__divdf3>
  805a38:	180b883a 	mov	r5,r3
  805a3c:	1009883a 	mov	r4,r2
  805a40:	080fa300 	call	80fa30 <__fixdfsi>
	  d.d -= L * ds;
  805a44:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  805a48:	102b883a 	mov	r21,r2
	  d.d -= L * ds;
  805a4c:	080fab00 	call	80fab0 <__floatsidf>
  805a50:	800d883a 	mov	r6,r16
  805a54:	900f883a 	mov	r7,r18
  805a58:	1009883a 	mov	r4,r2
  805a5c:	180b883a 	mov	r5,r3
  805a60:	080e97c0 	call	80e97c <__muldf3>
  805a64:	100d883a 	mov	r6,r2
  805a68:	9809883a 	mov	r4,r19
  805a6c:	880b883a 	mov	r5,r17
  805a70:	180f883a 	mov	r7,r3
  805a74:	080f1280 	call	80f128 <__subdf3>
	  *s++ = '0' + (int) L;
  805a78:	d9800117 	ldw	r6,4(sp)
	  if (i == ilim)
  805a7c:	dd800517 	ldw	r22,20(sp)
	  d.d -= L * ds;
  805a80:	1009883a 	mov	r4,r2
	  *s++ = '0' + (int) L;
  805a84:	a8800c04 	addi	r2,r21,48
  805a88:	30800005 	stb	r2,0(r6)
	  if (i == ilim)
  805a8c:	b0800060 	cmpeqi	r2,r22,1
	  d.d -= L * ds;
  805a90:	180b883a 	mov	r5,r3
	  *s++ = '0' + (int) L;
  805a94:	35000044 	addi	r20,r6,1
	  if (i == ilim)
  805a98:	10029f1e 	bne	r2,zero,806518 <_dtoa_r+0x12c8>
  805a9c:	04400044 	movi	r17,1
  805aa0:	ddc00215 	stw	r23,8(sp)
  805aa4:	00001c06 	br	805b18 <_dtoa_r+0x8c8>
	  L = d.d / ds;
  805aa8:	800d883a 	mov	r6,r16
  805aac:	900f883a 	mov	r7,r18
  805ab0:	a809883a 	mov	r4,r21
  805ab4:	980b883a 	mov	r5,r19
  805ab8:	080ddfc0 	call	80ddfc <__divdf3>
  805abc:	180b883a 	mov	r5,r3
  805ac0:	1009883a 	mov	r4,r2
  805ac4:	080fa300 	call	80fa30 <__fixdfsi>
	  d.d -= L * ds;
  805ac8:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  805acc:	102f883a 	mov	r23,r2
	  d.d -= L * ds;
  805ad0:	080fab00 	call	80fab0 <__floatsidf>
  805ad4:	800d883a 	mov	r6,r16
  805ad8:	900f883a 	mov	r7,r18
  805adc:	1009883a 	mov	r4,r2
  805ae0:	180b883a 	mov	r5,r3
  805ae4:	080e97c0 	call	80e97c <__muldf3>
  805ae8:	a809883a 	mov	r4,r21
  805aec:	980b883a 	mov	r5,r19
  805af0:	100d883a 	mov	r6,r2
  805af4:	180f883a 	mov	r7,r3
  805af8:	080f1280 	call	80f128 <__subdf3>
	  *s++ = '0' + (int) L;
  805afc:	b9000c04 	addi	r4,r23,48
  805b00:	a1000005 	stb	r4,0(r20)
      for (i = 1;; i++)
  805b04:	8c400044 	addi	r17,r17,1
	  *s++ = '0' + (int) L;
  805b08:	a5000044 	addi	r20,r20,1
	  d.d -= L * ds;
  805b0c:	1009883a 	mov	r4,r2
  805b10:	180b883a 	mov	r5,r3
	  if (i == ilim)
  805b14:	8d827e26 	beq	r17,r22,806510 <_dtoa_r+0x12c0>
	  if (!(d.d *= 10.))
  805b18:	000d883a 	mov	r6,zero
  805b1c:	01d00934 	movhi	r7,16420
  805b20:	080e97c0 	call	80e97c <__muldf3>
  805b24:	000d883a 	mov	r6,zero
  805b28:	000f883a 	mov	r7,zero
  805b2c:	1009883a 	mov	r4,r2
  805b30:	180b883a 	mov	r5,r3
  805b34:	102b883a 	mov	r21,r2
  805b38:	1827883a 	mov	r19,r3
  805b3c:	080e72c0 	call	80e72c <__eqdf2>
  805b40:	103fd91e 	bne	r2,zero,805aa8 <_dtoa_r+0x858>
  *decpt = k + 1;
  805b44:	d8800417 	ldw	r2,16(sp)
  805b48:	ddc00217 	ldw	r23,8(sp)
  805b4c:	a02b883a 	mov	r21,r20
  805b50:	10800044 	addi	r2,r2,1
  805b54:	d8800415 	stw	r2,16(sp)
  805b58:	0000a006 	br	805ddc <_dtoa_r+0xb8c>
  if (leftright)
  805b5c:	d8c00717 	ldw	r3,28(sp)
  805b60:	1800e326 	beq	r3,zero,805ef0 <_dtoa_r+0xca0>
      if (mode < 2)
  805b64:	d8c00217 	ldw	r3,8(sp)
  805b68:	18c00088 	cmpgei	r3,r3,2
  805b6c:	1801e026 	beq	r3,zero,8062f0 <_dtoa_r+0x10a0>
	  j = ilim - 1;
  805b70:	d8800517 	ldw	r2,20(sp)
  805b74:	153fffc4 	addi	r20,r2,-1
	  if (m5 >= j)
  805b78:	d8800817 	ldw	r2,32(sp)
  805b7c:	1501bc0e 	bge	r2,r20,806270 <_dtoa_r+0x1020>
	      s5 += j -= m5;
  805b80:	d8800817 	ldw	r2,32(sp)
  805b84:	d8c00317 	ldw	r3,12(sp)
  805b88:	dd000815 	stw	r20,32(sp)
  805b8c:	a085c83a 	sub	r2,r20,r2
  805b90:	1885883a 	add	r2,r3,r2
  805b94:	d8800315 	stw	r2,12(sp)
	      m5 = 0;
  805b98:	0029883a 	mov	r20,zero
	  if ((i = ilim) < 0)
  805b9c:	d8800517 	ldw	r2,20(sp)
  805ba0:	10028b16 	blt	r2,zero,8065d0 <_dtoa_r+0x1380>
  m2 = b2;
  805ba4:	d8c00617 	ldw	r3,24(sp)
      s2 += i;
  805ba8:	b0ad883a 	add	r22,r22,r2
  805bac:	1885883a 	add	r2,r3,r2
  m2 = b2;
  805bb0:	1825883a 	mov	r18,r3
      s2 += i;
  805bb4:	d8800615 	stw	r2,24(sp)
      mhi = i2b (ptr, 1);
  805bb8:	01400044 	movi	r5,1
  805bbc:	b809883a 	mov	r4,r23
  805bc0:	0808e140 	call	808e14 <__i2b>
  805bc4:	1021883a 	mov	r16,r2
  if (m2 > 0 && s2 > 0)
  805bc8:	0480080e 	bge	zero,r18,805bec <_dtoa_r+0x99c>
  805bcc:	0580070e 	bge	zero,r22,805bec <_dtoa_r+0x99c>
      i = m2 < s2 ? m2 : s2;
  805bd0:	9005883a 	mov	r2,r18
  805bd4:	b4819e16 	blt	r22,r18,806250 <_dtoa_r+0x1000>
      b2 -= i;
  805bd8:	d8c00617 	ldw	r3,24(sp)
      m2 -= i;
  805bdc:	90a5c83a 	sub	r18,r18,r2
      s2 -= i;
  805be0:	b0adc83a 	sub	r22,r22,r2
      b2 -= i;
  805be4:	1887c83a 	sub	r3,r3,r2
  805be8:	d8c00615 	stw	r3,24(sp)
  if (b5 > 0)
  805bec:	d8800817 	ldw	r2,32(sp)
  805bf0:	10001426 	beq	r2,zero,805c44 <_dtoa_r+0x9f4>
      if (leftright)
  805bf4:	d8800717 	ldw	r2,28(sp)
  805bf8:	1001ee26 	beq	r2,zero,8063b4 <_dtoa_r+0x1164>
	  if (m5 > 0)
  805bfc:	05000e0e 	bge	zero,r20,805c38 <_dtoa_r+0x9e8>
	      mhi = pow5mult (ptr, mhi, m5);
  805c00:	800b883a 	mov	r5,r16
  805c04:	a00d883a 	mov	r6,r20
  805c08:	b809883a 	mov	r4,r23
  805c0c:	08091880 	call	809188 <__pow5mult>
	      b1 = mult (ptr, mhi, b);
  805c10:	e00d883a 	mov	r6,fp
  805c14:	100b883a 	mov	r5,r2
  805c18:	b809883a 	mov	r4,r23
	      mhi = pow5mult (ptr, mhi, m5);
  805c1c:	1021883a 	mov	r16,r2
	      b1 = mult (ptr, mhi, b);
  805c20:	0808ec40 	call	808ec4 <__multiply>
  805c24:	102b883a 	mov	r21,r2
	      Bfree (ptr, b);
  805c28:	e00b883a 	mov	r5,fp
  805c2c:	b809883a 	mov	r4,r23
  805c30:	0808a480 	call	808a48 <_Bfree>
	      b = b1;
  805c34:	a839883a 	mov	fp,r21
         if ((j = b5 - m5) != 0)
  805c38:	d8800817 	ldw	r2,32(sp)
  805c3c:	150dc83a 	sub	r6,r2,r20
  805c40:	15025e1e 	bne	r2,r20,8065bc <_dtoa_r+0x136c>
  S = i2b (ptr, 1);
  805c44:	01400044 	movi	r5,1
  805c48:	b809883a 	mov	r4,r23
  805c4c:	0808e140 	call	808e14 <__i2b>
  if (s5 > 0)
  805c50:	d9800317 	ldw	r6,12(sp)
  S = i2b (ptr, 1);
  805c54:	1029883a 	mov	r20,r2
  if (s5 > 0)
  805c58:	0180b716 	blt	zero,r6,805f38 <_dtoa_r+0xce8>
  if (mode < 2)
  805c5c:	d8800217 	ldw	r2,8(sp)
  805c60:	10800088 	cmpgei	r2,r2,2
  805c64:	10014d26 	beq	r2,zero,80619c <_dtoa_r+0xf4c>
  spec_case = 0;
  805c68:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  805c6c:	d8c00317 	ldw	r3,12(sp)
  805c70:	00800044 	movi	r2,1
  805c74:	1800b81e 	bne	r3,zero,805f58 <_dtoa_r+0xd08>
  805c78:	1585883a 	add	r2,r2,r22
  805c7c:	108007cc 	andi	r2,r2,31
  805c80:	1000a526 	beq	r2,zero,805f18 <_dtoa_r+0xcc8>
    i = 32 - i;
  805c84:	00c00804 	movi	r3,32
  805c88:	1887c83a 	sub	r3,r3,r2
  if (i > 4)
  805c8c:	19000150 	cmplti	r4,r3,5
  805c90:	20033c1e 	bne	r4,zero,806984 <_dtoa_r+0x1734>
      i -= 4;
  805c94:	00c00704 	movi	r3,28
  805c98:	1885c83a 	sub	r2,r3,r2
      b2 += i;
  805c9c:	d8c00617 	ldw	r3,24(sp)
      m2 += i;
  805ca0:	90a5883a 	add	r18,r18,r2
      s2 += i;
  805ca4:	b0ad883a 	add	r22,r22,r2
      b2 += i;
  805ca8:	1887883a 	add	r3,r3,r2
  805cac:	d8c00615 	stw	r3,24(sp)
  if (b2 > 0)
  805cb0:	d8800617 	ldw	r2,24(sp)
  805cb4:	00809216 	blt	zero,r2,805f00 <_dtoa_r+0xcb0>
  if (s2 > 0)
  805cb8:	0580050e 	bge	zero,r22,805cd0 <_dtoa_r+0xa80>
    S = lshift (ptr, S, s2);
  805cbc:	a00b883a 	mov	r5,r20
  805cc0:	b00d883a 	mov	r6,r22
  805cc4:	b809883a 	mov	r4,r23
  805cc8:	08092d00 	call	8092d0 <__lshift>
  805ccc:	1029883a 	mov	r20,r2
  if (k_check)
  805cd0:	d8800917 	ldw	r2,36(sp)
  805cd4:	1001151e 	bne	r2,zero,80612c <_dtoa_r+0xedc>
  if (ilim <= 0 && mode > 2)
  805cd8:	d8800517 	ldw	r2,20(sp)
  805cdc:	0081020e 	bge	zero,r2,8060e8 <_dtoa_r+0xe98>
  if (leftright)
  805ce0:	d8800717 	ldw	r2,28(sp)
  805ce4:	1000af1e 	bne	r2,zero,805fa4 <_dtoa_r+0xd54>
  *decpt = k + 1;
  805ce8:	d8800417 	ldw	r2,16(sp)
  805cec:	10800044 	addi	r2,r2,1
  805cf0:	d8800415 	stw	r2,16(sp)
  if (ilim <= 0 && mode > 2)
  805cf4:	dc800517 	ldw	r18,20(sp)
  805cf8:	dd400117 	ldw	r21,4(sp)
  805cfc:	04400044 	movi	r17,1
  805d00:	00000706 	br	805d20 <_dtoa_r+0xad0>
	b = multadd (ptr, b, 10, 0);
  805d04:	e00b883a 	mov	r5,fp
  805d08:	000f883a 	mov	r7,zero
  805d0c:	01800284 	movi	r6,10
  805d10:	b809883a 	mov	r4,r23
  805d14:	0808a6c0 	call	808a6c <__multadd>
  805d18:	1039883a 	mov	fp,r2
    for (i = 1;; i++)
  805d1c:	8c400044 	addi	r17,r17,1
	*s++ = dig = quorem (b, S) + '0';
  805d20:	a00b883a 	mov	r5,r20
  805d24:	e009883a 	mov	r4,fp
  805d28:	08050300 	call	805030 <quorem>
  805d2c:	14c00c04 	addi	r19,r2,48
  805d30:	ac45883a 	add	r2,r21,r17
  805d34:	14ffffc5 	stb	r19,-1(r2)
	if (i >= ilim)
  805d38:	8cbff216 	blt	r17,r18,805d04 <_dtoa_r+0xab4>
	*s++ = dig = quorem (b, S) + '0';
  805d3c:	d8800517 	ldw	r2,20(sp)
  805d40:	0081510e 	bge	zero,r2,806288 <_dtoa_r+0x1038>
  805d44:	d8c00117 	ldw	r3,4(sp)
  mhi = mlo = 0;
  805d48:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  805d4c:	18ab883a 	add	r21,r3,r2
  b = lshift (ptr, b, 1);
  805d50:	e00b883a 	mov	r5,fp
  805d54:	01800044 	movi	r6,1
  805d58:	b809883a 	mov	r4,r23
  805d5c:	08092d00 	call	8092d0 <__lshift>
  j = cmp (b, S);
  805d60:	1009883a 	mov	r4,r2
  805d64:	a00b883a 	mov	r5,r20
  b = lshift (ptr, b, 1);
  805d68:	1039883a 	mov	fp,r2
  j = cmp (b, S);
  805d6c:	08094580 	call	809458 <__mcmp>
      while (*--s == '9')
  805d70:	a93fffc3 	ldbu	r4,-1(r21)
  if ((j > 0) || ((j == 0) && (dig & 1)))
  805d74:	0081490e 	bge	zero,r2,80629c <_dtoa_r+0x104c>
  805d78:	d9400117 	ldw	r5,4(sp)
  805d7c:	00000306 	br	805d8c <_dtoa_r+0xb3c>
	if (s == s0)
  805d80:	19415426 	beq	r3,r5,8062d4 <_dtoa_r+0x1084>
      while (*--s == '9')
  805d84:	193fffc3 	ldbu	r4,-1(r3)
  805d88:	182b883a 	mov	r21,r3
  805d8c:	20803fcc 	andi	r2,r4,255
  805d90:	1080201c 	xori	r2,r2,128
  805d94:	10bfe004 	addi	r2,r2,-128
  805d98:	10800e60 	cmpeqi	r2,r2,57
  805d9c:	a8ffffc4 	addi	r3,r21,-1
  805da0:	103ff71e 	bne	r2,zero,805d80 <_dtoa_r+0xb30>
      ++*s++;
  805da4:	21000044 	addi	r4,r4,1
  805da8:	19000005 	stb	r4,0(r3)
  Bfree (ptr, S);
  805dac:	a00b883a 	mov	r5,r20
  805db0:	b809883a 	mov	r4,r23
  805db4:	0808a480 	call	808a48 <_Bfree>
  if (mhi)
  805db8:	80000826 	beq	r16,zero,805ddc <_dtoa_r+0xb8c>
      if (mlo && mlo != mhi)
  805dbc:	88000426 	beq	r17,zero,805dd0 <_dtoa_r+0xb80>
  805dc0:	8c000326 	beq	r17,r16,805dd0 <_dtoa_r+0xb80>
	Bfree (ptr, mlo);
  805dc4:	880b883a 	mov	r5,r17
  805dc8:	b809883a 	mov	r4,r23
  805dcc:	0808a480 	call	808a48 <_Bfree>
      Bfree (ptr, mhi);
  805dd0:	800b883a 	mov	r5,r16
  805dd4:	b809883a 	mov	r4,r23
  805dd8:	0808a480 	call	808a48 <_Bfree>
  Bfree (ptr, b);
  805ddc:	e00b883a 	mov	r5,fp
  805de0:	b809883a 	mov	r4,r23
  805de4:	0808a480 	call	808a48 <_Bfree>
  *decpt = k + 1;
  805de8:	d8801f17 	ldw	r2,124(sp)
  805dec:	d8c00417 	ldw	r3,16(sp)
  *s = 0;
  805df0:	a8000005 	stb	zero,0(r21)
  *decpt = k + 1;
  805df4:	10c00015 	stw	r3,0(r2)
  if (rve)
  805df8:	d8802117 	ldw	r2,132(sp)
  805dfc:	103d4626 	beq	r2,zero,805318 <_dtoa_r+0xc8>
    *rve = s;
  805e00:	15400015 	stw	r21,0(r2)
  805e04:	003d4406 	br	805318 <_dtoa_r+0xc8>
      k_check = 0;
  805e08:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  805e0c:	b0002416 	blt	r22,zero,805ea0 <_dtoa_r+0xc50>
      b2 = 0;
  805e10:	d8000615 	stw	zero,24(sp)
      s2 += k;
  805e14:	d8800317 	ldw	r2,12(sp)
  if (mode < 0 || mode > 9)
  805e18:	d8c00217 	ldw	r3,8(sp)
      b5 = 0;
  805e1c:	d8000815 	stw	zero,32(sp)
      s2 += k;
  805e20:	b0ad883a 	add	r22,r22,r2
  if (mode < 0 || mode > 9)
  805e24:	d8800415 	stw	r2,16(sp)
  805e28:	188002a8 	cmpgeui	r2,r3,10
  805e2c:	103db326 	beq	r2,zero,8054fc <_dtoa_r+0x2ac>
  leftright = 1;
  805e30:	00800044 	movi	r2,1
  805e34:	d8800715 	stw	r2,28(sp)
  ilim = ilim1 = -1;
  805e38:	00bfffc4 	movi	r2,-1
  try_quick = 1;
  805e3c:	04000044 	movi	r16,1
    mode = 0;
  805e40:	d8000215 	stw	zero,8(sp)
  ilim = ilim1 = -1;
  805e44:	d8800515 	stw	r2,20(sp)
      ndigits = 0;
  805e48:	d8001e15 	stw	zero,120(sp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  805e4c:	d8800517 	ldw	r2,20(sp)
  805e50:	b8001115 	stw	zero,68(r23)
  805e54:	000b883a 	mov	r5,zero
  805e58:	d8800b15 	stw	r2,44(sp)
  805e5c:	003dc406 	br	805570 <_dtoa_r+0x320>
  switch (mode)
  805e60:	188000e0 	cmpeqi	r2,r3,3
      leftright = 0;
  805e64:	d8000715 	stw	zero,28(sp)
  switch (mode)
  805e68:	1002ac26 	beq	r2,zero,80691c <_dtoa_r+0x16cc>
      i = ndigits + k + 1;
  805e6c:	d8801e17 	ldw	r2,120(sp)
  805e70:	d8c00417 	ldw	r3,16(sp)
  805e74:	10c5883a 	add	r2,r2,r3
  805e78:	d8800b15 	stw	r2,44(sp)
  805e7c:	10800044 	addi	r2,r2,1
  805e80:	d8800515 	stw	r2,20(sp)
      if (i <= 0)
  805e84:	100d883a 	mov	r6,r2
  805e88:	00bdae16 	blt	zero,r2,805544 <_dtoa_r+0x2f4>
  805e8c:	01800044 	movi	r6,1
  805e90:	003dac06 	br	805544 <_dtoa_r+0x2f4>
  k_check = 1;
  805e94:	00800044 	movi	r2,1
  805e98:	d8800915 	stw	r2,36(sp)
  if (j >= 0)
  805e9c:	b03d890e 	bge	r22,zero,8054c4 <_dtoa_r+0x274>
      b2 = -j;
  805ea0:	00800044 	movi	r2,1
  805ea4:	1405c83a 	sub	r2,r2,r16
  805ea8:	d8800615 	stw	r2,24(sp)
      s2 = 0;
  805eac:	002d883a 	mov	r22,zero
  805eb0:	003d8506 	br	8054c8 <_dtoa_r+0x278>
  if (ds < 0. && ds != k)
  805eb4:	a809883a 	mov	r4,r21
  805eb8:	080fab00 	call	80fab0 <__floatsidf>
  805ebc:	900d883a 	mov	r6,r18
  805ec0:	b00f883a 	mov	r7,r22
  805ec4:	1009883a 	mov	r4,r2
  805ec8:	180b883a 	mov	r5,r3
  805ecc:	080e72c0 	call	80e72c <__eqdf2>
  805ed0:	103d6926 	beq	r2,zero,805478 <_dtoa_r+0x228>
    k--;			/* want k = floor(ds) */
  805ed4:	a8bfffc4 	addi	r2,r21,-1
  805ed8:	d8800315 	stw	r2,12(sp)
  805edc:	003d6606 	br	805478 <_dtoa_r+0x228>
      return s;
  805ee0:	00802074 	movhi	r2,129
  805ee4:	108ad004 	addi	r2,r2,11072
  805ee8:	d8800115 	stw	r2,4(sp)
  805eec:	003d0a06 	br	805318 <_dtoa_r+0xc8>
  805ef0:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  805ef4:	dc800617 	ldw	r18,24(sp)
  mhi = mlo = 0;
  805ef8:	0021883a 	mov	r16,zero
  805efc:	003f3206 	br	805bc8 <_dtoa_r+0x978>
    b = lshift (ptr, b, b2);
  805f00:	e00b883a 	mov	r5,fp
  805f04:	100d883a 	mov	r6,r2
  805f08:	b809883a 	mov	r4,r23
  805f0c:	08092d00 	call	8092d0 <__lshift>
  805f10:	1039883a 	mov	fp,r2
  805f14:	003f6806 	br	805cb8 <_dtoa_r+0xa68>
  805f18:	00800704 	movi	r2,28
  805f1c:	003f5f06 	br	805c9c <_dtoa_r+0xa4c>
       : (word1 (d) << (32 - i));
  805f20:	01000804 	movi	r4,32
  805f24:	2089c83a 	sub	r4,r4,r2
  805f28:	9908983a 	sll	r4,r19,r4
  805f2c:	003d1d06 	br	8053a4 <_dtoa_r+0x154>
  try_quick = 1;
  805f30:	04000044 	movi	r16,1
  805f34:	003d7606 	br	805510 <_dtoa_r+0x2c0>
    S = pow5mult (ptr, S, s5);
  805f38:	100b883a 	mov	r5,r2
  805f3c:	b809883a 	mov	r4,r23
  805f40:	08091880 	call	809188 <__pow5mult>
  if (mode < 2)
  805f44:	d8c00217 	ldw	r3,8(sp)
    S = pow5mult (ptr, S, s5);
  805f48:	1029883a 	mov	r20,r2
  if (mode < 2)
  805f4c:	18c00090 	cmplti	r3,r3,2
  805f50:	1801511e 	bne	r3,zero,806498 <_dtoa_r+0x1248>
  spec_case = 0;
  805f54:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  805f58:	a0800417 	ldw	r2,16(r20)
  805f5c:	10800104 	addi	r2,r2,4
  805f60:	100490ba 	slli	r2,r2,2
  805f64:	a085883a 	add	r2,r20,r2
  805f68:	11000017 	ldw	r4,0(r2)
  805f6c:	0808d000 	call	808d00 <__hi0bits>
  805f70:	00c00804 	movi	r3,32
  805f74:	1885c83a 	sub	r2,r3,r2
  805f78:	003f3f06 	br	805c78 <_dtoa_r+0xa28>
	    mhi = multadd (ptr, mhi, 10, 0);
  805f7c:	800b883a 	mov	r5,r16
  805f80:	000f883a 	mov	r7,zero
  805f84:	01800284 	movi	r6,10
  805f88:	b809883a 	mov	r4,r23
  805f8c:	0808a6c0 	call	808a6c <__multadd>
  805f90:	1021883a 	mov	r16,r2
  if (ilim <= 0 && mode > 2)
  805f94:	d8800b17 	ldw	r2,44(sp)
  805f98:	00824b0e 	bge	zero,r2,8068c8 <_dtoa_r+0x1678>
	  k--;
  805f9c:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  805fa0:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  805fa4:	0480ac16 	blt	zero,r18,806258 <_dtoa_r+0x1008>
      if (spec_case)
  805fa8:	8801731e 	bne	r17,zero,806578 <_dtoa_r+0x1328>
  805fac:	8025883a 	mov	r18,r16
  805fb0:	dd800117 	ldw	r22,4(sp)
  805fb4:	d9000517 	ldw	r4,20(sp)
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  805fb8:	98c0004c 	andi	r3,r19,1
  805fbc:	b0bfffc4 	addi	r2,r22,-1
  805fc0:	1105883a 	add	r2,r2,r4
  805fc4:	d8800515 	stw	r2,20(sp)
  805fc8:	d8800217 	ldw	r2,8(sp)
  805fcc:	d8c00815 	stw	r3,32(sp)
  805fd0:	1884b03a 	or	r2,r3,r2
  805fd4:	d8800715 	stw	r2,28(sp)
  805fd8:	00002906 	br	806080 <_dtoa_r+0xe30>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  805fdc:	e009883a 	mov	r4,fp
  805fe0:	08094580 	call	809458 <__mcmp>
	  Bfree (ptr, delta);
  805fe4:	980b883a 	mov	r5,r19
  805fe8:	b809883a 	mov	r4,r23
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  805fec:	d8800315 	stw	r2,12(sp)
	  Bfree (ptr, delta);
  805ff0:	0808a480 	call	808a48 <_Bfree>
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  805ff4:	d8800317 	ldw	r2,12(sp)
  805ff8:	1000021e 	bne	r2,zero,806004 <_dtoa_r+0xdb4>
  805ffc:	d8c00717 	ldw	r3,28(sp)
  806000:	18022326 	beq	r3,zero,806890 <_dtoa_r+0x1640>
         if ((j < 0) || ((j == 0) && !mode
  806004:	b4c00044 	addi	r19,r22,1
  806008:	88012916 	blt	r17,zero,8064b0 <_dtoa_r+0x1260>
	      && !(word1 (d) & 1)
  80600c:	d8c00217 	ldw	r3,8(sp)
  806010:	88e2b03a 	or	r17,r17,r3
  806014:	d8c00817 	ldw	r3,32(sp)
  806018:	1c62b03a 	or	r17,r3,r17
  80601c:	88012426 	beq	r17,zero,8064b0 <_dtoa_r+0x1260>
	  if (j1 > 0)
  806020:	00816f16 	blt	zero,r2,8065e0 <_dtoa_r+0x1390>
	  if (i == ilim)
  806024:	d8800517 	ldw	r2,20(sp)
	  *s++ = dig;
  806028:	b5400005 	stb	r21,0(r22)
	  if (i == ilim)
  80602c:	15817926 	beq	r2,r22,806614 <_dtoa_r+0x13c4>
	  b = multadd (ptr, b, 10, 0);
  806030:	e00b883a 	mov	r5,fp
  806034:	000f883a 	mov	r7,zero
  806038:	01800284 	movi	r6,10
  80603c:	b809883a 	mov	r4,r23
  806040:	0808a6c0 	call	808a6c <__multadd>
  806044:	1039883a 	mov	fp,r2
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  806048:	800b883a 	mov	r5,r16
  80604c:	000f883a 	mov	r7,zero
  806050:	01800284 	movi	r6,10
  806054:	b809883a 	mov	r4,r23
	  if (mlo == mhi)
  806058:	84801f26 	beq	r16,r18,8060d8 <_dtoa_r+0xe88>
	      mlo = multadd (ptr, mlo, 10, 0);
  80605c:	0808a6c0 	call	808a6c <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
  806060:	900b883a 	mov	r5,r18
  806064:	000f883a 	mov	r7,zero
  806068:	01800284 	movi	r6,10
  80606c:	b809883a 	mov	r4,r23
	      mlo = multadd (ptr, mlo, 10, 0);
  806070:	1021883a 	mov	r16,r2
	      mhi = multadd (ptr, mhi, 10, 0);
  806074:	0808a6c0 	call	808a6c <__multadd>
  806078:	1025883a 	mov	r18,r2
	  dig = quorem (b, S) + '0';
  80607c:	982d883a 	mov	r22,r19
  806080:	a00b883a 	mov	r5,r20
  806084:	e009883a 	mov	r4,fp
  806088:	08050300 	call	805030 <quorem>
	  j = cmp (b, mlo);
  80608c:	800b883a 	mov	r5,r16
  806090:	e009883a 	mov	r4,fp
	  dig = quorem (b, S) + '0';
  806094:	102b883a 	mov	r21,r2
  806098:	d8800615 	stw	r2,24(sp)
	  j = cmp (b, mlo);
  80609c:	08094580 	call	809458 <__mcmp>
	  delta = diff (ptr, S, mhi);
  8060a0:	a00b883a 	mov	r5,r20
  8060a4:	900d883a 	mov	r6,r18
  8060a8:	b809883a 	mov	r4,r23
	  j = cmp (b, mlo);
  8060ac:	1023883a 	mov	r17,r2
	  delta = diff (ptr, S, mhi);
  8060b0:	08094b00 	call	8094b0 <__mdiff>
  8060b4:	1027883a 	mov	r19,r2
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8060b8:	10800317 	ldw	r2,12(r2)
	  dig = quorem (b, S) + '0';
  8060bc:	ad400c04 	addi	r21,r21,48
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8060c0:	980b883a 	mov	r5,r19
  8060c4:	103fc526 	beq	r2,zero,805fdc <_dtoa_r+0xd8c>
	  Bfree (ptr, delta);
  8060c8:	b809883a 	mov	r4,r23
  8060cc:	0808a480 	call	808a48 <_Bfree>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  8060d0:	00800044 	movi	r2,1
  8060d4:	003fcb06 	br	806004 <_dtoa_r+0xdb4>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  8060d8:	0808a6c0 	call	808a6c <__multadd>
  8060dc:	1021883a 	mov	r16,r2
  8060e0:	1025883a 	mov	r18,r2
  8060e4:	003fe506 	br	80607c <_dtoa_r+0xe2c>
  if (ilim <= 0 && mode > 2)
  8060e8:	d8800217 	ldw	r2,8(sp)
  8060ec:	108000d0 	cmplti	r2,r2,3
  8060f0:	10003e26 	beq	r2,zero,8061ec <_dtoa_r+0xf9c>
  if (leftright)
  8060f4:	d8800717 	ldw	r2,28(sp)
  8060f8:	103faa1e 	bne	r2,zero,805fa4 <_dtoa_r+0xd54>
	*s++ = dig = quorem (b, S) + '0';
  8060fc:	a00b883a 	mov	r5,r20
  806100:	e009883a 	mov	r4,fp
  806104:	08050300 	call	805030 <quorem>
  806108:	14c00c04 	addi	r19,r2,48
  80610c:	d8800117 	ldw	r2,4(sp)
  mhi = mlo = 0;
  806110:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  806114:	15400044 	addi	r21,r2,1
  806118:	14c00005 	stb	r19,0(r2)
  *decpt = k + 1;
  80611c:	d8800417 	ldw	r2,16(sp)
  806120:	10800044 	addi	r2,r2,1
  806124:	d8800415 	stw	r2,16(sp)
  806128:	003f0906 	br	805d50 <_dtoa_r+0xb00>
      if (cmp (b, S) < 0)
  80612c:	a00b883a 	mov	r5,r20
  806130:	e009883a 	mov	r4,fp
  806134:	08094580 	call	809458 <__mcmp>
  806138:	103ee70e 	bge	r2,zero,805cd8 <_dtoa_r+0xa88>
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  80613c:	e00b883a 	mov	r5,fp
  806140:	000f883a 	mov	r7,zero
  806144:	01800284 	movi	r6,10
  806148:	b809883a 	mov	r4,r23
  80614c:	0808a6c0 	call	808a6c <__multadd>
	  k--;
  806150:	d8c00417 	ldw	r3,16(sp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  806154:	1039883a 	mov	fp,r2
	  if (leftright)
  806158:	d8800717 	ldw	r2,28(sp)
	  k--;
  80615c:	1d7fffc4 	addi	r21,r3,-1
	  if (leftright)
  806160:	103f861e 	bne	r2,zero,805f7c <_dtoa_r+0xd2c>
  if (ilim <= 0 && mode > 2)
  806164:	d8800b17 	ldw	r2,44(sp)
  806168:	0081d20e 	bge	zero,r2,8068b4 <_dtoa_r+0x1664>
  80616c:	d8800515 	stw	r2,20(sp)
  806170:	003ee006 	br	805cf4 <_dtoa_r+0xaa4>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806174:	00802074 	movhi	r2,129
  806178:	1007883a 	mov	r3,r2
  80617c:	18cad904 	addi	r3,r3,11108
	  s[3] ? s + 8 :
  806180:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806184:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  806188:	108ad9c4 	addi	r2,r2,11111
  80618c:	003ded06 	br	805944 <_dtoa_r+0x6f4>
  switch (mode)
  806190:	00800044 	movi	r2,1
  806194:	d8800715 	stw	r2,28(sp)
  806198:	003f3406 	br	805e6c <_dtoa_r+0xc1c>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  80619c:	983eb21e 	bne	r19,zero,805c68 <_dtoa_r+0xa18>
  8061a0:	00800434 	movhi	r2,16
  8061a4:	10bfffc4 	addi	r2,r2,-1
  8061a8:	8884703a 	and	r2,r17,r2
  8061ac:	103eae1e 	bne	r2,zero,805c68 <_dtoa_r+0xa18>
	  && word0 (d) & Exp_mask
  8061b0:	8c5ffc2c 	andhi	r17,r17,32752
  8061b4:	883eac26 	beq	r17,zero,805c68 <_dtoa_r+0xa18>
	  b2 += Log2P;
  8061b8:	d8800617 	ldw	r2,24(sp)
	  s2 += Log2P;
  8061bc:	b5800044 	addi	r22,r22,1
	  spec_case = 1;
  8061c0:	04400044 	movi	r17,1
	  b2 += Log2P;
  8061c4:	10800044 	addi	r2,r2,1
  8061c8:	d8800615 	stw	r2,24(sp)
	  spec_case = 1;
  8061cc:	003ea706 	br	805c6c <_dtoa_r+0xa1c>
	ndigits = 1;
  8061d0:	00800044 	movi	r2,1
  8061d4:	d8800515 	stw	r2,20(sp)
  8061d8:	d8801e15 	stw	r2,120(sp)
  8061dc:	003f1b06 	br	805e4c <_dtoa_r+0xbfc>
  if (ilim <= 0 && mode > 2)
  8061e0:	d8800b17 	ldw	r2,44(sp)
	  k--;
  8061e4:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  8061e8:	d8800515 	stw	r2,20(sp)
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
  8061ec:	d8800517 	ldw	r2,20(sp)
  8061f0:	103e081e 	bne	r2,zero,805a14 <_dtoa_r+0x7c4>
  8061f4:	a00b883a 	mov	r5,r20
  8061f8:	b809883a 	mov	r4,r23
  8061fc:	000f883a 	mov	r7,zero
  806200:	01800144 	movi	r6,5
  806204:	0808a6c0 	call	808a6c <__multadd>
  806208:	100b883a 	mov	r5,r2
  80620c:	e009883a 	mov	r4,fp
  806210:	1029883a 	mov	r20,r2
  806214:	08094580 	call	809458 <__mcmp>
  806218:	00bdfe0e 	bge	zero,r2,805a14 <_dtoa_r+0x7c4>
      *s++ = '1';
  80621c:	d8c00117 	ldw	r3,4(sp)
  806220:	00800c44 	movi	r2,49
  806224:	18800005 	stb	r2,0(r3)
      k++;
  806228:	d8800417 	ldw	r2,16(sp)
      *s++ = '1';
  80622c:	1d400044 	addi	r21,r3,1
      k++;
  806230:	14400044 	addi	r17,r2,1
  Bfree (ptr, S);
  806234:	a00b883a 	mov	r5,r20
  806238:	b809883a 	mov	r4,r23
  80623c:	0808a480 	call	808a48 <_Bfree>
  *decpt = k + 1;
  806240:	88800044 	addi	r2,r17,1
  806244:	d8800415 	stw	r2,16(sp)
  if (mhi)
  806248:	803ee11e 	bne	r16,zero,805dd0 <_dtoa_r+0xb80>
  80624c:	003ee306 	br	805ddc <_dtoa_r+0xb8c>
      i = m2 < s2 ? m2 : s2;
  806250:	b005883a 	mov	r2,r22
  806254:	003e6006 	br	805bd8 <_dtoa_r+0x988>
	mhi = lshift (ptr, mhi, m2);
  806258:	800b883a 	mov	r5,r16
  80625c:	900d883a 	mov	r6,r18
  806260:	b809883a 	mov	r4,r23
  806264:	08092d00 	call	8092d0 <__lshift>
  806268:	1021883a 	mov	r16,r2
  80626c:	003f4e06 	br	805fa8 <_dtoa_r+0xd58>
	    m5 -= j;
  806270:	1529c83a 	sub	r20,r2,r20
  806274:	003e4906 	br	805b9c <_dtoa_r+0x94c>
  806278:	dcc00c15 	stw	r19,48(sp)
  80627c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  806280:	05400084 	movi	r21,2
  806284:	003cdf06 	br	805604 <_dtoa_r+0x3b4>
	*s++ = dig = quorem (b, S) + '0';
  806288:	00800044 	movi	r2,1
  80628c:	003ead06 	br	805d44 <_dtoa_r+0xaf4>
  switch (mode)
  806290:	00800044 	movi	r2,1
  806294:	d8800715 	stw	r2,28(sp)
  806298:	003ca506 	br	805530 <_dtoa_r+0x2e0>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  80629c:	1000021e 	bne	r2,zero,8062a8 <_dtoa_r+0x1058>
  8062a0:	98c0004c 	andi	r3,r19,1
  8062a4:	183eb41e 	bne	r3,zero,805d78 <_dtoa_r+0xb28>
  8062a8:	2005883a 	mov	r2,r4
  8062ac:	00000206 	br	8062b8 <_dtoa_r+0x1068>
      while (*--s == '0');
  8062b0:	a8bfff83 	ldbu	r2,-2(r21)
  8062b4:	182b883a 	mov	r21,r3
  8062b8:	10803fcc 	andi	r2,r2,255
  8062bc:	1080201c 	xori	r2,r2,128
  8062c0:	10bfe004 	addi	r2,r2,-128
  8062c4:	10800c18 	cmpnei	r2,r2,48
  8062c8:	a8ffffc4 	addi	r3,r21,-1
  8062cc:	103ff826 	beq	r2,zero,8062b0 <_dtoa_r+0x1060>
  8062d0:	003eb606 	br	805dac <_dtoa_r+0xb5c>
	    *s++ = '1';
  8062d4:	d8c00117 	ldw	r3,4(sp)
  8062d8:	00800c44 	movi	r2,49
  8062dc:	18800005 	stb	r2,0(r3)
  *decpt = k + 1;
  8062e0:	d8800417 	ldw	r2,16(sp)
  8062e4:	10800044 	addi	r2,r2,1
  8062e8:	d8800415 	stw	r2,16(sp)
	    goto ret;
  8062ec:	003eaf06 	br	805dac <_dtoa_r+0xb5c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8062f0:	d8c00a17 	ldw	r3,40(sp)
  8062f4:	18011826 	beq	r3,zero,806758 <_dtoa_r+0x1508>
  m2 = b2;
  8062f8:	d8c00617 	ldw	r3,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8062fc:	10810cc4 	addi	r2,r2,1075
      s2 += i;
  806300:	b0ad883a 	add	r22,r22,r2
  806304:	1885883a 	add	r2,r3,r2
  806308:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  80630c:	1825883a 	mov	r18,r3
  806310:	d8800615 	stw	r2,24(sp)
  806314:	003e2806 	br	805bb8 <_dtoa_r+0x968>
      eps.d = ieps * d.d + 7.;
  806318:	a809883a 	mov	r4,r21
  80631c:	080fab00 	call	80fab0 <__floatsidf>
  806320:	800d883a 	mov	r6,r16
  806324:	900f883a 	mov	r7,r18
  806328:	1009883a 	mov	r4,r2
  80632c:	180b883a 	mov	r5,r3
  806330:	080e97c0 	call	80e97c <__muldf3>
  806334:	000d883a 	mov	r6,zero
  806338:	01d00734 	movhi	r7,16412
  80633c:	1009883a 	mov	r4,r2
  806340:	180b883a 	mov	r5,r3
  806344:	080d50c0 	call	80d50c <__adddf3>
  806348:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  80634c:	00bf3034 	movhi	r2,64704
  806350:	1885883a 	add	r2,r3,r2
  806354:	d8800c15 	stw	r2,48(sp)
	  d.d -= 5.;
  806358:	8009883a 	mov	r4,r16
  80635c:	900b883a 	mov	r5,r18
  806360:	000d883a 	mov	r6,zero
  806364:	01d00534 	movhi	r7,16404
  806368:	080f1280 	call	80f128 <__subdf3>
	  if (d.d > eps.d)
  80636c:	dd400c17 	ldw	r21,48(sp)
  806370:	a00d883a 	mov	r6,r20
  806374:	1009883a 	mov	r4,r2
  806378:	a80f883a 	mov	r7,r21
  80637c:	180b883a 	mov	r5,r3
	  d.d -= 5.;
  806380:	1025883a 	mov	r18,r2
  806384:	1821883a 	mov	r16,r3
	  if (d.d > eps.d)
  806388:	080e7ac0 	call	80e7ac <__gedf2>
  80638c:	00812f16 	blt	zero,r2,80684c <_dtoa_r+0x15fc>
	  if (d.d < -eps.d)
  806390:	a9e0003c 	xorhi	r7,r21,32768
  806394:	a00d883a 	mov	r6,r20
  806398:	9009883a 	mov	r4,r18
  80639c:	800b883a 	mov	r5,r16
  8063a0:	080e8940 	call	80e894 <__ledf2>
  8063a4:	103d7d0e 	bge	r2,zero,80599c <_dtoa_r+0x74c>
	  S = mhi = 0;
  8063a8:	0029883a 	mov	r20,zero
  8063ac:	0021883a 	mov	r16,zero
  8063b0:	003d9806 	br	805a14 <_dtoa_r+0x7c4>
	b = pow5mult (ptr, b, b5);
  8063b4:	d9800817 	ldw	r6,32(sp)
  8063b8:	e00b883a 	mov	r5,fp
  8063bc:	b809883a 	mov	r4,r23
  8063c0:	08091880 	call	809188 <__pow5mult>
  8063c4:	1039883a 	mov	fp,r2
  8063c8:	003e1e06 	br	805c44 <_dtoa_r+0x9f4>
      else if ((j1 = -k) != 0)
  8063cc:	d8800417 	ldw	r2,16(sp)
  8063d0:	1000ed26 	beq	r2,zero,806788 <_dtoa_r+0x1538>
  8063d4:	00a9c83a 	sub	r20,zero,r2
	  d.d *= tens[j1 & 0xf];
  8063d8:	a08003cc 	andi	r2,r20,15
  8063dc:	100690fa 	slli	r3,r2,3
  8063e0:	00802074 	movhi	r2,129
  8063e4:	108b3104 	addi	r2,r2,11460
  8063e8:	10c5883a 	add	r2,r2,r3
  8063ec:	11800017 	ldw	r6,0(r2)
  8063f0:	11c00117 	ldw	r7,4(r2)
	  for (j = j1 >> 4; j; j >>= 1, i++)
  8063f4:	a029d13a 	srai	r20,r20,4
	  d.d *= tens[j1 & 0xf];
  8063f8:	9809883a 	mov	r4,r19
  8063fc:	880b883a 	mov	r5,r17
  806400:	080e97c0 	call	80e97c <__muldf3>
  806404:	1021883a 	mov	r16,r2
  806408:	1825883a 	mov	r18,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  80640c:	a0013826 	beq	r20,zero,8068f0 <_dtoa_r+0x16a0>
  806410:	02002074 	movhi	r8,129
      ieps = 2;			/* conservative */
  806414:	05400084 	movi	r21,2
  806418:	420b2704 	addi	r8,r8,11420
	  for (j = j1 >> 4; j; j >>= 1, i++)
  80641c:	1009883a 	mov	r4,r2
      ieps = 2;			/* conservative */
  806420:	9805883a 	mov	r2,r19
	  for (j = j1 >> 4; j; j >>= 1, i++)
  806424:	180b883a 	mov	r5,r3
      ieps = 2;			/* conservative */
  806428:	dc000c15 	stw	r16,48(sp)
  80642c:	8827883a 	mov	r19,r17
	  for (j = j1 >> 4; j; j >>= 1, i++)
  806430:	0007883a 	mov	r3,zero
      ieps = 2;			/* conservative */
  806434:	a823883a 	mov	r17,r21
  806438:	4021883a 	mov	r16,r8
  80643c:	102b883a 	mov	r21,r2
	    if (j & 1)
  806440:	a180004c 	andi	r6,r20,1
  806444:	30000726 	beq	r6,zero,806464 <_dtoa_r+0x1214>
		d.d *= bigtens[i];
  806448:	81800017 	ldw	r6,0(r16)
  80644c:	81c00117 	ldw	r7,4(r16)
		ieps++;
  806450:	8c400044 	addi	r17,r17,1
		d.d *= bigtens[i];
  806454:	080e97c0 	call	80e97c <__muldf3>
  806458:	180b883a 	mov	r5,r3
  80645c:	1009883a 	mov	r4,r2
  806460:	00c00044 	movi	r3,1
	  for (j = j1 >> 4; j; j >>= 1, i++)
  806464:	a029d07a 	srai	r20,r20,1
  806468:	84000204 	addi	r16,r16,8
  80646c:	a03ff41e 	bne	r20,zero,806440 <_dtoa_r+0x11f0>
  806470:	a805883a 	mov	r2,r21
  806474:	18c03fcc 	andi	r3,r3,255
  806478:	882b883a 	mov	r21,r17
  80647c:	dc000c17 	ldw	r16,48(sp)
  806480:	9823883a 	mov	r17,r19
  806484:	1027883a 	mov	r19,r2
  806488:	183c7726 	beq	r3,zero,805668 <_dtoa_r+0x418>
  80648c:	2021883a 	mov	r16,r4
  806490:	2825883a 	mov	r18,r5
  806494:	003c7406 	br	805668 <_dtoa_r+0x418>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  806498:	983eae1e 	bne	r19,zero,805f54 <_dtoa_r+0xd04>
  80649c:	00800434 	movhi	r2,16
  8064a0:	10bfffc4 	addi	r2,r2,-1
  8064a4:	8884703a 	and	r2,r17,r2
  8064a8:	103f4126 	beq	r2,zero,8061b0 <_dtoa_r+0xf60>
  8064ac:	003ea906 	br	805f54 <_dtoa_r+0xd04>
  *decpt = k + 1;
  8064b0:	9807883a 	mov	r3,r19
  8064b4:	a827883a 	mov	r19,r21
  8064b8:	182b883a 	mov	r21,r3
  8064bc:	d8c00417 	ldw	r3,16(sp)
  8064c0:	18c00044 	addi	r3,r3,1
  8064c4:	d8c00415 	stw	r3,16(sp)
	      if (j1 > 0)
  8064c8:	00800d0e 	bge	zero,r2,806500 <_dtoa_r+0x12b0>
		  b = lshift (ptr, b, 1);
  8064cc:	e00b883a 	mov	r5,fp
  8064d0:	b809883a 	mov	r4,r23
  8064d4:	01800044 	movi	r6,1
  8064d8:	08092d00 	call	8092d0 <__lshift>
		  j1 = cmp (b, S);
  8064dc:	a00b883a 	mov	r5,r20
  8064e0:	1009883a 	mov	r4,r2
		  b = lshift (ptr, b, 1);
  8064e4:	1039883a 	mov	fp,r2
		  j1 = cmp (b, S);
  8064e8:	08094580 	call	809458 <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  8064ec:	0080df0e 	bge	zero,r2,80686c <_dtoa_r+0x161c>
		      && dig++ == '9')
  8064f0:	98c00e60 	cmpeqi	r3,r19,57
  8064f4:	1800ce1e 	bne	r3,zero,806830 <_dtoa_r+0x15e0>
  8064f8:	d8800617 	ldw	r2,24(sp)
  8064fc:	14c00c44 	addi	r19,r2,49
	      goto ret;
  806500:	8023883a 	mov	r17,r16
	      *s++ = dig;
  806504:	b4c00005 	stb	r19,0(r22)
	      goto ret;
  806508:	9021883a 	mov	r16,r18
  80650c:	003e2706 	br	805dac <_dtoa_r+0xb5c>
  806510:	b82b883a 	mov	r21,r23
  806514:	ddc00217 	ldw	r23,8(sp)
	      d.d += d.d;
  806518:	200d883a 	mov	r6,r4
  80651c:	280f883a 	mov	r7,r5
  806520:	080d50c0 	call	80d50c <__adddf3>
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  806524:	180b883a 	mov	r5,r3
  806528:	800d883a 	mov	r6,r16
  80652c:	900f883a 	mov	r7,r18
  806530:	1009883a 	mov	r4,r2
	      d.d += d.d;
  806534:	1823883a 	mov	r17,r3
  806538:	1027883a 	mov	r19,r2
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  80653c:	080e7ac0 	call	80e7ac <__gedf2>
			k++;
  806540:	d8c00417 	ldw	r3,16(sp)
  806544:	18c00044 	addi	r3,r3,1
  806548:	d8c00415 	stw	r3,16(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  80654c:	00808c16 	blt	zero,r2,806780 <_dtoa_r+0x1530>
  806550:	800d883a 	mov	r6,r16
  806554:	900f883a 	mov	r7,r18
  806558:	9809883a 	mov	r4,r19
  80655c:	880b883a 	mov	r5,r17
  806560:	080e72c0 	call	80e72c <__eqdf2>
  806564:	1000021e 	bne	r2,zero,806570 <_dtoa_r+0x1320>
  806568:	ad40004c 	andi	r21,r21,1
  80656c:	a800841e 	bne	r21,zero,806780 <_dtoa_r+0x1530>
  806570:	a02b883a 	mov	r21,r20
  806574:	003e1906 	br	805ddc <_dtoa_r+0xb8c>
	  mhi = eBalloc (ptr, mhi->_k);
  806578:	81400117 	ldw	r5,4(r16)
  80657c:	b809883a 	mov	r4,r23
  806580:	08089a40 	call	8089a4 <_Balloc>
  806584:	1023883a 	mov	r17,r2
  806588:	1000f326 	beq	r2,zero,806958 <_dtoa_r+0x1708>
	  Bcopy (mhi, mlo);
  80658c:	81800417 	ldw	r6,16(r16)
  806590:	81400304 	addi	r5,r16,12
  806594:	11000304 	addi	r4,r2,12
  806598:	31800084 	addi	r6,r6,2
  80659c:	300c90ba 	slli	r6,r6,2
  8065a0:	08086880 	call	808688 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
  8065a4:	01800044 	movi	r6,1
  8065a8:	880b883a 	mov	r5,r17
  8065ac:	b809883a 	mov	r4,r23
  8065b0:	08092d00 	call	8092d0 <__lshift>
  8065b4:	1025883a 	mov	r18,r2
  8065b8:	003e7d06 	br	805fb0 <_dtoa_r+0xd60>
	    b = pow5mult (ptr, b, j);
  8065bc:	e00b883a 	mov	r5,fp
  8065c0:	b809883a 	mov	r4,r23
  8065c4:	08091880 	call	809188 <__pow5mult>
  8065c8:	1039883a 	mov	fp,r2
  8065cc:	003d9d06 	br	805c44 <_dtoa_r+0x9f4>
	      m2 -= i;
  8065d0:	d8800617 	ldw	r2,24(sp)
  8065d4:	d8c00517 	ldw	r3,20(sp)
  8065d8:	10e5c83a 	sub	r18,r2,r3
	      i = 0;
  8065dc:	003d7606 	br	805bb8 <_dtoa_r+0x968>
  *decpt = k + 1;
  8065e0:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  8065e4:	9805883a 	mov	r2,r19
  8065e8:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  8065ec:	18c00044 	addi	r3,r3,1
	      if (dig == '9')
  8065f0:	102b883a 	mov	r21,r2
  *decpt = k + 1;
  8065f4:	d8c00415 	stw	r3,16(sp)
	      if (dig == '9')
  8065f8:	98800e58 	cmpnei	r2,r19,57
  8065fc:	10008c26 	beq	r2,zero,806830 <_dtoa_r+0x15e0>
	      *s++ = dig + 1;
  806600:	98c00044 	addi	r3,r19,1
	      goto ret;
  806604:	8023883a 	mov	r17,r16
	      *s++ = dig + 1;
  806608:	b0c00005 	stb	r3,0(r22)
	      goto ret;
  80660c:	9021883a 	mov	r16,r18
  806610:	003de606 	br	805dac <_dtoa_r+0xb5c>
  *decpt = k + 1;
  806614:	9805883a 	mov	r2,r19
  806618:	a827883a 	mov	r19,r21
  80661c:	102b883a 	mov	r21,r2
  806620:	d8800417 	ldw	r2,16(sp)
  806624:	8023883a 	mov	r17,r16
  806628:	9021883a 	mov	r16,r18
  80662c:	10800044 	addi	r2,r2,1
  806630:	d8800415 	stw	r2,16(sp)
  806634:	003dc606 	br	805d50 <_dtoa_r+0xb00>
	  eps.d *= tens[ilim - 1];
  806638:	d9400c17 	ldw	r5,48(sp)
  80663c:	a009883a 	mov	r4,r20
  806640:	080e97c0 	call	80e97c <__muldf3>
	      if (i == ilim)
  806644:	d9800d17 	ldw	r6,52(sp)
	      *s++ = '0' + (int) L;
  806648:	d9400117 	ldw	r5,4(sp)
  80664c:	d9001017 	ldw	r4,64(sp)
	  eps.d *= tens[ilim - 1];
  806650:	d8800c15 	stw	r2,48(sp)
  806654:	d8c00d15 	stw	r3,52(sp)
	      *s++ = '0' + (int) L;
  806658:	29000005 	stb	r4,0(r5)
	      if (i == ilim)
  80665c:	31000058 	cmpnei	r4,r6,1
  806660:	29a9883a 	add	r20,r5,r6
  806664:	2000a026 	beq	r4,zero,8068e8 <_dtoa_r+0x1698>
  806668:	dc400e15 	stw	r17,56(sp)
  80666c:	8009883a 	mov	r4,r16
  806670:	900b883a 	mov	r5,r18
  806674:	a823883a 	mov	r17,r21
	  for (i = 1;; i++, d.d *= 10.)
  806678:	000d883a 	mov	r6,zero
  80667c:	01d00934 	movhi	r7,16420
  806680:	080e97c0 	call	80e97c <__muldf3>
	      L = d.d;
  806684:	180b883a 	mov	r5,r3
  806688:	1009883a 	mov	r4,r2
	  for (i = 1;; i++, d.d *= 10.)
  80668c:	1825883a 	mov	r18,r3
  806690:	102b883a 	mov	r21,r2
	      L = d.d;
  806694:	080fa300 	call	80fa30 <__fixdfsi>
	      d.d -= L;
  806698:	1009883a 	mov	r4,r2
	      L = d.d;
  80669c:	1021883a 	mov	r16,r2
	      d.d -= L;
  8066a0:	080fab00 	call	80fab0 <__floatsidf>
  8066a4:	a809883a 	mov	r4,r21
  8066a8:	900b883a 	mov	r5,r18
  8066ac:	100d883a 	mov	r6,r2
  8066b0:	180f883a 	mov	r7,r3
	      *s++ = '0' + (int) L;
  8066b4:	8c400044 	addi	r17,r17,1
  8066b8:	84000c04 	addi	r16,r16,48
	      d.d -= L;
  8066bc:	080f1280 	call	80f128 <__subdf3>
	      *s++ = '0' + (int) L;
  8066c0:	8c3fffc5 	stb	r16,-1(r17)
	      d.d -= L;
  8066c4:	1009883a 	mov	r4,r2
  8066c8:	180b883a 	mov	r5,r3
	      if (i == ilim)
  8066cc:	a47fea1e 	bne	r20,r17,806678 <_dtoa_r+0x1428>
  8066d0:	dc400e17 	ldw	r17,56(sp)
  8066d4:	1021883a 	mov	r16,r2
  8066d8:	1825883a 	mov	r18,r3
		  if (d.d > 0.5 + eps.d)
  8066dc:	d9000c17 	ldw	r4,48(sp)
  8066e0:	d9400d17 	ldw	r5,52(sp)
  8066e4:	000d883a 	mov	r6,zero
  8066e8:	01cff834 	movhi	r7,16352
  8066ec:	080d50c0 	call	80d50c <__adddf3>
  8066f0:	800d883a 	mov	r6,r16
  8066f4:	900f883a 	mov	r7,r18
  8066f8:	1009883a 	mov	r4,r2
  8066fc:	180b883a 	mov	r5,r3
  806700:	080e8940 	call	80e894 <__ledf2>
  806704:	10005416 	blt	r2,zero,806858 <_dtoa_r+0x1608>
		  else if (d.d < 0.5 - eps.d)
  806708:	d9800c17 	ldw	r6,48(sp)
  80670c:	d9c00d17 	ldw	r7,52(sp)
  806710:	0009883a 	mov	r4,zero
  806714:	014ff834 	movhi	r5,16352
  806718:	080f1280 	call	80f128 <__subdf3>
  80671c:	800d883a 	mov	r6,r16
  806720:	900f883a 	mov	r7,r18
  806724:	1009883a 	mov	r4,r2
  806728:	180b883a 	mov	r5,r3
  80672c:	080e7ac0 	call	80e7ac <__gedf2>
  806730:	00bc9a0e 	bge	zero,r2,80599c <_dtoa_r+0x74c>
		      while (*--s == '0');
  806734:	a0bfffc7 	ldb	r2,-1(r20)
  806738:	a02b883a 	mov	r21,r20
  80673c:	a53fffc4 	addi	r20,r20,-1
  806740:	10800c20 	cmpeqi	r2,r2,48
  806744:	103ffb1e 	bne	r2,zero,806734 <_dtoa_r+0x14e4>
  *decpt = k + 1;
  806748:	d8801117 	ldw	r2,68(sp)
  80674c:	10800044 	addi	r2,r2,1
  806750:	d8800415 	stw	r2,16(sp)
  806754:	003da106 	br	805ddc <_dtoa_r+0xb8c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  806758:	d8c01217 	ldw	r3,72(sp)
  m2 = b2;
  80675c:	d9000617 	ldw	r4,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  806760:	00800d84 	movi	r2,54
  806764:	10c5c83a 	sub	r2,r2,r3
      s2 += i;
  806768:	b0ad883a 	add	r22,r22,r2
  80676c:	2085883a 	add	r2,r4,r2
  806770:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  806774:	2025883a 	mov	r18,r4
      s2 += i;
  806778:	d8800615 	stw	r2,24(sp)
  80677c:	003d0e06 	br	805bb8 <_dtoa_r+0x968>
  806780:	d9000117 	ldw	r4,4(sp)
  806784:	003c4b06 	br	8058b4 <_dtoa_r+0x664>
  806788:	9821883a 	mov	r16,r19
  80678c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  806790:	05400084 	movi	r21,2
  806794:	003bb406 	br	805668 <_dtoa_r+0x418>
      if (k_check && d.d < 1. && ilim > 0)
  806798:	d8800517 	ldw	r2,20(sp)
  80679c:	103ede26 	beq	r2,zero,806318 <_dtoa_r+0x10c8>
	  if (ilim1 <= 0)
  8067a0:	d8800b17 	ldw	r2,44(sp)
  8067a4:	00bc7d0e 	bge	zero,r2,80599c <_dtoa_r+0x74c>
	  d.d *= 10.;
  8067a8:	900b883a 	mov	r5,r18
  8067ac:	8009883a 	mov	r4,r16
  8067b0:	000d883a 	mov	r6,zero
  8067b4:	01d00934 	movhi	r7,16420
  8067b8:	080e97c0 	call	80e97c <__muldf3>
      eps.d = ieps * d.d + 7.;
  8067bc:	a9000044 	addi	r4,r21,1
	  d.d *= 10.;
  8067c0:	1021883a 	mov	r16,r2
  8067c4:	1825883a 	mov	r18,r3
      eps.d = ieps * d.d + 7.;
  8067c8:	080fab00 	call	80fab0 <__floatsidf>
  8067cc:	800d883a 	mov	r6,r16
  8067d0:	900f883a 	mov	r7,r18
  8067d4:	1009883a 	mov	r4,r2
  8067d8:	180b883a 	mov	r5,r3
  8067dc:	080e97c0 	call	80e97c <__muldf3>
  8067e0:	1009883a 	mov	r4,r2
  8067e4:	000d883a 	mov	r6,zero
  8067e8:	01d00734 	movhi	r7,16412
  8067ec:	180b883a 	mov	r5,r3
  8067f0:	080d50c0 	call	80d50c <__adddf3>
	  k--;
  8067f4:	d9000417 	ldw	r4,16(sp)
      eps.d = ieps * d.d + 7.;
  8067f8:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  8067fc:	00bf3034 	movhi	r2,64704
  806800:	1887883a 	add	r3,r3,r2
  806804:	d8800b17 	ldw	r2,44(sp)
	  k--;
  806808:	213fffc4 	addi	r4,r4,-1
  80680c:	d9001115 	stw	r4,68(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  806810:	d8c00c15 	stw	r3,48(sp)
  806814:	d8800d15 	stw	r2,52(sp)
  806818:	003bb106 	br	8056e0 <_dtoa_r+0x490>
  *decpt = k + 1;
  80681c:	d8800417 	ldw	r2,16(sp)
			break;
  806820:	00c00c44 	movi	r3,49
  *decpt = k + 1;
  806824:	10800044 	addi	r2,r2,1
  806828:	d8800415 	stw	r2,16(sp)
			break;
  80682c:	003c2a06 	br	8058d8 <_dtoa_r+0x688>
		  *s++ = '9';
  806830:	00800e44 	movi	r2,57
		  goto roundoff;
  806834:	8023883a 	mov	r17,r16
  806838:	d9400117 	ldw	r5,4(sp)
		  *s++ = '9';
  80683c:	b0800005 	stb	r2,0(r22)
		  goto roundoff;
  806840:	9021883a 	mov	r16,r18
  806844:	01000e44 	movi	r4,57
  806848:	003d5006 	br	805d8c <_dtoa_r+0xb3c>
	  S = mhi = 0;
  80684c:	0029883a 	mov	r20,zero
  806850:	0021883a 	mov	r16,zero
  806854:	003e7106 	br	80621c <_dtoa_r+0xfcc>
			k++;
  806858:	d8801117 	ldw	r2,68(sp)
  80685c:	d9000117 	ldw	r4,4(sp)
  806860:	10800044 	addi	r2,r2,1
  806864:	d8800415 	stw	r2,16(sp)
  806868:	003c1206 	br	8058b4 <_dtoa_r+0x664>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  80686c:	103f241e 	bne	r2,zero,806500 <_dtoa_r+0x12b0>
  806870:	9880004c 	andi	r2,r19,1
  806874:	103f1e1e 	bne	r2,zero,8064f0 <_dtoa_r+0x12a0>
  806878:	003f2106 	br	806500 <_dtoa_r+0x12b0>
  *decpt = k + 1;
  80687c:	d8801117 	ldw	r2,68(sp)
  806880:	ddc00d17 	ldw	r23,52(sp)
  806884:	10800044 	addi	r2,r2,1
  806888:	d8800415 	stw	r2,16(sp)
  80688c:	003d5306 	br	805ddc <_dtoa_r+0xb8c>
  806890:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  806894:	a8800e60 	cmpeqi	r2,r21,57
  806898:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  80689c:	18c00044 	addi	r3,r3,1
  8068a0:	d8c00415 	stw	r3,16(sp)
	      *s++ = dig;
  8068a4:	b5400044 	addi	r21,r22,1
	      if (dig == '9')
  8068a8:	103fe11e 	bne	r2,zero,806830 <_dtoa_r+0x15e0>
	      if (j > 0)
  8068ac:	047f1216 	blt	zero,r17,8064f8 <_dtoa_r+0x12a8>
  8068b0:	003f1306 	br	806500 <_dtoa_r+0x12b0>
  if (ilim <= 0 && mode > 2)
  8068b4:	d8800217 	ldw	r2,8(sp)
  8068b8:	108000c8 	cmpgei	r2,r2,3
  8068bc:	103e481e 	bne	r2,zero,8061e0 <_dtoa_r+0xf90>
	  k--;
  8068c0:	dd400415 	stw	r21,16(sp)
  8068c4:	003e0d06 	br	8060fc <_dtoa_r+0xeac>
  if (ilim <= 0 && mode > 2)
  8068c8:	d8800217 	ldw	r2,8(sp)
  8068cc:	108000c8 	cmpgei	r2,r2,3
  8068d0:	103e431e 	bne	r2,zero,8061e0 <_dtoa_r+0xf90>
  8068d4:	d8800b17 	ldw	r2,44(sp)
	  k--;
  8068d8:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  8068dc:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  8068e0:	04bdb10e 	bge	zero,r18,805fa8 <_dtoa_r+0xd58>
  8068e4:	003e5c06 	br	806258 <_dtoa_r+0x1008>
	      *s++ = '0' + (int) L;
  8068e8:	a829883a 	mov	r20,r21
  8068ec:	003f7b06 	br	8066dc <_dtoa_r+0x148c>
      ieps = 2;			/* conservative */
  8068f0:	05400084 	movi	r21,2
  8068f4:	003b5c06 	br	805668 <_dtoa_r+0x418>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8068f8:	01c02074 	movhi	r7,129
  8068fc:	01002074 	movhi	r4,129
  806900:	39cadd04 	addi	r7,r7,11124
  806904:	000d883a 	mov	r6,zero
  806908:	01406a84 	movi	r5,426
  80690c:	210ae204 	addi	r4,r4,11144
  806910:	080b9500 	call	80b950 <__assert_func>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  806914:	000b883a 	mov	r5,zero
  806918:	003b1506 	br	805570 <_dtoa_r+0x320>
  80691c:	b8001115 	stw	zero,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  806920:	000b883a 	mov	r5,zero
  806924:	b809883a 	mov	r4,r23
  806928:	08089a40 	call	8089a4 <_Balloc>
  80692c:	d8800115 	stw	r2,4(sp)
  806930:	103ff126 	beq	r2,zero,8068f8 <_dtoa_r+0x16a8>
  806934:	d8800117 	ldw	r2,4(sp)
      ndigits = 0;
  806938:	d8001e15 	stw	zero,120(sp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  80693c:	b8801015 	stw	r2,64(r23)
  ilim = ilim1 = -1;
  806940:	00bfffc4 	movi	r2,-1
  806944:	d8800515 	stw	r2,20(sp)
  806948:	d8800b15 	stw	r2,44(sp)
  leftright = 1;
  80694c:	00800044 	movi	r2,1
  806950:	d8800715 	stw	r2,28(sp)
  806954:	003c1106 	br	80599c <_dtoa_r+0x74c>
	  mhi = eBalloc (ptr, mhi->_k);
  806958:	01c02074 	movhi	r7,129
  80695c:	01002074 	movhi	r4,129
  806960:	39cadd04 	addi	r7,r7,11124
  806964:	000d883a 	mov	r6,zero
  806968:	0140ba84 	movi	r5,746
  80696c:	210ae204 	addi	r4,r4,11144
  806970:	080b9500 	call	80b950 <__assert_func>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806974:	00802074 	movhi	r2,129
  806978:	108ada04 	addi	r2,r2,11112
  80697c:	d8800115 	stw	r2,4(sp)
  806980:	003a6506 	br	805318 <_dtoa_r+0xc8>
  else if (i < 4)
  806984:	18c00120 	cmpeqi	r3,r3,4
  806988:	183cc91e 	bne	r3,zero,805cb0 <_dtoa_r+0xa60>
      i += 28;
  80698c:	00c00f04 	movi	r3,60
  806990:	1885c83a 	sub	r2,r3,r2
  806994:	003cc106 	br	805c9c <_dtoa_r+0xa4c>

00806998 <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  806998:	2880030b 	ldhu	r2,12(r5)
{
  80699c:	defffb04 	addi	sp,sp,-20
  8069a0:	dcc00315 	stw	r19,12(sp)
  8069a4:	dc000015 	stw	r16,0(sp)
  8069a8:	dfc00415 	stw	ra,16(sp)
  8069ac:	dc800215 	stw	r18,8(sp)
  8069b0:	dc400115 	stw	r17,4(sp)
  if ((flags & __SWR) == 0)
  8069b4:	10c0020c 	andi	r3,r2,8
{
  8069b8:	2821883a 	mov	r16,r5
  8069bc:	2027883a 	mov	r19,r4
  if ((flags & __SWR) == 0)
  8069c0:	18003f1e 	bne	r3,zero,806ac0 <__sflush_r+0x128>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  8069c4:	28c00117 	ldw	r3,4(r5)
      fp->_flags |= __SNPT;
  8069c8:	10820014 	ori	r2,r2,2048
  8069cc:	2880030d 	sth	r2,12(r5)
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  8069d0:	00c0550e 	bge	zero,r3,806b28 <__sflush_r+0x190>
  8069d4:	82000a17 	ldw	r8,40(r16)
  8069d8:	40003126 	beq	r8,zero,806aa0 <__sflush_r+0x108>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
  8069dc:	9c400017 	ldw	r17,0(r19)
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
  8069e0:	1104000c 	andi	r4,r2,4096
	  ptr->_errno = 0;
  8069e4:	98000015 	stw	zero,0(r19)
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  8069e8:	81400717 	ldw	r5,28(r16)
	  if (fp->_flags & __SOFF)
  8069ec:	1007883a 	mov	r3,r2
  8069f0:	2000521e 	bne	r4,zero,806b3c <__sflush_r+0x1a4>
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  8069f4:	01c00044 	movi	r7,1
  8069f8:	000d883a 	mov	r6,zero
  8069fc:	9809883a 	mov	r4,r19
  806a00:	403ee83a 	callr	r8
	      if (curoff == -1L && ptr->_errno != 0)
  806a04:	10ffffd8 	cmpnei	r3,r2,-1
  806a08:	18005826 	beq	r3,zero,806b6c <__sflush_r+0x1d4>
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
  806a0c:	80c0030b 	ldhu	r3,12(r16)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  806a10:	82000a17 	ldw	r8,40(r16)
  806a14:	81400717 	ldw	r5,28(r16)
          if (fp->_flags & __SRD)
  806a18:	18c0010c 	andi	r3,r3,4
  806a1c:	18000626 	beq	r3,zero,806a38 <__sflush_r+0xa0>
              curoff -= fp->_r;
  806a20:	81000117 	ldw	r4,4(r16)
              if (HASUB (fp))
  806a24:	80c00c17 	ldw	r3,48(r16)
              curoff -= fp->_r;
  806a28:	1105c83a 	sub	r2,r2,r4
              if (HASUB (fp))
  806a2c:	18000226 	beq	r3,zero,806a38 <__sflush_r+0xa0>
                curoff -= fp->_ur;
  806a30:	80c00f17 	ldw	r3,60(r16)
  806a34:	10c5c83a 	sub	r2,r2,r3
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  806a38:	100d883a 	mov	r6,r2
  806a3c:	000f883a 	mov	r7,zero
  806a40:	9809883a 	mov	r4,r19
  806a44:	403ee83a 	callr	r8
	  if (curoff != -1 || ptr->_errno == 0
  806a48:	10ffffd8 	cmpnei	r3,r2,-1
  806a4c:	18003d1e 	bne	r3,zero,806b44 <__sflush_r+0x1ac>
  806a50:	99000017 	ldw	r4,0(r19)
	      if (HASUB (fp))
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
  806a54:	80c0030b 	ldhu	r3,12(r16)
	  if (curoff != -1 || ptr->_errno == 0
  806a58:	20004e26 	beq	r4,zero,806b94 <__sflush_r+0x1fc>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  806a5c:	21400760 	cmpeqi	r5,r4,29
  806a60:	2800021e 	bne	r5,zero,806a6c <__sflush_r+0xd4>
  806a64:	210005a0 	cmpeqi	r4,r4,22
  806a68:	20002c26 	beq	r4,zero,806b1c <__sflush_r+0x184>
	      fp->_p = fp->_bf._base;
  806a6c:	80800417 	ldw	r2,16(r16)
	      fp->_flags &= ~__SNPT;
  806a70:	18fdffcc 	andi	r3,r3,63487
  806a74:	80c0030d 	sth	r3,12(r16)
	      fp->_r = 0;
  806a78:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  806a7c:	80800015 	stw	r2,0(r16)
	      if (HASUB (fp))
  806a80:	81400c17 	ldw	r5,48(r16)
	      ptr->_errno = tmp_errno;
  806a84:	9c400015 	stw	r17,0(r19)
	      if (HASUB (fp))
  806a88:	28000526 	beq	r5,zero,806aa0 <__sflush_r+0x108>
		FREEUB (ptr, fp);
  806a8c:	80801004 	addi	r2,r16,64
  806a90:	28800226 	beq	r5,r2,806a9c <__sflush_r+0x104>
  806a94:	9809883a 	mov	r4,r19
  806a98:	08071500 	call	807150 <_free_r>
  806a9c:	80000c15 	stw	zero,48(r16)
	      return EOF;
	    }
	}
      return 0;
  806aa0:	0005883a 	mov	r2,zero
	}
      p += t;
      n -= t;
    }
  return 0;
}
  806aa4:	dfc00417 	ldw	ra,16(sp)
  806aa8:	dcc00317 	ldw	r19,12(sp)
  806aac:	dc800217 	ldw	r18,8(sp)
  806ab0:	dc400117 	ldw	r17,4(sp)
  806ab4:	dc000017 	ldw	r16,0(sp)
  806ab8:	dec00504 	addi	sp,sp,20
  806abc:	f800283a 	ret
  if ((p = fp->_bf._base) == NULL)
  806ac0:	2c800417 	ldw	r18,16(r5)
  806ac4:	903ff626 	beq	r18,zero,806aa0 <__sflush_r+0x108>
  n = fp->_p - p;		/* write this much */
  806ac8:	2c400017 	ldw	r17,0(r5)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806acc:	108000cc 	andi	r2,r2,3
  fp->_p = p;
  806ad0:	2c800015 	stw	r18,0(r5)
  n = fp->_p - p;		/* write this much */
  806ad4:	8ca3c83a 	sub	r17,r17,r18
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806ad8:	1000161e 	bne	r2,zero,806b34 <__sflush_r+0x19c>
  806adc:	28800517 	ldw	r2,20(r5)
  806ae0:	80800215 	stw	r2,8(r16)
  while (n > 0)
  806ae4:	04400316 	blt	zero,r17,806af4 <__sflush_r+0x15c>
  806ae8:	003fed06 	br	806aa0 <__sflush_r+0x108>
      p += t;
  806aec:	90a5883a 	add	r18,r18,r2
  while (n > 0)
  806af0:	047feb0e 	bge	zero,r17,806aa0 <__sflush_r+0x108>
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
  806af4:	80800917 	ldw	r2,36(r16)
  806af8:	81400717 	ldw	r5,28(r16)
  806afc:	880f883a 	mov	r7,r17
  806b00:	900d883a 	mov	r6,r18
  806b04:	9809883a 	mov	r4,r19
  806b08:	103ee83a 	callr	r2
      n -= t;
  806b0c:	88a3c83a 	sub	r17,r17,r2
      if (t <= 0)
  806b10:	00bff616 	blt	zero,r2,806aec <__sflush_r+0x154>
          fp->_flags |= __SERR;
  806b14:	80c0030b 	ldhu	r3,12(r16)
          return EOF;
  806b18:	00bfffc4 	movi	r2,-1
          fp->_flags |= __SERR;
  806b1c:	18c01014 	ori	r3,r3,64
  806b20:	80c0030d 	sth	r3,12(r16)
          return EOF;
  806b24:	003fdf06 	br	806aa4 <__sflush_r+0x10c>
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806b28:	28c00f17 	ldw	r3,60(r5)
  806b2c:	00ffa916 	blt	zero,r3,8069d4 <__sflush_r+0x3c>
  806b30:	003fdb06 	br	806aa0 <__sflush_r+0x108>
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806b34:	0005883a 	mov	r2,zero
  806b38:	003fe906 	br	806ae0 <__sflush_r+0x148>
	    curoff = fp->_offset;
  806b3c:	80801417 	ldw	r2,80(r16)
  806b40:	003fb506 	br	806a18 <__sflush_r+0x80>
	      fp->_flags &= ~__SNPT;
  806b44:	80c0030b 	ldhu	r3,12(r16)
	      fp->_p = fp->_bf._base;
  806b48:	81000417 	ldw	r4,16(r16)
	      fp->_r = 0;
  806b4c:	80000115 	stw	zero,4(r16)
	      fp->_flags &= ~__SNPT;
  806b50:	197dffcc 	andi	r5,r3,63487
  806b54:	8140030d 	sth	r5,12(r16)
	      fp->_p = fp->_bf._base;
  806b58:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  806b5c:	18c4000c 	andi	r3,r3,4096
  806b60:	183fc726 	beq	r3,zero,806a80 <__sflush_r+0xe8>
		fp->_offset = curoff;
  806b64:	80801415 	stw	r2,80(r16)
  806b68:	003fc506 	br	806a80 <__sflush_r+0xe8>
	      if (curoff == -1L && ptr->_errno != 0)
  806b6c:	98c00017 	ldw	r3,0(r19)
  806b70:	183fa626 	beq	r3,zero,806a0c <__sflush_r+0x74>
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  806b74:	19000760 	cmpeqi	r4,r3,29
  806b78:	20000e1e 	bne	r4,zero,806bb4 <__sflush_r+0x21c>
  806b7c:	18c00598 	cmpnei	r3,r3,22
  806b80:	18000c26 	beq	r3,zero,806bb4 <__sflush_r+0x21c>
		    fp->_flags |= __SERR;
  806b84:	80c0030b 	ldhu	r3,12(r16)
  806b88:	18c01014 	ori	r3,r3,64
  806b8c:	80c0030d 	sth	r3,12(r16)
  806b90:	003fc406 	br	806aa4 <__sflush_r+0x10c>
	      fp->_p = fp->_bf._base;
  806b94:	81000417 	ldw	r4,16(r16)
	      fp->_flags &= ~__SNPT;
  806b98:	197dffcc 	andi	r5,r3,63487
  806b9c:	8140030d 	sth	r5,12(r16)
	      fp->_r = 0;
  806ba0:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  806ba4:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  806ba8:	18c4000c 	andi	r3,r3,4096
  806bac:	183fb426 	beq	r3,zero,806a80 <__sflush_r+0xe8>
  806bb0:	003fec06 	br	806b64 <__sflush_r+0x1cc>
		      ptr->_errno = tmp_errno;
  806bb4:	9c400015 	stw	r17,0(r19)
		      result = 0;
  806bb8:	0005883a 	mov	r2,zero
		      ptr->_errno = tmp_errno;
  806bbc:	003fb906 	br	806aa4 <__sflush_r+0x10c>

00806bc0 <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
  806bc0:	defffd04 	addi	sp,sp,-12
  806bc4:	dc000115 	stw	r16,4(sp)
  806bc8:	dfc00215 	stw	ra,8(sp)
  806bcc:	2021883a 	mov	r16,r4
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
  806bd0:	20000226 	beq	r4,zero,806bdc <_fflush_r+0x1c>
  806bd4:	20800e17 	ldw	r2,56(r4)
  806bd8:	10000726 	beq	r2,zero,806bf8 <_fflush_r+0x38>

  if (!fp->_flags)
  806bdc:	2880030f 	ldh	r2,12(r5)
  806be0:	10000a1e 	bne	r2,zero,806c0c <_fflush_r+0x4c>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
  806be4:	0005883a 	mov	r2,zero
  806be8:	dfc00217 	ldw	ra,8(sp)
  806bec:	dc000117 	ldw	r16,4(sp)
  806bf0:	dec00304 	addi	sp,sp,12
  806bf4:	f800283a 	ret
  806bf8:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (ptr, fp);
  806bfc:	0806ff80 	call	806ff8 <__sinit>
  806c00:	d9400017 	ldw	r5,0(sp)
  if (!fp->_flags)
  806c04:	2880030f 	ldh	r2,12(r5)
  806c08:	103ff626 	beq	r2,zero,806be4 <_fflush_r+0x24>
  ret = __sflush_r (ptr, fp);
  806c0c:	8009883a 	mov	r4,r16
}
  806c10:	dfc00217 	ldw	ra,8(sp)
  806c14:	dc000117 	ldw	r16,4(sp)
  806c18:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  806c1c:	08069981 	jmpi	806998 <__sflush_r>

00806c20 <fflush>:
#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
  if (fp == NULL)
  806c20:	20001626 	beq	r4,zero,806c7c <fflush+0x5c>
  806c24:	200b883a 	mov	r5,r4
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
  806c28:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (ptr, fp);
  806c2c:	20000226 	beq	r4,zero,806c38 <fflush+0x18>
  806c30:	20800e17 	ldw	r2,56(r4)
  806c34:	10000526 	beq	r2,zero,806c4c <fflush+0x2c>
  if (!fp->_flags)
  806c38:	2880030f 	ldh	r2,12(r5)
  806c3c:	1000021e 	bne	r2,zero,806c48 <fflush+0x28>
}
  806c40:	0005883a 	mov	r2,zero
  806c44:	f800283a 	ret
  ret = __sflush_r (ptr, fp);
  806c48:	08069981 	jmpi	806998 <__sflush_r>
{
  806c4c:	defffd04 	addi	sp,sp,-12
  806c50:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  806c54:	d9000015 	stw	r4,0(sp)
{
  806c58:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (ptr, fp);
  806c5c:	0806ff80 	call	806ff8 <__sinit>
  806c60:	d9400117 	ldw	r5,4(sp)
  806c64:	d9000017 	ldw	r4,0(sp)
  if (!fp->_flags)
  806c68:	2880030f 	ldh	r2,12(r5)
  806c6c:	10000726 	beq	r2,zero,806c8c <fflush+0x6c>
}
  806c70:	dfc00217 	ldw	ra,8(sp)
  806c74:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  806c78:	08069981 	jmpi	806998 <__sflush_r>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
  806c7c:	d1200817 	ldw	r4,-32736(gp)
  806c80:	01402034 	movhi	r5,128
  806c84:	295af004 	addi	r5,r5,27584
  806c88:	08079a41 	jmpi	8079a4 <_fwalk_reent>
}
  806c8c:	0005883a 	mov	r2,zero
  806c90:	dfc00217 	ldw	ra,8(sp)
  806c94:	dec00304 	addi	sp,sp,12
  806c98:	f800283a 	ret

00806c9c <__fp_lock>:
{
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
}
  806c9c:	0005883a 	mov	r2,zero
  806ca0:	f800283a 	ret

00806ca4 <_cleanup_r>:
  (void) _fwalk_reent (ptr, cleanup_func);
  806ca4:	01402074 	movhi	r5,129
  806ca8:	296ed204 	addi	r5,r5,-17592
  806cac:	08079a41 	jmpi	8079a4 <_fwalk_reent>

00806cb0 <__fp_unlock>:
  806cb0:	0005883a 	mov	r2,zero
  806cb4:	f800283a 	ret

00806cb8 <__sinit.part.0>:
  s->__cleanup = _cleanup_r;	/* conservative */
  806cb8:	00c02034 	movhi	r3,128
  stdin_init (s->_stdin);
  806cbc:	20800117 	ldw	r2,4(r4)
  s->__cleanup = _cleanup_r;	/* conservative */
  806cc0:	18db2904 	addi	r3,r3,27812
  806cc4:	20c00f15 	stw	r3,60(r4)
  s->__sglue._iobs = &s->__sf[0];
  806cc8:	2140bb04 	addi	r5,r4,748
  s->__sglue._niobs = 3;
  806ccc:	00c000c4 	movi	r3,3
  806cd0:	20c0b915 	stw	r3,740(r4)
  s->__sglue._iobs = &s->__sf[0];
  806cd4:	2140ba15 	stw	r5,744(r4)
  s->__sglue._next = NULL;
  806cd8:	2000b815 	stw	zero,736(r4)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806cdc:	10001705 	stb	zero,92(r2)
  806ce0:	10001745 	stb	zero,93(r2)
  806ce4:	10001785 	stb	zero,94(r2)
  806ce8:	100017c5 	stb	zero,95(r2)
  806cec:	10001805 	stb	zero,96(r2)
  806cf0:	10001845 	stb	zero,97(r2)
  806cf4:	10001885 	stb	zero,98(r2)
  806cf8:	100018c5 	stb	zero,99(r2)
  ptr->_flags = flags;
  806cfc:	00c00104 	movi	r3,4
  806d00:	10c00315 	stw	r3,12(r2)
  ptr->_read = __sread;
  806d04:	02002074 	movhi	r8,129
  stdout_init (s->_stdout);
  806d08:	20c00217 	ldw	r3,8(r4)
  ptr->_write = __swrite;
  806d0c:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  806d10:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  806d14:	01402074 	movhi	r5,129
  ptr->_read = __sread;
  806d18:	42285204 	addi	r8,r8,-24248
  ptr->_write = __swrite;
  806d1c:	39e86904 	addi	r7,r7,-24156
  ptr->_seek = __sseek;
  806d20:	31a88904 	addi	r6,r6,-24028
  ptr->_close = __sclose;
  806d24:	2968a004 	addi	r5,r5,-23936
  ptr->_flags = flags;
  806d28:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  806d2c:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806d30:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806d34:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806d38:	10000215 	stw	zero,8(r2)
  ptr->_bf._base = 0;
  806d3c:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806d40:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  806d44:	10000615 	stw	zero,24(r2)
  ptr->_cookie = ptr;
  806d48:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  806d4c:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806d50:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  806d54:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806d58:	11400b15 	stw	r5,44(r2)
  ptr->_flags = flags;
  806d5c:	4a400284 	addi	r9,r9,10
  806d60:	1a400315 	stw	r9,12(r3)
  ptr->_flags2 = 0;
  806d64:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  806d68:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  806d6c:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  806d70:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  806d74:	18000415 	stw	zero,16(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806d78:	18001705 	stb	zero,92(r3)
  806d7c:	18001745 	stb	zero,93(r3)
  806d80:	18001785 	stb	zero,94(r3)
  806d84:	180017c5 	stb	zero,95(r3)
  806d88:	18001805 	stb	zero,96(r3)
  806d8c:	18001845 	stb	zero,97(r3)
  806d90:	18001885 	stb	zero,98(r3)
  806d94:	180018c5 	stb	zero,99(r3)
  stderr_init (s->_stderr);
  806d98:	20800317 	ldw	r2,12(r4)
  ptr->_flags = flags;
  806d9c:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  806da0:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  806da4:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  806da8:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  806dac:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  806db0:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  806db4:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  806db8:	19400b15 	stw	r5,44(r3)
  ptr->_flags = flags;
  806dbc:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  806dc0:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806dc4:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806dc8:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  806dcc:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
  806dd0:	12400315 	stw	r9,12(r2)
  ptr->_bf._base = 0;
  806dd4:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806dd8:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  806ddc:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806de0:	10001705 	stb	zero,92(r2)
  806de4:	10001745 	stb	zero,93(r2)
  806de8:	10001785 	stb	zero,94(r2)
  806dec:	100017c5 	stb	zero,95(r2)
  806df0:	10001805 	stb	zero,96(r2)
  806df4:	10001845 	stb	zero,97(r2)
  806df8:	10001885 	stb	zero,98(r2)
  806dfc:	100018c5 	stb	zero,99(r2)
  ptr->_cookie = ptr;
  806e00:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  806e04:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  806e08:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  806e0c:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  806e10:	11400b15 	stw	r5,44(r2)
  s->__sdidinit = 1;
  806e14:	00800044 	movi	r2,1
  806e18:	20800e15 	stw	r2,56(r4)
}
  806e1c:	f800283a 	ret

00806e20 <__sfmoreglue>:
{
  806e20:	defffc04 	addi	sp,sp,-16
  806e24:	dc800215 	stw	r18,8(sp)
  806e28:	2825883a 	mov	r18,r5
  806e2c:	dc000015 	stw	r16,0(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806e30:	01401a04 	movi	r5,104
{
  806e34:	2021883a 	mov	r16,r4
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806e38:	913fffc4 	addi	r4,r18,-1
{
  806e3c:	dfc00315 	stw	ra,12(sp)
  806e40:	dc400115 	stw	r17,4(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806e44:	0802af80 	call	802af8 <__mulsi3>
  806e48:	8009883a 	mov	r4,r16
  806e4c:	11401d04 	addi	r5,r2,116
  806e50:	1023883a 	mov	r17,r2
  806e54:	0807da80 	call	807da8 <_malloc_r>
  806e58:	1021883a 	mov	r16,r2
  if (g == NULL)
  806e5c:	10000726 	beq	r2,zero,806e7c <__sfmoreglue+0x5c>
  g->glue._iobs = &g->file;
  806e60:	11000304 	addi	r4,r2,12
  g->glue._next = NULL;
  806e64:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  806e68:	14800115 	stw	r18,4(r2)
  g->glue._iobs = &g->file;
  806e6c:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806e70:	89801a04 	addi	r6,r17,104
  806e74:	000b883a 	mov	r5,zero
  806e78:	08088b40 	call	8088b4 <memset>
}
  806e7c:	8005883a 	mov	r2,r16
  806e80:	dfc00317 	ldw	ra,12(sp)
  806e84:	dc800217 	ldw	r18,8(sp)
  806e88:	dc400117 	ldw	r17,4(sp)
  806e8c:	dc000017 	ldw	r16,0(sp)
  806e90:	dec00404 	addi	sp,sp,16
  806e94:	f800283a 	ret

00806e98 <__sfp>:
{
  806e98:	defffb04 	addi	sp,sp,-20
  806e9c:	dc000015 	stw	r16,0(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  806ea0:	d4200817 	ldw	r16,-32736(gp)
{
  806ea4:	dc400115 	stw	r17,4(sp)
  806ea8:	dfc00415 	stw	ra,16(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  806eac:	80800e17 	ldw	r2,56(r16)
{
  806eb0:	dcc00315 	stw	r19,12(sp)
  806eb4:	dc800215 	stw	r18,8(sp)
  806eb8:	2023883a 	mov	r17,r4
  if (!_GLOBAL_REENT->__sdidinit)
  806ebc:	10003126 	beq	r2,zero,806f84 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806ec0:	8100ba17 	ldw	r4,744(r16)
  806ec4:	8140b917 	ldw	r5,740(r16)
  g->glue._niobs = n;
  806ec8:	04c00104 	movi	r19,4
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
  806ecc:	8400b804 	addi	r16,r16,736
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806ed0:	297fffc4 	addi	r5,r5,-1
  806ed4:	2800050e 	bge	r5,zero,806eec <__sfp+0x54>
  806ed8:	00002406 	br	806f6c <__sfp+0xd4>
  806edc:	297fffc4 	addi	r5,r5,-1
  806ee0:	28bfffd8 	cmpnei	r2,r5,-1
  806ee4:	21001a04 	addi	r4,r4,104
  806ee8:	10002026 	beq	r2,zero,806f6c <__sfp+0xd4>
	if (fp->_flags == 0)
  806eec:	2080030f 	ldh	r2,12(r4)
  806ef0:	103ffa1e 	bne	r2,zero,806edc <__sfp+0x44>
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  806ef4:	00bffff4 	movhi	r2,65535
  806ef8:	10800044 	addi	r2,r2,1
  fp->_flags2 = 0;
  806efc:	20001915 	stw	zero,100(r4)
  fp->_p = NULL;		/* no current pointer */
  806f00:	20000015 	stw	zero,0(r4)
  fp->_r = 0;
  806f04:	20000115 	stw	zero,4(r4)
  fp->_w = 0;			/* nothing to read or write */
  806f08:	20000215 	stw	zero,8(r4)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  806f0c:	20800315 	stw	r2,12(r4)
  fp->_bf._base = NULL;		/* no buffer */
  806f10:	20000415 	stw	zero,16(r4)
  fp->_bf._size = 0;
  806f14:	20000515 	stw	zero,20(r4)
  fp->_lbfsize = 0;		/* not line buffered */
  806f18:	20000615 	stw	zero,24(r4)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
  806f1c:	20001705 	stb	zero,92(r4)
  806f20:	20001745 	stb	zero,93(r4)
  806f24:	20001785 	stb	zero,94(r4)
  806f28:	200017c5 	stb	zero,95(r4)
  806f2c:	20001805 	stb	zero,96(r4)
  806f30:	20001845 	stb	zero,97(r4)
  806f34:	20001885 	stb	zero,98(r4)
  806f38:	200018c5 	stb	zero,99(r4)
  fp->_ub._base = NULL;		/* no ungetc buffer */
  806f3c:	20000c15 	stw	zero,48(r4)
  fp->_ub._size = 0;
  806f40:	20000d15 	stw	zero,52(r4)
  fp->_lb._base = NULL;		/* no line buffer */
  806f44:	20001115 	stw	zero,68(r4)
  fp->_lb._size = 0;
  806f48:	20001215 	stw	zero,72(r4)
}
  806f4c:	2005883a 	mov	r2,r4
  806f50:	dfc00417 	ldw	ra,16(sp)
  806f54:	dcc00317 	ldw	r19,12(sp)
  806f58:	dc800217 	ldw	r18,8(sp)
  806f5c:	dc400117 	ldw	r17,4(sp)
  806f60:	dc000017 	ldw	r16,0(sp)
  806f64:	dec00504 	addi	sp,sp,20
  806f68:	f800283a 	ret
      if (g->_next == NULL &&
  806f6c:	80800017 	ldw	r2,0(r16)
  806f70:	10000726 	beq	r2,zero,806f90 <__sfp+0xf8>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806f74:	11000217 	ldw	r4,8(r2)
  806f78:	11400117 	ldw	r5,4(r2)
  806f7c:	1021883a 	mov	r16,r2
  806f80:	003fd306 	br	806ed0 <__sfp+0x38>
  if (s->__sdidinit)
  806f84:	8009883a 	mov	r4,r16
  806f88:	0806cb80 	call	806cb8 <__sinit.part.0>
  806f8c:	003fcc06 	br	806ec0 <__sfp+0x28>
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806f90:	01406b04 	movi	r5,428
  806f94:	8809883a 	mov	r4,r17
  806f98:	0807da80 	call	807da8 <_malloc_r>
  806f9c:	1025883a 	mov	r18,r2
  if (g == NULL)
  806fa0:	10000c26 	beq	r2,zero,806fd4 <__sfp+0x13c>
  g->glue._iobs = &g->file;
  806fa4:	11000304 	addi	r4,r2,12
  806fa8:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806fac:	000b883a 	mov	r5,zero
  g->glue._next = NULL;
  806fb0:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  806fb4:	14c00115 	stw	r19,4(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806fb8:	01806804 	movi	r6,416
  806fbc:	08088b40 	call	8088b4 <memset>
  806fc0:	1009883a 	mov	r4,r2
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  806fc4:	84800015 	stw	r18,0(r16)
  806fc8:	014000c4 	movi	r5,3
  806fcc:	9021883a 	mov	r16,r18
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806fd0:	003fc606 	br	806eec <__sfp+0x54>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  806fd4:	80000015 	stw	zero,0(r16)
  d->_errno = ENOMEM;
  806fd8:	00800304 	movi	r2,12
  806fdc:	88800015 	stw	r2,0(r17)
  return NULL;
  806fe0:	0009883a 	mov	r4,zero
  806fe4:	003fd906 	br	806f4c <__sfp+0xb4>

00806fe8 <_cleanup>:
  (void) _fwalk_reent (ptr, cleanup_func);
  806fe8:	d1200817 	ldw	r4,-32736(gp)
  806fec:	01402074 	movhi	r5,129
  806ff0:	296ed204 	addi	r5,r5,-17592
  806ff4:	08079a41 	jmpi	8079a4 <_fwalk_reent>

00806ff8 <__sinit>:
  if (s->__sdidinit)
  806ff8:	20800e17 	ldw	r2,56(r4)
  806ffc:	10000126 	beq	r2,zero,807004 <__sinit+0xc>
}
  807000:	f800283a 	ret
  807004:	0806cb81 	jmpi	806cb8 <__sinit.part.0>

00807008 <__sfp_lock_acquire>:
}
  807008:	f800283a 	ret

0080700c <__sfp_lock_release>:
  80700c:	f800283a 	ret

00807010 <__sinit_lock_acquire>:
  807010:	f800283a 	ret

00807014 <__sinit_lock_release>:
  807014:	f800283a 	ret

00807018 <__fp_lock_all>:
void
__fp_lock_all (void)
{
  __sfp_lock_acquire ();

  (void) _fwalk (_REENT, __fp_lock);
  807018:	d1200917 	ldw	r4,-32732(gp)
  80701c:	01402034 	movhi	r5,128
  807020:	295b2704 	addi	r5,r5,27804
  807024:	080790c1 	jmpi	80790c <_fwalk>

00807028 <__fp_unlock_all>:
}

void
__fp_unlock_all (void)
{
  (void) _fwalk (_REENT, __fp_unlock);
  807028:	d1200917 	ldw	r4,-32732(gp)
  80702c:	01402034 	movhi	r5,128
  807030:	295b2c04 	addi	r5,r5,27824
  807034:	080790c1 	jmpi	80790c <_fwalk>

00807038 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
  807038:	defffb04 	addi	sp,sp,-20
  80703c:	dcc00315 	stw	r19,12(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
  807040:	04c02074 	movhi	r19,129
{
  807044:	dc800215 	stw	r18,8(sp)
  807048:	dc400115 	stw	r17,4(sp)
  80704c:	dc000015 	stw	r16,0(sp)
  807050:	dfc00415 	stw	ra,16(sp)
  807054:	2821883a 	mov	r16,r5
  top_size = chunksize(top);
  807058:	9ccd8b04 	addi	r19,r19,13868
{
  80705c:	2025883a 	mov	r18,r4
  MALLOC_LOCK;
  807060:	08103640 	call	810364 <__malloc_lock>
  top_size = chunksize(top);
  807064:	98800217 	ldw	r2,8(r19)
  807068:	14400117 	ldw	r17,4(r2)
  80706c:	00bfff04 	movi	r2,-4
  807070:	88a2703a 	and	r17,r17,r2
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
  807074:	8c21c83a 	sub	r16,r17,r16
  807078:	8403fbc4 	addi	r16,r16,4079
  80707c:	8020d33a 	srli	r16,r16,12
  807080:	843fffc4 	addi	r16,r16,-1
  807084:	8020933a 	slli	r16,r16,12

  if (extra < (long)pagesz)  /* Not enough memory to release */
  807088:	80840008 	cmpgei	r2,r16,4096
  80708c:	10000626 	beq	r2,zero,8070a8 <_malloc_trim_r+0x70>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
  807090:	000b883a 	mov	r5,zero
  807094:	9009883a 	mov	r4,r18
  807098:	080a0f80 	call	80a0f8 <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
  80709c:	98c00217 	ldw	r3,8(r19)
  8070a0:	1c47883a 	add	r3,r3,r17
  8070a4:	10c00a26 	beq	r2,r3,8070d0 <_malloc_trim_r+0x98>
    MALLOC_UNLOCK;
  8070a8:	9009883a 	mov	r4,r18
  8070ac:	08103880 	call	810388 <__malloc_unlock>
    return 0;
  8070b0:	0005883a 	mov	r2,zero
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
  8070b4:	dfc00417 	ldw	ra,16(sp)
  8070b8:	dcc00317 	ldw	r19,12(sp)
  8070bc:	dc800217 	ldw	r18,8(sp)
  8070c0:	dc400117 	ldw	r17,4(sp)
  8070c4:	dc000017 	ldw	r16,0(sp)
  8070c8:	dec00504 	addi	sp,sp,20
  8070cc:	f800283a 	ret
      new_brk = (char*)(MORECORE (-extra));
  8070d0:	040bc83a 	sub	r5,zero,r16
  8070d4:	9009883a 	mov	r4,r18
  8070d8:	080a0f80 	call	80a0f8 <_sbrk_r>
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
  8070dc:	10bfffd8 	cmpnei	r2,r2,-1
  8070e0:	10000d26 	beq	r2,zero,807118 <_malloc_trim_r+0xe0>
        sbrked_mem -= extra;
  8070e4:	00802074 	movhi	r2,129
  8070e8:	109a2f17 	ldw	r2,26812(r2)
        set_head(top, (top_size - extra) | PREV_INUSE);
  8070ec:	98c00217 	ldw	r3,8(r19)
  8070f0:	8c23c83a 	sub	r17,r17,r16
  8070f4:	8c400054 	ori	r17,r17,1
        sbrked_mem -= extra;
  8070f8:	1421c83a 	sub	r16,r2,r16
        set_head(top, (top_size - extra) | PREV_INUSE);
  8070fc:	1c400115 	stw	r17,4(r3)
        sbrked_mem -= extra;
  807100:	00802074 	movhi	r2,129
	MALLOC_UNLOCK;
  807104:	9009883a 	mov	r4,r18
        sbrked_mem -= extra;
  807108:	141a2f15 	stw	r16,26812(r2)
	MALLOC_UNLOCK;
  80710c:	08103880 	call	810388 <__malloc_unlock>
        return 1;
  807110:	00800044 	movi	r2,1
  807114:	003fe706 	br	8070b4 <_malloc_trim_r+0x7c>
        current_brk = (char*)(MORECORE (0));
  807118:	000b883a 	mov	r5,zero
  80711c:	9009883a 	mov	r4,r18
  807120:	080a0f80 	call	80a0f8 <_sbrk_r>
        top_size = current_brk - (char*)top;
  807124:	99000217 	ldw	r4,8(r19)
  807128:	1107c83a 	sub	r3,r2,r4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
  80712c:	19400410 	cmplti	r5,r3,16
  807130:	283fdd1e 	bne	r5,zero,8070a8 <_malloc_trim_r+0x70>
          sbrked_mem = current_brk - sbrk_base;
  807134:	d1600a17 	ldw	r5,-32728(gp)
          set_head(top, top_size | PREV_INUSE);
  807138:	18c00054 	ori	r3,r3,1
  80713c:	20c00115 	stw	r3,4(r4)
          sbrked_mem = current_brk - sbrk_base;
  807140:	1145c83a 	sub	r2,r2,r5
  807144:	01402074 	movhi	r5,129
  807148:	289a2f15 	stw	r2,26812(r5)
          set_head(top, top_size | PREV_INUSE);
  80714c:	003fd606 	br	8070a8 <_malloc_trim_r+0x70>

00807150 <_free_r>:
  if (mem == 0)                              /* free(0) has no effect */
  807150:	28004f26 	beq	r5,zero,807290 <_free_r+0x140>
{
  807154:	defffd04 	addi	sp,sp,-12
  807158:	dc400115 	stw	r17,4(sp)
  80715c:	dc000015 	stw	r16,0(sp)
  807160:	2023883a 	mov	r17,r4
  MALLOC_LOCK;
  807164:	2821883a 	mov	r16,r5
{
  807168:	dfc00215 	stw	ra,8(sp)
  MALLOC_LOCK;
  80716c:	08103640 	call	810364 <__malloc_lock>
  hd = p->size;
  807170:	81ffff17 	ldw	r7,-4(r16)
  sz = hd & ~PREV_INUSE;
  807174:	00bfff84 	movi	r2,-2
  p = mem2chunk(mem);
  807178:	80fffe04 	addi	r3,r16,-8
  sz = hd & ~PREV_INUSE;
  80717c:	3884703a 	and	r2,r7,r2
  if (next == top)                            /* merge with top */
  807180:	01002074 	movhi	r4,129
  next = chunk_at_offset(p, sz);
  807184:	188d883a 	add	r6,r3,r2
  if (next == top)                            /* merge with top */
  807188:	210d8b04 	addi	r4,r4,13868
  nextsz = chunksize(next);
  80718c:	31400117 	ldw	r5,4(r6)
  if (next == top)                            /* merge with top */
  807190:	22000217 	ldw	r8,8(r4)
  nextsz = chunksize(next);
  807194:	027fff04 	movi	r9,-4
  807198:	2a4a703a 	and	r5,r5,r9
  if (next == top)                            /* merge with top */
  80719c:	41806426 	beq	r8,r6,807330 <_free_r+0x1e0>
  set_head(next, nextsz);                    /* clear inuse bit */
  8071a0:	31400115 	stw	r5,4(r6)
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8071a4:	39c0004c 	andi	r7,r7,1
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8071a8:	3151883a 	add	r8,r6,r5
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  8071ac:	3800281e 	bne	r7,zero,807250 <_free_r+0x100>
    prevsz = p->prev_size;
  8071b0:	82bffe17 	ldw	r10,-8(r16)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8071b4:	42000117 	ldw	r8,4(r8)
    if (p->fd == last_remainder)             /* keep as last_remainder */
  8071b8:	01c02074 	movhi	r7,129
    p = chunk_at_offset(p, -prevsz);
  8071bc:	1a87c83a 	sub	r3,r3,r10
    if (p->fd == last_remainder)             /* keep as last_remainder */
  8071c0:	1a400217 	ldw	r9,8(r3)
  8071c4:	39cd8d04 	addi	r7,r7,13876
    sz += prevsz;
  8071c8:	1285883a 	add	r2,r2,r10
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8071cc:	4200004c 	andi	r8,r8,1
    if (p->fd == last_remainder)             /* keep as last_remainder */
  8071d0:	49c04c26 	beq	r9,r7,807304 <_free_r+0x1b4>
      unlink(p, bck, fwd);
  8071d4:	1a800317 	ldw	r10,12(r3)
  8071d8:	4a800315 	stw	r10,12(r9)
  8071dc:	52400215 	stw	r9,8(r10)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8071e0:	40006f26 	beq	r8,zero,8073a0 <_free_r+0x250>
  set_head(p, sz | PREV_INUSE);
  8071e4:	11400054 	ori	r5,r2,1
  8071e8:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  8071ec:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  8071f0:	11408028 	cmpgeui	r5,r2,512
  8071f4:	28002c1e 	bne	r5,zero,8072a8 <_free_r+0x158>
  8071f8:	100ad0fa 	srli	r5,r2,3
  8071fc:	100cd17a 	srli	r6,r2,5
  807200:	00800044 	movi	r2,1
  807204:	29400044 	addi	r5,r5,1
  807208:	280a90fa 	slli	r5,r5,3
  80720c:	21c00117 	ldw	r7,4(r4)
  807210:	1184983a 	sll	r2,r2,r6
  807214:	214b883a 	add	r5,r4,r5
  807218:	29800017 	ldw	r6,0(r5)
  80721c:	11c4b03a 	or	r2,r2,r7
  807220:	29fffe04 	addi	r7,r5,-8
  807224:	19c00315 	stw	r7,12(r3)
  807228:	19800215 	stw	r6,8(r3)
  80722c:	20800115 	stw	r2,4(r4)
  807230:	28c00015 	stw	r3,0(r5)
  807234:	30c00315 	stw	r3,12(r6)
    MALLOC_UNLOCK;
  807238:	8809883a 	mov	r4,r17
}
  80723c:	dfc00217 	ldw	ra,8(sp)
  807240:	dc400117 	ldw	r17,4(sp)
  807244:	dc000017 	ldw	r16,0(sp)
  807248:	dec00304 	addi	sp,sp,12
    MALLOC_UNLOCK;
  80724c:	08103881 	jmpi	810388 <__malloc_unlock>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807250:	41c00117 	ldw	r7,4(r8)
  807254:	39c0004c 	andi	r7,r7,1
  807258:	38000e1e 	bne	r7,zero,807294 <_free_r+0x144>
    sz += nextsz;
  80725c:	01c02074 	movhi	r7,129
  807260:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  807264:	39cd8d04 	addi	r7,r7,13876
  807268:	31400217 	ldw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  80726c:	12400054 	ori	r9,r2,1
  set_foot(p, sz);
  807270:	1891883a 	add	r8,r3,r2
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  807274:	29c05026 	beq	r5,r7,8073b8 <_free_r+0x268>
      unlink(next, bck, fwd);
  807278:	31800317 	ldw	r6,12(r6)
  80727c:	29800315 	stw	r6,12(r5)
  807280:	31400215 	stw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  807284:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  807288:	40800015 	stw	r2,0(r8)
  if (!islr)
  80728c:	003fd806 	br	8071f0 <_free_r+0xa0>
  807290:	f800283a 	ret
  set_head(p, sz | PREV_INUSE);
  807294:	11400054 	ori	r5,r2,1
  807298:	817fff15 	stw	r5,-4(r16)
  set_foot(p, sz);
  80729c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  8072a0:	11408028 	cmpgeui	r5,r2,512
  8072a4:	283fd426 	beq	r5,zero,8071f8 <_free_r+0xa8>
  8072a8:	100ad27a 	srli	r5,r2,9
  8072ac:	29800168 	cmpgeui	r6,r5,5
  8072b0:	3000321e 	bne	r6,zero,80737c <_free_r+0x22c>
  8072b4:	100ad1ba 	srli	r5,r2,6
  8072b8:	29800e44 	addi	r6,r5,57
  8072bc:	300c90fa 	slli	r6,r6,3
  8072c0:	29c00e04 	addi	r7,r5,56
  8072c4:	218d883a 	add	r6,r4,r6
  8072c8:	31400017 	ldw	r5,0(r6)
  8072cc:	31bffe04 	addi	r6,r6,-8
  8072d0:	31404026 	beq	r6,r5,8073d4 <_free_r+0x284>
  8072d4:	01ffff04 	movi	r7,-4
  8072d8:	29000117 	ldw	r4,4(r5)
  8072dc:	21c8703a 	and	r4,r4,r7
  8072e0:	1100022e 	bgeu	r2,r4,8072ec <_free_r+0x19c>
  8072e4:	29400217 	ldw	r5,8(r5)
  8072e8:	317ffb1e 	bne	r6,r5,8072d8 <_free_r+0x188>
  8072ec:	29800317 	ldw	r6,12(r5)
  8072f0:	19800315 	stw	r6,12(r3)
  8072f4:	19400215 	stw	r5,8(r3)
  8072f8:	30c00215 	stw	r3,8(r6)
  8072fc:	28c00315 	stw	r3,12(r5)
  807300:	003fcd06 	br	807238 <_free_r+0xe8>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  807304:	40004b1e 	bne	r8,zero,807434 <_free_r+0x2e4>
      unlink(next, bck, fwd);
  807308:	31000317 	ldw	r4,12(r6)
  80730c:	31800217 	ldw	r6,8(r6)
    sz += nextsz;
  807310:	2885883a 	add	r2,r5,r2
  set_head(p, sz | PREV_INUSE);
  807314:	11400054 	ori	r5,r2,1
      unlink(next, bck, fwd);
  807318:	31000315 	stw	r4,12(r6)
  80731c:	21800215 	stw	r6,8(r4)
  set_head(p, sz | PREV_INUSE);
  807320:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  807324:	1887883a 	add	r3,r3,r2
  807328:	18800015 	stw	r2,0(r3)
  if (!islr)
  80732c:	003fc206 	br	807238 <_free_r+0xe8>
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  807330:	39c0004c 	andi	r7,r7,1
    sz += nextsz;
  807334:	1145883a 	add	r2,r2,r5
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  807338:	3800071e 	bne	r7,zero,807358 <_free_r+0x208>
      prevsz = p->prev_size;
  80733c:	81fffe17 	ldw	r7,-8(r16)
      p = chunk_at_offset(p, -prevsz);
  807340:	19c7c83a 	sub	r3,r3,r7
      unlink(p, bck, fwd);
  807344:	19400317 	ldw	r5,12(r3)
  807348:	19800217 	ldw	r6,8(r3)
      sz += prevsz;
  80734c:	11c5883a 	add	r2,r2,r7
      unlink(p, bck, fwd);
  807350:	31400315 	stw	r5,12(r6)
  807354:	29800215 	stw	r6,8(r5)
    set_head(p, sz | PREV_INUSE);
  807358:	11800054 	ori	r6,r2,1
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  80735c:	d1600b17 	ldw	r5,-32724(gp)
    set_head(p, sz | PREV_INUSE);
  807360:	19800115 	stw	r6,4(r3)
    top = p;
  807364:	20c00215 	stw	r3,8(r4)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  807368:	117fb336 	bltu	r2,r5,807238 <_free_r+0xe8>
      malloc_trim(RCALL top_pad); 
  80736c:	d1671717 	ldw	r5,-25508(gp)
  807370:	8809883a 	mov	r4,r17
  807374:	08070380 	call	807038 <_malloc_trim_r>
  807378:	003faf06 	br	807238 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  80737c:	29800568 	cmpgeui	r6,r5,21
  807380:	30000926 	beq	r6,zero,8073a8 <_free_r+0x258>
  807384:	29801568 	cmpgeui	r6,r5,85
  807388:	3000191e 	bne	r6,zero,8073f0 <_free_r+0x2a0>
  80738c:	100ad33a 	srli	r5,r2,12
  807390:	29801bc4 	addi	r6,r5,111
  807394:	300c90fa 	slli	r6,r6,3
  807398:	29c01b84 	addi	r7,r5,110
  80739c:	003fc906 	br	8072c4 <_free_r+0x174>
    sz += nextsz;
  8073a0:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  8073a4:	003fb006 	br	807268 <_free_r+0x118>
    frontlink(p, sz, idx, bck, fwd);  
  8073a8:	29801704 	addi	r6,r5,92
  8073ac:	300c90fa 	slli	r6,r6,3
  8073b0:	29c016c4 	addi	r7,r5,91
  8073b4:	003fc306 	br	8072c4 <_free_r+0x174>
      link_last_remainder(p);   
  8073b8:	20c00515 	stw	r3,20(r4)
  8073bc:	20c00415 	stw	r3,16(r4)
  8073c0:	19c00315 	stw	r7,12(r3)
  8073c4:	19c00215 	stw	r7,8(r3)
  set_head(p, sz | PREV_INUSE);
  8073c8:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  8073cc:	40800015 	stw	r2,0(r8)
  if (!islr)
  8073d0:	003f9906 	br	807238 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  8073d4:	380fd0ba 	srai	r7,r7,2
  8073d8:	00800044 	movi	r2,1
  8073dc:	22000117 	ldw	r8,4(r4)
  8073e0:	11ce983a 	sll	r7,r2,r7
  8073e4:	3a0eb03a 	or	r7,r7,r8
  8073e8:	21c00115 	stw	r7,4(r4)
  8073ec:	003fc006 	br	8072f0 <_free_r+0x1a0>
  8073f0:	29805568 	cmpgeui	r6,r5,341
  8073f4:	3000051e 	bne	r6,zero,80740c <_free_r+0x2bc>
  8073f8:	100ad3fa 	srli	r5,r2,15
  8073fc:	29801e04 	addi	r6,r5,120
  807400:	300c90fa 	slli	r6,r6,3
  807404:	29c01dc4 	addi	r7,r5,119
  807408:	003fae06 	br	8072c4 <_free_r+0x174>
  80740c:	29415568 	cmpgeui	r5,r5,1365
  807410:	2800051e 	bne	r5,zero,807428 <_free_r+0x2d8>
  807414:	100ad4ba 	srli	r5,r2,18
  807418:	29801f44 	addi	r6,r5,125
  80741c:	300c90fa 	slli	r6,r6,3
  807420:	29c01f04 	addi	r7,r5,124
  807424:	003fa706 	br	8072c4 <_free_r+0x174>
  807428:	0180fe04 	movi	r6,1016
  80742c:	01c01f84 	movi	r7,126
  807430:	003fa406 	br	8072c4 <_free_r+0x174>
  set_head(p, sz | PREV_INUSE);
  807434:	11000054 	ori	r4,r2,1
  807438:	19000115 	stw	r4,4(r3)
  set_foot(p, sz);
  80743c:	30800015 	stw	r2,0(r6)
  if (!islr)
  807440:	003f7d06 	br	807238 <_free_r+0xe8>

00807444 <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
  807444:	30800217 	ldw	r2,8(r6)
  807448:	1000a326 	beq	r2,zero,8076d8 <__sfvwrite_r+0x294>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
  80744c:	29c0030b 	ldhu	r7,12(r5)
{
  807450:	defff404 	addi	sp,sp,-48
  807454:	ddc00915 	stw	r23,36(sp)
  807458:	dd400715 	stw	r21,28(sp)
  80745c:	dc000215 	stw	r16,8(sp)
  807460:	dfc00b15 	stw	ra,44(sp)
  807464:	df000a15 	stw	fp,40(sp)
  807468:	dd800815 	stw	r22,32(sp)
  80746c:	dd000615 	stw	r20,24(sp)
  807470:	dcc00515 	stw	r19,20(sp)
  807474:	dc800415 	stw	r18,16(sp)
  807478:	dc400315 	stw	r17,12(sp)
  if (cantwrite (ptr, fp))
  80747c:	3880020c 	andi	r2,r7,8
  807480:	302f883a 	mov	r23,r6
  807484:	202b883a 	mov	r21,r4
  807488:	2821883a 	mov	r16,r5
  80748c:	10002226 	beq	r2,zero,807518 <__sfvwrite_r+0xd4>
  807490:	28800417 	ldw	r2,16(r5)
  807494:	10002026 	beq	r2,zero,807518 <__sfvwrite_r+0xd4>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
  807498:	3880008c 	andi	r2,r7,2
  iov = uio->uio_iov;
  80749c:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  8074a0:	10002526 	beq	r2,zero,807538 <__sfvwrite_r+0xf4>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
  8074a4:	80800917 	ldw	r2,36(r16)
  8074a8:	81400717 	ldw	r5,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  8074ac:	05200034 	movhi	r20,32768
  register const char *p = NULL;
  8074b0:	0027883a 	mov	r19,zero
  len = 0;
  8074b4:	0025883a 	mov	r18,zero
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  8074b8:	a53f0004 	addi	r20,r20,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
  8074bc:	980d883a 	mov	r6,r19
  8074c0:	a809883a 	mov	r4,r21
	  GETIOV (;);
  8074c4:	90001026 	beq	r18,zero,807508 <__sfvwrite_r+0xc4>
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  8074c8:	900f883a 	mov	r7,r18
  8074cc:	a480012e 	bgeu	r20,r18,8074d4 <__sfvwrite_r+0x90>
  8074d0:	a00f883a 	mov	r7,r20
	  w = fp->_write (ptr, fp->_cookie, p,
  8074d4:	103ee83a 	callr	r2
	  if (w <= 0)
  8074d8:	00807a0e 	bge	zero,r2,8076c4 <__sfvwrite_r+0x280>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
  8074dc:	b9000217 	ldw	r4,8(r23)
	  p += w;
  8074e0:	98a7883a 	add	r19,r19,r2
	  len -= w;
  8074e4:	90a5c83a 	sub	r18,r18,r2
      while ((uio->uio_resid -= w) != 0);
  8074e8:	2085c83a 	sub	r2,r4,r2
  8074ec:	b8800215 	stw	r2,8(r23)
  8074f0:	10006326 	beq	r2,zero,807680 <__sfvwrite_r+0x23c>
	  w = fp->_write (ptr, fp->_cookie, p,
  8074f4:	80800917 	ldw	r2,36(r16)
  8074f8:	81400717 	ldw	r5,28(r16)
  8074fc:	980d883a 	mov	r6,r19
  807500:	a809883a 	mov	r4,r21
	  GETIOV (;);
  807504:	903ff01e 	bne	r18,zero,8074c8 <__sfvwrite_r+0x84>
  807508:	8cc00017 	ldw	r19,0(r17)
  80750c:	8c800117 	ldw	r18,4(r17)
  807510:	8c400204 	addi	r17,r17,8
  807514:	003fe906 	br	8074bc <__sfvwrite_r+0x78>
  if (cantwrite (ptr, fp))
  807518:	800b883a 	mov	r5,r16
  80751c:	a809883a 	mov	r4,r21
  807520:	0804ed00 	call	804ed0 <__swsetup_r>
  807524:	1000f71e 	bne	r2,zero,807904 <__sfvwrite_r+0x4c0>
  if (fp->_flags & __SNBF)
  807528:	81c0030b 	ldhu	r7,12(r16)
  iov = uio->uio_iov;
  80752c:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  807530:	3880008c 	andi	r2,r7,2
  807534:	103fdb1e 	bne	r2,zero,8074a4 <__sfvwrite_r+0x60>
    }
  else if ((fp->_flags & __SLBF) == 0)
  807538:	3880004c 	andi	r2,r7,1
	      nl = memchr ((void *) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
  80753c:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  807540:	82000017 	ldw	r8,0(r16)
  else if ((fp->_flags & __SLBF) == 0)
  807544:	1000661e 	bne	r2,zero,8076e0 <__sfvwrite_r+0x29c>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  807548:	00a00034 	movhi	r2,32768
  80754c:	10bfff84 	addi	r2,r2,-2
  807550:	00e00034 	movhi	r3,32768
  807554:	d8800015 	stw	r2,0(sp)
  807558:	18bfffc4 	addi	r2,r3,-1
  register const char *p = NULL;
  80755c:	0039883a 	mov	fp,zero
  len = 0;
  807560:	0027883a 	mov	r19,zero
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  807564:	d8800115 	stw	r2,4(sp)
	  GETIOV (;);
  807568:	98004126 	beq	r19,zero,807670 <__sfvwrite_r+0x22c>
	  if (fp->_flags & __SSTR)
  80756c:	3880800c 	andi	r2,r7,512
  807570:	10009726 	beq	r2,zero,8077d0 <__sfvwrite_r+0x38c>
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
  807574:	902d883a 	mov	r22,r18
  807578:	9c80be36 	bltu	r19,r18,807874 <__sfvwrite_r+0x430>
  80757c:	3881200c 	andi	r2,r7,1152
  807580:	10002626 	beq	r2,zero,80761c <__sfvwrite_r+0x1d8>
		  int newsize = fp->_bf._size * 3 / 2;
  807584:	81800517 	ldw	r6,20(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  807588:	81400417 	ldw	r5,16(r16)
		  if (newsize < curpos + len + 1)
  80758c:	98800044 	addi	r2,r19,1
		  int newsize = fp->_bf._size * 3 / 2;
  807590:	3189883a 	add	r4,r6,r6
  807594:	2189883a 	add	r4,r4,r6
  807598:	2028d7fa 	srli	r20,r4,31
		  int curpos = (fp->_p - fp->_bf._base);
  80759c:	4165c83a 	sub	r18,r8,r5
		  if (newsize < curpos + len + 1)
  8075a0:	1485883a 	add	r2,r2,r18
		  int newsize = fp->_bf._size * 3 / 2;
  8075a4:	a109883a 	add	r4,r20,r4
  8075a8:	2029d07a 	srai	r20,r4,1
		  if (newsize < curpos + len + 1)
  8075ac:	a00d883a 	mov	r6,r20
  8075b0:	a080022e 	bgeu	r20,r2,8075bc <__sfvwrite_r+0x178>
		    newsize = curpos + len + 1;
  8075b4:	1029883a 	mov	r20,r2
  8075b8:	100d883a 	mov	r6,r2
		  if (fp->_flags & __SOPT)
  8075bc:	39c1000c 	andi	r7,r7,1024
  8075c0:	3800c026 	beq	r7,zero,8078c4 <__sfvwrite_r+0x480>
		      str = (unsigned char *)_malloc_r (ptr, newsize);
  8075c4:	a809883a 	mov	r4,r21
  8075c8:	300b883a 	mov	r5,r6
  8075cc:	0807da80 	call	807da8 <_malloc_r>
  8075d0:	1009883a 	mov	r4,r2
		      if (!str)
  8075d4:	1000c726 	beq	r2,zero,8078f4 <__sfvwrite_r+0x4b0>
		      memcpy (str, fp->_bf._base, curpos);
  8075d8:	81400417 	ldw	r5,16(r16)
  8075dc:	900d883a 	mov	r6,r18
  8075e0:	08086880 	call	808688 <memcpy>
  8075e4:	1009883a 	mov	r4,r2
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
  8075e8:	8080030b 	ldhu	r2,12(r16)
  8075ec:	00fedfc4 	movi	r3,-1153
  8075f0:	10c4703a 	and	r2,r2,r3
  8075f4:	10802014 	ori	r2,r2,128
  8075f8:	8080030d 	sth	r2,12(r16)
		  fp->_p = str + curpos;
  8075fc:	2491883a 	add	r8,r4,r18
		  fp->_w = newsize - curpos;
  807600:	a485c83a 	sub	r2,r20,r18
		  fp->_bf._base = str;
  807604:	81000415 	stw	r4,16(r16)
		  fp->_p = str + curpos;
  807608:	82000015 	stw	r8,0(r16)
		  fp->_bf._size = newsize;
  80760c:	85000515 	stw	r20,20(r16)
		  w = len;
  807610:	9825883a 	mov	r18,r19
		  fp->_w = newsize - curpos;
  807614:	80800215 	stw	r2,8(r16)
	      if (len < w)
  807618:	982d883a 	mov	r22,r19
	      COPY (w);		/* copy MIN(fp->_w,len), */
  80761c:	4009883a 	mov	r4,r8
  807620:	b00d883a 	mov	r6,r22
  807624:	e00b883a 	mov	r5,fp
  807628:	08087880 	call	808788 <memmove>
	      fp->_w -= w;
  80762c:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  807630:	80800017 	ldw	r2,0(r16)
  807634:	9829883a 	mov	r20,r19
	      fp->_w -= w;
  807638:	24a5c83a 	sub	r18,r4,r18
	      fp->_p += w;
  80763c:	1585883a 	add	r2,r2,r22
	      fp->_w -= w;
  807640:	84800215 	stw	r18,8(r16)
	      fp->_p += w;
  807644:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
  807648:	0027883a 	mov	r19,zero
      while ((uio->uio_resid -= w) != 0);
  80764c:	b8800217 	ldw	r2,8(r23)
	  p += w;
  807650:	e539883a 	add	fp,fp,r20
      while ((uio->uio_resid -= w) != 0);
  807654:	1529c83a 	sub	r20,r2,r20
  807658:	bd000215 	stw	r20,8(r23)
  80765c:	a0000826 	beq	r20,zero,807680 <__sfvwrite_r+0x23c>
	  if (fp->_flags & __SSTR)
  807660:	81c0030b 	ldhu	r7,12(r16)
	  w = fp->_w;
  807664:	84800217 	ldw	r18,8(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  807668:	82000017 	ldw	r8,0(r16)
	  GETIOV (;);
  80766c:	983fbf1e 	bne	r19,zero,80756c <__sfvwrite_r+0x128>
  807670:	8f000017 	ldw	fp,0(r17)
  807674:	8cc00117 	ldw	r19,4(r17)
  807678:	8c400204 	addi	r17,r17,8
  80767c:	003fba06 	br	807568 <__sfvwrite_r+0x124>
    return 0;
  807680:	0005883a 	mov	r2,zero
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
  807684:	dfc00b17 	ldw	ra,44(sp)
  807688:	df000a17 	ldw	fp,40(sp)
  80768c:	ddc00917 	ldw	r23,36(sp)
  807690:	dd800817 	ldw	r22,32(sp)
  807694:	dd400717 	ldw	r21,28(sp)
  807698:	dd000617 	ldw	r20,24(sp)
  80769c:	dcc00517 	ldw	r19,20(sp)
  8076a0:	dc800417 	ldw	r18,16(sp)
  8076a4:	dc400317 	ldw	r17,12(sp)
  8076a8:	dc000217 	ldw	r16,8(sp)
  8076ac:	dec00c04 	addi	sp,sp,48
  8076b0:	f800283a 	ret
	      if (_fflush_r (ptr, fp))
  8076b4:	800b883a 	mov	r5,r16
  8076b8:	a809883a 	mov	r4,r21
  8076bc:	0806bc00 	call	806bc0 <_fflush_r>
  8076c0:	10002026 	beq	r2,zero,807744 <__sfvwrite_r+0x300>
  fp->_flags |= __SERR;
  8076c4:	8080030b 	ldhu	r2,12(r16)
  8076c8:	10801014 	ori	r2,r2,64
  8076cc:	8080030d 	sth	r2,12(r16)
  return EOF;
  8076d0:	00bfffc4 	movi	r2,-1
  8076d4:	003feb06 	br	807684 <__sfvwrite_r+0x240>
    return 0;
  8076d8:	0005883a 	mov	r2,zero
}
  8076dc:	f800283a 	ret
  len = 0;
  8076e0:	002d883a 	mov	r22,zero
      nldist = 0;
  8076e4:	0027883a 	mov	r19,zero
      nlknown = 0;
  8076e8:	0005883a 	mov	r2,zero
  register const char *p = NULL;
  8076ec:	0039883a 	mov	fp,zero
	  GETIOV (nlknown = 0);
  8076f0:	b0001d26 	beq	r22,zero,807768 <__sfvwrite_r+0x324>
	  if (!nlknown)
  8076f4:	10002026 	beq	r2,zero,807778 <__sfvwrite_r+0x334>
	  s = MIN (len, nldist);
  8076f8:	9829883a 	mov	r20,r19
  8076fc:	b500012e 	bgeu	r22,r20,807704 <__sfvwrite_r+0x2c0>
  807700:	b029883a 	mov	r20,r22
	  if (fp->_p > fp->_bf._base && s > w)
  807704:	80800417 	ldw	r2,16(r16)
	  w = fp->_w + fp->_bf._size;
  807708:	81c00517 	ldw	r7,20(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  80770c:	1200022e 	bgeu	r2,r8,807718 <__sfvwrite_r+0x2d4>
	  w = fp->_w + fp->_bf._size;
  807710:	3ca5883a 	add	r18,r7,r18
	  if (fp->_p > fp->_bf._base && s > w)
  807714:	95002216 	blt	r18,r20,8077a0 <__sfvwrite_r+0x35c>
	  else if (s >= (w = fp->_bf._size))
  807718:	a1c05916 	blt	r20,r7,807880 <__sfvwrite_r+0x43c>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  80771c:	80800917 	ldw	r2,36(r16)
  807720:	81400717 	ldw	r5,28(r16)
  807724:	e00d883a 	mov	r6,fp
  807728:	a809883a 	mov	r4,r21
  80772c:	103ee83a 	callr	r2
  807730:	1025883a 	mov	r18,r2
	      if (w <= 0)
  807734:	00bfe30e 	bge	zero,r2,8076c4 <__sfvwrite_r+0x280>
	  if ((nldist -= w) == 0)
  807738:	9ca7c83a 	sub	r19,r19,r18
  80773c:	983fdd26 	beq	r19,zero,8076b4 <__sfvwrite_r+0x270>
  807740:	00800044 	movi	r2,1
      while ((uio->uio_resid -= w) != 0);
  807744:	b9800217 	ldw	r6,8(r23)
	  p += w;
  807748:	e4b9883a 	add	fp,fp,r18
	  len -= w;
  80774c:	b4adc83a 	sub	r22,r22,r18
      while ((uio->uio_resid -= w) != 0);
  807750:	34a5c83a 	sub	r18,r6,r18
  807754:	bc800215 	stw	r18,8(r23)
  807758:	903fc926 	beq	r18,zero,807680 <__sfvwrite_r+0x23c>
	  w = fp->_w + fp->_bf._size;
  80775c:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  807760:	82000017 	ldw	r8,0(r16)
	  GETIOV (nlknown = 0);
  807764:	b03fe31e 	bne	r22,zero,8076f4 <__sfvwrite_r+0x2b0>
  807768:	8d800117 	ldw	r22,4(r17)
  80776c:	8f000017 	ldw	fp,0(r17)
  807770:	8c400204 	addi	r17,r17,8
  807774:	b03ffc26 	beq	r22,zero,807768 <__sfvwrite_r+0x324>
	      nl = memchr ((void *) p, '\n', len);
  807778:	b00d883a 	mov	r6,r22
  80777c:	01400284 	movi	r5,10
  807780:	e009883a 	mov	r4,fp
  807784:	da000015 	stw	r8,0(sp)
  807788:	08085b80 	call	8085b8 <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
  80778c:	da000017 	ldw	r8,0(sp)
  807790:	10004926 	beq	r2,zero,8078b8 <__sfvwrite_r+0x474>
  807794:	10800044 	addi	r2,r2,1
  807798:	1727c83a 	sub	r19,r2,fp
  80779c:	003fd606 	br	8076f8 <__sfvwrite_r+0x2b4>
	      COPY (w);
  8077a0:	e00b883a 	mov	r5,fp
  8077a4:	4009883a 	mov	r4,r8
  8077a8:	900d883a 	mov	r6,r18
  8077ac:	08087880 	call	808788 <memmove>
	      fp->_p += w;
  8077b0:	80800017 	ldw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  8077b4:	800b883a 	mov	r5,r16
  8077b8:	a809883a 	mov	r4,r21
	      fp->_p += w;
  8077bc:	1485883a 	add	r2,r2,r18
  8077c0:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  8077c4:	0806bc00 	call	806bc0 <_fflush_r>
  8077c8:	103fdb26 	beq	r2,zero,807738 <__sfvwrite_r+0x2f4>
  8077cc:	003fbd06 	br	8076c4 <__sfvwrite_r+0x280>
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
  8077d0:	80800417 	ldw	r2,16(r16)
  8077d4:	12001436 	bltu	r2,r8,807828 <__sfvwrite_r+0x3e4>
  8077d8:	85000517 	ldw	r20,20(r16)
  8077dc:	9d001236 	bltu	r19,r20,807828 <__sfvwrite_r+0x3e4>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  8077e0:	d8800017 	ldw	r2,0(sp)
  8077e4:	14c0322e 	bgeu	r2,r19,8078b0 <__sfvwrite_r+0x46c>
  8077e8:	d9000117 	ldw	r4,4(sp)
  8077ec:	a00b883a 	mov	r5,r20
  8077f0:	080d3580 	call	80d358 <__divsi3>
  8077f4:	a00b883a 	mov	r5,r20
  8077f8:	1009883a 	mov	r4,r2
  8077fc:	0802af80 	call	802af8 <__mulsi3>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  807800:	82000917 	ldw	r8,36(r16)
  807804:	81400717 	ldw	r5,28(r16)
  807808:	100f883a 	mov	r7,r2
  80780c:	e00d883a 	mov	r6,fp
  807810:	a809883a 	mov	r4,r21
  807814:	403ee83a 	callr	r8
  807818:	1029883a 	mov	r20,r2
	      if (w <= 0)
  80781c:	00bfa90e 	bge	zero,r2,8076c4 <__sfvwrite_r+0x280>
	  len -= w;
  807820:	9d27c83a 	sub	r19,r19,r20
  807824:	003f8906 	br	80764c <__sfvwrite_r+0x208>
	      w = MIN (len, w);
  807828:	9029883a 	mov	r20,r18
  80782c:	9c80012e 	bgeu	r19,r18,807834 <__sfvwrite_r+0x3f0>
  807830:	9829883a 	mov	r20,r19
	      COPY (w);
  807834:	4009883a 	mov	r4,r8
  807838:	a00d883a 	mov	r6,r20
  80783c:	e00b883a 	mov	r5,fp
  807840:	08087880 	call	808788 <memmove>
	      fp->_w -= w;
  807844:	80800217 	ldw	r2,8(r16)
	      fp->_p += w;
  807848:	81000017 	ldw	r4,0(r16)
	      fp->_w -= w;
  80784c:	1505c83a 	sub	r2,r2,r20
	      fp->_p += w;
  807850:	2509883a 	add	r4,r4,r20
	      fp->_w -= w;
  807854:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
  807858:	81000015 	stw	r4,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
  80785c:	103ff01e 	bne	r2,zero,807820 <__sfvwrite_r+0x3dc>
  807860:	800b883a 	mov	r5,r16
  807864:	a809883a 	mov	r4,r21
  807868:	0806bc00 	call	806bc0 <_fflush_r>
  80786c:	103fec26 	beq	r2,zero,807820 <__sfvwrite_r+0x3dc>
  807870:	003f9406 	br	8076c4 <__sfvwrite_r+0x280>
		w = len;
  807874:	9825883a 	mov	r18,r19
  807878:	982d883a 	mov	r22,r19
  80787c:	003f6706 	br	80761c <__sfvwrite_r+0x1d8>
	      COPY (w);
  807880:	4009883a 	mov	r4,r8
  807884:	a00d883a 	mov	r6,r20
  807888:	e00b883a 	mov	r5,fp
  80788c:	08087880 	call	808788 <memmove>
	      fp->_w -= w;
  807890:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  807894:	80800017 	ldw	r2,0(r16)
  807898:	a025883a 	mov	r18,r20
	      fp->_w -= w;
  80789c:	2509c83a 	sub	r4,r4,r20
	      fp->_p += w;
  8078a0:	1505883a 	add	r2,r2,r20
	      fp->_w -= w;
  8078a4:	81000215 	stw	r4,8(r16)
	      fp->_p += w;
  8078a8:	80800015 	stw	r2,0(r16)
  8078ac:	003fa206 	br	807738 <__sfvwrite_r+0x2f4>
  8078b0:	9809883a 	mov	r4,r19
  8078b4:	003fcd06 	br	8077ec <__sfvwrite_r+0x3a8>
	      nldist = nl ? nl + 1 - p : len + 1;
  8078b8:	b5000044 	addi	r20,r22,1
  8078bc:	a027883a 	mov	r19,r20
  8078c0:	003f8e06 	br	8076fc <__sfvwrite_r+0x2b8>
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
  8078c4:	a809883a 	mov	r4,r21
  8078c8:	0809b940 	call	809b94 <_realloc_r>
  8078cc:	1009883a 	mov	r4,r2
		      if (!str)
  8078d0:	103f4a1e 	bne	r2,zero,8075fc <__sfvwrite_r+0x1b8>
			  _free_r (ptr, fp->_bf._base);
  8078d4:	81400417 	ldw	r5,16(r16)
  8078d8:	a809883a 	mov	r4,r21
  8078dc:	08071500 	call	807150 <_free_r>
			  fp->_flags &=  ~__SMBF;
  8078e0:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  8078e4:	00c00304 	movi	r3,12
  8078e8:	a8c00015 	stw	r3,0(r21)
			  fp->_flags &=  ~__SMBF;
  8078ec:	10bfdfcc 	andi	r2,r2,65407
			  goto err;
  8078f0:	003f7506 	br	8076c8 <__sfvwrite_r+0x284>
			  ptr->_errno = ENOMEM;
  8078f4:	00c00304 	movi	r3,12
  fp->_flags |= __SERR;
  8078f8:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  8078fc:	a8c00015 	stw	r3,0(r21)
			  goto err;
  807900:	003f7106 	br	8076c8 <__sfvwrite_r+0x284>
    return EOF;
  807904:	00bfffc4 	movi	r2,-1
  807908:	003f5e06 	br	807684 <__sfvwrite_r+0x240>

0080790c <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
  80790c:	defffa04 	addi	sp,sp,-24
  807910:	dd000415 	stw	r20,16(sp)
  807914:	dcc00315 	stw	r19,12(sp)
  807918:	dc800215 	stw	r18,8(sp)
  80791c:	dfc00515 	stw	ra,20(sp)
  807920:	dc400115 	stw	r17,4(sp)
  807924:	dc000015 	stw	r16,0(sp)
  807928:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  80792c:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  807930:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807934:	94400117 	ldw	r17,4(r18)
  807938:	94000217 	ldw	r16,8(r18)
  80793c:	8c7fffc4 	addi	r17,r17,-1
  807940:	88000d16 	blt	r17,zero,807978 <_fwalk+0x6c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807944:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807948:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  80794c:	108000b0 	cmpltui	r2,r2,2
  807950:	1000061e 	bne	r2,zero,80796c <_fwalk+0x60>
  807954:	8080038f 	ldh	r2,14(r16)
	ret |= (*function) (fp);
  807958:	8009883a 	mov	r4,r16
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  80795c:	10bfffe0 	cmpeqi	r2,r2,-1
  807960:	1000021e 	bne	r2,zero,80796c <_fwalk+0x60>
	ret |= (*function) (fp);
  807964:	983ee83a 	callr	r19
  807968:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  80796c:	88bfffd8 	cmpnei	r2,r17,-1
  807970:	84001a04 	addi	r16,r16,104
  807974:	103ff31e 	bne	r2,zero,807944 <_fwalk+0x38>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807978:	94800017 	ldw	r18,0(r18)
  80797c:	903fed1e 	bne	r18,zero,807934 <_fwalk+0x28>

  return ret;
}
  807980:	a005883a 	mov	r2,r20
  807984:	dfc00517 	ldw	ra,20(sp)
  807988:	dd000417 	ldw	r20,16(sp)
  80798c:	dcc00317 	ldw	r19,12(sp)
  807990:	dc800217 	ldw	r18,8(sp)
  807994:	dc400117 	ldw	r17,4(sp)
  807998:	dc000017 	ldw	r16,0(sp)
  80799c:	dec00604 	addi	sp,sp,24
  8079a0:	f800283a 	ret

008079a4 <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
  8079a4:	defff904 	addi	sp,sp,-28
  8079a8:	dd400515 	stw	r21,20(sp)
  8079ac:	dd000415 	stw	r20,16(sp)
  8079b0:	dcc00315 	stw	r19,12(sp)
  8079b4:	dc800215 	stw	r18,8(sp)
  8079b8:	dfc00615 	stw	ra,24(sp)
  8079bc:	dc400115 	stw	r17,4(sp)
  8079c0:	dc000015 	stw	r16,0(sp)
  8079c4:	202b883a 	mov	r21,r4
  8079c8:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8079cc:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  8079d0:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8079d4:	94400117 	ldw	r17,4(r18)
  8079d8:	94000217 	ldw	r16,8(r18)
  8079dc:	8c7fffc4 	addi	r17,r17,-1
  8079e0:	88000e16 	blt	r17,zero,807a1c <_fwalk_reent+0x78>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8079e4:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8079e8:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8079ec:	108000b0 	cmpltui	r2,r2,2
  8079f0:	1000071e 	bne	r2,zero,807a10 <_fwalk_reent+0x6c>
  8079f4:	8080038f 	ldh	r2,14(r16)
	ret |= (*reent_function) (ptr, fp);
  8079f8:	800b883a 	mov	r5,r16
  8079fc:	a809883a 	mov	r4,r21
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807a00:	10bfffe0 	cmpeqi	r2,r2,-1
  807a04:	1000021e 	bne	r2,zero,807a10 <_fwalk_reent+0x6c>
	ret |= (*reent_function) (ptr, fp);
  807a08:	983ee83a 	callr	r19
  807a0c:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807a10:	88bfffd8 	cmpnei	r2,r17,-1
  807a14:	84001a04 	addi	r16,r16,104
  807a18:	103ff21e 	bne	r2,zero,8079e4 <_fwalk_reent+0x40>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807a1c:	94800017 	ldw	r18,0(r18)
  807a20:	903fec1e 	bne	r18,zero,8079d4 <_fwalk_reent+0x30>

  return ret;
}
  807a24:	a005883a 	mov	r2,r20
  807a28:	dfc00617 	ldw	ra,24(sp)
  807a2c:	dd400517 	ldw	r21,20(sp)
  807a30:	dd000417 	ldw	r20,16(sp)
  807a34:	dcc00317 	ldw	r19,12(sp)
  807a38:	dc800217 	ldw	r18,8(sp)
  807a3c:	dc400117 	ldw	r17,4(sp)
  807a40:	dc000017 	ldw	r16,0(sp)
  807a44:	dec00704 	addi	sp,sp,28
  807a48:	f800283a 	ret

00807a4c <__localeconv_l>:
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
}
  807a4c:	20803c04 	addi	r2,r4,240
  807a50:	f800283a 	ret

00807a54 <_localeconv_r>:
{
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
}
  807a54:	00802074 	movhi	r2,129
  807a58:	108d6c04 	addi	r2,r2,13744
  807a5c:	f800283a 	ret

00807a60 <localeconv>:
#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
  return __localeconv_l (__get_current_locale ());
}
  807a60:	00802074 	movhi	r2,129
  807a64:	108d6c04 	addi	r2,r2,13744
  807a68:	f800283a 	ret

00807a6c <_setlocale_r>:
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
  807a6c:	30001626 	beq	r6,zero,807ac8 <_setlocale_r+0x5c>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807a70:	01402074 	movhi	r5,129
{
  807a74:	defffe04 	addi	sp,sp,-8
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807a78:	294afd04 	addi	r5,r5,11252
  807a7c:	3009883a 	mov	r4,r6
{
  807a80:	dc000015 	stw	r16,0(sp)
  807a84:	dfc00115 	stw	ra,4(sp)
  807a88:	3021883a 	mov	r16,r6
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807a8c:	080a2880 	call	80a288 <strcmp>
  807a90:	1000061e 	bne	r2,zero,807aac <_setlocale_r+0x40>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
  807a94:	00802074 	movhi	r2,129
  807a98:	108afc04 	addi	r2,r2,11248
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
  807a9c:	dfc00117 	ldw	ra,4(sp)
  807aa0:	dc000017 	ldw	r16,0(sp)
  807aa4:	dec00204 	addi	sp,sp,8
  807aa8:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807aac:	80800003 	ldbu	r2,0(r16)
  807ab0:	10bfef44 	addi	r2,r2,-67
  807ab4:	10000726 	beq	r2,zero,807ad4 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
  807ab8:	80800003 	ldbu	r2,0(r16)
  807abc:	103ff526 	beq	r2,zero,807a94 <_setlocale_r+0x28>
        return NULL;
  807ac0:	0005883a 	mov	r2,zero
  807ac4:	003ff506 	br	807a9c <_setlocale_r+0x30>
  return "C";
  807ac8:	00802074 	movhi	r2,129
  807acc:	108afc04 	addi	r2,r2,11248
}
  807ad0:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807ad4:	80800043 	ldbu	r2,1(r16)
  807ad8:	103fee26 	beq	r2,zero,807a94 <_setlocale_r+0x28>
  807adc:	003ff606 	br	807ab8 <_setlocale_r+0x4c>

00807ae0 <__locale_mb_cur_max>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
#endif
}
  807ae0:	00802074 	movhi	r2,129
  807ae4:	108d7a07 	ldb	r2,13800(r2)
  807ae8:	f800283a 	ret

00807aec <setlocale>:
  if (locale)
  807aec:	28001626 	beq	r5,zero,807b48 <setlocale+0x5c>
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
  807af0:	defffe04 	addi	sp,sp,-8
  807af4:	dc000015 	stw	r16,0(sp)
  807af8:	2821883a 	mov	r16,r5
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807afc:	01402074 	movhi	r5,129
  807b00:	294afd04 	addi	r5,r5,11252
  807b04:	8009883a 	mov	r4,r16
{
  807b08:	dfc00115 	stw	ra,4(sp)
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b0c:	080a2880 	call	80a288 <strcmp>
  807b10:	1000061e 	bne	r2,zero,807b2c <setlocale+0x40>
  return "C";
  807b14:	00802074 	movhi	r2,129
  807b18:	108afc04 	addi	r2,r2,11248
  return _setlocale_r (_REENT, category, locale);
}
  807b1c:	dfc00117 	ldw	ra,4(sp)
  807b20:	dc000017 	ldw	r16,0(sp)
  807b24:	dec00204 	addi	sp,sp,8
  807b28:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b2c:	80800003 	ldbu	r2,0(r16)
  807b30:	10bfef44 	addi	r2,r2,-67
  807b34:	10000726 	beq	r2,zero,807b54 <setlocale+0x68>
	  && strcmp (locale, ""))
  807b38:	80800003 	ldbu	r2,0(r16)
  807b3c:	103ff526 	beq	r2,zero,807b14 <setlocale+0x28>
        return NULL;
  807b40:	0005883a 	mov	r2,zero
  807b44:	003ff506 	br	807b1c <setlocale+0x30>
  return "C";
  807b48:	00802074 	movhi	r2,129
  807b4c:	108afc04 	addi	r2,r2,11248
}
  807b50:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807b54:	80800043 	ldbu	r2,1(r16)
  807b58:	103fee26 	beq	r2,zero,807b14 <setlocale+0x28>
  807b5c:	003ff606 	br	807b38 <setlocale+0x4c>

00807b60 <__smakebuf_r>:
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
  807b60:	2880030b 	ldhu	r2,12(r5)
{
  807b64:	deffe804 	addi	sp,sp,-96
  807b68:	dc001215 	stw	r16,72(sp)
  807b6c:	dfc01715 	stw	ra,92(sp)
  807b70:	dd001615 	stw	r20,88(sp)
  807b74:	dcc01515 	stw	r19,84(sp)
  807b78:	dc801415 	stw	r18,80(sp)
  807b7c:	dc401315 	stw	r17,76(sp)
  if (fp->_flags & __SNBF)
  807b80:	10c0008c 	andi	r3,r2,2
{
  807b84:	2821883a 	mov	r16,r5
  if (fp->_flags & __SNBF)
  807b88:	18000d26 	beq	r3,zero,807bc0 <__smakebuf_r+0x60>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
  807b8c:	288010c4 	addi	r2,r5,67
  807b90:	28800015 	stw	r2,0(r5)
  807b94:	28800415 	stw	r2,16(r5)
      fp->_bf._size = 1;
  807b98:	00800044 	movi	r2,1
  807b9c:	28800515 	stw	r2,20(r5)
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
      fp->_flags |= flags;
    }
}
  807ba0:	dfc01717 	ldw	ra,92(sp)
  807ba4:	dd001617 	ldw	r20,88(sp)
  807ba8:	dcc01517 	ldw	r19,84(sp)
  807bac:	dc801417 	ldw	r18,80(sp)
  807bb0:	dc401317 	ldw	r17,76(sp)
  807bb4:	dc001217 	ldw	r16,72(sp)
  807bb8:	dec01804 	addi	sp,sp,96
  807bbc:	f800283a 	ret

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807bc0:	2940038f 	ldh	r5,14(r5)
  807bc4:	2023883a 	mov	r17,r4
  807bc8:	28002816 	blt	r5,zero,807c6c <__smakebuf_r+0x10c>
  807bcc:	d80d883a 	mov	r6,sp
  807bd0:	080be740 	call	80be74 <_fstat_r>
  807bd4:	10002416 	blt	r2,zero,807c68 <__smakebuf_r+0x108>
        *bufsize = BUFSIZ;
      return (0);
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
  807bd8:	d8800117 	ldw	r2,4(sp)
  807bdc:	10bc000c 	andi	r2,r2,61440
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
  807be0:	10880018 	cmpnei	r2,r2,8192
  807be4:	1000461e 	bne	r2,zero,807d00 <__smakebuf_r+0x1a0>
  807be8:	8140038f 	ldh	r5,14(r16)
  807bec:	8809883a 	mov	r4,r17
  807bf0:	080becc0 	call	80becc <_isatty_r>
  807bf4:	10003e26 	beq	r2,zero,807cf0 <__smakebuf_r+0x190>
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  807bf8:	8080030b 	ldhu	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  807bfc:	80c010c4 	addi	r3,r16,67
  807c00:	80c00015 	stw	r3,0(r16)
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  807c04:	10800054 	ori	r2,r2,1
  807c08:	8080030d 	sth	r2,12(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  807c0c:	00800044 	movi	r2,1
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  807c10:	80c00415 	stw	r3,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  807c14:	80800515 	stw	r2,20(r16)
  807c18:	04c00044 	movi	r19,1
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
  807c1c:	05010004 	movi	r20,1024
  return (snpt);
  807c20:	04820004 	movi	r18,2048
  if ((p = _malloc_r (ptr, size)) == NULL)
  807c24:	a00b883a 	mov	r5,r20
  807c28:	8809883a 	mov	r4,r17
  807c2c:	0807da80 	call	807da8 <_malloc_r>
  807c30:	10001726 	beq	r2,zero,807c90 <__smakebuf_r+0x130>
      fp->_flags |= __SMBF;
  807c34:	80c0030b 	ldhu	r3,12(r16)
      ptr->__cleanup = _cleanup_r;
  807c38:	01002034 	movhi	r4,128
  807c3c:	211b2904 	addi	r4,r4,27812
  807c40:	89000f15 	stw	r4,60(r17)
      fp->_flags |= __SMBF;
  807c44:	18c02014 	ori	r3,r3,128
  807c48:	80c0030d 	sth	r3,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
  807c4c:	80800015 	stw	r2,0(r16)
  807c50:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
  807c54:	85000515 	stw	r20,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807c58:	98001d1e 	bne	r19,zero,807cd0 <__smakebuf_r+0x170>
      fp->_flags |= flags;
  807c5c:	90c6b03a 	or	r3,r18,r3
  807c60:	80c0030d 	sth	r3,12(r16)
  807c64:	003fce06 	br	807ba0 <__smakebuf_r+0x40>
      if (fp->_flags & __SMBF)
  807c68:	8080030b 	ldhu	r2,12(r16)
  807c6c:	1080200c 	andi	r2,r2,128
      *couldbetty = 0;
  807c70:	0027883a 	mov	r19,zero
      if (fp->_flags & __SMBF)
  807c74:	10001326 	beq	r2,zero,807cc4 <__smakebuf_r+0x164>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807c78:	05001004 	movi	r20,64
  if ((p = _malloc_r (ptr, size)) == NULL)
  807c7c:	a00b883a 	mov	r5,r20
  807c80:	8809883a 	mov	r4,r17
  807c84:	0025883a 	mov	r18,zero
  807c88:	0807da80 	call	807da8 <_malloc_r>
  807c8c:	103fe91e 	bne	r2,zero,807c34 <__smakebuf_r+0xd4>
      if (!(fp->_flags & __SSTR))
  807c90:	8080030b 	ldhu	r2,12(r16)
  807c94:	10c0800c 	andi	r3,r2,512
  807c98:	183fc11e 	bne	r3,zero,807ba0 <__smakebuf_r+0x40>
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  807c9c:	00ffff04 	movi	r3,-4
  807ca0:	10c4703a 	and	r2,r2,r3
  807ca4:	10800094 	ori	r2,r2,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807ca8:	80c010c4 	addi	r3,r16,67
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  807cac:	8080030d 	sth	r2,12(r16)
	  fp->_bf._size = 1;
  807cb0:	00800044 	movi	r2,1
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807cb4:	80c00015 	stw	r3,0(r16)
  807cb8:	80c00415 	stw	r3,16(r16)
	  fp->_bf._size = 1;
  807cbc:	80800515 	stw	r2,20(r16)
  807cc0:	003fb706 	br	807ba0 <__smakebuf_r+0x40>
        *bufsize = BUFSIZ;
  807cc4:	05010004 	movi	r20,1024
  807cc8:	0025883a 	mov	r18,zero
  807ccc:	003fd506 	br	807c24 <__smakebuf_r+0xc4>
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807cd0:	8140038f 	ldh	r5,14(r16)
  807cd4:	8809883a 	mov	r4,r17
  807cd8:	080becc0 	call	80becc <_isatty_r>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  807cdc:	80c0030b 	ldhu	r3,12(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807ce0:	103fde26 	beq	r2,zero,807c5c <__smakebuf_r+0xfc>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  807ce4:	18ffff0c 	andi	r3,r3,65532
  807ce8:	18c00054 	ori	r3,r3,1
  807cec:	003fdb06 	br	807c5c <__smakebuf_r+0xfc>
  807cf0:	04c00044 	movi	r19,1
  *bufsize = BUFSIZ;
  807cf4:	05010004 	movi	r20,1024
  return (snpt);
  807cf8:	04820004 	movi	r18,2048
  807cfc:	003fc906 	br	807c24 <__smakebuf_r+0xc4>
  807d00:	0027883a 	mov	r19,zero
  *bufsize = BUFSIZ;
  807d04:	05010004 	movi	r20,1024
  return (snpt);
  807d08:	04820004 	movi	r18,2048
  807d0c:	003fc506 	br	807c24 <__smakebuf_r+0xc4>

00807d10 <__swhatbuf_r>:
{
  807d10:	deffea04 	addi	sp,sp,-88
  807d14:	dc001215 	stw	r16,72(sp)
  807d18:	2821883a 	mov	r16,r5
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807d1c:	2940038f 	ldh	r5,14(r5)
{
  807d20:	dc801415 	stw	r18,80(sp)
  807d24:	dc401315 	stw	r17,76(sp)
  807d28:	dfc01515 	stw	ra,84(sp)
  807d2c:	3023883a 	mov	r17,r6
  807d30:	3825883a 	mov	r18,r7
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807d34:	28001016 	blt	r5,zero,807d78 <__swhatbuf_r+0x68>
  807d38:	d80d883a 	mov	r6,sp
  807d3c:	080be740 	call	80be74 <_fstat_r>
  807d40:	10000d16 	blt	r2,zero,807d78 <__swhatbuf_r+0x68>
  *couldbetty = S_ISCHR(st.st_mode);
  807d44:	d8c00117 	ldw	r3,4(sp)
  return (snpt);
  807d48:	00820004 	movi	r2,2048
  *couldbetty = S_ISCHR(st.st_mode);
  807d4c:	18fc000c 	andi	r3,r3,61440
  807d50:	18c80020 	cmpeqi	r3,r3,8192
  807d54:	90c00015 	stw	r3,0(r18)
  *bufsize = BUFSIZ;
  807d58:	00c10004 	movi	r3,1024
  807d5c:	88c00015 	stw	r3,0(r17)
}
  807d60:	dfc01517 	ldw	ra,84(sp)
  807d64:	dc801417 	ldw	r18,80(sp)
  807d68:	dc401317 	ldw	r17,76(sp)
  807d6c:	dc001217 	ldw	r16,72(sp)
  807d70:	dec01604 	addi	sp,sp,88
  807d74:	f800283a 	ret
  807d78:	8080030b 	ldhu	r2,12(r16)
      *couldbetty = 0;
  807d7c:	90000015 	stw	zero,0(r18)
      if (fp->_flags & __SMBF)
  807d80:	1080200c 	andi	r2,r2,128
  807d84:	10000426 	beq	r2,zero,807d98 <__swhatbuf_r+0x88>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807d88:	00801004 	movi	r2,64
  807d8c:	88800015 	stw	r2,0(r17)
  807d90:	0005883a 	mov	r2,zero
  807d94:	003ff206 	br	807d60 <__swhatbuf_r+0x50>
        *bufsize = BUFSIZ;
  807d98:	00810004 	movi	r2,1024
  807d9c:	88800015 	stw	r2,0(r17)
  807da0:	0005883a 	mov	r2,zero
  807da4:	003fee06 	br	807d60 <__swhatbuf_r+0x50>

00807da8 <_malloc_r>:
{
  807da8:	defff604 	addi	sp,sp,-40
  807dac:	dc400115 	stw	r17,4(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807db0:	2c4002c4 	addi	r17,r5,11
{
  807db4:	dc800215 	stw	r18,8(sp)
  807db8:	dfc00915 	stw	ra,36(sp)
  807dbc:	df000815 	stw	fp,32(sp)
  807dc0:	ddc00715 	stw	r23,28(sp)
  807dc4:	dd800615 	stw	r22,24(sp)
  807dc8:	dd400515 	stw	r21,20(sp)
  807dcc:	dd000415 	stw	r20,16(sp)
  807dd0:	dcc00315 	stw	r19,12(sp)
  807dd4:	dc000015 	stw	r16,0(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807dd8:	888005e8 	cmpgeui	r2,r17,23
{
  807ddc:	2025883a 	mov	r18,r4
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807de0:	10001b1e 	bne	r2,zero,807e50 <_malloc_r+0xa8>
  if (nb > INT_MAX || nb < bytes)
  807de4:	29400468 	cmpgeui	r5,r5,17
  807de8:	2800821e 	bne	r5,zero,807ff4 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807dec:	08103640 	call	810364 <__malloc_lock>
  807df0:	04400404 	movi	r17,16
  807df4:	00800604 	movi	r2,24
  807df8:	01c00084 	movi	r7,2
    q = bin_at(idx);
  807dfc:	04c02074 	movhi	r19,129
  807e00:	9ccd8b04 	addi	r19,r19,13868
  807e04:	9885883a 	add	r2,r19,r2
    victim = last(q);
  807e08:	14000117 	ldw	r16,4(r2)
    q = bin_at(idx);
  807e0c:	10fffe04 	addi	r3,r2,-8
    if (victim == q)
  807e10:	80c08b26 	beq	r16,r3,808040 <_malloc_r+0x298>
      victim_size = chunksize(victim);
  807e14:	80800117 	ldw	r2,4(r16)
      unlink(victim, bck, fwd);
  807e18:	81000317 	ldw	r4,12(r16)
      victim_size = chunksize(victim);
  807e1c:	00ffff04 	movi	r3,-4
  807e20:	10c4703a 	and	r2,r2,r3
        unlink(victim, bck, fwd);
  807e24:	81400217 	ldw	r5,8(r16)
        set_inuse_bit_at_offset(victim, victim_size);
  807e28:	8085883a 	add	r2,r16,r2
  807e2c:	10c00117 	ldw	r3,4(r2)
        unlink(victim, bck, fwd);
  807e30:	29000315 	stw	r4,12(r5)
  807e34:	21400215 	stw	r5,8(r4)
        set_inuse_bit_at_offset(victim, victim_size);
  807e38:	18c00054 	ori	r3,r3,1
  807e3c:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
  807e40:	9009883a 	mov	r4,r18
  807e44:	08103880 	call	810388 <__malloc_unlock>
        return chunk2mem(victim);
  807e48:	80800204 	addi	r2,r16,8
  807e4c:	00006c06 	br	808000 <_malloc_r+0x258>
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807e50:	00bffe04 	movi	r2,-8
  807e54:	88a2703a 	and	r17,r17,r2
  if (nb > INT_MAX || nb < bytes)
  807e58:	88006616 	blt	r17,zero,807ff4 <_malloc_r+0x24c>
  807e5c:	89406536 	bltu	r17,r5,807ff4 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807e60:	08103640 	call	810364 <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
  807e64:	88807e28 	cmpgeui	r2,r17,504
  807e68:	10011b26 	beq	r2,zero,8082d8 <_malloc_r+0x530>
    idx = bin_index(nb);
  807e6c:	8804d27a 	srli	r2,r17,9
  807e70:	10006f26 	beq	r2,zero,808030 <_malloc_r+0x288>
  807e74:	10c00168 	cmpgeui	r3,r2,5
  807e78:	1800f71e 	bne	r3,zero,808258 <_malloc_r+0x4b0>
  807e7c:	8804d1ba 	srli	r2,r17,6
    bin = bin_at(idx);
  807e80:	11c00e44 	addi	r7,r2,57
  807e84:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807e88:	12000e04 	addi	r8,r2,56
    bin = bin_at(idx);
  807e8c:	04c02074 	movhi	r19,129
  807e90:	9ccd8b04 	addi	r19,r19,13868
  807e94:	9909883a 	add	r4,r19,r4
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807e98:	24000117 	ldw	r16,4(r4)
    bin = bin_at(idx);
  807e9c:	213ffe04 	addi	r4,r4,-8
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807ea0:	24000b26 	beq	r4,r16,807ed0 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807ea4:	01bfff04 	movi	r6,-4
  807ea8:	00000306 	br	807eb8 <_malloc_r+0x110>
      else if (remainder_size >= 0) /* exact fit */
  807eac:	1800cf0e 	bge	r3,zero,8081ec <_malloc_r+0x444>
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807eb0:	84000317 	ldw	r16,12(r16)
  807eb4:	24000626 	beq	r4,r16,807ed0 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807eb8:	80800117 	ldw	r2,4(r16)
  807ebc:	1184703a 	and	r2,r2,r6
      remainder_size = long_sub_size_t(victim_size, nb);
  807ec0:	1447c83a 	sub	r3,r2,r17
      if (remainder_size >= (long)MINSIZE) /* too big */
  807ec4:	19400408 	cmpgei	r5,r3,16
  807ec8:	283ff826 	beq	r5,zero,807eac <_malloc_r+0x104>
  807ecc:	400f883a 	mov	r7,r8
  if ( (victim = last_remainder->fd) != last_remainder)
  807ed0:	9c000417 	ldw	r16,16(r19)
  807ed4:	02402074 	movhi	r9,129
  807ed8:	4a4d8d04 	addi	r9,r9,13876
  807edc:	82405f26 	beq	r16,r9,80805c <_malloc_r+0x2b4>
    victim_size = chunksize(victim);
  807ee0:	80c00117 	ldw	r3,4(r16)
  807ee4:	00bfff04 	movi	r2,-4
  807ee8:	1884703a 	and	r2,r3,r2
    remainder_size = long_sub_size_t(victim_size, nb);
  807eec:	1447c83a 	sub	r3,r2,r17
    if (remainder_size >= (long)MINSIZE) /* re-split */
  807ef0:	19000410 	cmplti	r4,r3,16
  807ef4:	20010326 	beq	r4,zero,808304 <_malloc_r+0x55c>
    clear_last_remainder;
  807ef8:	9a400515 	stw	r9,20(r19)
  807efc:	9a400415 	stw	r9,16(r19)
    if (remainder_size >= 0)  /* exhaust */
  807f00:	1800f80e 	bge	r3,zero,8082e4 <_malloc_r+0x53c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807f04:	10c08028 	cmpgeui	r3,r2,512
  807f08:	1800ba1e 	bne	r3,zero,8081f4 <_malloc_r+0x44c>
  807f0c:	1006d0fa 	srli	r3,r2,3
  807f10:	1008d17a 	srli	r4,r2,5
  807f14:	00800044 	movi	r2,1
  807f18:	18c00044 	addi	r3,r3,1
  807f1c:	180690fa 	slli	r3,r3,3
  807f20:	99400117 	ldw	r5,4(r19)
  807f24:	1104983a 	sll	r2,r2,r4
  807f28:	98c7883a 	add	r3,r19,r3
  807f2c:	19000017 	ldw	r4,0(r3)
  807f30:	1144b03a 	or	r2,r2,r5
  807f34:	197ffe04 	addi	r5,r3,-8
  807f38:	81400315 	stw	r5,12(r16)
  807f3c:	81000215 	stw	r4,8(r16)
  807f40:	98800115 	stw	r2,4(r19)
  807f44:	1c000015 	stw	r16,0(r3)
  807f48:	24000315 	stw	r16,12(r4)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  807f4c:	3807d0ba 	srai	r3,r7,2
  807f50:	01000044 	movi	r4,1
  807f54:	20c8983a 	sll	r4,r4,r3
  807f58:	11004536 	bltu	r2,r4,808070 <_malloc_r+0x2c8>
    if ( (block & binblocks) == 0) 
  807f5c:	2086703a 	and	r3,r4,r2
  807f60:	18000a1e 	bne	r3,zero,807f8c <_malloc_r+0x1e4>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  807f64:	00ffff04 	movi	r3,-4
      block <<= 1;
  807f68:	2109883a 	add	r4,r4,r4
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  807f6c:	38ce703a 	and	r7,r7,r3
      while ((block & binblocks) == 0)
  807f70:	2086703a 	and	r3,r4,r2
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  807f74:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  807f78:	1800041e 	bne	r3,zero,807f8c <_malloc_r+0x1e4>
        block <<= 1;
  807f7c:	2109883a 	add	r4,r4,r4
      while ((block & binblocks) == 0)
  807f80:	2086703a 	and	r3,r4,r2
        idx += BINBLOCKWIDTH;
  807f84:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  807f88:	183ffc26 	beq	r3,zero,807f7c <_malloc_r+0x1d4>
          victim_size = chunksize(victim);
  807f8c:	02bfff04 	movi	r10,-4
      q = bin = bin_at(idx);
  807f90:	381690fa 	slli	r11,r7,3
  807f94:	3819883a 	mov	r12,r7
  807f98:	9ad7883a 	add	r11,r19,r11
  807f9c:	5811883a 	mov	r8,r11
        for (victim = last(bin); victim != bin; victim = victim->bk)
  807fa0:	40800317 	ldw	r2,12(r8)
  807fa4:	4080b526 	beq	r8,r2,80827c <_malloc_r+0x4d4>
          victim_size = chunksize(victim);
  807fa8:	10c00117 	ldw	r3,4(r2)
  807fac:	1021883a 	mov	r16,r2
            unlink(victim, bck, fwd);
  807fb0:	10800317 	ldw	r2,12(r2)
          victim_size = chunksize(victim);
  807fb4:	1a86703a 	and	r3,r3,r10
          remainder_size = long_sub_size_t(victim_size, nb);
  807fb8:	1c4bc83a 	sub	r5,r3,r17
          if (remainder_size >= (long)MINSIZE) /* split */
  807fbc:	29800410 	cmplti	r6,r5,16
  807fc0:	3000b326 	beq	r6,zero,808290 <_malloc_r+0x4e8>
          else if (remainder_size >= 0)  /* take */
  807fc4:	283ff716 	blt	r5,zero,807fa4 <_malloc_r+0x1fc>
            set_inuse_bit_at_offset(victim, victim_size);
  807fc8:	80c7883a 	add	r3,r16,r3
  807fcc:	19400117 	ldw	r5,4(r3)
            unlink(victim, bck, fwd);
  807fd0:	81800217 	ldw	r6,8(r16)
	    MALLOC_UNLOCK;
  807fd4:	9009883a 	mov	r4,r18
            set_inuse_bit_at_offset(victim, victim_size);
  807fd8:	29400054 	ori	r5,r5,1
  807fdc:	19400115 	stw	r5,4(r3)
            unlink(victim, bck, fwd);
  807fe0:	30800315 	stw	r2,12(r6)
  807fe4:	11800215 	stw	r6,8(r2)
	    MALLOC_UNLOCK;
  807fe8:	08103880 	call	810388 <__malloc_unlock>
            return chunk2mem(victim);
  807fec:	80800204 	addi	r2,r16,8
  807ff0:	00000306 	br	808000 <_malloc_r+0x258>
    RERRNO = ENOMEM;
  807ff4:	00800304 	movi	r2,12
  807ff8:	90800015 	stw	r2,0(r18)
    return 0;
  807ffc:	0005883a 	mov	r2,zero
}
  808000:	dfc00917 	ldw	ra,36(sp)
  808004:	df000817 	ldw	fp,32(sp)
  808008:	ddc00717 	ldw	r23,28(sp)
  80800c:	dd800617 	ldw	r22,24(sp)
  808010:	dd400517 	ldw	r21,20(sp)
  808014:	dd000417 	ldw	r20,16(sp)
  808018:	dcc00317 	ldw	r19,12(sp)
  80801c:	dc800217 	ldw	r18,8(sp)
  808020:	dc400117 	ldw	r17,4(sp)
  808024:	dc000017 	ldw	r16,0(sp)
  808028:	dec00a04 	addi	sp,sp,40
  80802c:	f800283a 	ret
  808030:	01008004 	movi	r4,512
  808034:	01c01004 	movi	r7,64
    idx = bin_index(nb);
  808038:	02000fc4 	movi	r8,63
  80803c:	003f9306 	br	807e8c <_malloc_r+0xe4>
      victim = last(q);
  808040:	14000317 	ldw	r16,12(r2)
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
  808044:	39c00084 	addi	r7,r7,2
    if (victim != q)
  808048:	143f721e 	bne	r2,r16,807e14 <_malloc_r+0x6c>
  if ( (victim = last_remainder->fd) != last_remainder)
  80804c:	9c000417 	ldw	r16,16(r19)
  808050:	02402074 	movhi	r9,129
  808054:	4a4d8d04 	addi	r9,r9,13876
  808058:	827fa11e 	bne	r16,r9,807ee0 <_malloc_r+0x138>
  if ( (block = idx2binblock(idx)) <= binblocks)  
  80805c:	3807d0ba 	srai	r3,r7,2
  808060:	01000044 	movi	r4,1
  808064:	98800117 	ldw	r2,4(r19)
  808068:	20c8983a 	sll	r4,r4,r3
  80806c:	113fbb2e 	bgeu	r2,r4,807f5c <_malloc_r+0x1b4>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  808070:	9c000217 	ldw	r16,8(r19)
  808074:	00bfff04 	movi	r2,-4
  808078:	85400117 	ldw	r21,4(r16)
  80807c:	a8ac703a 	and	r22,r21,r2
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  808080:	b4400336 	bltu	r22,r17,808090 <_malloc_r+0x2e8>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  808084:	b445c83a 	sub	r2,r22,r17
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  808088:	10c00408 	cmpgei	r3,r2,16
  80808c:	18004d1e 	bne	r3,zero,8081c4 <_malloc_r+0x41c>
  if (sbrk_base != (char*)(-1))
  808090:	d0a00a17 	ldw	r2,-32728(gp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  808094:	d5671717 	ldw	r21,-25508(gp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
  808098:	85b9883a 	add	fp,r16,r22
  if (sbrk_base != (char*)(-1))
  80809c:	10bfffd8 	cmpnei	r2,r2,-1
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  8080a0:	8d6b883a 	add	r21,r17,r21
  if (sbrk_base != (char*)(-1))
  8080a4:	1000d126 	beq	r2,zero,8083ec <_malloc_r+0x644>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
  8080a8:	ad4403c4 	addi	r21,r21,4111
  8080ac:	00bc0004 	movi	r2,-4096
  8080b0:	a8aa703a 	and	r21,r21,r2
  brk = (char*)(MORECORE (sbrk_size));
  8080b4:	a80b883a 	mov	r5,r21
  8080b8:	9009883a 	mov	r4,r18
  8080bc:	080a0f80 	call	80a0f8 <_sbrk_r>
  8080c0:	102f883a 	mov	r23,r2
  if (brk == (char*)(MORECORE_FAILURE) || 
  8080c4:	10bfffd8 	cmpnei	r2,r2,-1
  8080c8:	1000a326 	beq	r2,zero,808358 <_malloc_r+0x5b0>
  8080cc:	bf00a136 	bltu	r23,fp,808354 <_malloc_r+0x5ac>
  sbrked_mem += sbrk_size;
  8080d0:	00802074 	movhi	r2,129
  8080d4:	151a2f17 	ldw	r20,26812(r2)
  8080d8:	ad29883a 	add	r20,r21,r20
  8080dc:	151a2f15 	stw	r20,26812(r2)
  8080e0:	a007883a 	mov	r3,r20
  if (brk == old_end /* can just add bytes to current top, unless
  8080e4:	e5c0e726 	beq	fp,r23,808484 <_malloc_r+0x6dc>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
  8080e8:	d0a00a17 	ldw	r2,-32728(gp)
  8080ec:	10bfffd8 	cmpnei	r2,r2,-1
  8080f0:	1000eb26 	beq	r2,zero,8084a0 <_malloc_r+0x6f8>
      sbrked_mem += brk - (char*)old_end;
  8080f4:	bf39c83a 	sub	fp,r23,fp
  8080f8:	e0c7883a 	add	r3,fp,r3
  8080fc:	00802074 	movhi	r2,129
  808100:	10da2f15 	stw	r3,26812(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
  808104:	bf0001cc 	andi	fp,r23,7
    if (front_misalign > 0) 
  808108:	e000c126 	beq	fp,zero,808410 <_malloc_r+0x668>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
  80810c:	bf2fc83a 	sub	r23,r23,fp
      brk += correction;
  808110:	bdc00204 	addi	r23,r23,8
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  808114:	05040204 	movi	r20,4104
  808118:	a729c83a 	sub	r20,r20,fp
  80811c:	bd6b883a 	add	r21,r23,r21
    correction &= (pagesz - 1);
  808120:	a569c83a 	sub	r20,r20,r21
  808124:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  808128:	a00b883a 	mov	r5,r20
  80812c:	9009883a 	mov	r4,r18
  808130:	080a0f80 	call	80a0f8 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  808134:	10ffffe0 	cmpeqi	r3,r2,-1
  808138:	1800ee1e 	bne	r3,zero,8084f4 <_malloc_r+0x74c>
    top_size = new_brk - brk + correction;
  80813c:	15c5c83a 	sub	r2,r2,r23
  808140:	152b883a 	add	r21,r2,r20
    sbrked_mem += correction;
  808144:	00802074 	movhi	r2,129
  808148:	115a2f17 	ldw	r5,26812(r2)
    top = (mchunkptr)brk;
  80814c:	9dc00215 	stw	r23,8(r19)
    set_head(top, top_size | PREV_INUSE);
  808150:	ad400054 	ori	r21,r21,1
    sbrked_mem += correction;
  808154:	a169883a 	add	r20,r20,r5
  808158:	151a2f15 	stw	r20,26812(r2)
    set_head(top, top_size | PREV_INUSE);
  80815c:	bd400115 	stw	r21,4(r23)
    if (old_top != initial_top)
  808160:	84c0d126 	beq	r16,r19,8084a8 <_malloc_r+0x700>
      if (old_top_size < MINSIZE) 
  808164:	b0800428 	cmpgeui	r2,r22,16
  808168:	1000d126 	beq	r2,zero,8084b0 <_malloc_r+0x708>
      set_head_size(old_top, old_top_size);
  80816c:	80c00117 	ldw	r3,4(r16)
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
  808170:	013ffe04 	movi	r4,-8
  808174:	b0bffd04 	addi	r2,r22,-12
  808178:	1104703a 	and	r2,r2,r4
      set_head_size(old_top, old_top_size);
  80817c:	18c0004c 	andi	r3,r3,1
  808180:	1886b03a 	or	r3,r3,r2
  808184:	80c00115 	stw	r3,4(r16)
      chunk_at_offset(old_top, old_top_size          )->size =
  808188:	01000144 	movi	r4,5
  80818c:	8087883a 	add	r3,r16,r2
  808190:	19000115 	stw	r4,4(r3)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
  808194:	19000215 	stw	r4,8(r3)
      if (old_top_size >= MINSIZE) 
  808198:	10800428 	cmpgeui	r2,r2,16
  80819c:	1000da1e 	bne	r2,zero,808508 <_malloc_r+0x760>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8081a0:	bd400117 	ldw	r21,4(r23)
  8081a4:	b821883a 	mov	r16,r23
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  8081a8:	d0a71617 	ldw	r2,-25512(gp)
  8081ac:	1500012e 	bgeu	r2,r20,8081b4 <_malloc_r+0x40c>
    max_sbrked_mem = sbrked_mem;
  8081b0:	d5271615 	stw	r20,-25512(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
  8081b4:	d0a71517 	ldw	r2,-25516(gp)
  8081b8:	1500692e 	bgeu	r2,r20,808360 <_malloc_r+0x5b8>
    max_total_mem = sbrked_mem;
  8081bc:	d5271515 	stw	r20,-25516(gp)
  8081c0:	00006706 	br	808360 <_malloc_r+0x5b8>
  set_head(victim, nb | PREV_INUSE);
  8081c4:	88c00054 	ori	r3,r17,1
  8081c8:	80c00115 	stw	r3,4(r16)
  top = chunk_at_offset(victim, nb);
  8081cc:	8463883a 	add	r17,r16,r17
  set_head(top, remainder_size | PREV_INUSE);
  8081d0:	10800054 	ori	r2,r2,1
  top = chunk_at_offset(victim, nb);
  8081d4:	9c400215 	stw	r17,8(r19)
  set_head(top, remainder_size | PREV_INUSE);
  8081d8:	88800115 	stw	r2,4(r17)
  MALLOC_UNLOCK;
  8081dc:	9009883a 	mov	r4,r18
  8081e0:	08103880 	call	810388 <__malloc_unlock>
  return chunk2mem(victim);
  8081e4:	80800204 	addi	r2,r16,8
  8081e8:	003f8506 	br	808000 <_malloc_r+0x258>
        unlink(victim, bck, fwd);
  8081ec:	81000317 	ldw	r4,12(r16)
  8081f0:	003f0c06 	br	807e24 <_malloc_r+0x7c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8081f4:	1006d27a 	srli	r3,r2,9
  8081f8:	19000168 	cmpgeui	r4,r3,5
  8081fc:	20005026 	beq	r4,zero,808340 <_malloc_r+0x598>
  808200:	19000568 	cmpgeui	r4,r3,21
  808204:	20008c1e 	bne	r4,zero,808438 <_malloc_r+0x690>
  808208:	19401704 	addi	r5,r3,92
  80820c:	280a90fa 	slli	r5,r5,3
  808210:	190016c4 	addi	r4,r3,91
  808214:	994b883a 	add	r5,r19,r5
  808218:	28c00017 	ldw	r3,0(r5)
  80821c:	297ffe04 	addi	r5,r5,-8
  808220:	28c07426 	beq	r5,r3,8083f4 <_malloc_r+0x64c>
  808224:	01bfff04 	movi	r6,-4
  808228:	19000117 	ldw	r4,4(r3)
  80822c:	2188703a 	and	r4,r4,r6
  808230:	1100022e 	bgeu	r2,r4,80823c <_malloc_r+0x494>
  808234:	18c00217 	ldw	r3,8(r3)
  808238:	28fffb1e 	bne	r5,r3,808228 <_malloc_r+0x480>
  80823c:	19400317 	ldw	r5,12(r3)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  808240:	98800117 	ldw	r2,4(r19)
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808244:	81400315 	stw	r5,12(r16)
  808248:	80c00215 	stw	r3,8(r16)
  80824c:	2c000215 	stw	r16,8(r5)
  808250:	1c000315 	stw	r16,12(r3)
  808254:	003f3d06 	br	807f4c <_malloc_r+0x1a4>
    idx = bin_index(nb);
  808258:	10c00568 	cmpgeui	r3,r2,21
  80825c:	18004a26 	beq	r3,zero,808388 <_malloc_r+0x5e0>
  808260:	10c01568 	cmpgeui	r3,r2,85
  808264:	18007b1e 	bne	r3,zero,808454 <_malloc_r+0x6ac>
  808268:	8804d33a 	srli	r2,r17,12
    bin = bin_at(idx);
  80826c:	11c01bc4 	addi	r7,r2,111
  808270:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808274:	12001b84 	addi	r8,r2,110
  808278:	003f0406 	br	807e8c <_malloc_r+0xe4>
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  80827c:	63000044 	addi	r12,r12,1
  808280:	608000cc 	andi	r2,r12,3
       bin = next_bin(bin);
  808284:	42000204 	addi	r8,r8,8
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  808288:	103f451e 	bne	r2,zero,807fa0 <_malloc_r+0x1f8>
  80828c:	00004506 	br	8083a4 <_malloc_r+0x5fc>
            unlink(victim, bck, fwd);
  808290:	81000217 	ldw	r4,8(r16)
            set_head(victim, nb | PREV_INUSE);
  808294:	89800054 	ori	r6,r17,1
  808298:	81800115 	stw	r6,4(r16)
            unlink(victim, bck, fwd);
  80829c:	20800315 	stw	r2,12(r4)
  8082a0:	11000215 	stw	r4,8(r2)
            remainder = chunk_at_offset(victim, nb);
  8082a4:	8463883a 	add	r17,r16,r17
            link_last_remainder(remainder);
  8082a8:	9c400515 	stw	r17,20(r19)
  8082ac:	9c400415 	stw	r17,16(r19)
            set_head(remainder, remainder_size | PREV_INUSE);
  8082b0:	28800054 	ori	r2,r5,1
  8082b4:	88800115 	stw	r2,4(r17)
            link_last_remainder(remainder);
  8082b8:	8a400315 	stw	r9,12(r17)
  8082bc:	8a400215 	stw	r9,8(r17)
            set_foot(remainder, remainder_size);
  8082c0:	80c7883a 	add	r3,r16,r3
  8082c4:	19400015 	stw	r5,0(r3)
	    MALLOC_UNLOCK;
  8082c8:	9009883a 	mov	r4,r18
  8082cc:	08103880 	call	810388 <__malloc_unlock>
            return chunk2mem(victim);
  8082d0:	80800204 	addi	r2,r16,8
  8082d4:	003f4a06 	br	808000 <_malloc_r+0x258>
    q = bin_at(idx);
  8082d8:	880ed0fa 	srli	r7,r17,3
  8082dc:	88800204 	addi	r2,r17,8
  8082e0:	003ec606 	br	807dfc <_malloc_r+0x54>
      set_inuse_bit_at_offset(victim, victim_size);
  8082e4:	8085883a 	add	r2,r16,r2
  8082e8:	10c00117 	ldw	r3,4(r2)
      MALLOC_UNLOCK;
  8082ec:	9009883a 	mov	r4,r18
      set_inuse_bit_at_offset(victim, victim_size);
  8082f0:	18c00054 	ori	r3,r3,1
  8082f4:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
  8082f8:	08103880 	call	810388 <__malloc_unlock>
      return chunk2mem(victim);
  8082fc:	80800204 	addi	r2,r16,8
  808300:	003f3f06 	br	808000 <_malloc_r+0x258>
      set_head(victim, nb | PREV_INUSE);
  808304:	89000054 	ori	r4,r17,1
  808308:	81000115 	stw	r4,4(r16)
      remainder = chunk_at_offset(victim, nb);
  80830c:	8463883a 	add	r17,r16,r17
      link_last_remainder(remainder);
  808310:	9c400515 	stw	r17,20(r19)
  808314:	9c400415 	stw	r17,16(r19)
      set_head(remainder, remainder_size | PREV_INUSE);
  808318:	19000054 	ori	r4,r3,1
  80831c:	89000115 	stw	r4,4(r17)
      set_foot(remainder, remainder_size);
  808320:	8085883a 	add	r2,r16,r2
      link_last_remainder(remainder);
  808324:	8a400315 	stw	r9,12(r17)
  808328:	8a400215 	stw	r9,8(r17)
      set_foot(remainder, remainder_size);
  80832c:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
  808330:	9009883a 	mov	r4,r18
  808334:	08103880 	call	810388 <__malloc_unlock>
      return chunk2mem(victim);
  808338:	80800204 	addi	r2,r16,8
  80833c:	003f3006 	br	808000 <_malloc_r+0x258>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808340:	1006d1ba 	srli	r3,r2,6
  808344:	19400e44 	addi	r5,r3,57
  808348:	280a90fa 	slli	r5,r5,3
  80834c:	19000e04 	addi	r4,r3,56
  808350:	003fb006 	br	808214 <_malloc_r+0x46c>
      (brk < old_end && old_top != initial_top))
  808354:	84c04626 	beq	r16,r19,808470 <_malloc_r+0x6c8>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  808358:	9c000217 	ldw	r16,8(r19)
  80835c:	85400117 	ldw	r21,4(r16)
  808360:	00bfff04 	movi	r2,-4
  808364:	a8aa703a 	and	r21,r21,r2
  808368:	ac45c83a 	sub	r2,r21,r17
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  80836c:	ac400236 	bltu	r21,r17,808378 <_malloc_r+0x5d0>
  808370:	10c00408 	cmpgei	r3,r2,16
  808374:	183f931e 	bne	r3,zero,8081c4 <_malloc_r+0x41c>
      MALLOC_UNLOCK;
  808378:	9009883a 	mov	r4,r18
  80837c:	08103880 	call	810388 <__malloc_unlock>
      return 0; /* propagate failure */
  808380:	0005883a 	mov	r2,zero
  808384:	003f1e06 	br	808000 <_malloc_r+0x258>
    bin = bin_at(idx);
  808388:	11c01704 	addi	r7,r2,92
  80838c:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808390:	120016c4 	addi	r8,r2,91
  808394:	003ebd06 	br	807e8c <_malloc_r+0xe4>
      } while (first(q) == q);
  808398:	58800217 	ldw	r2,8(r11)
        --startidx;
  80839c:	39ffffc4 	addi	r7,r7,-1
      } while (first(q) == q);
  8083a0:	12c06f1e 	bne	r2,r11,808560 <_malloc_r+0x7b8>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  8083a4:	388000cc 	andi	r2,r7,3
       q = prev_bin(q);
  8083a8:	5afffe04 	addi	r11,r11,-8
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  8083ac:	103ffa1e 	bne	r2,zero,808398 <_malloc_r+0x5f0>
          binblocks &= ~block;
  8083b0:	98c00117 	ldw	r3,4(r19)
  8083b4:	0104303a 	nor	r2,zero,r4
  8083b8:	10c4703a 	and	r2,r2,r3
  8083bc:	98800115 	stw	r2,4(r19)
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  8083c0:	2109883a 	add	r4,r4,r4
  8083c4:	113f2a36 	bltu	r2,r4,808070 <_malloc_r+0x2c8>
  8083c8:	203f2926 	beq	r4,zero,808070 <_malloc_r+0x2c8>
        while ((block & binblocks) == 0)
  8083cc:	2086703a 	and	r3,r4,r2
  8083d0:	1800041e 	bne	r3,zero,8083e4 <_malloc_r+0x63c>
          block <<= 1;
  8083d4:	2109883a 	add	r4,r4,r4
        while ((block & binblocks) == 0)
  8083d8:	2086703a 	and	r3,r4,r2
          idx += BINBLOCKWIDTH;
  8083dc:	63000104 	addi	r12,r12,4
        while ((block & binblocks) == 0)
  8083e0:	183ffc26 	beq	r3,zero,8083d4 <_malloc_r+0x62c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8083e4:	600f883a 	mov	r7,r12
  8083e8:	003ee906 	br	807f90 <_malloc_r+0x1e8>
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  8083ec:	ad400404 	addi	r21,r21,16
  8083f0:	003f3006 	br	8080b4 <_malloc_r+0x30c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8083f4:	2009d0ba 	srai	r4,r4,2
  8083f8:	00800044 	movi	r2,1
  8083fc:	99800117 	ldw	r6,4(r19)
  808400:	1104983a 	sll	r2,r2,r4
  808404:	1184b03a 	or	r2,r2,r6
  808408:	98800115 	stw	r2,4(r19)
  80840c:	003f8d06 	br	808244 <_malloc_r+0x49c>
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  808410:	bd69883a 	add	r20,r23,r21
  808414:	0529c83a 	sub	r20,zero,r20
  808418:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  80841c:	a00b883a 	mov	r5,r20
  808420:	9009883a 	mov	r4,r18
  808424:	080a0f80 	call	80a0f8 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  808428:	10ffffe0 	cmpeqi	r3,r2,-1
  80842c:	183f4326 	beq	r3,zero,80813c <_malloc_r+0x394>
	correction = 0;
  808430:	0029883a 	mov	r20,zero
  808434:	003f4306 	br	808144 <_malloc_r+0x39c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808438:	19001568 	cmpgeui	r4,r3,85
  80843c:	20001f1e 	bne	r4,zero,8084bc <_malloc_r+0x714>
  808440:	1006d33a 	srli	r3,r2,12
  808444:	19401bc4 	addi	r5,r3,111
  808448:	280a90fa 	slli	r5,r5,3
  80844c:	19001b84 	addi	r4,r3,110
  808450:	003f7006 	br	808214 <_malloc_r+0x46c>
    idx = bin_index(nb);
  808454:	10c05568 	cmpgeui	r3,r2,341
  808458:	18001f1e 	bne	r3,zero,8084d8 <_malloc_r+0x730>
  80845c:	8804d3fa 	srli	r2,r17,15
    bin = bin_at(idx);
  808460:	11c01e04 	addi	r7,r2,120
  808464:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  808468:	12001dc4 	addi	r8,r2,119
  80846c:	003e8706 	br	807e8c <_malloc_r+0xe4>
  sbrked_mem += sbrk_size;
  808470:	00802074 	movhi	r2,129
  808474:	10da2f17 	ldw	r3,26812(r2)
  808478:	a8c7883a 	add	r3,r21,r3
  80847c:	10da2f15 	stw	r3,26812(r2)
  if (brk == old_end /* can just add bytes to current top, unless
  808480:	003f1906 	br	8080e8 <_malloc_r+0x340>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  808484:	e083ffcc 	andi	r2,fp,4095
  808488:	103f171e 	bne	r2,zero,8080e8 <_malloc_r+0x340>
    set_head(top, top_size | PREV_INUSE);
  80848c:	9c000217 	ldw	r16,8(r19)
    top_size = sbrk_size + old_top_size;
  808490:	b56b883a 	add	r21,r22,r21
    set_head(top, top_size | PREV_INUSE);
  808494:	ad400054 	ori	r21,r21,1
  808498:	85400115 	stw	r21,4(r16)
  80849c:	003f4206 	br	8081a8 <_malloc_r+0x400>
      sbrk_base = brk;
  8084a0:	d5e00a15 	stw	r23,-32728(gp)
  8084a4:	003f1706 	br	808104 <_malloc_r+0x35c>
  8084a8:	b821883a 	mov	r16,r23
  8084ac:	003f3e06 	br	8081a8 <_malloc_r+0x400>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
  8084b0:	00800044 	movi	r2,1
  8084b4:	b8800115 	stw	r2,4(r23)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  8084b8:	003faf06 	br	808378 <_malloc_r+0x5d0>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8084bc:	19005568 	cmpgeui	r4,r3,341
  8084c0:	2000191e 	bne	r4,zero,808528 <_malloc_r+0x780>
  8084c4:	1006d3fa 	srli	r3,r2,15
  8084c8:	19401e04 	addi	r5,r3,120
  8084cc:	280a90fa 	slli	r5,r5,3
  8084d0:	19001dc4 	addi	r4,r3,119
  8084d4:	003f4f06 	br	808214 <_malloc_r+0x46c>
    idx = bin_index(nb);
  8084d8:	10815568 	cmpgeui	r2,r2,1365
  8084dc:	1000191e 	bne	r2,zero,808544 <_malloc_r+0x79c>
  8084e0:	8804d4ba 	srli	r2,r17,18
    bin = bin_at(idx);
  8084e4:	11c01f44 	addi	r7,r2,125
  8084e8:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  8084ec:	12001f04 	addi	r8,r2,124
  8084f0:	003e6606 	br	807e8c <_malloc_r+0xe4>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
  8084f4:	e73ffe04 	addi	fp,fp,-8
  8084f8:	af2b883a 	add	r21,r21,fp
    top_size = new_brk - brk + correction;
  8084fc:	adebc83a 	sub	r21,r21,r23
	correction = 0;
  808500:	0029883a 	mov	r20,zero
  808504:	003f0f06 	br	808144 <_malloc_r+0x39c>
        fREe(RCALL chunk2mem(old_top));
  808508:	81400204 	addi	r5,r16,8
  80850c:	9009883a 	mov	r4,r18
  808510:	08071500 	call	807150 <_free_r>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  808514:	9c000217 	ldw	r16,8(r19)
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  808518:	00802074 	movhi	r2,129
  80851c:	151a2f17 	ldw	r20,26812(r2)
    remainder_size = long_sub_size_t(chunksize(top), nb);
  808520:	85400117 	ldw	r21,4(r16)
  808524:	003f2006 	br	8081a8 <_malloc_r+0x400>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808528:	18c15568 	cmpgeui	r3,r3,1365
  80852c:	1800091e 	bne	r3,zero,808554 <_malloc_r+0x7ac>
  808530:	1006d4ba 	srli	r3,r2,18
  808534:	19401f44 	addi	r5,r3,125
  808538:	280a90fa 	slli	r5,r5,3
  80853c:	19001f04 	addi	r4,r3,124
  808540:	003f3406 	br	808214 <_malloc_r+0x46c>
  808544:	0100fe04 	movi	r4,1016
  808548:	01c01fc4 	movi	r7,127
    idx = bin_index(nb);
  80854c:	02001f84 	movi	r8,126
  808550:	003e4e06 	br	807e8c <_malloc_r+0xe4>
  808554:	0140fe04 	movi	r5,1016
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  808558:	01001f84 	movi	r4,126
  80855c:	003f2d06 	br	808214 <_malloc_r+0x46c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  808560:	98800117 	ldw	r2,4(r19)
  808564:	003f9606 	br	8083c0 <_malloc_r+0x618>

00808568 <_mbtowc_r>:
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
  return __MBTOWC (r, pwc, s, n, state);
  808568:	00802074 	movhi	r2,129
  80856c:	108d6917 	ldw	r2,13732(r2)
  808570:	1000683a 	jmp	r2

00808574 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
  808574:	deffff04 	addi	sp,sp,-4
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;

  if (pwc == NULL)
  808578:	28000826 	beq	r5,zero,80859c <__ascii_mbtowc+0x28>
    pwc = &dummy;

  if (s == NULL)
  80857c:	30000926 	beq	r6,zero,8085a4 <__ascii_mbtowc+0x30>
    return 0;

  if (n == 0)
  808580:	38000b26 	beq	r7,zero,8085b0 <__ascii_mbtowc+0x3c>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
  808584:	30800003 	ldbu	r2,0(r6)
  808588:	28800015 	stw	r2,0(r5)
  
  if (*t == '\0')
  80858c:	30800003 	ldbu	r2,0(r6)
  808590:	1004c03a 	cmpne	r2,r2,zero
    return 0;

  return 1;
}
  808594:	dec00104 	addi	sp,sp,4
  808598:	f800283a 	ret
    pwc = &dummy;
  80859c:	d80b883a 	mov	r5,sp
  if (s == NULL)
  8085a0:	303ff71e 	bne	r6,zero,808580 <__ascii_mbtowc+0xc>
    return 0;
  8085a4:	0005883a 	mov	r2,zero
}
  8085a8:	dec00104 	addi	sp,sp,4
  8085ac:	f800283a 	ret
    return -2;
  8085b0:	00bfff84 	movi	r2,-2
  8085b4:	003ff706 	br	808594 <__ascii_mbtowc+0x20>

008085b8 <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
  8085b8:	208000cc 	andi	r2,r4,3
  unsigned char d = c;
  8085bc:	280f883a 	mov	r7,r5
  while (UNALIGNED (src))
  8085c0:	10000e26 	beq	r2,zero,8085fc <memchr+0x44>
    {
      if (!length--)
  8085c4:	30bfffc4 	addi	r2,r6,-1
  8085c8:	30001726 	beq	r6,zero,808628 <memchr+0x70>
  8085cc:	29803fcc 	andi	r6,r5,255
  8085d0:	00000606 	br	8085ec <memchr+0x34>
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
  8085d4:	21000044 	addi	r4,r4,1
  while (UNALIGNED (src))
  8085d8:	20c000cc 	andi	r3,r4,3
  8085dc:	18000826 	beq	r3,zero,808600 <memchr+0x48>
      if (!length--)
  8085e0:	10bfffc4 	addi	r2,r2,-1
  8085e4:	10ffffe0 	cmpeqi	r3,r2,-1
  8085e8:	18000f1e 	bne	r3,zero,808628 <memchr+0x70>
      if (*src == d)
  8085ec:	20c00003 	ldbu	r3,0(r4)
  8085f0:	19bff81e 	bne	r3,r6,8085d4 <memchr+0x1c>
  8085f4:	2005883a 	mov	r2,r4
        return (void *) src;
      src++;
    }

  return NULL;
}
  8085f8:	f800283a 	ret
  while (UNALIGNED (src))
  8085fc:	3005883a 	mov	r2,r6
  if (!TOO_SMALL (length))
  808600:	10c00128 	cmpgeui	r3,r2,4
  808604:	18000a1e 	bne	r3,zero,808630 <memchr+0x78>
  while (length--)
  808608:	10001e26 	beq	r2,zero,808684 <memchr+0xcc>
  80860c:	2087883a 	add	r3,r4,r2
  808610:	39803fcc 	andi	r6,r7,255
  while (UNALIGNED (src))
  808614:	2005883a 	mov	r2,r4
      if (*src == d)
  808618:	11000003 	ldbu	r4,0(r2)
  80861c:	21bff626 	beq	r4,r6,8085f8 <memchr+0x40>
      src++;
  808620:	10800044 	addi	r2,r2,1
  while (length--)
  808624:	18bffc1e 	bne	r3,r2,808618 <memchr+0x60>
        return NULL;
  808628:	0005883a 	mov	r2,zero
  80862c:	f800283a 	ret
      mask = d << 8 | d;
  808630:	29403fcc 	andi	r5,r5,255
  808634:	280c923a 	slli	r6,r5,8
          if (DETECTCHAR (*asrc, mask))
  808638:	027fbff4 	movhi	r9,65279
  80863c:	02202074 	movhi	r8,32897
      mask = d << 8 | d;
  808640:	314ab03a 	or	r5,r6,r5
      mask = mask << 16 | mask;
  808644:	280c943a 	slli	r6,r5,16
          if (DETECTCHAR (*asrc, mask))
  808648:	4a7fbfc4 	addi	r9,r9,-257
  80864c:	42202004 	addi	r8,r8,-32640
      mask = mask << 16 | mask;
  808650:	314cb03a 	or	r6,r6,r5
          if (DETECTCHAR (*asrc, mask))
  808654:	20c00017 	ldw	r3,0(r4)
  808658:	30c6f03a 	xor	r3,r6,r3
  80865c:	1a4b883a 	add	r5,r3,r9
  808660:	00c6303a 	nor	r3,zero,r3
  808664:	28c6703a 	and	r3,r5,r3
  808668:	1a06703a 	and	r3,r3,r8
  80866c:	183fe71e 	bne	r3,zero,80860c <memchr+0x54>
          length -= LBLOCKSIZE;
  808670:	10bfff04 	addi	r2,r2,-4
      while (length >= LBLOCKSIZE)
  808674:	10c00128 	cmpgeui	r3,r2,4
          asrc++;
  808678:	21000104 	addi	r4,r4,4
      while (length >= LBLOCKSIZE)
  80867c:	183ff51e 	bne	r3,zero,808654 <memchr+0x9c>
  808680:	003fe106 	br	808608 <memchr+0x50>
  808684:	f800283a 	ret

00808688 <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  808688:	30c00430 	cmpltui	r3,r6,16
{
  80868c:	2005883a 	mov	r2,r4
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  808690:	18002d1e 	bne	r3,zero,808748 <memcpy+0xc0>
  808694:	2906b03a 	or	r3,r5,r4
  808698:	18c000cc 	andi	r3,r3,3
  80869c:	1800351e 	bne	r3,zero,808774 <memcpy+0xec>
  8086a0:	32fffc04 	addi	r11,r6,-16
  8086a4:	5816d13a 	srli	r11,r11,4
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;
  8086a8:	280f883a 	mov	r7,r5
      aligned_dst = (long*)dst;
  8086ac:	2007883a 	mov	r3,r4
  8086b0:	5ac00044 	addi	r11,r11,1
  8086b4:	5816913a 	slli	r11,r11,4
  8086b8:	22d5883a 	add	r10,r4,r11

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
  8086bc:	39000117 	ldw	r4,4(r7)
          *aligned_dst++ = *aligned_src++;
  8086c0:	3a400017 	ldw	r9,0(r7)
          *aligned_dst++ = *aligned_src++;
  8086c4:	3a000217 	ldw	r8,8(r7)
          *aligned_dst++ = *aligned_src++;
  8086c8:	19000115 	stw	r4,4(r3)
          *aligned_dst++ = *aligned_src++;
  8086cc:	39000317 	ldw	r4,12(r7)
          *aligned_dst++ = *aligned_src++;
  8086d0:	1a400015 	stw	r9,0(r3)
          *aligned_dst++ = *aligned_src++;
  8086d4:	1a000215 	stw	r8,8(r3)
          *aligned_dst++ = *aligned_src++;
  8086d8:	19000315 	stw	r4,12(r3)
  8086dc:	18c00404 	addi	r3,r3,16
  8086e0:	39c00404 	addi	r7,r7,16
      while (len0 >= BIGBLOCKSIZE)
  8086e4:	50fff51e 	bne	r10,r3,8086bc <memcpy+0x34>
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
  8086e8:	3100030c 	andi	r4,r6,12
          *aligned_dst++ = *aligned_src++;
  8086ec:	2acb883a 	add	r5,r5,r11
          len0 -= BIGBLOCKSIZE;
  8086f0:	320003cc 	andi	r8,r6,15
      while (len0 >= LITTLEBLOCKSIZE)
  8086f4:	20002226 	beq	r4,zero,808780 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
  8086f8:	280f883a 	mov	r7,r5
      while (len0 >= LITTLEBLOCKSIZE)
  8086fc:	1813883a 	mov	r9,r3
        {
          *aligned_dst++ = *aligned_src++;
  808700:	39c00104 	addi	r7,r7,4
  808704:	3abfff17 	ldw	r10,-4(r7)
  808708:	41c9c83a 	sub	r4,r8,r7
      while (len0 >= LITTLEBLOCKSIZE)
  80870c:	2909883a 	add	r4,r5,r4
          *aligned_dst++ = *aligned_src++;
  808710:	4a800015 	stw	r10,0(r9)
      while (len0 >= LITTLEBLOCKSIZE)
  808714:	21000128 	cmpgeui	r4,r4,4
          *aligned_dst++ = *aligned_src++;
  808718:	4a400104 	addi	r9,r9,4
      while (len0 >= LITTLEBLOCKSIZE)
  80871c:	203ff81e 	bne	r4,zero,808700 <memcpy+0x78>
  808720:	413fff04 	addi	r4,r8,-4
  808724:	2008d0ba 	srli	r4,r4,2
          len0 -= LITTLEBLOCKSIZE;
  808728:	318000cc 	andi	r6,r6,3
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
  80872c:	31ffffc4 	addi	r7,r6,-1
  808730:	21000044 	addi	r4,r4,1
  808734:	200890ba 	slli	r4,r4,2
          *aligned_dst++ = *aligned_src++;
  808738:	1907883a 	add	r3,r3,r4
  80873c:	290b883a 	add	r5,r5,r4
  while (len0--)
  808740:	3000041e 	bne	r6,zero,808754 <memcpy+0xcc>
  808744:	f800283a 	ret
  char *dst = dst0;
  808748:	2007883a 	mov	r3,r4
  while (len0--)
  80874c:	31ffffc4 	addi	r7,r6,-1
  808750:	303ffc26 	beq	r6,zero,808744 <memcpy+0xbc>
  808754:	39c00044 	addi	r7,r7,1
  808758:	19cf883a 	add	r7,r3,r7
    *dst++ = *src++;
  80875c:	29800003 	ldbu	r6,0(r5)
  808760:	18c00044 	addi	r3,r3,1
  808764:	29400044 	addi	r5,r5,1
  808768:	19bfffc5 	stb	r6,-1(r3)
  while (len0--)
  80876c:	38fffb1e 	bne	r7,r3,80875c <memcpy+0xd4>
  808770:	f800283a 	ret
  808774:	31ffffc4 	addi	r7,r6,-1
  char *dst = dst0;
  808778:	2007883a 	mov	r3,r4
  80877c:	003ff506 	br	808754 <memcpy+0xcc>
      while (len0 >= LITTLEBLOCKSIZE)
  808780:	400d883a 	mov	r6,r8
  808784:	003ff106 	br	80874c <memcpy+0xc4>

00808788 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
  808788:	2005883a 	mov	r2,r4
  char *dst = dst_void;
  const char *src = src_void;
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
  80878c:	29000a2e 	bgeu	r5,r4,8087b8 <memmove+0x30>
  808790:	2989883a 	add	r4,r5,r6
  808794:	1100082e 	bgeu	r2,r4,8087b8 <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
  808798:	1187883a 	add	r3,r2,r6
      while (length--)
  80879c:	30003e26 	beq	r6,zero,808898 <memmove+0x110>
	{
	  *--dst = *--src;
  8087a0:	217fffc3 	ldbu	r5,-1(r4)
  8087a4:	18ffffc4 	addi	r3,r3,-1
  8087a8:	213fffc4 	addi	r4,r4,-1
  8087ac:	19400005 	stb	r5,0(r3)
      while (length--)
  8087b0:	10fffb1e 	bne	r2,r3,8087a0 <memmove+0x18>
  8087b4:	f800283a 	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  8087b8:	30c00430 	cmpltui	r3,r6,16
  8087bc:	18000b26 	beq	r3,zero,8087ec <memmove+0x64>
  8087c0:	1007883a 	mov	r3,r2
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
  8087c4:	31ffffc4 	addi	r7,r6,-1
  8087c8:	30003726 	beq	r6,zero,8088a8 <memmove+0x120>
  8087cc:	39c00044 	addi	r7,r7,1
  8087d0:	29cf883a 	add	r7,r5,r7
        {
          *dst++ = *src++;
  8087d4:	29800003 	ldbu	r6,0(r5)
  8087d8:	29400044 	addi	r5,r5,1
  8087dc:	18c00044 	addi	r3,r3,1
  8087e0:	19bfffc5 	stb	r6,-1(r3)
      while (length--)
  8087e4:	29fffb1e 	bne	r5,r7,8087d4 <memmove+0x4c>
  8087e8:	f800283a 	ret
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  8087ec:	2886b03a 	or	r3,r5,r2
  8087f0:	18c000cc 	andi	r3,r3,3
  8087f4:	1800291e 	bne	r3,zero,80889c <memmove+0x114>
  8087f8:	327ffc04 	addi	r9,r6,-16
  8087fc:	4812d13a 	srli	r9,r9,4
  808800:	280f883a 	mov	r7,r5
  808804:	1007883a 	mov	r3,r2
  808808:	4a400044 	addi	r9,r9,1
  80880c:	4812913a 	slli	r9,r9,4
  808810:	1251883a 	add	r8,r2,r9
              *aligned_dst++ = *aligned_src++;
  808814:	39000017 	ldw	r4,0(r7)
  808818:	39c00404 	addi	r7,r7,16
  80881c:	18c00404 	addi	r3,r3,16
  808820:	193ffc15 	stw	r4,-16(r3)
              *aligned_dst++ = *aligned_src++;
  808824:	393ffd17 	ldw	r4,-12(r7)
  808828:	193ffd15 	stw	r4,-12(r3)
              *aligned_dst++ = *aligned_src++;
  80882c:	393ffe17 	ldw	r4,-8(r7)
  808830:	193ffe15 	stw	r4,-8(r3)
              *aligned_dst++ = *aligned_src++;
  808834:	393fff17 	ldw	r4,-4(r7)
  808838:	193fff15 	stw	r4,-4(r3)
          while (length >= BIGBLOCKSIZE)
  80883c:	40fff51e 	bne	r8,r3,808814 <memmove+0x8c>
          while (length >= LITTLEBLOCKSIZE)
  808840:	3100030c 	andi	r4,r6,12
              *aligned_dst++ = *aligned_src++;
  808844:	2a4b883a 	add	r5,r5,r9
              length -= BIGBLOCKSIZE;
  808848:	320003cc 	andi	r8,r6,15
          while (length >= LITTLEBLOCKSIZE)
  80884c:	20001726 	beq	r4,zero,8088ac <memmove+0x124>
              *aligned_dst++ = *aligned_src++;
  808850:	2813883a 	mov	r9,r5
          while (length >= LITTLEBLOCKSIZE)
  808854:	180f883a 	mov	r7,r3
              *aligned_dst++ = *aligned_src++;
  808858:	4a800017 	ldw	r10,0(r9)
  80885c:	39c00104 	addi	r7,r7,4
  808860:	41c9c83a 	sub	r4,r8,r7
          while (length >= LITTLEBLOCKSIZE)
  808864:	1909883a 	add	r4,r3,r4
  808868:	21000128 	cmpgeui	r4,r4,4
              *aligned_dst++ = *aligned_src++;
  80886c:	3abfff15 	stw	r10,-4(r7)
  808870:	4a400104 	addi	r9,r9,4
          while (length >= LITTLEBLOCKSIZE)
  808874:	203ff81e 	bne	r4,zero,808858 <memmove+0xd0>
  808878:	413fff04 	addi	r4,r8,-4
  80887c:	2008d0ba 	srli	r4,r4,2
              length -= LITTLEBLOCKSIZE;
  808880:	318000cc 	andi	r6,r6,3
  808884:	21000044 	addi	r4,r4,1
  808888:	200890ba 	slli	r4,r4,2
              *aligned_dst++ = *aligned_src++;
  80888c:	1907883a 	add	r3,r3,r4
  808890:	290b883a 	add	r5,r5,r4
  808894:	003fcb06 	br	8087c4 <memmove+0x3c>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  808898:	f800283a 	ret
      while (length--)
  80889c:	31ffffc4 	addi	r7,r6,-1
  8088a0:	1007883a 	mov	r3,r2
  8088a4:	003fc906 	br	8087cc <memmove+0x44>
  8088a8:	f800283a 	ret
          while (length >= LITTLEBLOCKSIZE)
  8088ac:	400d883a 	mov	r6,r8
  8088b0:	003fc406 	br	8087c4 <memmove+0x3c>

008088b4 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
  8088b4:	20c000cc 	andi	r3,r4,3
{
  8088b8:	2005883a 	mov	r2,r4
  while (UNALIGNED (s))
  8088bc:	18003626 	beq	r3,zero,808998 <memset+0xe4>
    {
      if (n--)
  8088c0:	31ffffc4 	addi	r7,r6,-1
  8088c4:	30003326 	beq	r6,zero,808994 <memset+0xe0>
        *s++ = (char) c;
  8088c8:	2811883a 	mov	r8,r5
  char *s = (char *) m;
  8088cc:	2007883a 	mov	r3,r4
  8088d0:	00000306 	br	8088e0 <memset+0x2c>
      if (n--)
  8088d4:	39ffffc4 	addi	r7,r7,-1
  8088d8:	39bfffe0 	cmpeqi	r6,r7,-1
  8088dc:	30002d1e 	bne	r6,zero,808994 <memset+0xe0>
        *s++ = (char) c;
  8088e0:	18c00044 	addi	r3,r3,1
  while (UNALIGNED (s))
  8088e4:	198000cc 	andi	r6,r3,3
        *s++ = (char) c;
  8088e8:	1a3fffc5 	stb	r8,-1(r3)
  while (UNALIGNED (s))
  8088ec:	303ff91e 	bne	r6,zero,8088d4 <memset+0x20>
      else
        return m;
    }

  if (!TOO_SMALL (n))
  8088f0:	39000130 	cmpltui	r4,r7,4
  8088f4:	2000221e 	bne	r4,zero,808980 <memset+0xcc>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
  8088f8:	29003fcc 	andi	r4,r5,255
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
  8088fc:	200c923a 	slli	r6,r4,8
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
  808900:	3a000430 	cmpltui	r8,r7,16
      buffer = (d << 8) | d;
  808904:	3108b03a 	or	r4,r6,r4
      buffer |= (buffer << 16);
  808908:	200c943a 	slli	r6,r4,16
  80890c:	310cb03a 	or	r6,r6,r4
      while (n >= LBLOCKSIZE*4)
  808910:	40000e1e 	bne	r8,zero,80894c <memset+0x98>
  808914:	393ffc04 	addi	r4,r7,-16
  808918:	2008d13a 	srli	r4,r4,4
  80891c:	21000044 	addi	r4,r4,1
  808920:	2008913a 	slli	r4,r4,4
  808924:	1909883a 	add	r4,r3,r4
        {
          *aligned_addr++ = buffer;
  808928:	19800015 	stw	r6,0(r3)
          *aligned_addr++ = buffer;
  80892c:	19800115 	stw	r6,4(r3)
          *aligned_addr++ = buffer;
  808930:	19800215 	stw	r6,8(r3)
          *aligned_addr++ = buffer;
  808934:	19800315 	stw	r6,12(r3)
  808938:	18c00404 	addi	r3,r3,16
      while (n >= LBLOCKSIZE*4)
  80893c:	20fffa1e 	bne	r4,r3,808928 <memset+0x74>
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
  808940:	3900030c 	andi	r4,r7,12
          n -= 4*LBLOCKSIZE;
  808944:	39c003cc 	andi	r7,r7,15
      while (n >= LBLOCKSIZE)
  808948:	20000d26 	beq	r4,zero,808980 <memset+0xcc>
      while (n >= LBLOCKSIZE*4)
  80894c:	1811883a 	mov	r8,r3
        {
          *aligned_addr++ = buffer;
  808950:	42000104 	addi	r8,r8,4
  808954:	3a09c83a 	sub	r4,r7,r8
      while (n >= LBLOCKSIZE)
  808958:	1909883a 	add	r4,r3,r4
  80895c:	21000128 	cmpgeui	r4,r4,4
          *aligned_addr++ = buffer;
  808960:	41bfff15 	stw	r6,-4(r8)
      while (n >= LBLOCKSIZE)
  808964:	203ffa1e 	bne	r4,zero,808950 <memset+0x9c>
          *aligned_addr++ = buffer;
  808968:	393fff04 	addi	r4,r7,-4
  80896c:	2008d0ba 	srli	r4,r4,2
          n -= LBLOCKSIZE;
  808970:	39c000cc 	andi	r7,r7,3
          *aligned_addr++ = buffer;
  808974:	21000044 	addi	r4,r4,1
  808978:	200890ba 	slli	r4,r4,2
  80897c:	1907883a 	add	r3,r3,r4
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
  808980:	38000426 	beq	r7,zero,808994 <memset+0xe0>
  808984:	19cf883a 	add	r7,r3,r7
    *s++ = (char) c;
  808988:	18c00044 	addi	r3,r3,1
  80898c:	197fffc5 	stb	r5,-1(r3)
  while (n--)
  808990:	38fffd1e 	bne	r7,r3,808988 <memset+0xd4>

  return m;
}
  808994:	f800283a 	ret
  char *s = (char *) m;
  808998:	2007883a 	mov	r3,r4
  while (UNALIGNED (s))
  80899c:	300f883a 	mov	r7,r6
  8089a0:	003fd306 	br	8088f0 <memset+0x3c>

008089a4 <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8089a4:	20801317 	ldw	r2,76(r4)
{
  8089a8:	defffc04 	addi	sp,sp,-16
  8089ac:	dc400115 	stw	r17,4(sp)
  8089b0:	dc000015 	stw	r16,0(sp)
  8089b4:	dfc00315 	stw	ra,12(sp)
  8089b8:	dc800215 	stw	r18,8(sp)
  8089bc:	2021883a 	mov	r16,r4
  8089c0:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8089c4:	10000e26 	beq	r2,zero,808a00 <_Balloc+0x5c>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8089c8:	880690ba 	slli	r3,r17,2
  8089cc:	10c7883a 	add	r3,r2,r3
  8089d0:	18800017 	ldw	r2,0(r3)
  8089d4:	10001126 	beq	r2,zero,808a1c <_Balloc+0x78>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8089d8:	11000017 	ldw	r4,0(r2)
  8089dc:	19000015 	stw	r4,0(r3)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
  8089e0:	10000415 	stw	zero,16(r2)
  8089e4:	10000315 	stw	zero,12(r2)
  return rv;
}
  8089e8:	dfc00317 	ldw	ra,12(sp)
  8089ec:	dc800217 	ldw	r18,8(sp)
  8089f0:	dc400117 	ldw	r17,4(sp)
  8089f4:	dc000017 	ldw	r16,0(sp)
  8089f8:	dec00404 	addi	sp,sp,16
  8089fc:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808a00:	01800844 	movi	r6,33
  808a04:	01400104 	movi	r5,4
  808a08:	080b9c40 	call	80b9c4 <_calloc_r>
  808a0c:	80801315 	stw	r2,76(r16)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808a10:	103fed1e 	bne	r2,zero,8089c8 <_Balloc+0x24>
	  return NULL;
  808a14:	0005883a 	mov	r2,zero
  808a18:	003ff306 	br	8089e8 <_Balloc+0x44>
      x = 1 << k;
  808a1c:	04800044 	movi	r18,1
  808a20:	9464983a 	sll	r18,r18,r17
      rv = (_Bigint *) _calloc_r (ptr,
  808a24:	01400044 	movi	r5,1
  808a28:	8009883a 	mov	r4,r16
				  sizeof (_Bigint) +
  808a2c:	91800144 	addi	r6,r18,5
      rv = (_Bigint *) _calloc_r (ptr,
  808a30:	300c90ba 	slli	r6,r6,2
  808a34:	080b9c40 	call	80b9c4 <_calloc_r>
      if (rv == NULL) return NULL;
  808a38:	103ff626 	beq	r2,zero,808a14 <_Balloc+0x70>
      rv->_k = k;
  808a3c:	14400115 	stw	r17,4(r2)
      rv->_maxwds = x;
  808a40:	14800215 	stw	r18,8(r2)
  808a44:	003fe606 	br	8089e0 <_Balloc+0x3c>

00808a48 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
  808a48:	28000726 	beq	r5,zero,808a68 <_Bfree+0x20>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808a4c:	28c00117 	ldw	r3,4(r5)
  808a50:	20801317 	ldw	r2,76(r4)
  808a54:	180690ba 	slli	r3,r3,2
  808a58:	10c5883a 	add	r2,r2,r3
  808a5c:	10c00017 	ldw	r3,0(r2)
  808a60:	28c00015 	stw	r3,0(r5)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808a64:	11400015 	stw	r5,0(r2)
    }
}
  808a68:	f800283a 	ret

00808a6c <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
  808a6c:	defff704 	addi	sp,sp,-36
  808a70:	dc800215 	stw	r18,8(sp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  808a74:	2c800417 	ldw	r18,16(r5)
{
  808a78:	ddc00715 	stw	r23,28(sp)
  808a7c:	dd800615 	stw	r22,24(sp)
  808a80:	dd400515 	stw	r21,20(sp)
  808a84:	dd000415 	stw	r20,16(sp)
  808a88:	dcc00315 	stw	r19,12(sp)
  808a8c:	dc400115 	stw	r17,4(sp)
  808a90:	dfc00815 	stw	ra,32(sp)
  808a94:	dc000015 	stw	r16,0(sp)
  808a98:	2827883a 	mov	r19,r5
  808a9c:	2029883a 	mov	r20,r4
  808aa0:	302b883a 	mov	r21,r6
  808aa4:	3823883a 	mov	r17,r7
  x = b->_x;
  808aa8:	2d800504 	addi	r22,r5,20
  i = 0;
  808aac:	002f883a 	mov	r23,zero
  do
    {
#ifdef Pack_32
      xi = *x;
  808ab0:	b4000017 	ldw	r16,0(r22)
      y = (xi & 0xffff) * m + a;
  808ab4:	a80b883a 	mov	r5,r21
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
  808ab8:	b5800104 	addi	r22,r22,4
      y = (xi & 0xffff) * m + a;
  808abc:	813fffcc 	andi	r4,r16,65535
  808ac0:	0802af80 	call	802af8 <__mulsi3>
      z = (xi >> 16) * m + (y >> 16);
  808ac4:	8008d43a 	srli	r4,r16,16
  808ac8:	a80b883a 	mov	r5,r21
      y = (xi & 0xffff) * m + a;
  808acc:	1461883a 	add	r16,r2,r17
      z = (xi >> 16) * m + (y >> 16);
  808ad0:	0802af80 	call	802af8 <__mulsi3>
  808ad4:	800ed43a 	srli	r7,r16,16
      *x++ = (z << 16) + (y & 0xffff);
  808ad8:	843fffcc 	andi	r16,r16,65535
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
  808adc:	bdc00044 	addi	r23,r23,1
      z = (xi >> 16) * m + (y >> 16);
  808ae0:	11c5883a 	add	r2,r2,r7
      *x++ = (z << 16) + (y & 0xffff);
  808ae4:	1006943a 	slli	r3,r2,16
      a = (int) (z >> 16);
  808ae8:	1022d43a 	srli	r17,r2,16
      *x++ = (z << 16) + (y & 0xffff);
  808aec:	1c21883a 	add	r16,r3,r16
  808af0:	b43fff15 	stw	r16,-4(r22)
  while (++i < wds);
  808af4:	bcbfee16 	blt	r23,r18,808ab0 <__multadd+0x44>
  if (a)
  808af8:	88000826 	beq	r17,zero,808b1c <__multadd+0xb0>
    {
      if (wds >= b->_maxwds)
  808afc:	98800217 	ldw	r2,8(r19)
  808b00:	9080120e 	bge	r18,r2,808b4c <__multadd+0xe0>
	  b1 = eBalloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
  808b04:	90800144 	addi	r2,r18,5
  808b08:	100490ba 	slli	r2,r2,2
  808b0c:	94800044 	addi	r18,r18,1
  808b10:	9885883a 	add	r2,r19,r2
  808b14:	14400015 	stw	r17,0(r2)
      b->_wds = wds;
  808b18:	9c800415 	stw	r18,16(r19)
    }
  return b;
}
  808b1c:	9805883a 	mov	r2,r19
  808b20:	dfc00817 	ldw	ra,32(sp)
  808b24:	ddc00717 	ldw	r23,28(sp)
  808b28:	dd800617 	ldw	r22,24(sp)
  808b2c:	dd400517 	ldw	r21,20(sp)
  808b30:	dd000417 	ldw	r20,16(sp)
  808b34:	dcc00317 	ldw	r19,12(sp)
  808b38:	dc800217 	ldw	r18,8(sp)
  808b3c:	dc400117 	ldw	r17,4(sp)
  808b40:	dc000017 	ldw	r16,0(sp)
  808b44:	dec00904 	addi	sp,sp,36
  808b48:	f800283a 	ret
	  b1 = eBalloc (ptr, b->_k + 1);
  808b4c:	99400117 	ldw	r5,4(r19)
  808b50:	a009883a 	mov	r4,r20
  808b54:	29400044 	addi	r5,r5,1
  808b58:	08089a40 	call	8089a4 <_Balloc>
  808b5c:	1021883a 	mov	r16,r2
  808b60:	10001226 	beq	r2,zero,808bac <__multadd+0x140>
	  Bcopy (b1, b);
  808b64:	99800417 	ldw	r6,16(r19)
  808b68:	99400304 	addi	r5,r19,12
  808b6c:	11000304 	addi	r4,r2,12
  808b70:	31800084 	addi	r6,r6,2
  808b74:	300c90ba 	slli	r6,r6,2
  808b78:	08086880 	call	808688 <memcpy>
  if (v)
  808b7c:	98000926 	beq	r19,zero,808ba4 <__multadd+0x138>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808b80:	98c00117 	ldw	r3,4(r19)
  808b84:	a0801317 	ldw	r2,76(r20)
  808b88:	180690ba 	slli	r3,r3,2
  808b8c:	10c5883a 	add	r2,r2,r3
  808b90:	10c00017 	ldw	r3,0(r2)
  808b94:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808b98:	14c00015 	stw	r19,0(r2)
  808b9c:	8027883a 	mov	r19,r16
  808ba0:	003fd806 	br	808b04 <__multadd+0x98>
  808ba4:	8027883a 	mov	r19,r16
  808ba8:	003fd606 	br	808b04 <__multadd+0x98>
	  b1 = eBalloc (ptr, b->_k + 1);
  808bac:	01c02074 	movhi	r7,129
  808bb0:	01002074 	movhi	r4,129
  808bb4:	39cadd04 	addi	r7,r7,11124
  808bb8:	000d883a 	mov	r6,zero
  808bbc:	01402d44 	movi	r5,181
  808bc0:	210b0004 	addi	r4,r4,11264
  808bc4:	080b9500 	call	80b950 <__assert_func>

00808bc8 <__s2b>:
s2b (struct _reent * ptr,
	const char *s,
	int nd0,
	int nd,
	__ULong y9)
{
  808bc8:	defff904 	addi	sp,sp,-28
  808bcc:	dc800215 	stw	r18,8(sp)
  808bd0:	dc000015 	stw	r16,0(sp)
  808bd4:	2025883a 	mov	r18,r4
  808bd8:	2821883a 	mov	r16,r5
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  808bdc:	39000204 	addi	r4,r7,8
  808be0:	01400244 	movi	r5,9
{
  808be4:	dcc00315 	stw	r19,12(sp)
  808be8:	dc400115 	stw	r17,4(sp)
  808bec:	dfc00615 	stw	ra,24(sp)
  808bf0:	3823883a 	mov	r17,r7
  808bf4:	dd400515 	stw	r21,20(sp)
  808bf8:	dd000415 	stw	r20,16(sp)
  808bfc:	3027883a 	mov	r19,r6
  x = (nd + 8) / 9;
  808c00:	080d3580 	call	80d358 <__divsi3>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808c04:	88c00290 	cmplti	r3,r17,10
  808c08:	1800341e 	bne	r3,zero,808cdc <__s2b+0x114>
  808c0c:	00c00044 	movi	r3,1
  808c10:	000b883a 	mov	r5,zero
  808c14:	18c7883a 	add	r3,r3,r3
  808c18:	29400044 	addi	r5,r5,1
  808c1c:	18bffd16 	blt	r3,r2,808c14 <__s2b+0x4c>
#ifdef Pack_32
  b = eBalloc (ptr, k);
  808c20:	9009883a 	mov	r4,r18
  808c24:	08089a40 	call	8089a4 <_Balloc>
  808c28:	100b883a 	mov	r5,r2
  808c2c:	10002d26 	beq	r2,zero,808ce4 <__s2b+0x11c>
  b->_x[0] = y9;
  808c30:	d8800717 	ldw	r2,28(sp)
  808c34:	28800515 	stw	r2,20(r5)
  b->_wds = 1;
  808c38:	00800044 	movi	r2,1
  808c3c:	28800415 	stw	r2,16(r5)
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
  808c40:	98800290 	cmplti	r2,r19,10
  808c44:	1000221e 	bne	r2,zero,808cd0 <__s2b+0x108>
    {
      s += 9;
  808c48:	85400244 	addi	r21,r16,9
  808c4c:	a829883a 	mov	r20,r21
  808c50:	84e1883a 	add	r16,r16,r19
      do
	b = multadd (ptr, b, 10, *s++ - '0');
  808c54:	a1c00007 	ldb	r7,0(r20)
  808c58:	01800284 	movi	r6,10
  808c5c:	9009883a 	mov	r4,r18
  808c60:	39fff404 	addi	r7,r7,-48
  808c64:	0808a6c0 	call	808a6c <__multadd>
  808c68:	a5000044 	addi	r20,r20,1
  808c6c:	100b883a 	mov	r5,r2
      while (++i < nd0);
  808c70:	a43ff81e 	bne	r20,r16,808c54 <__s2b+0x8c>
      s++;
  808c74:	9c3ffe04 	addi	r16,r19,-8
  808c78:	ac21883a 	add	r16,r21,r16
    }
  else
    s += 10;
  for (; i < nd; i++)
  808c7c:	9c400a0e 	bge	r19,r17,808ca8 <__s2b+0xe0>
  808c80:	8ce3c83a 	sub	r17,r17,r19
  808c84:	8463883a 	add	r17,r16,r17
    b = multadd (ptr, b, 10, *s++ - '0');
  808c88:	81c00007 	ldb	r7,0(r16)
  808c8c:	01800284 	movi	r6,10
  808c90:	9009883a 	mov	r4,r18
  808c94:	39fff404 	addi	r7,r7,-48
  808c98:	0808a6c0 	call	808a6c <__multadd>
  808c9c:	84000044 	addi	r16,r16,1
  808ca0:	100b883a 	mov	r5,r2
  for (; i < nd; i++)
  808ca4:	8c3ff81e 	bne	r17,r16,808c88 <__s2b+0xc0>
  return b;
}
  808ca8:	2805883a 	mov	r2,r5
  808cac:	dfc00617 	ldw	ra,24(sp)
  808cb0:	dd400517 	ldw	r21,20(sp)
  808cb4:	dd000417 	ldw	r20,16(sp)
  808cb8:	dcc00317 	ldw	r19,12(sp)
  808cbc:	dc800217 	ldw	r18,8(sp)
  808cc0:	dc400117 	ldw	r17,4(sp)
  808cc4:	dc000017 	ldw	r16,0(sp)
  808cc8:	dec00704 	addi	sp,sp,28
  808ccc:	f800283a 	ret
    s += 10;
  808cd0:	84000284 	addi	r16,r16,10
  i = 9;
  808cd4:	04c00244 	movi	r19,9
  808cd8:	003fe806 	br	808c7c <__s2b+0xb4>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  808cdc:	000b883a 	mov	r5,zero
  808ce0:	003fcf06 	br	808c20 <__s2b+0x58>
  b = eBalloc (ptr, k);
  808ce4:	01c02074 	movhi	r7,129
  808ce8:	01002074 	movhi	r4,129
  808cec:	39cadd04 	addi	r7,r7,11124
  808cf0:	000d883a 	mov	r6,zero
  808cf4:	01403384 	movi	r5,206
  808cf8:	210b0004 	addi	r4,r4,11264
  808cfc:	080b9500 	call	80b950 <__assert_func>

00808d00 <__hi0bits>:
int
hi0bits (register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
  808d00:	20bfffec 	andhi	r2,r4,65535
  808d04:	1000131e 	bne	r2,zero,808d54 <__hi0bits+0x54>
    {
      k = 16;
      x <<= 16;
  808d08:	2008943a 	slli	r4,r4,16
      k = 16;
  808d0c:	00800404 	movi	r2,16
    }
  if (!(x & 0xff000000))
  808d10:	20ffc02c 	andhi	r3,r4,65280
  808d14:	1800021e 	bne	r3,zero,808d20 <__hi0bits+0x20>
    {
      k += 8;
      x <<= 8;
  808d18:	2008923a 	slli	r4,r4,8
      k += 8;
  808d1c:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf0000000))
  808d20:	20fc002c 	andhi	r3,r4,61440
  808d24:	1800021e 	bne	r3,zero,808d30 <__hi0bits+0x30>
    {
      k += 4;
      x <<= 4;
  808d28:	2008913a 	slli	r4,r4,4
      k += 4;
  808d2c:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0xc0000000))
  808d30:	20f0002c 	andhi	r3,r4,49152
  808d34:	1800021e 	bne	r3,zero,808d40 <__hi0bits+0x40>
    {
      k += 2;
      x <<= 2;
  808d38:	200890ba 	slli	r4,r4,2
      k += 2;
  808d3c:	10800084 	addi	r2,r2,2
    }
  if (!(x & 0x80000000))
  808d40:	20000316 	blt	r4,zero,808d50 <__hi0bits+0x50>
    {
      k++;
      if (!(x & 0x40000000))
  808d44:	2110002c 	andhi	r4,r4,16384
      k++;
  808d48:	10800044 	addi	r2,r2,1
      if (!(x & 0x40000000))
  808d4c:	20000326 	beq	r4,zero,808d5c <__hi0bits+0x5c>
	return 32;
    }
  return k;
}
  808d50:	f800283a 	ret
  register int k = 0;
  808d54:	0005883a 	mov	r2,zero
  808d58:	003fed06 	br	808d10 <__hi0bits+0x10>
	return 32;
  808d5c:	00800804 	movi	r2,32
}
  808d60:	f800283a 	ret

00808d64 <__lo0bits>:

int
lo0bits (__ULong *y)
{
  register int k;
  register __ULong x = *y;
  808d64:	20c00017 	ldw	r3,0(r4)

  if (x & 7)
  808d68:	188001cc 	andi	r2,r3,7
  808d6c:	10000826 	beq	r2,zero,808d90 <__lo0bits+0x2c>
    {
      if (x & 1)
  808d70:	1880004c 	andi	r2,r3,1
  808d74:	10001f1e 	bne	r2,zero,808df4 <__lo0bits+0x90>
	return 0;
      if (x & 2)
  808d78:	1880008c 	andi	r2,r3,2
  808d7c:	10002126 	beq	r2,zero,808e04 <__lo0bits+0xa0>
	{
	  *y = x >> 1;
  808d80:	1806d07a 	srli	r3,r3,1
	  return 1;
  808d84:	00800044 	movi	r2,1
	  *y = x >> 1;
  808d88:	20c00015 	stw	r3,0(r4)
	  return 1;
  808d8c:	f800283a 	ret
	}
      *y = x >> 2;
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
  808d90:	18bfffcc 	andi	r2,r3,65535
  808d94:	10001426 	beq	r2,zero,808de8 <__lo0bits+0x84>
  k = 0;
  808d98:	0005883a 	mov	r2,zero
    {
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
  808d9c:	19403fcc 	andi	r5,r3,255
  808da0:	2800021e 	bne	r5,zero,808dac <__lo0bits+0x48>
    {
      k += 8;
      x >>= 8;
  808da4:	1806d23a 	srli	r3,r3,8
      k += 8;
  808da8:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf))
  808dac:	194003cc 	andi	r5,r3,15
  808db0:	2800021e 	bne	r5,zero,808dbc <__lo0bits+0x58>
    {
      k += 4;
      x >>= 4;
  808db4:	1806d13a 	srli	r3,r3,4
      k += 4;
  808db8:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0x3))
  808dbc:	194000cc 	andi	r5,r3,3
  808dc0:	2800021e 	bne	r5,zero,808dcc <__lo0bits+0x68>
    {
      k += 2;
      x >>= 2;
  808dc4:	1806d0ba 	srli	r3,r3,2
      k += 2;
  808dc8:	10800084 	addi	r2,r2,2
    }
  if (!(x & 1))
  808dcc:	1940004c 	andi	r5,r3,1
  808dd0:	2800031e 	bne	r5,zero,808de0 <__lo0bits+0x7c>
    {
      k++;
      x >>= 1;
  808dd4:	1806d07a 	srli	r3,r3,1
      k++;
  808dd8:	10800044 	addi	r2,r2,1
      if (!x & 1)
  808ddc:	18000726 	beq	r3,zero,808dfc <__lo0bits+0x98>
	return 32;
    }
  *y = x;
  808de0:	20c00015 	stw	r3,0(r4)
  return k;
  808de4:	f800283a 	ret
      x >>= 16;
  808de8:	1806d43a 	srli	r3,r3,16
      k = 16;
  808dec:	00800404 	movi	r2,16
  808df0:	003fea06 	br	808d9c <__lo0bits+0x38>
	return 0;
  808df4:	0005883a 	mov	r2,zero
  808df8:	f800283a 	ret
	return 32;
  808dfc:	00800804 	movi	r2,32
}
  808e00:	f800283a 	ret
      *y = x >> 2;
  808e04:	1806d0ba 	srli	r3,r3,2
      return 2;
  808e08:	00800084 	movi	r2,2
      *y = x >> 2;
  808e0c:	20c00015 	stw	r3,0(r4)
      return 2;
  808e10:	f800283a 	ret

00808e14 <__i2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808e14:	20c01317 	ldw	r3,76(r4)

_Bigint *
i2b (struct _reent * ptr, int i)
{
  808e18:	defffd04 	addi	sp,sp,-12
  808e1c:	dc400115 	stw	r17,4(sp)
  808e20:	dc000015 	stw	r16,0(sp)
  808e24:	dfc00215 	stw	ra,8(sp)
  808e28:	2021883a 	mov	r16,r4
  808e2c:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808e30:	18000d26 	beq	r3,zero,808e68 <__i2b+0x54>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808e34:	18800117 	ldw	r2,4(r3)
  808e38:	10001826 	beq	r2,zero,808e9c <__i2b+0x88>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808e3c:	11000017 	ldw	r4,0(r2)
  808e40:	19000115 	stw	r4,4(r3)
  _Bigint *b;

  b = eBalloc (ptr, 1);
  b->_x[0] = i;
  b->_wds = 1;
  808e44:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  808e48:	10000315 	stw	zero,12(r2)
  b->_x[0] = i;
  808e4c:	14400515 	stw	r17,20(r2)
  b->_wds = 1;
  808e50:	10c00415 	stw	r3,16(r2)
  return b;
}
  808e54:	dfc00217 	ldw	ra,8(sp)
  808e58:	dc400117 	ldw	r17,4(sp)
  808e5c:	dc000017 	ldw	r16,0(sp)
  808e60:	dec00304 	addi	sp,sp,12
  808e64:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808e68:	01800844 	movi	r6,33
  808e6c:	01400104 	movi	r5,4
  808e70:	080b9c40 	call	80b9c4 <_calloc_r>
  808e74:	80801315 	stw	r2,76(r16)
  808e78:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  808e7c:	103fed1e 	bne	r2,zero,808e34 <__i2b+0x20>
  b = eBalloc (ptr, 1);
  808e80:	01c02074 	movhi	r7,129
  808e84:	01002074 	movhi	r4,129
  808e88:	39cadd04 	addi	r7,r7,11124
  808e8c:	000d883a 	mov	r6,zero
  808e90:	01405004 	movi	r5,320
  808e94:	210b0004 	addi	r4,r4,11264
  808e98:	080b9500 	call	80b950 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  808e9c:	01800704 	movi	r6,28
  808ea0:	01400044 	movi	r5,1
  808ea4:	8009883a 	mov	r4,r16
  808ea8:	080b9c40 	call	80b9c4 <_calloc_r>
      if (rv == NULL) return NULL;
  808eac:	103ff426 	beq	r2,zero,808e80 <__i2b+0x6c>
      rv->_k = k;
  808eb0:	00c00044 	movi	r3,1
  808eb4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  808eb8:	00c00084 	movi	r3,2
  808ebc:	10c00215 	stw	r3,8(r2)
  808ec0:	003fe006 	br	808e44 <__i2b+0x30>

00808ec4 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
  808ec4:	defff004 	addi	sp,sp,-64
  808ec8:	dd800c15 	stw	r22,48(sp)
  808ecc:	dc400715 	stw	r17,28(sp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
  808ed0:	2d800417 	ldw	r22,16(r5)
  808ed4:	34400417 	ldw	r17,16(r6)
{
  808ed8:	dc800815 	stw	r18,32(sp)
  808edc:	dc000615 	stw	r16,24(sp)
  808ee0:	dfc00f15 	stw	ra,60(sp)
  808ee4:	df000e15 	stw	fp,56(sp)
  808ee8:	ddc00d15 	stw	r23,52(sp)
  808eec:	dd400b15 	stw	r21,44(sp)
  808ef0:	dd000a15 	stw	r20,40(sp)
  808ef4:	dcc00915 	stw	r19,36(sp)
  808ef8:	2825883a 	mov	r18,r5
  808efc:	3021883a 	mov	r16,r6
  if (a->_wds < b->_wds)
  808f00:	b4400516 	blt	r22,r17,808f18 <__multiply+0x54>
  808f04:	8807883a 	mov	r3,r17
  808f08:	2821883a 	mov	r16,r5
  808f0c:	b023883a 	mov	r17,r22
  808f10:	3025883a 	mov	r18,r6
  808f14:	182d883a 	mov	r22,r3
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
  808f18:	80800217 	ldw	r2,8(r16)
  wc = wa + wb;
  808f1c:	8d87883a 	add	r3,r17,r22
  808f20:	d8c00015 	stw	r3,0(sp)
  k = a->_k;
  808f24:	81400117 	ldw	r5,4(r16)
  if (wc > a->_maxwds)
  808f28:	10c0010e 	bge	r2,r3,808f30 <__multiply+0x6c>
    k++;
  808f2c:	29400044 	addi	r5,r5,1
  c = eBalloc (ptr, k);
  808f30:	08089a40 	call	8089a4 <_Balloc>
  808f34:	d8800515 	stw	r2,20(sp)
  808f38:	10008c26 	beq	r2,zero,80916c <__multiply+0x2a8>
  for (x = c->_x, xa = x + wc; x < xa; x++)
  808f3c:	d8800017 	ldw	r2,0(sp)
  808f40:	102690ba 	slli	r19,r2,2
  808f44:	d8800517 	ldw	r2,20(sp)
  808f48:	15000504 	addi	r20,r2,20
  808f4c:	a4c5883a 	add	r2,r20,r19
  808f50:	d8800115 	stw	r2,4(sp)
  808f54:	a0800a2e 	bgeu	r20,r2,808f80 <__multiply+0xbc>
    *x = 0;
  808f58:	d8800117 	ldw	r2,4(sp)
  808f5c:	d8c00517 	ldw	r3,20(sp)
  808f60:	000b883a 	mov	r5,zero
  808f64:	a009883a 	mov	r4,r20
  808f68:	10cdc83a 	sub	r6,r2,r3
  808f6c:	31bffac4 	addi	r6,r6,-21
  808f70:	300cd0ba 	srli	r6,r6,2
  808f74:	31800044 	addi	r6,r6,1
  808f78:	300c90ba 	slli	r6,r6,2
  808f7c:	08088b40 	call	8088b4 <memset>
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  808f80:	b02c90ba 	slli	r22,r22,2
  xae = xa + wa;
  808f84:	882290ba 	slli	r17,r17,2
  xb = b->_x;
  808f88:	94800504 	addi	r18,r18,20
  xa = a->_x;
  808f8c:	80800504 	addi	r2,r16,20
  xbe = xb + wb;
  808f90:	9587883a 	add	r3,r18,r22
  xa = a->_x;
  808f94:	d8800315 	stw	r2,12(sp)
  xbe = xb + wb;
  808f98:	d8c00215 	stw	r3,8(sp)
  xae = xa + wa;
  808f9c:	1463883a 	add	r17,r2,r17
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
  808fa0:	90c0542e 	bgeu	r18,r3,8090f4 <__multiply+0x230>
  808fa4:	80800544 	addi	r2,r16,21
  808fa8:	88806d36 	bltu	r17,r2,809160 <__multiply+0x29c>
  808fac:	8c05c83a 	sub	r2,r17,r16
  808fb0:	10bffac4 	addi	r2,r2,-21
  808fb4:	1004d0ba 	srli	r2,r2,2
  808fb8:	10800044 	addi	r2,r2,1
  808fbc:	100490ba 	slli	r2,r2,2
  808fc0:	d8800415 	stw	r2,16(sp)
  808fc4:	00000606 	br	808fe0 <__multiply+0x11c>
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
	  *xc = carry;
	}
      if ((y = *xb >> 16) != 0)
  808fc8:	102ad43a 	srli	r21,r2,16
  808fcc:	a800271e 	bne	r21,zero,80906c <__multiply+0x1a8>
  for (; xb < xbe; xb++, xc0++)
  808fd0:	d8800217 	ldw	r2,8(sp)
  808fd4:	94800104 	addi	r18,r18,4
  808fd8:	a5000104 	addi	r20,r20,4
  808fdc:	9080452e 	bgeu	r18,r2,8090f4 <__multiply+0x230>
      if ((y = *xb & 0xffff) != 0)
  808fe0:	90800017 	ldw	r2,0(r18)
  808fe4:	15ffffcc 	andi	r23,r2,65535
  808fe8:	b83ff726 	beq	r23,zero,808fc8 <__multiply+0x104>
	  x = xa;
  808fec:	dd400317 	ldw	r21,12(sp)
  808ff0:	a02d883a 	mov	r22,r20
	  carry = 0;
  808ff4:	0027883a 	mov	r19,zero
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  808ff8:	af000017 	ldw	fp,0(r21)
  808ffc:	b4000017 	ldw	r16,0(r22)
  809000:	b80b883a 	mov	r5,r23
  809004:	e13fffcc 	andi	r4,fp,65535
  809008:	0802af80 	call	802af8 <__mulsi3>
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  80900c:	e008d43a 	srli	r4,fp,16
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  809010:	823fffcc 	andi	r8,r16,65535
  809014:	1205883a 	add	r2,r2,r8
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  809018:	b80b883a 	mov	r5,r23
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  80901c:	14e7883a 	add	r19,r2,r19
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  809020:	8020d43a 	srli	r16,r16,16
  809024:	0802af80 	call	802af8 <__mulsi3>
	      carry = z >> 16;
  809028:	9808d43a 	srli	r4,r19,16
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  80902c:	1405883a 	add	r2,r2,r16
	      Storeinc (xc, z2, z);
  809030:	98ffffcc 	andi	r3,r19,65535
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  809034:	1105883a 	add	r2,r2,r4
	      Storeinc (xc, z2, z);
  809038:	1008943a 	slli	r4,r2,16
  80903c:	b5800104 	addi	r22,r22,4
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  809040:	ad400104 	addi	r21,r21,4
	      Storeinc (xc, z2, z);
  809044:	20c6b03a 	or	r3,r4,r3
  809048:	b0ffff15 	stw	r3,-4(r22)
	      carry = z2 >> 16;
  80904c:	1026d43a 	srli	r19,r2,16
	  while (x < xae);
  809050:	ac7fe936 	bltu	r21,r17,808ff8 <__multiply+0x134>
	  *xc = carry;
  809054:	d8800417 	ldw	r2,16(sp)
  809058:	a085883a 	add	r2,r20,r2
  80905c:	14c00015 	stw	r19,0(r2)
      if ((y = *xb >> 16) != 0)
  809060:	90800017 	ldw	r2,0(r18)
  809064:	102ad43a 	srli	r21,r2,16
  809068:	a83fd926 	beq	r21,zero,808fd0 <__multiply+0x10c>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
  80906c:	a5c00017 	ldw	r23,0(r20)
	  x = xa;
  809070:	dd800317 	ldw	r22,12(sp)
	  z2 = *xc;
  809074:	a027883a 	mov	r19,r20
  809078:	b821883a 	mov	r16,r23
	  carry = 0;
  80907c:	0039883a 	mov	fp,zero
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  809080:	b100000b 	ldhu	r4,0(r22)
  809084:	a80b883a 	mov	r5,r21
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
  809088:	9cc00104 	addi	r19,r19,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80908c:	0802af80 	call	802af8 <__mulsi3>
  809090:	800cd43a 	srli	r6,r16,16
	      Storeinc (xc, z, z2);
  809094:	b8ffffcc 	andi	r3,r23,65535
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  809098:	b5800104 	addi	r22,r22,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80909c:	118d883a 	add	r6,r2,r6
  8090a0:	3739883a 	add	fp,r6,fp
	      Storeinc (xc, z, z2);
  8090a4:	e004943a 	slli	r2,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  8090a8:	9c000017 	ldw	r16,0(r19)
  8090ac:	a80b883a 	mov	r5,r21
	      Storeinc (xc, z, z2);
  8090b0:	10c6b03a 	or	r3,r2,r3
  8090b4:	98ffff15 	stw	r3,-4(r19)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  8090b8:	b13fff8b 	ldhu	r4,-2(r22)
  8090bc:	0802af80 	call	802af8 <__mulsi3>
	      carry = z >> 16;
  8090c0:	e00cd43a 	srli	r6,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  8090c4:	80ffffcc 	andi	r3,r16,65535
  8090c8:	10c7883a 	add	r3,r2,r3
  8090cc:	19af883a 	add	r23,r3,r6
	      carry = z2 >> 16;
  8090d0:	b838d43a 	srli	fp,r23,16
	    }
	  while (x < xae);
  8090d4:	b47fea36 	bltu	r22,r17,809080 <__multiply+0x1bc>
	  *xc = z2;
  8090d8:	d8800417 	ldw	r2,16(sp)
  for (; xb < xbe; xb++, xc0++)
  8090dc:	94800104 	addi	r18,r18,4
	  *xc = z2;
  8090e0:	a085883a 	add	r2,r20,r2
  8090e4:	15c00015 	stw	r23,0(r2)
  for (; xb < xbe; xb++, xc0++)
  8090e8:	d8800217 	ldw	r2,8(sp)
  8090ec:	a5000104 	addi	r20,r20,4
  8090f0:	90bfbb36 	bltu	r18,r2,808fe0 <__multiply+0x11c>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
  8090f4:	d8800017 	ldw	r2,0(sp)
  8090f8:	00800516 	blt	zero,r2,809110 <__multiply+0x24c>
  8090fc:	00000906 	br	809124 <__multiply+0x260>
  809100:	d8800017 	ldw	r2,0(sp)
  809104:	10bfffc4 	addi	r2,r2,-1
  809108:	d8800015 	stw	r2,0(sp)
  80910c:	10000526 	beq	r2,zero,809124 <__multiply+0x260>
  809110:	d8c00117 	ldw	r3,4(sp)
  809114:	18bfff17 	ldw	r2,-4(r3)
  809118:	18ffff04 	addi	r3,r3,-4
  80911c:	d8c00115 	stw	r3,4(sp)
  809120:	103ff726 	beq	r2,zero,809100 <__multiply+0x23c>
  c->_wds = wc;
  809124:	d8800517 	ldw	r2,20(sp)
  809128:	d8c00017 	ldw	r3,0(sp)
  80912c:	10c00415 	stw	r3,16(r2)
  return c;
}
  809130:	dfc00f17 	ldw	ra,60(sp)
  809134:	df000e17 	ldw	fp,56(sp)
  809138:	ddc00d17 	ldw	r23,52(sp)
  80913c:	dd800c17 	ldw	r22,48(sp)
  809140:	dd400b17 	ldw	r21,44(sp)
  809144:	dd000a17 	ldw	r20,40(sp)
  809148:	dcc00917 	ldw	r19,36(sp)
  80914c:	dc800817 	ldw	r18,32(sp)
  809150:	dc400717 	ldw	r17,28(sp)
  809154:	dc000617 	ldw	r16,24(sp)
  809158:	dec01004 	addi	sp,sp,64
  80915c:	f800283a 	ret
  809160:	00800104 	movi	r2,4
  809164:	d8800415 	stw	r2,16(sp)
  809168:	003f9d06 	br	808fe0 <__multiply+0x11c>
  c = eBalloc (ptr, k);
  80916c:	01c02074 	movhi	r7,129
  809170:	01002074 	movhi	r4,129
  809174:	39cadd04 	addi	r7,r7,11124
  809178:	000d883a 	mov	r6,zero
  80917c:	01405744 	movi	r5,349
  809180:	210b0004 	addi	r4,r4,11264
  809184:	080b9500 	call	80b950 <__assert_func>

00809188 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
  809188:	defffb04 	addi	sp,sp,-20
  80918c:	dcc00315 	stw	r19,12(sp)
  809190:	dc000015 	stw	r16,0(sp)
  809194:	dfc00415 	stw	ra,16(sp)
  809198:	dc800215 	stw	r18,8(sp)
  80919c:	dc400115 	stw	r17,4(sp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
  8091a0:	308000cc 	andi	r2,r6,3
{
  8091a4:	3021883a 	mov	r16,r6
  8091a8:	2027883a 	mov	r19,r4
  if ((i = k & 3) != 0)
  8091ac:	10002d1e 	bne	r2,zero,809264 <__pow5mult+0xdc>
  8091b0:	2825883a 	mov	r18,r5
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
  8091b4:	8021d0ba 	srai	r16,r16,2
  8091b8:	80001926 	beq	r16,zero,809220 <__pow5mult+0x98>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
  8091bc:	9c401217 	ldw	r17,72(r19)
  8091c0:	8800061e 	bne	r17,zero,8091dc <__pow5mult+0x54>
  8091c4:	00002f06 	br	809284 <__pow5mult+0xfc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
  8091c8:	8021d07a 	srai	r16,r16,1
  8091cc:	80001426 	beq	r16,zero,809220 <__pow5mult+0x98>
	break;
      if (!(p51 = p5->_next))
  8091d0:	88800017 	ldw	r2,0(r17)
  8091d4:	10001a26 	beq	r2,zero,809240 <__pow5mult+0xb8>
{
  8091d8:	1023883a 	mov	r17,r2
      if (k & 1)
  8091dc:	8080004c 	andi	r2,r16,1
  8091e0:	103ff926 	beq	r2,zero,8091c8 <__pow5mult+0x40>
	  b1 = mult (ptr, b, p5);
  8091e4:	880d883a 	mov	r6,r17
  8091e8:	900b883a 	mov	r5,r18
  8091ec:	9809883a 	mov	r4,r19
  8091f0:	0808ec40 	call	808ec4 <__multiply>
  if (v)
  8091f4:	90001926 	beq	r18,zero,80925c <__pow5mult+0xd4>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8091f8:	91000117 	ldw	r4,4(r18)
  8091fc:	98c01317 	ldw	r3,76(r19)
      if (!(k >>= 1))
  809200:	8021d07a 	srai	r16,r16,1
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  809204:	200890ba 	slli	r4,r4,2
  809208:	1907883a 	add	r3,r3,r4
  80920c:	19000017 	ldw	r4,0(r3)
  809210:	91000015 	stw	r4,0(r18)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  809214:	1c800015 	stw	r18,0(r3)
	  b = b1;
  809218:	1025883a 	mov	r18,r2
      if (!(k >>= 1))
  80921c:	803fec1e 	bne	r16,zero,8091d0 <__pow5mult+0x48>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
  809220:	9005883a 	mov	r2,r18
  809224:	dfc00417 	ldw	ra,16(sp)
  809228:	dcc00317 	ldw	r19,12(sp)
  80922c:	dc800217 	ldw	r18,8(sp)
  809230:	dc400117 	ldw	r17,4(sp)
  809234:	dc000017 	ldw	r16,0(sp)
  809238:	dec00504 	addi	sp,sp,20
  80923c:	f800283a 	ret
	  p51 = p5->_next = mult (ptr, p5, p5);
  809240:	880d883a 	mov	r6,r17
  809244:	880b883a 	mov	r5,r17
  809248:	9809883a 	mov	r4,r19
  80924c:	0808ec40 	call	808ec4 <__multiply>
  809250:	88800015 	stw	r2,0(r17)
	  p51->_next = 0;
  809254:	10000015 	stw	zero,0(r2)
  809258:	003fdf06 	br	8091d8 <__pow5mult+0x50>
	  b = b1;
  80925c:	1025883a 	mov	r18,r2
  809260:	003fd906 	br	8091c8 <__pow5mult+0x40>
    b = multadd (ptr, b, p05[i - 1], 0);
  809264:	100490ba 	slli	r2,r2,2
  809268:	00c02074 	movhi	r3,129
  80926c:	000f883a 	mov	r7,zero
  809270:	10c7883a 	add	r3,r2,r3
  809274:	198b1917 	ldw	r6,11364(r3)
  809278:	0808a6c0 	call	808a6c <__multadd>
  80927c:	1025883a 	mov	r18,r2
  809280:	003fcc06 	br	8091b4 <__pow5mult+0x2c>
  b = eBalloc (ptr, 1);
  809284:	01400044 	movi	r5,1
  809288:	9809883a 	mov	r4,r19
  80928c:	08089a40 	call	8089a4 <_Balloc>
  809290:	1023883a 	mov	r17,r2
  809294:	10000726 	beq	r2,zero,8092b4 <__pow5mult+0x12c>
  b->_x[0] = i;
  809298:	00809c44 	movi	r2,625
  80929c:	88800515 	stw	r2,20(r17)
  b->_wds = 1;
  8092a0:	00800044 	movi	r2,1
  8092a4:	88800415 	stw	r2,16(r17)
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
  8092a8:	9c401215 	stw	r17,72(r19)
      p5->_next = 0;
  8092ac:	88000015 	stw	zero,0(r17)
  8092b0:	003fca06 	br	8091dc <__pow5mult+0x54>
  b = eBalloc (ptr, 1);
  8092b4:	01c02074 	movhi	r7,129
  8092b8:	01002074 	movhi	r4,129
  8092bc:	39cadd04 	addi	r7,r7,11124
  8092c0:	000d883a 	mov	r6,zero
  8092c4:	01405004 	movi	r5,320
  8092c8:	210b0004 	addi	r4,r4,11264
  8092cc:	080b9500 	call	80b950 <__assert_func>

008092d0 <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
  8092d0:	defff804 	addi	sp,sp,-32
  8092d4:	dd800615 	stw	r22,24(sp)
  8092d8:	dc000015 	stw	r16,0(sp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
  8092dc:	302dd17a 	srai	r22,r6,5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  8092e0:	2c000417 	ldw	r16,16(r5)
  for (i = b->_maxwds; n1 > i; i <<= 1)
  8092e4:	28800217 	ldw	r2,8(r5)
{
  8092e8:	dd000415 	stw	r20,16(sp)
  n1 = n + b->_wds + 1;
  8092ec:	b421883a 	add	r16,r22,r16
{
  8092f0:	dcc00315 	stw	r19,12(sp)
  8092f4:	dc800215 	stw	r18,8(sp)
  8092f8:	dc400115 	stw	r17,4(sp)
  8092fc:	dfc00715 	stw	ra,28(sp)
  809300:	dd400515 	stw	r21,20(sp)
  n1 = n + b->_wds + 1;
  809304:	85000044 	addi	r20,r16,1
{
  809308:	2827883a 	mov	r19,r5
  80930c:	3025883a 	mov	r18,r6
  k1 = b->_k;
  809310:	29400117 	ldw	r5,4(r5)
{
  809314:	2023883a 	mov	r17,r4
  for (i = b->_maxwds; n1 > i; i <<= 1)
  809318:	1500030e 	bge	r2,r20,809328 <__lshift+0x58>
  80931c:	1085883a 	add	r2,r2,r2
    k1++;
  809320:	29400044 	addi	r5,r5,1
  for (i = b->_maxwds; n1 > i; i <<= 1)
  809324:	153ffd16 	blt	r2,r20,80931c <__lshift+0x4c>
  b1 = eBalloc (ptr, k1);
  809328:	8809883a 	mov	r4,r17
  80932c:	08089a40 	call	8089a4 <_Balloc>
  809330:	102b883a 	mov	r21,r2
  809334:	10004126 	beq	r2,zero,80943c <__lshift+0x16c>
  x1 = b1->_x;
  809338:	11000504 	addi	r4,r2,20
  for (i = 0; i < n; i++)
  80933c:	0580050e 	bge	zero,r22,809354 <__lshift+0x84>
    *x1++ = 0;
  809340:	b02c90ba 	slli	r22,r22,2
  809344:	000b883a 	mov	r5,zero
  809348:	b00d883a 	mov	r6,r22
  80934c:	08088b40 	call	8088b4 <memset>
  809350:	1589883a 	add	r4,r2,r22
  x = b->_x;
  xe = x + b->_wds;
  809354:	9a000417 	ldw	r8,16(r19)
  x = b->_x;
  809358:	98c00504 	addi	r3,r19,20
#ifdef Pack_32
  if (k &= 0x1f)
  80935c:	948007cc 	andi	r18,r18,31
  xe = x + b->_wds;
  809360:	401090ba 	slli	r8,r8,2
  809364:	1a11883a 	add	r8,r3,r8
  if (k &= 0x1f)
  809368:	90002c26 	beq	r18,zero,80941c <__lshift+0x14c>
    {
      k1 = 32 - k;
  80936c:	01400804 	movi	r5,32
  809370:	2c8bc83a 	sub	r5,r5,r18
  809374:	2005883a 	mov	r2,r4
      z = 0;
  809378:	000f883a 	mov	r7,zero
      do
	{
	  *x1++ = *x << k | z;
  80937c:	19800017 	ldw	r6,0(r3)
  809380:	10800104 	addi	r2,r2,4
	  z = *x++ >> k1;
  809384:	18c00104 	addi	r3,r3,4
	  *x1++ = *x << k | z;
  809388:	348c983a 	sll	r6,r6,r18
  80938c:	31ccb03a 	or	r6,r6,r7
  809390:	11bfff15 	stw	r6,-4(r2)
	  z = *x++ >> k1;
  809394:	19bfff17 	ldw	r6,-4(r3)
  809398:	314ed83a 	srl	r7,r6,r5
	}
      while (x < xe);
  80939c:	1a3ff736 	bltu	r3,r8,80937c <__lshift+0xac>
	  *x1++ = *x << k | z;
  8093a0:	98800544 	addi	r2,r19,21
  8093a4:	40802336 	bltu	r8,r2,809434 <__lshift+0x164>
  8093a8:	44c7c83a 	sub	r3,r8,r19
  8093ac:	18fffac4 	addi	r3,r3,-21
  8093b0:	1806d0ba 	srli	r3,r3,2
  8093b4:	18c00044 	addi	r3,r3,1
  8093b8:	180690ba 	slli	r3,r3,2
      if ((*x1 = z) != 0)
  8093bc:	20c9883a 	add	r4,r4,r3
  8093c0:	21c00015 	stw	r7,0(r4)
  8093c4:	38000126 	beq	r7,zero,8093cc <__lshift+0xfc>
  n1 = n + b->_wds + 1;
  8093c8:	a021883a 	mov	r16,r20
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  8093cc:	ac000415 	stw	r16,16(r21)
  if (v)
  8093d0:	98000726 	beq	r19,zero,8093f0 <__lshift+0x120>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8093d4:	98c00117 	ldw	r3,4(r19)
  8093d8:	88801317 	ldw	r2,76(r17)
  8093dc:	180690ba 	slli	r3,r3,2
  8093e0:	10c5883a 	add	r2,r2,r3
  8093e4:	10c00017 	ldw	r3,0(r2)
  8093e8:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  8093ec:	14c00015 	stw	r19,0(r2)
  Bfree (ptr, b);
  return b1;
}
  8093f0:	a805883a 	mov	r2,r21
  8093f4:	dfc00717 	ldw	ra,28(sp)
  8093f8:	dd800617 	ldw	r22,24(sp)
  8093fc:	dd400517 	ldw	r21,20(sp)
  809400:	dd000417 	ldw	r20,16(sp)
  809404:	dcc00317 	ldw	r19,12(sp)
  809408:	dc800217 	ldw	r18,8(sp)
  80940c:	dc400117 	ldw	r17,4(sp)
  809410:	dc000017 	ldw	r16,0(sp)
  809414:	dec00804 	addi	sp,sp,32
  809418:	f800283a 	ret
      *x1++ = *x++;
  80941c:	18800017 	ldw	r2,0(r3)
  809420:	18c00104 	addi	r3,r3,4
  809424:	21000104 	addi	r4,r4,4
  809428:	20bfff15 	stw	r2,-4(r4)
    while (x < xe);
  80942c:	1a3ffb36 	bltu	r3,r8,80941c <__lshift+0x14c>
  809430:	003fe606 	br	8093cc <__lshift+0xfc>
	  *x1++ = *x << k | z;
  809434:	00c00104 	movi	r3,4
  809438:	003fe006 	br	8093bc <__lshift+0xec>
  b1 = eBalloc (ptr, k1);
  80943c:	01c02074 	movhi	r7,129
  809440:	01002074 	movhi	r4,129
  809444:	39cadd04 	addi	r7,r7,11124
  809448:	000d883a 	mov	r6,zero
  80944c:	01407644 	movi	r5,473
  809450:	210b0004 	addi	r4,r4,11264
  809454:	080b9500 	call	80b950 <__assert_func>

00809458 <__mcmp>:
cmp (_Bigint * a, _Bigint * b)
{
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  809458:	21800417 	ldw	r6,16(r4)
  j = b->_wds;
  80945c:	28c00417 	ldw	r3,16(r5)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
  809460:	30c5c83a 	sub	r2,r6,r3
  809464:	30c00e1e 	bne	r6,r3,8094a0 <__mcmp+0x48>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
  809468:	180690ba 	slli	r3,r3,2
  xa0 = a->_x;
  80946c:	21c00504 	addi	r7,r4,20
  xb0 = b->_x;
  809470:	29400504 	addi	r5,r5,20
  xa = xa0 + j;
  809474:	38c9883a 	add	r4,r7,r3
  xb = xb0 + j;
  809478:	28c7883a 	add	r3,r5,r3
  80947c:	00000106 	br	809484 <__mcmp+0x2c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
  809480:	3900082e 	bgeu	r7,r4,8094a4 <__mcmp+0x4c>
      if (*--xa != *--xb)
  809484:	21bfff17 	ldw	r6,-4(r4)
  809488:	197fff17 	ldw	r5,-4(r3)
  80948c:	213fff04 	addi	r4,r4,-4
  809490:	18ffff04 	addi	r3,r3,-4
  809494:	317ffa26 	beq	r6,r5,809480 <__mcmp+0x28>
	return *xa < *xb ? -1 : 1;
  809498:	3140032e 	bgeu	r6,r5,8094a8 <__mcmp+0x50>
  80949c:	00bfffc4 	movi	r2,-1
	break;
    }
  return 0;
}
  8094a0:	f800283a 	ret
  8094a4:	f800283a 	ret
	return *xa < *xb ? -1 : 1;
  8094a8:	00800044 	movi	r2,1
  8094ac:	f800283a 	ret

008094b0 <__mdiff>:
  i = a->_wds;
  8094b0:	28800417 	ldw	r2,16(r5)
  j = b->_wds;
  8094b4:	30c00417 	ldw	r3,16(r6)

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
  8094b8:	defffc04 	addi	sp,sp,-16
  8094bc:	dc800215 	stw	r18,8(sp)
  8094c0:	dc400115 	stw	r17,4(sp)
  8094c4:	dc000015 	stw	r16,0(sp)
  8094c8:	dfc00315 	stw	ra,12(sp)
  8094cc:	2823883a 	mov	r17,r5
  8094d0:	3021883a 	mov	r16,r6
  if (i -= j)
  8094d4:	10e5c83a 	sub	r18,r2,r3
  8094d8:	10c0641e 	bne	r2,r3,80966c <__mdiff+0x1bc>
  xa = xa0 + j;
  8094dc:	180c90ba 	slli	r6,r3,2
  xa0 = a->_x;
  8094e0:	29400504 	addi	r5,r5,20
  xb0 = b->_x;
  8094e4:	80c00504 	addi	r3,r16,20
  xa = xa0 + j;
  8094e8:	2985883a 	add	r2,r5,r6
  xb = xb0 + j;
  8094ec:	1987883a 	add	r3,r3,r6
  8094f0:	00000106 	br	8094f8 <__mdiff+0x48>
      if (xa <= xa0)
  8094f4:	2880642e 	bgeu	r5,r2,809688 <__mdiff+0x1d8>
      if (*--xa != *--xb)
  8094f8:	11bfff17 	ldw	r6,-4(r2)
  8094fc:	19ffff17 	ldw	r7,-4(r3)
  809500:	10bfff04 	addi	r2,r2,-4
  809504:	18ffff04 	addi	r3,r3,-4
  809508:	31fffa26 	beq	r6,r7,8094f4 <__mdiff+0x44>
	return *xa < *xb ? -1 : 1;
  80950c:	31c05236 	bltu	r6,r7,809658 <__mdiff+0x1a8>
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = eBalloc (ptr, a->_k);
  809510:	89400117 	ldw	r5,4(r17)
  809514:	08089a40 	call	8089a4 <_Balloc>
  809518:	10006226 	beq	r2,zero,8096a4 <__mdiff+0x1f4>
  c->_sign = i;
  wa = a->_wds;
  80951c:	8a400417 	ldw	r9,16(r17)
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
  809520:	83000417 	ldw	r12,16(r16)
  xa = a->_x;
  809524:	8ac00504 	addi	r11,r17,20
  xae = xa + wa;
  809528:	481090ba 	slli	r8,r9,2
  xbe = xb + wb;
  80952c:	601890ba 	slli	r12,r12,2
  xb = b->_x;
  809530:	81800504 	addi	r6,r16,20
  xc = c->_x;
  809534:	13400504 	addi	r13,r2,20
  c->_sign = i;
  809538:	14800315 	stw	r18,12(r2)
  xae = xa + wa;
  80953c:	5a11883a 	add	r8,r11,r8
  xbe = xb + wb;
  809540:	3319883a 	add	r12,r6,r12
  xc = c->_x;
  809544:	681d883a 	mov	r14,r13
  xa = a->_x;
  809548:	5815883a 	mov	r10,r11
  borrow = 0;
  80954c:	0007883a 	mov	r3,zero
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  809550:	51000017 	ldw	r4,0(r10)
  809554:	31c00017 	ldw	r7,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  809558:	73800104 	addi	r14,r14,4
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  80955c:	217fffcc 	andi	r5,r4,65535
  809560:	28cb883a 	add	r5,r5,r3
  809564:	38ffffcc 	andi	r3,r7,65535
  809568:	28cbc83a 	sub	r5,r5,r3
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  80956c:	380ed43a 	srli	r7,r7,16
  809570:	2006d43a 	srli	r3,r4,16
      borrow = y >> 16;
  809574:	2809d43a 	srai	r4,r5,16
      Storeinc (xc, z, y);
  809578:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  80957c:	19c7c83a 	sub	r3,r3,r7
  809580:	1907883a 	add	r3,r3,r4
      Storeinc (xc, z, y);
  809584:	1808943a 	slli	r4,r3,16
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  809588:	31800104 	addi	r6,r6,4
      borrow = z >> 16;
  80958c:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  809590:	214ab03a 	or	r5,r4,r5
  809594:	717fff15 	stw	r5,-4(r14)
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  809598:	52800104 	addi	r10,r10,4
    }
  while (xb < xbe);
  80959c:	333fec36 	bltu	r6,r12,809550 <__mdiff+0xa0>
  8095a0:	640fc83a 	sub	r7,r12,r16
  8095a4:	39fffac4 	addi	r7,r7,-21
  8095a8:	84000544 	addi	r16,r16,21
  8095ac:	380ed0ba 	srli	r7,r7,2
  8095b0:	64003336 	bltu	r12,r16,809680 <__mdiff+0x1d0>
  8095b4:	380890ba 	slli	r4,r7,2
  8095b8:	6909883a 	add	r4,r13,r4
  8095bc:	64002e36 	bltu	r12,r16,809678 <__mdiff+0x1c8>
  8095c0:	39800044 	addi	r6,r7,1
  8095c4:	300c90ba 	slli	r6,r6,2
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  8095c8:	5997883a 	add	r11,r11,r6
      Storeinc (xc, z, y);
  8095cc:	699b883a 	add	r13,r13,r6
  while (xa < xae)
  8095d0:	5a00152e 	bgeu	r11,r8,809628 <__mdiff+0x178>
      Storeinc (xc, z, y);
  8095d4:	680f883a 	mov	r7,r13
  while (xa < xae)
  8095d8:	580d883a 	mov	r6,r11
    {
      y = (*xa & 0xffff) + borrow;
  8095dc:	31000017 	ldw	r4,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  8095e0:	39c00104 	addi	r7,r7,4
      z = (*xa++ >> 16) + borrow;
  8095e4:	31800104 	addi	r6,r6,4
      y = (*xa & 0xffff) + borrow;
  8095e8:	217fffcc 	andi	r5,r4,65535
  8095ec:	28cb883a 	add	r5,r5,r3
      borrow = y >> 16;
  8095f0:	2815d43a 	srai	r10,r5,16
      z = (*xa++ >> 16) + borrow;
  8095f4:	2006d43a 	srli	r3,r4,16
      Storeinc (xc, z, y);
  8095f8:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) + borrow;
  8095fc:	1a87883a 	add	r3,r3,r10
      Storeinc (xc, z, y);
  809600:	1814943a 	slli	r10,r3,16
      borrow = z >> 16;
  809604:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  809608:	514ab03a 	or	r5,r10,r5
  80960c:	397fff15 	stw	r5,-4(r7)
  while (xa < xae)
  809610:	323ff236 	bltu	r6,r8,8095dc <__mdiff+0x12c>
  809614:	413fffc4 	addi	r4,r8,-1
  809618:	22c9c83a 	sub	r4,r4,r11
  80961c:	2008d0ba 	srli	r4,r4,2
  809620:	200890ba 	slli	r4,r4,2
  809624:	6909883a 	add	r4,r13,r4
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
  809628:	2800041e 	bne	r5,zero,80963c <__mdiff+0x18c>
  80962c:	20ffff17 	ldw	r3,-4(r4)
    wa--;
  809630:	4a7fffc4 	addi	r9,r9,-1
  while (!*--xc)
  809634:	213fff04 	addi	r4,r4,-4
  809638:	183ffc26 	beq	r3,zero,80962c <__mdiff+0x17c>
  c->_wds = wa;
  80963c:	12400415 	stw	r9,16(r2)
  return c;
}
  809640:	dfc00317 	ldw	ra,12(sp)
  809644:	dc800217 	ldw	r18,8(sp)
  809648:	dc400117 	ldw	r17,4(sp)
  80964c:	dc000017 	ldw	r16,0(sp)
  809650:	dec00404 	addi	sp,sp,16
  809654:	f800283a 	ret
  if (i < 0)
  809658:	8805883a 	mov	r2,r17
      i = 1;
  80965c:	04800044 	movi	r18,1
      a = b;
  809660:	8023883a 	mov	r17,r16
      b = c;
  809664:	1021883a 	mov	r16,r2
  809668:	003fa906 	br	809510 <__mdiff+0x60>
  if (i < 0)
  80966c:	903ffa16 	blt	r18,zero,809658 <__mdiff+0x1a8>
    i = 0;
  809670:	0025883a 	mov	r18,zero
  809674:	003fa606 	br	809510 <__mdiff+0x60>
  809678:	01800104 	movi	r6,4
  80967c:	003fd206 	br	8095c8 <__mdiff+0x118>
  809680:	0009883a 	mov	r4,zero
  809684:	003fcc06 	br	8095b8 <__mdiff+0x108>
      c = eBalloc (ptr, 0);
  809688:	000b883a 	mov	r5,zero
  80968c:	08089a40 	call	8089a4 <_Balloc>
  809690:	10000b26 	beq	r2,zero,8096c0 <__mdiff+0x210>
      c->_wds = 1;
  809694:	00c00044 	movi	r3,1
  809698:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
  80969c:	10000515 	stw	zero,20(r2)
      return c;
  8096a0:	003fe706 	br	809640 <__mdiff+0x190>
  c = eBalloc (ptr, a->_k);
  8096a4:	01c02074 	movhi	r7,129
  8096a8:	01002074 	movhi	r4,129
  8096ac:	39cadd04 	addi	r7,r7,11124
  8096b0:	000d883a 	mov	r6,zero
  8096b4:	01409004 	movi	r5,576
  8096b8:	210b0004 	addi	r4,r4,11264
  8096bc:	080b9500 	call	80b950 <__assert_func>
      c = eBalloc (ptr, 0);
  8096c0:	01c02074 	movhi	r7,129
  8096c4:	01002074 	movhi	r4,129
  8096c8:	39cadd04 	addi	r7,r7,11124
  8096cc:	000d883a 	mov	r6,zero
  8096d0:	01408c84 	movi	r5,562
  8096d4:	210b0004 	addi	r4,r4,11264
  8096d8:	080b9500 	call	80b950 <__assert_func>

008096dc <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
  8096dc:	28dffc2c 	andhi	r3,r5,32752
  8096e0:	017f3034 	movhi	r5,64704
  8096e4:	1947883a 	add	r3,r3,r5
#ifndef Sudden_Underflow
  if (L > 0)
  8096e8:	00c0020e 	bge	zero,r3,8096f4 <__ulp+0x18>
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
  8096ec:	0005883a 	mov	r2,zero
  8096f0:	f800283a 	ret
      L = -L >> Exp_shift;
  8096f4:	00c7c83a 	sub	r3,zero,r3
  8096f8:	1807d53a 	srai	r3,r3,20
      if (L < Exp_shift)
  8096fc:	18800508 	cmpgei	r2,r3,20
  809700:	1000041e 	bne	r2,zero,809714 <__ulp+0x38>
	  word0 (a) = 0x80000 >> L;
  809704:	00800234 	movhi	r2,8
  809708:	10c7d83a 	sra	r3,r2,r3
	  word1 (a) = 0;
  80970c:	0005883a 	mov	r2,zero
  809710:	f800283a 	ret
#endif
	}
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
  809714:	193ffb04 	addi	r4,r3,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  809718:	208007c8 	cmpgei	r2,r4,31
	  word0 (a) = 0;
  80971c:	0007883a 	mov	r3,zero
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  809720:	1000031e 	bne	r2,zero,809730 <__ulp+0x54>
  809724:	00a00034 	movhi	r2,32768
  809728:	1104d83a 	srl	r2,r2,r4
  80972c:	f800283a 	ret
  809730:	00800044 	movi	r2,1
#endif
	}
    }
#endif
  return a.d;
}
  809734:	f800283a 	ret

00809738 <__b2d>:

double
b2d (_Bigint * a, int *e)
{
  809738:	defffa04 	addi	sp,sp,-24
  80973c:	dc400115 	stw	r17,4(sp)
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  809740:	24400417 	ldw	r17,16(r4)
{
  809744:	dc000015 	stw	r16,0(sp)
  xa0 = a->_x;
  809748:	24000504 	addi	r16,r4,20
  xa = xa0 + a->_wds;
  80974c:	882290ba 	slli	r17,r17,2
{
  809750:	dc800215 	stw	r18,8(sp)
  809754:	dd000415 	stw	r20,16(sp)
  xa = xa0 + a->_wds;
  809758:	8463883a 	add	r17,r16,r17
  y = *--xa;
  80975c:	8cbfff17 	ldw	r18,-4(r17)
{
  809760:	dcc00315 	stw	r19,12(sp)
  809764:	dfc00515 	stw	ra,20(sp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  809768:	9009883a 	mov	r4,r18
{
  80976c:	2827883a 	mov	r19,r5
  k = hi0bits (y);
  809770:	0808d000 	call	808d00 <__hi0bits>
  *e = 32 - k;
  809774:	00c00804 	movi	r3,32
  809778:	1889c83a 	sub	r4,r3,r2
  80977c:	99000015 	stw	r4,0(r19)
#ifdef Pack_32
  if (k < Ebits)
  809780:	110002c8 	cmpgei	r4,r2,11
  y = *--xa;
  809784:	8d3fff04 	addi	r20,r17,-4
  if (k < Ebits)
  809788:	20002026 	beq	r4,zero,80980c <__b2d+0xd4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
  80978c:	10bffd44 	addi	r2,r2,-11
  z = xa > xa0 ? *--xa : 0;
  809790:	85000e2e 	bgeu	r16,r20,8097cc <__b2d+0x94>
  809794:	897ffe17 	ldw	r5,-8(r17)
  if (k -= Ebits)
  809798:	10001226 	beq	r2,zero,8097e4 <__b2d+0xac>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
  80979c:	1889c83a 	sub	r4,r3,r2
  8097a0:	90a4983a 	sll	r18,r18,r2
  8097a4:	2906d83a 	srl	r3,r5,r4
  z = xa > xa0 ? *--xa : 0;
  8097a8:	89bffe04 	addi	r6,r17,-8
      y = xa > xa0 ? *--xa : 0;
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
  8097ac:	2884983a 	sll	r2,r5,r2
      d0 = Exp_1 | y << k | z >> (32 - k);
  8097b0:	90e4b03a 	or	r18,r18,r3
  8097b4:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  8097b8:	81800c2e 	bgeu	r16,r6,8097ec <__b2d+0xb4>
      d1 = z << k | y >> (32 - k);
  8097bc:	897ffd17 	ldw	r5,-12(r17)
  8097c0:	2908d83a 	srl	r4,r5,r4
  8097c4:	1104b03a 	or	r2,r2,r4
  8097c8:	00000806 	br	8097ec <__b2d+0xb4>
  if (k -= Ebits)
  8097cc:	10000426 	beq	r2,zero,8097e0 <__b2d+0xa8>
      d0 = Exp_1 | y << k | z >> (32 - k);
  8097d0:	90a4983a 	sll	r18,r18,r2
  8097d4:	0005883a 	mov	r2,zero
  8097d8:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  8097dc:	00000306 	br	8097ec <__b2d+0xb4>
  z = xa > xa0 ? *--xa : 0;
  8097e0:	000b883a 	mov	r5,zero
#endif
    }
  else
    {
      d0 = Exp_1 | y;
  8097e4:	90cffc34 	orhi	r3,r18,16368
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
  8097e8:	2805883a 	mov	r2,r5
#else
#undef d0
#undef d1
#endif
  return d.d;
}
  8097ec:	dfc00517 	ldw	ra,20(sp)
  8097f0:	dd000417 	ldw	r20,16(sp)
  8097f4:	dcc00317 	ldw	r19,12(sp)
  8097f8:	dc800217 	ldw	r18,8(sp)
  8097fc:	dc400117 	ldw	r17,4(sp)
  809800:	dc000017 	ldw	r16,0(sp)
  809804:	dec00604 	addi	sp,sp,24
  809808:	f800283a 	ret
      d0 = Exp_1 | y >> (Ebits - k);
  80980c:	014002c4 	movi	r5,11
  809810:	2889c83a 	sub	r4,r5,r2
  809814:	9106d83a 	srl	r3,r18,r4
  809818:	18cffc34 	orhi	r3,r3,16368
      w = xa > xa0 ? *--xa : 0;
  80981c:	85000536 	bltu	r16,r20,809834 <__b2d+0xfc>
  809820:	000b883a 	mov	r5,zero
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  809824:	10800544 	addi	r2,r2,21
  809828:	9084983a 	sll	r2,r18,r2
  80982c:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  809830:	003fee06 	br	8097ec <__b2d+0xb4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  809834:	897ffe17 	ldw	r5,-8(r17)
  809838:	290ad83a 	srl	r5,r5,r4
  80983c:	003ff906 	br	809824 <__b2d+0xec>

00809840 <__d2b>:
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
  809840:	defff804 	addi	sp,sp,-32
  809844:	dd000615 	stw	r20,24(sp)
  809848:	2829883a 	mov	r20,r5
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = eBalloc (ptr, 1);
  80984c:	01400044 	movi	r5,1
{
  809850:	dcc00515 	stw	r19,20(sp)
  809854:	dc000215 	stw	r16,8(sp)
  809858:	dfc00715 	stw	ra,28(sp)
  80985c:	dc800415 	stw	r18,16(sp)
  809860:	dc400315 	stw	r17,12(sp)
  809864:	3021883a 	mov	r16,r6
  809868:	3827883a 	mov	r19,r7
  b = eBalloc (ptr, 1);
  80986c:	08089a40 	call	8089a4 <_Balloc>
  809870:	10004526 	beq	r2,zero,809988 <__d2b+0x148>
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809874:	8024d53a 	srli	r18,r16,20
  z = d0 & Frac_mask;
  809878:	01800434 	movhi	r6,16
  80987c:	31bfffc4 	addi	r6,r6,-1
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809880:	9481ffcc 	andi	r18,r18,2047
  809884:	1023883a 	mov	r17,r2
  z = d0 & Frac_mask;
  809888:	81a0703a 	and	r16,r16,r6
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  80988c:	90000126 	beq	r18,zero,809894 <__d2b+0x54>
    z |= Exp_msk1;
  809890:	84000434 	orhi	r16,r16,16
  809894:	dc000115 	stw	r16,4(sp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
  809898:	a0002226 	beq	r20,zero,809924 <__d2b+0xe4>
    {
      y = d1;
      k = lo0bits (&y);
  80989c:	d809883a 	mov	r4,sp
      y = d1;
  8098a0:	dd000015 	stw	r20,0(sp)
      k = lo0bits (&y);
  8098a4:	0808d640 	call	808d64 <__lo0bits>
      if (k)
	{
         x[0] = y | z << (32 - k);
  8098a8:	d8c00117 	ldw	r3,4(sp)
      if (k)
  8098ac:	10003326 	beq	r2,zero,80997c <__d2b+0x13c>
         x[0] = y | z << (32 - k);
  8098b0:	01000804 	movi	r4,32
  8098b4:	2089c83a 	sub	r4,r4,r2
  8098b8:	1908983a 	sll	r4,r3,r4
  8098bc:	d9400017 	ldw	r5,0(sp)
	  z >>= k;
  8098c0:	1886d83a 	srl	r3,r3,r2
         x[0] = y | z << (32 - k);
  8098c4:	2148b03a 	or	r4,r4,r5
  8098c8:	89000515 	stw	r4,20(r17)
	  z >>= k;
  8098cc:	d8c00115 	stw	r3,4(sp)
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
  8098d0:	88c00615 	stw	r3,24(r17)
  8098d4:	1800271e 	bne	r3,zero,809974 <__d2b+0x134>
  8098d8:	04000044 	movi	r16,1
  8098dc:	8c000415 	stw	r16,16(r17)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
  8098e0:	90001926 	beq	r18,zero,809948 <__d2b+0x108>
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
      *bits = P - k;
  8098e4:	00c00d44 	movi	r3,53
      *e = de - Bias - (P - 1) + k;
  8098e8:	94bef344 	addi	r18,r18,-1075
  8098ec:	90a5883a 	add	r18,r18,r2
      *bits = P - k;
  8098f0:	1885c83a 	sub	r2,r3,r2
  8098f4:	d8c00817 	ldw	r3,32(sp)
      *e = de - Bias - (P - 1) + k;
  8098f8:	9c800015 	stw	r18,0(r19)
      *bits = P - k;
  8098fc:	18800015 	stw	r2,0(r3)
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
  809900:	8805883a 	mov	r2,r17
  809904:	dfc00717 	ldw	ra,28(sp)
  809908:	dd000617 	ldw	r20,24(sp)
  80990c:	dcc00517 	ldw	r19,20(sp)
  809910:	dc800417 	ldw	r18,16(sp)
  809914:	dc400317 	ldw	r17,12(sp)
  809918:	dc000217 	ldw	r16,8(sp)
  80991c:	dec00804 	addi	sp,sp,32
  809920:	f800283a 	ret
      k = lo0bits (&z);
  809924:	d9000104 	addi	r4,sp,4
  809928:	0808d640 	call	808d64 <__lo0bits>
      i = b->_wds = 1;
  80992c:	00c00044 	movi	r3,1
  809930:	88c00415 	stw	r3,16(r17)
      x[0] = z;
  809934:	d8c00117 	ldw	r3,4(sp)
      k += 32;
  809938:	10800804 	addi	r2,r2,32
      i = b->_wds = 1;
  80993c:	04000044 	movi	r16,1
      x[0] = z;
  809940:	88c00515 	stw	r3,20(r17)
  if (de)
  809944:	903fe71e 	bne	r18,zero,8098e4 <__d2b+0xa4>
      *bits = 32 * i - hi0bits (x[i - 1]);
  809948:	800690ba 	slli	r3,r16,2
      *e = de - Bias - (P - 1) + 1 + k;
  80994c:	10bef384 	addi	r2,r2,-1074
  809950:	98800015 	stw	r2,0(r19)
      *bits = 32 * i - hi0bits (x[i - 1]);
  809954:	88c5883a 	add	r2,r17,r3
  809958:	11000417 	ldw	r4,16(r2)
  80995c:	8020917a 	slli	r16,r16,5
  809960:	0808d000 	call	808d00 <__hi0bits>
  809964:	80a1c83a 	sub	r16,r16,r2
  809968:	d8800817 	ldw	r2,32(sp)
  80996c:	14000015 	stw	r16,0(r2)
  return b;
  809970:	003fe306 	br	809900 <__d2b+0xc0>
      i = b->_wds = (x[1] = z) ? 2 : 1;
  809974:	04000084 	movi	r16,2
  809978:	003fd806 	br	8098dc <__d2b+0x9c>
	x[0] = y;
  80997c:	d9000017 	ldw	r4,0(sp)
  809980:	89000515 	stw	r4,20(r17)
  809984:	003fd206 	br	8098d0 <__d2b+0x90>
  b = eBalloc (ptr, 1);
  809988:	01c02074 	movhi	r7,129
  80998c:	01002074 	movhi	r4,129
  809990:	39cadd04 	addi	r7,r7,11124
  809994:	000d883a 	mov	r6,zero
  809998:	0140c284 	movi	r5,778
  80999c:	210b0004 	addi	r4,r4,11264
  8099a0:	080b9500 	call	80b950 <__assert_func>

008099a4 <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
  8099a4:	defff904 	addi	sp,sp,-28
  8099a8:	dc400315 	stw	r17,12(sp)
  8099ac:	2823883a 	mov	r17,r5
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  8099b0:	d80b883a 	mov	r5,sp
{
  8099b4:	dfc00615 	stw	ra,24(sp)
  8099b8:	dcc00515 	stw	r19,20(sp)
  8099bc:	dc800415 	stw	r18,16(sp)
  8099c0:	2027883a 	mov	r19,r4
  8099c4:	dc000215 	stw	r16,8(sp)
  da.d = b2d (a, &ka);
  8099c8:	08097380 	call	809738 <__b2d>
  db.d = b2d (b, &kb);
  8099cc:	d9400104 	addi	r5,sp,4
  8099d0:	8809883a 	mov	r4,r17
  da.d = b2d (a, &ka);
  8099d4:	1025883a 	mov	r18,r2
  8099d8:	1821883a 	mov	r16,r3
  db.d = b2d (b, &kb);
  8099dc:	08097380 	call	809738 <__b2d>
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
  8099e0:	89000417 	ldw	r4,16(r17)
  8099e4:	9a000417 	ldw	r8,16(r19)
  8099e8:	d9400117 	ldw	r5,4(sp)
  db.d = b2d (b, &kb);
  8099ec:	100d883a 	mov	r6,r2
  k = ka - kb + 32 * (a->_wds - b->_wds);
  8099f0:	4111c83a 	sub	r8,r8,r4
  8099f4:	d9000017 	ldw	r4,0(sp)
  8099f8:	4010917a 	slli	r8,r8,5
  db.d = b2d (b, &kb);
  8099fc:	180f883a 	mov	r7,r3
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809a00:	2149c83a 	sub	r4,r4,r5
  809a04:	4111883a 	add	r8,r8,r4
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
  809a08:	02000c0e 	bge	zero,r8,809a3c <__ratio+0x98>
    word0 (da) += k * Exp_msk1;
  809a0c:	4010953a 	slli	r8,r8,20
  809a10:	4421883a 	add	r16,r8,r16
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
  809a14:	9009883a 	mov	r4,r18
  809a18:	800b883a 	mov	r5,r16
  809a1c:	080ddfc0 	call	80ddfc <__divdf3>
}
  809a20:	dfc00617 	ldw	ra,24(sp)
  809a24:	dcc00517 	ldw	r19,20(sp)
  809a28:	dc800417 	ldw	r18,16(sp)
  809a2c:	dc400317 	ldw	r17,12(sp)
  809a30:	dc000217 	ldw	r16,8(sp)
  809a34:	dec00704 	addi	sp,sp,28
  809a38:	f800283a 	ret
      word0 (db) += k * Exp_msk1;
  809a3c:	4010953a 	slli	r8,r8,20
  809a40:	1a0fc83a 	sub	r7,r3,r8
  809a44:	003ff306 	br	809a14 <__ratio+0x70>

00809a48 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
  809a48:	defffe04 	addi	sp,sp,-8
  809a4c:	dc000015 	stw	r16,0(sp)
  809a50:	dfc00115 	stw	ra,4(sp)
  double v = 1.0;
  if (dig < 24)
  809a54:	20800608 	cmpgei	r2,r4,24
{
  809a58:	2021883a 	mov	r16,r4
  if (dig < 24)
  809a5c:	10000f26 	beq	r2,zero,809a9c <_mprec_log10+0x54>
  double v = 1.0;
  809a60:	0009883a 	mov	r4,zero
  809a64:	014ffc34 	movhi	r5,16368
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
  809a68:	000d883a 	mov	r6,zero
  809a6c:	01d00934 	movhi	r7,16420
  809a70:	080e97c0 	call	80e97c <__muldf3>
      dig--;
  809a74:	843fffc4 	addi	r16,r16,-1
      v *= 10;
  809a78:	1009883a 	mov	r4,r2
  809a7c:	180b883a 	mov	r5,r3
  while (dig > 0)
  809a80:	803ff91e 	bne	r16,zero,809a68 <_mprec_log10+0x20>
    }
  return v;
}
  809a84:	2005883a 	mov	r2,r4
  809a88:	2807883a 	mov	r3,r5
  809a8c:	dfc00117 	ldw	ra,4(sp)
  809a90:	dc000017 	ldw	r16,0(sp)
  809a94:	dec00204 	addi	sp,sp,8
  809a98:	f800283a 	ret
    return tens[dig];
  809a9c:	202090fa 	slli	r16,r4,3
  809aa0:	00802074 	movhi	r2,129
  809aa4:	108b3104 	addi	r2,r2,11460
  809aa8:	1421883a 	add	r16,r2,r16
  809aac:	81000017 	ldw	r4,0(r16)
  809ab0:	81400117 	ldw	r5,4(r16)
  809ab4:	003ff306 	br	809a84 <_mprec_log10+0x3c>

00809ab8 <__copybits>:
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
  809ab8:	297fffc4 	addi	r5,r5,-1
  809abc:	280fd17a 	srai	r7,r5,5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
  809ac0:	31400417 	ldw	r5,16(r6)
	x = b->_x;
  809ac4:	30800504 	addi	r2,r6,20
	ce = c + ((n-1) >> kshift) + 1;
  809ac8:	39c00044 	addi	r7,r7,1
	xe = x + b->_wds;
  809acc:	280a90ba 	slli	r5,r5,2
	ce = c + ((n-1) >> kshift) + 1;
  809ad0:	380e90ba 	slli	r7,r7,2
	xe = x + b->_wds;
  809ad4:	114b883a 	add	r5,r2,r5
	ce = c + ((n-1) >> kshift) + 1;
  809ad8:	21cf883a 	add	r7,r4,r7
	while(x < xe)
  809adc:	11400c2e 	bgeu	r2,r5,809b10 <__copybits+0x58>
  809ae0:	2007883a 	mov	r3,r4
		*c++ = *x++;
  809ae4:	12000017 	ldw	r8,0(r2)
  809ae8:	10800104 	addi	r2,r2,4
  809aec:	18c00104 	addi	r3,r3,4
  809af0:	1a3fff15 	stw	r8,-4(r3)
	while(x < xe)
  809af4:	117ffb36 	bltu	r2,r5,809ae4 <__copybits+0x2c>
		*c++ = *x++;
  809af8:	2985c83a 	sub	r2,r5,r6
  809afc:	10bffac4 	addi	r2,r2,-21
  809b00:	1004d0ba 	srli	r2,r2,2
  809b04:	10800044 	addi	r2,r2,1
  809b08:	100490ba 	slli	r2,r2,2
  809b0c:	2089883a 	add	r4,r4,r2
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
  809b10:	21c0072e 	bgeu	r4,r7,809b30 <__copybits+0x78>
		*c++ = 0;
  809b14:	39bfffc4 	addi	r6,r7,-1
  809b18:	310dc83a 	sub	r6,r6,r4
  809b1c:	300cd0ba 	srli	r6,r6,2
  809b20:	000b883a 	mov	r5,zero
  809b24:	31800044 	addi	r6,r6,1
  809b28:	300c90ba 	slli	r6,r6,2
  809b2c:	08088b41 	jmpi	8088b4 <memset>
}
  809b30:	f800283a 	ret

00809b34 <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
  809b34:	20c00417 	ldw	r3,16(r4)
	n = k >> kshift;
  809b38:	280dd17a 	srai	r6,r5,5
	x = b->_x;
  809b3c:	21000504 	addi	r4,r4,20
	if (n > nwds)
  809b40:	1980080e 	bge	r3,r6,809b64 <__any_on+0x30>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
  809b44:	180490ba 	slli	r2,r3,2
  809b48:	2085883a 	add	r2,r4,r2
	while(x > x0)
  809b4c:	20800f2e 	bgeu	r4,r2,809b8c <__any_on+0x58>
		if (*--x)
  809b50:	10ffff17 	ldw	r3,-4(r2)
  809b54:	10bfff04 	addi	r2,r2,-4
  809b58:	183ffc26 	beq	r3,zero,809b4c <__any_on+0x18>
			return 1;
  809b5c:	00800044 	movi	r2,1
			return 1;
	return 0;
}
  809b60:	f800283a 	ret
		x1 = x2 = x[n];
  809b64:	300490ba 	slli	r2,r6,2
  809b68:	2085883a 	add	r2,r4,r2
	else if (n < nwds && (k &= kmask)) {
  809b6c:	30fff70e 	bge	r6,r3,809b4c <__any_on+0x18>
  809b70:	294007cc 	andi	r5,r5,31
  809b74:	283ff526 	beq	r5,zero,809b4c <__any_on+0x18>
		x1 = x2 = x[n];
  809b78:	11800017 	ldw	r6,0(r2)
		x1 >>= k;
  809b7c:	3146d83a 	srl	r3,r6,r5
		x1 <<= k;
  809b80:	194a983a 	sll	r5,r3,r5
		if (x1 != x2)
  809b84:	317ff51e 	bne	r6,r5,809b5c <__any_on+0x28>
  809b88:	003ff006 	br	809b4c <__any_on+0x18>
	return 0;
  809b8c:	0005883a 	mov	r2,zero
  809b90:	f800283a 	ret

00809b94 <_realloc_r>:
{
  809b94:	defff504 	addi	sp,sp,-44
  809b98:	dc800315 	stw	r18,12(sp)
  809b9c:	dfc00a15 	stw	ra,40(sp)
  809ba0:	df000915 	stw	fp,36(sp)
  809ba4:	ddc00815 	stw	r23,32(sp)
  809ba8:	dd800715 	stw	r22,28(sp)
  809bac:	dd400615 	stw	r21,24(sp)
  809bb0:	dd000515 	stw	r20,20(sp)
  809bb4:	dcc00415 	stw	r19,16(sp)
  809bb8:	dc400215 	stw	r17,8(sp)
  809bbc:	dc000115 	stw	r16,4(sp)
  809bc0:	3025883a 	mov	r18,r6
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809bc4:	28008b26 	beq	r5,zero,809df4 <_realloc_r+0x260>
  809bc8:	2821883a 	mov	r16,r5
  809bcc:	2027883a 	mov	r19,r4
  nb = request2size(bytes);
  809bd0:	944002c4 	addi	r17,r18,11
  MALLOC_LOCK;
  809bd4:	08103640 	call	810364 <__malloc_lock>
  nb = request2size(bytes);
  809bd8:	888005f0 	cmpltui	r2,r17,23
  809bdc:	1000521e 	bne	r2,zero,809d28 <_realloc_r+0x194>
  809be0:	017ffe04 	movi	r5,-8
  809be4:	8962703a 	and	r17,r17,r5
  if (nb > INT_MAX || nb < bytes)
  809be8:	8807883a 	mov	r3,r17
  809bec:	88005116 	blt	r17,zero,809d34 <_realloc_r+0x1a0>
  809bf0:	8c805036 	bltu	r17,r18,809d34 <_realloc_r+0x1a0>
  newsize = oldsize = chunksize(oldp);
  809bf4:	80bfff17 	ldw	r2,-4(r16)
  809bf8:	017fff04 	movi	r5,-4
  newp    = oldp    = mem2chunk(oldmem);
  809bfc:	857ffe04 	addi	r21,r16,-8
  newsize = oldsize = chunksize(oldp);
  809c00:	1168703a 	and	r20,r2,r5
    next = chunk_at_offset(oldp, oldsize);
  809c04:	ad2d883a 	add	r22,r21,r20
  if ((long)(oldsize) < (long)(nb))  
  809c08:	a0c0390e 	bge	r20,r3,809cf0 <_realloc_r+0x15c>
    if (next == top || !inuse(next)) 
  809c0c:	07002074 	movhi	fp,129
  809c10:	e70d8b04 	addi	fp,fp,13868
  809c14:	e2000217 	ldw	r8,8(fp)
  809c18:	b1000117 	ldw	r4,4(r22)
  809c1c:	45808e26 	beq	r8,r22,809e58 <_realloc_r+0x2c4>
  809c20:	01bfff84 	movi	r6,-2
  809c24:	218c703a 	and	r6,r4,r6
  809c28:	b18d883a 	add	r6,r22,r6
  809c2c:	31800117 	ldw	r6,4(r6)
  809c30:	3180004c 	andi	r6,r6,1
  809c34:	30004f1e 	bne	r6,zero,809d74 <_realloc_r+0x1e0>
      nextsize = chunksize(next);
  809c38:	2148703a 	and	r4,r4,r5
      else if (((long)(nextsize + newsize) >= (long)(nb)))
  809c3c:	a10b883a 	add	r5,r20,r4
  809c40:	28c0bf0e 	bge	r5,r3,809f40 <_realloc_r+0x3ac>
    if (!prev_inuse(oldp))
  809c44:	1080004c 	andi	r2,r2,1
  809c48:	10004c1e 	bne	r2,zero,809d7c <_realloc_r+0x1e8>
      prev = prev_chunk(oldp);
  809c4c:	81fffe17 	ldw	r7,-8(r16)
      prevsize = chunksize(prev);
  809c50:	00bfff04 	movi	r2,-4
      prev = prev_chunk(oldp);
  809c54:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  809c58:	39400117 	ldw	r5,4(r7)
  809c5c:	288a703a 	and	r5,r5,r2
      if (next != 0)
  809c60:	b0000426 	beq	r22,zero,809c74 <_realloc_r+0xe0>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  809c64:	a16f883a 	add	r23,r20,r5
  809c68:	b92f883a 	add	r23,r23,r4
        if (next == top)
  809c6c:	4580bf26 	beq	r8,r22,809f6c <_realloc_r+0x3d8>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
  809c70:	b8c0930e 	bge	r23,r3,809ec0 <_realloc_r+0x32c>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
  809c74:	38004126 	beq	r7,zero,809d7c <_realloc_r+0x1e8>
  809c78:	a16f883a 	add	r23,r20,r5
  809c7c:	b8c03f16 	blt	r23,r3,809d7c <_realloc_r+0x1e8>
        unlink(prev, bck, fwd);
  809c80:	38800317 	ldw	r2,12(r7)
  809c84:	38c00217 	ldw	r3,8(r7)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809c88:	a1bfff04 	addi	r6,r20,-4
  809c8c:	31400968 	cmpgeui	r5,r6,37
        unlink(prev, bck, fwd);
  809c90:	18800315 	stw	r2,12(r3)
  809c94:	10c00215 	stw	r3,8(r2)
        newmem = chunk2mem(newp);
  809c98:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809c9c:	3ded883a 	add	r22,r7,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ca0:	2800941e 	bne	r5,zero,809ef4 <_realloc_r+0x360>
  809ca4:	30800530 	cmpltui	r2,r6,20
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ca8:	80c00017 	ldw	r3,0(r16)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809cac:	1000df1e 	bne	r2,zero,80a02c <_realloc_r+0x498>
  809cb0:	38c00215 	stw	r3,8(r7)
  809cb4:	80c00117 	ldw	r3,4(r16)
  809cb8:	30800728 	cmpgeui	r2,r6,28
  809cbc:	38c00315 	stw	r3,12(r7)
  809cc0:	1000dc1e 	bne	r2,zero,80a034 <_realloc_r+0x4a0>
  809cc4:	80c00217 	ldw	r3,8(r16)
  809cc8:	38800404 	addi	r2,r7,16
  809ccc:	84000204 	addi	r16,r16,8
  809cd0:	10c00015 	stw	r3,0(r2)
  809cd4:	80c00117 	ldw	r3,4(r16)
        newsize += prevsize;
  809cd8:	b829883a 	mov	r20,r23
  809cdc:	382b883a 	mov	r21,r7
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ce0:	10c00115 	stw	r3,4(r2)
  809ce4:	80c00217 	ldw	r3,8(r16)
  809ce8:	2021883a 	mov	r16,r4
  809cec:	10c00215 	stw	r3,8(r2)
    set_head_size(newp, nb);
  809cf0:	a9800117 	ldw	r6,4(r21)
  remainder_size = long_sub_size_t(newsize, nb);
  809cf4:	a445c83a 	sub	r2,r20,r17
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  809cf8:	10c00430 	cmpltui	r3,r2,16
    set_head_size(newp, nb);
  809cfc:	3180004c 	andi	r6,r6,1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  809d00:	18004926 	beq	r3,zero,809e28 <_realloc_r+0x294>
    set_head_size(newp, newsize);
  809d04:	a18cb03a 	or	r6,r20,r6
  809d08:	a9800115 	stw	r6,4(r21)
    set_inuse_bit_at_offset(newp, newsize);
  809d0c:	b0800117 	ldw	r2,4(r22)
  809d10:	10800054 	ori	r2,r2,1
  809d14:	b0800115 	stw	r2,4(r22)
  MALLOC_UNLOCK;
  809d18:	9809883a 	mov	r4,r19
  809d1c:	08103880 	call	810388 <__malloc_unlock>
  return chunk2mem(newp);
  809d20:	8025883a 	mov	r18,r16
  809d24:	00000606 	br	809d40 <_realloc_r+0x1ac>
  nb = request2size(bytes);
  809d28:	04400404 	movi	r17,16
  if (nb > INT_MAX || nb < bytes)
  809d2c:	00c00404 	movi	r3,16
  809d30:	8cbfb02e 	bgeu	r17,r18,809bf4 <_realloc_r+0x60>
    RERRNO = ENOMEM;
  809d34:	00800304 	movi	r2,12
  809d38:	98800015 	stw	r2,0(r19)
    return 0;
  809d3c:	0025883a 	mov	r18,zero
}
  809d40:	9005883a 	mov	r2,r18
  809d44:	dfc00a17 	ldw	ra,40(sp)
  809d48:	df000917 	ldw	fp,36(sp)
  809d4c:	ddc00817 	ldw	r23,32(sp)
  809d50:	dd800717 	ldw	r22,28(sp)
  809d54:	dd400617 	ldw	r21,24(sp)
  809d58:	dd000517 	ldw	r20,20(sp)
  809d5c:	dcc00417 	ldw	r19,16(sp)
  809d60:	dc800317 	ldw	r18,12(sp)
  809d64:	dc400217 	ldw	r17,8(sp)
  809d68:	dc000117 	ldw	r16,4(sp)
  809d6c:	dec00b04 	addi	sp,sp,44
  809d70:	f800283a 	ret
    if (!prev_inuse(oldp))
  809d74:	1080004c 	andi	r2,r2,1
  809d78:	10006c26 	beq	r2,zero,809f2c <_realloc_r+0x398>
    newmem = mALLOc (RCALL bytes);
  809d7c:	900b883a 	mov	r5,r18
  809d80:	9809883a 	mov	r4,r19
  809d84:	0807da80 	call	807da8 <_malloc_r>
  809d88:	1025883a 	mov	r18,r2
    if (newmem == 0)  /* propagate failure */
  809d8c:	10001626 	beq	r2,zero,809de8 <_realloc_r+0x254>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
  809d90:	80bfff17 	ldw	r2,-4(r16)
  809d94:	013fff84 	movi	r4,-2
  809d98:	90fffe04 	addi	r3,r18,-8
  809d9c:	1104703a 	and	r2,r2,r4
  809da0:	a885883a 	add	r2,r21,r2
  809da4:	10c05b26 	beq	r2,r3,809f14 <_realloc_r+0x380>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809da8:	a1bfff04 	addi	r6,r20,-4
  809dac:	30800968 	cmpgeui	r2,r6,37
  809db0:	10006a1e 	bne	r2,zero,809f5c <_realloc_r+0x3c8>
  809db4:	30800530 	cmpltui	r2,r6,20
  809db8:	81000017 	ldw	r4,0(r16)
  809dbc:	10003726 	beq	r2,zero,809e9c <_realloc_r+0x308>
  809dc0:	9005883a 	mov	r2,r18
  809dc4:	8007883a 	mov	r3,r16
  809dc8:	11000015 	stw	r4,0(r2)
  809dcc:	19000117 	ldw	r4,4(r3)
  809dd0:	11000115 	stw	r4,4(r2)
  809dd4:	18c00217 	ldw	r3,8(r3)
  809dd8:	10c00215 	stw	r3,8(r2)
    fREe(RCALL oldmem);
  809ddc:	800b883a 	mov	r5,r16
  809de0:	9809883a 	mov	r4,r19
  809de4:	08071500 	call	807150 <_free_r>
    MALLOC_UNLOCK;
  809de8:	9809883a 	mov	r4,r19
  809dec:	08103880 	call	810388 <__malloc_unlock>
    return newmem;
  809df0:	003fd306 	br	809d40 <_realloc_r+0x1ac>
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809df4:	300b883a 	mov	r5,r6
}
  809df8:	dfc00a17 	ldw	ra,40(sp)
  809dfc:	df000917 	ldw	fp,36(sp)
  809e00:	ddc00817 	ldw	r23,32(sp)
  809e04:	dd800717 	ldw	r22,28(sp)
  809e08:	dd400617 	ldw	r21,24(sp)
  809e0c:	dd000517 	ldw	r20,20(sp)
  809e10:	dcc00417 	ldw	r19,16(sp)
  809e14:	dc800317 	ldw	r18,12(sp)
  809e18:	dc400217 	ldw	r17,8(sp)
  809e1c:	dc000117 	ldw	r16,4(sp)
  809e20:	dec00b04 	addi	sp,sp,44
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809e24:	0807da81 	jmpi	807da8 <_malloc_r>
    set_head_size(newp, nb);
  809e28:	344cb03a 	or	r6,r6,r17
  809e2c:	a9800115 	stw	r6,4(r21)
    remainder = chunk_at_offset(newp, nb);
  809e30:	ac4b883a 	add	r5,r21,r17
    set_head(remainder, remainder_size | PREV_INUSE);
  809e34:	10800054 	ori	r2,r2,1
  809e38:	28800115 	stw	r2,4(r5)
    set_inuse_bit_at_offset(remainder, remainder_size);
  809e3c:	b0800117 	ldw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809e40:	29400204 	addi	r5,r5,8
  809e44:	9809883a 	mov	r4,r19
    set_inuse_bit_at_offset(remainder, remainder_size);
  809e48:	10800054 	ori	r2,r2,1
  809e4c:	b0800115 	stw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  809e50:	08071500 	call	807150 <_free_r>
  809e54:	003fb006 	br	809d18 <_realloc_r+0x184>
      nextsize = chunksize(next);
  809e58:	2148703a 	and	r4,r4,r5
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
  809e5c:	a10b883a 	add	r5,r20,r4
  809e60:	89800404 	addi	r6,r17,16
  809e64:	29bf7716 	blt	r5,r6,809c44 <_realloc_r+0xb0>
          top = chunk_at_offset(oldp, nb);
  809e68:	ac6b883a 	add	r21,r21,r17
          set_head(top, (newsize - nb) | PREV_INUSE);
  809e6c:	2c45c83a 	sub	r2,r5,r17
          top = chunk_at_offset(oldp, nb);
  809e70:	e5400215 	stw	r21,8(fp)
          set_head(top, (newsize - nb) | PREV_INUSE);
  809e74:	10800054 	ori	r2,r2,1
  809e78:	a8800115 	stw	r2,4(r21)
          set_head_size(oldp, nb);
  809e7c:	80bfff17 	ldw	r2,-4(r16)
	  MALLOC_UNLOCK;
  809e80:	9809883a 	mov	r4,r19
          return chunk2mem(oldp);
  809e84:	8025883a 	mov	r18,r16
          set_head_size(oldp, nb);
  809e88:	1080004c 	andi	r2,r2,1
  809e8c:	1462b03a 	or	r17,r2,r17
  809e90:	847fff15 	stw	r17,-4(r16)
	  MALLOC_UNLOCK;
  809e94:	08103880 	call	810388 <__malloc_unlock>
          return chunk2mem(oldp);
  809e98:	003fa906 	br	809d40 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809e9c:	91000015 	stw	r4,0(r18)
  809ea0:	80c00117 	ldw	r3,4(r16)
  809ea4:	30800728 	cmpgeui	r2,r6,28
  809ea8:	90c00115 	stw	r3,4(r18)
  809eac:	1000551e 	bne	r2,zero,80a004 <_realloc_r+0x470>
  809eb0:	81000217 	ldw	r4,8(r16)
  809eb4:	80c00204 	addi	r3,r16,8
  809eb8:	90800204 	addi	r2,r18,8
  809ebc:	003fc206 	br	809dc8 <_realloc_r+0x234>
          unlink(next, bck, fwd);
  809ec0:	b0800317 	ldw	r2,12(r22)
  809ec4:	b0c00217 	ldw	r3,8(r22)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ec8:	a1bfff04 	addi	r6,r20,-4
  809ecc:	31400968 	cmpgeui	r5,r6,37
          unlink(next, bck, fwd);
  809ed0:	18800315 	stw	r2,12(r3)
  809ed4:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
  809ed8:	38c00217 	ldw	r3,8(r7)
  809edc:	38800317 	ldw	r2,12(r7)
          newmem = chunk2mem(newp);
  809ee0:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809ee4:	3ded883a 	add	r22,r7,r23
          unlink(prev, bck, fwd);
  809ee8:	18800315 	stw	r2,12(r3)
  809eec:	10c00215 	stw	r3,8(r2)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ef0:	283f6c26 	beq	r5,zero,809ca4 <_realloc_r+0x110>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809ef4:	800b883a 	mov	r5,r16
  809ef8:	d9c00015 	stw	r7,0(sp)
  809efc:	08087880 	call	808788 <memmove>
  809f00:	d9c00017 	ldw	r7,0(sp)
  809f04:	1021883a 	mov	r16,r2
        newsize += prevsize;
  809f08:	b829883a 	mov	r20,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f0c:	382b883a 	mov	r21,r7
  809f10:	003f7706 	br	809cf0 <_realloc_r+0x15c>
      newsize += chunksize(newp);
  809f14:	90bfff17 	ldw	r2,-4(r18)
  809f18:	00ffff04 	movi	r3,-4
  809f1c:	10c4703a 	and	r2,r2,r3
  809f20:	a0a9883a 	add	r20,r20,r2
    set_inuse_bit_at_offset(remainder, remainder_size);
  809f24:	ad2d883a 	add	r22,r21,r20
      goto split;
  809f28:	003f7106 	br	809cf0 <_realloc_r+0x15c>
      prev = prev_chunk(oldp);
  809f2c:	81fffe17 	ldw	r7,-8(r16)
  809f30:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  809f34:	38800117 	ldw	r2,4(r7)
  809f38:	114a703a 	and	r5,r2,r5
      if (next != 0)
  809f3c:	003f4d06 	br	809c74 <_realloc_r+0xe0>
        unlink(next, bck, fwd);
  809f40:	b0800317 	ldw	r2,12(r22)
  809f44:	b0c00217 	ldw	r3,8(r22)
        newsize  += nextsize;
  809f48:	2829883a 	mov	r20,r5
    set_inuse_bit_at_offset(remainder, remainder_size);
  809f4c:	a96d883a 	add	r22,r21,r5
        unlink(next, bck, fwd);
  809f50:	18800315 	stw	r2,12(r3)
  809f54:	10c00215 	stw	r3,8(r2)
        goto split;
  809f58:	003f6506 	br	809cf0 <_realloc_r+0x15c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f5c:	800b883a 	mov	r5,r16
  809f60:	9009883a 	mov	r4,r18
  809f64:	08087880 	call	808788 <memmove>
  809f68:	003f9c06 	br	809ddc <_realloc_r+0x248>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  809f6c:	88800404 	addi	r2,r17,16
  809f70:	b8bf4016 	blt	r23,r2,809c74 <_realloc_r+0xe0>
            unlink(prev, bck, fwd);
  809f74:	38800317 	ldw	r2,12(r7)
  809f78:	38c00217 	ldw	r3,8(r7)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f7c:	a1bfff04 	addi	r6,r20,-4
  809f80:	31000968 	cmpgeui	r4,r6,37
            unlink(prev, bck, fwd);
  809f84:	18800315 	stw	r2,12(r3)
  809f88:	10c00215 	stw	r3,8(r2)
            newmem = chunk2mem(newp);
  809f8c:	3c800204 	addi	r18,r7,8
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809f90:	20003b1e 	bne	r4,zero,80a080 <_realloc_r+0x4ec>
  809f94:	30800530 	cmpltui	r2,r6,20
  809f98:	80c00017 	ldw	r3,0(r16)
  809f9c:	1000361e 	bne	r2,zero,80a078 <_realloc_r+0x4e4>
  809fa0:	38c00215 	stw	r3,8(r7)
  809fa4:	80c00117 	ldw	r3,4(r16)
  809fa8:	30800728 	cmpgeui	r2,r6,28
  809fac:	38c00315 	stw	r3,12(r7)
  809fb0:	1000401e 	bne	r2,zero,80a0b4 <_realloc_r+0x520>
  809fb4:	80c00217 	ldw	r3,8(r16)
  809fb8:	38800404 	addi	r2,r7,16
  809fbc:	84000204 	addi	r16,r16,8
  809fc0:	10c00015 	stw	r3,0(r2)
  809fc4:	80c00117 	ldw	r3,4(r16)
  809fc8:	10c00115 	stw	r3,4(r2)
  809fcc:	80c00217 	ldw	r3,8(r16)
  809fd0:	10c00215 	stw	r3,8(r2)
            top = chunk_at_offset(newp, nb);
  809fd4:	3c47883a 	add	r3,r7,r17
            set_head(top, (newsize - nb) | PREV_INUSE);
  809fd8:	bc45c83a 	sub	r2,r23,r17
            top = chunk_at_offset(newp, nb);
  809fdc:	e0c00215 	stw	r3,8(fp)
            set_head(top, (newsize - nb) | PREV_INUSE);
  809fe0:	10800054 	ori	r2,r2,1
  809fe4:	18800115 	stw	r2,4(r3)
            set_head_size(newp, nb);
  809fe8:	38800117 	ldw	r2,4(r7)
	    MALLOC_UNLOCK;
  809fec:	9809883a 	mov	r4,r19
            set_head_size(newp, nb);
  809ff0:	1080004c 	andi	r2,r2,1
  809ff4:	1462b03a 	or	r17,r2,r17
  809ff8:	3c400115 	stw	r17,4(r7)
	    MALLOC_UNLOCK;
  809ffc:	08103880 	call	810388 <__malloc_unlock>
            return newmem;
  80a000:	003f4f06 	br	809d40 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a004:	80800217 	ldw	r2,8(r16)
  80a008:	31800920 	cmpeqi	r6,r6,36
  80a00c:	90800215 	stw	r2,8(r18)
  80a010:	80800317 	ldw	r2,12(r16)
  80a014:	90800315 	stw	r2,12(r18)
  80a018:	81000417 	ldw	r4,16(r16)
  80a01c:	30000f1e 	bne	r6,zero,80a05c <_realloc_r+0x4c8>
  80a020:	80c00404 	addi	r3,r16,16
  80a024:	90800404 	addi	r2,r18,16
  80a028:	003f6706 	br	809dc8 <_realloc_r+0x234>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a02c:	2005883a 	mov	r2,r4
  80a030:	003f2706 	br	809cd0 <_realloc_r+0x13c>
  80a034:	80800217 	ldw	r2,8(r16)
  80a038:	31800920 	cmpeqi	r6,r6,36
  80a03c:	38800415 	stw	r2,16(r7)
  80a040:	80800317 	ldw	r2,12(r16)
  80a044:	38800515 	stw	r2,20(r7)
  80a048:	80c00417 	ldw	r3,16(r16)
  80a04c:	3000121e 	bne	r6,zero,80a098 <_realloc_r+0x504>
  80a050:	38800604 	addi	r2,r7,24
  80a054:	84000404 	addi	r16,r16,16
  80a058:	003f1d06 	br	809cd0 <_realloc_r+0x13c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a05c:	91000415 	stw	r4,16(r18)
  80a060:	81000517 	ldw	r4,20(r16)
  80a064:	80c00604 	addi	r3,r16,24
  80a068:	90800604 	addi	r2,r18,24
  80a06c:	91000515 	stw	r4,20(r18)
  80a070:	81000617 	ldw	r4,24(r16)
  80a074:	003f5406 	br	809dc8 <_realloc_r+0x234>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a078:	9005883a 	mov	r2,r18
  80a07c:	003fd006 	br	809fc0 <_realloc_r+0x42c>
  80a080:	800b883a 	mov	r5,r16
  80a084:	9009883a 	mov	r4,r18
  80a088:	d9c00015 	stw	r7,0(sp)
  80a08c:	08087880 	call	808788 <memmove>
  80a090:	d9c00017 	ldw	r7,0(sp)
  80a094:	003fcf06 	br	809fd4 <_realloc_r+0x440>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a098:	84000604 	addi	r16,r16,24
  80a09c:	38c00615 	stw	r3,24(r7)
  80a0a0:	80ffff17 	ldw	r3,-4(r16)
  80a0a4:	38800804 	addi	r2,r7,32
  80a0a8:	38c00715 	stw	r3,28(r7)
  80a0ac:	80c00017 	ldw	r3,0(r16)
  80a0b0:	003f0706 	br	809cd0 <_realloc_r+0x13c>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80a0b4:	80800217 	ldw	r2,8(r16)
  80a0b8:	31800920 	cmpeqi	r6,r6,36
  80a0bc:	38800415 	stw	r2,16(r7)
  80a0c0:	80800317 	ldw	r2,12(r16)
  80a0c4:	38800515 	stw	r2,20(r7)
  80a0c8:	80c00417 	ldw	r3,16(r16)
  80a0cc:	3000031e 	bne	r6,zero,80a0dc <_realloc_r+0x548>
  80a0d0:	38800604 	addi	r2,r7,24
  80a0d4:	84000404 	addi	r16,r16,16
  80a0d8:	003fb906 	br	809fc0 <_realloc_r+0x42c>
  80a0dc:	84000604 	addi	r16,r16,24
  80a0e0:	38c00615 	stw	r3,24(r7)
  80a0e4:	80ffff17 	ldw	r3,-4(r16)
  80a0e8:	38800804 	addi	r2,r7,32
  80a0ec:	38c00715 	stw	r3,28(r7)
  80a0f0:	80c00017 	ldw	r3,0(r16)
  80a0f4:	003fb206 	br	809fc0 <_realloc_r+0x42c>

0080a0f8 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
  80a0f8:	defffe04 	addi	sp,sp,-8
  80a0fc:	dc000015 	stw	r16,0(sp)
  80a100:	2021883a 	mov	r16,r4
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a104:	2809883a 	mov	r4,r5
{
  80a108:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80a10c:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a110:	08105600 	call	810560 <sbrk>
  80a114:	10ffffd8 	cmpnei	r3,r2,-1
  80a118:	18000426 	beq	r3,zero,80a12c <_sbrk_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80a11c:	dfc00117 	ldw	ra,4(sp)
  80a120:	dc000017 	ldw	r16,0(sp)
  80a124:	dec00204 	addi	sp,sp,8
  80a128:	f800283a 	ret
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80a12c:	d0e71817 	ldw	r3,-25504(gp)
  80a130:	183ffa26 	beq	r3,zero,80a11c <_sbrk_r+0x24>
    ptr->_errno = errno;
  80a134:	80c00015 	stw	r3,0(r16)
}
  80a138:	dfc00117 	ldw	ra,4(sp)
  80a13c:	dc000017 	ldw	r16,0(sp)
  80a140:	dec00204 	addi	sp,sp,8
  80a144:	f800283a 	ret

0080a148 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
  80a148:	defffe04 	addi	sp,sp,-8
  80a14c:	dc000015 	stw	r16,0(sp)
  80a150:	2821883a 	mov	r16,r5
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
  80a154:	2940038f 	ldh	r5,14(r5)
{
  80a158:	dfc00115 	stw	ra,4(sp)
  ret = _read_r (ptr, fp->_file, buf, n);
  80a15c:	080bf780 	call	80bf78 <_read_r>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
  80a160:	10000716 	blt	r2,zero,80a180 <__sread+0x38>
    fp->_offset += ret;
  80a164:	80c01417 	ldw	r3,80(r16)
  80a168:	1887883a 	add	r3,r3,r2
  80a16c:	80c01415 	stw	r3,80(r16)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
  80a170:	dfc00117 	ldw	ra,4(sp)
  80a174:	dc000017 	ldw	r16,0(sp)
  80a178:	dec00204 	addi	sp,sp,8
  80a17c:	f800283a 	ret
    fp->_flags &= ~__SOFF;	/* paranoia */
  80a180:	80c0030b 	ldhu	r3,12(r16)
  80a184:	18fbffcc 	andi	r3,r3,61439
  80a188:	80c0030d 	sth	r3,12(r16)
}
  80a18c:	dfc00117 	ldw	ra,4(sp)
  80a190:	dc000017 	ldw	r16,0(sp)
  80a194:	dec00204 	addi	sp,sp,8
  80a198:	f800283a 	ret

0080a19c <__seofread>:
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
  80a19c:	0005883a 	mov	r2,zero
  80a1a0:	f800283a 	ret

0080a1a4 <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
  80a1a4:	2880030b 	ldhu	r2,12(r5)
{
  80a1a8:	defffb04 	addi	sp,sp,-20
  80a1ac:	dcc00315 	stw	r19,12(sp)
  80a1b0:	dc800215 	stw	r18,8(sp)
  80a1b4:	dc400115 	stw	r17,4(sp)
  80a1b8:	dc000015 	stw	r16,0(sp)
  80a1bc:	dfc00415 	stw	ra,16(sp)
  if (fp->_flags & __SAPP)
  80a1c0:	10c0400c 	andi	r3,r2,256
{
  80a1c4:	2821883a 	mov	r16,r5
  80a1c8:	2023883a 	mov	r17,r4
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80a1cc:	2940038f 	ldh	r5,14(r5)
{
  80a1d0:	3025883a 	mov	r18,r6
  80a1d4:	3827883a 	mov	r19,r7
  if (fp->_flags & __SAPP)
  80a1d8:	18000c1e 	bne	r3,zero,80a20c <__swrite+0x68>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a1dc:	10bbffcc 	andi	r2,r2,61439
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
  80a1e0:	980f883a 	mov	r7,r19
  80a1e4:	900d883a 	mov	r6,r18
  80a1e8:	8809883a 	mov	r4,r17
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a1ec:	8080030d 	sth	r2,12(r16)
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
  80a1f0:	dfc00417 	ldw	ra,16(sp)
  80a1f4:	dcc00317 	ldw	r19,12(sp)
  80a1f8:	dc800217 	ldw	r18,8(sp)
  80a1fc:	dc400117 	ldw	r17,4(sp)
  80a200:	dc000017 	ldw	r16,0(sp)
  80a204:	dec00504 	addi	sp,sp,20
  w = _write_r (ptr, fp->_file, buf, n);
  80a208:	080b8a41 	jmpi	80b8a4 <_write_r>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80a20c:	01c00084 	movi	r7,2
  80a210:	000d883a 	mov	r6,zero
  80a214:	080bf1c0 	call	80bf1c <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80a218:	8080030b 	ldhu	r2,12(r16)
  w = _write_r (ptr, fp->_file, buf, n);
  80a21c:	8140038f 	ldh	r5,14(r16)
  80a220:	003fee06 	br	80a1dc <__swrite+0x38>

0080a224 <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
  80a224:	defffe04 	addi	sp,sp,-8
  80a228:	dc000015 	stw	r16,0(sp)
  80a22c:	2821883a 	mov	r16,r5
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  80a230:	2940038f 	ldh	r5,14(r5)
{
  80a234:	dfc00115 	stw	ra,4(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  80a238:	080bf1c0 	call	80bf1c <_lseek_r>
  if (ret == -1L)
  80a23c:	10ffffd8 	cmpnei	r3,r2,-1
  80a240:	18000826 	beq	r3,zero,80a264 <__sseek+0x40>
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
  80a244:	80c0030b 	ldhu	r3,12(r16)
      fp->_offset = ret;
  80a248:	80801415 	stw	r2,80(r16)
      fp->_flags |= __SOFF;
  80a24c:	18c40014 	ori	r3,r3,4096
  80a250:	80c0030d 	sth	r3,12(r16)
    }
  return ret;
}
  80a254:	dfc00117 	ldw	ra,4(sp)
  80a258:	dc000017 	ldw	r16,0(sp)
  80a25c:	dec00204 	addi	sp,sp,8
  80a260:	f800283a 	ret
    fp->_flags &= ~__SOFF;
  80a264:	80c0030b 	ldhu	r3,12(r16)
  80a268:	18fbffcc 	andi	r3,r3,61439
  80a26c:	80c0030d 	sth	r3,12(r16)
}
  80a270:	dfc00117 	ldw	ra,4(sp)
  80a274:	dc000017 	ldw	r16,0(sp)
  80a278:	dec00204 	addi	sp,sp,8
  80a27c:	f800283a 	ret

0080a280 <__sclose>:
__sclose (struct _reent *ptr,
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
  80a280:	2940038f 	ldh	r5,14(r5)
  80a284:	080b9001 	jmpi	80b900 <_close_r>

0080a288 <strcmp>:
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
  80a288:	2144b03a 	or	r2,r4,r5
  80a28c:	108000cc 	andi	r2,r2,3
  80a290:	1000141e 	bne	r2,zero,80a2e4 <strcmp+0x5c>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
  80a294:	20800017 	ldw	r2,0(r4)
  80a298:	28c00017 	ldw	r3,0(r5)
  80a29c:	10c0111e 	bne	r2,r3,80a2e4 <strcmp+0x5c>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
  80a2a0:	01ffbff4 	movhi	r7,65279
  80a2a4:	01a02074 	movhi	r6,32897
  80a2a8:	39ffbfc4 	addi	r7,r7,-257
  80a2ac:	31a02004 	addi	r6,r6,-32640
  80a2b0:	00000306 	br	80a2c0 <strcmp+0x38>
      while (*a1 == *a2)
  80a2b4:	20800017 	ldw	r2,0(r4)
  80a2b8:	28c00017 	ldw	r3,0(r5)
  80a2bc:	10c0091e 	bne	r2,r3,80a2e4 <strcmp+0x5c>
          if (DETECTNULL (*a1))
  80a2c0:	11c7883a 	add	r3,r2,r7
  80a2c4:	0084303a 	nor	r2,zero,r2
  80a2c8:	1884703a 	and	r2,r3,r2
  80a2cc:	1184703a 	and	r2,r2,r6
	    return 0;

          a1++;
  80a2d0:	21000104 	addi	r4,r4,4
          a2++;
  80a2d4:	29400104 	addi	r5,r5,4
          if (DETECTNULL (*a1))
  80a2d8:	103ff626 	beq	r2,zero,80a2b4 <strcmp+0x2c>
	    return 0;
  80a2dc:	0005883a 	mov	r2,zero
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80a2e0:	f800283a 	ret
  while (*s1 != '\0' && *s1 == *s2)
  80a2e4:	20c00003 	ldbu	r3,0(r4)
  80a2e8:	18803fcc 	andi	r2,r3,255
  80a2ec:	1080201c 	xori	r2,r2,128
  80a2f0:	10bfe004 	addi	r2,r2,-128
  80a2f4:	1000071e 	bne	r2,zero,80a314 <strcmp+0x8c>
  80a2f8:	00000a06 	br	80a324 <strcmp+0x9c>
  80a2fc:	20c00003 	ldbu	r3,0(r4)
      s2++;
  80a300:	29400044 	addi	r5,r5,1
  while (*s1 != '\0' && *s1 == *s2)
  80a304:	18803fcc 	andi	r2,r3,255
  80a308:	1080201c 	xori	r2,r2,128
  80a30c:	10bfe004 	addi	r2,r2,-128
  80a310:	10000726 	beq	r2,zero,80a330 <strcmp+0xa8>
  80a314:	29800007 	ldb	r6,0(r5)
      s1++;
  80a318:	21000044 	addi	r4,r4,1
  while (*s1 != '\0' && *s1 == *s2)
  80a31c:	30bff726 	beq	r6,r2,80a2fc <strcmp+0x74>
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
  80a320:	18803fcc 	andi	r2,r3,255
  80a324:	28c00003 	ldbu	r3,0(r5)
  80a328:	10c5c83a 	sub	r2,r2,r3
  80a32c:	f800283a 	ret
  80a330:	28c00003 	ldbu	r3,0(r5)
  80a334:	0005883a 	mov	r2,zero
  80a338:	10c5c83a 	sub	r2,r2,r3
  80a33c:	f800283a 	ret

0080a340 <__sprint_r.part.0>:
	if (fp->_flags2 & __SWID) {
  80a340:	28801917 	ldw	r2,100(r5)
__sprint_r (struct _reent *ptr,
  80a344:	defff604 	addi	sp,sp,-40
  80a348:	dcc00315 	stw	r19,12(sp)
  80a34c:	dfc00915 	stw	ra,36(sp)
  80a350:	df000815 	stw	fp,32(sp)
  80a354:	ddc00715 	stw	r23,28(sp)
  80a358:	dd800615 	stw	r22,24(sp)
  80a35c:	dd400515 	stw	r21,20(sp)
  80a360:	dd000415 	stw	r20,16(sp)
  80a364:	dc800215 	stw	r18,8(sp)
  80a368:	dc400115 	stw	r17,4(sp)
  80a36c:	dc000015 	stw	r16,0(sp)
	if (fp->_flags2 & __SWID) {
  80a370:	1088000c 	andi	r2,r2,8192
__sprint_r (struct _reent *ptr,
  80a374:	3027883a 	mov	r19,r6
	if (fp->_flags2 & __SWID) {
  80a378:	10002c26 	beq	r2,zero,80a42c <__sprint_r.part.0+0xec>
		for (; uio->uio_resid != 0;
  80a37c:	30800217 	ldw	r2,8(r6)
		iov = uio->uio_iov;
  80a380:	35000017 	ldw	r20,0(r6)
  80a384:	2821883a 	mov	r16,r5
  80a388:	2023883a 	mov	r17,r4
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a38c:	05bfff04 	movi	r22,-4
		for (; uio->uio_resid != 0;
  80a390:	10002426 	beq	r2,zero,80a424 <__sprint_r.part.0+0xe4>
			len = iov->iov_len / sizeof (wchar_t);
  80a394:	a5400117 	ldw	r21,4(r20)
			p = (wchar_t *) iov->iov_base;
  80a398:	a5c00017 	ldw	r23,0(r20)
			len = iov->iov_len / sizeof (wchar_t);
  80a39c:	a824d0ba 	srli	r18,r21,2
			for (i = 0; i < len; i++) {
  80a3a0:	90001b26 	beq	r18,zero,80a410 <__sprint_r.part.0+0xd0>
  80a3a4:	0039883a 	mov	fp,zero
  80a3a8:	00000206 	br	80a3b4 <__sprint_r.part.0+0x74>
  80a3ac:	bdc00104 	addi	r23,r23,4
  80a3b0:	97001626 	beq	r18,fp,80a40c <__sprint_r.part.0+0xcc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a3b4:	b9400017 	ldw	r5,0(r23)
  80a3b8:	800d883a 	mov	r6,r16
  80a3bc:	8809883a 	mov	r4,r17
  80a3c0:	080bddc0 	call	80bddc <_fputwc_r>
  80a3c4:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80a3c8:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80a3cc:	103ff726 	beq	r2,zero,80a3ac <__sprint_r.part.0+0x6c>
					err = -1;
  80a3d0:	00bfffc4 	movi	r2,-1
	uio->uio_resid = 0;
  80a3d4:	98000215 	stw	zero,8(r19)
	uio->uio_iovcnt = 0;
  80a3d8:	98000115 	stw	zero,4(r19)
}
  80a3dc:	dfc00917 	ldw	ra,36(sp)
  80a3e0:	df000817 	ldw	fp,32(sp)
  80a3e4:	ddc00717 	ldw	r23,28(sp)
  80a3e8:	dd800617 	ldw	r22,24(sp)
  80a3ec:	dd400517 	ldw	r21,20(sp)
  80a3f0:	dd000417 	ldw	r20,16(sp)
  80a3f4:	dcc00317 	ldw	r19,12(sp)
  80a3f8:	dc800217 	ldw	r18,8(sp)
  80a3fc:	dc400117 	ldw	r17,4(sp)
  80a400:	dc000017 	ldw	r16,0(sp)
  80a404:	dec00a04 	addi	sp,sp,40
  80a408:	f800283a 	ret
  80a40c:	98800217 	ldw	r2,8(r19)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a410:	adaa703a 	and	r21,r21,r22
  80a414:	1545c83a 	sub	r2,r2,r21
  80a418:	98800215 	stw	r2,8(r19)
  80a41c:	a5000204 	addi	r20,r20,8
		for (; uio->uio_resid != 0;
  80a420:	103fdc1e 	bne	r2,zero,80a394 <__sprint_r.part.0+0x54>
	register int err = 0;
  80a424:	0005883a 	mov	r2,zero
  80a428:	003fea06 	br	80a3d4 <__sprint_r.part.0+0x94>
		err = __sfvwrite_r(ptr, fp, uio);
  80a42c:	08074440 	call	807444 <__sfvwrite_r>
  80a430:	003fe806 	br	80a3d4 <__sprint_r.part.0+0x94>

0080a434 <__sprint_r>:
	if (uio->uio_resid == 0) {
  80a434:	30c00217 	ldw	r3,8(r6)
  80a438:	18000126 	beq	r3,zero,80a440 <__sprint_r+0xc>
}
  80a43c:	080a3401 	jmpi	80a340 <__sprint_r.part.0>
		uio->uio_iovcnt = 0;
  80a440:	30000115 	stw	zero,4(r6)
}
  80a444:	0005883a 	mov	r2,zero
  80a448:	f800283a 	ret

0080a44c <___vfiprintf_internal_r>:
{
  80a44c:	deffcf04 	addi	sp,sp,-196
  80a450:	dd802d15 	stw	r22,180(sp)
  80a454:	dd402c15 	stw	r21,176(sp)
  80a458:	dd002b15 	stw	r20,172(sp)
  80a45c:	dfc03015 	stw	ra,192(sp)
  80a460:	df002f15 	stw	fp,188(sp)
  80a464:	ddc02e15 	stw	r23,184(sp)
  80a468:	dcc02a15 	stw	r19,168(sp)
  80a46c:	dc802915 	stw	r18,164(sp)
  80a470:	dc402815 	stw	r17,160(sp)
  80a474:	dc002715 	stw	r16,156(sp)
  80a478:	d9c00415 	stw	r7,16(sp)
  80a47c:	202d883a 	mov	r22,r4
  80a480:	282b883a 	mov	r21,r5
  80a484:	3029883a 	mov	r20,r6
	CHECK_INIT (data, fp);
  80a488:	20000226 	beq	r4,zero,80a494 <___vfiprintf_internal_r+0x48>
  80a48c:	20800e17 	ldw	r2,56(r4)
  80a490:	1001bd26 	beq	r2,zero,80ab88 <___vfiprintf_internal_r+0x73c>
	ORIENT(fp, -1);
  80a494:	a880030b 	ldhu	r2,12(r21)
  80a498:	10c8000c 	andi	r3,r2,8192
  80a49c:	1800061e 	bne	r3,zero,80a4b8 <___vfiprintf_internal_r+0x6c>
	_newlib_flockfile_start (fp);
  80a4a0:	a8c01917 	ldw	r3,100(r21)
	ORIENT(fp, -1);
  80a4a4:	0137ffc4 	movi	r4,-8193
  80a4a8:	10880014 	ori	r2,r2,8192
  80a4ac:	1906703a 	and	r3,r3,r4
  80a4b0:	a880030d 	sth	r2,12(r21)
  80a4b4:	a8c01915 	stw	r3,100(r21)
	if (cantwrite (data, fp)) {
  80a4b8:	10c0020c 	andi	r3,r2,8
  80a4bc:	18010826 	beq	r3,zero,80a8e0 <___vfiprintf_internal_r+0x494>
  80a4c0:	a8c00417 	ldw	r3,16(r21)
  80a4c4:	18010626 	beq	r3,zero,80a8e0 <___vfiprintf_internal_r+0x494>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a4c8:	1080068c 	andi	r2,r2,26
  80a4cc:	10800298 	cmpnei	r2,r2,10
  80a4d0:	10010b26 	beq	r2,zero,80a900 <___vfiprintf_internal_r+0x4b4>
	uio.uio_iov = iovp = iov;
  80a4d4:	dc801704 	addi	r18,sp,92
  80a4d8:	dc800a15 	stw	r18,40(sp)
	uio.uio_resid = 0;
  80a4dc:	d8000c15 	stw	zero,48(sp)
	uio.uio_iovcnt = 0;
  80a4e0:	d8000b15 	stw	zero,44(sp)
	uio.uio_iov = iovp = iov;
  80a4e4:	9021883a 	mov	r16,r18
	char *xdigs = NULL;	/* digits for [xX] conversion */
  80a4e8:	d8000515 	stw	zero,20(sp)
	ret = 0;
  80a4ec:	d8000115 	stw	zero,4(sp)
                while (*fmt != '\0' && *fmt != '%')
  80a4f0:	a0800007 	ldb	r2,0(r20)
  80a4f4:	1000e826 	beq	r2,zero,80a898 <___vfiprintf_internal_r+0x44c>
  80a4f8:	a023883a 	mov	r17,r20
  80a4fc:	00000306 	br	80a50c <___vfiprintf_internal_r+0xc0>
  80a500:	88800047 	ldb	r2,1(r17)
                    fmt += 1;
  80a504:	8c400044 	addi	r17,r17,1
                while (*fmt != '\0' && *fmt != '%')
  80a508:	10013326 	beq	r2,zero,80a9d8 <___vfiprintf_internal_r+0x58c>
  80a50c:	10800958 	cmpnei	r2,r2,37
  80a510:	103ffb1e 	bne	r2,zero,80a500 <___vfiprintf_internal_r+0xb4>
		if ((m = fmt - cp) != 0) {
  80a514:	8d27c83a 	sub	r19,r17,r20
  80a518:	8d01311e 	bne	r17,r20,80a9e0 <___vfiprintf_internal_r+0x594>
                if (*fmt == '\0')
  80a51c:	88800003 	ldbu	r2,0(r17)
  80a520:	10803fcc 	andi	r2,r2,255
  80a524:	1080201c 	xori	r2,r2,128
  80a528:	10bfe004 	addi	r2,r2,-128
  80a52c:	1000da26 	beq	r2,zero,80a898 <___vfiprintf_internal_r+0x44c>
		fmt++;		/* skip over '%' */
  80a530:	88800047 	ldb	r2,1(r17)
  80a534:	8d000044 	addi	r20,r17,1
		sign = '\0';
  80a538:	d8000945 	stb	zero,37(sp)
rflag:		ch = *fmt++;
  80a53c:	000b883a 	mov	r5,zero
  80a540:	000d883a 	mov	r6,zero
		prec = -1;
  80a544:	023fffc4 	movi	r8,-1
		width = 0;
  80a548:	0023883a 	mov	r17,zero
		flags = 0;
  80a54c:	001b883a 	mov	r13,zero
rflag:		ch = *fmt++;
  80a550:	a5000044 	addi	r20,r20,1
reswitch:	switch (ch) {
  80a554:	10fff804 	addi	r3,r2,-32
  80a558:	19001668 	cmpgeui	r4,r3,89
  80a55c:	20006c1e 	bne	r4,zero,80a710 <___vfiprintf_internal_r+0x2c4>
  80a560:	180690ba 	slli	r3,r3,2
  80a564:	01002074 	movhi	r4,129
  80a568:	1909883a 	add	r4,r3,r4
  80a56c:	20e95d17 	ldw	r3,-23180(r4)
  80a570:	1800683a 	jmp	r3
  80a574:	0080aeb0 	cmpltui	r2,zero,698
  80a578:	0080a710 	cmplti	r2,zero,668
  80a57c:	0080a710 	cmplti	r2,zero,668
  80a580:	0080aea4 	muli	r2,zero,698
  80a584:	0080a710 	cmplti	r2,zero,668
  80a588:	0080a710 	cmplti	r2,zero,668
  80a58c:	0080a710 	cmplti	r2,zero,668
  80a590:	0080a710 	cmplti	r2,zero,668
  80a594:	0080a710 	cmplti	r2,zero,668
  80a598:	0080a710 	cmplti	r2,zero,668
  80a59c:	0080ae7c 	xorhi	r2,zero,697
  80a5a0:	0080ae6c 	andhi	r2,zero,697
  80a5a4:	0080a710 	cmplti	r2,zero,668
  80a5a8:	0080ae54 	movui	r2,697
  80a5ac:	0080ae08 	cmpgei	r2,zero,696
  80a5b0:	0080a710 	cmplti	r2,zero,668
  80a5b4:	0080adfc 	xorhi	r2,zero,695
  80a5b8:	0080a6d8 	cmpnei	r2,zero,667
  80a5bc:	0080a6d8 	cmpnei	r2,zero,667
  80a5c0:	0080a6d8 	cmpnei	r2,zero,667
  80a5c4:	0080a6d8 	cmpnei	r2,zero,667
  80a5c8:	0080a6d8 	cmpnei	r2,zero,667
  80a5cc:	0080a6d8 	cmpnei	r2,zero,667
  80a5d0:	0080a6d8 	cmpnei	r2,zero,667
  80a5d4:	0080a6d8 	cmpnei	r2,zero,667
  80a5d8:	0080a6d8 	cmpnei	r2,zero,667
  80a5dc:	0080a710 	cmplti	r2,zero,668
  80a5e0:	0080a710 	cmplti	r2,zero,668
  80a5e4:	0080a710 	cmplti	r2,zero,668
  80a5e8:	0080a710 	cmplti	r2,zero,668
  80a5ec:	0080a710 	cmplti	r2,zero,668
  80a5f0:	0080a710 	cmplti	r2,zero,668
  80a5f4:	0080a710 	cmplti	r2,zero,668
  80a5f8:	0080a710 	cmplti	r2,zero,668
  80a5fc:	0080a710 	cmplti	r2,zero,668
  80a600:	0080a710 	cmplti	r2,zero,668
  80a604:	0080acf8 	rdprs	r2,zero,691
  80a608:	0080a710 	cmplti	r2,zero,668
  80a60c:	0080a710 	cmplti	r2,zero,668
  80a610:	0080a710 	cmplti	r2,zero,668
  80a614:	0080a710 	cmplti	r2,zero,668
  80a618:	0080a710 	cmplti	r2,zero,668
  80a61c:	0080a710 	cmplti	r2,zero,668
  80a620:	0080a710 	cmplti	r2,zero,668
  80a624:	0080a710 	cmplti	r2,zero,668
  80a628:	0080a710 	cmplti	r2,zero,668
  80a62c:	0080a710 	cmplti	r2,zero,668
  80a630:	0080a970 	cmpltui	r2,zero,677
  80a634:	0080a710 	cmplti	r2,zero,668
  80a638:	0080a710 	cmplti	r2,zero,668
  80a63c:	0080a710 	cmplti	r2,zero,668
  80a640:	0080a710 	cmplti	r2,zero,668
  80a644:	0080a710 	cmplti	r2,zero,668
  80a648:	0080a948 	cmpgei	r2,zero,677
  80a64c:	0080a710 	cmplti	r2,zero,668
  80a650:	0080a710 	cmplti	r2,zero,668
  80a654:	0080af04 	movi	r2,700
  80a658:	0080a710 	cmplti	r2,zero,668
  80a65c:	0080a710 	cmplti	r2,zero,668
  80a660:	0080a710 	cmplti	r2,zero,668
  80a664:	0080a710 	cmplti	r2,zero,668
  80a668:	0080a710 	cmplti	r2,zero,668
  80a66c:	0080a710 	cmplti	r2,zero,668
  80a670:	0080a710 	cmplti	r2,zero,668
  80a674:	0080a710 	cmplti	r2,zero,668
  80a678:	0080a710 	cmplti	r2,zero,668
  80a67c:	0080a710 	cmplti	r2,zero,668
  80a680:	0080aedc 	xori	r2,zero,699
  80a684:	0080ab90 	cmplti	r2,zero,686
  80a688:	0080a710 	cmplti	r2,zero,668
  80a68c:	0080a710 	cmplti	r2,zero,668
  80a690:	0080a710 	cmplti	r2,zero,668
  80a694:	0080ac04 	movi	r2,688
  80a698:	0080ab90 	cmplti	r2,zero,686
  80a69c:	0080a710 	cmplti	r2,zero,668
  80a6a0:	0080a710 	cmplti	r2,zero,668
  80a6a4:	0080af88 	cmpgei	r2,zero,702
  80a6a8:	0080a710 	cmplti	r2,zero,668
  80a6ac:	0080af4c 	andi	r2,zero,701
  80a6b0:	0080a974 	movhi	r2,677
  80a6b4:	0080acbc 	xorhi	r2,zero,690
  80a6b8:	0080acb0 	cmpltui	r2,zero,690
  80a6bc:	0080a710 	cmplti	r2,zero,668
  80a6c0:	0080ac58 	cmpnei	r2,zero,689
  80a6c4:	0080a710 	cmplti	r2,zero,668
  80a6c8:	0080a94c 	andi	r2,zero,677
  80a6cc:	0080a710 	cmplti	r2,zero,668
  80a6d0:	0080a710 	cmplti	r2,zero,668
  80a6d4:	0080ac10 	cmplti	r2,zero,688
			n = 0;
  80a6d8:	0023883a 	mov	r17,zero
  80a6dc:	113ff404 	addi	r4,r2,-48
				n = 10 * n + to_digit (ch);
  80a6e0:	880690ba 	slli	r3,r17,2
				ch = *fmt++;
  80a6e4:	a0800007 	ldb	r2,0(r20)
  80a6e8:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  80a6ec:	1c63883a 	add	r17,r3,r17
  80a6f0:	8c63883a 	add	r17,r17,r17
  80a6f4:	2463883a 	add	r17,r4,r17
			} while (is_digit (ch));
  80a6f8:	113ff404 	addi	r4,r2,-48
  80a6fc:	20c002b0 	cmpltui	r3,r4,10
  80a700:	183ff71e 	bne	r3,zero,80a6e0 <___vfiprintf_internal_r+0x294>
reswitch:	switch (ch) {
  80a704:	10fff804 	addi	r3,r2,-32
  80a708:	19001668 	cmpgeui	r4,r3,89
  80a70c:	203f9426 	beq	r4,zero,80a560 <___vfiprintf_internal_r+0x114>
  80a710:	29403fcc 	andi	r5,r5,255
  80a714:	2803ed1e 	bne	r5,zero,80b6cc <___vfiprintf_internal_r+0x1280>
			if (ch == '\0')
  80a718:	10005f26 	beq	r2,zero,80a898 <___vfiprintf_internal_r+0x44c>
			*cp = ch;
  80a71c:	d8800d05 	stb	r2,52(sp)
			sign = '\0';
  80a720:	d8000945 	stb	zero,37(sp)
			break;
  80a724:	05c00044 	movi	r23,1
			size = 1;
  80a728:	07000044 	movi	fp,1
			cp = buf;
  80a72c:	dcc00d04 	addi	r19,sp,52
			cp = buf + BUF;
  80a730:	db400015 	stw	r13,0(sp)
  80a734:	0011883a 	mov	r8,zero
		if (flags & HEXPREFIX)
  80a738:	d8800017 	ldw	r2,0(sp)
  80a73c:	1380008c 	andi	r14,r2,2
  80a740:	70000126 	beq	r14,zero,80a748 <___vfiprintf_internal_r+0x2fc>
			realsz+= 2;
  80a744:	bdc00084 	addi	r23,r23,2
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a748:	d8800017 	ldw	r2,0(sp)
			PRINT (&sign, 1);
  80a74c:	d9000b17 	ldw	r4,44(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a750:	1340210c 	andi	r13,r2,132
			PRINT (&sign, 1);
  80a754:	21800044 	addi	r6,r4,1
  80a758:	d8800c17 	ldw	r2,48(sp)
  80a75c:	300b883a 	mov	r5,r6
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  80a760:	6800021e 	bne	r13,zero,80a76c <___vfiprintf_internal_r+0x320>
			PAD (width - realsz, blanks);
  80a764:	8dc7c83a 	sub	r3,r17,r23
  80a768:	00c2e216 	blt	zero,r3,80b2f4 <___vfiprintf_internal_r+0xea8>
		if (sign)
  80a76c:	d8c00947 	ldb	r3,37(sp)
			PRINT (&sign, 1);
  80a770:	81800204 	addi	r6,r16,8
		if (sign)
  80a774:	18000d26 	beq	r3,zero,80a7ac <___vfiprintf_internal_r+0x360>
			PRINT (&sign, 1);
  80a778:	d8c00944 	addi	r3,sp,37
  80a77c:	10800044 	addi	r2,r2,1
  80a780:	80c00015 	stw	r3,0(r16)
  80a784:	00c00044 	movi	r3,1
  80a788:	80c00115 	stw	r3,4(r16)
  80a78c:	d8800c15 	stw	r2,48(sp)
  80a790:	d9400b15 	stw	r5,44(sp)
  80a794:	28c00208 	cmpgei	r3,r5,8
  80a798:	18029a1e 	bne	r3,zero,80b204 <___vfiprintf_internal_r+0xdb8>
			PRINT (ox, 2);
  80a79c:	2809883a 	mov	r4,r5
  80a7a0:	3021883a 	mov	r16,r6
  80a7a4:	29400044 	addi	r5,r5,1
  80a7a8:	31800204 	addi	r6,r6,8
		if (flags & HEXPREFIX)
  80a7ac:	70001826 	beq	r14,zero,80a810 <___vfiprintf_internal_r+0x3c4>
			PRINT (ox, 2);
  80a7b0:	d8c00984 	addi	r3,sp,38
  80a7b4:	10800084 	addi	r2,r2,2
  80a7b8:	80c00015 	stw	r3,0(r16)
  80a7bc:	00c00084 	movi	r3,2
  80a7c0:	80c00115 	stw	r3,4(r16)
  80a7c4:	d8800c15 	stw	r2,48(sp)
  80a7c8:	d9400b15 	stw	r5,44(sp)
  80a7cc:	28c00208 	cmpgei	r3,r5,8
  80a7d0:	1802a426 	beq	r3,zero,80b264 <___vfiprintf_internal_r+0xe18>
	if (uio->uio_resid == 0) {
  80a7d4:	10032226 	beq	r2,zero,80b460 <___vfiprintf_internal_r+0x1014>
  80a7d8:	d9800a04 	addi	r6,sp,40
  80a7dc:	a80b883a 	mov	r5,r21
  80a7e0:	b009883a 	mov	r4,r22
  80a7e4:	da000315 	stw	r8,12(sp)
  80a7e8:	db400215 	stw	r13,8(sp)
  80a7ec:	080a3400 	call	80a340 <__sprint_r.part.0>
			PRINT (ox, 2);
  80a7f0:	10002b1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  80a7f4:	d9000b17 	ldw	r4,44(sp)
  80a7f8:	d8800c17 	ldw	r2,48(sp)
			PRINT (ox, 2);
  80a7fc:	da000317 	ldw	r8,12(sp)
  80a800:	db400217 	ldw	r13,8(sp)
		PRINT (cp, size);
  80a804:	d9801904 	addi	r6,sp,100
  80a808:	21400044 	addi	r5,r4,1
			PRINT (ox, 2);
  80a80c:	9021883a 	mov	r16,r18
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  80a810:	6b402018 	cmpnei	r13,r13,128
  80a814:	6801e526 	beq	r13,zero,80afac <___vfiprintf_internal_r+0xb60>
		PAD (dprec - size, zeroes);
  80a818:	4711c83a 	sub	r8,r8,fp
  80a81c:	02022416 	blt	zero,r8,80b0b0 <___vfiprintf_internal_r+0xc64>
		PRINT (cp, size);
  80a820:	e085883a 	add	r2,fp,r2
  80a824:	d9400b15 	stw	r5,44(sp)
  80a828:	84c00015 	stw	r19,0(r16)
  80a82c:	87000115 	stw	fp,4(r16)
  80a830:	d8800c15 	stw	r2,48(sp)
  80a834:	29400210 	cmplti	r5,r5,8
  80a838:	2800081e 	bne	r5,zero,80a85c <___vfiprintf_internal_r+0x410>
	if (uio->uio_resid == 0) {
  80a83c:	10009826 	beq	r2,zero,80aaa0 <___vfiprintf_internal_r+0x654>
  80a840:	d9800a04 	addi	r6,sp,40
  80a844:	a80b883a 	mov	r5,r21
  80a848:	b009883a 	mov	r4,r22
  80a84c:	080a3400 	call	80a340 <__sprint_r.part.0>
		PRINT (cp, size);
  80a850:	1000131e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  80a854:	d8800c17 	ldw	r2,48(sp)
		PRINT (cp, size);
  80a858:	900d883a 	mov	r6,r18
		if (flags & LADJUST)
  80a85c:	d8c00017 	ldw	r3,0(sp)
  80a860:	1cc0010c 	andi	r19,r3,4
  80a864:	98000226 	beq	r19,zero,80a870 <___vfiprintf_internal_r+0x424>
			PAD (width - realsz, blanks);
  80a868:	8de1c83a 	sub	r16,r17,r23
  80a86c:	04009316 	blt	zero,r16,80aabc <___vfiprintf_internal_r+0x670>
		ret += width > realsz ? width : realsz;
  80a870:	8dc0010e 	bge	r17,r23,80a878 <___vfiprintf_internal_r+0x42c>
  80a874:	b823883a 	mov	r17,r23
  80a878:	d8c00117 	ldw	r3,4(sp)
  80a87c:	1c47883a 	add	r3,r3,r17
  80a880:	d8c00115 	stw	r3,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80a884:	1002551e 	bne	r2,zero,80b1dc <___vfiprintf_internal_r+0xd90>
                while (*fmt != '\0' && *fmt != '%')
  80a888:	a0800007 	ldb	r2,0(r20)
		FLUSH ();	/* copy out the I/O vectors */
  80a88c:	d8000b15 	stw	zero,44(sp)
  80a890:	9021883a 	mov	r16,r18
                while (*fmt != '\0' && *fmt != '%')
  80a894:	103f181e 	bne	r2,zero,80a4f8 <___vfiprintf_internal_r+0xac>
	FLUSH ();
  80a898:	d8800c17 	ldw	r2,48(sp)
  80a89c:	10038d1e 	bne	r2,zero,80b6d4 <___vfiprintf_internal_r+0x1288>
	return (__sferror (fp) ? EOF : ret);
  80a8a0:	a880030b 	ldhu	r2,12(r21)
  80a8a4:	1080100c 	andi	r2,r2,64
  80a8a8:	1003a51e 	bne	r2,zero,80b740 <___vfiprintf_internal_r+0x12f4>
}
  80a8ac:	d8800117 	ldw	r2,4(sp)
  80a8b0:	dfc03017 	ldw	ra,192(sp)
  80a8b4:	df002f17 	ldw	fp,188(sp)
  80a8b8:	ddc02e17 	ldw	r23,184(sp)
  80a8bc:	dd802d17 	ldw	r22,180(sp)
  80a8c0:	dd402c17 	ldw	r21,176(sp)
  80a8c4:	dd002b17 	ldw	r20,172(sp)
  80a8c8:	dcc02a17 	ldw	r19,168(sp)
  80a8cc:	dc802917 	ldw	r18,164(sp)
  80a8d0:	dc402817 	ldw	r17,160(sp)
  80a8d4:	dc002717 	ldw	r16,156(sp)
  80a8d8:	dec03104 	addi	sp,sp,196
  80a8dc:	f800283a 	ret
	if (cantwrite (data, fp)) {
  80a8e0:	a80b883a 	mov	r5,r21
  80a8e4:	b009883a 	mov	r4,r22
  80a8e8:	0804ed00 	call	804ed0 <__swsetup_r>
  80a8ec:	1003941e 	bne	r2,zero,80b740 <___vfiprintf_internal_r+0x12f4>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a8f0:	a880030b 	ldhu	r2,12(r21)
  80a8f4:	1080068c 	andi	r2,r2,26
  80a8f8:	10800298 	cmpnei	r2,r2,10
  80a8fc:	103ef51e 	bne	r2,zero,80a4d4 <___vfiprintf_internal_r+0x88>
  80a900:	a880038f 	ldh	r2,14(r21)
  80a904:	103ef316 	blt	r2,zero,80a4d4 <___vfiprintf_internal_r+0x88>
		return (__sbprintf (data, fp, fmt0, ap));
  80a908:	d9c00417 	ldw	r7,16(sp)
  80a90c:	a00d883a 	mov	r6,r20
  80a910:	a80b883a 	mov	r5,r21
  80a914:	b009883a 	mov	r4,r22
}
  80a918:	dfc03017 	ldw	ra,192(sp)
  80a91c:	df002f17 	ldw	fp,188(sp)
  80a920:	ddc02e17 	ldw	r23,184(sp)
  80a924:	dd802d17 	ldw	r22,180(sp)
  80a928:	dd402c17 	ldw	r21,176(sp)
  80a92c:	dd002b17 	ldw	r20,172(sp)
  80a930:	dcc02a17 	ldw	r19,168(sp)
  80a934:	dc802917 	ldw	r18,164(sp)
  80a938:	dc402817 	ldw	r17,160(sp)
  80a93c:	dc002717 	ldw	r16,156(sp)
  80a940:	dec03104 	addi	sp,sp,196
		return (__sbprintf (data, fp, fmt0, ap));
  80a944:	080b7a81 	jmpi	80b7a8 <__sbprintf>
			flags |= LONGINT;
  80a948:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80a94c:	6880080c 	andi	r2,r13,32
  80a950:	10004726 	beq	r2,zero,80aa70 <___vfiprintf_internal_r+0x624>
  80a954:	d8c00417 	ldw	r3,16(sp)
			base = DEC;
  80a958:	00800044 	movi	r2,1
			_uquad = UARG ();
  80a95c:	1dc00017 	ldw	r23,0(r3)
  80a960:	1f000117 	ldw	fp,4(r3)
  80a964:	18c00204 	addi	r3,r3,8
  80a968:	d8c00415 	stw	r3,16(sp)
  80a96c:	00000906 	br	80a994 <___vfiprintf_internal_r+0x548>
			flags |= LONGINT;
  80a970:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80a974:	6880080c 	andi	r2,r13,32
  80a978:	10003126 	beq	r2,zero,80aa40 <___vfiprintf_internal_r+0x5f4>
  80a97c:	d8c00417 	ldw	r3,16(sp)
			base = OCT;
  80a980:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  80a984:	1dc00017 	ldw	r23,0(r3)
  80a988:	1f000117 	ldw	fp,4(r3)
  80a98c:	18c00204 	addi	r3,r3,8
  80a990:	d8c00415 	stw	r3,16(sp)
nosign:			sign = '\0';
  80a994:	d8000945 	stb	zero,37(sp)
number:			if ((dprec = prec) >= 0)
  80a998:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  80a99c:	001d883a 	mov	r14,zero
number:			if ((dprec = prec) >= 0)
  80a9a0:	1800f01e 	bne	r3,zero,80ad64 <___vfiprintf_internal_r+0x918>
				flags &= ~ZEROPAD;
  80a9a4:	04ffdfc4 	movi	r19,-129
  80a9a8:	6cc8703a 	and	r4,r13,r19
			if (_uquad != 0 || prec != 0) {
  80a9ac:	bf06b03a 	or	r3,r23,fp
				flags &= ~ZEROPAD;
  80a9b0:	d9000015 	stw	r4,0(sp)
			if (_uquad != 0 || prec != 0) {
  80a9b4:	1802301e 	bne	r3,zero,80b278 <___vfiprintf_internal_r+0xe2c>
  80a9b8:	4001f31e 	bne	r8,zero,80b188 <___vfiprintf_internal_r+0xd3c>
                       else if (base == OCT && (flags & ALT))
  80a9bc:	10029e1e 	bne	r2,zero,80b438 <___vfiprintf_internal_r+0xfec>
  80a9c0:	6f00004c 	andi	fp,r13,1
  80a9c4:	e002bc26 	beq	fp,zero,80b4b8 <___vfiprintf_internal_r+0x106c>
                         *--cp = '0';
  80a9c8:	00800c04 	movi	r2,48
  80a9cc:	d88016c5 	stb	r2,91(sp)
  80a9d0:	dcc016c4 	addi	r19,sp,91
  80a9d4:	00010006 	br	80add8 <___vfiprintf_internal_r+0x98c>
		if ((m = fmt - cp) != 0) {
  80a9d8:	8d27c83a 	sub	r19,r17,r20
  80a9dc:	8d3fae26 	beq	r17,r20,80a898 <___vfiprintf_internal_r+0x44c>
			PRINT (cp, m);
  80a9e0:	d8c00c17 	ldw	r3,48(sp)
  80a9e4:	d8800b17 	ldw	r2,44(sp)
  80a9e8:	85000015 	stw	r20,0(r16)
  80a9ec:	98c7883a 	add	r3,r19,r3
  80a9f0:	10800044 	addi	r2,r2,1
  80a9f4:	d8800b15 	stw	r2,44(sp)
  80a9f8:	84c00115 	stw	r19,4(r16)
  80a9fc:	d8c00c15 	stw	r3,48(sp)
  80aa00:	10800208 	cmpgei	r2,r2,8
  80aa04:	1000061e 	bne	r2,zero,80aa20 <___vfiprintf_internal_r+0x5d4>
  80aa08:	84000204 	addi	r16,r16,8
			ret += m;
  80aa0c:	d8c00117 	ldw	r3,4(sp)
                if (*fmt == '\0')
  80aa10:	88800003 	ldbu	r2,0(r17)
			ret += m;
  80aa14:	1cc7883a 	add	r3,r3,r19
  80aa18:	d8c00115 	stw	r3,4(sp)
  80aa1c:	003ec006 	br	80a520 <___vfiprintf_internal_r+0xd4>
	if (uio->uio_resid == 0) {
  80aa20:	18028126 	beq	r3,zero,80b428 <___vfiprintf_internal_r+0xfdc>
  80aa24:	d9800a04 	addi	r6,sp,40
  80aa28:	a80b883a 	mov	r5,r21
  80aa2c:	b009883a 	mov	r4,r22
  80aa30:	080a3400 	call	80a340 <__sprint_r.part.0>
			PRINT (cp, m);
  80aa34:	103f9a1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80aa38:	9021883a 	mov	r16,r18
  80aa3c:	003ff306 	br	80aa0c <___vfiprintf_internal_r+0x5c0>
			width = GET_ARG (n, ap, int);
  80aa40:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80aa44:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80aa48:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80aa4c:	1002ac1e 	bne	r2,zero,80b500 <___vfiprintf_internal_r+0x10b4>
  80aa50:	6880100c 	andi	r2,r13,64
  80aa54:	1002fb26 	beq	r2,zero,80b644 <___vfiprintf_internal_r+0x11f8>
  80aa58:	d8800417 	ldw	r2,16(sp)
  80aa5c:	0039883a 	mov	fp,zero
  80aa60:	d8c00415 	stw	r3,16(sp)
  80aa64:	15c0000b 	ldhu	r23,0(r2)
			base = OCT;
  80aa68:	0005883a 	mov	r2,zero
  80aa6c:	003fc906 	br	80a994 <___vfiprintf_internal_r+0x548>
			width = GET_ARG (n, ap, int);
  80aa70:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80aa74:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80aa78:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80aa7c:	1002af1e 	bne	r2,zero,80b53c <___vfiprintf_internal_r+0x10f0>
  80aa80:	6880100c 	andi	r2,r13,64
  80aa84:	1002fb26 	beq	r2,zero,80b674 <___vfiprintf_internal_r+0x1228>
  80aa88:	d8800417 	ldw	r2,16(sp)
  80aa8c:	0039883a 	mov	fp,zero
  80aa90:	d8c00415 	stw	r3,16(sp)
  80aa94:	15c0000b 	ldhu	r23,0(r2)
			base = DEC;
  80aa98:	00800044 	movi	r2,1
  80aa9c:	003fbd06 	br	80a994 <___vfiprintf_internal_r+0x548>
		if (flags & LADJUST)
  80aaa0:	d8c00017 	ldw	r3,0(sp)
		uio->uio_iovcnt = 0;
  80aaa4:	d8000b15 	stw	zero,44(sp)
		if (flags & LADJUST)
  80aaa8:	1cc0010c 	andi	r19,r3,4
  80aaac:	98024c26 	beq	r19,zero,80b3e0 <___vfiprintf_internal_r+0xf94>
			PAD (width - realsz, blanks);
  80aab0:	8de1c83a 	sub	r16,r17,r23
  80aab4:	04024a0e 	bge	zero,r16,80b3e0 <___vfiprintf_internal_r+0xf94>
		PRINT (cp, size);
  80aab8:	900d883a 	mov	r6,r18
			PAD (width - realsz, blanks);
  80aabc:	80c00450 	cmplti	r3,r16,17
  80aac0:	d9000b17 	ldw	r4,44(sp)
  80aac4:	01c02074 	movhi	r7,129
  80aac8:	18031a1e 	bne	r3,zero,80b734 <___vfiprintf_internal_r+0x12e8>
  80aacc:	39cb6704 	addi	r7,r7,11676
  80aad0:	04c00404 	movi	r19,16
  80aad4:	00000606 	br	80aaf0 <___vfiprintf_internal_r+0x6a4>
  80aad8:	21400084 	addi	r5,r4,2
  80aadc:	31800204 	addi	r6,r6,8
  80aae0:	1809883a 	mov	r4,r3
  80aae4:	843ffc04 	addi	r16,r16,-16
  80aae8:	80c00448 	cmpgei	r3,r16,17
  80aaec:	18001726 	beq	r3,zero,80ab4c <___vfiprintf_internal_r+0x700>
  80aaf0:	20c00044 	addi	r3,r4,1
  80aaf4:	10800404 	addi	r2,r2,16
  80aaf8:	31c00015 	stw	r7,0(r6)
  80aafc:	34c00115 	stw	r19,4(r6)
  80ab00:	d8800c15 	stw	r2,48(sp)
  80ab04:	d8c00b15 	stw	r3,44(sp)
  80ab08:	19400208 	cmpgei	r5,r3,8
  80ab0c:	283ff226 	beq	r5,zero,80aad8 <___vfiprintf_internal_r+0x68c>
  80ab10:	d9800a04 	addi	r6,sp,40
  80ab14:	a80b883a 	mov	r5,r21
  80ab18:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80ab1c:	10011f26 	beq	r2,zero,80af9c <___vfiprintf_internal_r+0xb50>
  80ab20:	d9c00015 	stw	r7,0(sp)
  80ab24:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80ab28:	103f5d1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80ab2c:	d9000b17 	ldw	r4,44(sp)
  80ab30:	843ffc04 	addi	r16,r16,-16
  80ab34:	80c00448 	cmpgei	r3,r16,17
  80ab38:	d8800c17 	ldw	r2,48(sp)
  80ab3c:	d9c00017 	ldw	r7,0(sp)
  80ab40:	900d883a 	mov	r6,r18
  80ab44:	21400044 	addi	r5,r4,1
  80ab48:	183fe91e 	bne	r3,zero,80aaf0 <___vfiprintf_internal_r+0x6a4>
  80ab4c:	1405883a 	add	r2,r2,r16
  80ab50:	d9400b15 	stw	r5,44(sp)
  80ab54:	31c00015 	stw	r7,0(r6)
  80ab58:	34000115 	stw	r16,4(r6)
  80ab5c:	d8800c15 	stw	r2,48(sp)
  80ab60:	29400210 	cmplti	r5,r5,8
  80ab64:	283f421e 	bne	r5,zero,80a870 <___vfiprintf_internal_r+0x424>
	if (uio->uio_resid == 0) {
  80ab68:	10021d26 	beq	r2,zero,80b3e0 <___vfiprintf_internal_r+0xf94>
  80ab6c:	d9800a04 	addi	r6,sp,40
  80ab70:	a80b883a 	mov	r5,r21
  80ab74:	b009883a 	mov	r4,r22
  80ab78:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80ab7c:	103f481e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  80ab80:	d8800c17 	ldw	r2,48(sp)
  80ab84:	003f3a06 	br	80a870 <___vfiprintf_internal_r+0x424>
	CHECK_INIT (data, fp);
  80ab88:	0806ff80 	call	806ff8 <__sinit>
  80ab8c:	003e4106 	br	80a494 <___vfiprintf_internal_r+0x48>
  80ab90:	29403fcc 	andi	r5,r5,255
  80ab94:	2802da1e 	bne	r5,zero,80b700 <___vfiprintf_internal_r+0x12b4>
			_uquad = SARG ();
  80ab98:	6880080c 	andi	r2,r13,32
  80ab9c:	10005b26 	beq	r2,zero,80ad0c <___vfiprintf_internal_r+0x8c0>
  80aba0:	d8c00417 	ldw	r3,16(sp)
  80aba4:	18800117 	ldw	r2,4(r3)
  80aba8:	1dc00017 	ldw	r23,0(r3)
  80abac:	18c00204 	addi	r3,r3,8
  80abb0:	d8c00415 	stw	r3,16(sp)
  80abb4:	1039883a 	mov	fp,r2
			if ((quad_t)_uquad < 0)
  80abb8:	10006016 	blt	r2,zero,80ad3c <___vfiprintf_internal_r+0x8f0>
number:			if ((dprec = prec) >= 0)
  80abbc:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  80abc0:	db800943 	ldbu	r14,37(sp)
number:			if ((dprec = prec) >= 0)
  80abc4:	10000626 	beq	r2,zero,80abe0 <___vfiprintf_internal_r+0x794>
				flags &= ~ZEROPAD;
  80abc8:	04ffdfc4 	movi	r19,-129
  80abcc:	6cc6703a 	and	r3,r13,r19
			if (_uquad != 0 || prec != 0) {
  80abd0:	bf04b03a 	or	r2,r23,fp
				flags &= ~ZEROPAD;
  80abd4:	d8c00015 	stw	r3,0(sp)
			if (_uquad != 0 || prec != 0) {
  80abd8:	10021626 	beq	r2,zero,80b434 <___vfiprintf_internal_r+0xfe8>
				flags &= ~ZEROPAD;
  80abdc:	db400017 	ldw	r13,0(sp)
					if (_uquad < 10) {
  80abe0:	e001a71e 	bne	fp,zero,80b280 <___vfiprintf_internal_r+0xe34>
  80abe4:	b88002a8 	cmpgeui	r2,r23,10
  80abe8:	1001a51e 	bne	r2,zero,80b280 <___vfiprintf_internal_r+0xe34>
						*--cp = to_char(_uquad);
  80abec:	bdc00c04 	addi	r23,r23,48
  80abf0:	ddc016c5 	stb	r23,91(sp)
						break;
  80abf4:	db400015 	stw	r13,0(sp)
  80abf8:	07000044 	movi	fp,1
						*--cp = to_char(_uquad);
  80abfc:	dcc016c4 	addi	r19,sp,91
						break;
  80ac00:	00007506 	br	80add8 <___vfiprintf_internal_r+0x98c>
				flags |= SHORTINT;
  80ac04:	a0800007 	ldb	r2,0(r20)
  80ac08:	6b401014 	ori	r13,r13,64
			goto rflag;
  80ac0c:	003e5006 	br	80a550 <___vfiprintf_internal_r+0x104>
  80ac10:	29403fcc 	andi	r5,r5,255
  80ac14:	2802bc1e 	bne	r5,zero,80b708 <___vfiprintf_internal_r+0x12bc>
			xdigs = "0123456789abcdef";
  80ac18:	00c02074 	movhi	r3,129
  80ac1c:	18cac404 	addi	r3,r3,11024
  80ac20:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80ac24:	68c0080c 	andi	r3,r13,32
  80ac28:	1800bd26 	beq	r3,zero,80af20 <___vfiprintf_internal_r+0xad4>
  80ac2c:	d8c00417 	ldw	r3,16(sp)
  80ac30:	1dc00017 	ldw	r23,0(r3)
  80ac34:	1f000117 	ldw	fp,4(r3)
  80ac38:	18c00204 	addi	r3,r3,8
  80ac3c:	d8c00415 	stw	r3,16(sp)
			if (flags & ALT && _uquad != 0) {
  80ac40:	68c0004c 	andi	r3,r13,1
  80ac44:	18000226 	beq	r3,zero,80ac50 <___vfiprintf_internal_r+0x804>
  80ac48:	bf06b03a 	or	r3,r23,fp
  80ac4c:	1802261e 	bne	r3,zero,80b4e8 <___vfiprintf_internal_r+0x109c>
			base = HEX;
  80ac50:	00800084 	movi	r2,2
  80ac54:	003f4f06 	br	80a994 <___vfiprintf_internal_r+0x548>
			cp = GET_ARG (N, ap, char_ptr_t);
  80ac58:	d8800417 	ldw	r2,16(sp)
			sign = '\0';
  80ac5c:	d8000945 	stb	zero,37(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80ac60:	14c00017 	ldw	r19,0(r2)
  80ac64:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  80ac68:	98026926 	beq	r19,zero,80b610 <___vfiprintf_internal_r+0x11c4>
			if (prec >= 0) {
  80ac6c:	40bfffe0 	cmpeqi	r2,r8,-1
  80ac70:	1002411e 	bne	r2,zero,80b578 <___vfiprintf_internal_r+0x112c>
				char *p = memchr (cp, 0, prec);
  80ac74:	400d883a 	mov	r6,r8
  80ac78:	000b883a 	mov	r5,zero
  80ac7c:	9809883a 	mov	r4,r19
  80ac80:	d8c00315 	stw	r3,12(sp)
  80ac84:	db400215 	stw	r13,8(sp)
  80ac88:	da000015 	stw	r8,0(sp)
  80ac8c:	08085b80 	call	8085b8 <memchr>
				if (p != NULL)
  80ac90:	da000017 	ldw	r8,0(sp)
  80ac94:	db400217 	ldw	r13,8(sp)
  80ac98:	d8c00317 	ldw	r3,12(sp)
  80ac9c:	10029426 	beq	r2,zero,80b6f0 <___vfiprintf_internal_r+0x12a4>
					size = p - cp;
  80aca0:	14f9c83a 	sub	fp,r2,r19
  80aca4:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80aca8:	d8c00415 	stw	r3,16(sp)
  80acac:	003ea006 	br	80a730 <___vfiprintf_internal_r+0x2e4>
			flags |= QUADINT;
  80acb0:	a0800007 	ldb	r2,0(r20)
  80acb4:	6b400814 	ori	r13,r13,32
			goto rflag;
  80acb8:	003e2506 	br	80a550 <___vfiprintf_internal_r+0x104>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80acbc:	d8c00417 	ldw	r3,16(sp)
			ox[0] = '0';
  80acc0:	00800c04 	movi	r2,48
  80acc4:	d8800985 	stb	r2,38(sp)
			ox[1] = ch = 'x';
  80acc8:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  80accc:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  80acd0:	d88009c5 	stb	r2,39(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80acd4:	18800104 	addi	r2,r3,4
  80acd8:	d8800415 	stw	r2,16(sp)
			xdigs = "0123456789abcdef";
  80acdc:	208ac404 	addi	r2,r4,11024
  80ace0:	d8800515 	stw	r2,20(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80ace4:	1dc00017 	ldw	r23,0(r3)
  80ace8:	0039883a 	mov	fp,zero
			flags |= HEXPREFIX;
  80acec:	6b400094 	ori	r13,r13,2
			base = HEX;
  80acf0:	00800084 	movi	r2,2
			goto nosign;
  80acf4:	003f2706 	br	80a994 <___vfiprintf_internal_r+0x548>
  80acf8:	29403fcc 	andi	r5,r5,255
  80acfc:	2802841e 	bne	r5,zero,80b710 <___vfiprintf_internal_r+0x12c4>
			flags |= LONGINT;
  80ad00:	6b400414 	ori	r13,r13,16
			_uquad = SARG ();
  80ad04:	6880080c 	andi	r2,r13,32
  80ad08:	103fa51e 	bne	r2,zero,80aba0 <___vfiprintf_internal_r+0x754>
			width = GET_ARG (n, ap, int);
  80ad0c:	d9000417 	ldw	r4,16(sp)
			_uquad = SARG ();
  80ad10:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80ad14:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  80ad18:	1001ee1e 	bne	r2,zero,80b4d4 <___vfiprintf_internal_r+0x1088>
  80ad1c:	6880100c 	andi	r2,r13,64
  80ad20:	10024e26 	beq	r2,zero,80b65c <___vfiprintf_internal_r+0x1210>
  80ad24:	d8800417 	ldw	r2,16(sp)
  80ad28:	d8c00415 	stw	r3,16(sp)
  80ad2c:	15c0000f 	ldh	r23,0(r2)
  80ad30:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80ad34:	e005883a 	mov	r2,fp
  80ad38:	103fa00e 	bge	r2,zero,80abbc <___vfiprintf_internal_r+0x770>
				_uquad = -_uquad;
  80ad3c:	b804c03a 	cmpne	r2,r23,zero
  80ad40:	0739c83a 	sub	fp,zero,fp
  80ad44:	e0b9c83a 	sub	fp,fp,r2
				sign = '-';
  80ad48:	00800b44 	movi	r2,45
  80ad4c:	d8800945 	stb	r2,37(sp)
number:			if ((dprec = prec) >= 0)
  80ad50:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  80ad54:	05efc83a 	sub	r23,zero,r23
				sign = '-';
  80ad58:	03800b44 	movi	r14,45
			base = DEC;
  80ad5c:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  80ad60:	183f1026 	beq	r3,zero,80a9a4 <___vfiprintf_internal_r+0x558>
				switch (base) {
  80ad64:	10c00060 	cmpeqi	r3,r2,1
  80ad68:	183f9d1e 	bne	r3,zero,80abe0 <___vfiprintf_internal_r+0x794>
  80ad6c:	108000a0 	cmpeqi	r2,r2,2
  80ad70:	10010a1e 	bne	r2,zero,80b19c <___vfiprintf_internal_r+0xd50>
			cp = buf + BUF;
  80ad74:	9027883a 	mov	r19,r18
						_uquad >>= 3;
  80ad78:	e008977a 	slli	r4,fp,29
  80ad7c:	b806d0fa 	srli	r3,r23,3
  80ad80:	e038d0fa 	srli	fp,fp,3
						*--cp = to_char (_uquad & 7);
  80ad84:	b88001cc 	andi	r2,r23,7
  80ad88:	10800c04 	addi	r2,r2,48
						_uquad >>= 3;
  80ad8c:	20eeb03a 	or	r23,r4,r3
						*--cp = to_char (_uquad & 7);
  80ad90:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80ad94:	bf06b03a 	or	r3,r23,fp
  80ad98:	980b883a 	mov	r5,r19
						*--cp = to_char (_uquad & 7);
  80ad9c:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80ada0:	183ff51e 	bne	r3,zero,80ad78 <___vfiprintf_internal_r+0x92c>
					if (flags & ALT && *cp != '0')
  80ada4:	68c0004c 	andi	r3,r13,1
  80ada8:	18010926 	beq	r3,zero,80b1d0 <___vfiprintf_internal_r+0xd84>
  80adac:	10803fcc 	andi	r2,r2,255
  80adb0:	1080201c 	xori	r2,r2,128
  80adb4:	10bfe004 	addi	r2,r2,-128
  80adb8:	10800c18 	cmpnei	r2,r2,48
  80adbc:	10010426 	beq	r2,zero,80b1d0 <___vfiprintf_internal_r+0xd84>
						*--cp = '0';
  80adc0:	297fff84 	addi	r5,r5,-2
  80adc4:	00800c04 	movi	r2,48
  80adc8:	98bfffc5 	stb	r2,-1(r19)
			size = buf + BUF - cp;
  80adcc:	9179c83a 	sub	fp,r18,r5
  80add0:	db400015 	stw	r13,0(sp)
						*--cp = '0';
  80add4:	2827883a 	mov	r19,r5
		realsz = dprec > size ? dprec : size;
  80add8:	402f883a 	mov	r23,r8
  80addc:	4700010e 	bge	r8,fp,80ade4 <___vfiprintf_internal_r+0x998>
  80ade0:	e02f883a 	mov	r23,fp
		if (sign)
  80ade4:	73803fcc 	andi	r14,r14,255
  80ade8:	7380201c 	xori	r14,r14,128
  80adec:	73bfe004 	addi	r14,r14,-128
  80adf0:	703e5126 	beq	r14,zero,80a738 <___vfiprintf_internal_r+0x2ec>
			realsz++;
  80adf4:	bdc00044 	addi	r23,r23,1
  80adf8:	003e4f06 	br	80a738 <___vfiprintf_internal_r+0x2ec>
			flags |= ZEROPAD;
  80adfc:	a0800007 	ldb	r2,0(r20)
  80ae00:	6b402014 	ori	r13,r13,128
			goto rflag;
  80ae04:	003dd206 	br	80a550 <___vfiprintf_internal_r+0x104>
			if ((ch = *fmt++) == '*') {
  80ae08:	a0800007 	ldb	r2,0(r20)
  80ae0c:	a0c00044 	addi	r3,r20,1
  80ae10:	11000aa0 	cmpeqi	r4,r2,42
  80ae14:	2002521e 	bne	r4,zero,80b760 <___vfiprintf_internal_r+0x1314>
			while (is_digit (ch)) {
  80ae18:	113ff404 	addi	r4,r2,-48
  80ae1c:	21c002b0 	cmpltui	r7,r4,10
			if ((ch = *fmt++) == '*') {
  80ae20:	1829883a 	mov	r20,r3
			n = 0;
  80ae24:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  80ae28:	383dca26 	beq	r7,zero,80a554 <___vfiprintf_internal_r+0x108>
				n = 10 * n + to_digit (ch);
  80ae2c:	400690ba 	slli	r3,r8,2
				ch = *fmt++;
  80ae30:	a0800007 	ldb	r2,0(r20)
  80ae34:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  80ae38:	1a11883a 	add	r8,r3,r8
  80ae3c:	4211883a 	add	r8,r8,r8
  80ae40:	4111883a 	add	r8,r8,r4
			while (is_digit (ch)) {
  80ae44:	113ff404 	addi	r4,r2,-48
  80ae48:	20c002b0 	cmpltui	r3,r4,10
  80ae4c:	183ff71e 	bne	r3,zero,80ae2c <___vfiprintf_internal_r+0x9e0>
  80ae50:	003dc006 	br	80a554 <___vfiprintf_internal_r+0x108>
			if ((ch = *fmt++) == '*') {
  80ae54:	a0800003 	ldbu	r2,0(r20)
			flags |= LADJUST;
  80ae58:	10803fcc 	andi	r2,r2,255
  80ae5c:	1080201c 	xori	r2,r2,128
  80ae60:	6b400114 	ori	r13,r13,4
			goto rflag;
  80ae64:	10bfe004 	addi	r2,r2,-128
  80ae68:	003db906 	br	80a550 <___vfiprintf_internal_r+0x104>
			goto rflag;
  80ae6c:	a0800007 	ldb	r2,0(r20)
  80ae70:	01400044 	movi	r5,1
			sign = '+';
  80ae74:	01800ac4 	movi	r6,43
			goto rflag;
  80ae78:	003db506 	br	80a550 <___vfiprintf_internal_r+0x104>
			width = GET_ARG (n, ap, int);
  80ae7c:	d8c00417 	ldw	r3,16(sp)
			if ((ch = *fmt++) == '*') {
  80ae80:	a0800003 	ldbu	r2,0(r20)
			width = GET_ARG (n, ap, int);
  80ae84:	1c400017 	ldw	r17,0(r3)
  80ae88:	18c00104 	addi	r3,r3,4
			if (width >= 0)
  80ae8c:	8801b716 	blt	r17,zero,80b56c <___vfiprintf_internal_r+0x1120>
			width = GET_ARG (n, ap, int);
  80ae90:	d8c00415 	stw	r3,16(sp)
  80ae94:	10803fcc 	andi	r2,r2,255
  80ae98:	1080201c 	xori	r2,r2,128
  80ae9c:	10bfe004 	addi	r2,r2,-128
  80aea0:	003dab06 	br	80a550 <___vfiprintf_internal_r+0x104>
			flags |= ALT;
  80aea4:	a0800007 	ldb	r2,0(r20)
  80aea8:	6b400054 	ori	r13,r13,1
			goto rflag;
  80aeac:	003da806 	br	80a550 <___vfiprintf_internal_r+0x104>
			if (!sign)
  80aeb0:	30c03fcc 	andi	r3,r6,255
  80aeb4:	18c0201c 	xori	r3,r3,128
  80aeb8:	18ffe004 	addi	r3,r3,-128
			if ((ch = *fmt++) == '*') {
  80aebc:	a0800003 	ldbu	r2,0(r20)
			if (!sign)
  80aec0:	183ff41e 	bne	r3,zero,80ae94 <___vfiprintf_internal_r+0xa48>
  80aec4:	10803fcc 	andi	r2,r2,255
  80aec8:	1080201c 	xori	r2,r2,128
  80aecc:	01400044 	movi	r5,1
				sign = ' ';
  80aed0:	01800804 	movi	r6,32
  80aed4:	10bfe004 	addi	r2,r2,-128
  80aed8:	003d9d06 	br	80a550 <___vfiprintf_internal_r+0x104>
				*cp = GET_ARG (N, ap, int);
  80aedc:	d8c00417 	ldw	r3,16(sp)
			sign = '\0';
  80aee0:	d8000945 	stb	zero,37(sp)
			break;
  80aee4:	05c00044 	movi	r23,1
				*cp = GET_ARG (N, ap, int);
  80aee8:	18800017 	ldw	r2,0(r3)
  80aeec:	18c00104 	addi	r3,r3,4
  80aef0:	d8c00415 	stw	r3,16(sp)
  80aef4:	d8800d05 	stb	r2,52(sp)
				size = 1;
  80aef8:	07000044 	movi	fp,1
			cp = buf;
  80aefc:	dcc00d04 	addi	r19,sp,52
			break;
  80af00:	003e0b06 	br	80a730 <___vfiprintf_internal_r+0x2e4>
  80af04:	29403fcc 	andi	r5,r5,255
  80af08:	2802061e 	bne	r5,zero,80b724 <___vfiprintf_internal_r+0x12d8>
			xdigs = "0123456789ABCDEF";
  80af0c:	00c02074 	movhi	r3,129
  80af10:	18cac904 	addi	r3,r3,11044
  80af14:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80af18:	68c0080c 	andi	r3,r13,32
  80af1c:	183f431e 	bne	r3,zero,80ac2c <___vfiprintf_internal_r+0x7e0>
			width = GET_ARG (n, ap, int);
  80af20:	d9400417 	ldw	r5,16(sp)
hex:			_uquad = UARG ();
  80af24:	68c0040c 	andi	r3,r13,16
			width = GET_ARG (n, ap, int);
  80af28:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  80af2c:	18017f1e 	bne	r3,zero,80b52c <___vfiprintf_internal_r+0x10e0>
  80af30:	68c0100c 	andi	r3,r13,64
  80af34:	1801be26 	beq	r3,zero,80b630 <___vfiprintf_internal_r+0x11e4>
  80af38:	d8c00417 	ldw	r3,16(sp)
  80af3c:	0039883a 	mov	fp,zero
  80af40:	d9000415 	stw	r4,16(sp)
  80af44:	1dc0000b 	ldhu	r23,0(r3)
  80af48:	003f3d06 	br	80ac40 <___vfiprintf_internal_r+0x7f4>
  80af4c:	29403fcc 	andi	r5,r5,255
  80af50:	2801f61e 	bne	r5,zero,80b72c <___vfiprintf_internal_r+0x12e0>
			width = GET_ARG (n, ap, int);
  80af54:	d9000417 	ldw	r4,16(sp)
			if (flags & QUADINT)
  80af58:	6880080c 	andi	r2,r13,32
			width = GET_ARG (n, ap, int);
  80af5c:	20c00017 	ldw	r3,0(r4)
  80af60:	21000104 	addi	r4,r4,4
			if (flags & QUADINT)
  80af64:	10016b1e 	bne	r2,zero,80b514 <___vfiprintf_internal_r+0x10c8>
			if (flags & LONGINT)
  80af68:	6880040c 	andi	r2,r13,16
  80af6c:	1001951e 	bne	r2,zero,80b5c4 <___vfiprintf_internal_r+0x1178>
			else if (flags & SHORTINT)
  80af70:	6b40100c 	andi	r13,r13,64
  80af74:	68019326 	beq	r13,zero,80b5c4 <___vfiprintf_internal_r+0x1178>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  80af78:	d8800117 	ldw	r2,4(sp)
  80af7c:	d9000415 	stw	r4,16(sp)
  80af80:	1880000d 	sth	r2,0(r3)
  80af84:	003d5a06 	br	80a4f0 <___vfiprintf_internal_r+0xa4>
			if (*fmt == 'l') {
  80af88:	a0800007 	ldb	r2,0(r20)
  80af8c:	10c01b18 	cmpnei	r3,r2,108
  80af90:	18019826 	beq	r3,zero,80b5f4 <___vfiprintf_internal_r+0x11a8>
				flags |= LONGINT;
  80af94:	6b400414 	ori	r13,r13,16
  80af98:	003d6d06 	br	80a550 <___vfiprintf_internal_r+0x104>
		uio->uio_iovcnt = 0;
  80af9c:	01400044 	movi	r5,1
  80afa0:	0009883a 	mov	r4,zero
			PAD (width - realsz, blanks);
  80afa4:	900d883a 	mov	r6,r18
  80afa8:	003ece06 	br	80aae4 <___vfiprintf_internal_r+0x698>
			PAD (width - realsz, zeroes);
  80afac:	8dc7c83a 	sub	r3,r17,r23
  80afb0:	00fe190e 	bge	zero,r3,80a818 <___vfiprintf_internal_r+0x3cc>
  80afb4:	19c00450 	cmplti	r7,r3,17
  80afb8:	3801e41e 	bne	r7,zero,80b74c <___vfiprintf_internal_r+0x1300>
  80afbc:	01c02074 	movhi	r7,129
  80afc0:	39cb6304 	addi	r7,r7,11660
  80afc4:	03400404 	movi	r13,16
  80afc8:	00000606 	br	80afe4 <___vfiprintf_internal_r+0xb98>
  80afcc:	23800084 	addi	r14,r4,2
  80afd0:	84000204 	addi	r16,r16,8
  80afd4:	2809883a 	mov	r4,r5
  80afd8:	18fffc04 	addi	r3,r3,-16
  80afdc:	19400448 	cmpgei	r5,r3,17
  80afe0:	28001c26 	beq	r5,zero,80b054 <___vfiprintf_internal_r+0xc08>
  80afe4:	21400044 	addi	r5,r4,1
  80afe8:	10800404 	addi	r2,r2,16
  80afec:	81c00015 	stw	r7,0(r16)
  80aff0:	83400115 	stw	r13,4(r16)
  80aff4:	d8800c15 	stw	r2,48(sp)
  80aff8:	d9400b15 	stw	r5,44(sp)
  80affc:	29800208 	cmpgei	r6,r5,8
  80b000:	303ff226 	beq	r6,zero,80afcc <___vfiprintf_internal_r+0xb80>
  80b004:	d9800a04 	addi	r6,sp,40
  80b008:	a80b883a 	mov	r5,r21
  80b00c:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b010:	10007826 	beq	r2,zero,80b1f4 <___vfiprintf_internal_r+0xda8>
  80b014:	d9c00615 	stw	r7,24(sp)
  80b018:	d8c00315 	stw	r3,12(sp)
  80b01c:	da000215 	stw	r8,8(sp)
  80b020:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80b024:	103e1e1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80b028:	d8c00317 	ldw	r3,12(sp)
  80b02c:	d9000b17 	ldw	r4,44(sp)
  80b030:	d8800c17 	ldw	r2,48(sp)
  80b034:	18fffc04 	addi	r3,r3,-16
  80b038:	19400448 	cmpgei	r5,r3,17
  80b03c:	d9c00617 	ldw	r7,24(sp)
  80b040:	da000217 	ldw	r8,8(sp)
  80b044:	9021883a 	mov	r16,r18
  80b048:	23800044 	addi	r14,r4,1
  80b04c:	03400404 	movi	r13,16
  80b050:	283fe41e 	bne	r5,zero,80afe4 <___vfiprintf_internal_r+0xb98>
  80b054:	83400204 	addi	r13,r16,8
  80b058:	10c5883a 	add	r2,r2,r3
  80b05c:	80c00115 	stw	r3,4(r16)
  80b060:	81c00015 	stw	r7,0(r16)
  80b064:	d8800c15 	stw	r2,48(sp)
  80b068:	db800b15 	stw	r14,44(sp)
  80b06c:	70c00208 	cmpgei	r3,r14,8
  80b070:	18011326 	beq	r3,zero,80b4c0 <___vfiprintf_internal_r+0x1074>
	if (uio->uio_resid == 0) {
  80b074:	10018826 	beq	r2,zero,80b698 <___vfiprintf_internal_r+0x124c>
  80b078:	d9800a04 	addi	r6,sp,40
  80b07c:	a80b883a 	mov	r5,r21
  80b080:	b009883a 	mov	r4,r22
  80b084:	da000215 	stw	r8,8(sp)
  80b088:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80b08c:	103e041e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80b090:	da000217 	ldw	r8,8(sp)
		PRINT (cp, size);
  80b094:	d9000b17 	ldw	r4,44(sp)
  80b098:	d8800c17 	ldw	r2,48(sp)
		PAD (dprec - size, zeroes);
  80b09c:	4711c83a 	sub	r8,r8,fp
		PRINT (cp, size);
  80b0a0:	d9801904 	addi	r6,sp,100
  80b0a4:	21400044 	addi	r5,r4,1
			PAD (width - realsz, zeroes);
  80b0a8:	9021883a 	mov	r16,r18
		PAD (dprec - size, zeroes);
  80b0ac:	023ddc0e 	bge	zero,r8,80a820 <___vfiprintf_internal_r+0x3d4>
  80b0b0:	40c00450 	cmplti	r3,r8,17
  80b0b4:	01c02074 	movhi	r7,129
  80b0b8:	1801741e 	bne	r3,zero,80b68c <___vfiprintf_internal_r+0x1240>
  80b0bc:	39cb6304 	addi	r7,r7,11660
  80b0c0:	03400404 	movi	r13,16
  80b0c4:	00000606 	br	80b0e0 <___vfiprintf_internal_r+0xc94>
  80b0c8:	21400084 	addi	r5,r4,2
  80b0cc:	84000204 	addi	r16,r16,8
  80b0d0:	1809883a 	mov	r4,r3
  80b0d4:	423ffc04 	addi	r8,r8,-16
  80b0d8:	40c00448 	cmpgei	r3,r8,17
  80b0dc:	18001a26 	beq	r3,zero,80b148 <___vfiprintf_internal_r+0xcfc>
  80b0e0:	20c00044 	addi	r3,r4,1
  80b0e4:	10800404 	addi	r2,r2,16
  80b0e8:	81c00015 	stw	r7,0(r16)
  80b0ec:	83400115 	stw	r13,4(r16)
  80b0f0:	d8800c15 	stw	r2,48(sp)
  80b0f4:	d8c00b15 	stw	r3,44(sp)
  80b0f8:	19400208 	cmpgei	r5,r3,8
  80b0fc:	283ff226 	beq	r5,zero,80b0c8 <___vfiprintf_internal_r+0xc7c>
  80b100:	d9800a04 	addi	r6,sp,40
  80b104:	a80b883a 	mov	r5,r21
  80b108:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b10c:	10001a26 	beq	r2,zero,80b178 <___vfiprintf_internal_r+0xd2c>
  80b110:	d9c00315 	stw	r7,12(sp)
  80b114:	da000215 	stw	r8,8(sp)
  80b118:	080a3400 	call	80a340 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80b11c:	103de01e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80b120:	da000217 	ldw	r8,8(sp)
  80b124:	d9000b17 	ldw	r4,44(sp)
  80b128:	d8800c17 	ldw	r2,48(sp)
  80b12c:	423ffc04 	addi	r8,r8,-16
  80b130:	40c00448 	cmpgei	r3,r8,17
  80b134:	d9c00317 	ldw	r7,12(sp)
  80b138:	9021883a 	mov	r16,r18
  80b13c:	21400044 	addi	r5,r4,1
  80b140:	03400404 	movi	r13,16
  80b144:	183fe61e 	bne	r3,zero,80b0e0 <___vfiprintf_internal_r+0xc94>
  80b148:	81000204 	addi	r4,r16,8
  80b14c:	1205883a 	add	r2,r2,r8
  80b150:	81c00015 	stw	r7,0(r16)
  80b154:	82000115 	stw	r8,4(r16)
  80b158:	d8800c15 	stw	r2,48(sp)
  80b15c:	d9400b15 	stw	r5,44(sp)
  80b160:	28c00208 	cmpgei	r3,r5,8
  80b164:	1800a41e 	bne	r3,zero,80b3f8 <___vfiprintf_internal_r+0xfac>
		PRINT (cp, size);
  80b168:	29400044 	addi	r5,r5,1
  80b16c:	21800204 	addi	r6,r4,8
		PAD (dprec - size, zeroes);
  80b170:	2021883a 	mov	r16,r4
  80b174:	003daa06 	br	80a820 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80b178:	01400044 	movi	r5,1
  80b17c:	0009883a 	mov	r4,zero
		PAD (dprec - size, zeroes);
  80b180:	9021883a 	mov	r16,r18
  80b184:	003fd306 	br	80b0d4 <___vfiprintf_internal_r+0xc88>
				switch (base) {
  80b188:	10c00060 	cmpeqi	r3,r2,1
  80b18c:	1801561e 	bne	r3,zero,80b6e8 <___vfiprintf_internal_r+0x129c>
  80b190:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  80b194:	db400017 	ldw	r13,0(sp)
  80b198:	103ef626 	beq	r2,zero,80ad74 <___vfiprintf_internal_r+0x928>
			cp = buf + BUF;
  80b19c:	9027883a 	mov	r19,r18
						*--cp = xdigs[_uquad & 15];
  80b1a0:	d9000517 	ldw	r4,20(sp)
  80b1a4:	b88003cc 	andi	r2,r23,15
						_uquad >>= 4;
  80b1a8:	e006973a 	slli	r3,fp,28
  80b1ac:	b82ed13a 	srli	r23,r23,4
						*--cp = xdigs[_uquad & 15];
  80b1b0:	2085883a 	add	r2,r4,r2
  80b1b4:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  80b1b8:	e038d13a 	srli	fp,fp,4
  80b1bc:	1deeb03a 	or	r23,r3,r23
						*--cp = xdigs[_uquad & 15];
  80b1c0:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80b1c4:	bf04b03a 	or	r2,r23,fp
						*--cp = xdigs[_uquad & 15];
  80b1c8:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80b1cc:	103ff41e 	bne	r2,zero,80b1a0 <___vfiprintf_internal_r+0xd54>
			size = buf + BUF - cp;
  80b1d0:	94f9c83a 	sub	fp,r18,r19
  80b1d4:	db400015 	stw	r13,0(sp)
  80b1d8:	003eff06 	br	80add8 <___vfiprintf_internal_r+0x98c>
	if (uio->uio_resid == 0) {
  80b1dc:	d9800a04 	addi	r6,sp,40
  80b1e0:	a80b883a 	mov	r5,r21
  80b1e4:	b009883a 	mov	r4,r22
  80b1e8:	080a3400 	call	80a340 <__sprint_r.part.0>
		FLUSH ();	/* copy out the I/O vectors */
  80b1ec:	103da626 	beq	r2,zero,80a888 <___vfiprintf_internal_r+0x43c>
  80b1f0:	003dab06 	br	80a8a0 <___vfiprintf_internal_r+0x454>
		uio->uio_iovcnt = 0;
  80b1f4:	03800044 	movi	r14,1
  80b1f8:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80b1fc:	9021883a 	mov	r16,r18
  80b200:	003f7506 	br	80afd8 <___vfiprintf_internal_r+0xb8c>
	if (uio->uio_resid == 0) {
  80b204:	10009026 	beq	r2,zero,80b448 <___vfiprintf_internal_r+0xffc>
  80b208:	d9800a04 	addi	r6,sp,40
  80b20c:	a80b883a 	mov	r5,r21
  80b210:	b009883a 	mov	r4,r22
  80b214:	da000615 	stw	r8,24(sp)
  80b218:	db400315 	stw	r13,12(sp)
  80b21c:	db800215 	stw	r14,8(sp)
  80b220:	080a3400 	call	80a340 <__sprint_r.part.0>
			PRINT (&sign, 1);
  80b224:	103d9e1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
			PRINT (ox, 2);
  80b228:	d9000b17 	ldw	r4,44(sp)
  80b22c:	d8800c17 	ldw	r2,48(sp)
			PRINT (&sign, 1);
  80b230:	da000617 	ldw	r8,24(sp)
  80b234:	db400317 	ldw	r13,12(sp)
  80b238:	db800217 	ldw	r14,8(sp)
			PRINT (ox, 2);
  80b23c:	d9801904 	addi	r6,sp,100
  80b240:	21400044 	addi	r5,r4,1
			PRINT (&sign, 1);
  80b244:	9021883a 	mov	r16,r18
  80b248:	003d5806 	br	80a7ac <___vfiprintf_internal_r+0x360>
			PRINT (ox, 2);
  80b24c:	d8800984 	addi	r2,sp,38
  80b250:	d8801715 	stw	r2,92(sp)
  80b254:	00800084 	movi	r2,2
  80b258:	d8801815 	stw	r2,96(sp)
			PRINT (&sign, 1);
  80b25c:	d9801904 	addi	r6,sp,100
			PRINT (ox, 2);
  80b260:	01400044 	movi	r5,1
  80b264:	3021883a 	mov	r16,r6
  80b268:	2809883a 	mov	r4,r5
		PRINT (cp, size);
  80b26c:	21400044 	addi	r5,r4,1
  80b270:	81800204 	addi	r6,r16,8
  80b274:	003d6606 	br	80a810 <___vfiprintf_internal_r+0x3c4>
				flags &= ~ZEROPAD;
  80b278:	db400017 	ldw	r13,0(sp)
  80b27c:	003eb906 	br	80ad64 <___vfiprintf_internal_r+0x918>
			cp = buf + BUF;
  80b280:	9027883a 	mov	r19,r18
					  *--cp = to_char (_uquad % 10);
  80b284:	b809883a 	mov	r4,r23
  80b288:	e00b883a 	mov	r5,fp
  80b28c:	01800284 	movi	r6,10
  80b290:	000f883a 	mov	r7,zero
  80b294:	db800315 	stw	r14,12(sp)
  80b298:	da000215 	stw	r8,8(sp)
  80b29c:	db400015 	stw	r13,0(sp)
  80b2a0:	080cd940 	call	80cd94 <__umoddi3>
  80b2a4:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  80b2a8:	b809883a 	mov	r4,r23
  80b2ac:	e00b883a 	mov	r5,fp
					  *--cp = to_char (_uquad % 10);
  80b2b0:	98bfffc5 	stb	r2,-1(r19)
					  _uquad /= 10;
  80b2b4:	01800284 	movi	r6,10
  80b2b8:	000f883a 	mov	r7,zero
  80b2bc:	080c7740 	call	80c774 <__udivdi3>
  80b2c0:	e009883a 	mov	r4,fp
  80b2c4:	b80b883a 	mov	r5,r23
					} while (_uquad != 0);
  80b2c8:	db400017 	ldw	r13,0(sp)
  80b2cc:	da000217 	ldw	r8,8(sp)
  80b2d0:	db800317 	ldw	r14,12(sp)
					  *--cp = to_char (_uquad % 10);
  80b2d4:	9cffffc4 	addi	r19,r19,-1
					  _uquad /= 10;
  80b2d8:	102f883a 	mov	r23,r2
  80b2dc:	1839883a 	mov	fp,r3
					} while (_uquad != 0);
  80b2e0:	203fe81e 	bne	r4,zero,80b284 <___vfiprintf_internal_r+0xe38>
  80b2e4:	294002a8 	cmpgeui	r5,r5,10
  80b2e8:	283fe61e 	bne	r5,zero,80b284 <___vfiprintf_internal_r+0xe38>
			size = buf + BUF - cp;
  80b2ec:	94f9c83a 	sub	fp,r18,r19
  80b2f0:	003eb906 	br	80add8 <___vfiprintf_internal_r+0x98c>
			PAD (width - realsz, blanks);
  80b2f4:	19400450 	cmplti	r5,r3,17
  80b2f8:	01c02074 	movhi	r7,129
  80b2fc:	2801061e 	bne	r5,zero,80b718 <___vfiprintf_internal_r+0x12cc>
  80b300:	39cb6704 	addi	r7,r7,11676
  80b304:	03c00404 	movi	r15,16
  80b308:	00000706 	br	80b328 <___vfiprintf_internal_r+0xedc>
  80b30c:	27c00084 	addi	ra,r4,2
  80b310:	84000204 	addi	r16,r16,8
  80b314:	3009883a 	mov	r4,r6
  80b318:	18fffc04 	addi	r3,r3,-16
  80b31c:	19400448 	cmpgei	r5,r3,17
  80b320:	28002026 	beq	r5,zero,80b3a4 <___vfiprintf_internal_r+0xf58>
  80b324:	21800044 	addi	r6,r4,1
  80b328:	10800404 	addi	r2,r2,16
  80b32c:	81c00015 	stw	r7,0(r16)
  80b330:	83c00115 	stw	r15,4(r16)
  80b334:	d8800c15 	stw	r2,48(sp)
  80b338:	d9800b15 	stw	r6,44(sp)
  80b33c:	31400208 	cmpgei	r5,r6,8
  80b340:	283ff226 	beq	r5,zero,80b30c <___vfiprintf_internal_r+0xec0>
  80b344:	d9800a04 	addi	r6,sp,40
  80b348:	a80b883a 	mov	r5,r21
  80b34c:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80b350:	10001f26 	beq	r2,zero,80b3d0 <___vfiprintf_internal_r+0xf84>
  80b354:	d9c00815 	stw	r7,32(sp)
  80b358:	d8c00715 	stw	r3,28(sp)
  80b35c:	da000615 	stw	r8,24(sp)
  80b360:	db400315 	stw	r13,12(sp)
  80b364:	db800215 	stw	r14,8(sp)
  80b368:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80b36c:	103d4c1e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
  80b370:	d8c00717 	ldw	r3,28(sp)
  80b374:	d9000b17 	ldw	r4,44(sp)
  80b378:	d8800c17 	ldw	r2,48(sp)
  80b37c:	18fffc04 	addi	r3,r3,-16
  80b380:	19400448 	cmpgei	r5,r3,17
  80b384:	d9c00817 	ldw	r7,32(sp)
  80b388:	da000617 	ldw	r8,24(sp)
  80b38c:	db400317 	ldw	r13,12(sp)
  80b390:	db800217 	ldw	r14,8(sp)
  80b394:	9021883a 	mov	r16,r18
  80b398:	27c00044 	addi	ra,r4,1
  80b39c:	03c00404 	movi	r15,16
  80b3a0:	283fe01e 	bne	r5,zero,80b324 <___vfiprintf_internal_r+0xed8>
  80b3a4:	10c5883a 	add	r2,r2,r3
  80b3a8:	80c00115 	stw	r3,4(r16)
  80b3ac:	81c00015 	stw	r7,0(r16)
  80b3b0:	d8800c15 	stw	r2,48(sp)
  80b3b4:	dfc00b15 	stw	ra,44(sp)
  80b3b8:	f8c00208 	cmpgei	r3,ra,8
  80b3bc:	18002d1e 	bne	r3,zero,80b474 <___vfiprintf_internal_r+0x1028>
  80b3c0:	84000204 	addi	r16,r16,8
			PRINT (&sign, 1);
  80b3c4:	f9400044 	addi	r5,ra,1
  80b3c8:	f809883a 	mov	r4,ra
  80b3cc:	003ce706 	br	80a76c <___vfiprintf_internal_r+0x320>
		uio->uio_iovcnt = 0;
  80b3d0:	0009883a 	mov	r4,zero
  80b3d4:	07c00044 	movi	ra,1
			PAD (width - realsz, blanks);
  80b3d8:	9021883a 	mov	r16,r18
  80b3dc:	003fce06 	br	80b318 <___vfiprintf_internal_r+0xecc>
		ret += width > realsz ? width : realsz;
  80b3e0:	8dc0010e 	bge	r17,r23,80b3e8 <___vfiprintf_internal_r+0xf9c>
  80b3e4:	b823883a 	mov	r17,r23
  80b3e8:	d8800117 	ldw	r2,4(sp)
  80b3ec:	1445883a 	add	r2,r2,r17
  80b3f0:	d8800115 	stw	r2,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80b3f4:	003d2406 	br	80a888 <___vfiprintf_internal_r+0x43c>
	if (uio->uio_resid == 0) {
  80b3f8:	10007626 	beq	r2,zero,80b5d4 <___vfiprintf_internal_r+0x1188>
  80b3fc:	d9800a04 	addi	r6,sp,40
  80b400:	a80b883a 	mov	r5,r21
  80b404:	b009883a 	mov	r4,r22
  80b408:	080a3400 	call	80a340 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80b40c:	103d241e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  80b410:	d9400b17 	ldw	r5,44(sp)
  80b414:	d8800c17 	ldw	r2,48(sp)
  80b418:	d9801904 	addi	r6,sp,100
  80b41c:	29400044 	addi	r5,r5,1
		PAD (dprec - size, zeroes);
  80b420:	9021883a 	mov	r16,r18
  80b424:	003cfe06 	br	80a820 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80b428:	d8000b15 	stw	zero,44(sp)
			PRINT (cp, m);
  80b42c:	9021883a 	mov	r16,r18
  80b430:	003d7606 	br	80aa0c <___vfiprintf_internal_r+0x5c0>
			if (_uquad != 0 || prec != 0) {
  80b434:	4000ac1e 	bne	r8,zero,80b6e8 <___vfiprintf_internal_r+0x129c>
  80b438:	0011883a 	mov	r8,zero
  80b43c:	0039883a 	mov	fp,zero
			cp = buf + BUF;
  80b440:	9027883a 	mov	r19,r18
  80b444:	003e6406 	br	80add8 <___vfiprintf_internal_r+0x98c>
		if (flags & HEXPREFIX)
  80b448:	7000411e 	bne	r14,zero,80b550 <___vfiprintf_internal_r+0x1104>
  80b44c:	0009883a 	mov	r4,zero
  80b450:	d9801904 	addi	r6,sp,100
  80b454:	01400044 	movi	r5,1
			PRINT (&sign, 1);
  80b458:	9021883a 	mov	r16,r18
  80b45c:	003cec06 	br	80a810 <___vfiprintf_internal_r+0x3c4>
		uio->uio_iovcnt = 0;
  80b460:	d9801904 	addi	r6,sp,100
  80b464:	01400044 	movi	r5,1
  80b468:	0009883a 	mov	r4,zero
			PRINT (ox, 2);
  80b46c:	9021883a 	mov	r16,r18
  80b470:	003ce706 	br	80a810 <___vfiprintf_internal_r+0x3c4>
	if (uio->uio_resid == 0) {
  80b474:	10004a26 	beq	r2,zero,80b5a0 <___vfiprintf_internal_r+0x1154>
  80b478:	d9800a04 	addi	r6,sp,40
  80b47c:	a80b883a 	mov	r5,r21
  80b480:	b009883a 	mov	r4,r22
  80b484:	da000615 	stw	r8,24(sp)
  80b488:	db400315 	stw	r13,12(sp)
  80b48c:	db800215 	stw	r14,8(sp)
  80b490:	080a3400 	call	80a340 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80b494:	103d021e 	bne	r2,zero,80a8a0 <___vfiprintf_internal_r+0x454>
			PRINT (&sign, 1);
  80b498:	d9000b17 	ldw	r4,44(sp)
  80b49c:	d8800c17 	ldw	r2,48(sp)
  80b4a0:	da000617 	ldw	r8,24(sp)
  80b4a4:	db400317 	ldw	r13,12(sp)
  80b4a8:	db800217 	ldw	r14,8(sp)
			PAD (width - realsz, blanks);
  80b4ac:	9021883a 	mov	r16,r18
			PRINT (&sign, 1);
  80b4b0:	21400044 	addi	r5,r4,1
  80b4b4:	003cad06 	br	80a76c <___vfiprintf_internal_r+0x320>
			cp = buf + BUF;
  80b4b8:	9027883a 	mov	r19,r18
  80b4bc:	003e4606 	br	80add8 <___vfiprintf_internal_r+0x98c>
		PRINT (cp, size);
  80b4c0:	71400044 	addi	r5,r14,1
  80b4c4:	69800204 	addi	r6,r13,8
  80b4c8:	7009883a 	mov	r4,r14
			PAD (width - realsz, zeroes);
  80b4cc:	6821883a 	mov	r16,r13
  80b4d0:	003cd106 	br	80a818 <___vfiprintf_internal_r+0x3cc>
			_uquad = SARG ();
  80b4d4:	25c00017 	ldw	r23,0(r4)
  80b4d8:	d8c00415 	stw	r3,16(sp)
  80b4dc:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80b4e0:	e005883a 	mov	r2,fp
  80b4e4:	003db406 	br	80abb8 <___vfiprintf_internal_r+0x76c>
				ox[0] = '0';
  80b4e8:	00c00c04 	movi	r3,48
				ox[1] = ch;
  80b4ec:	d88009c5 	stb	r2,39(sp)
				ox[0] = '0';
  80b4f0:	d8c00985 	stb	r3,38(sp)
				flags |= HEXPREFIX;
  80b4f4:	6b400094 	ori	r13,r13,2
			base = HEX;
  80b4f8:	00800084 	movi	r2,2
  80b4fc:	003d2506 	br	80a994 <___vfiprintf_internal_r+0x548>
			_uquad = UARG ();
  80b500:	25c00017 	ldw	r23,0(r4)
  80b504:	0039883a 	mov	fp,zero
  80b508:	d8c00415 	stw	r3,16(sp)
			base = OCT;
  80b50c:	0005883a 	mov	r2,zero
  80b510:	003d2006 	br	80a994 <___vfiprintf_internal_r+0x548>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  80b514:	d9400117 	ldw	r5,4(sp)
  80b518:	d9000415 	stw	r4,16(sp)
  80b51c:	2805d7fa 	srai	r2,r5,31
  80b520:	19400015 	stw	r5,0(r3)
  80b524:	18800115 	stw	r2,4(r3)
  80b528:	003bf106 	br	80a4f0 <___vfiprintf_internal_r+0xa4>
hex:			_uquad = UARG ();
  80b52c:	2dc00017 	ldw	r23,0(r5)
  80b530:	0039883a 	mov	fp,zero
  80b534:	d9000415 	stw	r4,16(sp)
  80b538:	003dc106 	br	80ac40 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80b53c:	25c00017 	ldw	r23,0(r4)
  80b540:	0039883a 	mov	fp,zero
  80b544:	d8c00415 	stw	r3,16(sp)
			base = DEC;
  80b548:	00800044 	movi	r2,1
  80b54c:	003d1106 	br	80a994 <___vfiprintf_internal_r+0x548>
			PRINT (ox, 2);
  80b550:	d8800984 	addi	r2,sp,38
  80b554:	d8801715 	stw	r2,92(sp)
  80b558:	00800084 	movi	r2,2
  80b55c:	d8801815 	stw	r2,96(sp)
  80b560:	dc001904 	addi	r16,sp,100
  80b564:	01000044 	movi	r4,1
  80b568:	003f4006 	br	80b26c <___vfiprintf_internal_r+0xe20>
			width = -width;
  80b56c:	0463c83a 	sub	r17,zero,r17
			width = GET_ARG (n, ap, int);
  80b570:	d8c00415 	stw	r3,16(sp)
  80b574:	003e3806 	br	80ae58 <___vfiprintf_internal_r+0xa0c>
				size = strlen (cp);
  80b578:	9809883a 	mov	r4,r19
  80b57c:	d8c00215 	stw	r3,8(sp)
  80b580:	db400015 	stw	r13,0(sp)
  80b584:	0802c5c0 	call	802c5c <strlen>
			cp = GET_ARG (N, ap, char_ptr_t);
  80b588:	d8c00217 	ldw	r3,8(sp)
  80b58c:	db400017 	ldw	r13,0(sp)
				size = strlen (cp);
  80b590:	1039883a 	mov	fp,r2
  80b594:	102f883a 	mov	r23,r2
			cp = GET_ARG (N, ap, char_ptr_t);
  80b598:	d8c00415 	stw	r3,16(sp)
  80b59c:	003c6406 	br	80a730 <___vfiprintf_internal_r+0x2e4>
		if (sign)
  80b5a0:	d8c00947 	ldb	r3,37(sp)
  80b5a4:	18004326 	beq	r3,zero,80b6b4 <___vfiprintf_internal_r+0x1268>
			PRINT (&sign, 1);
  80b5a8:	d8800944 	addi	r2,sp,37
  80b5ac:	d8801715 	stw	r2,92(sp)
  80b5b0:	00800044 	movi	r2,1
  80b5b4:	d8801815 	stw	r2,96(sp)
  80b5b8:	d9801904 	addi	r6,sp,100
  80b5bc:	01400044 	movi	r5,1
  80b5c0:	003c7606 	br	80a79c <___vfiprintf_internal_r+0x350>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  80b5c4:	d8800117 	ldw	r2,4(sp)
  80b5c8:	18800015 	stw	r2,0(r3)
  80b5cc:	d9000415 	stw	r4,16(sp)
  80b5d0:	003bc706 	br	80a4f0 <___vfiprintf_internal_r+0xa4>
		PRINT (cp, size);
  80b5d4:	00c00044 	movi	r3,1
  80b5d8:	e005883a 	mov	r2,fp
  80b5dc:	dcc01715 	stw	r19,92(sp)
  80b5e0:	df001815 	stw	fp,96(sp)
  80b5e4:	df000c15 	stw	fp,48(sp)
  80b5e8:	d8c00b15 	stw	r3,44(sp)
  80b5ec:	d9801904 	addi	r6,sp,100
  80b5f0:	003c9a06 	br	80a85c <___vfiprintf_internal_r+0x410>
rflag:		ch = *fmt++;
  80b5f4:	a0800043 	ldbu	r2,1(r20)
				flags |= QUADINT;
  80b5f8:	6b400814 	ori	r13,r13,32
				fmt++;
  80b5fc:	a5000044 	addi	r20,r20,1
  80b600:	10803fcc 	andi	r2,r2,255
  80b604:	1080201c 	xori	r2,r2,128
  80b608:	10bfe004 	addi	r2,r2,-128
  80b60c:	003bd006 	br	80a550 <___vfiprintf_internal_r+0x104>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b610:	408001f0 	cmpltui	r2,r8,7
  80b614:	4039883a 	mov	fp,r8
  80b618:	10002426 	beq	r2,zero,80b6ac <___vfiprintf_internal_r+0x1260>
				cp = "(null)";
  80b61c:	04c02074 	movhi	r19,129
  80b620:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80b624:	d8c00415 	stw	r3,16(sp)
				cp = "(null)";
  80b628:	9ccace04 	addi	r19,r19,11064
  80b62c:	003c4006 	br	80a730 <___vfiprintf_internal_r+0x2e4>
hex:			_uquad = UARG ();
  80b630:	d8c00417 	ldw	r3,16(sp)
  80b634:	0039883a 	mov	fp,zero
  80b638:	d9000415 	stw	r4,16(sp)
  80b63c:	1dc00017 	ldw	r23,0(r3)
  80b640:	003d7f06 	br	80ac40 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80b644:	d8800417 	ldw	r2,16(sp)
  80b648:	0039883a 	mov	fp,zero
  80b64c:	d8c00415 	stw	r3,16(sp)
  80b650:	15c00017 	ldw	r23,0(r2)
			base = OCT;
  80b654:	0005883a 	mov	r2,zero
  80b658:	003cce06 	br	80a994 <___vfiprintf_internal_r+0x548>
			_uquad = SARG ();
  80b65c:	d8800417 	ldw	r2,16(sp)
  80b660:	d8c00415 	stw	r3,16(sp)
  80b664:	15c00017 	ldw	r23,0(r2)
  80b668:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80b66c:	e005883a 	mov	r2,fp
  80b670:	003d5106 	br	80abb8 <___vfiprintf_internal_r+0x76c>
			_uquad = UARG ();
  80b674:	d8800417 	ldw	r2,16(sp)
  80b678:	0039883a 	mov	fp,zero
  80b67c:	d8c00415 	stw	r3,16(sp)
  80b680:	15c00017 	ldw	r23,0(r2)
			base = DEC;
  80b684:	00800044 	movi	r2,1
  80b688:	003cc206 	br	80a994 <___vfiprintf_internal_r+0x548>
		PAD (dprec - size, zeroes);
  80b68c:	3009883a 	mov	r4,r6
  80b690:	39cb6304 	addi	r7,r7,11660
  80b694:	003ead06 	br	80b14c <___vfiprintf_internal_r+0xd00>
		uio->uio_iovcnt = 0;
  80b698:	d9801904 	addi	r6,sp,100
  80b69c:	01400044 	movi	r5,1
  80b6a0:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80b6a4:	9021883a 	mov	r16,r18
  80b6a8:	003c5b06 	br	80a818 <___vfiprintf_internal_r+0x3cc>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80b6ac:	07000184 	movi	fp,6
  80b6b0:	003fda06 	br	80b61c <___vfiprintf_internal_r+0x11d0>
		if (flags & HEXPREFIX)
  80b6b4:	703ee51e 	bne	r14,zero,80b24c <___vfiprintf_internal_r+0xe00>
  80b6b8:	0009883a 	mov	r4,zero
			PRINT (&sign, 1);
  80b6bc:	d9801904 	addi	r6,sp,100
		if (flags & HEXPREFIX)
  80b6c0:	01400044 	movi	r5,1
			PAD (width - realsz, blanks);
  80b6c4:	9021883a 	mov	r16,r18
  80b6c8:	003c5306 	br	80a818 <___vfiprintf_internal_r+0x3cc>
  80b6cc:	d9800945 	stb	r6,37(sp)
  80b6d0:	003c1106 	br	80a718 <___vfiprintf_internal_r+0x2cc>
	if (uio->uio_resid == 0) {
  80b6d4:	d9800a04 	addi	r6,sp,40
  80b6d8:	a80b883a 	mov	r5,r21
  80b6dc:	b009883a 	mov	r4,r22
  80b6e0:	080a3400 	call	80a340 <__sprint_r.part.0>
  80b6e4:	003c6e06 	br	80a8a0 <___vfiprintf_internal_r+0x454>
				flags &= ~ZEROPAD;
  80b6e8:	db400017 	ldw	r13,0(sp)
  80b6ec:	003d3f06 	br	80abec <___vfiprintf_internal_r+0x7a0>
  80b6f0:	402f883a 	mov	r23,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  80b6f4:	d8c00415 	stw	r3,16(sp)
  80b6f8:	4039883a 	mov	fp,r8
  80b6fc:	003c0c06 	br	80a730 <___vfiprintf_internal_r+0x2e4>
  80b700:	d9800945 	stb	r6,37(sp)
  80b704:	003d2406 	br	80ab98 <___vfiprintf_internal_r+0x74c>
  80b708:	d9800945 	stb	r6,37(sp)
  80b70c:	003d4206 	br	80ac18 <___vfiprintf_internal_r+0x7cc>
  80b710:	d9800945 	stb	r6,37(sp)
  80b714:	003d7a06 	br	80ad00 <___vfiprintf_internal_r+0x8b4>
			PAD (width - realsz, blanks);
  80b718:	303f883a 	mov	ra,r6
  80b71c:	39cb6704 	addi	r7,r7,11676
  80b720:	003f2006 	br	80b3a4 <___vfiprintf_internal_r+0xf58>
  80b724:	d9800945 	stb	r6,37(sp)
  80b728:	003df806 	br	80af0c <___vfiprintf_internal_r+0xac0>
  80b72c:	d9800945 	stb	r6,37(sp)
  80b730:	003e0806 	br	80af54 <___vfiprintf_internal_r+0xb08>
			PAD (width - realsz, blanks);
  80b734:	21400044 	addi	r5,r4,1
  80b738:	39cb6704 	addi	r7,r7,11676
  80b73c:	003d0306 	br	80ab4c <___vfiprintf_internal_r+0x700>
		return (EOF);
  80b740:	00bfffc4 	movi	r2,-1
  80b744:	d8800115 	stw	r2,4(sp)
  80b748:	003c5806 	br	80a8ac <___vfiprintf_internal_r+0x460>
  80b74c:	01c02074 	movhi	r7,129
			PAD (width - realsz, zeroes);
  80b750:	301b883a 	mov	r13,r6
  80b754:	281d883a 	mov	r14,r5
  80b758:	39cb6304 	addi	r7,r7,11660
  80b75c:	003e3e06 	br	80b058 <___vfiprintf_internal_r+0xc0c>
				prec = GET_ARG (n, ap, int);
  80b760:	d8800417 	ldw	r2,16(sp)
  80b764:	12000017 	ldw	r8,0(r2)
  80b768:	11000104 	addi	r4,r2,4
				if (prec < 0)
  80b76c:	4000010e 	bge	r8,zero,80b774 <___vfiprintf_internal_r+0x1328>
  80b770:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  80b774:	a0800043 	ldbu	r2,1(r20)
				prec = GET_ARG (n, ap, int);
  80b778:	d9000415 	stw	r4,16(sp)
			if ((ch = *fmt++) == '*') {
  80b77c:	1829883a 	mov	r20,r3
  80b780:	10803fcc 	andi	r2,r2,255
  80b784:	1080201c 	xori	r2,r2,128
  80b788:	10bfe004 	addi	r2,r2,-128
				goto rflag;
  80b78c:	003b7006 	br	80a550 <___vfiprintf_internal_r+0x104>

0080b790 <__vfiprintf_internal>:
{
  80b790:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80b794:	d1200917 	ldw	r4,-32732(gp)
  80b798:	300f883a 	mov	r7,r6
  80b79c:	280d883a 	mov	r6,r5
  80b7a0:	100b883a 	mov	r5,r2
  80b7a4:	080a44c1 	jmpi	80a44c <___vfiprintf_internal_r>

0080b7a8 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  80b7a8:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  80b7ac:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  80b7b0:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  80b7b4:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  80b7b8:	2a400917 	ldw	r9,36(r5)
{
  80b7bc:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  80b7c0:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  80b7c4:	00c10004 	movi	r3,1024
{
  80b7c8:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  80b7cc:	10bfff4c 	andi	r2,r2,65533
{
  80b7d0:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b7d4:	d80b883a 	mov	r5,sp
{
  80b7d8:	dc811c15 	stw	r18,1136(sp)
  80b7dc:	dc411b15 	stw	r17,1132(sp)
  80b7e0:	dfc11d15 	stw	ra,1140(sp)
  80b7e4:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  80b7e8:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  80b7ec:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  80b7f0:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80b7f4:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  80b7f8:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  80b7fc:	da000015 	stw	r8,0(sp)
  80b800:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80b804:	d8c00215 	stw	r3,8(sp)
  80b808:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  80b80c:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80b810:	080a44c0 	call	80a44c <___vfiprintf_internal_r>
  80b814:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b818:	10000d0e 	bge	r2,zero,80b850 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  80b81c:	d880030b 	ldhu	r2,12(sp)
  80b820:	1080100c 	andi	r2,r2,64
  80b824:	10000326 	beq	r2,zero,80b834 <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  80b828:	8080030b 	ldhu	r2,12(r16)
  80b82c:	10801014 	ori	r2,r2,64
  80b830:	8080030d 	sth	r2,12(r16)
}
  80b834:	8805883a 	mov	r2,r17
  80b838:	dfc11d17 	ldw	ra,1140(sp)
  80b83c:	dc811c17 	ldw	r18,1136(sp)
  80b840:	dc411b17 	ldw	r17,1132(sp)
  80b844:	dc011a17 	ldw	r16,1128(sp)
  80b848:	dec11e04 	addi	sp,sp,1144
  80b84c:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80b850:	d80b883a 	mov	r5,sp
  80b854:	9009883a 	mov	r4,r18
  80b858:	0806bc00 	call	806bc0 <_fflush_r>
  80b85c:	103fef26 	beq	r2,zero,80b81c <__sbprintf+0x74>
		ret = EOF;
  80b860:	047fffc4 	movi	r17,-1
  80b864:	003fed06 	br	80b81c <__sbprintf+0x74>

0080b868 <_wctomb_r>:
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
  return __WCTOMB (r, s, _wchar, state);
  80b868:	00802074 	movhi	r2,129
  80b86c:	108d6817 	ldw	r2,13728(r2)
  80b870:	1000683a 	jmp	r2

0080b874 <__ascii_wctomb>:
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;

  if (s == NULL)
  80b874:	28000926 	beq	r5,zero,80b89c <__ascii_wctomb+0x28>
    return 0;
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
  80b878:	30804030 	cmpltui	r2,r6,256
  80b87c:	10000326 	beq	r2,zero,80b88c <__ascii_wctomb+0x18>
    {
      r->_errno = EILSEQ;
      return -1;
    }

  *s = (char) wchar;
  80b880:	29800005 	stb	r6,0(r5)
  return 1;
  80b884:	00800044 	movi	r2,1
  80b888:	f800283a 	ret
      r->_errno = EILSEQ;
  80b88c:	00802284 	movi	r2,138
  80b890:	20800015 	stw	r2,0(r4)
      return -1;
  80b894:	00bfffc4 	movi	r2,-1
  80b898:	f800283a 	ret
    return 0;
  80b89c:	0005883a 	mov	r2,zero
}
  80b8a0:	f800283a 	ret

0080b8a4 <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
  80b8a4:	2807883a 	mov	r3,r5
  80b8a8:	defffe04 	addi	sp,sp,-8
  80b8ac:	dc000015 	stw	r16,0(sp)
  80b8b0:	300b883a 	mov	r5,r6
  80b8b4:	2021883a 	mov	r16,r4
  80b8b8:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b8bc:	1809883a 	mov	r4,r3
{
  80b8c0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b8c4:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b8c8:	08108b40 	call	8108b4 <write>
  80b8cc:	10ffffd8 	cmpnei	r3,r2,-1
  80b8d0:	18000426 	beq	r3,zero,80b8e4 <_write_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b8d4:	dfc00117 	ldw	ra,4(sp)
  80b8d8:	dc000017 	ldw	r16,0(sp)
  80b8dc:	dec00204 	addi	sp,sp,8
  80b8e0:	f800283a 	ret
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b8e4:	d0e71817 	ldw	r3,-25504(gp)
  80b8e8:	183ffa26 	beq	r3,zero,80b8d4 <_write_r+0x30>
    ptr->_errno = errno;
  80b8ec:	80c00015 	stw	r3,0(r16)
}
  80b8f0:	dfc00117 	ldw	ra,4(sp)
  80b8f4:	dc000017 	ldw	r16,0(sp)
  80b8f8:	dec00204 	addi	sp,sp,8
  80b8fc:	f800283a 	ret

0080b900 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80b900:	defffe04 	addi	sp,sp,-8
  80b904:	dc000015 	stw	r16,0(sp)
  80b908:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b90c:	2809883a 	mov	r4,r5
{
  80b910:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b914:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b918:	080fc340 	call	80fc34 <close>
  80b91c:	10ffffd8 	cmpnei	r3,r2,-1
  80b920:	18000426 	beq	r3,zero,80b934 <_close_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80b924:	dfc00117 	ldw	ra,4(sp)
  80b928:	dc000017 	ldw	r16,0(sp)
  80b92c:	dec00204 	addi	sp,sp,8
  80b930:	f800283a 	ret
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b934:	d0e71817 	ldw	r3,-25504(gp)
  80b938:	183ffa26 	beq	r3,zero,80b924 <_close_r+0x24>
    ptr->_errno = errno;
  80b93c:	80c00015 	stw	r3,0(r16)
}
  80b940:	dfc00117 	ldw	ra,4(sp)
  80b944:	dc000017 	ldw	r16,0(sp)
  80b948:	dec00204 	addi	sp,sp,8
  80b94c:	f800283a 	ret

0080b950 <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
  80b950:	3005883a 	mov	r2,r6
  fiprintf(stderr,
  80b954:	d1a00917 	ldw	r6,-32732(gp)
{
  80b958:	defffc04 	addi	sp,sp,-16
  80b95c:	3807883a 	mov	r3,r7
  80b960:	dfc00315 	stw	ra,12(sp)
  fiprintf(stderr,
  80b964:	32400317 	ldw	r9,12(r6)
{
  80b968:	200f883a 	mov	r7,r4
  80b96c:	2811883a 	mov	r8,r5
  80b970:	180d883a 	mov	r6,r3
  fiprintf(stderr,
  80b974:	10000a26 	beq	r2,zero,80b9a0 <__assert_func+0x50>
  80b978:	00c02074 	movhi	r3,129
  80b97c:	18cb6b04 	addi	r3,r3,11692
  80b980:	01402074 	movhi	r5,129
  80b984:	294b6f04 	addi	r5,r5,11708
  80b988:	4809883a 	mov	r4,r9
  80b98c:	d8c00115 	stw	r3,4(sp)
  80b990:	da000015 	stw	r8,0(sp)
  80b994:	d8800215 	stw	r2,8(sp)
  80b998:	080bc440 	call	80bc44 <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
  80b99c:	080c2240 	call	80c224 <abort>
  fiprintf(stderr,
  80b9a0:	00c02074 	movhi	r3,129
  80b9a4:	18cb6e04 	addi	r3,r3,11704
  80b9a8:	1805883a 	mov	r2,r3
  80b9ac:	003ff406 	br	80b980 <__assert_func+0x30>

0080b9b0 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
  80b9b0:	deffff04 	addi	sp,sp,-4
   __assert_func (file, line, NULL, failedexpr);
  80b9b4:	300f883a 	mov	r7,r6
  80b9b8:	000d883a 	mov	r6,zero
{
  80b9bc:	dfc00015 	stw	ra,0(sp)
   __assert_func (file, line, NULL, failedexpr);
  80b9c0:	080b9500 	call	80b950 <__assert_func>

0080b9c4 <_calloc_r>:
{
  80b9c4:	defffe04 	addi	sp,sp,-8
  80b9c8:	dc000015 	stw	r16,0(sp)
  80b9cc:	2021883a 	mov	r16,r4
  80b9d0:	2809883a 	mov	r4,r5
  INTERNAL_SIZE_T sz = n * elem_size;
  80b9d4:	300b883a 	mov	r5,r6
{
  80b9d8:	dfc00115 	stw	ra,4(sp)
  INTERNAL_SIZE_T sz = n * elem_size;
  80b9dc:	0802af80 	call	802af8 <__mulsi3>
  mem = mALLOc (RCALL sz);
  80b9e0:	8009883a 	mov	r4,r16
  80b9e4:	100b883a 	mov	r5,r2
  80b9e8:	0807da80 	call	807da8 <_malloc_r>
  80b9ec:	1009883a 	mov	r4,r2
  if (mem == 0) 
  80b9f0:	10000c26 	beq	r2,zero,80ba24 <_calloc_r+0x60>
    csz = chunksize(p);
  80b9f4:	11bfff17 	ldw	r6,-4(r2)
  80b9f8:	00bfff04 	movi	r2,-4
  80b9fc:	308c703a 	and	r6,r6,r2
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80ba00:	31bfff04 	addi	r6,r6,-4
  80ba04:	30800968 	cmpgeui	r2,r6,37
  80ba08:	1000151e 	bne	r2,zero,80ba60 <_calloc_r+0x9c>
  80ba0c:	30800530 	cmpltui	r2,r6,20
  80ba10:	10000926 	beq	r2,zero,80ba38 <_calloc_r+0x74>
  80ba14:	2005883a 	mov	r2,r4
  80ba18:	10000015 	stw	zero,0(r2)
  80ba1c:	10000115 	stw	zero,4(r2)
  80ba20:	10000215 	stw	zero,8(r2)
}
  80ba24:	2005883a 	mov	r2,r4
  80ba28:	dfc00117 	ldw	ra,4(sp)
  80ba2c:	dc000017 	ldw	r16,0(sp)
  80ba30:	dec00204 	addi	sp,sp,8
  80ba34:	f800283a 	ret
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80ba38:	20000015 	stw	zero,0(r4)
  80ba3c:	20000115 	stw	zero,4(r4)
  80ba40:	30800728 	cmpgeui	r2,r6,28
  80ba44:	10000a26 	beq	r2,zero,80ba70 <_calloc_r+0xac>
  80ba48:	20000215 	stw	zero,8(r4)
  80ba4c:	20000315 	stw	zero,12(r4)
  80ba50:	31800920 	cmpeqi	r6,r6,36
  80ba54:	3000081e 	bne	r6,zero,80ba78 <_calloc_r+0xb4>
  80ba58:	20800404 	addi	r2,r4,16
  80ba5c:	003fee06 	br	80ba18 <_calloc_r+0x54>
  80ba60:	000b883a 	mov	r5,zero
  80ba64:	08088b40 	call	8088b4 <memset>
  80ba68:	1009883a 	mov	r4,r2
  80ba6c:	003fed06 	br	80ba24 <_calloc_r+0x60>
  80ba70:	20800204 	addi	r2,r4,8
  80ba74:	003fe806 	br	80ba18 <_calloc_r+0x54>
  80ba78:	20000415 	stw	zero,16(r4)
  80ba7c:	20800604 	addi	r2,r4,24
  80ba80:	20000515 	stw	zero,20(r4)
  80ba84:	003fe406 	br	80ba18 <_calloc_r+0x54>

0080ba88 <_fclose_r.part.0>:
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_diprintf_r (struct _reent *, int, const char *, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_dprintf_r (struct _reent *, int, const char *__restrict, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_fclose_r (struct _reent *, FILE *);
  80ba88:	defffc04 	addi	sp,sp,-16
  80ba8c:	dc800215 	stw	r18,8(sp)
  80ba90:	dc400115 	stw	r17,4(sp)
  80ba94:	dc000015 	stw	r16,0(sp)
  80ba98:	dfc00315 	stw	ra,12(sp)
  80ba9c:	2821883a 	mov	r16,r5
  80baa0:	2023883a 	mov	r17,r4
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
  80baa4:	08069980 	call	806998 <__sflush_r>
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80baa8:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80baac:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80bab0:	18000426 	beq	r3,zero,80bac4 <_fclose_r.part.0+0x3c>
  80bab4:	81400717 	ldw	r5,28(r16)
  80bab8:	8809883a 	mov	r4,r17
  80babc:	183ee83a 	callr	r3
  80bac0:	10001916 	blt	r2,zero,80bb28 <_fclose_r.part.0+0xa0>
    r = EOF;
  if (fp->_flags & __SMBF)
  80bac4:	8080030b 	ldhu	r2,12(r16)
  80bac8:	1080200c 	andi	r2,r2,128
  80bacc:	10001a1e 	bne	r2,zero,80bb38 <_fclose_r.part.0+0xb0>
    _free_r (rptr, (char *) fp->_bf._base);
  if (HASUB (fp))
  80bad0:	81400c17 	ldw	r5,48(r16)
  80bad4:	28000526 	beq	r5,zero,80baec <_fclose_r.part.0+0x64>
    FREEUB (rptr, fp);
  80bad8:	80801004 	addi	r2,r16,64
  80badc:	28800226 	beq	r5,r2,80bae8 <_fclose_r.part.0+0x60>
  80bae0:	8809883a 	mov	r4,r17
  80bae4:	08071500 	call	807150 <_free_r>
  80bae8:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80baec:	81401117 	ldw	r5,68(r16)
  80baf0:	28000326 	beq	r5,zero,80bb00 <_fclose_r.part.0+0x78>
    FREELB (rptr, fp);
  80baf4:	8809883a 	mov	r4,r17
  80baf8:	08071500 	call	807150 <_free_r>
  80bafc:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80bb00:	08070080 	call	807008 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80bb04:	8000030d 	sth	zero,12(r16)
    _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
  80bb08:	080700c0 	call	80700c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
  80bb0c:	9005883a 	mov	r2,r18
  80bb10:	dfc00317 	ldw	ra,12(sp)
  80bb14:	dc800217 	ldw	r18,8(sp)
  80bb18:	dc400117 	ldw	r17,4(sp)
  80bb1c:	dc000017 	ldw	r16,0(sp)
  80bb20:	dec00404 	addi	sp,sp,16
  80bb24:	f800283a 	ret
  if (fp->_flags & __SMBF)
  80bb28:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80bb2c:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80bb30:	1080200c 	andi	r2,r2,128
  80bb34:	103fe626 	beq	r2,zero,80bad0 <_fclose_r.part.0+0x48>
    _free_r (rptr, (char *) fp->_bf._base);
  80bb38:	81400417 	ldw	r5,16(r16)
  80bb3c:	8809883a 	mov	r4,r17
  80bb40:	08071500 	call	807150 <_free_r>
  80bb44:	003fe206 	br	80bad0 <_fclose_r.part.0+0x48>

0080bb48 <_fclose_r>:
  if (fp == NULL)
  80bb48:	28001926 	beq	r5,zero,80bbb0 <_fclose_r+0x68>
{
  80bb4c:	defffd04 	addi	sp,sp,-12
  80bb50:	dc000115 	stw	r16,4(sp)
  80bb54:	dfc00215 	stw	ra,8(sp)
  80bb58:	2021883a 	mov	r16,r4
  CHECK_INIT (rptr, fp);
  80bb5c:	20000226 	beq	r4,zero,80bb68 <_fclose_r+0x20>
  80bb60:	20800e17 	ldw	r2,56(r4)
  80bb64:	10000c26 	beq	r2,zero,80bb98 <_fclose_r+0x50>
  if (fp->_flags == 0)		/* not open! */
  80bb68:	2880030f 	ldh	r2,12(r5)
  80bb6c:	1000051e 	bne	r2,zero,80bb84 <_fclose_r+0x3c>
}
  80bb70:	0005883a 	mov	r2,zero
  80bb74:	dfc00217 	ldw	ra,8(sp)
  80bb78:	dc000117 	ldw	r16,4(sp)
  80bb7c:	dec00304 	addi	sp,sp,12
  80bb80:	f800283a 	ret
  80bb84:	8009883a 	mov	r4,r16
  80bb88:	dfc00217 	ldw	ra,8(sp)
  80bb8c:	dc000117 	ldw	r16,4(sp)
  80bb90:	dec00304 	addi	sp,sp,12
  80bb94:	080ba881 	jmpi	80ba88 <_fclose_r.part.0>
  80bb98:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (rptr, fp);
  80bb9c:	0806ff80 	call	806ff8 <__sinit>
  80bba0:	d9400017 	ldw	r5,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80bba4:	2880030f 	ldh	r2,12(r5)
  80bba8:	103ff126 	beq	r2,zero,80bb70 <_fclose_r+0x28>
  80bbac:	003ff506 	br	80bb84 <_fclose_r+0x3c>
}
  80bbb0:	0005883a 	mov	r2,zero
  80bbb4:	f800283a 	ret

0080bbb8 <fclose>:
  if (fp == NULL)
  80bbb8:	20000726 	beq	r4,zero,80bbd8 <fclose+0x20>
  80bbbc:	200b883a 	mov	r5,r4
#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
  return _fclose_r(_REENT, fp);
  80bbc0:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (rptr, fp);
  80bbc4:	20000226 	beq	r4,zero,80bbd0 <fclose+0x18>
  80bbc8:	20800e17 	ldw	r2,56(r4)
  80bbcc:	10000526 	beq	r2,zero,80bbe4 <fclose+0x2c>
  if (fp->_flags == 0)		/* not open! */
  80bbd0:	2880030f 	ldh	r2,12(r5)
  80bbd4:	1000021e 	bne	r2,zero,80bbe0 <fclose+0x28>
}
  80bbd8:	0005883a 	mov	r2,zero
  80bbdc:	f800283a 	ret
  80bbe0:	080ba881 	jmpi	80ba88 <_fclose_r.part.0>
{
  80bbe4:	defffd04 	addi	sp,sp,-12
  80bbe8:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (rptr, fp);
  80bbec:	d9000015 	stw	r4,0(sp)
{
  80bbf0:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (rptr, fp);
  80bbf4:	0806ff80 	call	806ff8 <__sinit>
  80bbf8:	d9400117 	ldw	r5,4(sp)
  80bbfc:	d9000017 	ldw	r4,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80bc00:	2880030f 	ldh	r2,12(r5)
  80bc04:	10000326 	beq	r2,zero,80bc14 <fclose+0x5c>
}
  80bc08:	dfc00217 	ldw	ra,8(sp)
  80bc0c:	dec00304 	addi	sp,sp,12
  80bc10:	080ba881 	jmpi	80ba88 <_fclose_r.part.0>
  80bc14:	0005883a 	mov	r2,zero
  80bc18:	dfc00217 	ldw	ra,8(sp)
  80bc1c:	dec00304 	addi	sp,sp,12
  80bc20:	f800283a 	ret

0080bc24 <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
  80bc24:	defffe04 	addi	sp,sp,-8
  80bc28:	dfc00015 	stw	ra,0(sp)
  80bc2c:	d9c00115 	stw	r7,4(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
  80bc30:	d9c00104 	addi	r7,sp,4
  80bc34:	080bfd40 	call	80bfd4 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bc38:	dfc00017 	ldw	ra,0(sp)
  80bc3c:	dec00204 	addi	sp,sp,8
  80bc40:	f800283a 	ret

0080bc44 <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
  80bc44:	defffd04 	addi	sp,sp,-12
  80bc48:	2005883a 	mov	r2,r4
  80bc4c:	dfc00015 	stw	ra,0(sp)
  80bc50:	d9800115 	stw	r6,4(sp)
  80bc54:	d9c00215 	stw	r7,8(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
  80bc58:	d1200917 	ldw	r4,-32732(gp)
  80bc5c:	280d883a 	mov	r6,r5
  80bc60:	d9c00104 	addi	r7,sp,4
  80bc64:	100b883a 	mov	r5,r2
  80bc68:	080bfd40 	call	80bfd4 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80bc6c:	dfc00017 	ldw	ra,0(sp)
  80bc70:	dec00304 	addi	sp,sp,12
  80bc74:	f800283a 	ret

0080bc78 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
  80bc78:	defff904 	addi	sp,sp,-28
  80bc7c:	dcc00415 	stw	r19,16(sp)
  80bc80:	dc800315 	stw	r18,12(sp)
  80bc84:	dc000115 	stw	r16,4(sp)
  80bc88:	dfc00615 	stw	ra,24(sp)
  80bc8c:	dd000515 	stw	r20,20(sp)
  80bc90:	dc400215 	stw	r17,8(sp)
  80bc94:	2025883a 	mov	r18,r4
  80bc98:	2827883a 	mov	r19,r5
  80bc9c:	3021883a 	mov	r16,r6
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80bca0:	0807ae00 	call	807ae0 <__locale_mb_cur_max>
  80bca4:	10800058 	cmpnei	r2,r2,1
  80bca8:	1000071e 	bne	r2,zero,80bcc8 <__fputwc+0x50>
  80bcac:	98bfffc4 	addi	r2,r19,-1
  80bcb0:	10803fe8 	cmpgeui	r2,r2,255
  80bcb4:	1000041e 	bne	r2,zero,80bcc8 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
  80bcb8:	980b883a 	mov	r5,r19
  80bcbc:	dcc000c5 	stb	r19,3(sp)
      len = 1;
  80bcc0:	05000044 	movi	r20,1
  80bcc4:	00000a06 	br	80bcf0 <__fputwc+0x78>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80bcc8:	81c01704 	addi	r7,r16,92
  80bccc:	980d883a 	mov	r6,r19
  80bcd0:	d94000c4 	addi	r5,sp,3
  80bcd4:	9009883a 	mov	r4,r18
  80bcd8:	080c1340 	call	80c134 <_wcrtomb_r>
  80bcdc:	1029883a 	mov	r20,r2
  80bce0:	10bfffd8 	cmpnei	r2,r2,-1
  80bce4:	10003926 	beq	r2,zero,80bdcc <__fputwc+0x154>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
  80bce8:	a0001f26 	beq	r20,zero,80bd68 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bcec:	d94000c3 	ldbu	r5,3(sp)
  for (i = 0; i < len; i++)
  80bcf0:	0023883a 	mov	r17,zero
  80bcf4:	00000a06 	br	80bd20 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bcf8:	80800017 	ldw	r2,0(r16)
  80bcfc:	11400005 	stb	r5,0(r2)
  80bd00:	80c00017 	ldw	r3,0(r16)
  80bd04:	18c00044 	addi	r3,r3,1
  80bd08:	80c00015 	stw	r3,0(r16)
  for (i = 0; i < len; i++)
  80bd0c:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd10:	d88000c4 	addi	r2,sp,3
  80bd14:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80bd18:	8d00132e 	bgeu	r17,r20,80bd68 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd1c:	19400003 	ldbu	r5,0(r3)
  80bd20:	80c00217 	ldw	r3,8(r16)
  80bd24:	18ffffc4 	addi	r3,r3,-1
  80bd28:	80c00215 	stw	r3,8(r16)
  80bd2c:	183ff20e 	bge	r3,zero,80bcf8 <__fputwc+0x80>
  80bd30:	80800617 	ldw	r2,24(r16)
  80bd34:	18801616 	blt	r3,r2,80bd90 <__fputwc+0x118>
  80bd38:	80800017 	ldw	r2,0(r16)
  80bd3c:	11400005 	stb	r5,0(r2)
  80bd40:	80800017 	ldw	r2,0(r16)
  80bd44:	10c00003 	ldbu	r3,0(r2)
  80bd48:	10800044 	addi	r2,r2,1
  80bd4c:	18c002a0 	cmpeqi	r3,r3,10
  80bd50:	1800171e 	bne	r3,zero,80bdb0 <__fputwc+0x138>
  80bd54:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80bd58:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd5c:	d88000c4 	addi	r2,sp,3
  80bd60:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80bd64:	8d3fed36 	bltu	r17,r20,80bd1c <__fputwc+0xa4>
      return WEOF;

  return (wint_t) wc;
  80bd68:	9829883a 	mov	r20,r19
}
  80bd6c:	a005883a 	mov	r2,r20
  80bd70:	dfc00617 	ldw	ra,24(sp)
  80bd74:	dd000517 	ldw	r20,20(sp)
  80bd78:	dcc00417 	ldw	r19,16(sp)
  80bd7c:	dc800317 	ldw	r18,12(sp)
  80bd80:	dc400217 	ldw	r17,8(sp)
  80bd84:	dc000117 	ldw	r16,4(sp)
  80bd88:	dec00704 	addi	sp,sp,28
  80bd8c:	f800283a 	ret
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bd90:	29403fcc 	andi	r5,r5,255
  80bd94:	800d883a 	mov	r6,r16
  80bd98:	9009883a 	mov	r4,r18
  80bd9c:	080bfd80 	call	80bfd8 <__swbuf_r>
  80bda0:	10bfffe0 	cmpeqi	r2,r2,-1
  80bda4:	103fd926 	beq	r2,zero,80bd0c <__fputwc+0x94>
      return WEOF;
  80bda8:	053fffc4 	movi	r20,-1
  80bdac:	003fef06 	br	80bd6c <__fputwc+0xf4>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80bdb0:	800d883a 	mov	r6,r16
  80bdb4:	01400284 	movi	r5,10
  80bdb8:	9009883a 	mov	r4,r18
  80bdbc:	080bfd80 	call	80bfd8 <__swbuf_r>
  80bdc0:	10bfffe0 	cmpeqi	r2,r2,-1
  80bdc4:	103fd126 	beq	r2,zero,80bd0c <__fputwc+0x94>
  80bdc8:	003ff706 	br	80bda8 <__fputwc+0x130>
	  fp->_flags |= __SERR;
  80bdcc:	8080030b 	ldhu	r2,12(r16)
  80bdd0:	10801014 	ori	r2,r2,64
  80bdd4:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80bdd8:	003fe406 	br	80bd6c <__fputwc+0xf4>

0080bddc <_fputwc_r>:
	FILE *fp)
{
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
  80bddc:	3080030b 	ldhu	r2,12(r6)
  80bde0:	10c8000c 	andi	r3,r2,8192
  80bde4:	1800051e 	bne	r3,zero,80bdfc <_fputwc_r+0x20>
  _newlib_flockfile_start (fp);
  80bde8:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80bdec:	10880014 	ori	r2,r2,8192
  80bdf0:	3080030d 	sth	r2,12(r6)
  80bdf4:	18880014 	ori	r2,r3,8192
  80bdf8:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80bdfc:	080bc781 	jmpi	80bc78 <__fputwc>

0080be00 <fputwc>:
}

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
  80be00:	defffc04 	addi	sp,sp,-16
  80be04:	dc000215 	stw	r16,8(sp)
  struct _reent *reent = _REENT;
  80be08:	d4200917 	ldw	r16,-32732(gp)
{
  80be0c:	dfc00315 	stw	ra,12(sp)
  80be10:	280d883a 	mov	r6,r5
  80be14:	200b883a 	mov	r5,r4

  CHECK_INIT(reent, fp);
  80be18:	80000226 	beq	r16,zero,80be24 <fputwc+0x24>
  80be1c:	80800e17 	ldw	r2,56(r16)
  80be20:	10000d26 	beq	r2,zero,80be58 <fputwc+0x58>
  ORIENT(fp, 1);
  80be24:	3080030b 	ldhu	r2,12(r6)
  80be28:	10c8000c 	andi	r3,r2,8192
  80be2c:	1800051e 	bne	r3,zero,80be44 <fputwc+0x44>
  _newlib_flockfile_start (fp);
  80be30:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80be34:	10880014 	ori	r2,r2,8192
  80be38:	3080030d 	sth	r2,12(r6)
  80be3c:	18880014 	ori	r2,r3,8192
  80be40:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80be44:	8009883a 	mov	r4,r16
  return _fputwc_r (reent, wc, fp);
}
  80be48:	dfc00317 	ldw	ra,12(sp)
  80be4c:	dc000217 	ldw	r16,8(sp)
  80be50:	dec00404 	addi	sp,sp,16
  r = __fputwc(ptr, wc, fp);
  80be54:	080bc781 	jmpi	80bc78 <__fputwc>
  80be58:	d9000015 	stw	r4,0(sp)
  CHECK_INIT(reent, fp);
  80be5c:	8009883a 	mov	r4,r16
  80be60:	d9800115 	stw	r6,4(sp)
  80be64:	0806ff80 	call	806ff8 <__sinit>
  80be68:	d9800117 	ldw	r6,4(sp)
  80be6c:	d9400017 	ldw	r5,0(sp)
  80be70:	003fec06 	br	80be24 <fputwc+0x24>

0080be74 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
  80be74:	2807883a 	mov	r3,r5
  80be78:	defffe04 	addi	sp,sp,-8
  80be7c:	dc000015 	stw	r16,0(sp)
  80be80:	300b883a 	mov	r5,r6
  80be84:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80be88:	1809883a 	mov	r4,r3
{
  80be8c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80be90:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80be94:	080fdb00 	call	80fdb0 <fstat>
  80be98:	10ffffd8 	cmpnei	r3,r2,-1
  80be9c:	18000426 	beq	r3,zero,80beb0 <_fstat_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80bea0:	dfc00117 	ldw	ra,4(sp)
  80bea4:	dc000017 	ldw	r16,0(sp)
  80bea8:	dec00204 	addi	sp,sp,8
  80beac:	f800283a 	ret
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80beb0:	d0e71817 	ldw	r3,-25504(gp)
  80beb4:	183ffa26 	beq	r3,zero,80bea0 <_fstat_r+0x2c>
    ptr->_errno = errno;
  80beb8:	80c00015 	stw	r3,0(r16)
}
  80bebc:	dfc00117 	ldw	ra,4(sp)
  80bec0:	dc000017 	ldw	r16,0(sp)
  80bec4:	dec00204 	addi	sp,sp,8
  80bec8:	f800283a 	ret

0080becc <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80becc:	defffe04 	addi	sp,sp,-8
  80bed0:	dc000015 	stw	r16,0(sp)
  80bed4:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bed8:	2809883a 	mov	r4,r5
{
  80bedc:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bee0:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bee4:	080fec80 	call	80fec8 <isatty>
  80bee8:	10ffffd8 	cmpnei	r3,r2,-1
  80beec:	18000426 	beq	r3,zero,80bf00 <_isatty_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80bef0:	dfc00117 	ldw	ra,4(sp)
  80bef4:	dc000017 	ldw	r16,0(sp)
  80bef8:	dec00204 	addi	sp,sp,8
  80befc:	f800283a 	ret
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80bf00:	d0e71817 	ldw	r3,-25504(gp)
  80bf04:	183ffa26 	beq	r3,zero,80bef0 <_isatty_r+0x24>
    ptr->_errno = errno;
  80bf08:	80c00015 	stw	r3,0(r16)
}
  80bf0c:	dfc00117 	ldw	ra,4(sp)
  80bf10:	dc000017 	ldw	r16,0(sp)
  80bf14:	dec00204 	addi	sp,sp,8
  80bf18:	f800283a 	ret

0080bf1c <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
  80bf1c:	2807883a 	mov	r3,r5
  80bf20:	defffe04 	addi	sp,sp,-8
  80bf24:	dc000015 	stw	r16,0(sp)
  80bf28:	300b883a 	mov	r5,r6
  80bf2c:	2021883a 	mov	r16,r4
  80bf30:	380d883a 	mov	r6,r7
  _off_t ret;

  errno = 0;
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80bf34:	1809883a 	mov	r4,r3
{
  80bf38:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bf3c:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80bf40:	08102080 	call	810208 <lseek>
  80bf44:	10ffffd8 	cmpnei	r3,r2,-1
  80bf48:	18000426 	beq	r3,zero,80bf5c <_lseek_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80bf4c:	dfc00117 	ldw	ra,4(sp)
  80bf50:	dc000017 	ldw	r16,0(sp)
  80bf54:	dec00204 	addi	sp,sp,8
  80bf58:	f800283a 	ret
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80bf5c:	d0e71817 	ldw	r3,-25504(gp)
  80bf60:	183ffa26 	beq	r3,zero,80bf4c <_lseek_r+0x30>
    ptr->_errno = errno;
  80bf64:	80c00015 	stw	r3,0(r16)
}
  80bf68:	dfc00117 	ldw	ra,4(sp)
  80bf6c:	dc000017 	ldw	r16,0(sp)
  80bf70:	dec00204 	addi	sp,sp,8
  80bf74:	f800283a 	ret

0080bf78 <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
  80bf78:	2807883a 	mov	r3,r5
  80bf7c:	defffe04 	addi	sp,sp,-8
  80bf80:	dc000015 	stw	r16,0(sp)
  80bf84:	300b883a 	mov	r5,r6
  80bf88:	2021883a 	mov	r16,r4
  80bf8c:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80bf90:	1809883a 	mov	r4,r3
{
  80bf94:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bf98:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80bf9c:	08103e80 	call	8103e8 <read>
  80bfa0:	10ffffd8 	cmpnei	r3,r2,-1
  80bfa4:	18000426 	beq	r3,zero,80bfb8 <_read_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80bfa8:	dfc00117 	ldw	ra,4(sp)
  80bfac:	dc000017 	ldw	r16,0(sp)
  80bfb0:	dec00204 	addi	sp,sp,8
  80bfb4:	f800283a 	ret
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80bfb8:	d0e71817 	ldw	r3,-25504(gp)
  80bfbc:	183ffa26 	beq	r3,zero,80bfa8 <_read_r+0x30>
    ptr->_errno = errno;
  80bfc0:	80c00015 	stw	r3,0(r16)
}
  80bfc4:	dfc00117 	ldw	ra,4(sp)
  80bfc8:	dc000017 	ldw	r16,0(sp)
  80bfcc:	dec00204 	addi	sp,sp,8
  80bfd0:	f800283a 	ret

0080bfd4 <_vfiprintf_r>:
{
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
  80bfd4:	080a44c1 	jmpi	80a44c <___vfiprintf_internal_r>

0080bfd8 <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
  80bfd8:	defffb04 	addi	sp,sp,-20
  80bfdc:	dcc00315 	stw	r19,12(sp)
  80bfe0:	dc400115 	stw	r17,4(sp)
  80bfe4:	dc000015 	stw	r16,0(sp)
  80bfe8:	dfc00415 	stw	ra,16(sp)
  80bfec:	dc800215 	stw	r18,8(sp)
  80bff0:	2027883a 	mov	r19,r4
  80bff4:	2823883a 	mov	r17,r5
  80bff8:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
  80bffc:	20000226 	beq	r4,zero,80c008 <__swbuf_r+0x30>
  80c000:	20800e17 	ldw	r2,56(r4)
  80c004:	10003e26 	beq	r2,zero,80c100 <__swbuf_r+0x128>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
  80c008:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80c00c:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80c010:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80c014:	1880020c 	andi	r2,r3,8
  80c018:	10001f26 	beq	r2,zero,80c098 <__swbuf_r+0xc0>
  80c01c:	80800417 	ldw	r2,16(r16)
  80c020:	10001d26 	beq	r2,zero,80c098 <__swbuf_r+0xc0>
    return EOF;
  c = (unsigned char) c;

  ORIENT (fp, -1);
  80c024:	1948000c 	andi	r5,r3,8192
  80c028:	8c803fcc 	andi	r18,r17,255
  80c02c:	28002326 	beq	r5,zero,80c0bc <__swbuf_r+0xe4>
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
  80c030:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80c034:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c038:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c03c:	1100290e 	bge	r2,r4,80c0e4 <__swbuf_r+0x10c>
	return EOF;
      n = 0;
    }
  fp->_w--;
  *fp->_p++ = c;
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c040:	10800044 	addi	r2,r2,1
  fp->_w--;
  80c044:	81400217 	ldw	r5,8(r16)
  *fp->_p++ = c;
  80c048:	19000044 	addi	r4,r3,1
  80c04c:	81000015 	stw	r4,0(r16)
  fp->_w--;
  80c050:	297fffc4 	addi	r5,r5,-1
  80c054:	81400215 	stw	r5,8(r16)
  *fp->_p++ = c;
  80c058:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80c05c:	80c00517 	ldw	r3,20(r16)
  80c060:	18802926 	beq	r3,r2,80c108 <__swbuf_r+0x130>
  80c064:	8080030b 	ldhu	r2,12(r16)
  80c068:	1080004c 	andi	r2,r2,1
  80c06c:	10000226 	beq	r2,zero,80c078 <__swbuf_r+0xa0>
  80c070:	90800298 	cmpnei	r2,r18,10
  80c074:	10002426 	beq	r2,zero,80c108 <__swbuf_r+0x130>
    if (_fflush_r (ptr, fp))
      return EOF;
  return c;
}
  80c078:	9005883a 	mov	r2,r18
  80c07c:	dfc00417 	ldw	ra,16(sp)
  80c080:	dcc00317 	ldw	r19,12(sp)
  80c084:	dc800217 	ldw	r18,8(sp)
  80c088:	dc400117 	ldw	r17,4(sp)
  80c08c:	dc000017 	ldw	r16,0(sp)
  80c090:	dec00504 	addi	sp,sp,20
  80c094:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80c098:	800b883a 	mov	r5,r16
  80c09c:	9809883a 	mov	r4,r19
  80c0a0:	0804ed00 	call	804ed0 <__swsetup_r>
  80c0a4:	10001c1e 	bne	r2,zero,80c118 <__swbuf_r+0x140>
  ORIENT (fp, -1);
  80c0a8:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c0ac:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80c0b0:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80c0b4:	1948000c 	andi	r5,r3,8192
  80c0b8:	283fdd1e 	bne	r5,zero,80c030 <__swbuf_r+0x58>
  80c0bc:	81001917 	ldw	r4,100(r16)
  80c0c0:	18c80014 	ori	r3,r3,8192
  80c0c4:	0177ffc4 	movi	r5,-8193
  80c0c8:	2148703a 	and	r4,r4,r5
  80c0cc:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80c0d0:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80c0d4:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80c0d8:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80c0dc:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80c0e0:	113fd716 	blt	r2,r4,80c040 <__swbuf_r+0x68>
      if (_fflush_r (ptr, fp))
  80c0e4:	800b883a 	mov	r5,r16
  80c0e8:	9809883a 	mov	r4,r19
  80c0ec:	0806bc00 	call	806bc0 <_fflush_r>
  80c0f0:	1000091e 	bne	r2,zero,80c118 <__swbuf_r+0x140>
  *fp->_p++ = c;
  80c0f4:	80c00017 	ldw	r3,0(r16)
  80c0f8:	00800044 	movi	r2,1
  80c0fc:	003fd106 	br	80c044 <__swbuf_r+0x6c>
  CHECK_INIT (ptr, fp);
  80c100:	0806ff80 	call	806ff8 <__sinit>
  80c104:	003fc006 	br	80c008 <__swbuf_r+0x30>
    if (_fflush_r (ptr, fp))
  80c108:	800b883a 	mov	r5,r16
  80c10c:	9809883a 	mov	r4,r19
  80c110:	0806bc00 	call	806bc0 <_fflush_r>
  80c114:	103fd826 	beq	r2,zero,80c078 <__swbuf_r+0xa0>
    return EOF;
  80c118:	04bfffc4 	movi	r18,-1
  80c11c:	003fd606 	br	80c078 <__swbuf_r+0xa0>

0080c120 <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
  80c120:	2005883a 	mov	r2,r4
  return __swbuf_r (_REENT, c, fp);
  80c124:	d1200917 	ldw	r4,-32732(gp)
  80c128:	280d883a 	mov	r6,r5
  80c12c:	100b883a 	mov	r5,r2
  80c130:	080bfd81 	jmpi	80bfd8 <__swbuf_r>

0080c134 <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
  80c134:	defffa04 	addi	sp,sp,-24
  80c138:	dc400415 	stw	r17,16(sp)
  80c13c:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c140:	00802074 	movhi	r2,129
{
  80c144:	dfc00515 	stw	ra,20(sp)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c148:	108d6817 	ldw	r2,13728(r2)
{
  80c14c:	2023883a 	mov	r17,r4
  80c150:	3821883a 	mov	r16,r7
  if (s == NULL)
  80c154:	28000826 	beq	r5,zero,80c178 <_wcrtomb_r+0x44>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
  80c158:	103ee83a 	callr	r2

  if (retval == -1)
  80c15c:	10ffffd8 	cmpnei	r3,r2,-1
  80c160:	18000a26 	beq	r3,zero,80c18c <_wcrtomb_r+0x58>
      ptr->_errno = EILSEQ;
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
}
  80c164:	dfc00517 	ldw	ra,20(sp)
  80c168:	dc400417 	ldw	r17,16(sp)
  80c16c:	dc000317 	ldw	r16,12(sp)
  80c170:	dec00604 	addi	sp,sp,24
  80c174:	f800283a 	ret
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80c178:	000d883a 	mov	r6,zero
  80c17c:	d9400084 	addi	r5,sp,2
  80c180:	103ee83a 	callr	r2
  if (retval == -1)
  80c184:	10ffffd8 	cmpnei	r3,r2,-1
  80c188:	183ff61e 	bne	r3,zero,80c164 <_wcrtomb_r+0x30>
      ptr->_errno = EILSEQ;
  80c18c:	00802284 	movi	r2,138
      ps->__count = 0;
  80c190:	80000015 	stw	zero,0(r16)
      ptr->_errno = EILSEQ;
  80c194:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c198:	00bfffc4 	movi	r2,-1
  80c19c:	003ff106 	br	80c164 <_wcrtomb_r+0x30>

0080c1a0 <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
  80c1a0:	defffa04 	addi	sp,sp,-24
  80c1a4:	dc400415 	stw	r17,16(sp)
  80c1a8:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c1ac:	00c02074 	movhi	r3,129
{
  80c1b0:	dfc00515 	stw	ra,20(sp)
  struct _reent *reent = _REENT;
  80c1b4:	d4600917 	ldw	r17,-32732(gp)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c1b8:	18cd6817 	ldw	r3,13728(r3)
{
  80c1bc:	3021883a 	mov	r16,r6
  if (s == NULL)
  80c1c0:	20000c26 	beq	r4,zero,80c1f4 <wcrtomb+0x54>
  80c1c4:	280d883a 	mov	r6,r5
  else
    retval = __WCTOMB (reent, s, wc, ps);
  80c1c8:	800f883a 	mov	r7,r16
  80c1cc:	200b883a 	mov	r5,r4
  80c1d0:	8809883a 	mov	r4,r17
  80c1d4:	183ee83a 	callr	r3

  if (retval == -1)
  80c1d8:	10ffffd8 	cmpnei	r3,r2,-1
  80c1dc:	18000c26 	beq	r3,zero,80c210 <wcrtomb+0x70>
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80c1e0:	dfc00517 	ldw	ra,20(sp)
  80c1e4:	dc400417 	ldw	r17,16(sp)
  80c1e8:	dc000317 	ldw	r16,12(sp)
  80c1ec:	dec00604 	addi	sp,sp,24
  80c1f0:	f800283a 	ret
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80c1f4:	300f883a 	mov	r7,r6
  80c1f8:	d9400084 	addi	r5,sp,2
  80c1fc:	000d883a 	mov	r6,zero
  80c200:	8809883a 	mov	r4,r17
  80c204:	183ee83a 	callr	r3
  if (retval == -1)
  80c208:	10ffffd8 	cmpnei	r3,r2,-1
  80c20c:	183ff41e 	bne	r3,zero,80c1e0 <wcrtomb+0x40>
      reent->_errno = EILSEQ;
  80c210:	00802284 	movi	r2,138
      ps->__count = 0;
  80c214:	80000015 	stw	zero,0(r16)
      reent->_errno = EILSEQ;
  80c218:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80c21c:	00bfffc4 	movi	r2,-1
  80c220:	003fef06 	br	80c1e0 <wcrtomb+0x40>

0080c224 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
  80c224:	deffff04 	addi	sp,sp,-4
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
  80c228:	01000184 	movi	r4,6
{
  80c22c:	dfc00015 	stw	ra,0(sp)
      raise (SIGABRT);
  80c230:	080c4b00 	call	80c4b0 <raise>
      _exit (1);
  80c234:	01000044 	movi	r4,1
  80c238:	080fd3c0 	call	80fd3c <_exit>

0080c23c <_init_signal_r>:
int
_init_signal_r (struct _reent *ptr)
{
  int i;

  if (ptr->_sig_func == NULL)
  80c23c:	2080b717 	ldw	r2,732(r4)
  80c240:	10000226 	beq	r2,zero,80c24c <_init_signal_r+0x10>

      for (i = 0; i < NSIG; i++)
	ptr->_sig_func[i] = SIG_DFL;
    }

  return 0;
  80c244:	0005883a 	mov	r2,zero
}
  80c248:	f800283a 	ret
{
  80c24c:	defffe04 	addi	sp,sp,-8
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c250:	01402004 	movi	r5,128
{
  80c254:	dc000015 	stw	r16,0(sp)
  80c258:	dfc00115 	stw	ra,4(sp)
  80c25c:	2021883a 	mov	r16,r4
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c260:	0807da80 	call	807da8 <_malloc_r>
  80c264:	8080b715 	stw	r2,732(r16)
  80c268:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c26c:	10000826 	beq	r2,zero,80c290 <_init_signal_r+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c270:	01802004 	movi	r6,128
  80c274:	000b883a 	mov	r5,zero
  80c278:	08088b40 	call	8088b4 <memset>
  return 0;
  80c27c:	0005883a 	mov	r2,zero
}
  80c280:	dfc00117 	ldw	ra,4(sp)
  80c284:	dc000017 	ldw	r16,0(sp)
  80c288:	dec00204 	addi	sp,sp,8
  80c28c:	f800283a 	ret
	return -1;
  80c290:	00bfffc4 	movi	r2,-1
  80c294:	003ffa06 	br	80c280 <_init_signal_r+0x44>

0080c298 <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
  80c298:	defffc04 	addi	sp,sp,-16
  80c29c:	dc400115 	stw	r17,4(sp)
  80c2a0:	dfc00315 	stw	ra,12(sp)
  80c2a4:	dc800215 	stw	r18,8(sp)
  80c2a8:	dc000015 	stw	r16,0(sp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
  80c2ac:	28800830 	cmpltui	r2,r5,32
{
  80c2b0:	2023883a 	mov	r17,r4
  if (sig < 0 || sig >= NSIG)
  80c2b4:	10000e26 	beq	r2,zero,80c2f0 <_signal_r+0x58>
    {
      ptr->_errno = EINVAL;
      return SIG_ERR;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c2b8:	20c0b717 	ldw	r3,732(r4)
  80c2bc:	2821883a 	mov	r16,r5
  80c2c0:	3025883a 	mov	r18,r6
  80c2c4:	18000e26 	beq	r3,zero,80c300 <_signal_r+0x68>
    return SIG_ERR;
  
  old_func = ptr->_sig_func[sig];
  80c2c8:	802090ba 	slli	r16,r16,2
  80c2cc:	1c21883a 	add	r16,r3,r16
  80c2d0:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c2d4:	84800015 	stw	r18,0(r16)

  return old_func;
}
  80c2d8:	dfc00317 	ldw	ra,12(sp)
  80c2dc:	dc800217 	ldw	r18,8(sp)
  80c2e0:	dc400117 	ldw	r17,4(sp)
  80c2e4:	dc000017 	ldw	r16,0(sp)
  80c2e8:	dec00404 	addi	sp,sp,16
  80c2ec:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c2f0:	00800584 	movi	r2,22
  80c2f4:	20800015 	stw	r2,0(r4)
      return SIG_ERR;
  80c2f8:	00bfffc4 	movi	r2,-1
  80c2fc:	003ff606 	br	80c2d8 <_signal_r+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c300:	01402004 	movi	r5,128
  80c304:	0807da80 	call	807da8 <_malloc_r>
  80c308:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c30c:	10000626 	beq	r2,zero,80c328 <_signal_r+0x90>
	ptr->_sig_func[i] = SIG_DFL;
  80c310:	01802004 	movi	r6,128
  80c314:	000b883a 	mov	r5,zero
  80c318:	1009883a 	mov	r4,r2
  80c31c:	08088b40 	call	8088b4 <memset>
  80c320:	1007883a 	mov	r3,r2
  80c324:	003fe806 	br	80c2c8 <_signal_r+0x30>
    return SIG_ERR;
  80c328:	00bfffc4 	movi	r2,-1
  80c32c:	003fea06 	br	80c2d8 <_signal_r+0x40>

0080c330 <_raise_r>:
_raise_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c330:	28800830 	cmpltui	r2,r5,32
  80c334:	10002b26 	beq	r2,zero,80c3e4 <_raise_r+0xb4>
    {
      ptr->_errno = EINVAL;
      return -1;
    }

  if (ptr->_sig_func == NULL)
  80c338:	2080b717 	ldw	r2,732(r4)
{
  80c33c:	defffd04 	addi	sp,sp,-12
  80c340:	dc000115 	stw	r16,4(sp)
  80c344:	dfc00215 	stw	ra,8(sp)
  80c348:	2821883a 	mov	r16,r5
  if (ptr->_sig_func == NULL)
  80c34c:	10001026 	beq	r2,zero,80c390 <_raise_r+0x60>
    func = SIG_DFL;
  else
    func = ptr->_sig_func[sig];
  80c350:	280690ba 	slli	r3,r5,2
  80c354:	10c5883a 	add	r2,r2,r3
  80c358:	10c00017 	ldw	r3,0(r2)

  if (func == SIG_DFL)
  80c35c:	18000c26 	beq	r3,zero,80c390 <_raise_r+0x60>
    return _kill_r (ptr, _getpid_r (ptr), sig);
  else if (func == SIG_IGN)
  80c360:	19400060 	cmpeqi	r5,r3,1
  80c364:	28001a1e 	bne	r5,zero,80c3d0 <_raise_r+0xa0>
    return 0;
  else if (func == SIG_ERR)
  80c368:	197fffd8 	cmpnei	r5,r3,-1
  80c36c:	28001126 	beq	r5,zero,80c3b4 <_raise_r+0x84>
      ptr->_errno = EINVAL;
      return 1;
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c370:	10000015 	stw	zero,0(r2)
      func (sig);
  80c374:	8009883a 	mov	r4,r16
  80c378:	183ee83a 	callr	r3
      return 0;
  80c37c:	0005883a 	mov	r2,zero
    }
}
  80c380:	dfc00217 	ldw	ra,8(sp)
  80c384:	dc000117 	ldw	r16,4(sp)
  80c388:	dec00304 	addi	sp,sp,12
  80c38c:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c390:	d9000015 	stw	r4,0(sp)
  80c394:	080c7700 	call	80c770 <_getpid_r>
  80c398:	d9000017 	ldw	r4,0(sp)
  80c39c:	800d883a 	mov	r6,r16
  80c3a0:	100b883a 	mov	r5,r2
}
  80c3a4:	dfc00217 	ldw	ra,8(sp)
  80c3a8:	dc000117 	ldw	r16,4(sp)
  80c3ac:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c3b0:	080c7181 	jmpi	80c718 <_kill_r>
      ptr->_errno = EINVAL;
  80c3b4:	00800584 	movi	r2,22
  80c3b8:	20800015 	stw	r2,0(r4)
      return 1;
  80c3bc:	00800044 	movi	r2,1
}
  80c3c0:	dfc00217 	ldw	ra,8(sp)
  80c3c4:	dc000117 	ldw	r16,4(sp)
  80c3c8:	dec00304 	addi	sp,sp,12
  80c3cc:	f800283a 	ret
    return 0;
  80c3d0:	0005883a 	mov	r2,zero
}
  80c3d4:	dfc00217 	ldw	ra,8(sp)
  80c3d8:	dc000117 	ldw	r16,4(sp)
  80c3dc:	dec00304 	addi	sp,sp,12
  80c3e0:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c3e4:	00800584 	movi	r2,22
  80c3e8:	20800015 	stw	r2,0(r4)
      return -1;
  80c3ec:	00bfffc4 	movi	r2,-1
}
  80c3f0:	f800283a 	ret

0080c3f4 <__sigtramp_r>:
__sigtramp_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80c3f4:	28800830 	cmpltui	r2,r5,32
  80c3f8:	10002b26 	beq	r2,zero,80c4a8 <__sigtramp_r+0xb4>
    {
      return -1;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c3fc:	20c0b717 	ldw	r3,732(r4)
{
  80c400:	defffd04 	addi	sp,sp,-12
  80c404:	dc400115 	stw	r17,4(sp)
  80c408:	dc000015 	stw	r16,0(sp)
  80c40c:	dfc00215 	stw	ra,8(sp)
  80c410:	2821883a 	mov	r16,r5
  80c414:	2023883a 	mov	r17,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c418:	18001326 	beq	r3,zero,80c468 <__sigtramp_r+0x74>
    return -1;

  func = ptr->_sig_func[sig];
  80c41c:	800490ba 	slli	r2,r16,2
  80c420:	1887883a 	add	r3,r3,r2
  80c424:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80c428:	10000d26 	beq	r2,zero,80c460 <__sigtramp_r+0x6c>
    return 1;
  else if (func == SIG_ERR)
  80c42c:	113fffe0 	cmpeqi	r4,r2,-1
  80c430:	2000191e 	bne	r4,zero,80c498 <__sigtramp_r+0xa4>
    return 2;
  else if (func == SIG_IGN)
  80c434:	11000060 	cmpeqi	r4,r2,1
  80c438:	2000151e 	bne	r4,zero,80c490 <__sigtramp_r+0x9c>
    return 3;
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80c43c:	18000015 	stw	zero,0(r3)
      func (sig);
  80c440:	8009883a 	mov	r4,r16
  80c444:	103ee83a 	callr	r2
      return 0;
  80c448:	0005883a 	mov	r2,zero
    }
}
  80c44c:	dfc00217 	ldw	ra,8(sp)
  80c450:	dc400117 	ldw	r17,4(sp)
  80c454:	dc000017 	ldw	r16,0(sp)
  80c458:	dec00304 	addi	sp,sp,12
  80c45c:	f800283a 	ret
    return 1;
  80c460:	00800044 	movi	r2,1
  80c464:	003ff906 	br	80c44c <__sigtramp_r+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c468:	01402004 	movi	r5,128
  80c46c:	0807da80 	call	807da8 <_malloc_r>
  80c470:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c474:	10000a26 	beq	r2,zero,80c4a0 <__sigtramp_r+0xac>
	ptr->_sig_func[i] = SIG_DFL;
  80c478:	01802004 	movi	r6,128
  80c47c:	000b883a 	mov	r5,zero
  80c480:	1009883a 	mov	r4,r2
  80c484:	08088b40 	call	8088b4 <memset>
  80c488:	1007883a 	mov	r3,r2
  80c48c:	003fe306 	br	80c41c <__sigtramp_r+0x28>
    return 3;
  80c490:	008000c4 	movi	r2,3
  80c494:	003fed06 	br	80c44c <__sigtramp_r+0x58>
    return 2;
  80c498:	00800084 	movi	r2,2
  80c49c:	003feb06 	br	80c44c <__sigtramp_r+0x58>
      return -1;
  80c4a0:	00bfffc4 	movi	r2,-1
  80c4a4:	003fe906 	br	80c44c <__sigtramp_r+0x58>
  80c4a8:	00bfffc4 	movi	r2,-1
}
  80c4ac:	f800283a 	ret

0080c4b0 <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
  80c4b0:	defffd04 	addi	sp,sp,-12
  80c4b4:	dc400115 	stw	r17,4(sp)
  80c4b8:	dfc00215 	stw	ra,8(sp)
  80c4bc:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c4c0:	20800830 	cmpltui	r2,r4,32
  return _raise_r (_REENT, sig);
  80c4c4:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c4c8:	10002326 	beq	r2,zero,80c558 <raise+0xa8>
  if (ptr->_sig_func == NULL)
  80c4cc:	8880b717 	ldw	r2,732(r17)
  80c4d0:	2021883a 	mov	r16,r4
  80c4d4:	10001026 	beq	r2,zero,80c518 <raise+0x68>
    func = ptr->_sig_func[sig];
  80c4d8:	200690ba 	slli	r3,r4,2
  80c4dc:	10c5883a 	add	r2,r2,r3
  80c4e0:	10c00017 	ldw	r3,0(r2)
  if (func == SIG_DFL)
  80c4e4:	18000c26 	beq	r3,zero,80c518 <raise+0x68>
  else if (func == SIG_IGN)
  80c4e8:	19400060 	cmpeqi	r5,r3,1
  80c4ec:	2800181e 	bne	r5,zero,80c550 <raise+0xa0>
  else if (func == SIG_ERR)
  80c4f0:	197fffd8 	cmpnei	r5,r3,-1
  80c4f4:	28001226 	beq	r5,zero,80c540 <raise+0x90>
      ptr->_sig_func[sig] = SIG_DFL;
  80c4f8:	10000015 	stw	zero,0(r2)
      func (sig);
  80c4fc:	183ee83a 	callr	r3
      return 0;
  80c500:	0005883a 	mov	r2,zero
}
  80c504:	dfc00217 	ldw	ra,8(sp)
  80c508:	dc400117 	ldw	r17,4(sp)
  80c50c:	dc000017 	ldw	r16,0(sp)
  80c510:	dec00304 	addi	sp,sp,12
  80c514:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c518:	8809883a 	mov	r4,r17
  80c51c:	080c7700 	call	80c770 <_getpid_r>
  80c520:	800d883a 	mov	r6,r16
  80c524:	100b883a 	mov	r5,r2
  80c528:	8809883a 	mov	r4,r17
}
  80c52c:	dfc00217 	ldw	ra,8(sp)
  80c530:	dc400117 	ldw	r17,4(sp)
  80c534:	dc000017 	ldw	r16,0(sp)
  80c538:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80c53c:	080c7181 	jmpi	80c718 <_kill_r>
      ptr->_errno = EINVAL;
  80c540:	00800584 	movi	r2,22
  80c544:	88800015 	stw	r2,0(r17)
      return 1;
  80c548:	00800044 	movi	r2,1
  80c54c:	003fed06 	br	80c504 <raise+0x54>
    return 0;
  80c550:	0005883a 	mov	r2,zero
  return _raise_r (_REENT, sig);
  80c554:	003feb06 	br	80c504 <raise+0x54>
      ptr->_errno = EINVAL;
  80c558:	00800584 	movi	r2,22
  80c55c:	88800015 	stw	r2,0(r17)
      return -1;
  80c560:	00bfffc4 	movi	r2,-1
  80c564:	003fe706 	br	80c504 <raise+0x54>

0080c568 <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
  80c568:	defffc04 	addi	sp,sp,-16
  80c56c:	dc800215 	stw	r18,8(sp)
  80c570:	dfc00315 	stw	ra,12(sp)
  80c574:	dc400115 	stw	r17,4(sp)
  80c578:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c57c:	20800830 	cmpltui	r2,r4,32
  return _signal_r (_REENT, sig, func);
  80c580:	d4a00917 	ldw	r18,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c584:	10000e26 	beq	r2,zero,80c5c0 <signal+0x58>
  80c588:	2021883a 	mov	r16,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c58c:	9100b717 	ldw	r4,732(r18)
  80c590:	2823883a 	mov	r17,r5
  80c594:	20000e26 	beq	r4,zero,80c5d0 <signal+0x68>
  old_func = ptr->_sig_func[sig];
  80c598:	802090ba 	slli	r16,r16,2
  80c59c:	2421883a 	add	r16,r4,r16
  80c5a0:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80c5a4:	84400015 	stw	r17,0(r16)
}
  80c5a8:	dfc00317 	ldw	ra,12(sp)
  80c5ac:	dc800217 	ldw	r18,8(sp)
  80c5b0:	dc400117 	ldw	r17,4(sp)
  80c5b4:	dc000017 	ldw	r16,0(sp)
  80c5b8:	dec00404 	addi	sp,sp,16
  80c5bc:	f800283a 	ret
      ptr->_errno = EINVAL;
  80c5c0:	00800584 	movi	r2,22
  80c5c4:	90800015 	stw	r2,0(r18)
      return SIG_ERR;
  80c5c8:	00bfffc4 	movi	r2,-1
  80c5cc:	003ff606 	br	80c5a8 <signal+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c5d0:	9009883a 	mov	r4,r18
  80c5d4:	01402004 	movi	r5,128
  80c5d8:	0807da80 	call	807da8 <_malloc_r>
  80c5dc:	9080b715 	stw	r2,732(r18)
  80c5e0:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c5e4:	10000526 	beq	r2,zero,80c5fc <signal+0x94>
	ptr->_sig_func[i] = SIG_DFL;
  80c5e8:	01802004 	movi	r6,128
  80c5ec:	000b883a 	mov	r5,zero
  80c5f0:	08088b40 	call	8088b4 <memset>
  80c5f4:	1009883a 	mov	r4,r2
  80c5f8:	003fe706 	br	80c598 <signal+0x30>
    return SIG_ERR;
  80c5fc:	00bfffc4 	movi	r2,-1
  return _signal_r (_REENT, sig, func);
  80c600:	003fe906 	br	80c5a8 <signal+0x40>

0080c604 <_init_signal>:

int 
_init_signal (void)
{
  80c604:	defffe04 	addi	sp,sp,-8
  80c608:	dc000015 	stw	r16,0(sp)
  return _init_signal_r (_REENT);
  80c60c:	d4200917 	ldw	r16,-32732(gp)
{
  80c610:	dfc00115 	stw	ra,4(sp)
  if (ptr->_sig_func == NULL)
  80c614:	8080b717 	ldw	r2,732(r16)
  80c618:	10000526 	beq	r2,zero,80c630 <_init_signal+0x2c>
  return 0;
  80c61c:	0005883a 	mov	r2,zero
}
  80c620:	dfc00117 	ldw	ra,4(sp)
  80c624:	dc000017 	ldw	r16,0(sp)
  80c628:	dec00204 	addi	sp,sp,8
  80c62c:	f800283a 	ret
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c630:	8009883a 	mov	r4,r16
  80c634:	01402004 	movi	r5,128
  80c638:	0807da80 	call	807da8 <_malloc_r>
  80c63c:	8080b715 	stw	r2,732(r16)
  80c640:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80c644:	10000426 	beq	r2,zero,80c658 <_init_signal+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80c648:	01802004 	movi	r6,128
  80c64c:	000b883a 	mov	r5,zero
  80c650:	08088b40 	call	8088b4 <memset>
  80c654:	003ff106 	br	80c61c <_init_signal+0x18>
	return -1;
  80c658:	00bfffc4 	movi	r2,-1
  return _init_signal_r (_REENT);
  80c65c:	003ff006 	br	80c620 <_init_signal+0x1c>

0080c660 <__sigtramp>:

int
__sigtramp (int sig)
{
  80c660:	defffd04 	addi	sp,sp,-12
  80c664:	dc400115 	stw	r17,4(sp)
  80c668:	dfc00215 	stw	ra,8(sp)
  80c66c:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80c670:	20800830 	cmpltui	r2,r4,32
  return __sigtramp_r (_REENT, sig);
  80c674:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80c678:	10002526 	beq	r2,zero,80c710 <__sigtramp+0xb0>
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80c67c:	88c0b717 	ldw	r3,732(r17)
  80c680:	2021883a 	mov	r16,r4
  80c684:	18001326 	beq	r3,zero,80c6d4 <__sigtramp+0x74>
  func = ptr->_sig_func[sig];
  80c688:	800890ba 	slli	r4,r16,2
  80c68c:	1907883a 	add	r3,r3,r4
  80c690:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80c694:	10000d26 	beq	r2,zero,80c6cc <__sigtramp+0x6c>
  else if (func == SIG_ERR)
  80c698:	113fffe0 	cmpeqi	r4,r2,-1
  80c69c:	20001a1e 	bne	r4,zero,80c708 <__sigtramp+0xa8>
  else if (func == SIG_IGN)
  80c6a0:	11000060 	cmpeqi	r4,r2,1
  80c6a4:	2000161e 	bne	r4,zero,80c700 <__sigtramp+0xa0>
      ptr->_sig_func[sig] = SIG_DFL;
  80c6a8:	18000015 	stw	zero,0(r3)
      func (sig);
  80c6ac:	8009883a 	mov	r4,r16
  80c6b0:	103ee83a 	callr	r2
      return 0;
  80c6b4:	0005883a 	mov	r2,zero
}
  80c6b8:	dfc00217 	ldw	ra,8(sp)
  80c6bc:	dc400117 	ldw	r17,4(sp)
  80c6c0:	dc000017 	ldw	r16,0(sp)
  80c6c4:	dec00304 	addi	sp,sp,12
  80c6c8:	f800283a 	ret
    return 1;
  80c6cc:	00800044 	movi	r2,1
  80c6d0:	003ff906 	br	80c6b8 <__sigtramp+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80c6d4:	01402004 	movi	r5,128
  80c6d8:	8809883a 	mov	r4,r17
  80c6dc:	0807da80 	call	807da8 <_malloc_r>
  80c6e0:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80c6e4:	10000a26 	beq	r2,zero,80c710 <__sigtramp+0xb0>
	ptr->_sig_func[i] = SIG_DFL;
  80c6e8:	01802004 	movi	r6,128
  80c6ec:	000b883a 	mov	r5,zero
  80c6f0:	1009883a 	mov	r4,r2
  80c6f4:	08088b40 	call	8088b4 <memset>
  80c6f8:	1007883a 	mov	r3,r2
  80c6fc:	003fe206 	br	80c688 <__sigtramp+0x28>
    return 3;
  80c700:	008000c4 	movi	r2,3
  return __sigtramp_r (_REENT, sig);
  80c704:	003fec06 	br	80c6b8 <__sigtramp+0x58>
    return 2;
  80c708:	00800084 	movi	r2,2
  80c70c:	003fea06 	br	80c6b8 <__sigtramp+0x58>
      return -1;
  80c710:	00bfffc4 	movi	r2,-1
  80c714:	003fe806 	br	80c6b8 <__sigtramp+0x58>

0080c718 <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
  80c718:	2807883a 	mov	r3,r5
  80c71c:	defffe04 	addi	sp,sp,-8
  80c720:	dc000015 	stw	r16,0(sp)
  80c724:	300b883a 	mov	r5,r6
  80c728:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c72c:	1809883a 	mov	r4,r3
{
  80c730:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80c734:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c738:	080ffb40 	call	80ffb4 <kill>
  80c73c:	10ffffd8 	cmpnei	r3,r2,-1
  80c740:	18000426 	beq	r3,zero,80c754 <_kill_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80c744:	dfc00117 	ldw	ra,4(sp)
  80c748:	dc000017 	ldw	r16,0(sp)
  80c74c:	dec00204 	addi	sp,sp,8
  80c750:	f800283a 	ret
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80c754:	d0e71817 	ldw	r3,-25504(gp)
  80c758:	183ffa26 	beq	r3,zero,80c744 <_kill_r+0x2c>
    ptr->_errno = errno;
  80c75c:	80c00015 	stw	r3,0(r16)
}
  80c760:	dfc00117 	ldw	ra,4(sp)
  80c764:	dc000017 	ldw	r16,0(sp)
  80c768:	dec00204 	addi	sp,sp,8
  80c76c:	f800283a 	ret

0080c770 <_getpid_r>:

int
_getpid_r (struct _reent *ptr)
{
  int ret;
  ret = _getpid ();
  80c770:	080fe6c1 	jmpi	80fe6c <getpid>

0080c774 <__udivdi3>:
  80c774:	defff504 	addi	sp,sp,-44
  80c778:	dd000515 	stw	r20,20(sp)
  80c77c:	dc800315 	stw	r18,12(sp)
  80c780:	dfc00a15 	stw	ra,40(sp)
  80c784:	df000915 	stw	fp,36(sp)
  80c788:	ddc00815 	stw	r23,32(sp)
  80c78c:	dd800715 	stw	r22,28(sp)
  80c790:	dd400615 	stw	r21,24(sp)
  80c794:	dcc00415 	stw	r19,16(sp)
  80c798:	dc400215 	stw	r17,8(sp)
  80c79c:	dc000115 	stw	r16,4(sp)
  80c7a0:	2029883a 	mov	r20,r4
  80c7a4:	2825883a 	mov	r18,r5
  80c7a8:	3800461e 	bne	r7,zero,80c8c4 <__udivdi3+0x150>
  80c7ac:	3823883a 	mov	r17,r7
  80c7b0:	3021883a 	mov	r16,r6
  80c7b4:	2027883a 	mov	r19,r4
  80c7b8:	2980622e 	bgeu	r5,r6,80c944 <__udivdi3+0x1d0>
  80c7bc:	00bfffd4 	movui	r2,65535
  80c7c0:	282b883a 	mov	r21,r5
  80c7c4:	1180aa2e 	bgeu	r2,r6,80ca70 <__udivdi3+0x2fc>
  80c7c8:	00804034 	movhi	r2,256
  80c7cc:	30815a36 	bltu	r6,r2,80cd38 <__udivdi3+0x5c4>
  80c7d0:	3006d63a 	srli	r3,r6,24
  80c7d4:	04400604 	movi	r17,24
  80c7d8:	00802074 	movhi	r2,129
  80c7dc:	1885883a 	add	r2,r3,r2
  80c7e0:	108a7f03 	ldbu	r2,10748(r2)
  80c7e4:	00c00804 	movi	r3,32
  80c7e8:	1463883a 	add	r17,r2,r17
  80c7ec:	1c45c83a 	sub	r2,r3,r17
  80c7f0:	1c400526 	beq	r3,r17,80c808 <__udivdi3+0x94>
  80c7f4:	9086983a 	sll	r3,r18,r2
  80c7f8:	a462d83a 	srl	r17,r20,r17
  80c7fc:	30a0983a 	sll	r16,r6,r2
  80c800:	a0a6983a 	sll	r19,r20,r2
  80c804:	88eab03a 	or	r21,r17,r3
  80c808:	802cd43a 	srli	r22,r16,16
  80c80c:	a809883a 	mov	r4,r21
  80c810:	853fffcc 	andi	r20,r16,65535
  80c814:	b00b883a 	mov	r5,r22
  80c818:	080d4b00 	call	80d4b0 <__umodsi3>
  80c81c:	a809883a 	mov	r4,r21
  80c820:	b00b883a 	mov	r5,r22
  80c824:	1025883a 	mov	r18,r2
  80c828:	080d44c0 	call	80d44c <__udivsi3>
  80c82c:	a009883a 	mov	r4,r20
  80c830:	100b883a 	mov	r5,r2
  80c834:	102b883a 	mov	r21,r2
  80c838:	0802af80 	call	802af8 <__mulsi3>
  80c83c:	9024943a 	slli	r18,r18,16
  80c840:	9808d43a 	srli	r4,r19,16
  80c844:	9108b03a 	or	r4,r18,r4
  80c848:	2080052e 	bgeu	r4,r2,80c860 <__udivdi3+0xec>
  80c84c:	2409883a 	add	r4,r4,r16
  80c850:	a8ffffc4 	addi	r3,r21,-1
  80c854:	24000136 	bltu	r4,r16,80c85c <__udivdi3+0xe8>
  80c858:	20814836 	bltu	r4,r2,80cd7c <__udivdi3+0x608>
  80c85c:	182b883a 	mov	r21,r3
  80c860:	20a3c83a 	sub	r17,r4,r2
  80c864:	8809883a 	mov	r4,r17
  80c868:	b00b883a 	mov	r5,r22
  80c86c:	080d4b00 	call	80d4b0 <__umodsi3>
  80c870:	8809883a 	mov	r4,r17
  80c874:	1023883a 	mov	r17,r2
  80c878:	b00b883a 	mov	r5,r22
  80c87c:	8822943a 	slli	r17,r17,16
  80c880:	080d44c0 	call	80d44c <__udivsi3>
  80c884:	100b883a 	mov	r5,r2
  80c888:	a009883a 	mov	r4,r20
  80c88c:	9cffffcc 	andi	r19,r19,65535
  80c890:	1025883a 	mov	r18,r2
  80c894:	8ce6b03a 	or	r19,r17,r19
  80c898:	0802af80 	call	802af8 <__mulsi3>
  80c89c:	9880052e 	bgeu	r19,r2,80c8b4 <__udivdi3+0x140>
  80c8a0:	84e7883a 	add	r19,r16,r19
  80c8a4:	90ffffc4 	addi	r3,r18,-1
  80c8a8:	9c000136 	bltu	r19,r16,80c8b0 <__udivdi3+0x13c>
  80c8ac:	98813136 	bltu	r19,r2,80cd74 <__udivdi3+0x600>
  80c8b0:	1825883a 	mov	r18,r3
  80c8b4:	a80c943a 	slli	r6,r21,16
  80c8b8:	0007883a 	mov	r3,zero
  80c8bc:	3484b03a 	or	r2,r6,r18
  80c8c0:	00000306 	br	80c8d0 <__udivdi3+0x15c>
  80c8c4:	29c00e2e 	bgeu	r5,r7,80c900 <__udivdi3+0x18c>
  80c8c8:	0007883a 	mov	r3,zero
  80c8cc:	0005883a 	mov	r2,zero
  80c8d0:	dfc00a17 	ldw	ra,40(sp)
  80c8d4:	df000917 	ldw	fp,36(sp)
  80c8d8:	ddc00817 	ldw	r23,32(sp)
  80c8dc:	dd800717 	ldw	r22,28(sp)
  80c8e0:	dd400617 	ldw	r21,24(sp)
  80c8e4:	dd000517 	ldw	r20,20(sp)
  80c8e8:	dcc00417 	ldw	r19,16(sp)
  80c8ec:	dc800317 	ldw	r18,12(sp)
  80c8f0:	dc400217 	ldw	r17,8(sp)
  80c8f4:	dc000117 	ldw	r16,4(sp)
  80c8f8:	dec00b04 	addi	sp,sp,44
  80c8fc:	f800283a 	ret
  80c900:	00bfffd4 	movui	r2,65535
  80c904:	11c05f2e 	bgeu	r2,r7,80ca84 <__udivdi3+0x310>
  80c908:	00804034 	movhi	r2,256
  80c90c:	3880fc36 	bltu	r7,r2,80cd00 <__udivdi3+0x58c>
  80c910:	3804d63a 	srli	r2,r7,24
  80c914:	01000604 	movi	r4,24
  80c918:	00c02074 	movhi	r3,129
  80c91c:	10c7883a 	add	r3,r2,r3
  80c920:	188a7f03 	ldbu	r2,10748(r3)
  80c924:	00c00804 	movi	r3,32
  80c928:	1105883a 	add	r2,r2,r4
  80c92c:	18a3c83a 	sub	r17,r3,r2
  80c930:	1880901e 	bne	r3,r2,80cb74 <__udivdi3+0x400>
  80c934:	3c80f736 	bltu	r7,r18,80cd14 <__udivdi3+0x5a0>
  80c938:	a185403a 	cmpgeu	r2,r20,r6
  80c93c:	0007883a 	mov	r3,zero
  80c940:	003fe306 	br	80c8d0 <__udivdi3+0x15c>
  80c944:	3000041e 	bne	r6,zero,80c958 <__udivdi3+0x1e4>
  80c948:	000b883a 	mov	r5,zero
  80c94c:	01000044 	movi	r4,1
  80c950:	080d44c0 	call	80d44c <__udivsi3>
  80c954:	1021883a 	mov	r16,r2
  80c958:	00bfffd4 	movui	r2,65535
  80c95c:	14003f2e 	bgeu	r2,r16,80ca5c <__udivdi3+0x2e8>
  80c960:	00804034 	movhi	r2,256
  80c964:	8080f136 	bltu	r16,r2,80cd2c <__udivdi3+0x5b8>
  80c968:	8006d63a 	srli	r3,r16,24
  80c96c:	04400604 	movi	r17,24
  80c970:	00802074 	movhi	r2,129
  80c974:	1885883a 	add	r2,r3,r2
  80c978:	108a7f03 	ldbu	r2,10748(r2)
  80c97c:	00c00804 	movi	r3,32
  80c980:	1463883a 	add	r17,r2,r17
  80c984:	1c45c83a 	sub	r2,r3,r17
  80c988:	1c40431e 	bne	r3,r17,80ca98 <__udivdi3+0x324>
  80c98c:	802cd43a 	srli	r22,r16,16
  80c990:	9423c83a 	sub	r17,r18,r16
  80c994:	853fffcc 	andi	r20,r16,65535
  80c998:	00c00044 	movi	r3,1
  80c99c:	b00b883a 	mov	r5,r22
  80c9a0:	8809883a 	mov	r4,r17
  80c9a4:	d8c00015 	stw	r3,0(sp)
  80c9a8:	080d4b00 	call	80d4b0 <__umodsi3>
  80c9ac:	b00b883a 	mov	r5,r22
  80c9b0:	8809883a 	mov	r4,r17
  80c9b4:	1025883a 	mov	r18,r2
  80c9b8:	080d44c0 	call	80d44c <__udivsi3>
  80c9bc:	1009883a 	mov	r4,r2
  80c9c0:	a00b883a 	mov	r5,r20
  80c9c4:	102b883a 	mov	r21,r2
  80c9c8:	0802af80 	call	802af8 <__mulsi3>
  80c9cc:	9024943a 	slli	r18,r18,16
  80c9d0:	9808d43a 	srli	r4,r19,16
  80c9d4:	d8c00017 	ldw	r3,0(sp)
  80c9d8:	9108b03a 	or	r4,r18,r4
  80c9dc:	2080052e 	bgeu	r4,r2,80c9f4 <__udivdi3+0x280>
  80c9e0:	2409883a 	add	r4,r4,r16
  80c9e4:	a97fffc4 	addi	r5,r21,-1
  80c9e8:	24000136 	bltu	r4,r16,80c9f0 <__udivdi3+0x27c>
  80c9ec:	2080e636 	bltu	r4,r2,80cd88 <__udivdi3+0x614>
  80c9f0:	282b883a 	mov	r21,r5
  80c9f4:	20a3c83a 	sub	r17,r4,r2
  80c9f8:	8809883a 	mov	r4,r17
  80c9fc:	b00b883a 	mov	r5,r22
  80ca00:	d8c00015 	stw	r3,0(sp)
  80ca04:	080d4b00 	call	80d4b0 <__umodsi3>
  80ca08:	8809883a 	mov	r4,r17
  80ca0c:	1023883a 	mov	r17,r2
  80ca10:	b00b883a 	mov	r5,r22
  80ca14:	8822943a 	slli	r17,r17,16
  80ca18:	080d44c0 	call	80d44c <__udivsi3>
  80ca1c:	a00b883a 	mov	r5,r20
  80ca20:	1009883a 	mov	r4,r2
  80ca24:	9cffffcc 	andi	r19,r19,65535
  80ca28:	1025883a 	mov	r18,r2
  80ca2c:	8ce6b03a 	or	r19,r17,r19
  80ca30:	0802af80 	call	802af8 <__mulsi3>
  80ca34:	d8c00017 	ldw	r3,0(sp)
  80ca38:	9880052e 	bgeu	r19,r2,80ca50 <__udivdi3+0x2dc>
  80ca3c:	84e7883a 	add	r19,r16,r19
  80ca40:	913fffc4 	addi	r4,r18,-1
  80ca44:	9c000136 	bltu	r19,r16,80ca4c <__udivdi3+0x2d8>
  80ca48:	9880c836 	bltu	r19,r2,80cd6c <__udivdi3+0x5f8>
  80ca4c:	2025883a 	mov	r18,r4
  80ca50:	a80c943a 	slli	r6,r21,16
  80ca54:	3484b03a 	or	r2,r6,r18
  80ca58:	003f9d06 	br	80c8d0 <__udivdi3+0x15c>
  80ca5c:	80804030 	cmpltui	r2,r16,256
  80ca60:	1000b81e 	bne	r2,zero,80cd44 <__udivdi3+0x5d0>
  80ca64:	8006d23a 	srli	r3,r16,8
  80ca68:	04400204 	movi	r17,8
  80ca6c:	003fc006 	br	80c970 <__udivdi3+0x1fc>
  80ca70:	30804030 	cmpltui	r2,r6,256
  80ca74:	1000a51e 	bne	r2,zero,80cd0c <__udivdi3+0x598>
  80ca78:	3006d23a 	srli	r3,r6,8
  80ca7c:	04400204 	movi	r17,8
  80ca80:	003f5506 	br	80c7d8 <__udivdi3+0x64>
  80ca84:	38804030 	cmpltui	r2,r7,256
  80ca88:	1000a51e 	bne	r2,zero,80cd20 <__udivdi3+0x5ac>
  80ca8c:	3804d23a 	srli	r2,r7,8
  80ca90:	01000204 	movi	r4,8
  80ca94:	003fa006 	br	80c918 <__udivdi3+0x1a4>
  80ca98:	80a0983a 	sll	r16,r16,r2
  80ca9c:	946ed83a 	srl	r23,r18,r17
  80caa0:	9086983a 	sll	r3,r18,r2
  80caa4:	802cd43a 	srli	r22,r16,16
  80caa8:	a462d83a 	srl	r17,r20,r17
  80caac:	b809883a 	mov	r4,r23
  80cab0:	b00b883a 	mov	r5,r22
  80cab4:	88eab03a 	or	r21,r17,r3
  80cab8:	a0a6983a 	sll	r19,r20,r2
  80cabc:	080d4b00 	call	80d4b0 <__umodsi3>
  80cac0:	b809883a 	mov	r4,r23
  80cac4:	b00b883a 	mov	r5,r22
  80cac8:	1025883a 	mov	r18,r2
  80cacc:	853fffcc 	andi	r20,r16,65535
  80cad0:	080d44c0 	call	80d44c <__udivsi3>
  80cad4:	a009883a 	mov	r4,r20
  80cad8:	100b883a 	mov	r5,r2
  80cadc:	102f883a 	mov	r23,r2
  80cae0:	0802af80 	call	802af8 <__mulsi3>
  80cae4:	9024943a 	slli	r18,r18,16
  80cae8:	a808d43a 	srli	r4,r21,16
  80caec:	9108b03a 	or	r4,r18,r4
  80caf0:	2080062e 	bgeu	r4,r2,80cb0c <__udivdi3+0x398>
  80caf4:	2409883a 	add	r4,r4,r16
  80caf8:	b8ffffc4 	addi	r3,r23,-1
  80cafc:	24009936 	bltu	r4,r16,80cd64 <__udivdi3+0x5f0>
  80cb00:	2080982e 	bgeu	r4,r2,80cd64 <__udivdi3+0x5f0>
  80cb04:	bdffff84 	addi	r23,r23,-2
  80cb08:	2409883a 	add	r4,r4,r16
  80cb0c:	20a3c83a 	sub	r17,r4,r2
  80cb10:	8809883a 	mov	r4,r17
  80cb14:	b00b883a 	mov	r5,r22
  80cb18:	080d4b00 	call	80d4b0 <__umodsi3>
  80cb1c:	1025883a 	mov	r18,r2
  80cb20:	8809883a 	mov	r4,r17
  80cb24:	b00b883a 	mov	r5,r22
  80cb28:	9024943a 	slli	r18,r18,16
  80cb2c:	080d44c0 	call	80d44c <__udivsi3>
  80cb30:	100b883a 	mov	r5,r2
  80cb34:	a009883a 	mov	r4,r20
  80cb38:	ac7fffcc 	andi	r17,r21,65535
  80cb3c:	1039883a 	mov	fp,r2
  80cb40:	9462b03a 	or	r17,r18,r17
  80cb44:	0802af80 	call	802af8 <__mulsi3>
  80cb48:	8880062e 	bgeu	r17,r2,80cb64 <__udivdi3+0x3f0>
  80cb4c:	8c23883a 	add	r17,r17,r16
  80cb50:	e0ffffc4 	addi	r3,fp,-1
  80cb54:	8c007f36 	bltu	r17,r16,80cd54 <__udivdi3+0x5e0>
  80cb58:	88807e2e 	bgeu	r17,r2,80cd54 <__udivdi3+0x5e0>
  80cb5c:	e73fff84 	addi	fp,fp,-2
  80cb60:	8c23883a 	add	r17,r17,r16
  80cb64:	b806943a 	slli	r3,r23,16
  80cb68:	88a3c83a 	sub	r17,r17,r2
  80cb6c:	1f06b03a 	or	r3,r3,fp
  80cb70:	003f8a06 	br	80c99c <__udivdi3+0x228>
  80cb74:	30a6d83a 	srl	r19,r6,r2
  80cb78:	3c4e983a 	sll	r7,r7,r17
  80cb7c:	90a0d83a 	srl	r16,r18,r2
  80cb80:	9446983a 	sll	r3,r18,r17
  80cb84:	99e6b03a 	or	r19,r19,r7
  80cb88:	a084d83a 	srl	r2,r20,r2
  80cb8c:	9838d43a 	srli	fp,r19,16
  80cb90:	8009883a 	mov	r4,r16
  80cb94:	10eab03a 	or	r21,r2,r3
  80cb98:	e00b883a 	mov	r5,fp
  80cb9c:	346c983a 	sll	r22,r6,r17
  80cba0:	dd400015 	stw	r21,0(sp)
  80cba4:	080d4b00 	call	80d4b0 <__umodsi3>
  80cba8:	8009883a 	mov	r4,r16
  80cbac:	e00b883a 	mov	r5,fp
  80cbb0:	102f883a 	mov	r23,r2
  80cbb4:	9cbfffcc 	andi	r18,r19,65535
  80cbb8:	080d44c0 	call	80d44c <__udivsi3>
  80cbbc:	9009883a 	mov	r4,r18
  80cbc0:	100b883a 	mov	r5,r2
  80cbc4:	1021883a 	mov	r16,r2
  80cbc8:	0802af80 	call	802af8 <__mulsi3>
  80cbcc:	b82e943a 	slli	r23,r23,16
  80cbd0:	a808d43a 	srli	r4,r21,16
  80cbd4:	b908b03a 	or	r4,r23,r4
  80cbd8:	2080062e 	bgeu	r4,r2,80cbf4 <__udivdi3+0x480>
  80cbdc:	24c9883a 	add	r4,r4,r19
  80cbe0:	817fffc4 	addi	r5,r16,-1
  80cbe4:	24c05d36 	bltu	r4,r19,80cd5c <__udivdi3+0x5e8>
  80cbe8:	20805c2e 	bgeu	r4,r2,80cd5c <__udivdi3+0x5e8>
  80cbec:	843fff84 	addi	r16,r16,-2
  80cbf0:	24c9883a 	add	r4,r4,r19
  80cbf4:	20abc83a 	sub	r21,r4,r2
  80cbf8:	a809883a 	mov	r4,r21
  80cbfc:	e00b883a 	mov	r5,fp
  80cc00:	080d4b00 	call	80d4b0 <__umodsi3>
  80cc04:	a809883a 	mov	r4,r21
  80cc08:	e00b883a 	mov	r5,fp
  80cc0c:	102b883a 	mov	r21,r2
  80cc10:	080d44c0 	call	80d44c <__udivsi3>
  80cc14:	9009883a 	mov	r4,r18
  80cc18:	100b883a 	mov	r5,r2
  80cc1c:	102f883a 	mov	r23,r2
  80cc20:	0802af80 	call	802af8 <__mulsi3>
  80cc24:	d8c00017 	ldw	r3,0(sp)
  80cc28:	a82a943a 	slli	r21,r21,16
  80cc2c:	100d883a 	mov	r6,r2
  80cc30:	1cbfffcc 	andi	r18,r3,65535
  80cc34:	aca4b03a 	or	r18,r21,r18
  80cc38:	9080062e 	bgeu	r18,r2,80cc54 <__udivdi3+0x4e0>
  80cc3c:	94e5883a 	add	r18,r18,r19
  80cc40:	b8bfffc4 	addi	r2,r23,-1
  80cc44:	94c04136 	bltu	r18,r19,80cd4c <__udivdi3+0x5d8>
  80cc48:	9180402e 	bgeu	r18,r6,80cd4c <__udivdi3+0x5d8>
  80cc4c:	bdffff84 	addi	r23,r23,-2
  80cc50:	94e5883a 	add	r18,r18,r19
  80cc54:	8004943a 	slli	r2,r16,16
  80cc58:	bd7fffcc 	andi	r21,r23,65535
  80cc5c:	b73fffcc 	andi	fp,r22,65535
  80cc60:	15e0b03a 	or	r16,r2,r23
  80cc64:	8026d43a 	srli	r19,r16,16
  80cc68:	a809883a 	mov	r4,r21
  80cc6c:	e00b883a 	mov	r5,fp
  80cc70:	91a5c83a 	sub	r18,r18,r6
  80cc74:	b02cd43a 	srli	r22,r22,16
  80cc78:	0802af80 	call	802af8 <__mulsi3>
  80cc7c:	9809883a 	mov	r4,r19
  80cc80:	e00b883a 	mov	r5,fp
  80cc84:	102f883a 	mov	r23,r2
  80cc88:	0802af80 	call	802af8 <__mulsi3>
  80cc8c:	9809883a 	mov	r4,r19
  80cc90:	b00b883a 	mov	r5,r22
  80cc94:	1027883a 	mov	r19,r2
  80cc98:	0802af80 	call	802af8 <__mulsi3>
  80cc9c:	a809883a 	mov	r4,r21
  80cca0:	b00b883a 	mov	r5,r22
  80cca4:	102b883a 	mov	r21,r2
  80cca8:	0802af80 	call	802af8 <__mulsi3>
  80ccac:	b806d43a 	srli	r3,r23,16
  80ccb0:	14c5883a 	add	r2,r2,r19
  80ccb4:	1887883a 	add	r3,r3,r2
  80ccb8:	1cc0022e 	bgeu	r3,r19,80ccc4 <__udivdi3+0x550>
  80ccbc:	00800074 	movhi	r2,1
  80ccc0:	a8ab883a 	add	r21,r21,r2
  80ccc4:	1804d43a 	srli	r2,r3,16
  80ccc8:	156b883a 	add	r21,r2,r21
  80cccc:	95400936 	bltu	r18,r21,80ccf4 <__udivdi3+0x580>
  80ccd0:	95400326 	beq	r18,r21,80cce0 <__udivdi3+0x56c>
  80ccd4:	8005883a 	mov	r2,r16
  80ccd8:	0007883a 	mov	r3,zero
  80ccdc:	003efc06 	br	80c8d0 <__udivdi3+0x15c>
  80cce0:	1806943a 	slli	r3,r3,16
  80cce4:	a44c983a 	sll	r6,r20,r17
  80cce8:	bdffffcc 	andi	r23,r23,65535
  80ccec:	1dc7883a 	add	r3,r3,r23
  80ccf0:	30fff82e 	bgeu	r6,r3,80ccd4 <__udivdi3+0x560>
  80ccf4:	80bfffc4 	addi	r2,r16,-1
  80ccf8:	0007883a 	mov	r3,zero
  80ccfc:	003ef406 	br	80c8d0 <__udivdi3+0x15c>
  80cd00:	3804d43a 	srli	r2,r7,16
  80cd04:	01000404 	movi	r4,16
  80cd08:	003f0306 	br	80c918 <__udivdi3+0x1a4>
  80cd0c:	3007883a 	mov	r3,r6
  80cd10:	003eb106 	br	80c7d8 <__udivdi3+0x64>
  80cd14:	0007883a 	mov	r3,zero
  80cd18:	00800044 	movi	r2,1
  80cd1c:	003eec06 	br	80c8d0 <__udivdi3+0x15c>
  80cd20:	3805883a 	mov	r2,r7
  80cd24:	0009883a 	mov	r4,zero
  80cd28:	003efb06 	br	80c918 <__udivdi3+0x1a4>
  80cd2c:	8006d43a 	srli	r3,r16,16
  80cd30:	04400404 	movi	r17,16
  80cd34:	003f0e06 	br	80c970 <__udivdi3+0x1fc>
  80cd38:	3006d43a 	srli	r3,r6,16
  80cd3c:	04400404 	movi	r17,16
  80cd40:	003ea506 	br	80c7d8 <__udivdi3+0x64>
  80cd44:	8007883a 	mov	r3,r16
  80cd48:	003f0906 	br	80c970 <__udivdi3+0x1fc>
  80cd4c:	102f883a 	mov	r23,r2
  80cd50:	003fc006 	br	80cc54 <__udivdi3+0x4e0>
  80cd54:	1839883a 	mov	fp,r3
  80cd58:	003f8206 	br	80cb64 <__udivdi3+0x3f0>
  80cd5c:	2821883a 	mov	r16,r5
  80cd60:	003fa406 	br	80cbf4 <__udivdi3+0x480>
  80cd64:	182f883a 	mov	r23,r3
  80cd68:	003f6806 	br	80cb0c <__udivdi3+0x398>
  80cd6c:	94bfff84 	addi	r18,r18,-2
  80cd70:	003f3706 	br	80ca50 <__udivdi3+0x2dc>
  80cd74:	94bfff84 	addi	r18,r18,-2
  80cd78:	003ece06 	br	80c8b4 <__udivdi3+0x140>
  80cd7c:	ad7fff84 	addi	r21,r21,-2
  80cd80:	2409883a 	add	r4,r4,r16
  80cd84:	003eb606 	br	80c860 <__udivdi3+0xec>
  80cd88:	ad7fff84 	addi	r21,r21,-2
  80cd8c:	2409883a 	add	r4,r4,r16
  80cd90:	003f1806 	br	80c9f4 <__udivdi3+0x280>

0080cd94 <__umoddi3>:
  80cd94:	defff304 	addi	sp,sp,-52
  80cd98:	dc400415 	stw	r17,16(sp)
  80cd9c:	dc000315 	stw	r16,12(sp)
  80cda0:	dfc00c15 	stw	ra,48(sp)
  80cda4:	df000b15 	stw	fp,44(sp)
  80cda8:	ddc00a15 	stw	r23,40(sp)
  80cdac:	dd800915 	stw	r22,36(sp)
  80cdb0:	dd400815 	stw	r21,32(sp)
  80cdb4:	dd000715 	stw	r20,28(sp)
  80cdb8:	dcc00615 	stw	r19,24(sp)
  80cdbc:	dc800515 	stw	r18,20(sp)
  80cdc0:	2823883a 	mov	r17,r5
  80cdc4:	2021883a 	mov	r16,r4
  80cdc8:	38003b1e 	bne	r7,zero,80ceb8 <__umoddi3+0x124>
  80cdcc:	3825883a 	mov	r18,r7
  80cdd0:	3029883a 	mov	r20,r6
  80cdd4:	2027883a 	mov	r19,r4
  80cdd8:	29805b2e 	bgeu	r5,r6,80cf48 <__umoddi3+0x1b4>
  80cddc:	00bfffd4 	movui	r2,65535
  80cde0:	282d883a 	mov	r22,r5
  80cde4:	11809a2e 	bgeu	r2,r6,80d050 <__umoddi3+0x2bc>
  80cde8:	00804034 	movhi	r2,256
  80cdec:	30814436 	bltu	r6,r2,80d300 <__umoddi3+0x56c>
  80cdf0:	3006d63a 	srli	r3,r6,24
  80cdf4:	04800604 	movi	r18,24
  80cdf8:	00802074 	movhi	r2,129
  80cdfc:	1885883a 	add	r2,r3,r2
  80ce00:	108a7f03 	ldbu	r2,10748(r2)
  80ce04:	00c00804 	movi	r3,32
  80ce08:	1485883a 	add	r2,r2,r18
  80ce0c:	18a5c83a 	sub	r18,r3,r2
  80ce10:	18800526 	beq	r3,r2,80ce28 <__umoddi3+0x94>
  80ce14:	8ca2983a 	sll	r17,r17,r18
  80ce18:	8084d83a 	srl	r2,r16,r2
  80ce1c:	34a8983a 	sll	r20,r6,r18
  80ce20:	84a6983a 	sll	r19,r16,r18
  80ce24:	146cb03a 	or	r22,r2,r17
  80ce28:	a02ed43a 	srli	r23,r20,16
  80ce2c:	b009883a 	mov	r4,r22
  80ce30:	a57fffcc 	andi	r21,r20,65535
  80ce34:	b80b883a 	mov	r5,r23
  80ce38:	080d4b00 	call	80d4b0 <__umodsi3>
  80ce3c:	b80b883a 	mov	r5,r23
  80ce40:	b009883a 	mov	r4,r22
  80ce44:	1023883a 	mov	r17,r2
  80ce48:	080d44c0 	call	80d44c <__udivsi3>
  80ce4c:	a809883a 	mov	r4,r21
  80ce50:	100b883a 	mov	r5,r2
  80ce54:	0802af80 	call	802af8 <__mulsi3>
  80ce58:	8822943a 	slli	r17,r17,16
  80ce5c:	9808d43a 	srli	r4,r19,16
  80ce60:	8908b03a 	or	r4,r17,r4
  80ce64:	2080042e 	bgeu	r4,r2,80ce78 <__umoddi3+0xe4>
  80ce68:	2509883a 	add	r4,r4,r20
  80ce6c:	25000236 	bltu	r4,r20,80ce78 <__umoddi3+0xe4>
  80ce70:	2080012e 	bgeu	r4,r2,80ce78 <__umoddi3+0xe4>
  80ce74:	2509883a 	add	r4,r4,r20
  80ce78:	20a1c83a 	sub	r16,r4,r2
  80ce7c:	b80b883a 	mov	r5,r23
  80ce80:	8009883a 	mov	r4,r16
  80ce84:	080d4b00 	call	80d4b0 <__umodsi3>
  80ce88:	b80b883a 	mov	r5,r23
  80ce8c:	8009883a 	mov	r4,r16
  80ce90:	1023883a 	mov	r17,r2
  80ce94:	080d44c0 	call	80d44c <__udivsi3>
  80ce98:	8822943a 	slli	r17,r17,16
  80ce9c:	100b883a 	mov	r5,r2
  80cea0:	a809883a 	mov	r4,r21
  80cea4:	0802af80 	call	802af8 <__mulsi3>
  80cea8:	98ffffcc 	andi	r3,r19,65535
  80ceac:	88c6b03a 	or	r3,r17,r3
  80ceb0:	18805e2e 	bgeu	r3,r2,80d02c <__umoddi3+0x298>
  80ceb4:	00005906 	br	80d01c <__umoddi3+0x288>
  80ceb8:	2005883a 	mov	r2,r4
  80cebc:	29c00d2e 	bgeu	r5,r7,80cef4 <__umoddi3+0x160>
  80cec0:	2807883a 	mov	r3,r5
  80cec4:	dfc00c17 	ldw	ra,48(sp)
  80cec8:	df000b17 	ldw	fp,44(sp)
  80cecc:	ddc00a17 	ldw	r23,40(sp)
  80ced0:	dd800917 	ldw	r22,36(sp)
  80ced4:	dd400817 	ldw	r21,32(sp)
  80ced8:	dd000717 	ldw	r20,28(sp)
  80cedc:	dcc00617 	ldw	r19,24(sp)
  80cee0:	dc800517 	ldw	r18,20(sp)
  80cee4:	dc400417 	ldw	r17,16(sp)
  80cee8:	dc000317 	ldw	r16,12(sp)
  80ceec:	dec00d04 	addi	sp,sp,52
  80cef0:	f800283a 	ret
  80cef4:	013fffd4 	movui	r4,65535
  80cef8:	2807883a 	mov	r3,r5
  80cefc:	21c0592e 	bgeu	r4,r7,80d064 <__umoddi3+0x2d0>
  80cf00:	01004034 	movhi	r4,256
  80cf04:	39010336 	bltu	r7,r4,80d314 <__umoddi3+0x580>
  80cf08:	3808d63a 	srli	r4,r7,24
  80cf0c:	02000604 	movi	r8,24
  80cf10:	01402074 	movhi	r5,129
  80cf14:	214b883a 	add	r5,r4,r5
  80cf18:	2d0a7f03 	ldbu	r20,10748(r5)
  80cf1c:	01000804 	movi	r4,32
  80cf20:	a229883a 	add	r20,r20,r8
  80cf24:	252bc83a 	sub	r21,r4,r20
  80cf28:	2500531e 	bne	r4,r20,80d078 <__umoddi3+0x2e4>
  80cf2c:	3c400136 	bltu	r7,r17,80cf34 <__umoddi3+0x1a0>
  80cf30:	81bfe436 	bltu	r16,r6,80cec4 <__umoddi3+0x130>
  80cf34:	8185c83a 	sub	r2,r16,r6
  80cf38:	89cfc83a 	sub	r7,r17,r7
  80cf3c:	8087803a 	cmpltu	r3,r16,r2
  80cf40:	38c7c83a 	sub	r3,r7,r3
  80cf44:	003fdf06 	br	80cec4 <__umoddi3+0x130>
  80cf48:	3000041e 	bne	r6,zero,80cf5c <__umoddi3+0x1c8>
  80cf4c:	000b883a 	mov	r5,zero
  80cf50:	01000044 	movi	r4,1
  80cf54:	080d44c0 	call	80d44c <__udivsi3>
  80cf58:	1029883a 	mov	r20,r2
  80cf5c:	00bfffd4 	movui	r2,65535
  80cf60:	1500362e 	bgeu	r2,r20,80d03c <__umoddi3+0x2a8>
  80cf64:	00804034 	movhi	r2,256
  80cf68:	a080ed36 	bltu	r20,r2,80d320 <__umoddi3+0x58c>
  80cf6c:	a006d63a 	srli	r3,r20,24
  80cf70:	04800604 	movi	r18,24
  80cf74:	00802074 	movhi	r2,129
  80cf78:	1885883a 	add	r2,r3,r2
  80cf7c:	158a7f03 	ldbu	r22,10748(r2)
  80cf80:	00800804 	movi	r2,32
  80cf84:	b4ad883a 	add	r22,r22,r18
  80cf88:	15a5c83a 	sub	r18,r2,r22
  80cf8c:	1580a51e 	bne	r2,r22,80d224 <__umoddi3+0x490>
  80cf90:	a02ed43a 	srli	r23,r20,16
  80cf94:	8d23c83a 	sub	r17,r17,r20
  80cf98:	a57fffcc 	andi	r21,r20,65535
  80cf9c:	8809883a 	mov	r4,r17
  80cfa0:	b80b883a 	mov	r5,r23
  80cfa4:	080d4b00 	call	80d4b0 <__umodsi3>
  80cfa8:	8809883a 	mov	r4,r17
  80cfac:	b80b883a 	mov	r5,r23
  80cfb0:	1023883a 	mov	r17,r2
  80cfb4:	080d44c0 	call	80d44c <__udivsi3>
  80cfb8:	1009883a 	mov	r4,r2
  80cfbc:	a80b883a 	mov	r5,r21
  80cfc0:	0802af80 	call	802af8 <__mulsi3>
  80cfc4:	8822943a 	slli	r17,r17,16
  80cfc8:	9808d43a 	srli	r4,r19,16
  80cfcc:	8908b03a 	or	r4,r17,r4
  80cfd0:	2080032e 	bgeu	r4,r2,80cfe0 <__umoddi3+0x24c>
  80cfd4:	2509883a 	add	r4,r4,r20
  80cfd8:	25000136 	bltu	r4,r20,80cfe0 <__umoddi3+0x24c>
  80cfdc:	2080dc36 	bltu	r4,r2,80d350 <__umoddi3+0x5bc>
  80cfe0:	20a1c83a 	sub	r16,r4,r2
  80cfe4:	b80b883a 	mov	r5,r23
  80cfe8:	8009883a 	mov	r4,r16
  80cfec:	080d4b00 	call	80d4b0 <__umodsi3>
  80cff0:	b80b883a 	mov	r5,r23
  80cff4:	8009883a 	mov	r4,r16
  80cff8:	1023883a 	mov	r17,r2
  80cffc:	8822943a 	slli	r17,r17,16
  80d000:	080d44c0 	call	80d44c <__udivsi3>
  80d004:	a80b883a 	mov	r5,r21
  80d008:	1009883a 	mov	r4,r2
  80d00c:	0802af80 	call	802af8 <__mulsi3>
  80d010:	9cffffcc 	andi	r19,r19,65535
  80d014:	8cc6b03a 	or	r3,r17,r19
  80d018:	1880042e 	bgeu	r3,r2,80d02c <__umoddi3+0x298>
  80d01c:	1d07883a 	add	r3,r3,r20
  80d020:	1d000236 	bltu	r3,r20,80d02c <__umoddi3+0x298>
  80d024:	1880012e 	bgeu	r3,r2,80d02c <__umoddi3+0x298>
  80d028:	1d07883a 	add	r3,r3,r20
  80d02c:	1885c83a 	sub	r2,r3,r2
  80d030:	1484d83a 	srl	r2,r2,r18
  80d034:	0007883a 	mov	r3,zero
  80d038:	003fa206 	br	80cec4 <__umoddi3+0x130>
  80d03c:	a0804030 	cmpltui	r2,r20,256
  80d040:	1000ba1e 	bne	r2,zero,80d32c <__umoddi3+0x598>
  80d044:	a006d23a 	srli	r3,r20,8
  80d048:	04800204 	movi	r18,8
  80d04c:	003fc906 	br	80cf74 <__umoddi3+0x1e0>
  80d050:	30804030 	cmpltui	r2,r6,256
  80d054:	1000ad1e 	bne	r2,zero,80d30c <__umoddi3+0x578>
  80d058:	3006d23a 	srli	r3,r6,8
  80d05c:	04800204 	movi	r18,8
  80d060:	003f6506 	br	80cdf8 <__umoddi3+0x64>
  80d064:	39004030 	cmpltui	r4,r7,256
  80d068:	2000b21e 	bne	r4,zero,80d334 <__umoddi3+0x5a0>
  80d06c:	3808d23a 	srli	r4,r7,8
  80d070:	02000204 	movi	r8,8
  80d074:	003fa606 	br	80cf10 <__umoddi3+0x17c>
  80d078:	3d4e983a 	sll	r7,r7,r21
  80d07c:	3508d83a 	srl	r4,r6,r20
  80d080:	8d2cd83a 	srl	r22,r17,r20
  80d084:	8504d83a 	srl	r2,r16,r20
  80d088:	21e4b03a 	or	r18,r4,r7
  80d08c:	8d62983a 	sll	r17,r17,r21
  80d090:	9026d43a 	srli	r19,r18,16
  80d094:	354c983a 	sll	r6,r6,r21
  80d098:	1444b03a 	or	r2,r2,r17
  80d09c:	b009883a 	mov	r4,r22
  80d0a0:	980b883a 	mov	r5,r19
  80d0a4:	d9800115 	stw	r6,4(sp)
  80d0a8:	d8800015 	stw	r2,0(sp)
  80d0ac:	080d4b00 	call	80d4b0 <__umodsi3>
  80d0b0:	980b883a 	mov	r5,r19
  80d0b4:	b009883a 	mov	r4,r22
  80d0b8:	102f883a 	mov	r23,r2
  80d0bc:	947fffcc 	andi	r17,r18,65535
  80d0c0:	080d44c0 	call	80d44c <__udivsi3>
  80d0c4:	8809883a 	mov	r4,r17
  80d0c8:	100b883a 	mov	r5,r2
  80d0cc:	1039883a 	mov	fp,r2
  80d0d0:	0802af80 	call	802af8 <__mulsi3>
  80d0d4:	d8c00017 	ldw	r3,0(sp)
  80d0d8:	b82e943a 	slli	r23,r23,16
  80d0dc:	8560983a 	sll	r16,r16,r21
  80d0e0:	1808d43a 	srli	r4,r3,16
  80d0e4:	b908b03a 	or	r4,r23,r4
  80d0e8:	2080062e 	bgeu	r4,r2,80d104 <__umoddi3+0x370>
  80d0ec:	2489883a 	add	r4,r4,r18
  80d0f0:	e17fffc4 	addi	r5,fp,-1
  80d0f4:	24809436 	bltu	r4,r18,80d348 <__umoddi3+0x5b4>
  80d0f8:	2080932e 	bgeu	r4,r2,80d348 <__umoddi3+0x5b4>
  80d0fc:	e73fff84 	addi	fp,fp,-2
  80d100:	2489883a 	add	r4,r4,r18
  80d104:	20adc83a 	sub	r22,r4,r2
  80d108:	980b883a 	mov	r5,r19
  80d10c:	b009883a 	mov	r4,r22
  80d110:	080d4b00 	call	80d4b0 <__umodsi3>
  80d114:	980b883a 	mov	r5,r19
  80d118:	b009883a 	mov	r4,r22
  80d11c:	102f883a 	mov	r23,r2
  80d120:	080d44c0 	call	80d44c <__udivsi3>
  80d124:	100b883a 	mov	r5,r2
  80d128:	8809883a 	mov	r4,r17
  80d12c:	d8800215 	stw	r2,8(sp)
  80d130:	0802af80 	call	802af8 <__mulsi3>
  80d134:	d8c00017 	ldw	r3,0(sp)
  80d138:	b82e943a 	slli	r23,r23,16
  80d13c:	d9400217 	ldw	r5,8(sp)
  80d140:	1c7fffcc 	andi	r17,r3,65535
  80d144:	bc62b03a 	or	r17,r23,r17
  80d148:	8880062e 	bgeu	r17,r2,80d164 <__umoddi3+0x3d0>
  80d14c:	8ca3883a 	add	r17,r17,r18
  80d150:	28ffffc4 	addi	r3,r5,-1
  80d154:	8c807a36 	bltu	r17,r18,80d340 <__umoddi3+0x5ac>
  80d158:	8880792e 	bgeu	r17,r2,80d340 <__umoddi3+0x5ac>
  80d15c:	297fff84 	addi	r5,r5,-2
  80d160:	8ca3883a 	add	r17,r17,r18
  80d164:	e02c943a 	slli	r22,fp,16
  80d168:	d9c00117 	ldw	r7,4(sp)
  80d16c:	29bfffcc 	andi	r6,r5,65535
  80d170:	b16cb03a 	or	r22,r22,r5
  80d174:	38ffffcc 	andi	r3,r7,65535
  80d178:	b02cd43a 	srli	r22,r22,16
  80d17c:	180b883a 	mov	r5,r3
  80d180:	3009883a 	mov	r4,r6
  80d184:	3838d43a 	srli	fp,r7,16
  80d188:	182f883a 	mov	r23,r3
  80d18c:	d9800015 	stw	r6,0(sp)
  80d190:	88a3c83a 	sub	r17,r17,r2
  80d194:	0802af80 	call	802af8 <__mulsi3>
  80d198:	b80b883a 	mov	r5,r23
  80d19c:	b009883a 	mov	r4,r22
  80d1a0:	102f883a 	mov	r23,r2
  80d1a4:	0802af80 	call	802af8 <__mulsi3>
  80d1a8:	e00b883a 	mov	r5,fp
  80d1ac:	b009883a 	mov	r4,r22
  80d1b0:	102d883a 	mov	r22,r2
  80d1b4:	0802af80 	call	802af8 <__mulsi3>
  80d1b8:	d9800017 	ldw	r6,0(sp)
  80d1bc:	e00b883a 	mov	r5,fp
  80d1c0:	1039883a 	mov	fp,r2
  80d1c4:	3009883a 	mov	r4,r6
  80d1c8:	0802af80 	call	802af8 <__mulsi3>
  80d1cc:	b808d43a 	srli	r4,r23,16
  80d1d0:	1585883a 	add	r2,r2,r22
  80d1d4:	2089883a 	add	r4,r4,r2
  80d1d8:	2580022e 	bgeu	r4,r22,80d1e4 <__umoddi3+0x450>
  80d1dc:	00800074 	movhi	r2,1
  80d1e0:	e0b9883a 	add	fp,fp,r2
  80d1e4:	2006d43a 	srli	r3,r4,16
  80d1e8:	2008943a 	slli	r4,r4,16
  80d1ec:	bdffffcc 	andi	r23,r23,65535
  80d1f0:	1f07883a 	add	r3,r3,fp
  80d1f4:	25c9883a 	add	r4,r4,r23
  80d1f8:	88c03a36 	bltu	r17,r3,80d2e4 <__umoddi3+0x550>
  80d1fc:	88c03826 	beq	r17,r3,80d2e0 <__umoddi3+0x54c>
  80d200:	8109c83a 	sub	r4,r16,r4
  80d204:	8121803a 	cmpltu	r16,r16,r4
  80d208:	88c7c83a 	sub	r3,r17,r3
  80d20c:	1c07c83a 	sub	r3,r3,r16
  80d210:	1d04983a 	sll	r2,r3,r20
  80d214:	2548d83a 	srl	r4,r4,r21
  80d218:	1d46d83a 	srl	r3,r3,r21
  80d21c:	1104b03a 	or	r2,r2,r4
  80d220:	003f2806 	br	80cec4 <__umoddi3+0x130>
  80d224:	a4a8983a 	sll	r20,r20,r18
  80d228:	8da6d83a 	srl	r19,r17,r22
  80d22c:	8ca2983a 	sll	r17,r17,r18
  80d230:	a02ed43a 	srli	r23,r20,16
  80d234:	9809883a 	mov	r4,r19
  80d238:	85acd83a 	srl	r22,r16,r22
  80d23c:	b80b883a 	mov	r5,r23
  80d240:	080d4b00 	call	80d4b0 <__umodsi3>
  80d244:	9809883a 	mov	r4,r19
  80d248:	b80b883a 	mov	r5,r23
  80d24c:	b46cb03a 	or	r22,r22,r17
  80d250:	a57fffcc 	andi	r21,r20,65535
  80d254:	1023883a 	mov	r17,r2
  80d258:	080d44c0 	call	80d44c <__udivsi3>
  80d25c:	a809883a 	mov	r4,r21
  80d260:	100b883a 	mov	r5,r2
  80d264:	0802af80 	call	802af8 <__mulsi3>
  80d268:	8822943a 	slli	r17,r17,16
  80d26c:	b008d43a 	srli	r4,r22,16
  80d270:	84a6983a 	sll	r19,r16,r18
  80d274:	8908b03a 	or	r4,r17,r4
  80d278:	2080042e 	bgeu	r4,r2,80d28c <__umoddi3+0x4f8>
  80d27c:	2509883a 	add	r4,r4,r20
  80d280:	25000236 	bltu	r4,r20,80d28c <__umoddi3+0x4f8>
  80d284:	2080012e 	bgeu	r4,r2,80d28c <__umoddi3+0x4f8>
  80d288:	2509883a 	add	r4,r4,r20
  80d28c:	20a1c83a 	sub	r16,r4,r2
  80d290:	8009883a 	mov	r4,r16
  80d294:	b80b883a 	mov	r5,r23
  80d298:	080d4b00 	call	80d4b0 <__umodsi3>
  80d29c:	8009883a 	mov	r4,r16
  80d2a0:	1021883a 	mov	r16,r2
  80d2a4:	b80b883a 	mov	r5,r23
  80d2a8:	8020943a 	slli	r16,r16,16
  80d2ac:	080d44c0 	call	80d44c <__udivsi3>
  80d2b0:	100b883a 	mov	r5,r2
  80d2b4:	a809883a 	mov	r4,r21
  80d2b8:	b47fffcc 	andi	r17,r22,65535
  80d2bc:	0802af80 	call	802af8 <__mulsi3>
  80d2c0:	8462b03a 	or	r17,r16,r17
  80d2c4:	8880042e 	bgeu	r17,r2,80d2d8 <__umoddi3+0x544>
  80d2c8:	8d23883a 	add	r17,r17,r20
  80d2cc:	8d000236 	bltu	r17,r20,80d2d8 <__umoddi3+0x544>
  80d2d0:	8880012e 	bgeu	r17,r2,80d2d8 <__umoddi3+0x544>
  80d2d4:	8d23883a 	add	r17,r17,r20
  80d2d8:	88a3c83a 	sub	r17,r17,r2
  80d2dc:	003f2f06 	br	80cf9c <__umoddi3+0x208>
  80d2e0:	813fc72e 	bgeu	r16,r4,80d200 <__umoddi3+0x46c>
  80d2e4:	d8800117 	ldw	r2,4(sp)
  80d2e8:	20a7c83a 	sub	r19,r4,r2
  80d2ec:	24c9803a 	cmpltu	r4,r4,r19
  80d2f0:	2489883a 	add	r4,r4,r18
  80d2f4:	1907c83a 	sub	r3,r3,r4
  80d2f8:	9809883a 	mov	r4,r19
  80d2fc:	003fc006 	br	80d200 <__umoddi3+0x46c>
  80d300:	3006d43a 	srli	r3,r6,16
  80d304:	04800404 	movi	r18,16
  80d308:	003ebb06 	br	80cdf8 <__umoddi3+0x64>
  80d30c:	3007883a 	mov	r3,r6
  80d310:	003eb906 	br	80cdf8 <__umoddi3+0x64>
  80d314:	3808d43a 	srli	r4,r7,16
  80d318:	02000404 	movi	r8,16
  80d31c:	003efc06 	br	80cf10 <__umoddi3+0x17c>
  80d320:	a006d43a 	srli	r3,r20,16
  80d324:	04800404 	movi	r18,16
  80d328:	003f1206 	br	80cf74 <__umoddi3+0x1e0>
  80d32c:	a007883a 	mov	r3,r20
  80d330:	003f1006 	br	80cf74 <__umoddi3+0x1e0>
  80d334:	3809883a 	mov	r4,r7
  80d338:	0011883a 	mov	r8,zero
  80d33c:	003ef406 	br	80cf10 <__umoddi3+0x17c>
  80d340:	180b883a 	mov	r5,r3
  80d344:	003f8706 	br	80d164 <__umoddi3+0x3d0>
  80d348:	2839883a 	mov	fp,r5
  80d34c:	003f6d06 	br	80d104 <__umoddi3+0x370>
  80d350:	2509883a 	add	r4,r4,r20
  80d354:	003f2206 	br	80cfe0 <__umoddi3+0x24c>

0080d358 <__divsi3>:
  80d358:	20001a16 	blt	r4,zero,80d3c4 <__divsi3+0x6c>
  80d35c:	000f883a 	mov	r7,zero
  80d360:	2800020e 	bge	r5,zero,80d36c <__divsi3+0x14>
  80d364:	014bc83a 	sub	r5,zero,r5
  80d368:	39c0005c 	xori	r7,r7,1
  80d36c:	200d883a 	mov	r6,r4
  80d370:	00c00044 	movi	r3,1
  80d374:	2900092e 	bgeu	r5,r4,80d39c <__divsi3+0x44>
  80d378:	00800804 	movi	r2,32
  80d37c:	00c00044 	movi	r3,1
  80d380:	00000106 	br	80d388 <__divsi3+0x30>
  80d384:	10001226 	beq	r2,zero,80d3d0 <__divsi3+0x78>
  80d388:	294b883a 	add	r5,r5,r5
  80d38c:	10bfffc4 	addi	r2,r2,-1
  80d390:	18c7883a 	add	r3,r3,r3
  80d394:	293ffb36 	bltu	r5,r4,80d384 <__divsi3+0x2c>
  80d398:	18000d26 	beq	r3,zero,80d3d0 <__divsi3+0x78>
  80d39c:	0005883a 	mov	r2,zero
  80d3a0:	31400236 	bltu	r6,r5,80d3ac <__divsi3+0x54>
  80d3a4:	314dc83a 	sub	r6,r6,r5
  80d3a8:	10c4b03a 	or	r2,r2,r3
  80d3ac:	1806d07a 	srli	r3,r3,1
  80d3b0:	280ad07a 	srli	r5,r5,1
  80d3b4:	183ffa1e 	bne	r3,zero,80d3a0 <__divsi3+0x48>
  80d3b8:	38000126 	beq	r7,zero,80d3c0 <__divsi3+0x68>
  80d3bc:	0085c83a 	sub	r2,zero,r2
  80d3c0:	f800283a 	ret
  80d3c4:	0109c83a 	sub	r4,zero,r4
  80d3c8:	01c00044 	movi	r7,1
  80d3cc:	003fe406 	br	80d360 <__divsi3+0x8>
  80d3d0:	0005883a 	mov	r2,zero
  80d3d4:	003ff806 	br	80d3b8 <__divsi3+0x60>

0080d3d8 <__modsi3>:
  80d3d8:	20001916 	blt	r4,zero,80d440 <__modsi3+0x68>
  80d3dc:	000f883a 	mov	r7,zero
  80d3e0:	2005883a 	mov	r2,r4
  80d3e4:	2800010e 	bge	r5,zero,80d3ec <__modsi3+0x14>
  80d3e8:	014bc83a 	sub	r5,zero,r5
  80d3ec:	00c00044 	movi	r3,1
  80d3f0:	2900092e 	bgeu	r5,r4,80d418 <__modsi3+0x40>
  80d3f4:	01800804 	movi	r6,32
  80d3f8:	00c00044 	movi	r3,1
  80d3fc:	00000106 	br	80d404 <__modsi3+0x2c>
  80d400:	30000d26 	beq	r6,zero,80d438 <__modsi3+0x60>
  80d404:	294b883a 	add	r5,r5,r5
  80d408:	31bfffc4 	addi	r6,r6,-1
  80d40c:	18c7883a 	add	r3,r3,r3
  80d410:	293ffb36 	bltu	r5,r4,80d400 <__modsi3+0x28>
  80d414:	18000826 	beq	r3,zero,80d438 <__modsi3+0x60>
  80d418:	1806d07a 	srli	r3,r3,1
  80d41c:	11400136 	bltu	r2,r5,80d424 <__modsi3+0x4c>
  80d420:	1145c83a 	sub	r2,r2,r5
  80d424:	280ad07a 	srli	r5,r5,1
  80d428:	183ffb1e 	bne	r3,zero,80d418 <__modsi3+0x40>
  80d42c:	38000126 	beq	r7,zero,80d434 <__modsi3+0x5c>
  80d430:	0085c83a 	sub	r2,zero,r2
  80d434:	f800283a 	ret
  80d438:	2005883a 	mov	r2,r4
  80d43c:	003ffb06 	br	80d42c <__modsi3+0x54>
  80d440:	0109c83a 	sub	r4,zero,r4
  80d444:	01c00044 	movi	r7,1
  80d448:	003fe506 	br	80d3e0 <__modsi3+0x8>

0080d44c <__udivsi3>:
  80d44c:	200d883a 	mov	r6,r4
  80d450:	2900152e 	bgeu	r5,r4,80d4a8 <__udivsi3+0x5c>
  80d454:	28001416 	blt	r5,zero,80d4a8 <__udivsi3+0x5c>
  80d458:	00800804 	movi	r2,32
  80d45c:	00c00044 	movi	r3,1
  80d460:	00000206 	br	80d46c <__udivsi3+0x20>
  80d464:	10000e26 	beq	r2,zero,80d4a0 <__udivsi3+0x54>
  80d468:	28000516 	blt	r5,zero,80d480 <__udivsi3+0x34>
  80d46c:	294b883a 	add	r5,r5,r5
  80d470:	10bfffc4 	addi	r2,r2,-1
  80d474:	18c7883a 	add	r3,r3,r3
  80d478:	293ffa36 	bltu	r5,r4,80d464 <__udivsi3+0x18>
  80d47c:	18000826 	beq	r3,zero,80d4a0 <__udivsi3+0x54>
  80d480:	0005883a 	mov	r2,zero
  80d484:	31400236 	bltu	r6,r5,80d490 <__udivsi3+0x44>
  80d488:	314dc83a 	sub	r6,r6,r5
  80d48c:	10c4b03a 	or	r2,r2,r3
  80d490:	1806d07a 	srli	r3,r3,1
  80d494:	280ad07a 	srli	r5,r5,1
  80d498:	183ffa1e 	bne	r3,zero,80d484 <__udivsi3+0x38>
  80d49c:	f800283a 	ret
  80d4a0:	0005883a 	mov	r2,zero
  80d4a4:	f800283a 	ret
  80d4a8:	00c00044 	movi	r3,1
  80d4ac:	003ff406 	br	80d480 <__udivsi3+0x34>

0080d4b0 <__umodsi3>:
  80d4b0:	2005883a 	mov	r2,r4
  80d4b4:	2900132e 	bgeu	r5,r4,80d504 <__umodsi3+0x54>
  80d4b8:	28001216 	blt	r5,zero,80d504 <__umodsi3+0x54>
  80d4bc:	01800804 	movi	r6,32
  80d4c0:	00c00044 	movi	r3,1
  80d4c4:	00000206 	br	80d4d0 <__umodsi3+0x20>
  80d4c8:	30000c26 	beq	r6,zero,80d4fc <__umodsi3+0x4c>
  80d4cc:	28000516 	blt	r5,zero,80d4e4 <__umodsi3+0x34>
  80d4d0:	294b883a 	add	r5,r5,r5
  80d4d4:	31bfffc4 	addi	r6,r6,-1
  80d4d8:	18c7883a 	add	r3,r3,r3
  80d4dc:	293ffa36 	bltu	r5,r4,80d4c8 <__umodsi3+0x18>
  80d4e0:	18000626 	beq	r3,zero,80d4fc <__umodsi3+0x4c>
  80d4e4:	1806d07a 	srli	r3,r3,1
  80d4e8:	11400136 	bltu	r2,r5,80d4f0 <__umodsi3+0x40>
  80d4ec:	1145c83a 	sub	r2,r2,r5
  80d4f0:	280ad07a 	srli	r5,r5,1
  80d4f4:	183ffb1e 	bne	r3,zero,80d4e4 <__umodsi3+0x34>
  80d4f8:	f800283a 	ret
  80d4fc:	2005883a 	mov	r2,r4
  80d500:	f800283a 	ret
  80d504:	00c00044 	movi	r3,1
  80d508:	003ff606 	br	80d4e4 <__umodsi3+0x34>

0080d50c <__adddf3>:
  80d50c:	02000434 	movhi	r8,16
  80d510:	423fffc4 	addi	r8,r8,-1
  80d514:	2806d53a 	srli	r3,r5,20
  80d518:	3804d53a 	srli	r2,r7,20
  80d51c:	2a14703a 	and	r10,r5,r8
  80d520:	3a12703a 	and	r9,r7,r8
  80d524:	280ad7fa 	srli	r5,r5,31
  80d528:	501490fa 	slli	r10,r10,3
  80d52c:	2018d77a 	srli	r12,r4,29
  80d530:	481290fa 	slli	r9,r9,3
  80d534:	3016d77a 	srli	r11,r6,29
  80d538:	380ed7fa 	srli	r7,r7,31
  80d53c:	defffb04 	addi	sp,sp,-20
  80d540:	dc800215 	stw	r18,8(sp)
  80d544:	dc000015 	stw	r16,0(sp)
  80d548:	1c81ffcc 	andi	r18,r3,2047
  80d54c:	1081ffcc 	andi	r2,r2,2047
  80d550:	dfc00415 	stw	ra,16(sp)
  80d554:	dcc00315 	stw	r19,12(sp)
  80d558:	dc400115 	stw	r17,4(sp)
  80d55c:	201c90fa 	slli	r14,r4,3
  80d560:	301a90fa 	slli	r13,r6,3
  80d564:	2821883a 	mov	r16,r5
  80d568:	6294b03a 	or	r10,r12,r10
  80d56c:	5a52b03a 	or	r9,r11,r9
  80d570:	9087c83a 	sub	r3,r18,r2
  80d574:	29c06126 	beq	r5,r7,80d6fc <__adddf3+0x1f0>
  80d578:	00c0550e 	bge	zero,r3,80d6d0 <__adddf3+0x1c4>
  80d57c:	10007326 	beq	r2,zero,80d74c <__adddf3+0x240>
  80d580:	9081ffd8 	cmpnei	r2,r18,2047
  80d584:	1000bd26 	beq	r2,zero,80d87c <__adddf3+0x370>
  80d588:	4a402034 	orhi	r9,r9,128
  80d58c:	18800e48 	cmpgei	r2,r3,57
  80d590:	1000ef1e 	bne	r2,zero,80d950 <__adddf3+0x444>
  80d594:	18800808 	cmpgei	r2,r3,32
  80d598:	1001321e 	bne	r2,zero,80da64 <__adddf3+0x558>
  80d59c:	00800804 	movi	r2,32
  80d5a0:	10c5c83a 	sub	r2,r2,r3
  80d5a4:	68c8d83a 	srl	r4,r13,r3
  80d5a8:	48a2983a 	sll	r17,r9,r2
  80d5ac:	689a983a 	sll	r13,r13,r2
  80d5b0:	48c6d83a 	srl	r3,r9,r3
  80d5b4:	8922b03a 	or	r17,r17,r4
  80d5b8:	681ac03a 	cmpne	r13,r13,zero
  80d5bc:	8b62b03a 	or	r17,r17,r13
  80d5c0:	50d5c83a 	sub	r10,r10,r3
  80d5c4:	7463c83a 	sub	r17,r14,r17
  80d5c8:	7451803a 	cmpltu	r8,r14,r17
  80d5cc:	5211c83a 	sub	r8,r10,r8
  80d5d0:	4080202c 	andhi	r2,r8,128
  80d5d4:	10008d26 	beq	r2,zero,80d80c <__adddf3+0x300>
  80d5d8:	02402034 	movhi	r9,128
  80d5dc:	4a7fffc4 	addi	r9,r9,-1
  80d5e0:	4266703a 	and	r19,r8,r9
  80d5e4:	9800b326 	beq	r19,zero,80d8b4 <__adddf3+0x3a8>
  80d5e8:	9809883a 	mov	r4,r19
  80d5ec:	0802aa40 	call	802aa4 <__clzsi2>
  80d5f0:	10fffe04 	addi	r3,r2,-8
  80d5f4:	02000804 	movi	r8,32
  80d5f8:	40d1c83a 	sub	r8,r8,r3
  80d5fc:	8a10d83a 	srl	r8,r17,r8
  80d600:	98d2983a 	sll	r9,r19,r3
  80d604:	88e2983a 	sll	r17,r17,r3
  80d608:	4250b03a 	or	r8,r8,r9
  80d60c:	1c80b216 	blt	r3,r18,80d8d8 <__adddf3+0x3cc>
  80d610:	1c87c83a 	sub	r3,r3,r18
  80d614:	19000044 	addi	r4,r3,1
  80d618:	20800808 	cmpgei	r2,r4,32
  80d61c:	10006f1e 	bne	r2,zero,80d7dc <__adddf3+0x2d0>
  80d620:	00800804 	movi	r2,32
  80d624:	1105c83a 	sub	r2,r2,r4
  80d628:	8906d83a 	srl	r3,r17,r4
  80d62c:	88a2983a 	sll	r17,r17,r2
  80d630:	4084983a 	sll	r2,r8,r2
  80d634:	4110d83a 	srl	r8,r8,r4
  80d638:	8822c03a 	cmpne	r17,r17,zero
  80d63c:	10c4b03a 	or	r2,r2,r3
  80d640:	1462b03a 	or	r17,r2,r17
  80d644:	0025883a 	mov	r18,zero
  80d648:	888001cc 	andi	r2,r17,7
  80d64c:	10000726 	beq	r2,zero,80d66c <__adddf3+0x160>
  80d650:	888003cc 	andi	r2,r17,15
  80d654:	10800120 	cmpeqi	r2,r2,4
  80d658:	1000041e 	bne	r2,zero,80d66c <__adddf3+0x160>
  80d65c:	88c00104 	addi	r3,r17,4
  80d660:	1c63803a 	cmpltu	r17,r3,r17
  80d664:	4451883a 	add	r8,r8,r17
  80d668:	1823883a 	mov	r17,r3
  80d66c:	4080202c 	andhi	r2,r8,128
  80d670:	10006826 	beq	r2,zero,80d814 <__adddf3+0x308>
  80d674:	90c00044 	addi	r3,r18,1
  80d678:	1881ffe0 	cmpeqi	r2,r3,2047
  80d67c:	18c1ffcc 	andi	r3,r3,2047
  80d680:	10007a1e 	bne	r2,zero,80d86c <__adddf3+0x360>
  80d684:	00bfe034 	movhi	r2,65408
  80d688:	10bfffc4 	addi	r2,r2,-1
  80d68c:	4090703a 	and	r8,r8,r2
  80d690:	4004977a 	slli	r2,r8,29
  80d694:	4010927a 	slli	r8,r8,9
  80d698:	8822d0fa 	srli	r17,r17,3
  80d69c:	4010d33a 	srli	r8,r8,12
  80d6a0:	1444b03a 	or	r2,r2,r17
  80d6a4:	1806953a 	slli	r3,r3,20
  80d6a8:	802097fa 	slli	r16,r16,31
  80d6ac:	1a06b03a 	or	r3,r3,r8
  80d6b0:	1c06b03a 	or	r3,r3,r16
  80d6b4:	dfc00417 	ldw	ra,16(sp)
  80d6b8:	dcc00317 	ldw	r19,12(sp)
  80d6bc:	dc800217 	ldw	r18,8(sp)
  80d6c0:	dc400117 	ldw	r17,4(sp)
  80d6c4:	dc000017 	ldw	r16,0(sp)
  80d6c8:	dec00504 	addi	sp,sp,20
  80d6cc:	f800283a 	ret
  80d6d0:	18002626 	beq	r3,zero,80d76c <__adddf3+0x260>
  80d6d4:	1487c83a 	sub	r3,r2,r18
  80d6d8:	9000ba1e 	bne	r18,zero,80d9c4 <__adddf3+0x4b8>
  80d6dc:	5388b03a 	or	r4,r10,r14
  80d6e0:	20011826 	beq	r4,zero,80db44 <__adddf3+0x638>
  80d6e4:	193fffc4 	addi	r4,r3,-1
  80d6e8:	20015726 	beq	r4,zero,80dc48 <__adddf3+0x73c>
  80d6ec:	18c1ffd8 	cmpnei	r3,r3,2047
  80d6f0:	18013026 	beq	r3,zero,80dbb4 <__adddf3+0x6a8>
  80d6f4:	2007883a 	mov	r3,r4
  80d6f8:	0000b506 	br	80d9d0 <__adddf3+0x4c4>
  80d6fc:	00c07b0e 	bge	zero,r3,80d8ec <__adddf3+0x3e0>
  80d700:	10002e26 	beq	r2,zero,80d7bc <__adddf3+0x2b0>
  80d704:	9081ffd8 	cmpnei	r2,r18,2047
  80d708:	10005c26 	beq	r2,zero,80d87c <__adddf3+0x370>
  80d70c:	4a402034 	orhi	r9,r9,128
  80d710:	18800e48 	cmpgei	r2,r3,57
  80d714:	10004b1e 	bne	r2,zero,80d844 <__adddf3+0x338>
  80d718:	18800808 	cmpgei	r2,r3,32
  80d71c:	1000ec26 	beq	r2,zero,80dad0 <__adddf3+0x5c4>
  80d720:	1c7ff804 	addi	r17,r3,-32
  80d724:	19000820 	cmpeqi	r4,r3,32
  80d728:	4c44d83a 	srl	r2,r9,r17
  80d72c:	2000041e 	bne	r4,zero,80d740 <__adddf3+0x234>
  80d730:	01001004 	movi	r4,64
  80d734:	20c7c83a 	sub	r3,r4,r3
  80d738:	48d2983a 	sll	r9,r9,r3
  80d73c:	6a5ab03a 	or	r13,r13,r9
  80d740:	6822c03a 	cmpne	r17,r13,zero
  80d744:	88a2b03a 	or	r17,r17,r2
  80d748:	00004006 	br	80d84c <__adddf3+0x340>
  80d74c:	4b44b03a 	or	r2,r9,r13
  80d750:	10008226 	beq	r2,zero,80d95c <__adddf3+0x450>
  80d754:	18bfffc4 	addi	r2,r3,-1
  80d758:	10011026 	beq	r2,zero,80db9c <__adddf3+0x690>
  80d75c:	18c1ffd8 	cmpnei	r3,r3,2047
  80d760:	18004626 	beq	r3,zero,80d87c <__adddf3+0x370>
  80d764:	1007883a 	mov	r3,r2
  80d768:	003f8806 	br	80d58c <__adddf3+0x80>
  80d76c:	90800044 	addi	r2,r18,1
  80d770:	1081ff8c 	andi	r2,r2,2046
  80d774:	1000a51e 	bne	r2,zero,80da0c <__adddf3+0x500>
  80d778:	538ab03a 	or	r5,r10,r14
  80d77c:	4b44b03a 	or	r2,r9,r13
  80d780:	9000f81e 	bne	r18,zero,80db64 <__adddf3+0x658>
  80d784:	28013726 	beq	r5,zero,80dc64 <__adddf3+0x758>
  80d788:	10011226 	beq	r2,zero,80dbd4 <__adddf3+0x6c8>
  80d78c:	7363c83a 	sub	r17,r14,r13
  80d790:	7445803a 	cmpltu	r2,r14,r17
  80d794:	5251c83a 	sub	r8,r10,r9
  80d798:	4091c83a 	sub	r8,r8,r2
  80d79c:	4080202c 	andhi	r2,r8,128
  80d7a0:	10018f26 	beq	r2,zero,80dde0 <__adddf3+0x8d4>
  80d7a4:	6ba3c83a 	sub	r17,r13,r14
  80d7a8:	4a95c83a 	sub	r10,r9,r10
  80d7ac:	6c51803a 	cmpltu	r8,r13,r17
  80d7b0:	5211c83a 	sub	r8,r10,r8
  80d7b4:	3821883a 	mov	r16,r7
  80d7b8:	003fa306 	br	80d648 <__adddf3+0x13c>
  80d7bc:	4b44b03a 	or	r2,r9,r13
  80d7c0:	10006626 	beq	r2,zero,80d95c <__adddf3+0x450>
  80d7c4:	18bfffc4 	addi	r2,r3,-1
  80d7c8:	1000ec26 	beq	r2,zero,80db7c <__adddf3+0x670>
  80d7cc:	18c1ffd8 	cmpnei	r3,r3,2047
  80d7d0:	18012d26 	beq	r3,zero,80dc88 <__adddf3+0x77c>
  80d7d4:	1007883a 	mov	r3,r2
  80d7d8:	003fcd06 	br	80d710 <__adddf3+0x204>
  80d7dc:	18fff844 	addi	r3,r3,-31
  80d7e0:	20800820 	cmpeqi	r2,r4,32
  80d7e4:	40c6d83a 	srl	r3,r8,r3
  80d7e8:	1000041e 	bne	r2,zero,80d7fc <__adddf3+0x2f0>
  80d7ec:	00801004 	movi	r2,64
  80d7f0:	1109c83a 	sub	r4,r2,r4
  80d7f4:	4110983a 	sll	r8,r8,r4
  80d7f8:	8a22b03a 	or	r17,r17,r8
  80d7fc:	8822c03a 	cmpne	r17,r17,zero
  80d800:	88e2b03a 	or	r17,r17,r3
  80d804:	0011883a 	mov	r8,zero
  80d808:	0025883a 	mov	r18,zero
  80d80c:	888001cc 	andi	r2,r17,7
  80d810:	103f8f1e 	bne	r2,zero,80d650 <__adddf3+0x144>
  80d814:	8822d0fa 	srli	r17,r17,3
  80d818:	4004977a 	slli	r2,r8,29
  80d81c:	4014d0fa 	srli	r10,r8,3
  80d820:	9007883a 	mov	r3,r18
  80d824:	8884b03a 	or	r2,r17,r2
  80d828:	1901ffe0 	cmpeqi	r4,r3,2047
  80d82c:	2000191e 	bne	r4,zero,80d894 <__adddf3+0x388>
  80d830:	02000434 	movhi	r8,16
  80d834:	423fffc4 	addi	r8,r8,-1
  80d838:	5210703a 	and	r8,r10,r8
  80d83c:	18c1ffcc 	andi	r3,r3,2047
  80d840:	003f9806 	br	80d6a4 <__adddf3+0x198>
  80d844:	4b62b03a 	or	r17,r9,r13
  80d848:	8822c03a 	cmpne	r17,r17,zero
  80d84c:	8ba3883a 	add	r17,r17,r14
  80d850:	8b91803a 	cmpltu	r8,r17,r14
  80d854:	4291883a 	add	r8,r8,r10
  80d858:	4080202c 	andhi	r2,r8,128
  80d85c:	103feb26 	beq	r2,zero,80d80c <__adddf3+0x300>
  80d860:	94800044 	addi	r18,r18,1
  80d864:	9081ffe0 	cmpeqi	r2,r18,2047
  80d868:	10007426 	beq	r2,zero,80da3c <__adddf3+0x530>
  80d86c:	00c1ffc4 	movi	r3,2047
  80d870:	0011883a 	mov	r8,zero
  80d874:	0005883a 	mov	r2,zero
  80d878:	003f8a06 	br	80d6a4 <__adddf3+0x198>
  80d87c:	500a977a 	slli	r5,r10,29
  80d880:	00c80034 	movhi	r3,8192
  80d884:	18ffffc4 	addi	r3,r3,-1
  80d888:	5014d0fa 	srli	r10,r10,3
  80d88c:	20c4703a 	and	r2,r4,r3
  80d890:	1144b03a 	or	r2,r2,r5
  80d894:	1286b03a 	or	r3,r2,r10
  80d898:	18015426 	beq	r3,zero,80ddec <__adddf3+0x8e0>
  80d89c:	00c00434 	movhi	r3,16
  80d8a0:	18ffffc4 	addi	r3,r3,-1
  80d8a4:	52000234 	orhi	r8,r10,8
  80d8a8:	40d0703a 	and	r8,r8,r3
  80d8ac:	00c1ffc4 	movi	r3,2047
  80d8b0:	003f7c06 	br	80d6a4 <__adddf3+0x198>
  80d8b4:	8809883a 	mov	r4,r17
  80d8b8:	0802aa40 	call	802aa4 <__clzsi2>
  80d8bc:	10c00604 	addi	r3,r2,24
  80d8c0:	19000808 	cmpgei	r4,r3,32
  80d8c4:	203f4b26 	beq	r4,zero,80d5f4 <__adddf3+0xe8>
  80d8c8:	123ffe04 	addi	r8,r2,-8
  80d8cc:	8a10983a 	sll	r8,r17,r8
  80d8d0:	0023883a 	mov	r17,zero
  80d8d4:	1cbf4e0e 	bge	r3,r18,80d610 <__adddf3+0x104>
  80d8d8:	00bfe034 	movhi	r2,65408
  80d8dc:	10bfffc4 	addi	r2,r2,-1
  80d8e0:	90e5c83a 	sub	r18,r18,r3
  80d8e4:	4090703a 	and	r8,r8,r2
  80d8e8:	003f5706 	br	80d648 <__adddf3+0x13c>
  80d8ec:	18002226 	beq	r3,zero,80d978 <__adddf3+0x46c>
  80d8f0:	1487c83a 	sub	r3,r2,r18
  80d8f4:	90006e26 	beq	r18,zero,80dab0 <__adddf3+0x5a4>
  80d8f8:	1101ffd8 	cmpnei	r4,r2,2047
  80d8fc:	2000e926 	beq	r4,zero,80dca4 <__adddf3+0x798>
  80d900:	52802034 	orhi	r10,r10,128
  80d904:	19000e48 	cmpgei	r4,r3,57
  80d908:	2000b91e 	bne	r4,zero,80dbf0 <__adddf3+0x6e4>
  80d90c:	19000808 	cmpgei	r4,r3,32
  80d910:	2001101e 	bne	r4,zero,80dd54 <__adddf3+0x848>
  80d914:	01000804 	movi	r4,32
  80d918:	20c9c83a 	sub	r4,r4,r3
  80d91c:	5122983a 	sll	r17,r10,r4
  80d920:	70cad83a 	srl	r5,r14,r3
  80d924:	7108983a 	sll	r4,r14,r4
  80d928:	50d4d83a 	srl	r10,r10,r3
  80d92c:	8962b03a 	or	r17,r17,r5
  80d930:	2008c03a 	cmpne	r4,r4,zero
  80d934:	8922b03a 	or	r17,r17,r4
  80d938:	4a93883a 	add	r9,r9,r10
  80d93c:	8b63883a 	add	r17,r17,r13
  80d940:	8b51803a 	cmpltu	r8,r17,r13
  80d944:	4251883a 	add	r8,r8,r9
  80d948:	1025883a 	mov	r18,r2
  80d94c:	003fc206 	br	80d858 <__adddf3+0x34c>
  80d950:	4b62b03a 	or	r17,r9,r13
  80d954:	8822c03a 	cmpne	r17,r17,zero
  80d958:	003f1a06 	br	80d5c4 <__adddf3+0xb8>
  80d95c:	500c977a 	slli	r6,r10,29
  80d960:	01480034 	movhi	r5,8192
  80d964:	297fffc4 	addi	r5,r5,-1
  80d968:	2144703a 	and	r2,r4,r5
  80d96c:	5014d0fa 	srli	r10,r10,3
  80d970:	1184b03a 	or	r2,r2,r6
  80d974:	003fac06 	br	80d828 <__adddf3+0x31c>
  80d978:	90800044 	addi	r2,r18,1
  80d97c:	1141ff8c 	andi	r5,r2,2046
  80d980:	28005e1e 	bne	r5,zero,80dafc <__adddf3+0x5f0>
  80d984:	5384b03a 	or	r2,r10,r14
  80d988:	9000a71e 	bne	r18,zero,80dc28 <__adddf3+0x71c>
  80d98c:	1000e526 	beq	r2,zero,80dd24 <__adddf3+0x818>
  80d990:	4b44b03a 	or	r2,r9,r13
  80d994:	10008f26 	beq	r2,zero,80dbd4 <__adddf3+0x6c8>
  80d998:	7363883a 	add	r17,r14,r13
  80d99c:	5255883a 	add	r10,r10,r9
  80d9a0:	8b91803a 	cmpltu	r8,r17,r14
  80d9a4:	5211883a 	add	r8,r10,r8
  80d9a8:	4080202c 	andhi	r2,r8,128
  80d9ac:	103f9726 	beq	r2,zero,80d80c <__adddf3+0x300>
  80d9b0:	00bfe034 	movhi	r2,65408
  80d9b4:	10bfffc4 	addi	r2,r2,-1
  80d9b8:	4090703a 	and	r8,r8,r2
  80d9bc:	04800044 	movi	r18,1
  80d9c0:	003f9206 	br	80d80c <__adddf3+0x300>
  80d9c4:	1101ffd8 	cmpnei	r4,r2,2047
  80d9c8:	20007a26 	beq	r4,zero,80dbb4 <__adddf3+0x6a8>
  80d9cc:	52802034 	orhi	r10,r10,128
  80d9d0:	19000e48 	cmpgei	r4,r3,57
  80d9d4:	20002e1e 	bne	r4,zero,80da90 <__adddf3+0x584>
  80d9d8:	19000808 	cmpgei	r4,r3,32
  80d9dc:	2000871e 	bne	r4,zero,80dbfc <__adddf3+0x6f0>
  80d9e0:	01000804 	movi	r4,32
  80d9e4:	20c9c83a 	sub	r4,r4,r3
  80d9e8:	5122983a 	sll	r17,r10,r4
  80d9ec:	70cad83a 	srl	r5,r14,r3
  80d9f0:	711c983a 	sll	r14,r14,r4
  80d9f4:	50d4d83a 	srl	r10,r10,r3
  80d9f8:	8962b03a 	or	r17,r17,r5
  80d9fc:	701cc03a 	cmpne	r14,r14,zero
  80da00:	8ba2b03a 	or	r17,r17,r14
  80da04:	4a93c83a 	sub	r9,r9,r10
  80da08:	00002306 	br	80da98 <__adddf3+0x58c>
  80da0c:	7363c83a 	sub	r17,r14,r13
  80da10:	5267c83a 	sub	r19,r10,r9
  80da14:	7451803a 	cmpltu	r8,r14,r17
  80da18:	9a27c83a 	sub	r19,r19,r8
  80da1c:	9880202c 	andhi	r2,r19,128
  80da20:	1000421e 	bne	r2,zero,80db2c <__adddf3+0x620>
  80da24:	8cc4b03a 	or	r2,r17,r19
  80da28:	103eee1e 	bne	r2,zero,80d5e4 <__adddf3+0xd8>
  80da2c:	0015883a 	mov	r10,zero
  80da30:	0021883a 	mov	r16,zero
  80da34:	003f7e06 	br	80d830 <__adddf3+0x324>
  80da38:	04800084 	movi	r18,2
  80da3c:	00bfe034 	movhi	r2,65408
  80da40:	10bfffc4 	addi	r2,r2,-1
  80da44:	8806d07a 	srli	r3,r17,1
  80da48:	4090703a 	and	r8,r8,r2
  80da4c:	400497fa 	slli	r2,r8,31
  80da50:	8c40004c 	andi	r17,r17,1
  80da54:	1c62b03a 	or	r17,r3,r17
  80da58:	4010d07a 	srli	r8,r8,1
  80da5c:	1462b03a 	or	r17,r2,r17
  80da60:	003ef906 	br	80d648 <__adddf3+0x13c>
  80da64:	1c7ff804 	addi	r17,r3,-32
  80da68:	19000820 	cmpeqi	r4,r3,32
  80da6c:	4c44d83a 	srl	r2,r9,r17
  80da70:	2000041e 	bne	r4,zero,80da84 <__adddf3+0x578>
  80da74:	01001004 	movi	r4,64
  80da78:	20c7c83a 	sub	r3,r4,r3
  80da7c:	48d2983a 	sll	r9,r9,r3
  80da80:	6a5ab03a 	or	r13,r13,r9
  80da84:	6822c03a 	cmpne	r17,r13,zero
  80da88:	88a2b03a 	or	r17,r17,r2
  80da8c:	003ecd06 	br	80d5c4 <__adddf3+0xb8>
  80da90:	5394b03a 	or	r10,r10,r14
  80da94:	5022c03a 	cmpne	r17,r10,zero
  80da98:	6c63c83a 	sub	r17,r13,r17
  80da9c:	6c51803a 	cmpltu	r8,r13,r17
  80daa0:	4a11c83a 	sub	r8,r9,r8
  80daa4:	3821883a 	mov	r16,r7
  80daa8:	1025883a 	mov	r18,r2
  80daac:	003ec806 	br	80d5d0 <__adddf3+0xc4>
  80dab0:	5388b03a 	or	r4,r10,r14
  80dab4:	20008226 	beq	r4,zero,80dcc0 <__adddf3+0x7b4>
  80dab8:	193fffc4 	addi	r4,r3,-1
  80dabc:	2000b026 	beq	r4,zero,80dd80 <__adddf3+0x874>
  80dac0:	18c1ffd8 	cmpnei	r3,r3,2047
  80dac4:	18007726 	beq	r3,zero,80dca4 <__adddf3+0x798>
  80dac8:	2007883a 	mov	r3,r4
  80dacc:	003f8d06 	br	80d904 <__adddf3+0x3f8>
  80dad0:	00800804 	movi	r2,32
  80dad4:	10c5c83a 	sub	r2,r2,r3
  80dad8:	68c8d83a 	srl	r4,r13,r3
  80dadc:	48a2983a 	sll	r17,r9,r2
  80dae0:	689a983a 	sll	r13,r13,r2
  80dae4:	48c6d83a 	srl	r3,r9,r3
  80dae8:	8922b03a 	or	r17,r17,r4
  80daec:	681ac03a 	cmpne	r13,r13,zero
  80daf0:	8b62b03a 	or	r17,r17,r13
  80daf4:	50d5883a 	add	r10,r10,r3
  80daf8:	003f5406 	br	80d84c <__adddf3+0x340>
  80dafc:	10c1ffe0 	cmpeqi	r3,r2,2047
  80db00:	183f5a1e 	bne	r3,zero,80d86c <__adddf3+0x360>
  80db04:	7351883a 	add	r8,r14,r13
  80db08:	4387803a 	cmpltu	r3,r8,r14
  80db0c:	5255883a 	add	r10,r10,r9
  80db10:	50c7883a 	add	r3,r10,r3
  80db14:	401ad07a 	srli	r13,r8,1
  80db18:	182297fa 	slli	r17,r3,31
  80db1c:	1810d07a 	srli	r8,r3,1
  80db20:	1025883a 	mov	r18,r2
  80db24:	8b62b03a 	or	r17,r17,r13
  80db28:	003f3806 	br	80d80c <__adddf3+0x300>
  80db2c:	6ba3c83a 	sub	r17,r13,r14
  80db30:	4a93c83a 	sub	r9,r9,r10
  80db34:	6c51803a 	cmpltu	r8,r13,r17
  80db38:	4a27c83a 	sub	r19,r9,r8
  80db3c:	3821883a 	mov	r16,r7
  80db40:	003ea806 	br	80d5e4 <__adddf3+0xd8>
  80db44:	480a977a 	slli	r5,r9,29
  80db48:	01080034 	movhi	r4,8192
  80db4c:	213fffc4 	addi	r4,r4,-1
  80db50:	3104703a 	and	r2,r6,r4
  80db54:	4814d0fa 	srli	r10,r9,3
  80db58:	1144b03a 	or	r2,r2,r5
  80db5c:	3821883a 	mov	r16,r7
  80db60:	003f3106 	br	80d828 <__adddf3+0x31c>
  80db64:	28005d1e 	bne	r5,zero,80dcdc <__adddf3+0x7d0>
  80db68:	1000121e 	bne	r2,zero,80dbb4 <__adddf3+0x6a8>
  80db6c:	0021883a 	mov	r16,zero
  80db70:	4015883a 	mov	r10,r8
  80db74:	00bfffc4 	movi	r2,-1
  80db78:	003f4806 	br	80d89c <__adddf3+0x390>
  80db7c:	7363883a 	add	r17,r14,r13
  80db80:	5255883a 	add	r10,r10,r9
  80db84:	8b91803a 	cmpltu	r8,r17,r14
  80db88:	5211883a 	add	r8,r10,r8
  80db8c:	4080202c 	andhi	r2,r8,128
  80db90:	103fa91e 	bne	r2,zero,80da38 <__adddf3+0x52c>
  80db94:	04800044 	movi	r18,1
  80db98:	003f1c06 	br	80d80c <__adddf3+0x300>
  80db9c:	7363c83a 	sub	r17,r14,r13
  80dba0:	5255c83a 	sub	r10,r10,r9
  80dba4:	7451803a 	cmpltu	r8,r14,r17
  80dba8:	5211c83a 	sub	r8,r10,r8
  80dbac:	04800044 	movi	r18,1
  80dbb0:	003e8706 	br	80d5d0 <__adddf3+0xc4>
  80dbb4:	4806977a 	slli	r3,r9,29
  80dbb8:	00880034 	movhi	r2,8192
  80dbbc:	10bfffc4 	addi	r2,r2,-1
  80dbc0:	3084703a 	and	r2,r6,r2
  80dbc4:	4814d0fa 	srli	r10,r9,3
  80dbc8:	10c4b03a 	or	r2,r2,r3
  80dbcc:	3821883a 	mov	r16,r7
  80dbd0:	003f3006 	br	80d894 <__adddf3+0x388>
  80dbd4:	500a977a 	slli	r5,r10,29
  80dbd8:	00880034 	movhi	r2,8192
  80dbdc:	10bfffc4 	addi	r2,r2,-1
  80dbe0:	2084703a 	and	r2,r4,r2
  80dbe4:	5014d0fa 	srli	r10,r10,3
  80dbe8:	1144b03a 	or	r2,r2,r5
  80dbec:	003f1006 	br	80d830 <__adddf3+0x324>
  80dbf0:	5394b03a 	or	r10,r10,r14
  80dbf4:	5022c03a 	cmpne	r17,r10,zero
  80dbf8:	003f5006 	br	80d93c <__adddf3+0x430>
  80dbfc:	1c7ff804 	addi	r17,r3,-32
  80dc00:	19400820 	cmpeqi	r5,r3,32
  80dc04:	5448d83a 	srl	r4,r10,r17
  80dc08:	2800041e 	bne	r5,zero,80dc1c <__adddf3+0x710>
  80dc0c:	01401004 	movi	r5,64
  80dc10:	28c7c83a 	sub	r3,r5,r3
  80dc14:	50d4983a 	sll	r10,r10,r3
  80dc18:	729cb03a 	or	r14,r14,r10
  80dc1c:	7022c03a 	cmpne	r17,r14,zero
  80dc20:	8922b03a 	or	r17,r17,r4
  80dc24:	003f9c06 	br	80da98 <__adddf3+0x58c>
  80dc28:	10005a1e 	bne	r2,zero,80dd94 <__adddf3+0x888>
  80dc2c:	4804977a 	slli	r2,r9,29
  80dc30:	00c80034 	movhi	r3,8192
  80dc34:	18ffffc4 	addi	r3,r3,-1
  80dc38:	30cc703a 	and	r6,r6,r3
  80dc3c:	4814d0fa 	srli	r10,r9,3
  80dc40:	1184b03a 	or	r2,r2,r6
  80dc44:	003f1306 	br	80d894 <__adddf3+0x388>
  80dc48:	6ba3c83a 	sub	r17,r13,r14
  80dc4c:	4a95c83a 	sub	r10,r9,r10
  80dc50:	6c51803a 	cmpltu	r8,r13,r17
  80dc54:	5211c83a 	sub	r8,r10,r8
  80dc58:	3821883a 	mov	r16,r7
  80dc5c:	04800044 	movi	r18,1
  80dc60:	003e5b06 	br	80d5d0 <__adddf3+0xc4>
  80dc64:	103f7126 	beq	r2,zero,80da2c <__adddf3+0x520>
  80dc68:	4808977a 	slli	r4,r9,29
  80dc6c:	00880034 	movhi	r2,8192
  80dc70:	10bfffc4 	addi	r2,r2,-1
  80dc74:	3084703a 	and	r2,r6,r2
  80dc78:	4814d0fa 	srli	r10,r9,3
  80dc7c:	1104b03a 	or	r2,r2,r4
  80dc80:	3821883a 	mov	r16,r7
  80dc84:	003eea06 	br	80d830 <__adddf3+0x324>
  80dc88:	5006977a 	slli	r3,r10,29
  80dc8c:	00880034 	movhi	r2,8192
  80dc90:	10bfffc4 	addi	r2,r2,-1
  80dc94:	2084703a 	and	r2,r4,r2
  80dc98:	5014d0fa 	srli	r10,r10,3
  80dc9c:	10c4b03a 	or	r2,r2,r3
  80dca0:	003efc06 	br	80d894 <__adddf3+0x388>
  80dca4:	4806977a 	slli	r3,r9,29
  80dca8:	00880034 	movhi	r2,8192
  80dcac:	10bfffc4 	addi	r2,r2,-1
  80dcb0:	3084703a 	and	r2,r6,r2
  80dcb4:	4814d0fa 	srli	r10,r9,3
  80dcb8:	10c4b03a 	or	r2,r2,r3
  80dcbc:	003ef506 	br	80d894 <__adddf3+0x388>
  80dcc0:	4808977a 	slli	r4,r9,29
  80dcc4:	00880034 	movhi	r2,8192
  80dcc8:	10bfffc4 	addi	r2,r2,-1
  80dccc:	3084703a 	and	r2,r6,r2
  80dcd0:	4814d0fa 	srli	r10,r9,3
  80dcd4:	1104b03a 	or	r2,r2,r4
  80dcd8:	003ed306 	br	80d828 <__adddf3+0x31c>
  80dcdc:	500a977a 	slli	r5,r10,29
  80dce0:	5014d0fa 	srli	r10,r10,3
  80dce4:	10001626 	beq	r2,zero,80dd40 <__adddf3+0x834>
  80dce8:	00c80034 	movhi	r3,8192
  80dcec:	18ffffc4 	addi	r3,r3,-1
  80dcf0:	20c4703a 	and	r2,r4,r3
  80dcf4:	5100022c 	andhi	r4,r10,8
  80dcf8:	1144b03a 	or	r2,r2,r5
  80dcfc:	203ee526 	beq	r4,zero,80d894 <__adddf3+0x388>
  80dd00:	4808d0fa 	srli	r4,r9,3
  80dd04:	2140022c 	andhi	r5,r4,8
  80dd08:	283ee21e 	bne	r5,zero,80d894 <__adddf3+0x388>
  80dd0c:	4812977a 	slli	r9,r9,29
  80dd10:	30c4703a 	and	r2,r6,r3
  80dd14:	3821883a 	mov	r16,r7
  80dd18:	1244b03a 	or	r2,r2,r9
  80dd1c:	2015883a 	mov	r10,r4
  80dd20:	003edc06 	br	80d894 <__adddf3+0x388>
  80dd24:	4804977a 	slli	r2,r9,29
  80dd28:	01080034 	movhi	r4,8192
  80dd2c:	213fffc4 	addi	r4,r4,-1
  80dd30:	310c703a 	and	r6,r6,r4
  80dd34:	4814d0fa 	srli	r10,r9,3
  80dd38:	1184b03a 	or	r2,r2,r6
  80dd3c:	003ebc06 	br	80d830 <__adddf3+0x324>
  80dd40:	00880034 	movhi	r2,8192
  80dd44:	10bfffc4 	addi	r2,r2,-1
  80dd48:	2084703a 	and	r2,r4,r2
  80dd4c:	1144b03a 	or	r2,r2,r5
  80dd50:	003ed006 	br	80d894 <__adddf3+0x388>
  80dd54:	193ff804 	addi	r4,r3,-32
  80dd58:	19400820 	cmpeqi	r5,r3,32
  80dd5c:	5108d83a 	srl	r4,r10,r4
  80dd60:	2800041e 	bne	r5,zero,80dd74 <__adddf3+0x868>
  80dd64:	01401004 	movi	r5,64
  80dd68:	28c7c83a 	sub	r3,r5,r3
  80dd6c:	50d4983a 	sll	r10,r10,r3
  80dd70:	729cb03a 	or	r14,r14,r10
  80dd74:	7022c03a 	cmpne	r17,r14,zero
  80dd78:	8922b03a 	or	r17,r17,r4
  80dd7c:	003eef06 	br	80d93c <__adddf3+0x430>
  80dd80:	7363883a 	add	r17,r14,r13
  80dd84:	5255883a 	add	r10,r10,r9
  80dd88:	8b51803a 	cmpltu	r8,r17,r13
  80dd8c:	5211883a 	add	r8,r10,r8
  80dd90:	003f7e06 	br	80db8c <__adddf3+0x680>
  80dd94:	4b50b03a 	or	r8,r9,r13
  80dd98:	500a977a 	slli	r5,r10,29
  80dd9c:	5014d0fa 	srli	r10,r10,3
  80dda0:	403fe726 	beq	r8,zero,80dd40 <__adddf3+0x834>
  80dda4:	00c80034 	movhi	r3,8192
  80dda8:	18ffffc4 	addi	r3,r3,-1
  80ddac:	20c4703a 	and	r2,r4,r3
  80ddb0:	5100022c 	andhi	r4,r10,8
  80ddb4:	1144b03a 	or	r2,r2,r5
  80ddb8:	203eb626 	beq	r4,zero,80d894 <__adddf3+0x388>
  80ddbc:	4808d0fa 	srli	r4,r9,3
  80ddc0:	2140022c 	andhi	r5,r4,8
  80ddc4:	283eb31e 	bne	r5,zero,80d894 <__adddf3+0x388>
  80ddc8:	4804977a 	slli	r2,r9,29
  80ddcc:	30cc703a 	and	r6,r6,r3
  80ddd0:	3821883a 	mov	r16,r7
  80ddd4:	3084b03a 	or	r2,r6,r2
  80ddd8:	2015883a 	mov	r10,r4
  80dddc:	003ead06 	br	80d894 <__adddf3+0x388>
  80dde0:	8a04b03a 	or	r2,r17,r8
  80dde4:	103f1126 	beq	r2,zero,80da2c <__adddf3+0x520>
  80dde8:	003e8806 	br	80d80c <__adddf3+0x300>
  80ddec:	0005883a 	mov	r2,zero
  80ddf0:	00c1ffc4 	movi	r3,2047
  80ddf4:	0011883a 	mov	r8,zero
  80ddf8:	003e2a06 	br	80d6a4 <__adddf3+0x198>

0080ddfc <__divdf3>:
  80ddfc:	2810d53a 	srli	r8,r5,20
  80de00:	defff004 	addi	sp,sp,-64
  80de04:	dc000615 	stw	r16,24(sp)
  80de08:	04000434 	movhi	r16,16
  80de0c:	df000e15 	stw	fp,56(sp)
  80de10:	ddc00d15 	stw	r23,52(sp)
  80de14:	dd800c15 	stw	r22,48(sp)
  80de18:	dd000a15 	stw	r20,40(sp)
  80de1c:	843fffc4 	addi	r16,r16,-1
  80de20:	dfc00f15 	stw	ra,60(sp)
  80de24:	dd400b15 	stw	r21,44(sp)
  80de28:	dcc00915 	stw	r19,36(sp)
  80de2c:	dc800815 	stw	r18,32(sp)
  80de30:	dc400715 	stw	r17,28(sp)
  80de34:	4201ffcc 	andi	r8,r8,2047
  80de38:	282ed7fa 	srli	r23,r5,31
  80de3c:	3039883a 	mov	fp,r6
  80de40:	382d883a 	mov	r22,r7
  80de44:	2029883a 	mov	r20,r4
  80de48:	2c20703a 	and	r16,r5,r16
  80de4c:	40006826 	beq	r8,zero,80dff0 <__divdf3+0x1f4>
  80de50:	4081ffe0 	cmpeqi	r2,r8,2047
  80de54:	1000791e 	bne	r2,zero,80e03c <__divdf3+0x240>
  80de58:	2026d77a 	srli	r19,r4,29
  80de5c:	800a90fa 	slli	r5,r16,3
  80de60:	202890fa 	slli	r20,r4,3
  80de64:	44bf0044 	addi	r18,r8,-1023
  80de68:	994ab03a 	or	r5,r19,r5
  80de6c:	2cc02034 	orhi	r19,r5,128
  80de70:	0021883a 	mov	r16,zero
  80de74:	0023883a 	mov	r17,zero
  80de78:	b010d53a 	srli	r8,r22,20
  80de7c:	00c00434 	movhi	r3,16
  80de80:	18ffffc4 	addi	r3,r3,-1
  80de84:	4201ffcc 	andi	r8,r8,2047
  80de88:	b02ad7fa 	srli	r21,r22,31
  80de8c:	b0ec703a 	and	r22,r22,r3
  80de90:	40004626 	beq	r8,zero,80dfac <__divdf3+0x1b0>
  80de94:	4081ffe0 	cmpeqi	r2,r8,2047
  80de98:	10006f1e 	bne	r2,zero,80e058 <__divdf3+0x25c>
  80de9c:	b00690fa 	slli	r3,r22,3
  80dea0:	e004d77a 	srli	r2,fp,29
  80dea4:	e01290fa 	slli	r9,fp,3
  80dea8:	423f0044 	addi	r8,r8,-1023
  80deac:	10c6b03a 	or	r3,r2,r3
  80deb0:	1d802034 	orhi	r22,r3,128
  80deb4:	9225c83a 	sub	r18,r18,r8
  80deb8:	0007883a 	mov	r3,zero
  80debc:	80800428 	cmpgeui	r2,r16,16
  80dec0:	bd4ef03a 	xor	r7,r23,r21
  80dec4:	1000a71e 	bne	r2,zero,80e164 <__divdf3+0x368>
  80dec8:	800c90ba 	slli	r6,r16,2
  80decc:	00802074 	movhi	r2,129
  80ded0:	3085883a 	add	r2,r6,r2
  80ded4:	10b7b717 	ldw	r2,-8484(r2)
  80ded8:	1000683a 	jmp	r2
  80dedc:	0080e164 	muli	r2,zero,901
  80dee0:	0080df88 	cmpgei	r2,zero,894
  80dee4:	0080df38 	rdprs	r2,zero,892
  80dee8:	0080df98 	cmpnei	r2,zero,894
  80deec:	0080df38 	rdprs	r2,zero,892
  80def0:	0080e108 	cmpgei	r2,zero,900
  80def4:	0080df38 	rdprs	r2,zero,892
  80def8:	0080df98 	cmpnei	r2,zero,894
  80defc:	0080df88 	cmpgei	r2,zero,894
  80df00:	0080df88 	cmpgei	r2,zero,894
  80df04:	0080e108 	cmpgei	r2,zero,900
  80df08:	0080df98 	cmpnei	r2,zero,894
  80df0c:	0080df1c 	xori	r2,zero,892
  80df10:	0080df1c 	xori	r2,zero,892
  80df14:	0080df1c 	xori	r2,zero,892
  80df18:	0080e120 	cmpeqi	r2,zero,900
  80df1c:	b80f883a 	mov	r7,r23
  80df20:	888000a0 	cmpeqi	r2,r17,2
  80df24:	1000181e 	bne	r2,zero,80df88 <__divdf3+0x18c>
  80df28:	888000e0 	cmpeqi	r2,r17,3
  80df2c:	1001f61e 	bne	r2,zero,80e708 <__divdf3+0x90c>
  80df30:	88800060 	cmpeqi	r2,r17,1
  80df34:	10006126 	beq	r2,zero,80e0bc <__divdf3+0x2c0>
  80df38:	0007883a 	mov	r3,zero
  80df3c:	000b883a 	mov	r5,zero
  80df40:	0029883a 	mov	r20,zero
  80df44:	1806953a 	slli	r3,r3,20
  80df48:	380e97fa 	slli	r7,r7,31
  80df4c:	a005883a 	mov	r2,r20
  80df50:	1946b03a 	or	r3,r3,r5
  80df54:	19c6b03a 	or	r3,r3,r7
  80df58:	dfc00f17 	ldw	ra,60(sp)
  80df5c:	df000e17 	ldw	fp,56(sp)
  80df60:	ddc00d17 	ldw	r23,52(sp)
  80df64:	dd800c17 	ldw	r22,48(sp)
  80df68:	dd400b17 	ldw	r21,44(sp)
  80df6c:	dd000a17 	ldw	r20,40(sp)
  80df70:	dcc00917 	ldw	r19,36(sp)
  80df74:	dc800817 	ldw	r18,32(sp)
  80df78:	dc400717 	ldw	r17,28(sp)
  80df7c:	dc000617 	ldw	r16,24(sp)
  80df80:	dec01004 	addi	sp,sp,64
  80df84:	f800283a 	ret
  80df88:	00c1ffc4 	movi	r3,2047
  80df8c:	000b883a 	mov	r5,zero
  80df90:	0029883a 	mov	r20,zero
  80df94:	003feb06 	br	80df44 <__divdf3+0x148>
  80df98:	a80f883a 	mov	r7,r21
  80df9c:	b027883a 	mov	r19,r22
  80dfa0:	4829883a 	mov	r20,r9
  80dfa4:	1823883a 	mov	r17,r3
  80dfa8:	003fdd06 	br	80df20 <__divdf3+0x124>
  80dfac:	b712b03a 	or	r9,r22,fp
  80dfb0:	48003e26 	beq	r9,zero,80e0ac <__divdf3+0x2b0>
  80dfb4:	b0017726 	beq	r22,zero,80e594 <__divdf3+0x798>
  80dfb8:	b009883a 	mov	r4,r22
  80dfbc:	0802aa40 	call	802aa4 <__clzsi2>
  80dfc0:	117ffd44 	addi	r5,r2,-11
  80dfc4:	01000744 	movi	r4,29
  80dfc8:	127ffe04 	addi	r9,r2,-8
  80dfcc:	2149c83a 	sub	r4,r4,r5
  80dfd0:	b246983a 	sll	r3,r22,r9
  80dfd4:	e108d83a 	srl	r4,fp,r4
  80dfd8:	e252983a 	sll	r9,fp,r9
  80dfdc:	20ecb03a 	or	r22,r4,r3
  80dfe0:	1491883a 	add	r8,r2,r18
  80dfe4:	4480fcc4 	addi	r18,r8,1011
  80dfe8:	0007883a 	mov	r3,zero
  80dfec:	003fb306 	br	80debc <__divdf3+0xc0>
  80dff0:	8126b03a 	or	r19,r16,r4
  80dff4:	2023883a 	mov	r17,r4
  80dff8:	98002726 	beq	r19,zero,80e098 <__divdf3+0x29c>
  80dffc:	80017026 	beq	r16,zero,80e5c0 <__divdf3+0x7c4>
  80e000:	8009883a 	mov	r4,r16
  80e004:	0802aa40 	call	802aa4 <__clzsi2>
  80e008:	113ffd44 	addi	r4,r2,-11
  80e00c:	00c00744 	movi	r3,29
  80e010:	14fffe04 	addi	r19,r2,-8
  80e014:	1907c83a 	sub	r3,r3,r4
  80e018:	84ca983a 	sll	r5,r16,r19
  80e01c:	88c6d83a 	srl	r3,r17,r3
  80e020:	8ce8983a 	sll	r20,r17,r19
  80e024:	1966b03a 	or	r19,r3,r5
  80e028:	023f0344 	movi	r8,-1011
  80e02c:	40a5c83a 	sub	r18,r8,r2
  80e030:	0021883a 	mov	r16,zero
  80e034:	0023883a 	mov	r17,zero
  80e038:	003f8f06 	br	80de78 <__divdf3+0x7c>
  80e03c:	8126b03a 	or	r19,r16,r4
  80e040:	9800101e 	bne	r19,zero,80e084 <__divdf3+0x288>
  80e044:	0029883a 	mov	r20,zero
  80e048:	04000204 	movi	r16,8
  80e04c:	0481ffc4 	movi	r18,2047
  80e050:	04400084 	movi	r17,2
  80e054:	003f8806 	br	80de78 <__divdf3+0x7c>
  80e058:	b712b03a 	or	r9,r22,fp
  80e05c:	94be0044 	addi	r18,r18,-2047
  80e060:	4800041e 	bne	r9,zero,80e074 <__divdf3+0x278>
  80e064:	84000094 	ori	r16,r16,2
  80e068:	002d883a 	mov	r22,zero
  80e06c:	00c00084 	movi	r3,2
  80e070:	003f9206 	br	80debc <__divdf3+0xc0>
  80e074:	840000d4 	ori	r16,r16,3
  80e078:	e013883a 	mov	r9,fp
  80e07c:	00c000c4 	movi	r3,3
  80e080:	003f8e06 	br	80debc <__divdf3+0xc0>
  80e084:	8027883a 	mov	r19,r16
  80e088:	0481ffc4 	movi	r18,2047
  80e08c:	04000304 	movi	r16,12
  80e090:	044000c4 	movi	r17,3
  80e094:	003f7806 	br	80de78 <__divdf3+0x7c>
  80e098:	0029883a 	mov	r20,zero
  80e09c:	04000104 	movi	r16,4
  80e0a0:	0025883a 	mov	r18,zero
  80e0a4:	04400044 	movi	r17,1
  80e0a8:	003f7306 	br	80de78 <__divdf3+0x7c>
  80e0ac:	84000054 	ori	r16,r16,1
  80e0b0:	002d883a 	mov	r22,zero
  80e0b4:	00c00044 	movi	r3,1
  80e0b8:	003f8006 	br	80debc <__divdf3+0xc0>
  80e0bc:	9440ffc4 	addi	r17,r18,1023
  80e0c0:	0441050e 	bge	zero,r17,80e4d8 <__divdf3+0x6dc>
  80e0c4:	a08001cc 	andi	r2,r20,7
  80e0c8:	10016c1e 	bne	r2,zero,80e67c <__divdf3+0x880>
  80e0cc:	a008d0fa 	srli	r4,r20,3
  80e0d0:	9880402c 	andhi	r2,r19,256
  80e0d4:	10000426 	beq	r2,zero,80e0e8 <__divdf3+0x2ec>
  80e0d8:	00bfc034 	movhi	r2,65280
  80e0dc:	10bfffc4 	addi	r2,r2,-1
  80e0e0:	98a6703a 	and	r19,r19,r2
  80e0e4:	94410004 	addi	r17,r18,1024
  80e0e8:	8881ffc8 	cmpgei	r2,r17,2047
  80e0ec:	103fa61e 	bne	r2,zero,80df88 <__divdf3+0x18c>
  80e0f0:	9828977a 	slli	r20,r19,29
  80e0f4:	980a927a 	slli	r5,r19,9
  80e0f8:	88c1ffcc 	andi	r3,r17,2047
  80e0fc:	a128b03a 	or	r20,r20,r4
  80e100:	280ad33a 	srli	r5,r5,12
  80e104:	003f8f06 	br	80df44 <__divdf3+0x148>
  80e108:	01400434 	movhi	r5,16
  80e10c:	000f883a 	mov	r7,zero
  80e110:	297fffc4 	addi	r5,r5,-1
  80e114:	053fffc4 	movi	r20,-1
  80e118:	00c1ffc4 	movi	r3,2047
  80e11c:	003f8906 	br	80df44 <__divdf3+0x148>
  80e120:	9880022c 	andhi	r2,r19,8
  80e124:	10000926 	beq	r2,zero,80e14c <__divdf3+0x350>
  80e128:	b080022c 	andhi	r2,r22,8
  80e12c:	1000071e 	bne	r2,zero,80e14c <__divdf3+0x350>
  80e130:	00800434 	movhi	r2,16
  80e134:	b1400234 	orhi	r5,r22,8
  80e138:	10bfffc4 	addi	r2,r2,-1
  80e13c:	288a703a 	and	r5,r5,r2
  80e140:	a80f883a 	mov	r7,r21
  80e144:	4829883a 	mov	r20,r9
  80e148:	003ff306 	br	80e118 <__divdf3+0x31c>
  80e14c:	00800434 	movhi	r2,16
  80e150:	99400234 	orhi	r5,r19,8
  80e154:	10bfffc4 	addi	r2,r2,-1
  80e158:	288a703a 	and	r5,r5,r2
  80e15c:	b80f883a 	mov	r7,r23
  80e160:	003fed06 	br	80e118 <__divdf3+0x31c>
  80e164:	b4c10536 	bltu	r22,r19,80e57c <__divdf3+0x780>
  80e168:	b4c10326 	beq	r22,r19,80e578 <__divdf3+0x77c>
  80e16c:	94bfffc4 	addi	r18,r18,-1
  80e170:	a039883a 	mov	fp,r20
  80e174:	9821883a 	mov	r16,r19
  80e178:	0023883a 	mov	r17,zero
  80e17c:	b006923a 	slli	r3,r22,8
  80e180:	482cd63a 	srli	r22,r9,24
  80e184:	8009883a 	mov	r4,r16
  80e188:	182ed43a 	srli	r23,r3,16
  80e18c:	b0ecb03a 	or	r22,r22,r3
  80e190:	d9c00015 	stw	r7,0(sp)
  80e194:	b80b883a 	mov	r5,r23
  80e198:	482a923a 	slli	r21,r9,8
  80e19c:	b53fffcc 	andi	r20,r22,65535
  80e1a0:	080d44c0 	call	80d44c <__udivsi3>
  80e1a4:	100b883a 	mov	r5,r2
  80e1a8:	a009883a 	mov	r4,r20
  80e1ac:	1027883a 	mov	r19,r2
  80e1b0:	0802af80 	call	802af8 <__mulsi3>
  80e1b4:	8009883a 	mov	r4,r16
  80e1b8:	b80b883a 	mov	r5,r23
  80e1bc:	1021883a 	mov	r16,r2
  80e1c0:	080d4b00 	call	80d4b0 <__umodsi3>
  80e1c4:	1004943a 	slli	r2,r2,16
  80e1c8:	e008d43a 	srli	r4,fp,16
  80e1cc:	d9c00017 	ldw	r7,0(sp)
  80e1d0:	2088b03a 	or	r4,r4,r2
  80e1d4:	2400042e 	bgeu	r4,r16,80e1e8 <__divdf3+0x3ec>
  80e1d8:	2589883a 	add	r4,r4,r22
  80e1dc:	98bfffc4 	addi	r2,r19,-1
  80e1e0:	2581082e 	bgeu	r4,r22,80e604 <__divdf3+0x808>
  80e1e4:	1027883a 	mov	r19,r2
  80e1e8:	2421c83a 	sub	r16,r4,r16
  80e1ec:	b80b883a 	mov	r5,r23
  80e1f0:	8009883a 	mov	r4,r16
  80e1f4:	d9c00215 	stw	r7,8(sp)
  80e1f8:	080d44c0 	call	80d44c <__udivsi3>
  80e1fc:	100b883a 	mov	r5,r2
  80e200:	a009883a 	mov	r4,r20
  80e204:	d8800115 	stw	r2,4(sp)
  80e208:	0802af80 	call	802af8 <__mulsi3>
  80e20c:	b80b883a 	mov	r5,r23
  80e210:	8009883a 	mov	r4,r16
  80e214:	d8800015 	stw	r2,0(sp)
  80e218:	080d4b00 	call	80d4b0 <__umodsi3>
  80e21c:	100c943a 	slli	r6,r2,16
  80e220:	d8c00017 	ldw	r3,0(sp)
  80e224:	e73fffcc 	andi	fp,fp,65535
  80e228:	e18cb03a 	or	r6,fp,r6
  80e22c:	da000117 	ldw	r8,4(sp)
  80e230:	d9c00217 	ldw	r7,8(sp)
  80e234:	30c0042e 	bgeu	r6,r3,80e248 <__divdf3+0x44c>
  80e238:	358d883a 	add	r6,r6,r22
  80e23c:	40bfffc4 	addi	r2,r8,-1
  80e240:	3580ec2e 	bgeu	r6,r22,80e5f4 <__divdf3+0x7f8>
  80e244:	1011883a 	mov	r8,r2
  80e248:	9826943a 	slli	r19,r19,16
  80e24c:	af3fffcc 	andi	fp,r21,65535
  80e250:	30c7c83a 	sub	r3,r6,r3
  80e254:	9a26b03a 	or	r19,r19,r8
  80e258:	9810d43a 	srli	r8,r19,16
  80e25c:	9abfffcc 	andi	r10,r19,65535
  80e260:	5009883a 	mov	r4,r10
  80e264:	e00b883a 	mov	r5,fp
  80e268:	d9c00515 	stw	r7,20(sp)
  80e26c:	d8c00315 	stw	r3,12(sp)
  80e270:	da800415 	stw	r10,16(sp)
  80e274:	da000015 	stw	r8,0(sp)
  80e278:	0802af80 	call	802af8 <__mulsi3>
  80e27c:	da000017 	ldw	r8,0(sp)
  80e280:	e00b883a 	mov	r5,fp
  80e284:	d8800215 	stw	r2,8(sp)
  80e288:	4009883a 	mov	r4,r8
  80e28c:	0802af80 	call	802af8 <__mulsi3>
  80e290:	da000017 	ldw	r8,0(sp)
  80e294:	a820d43a 	srli	r16,r21,16
  80e298:	d8800115 	stw	r2,4(sp)
  80e29c:	4009883a 	mov	r4,r8
  80e2a0:	800b883a 	mov	r5,r16
  80e2a4:	0802af80 	call	802af8 <__mulsi3>
  80e2a8:	da800417 	ldw	r10,16(sp)
  80e2ac:	8009883a 	mov	r4,r16
  80e2b0:	d8800015 	stw	r2,0(sp)
  80e2b4:	500b883a 	mov	r5,r10
  80e2b8:	0802af80 	call	802af8 <__mulsi3>
  80e2bc:	d9800217 	ldw	r6,8(sp)
  80e2c0:	da000117 	ldw	r8,4(sp)
  80e2c4:	da400017 	ldw	r9,0(sp)
  80e2c8:	3008d43a 	srli	r4,r6,16
  80e2cc:	1205883a 	add	r2,r2,r8
  80e2d0:	d8c00317 	ldw	r3,12(sp)
  80e2d4:	2089883a 	add	r4,r4,r2
  80e2d8:	d9c00517 	ldw	r7,20(sp)
  80e2dc:	2200022e 	bgeu	r4,r8,80e2e8 <__divdf3+0x4ec>
  80e2e0:	00800074 	movhi	r2,1
  80e2e4:	4893883a 	add	r9,r9,r2
  80e2e8:	200ad43a 	srli	r5,r4,16
  80e2ec:	2008943a 	slli	r4,r4,16
  80e2f0:	31bfffcc 	andi	r6,r6,65535
  80e2f4:	2a4b883a 	add	r5,r5,r9
  80e2f8:	218d883a 	add	r6,r4,r6
  80e2fc:	19409436 	bltu	r3,r5,80e550 <__divdf3+0x754>
  80e300:	19409226 	beq	r3,r5,80e54c <__divdf3+0x750>
  80e304:	898dc83a 	sub	r6,r17,r6
  80e308:	89a3803a 	cmpltu	r17,r17,r6
  80e30c:	1947c83a 	sub	r3,r3,r5
  80e310:	1c47c83a 	sub	r3,r3,r17
  80e314:	9440ffc4 	addi	r17,r18,1023
  80e318:	b0c0d326 	beq	r22,r3,80e668 <__divdf3+0x86c>
  80e31c:	1809883a 	mov	r4,r3
  80e320:	b80b883a 	mov	r5,r23
  80e324:	d9800315 	stw	r6,12(sp)
  80e328:	d9c00215 	stw	r7,8(sp)
  80e32c:	d8c00015 	stw	r3,0(sp)
  80e330:	080d44c0 	call	80d44c <__udivsi3>
  80e334:	100b883a 	mov	r5,r2
  80e338:	a009883a 	mov	r4,r20
  80e33c:	d8800115 	stw	r2,4(sp)
  80e340:	0802af80 	call	802af8 <__mulsi3>
  80e344:	d8c00017 	ldw	r3,0(sp)
  80e348:	b80b883a 	mov	r5,r23
  80e34c:	d8800015 	stw	r2,0(sp)
  80e350:	1809883a 	mov	r4,r3
  80e354:	080d4b00 	call	80d4b0 <__umodsi3>
  80e358:	d9800317 	ldw	r6,12(sp)
  80e35c:	1006943a 	slli	r3,r2,16
  80e360:	da400017 	ldw	r9,0(sp)
  80e364:	3008d43a 	srli	r4,r6,16
  80e368:	da000117 	ldw	r8,4(sp)
  80e36c:	d9c00217 	ldw	r7,8(sp)
  80e370:	20c6b03a 	or	r3,r4,r3
  80e374:	1a40062e 	bgeu	r3,r9,80e390 <__divdf3+0x594>
  80e378:	1d87883a 	add	r3,r3,r22
  80e37c:	40bfffc4 	addi	r2,r8,-1
  80e380:	1d80c836 	bltu	r3,r22,80e6a4 <__divdf3+0x8a8>
  80e384:	1a40c72e 	bgeu	r3,r9,80e6a4 <__divdf3+0x8a8>
  80e388:	423fff84 	addi	r8,r8,-2
  80e38c:	1d87883a 	add	r3,r3,r22
  80e390:	1a47c83a 	sub	r3,r3,r9
  80e394:	1809883a 	mov	r4,r3
  80e398:	b80b883a 	mov	r5,r23
  80e39c:	d9800415 	stw	r6,16(sp)
  80e3a0:	d9c00315 	stw	r7,12(sp)
  80e3a4:	da000215 	stw	r8,8(sp)
  80e3a8:	d8c00115 	stw	r3,4(sp)
  80e3ac:	080d44c0 	call	80d44c <__udivsi3>
  80e3b0:	100b883a 	mov	r5,r2
  80e3b4:	a009883a 	mov	r4,r20
  80e3b8:	d8800015 	stw	r2,0(sp)
  80e3bc:	0802af80 	call	802af8 <__mulsi3>
  80e3c0:	d8c00117 	ldw	r3,4(sp)
  80e3c4:	b80b883a 	mov	r5,r23
  80e3c8:	102f883a 	mov	r23,r2
  80e3cc:	1809883a 	mov	r4,r3
  80e3d0:	080d4b00 	call	80d4b0 <__umodsi3>
  80e3d4:	d9800417 	ldw	r6,16(sp)
  80e3d8:	1004943a 	slli	r2,r2,16
  80e3dc:	da400017 	ldw	r9,0(sp)
  80e3e0:	31bfffcc 	andi	r6,r6,65535
  80e3e4:	308cb03a 	or	r6,r6,r2
  80e3e8:	da000217 	ldw	r8,8(sp)
  80e3ec:	d9c00317 	ldw	r7,12(sp)
  80e3f0:	35c0062e 	bgeu	r6,r23,80e40c <__divdf3+0x610>
  80e3f4:	358d883a 	add	r6,r6,r22
  80e3f8:	48bfffc4 	addi	r2,r9,-1
  80e3fc:	3580a736 	bltu	r6,r22,80e69c <__divdf3+0x8a0>
  80e400:	35c0a62e 	bgeu	r6,r23,80e69c <__divdf3+0x8a0>
  80e404:	4a7fff84 	addi	r9,r9,-2
  80e408:	358d883a 	add	r6,r6,r22
  80e40c:	4028943a 	slli	r20,r8,16
  80e410:	35d5c83a 	sub	r10,r6,r23
  80e414:	e009883a 	mov	r4,fp
  80e418:	a268b03a 	or	r20,r20,r9
  80e41c:	a23fffcc 	andi	r8,r20,65535
  80e420:	a02ed43a 	srli	r23,r20,16
  80e424:	400b883a 	mov	r5,r8
  80e428:	d9c00315 	stw	r7,12(sp)
  80e42c:	da800215 	stw	r10,8(sp)
  80e430:	da000115 	stw	r8,4(sp)
  80e434:	0802af80 	call	802af8 <__mulsi3>
  80e438:	e00b883a 	mov	r5,fp
  80e43c:	b809883a 	mov	r4,r23
  80e440:	1039883a 	mov	fp,r2
  80e444:	0802af80 	call	802af8 <__mulsi3>
  80e448:	8009883a 	mov	r4,r16
  80e44c:	b80b883a 	mov	r5,r23
  80e450:	d8800015 	stw	r2,0(sp)
  80e454:	0802af80 	call	802af8 <__mulsi3>
  80e458:	da000117 	ldw	r8,4(sp)
  80e45c:	8009883a 	mov	r4,r16
  80e460:	1021883a 	mov	r16,r2
  80e464:	400b883a 	mov	r5,r8
  80e468:	0802af80 	call	802af8 <__mulsi3>
  80e46c:	d9800017 	ldw	r6,0(sp)
  80e470:	e006d43a 	srli	r3,fp,16
  80e474:	da800217 	ldw	r10,8(sp)
  80e478:	1185883a 	add	r2,r2,r6
  80e47c:	1887883a 	add	r3,r3,r2
  80e480:	d9c00317 	ldw	r7,12(sp)
  80e484:	1980022e 	bgeu	r3,r6,80e490 <__divdf3+0x694>
  80e488:	00800074 	movhi	r2,1
  80e48c:	80a1883a 	add	r16,r16,r2
  80e490:	1808d43a 	srli	r4,r3,16
  80e494:	1806943a 	slli	r3,r3,16
  80e498:	e73fffcc 	andi	fp,fp,65535
  80e49c:	2409883a 	add	r4,r4,r16
  80e4a0:	1f07883a 	add	r3,r3,fp
  80e4a4:	51000436 	bltu	r10,r4,80e4b8 <__divdf3+0x6bc>
  80e4a8:	51000226 	beq	r10,r4,80e4b4 <__divdf3+0x6b8>
  80e4ac:	a5000054 	ori	r20,r20,1
  80e4b0:	003f0306 	br	80e0c0 <__divdf3+0x2c4>
  80e4b4:	183f0226 	beq	r3,zero,80e0c0 <__divdf3+0x2c4>
  80e4b8:	b28d883a 	add	r6,r22,r10
  80e4bc:	a0bfffc4 	addi	r2,r20,-1
  80e4c0:	35806536 	bltu	r6,r22,80e658 <__divdf3+0x85c>
  80e4c4:	31008036 	bltu	r6,r4,80e6c8 <__divdf3+0x8cc>
  80e4c8:	31009426 	beq	r6,r4,80e71c <__divdf3+0x920>
  80e4cc:	1029883a 	mov	r20,r2
  80e4d0:	003ff606 	br	80e4ac <__divdf3+0x6b0>
  80e4d4:	053fffc4 	movi	r20,-1
  80e4d8:	01400044 	movi	r5,1
  80e4dc:	2c4bc83a 	sub	r5,r5,r17
  80e4e0:	28800e48 	cmpgei	r2,r5,57
  80e4e4:	103e941e 	bne	r2,zero,80df38 <__divdf3+0x13c>
  80e4e8:	28800808 	cmpgei	r2,r5,32
  80e4ec:	1000491e 	bne	r2,zero,80e614 <__divdf3+0x818>
  80e4f0:	92010784 	addi	r8,r18,1054
  80e4f4:	9a04983a 	sll	r2,r19,r8
  80e4f8:	a146d83a 	srl	r3,r20,r5
  80e4fc:	a210983a 	sll	r8,r20,r8
  80e500:	994ad83a 	srl	r5,r19,r5
  80e504:	10e8b03a 	or	r20,r2,r3
  80e508:	4010c03a 	cmpne	r8,r8,zero
  80e50c:	a228b03a 	or	r20,r20,r8
  80e510:	a08001cc 	andi	r2,r20,7
  80e514:	10000726 	beq	r2,zero,80e534 <__divdf3+0x738>
  80e518:	a08003cc 	andi	r2,r20,15
  80e51c:	10800120 	cmpeqi	r2,r2,4
  80e520:	1000041e 	bne	r2,zero,80e534 <__divdf3+0x738>
  80e524:	a0800104 	addi	r2,r20,4
  80e528:	1529803a 	cmpltu	r20,r2,r20
  80e52c:	2d0b883a 	add	r5,r5,r20
  80e530:	1029883a 	mov	r20,r2
  80e534:	2880202c 	andhi	r2,r5,128
  80e538:	10006f26 	beq	r2,zero,80e6f8 <__divdf3+0x8fc>
  80e53c:	00c00044 	movi	r3,1
  80e540:	000b883a 	mov	r5,zero
  80e544:	0029883a 	mov	r20,zero
  80e548:	003e7e06 	br	80df44 <__divdf3+0x148>
  80e54c:	89bf6d2e 	bgeu	r17,r6,80e304 <__divdf3+0x508>
  80e550:	8d63883a 	add	r17,r17,r21
  80e554:	8d45803a 	cmpltu	r2,r17,r21
  80e558:	1585883a 	add	r2,r2,r22
  80e55c:	1887883a 	add	r3,r3,r2
  80e560:	98bfffc4 	addi	r2,r19,-1
  80e564:	b0c0202e 	bgeu	r22,r3,80e5e8 <__divdf3+0x7ec>
  80e568:	19405136 	bltu	r3,r5,80e6b0 <__divdf3+0x8b4>
  80e56c:	28c04f26 	beq	r5,r3,80e6ac <__divdf3+0x8b0>
  80e570:	1027883a 	mov	r19,r2
  80e574:	003f6306 	br	80e304 <__divdf3+0x508>
  80e578:	a27efc36 	bltu	r20,r9,80e16c <__divdf3+0x370>
  80e57c:	983897fa 	slli	fp,r19,31
  80e580:	a004d07a 	srli	r2,r20,1
  80e584:	9820d07a 	srli	r16,r19,1
  80e588:	a02297fa 	slli	r17,r20,31
  80e58c:	e0b8b03a 	or	fp,fp,r2
  80e590:	003efa06 	br	80e17c <__divdf3+0x380>
  80e594:	e009883a 	mov	r4,fp
  80e598:	0802aa40 	call	802aa4 <__clzsi2>
  80e59c:	11400544 	addi	r5,r2,21
  80e5a0:	29000748 	cmpgei	r4,r5,29
  80e5a4:	1007883a 	mov	r3,r2
  80e5a8:	10800804 	addi	r2,r2,32
  80e5ac:	203e8526 	beq	r4,zero,80dfc4 <__divdf3+0x1c8>
  80e5b0:	18fffe04 	addi	r3,r3,-8
  80e5b4:	e0ec983a 	sll	r22,fp,r3
  80e5b8:	0013883a 	mov	r9,zero
  80e5bc:	003e8806 	br	80dfe0 <__divdf3+0x1e4>
  80e5c0:	0802aa40 	call	802aa4 <__clzsi2>
  80e5c4:	11000544 	addi	r4,r2,21
  80e5c8:	20c00748 	cmpgei	r3,r4,29
  80e5cc:	100b883a 	mov	r5,r2
  80e5d0:	10800804 	addi	r2,r2,32
  80e5d4:	183e8d26 	beq	r3,zero,80e00c <__divdf3+0x210>
  80e5d8:	297ffe04 	addi	r5,r5,-8
  80e5dc:	a166983a 	sll	r19,r20,r5
  80e5e0:	0029883a 	mov	r20,zero
  80e5e4:	003e9006 	br	80e028 <__divdf3+0x22c>
  80e5e8:	b0ffe11e 	bne	r22,r3,80e570 <__divdf3+0x774>
  80e5ec:	8d7fe036 	bltu	r17,r21,80e570 <__divdf3+0x774>
  80e5f0:	003fdd06 	br	80e568 <__divdf3+0x76c>
  80e5f4:	30ff132e 	bgeu	r6,r3,80e244 <__divdf3+0x448>
  80e5f8:	423fff84 	addi	r8,r8,-2
  80e5fc:	358d883a 	add	r6,r6,r22
  80e600:	003f1106 	br	80e248 <__divdf3+0x44c>
  80e604:	243ef72e 	bgeu	r4,r16,80e1e4 <__divdf3+0x3e8>
  80e608:	9cffff84 	addi	r19,r19,-2
  80e60c:	2589883a 	add	r4,r4,r22
  80e610:	003ef506 	br	80e1e8 <__divdf3+0x3ec>
  80e614:	00fff844 	movi	r3,-31
  80e618:	1c47c83a 	sub	r3,r3,r17
  80e61c:	29400820 	cmpeqi	r5,r5,32
  80e620:	98c6d83a 	srl	r3,r19,r3
  80e624:	2800031e 	bne	r5,zero,80e634 <__divdf3+0x838>
  80e628:	91410f84 	addi	r5,r18,1086
  80e62c:	994a983a 	sll	r5,r19,r5
  80e630:	a168b03a 	or	r20,r20,r5
  80e634:	a028c03a 	cmpne	r20,r20,zero
  80e638:	a0e8b03a 	or	r20,r20,r3
  80e63c:	a4c001cc 	andi	r19,r20,7
  80e640:	9800291e 	bne	r19,zero,80e6e8 <__divdf3+0x8ec>
  80e644:	000b883a 	mov	r5,zero
  80e648:	a028d0fa 	srli	r20,r20,3
  80e64c:	0007883a 	mov	r3,zero
  80e650:	a4e8b03a 	or	r20,r20,r19
  80e654:	003e3b06 	br	80df44 <__divdf3+0x148>
  80e658:	1029883a 	mov	r20,r2
  80e65c:	313f931e 	bne	r6,r4,80e4ac <__divdf3+0x6b0>
  80e660:	1d7f921e 	bne	r3,r21,80e4ac <__divdf3+0x6b0>
  80e664:	003e9606 	br	80e0c0 <__divdf3+0x2c4>
  80e668:	047f9a0e 	bge	zero,r17,80e4d4 <__divdf3+0x6d8>
  80e66c:	0009883a 	mov	r4,zero
  80e670:	05000044 	movi	r20,1
  80e674:	9d27883a 	add	r19,r19,r20
  80e678:	003e9506 	br	80e0d0 <__divdf3+0x2d4>
  80e67c:	a08003cc 	andi	r2,r20,15
  80e680:	10800118 	cmpnei	r2,r2,4
  80e684:	103e9126 	beq	r2,zero,80e0cc <__divdf3+0x2d0>
  80e688:	a1000104 	addi	r4,r20,4
  80e68c:	00bffec4 	movi	r2,-5
  80e690:	2008d0fa 	srli	r4,r4,3
  80e694:	1529803a 	cmpltu	r20,r2,r20
  80e698:	003ff606 	br	80e674 <__divdf3+0x878>
  80e69c:	1013883a 	mov	r9,r2
  80e6a0:	003f5a06 	br	80e40c <__divdf3+0x610>
  80e6a4:	1011883a 	mov	r8,r2
  80e6a8:	003f3906 	br	80e390 <__divdf3+0x594>
  80e6ac:	89bfb02e 	bgeu	r17,r6,80e570 <__divdf3+0x774>
  80e6b0:	8d63883a 	add	r17,r17,r21
  80e6b4:	8d45803a 	cmpltu	r2,r17,r21
  80e6b8:	1585883a 	add	r2,r2,r22
  80e6bc:	9cffff84 	addi	r19,r19,-2
  80e6c0:	1887883a 	add	r3,r3,r2
  80e6c4:	003f0f06 	br	80e304 <__divdf3+0x508>
  80e6c8:	ad45883a 	add	r2,r21,r21
  80e6cc:	156b803a 	cmpltu	r21,r2,r21
  80e6d0:	adad883a 	add	r22,r21,r22
  80e6d4:	358d883a 	add	r6,r6,r22
  80e6d8:	a53fff84 	addi	r20,r20,-2
  80e6dc:	102b883a 	mov	r21,r2
  80e6e0:	313fdf26 	beq	r6,r4,80e660 <__divdf3+0x864>
  80e6e4:	003f7106 	br	80e4ac <__divdf3+0x6b0>
  80e6e8:	a08003cc 	andi	r2,r20,15
  80e6ec:	10800118 	cmpnei	r2,r2,4
  80e6f0:	000b883a 	mov	r5,zero
  80e6f4:	103f8b1e 	bne	r2,zero,80e524 <__divdf3+0x728>
  80e6f8:	2804927a 	slli	r2,r5,9
  80e6fc:	2826977a 	slli	r19,r5,29
  80e700:	100ad33a 	srli	r5,r2,12
  80e704:	003fd006 	br	80e648 <__divdf3+0x84c>
  80e708:	00800434 	movhi	r2,16
  80e70c:	99400234 	orhi	r5,r19,8
  80e710:	10bfffc4 	addi	r2,r2,-1
  80e714:	288a703a 	and	r5,r5,r2
  80e718:	003e7f06 	br	80e118 <__divdf3+0x31c>
  80e71c:	a8ffea36 	bltu	r21,r3,80e6c8 <__divdf3+0x8cc>
  80e720:	1029883a 	mov	r20,r2
  80e724:	1d7f611e 	bne	r3,r21,80e4ac <__divdf3+0x6b0>
  80e728:	003e6506 	br	80e0c0 <__divdf3+0x2c4>

0080e72c <__eqdf2>:
  80e72c:	2810d53a 	srli	r8,r5,20
  80e730:	3806d53a 	srli	r3,r7,20
  80e734:	00800434 	movhi	r2,16
  80e738:	4201ffcc 	andi	r8,r8,2047
  80e73c:	10bfffc4 	addi	r2,r2,-1
  80e740:	4241ffd8 	cmpnei	r9,r8,2047
  80e744:	2814d7fa 	srli	r10,r5,31
  80e748:	3816d7fa 	srli	r11,r7,31
  80e74c:	288a703a 	and	r5,r5,r2
  80e750:	388e703a 	and	r7,r7,r2
  80e754:	1881ffcc 	andi	r2,r3,2047
  80e758:	48000626 	beq	r9,zero,80e774 <__eqdf2+0x48>
  80e75c:	10c1ffe0 	cmpeqi	r3,r2,2047
  80e760:	1800021e 	bne	r3,zero,80e76c <__eqdf2+0x40>
  80e764:	4080011e 	bne	r8,r2,80e76c <__eqdf2+0x40>
  80e768:	29c00826 	beq	r5,r7,80e78c <__eqdf2+0x60>
  80e76c:	00800044 	movi	r2,1
  80e770:	f800283a 	ret
  80e774:	2906b03a 	or	r3,r5,r4
  80e778:	183ffc1e 	bne	r3,zero,80e76c <__eqdf2+0x40>
  80e77c:	1081ffd8 	cmpnei	r2,r2,2047
  80e780:	103ffa1e 	bne	r2,zero,80e76c <__eqdf2+0x40>
  80e784:	398eb03a 	or	r7,r7,r6
  80e788:	383ff81e 	bne	r7,zero,80e76c <__eqdf2+0x40>
  80e78c:	21bff71e 	bne	r4,r6,80e76c <__eqdf2+0x40>
  80e790:	52c00426 	beq	r10,r11,80e7a4 <__eqdf2+0x78>
  80e794:	403ff51e 	bne	r8,zero,80e76c <__eqdf2+0x40>
  80e798:	290ab03a 	or	r5,r5,r4
  80e79c:	2804c03a 	cmpne	r2,r5,zero
  80e7a0:	f800283a 	ret
  80e7a4:	0005883a 	mov	r2,zero
  80e7a8:	f800283a 	ret

0080e7ac <__gedf2>:
  80e7ac:	2810d53a 	srli	r8,r5,20
  80e7b0:	3812d53a 	srli	r9,r7,20
  80e7b4:	00c00434 	movhi	r3,16
  80e7b8:	4201ffcc 	andi	r8,r8,2047
  80e7bc:	18ffffc4 	addi	r3,r3,-1
  80e7c0:	4281ffd8 	cmpnei	r10,r8,2047
  80e7c4:	2816d7fa 	srli	r11,r5,31
  80e7c8:	3804d7fa 	srli	r2,r7,31
  80e7cc:	28ca703a 	and	r5,r5,r3
  80e7d0:	38ce703a 	and	r7,r7,r3
  80e7d4:	48c1ffcc 	andi	r3,r9,2047
  80e7d8:	50000a26 	beq	r10,zero,80e804 <__gedf2+0x58>
  80e7dc:	1a41ffd8 	cmpnei	r9,r3,2047
  80e7e0:	48000c26 	beq	r9,zero,80e814 <__gedf2+0x68>
  80e7e4:	4000171e 	bne	r8,zero,80e844 <__gedf2+0x98>
  80e7e8:	2912b03a 	or	r9,r5,r4
  80e7ec:	1800121e 	bne	r3,zero,80e838 <__gedf2+0x8c>
  80e7f0:	3994b03a 	or	r10,r7,r6
  80e7f4:	5000101e 	bne	r10,zero,80e838 <__gedf2+0x8c>
  80e7f8:	48000a1e 	bne	r9,zero,80e824 <__gedf2+0x78>
  80e7fc:	0005883a 	mov	r2,zero
  80e800:	f800283a 	ret
  80e804:	2912b03a 	or	r9,r5,r4
  80e808:	48001d1e 	bne	r9,zero,80e880 <__gedf2+0xd4>
  80e80c:	1a41ffe0 	cmpeqi	r9,r3,2047
  80e810:	48000c26 	beq	r9,zero,80e844 <__gedf2+0x98>
  80e814:	3992b03a 	or	r9,r7,r6
  80e818:	4800191e 	bne	r9,zero,80e880 <__gedf2+0xd4>
  80e81c:	40000526 	beq	r8,zero,80e834 <__gedf2+0x88>
  80e820:	58800c26 	beq	r11,r2,80e854 <__gedf2+0xa8>
  80e824:	00800044 	movi	r2,1
  80e828:	58000526 	beq	r11,zero,80e840 <__gedf2+0x94>
  80e82c:	00bfffc4 	movi	r2,-1
  80e830:	f800283a 	ret
  80e834:	2912b03a 	or	r9,r5,r4
  80e838:	483ff91e 	bne	r9,zero,80e820 <__gedf2+0x74>
  80e83c:	103ffb26 	beq	r2,zero,80e82c <__gedf2+0x80>
  80e840:	f800283a 	ret
  80e844:	183ff61e 	bne	r3,zero,80e820 <__gedf2+0x74>
  80e848:	3992b03a 	or	r9,r7,r6
  80e84c:	483ff41e 	bne	r9,zero,80e820 <__gedf2+0x74>
  80e850:	003ff406 	br	80e824 <__gedf2+0x78>
  80e854:	1a000716 	blt	r3,r8,80e874 <__gedf2+0xc8>
  80e858:	40fff816 	blt	r8,r3,80e83c <__gedf2+0x90>
  80e85c:	397ff136 	bltu	r7,r5,80e824 <__gedf2+0x78>
  80e860:	29c00926 	beq	r5,r7,80e888 <__gedf2+0xdc>
  80e864:	29ffe52e 	bgeu	r5,r7,80e7fc <__gedf2+0x50>
  80e868:	583ff026 	beq	r11,zero,80e82c <__gedf2+0x80>
  80e86c:	5805883a 	mov	r2,r11
  80e870:	f800283a 	ret
  80e874:	103fed1e 	bne	r2,zero,80e82c <__gedf2+0x80>
  80e878:	00800044 	movi	r2,1
  80e87c:	f800283a 	ret
  80e880:	00bfff84 	movi	r2,-2
  80e884:	f800283a 	ret
  80e888:	313fe636 	bltu	r6,r4,80e824 <__gedf2+0x78>
  80e88c:	21bfdb2e 	bgeu	r4,r6,80e7fc <__gedf2+0x50>
  80e890:	003ff506 	br	80e868 <__gedf2+0xbc>

0080e894 <__ledf2>:
  80e894:	2810d53a 	srli	r8,r5,20
  80e898:	3812d53a 	srli	r9,r7,20
  80e89c:	00c00434 	movhi	r3,16
  80e8a0:	4201ffcc 	andi	r8,r8,2047
  80e8a4:	18ffffc4 	addi	r3,r3,-1
  80e8a8:	4281ffd8 	cmpnei	r10,r8,2047
  80e8ac:	2816d7fa 	srli	r11,r5,31
  80e8b0:	3804d7fa 	srli	r2,r7,31
  80e8b4:	28ca703a 	and	r5,r5,r3
  80e8b8:	38ce703a 	and	r7,r7,r3
  80e8bc:	48c1ffcc 	andi	r3,r9,2047
  80e8c0:	50000a26 	beq	r10,zero,80e8ec <__ledf2+0x58>
  80e8c4:	1a41ffd8 	cmpnei	r9,r3,2047
  80e8c8:	48000c26 	beq	r9,zero,80e8fc <__ledf2+0x68>
  80e8cc:	4000191e 	bne	r8,zero,80e934 <__ledf2+0xa0>
  80e8d0:	2912b03a 	or	r9,r5,r4
  80e8d4:	18000d1e 	bne	r3,zero,80e90c <__ledf2+0x78>
  80e8d8:	3994b03a 	or	r10,r7,r6
  80e8dc:	50000b1e 	bne	r10,zero,80e90c <__ledf2+0x78>
  80e8e0:	48000c1e 	bne	r9,zero,80e914 <__ledf2+0x80>
  80e8e4:	0005883a 	mov	r2,zero
  80e8e8:	f800283a 	ret
  80e8ec:	2912b03a 	or	r9,r5,r4
  80e8f0:	48000c1e 	bne	r9,zero,80e924 <__ledf2+0x90>
  80e8f4:	1a41ffe0 	cmpeqi	r9,r3,2047
  80e8f8:	48000e26 	beq	r9,zero,80e934 <__ledf2+0xa0>
  80e8fc:	3992b03a 	or	r9,r7,r6
  80e900:	4800081e 	bne	r9,zero,80e924 <__ledf2+0x90>
  80e904:	4000021e 	bne	r8,zero,80e910 <__ledf2+0x7c>
  80e908:	2912b03a 	or	r9,r5,r4
  80e90c:	48000726 	beq	r9,zero,80e92c <__ledf2+0x98>
  80e910:	58800c26 	beq	r11,r2,80e944 <__ledf2+0xb0>
  80e914:	00800044 	movi	r2,1
  80e918:	58000526 	beq	r11,zero,80e930 <__ledf2+0x9c>
  80e91c:	00bfffc4 	movi	r2,-1
  80e920:	f800283a 	ret
  80e924:	00800084 	movi	r2,2
  80e928:	f800283a 	ret
  80e92c:	103ffb26 	beq	r2,zero,80e91c <__ledf2+0x88>
  80e930:	f800283a 	ret
  80e934:	183ff61e 	bne	r3,zero,80e910 <__ledf2+0x7c>
  80e938:	3992b03a 	or	r9,r7,r6
  80e93c:	483ff41e 	bne	r9,zero,80e910 <__ledf2+0x7c>
  80e940:	003ff406 	br	80e914 <__ledf2+0x80>
  80e944:	1a00030e 	bge	r3,r8,80e954 <__ledf2+0xc0>
  80e948:	103ff41e 	bne	r2,zero,80e91c <__ledf2+0x88>
  80e94c:	00800044 	movi	r2,1
  80e950:	f800283a 	ret
  80e954:	40fff516 	blt	r8,r3,80e92c <__ledf2+0x98>
  80e958:	397fee36 	bltu	r7,r5,80e914 <__ledf2+0x80>
  80e95c:	29c00426 	beq	r5,r7,80e970 <__ledf2+0xdc>
  80e960:	29ffe02e 	bgeu	r5,r7,80e8e4 <__ledf2+0x50>
  80e964:	583fed26 	beq	r11,zero,80e91c <__ledf2+0x88>
  80e968:	5805883a 	mov	r2,r11
  80e96c:	f800283a 	ret
  80e970:	313fe836 	bltu	r6,r4,80e914 <__ledf2+0x80>
  80e974:	21bfdb2e 	bgeu	r4,r6,80e8e4 <__ledf2+0x50>
  80e978:	003ffa06 	br	80e964 <__ledf2+0xd0>

0080e97c <__muldf3>:
  80e97c:	2810d53a 	srli	r8,r5,20
  80e980:	defff004 	addi	sp,sp,-64
  80e984:	00800434 	movhi	r2,16
  80e988:	df000e15 	stw	fp,56(sp)
  80e98c:	dd000a15 	stw	r20,40(sp)
  80e990:	dcc00915 	stw	r19,36(sp)
  80e994:	dc400715 	stw	r17,28(sp)
  80e998:	10bfffc4 	addi	r2,r2,-1
  80e99c:	dfc00f15 	stw	ra,60(sp)
  80e9a0:	ddc00d15 	stw	r23,52(sp)
  80e9a4:	dd800c15 	stw	r22,48(sp)
  80e9a8:	dd400b15 	stw	r21,44(sp)
  80e9ac:	dc800815 	stw	r18,32(sp)
  80e9b0:	dc000615 	stw	r16,24(sp)
  80e9b4:	4201ffcc 	andi	r8,r8,2047
  80e9b8:	2828d7fa 	srli	r20,r5,31
  80e9bc:	2023883a 	mov	r17,r4
  80e9c0:	3039883a 	mov	fp,r6
  80e9c4:	28a6703a 	and	r19,r5,r2
  80e9c8:	40013426 	beq	r8,zero,80ee9c <__muldf3+0x520>
  80e9cc:	4081ffe0 	cmpeqi	r2,r8,2047
  80e9d0:	1001461e 	bne	r2,zero,80eeec <__muldf3+0x570>
  80e9d4:	980a90fa 	slli	r5,r19,3
  80e9d8:	2026d77a 	srli	r19,r4,29
  80e9dc:	202490fa 	slli	r18,r4,3
  80e9e0:	423f0044 	addi	r8,r8,-1023
  80e9e4:	9966b03a 	or	r19,r19,r5
  80e9e8:	9cc02034 	orhi	r19,r19,128
  80e9ec:	002b883a 	mov	r21,zero
  80e9f0:	002d883a 	mov	r22,zero
  80e9f4:	3804d53a 	srli	r2,r7,20
  80e9f8:	00c00434 	movhi	r3,16
  80e9fc:	18ffffc4 	addi	r3,r3,-1
  80ea00:	1081ffcc 	andi	r2,r2,2047
  80ea04:	382ed7fa 	srli	r23,r7,31
  80ea08:	38e0703a 	and	r16,r7,r3
  80ea0c:	10011026 	beq	r2,zero,80ee50 <__muldf3+0x4d4>
  80ea10:	10c1ffe0 	cmpeqi	r3,r2,2047
  80ea14:	18013c1e 	bne	r3,zero,80ef08 <__muldf3+0x58c>
  80ea18:	e008d77a 	srli	r4,fp,29
  80ea1c:	802090fa 	slli	r16,r16,3
  80ea20:	e02290fa 	slli	r17,fp,3
  80ea24:	10bf0044 	addi	r2,r2,-1023
  80ea28:	2420b03a 	or	r16,r4,r16
  80ea2c:	84002034 	orhi	r16,r16,128
  80ea30:	4091883a 	add	r8,r8,r2
  80ea34:	0009883a 	mov	r4,zero
  80ea38:	a8800428 	cmpgeui	r2,r21,16
  80ea3c:	a5ccf03a 	xor	r6,r20,r23
  80ea40:	41c00044 	addi	r7,r8,1
  80ea44:	1000371e 	bne	r2,zero,80eb24 <__muldf3+0x1a8>
  80ea48:	a80490ba 	slli	r2,r21,2
  80ea4c:	00c02074 	movhi	r3,129
  80ea50:	10c7883a 	add	r3,r2,r3
  80ea54:	18ba9717 	ldw	r2,-5540(r3)
  80ea58:	1000683a 	jmp	r2
  80ea5c:	0080eb24 	muli	r2,zero,940
  80ea60:	0080eaa0 	cmpeqi	r2,zero,938
  80ea64:	0080eaa0 	cmpeqi	r2,zero,938
  80ea68:	0080ea9c 	xori	r2,zero,938
  80ea6c:	0080eaac 	andhi	r2,zero,938
  80ea70:	0080eaac 	andhi	r2,zero,938
  80ea74:	0080ef7c 	xorhi	r2,zero,957
  80ea78:	0080ea9c 	xori	r2,zero,938
  80ea7c:	0080eaac 	andhi	r2,zero,938
  80ea80:	0080ef7c 	xorhi	r2,zero,957
  80ea84:	0080eaac 	andhi	r2,zero,938
  80ea88:	0080ea9c 	xori	r2,zero,938
  80ea8c:	0080ef24 	muli	r2,zero,956
  80ea90:	0080ef24 	muli	r2,zero,956
  80ea94:	0080ef24 	muli	r2,zero,956
  80ea98:	0080f008 	cmpgei	r2,zero,960
  80ea9c:	b80d883a 	mov	r6,r23
  80eaa0:	8027883a 	mov	r19,r16
  80eaa4:	8825883a 	mov	r18,r17
  80eaa8:	202d883a 	mov	r22,r4
  80eaac:	b08000a0 	cmpeqi	r2,r22,2
  80eab0:	1000181e 	bne	r2,zero,80eb14 <__muldf3+0x198>
  80eab4:	b08000e0 	cmpeqi	r2,r22,3
  80eab8:	1001961e 	bne	r2,zero,80f114 <__muldf3+0x798>
  80eabc:	b0800060 	cmpeqi	r2,r22,1
  80eac0:	1000c926 	beq	r2,zero,80ede8 <__muldf3+0x46c>
  80eac4:	0007883a 	mov	r3,zero
  80eac8:	0027883a 	mov	r19,zero
  80eacc:	0025883a 	mov	r18,zero
  80ead0:	1806953a 	slli	r3,r3,20
  80ead4:	300c97fa 	slli	r6,r6,31
  80ead8:	9005883a 	mov	r2,r18
  80eadc:	1cc6b03a 	or	r3,r3,r19
  80eae0:	1986b03a 	or	r3,r3,r6
  80eae4:	dfc00f17 	ldw	ra,60(sp)
  80eae8:	df000e17 	ldw	fp,56(sp)
  80eaec:	ddc00d17 	ldw	r23,52(sp)
  80eaf0:	dd800c17 	ldw	r22,48(sp)
  80eaf4:	dd400b17 	ldw	r21,44(sp)
  80eaf8:	dd000a17 	ldw	r20,40(sp)
  80eafc:	dcc00917 	ldw	r19,36(sp)
  80eb00:	dc800817 	ldw	r18,32(sp)
  80eb04:	dc400717 	ldw	r17,28(sp)
  80eb08:	dc000617 	ldw	r16,24(sp)
  80eb0c:	dec01004 	addi	sp,sp,64
  80eb10:	f800283a 	ret
  80eb14:	00c1ffc4 	movi	r3,2047
  80eb18:	0027883a 	mov	r19,zero
  80eb1c:	0025883a 	mov	r18,zero
  80eb20:	003feb06 	br	80ead0 <__muldf3+0x154>
  80eb24:	9028d43a 	srli	r20,r18,16
  80eb28:	8f3fffcc 	andi	fp,r17,65535
  80eb2c:	957fffcc 	andi	r21,r18,65535
  80eb30:	a80b883a 	mov	r5,r21
  80eb34:	e009883a 	mov	r4,fp
  80eb38:	d9800315 	stw	r6,12(sp)
  80eb3c:	da000215 	stw	r8,8(sp)
  80eb40:	d9c00115 	stw	r7,4(sp)
  80eb44:	8822d43a 	srli	r17,r17,16
  80eb48:	0802af80 	call	802af8 <__mulsi3>
  80eb4c:	e00b883a 	mov	r5,fp
  80eb50:	a009883a 	mov	r4,r20
  80eb54:	102d883a 	mov	r22,r2
  80eb58:	0802af80 	call	802af8 <__mulsi3>
  80eb5c:	880b883a 	mov	r5,r17
  80eb60:	a009883a 	mov	r4,r20
  80eb64:	102f883a 	mov	r23,r2
  80eb68:	0802af80 	call	802af8 <__mulsi3>
  80eb6c:	a80b883a 	mov	r5,r21
  80eb70:	8809883a 	mov	r4,r17
  80eb74:	d8800015 	stw	r2,0(sp)
  80eb78:	0802af80 	call	802af8 <__mulsi3>
  80eb7c:	b006d43a 	srli	r3,r22,16
  80eb80:	15e5883a 	add	r18,r2,r23
  80eb84:	d9c00117 	ldw	r7,4(sp)
  80eb88:	1c87883a 	add	r3,r3,r18
  80eb8c:	da000217 	ldw	r8,8(sp)
  80eb90:	d9800317 	ldw	r6,12(sp)
  80eb94:	1dc0042e 	bgeu	r3,r23,80eba8 <__muldf3+0x22c>
  80eb98:	d9000017 	ldw	r4,0(sp)
  80eb9c:	00800074 	movhi	r2,1
  80eba0:	2085883a 	add	r2,r4,r2
  80eba4:	d8800015 	stw	r2,0(sp)
  80eba8:	1804943a 	slli	r2,r3,16
  80ebac:	85ffffcc 	andi	r23,r16,65535
  80ebb0:	b5bfffcc 	andi	r22,r22,65535
  80ebb4:	1585883a 	add	r2,r2,r22
  80ebb8:	a80b883a 	mov	r5,r21
  80ebbc:	b809883a 	mov	r4,r23
  80ebc0:	1824d43a 	srli	r18,r3,16
  80ebc4:	d9800515 	stw	r6,20(sp)
  80ebc8:	da000415 	stw	r8,16(sp)
  80ebcc:	d9c00315 	stw	r7,12(sp)
  80ebd0:	8020d43a 	srli	r16,r16,16
  80ebd4:	d8800115 	stw	r2,4(sp)
  80ebd8:	0802af80 	call	802af8 <__mulsi3>
  80ebdc:	a009883a 	mov	r4,r20
  80ebe0:	b80b883a 	mov	r5,r23
  80ebe4:	d8800215 	stw	r2,8(sp)
  80ebe8:	0802af80 	call	802af8 <__mulsi3>
  80ebec:	a009883a 	mov	r4,r20
  80ebf0:	800b883a 	mov	r5,r16
  80ebf4:	102d883a 	mov	r22,r2
  80ebf8:	0802af80 	call	802af8 <__mulsi3>
  80ebfc:	a80b883a 	mov	r5,r21
  80ec00:	8009883a 	mov	r4,r16
  80ec04:	1029883a 	mov	r20,r2
  80ec08:	0802af80 	call	802af8 <__mulsi3>
  80ec0c:	da800217 	ldw	r10,8(sp)
  80ec10:	1585883a 	add	r2,r2,r22
  80ec14:	d9c00317 	ldw	r7,12(sp)
  80ec18:	5006d43a 	srli	r3,r10,16
  80ec1c:	da000417 	ldw	r8,16(sp)
  80ec20:	d9800517 	ldw	r6,20(sp)
  80ec24:	1887883a 	add	r3,r3,r2
  80ec28:	1d80022e 	bgeu	r3,r22,80ec34 <__muldf3+0x2b8>
  80ec2c:	00800074 	movhi	r2,1
  80ec30:	a0a9883a 	add	r20,r20,r2
  80ec34:	1804d43a 	srli	r2,r3,16
  80ec38:	1806943a 	slli	r3,r3,16
  80ec3c:	982cd43a 	srli	r22,r19,16
  80ec40:	9d7fffcc 	andi	r21,r19,65535
  80ec44:	e009883a 	mov	r4,fp
  80ec48:	54ffffcc 	andi	r19,r10,65535
  80ec4c:	a80b883a 	mov	r5,r21
  80ec50:	1ce7883a 	add	r19,r3,r19
  80ec54:	d9800515 	stw	r6,20(sp)
  80ec58:	da000415 	stw	r8,16(sp)
  80ec5c:	d9c00315 	stw	r7,12(sp)
  80ec60:	1529883a 	add	r20,r2,r20
  80ec64:	0802af80 	call	802af8 <__mulsi3>
  80ec68:	e00b883a 	mov	r5,fp
  80ec6c:	b009883a 	mov	r4,r22
  80ec70:	d8800215 	stw	r2,8(sp)
  80ec74:	0802af80 	call	802af8 <__mulsi3>
  80ec78:	8809883a 	mov	r4,r17
  80ec7c:	b00b883a 	mov	r5,r22
  80ec80:	1039883a 	mov	fp,r2
  80ec84:	0802af80 	call	802af8 <__mulsi3>
  80ec88:	8809883a 	mov	r4,r17
  80ec8c:	a80b883a 	mov	r5,r21
  80ec90:	1023883a 	mov	r17,r2
  80ec94:	0802af80 	call	802af8 <__mulsi3>
  80ec98:	d8c00217 	ldw	r3,8(sp)
  80ec9c:	1705883a 	add	r2,r2,fp
  80eca0:	d9c00317 	ldw	r7,12(sp)
  80eca4:	1808d43a 	srli	r4,r3,16
  80eca8:	da000417 	ldw	r8,16(sp)
  80ecac:	d9800517 	ldw	r6,20(sp)
  80ecb0:	2089883a 	add	r4,r4,r2
  80ecb4:	94e5883a 	add	r18,r18,r19
  80ecb8:	2700022e 	bgeu	r4,fp,80ecc4 <__muldf3+0x348>
  80ecbc:	00800074 	movhi	r2,1
  80ecc0:	88a3883a 	add	r17,r17,r2
  80ecc4:	2004d43a 	srli	r2,r4,16
  80ecc8:	2038943a 	slli	fp,r4,16
  80eccc:	18ffffcc 	andi	r3,r3,65535
  80ecd0:	b809883a 	mov	r4,r23
  80ecd4:	a80b883a 	mov	r5,r21
  80ecd8:	d9800415 	stw	r6,16(sp)
  80ecdc:	da000315 	stw	r8,12(sp)
  80ece0:	d9c00215 	stw	r7,8(sp)
  80ece4:	e0f9883a 	add	fp,fp,r3
  80ece8:	1463883a 	add	r17,r2,r17
  80ecec:	0802af80 	call	802af8 <__mulsi3>
  80ecf0:	b80b883a 	mov	r5,r23
  80ecf4:	b009883a 	mov	r4,r22
  80ecf8:	102f883a 	mov	r23,r2
  80ecfc:	0802af80 	call	802af8 <__mulsi3>
  80ed00:	b00b883a 	mov	r5,r22
  80ed04:	8009883a 	mov	r4,r16
  80ed08:	102d883a 	mov	r22,r2
  80ed0c:	0802af80 	call	802af8 <__mulsi3>
  80ed10:	a80b883a 	mov	r5,r21
  80ed14:	8009883a 	mov	r4,r16
  80ed18:	1021883a 	mov	r16,r2
  80ed1c:	0802af80 	call	802af8 <__mulsi3>
  80ed20:	b80ad43a 	srli	r5,r23,16
  80ed24:	1585883a 	add	r2,r2,r22
  80ed28:	d9c00217 	ldw	r7,8(sp)
  80ed2c:	288b883a 	add	r5,r5,r2
  80ed30:	da000317 	ldw	r8,12(sp)
  80ed34:	d9800417 	ldw	r6,16(sp)
  80ed38:	2d80022e 	bgeu	r5,r22,80ed44 <__muldf3+0x3c8>
  80ed3c:	00800074 	movhi	r2,1
  80ed40:	80a1883a 	add	r16,r16,r2
  80ed44:	2806943a 	slli	r3,r5,16
  80ed48:	d8800017 	ldw	r2,0(sp)
  80ed4c:	bdffffcc 	andi	r23,r23,65535
  80ed50:	1dc7883a 	add	r3,r3,r23
  80ed54:	90ab883a 	add	r21,r18,r2
  80ed58:	acd5803a 	cmpltu	r10,r21,r19
  80ed5c:	1d07883a 	add	r3,r3,r20
  80ed60:	af2b883a 	add	r21,r21,fp
  80ed64:	1a97883a 	add	r11,r3,r10
  80ed68:	af09803a 	cmpltu	r4,r21,fp
  80ed6c:	2826d43a 	srli	r19,r5,16
  80ed70:	5c53883a 	add	r9,r11,r17
  80ed74:	4905883a 	add	r2,r9,r4
  80ed78:	1d07803a 	cmpltu	r3,r3,r20
  80ed7c:	5a95803a 	cmpltu	r10,r11,r10
  80ed80:	1a86b03a 	or	r3,r3,r10
  80ed84:	1109803a 	cmpltu	r4,r2,r4
  80ed88:	4c53803a 	cmpltu	r9,r9,r17
  80ed8c:	1ce7883a 	add	r19,r3,r19
  80ed90:	4908b03a 	or	r4,r9,r4
  80ed94:	a824927a 	slli	r18,r21,9
  80ed98:	d8c00117 	ldw	r3,4(sp)
  80ed9c:	9927883a 	add	r19,r19,r4
  80eda0:	9c27883a 	add	r19,r19,r16
  80eda4:	9826927a 	slli	r19,r19,9
  80eda8:	a82ad5fa 	srli	r21,r21,23
  80edac:	100ad5fa 	srli	r5,r2,23
  80edb0:	90e4b03a 	or	r18,r18,r3
  80edb4:	1004927a 	slli	r2,r2,9
  80edb8:	9024c03a 	cmpne	r18,r18,zero
  80edbc:	9564b03a 	or	r18,r18,r21
  80edc0:	98c0402c 	andhi	r3,r19,256
  80edc4:	90a4b03a 	or	r18,r18,r2
  80edc8:	9966b03a 	or	r19,r19,r5
  80edcc:	1800b626 	beq	r3,zero,80f0a8 <__muldf3+0x72c>
  80edd0:	9006d07a 	srli	r3,r18,1
  80edd4:	980497fa 	slli	r2,r19,31
  80edd8:	9480004c 	andi	r18,r18,1
  80eddc:	9826d07a 	srli	r19,r19,1
  80ede0:	1c86b03a 	or	r3,r3,r18
  80ede4:	18a4b03a 	or	r18,r3,r2
  80ede8:	3900ffc4 	addi	r4,r7,1023
  80edec:	0100690e 	bge	zero,r4,80ef94 <__muldf3+0x618>
  80edf0:	908001cc 	andi	r2,r18,7
  80edf4:	10000726 	beq	r2,zero,80ee14 <__muldf3+0x498>
  80edf8:	908003cc 	andi	r2,r18,15
  80edfc:	10800120 	cmpeqi	r2,r2,4
  80ee00:	1000041e 	bne	r2,zero,80ee14 <__muldf3+0x498>
  80ee04:	90800104 	addi	r2,r18,4
  80ee08:	14a5803a 	cmpltu	r18,r2,r18
  80ee0c:	9ca7883a 	add	r19,r19,r18
  80ee10:	1025883a 	mov	r18,r2
  80ee14:	9880402c 	andhi	r2,r19,256
  80ee18:	10000426 	beq	r2,zero,80ee2c <__muldf3+0x4b0>
  80ee1c:	00bfc034 	movhi	r2,65280
  80ee20:	10bfffc4 	addi	r2,r2,-1
  80ee24:	98a6703a 	and	r19,r19,r2
  80ee28:	39010004 	addi	r4,r7,1024
  80ee2c:	2081ffc8 	cmpgei	r2,r4,2047
  80ee30:	103f381e 	bne	r2,zero,80eb14 <__muldf3+0x198>
  80ee34:	9804977a 	slli	r2,r19,29
  80ee38:	9024d0fa 	srli	r18,r18,3
  80ee3c:	9826927a 	slli	r19,r19,9
  80ee40:	20c1ffcc 	andi	r3,r4,2047
  80ee44:	14a4b03a 	or	r18,r2,r18
  80ee48:	9826d33a 	srli	r19,r19,12
  80ee4c:	003f2006 	br	80ead0 <__muldf3+0x154>
  80ee50:	8722b03a 	or	r17,r16,fp
  80ee54:	88004526 	beq	r17,zero,80ef6c <__muldf3+0x5f0>
  80ee58:	da000015 	stw	r8,0(sp)
  80ee5c:	80008626 	beq	r16,zero,80f078 <__muldf3+0x6fc>
  80ee60:	8009883a 	mov	r4,r16
  80ee64:	0802aa40 	call	802aa4 <__clzsi2>
  80ee68:	da000017 	ldw	r8,0(sp)
  80ee6c:	117ffd44 	addi	r5,r2,-11
  80ee70:	01000744 	movi	r4,29
  80ee74:	147ffe04 	addi	r17,r2,-8
  80ee78:	2149c83a 	sub	r4,r4,r5
  80ee7c:	8460983a 	sll	r16,r16,r17
  80ee80:	e108d83a 	srl	r4,fp,r4
  80ee84:	e462983a 	sll	r17,fp,r17
  80ee88:	2420b03a 	or	r16,r4,r16
  80ee8c:	4091c83a 	sub	r8,r8,r2
  80ee90:	423f0344 	addi	r8,r8,-1011
  80ee94:	0009883a 	mov	r4,zero
  80ee98:	003ee706 	br	80ea38 <__muldf3+0xbc>
  80ee9c:	9924b03a 	or	r18,r19,r4
  80eea0:	90002d26 	beq	r18,zero,80ef58 <__muldf3+0x5dc>
  80eea4:	d9c00015 	stw	r7,0(sp)
  80eea8:	98006826 	beq	r19,zero,80f04c <__muldf3+0x6d0>
  80eeac:	9809883a 	mov	r4,r19
  80eeb0:	0802aa40 	call	802aa4 <__clzsi2>
  80eeb4:	d9c00017 	ldw	r7,0(sp)
  80eeb8:	113ffd44 	addi	r4,r2,-11
  80eebc:	00c00744 	movi	r3,29
  80eec0:	14bffe04 	addi	r18,r2,-8
  80eec4:	1907c83a 	sub	r3,r3,r4
  80eec8:	9ca6983a 	sll	r19,r19,r18
  80eecc:	88c6d83a 	srl	r3,r17,r3
  80eed0:	8ca4983a 	sll	r18,r17,r18
  80eed4:	1ce6b03a 	or	r19,r3,r19
  80eed8:	023f0344 	movi	r8,-1011
  80eedc:	4091c83a 	sub	r8,r8,r2
  80eee0:	002b883a 	mov	r21,zero
  80eee4:	002d883a 	mov	r22,zero
  80eee8:	003ec206 	br	80e9f4 <__muldf3+0x78>
  80eeec:	9924b03a 	or	r18,r19,r4
  80eef0:	9000141e 	bne	r18,zero,80ef44 <__muldf3+0x5c8>
  80eef4:	0027883a 	mov	r19,zero
  80eef8:	05400204 	movi	r21,8
  80eefc:	0201ffc4 	movi	r8,2047
  80ef00:	05800084 	movi	r22,2
  80ef04:	003ebb06 	br	80e9f4 <__muldf3+0x78>
  80ef08:	8722b03a 	or	r17,r16,fp
  80ef0c:	4201ffc4 	addi	r8,r8,2047
  80ef10:	8800081e 	bne	r17,zero,80ef34 <__muldf3+0x5b8>
  80ef14:	ad400094 	ori	r21,r21,2
  80ef18:	0021883a 	mov	r16,zero
  80ef1c:	01000084 	movi	r4,2
  80ef20:	003ec506 	br	80ea38 <__muldf3+0xbc>
  80ef24:	b08000a0 	cmpeqi	r2,r22,2
  80ef28:	a00d883a 	mov	r6,r20
  80ef2c:	103ee126 	beq	r2,zero,80eab4 <__muldf3+0x138>
  80ef30:	003ef806 	br	80eb14 <__muldf3+0x198>
  80ef34:	ad4000d4 	ori	r21,r21,3
  80ef38:	e023883a 	mov	r17,fp
  80ef3c:	010000c4 	movi	r4,3
  80ef40:	003ebd06 	br	80ea38 <__muldf3+0xbc>
  80ef44:	2025883a 	mov	r18,r4
  80ef48:	05400304 	movi	r21,12
  80ef4c:	0201ffc4 	movi	r8,2047
  80ef50:	058000c4 	movi	r22,3
  80ef54:	003ea706 	br	80e9f4 <__muldf3+0x78>
  80ef58:	0027883a 	mov	r19,zero
  80ef5c:	05400104 	movi	r21,4
  80ef60:	0011883a 	mov	r8,zero
  80ef64:	05800044 	movi	r22,1
  80ef68:	003ea206 	br	80e9f4 <__muldf3+0x78>
  80ef6c:	ad400054 	ori	r21,r21,1
  80ef70:	0021883a 	mov	r16,zero
  80ef74:	01000044 	movi	r4,1
  80ef78:	003eaf06 	br	80ea38 <__muldf3+0xbc>
  80ef7c:	04c00434 	movhi	r19,16
  80ef80:	000d883a 	mov	r6,zero
  80ef84:	9cffffc4 	addi	r19,r19,-1
  80ef88:	04bfffc4 	movi	r18,-1
  80ef8c:	00c1ffc4 	movi	r3,2047
  80ef90:	003ecf06 	br	80ead0 <__muldf3+0x154>
  80ef94:	00800044 	movi	r2,1
  80ef98:	1105c83a 	sub	r2,r2,r4
  80ef9c:	10c00e48 	cmpgei	r3,r2,57
  80efa0:	183ec81e 	bne	r3,zero,80eac4 <__muldf3+0x148>
  80efa4:	10c00808 	cmpgei	r3,r2,32
  80efa8:	1800411e 	bne	r3,zero,80f0b0 <__muldf3+0x734>
  80efac:	39c10784 	addi	r7,r7,1054
  80efb0:	99c6983a 	sll	r3,r19,r7
  80efb4:	9088d83a 	srl	r4,r18,r2
  80efb8:	91ce983a 	sll	r7,r18,r7
  80efbc:	98a6d83a 	srl	r19,r19,r2
  80efc0:	1904b03a 	or	r2,r3,r4
  80efc4:	3824c03a 	cmpne	r18,r7,zero
  80efc8:	1484b03a 	or	r2,r2,r18
  80efcc:	10c001cc 	andi	r3,r2,7
  80efd0:	18000726 	beq	r3,zero,80eff0 <__muldf3+0x674>
  80efd4:	10c003cc 	andi	r3,r2,15
  80efd8:	18c00120 	cmpeqi	r3,r3,4
  80efdc:	1800041e 	bne	r3,zero,80eff0 <__muldf3+0x674>
  80efe0:	10c00104 	addi	r3,r2,4
  80efe4:	1885803a 	cmpltu	r2,r3,r2
  80efe8:	98a7883a 	add	r19,r19,r2
  80efec:	1805883a 	mov	r2,r3
  80eff0:	98c0202c 	andhi	r3,r19,128
  80eff4:	18004326 	beq	r3,zero,80f104 <__muldf3+0x788>
  80eff8:	00c00044 	movi	r3,1
  80effc:	0027883a 	mov	r19,zero
  80f000:	0025883a 	mov	r18,zero
  80f004:	003eb206 	br	80ead0 <__muldf3+0x154>
  80f008:	9880022c 	andhi	r2,r19,8
  80f00c:	10000926 	beq	r2,zero,80f034 <__muldf3+0x6b8>
  80f010:	8080022c 	andhi	r2,r16,8
  80f014:	1000071e 	bne	r2,zero,80f034 <__muldf3+0x6b8>
  80f018:	00800434 	movhi	r2,16
  80f01c:	84c00234 	orhi	r19,r16,8
  80f020:	10bfffc4 	addi	r2,r2,-1
  80f024:	98a6703a 	and	r19,r19,r2
  80f028:	b80d883a 	mov	r6,r23
  80f02c:	8825883a 	mov	r18,r17
  80f030:	003fd606 	br	80ef8c <__muldf3+0x610>
  80f034:	00800434 	movhi	r2,16
  80f038:	9cc00234 	orhi	r19,r19,8
  80f03c:	10bfffc4 	addi	r2,r2,-1
  80f040:	98a6703a 	and	r19,r19,r2
  80f044:	a00d883a 	mov	r6,r20
  80f048:	003fd006 	br	80ef8c <__muldf3+0x610>
  80f04c:	0802aa40 	call	802aa4 <__clzsi2>
  80f050:	11000544 	addi	r4,r2,21
  80f054:	21400748 	cmpgei	r5,r4,29
  80f058:	1007883a 	mov	r3,r2
  80f05c:	d9c00017 	ldw	r7,0(sp)
  80f060:	10800804 	addi	r2,r2,32
  80f064:	283f9526 	beq	r5,zero,80eebc <__muldf3+0x540>
  80f068:	18fffe04 	addi	r3,r3,-8
  80f06c:	88e6983a 	sll	r19,r17,r3
  80f070:	0025883a 	mov	r18,zero
  80f074:	003f9806 	br	80eed8 <__muldf3+0x55c>
  80f078:	e009883a 	mov	r4,fp
  80f07c:	0802aa40 	call	802aa4 <__clzsi2>
  80f080:	11400544 	addi	r5,r2,21
  80f084:	29000748 	cmpgei	r4,r5,29
  80f088:	1007883a 	mov	r3,r2
  80f08c:	da000017 	ldw	r8,0(sp)
  80f090:	10800804 	addi	r2,r2,32
  80f094:	203f7626 	beq	r4,zero,80ee70 <__muldf3+0x4f4>
  80f098:	1c3ffe04 	addi	r16,r3,-8
  80f09c:	e420983a 	sll	r16,fp,r16
  80f0a0:	0023883a 	mov	r17,zero
  80f0a4:	003f7906 	br	80ee8c <__muldf3+0x510>
  80f0a8:	400f883a 	mov	r7,r8
  80f0ac:	003f4e06 	br	80ede8 <__muldf3+0x46c>
  80f0b0:	00fff844 	movi	r3,-31
  80f0b4:	1907c83a 	sub	r3,r3,r4
  80f0b8:	10800820 	cmpeqi	r2,r2,32
  80f0bc:	98c6d83a 	srl	r3,r19,r3
  80f0c0:	1000031e 	bne	r2,zero,80f0d0 <__muldf3+0x754>
  80f0c4:	39c10f84 	addi	r7,r7,1086
  80f0c8:	99e6983a 	sll	r19,r19,r7
  80f0cc:	94e4b03a 	or	r18,r18,r19
  80f0d0:	9024c03a 	cmpne	r18,r18,zero
  80f0d4:	90c4b03a 	or	r2,r18,r3
  80f0d8:	148001cc 	andi	r18,r2,7
  80f0dc:	9000051e 	bne	r18,zero,80f0f4 <__muldf3+0x778>
  80f0e0:	0027883a 	mov	r19,zero
  80f0e4:	1004d0fa 	srli	r2,r2,3
  80f0e8:	0007883a 	mov	r3,zero
  80f0ec:	14a4b03a 	or	r18,r2,r18
  80f0f0:	003e7706 	br	80ead0 <__muldf3+0x154>
  80f0f4:	10c003cc 	andi	r3,r2,15
  80f0f8:	18c00118 	cmpnei	r3,r3,4
  80f0fc:	0027883a 	mov	r19,zero
  80f100:	183fb71e 	bne	r3,zero,80efe0 <__muldf3+0x664>
  80f104:	9806927a 	slli	r3,r19,9
  80f108:	9824977a 	slli	r18,r19,29
  80f10c:	1826d33a 	srli	r19,r3,12
  80f110:	003ff406 	br	80f0e4 <__muldf3+0x768>
  80f114:	00800434 	movhi	r2,16
  80f118:	9cc00234 	orhi	r19,r19,8
  80f11c:	10bfffc4 	addi	r2,r2,-1
  80f120:	98a6703a 	and	r19,r19,r2
  80f124:	003f9906 	br	80ef8c <__muldf3+0x610>

0080f128 <__subdf3>:
  80f128:	00800434 	movhi	r2,16
  80f12c:	3810d53a 	srli	r8,r7,20
  80f130:	10bfffc4 	addi	r2,r2,-1
  80f134:	2806d53a 	srli	r3,r5,20
  80f138:	2892703a 	and	r9,r5,r2
  80f13c:	3884703a 	and	r2,r7,r2
  80f140:	280ad7fa 	srli	r5,r5,31
  80f144:	481290fa 	slli	r9,r9,3
  80f148:	2018d77a 	srli	r12,r4,29
  80f14c:	100490fa 	slli	r2,r2,3
  80f150:	3016d77a 	srli	r11,r6,29
  80f154:	defffb04 	addi	sp,sp,-20
  80f158:	4201ffcc 	andi	r8,r8,2047
  80f15c:	dc800215 	stw	r18,8(sp)
  80f160:	dc400115 	stw	r17,4(sp)
  80f164:	1c81ffcc 	andi	r18,r3,2047
  80f168:	dfc00415 	stw	ra,16(sp)
  80f16c:	dcc00315 	stw	r19,12(sp)
  80f170:	dc000015 	stw	r16,0(sp)
  80f174:	4281ffd8 	cmpnei	r10,r8,2047
  80f178:	2823883a 	mov	r17,r5
  80f17c:	201c90fa 	slli	r14,r4,3
  80f180:	380ed7fa 	srli	r7,r7,31
  80f184:	301a90fa 	slli	r13,r6,3
  80f188:	29403fcc 	andi	r5,r5,255
  80f18c:	6252b03a 	or	r9,r12,r9
  80f190:	589eb03a 	or	r15,r11,r2
  80f194:	9207c83a 	sub	r3,r18,r8
  80f198:	50006826 	beq	r10,zero,80f33c <__subdf3+0x214>
  80f19c:	3ac0005c 	xori	r11,r7,1
  80f1a0:	2ac07326 	beq	r5,r11,80f370 <__subdf3+0x248>
  80f1a4:	00c0590e 	bge	zero,r3,80f30c <__subdf3+0x1e4>
  80f1a8:	4000691e 	bne	r8,zero,80f350 <__subdf3+0x228>
  80f1ac:	7b44b03a 	or	r2,r15,r13
  80f1b0:	1000fb26 	beq	r2,zero,80f5a0 <__subdf3+0x478>
  80f1b4:	18bfffc4 	addi	r2,r3,-1
  80f1b8:	10019126 	beq	r2,zero,80f800 <__subdf3+0x6d8>
  80f1bc:	18c1ffd8 	cmpnei	r3,r3,2047
  80f1c0:	1800c326 	beq	r3,zero,80f4d0 <__subdf3+0x3a8>
  80f1c4:	1007883a 	mov	r3,r2
  80f1c8:	18800e48 	cmpgei	r2,r3,57
  80f1cc:	1000651e 	bne	r2,zero,80f364 <__subdf3+0x23c>
  80f1d0:	18800808 	cmpgei	r2,r3,32
  80f1d4:	1001331e 	bne	r2,zero,80f6a4 <__subdf3+0x57c>
  80f1d8:	00800804 	movi	r2,32
  80f1dc:	10c5c83a 	sub	r2,r2,r3
  80f1e0:	78a0983a 	sll	r16,r15,r2
  80f1e4:	68c8d83a 	srl	r4,r13,r3
  80f1e8:	689a983a 	sll	r13,r13,r2
  80f1ec:	78c4d83a 	srl	r2,r15,r3
  80f1f0:	8120b03a 	or	r16,r16,r4
  80f1f4:	681ac03a 	cmpne	r13,r13,zero
  80f1f8:	8360b03a 	or	r16,r16,r13
  80f1fc:	4893c83a 	sub	r9,r9,r2
  80f200:	7421c83a 	sub	r16,r14,r16
  80f204:	7409803a 	cmpltu	r4,r14,r16
  80f208:	4909c83a 	sub	r4,r9,r4
  80f20c:	2080202c 	andhi	r2,r4,128
  80f210:	10009326 	beq	r2,zero,80f460 <__subdf3+0x338>
  80f214:	04c02034 	movhi	r19,128
  80f218:	9cffffc4 	addi	r19,r19,-1
  80f21c:	24e6703a 	and	r19,r4,r19
  80f220:	9800b926 	beq	r19,zero,80f508 <__subdf3+0x3e0>
  80f224:	9809883a 	mov	r4,r19
  80f228:	0802aa40 	call	802aa4 <__clzsi2>
  80f22c:	10fffe04 	addi	r3,r2,-8
  80f230:	01000804 	movi	r4,32
  80f234:	20c9c83a 	sub	r4,r4,r3
  80f238:	8108d83a 	srl	r4,r16,r4
  80f23c:	98e6983a 	sll	r19,r19,r3
  80f240:	80e0983a 	sll	r16,r16,r3
  80f244:	24c8b03a 	or	r4,r4,r19
  80f248:	1c80b816 	blt	r3,r18,80f52c <__subdf3+0x404>
  80f24c:	1c87c83a 	sub	r3,r3,r18
  80f250:	19400044 	addi	r5,r3,1
  80f254:	28800808 	cmpgei	r2,r5,32
  80f258:	1000751e 	bne	r2,zero,80f430 <__subdf3+0x308>
  80f25c:	00800804 	movi	r2,32
  80f260:	1145c83a 	sub	r2,r2,r5
  80f264:	8146d83a 	srl	r3,r16,r5
  80f268:	80a0983a 	sll	r16,r16,r2
  80f26c:	2084983a 	sll	r2,r4,r2
  80f270:	2148d83a 	srl	r4,r4,r5
  80f274:	8020c03a 	cmpne	r16,r16,zero
  80f278:	10c4b03a 	or	r2,r2,r3
  80f27c:	1420b03a 	or	r16,r2,r16
  80f280:	0025883a 	mov	r18,zero
  80f284:	808001cc 	andi	r2,r16,7
  80f288:	10000726 	beq	r2,zero,80f2a8 <__subdf3+0x180>
  80f28c:	808003cc 	andi	r2,r16,15
  80f290:	10800120 	cmpeqi	r2,r2,4
  80f294:	1000041e 	bne	r2,zero,80f2a8 <__subdf3+0x180>
  80f298:	80800104 	addi	r2,r16,4
  80f29c:	1421803a 	cmpltu	r16,r2,r16
  80f2a0:	2409883a 	add	r4,r4,r16
  80f2a4:	1021883a 	mov	r16,r2
  80f2a8:	2080202c 	andhi	r2,r4,128
  80f2ac:	10006e26 	beq	r2,zero,80f468 <__subdf3+0x340>
  80f2b0:	90c00044 	addi	r3,r18,1
  80f2b4:	1881ffe0 	cmpeqi	r2,r3,2047
  80f2b8:	18c1ffcc 	andi	r3,r3,2047
  80f2bc:	1000801e 	bne	r2,zero,80f4c0 <__subdf3+0x398>
  80f2c0:	00bfe034 	movhi	r2,65408
  80f2c4:	10bfffc4 	addi	r2,r2,-1
  80f2c8:	2088703a 	and	r4,r4,r2
  80f2cc:	2004977a 	slli	r2,r4,29
  80f2d0:	2008927a 	slli	r4,r4,9
  80f2d4:	8020d0fa 	srli	r16,r16,3
  80f2d8:	2008d33a 	srli	r4,r4,12
  80f2dc:	1404b03a 	or	r2,r2,r16
  80f2e0:	1806953a 	slli	r3,r3,20
  80f2e4:	882297fa 	slli	r17,r17,31
  80f2e8:	1906b03a 	or	r3,r3,r4
  80f2ec:	1c46b03a 	or	r3,r3,r17
  80f2f0:	dfc00417 	ldw	ra,16(sp)
  80f2f4:	dcc00317 	ldw	r19,12(sp)
  80f2f8:	dc800217 	ldw	r18,8(sp)
  80f2fc:	dc400117 	ldw	r17,4(sp)
  80f300:	dc000017 	ldw	r16,0(sp)
  80f304:	dec00504 	addi	sp,sp,20
  80f308:	f800283a 	ret
  80f30c:	18002c26 	beq	r3,zero,80f3c0 <__subdf3+0x298>
  80f310:	4487c83a 	sub	r3,r8,r18
  80f314:	5823883a 	mov	r17,r11
  80f318:	9000bb1e 	bne	r18,zero,80f608 <__subdf3+0x4e0>
  80f31c:	4b84b03a 	or	r2,r9,r14
  80f320:	10011726 	beq	r2,zero,80f780 <__subdf3+0x658>
  80f324:	18bfffc4 	addi	r2,r3,-1
  80f328:	10016326 	beq	r2,zero,80f8b8 <__subdf3+0x790>
  80f32c:	18c1ffd8 	cmpnei	r3,r3,2047
  80f330:	18012c26 	beq	r3,zero,80f7e4 <__subdf3+0x6bc>
  80f334:	1007883a 	mov	r3,r2
  80f338:	0000b506 	br	80f610 <__subdf3+0x4e8>
  80f33c:	7b44b03a 	or	r2,r15,r13
  80f340:	103f9626 	beq	r2,zero,80f19c <__subdf3+0x74>
  80f344:	3ac03fcc 	andi	r11,r7,255
  80f348:	29c07d26 	beq	r5,r7,80f540 <__subdf3+0x418>
  80f34c:	00ffef0e 	bge	zero,r3,80f30c <__subdf3+0x1e4>
  80f350:	9081ffd8 	cmpnei	r2,r18,2047
  80f354:	10005e26 	beq	r2,zero,80f4d0 <__subdf3+0x3a8>
  80f358:	18800e48 	cmpgei	r2,r3,57
  80f35c:	7bc02034 	orhi	r15,r15,128
  80f360:	103f9b26 	beq	r2,zero,80f1d0 <__subdf3+0xa8>
  80f364:	7b60b03a 	or	r16,r15,r13
  80f368:	8020c03a 	cmpne	r16,r16,zero
  80f36c:	003fa406 	br	80f200 <__subdf3+0xd8>
  80f370:	00c0730e 	bge	zero,r3,80f540 <__subdf3+0x418>
  80f374:	40002626 	beq	r8,zero,80f410 <__subdf3+0x2e8>
  80f378:	9081ffd8 	cmpnei	r2,r18,2047
  80f37c:	10005426 	beq	r2,zero,80f4d0 <__subdf3+0x3a8>
  80f380:	7bc02034 	orhi	r15,r15,128
  80f384:	18800e48 	cmpgei	r2,r3,57
  80f388:	1000431e 	bne	r2,zero,80f498 <__subdf3+0x370>
  80f38c:	18800808 	cmpgei	r2,r3,32
  80f390:	1000de26 	beq	r2,zero,80f70c <__subdf3+0x5e4>
  80f394:	1c3ff804 	addi	r16,r3,-32
  80f398:	18800820 	cmpeqi	r2,r3,32
  80f39c:	7c0ad83a 	srl	r5,r15,r16
  80f3a0:	1000041e 	bne	r2,zero,80f3b4 <__subdf3+0x28c>
  80f3a4:	00801004 	movi	r2,64
  80f3a8:	10c5c83a 	sub	r2,r2,r3
  80f3ac:	7884983a 	sll	r2,r15,r2
  80f3b0:	689ab03a 	or	r13,r13,r2
  80f3b4:	6820c03a 	cmpne	r16,r13,zero
  80f3b8:	8160b03a 	or	r16,r16,r5
  80f3bc:	00003806 	br	80f4a0 <__subdf3+0x378>
  80f3c0:	90800044 	addi	r2,r18,1
  80f3c4:	1081ff8c 	andi	r2,r2,2046
  80f3c8:	1000a01e 	bne	r2,zero,80f64c <__subdf3+0x524>
  80f3cc:	4b8ab03a 	or	r5,r9,r14
  80f3d0:	7b44b03a 	or	r2,r15,r13
  80f3d4:	9000f11e 	bne	r18,zero,80f79c <__subdf3+0x674>
  80f3d8:	28012e26 	beq	r5,zero,80f894 <__subdf3+0x76c>
  80f3dc:	10010e26 	beq	r2,zero,80f818 <__subdf3+0x6f0>
  80f3e0:	7361c83a 	sub	r16,r14,r13
  80f3e4:	7405803a 	cmpltu	r2,r14,r16
  80f3e8:	4bc9c83a 	sub	r4,r9,r15
  80f3ec:	2089c83a 	sub	r4,r4,r2
  80f3f0:	2080202c 	andhi	r2,r4,128
  80f3f4:	10016d26 	beq	r2,zero,80f9ac <__subdf3+0x884>
  80f3f8:	6ba1c83a 	sub	r16,r13,r14
  80f3fc:	7a49c83a 	sub	r4,r15,r9
  80f400:	6c1b803a 	cmpltu	r13,r13,r16
  80f404:	2349c83a 	sub	r4,r4,r13
  80f408:	5823883a 	mov	r17,r11
  80f40c:	003f9d06 	br	80f284 <__subdf3+0x15c>
  80f410:	7b44b03a 	or	r2,r15,r13
  80f414:	10006226 	beq	r2,zero,80f5a0 <__subdf3+0x478>
  80f418:	18bfffc4 	addi	r2,r3,-1
  80f41c:	1000e926 	beq	r2,zero,80f7c4 <__subdf3+0x69c>
  80f420:	18c1ffd8 	cmpnei	r3,r3,2047
  80f424:	18012a26 	beq	r3,zero,80f8d0 <__subdf3+0x7a8>
  80f428:	1007883a 	mov	r3,r2
  80f42c:	003fd506 	br	80f384 <__subdf3+0x25c>
  80f430:	18fff844 	addi	r3,r3,-31
  80f434:	28800820 	cmpeqi	r2,r5,32
  80f438:	20c6d83a 	srl	r3,r4,r3
  80f43c:	1000041e 	bne	r2,zero,80f450 <__subdf3+0x328>
  80f440:	00801004 	movi	r2,64
  80f444:	114bc83a 	sub	r5,r2,r5
  80f448:	2148983a 	sll	r4,r4,r5
  80f44c:	8120b03a 	or	r16,r16,r4
  80f450:	8020c03a 	cmpne	r16,r16,zero
  80f454:	80e0b03a 	or	r16,r16,r3
  80f458:	0009883a 	mov	r4,zero
  80f45c:	0025883a 	mov	r18,zero
  80f460:	808001cc 	andi	r2,r16,7
  80f464:	103f891e 	bne	r2,zero,80f28c <__subdf3+0x164>
  80f468:	8020d0fa 	srli	r16,r16,3
  80f46c:	2004977a 	slli	r2,r4,29
  80f470:	2012d0fa 	srli	r9,r4,3
  80f474:	9007883a 	mov	r3,r18
  80f478:	8084b03a 	or	r2,r16,r2
  80f47c:	1901ffe0 	cmpeqi	r4,r3,2047
  80f480:	2000191e 	bne	r4,zero,80f4e8 <__subdf3+0x3c0>
  80f484:	01000434 	movhi	r4,16
  80f488:	213fffc4 	addi	r4,r4,-1
  80f48c:	4908703a 	and	r4,r9,r4
  80f490:	18c1ffcc 	andi	r3,r3,2047
  80f494:	003f9206 	br	80f2e0 <__subdf3+0x1b8>
  80f498:	7b60b03a 	or	r16,r15,r13
  80f49c:	8020c03a 	cmpne	r16,r16,zero
  80f4a0:	83a1883a 	add	r16,r16,r14
  80f4a4:	8389803a 	cmpltu	r4,r16,r14
  80f4a8:	2249883a 	add	r4,r4,r9
  80f4ac:	2080202c 	andhi	r2,r4,128
  80f4b0:	103feb26 	beq	r2,zero,80f460 <__subdf3+0x338>
  80f4b4:	94800044 	addi	r18,r18,1
  80f4b8:	9081ffe0 	cmpeqi	r2,r18,2047
  80f4bc:	10006f26 	beq	r2,zero,80f67c <__subdf3+0x554>
  80f4c0:	00c1ffc4 	movi	r3,2047
  80f4c4:	0009883a 	mov	r4,zero
  80f4c8:	0005883a 	mov	r2,zero
  80f4cc:	003f8406 	br	80f2e0 <__subdf3+0x1b8>
  80f4d0:	4806977a 	slli	r3,r9,29
  80f4d4:	00880034 	movhi	r2,8192
  80f4d8:	10bfffc4 	addi	r2,r2,-1
  80f4dc:	4812d0fa 	srli	r9,r9,3
  80f4e0:	2088703a 	and	r4,r4,r2
  80f4e4:	20c4b03a 	or	r2,r4,r3
  80f4e8:	4886b03a 	or	r3,r9,r2
  80f4ec:	18013726 	beq	r3,zero,80f9cc <__subdf3+0x8a4>
  80f4f0:	00c00434 	movhi	r3,16
  80f4f4:	18ffffc4 	addi	r3,r3,-1
  80f4f8:	49000234 	orhi	r4,r9,8
  80f4fc:	20c8703a 	and	r4,r4,r3
  80f500:	00c1ffc4 	movi	r3,2047
  80f504:	003f7606 	br	80f2e0 <__subdf3+0x1b8>
  80f508:	8009883a 	mov	r4,r16
  80f50c:	0802aa40 	call	802aa4 <__clzsi2>
  80f510:	10c00604 	addi	r3,r2,24
  80f514:	19000808 	cmpgei	r4,r3,32
  80f518:	203f4526 	beq	r4,zero,80f230 <__subdf3+0x108>
  80f51c:	113ffe04 	addi	r4,r2,-8
  80f520:	8108983a 	sll	r4,r16,r4
  80f524:	0021883a 	mov	r16,zero
  80f528:	1cbf480e 	bge	r3,r18,80f24c <__subdf3+0x124>
  80f52c:	00bfe034 	movhi	r2,65408
  80f530:	10bfffc4 	addi	r2,r2,-1
  80f534:	90e5c83a 	sub	r18,r18,r3
  80f538:	2088703a 	and	r4,r4,r2
  80f53c:	003f5106 	br	80f284 <__subdf3+0x15c>
  80f540:	18001e26 	beq	r3,zero,80f5bc <__subdf3+0x494>
  80f544:	4487c83a 	sub	r3,r8,r18
  80f548:	90006826 	beq	r18,zero,80f6ec <__subdf3+0x5c4>
  80f54c:	5000a526 	beq	r10,zero,80f7e4 <__subdf3+0x6bc>
  80f550:	4a402034 	orhi	r9,r9,128
  80f554:	18800e48 	cmpgei	r2,r3,57
  80f558:	1000b61e 	bne	r2,zero,80f834 <__subdf3+0x70c>
  80f55c:	18800808 	cmpgei	r2,r3,32
  80f560:	1001021e 	bne	r2,zero,80f96c <__subdf3+0x844>
  80f564:	00800804 	movi	r2,32
  80f568:	10c5c83a 	sub	r2,r2,r3
  80f56c:	48a0983a 	sll	r16,r9,r2
  80f570:	70c8d83a 	srl	r4,r14,r3
  80f574:	7084983a 	sll	r2,r14,r2
  80f578:	48d2d83a 	srl	r9,r9,r3
  80f57c:	8120b03a 	or	r16,r16,r4
  80f580:	1004c03a 	cmpne	r2,r2,zero
  80f584:	80a0b03a 	or	r16,r16,r2
  80f588:	7a5f883a 	add	r15,r15,r9
  80f58c:	8361883a 	add	r16,r16,r13
  80f590:	8349803a 	cmpltu	r4,r16,r13
  80f594:	23c9883a 	add	r4,r4,r15
  80f598:	4025883a 	mov	r18,r8
  80f59c:	003fc306 	br	80f4ac <__subdf3+0x384>
  80f5a0:	480a977a 	slli	r5,r9,29
  80f5a4:	00880034 	movhi	r2,8192
  80f5a8:	10bfffc4 	addi	r2,r2,-1
  80f5ac:	2088703a 	and	r4,r4,r2
  80f5b0:	4812d0fa 	srli	r9,r9,3
  80f5b4:	2144b03a 	or	r2,r4,r5
  80f5b8:	003fb006 	br	80f47c <__subdf3+0x354>
  80f5bc:	90800044 	addi	r2,r18,1
  80f5c0:	1141ff8c 	andi	r5,r2,2046
  80f5c4:	28005c1e 	bne	r5,zero,80f738 <__subdf3+0x610>
  80f5c8:	4b84b03a 	or	r2,r9,r14
  80f5cc:	9000a71e 	bne	r18,zero,80f86c <__subdf3+0x744>
  80f5d0:	1000df26 	beq	r2,zero,80f950 <__subdf3+0x828>
  80f5d4:	7b44b03a 	or	r2,r15,r13
  80f5d8:	10008f26 	beq	r2,zero,80f818 <__subdf3+0x6f0>
  80f5dc:	7361883a 	add	r16,r14,r13
  80f5e0:	4bc9883a 	add	r4,r9,r15
  80f5e4:	839d803a 	cmpltu	r14,r16,r14
  80f5e8:	2389883a 	add	r4,r4,r14
  80f5ec:	2080202c 	andhi	r2,r4,128
  80f5f0:	103f9b26 	beq	r2,zero,80f460 <__subdf3+0x338>
  80f5f4:	00bfe034 	movhi	r2,65408
  80f5f8:	10bfffc4 	addi	r2,r2,-1
  80f5fc:	2088703a 	and	r4,r4,r2
  80f600:	04800044 	movi	r18,1
  80f604:	003f9606 	br	80f460 <__subdf3+0x338>
  80f608:	50007626 	beq	r10,zero,80f7e4 <__subdf3+0x6bc>
  80f60c:	4a402034 	orhi	r9,r9,128
  80f610:	18800e48 	cmpgei	r2,r3,57
  80f614:	10002e1e 	bne	r2,zero,80f6d0 <__subdf3+0x5a8>
  80f618:	18800808 	cmpgei	r2,r3,32
  80f61c:	1000881e 	bne	r2,zero,80f840 <__subdf3+0x718>
  80f620:	00800804 	movi	r2,32
  80f624:	10c5c83a 	sub	r2,r2,r3
  80f628:	48a0983a 	sll	r16,r9,r2
  80f62c:	70c8d83a 	srl	r4,r14,r3
  80f630:	709c983a 	sll	r14,r14,r2
  80f634:	48d2d83a 	srl	r9,r9,r3
  80f638:	8120b03a 	or	r16,r16,r4
  80f63c:	701cc03a 	cmpne	r14,r14,zero
  80f640:	83a0b03a 	or	r16,r16,r14
  80f644:	7a5fc83a 	sub	r15,r15,r9
  80f648:	00002306 	br	80f6d8 <__subdf3+0x5b0>
  80f64c:	7361c83a 	sub	r16,r14,r13
  80f650:	4be7c83a 	sub	r19,r9,r15
  80f654:	7409803a 	cmpltu	r4,r14,r16
  80f658:	9927c83a 	sub	r19,r19,r4
  80f65c:	9880202c 	andhi	r2,r19,128
  80f660:	1000411e 	bne	r2,zero,80f768 <__subdf3+0x640>
  80f664:	84c4b03a 	or	r2,r16,r19
  80f668:	103eed1e 	bne	r2,zero,80f220 <__subdf3+0xf8>
  80f66c:	0013883a 	mov	r9,zero
  80f670:	0023883a 	mov	r17,zero
  80f674:	003f8306 	br	80f484 <__subdf3+0x35c>
  80f678:	04800084 	movi	r18,2
  80f67c:	00bfe034 	movhi	r2,65408
  80f680:	10bfffc4 	addi	r2,r2,-1
  80f684:	8006d07a 	srli	r3,r16,1
  80f688:	2088703a 	and	r4,r4,r2
  80f68c:	200497fa 	slli	r2,r4,31
  80f690:	8400004c 	andi	r16,r16,1
  80f694:	1c20b03a 	or	r16,r3,r16
  80f698:	2008d07a 	srli	r4,r4,1
  80f69c:	1420b03a 	or	r16,r2,r16
  80f6a0:	003ef806 	br	80f284 <__subdf3+0x15c>
  80f6a4:	1c3ff804 	addi	r16,r3,-32
  80f6a8:	18800820 	cmpeqi	r2,r3,32
  80f6ac:	7c0ad83a 	srl	r5,r15,r16
  80f6b0:	1000041e 	bne	r2,zero,80f6c4 <__subdf3+0x59c>
  80f6b4:	00801004 	movi	r2,64
  80f6b8:	10c5c83a 	sub	r2,r2,r3
  80f6bc:	7884983a 	sll	r2,r15,r2
  80f6c0:	689ab03a 	or	r13,r13,r2
  80f6c4:	6820c03a 	cmpne	r16,r13,zero
  80f6c8:	8160b03a 	or	r16,r16,r5
  80f6cc:	003ecc06 	br	80f200 <__subdf3+0xd8>
  80f6d0:	4b92b03a 	or	r9,r9,r14
  80f6d4:	4820c03a 	cmpne	r16,r9,zero
  80f6d8:	6c21c83a 	sub	r16,r13,r16
  80f6dc:	6c09803a 	cmpltu	r4,r13,r16
  80f6e0:	7909c83a 	sub	r4,r15,r4
  80f6e4:	4025883a 	mov	r18,r8
  80f6e8:	003ec806 	br	80f20c <__subdf3+0xe4>
  80f6ec:	4b84b03a 	or	r2,r9,r14
  80f6f0:	10007e26 	beq	r2,zero,80f8ec <__subdf3+0x7c4>
  80f6f4:	18bfffc4 	addi	r2,r3,-1
  80f6f8:	1000a726 	beq	r2,zero,80f998 <__subdf3+0x870>
  80f6fc:	18c1ffd8 	cmpnei	r3,r3,2047
  80f700:	18003826 	beq	r3,zero,80f7e4 <__subdf3+0x6bc>
  80f704:	1007883a 	mov	r3,r2
  80f708:	003f9206 	br	80f554 <__subdf3+0x42c>
  80f70c:	00800804 	movi	r2,32
  80f710:	10c5c83a 	sub	r2,r2,r3
  80f714:	78a0983a 	sll	r16,r15,r2
  80f718:	68c8d83a 	srl	r4,r13,r3
  80f71c:	689a983a 	sll	r13,r13,r2
  80f720:	78c4d83a 	srl	r2,r15,r3
  80f724:	8120b03a 	or	r16,r16,r4
  80f728:	681ac03a 	cmpne	r13,r13,zero
  80f72c:	8360b03a 	or	r16,r16,r13
  80f730:	4893883a 	add	r9,r9,r2
  80f734:	003f5a06 	br	80f4a0 <__subdf3+0x378>
  80f738:	10c1ffe0 	cmpeqi	r3,r2,2047
  80f73c:	183f601e 	bne	r3,zero,80f4c0 <__subdf3+0x398>
  80f740:	735b883a 	add	r13,r14,r13
  80f744:	6b9d803a 	cmpltu	r14,r13,r14
  80f748:	4bc9883a 	add	r4,r9,r15
  80f74c:	2389883a 	add	r4,r4,r14
  80f750:	202097fa 	slli	r16,r4,31
  80f754:	681ad07a 	srli	r13,r13,1
  80f758:	2008d07a 	srli	r4,r4,1
  80f75c:	1025883a 	mov	r18,r2
  80f760:	8360b03a 	or	r16,r16,r13
  80f764:	003f3e06 	br	80f460 <__subdf3+0x338>
  80f768:	6ba1c83a 	sub	r16,r13,r14
  80f76c:	7a49c83a 	sub	r4,r15,r9
  80f770:	6c1b803a 	cmpltu	r13,r13,r16
  80f774:	2367c83a 	sub	r19,r4,r13
  80f778:	5823883a 	mov	r17,r11
  80f77c:	003ea806 	br	80f220 <__subdf3+0xf8>
  80f780:	7808977a 	slli	r4,r15,29
  80f784:	00880034 	movhi	r2,8192
  80f788:	10bfffc4 	addi	r2,r2,-1
  80f78c:	308c703a 	and	r6,r6,r2
  80f790:	7812d0fa 	srli	r9,r15,3
  80f794:	3104b03a 	or	r2,r6,r4
  80f798:	003f3806 	br	80f47c <__subdf3+0x354>
  80f79c:	28005a1e 	bne	r5,zero,80f908 <__subdf3+0x7e0>
  80f7a0:	10008526 	beq	r2,zero,80f9b8 <__subdf3+0x890>
  80f7a4:	7806977a 	slli	r3,r15,29
  80f7a8:	00880034 	movhi	r2,8192
  80f7ac:	10bfffc4 	addi	r2,r2,-1
  80f7b0:	3084703a 	and	r2,r6,r2
  80f7b4:	7812d0fa 	srli	r9,r15,3
  80f7b8:	10c4b03a 	or	r2,r2,r3
  80f7bc:	5823883a 	mov	r17,r11
  80f7c0:	003f4906 	br	80f4e8 <__subdf3+0x3c0>
  80f7c4:	7361883a 	add	r16,r14,r13
  80f7c8:	4bc9883a 	add	r4,r9,r15
  80f7cc:	839d803a 	cmpltu	r14,r16,r14
  80f7d0:	2389883a 	add	r4,r4,r14
  80f7d4:	2080202c 	andhi	r2,r4,128
  80f7d8:	103fa71e 	bne	r2,zero,80f678 <__subdf3+0x550>
  80f7dc:	04800044 	movi	r18,1
  80f7e0:	003f1f06 	br	80f460 <__subdf3+0x338>
  80f7e4:	7806977a 	slli	r3,r15,29
  80f7e8:	00880034 	movhi	r2,8192
  80f7ec:	10bfffc4 	addi	r2,r2,-1
  80f7f0:	3084703a 	and	r2,r6,r2
  80f7f4:	7812d0fa 	srli	r9,r15,3
  80f7f8:	10c4b03a 	or	r2,r2,r3
  80f7fc:	003f3a06 	br	80f4e8 <__subdf3+0x3c0>
  80f800:	7361c83a 	sub	r16,r14,r13
  80f804:	4bc9c83a 	sub	r4,r9,r15
  80f808:	741d803a 	cmpltu	r14,r14,r16
  80f80c:	2389c83a 	sub	r4,r4,r14
  80f810:	04800044 	movi	r18,1
  80f814:	003e7d06 	br	80f20c <__subdf3+0xe4>
  80f818:	480a977a 	slli	r5,r9,29
  80f81c:	00880034 	movhi	r2,8192
  80f820:	10bfffc4 	addi	r2,r2,-1
  80f824:	2084703a 	and	r2,r4,r2
  80f828:	4812d0fa 	srli	r9,r9,3
  80f82c:	1144b03a 	or	r2,r2,r5
  80f830:	003f1406 	br	80f484 <__subdf3+0x35c>
  80f834:	4b92b03a 	or	r9,r9,r14
  80f838:	4820c03a 	cmpne	r16,r9,zero
  80f83c:	003f5306 	br	80f58c <__subdf3+0x464>
  80f840:	1c3ff804 	addi	r16,r3,-32
  80f844:	19000820 	cmpeqi	r4,r3,32
  80f848:	4c04d83a 	srl	r2,r9,r16
  80f84c:	2000041e 	bne	r4,zero,80f860 <__subdf3+0x738>
  80f850:	01001004 	movi	r4,64
  80f854:	20c7c83a 	sub	r3,r4,r3
  80f858:	48d2983a 	sll	r9,r9,r3
  80f85c:	725cb03a 	or	r14,r14,r9
  80f860:	7020c03a 	cmpne	r16,r14,zero
  80f864:	80a0b03a 	or	r16,r16,r2
  80f868:	003f9b06 	br	80f6d8 <__subdf3+0x5b0>
  80f86c:	103fdd26 	beq	r2,zero,80f7e4 <__subdf3+0x6bc>
  80f870:	7b5ab03a 	or	r13,r15,r13
  80f874:	480a977a 	slli	r5,r9,29
  80f878:	4812d0fa 	srli	r9,r9,3
  80f87c:	6800251e 	bne	r13,zero,80f914 <__subdf3+0x7ec>
  80f880:	00880034 	movhi	r2,8192
  80f884:	10bfffc4 	addi	r2,r2,-1
  80f888:	2084703a 	and	r2,r4,r2
  80f88c:	1144b03a 	or	r2,r2,r5
  80f890:	003f1506 	br	80f4e8 <__subdf3+0x3c0>
  80f894:	103f7526 	beq	r2,zero,80f66c <__subdf3+0x544>
  80f898:	7808977a 	slli	r4,r15,29
  80f89c:	00880034 	movhi	r2,8192
  80f8a0:	10bfffc4 	addi	r2,r2,-1
  80f8a4:	3084703a 	and	r2,r6,r2
  80f8a8:	7812d0fa 	srli	r9,r15,3
  80f8ac:	1104b03a 	or	r2,r2,r4
  80f8b0:	5823883a 	mov	r17,r11
  80f8b4:	003ef306 	br	80f484 <__subdf3+0x35c>
  80f8b8:	6ba1c83a 	sub	r16,r13,r14
  80f8bc:	7a49c83a 	sub	r4,r15,r9
  80f8c0:	6c1b803a 	cmpltu	r13,r13,r16
  80f8c4:	2349c83a 	sub	r4,r4,r13
  80f8c8:	04800044 	movi	r18,1
  80f8cc:	003e4f06 	br	80f20c <__subdf3+0xe4>
  80f8d0:	4806977a 	slli	r3,r9,29
  80f8d4:	00880034 	movhi	r2,8192
  80f8d8:	10bfffc4 	addi	r2,r2,-1
  80f8dc:	2084703a 	and	r2,r4,r2
  80f8e0:	4812d0fa 	srli	r9,r9,3
  80f8e4:	10c4b03a 	or	r2,r2,r3
  80f8e8:	003eff06 	br	80f4e8 <__subdf3+0x3c0>
  80f8ec:	7808977a 	slli	r4,r15,29
  80f8f0:	00880034 	movhi	r2,8192
  80f8f4:	10bfffc4 	addi	r2,r2,-1
  80f8f8:	3084703a 	and	r2,r6,r2
  80f8fc:	7812d0fa 	srli	r9,r15,3
  80f900:	1104b03a 	or	r2,r2,r4
  80f904:	003edd06 	br	80f47c <__subdf3+0x354>
  80f908:	480a977a 	slli	r5,r9,29
  80f90c:	4812d0fa 	srli	r9,r9,3
  80f910:	103fdb26 	beq	r2,zero,80f880 <__subdf3+0x758>
  80f914:	00c80034 	movhi	r3,8192
  80f918:	18ffffc4 	addi	r3,r3,-1
  80f91c:	20c4703a 	and	r2,r4,r3
  80f920:	4900022c 	andhi	r4,r9,8
  80f924:	1144b03a 	or	r2,r2,r5
  80f928:	203eef26 	beq	r4,zero,80f4e8 <__subdf3+0x3c0>
  80f92c:	7808d0fa 	srli	r4,r15,3
  80f930:	2140022c 	andhi	r5,r4,8
  80f934:	283eec1e 	bne	r5,zero,80f4e8 <__subdf3+0x3c0>
  80f938:	7804977a 	slli	r2,r15,29
  80f93c:	30cc703a 	and	r6,r6,r3
  80f940:	5823883a 	mov	r17,r11
  80f944:	3084b03a 	or	r2,r6,r2
  80f948:	2013883a 	mov	r9,r4
  80f94c:	003ee606 	br	80f4e8 <__subdf3+0x3c0>
  80f950:	7808977a 	slli	r4,r15,29
  80f954:	00880034 	movhi	r2,8192
  80f958:	10bfffc4 	addi	r2,r2,-1
  80f95c:	3084703a 	and	r2,r6,r2
  80f960:	7812d0fa 	srli	r9,r15,3
  80f964:	1104b03a 	or	r2,r2,r4
  80f968:	003ec606 	br	80f484 <__subdf3+0x35c>
  80f96c:	18bff804 	addi	r2,r3,-32
  80f970:	19000820 	cmpeqi	r4,r3,32
  80f974:	4884d83a 	srl	r2,r9,r2
  80f978:	2000041e 	bne	r4,zero,80f98c <__subdf3+0x864>
  80f97c:	01001004 	movi	r4,64
  80f980:	20c7c83a 	sub	r3,r4,r3
  80f984:	48d2983a 	sll	r9,r9,r3
  80f988:	725cb03a 	or	r14,r14,r9
  80f98c:	7020c03a 	cmpne	r16,r14,zero
  80f990:	80a0b03a 	or	r16,r16,r2
  80f994:	003efd06 	br	80f58c <__subdf3+0x464>
  80f998:	7361883a 	add	r16,r14,r13
  80f99c:	4bc9883a 	add	r4,r9,r15
  80f9a0:	835b803a 	cmpltu	r13,r16,r13
  80f9a4:	2349883a 	add	r4,r4,r13
  80f9a8:	003f8a06 	br	80f7d4 <__subdf3+0x6ac>
  80f9ac:	8104b03a 	or	r2,r16,r4
  80f9b0:	103f2e26 	beq	r2,zero,80f66c <__subdf3+0x544>
  80f9b4:	003eaa06 	br	80f460 <__subdf3+0x338>
  80f9b8:	02400434 	movhi	r9,16
  80f9bc:	0023883a 	mov	r17,zero
  80f9c0:	00bfffc4 	movi	r2,-1
  80f9c4:	4a7fffc4 	addi	r9,r9,-1
  80f9c8:	003ec906 	br	80f4f0 <__subdf3+0x3c8>
  80f9cc:	0005883a 	mov	r2,zero
  80f9d0:	00c1ffc4 	movi	r3,2047
  80f9d4:	0009883a 	mov	r4,zero
  80f9d8:	003e4106 	br	80f2e0 <__subdf3+0x1b8>

0080f9dc <__unorddf2>:
  80f9dc:	2806d53a 	srli	r3,r5,20
  80f9e0:	3810d53a 	srli	r8,r7,20
  80f9e4:	02400434 	movhi	r9,16
  80f9e8:	18c1ffcc 	andi	r3,r3,2047
  80f9ec:	4a7fffc4 	addi	r9,r9,-1
  80f9f0:	18c1ffd8 	cmpnei	r3,r3,2047
  80f9f4:	2a4a703a 	and	r5,r5,r9
  80f9f8:	3a4e703a 	and	r7,r7,r9
  80f9fc:	4201ffcc 	andi	r8,r8,2047
  80fa00:	18000426 	beq	r3,zero,80fa14 <__unorddf2+0x38>
  80fa04:	4201ffd8 	cmpnei	r8,r8,2047
  80fa08:	40000626 	beq	r8,zero,80fa24 <__unorddf2+0x48>
  80fa0c:	0005883a 	mov	r2,zero
  80fa10:	f800283a 	ret
  80fa14:	290ab03a 	or	r5,r5,r4
  80fa18:	283ffa26 	beq	r5,zero,80fa04 <__unorddf2+0x28>
  80fa1c:	00800044 	movi	r2,1
  80fa20:	f800283a 	ret
  80fa24:	398eb03a 	or	r7,r7,r6
  80fa28:	3804c03a 	cmpne	r2,r7,zero
  80fa2c:	f800283a 	ret

0080fa30 <__fixdfsi>:
  80fa30:	2806d53a 	srli	r3,r5,20
  80fa34:	01800434 	movhi	r6,16
  80fa38:	31bfffc4 	addi	r6,r6,-1
  80fa3c:	18c1ffcc 	andi	r3,r3,2047
  80fa40:	19c0ffd0 	cmplti	r7,r3,1023
  80fa44:	2810d7fa 	srli	r8,r5,31
  80fa48:	298a703a 	and	r5,r5,r6
  80fa4c:	3800061e 	bne	r7,zero,80fa68 <__fixdfsi+0x38>
  80fa50:	18810790 	cmplti	r2,r3,1054
  80fa54:	1000061e 	bne	r2,zero,80fa70 <__fixdfsi+0x40>
  80fa58:	00a00034 	movhi	r2,32768
  80fa5c:	10bfffc4 	addi	r2,r2,-1
  80fa60:	4085883a 	add	r2,r8,r2
  80fa64:	f800283a 	ret
  80fa68:	0005883a 	mov	r2,zero
  80fa6c:	f800283a 	ret
  80fa70:	01810cc4 	movi	r6,1075
  80fa74:	30cdc83a 	sub	r6,r6,r3
  80fa78:	30800808 	cmpgei	r2,r6,32
  80fa7c:	29400434 	orhi	r5,r5,16
  80fa80:	1000071e 	bne	r2,zero,80faa0 <__fixdfsi+0x70>
  80fa84:	18befb44 	addi	r2,r3,-1043
  80fa88:	2884983a 	sll	r2,r5,r2
  80fa8c:	2188d83a 	srl	r4,r4,r6
  80fa90:	1104b03a 	or	r2,r2,r4
  80fa94:	403ff526 	beq	r8,zero,80fa6c <__fixdfsi+0x3c>
  80fa98:	0085c83a 	sub	r2,zero,r2
  80fa9c:	f800283a 	ret
  80faa0:	008104c4 	movi	r2,1043
  80faa4:	10c5c83a 	sub	r2,r2,r3
  80faa8:	2884d83a 	srl	r2,r5,r2
  80faac:	003ff906 	br	80fa94 <__fixdfsi+0x64>

0080fab0 <__floatsidf>:
  80fab0:	defffd04 	addi	sp,sp,-12
  80fab4:	dfc00215 	stw	ra,8(sp)
  80fab8:	dc400115 	stw	r17,4(sp)
  80fabc:	dc000015 	stw	r16,0(sp)
  80fac0:	20001326 	beq	r4,zero,80fb10 <__floatsidf+0x60>
  80fac4:	2022d7fa 	srli	r17,r4,31
  80fac8:	2021883a 	mov	r16,r4
  80facc:	20002416 	blt	r4,zero,80fb60 <__floatsidf+0xb0>
  80fad0:	8009883a 	mov	r4,r16
  80fad4:	0802aa40 	call	802aa4 <__clzsi2>
  80fad8:	01010784 	movi	r4,1054
  80fadc:	2089c83a 	sub	r4,r4,r2
  80fae0:	114002c8 	cmpgei	r5,r2,11
  80fae4:	20c1ffcc 	andi	r3,r4,2047
  80fae8:	2800161e 	bne	r5,zero,80fb44 <__floatsidf+0x94>
  80faec:	010002c4 	movi	r4,11
  80faf0:	2089c83a 	sub	r4,r4,r2
  80faf4:	810ad83a 	srl	r5,r16,r4
  80faf8:	01000434 	movhi	r4,16
  80fafc:	10800544 	addi	r2,r2,21
  80fb00:	213fffc4 	addi	r4,r4,-1
  80fb04:	8084983a 	sll	r2,r16,r2
  80fb08:	290a703a 	and	r5,r5,r4
  80fb0c:	00000406 	br	80fb20 <__floatsidf+0x70>
  80fb10:	0023883a 	mov	r17,zero
  80fb14:	0007883a 	mov	r3,zero
  80fb18:	000b883a 	mov	r5,zero
  80fb1c:	0005883a 	mov	r2,zero
  80fb20:	1808953a 	slli	r4,r3,20
  80fb24:	880697fa 	slli	r3,r17,31
  80fb28:	2148b03a 	or	r4,r4,r5
  80fb2c:	20c6b03a 	or	r3,r4,r3
  80fb30:	dfc00217 	ldw	ra,8(sp)
  80fb34:	dc400117 	ldw	r17,4(sp)
  80fb38:	dc000017 	ldw	r16,0(sp)
  80fb3c:	dec00304 	addi	sp,sp,12
  80fb40:	f800283a 	ret
  80fb44:	10bffd44 	addi	r2,r2,-11
  80fb48:	808a983a 	sll	r5,r16,r2
  80fb4c:	00800434 	movhi	r2,16
  80fb50:	10bfffc4 	addi	r2,r2,-1
  80fb54:	288a703a 	and	r5,r5,r2
  80fb58:	0005883a 	mov	r2,zero
  80fb5c:	003ff006 	br	80fb20 <__floatsidf+0x70>
  80fb60:	0121c83a 	sub	r16,zero,r4
  80fb64:	003fda06 	br	80fad0 <__floatsidf+0x20>

0080fb68 <__floatunsidf>:
  80fb68:	defffe04 	addi	sp,sp,-8
  80fb6c:	dc000015 	stw	r16,0(sp)
  80fb70:	dfc00115 	stw	ra,4(sp)
  80fb74:	2021883a 	mov	r16,r4
  80fb78:	20000f26 	beq	r4,zero,80fbb8 <__floatunsidf+0x50>
  80fb7c:	0802aa40 	call	802aa4 <__clzsi2>
  80fb80:	00c10784 	movi	r3,1054
  80fb84:	1887c83a 	sub	r3,r3,r2
  80fb88:	110002c8 	cmpgei	r4,r2,11
  80fb8c:	18c1ffcc 	andi	r3,r3,2047
  80fb90:	2000121e 	bne	r4,zero,80fbdc <__floatunsidf+0x74>
  80fb94:	014002c4 	movi	r5,11
  80fb98:	288bc83a 	sub	r5,r5,r2
  80fb9c:	814ad83a 	srl	r5,r16,r5
  80fba0:	01000434 	movhi	r4,16
  80fba4:	10800544 	addi	r2,r2,21
  80fba8:	213fffc4 	addi	r4,r4,-1
  80fbac:	80a0983a 	sll	r16,r16,r2
  80fbb0:	290a703a 	and	r5,r5,r4
  80fbb4:	00000206 	br	80fbc0 <__floatunsidf+0x58>
  80fbb8:	0007883a 	mov	r3,zero
  80fbbc:	000b883a 	mov	r5,zero
  80fbc0:	1806953a 	slli	r3,r3,20
  80fbc4:	8005883a 	mov	r2,r16
  80fbc8:	1946b03a 	or	r3,r3,r5
  80fbcc:	dfc00117 	ldw	ra,4(sp)
  80fbd0:	dc000017 	ldw	r16,0(sp)
  80fbd4:	dec00204 	addi	sp,sp,8
  80fbd8:	f800283a 	ret
  80fbdc:	117ffd44 	addi	r5,r2,-11
  80fbe0:	814a983a 	sll	r5,r16,r5
  80fbe4:	00800434 	movhi	r2,16
  80fbe8:	10bfffc4 	addi	r2,r2,-1
  80fbec:	288a703a 	and	r5,r5,r2
  80fbf0:	0021883a 	mov	r16,zero
  80fbf4:	003ff206 	br	80fbc0 <__floatunsidf+0x58>

0080fbf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbf8:	defffe04 	addi	sp,sp,-8
  80fbfc:	dfc00115 	stw	ra,4(sp)
  80fc00:	df000015 	stw	fp,0(sp)
  80fc04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fc08:	d0a01117 	ldw	r2,-32700(gp)
  80fc0c:	10000326 	beq	r2,zero,80fc1c <alt_get_errno+0x24>
  80fc10:	d0a01117 	ldw	r2,-32700(gp)
  80fc14:	103ee83a 	callr	r2
  80fc18:	00000106 	br	80fc20 <alt_get_errno+0x28>
  80fc1c:	d0a71804 	addi	r2,gp,-25504
}
  80fc20:	e037883a 	mov	sp,fp
  80fc24:	dfc00117 	ldw	ra,4(sp)
  80fc28:	df000017 	ldw	fp,0(sp)
  80fc2c:	dec00204 	addi	sp,sp,8
  80fc30:	f800283a 	ret

0080fc34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fc34:	defffb04 	addi	sp,sp,-20
  80fc38:	dfc00415 	stw	ra,16(sp)
  80fc3c:	df000315 	stw	fp,12(sp)
  80fc40:	df000304 	addi	fp,sp,12
  80fc44:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fc48:	e0bffd17 	ldw	r2,-12(fp)
  80fc4c:	10000916 	blt	r2,zero,80fc74 <close+0x40>
  80fc50:	e0fffd17 	ldw	r3,-12(fp)
  80fc54:	1805883a 	mov	r2,r3
  80fc58:	1085883a 	add	r2,r2,r2
  80fc5c:	10c5883a 	add	r2,r2,r3
  80fc60:	100490ba 	slli	r2,r2,2
  80fc64:	00c02074 	movhi	r3,129
  80fc68:	18ce9704 	addi	r3,r3,14940
  80fc6c:	10c5883a 	add	r2,r2,r3
  80fc70:	00000106 	br	80fc78 <close+0x44>
  80fc74:	0005883a 	mov	r2,zero
  80fc78:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80fc7c:	e0bfff17 	ldw	r2,-4(fp)
  80fc80:	10001926 	beq	r2,zero,80fce8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fc84:	e0bfff17 	ldw	r2,-4(fp)
  80fc88:	10800017 	ldw	r2,0(r2)
  80fc8c:	10800417 	ldw	r2,16(r2)
  80fc90:	10000626 	beq	r2,zero,80fcac <close+0x78>
  80fc94:	e0bfff17 	ldw	r2,-4(fp)
  80fc98:	10800017 	ldw	r2,0(r2)
  80fc9c:	10800417 	ldw	r2,16(r2)
  80fca0:	e13fff17 	ldw	r4,-4(fp)
  80fca4:	103ee83a 	callr	r2
  80fca8:	00000106 	br	80fcb0 <close+0x7c>
  80fcac:	0005883a 	mov	r2,zero
  80fcb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80fcb4:	e13ffd17 	ldw	r4,-12(fp)
  80fcb8:	08104f00 	call	8104f0 <alt_release_fd>
    if (rval < 0)
  80fcbc:	e0bffe17 	ldw	r2,-8(fp)
  80fcc0:	1000070e 	bge	r2,zero,80fce0 <close+0xac>
    {
      ALT_ERRNO = -rval;
  80fcc4:	080fbf80 	call	80fbf8 <alt_get_errno>
  80fcc8:	1007883a 	mov	r3,r2
  80fccc:	e0bffe17 	ldw	r2,-8(fp)
  80fcd0:	0085c83a 	sub	r2,zero,r2
  80fcd4:	18800015 	stw	r2,0(r3)
      return -1;
  80fcd8:	00bfffc4 	movi	r2,-1
  80fcdc:	00000706 	br	80fcfc <close+0xc8>
    }
    return 0;
  80fce0:	0005883a 	mov	r2,zero
  80fce4:	00000506 	br	80fcfc <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fce8:	080fbf80 	call	80fbf8 <alt_get_errno>
  80fcec:	1007883a 	mov	r3,r2
  80fcf0:	00801444 	movi	r2,81
  80fcf4:	18800015 	stw	r2,0(r3)
    return -1;
  80fcf8:	00bfffc4 	movi	r2,-1
  }
}
  80fcfc:	e037883a 	mov	sp,fp
  80fd00:	dfc00117 	ldw	ra,4(sp)
  80fd04:	df000017 	ldw	fp,0(sp)
  80fd08:	dec00204 	addi	sp,sp,8
  80fd0c:	f800283a 	ret

0080fd10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fd10:	defffc04 	addi	sp,sp,-16
  80fd14:	df000315 	stw	fp,12(sp)
  80fd18:	df000304 	addi	fp,sp,12
  80fd1c:	e13fff15 	stw	r4,-4(fp)
  80fd20:	e17ffe15 	stw	r5,-8(fp)
  80fd24:	e1bffd15 	stw	r6,-12(fp)
  return len;
  80fd28:	e0bffd17 	ldw	r2,-12(fp)
}
  80fd2c:	e037883a 	mov	sp,fp
  80fd30:	df000017 	ldw	fp,0(sp)
  80fd34:	dec00104 	addi	sp,sp,4
  80fd38:	f800283a 	ret

0080fd3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fd3c:	defffd04 	addi	sp,sp,-12
  80fd40:	df000215 	stw	fp,8(sp)
  80fd44:	df000204 	addi	fp,sp,8
  80fd48:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80fd4c:	0001883a 	nop
  80fd50:	e0bffe17 	ldw	r2,-8(fp)
  80fd54:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80fd58:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fd5c:	10000226 	beq	r2,zero,80fd68 <_exit+0x2c>
    ALT_SIM_FAIL();
  80fd60:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  80fd64:	00000106 	br	80fd6c <_exit+0x30>
    ALT_SIM_PASS();
  80fd68:	002af0b0 	cmpltui	zero,zero,43970
}
  80fd6c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80fd70:	003fff06 	br	80fd70 <_exit+0x34>

0080fd74 <alt_get_errno>:
{
  80fd74:	defffe04 	addi	sp,sp,-8
  80fd78:	dfc00115 	stw	ra,4(sp)
  80fd7c:	df000015 	stw	fp,0(sp)
  80fd80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fd84:	d0a01117 	ldw	r2,-32700(gp)
  80fd88:	10000326 	beq	r2,zero,80fd98 <alt_get_errno+0x24>
  80fd8c:	d0a01117 	ldw	r2,-32700(gp)
  80fd90:	103ee83a 	callr	r2
  80fd94:	00000106 	br	80fd9c <alt_get_errno+0x28>
  80fd98:	d0a71804 	addi	r2,gp,-25504
}
  80fd9c:	e037883a 	mov	sp,fp
  80fda0:	dfc00117 	ldw	ra,4(sp)
  80fda4:	df000017 	ldw	fp,0(sp)
  80fda8:	dec00204 	addi	sp,sp,8
  80fdac:	f800283a 	ret

0080fdb0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fdb0:	defffb04 	addi	sp,sp,-20
  80fdb4:	dfc00415 	stw	ra,16(sp)
  80fdb8:	df000315 	stw	fp,12(sp)
  80fdbc:	df000304 	addi	fp,sp,12
  80fdc0:	e13ffe15 	stw	r4,-8(fp)
  80fdc4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fdc8:	e0bffe17 	ldw	r2,-8(fp)
  80fdcc:	10000916 	blt	r2,zero,80fdf4 <fstat+0x44>
  80fdd0:	e0fffe17 	ldw	r3,-8(fp)
  80fdd4:	1805883a 	mov	r2,r3
  80fdd8:	1085883a 	add	r2,r2,r2
  80fddc:	10c5883a 	add	r2,r2,r3
  80fde0:	100490ba 	slli	r2,r2,2
  80fde4:	00c02074 	movhi	r3,129
  80fde8:	18ce9704 	addi	r3,r3,14940
  80fdec:	10c5883a 	add	r2,r2,r3
  80fdf0:	00000106 	br	80fdf8 <fstat+0x48>
  80fdf4:	0005883a 	mov	r2,zero
  80fdf8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80fdfc:	e0bfff17 	ldw	r2,-4(fp)
  80fe00:	10001026 	beq	r2,zero,80fe44 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80fe04:	e0bfff17 	ldw	r2,-4(fp)
  80fe08:	10800017 	ldw	r2,0(r2)
  80fe0c:	10800817 	ldw	r2,32(r2)
  80fe10:	10000726 	beq	r2,zero,80fe30 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  80fe14:	e0bfff17 	ldw	r2,-4(fp)
  80fe18:	10800017 	ldw	r2,0(r2)
  80fe1c:	10800817 	ldw	r2,32(r2)
  80fe20:	e17ffd17 	ldw	r5,-12(fp)
  80fe24:	e13fff17 	ldw	r4,-4(fp)
  80fe28:	103ee83a 	callr	r2
  80fe2c:	00000a06 	br	80fe58 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fe30:	e0bffd17 	ldw	r2,-12(fp)
  80fe34:	00c80004 	movi	r3,8192
  80fe38:	10c00115 	stw	r3,4(r2)
      return 0;
  80fe3c:	0005883a 	mov	r2,zero
  80fe40:	00000506 	br	80fe58 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fe44:	080fd740 	call	80fd74 <alt_get_errno>
  80fe48:	1007883a 	mov	r3,r2
  80fe4c:	00801444 	movi	r2,81
  80fe50:	18800015 	stw	r2,0(r3)
    return -1;
  80fe54:	00bfffc4 	movi	r2,-1
  }
}
  80fe58:	e037883a 	mov	sp,fp
  80fe5c:	dfc00117 	ldw	ra,4(sp)
  80fe60:	df000017 	ldw	fp,0(sp)
  80fe64:	dec00204 	addi	sp,sp,8
  80fe68:	f800283a 	ret

0080fe6c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80fe6c:	deffff04 	addi	sp,sp,-4
  80fe70:	df000015 	stw	fp,0(sp)
  80fe74:	d839883a 	mov	fp,sp
  return 0;
  80fe78:	0005883a 	mov	r2,zero
}
  80fe7c:	e037883a 	mov	sp,fp
  80fe80:	df000017 	ldw	fp,0(sp)
  80fe84:	dec00104 	addi	sp,sp,4
  80fe88:	f800283a 	ret

0080fe8c <alt_get_errno>:
{
  80fe8c:	defffe04 	addi	sp,sp,-8
  80fe90:	dfc00115 	stw	ra,4(sp)
  80fe94:	df000015 	stw	fp,0(sp)
  80fe98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fe9c:	d0a01117 	ldw	r2,-32700(gp)
  80fea0:	10000326 	beq	r2,zero,80feb0 <alt_get_errno+0x24>
  80fea4:	d0a01117 	ldw	r2,-32700(gp)
  80fea8:	103ee83a 	callr	r2
  80feac:	00000106 	br	80feb4 <alt_get_errno+0x28>
  80feb0:	d0a71804 	addi	r2,gp,-25504
}
  80feb4:	e037883a 	mov	sp,fp
  80feb8:	dfc00117 	ldw	ra,4(sp)
  80febc:	df000017 	ldw	fp,0(sp)
  80fec0:	dec00204 	addi	sp,sp,8
  80fec4:	f800283a 	ret

0080fec8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80fec8:	deffea04 	addi	sp,sp,-88
  80fecc:	dfc01515 	stw	ra,84(sp)
  80fed0:	df001415 	stw	fp,80(sp)
  80fed4:	df001404 	addi	fp,sp,80
  80fed8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fedc:	e0bfec17 	ldw	r2,-80(fp)
  80fee0:	10000916 	blt	r2,zero,80ff08 <isatty+0x40>
  80fee4:	e0ffec17 	ldw	r3,-80(fp)
  80fee8:	1805883a 	mov	r2,r3
  80feec:	1085883a 	add	r2,r2,r2
  80fef0:	10c5883a 	add	r2,r2,r3
  80fef4:	100490ba 	slli	r2,r2,2
  80fef8:	00c02074 	movhi	r3,129
  80fefc:	18ce9704 	addi	r3,r3,14940
  80ff00:	10c5883a 	add	r2,r2,r3
  80ff04:	00000106 	br	80ff0c <isatty+0x44>
  80ff08:	0005883a 	mov	r2,zero
  80ff0c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80ff10:	e0bfff17 	ldw	r2,-4(fp)
  80ff14:	10000e26 	beq	r2,zero,80ff50 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ff18:	e0bfff17 	ldw	r2,-4(fp)
  80ff1c:	10800017 	ldw	r2,0(r2)
  80ff20:	10800817 	ldw	r2,32(r2)
  80ff24:	1000021e 	bne	r2,zero,80ff30 <isatty+0x68>
    {
      return 1;
  80ff28:	00800044 	movi	r2,1
  80ff2c:	00000d06 	br	80ff64 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ff30:	e0bfed04 	addi	r2,fp,-76
  80ff34:	100b883a 	mov	r5,r2
  80ff38:	e13fec17 	ldw	r4,-80(fp)
  80ff3c:	080fdb00 	call	80fdb0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ff40:	e0bfee17 	ldw	r2,-72(fp)
  80ff44:	10880020 	cmpeqi	r2,r2,8192
  80ff48:	10803fcc 	andi	r2,r2,255
  80ff4c:	00000506 	br	80ff64 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ff50:	080fe8c0 	call	80fe8c <alt_get_errno>
  80ff54:	1007883a 	mov	r3,r2
  80ff58:	00801444 	movi	r2,81
  80ff5c:	18800015 	stw	r2,0(r3)
    return 0;
  80ff60:	0005883a 	mov	r2,zero
  }
}
  80ff64:	e037883a 	mov	sp,fp
  80ff68:	dfc00117 	ldw	ra,4(sp)
  80ff6c:	df000017 	ldw	fp,0(sp)
  80ff70:	dec00204 	addi	sp,sp,8
  80ff74:	f800283a 	ret

0080ff78 <alt_get_errno>:
{
  80ff78:	defffe04 	addi	sp,sp,-8
  80ff7c:	dfc00115 	stw	ra,4(sp)
  80ff80:	df000015 	stw	fp,0(sp)
  80ff84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ff88:	d0a01117 	ldw	r2,-32700(gp)
  80ff8c:	10000326 	beq	r2,zero,80ff9c <alt_get_errno+0x24>
  80ff90:	d0a01117 	ldw	r2,-32700(gp)
  80ff94:	103ee83a 	callr	r2
  80ff98:	00000106 	br	80ffa0 <alt_get_errno+0x28>
  80ff9c:	d0a71804 	addi	r2,gp,-25504
}
  80ffa0:	e037883a 	mov	sp,fp
  80ffa4:	dfc00117 	ldw	ra,4(sp)
  80ffa8:	df000017 	ldw	fp,0(sp)
  80ffac:	dec00204 	addi	sp,sp,8
  80ffb0:	f800283a 	ret

0080ffb4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80ffb4:	defffb04 	addi	sp,sp,-20
  80ffb8:	dfc00415 	stw	ra,16(sp)
  80ffbc:	df000315 	stw	fp,12(sp)
  80ffc0:	df000304 	addi	fp,sp,12
  80ffc4:	e13ffe15 	stw	r4,-8(fp)
  80ffc8:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  80ffcc:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  80ffd0:	e0bffe17 	ldw	r2,-8(fp)
  80ffd4:	00802e16 	blt	zero,r2,810090 <kill+0xdc>
  80ffd8:	e0bffd17 	ldw	r2,-12(fp)
  80ffdc:	10800828 	cmpgeui	r2,r2,32
  80ffe0:	1000281e 	bne	r2,zero,810084 <kill+0xd0>
  80ffe4:	e0bffd17 	ldw	r2,-12(fp)
  80ffe8:	100690ba 	slli	r3,r2,2
  80ffec:	00802074 	movhi	r2,129
  80fff0:	1885883a 	add	r2,r3,r2
  80fff4:	10bfff17 	ldw	r2,-4(r2)
  80fff8:	1000683a 	jmp	r2
  80fffc:	008100a4 	muli	r2,zero,1026
  810000:	00810084 	movi	r2,1026
  810004:	00810084 	movi	r2,1026
  810008:	0081007c 	xorhi	r2,zero,1025
  81000c:	0081007c 	xorhi	r2,zero,1025
  810010:	0081007c 	xorhi	r2,zero,1025
  810014:	0081007c 	xorhi	r2,zero,1025
  810018:	00810084 	movi	r2,1026
  81001c:	0081007c 	xorhi	r2,zero,1025
  810020:	0081007c 	xorhi	r2,zero,1025
  810024:	0081007c 	xorhi	r2,zero,1025
  810028:	0081007c 	xorhi	r2,zero,1025
  81002c:	0081007c 	xorhi	r2,zero,1025
  810030:	0081007c 	xorhi	r2,zero,1025
  810034:	0081007c 	xorhi	r2,zero,1025
  810038:	0081007c 	xorhi	r2,zero,1025
  81003c:	008100a4 	muli	r2,zero,1026
  810040:	00810084 	movi	r2,1026
  810044:	00810084 	movi	r2,1026
  810048:	00810084 	movi	r2,1026
  81004c:	008100a4 	muli	r2,zero,1026
  810050:	00810084 	movi	r2,1026
  810054:	00810084 	movi	r2,1026
  810058:	0081007c 	xorhi	r2,zero,1025
  81005c:	0081007c 	xorhi	r2,zero,1025
  810060:	0081007c 	xorhi	r2,zero,1025
  810064:	0081007c 	xorhi	r2,zero,1025
  810068:	0081007c 	xorhi	r2,zero,1025
  81006c:	00810084 	movi	r2,1026
  810070:	00810084 	movi	r2,1026
  810074:	0081007c 	xorhi	r2,zero,1025
  810078:	0081007c 	xorhi	r2,zero,1025
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  81007c:	0009883a 	mov	r4,zero
  810080:	080fd3c0 	call	80fd3c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  810084:	00800584 	movi	r2,22
  810088:	e0bfff15 	stw	r2,-4(fp)
  81008c:	00000606 	br	8100a8 <kill+0xf4>
    }
  }

  else if (pid > 0)
  810090:	e0bffe17 	ldw	r2,-8(fp)
  810094:	0080040e 	bge	zero,r2,8100a8 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  810098:	008000c4 	movi	r2,3
  81009c:	e0bfff15 	stw	r2,-4(fp)
  8100a0:	00000106 	br	8100a8 <kill+0xf4>
      break;
  8100a4:	0001883a 	nop
  }

  if (status)
  8100a8:	e0bfff17 	ldw	r2,-4(fp)
  8100ac:	10000626 	beq	r2,zero,8100c8 <kill+0x114>
  {
    ALT_ERRNO = status;
  8100b0:	080ff780 	call	80ff78 <alt_get_errno>
  8100b4:	1007883a 	mov	r3,r2
  8100b8:	e0bfff17 	ldw	r2,-4(fp)
  8100bc:	18800015 	stw	r2,0(r3)
    return -1;
  8100c0:	00bfffc4 	movi	r2,-1
  8100c4:	00000106 	br	8100cc <kill+0x118>
  }

  return 0;
  8100c8:	0005883a 	mov	r2,zero
}
  8100cc:	e037883a 	mov	sp,fp
  8100d0:	dfc00117 	ldw	ra,4(sp)
  8100d4:	df000017 	ldw	fp,0(sp)
  8100d8:	dec00204 	addi	sp,sp,8
  8100dc:	f800283a 	ret

008100e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8100e0:	defffc04 	addi	sp,sp,-16
  8100e4:	df000315 	stw	fp,12(sp)
  8100e8:	df000304 	addi	fp,sp,12
  8100ec:	e13fff15 	stw	r4,-4(fp)
  8100f0:	e17ffe15 	stw	r5,-8(fp)
  8100f4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  8100f8:	e0fffe17 	ldw	r3,-8(fp)
  8100fc:	e0bfff17 	ldw	r2,-4(fp)
  810100:	18800c26 	beq	r3,r2,810134 <alt_load_section+0x54>
  {
    while( to != end )
  810104:	00000806 	br	810128 <alt_load_section+0x48>
    {
      *to++ = *from++;
  810108:	e0ffff17 	ldw	r3,-4(fp)
  81010c:	18800104 	addi	r2,r3,4
  810110:	e0bfff15 	stw	r2,-4(fp)
  810114:	e0bffe17 	ldw	r2,-8(fp)
  810118:	11000104 	addi	r4,r2,4
  81011c:	e13ffe15 	stw	r4,-8(fp)
  810120:	18c00017 	ldw	r3,0(r3)
  810124:	10c00015 	stw	r3,0(r2)
    while( to != end )
  810128:	e0fffe17 	ldw	r3,-8(fp)
  81012c:	e0bffd17 	ldw	r2,-12(fp)
  810130:	18bff51e 	bne	r3,r2,810108 <alt_load_section+0x28>
    }
  }
}
  810134:	0001883a 	nop
  810138:	e037883a 	mov	sp,fp
  81013c:	df000017 	ldw	fp,0(sp)
  810140:	dec00104 	addi	sp,sp,4
  810144:	f800283a 	ret

00810148 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810148:	defffe04 	addi	sp,sp,-8
  81014c:	dfc00115 	stw	ra,4(sp)
  810150:	df000015 	stw	fp,0(sp)
  810154:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810158:	01802074 	movhi	r6,129
  81015c:	31932504 	addi	r6,r6,19604
  810160:	01402074 	movhi	r5,129
  810164:	294c2704 	addi	r5,r5,12444
  810168:	01002074 	movhi	r4,129
  81016c:	21132504 	addi	r4,r4,19604
  810170:	08100e00 	call	8100e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810174:	01802034 	movhi	r6,128
  810178:	31808e04 	addi	r6,r6,568
  81017c:	01402034 	movhi	r5,128
  810180:	29400804 	addi	r5,r5,32
  810184:	01002034 	movhi	r4,128
  810188:	21000804 	addi	r4,r4,32
  81018c:	08100e00 	call	8100e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810190:	01802074 	movhi	r6,129
  810194:	318c2704 	addi	r6,r6,12444
  810198:	01402074 	movhi	r5,129
  81019c:	29497004 	addi	r5,r5,9664
  8101a0:	01002074 	movhi	r4,129
  8101a4:	21097004 	addi	r4,r4,9664
  8101a8:	08100e00 	call	8100e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8101ac:	08117340 	call	811734 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8101b0:	081192c0 	call	81192c <alt_icache_flush_all>
}
  8101b4:	0001883a 	nop
  8101b8:	e037883a 	mov	sp,fp
  8101bc:	dfc00117 	ldw	ra,4(sp)
  8101c0:	df000017 	ldw	fp,0(sp)
  8101c4:	dec00204 	addi	sp,sp,8
  8101c8:	f800283a 	ret

008101cc <alt_get_errno>:
{
  8101cc:	defffe04 	addi	sp,sp,-8
  8101d0:	dfc00115 	stw	ra,4(sp)
  8101d4:	df000015 	stw	fp,0(sp)
  8101d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8101dc:	d0a01117 	ldw	r2,-32700(gp)
  8101e0:	10000326 	beq	r2,zero,8101f0 <alt_get_errno+0x24>
  8101e4:	d0a01117 	ldw	r2,-32700(gp)
  8101e8:	103ee83a 	callr	r2
  8101ec:	00000106 	br	8101f4 <alt_get_errno+0x28>
  8101f0:	d0a71804 	addi	r2,gp,-25504
}
  8101f4:	e037883a 	mov	sp,fp
  8101f8:	dfc00117 	ldw	ra,4(sp)
  8101fc:	df000017 	ldw	fp,0(sp)
  810200:	dec00204 	addi	sp,sp,8
  810204:	f800283a 	ret

00810208 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810208:	defff904 	addi	sp,sp,-28
  81020c:	dfc00615 	stw	ra,24(sp)
  810210:	df000515 	stw	fp,20(sp)
  810214:	df000504 	addi	fp,sp,20
  810218:	e13ffd15 	stw	r4,-12(fp)
  81021c:	e17ffc15 	stw	r5,-16(fp)
  810220:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810224:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810228:	e0bffd17 	ldw	r2,-12(fp)
  81022c:	10000916 	blt	r2,zero,810254 <lseek+0x4c>
  810230:	e0fffd17 	ldw	r3,-12(fp)
  810234:	1805883a 	mov	r2,r3
  810238:	1085883a 	add	r2,r2,r2
  81023c:	10c5883a 	add	r2,r2,r3
  810240:	100490ba 	slli	r2,r2,2
  810244:	00c02074 	movhi	r3,129
  810248:	18ce9704 	addi	r3,r3,14940
  81024c:	10c5883a 	add	r2,r2,r3
  810250:	00000106 	br	810258 <lseek+0x50>
  810254:	0005883a 	mov	r2,zero
  810258:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  81025c:	e0bffe17 	ldw	r2,-8(fp)
  810260:	10001026 	beq	r2,zero,8102a4 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810264:	e0bffe17 	ldw	r2,-8(fp)
  810268:	10800017 	ldw	r2,0(r2)
  81026c:	10800717 	ldw	r2,28(r2)
  810270:	10000926 	beq	r2,zero,810298 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810274:	e0bffe17 	ldw	r2,-8(fp)
  810278:	10800017 	ldw	r2,0(r2)
  81027c:	10800717 	ldw	r2,28(r2)
  810280:	e1bffb17 	ldw	r6,-20(fp)
  810284:	e17ffc17 	ldw	r5,-16(fp)
  810288:	e13ffe17 	ldw	r4,-8(fp)
  81028c:	103ee83a 	callr	r2
  810290:	e0bfff15 	stw	r2,-4(fp)
  810294:	00000506 	br	8102ac <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810298:	00bfde84 	movi	r2,-134
  81029c:	e0bfff15 	stw	r2,-4(fp)
  8102a0:	00000206 	br	8102ac <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  8102a4:	00bfebc4 	movi	r2,-81
  8102a8:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  8102ac:	e0bfff17 	ldw	r2,-4(fp)
  8102b0:	1000070e 	bge	r2,zero,8102d0 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  8102b4:	08101cc0 	call	8101cc <alt_get_errno>
  8102b8:	1007883a 	mov	r3,r2
  8102bc:	e0bfff17 	ldw	r2,-4(fp)
  8102c0:	0085c83a 	sub	r2,zero,r2
  8102c4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8102c8:	00bfffc4 	movi	r2,-1
  8102cc:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  8102d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8102d4:	e037883a 	mov	sp,fp
  8102d8:	dfc00117 	ldw	ra,4(sp)
  8102dc:	df000017 	ldw	fp,0(sp)
  8102e0:	dec00204 	addi	sp,sp,8
  8102e4:	f800283a 	ret

008102e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8102e8:	defffd04 	addi	sp,sp,-12
  8102ec:	dfc00215 	stw	ra,8(sp)
  8102f0:	df000115 	stw	fp,4(sp)
  8102f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8102f8:	0009883a 	mov	r4,zero
  8102fc:	08109ec0 	call	8109ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  810300:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810304:	0810a280 	call	810a28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810308:	01802074 	movhi	r6,129
  81030c:	318c1f04 	addi	r6,r6,12412
  810310:	01402074 	movhi	r5,129
  810314:	294c1f04 	addi	r5,r5,12412
  810318:	01002074 	movhi	r4,129
  81031c:	210c1f04 	addi	r4,r4,12412
  810320:	0811ccc0 	call	811ccc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810324:	08118640 	call	811864 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810328:	01002074 	movhi	r4,129
  81032c:	21063204 	addi	r4,r4,6344
  810330:	081235c0 	call	81235c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810334:	d0a71917 	ldw	r2,-25500(gp)
  810338:	d0e71a17 	ldw	r3,-25496(gp)
  81033c:	d1271b17 	ldw	r4,-25492(gp)
  810340:	200d883a 	mov	r6,r4
  810344:	180b883a 	mov	r5,r3
  810348:	1009883a 	mov	r4,r2
  81034c:	08005240 	call	800524 <main>
  810350:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810354:	01000044 	movi	r4,1
  810358:	080fc340 	call	80fc34 <close>
  exit (result);
  81035c:	e13fff17 	ldw	r4,-4(fp)
  810360:	08123700 	call	812370 <exit>

00810364 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810364:	defffe04 	addi	sp,sp,-8
  810368:	df000115 	stw	fp,4(sp)
  81036c:	df000104 	addi	fp,sp,4
  810370:	e13fff15 	stw	r4,-4(fp)
}
  810374:	0001883a 	nop
  810378:	e037883a 	mov	sp,fp
  81037c:	df000017 	ldw	fp,0(sp)
  810380:	dec00104 	addi	sp,sp,4
  810384:	f800283a 	ret

00810388 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810388:	defffe04 	addi	sp,sp,-8
  81038c:	df000115 	stw	fp,4(sp)
  810390:	df000104 	addi	fp,sp,4
  810394:	e13fff15 	stw	r4,-4(fp)
}
  810398:	0001883a 	nop
  81039c:	e037883a 	mov	sp,fp
  8103a0:	df000017 	ldw	fp,0(sp)
  8103a4:	dec00104 	addi	sp,sp,4
  8103a8:	f800283a 	ret

008103ac <alt_get_errno>:
{
  8103ac:	defffe04 	addi	sp,sp,-8
  8103b0:	dfc00115 	stw	ra,4(sp)
  8103b4:	df000015 	stw	fp,0(sp)
  8103b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8103bc:	d0a01117 	ldw	r2,-32700(gp)
  8103c0:	10000326 	beq	r2,zero,8103d0 <alt_get_errno+0x24>
  8103c4:	d0a01117 	ldw	r2,-32700(gp)
  8103c8:	103ee83a 	callr	r2
  8103cc:	00000106 	br	8103d4 <alt_get_errno+0x28>
  8103d0:	d0a71804 	addi	r2,gp,-25504
}
  8103d4:	e037883a 	mov	sp,fp
  8103d8:	dfc00117 	ldw	ra,4(sp)
  8103dc:	df000017 	ldw	fp,0(sp)
  8103e0:	dec00204 	addi	sp,sp,8
  8103e4:	f800283a 	ret

008103e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8103e8:	defff904 	addi	sp,sp,-28
  8103ec:	dfc00615 	stw	ra,24(sp)
  8103f0:	df000515 	stw	fp,20(sp)
  8103f4:	df000504 	addi	fp,sp,20
  8103f8:	e13ffd15 	stw	r4,-12(fp)
  8103fc:	e17ffc15 	stw	r5,-16(fp)
  810400:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810404:	e0bffd17 	ldw	r2,-12(fp)
  810408:	10000916 	blt	r2,zero,810430 <read+0x48>
  81040c:	e0fffd17 	ldw	r3,-12(fp)
  810410:	1805883a 	mov	r2,r3
  810414:	1085883a 	add	r2,r2,r2
  810418:	10c5883a 	add	r2,r2,r3
  81041c:	100490ba 	slli	r2,r2,2
  810420:	00c02074 	movhi	r3,129
  810424:	18ce9704 	addi	r3,r3,14940
  810428:	10c5883a 	add	r2,r2,r3
  81042c:	00000106 	br	810434 <read+0x4c>
  810430:	0005883a 	mov	r2,zero
  810434:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810438:	e0bfff17 	ldw	r2,-4(fp)
  81043c:	10002226 	beq	r2,zero,8104c8 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810440:	e0bfff17 	ldw	r2,-4(fp)
  810444:	10800217 	ldw	r2,8(r2)
  810448:	108000cc 	andi	r2,r2,3
  81044c:	10800060 	cmpeqi	r2,r2,1
  810450:	1000181e 	bne	r2,zero,8104b4 <read+0xcc>
        (fd->dev->read))
  810454:	e0bfff17 	ldw	r2,-4(fp)
  810458:	10800017 	ldw	r2,0(r2)
  81045c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810460:	10001426 	beq	r2,zero,8104b4 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810464:	e0bfff17 	ldw	r2,-4(fp)
  810468:	10800017 	ldw	r2,0(r2)
  81046c:	10800517 	ldw	r2,20(r2)
  810470:	e0fffb17 	ldw	r3,-20(fp)
  810474:	180d883a 	mov	r6,r3
  810478:	e17ffc17 	ldw	r5,-16(fp)
  81047c:	e13fff17 	ldw	r4,-4(fp)
  810480:	103ee83a 	callr	r2
  810484:	e0bffe15 	stw	r2,-8(fp)
  810488:	e0bffe17 	ldw	r2,-8(fp)
  81048c:	1000070e 	bge	r2,zero,8104ac <read+0xc4>
        {
          ALT_ERRNO = -rval;
  810490:	08103ac0 	call	8103ac <alt_get_errno>
  810494:	1007883a 	mov	r3,r2
  810498:	e0bffe17 	ldw	r2,-8(fp)
  81049c:	0085c83a 	sub	r2,zero,r2
  8104a0:	18800015 	stw	r2,0(r3)
          return -1;
  8104a4:	00bfffc4 	movi	r2,-1
  8104a8:	00000c06 	br	8104dc <read+0xf4>
        }
        return rval;
  8104ac:	e0bffe17 	ldw	r2,-8(fp)
  8104b0:	00000a06 	br	8104dc <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8104b4:	08103ac0 	call	8103ac <alt_get_errno>
  8104b8:	1007883a 	mov	r3,r2
  8104bc:	00800344 	movi	r2,13
  8104c0:	18800015 	stw	r2,0(r3)
  8104c4:	00000406 	br	8104d8 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8104c8:	08103ac0 	call	8103ac <alt_get_errno>
  8104cc:	1007883a 	mov	r3,r2
  8104d0:	00801444 	movi	r2,81
  8104d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8104d8:	00bfffc4 	movi	r2,-1
}
  8104dc:	e037883a 	mov	sp,fp
  8104e0:	dfc00117 	ldw	ra,4(sp)
  8104e4:	df000017 	ldw	fp,0(sp)
  8104e8:	dec00204 	addi	sp,sp,8
  8104ec:	f800283a 	ret

008104f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8104f0:	defffe04 	addi	sp,sp,-8
  8104f4:	df000115 	stw	fp,4(sp)
  8104f8:	df000104 	addi	fp,sp,4
  8104fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810500:	e0bfff17 	ldw	r2,-4(fp)
  810504:	108000d0 	cmplti	r2,r2,3
  810508:	1000101e 	bne	r2,zero,81054c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  81050c:	e0ffff17 	ldw	r3,-4(fp)
  810510:	1805883a 	mov	r2,r3
  810514:	1085883a 	add	r2,r2,r2
  810518:	10c5883a 	add	r2,r2,r3
  81051c:	100490ba 	slli	r2,r2,2
  810520:	00c02074 	movhi	r3,129
  810524:	10c7883a 	add	r3,r2,r3
  810528:	180e9915 	stw	zero,14948(r3)
    alt_fd_list[fd].dev      = 0;
  81052c:	e0ffff17 	ldw	r3,-4(fp)
  810530:	1805883a 	mov	r2,r3
  810534:	1085883a 	add	r2,r2,r2
  810538:	10c5883a 	add	r2,r2,r3
  81053c:	100490ba 	slli	r2,r2,2
  810540:	00c02074 	movhi	r3,129
  810544:	10c7883a 	add	r3,r2,r3
  810548:	180e9715 	stw	zero,14940(r3)
  }
}
  81054c:	0001883a 	nop
  810550:	e037883a 	mov	sp,fp
  810554:	df000017 	ldw	fp,0(sp)
  810558:	dec00104 	addi	sp,sp,4
  81055c:	f800283a 	ret

00810560 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810560:	defff904 	addi	sp,sp,-28
  810564:	df000615 	stw	fp,24(sp)
  810568:	df000604 	addi	fp,sp,24
  81056c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  810570:	0005303a 	rdctl	r2,status
  810574:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810578:	e0fffd17 	ldw	r3,-12(fp)
  81057c:	00bfff84 	movi	r2,-2
  810580:	1884703a 	and	r2,r3,r2
  810584:	1001703a 	wrctl	status,r2
  return context;
  810588:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81058c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810590:	d0a01217 	ldw	r2,-32696(gp)
  810594:	10c000c4 	addi	r3,r2,3
  810598:	00bfff04 	movi	r2,-4
  81059c:	1884703a 	and	r2,r3,r2
  8105a0:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8105a4:	d0e01217 	ldw	r3,-32696(gp)
  8105a8:	e0bffa17 	ldw	r2,-24(fp)
  8105ac:	1887883a 	add	r3,r3,r2
  8105b0:	00804034 	movhi	r2,256
  8105b4:	10800004 	addi	r2,r2,0
  8105b8:	10c0072e 	bgeu	r2,r3,8105d8 <sbrk+0x78>
  8105bc:	e0bfff17 	ldw	r2,-4(fp)
  8105c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  8105c4:	e0bffc17 	ldw	r2,-16(fp)
  8105c8:	1001703a 	wrctl	status,r2
}
  8105cc:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8105d0:	00bfffc4 	movi	r2,-1
  8105d4:	00000c06 	br	810608 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8105d8:	d0a01217 	ldw	r2,-32696(gp)
  8105dc:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  8105e0:	d0e01217 	ldw	r3,-32696(gp)
  8105e4:	e0bffa17 	ldw	r2,-24(fp)
  8105e8:	1885883a 	add	r2,r3,r2
  8105ec:	d0a01215 	stw	r2,-32696(gp)
  8105f0:	e0bfff17 	ldw	r2,-4(fp)
  8105f4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  8105f8:	e0bffb17 	ldw	r2,-20(fp)
  8105fc:	1001703a 	wrctl	status,r2
}
  810600:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  810604:	e0bffe17 	ldw	r2,-8(fp)
} 
  810608:	e037883a 	mov	sp,fp
  81060c:	df000017 	ldw	fp,0(sp)
  810610:	dec00104 	addi	sp,sp,4
  810614:	f800283a 	ret

00810618 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  810618:	defffa04 	addi	sp,sp,-24
  81061c:	df000515 	stw	fp,20(sp)
  810620:	df000504 	addi	fp,sp,20
  810624:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  810628:	0005303a 	rdctl	r2,status
  81062c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810630:	e0fffc17 	ldw	r3,-16(fp)
  810634:	00bfff84 	movi	r2,-2
  810638:	1884703a 	and	r2,r3,r2
  81063c:	1001703a 	wrctl	status,r2
  return context;
  810640:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  810644:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  810648:	e0bffb17 	ldw	r2,-20(fp)
  81064c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  810650:	e0bffd17 	ldw	r2,-12(fp)
  810654:	10800017 	ldw	r2,0(r2)
  810658:	e0fffd17 	ldw	r3,-12(fp)
  81065c:	18c00117 	ldw	r3,4(r3)
  810660:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810664:	e0bffd17 	ldw	r2,-12(fp)
  810668:	10800117 	ldw	r2,4(r2)
  81066c:	e0fffd17 	ldw	r3,-12(fp)
  810670:	18c00017 	ldw	r3,0(r3)
  810674:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810678:	e0bffd17 	ldw	r2,-12(fp)
  81067c:	e0fffd17 	ldw	r3,-12(fp)
  810680:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810684:	e0bffd17 	ldw	r2,-12(fp)
  810688:	e0fffd17 	ldw	r3,-12(fp)
  81068c:	10c00015 	stw	r3,0(r2)
} 
  810690:	0001883a 	nop
  810694:	e0bfff17 	ldw	r2,-4(fp)
  810698:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  81069c:	e0bffe17 	ldw	r2,-8(fp)
  8106a0:	1001703a 	wrctl	status,r2
}
  8106a4:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  8106a8:	0001883a 	nop
  8106ac:	e037883a 	mov	sp,fp
  8106b0:	df000017 	ldw	fp,0(sp)
  8106b4:	dec00104 	addi	sp,sp,4
  8106b8:	f800283a 	ret

008106bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8106bc:	defffb04 	addi	sp,sp,-20
  8106c0:	dfc00415 	stw	ra,16(sp)
  8106c4:	df000315 	stw	fp,12(sp)
  8106c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8106cc:	d0a01317 	ldw	r2,-32692(gp)
  8106d0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8106d4:	d0a71d17 	ldw	r2,-25484(gp)
  8106d8:	10800044 	addi	r2,r2,1
  8106dc:	d0a71d15 	stw	r2,-25484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8106e0:	00002e06 	br	81079c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8106e4:	e0bfff17 	ldw	r2,-4(fp)
  8106e8:	10800017 	ldw	r2,0(r2)
  8106ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8106f0:	e0bfff17 	ldw	r2,-4(fp)
  8106f4:	10800403 	ldbu	r2,16(r2)
  8106f8:	10803fcc 	andi	r2,r2,255
  8106fc:	10000426 	beq	r2,zero,810710 <alt_tick+0x54>
  810700:	d0a71d17 	ldw	r2,-25484(gp)
  810704:	1000021e 	bne	r2,zero,810710 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  810708:	e0bfff17 	ldw	r2,-4(fp)
  81070c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  810710:	e0bfff17 	ldw	r2,-4(fp)
  810714:	10800217 	ldw	r2,8(r2)
  810718:	d0e71d17 	ldw	r3,-25484(gp)
  81071c:	18801d36 	bltu	r3,r2,810794 <alt_tick+0xd8>
  810720:	e0bfff17 	ldw	r2,-4(fp)
  810724:	10800403 	ldbu	r2,16(r2)
  810728:	10803fcc 	andi	r2,r2,255
  81072c:	1000191e 	bne	r2,zero,810794 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  810730:	e0bfff17 	ldw	r2,-4(fp)
  810734:	10800317 	ldw	r2,12(r2)
  810738:	e0ffff17 	ldw	r3,-4(fp)
  81073c:	18c00517 	ldw	r3,20(r3)
  810740:	1809883a 	mov	r4,r3
  810744:	103ee83a 	callr	r2
  810748:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81074c:	e0bffd17 	ldw	r2,-12(fp)
  810750:	1000031e 	bne	r2,zero,810760 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810754:	e13fff17 	ldw	r4,-4(fp)
  810758:	08106180 	call	810618 <alt_alarm_stop>
  81075c:	00000d06 	br	810794 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810760:	e0bfff17 	ldw	r2,-4(fp)
  810764:	10c00217 	ldw	r3,8(r2)
  810768:	e0bffd17 	ldw	r2,-12(fp)
  81076c:	1887883a 	add	r3,r3,r2
  810770:	e0bfff17 	ldw	r2,-4(fp)
  810774:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810778:	e0bfff17 	ldw	r2,-4(fp)
  81077c:	10c00217 	ldw	r3,8(r2)
  810780:	d0a71d17 	ldw	r2,-25484(gp)
  810784:	1880032e 	bgeu	r3,r2,810794 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810788:	e0bfff17 	ldw	r2,-4(fp)
  81078c:	00c00044 	movi	r3,1
  810790:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810794:	e0bffe17 	ldw	r2,-8(fp)
  810798:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  81079c:	e0ffff17 	ldw	r3,-4(fp)
  8107a0:	d0a01304 	addi	r2,gp,-32692
  8107a4:	18bfcf1e 	bne	r3,r2,8106e4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8107a8:	0001883a 	nop
}
  8107ac:	0001883a 	nop
  8107b0:	e037883a 	mov	sp,fp
  8107b4:	dfc00117 	ldw	ra,4(sp)
  8107b8:	df000017 	ldw	fp,0(sp)
  8107bc:	dec00204 	addi	sp,sp,8
  8107c0:	f800283a 	ret

008107c4 <alt_get_errno>:
{
  8107c4:	defffe04 	addi	sp,sp,-8
  8107c8:	dfc00115 	stw	ra,4(sp)
  8107cc:	df000015 	stw	fp,0(sp)
  8107d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8107d4:	d0a01117 	ldw	r2,-32700(gp)
  8107d8:	10000326 	beq	r2,zero,8107e8 <alt_get_errno+0x24>
  8107dc:	d0a01117 	ldw	r2,-32700(gp)
  8107e0:	103ee83a 	callr	r2
  8107e4:	00000106 	br	8107ec <alt_get_errno+0x28>
  8107e8:	d0a71804 	addi	r2,gp,-25504
}
  8107ec:	e037883a 	mov	sp,fp
  8107f0:	dfc00117 	ldw	ra,4(sp)
  8107f4:	df000017 	ldw	fp,0(sp)
  8107f8:	dec00204 	addi	sp,sp,8
  8107fc:	f800283a 	ret

00810800 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  810800:	defffc04 	addi	sp,sp,-16
  810804:	dfc00315 	stw	ra,12(sp)
  810808:	df000215 	stw	fp,8(sp)
  81080c:	df000204 	addi	fp,sp,8
  810810:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810814:	d0a71d17 	ldw	r2,-25484(gp)
  clock_t ticks = alt_nticks(); 
  810818:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
  81081c:	d0a71c17 	ldw	r2,-25488(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  810820:	1000061e 	bne	r2,zero,81083c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  810824:	08107c40 	call	8107c4 <alt_get_errno>
  810828:	1007883a 	mov	r3,r2
  81082c:	00801604 	movi	r2,88
  810830:	18800015 	stw	r2,0(r3)
    return 0;
  810834:	0005883a 	mov	r2,zero
  810838:	00000a06 	br	810864 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  81083c:	e0bffe17 	ldw	r2,-8(fp)
  810840:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	e0ffff17 	ldw	r3,-4(fp)
  81084c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  810850:	e0bffe17 	ldw	r2,-8(fp)
  810854:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  810858:	e0bffe17 	ldw	r2,-8(fp)
  81085c:	10000315 	stw	zero,12(r2)

  return ticks;
  810860:	e0bfff17 	ldw	r2,-4(fp)
}
  810864:	e037883a 	mov	sp,fp
  810868:	dfc00117 	ldw	ra,4(sp)
  81086c:	df000017 	ldw	fp,0(sp)
  810870:	dec00204 	addi	sp,sp,8
  810874:	f800283a 	ret

00810878 <alt_get_errno>:
{
  810878:	defffe04 	addi	sp,sp,-8
  81087c:	dfc00115 	stw	ra,4(sp)
  810880:	df000015 	stw	fp,0(sp)
  810884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810888:	d0a01117 	ldw	r2,-32700(gp)
  81088c:	10000326 	beq	r2,zero,81089c <alt_get_errno+0x24>
  810890:	d0a01117 	ldw	r2,-32700(gp)
  810894:	103ee83a 	callr	r2
  810898:	00000106 	br	8108a0 <alt_get_errno+0x28>
  81089c:	d0a71804 	addi	r2,gp,-25504
}
  8108a0:	e037883a 	mov	sp,fp
  8108a4:	dfc00117 	ldw	ra,4(sp)
  8108a8:	df000017 	ldw	fp,0(sp)
  8108ac:	dec00204 	addi	sp,sp,8
  8108b0:	f800283a 	ret

008108b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8108b4:	defff904 	addi	sp,sp,-28
  8108b8:	dfc00615 	stw	ra,24(sp)
  8108bc:	df000515 	stw	fp,20(sp)
  8108c0:	df000504 	addi	fp,sp,20
  8108c4:	e13ffd15 	stw	r4,-12(fp)
  8108c8:	e17ffc15 	stw	r5,-16(fp)
  8108cc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8108d0:	e0bffd17 	ldw	r2,-12(fp)
  8108d4:	10000916 	blt	r2,zero,8108fc <write+0x48>
  8108d8:	e0fffd17 	ldw	r3,-12(fp)
  8108dc:	1805883a 	mov	r2,r3
  8108e0:	1085883a 	add	r2,r2,r2
  8108e4:	10c5883a 	add	r2,r2,r3
  8108e8:	100490ba 	slli	r2,r2,2
  8108ec:	00c02074 	movhi	r3,129
  8108f0:	18ce9704 	addi	r3,r3,14940
  8108f4:	10c5883a 	add	r2,r2,r3
  8108f8:	00000106 	br	810900 <write+0x4c>
  8108fc:	0005883a 	mov	r2,zero
  810900:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  810904:	e0bfff17 	ldw	r2,-4(fp)
  810908:	10002126 	beq	r2,zero,810990 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81090c:	e0bfff17 	ldw	r2,-4(fp)
  810910:	10800217 	ldw	r2,8(r2)
  810914:	108000cc 	andi	r2,r2,3
  810918:	10001826 	beq	r2,zero,81097c <write+0xc8>
  81091c:	e0bfff17 	ldw	r2,-4(fp)
  810920:	10800017 	ldw	r2,0(r2)
  810924:	10800617 	ldw	r2,24(r2)
  810928:	10001426 	beq	r2,zero,81097c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81092c:	e0bfff17 	ldw	r2,-4(fp)
  810930:	10800017 	ldw	r2,0(r2)
  810934:	10800617 	ldw	r2,24(r2)
  810938:	e0fffb17 	ldw	r3,-20(fp)
  81093c:	180d883a 	mov	r6,r3
  810940:	e17ffc17 	ldw	r5,-16(fp)
  810944:	e13fff17 	ldw	r4,-4(fp)
  810948:	103ee83a 	callr	r2
  81094c:	e0bffe15 	stw	r2,-8(fp)
  810950:	e0bffe17 	ldw	r2,-8(fp)
  810954:	1000070e 	bge	r2,zero,810974 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  810958:	08108780 	call	810878 <alt_get_errno>
  81095c:	1007883a 	mov	r3,r2
  810960:	e0bffe17 	ldw	r2,-8(fp)
  810964:	0085c83a 	sub	r2,zero,r2
  810968:	18800015 	stw	r2,0(r3)
        return -1;
  81096c:	00bfffc4 	movi	r2,-1
  810970:	00000c06 	br	8109a4 <write+0xf0>
      }
      return rval;
  810974:	e0bffe17 	ldw	r2,-8(fp)
  810978:	00000a06 	br	8109a4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81097c:	08108780 	call	810878 <alt_get_errno>
  810980:	1007883a 	mov	r3,r2
  810984:	00800344 	movi	r2,13
  810988:	18800015 	stw	r2,0(r3)
  81098c:	00000406 	br	8109a0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810990:	08108780 	call	810878 <alt_get_errno>
  810994:	1007883a 	mov	r3,r2
  810998:	00801444 	movi	r2,81
  81099c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8109a0:	00bfffc4 	movi	r2,-1
}
  8109a4:	e037883a 	mov	sp,fp
  8109a8:	dfc00117 	ldw	ra,4(sp)
  8109ac:	df000017 	ldw	fp,0(sp)
  8109b0:	dec00204 	addi	sp,sp,8
  8109b4:	f800283a 	ret

008109b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8109b8:	defffd04 	addi	sp,sp,-12
  8109bc:	dfc00215 	stw	ra,8(sp)
  8109c0:	df000115 	stw	fp,4(sp)
  8109c4:	df000104 	addi	fp,sp,4
  8109c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8109cc:	d1600e04 	addi	r5,gp,-32712
  8109d0:	e13fff17 	ldw	r4,-4(fp)
  8109d4:	08117bc0 	call	8117bc <alt_dev_llist_insert>
}
  8109d8:	e037883a 	mov	sp,fp
  8109dc:	dfc00117 	ldw	ra,4(sp)
  8109e0:	df000017 	ldw	fp,0(sp)
  8109e4:	dec00204 	addi	sp,sp,8
  8109e8:	f800283a 	ret

008109ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8109ec:	defffd04 	addi	sp,sp,-12
  8109f0:	dfc00215 	stw	ra,8(sp)
  8109f4:	df000115 	stw	fp,4(sp)
  8109f8:	df000104 	addi	fp,sp,4
  8109fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  810a00:	0811fc00 	call	811fc0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810a04:	00800044 	movi	r2,1
  810a08:	1001703a 	wrctl	status,r2
}
  810a0c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  810a10:	0001883a 	nop
  810a14:	e037883a 	mov	sp,fp
  810a18:	dfc00117 	ldw	ra,4(sp)
  810a1c:	df000017 	ldw	fp,0(sp)
  810a20:	dec00204 	addi	sp,sp,8
  810a24:	f800283a 	ret

00810a28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810a28:	defffe04 	addi	sp,sp,-8
  810a2c:	dfc00115 	stw	ra,4(sp)
  810a30:	df000015 	stw	fp,0(sp)
  810a34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  810a38:	01c0fa04 	movi	r7,1000
  810a3c:	01800044 	movi	r6,1
  810a40:	000b883a 	mov	r5,zero
  810a44:	01004034 	movhi	r4,256
  810a48:	21040004 	addi	r4,r4,4096
  810a4c:	081157c0 	call	81157c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810a50:	01800404 	movi	r6,16
  810a54:	000b883a 	mov	r5,zero
  810a58:	01002074 	movhi	r4,129
  810a5c:	210f0104 	addi	r4,r4,15364
  810a60:	0810bf00 	call	810bf0 <altera_avalon_jtag_uart_init>
  810a64:	01002074 	movhi	r4,129
  810a68:	210ef704 	addi	r4,r4,15324
  810a6c:	08109b80 	call	8109b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  810a70:	0001883a 	nop
}
  810a74:	0001883a 	nop
  810a78:	e037883a 	mov	sp,fp
  810a7c:	dfc00117 	ldw	ra,4(sp)
  810a80:	df000017 	ldw	fp,0(sp)
  810a84:	dec00204 	addi	sp,sp,8
  810a88:	f800283a 	ret

00810a8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810a8c:	defffa04 	addi	sp,sp,-24
  810a90:	dfc00515 	stw	ra,20(sp)
  810a94:	df000415 	stw	fp,16(sp)
  810a98:	df000404 	addi	fp,sp,16
  810a9c:	e13ffe15 	stw	r4,-8(fp)
  810aa0:	e17ffd15 	stw	r5,-12(fp)
  810aa4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810aa8:	e0bffe17 	ldw	r2,-8(fp)
  810aac:	10800017 	ldw	r2,0(r2)
  810ab0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810ab4:	e0bfff17 	ldw	r2,-4(fp)
  810ab8:	10c00a04 	addi	r3,r2,40
  810abc:	e0bffe17 	ldw	r2,-8(fp)
  810ac0:	10800217 	ldw	r2,8(r2)
  810ac4:	100f883a 	mov	r7,r2
  810ac8:	e1bffc17 	ldw	r6,-16(fp)
  810acc:	e17ffd17 	ldw	r5,-12(fp)
  810ad0:	1809883a 	mov	r4,r3
  810ad4:	08110b80 	call	8110b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810ad8:	e037883a 	mov	sp,fp
  810adc:	dfc00117 	ldw	ra,4(sp)
  810ae0:	df000017 	ldw	fp,0(sp)
  810ae4:	dec00204 	addi	sp,sp,8
  810ae8:	f800283a 	ret

00810aec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810aec:	defffa04 	addi	sp,sp,-24
  810af0:	dfc00515 	stw	ra,20(sp)
  810af4:	df000415 	stw	fp,16(sp)
  810af8:	df000404 	addi	fp,sp,16
  810afc:	e13ffe15 	stw	r4,-8(fp)
  810b00:	e17ffd15 	stw	r5,-12(fp)
  810b04:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810b08:	e0bffe17 	ldw	r2,-8(fp)
  810b0c:	10800017 	ldw	r2,0(r2)
  810b10:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810b14:	e0bfff17 	ldw	r2,-4(fp)
  810b18:	10c00a04 	addi	r3,r2,40
  810b1c:	e0bffe17 	ldw	r2,-8(fp)
  810b20:	10800217 	ldw	r2,8(r2)
  810b24:	100f883a 	mov	r7,r2
  810b28:	e1bffc17 	ldw	r6,-16(fp)
  810b2c:	e17ffd17 	ldw	r5,-12(fp)
  810b30:	1809883a 	mov	r4,r3
  810b34:	08112d80 	call	8112d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810b38:	e037883a 	mov	sp,fp
  810b3c:	dfc00117 	ldw	ra,4(sp)
  810b40:	df000017 	ldw	fp,0(sp)
  810b44:	dec00204 	addi	sp,sp,8
  810b48:	f800283a 	ret

00810b4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810b4c:	defffc04 	addi	sp,sp,-16
  810b50:	dfc00315 	stw	ra,12(sp)
  810b54:	df000215 	stw	fp,8(sp)
  810b58:	df000204 	addi	fp,sp,8
  810b5c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810b60:	e0bffe17 	ldw	r2,-8(fp)
  810b64:	10800017 	ldw	r2,0(r2)
  810b68:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810b6c:	e0bfff17 	ldw	r2,-4(fp)
  810b70:	10c00a04 	addi	r3,r2,40
  810b74:	e0bffe17 	ldw	r2,-8(fp)
  810b78:	10800217 	ldw	r2,8(r2)
  810b7c:	100b883a 	mov	r5,r2
  810b80:	1809883a 	mov	r4,r3
  810b84:	0810f5c0 	call	810f5c <altera_avalon_jtag_uart_close>
}
  810b88:	e037883a 	mov	sp,fp
  810b8c:	dfc00117 	ldw	ra,4(sp)
  810b90:	df000017 	ldw	fp,0(sp)
  810b94:	dec00204 	addi	sp,sp,8
  810b98:	f800283a 	ret

00810b9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810b9c:	defffa04 	addi	sp,sp,-24
  810ba0:	dfc00515 	stw	ra,20(sp)
  810ba4:	df000415 	stw	fp,16(sp)
  810ba8:	df000404 	addi	fp,sp,16
  810bac:	e13ffe15 	stw	r4,-8(fp)
  810bb0:	e17ffd15 	stw	r5,-12(fp)
  810bb4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810bb8:	e0bffe17 	ldw	r2,-8(fp)
  810bbc:	10800017 	ldw	r2,0(r2)
  810bc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810bc4:	e0bfff17 	ldw	r2,-4(fp)
  810bc8:	10800a04 	addi	r2,r2,40
  810bcc:	e1bffc17 	ldw	r6,-16(fp)
  810bd0:	e17ffd17 	ldw	r5,-12(fp)
  810bd4:	1009883a 	mov	r4,r2
  810bd8:	0810fc40 	call	810fc4 <altera_avalon_jtag_uart_ioctl>
}
  810bdc:	e037883a 	mov	sp,fp
  810be0:	dfc00117 	ldw	ra,4(sp)
  810be4:	df000017 	ldw	fp,0(sp)
  810be8:	dec00204 	addi	sp,sp,8
  810bec:	f800283a 	ret

00810bf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810bf0:	defffa04 	addi	sp,sp,-24
  810bf4:	dfc00515 	stw	ra,20(sp)
  810bf8:	df000415 	stw	fp,16(sp)
  810bfc:	df000404 	addi	fp,sp,16
  810c00:	e13fff15 	stw	r4,-4(fp)
  810c04:	e17ffe15 	stw	r5,-8(fp)
  810c08:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810c0c:	e0bfff17 	ldw	r2,-4(fp)
  810c10:	00c00044 	movi	r3,1
  810c14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810c18:	e0bfff17 	ldw	r2,-4(fp)
  810c1c:	10800017 	ldw	r2,0(r2)
  810c20:	10800104 	addi	r2,r2,4
  810c24:	1007883a 	mov	r3,r2
  810c28:	e0bfff17 	ldw	r2,-4(fp)
  810c2c:	10800817 	ldw	r2,32(r2)
  810c30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810c34:	e0bffe17 	ldw	r2,-8(fp)
  810c38:	e0fffd17 	ldw	r3,-12(fp)
  810c3c:	d8000015 	stw	zero,0(sp)
  810c40:	e1ffff17 	ldw	r7,-4(fp)
  810c44:	01802074 	movhi	r6,129
  810c48:	31832c04 	addi	r6,r6,3248
  810c4c:	180b883a 	mov	r5,r3
  810c50:	1009883a 	mov	r4,r2
  810c54:	08119600 	call	811960 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810c58:	e0bfff17 	ldw	r2,-4(fp)
  810c5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810c60:	e0bfff17 	ldw	r2,-4(fp)
  810c64:	10800204 	addi	r2,r2,8
  810c68:	d0e71c17 	ldw	r3,-25488(gp)
  810c6c:	e1ffff17 	ldw	r7,-4(fp)
  810c70:	01802074 	movhi	r6,129
  810c74:	3183af04 	addi	r6,r6,3772
  810c78:	180b883a 	mov	r5,r3
  810c7c:	1009883a 	mov	r4,r2
  810c80:	08116000 	call	811600 <alt_alarm_start>
  810c84:	1000040e 	bge	r2,zero,810c98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810c88:	e0ffff17 	ldw	r3,-4(fp)
  810c8c:	00a00034 	movhi	r2,32768
  810c90:	10bfffc4 	addi	r2,r2,-1
  810c94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810c98:	0001883a 	nop
  810c9c:	e037883a 	mov	sp,fp
  810ca0:	dfc00117 	ldw	ra,4(sp)
  810ca4:	df000017 	ldw	fp,0(sp)
  810ca8:	dec00204 	addi	sp,sp,8
  810cac:	f800283a 	ret

00810cb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810cb0:	defff804 	addi	sp,sp,-32
  810cb4:	df000715 	stw	fp,28(sp)
  810cb8:	df000704 	addi	fp,sp,28
  810cbc:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810cc0:	e0bff917 	ldw	r2,-28(fp)
  810cc4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  810cc8:	e0bffd17 	ldw	r2,-12(fp)
  810ccc:	10800017 	ldw	r2,0(r2)
  810cd0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810cd4:	e0bffc17 	ldw	r2,-16(fp)
  810cd8:	10800104 	addi	r2,r2,4
  810cdc:	10800037 	ldwio	r2,0(r2)
  810ce0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810ce4:	e0bffb17 	ldw	r2,-20(fp)
  810ce8:	1080c00c 	andi	r2,r2,768
  810cec:	10006d26 	beq	r2,zero,810ea4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810cf0:	e0bffb17 	ldw	r2,-20(fp)
  810cf4:	1080400c 	andi	r2,r2,256
  810cf8:	10003526 	beq	r2,zero,810dd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810cfc:	00800074 	movhi	r2,1
  810d00:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810d04:	e0bffd17 	ldw	r2,-12(fp)
  810d08:	10800a17 	ldw	r2,40(r2)
  810d0c:	10800044 	addi	r2,r2,1
  810d10:	1081ffcc 	andi	r2,r2,2047
  810d14:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  810d18:	e0bffd17 	ldw	r2,-12(fp)
  810d1c:	10800b17 	ldw	r2,44(r2)
  810d20:	e0fffa17 	ldw	r3,-24(fp)
  810d24:	18801526 	beq	r3,r2,810d7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810d28:	e0bffc17 	ldw	r2,-16(fp)
  810d2c:	10800037 	ldwio	r2,0(r2)
  810d30:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810d34:	e0bfff17 	ldw	r2,-4(fp)
  810d38:	10a0000c 	andi	r2,r2,32768
  810d3c:	10001126 	beq	r2,zero,810d84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810d40:	e0bffd17 	ldw	r2,-12(fp)
  810d44:	10800a17 	ldw	r2,40(r2)
  810d48:	e0ffff17 	ldw	r3,-4(fp)
  810d4c:	1809883a 	mov	r4,r3
  810d50:	e0fffd17 	ldw	r3,-12(fp)
  810d54:	1885883a 	add	r2,r3,r2
  810d58:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810d5c:	e0bffd17 	ldw	r2,-12(fp)
  810d60:	10800a17 	ldw	r2,40(r2)
  810d64:	10800044 	addi	r2,r2,1
  810d68:	10c1ffcc 	andi	r3,r2,2047
  810d6c:	e0bffd17 	ldw	r2,-12(fp)
  810d70:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810d74:	0001883a 	nop
      {
  810d78:	003fe206 	br	810d04 <altera_avalon_jtag_uart_irq+0x54>
          break;
  810d7c:	0001883a 	nop
  810d80:	00000106 	br	810d88 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  810d84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810d88:	e0bfff17 	ldw	r2,-4(fp)
  810d8c:	10bfffec 	andhi	r2,r2,65535
  810d90:	10000f26 	beq	r2,zero,810dd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810d94:	e0bffd17 	ldw	r2,-12(fp)
  810d98:	10c00817 	ldw	r3,32(r2)
  810d9c:	00bfff84 	movi	r2,-2
  810da0:	1886703a 	and	r3,r3,r2
  810da4:	e0bffd17 	ldw	r2,-12(fp)
  810da8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810dac:	e0bffc17 	ldw	r2,-16(fp)
  810db0:	10800104 	addi	r2,r2,4
  810db4:	1007883a 	mov	r3,r2
  810db8:	e0bffd17 	ldw	r2,-12(fp)
  810dbc:	10800817 	ldw	r2,32(r2)
  810dc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810dc4:	e0bffc17 	ldw	r2,-16(fp)
  810dc8:	10800104 	addi	r2,r2,4
  810dcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810dd0:	e0bffb17 	ldw	r2,-20(fp)
  810dd4:	1080800c 	andi	r2,r2,512
  810dd8:	103fbe26 	beq	r2,zero,810cd4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810ddc:	e0bffb17 	ldw	r2,-20(fp)
  810de0:	1004d43a 	srli	r2,r2,16
  810de4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810de8:	00001406 	br	810e3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810dec:	e0bffc17 	ldw	r2,-16(fp)
  810df0:	e0fffd17 	ldw	r3,-12(fp)
  810df4:	18c00d17 	ldw	r3,52(r3)
  810df8:	e13ffd17 	ldw	r4,-12(fp)
  810dfc:	20c7883a 	add	r3,r4,r3
  810e00:	18c20e03 	ldbu	r3,2104(r3)
  810e04:	18c03fcc 	andi	r3,r3,255
  810e08:	18c0201c 	xori	r3,r3,128
  810e0c:	18ffe004 	addi	r3,r3,-128
  810e10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810e14:	e0bffd17 	ldw	r2,-12(fp)
  810e18:	10800d17 	ldw	r2,52(r2)
  810e1c:	10800044 	addi	r2,r2,1
  810e20:	10c1ffcc 	andi	r3,r2,2047
  810e24:	e0bffd17 	ldw	r2,-12(fp)
  810e28:	10c00d15 	stw	r3,52(r2)
  810e2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810e30:	e0bffe17 	ldw	r2,-8(fp)
  810e34:	10bfffc4 	addi	r2,r2,-1
  810e38:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  810e3c:	e0bffe17 	ldw	r2,-8(fp)
  810e40:	10000526 	beq	r2,zero,810e58 <altera_avalon_jtag_uart_irq+0x1a8>
  810e44:	e0bffd17 	ldw	r2,-12(fp)
  810e48:	10c00d17 	ldw	r3,52(r2)
  810e4c:	e0bffd17 	ldw	r2,-12(fp)
  810e50:	10800c17 	ldw	r2,48(r2)
  810e54:	18bfe51e 	bne	r3,r2,810dec <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  810e58:	e0bffe17 	ldw	r2,-8(fp)
  810e5c:	103f9d26 	beq	r2,zero,810cd4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810e60:	e0bffd17 	ldw	r2,-12(fp)
  810e64:	10c00817 	ldw	r3,32(r2)
  810e68:	00bfff44 	movi	r2,-3
  810e6c:	1886703a 	and	r3,r3,r2
  810e70:	e0bffd17 	ldw	r2,-12(fp)
  810e74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810e78:	e0bffd17 	ldw	r2,-12(fp)
  810e7c:	10800017 	ldw	r2,0(r2)
  810e80:	10800104 	addi	r2,r2,4
  810e84:	1007883a 	mov	r3,r2
  810e88:	e0bffd17 	ldw	r2,-12(fp)
  810e8c:	10800817 	ldw	r2,32(r2)
  810e90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e94:	e0bffc17 	ldw	r2,-16(fp)
  810e98:	10800104 	addi	r2,r2,4
  810e9c:	10800037 	ldwio	r2,0(r2)
  {
  810ea0:	003f8c06 	br	810cd4 <altera_avalon_jtag_uart_irq+0x24>
      break;
  810ea4:	0001883a 	nop
      }
    }
  }
}
  810ea8:	0001883a 	nop
  810eac:	e037883a 	mov	sp,fp
  810eb0:	df000017 	ldw	fp,0(sp)
  810eb4:	dec00104 	addi	sp,sp,4
  810eb8:	f800283a 	ret

00810ebc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810ebc:	defffc04 	addi	sp,sp,-16
  810ec0:	df000315 	stw	fp,12(sp)
  810ec4:	df000304 	addi	fp,sp,12
  810ec8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810ecc:	e0bffd17 	ldw	r2,-12(fp)
  810ed0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810ed4:	e0bfff17 	ldw	r2,-4(fp)
  810ed8:	10800017 	ldw	r2,0(r2)
  810edc:	10800104 	addi	r2,r2,4
  810ee0:	10800037 	ldwio	r2,0(r2)
  810ee4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810ee8:	e0bffe17 	ldw	r2,-8(fp)
  810eec:	1081000c 	andi	r2,r2,1024
  810ef0:	10000b26 	beq	r2,zero,810f20 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810ef4:	e0bfff17 	ldw	r2,-4(fp)
  810ef8:	10800017 	ldw	r2,0(r2)
  810efc:	10800104 	addi	r2,r2,4
  810f00:	1007883a 	mov	r3,r2
  810f04:	e0bfff17 	ldw	r2,-4(fp)
  810f08:	10800817 	ldw	r2,32(r2)
  810f0c:	10810014 	ori	r2,r2,1024
  810f10:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810f14:	e0bfff17 	ldw	r2,-4(fp)
  810f18:	10000915 	stw	zero,36(r2)
  810f1c:	00000a06 	br	810f48 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810f20:	e0bfff17 	ldw	r2,-4(fp)
  810f24:	10c00917 	ldw	r3,36(r2)
  810f28:	00a00034 	movhi	r2,32768
  810f2c:	10bfff04 	addi	r2,r2,-4
  810f30:	10c00536 	bltu	r2,r3,810f48 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810f34:	e0bfff17 	ldw	r2,-4(fp)
  810f38:	10800917 	ldw	r2,36(r2)
  810f3c:	10c00044 	addi	r3,r2,1
  810f40:	e0bfff17 	ldw	r2,-4(fp)
  810f44:	10c00915 	stw	r3,36(r2)
  810f48:	d0a71c17 	ldw	r2,-25488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810f4c:	e037883a 	mov	sp,fp
  810f50:	df000017 	ldw	fp,0(sp)
  810f54:	dec00104 	addi	sp,sp,4
  810f58:	f800283a 	ret

00810f5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810f5c:	defffd04 	addi	sp,sp,-12
  810f60:	df000215 	stw	fp,8(sp)
  810f64:	df000204 	addi	fp,sp,8
  810f68:	e13fff15 	stw	r4,-4(fp)
  810f6c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810f70:	00000506 	br	810f88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810f74:	e0bffe17 	ldw	r2,-8(fp)
  810f78:	1090000c 	andi	r2,r2,16384
  810f7c:	10000226 	beq	r2,zero,810f88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810f80:	00bffd44 	movi	r2,-11
  810f84:	00000b06 	br	810fb4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810f88:	e0bfff17 	ldw	r2,-4(fp)
  810f8c:	10c00d17 	ldw	r3,52(r2)
  810f90:	e0bfff17 	ldw	r2,-4(fp)
  810f94:	10800c17 	ldw	r2,48(r2)
  810f98:	18800526 	beq	r3,r2,810fb0 <altera_avalon_jtag_uart_close+0x54>
  810f9c:	e0bfff17 	ldw	r2,-4(fp)
  810fa0:	10c00917 	ldw	r3,36(r2)
  810fa4:	e0bfff17 	ldw	r2,-4(fp)
  810fa8:	10800117 	ldw	r2,4(r2)
  810fac:	18bff136 	bltu	r3,r2,810f74 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  810fb0:	0005883a 	mov	r2,zero
}
  810fb4:	e037883a 	mov	sp,fp
  810fb8:	df000017 	ldw	fp,0(sp)
  810fbc:	dec00104 	addi	sp,sp,4
  810fc0:	f800283a 	ret

00810fc4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810fc4:	defffa04 	addi	sp,sp,-24
  810fc8:	df000515 	stw	fp,20(sp)
  810fcc:	df000504 	addi	fp,sp,20
  810fd0:	e13ffd15 	stw	r4,-12(fp)
  810fd4:	e17ffc15 	stw	r5,-16(fp)
  810fd8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  810fdc:	00bff9c4 	movi	r2,-25
  810fe0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  810fe4:	e0bffc17 	ldw	r2,-16(fp)
  810fe8:	109a8060 	cmpeqi	r2,r2,27137
  810fec:	1000041e 	bne	r2,zero,811000 <altera_avalon_jtag_uart_ioctl+0x3c>
  810ff0:	e0bffc17 	ldw	r2,-16(fp)
  810ff4:	109a80a0 	cmpeqi	r2,r2,27138
  810ff8:	1000181e 	bne	r2,zero,81105c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  810ffc:	00002906 	br	8110a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  811000:	e0bffd17 	ldw	r2,-12(fp)
  811004:	10c00117 	ldw	r3,4(r2)
  811008:	00a00034 	movhi	r2,32768
  81100c:	10bfffc4 	addi	r2,r2,-1
  811010:	18802126 	beq	r3,r2,811098 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  811014:	e0bffb17 	ldw	r2,-20(fp)
  811018:	10800017 	ldw	r2,0(r2)
  81101c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811020:	e0bffe17 	ldw	r2,-8(fp)
  811024:	10800090 	cmplti	r2,r2,2
  811028:	1000061e 	bne	r2,zero,811044 <altera_avalon_jtag_uart_ioctl+0x80>
  81102c:	e0fffe17 	ldw	r3,-8(fp)
  811030:	00a00034 	movhi	r2,32768
  811034:	10bfffc4 	addi	r2,r2,-1
  811038:	18800226 	beq	r3,r2,811044 <altera_avalon_jtag_uart_ioctl+0x80>
  81103c:	e0bffe17 	ldw	r2,-8(fp)
  811040:	00000206 	br	81104c <altera_avalon_jtag_uart_ioctl+0x88>
  811044:	00a00034 	movhi	r2,32768
  811048:	10bfff84 	addi	r2,r2,-2
  81104c:	e0fffd17 	ldw	r3,-12(fp)
  811050:	18800115 	stw	r2,4(r3)
      rc = 0;
  811054:	e03fff15 	stw	zero,-4(fp)
    break;
  811058:	00000f06 	br	811098 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  81105c:	e0bffd17 	ldw	r2,-12(fp)
  811060:	10c00117 	ldw	r3,4(r2)
  811064:	00a00034 	movhi	r2,32768
  811068:	10bfffc4 	addi	r2,r2,-1
  81106c:	18800c26 	beq	r3,r2,8110a0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811070:	e0bffd17 	ldw	r2,-12(fp)
  811074:	10c00917 	ldw	r3,36(r2)
  811078:	e0bffd17 	ldw	r2,-12(fp)
  81107c:	10800117 	ldw	r2,4(r2)
  811080:	1885803a 	cmpltu	r2,r3,r2
  811084:	10c03fcc 	andi	r3,r2,255
  811088:	e0bffb17 	ldw	r2,-20(fp)
  81108c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811090:	e03fff15 	stw	zero,-4(fp)
    break;
  811094:	00000206 	br	8110a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  811098:	0001883a 	nop
  81109c:	00000106 	br	8110a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  8110a0:	0001883a 	nop
  }

  return rc;
  8110a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8110a8:	e037883a 	mov	sp,fp
  8110ac:	df000017 	ldw	fp,0(sp)
  8110b0:	dec00104 	addi	sp,sp,4
  8110b4:	f800283a 	ret

008110b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8110b8:	defff304 	addi	sp,sp,-52
  8110bc:	dfc00c15 	stw	ra,48(sp)
  8110c0:	df000b15 	stw	fp,44(sp)
  8110c4:	df000b04 	addi	fp,sp,44
  8110c8:	e13ff815 	stw	r4,-32(fp)
  8110cc:	e17ff715 	stw	r5,-36(fp)
  8110d0:	e1bff615 	stw	r6,-40(fp)
  8110d4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  8110d8:	e0bff717 	ldw	r2,-36(fp)
  8110dc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8110e0:	00004706 	br	811200 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8110e4:	e0bff817 	ldw	r2,-32(fp)
  8110e8:	10800a17 	ldw	r2,40(r2)
  8110ec:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  8110f0:	e0bff817 	ldw	r2,-32(fp)
  8110f4:	10800b17 	ldw	r2,44(r2)
  8110f8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  8110fc:	e0fffd17 	ldw	r3,-12(fp)
  811100:	e0bffc17 	ldw	r2,-16(fp)
  811104:	18800536 	bltu	r3,r2,81111c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811108:	e0fffd17 	ldw	r3,-12(fp)
  81110c:	e0bffc17 	ldw	r2,-16(fp)
  811110:	1885c83a 	sub	r2,r3,r2
  811114:	e0bffe15 	stw	r2,-8(fp)
  811118:	00000406 	br	81112c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81111c:	00c20004 	movi	r3,2048
  811120:	e0bffc17 	ldw	r2,-16(fp)
  811124:	1885c83a 	sub	r2,r3,r2
  811128:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  81112c:	e0bffe17 	ldw	r2,-8(fp)
  811130:	10001e26 	beq	r2,zero,8111ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  811134:	e0fff617 	ldw	r3,-40(fp)
  811138:	e0bffe17 	ldw	r2,-8(fp)
  81113c:	1880022e 	bgeu	r3,r2,811148 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  811140:	e0bff617 	ldw	r2,-40(fp)
  811144:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811148:	e0bff817 	ldw	r2,-32(fp)
  81114c:	10c00e04 	addi	r3,r2,56
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	1885883a 	add	r2,r3,r2
  811158:	e1bffe17 	ldw	r6,-8(fp)
  81115c:	100b883a 	mov	r5,r2
  811160:	e13fff17 	ldw	r4,-4(fp)
  811164:	08086880 	call	808688 <memcpy>
      ptr   += n;
  811168:	e0ffff17 	ldw	r3,-4(fp)
  81116c:	e0bffe17 	ldw	r2,-8(fp)
  811170:	1885883a 	add	r2,r3,r2
  811174:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  811178:	e0fff617 	ldw	r3,-40(fp)
  81117c:	e0bffe17 	ldw	r2,-8(fp)
  811180:	1885c83a 	sub	r2,r3,r2
  811184:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811188:	e0fffc17 	ldw	r3,-16(fp)
  81118c:	e0bffe17 	ldw	r2,-8(fp)
  811190:	1885883a 	add	r2,r3,r2
  811194:	10c1ffcc 	andi	r3,r2,2047
  811198:	e0bff817 	ldw	r2,-32(fp)
  81119c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8111a0:	e0bff617 	ldw	r2,-40(fp)
  8111a4:	00bfcf16 	blt	zero,r2,8110e4 <altera_avalon_jtag_uart_read+0x2c>
  8111a8:	00000106 	br	8111b0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  8111ac:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  8111b0:	e0ffff17 	ldw	r3,-4(fp)
  8111b4:	e0bff717 	ldw	r2,-36(fp)
  8111b8:	1880141e 	bne	r3,r2,81120c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8111bc:	e0bff517 	ldw	r2,-44(fp)
  8111c0:	1090000c 	andi	r2,r2,16384
  8111c4:	1000131e 	bne	r2,zero,811214 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8111c8:	0001883a 	nop
  8111cc:	e0bff817 	ldw	r2,-32(fp)
  8111d0:	10800a17 	ldw	r2,40(r2)
  8111d4:	e0fffd17 	ldw	r3,-12(fp)
  8111d8:	1880051e 	bne	r3,r2,8111f0 <altera_avalon_jtag_uart_read+0x138>
  8111dc:	e0bff817 	ldw	r2,-32(fp)
  8111e0:	10c00917 	ldw	r3,36(r2)
  8111e4:	e0bff817 	ldw	r2,-32(fp)
  8111e8:	10800117 	ldw	r2,4(r2)
  8111ec:	18bff736 	bltu	r3,r2,8111cc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8111f0:	e0bff817 	ldw	r2,-32(fp)
  8111f4:	10800a17 	ldw	r2,40(r2)
  8111f8:	e0fffd17 	ldw	r3,-12(fp)
  8111fc:	18800726 	beq	r3,r2,81121c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  811200:	e0bff617 	ldw	r2,-40(fp)
  811204:	00bfb716 	blt	zero,r2,8110e4 <altera_avalon_jtag_uart_read+0x2c>
  811208:	00000506 	br	811220 <altera_avalon_jtag_uart_read+0x168>
      break;
  81120c:	0001883a 	nop
  811210:	00000306 	br	811220 <altera_avalon_jtag_uart_read+0x168>
      break;
  811214:	0001883a 	nop
  811218:	00000106 	br	811220 <altera_avalon_jtag_uart_read+0x168>
      break;
  81121c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811220:	e0ffff17 	ldw	r3,-4(fp)
  811224:	e0bff717 	ldw	r2,-36(fp)
  811228:	18801926 	beq	r3,r2,811290 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  81122c:	0005303a 	rdctl	r2,status
  811230:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811234:	e0fff917 	ldw	r3,-28(fp)
  811238:	00bfff84 	movi	r2,-2
  81123c:	1884703a 	and	r2,r3,r2
  811240:	1001703a 	wrctl	status,r2
  return context;
  811244:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811248:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81124c:	e0bff817 	ldw	r2,-32(fp)
  811250:	10800817 	ldw	r2,32(r2)
  811254:	10c00054 	ori	r3,r2,1
  811258:	e0bff817 	ldw	r2,-32(fp)
  81125c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811260:	e0bff817 	ldw	r2,-32(fp)
  811264:	10800017 	ldw	r2,0(r2)
  811268:	10800104 	addi	r2,r2,4
  81126c:	1007883a 	mov	r3,r2
  811270:	e0bff817 	ldw	r2,-32(fp)
  811274:	10800817 	ldw	r2,32(r2)
  811278:	18800035 	stwio	r2,0(r3)
  81127c:	e0bffb17 	ldw	r2,-20(fp)
  811280:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  811284:	e0bffa17 	ldw	r2,-24(fp)
  811288:	1001703a 	wrctl	status,r2
}
  81128c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811290:	e0ffff17 	ldw	r3,-4(fp)
  811294:	e0bff717 	ldw	r2,-36(fp)
  811298:	18800426 	beq	r3,r2,8112ac <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  81129c:	e0ffff17 	ldw	r3,-4(fp)
  8112a0:	e0bff717 	ldw	r2,-36(fp)
  8112a4:	1885c83a 	sub	r2,r3,r2
  8112a8:	00000606 	br	8112c4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8112ac:	e0bff517 	ldw	r2,-44(fp)
  8112b0:	1090000c 	andi	r2,r2,16384
  8112b4:	10000226 	beq	r2,zero,8112c0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  8112b8:	00bffd44 	movi	r2,-11
  8112bc:	00000106 	br	8112c4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8112c0:	00bffec4 	movi	r2,-5
}
  8112c4:	e037883a 	mov	sp,fp
  8112c8:	dfc00117 	ldw	ra,4(sp)
  8112cc:	df000017 	ldw	fp,0(sp)
  8112d0:	dec00204 	addi	sp,sp,8
  8112d4:	f800283a 	ret

008112d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8112d8:	defff304 	addi	sp,sp,-52
  8112dc:	dfc00c15 	stw	ra,48(sp)
  8112e0:	df000b15 	stw	fp,44(sp)
  8112e4:	df000b04 	addi	fp,sp,44
  8112e8:	e13ff815 	stw	r4,-32(fp)
  8112ec:	e17ff715 	stw	r5,-36(fp)
  8112f0:	e1bff615 	stw	r6,-40(fp)
  8112f4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8112f8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8112fc:	e0bff717 	ldw	r2,-36(fp)
  811300:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811304:	00003706 	br	8113e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811308:	e0bff817 	ldw	r2,-32(fp)
  81130c:	10800c17 	ldw	r2,48(r2)
  811310:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  811314:	e0bff817 	ldw	r2,-32(fp)
  811318:	10800d17 	ldw	r2,52(r2)
  81131c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  811320:	e0fffc17 	ldw	r3,-16(fp)
  811324:	e0bfff17 	ldw	r2,-4(fp)
  811328:	1880062e 	bgeu	r3,r2,811344 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  81132c:	e0ffff17 	ldw	r3,-4(fp)
  811330:	e0bffc17 	ldw	r2,-16(fp)
  811334:	1885c83a 	sub	r2,r3,r2
  811338:	10bfffc4 	addi	r2,r2,-1
  81133c:	e0bffe15 	stw	r2,-8(fp)
  811340:	00000b06 	br	811370 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  811344:	e0bfff17 	ldw	r2,-4(fp)
  811348:	10000526 	beq	r2,zero,811360 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81134c:	00c20004 	movi	r3,2048
  811350:	e0bffc17 	ldw	r2,-16(fp)
  811354:	1885c83a 	sub	r2,r3,r2
  811358:	e0bffe15 	stw	r2,-8(fp)
  81135c:	00000406 	br	811370 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811360:	00c1ffc4 	movi	r3,2047
  811364:	e0bffc17 	ldw	r2,-16(fp)
  811368:	1885c83a 	sub	r2,r3,r2
  81136c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  811370:	e0bffe17 	ldw	r2,-8(fp)
  811374:	10001e26 	beq	r2,zero,8113f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811378:	e0fff617 	ldw	r3,-40(fp)
  81137c:	e0bffe17 	ldw	r2,-8(fp)
  811380:	1880022e 	bgeu	r3,r2,81138c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811384:	e0bff617 	ldw	r2,-40(fp)
  811388:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81138c:	e0bff817 	ldw	r2,-32(fp)
  811390:	10c20e04 	addi	r3,r2,2104
  811394:	e0bffc17 	ldw	r2,-16(fp)
  811398:	1885883a 	add	r2,r3,r2
  81139c:	e1bffe17 	ldw	r6,-8(fp)
  8113a0:	e17ff717 	ldw	r5,-36(fp)
  8113a4:	1009883a 	mov	r4,r2
  8113a8:	08086880 	call	808688 <memcpy>
      ptr   += n;
  8113ac:	e0fff717 	ldw	r3,-36(fp)
  8113b0:	e0bffe17 	ldw	r2,-8(fp)
  8113b4:	1885883a 	add	r2,r3,r2
  8113b8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  8113bc:	e0fff617 	ldw	r3,-40(fp)
  8113c0:	e0bffe17 	ldw	r2,-8(fp)
  8113c4:	1885c83a 	sub	r2,r3,r2
  8113c8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8113cc:	e0fffc17 	ldw	r3,-16(fp)
  8113d0:	e0bffe17 	ldw	r2,-8(fp)
  8113d4:	1885883a 	add	r2,r3,r2
  8113d8:	10c1ffcc 	andi	r3,r2,2047
  8113dc:	e0bff817 	ldw	r2,-32(fp)
  8113e0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  8113e4:	e0bff617 	ldw	r2,-40(fp)
  8113e8:	00bfc716 	blt	zero,r2,811308 <altera_avalon_jtag_uart_write+0x30>
  8113ec:	00000106 	br	8113f4 <altera_avalon_jtag_uart_write+0x11c>
        break;
  8113f0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  8113f4:	0005303a 	rdctl	r2,status
  8113f8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113fc:	e0fff917 	ldw	r3,-28(fp)
  811400:	00bfff84 	movi	r2,-2
  811404:	1884703a 	and	r2,r3,r2
  811408:	1001703a 	wrctl	status,r2
  return context;
  81140c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811410:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811414:	e0bff817 	ldw	r2,-32(fp)
  811418:	10800817 	ldw	r2,32(r2)
  81141c:	10c00094 	ori	r3,r2,2
  811420:	e0bff817 	ldw	r2,-32(fp)
  811424:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811428:	e0bff817 	ldw	r2,-32(fp)
  81142c:	10800017 	ldw	r2,0(r2)
  811430:	10800104 	addi	r2,r2,4
  811434:	1007883a 	mov	r3,r2
  811438:	e0bff817 	ldw	r2,-32(fp)
  81143c:	10800817 	ldw	r2,32(r2)
  811440:	18800035 	stwio	r2,0(r3)
  811444:	e0bffb17 	ldw	r2,-20(fp)
  811448:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  81144c:	e0bffa17 	ldw	r2,-24(fp)
  811450:	1001703a 	wrctl	status,r2
}
  811454:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811458:	e0bff617 	ldw	r2,-40(fp)
  81145c:	0080100e 	bge	zero,r2,8114a0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  811460:	e0bff517 	ldw	r2,-44(fp)
  811464:	1090000c 	andi	r2,r2,16384
  811468:	1000101e 	bne	r2,zero,8114ac <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81146c:	0001883a 	nop
  811470:	e0bff817 	ldw	r2,-32(fp)
  811474:	10800d17 	ldw	r2,52(r2)
  811478:	e0ffff17 	ldw	r3,-4(fp)
  81147c:	1880051e 	bne	r3,r2,811494 <altera_avalon_jtag_uart_write+0x1bc>
  811480:	e0bff817 	ldw	r2,-32(fp)
  811484:	10c00917 	ldw	r3,36(r2)
  811488:	e0bff817 	ldw	r2,-32(fp)
  81148c:	10800117 	ldw	r2,4(r2)
  811490:	18bff736 	bltu	r3,r2,811470 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811494:	e0bff817 	ldw	r2,-32(fp)
  811498:	10800917 	ldw	r2,36(r2)
  81149c:	1000051e 	bne	r2,zero,8114b4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  8114a0:	e0bff617 	ldw	r2,-40(fp)
  8114a4:	00bfcf16 	blt	zero,r2,8113e4 <altera_avalon_jtag_uart_write+0x10c>
  8114a8:	00000306 	br	8114b8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  8114ac:	0001883a 	nop
  8114b0:	00000106 	br	8114b8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  8114b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8114b8:	e0fff717 	ldw	r3,-36(fp)
  8114bc:	e0bffd17 	ldw	r2,-12(fp)
  8114c0:	18800426 	beq	r3,r2,8114d4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  8114c4:	e0fff717 	ldw	r3,-36(fp)
  8114c8:	e0bffd17 	ldw	r2,-12(fp)
  8114cc:	1885c83a 	sub	r2,r3,r2
  8114d0:	00000606 	br	8114ec <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  8114d4:	e0bff517 	ldw	r2,-44(fp)
  8114d8:	1090000c 	andi	r2,r2,16384
  8114dc:	10000226 	beq	r2,zero,8114e8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  8114e0:	00bffd44 	movi	r2,-11
  8114e4:	00000106 	br	8114ec <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8114e8:	00bffec4 	movi	r2,-5
}
  8114ec:	e037883a 	mov	sp,fp
  8114f0:	dfc00117 	ldw	ra,4(sp)
  8114f4:	df000017 	ldw	fp,0(sp)
  8114f8:	dec00204 	addi	sp,sp,8
  8114fc:	f800283a 	ret

00811500 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811500:	defffa04 	addi	sp,sp,-24
  811504:	dfc00515 	stw	ra,20(sp)
  811508:	df000415 	stw	fp,16(sp)
  81150c:	df000404 	addi	fp,sp,16
  811510:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811514:	0007883a 	mov	r3,zero
  811518:	e0bffc17 	ldw	r2,-16(fp)
  81151c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811520:	e0bffc17 	ldw	r2,-16(fp)
  811524:	10800104 	addi	r2,r2,4
  811528:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  81152c:	0005303a 	rdctl	r2,status
  811530:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811534:	e0fffd17 	ldw	r3,-12(fp)
  811538:	00bfff84 	movi	r2,-2
  81153c:	1884703a 	and	r2,r3,r2
  811540:	1001703a 	wrctl	status,r2
  return context;
  811544:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811548:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  81154c:	08106bc0 	call	8106bc <alt_tick>
  811550:	e0bfff17 	ldw	r2,-4(fp)
  811554:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  811558:	e0bffe17 	ldw	r2,-8(fp)
  81155c:	1001703a 	wrctl	status,r2
}
  811560:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  811564:	0001883a 	nop
  811568:	e037883a 	mov	sp,fp
  81156c:	dfc00117 	ldw	ra,4(sp)
  811570:	df000017 	ldw	fp,0(sp)
  811574:	dec00204 	addi	sp,sp,8
  811578:	f800283a 	ret

0081157c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81157c:	defff804 	addi	sp,sp,-32
  811580:	dfc00715 	stw	ra,28(sp)
  811584:	df000615 	stw	fp,24(sp)
  811588:	df000604 	addi	fp,sp,24
  81158c:	e13ffe15 	stw	r4,-8(fp)
  811590:	e17ffd15 	stw	r5,-12(fp)
  811594:	e1bffc15 	stw	r6,-16(fp)
  811598:	e1fffb15 	stw	r7,-20(fp)
  81159c:	e0bffb17 	ldw	r2,-20(fp)
  8115a0:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
  8115a4:	d0a71c17 	ldw	r2,-25488(gp)
  8115a8:	1000031e 	bne	r2,zero,8115b8 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
  8115ac:	e0bfff17 	ldw	r2,-4(fp)
  8115b0:	d0a71c15 	stw	r2,-25488(gp)
    return 0;
  8115b4:	00000106 	br	8115bc <alt_avalon_timer_sc_init+0x40>
    return -1;
  8115b8:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8115bc:	e0bffe17 	ldw	r2,-8(fp)
  8115c0:	10800104 	addi	r2,r2,4
  8115c4:	00c001c4 	movi	r3,7
  8115c8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8115cc:	d8000015 	stw	zero,0(sp)
  8115d0:	e1fffe17 	ldw	r7,-8(fp)
  8115d4:	01802074 	movhi	r6,129
  8115d8:	31854004 	addi	r6,r6,5376
  8115dc:	e17ffc17 	ldw	r5,-16(fp)
  8115e0:	e13ffd17 	ldw	r4,-12(fp)
  8115e4:	08119600 	call	811960 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8115e8:	0001883a 	nop
  8115ec:	e037883a 	mov	sp,fp
  8115f0:	dfc00117 	ldw	ra,4(sp)
  8115f4:	df000017 	ldw	fp,0(sp)
  8115f8:	dec00204 	addi	sp,sp,8
  8115fc:	f800283a 	ret

00811600 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  811600:	defff504 	addi	sp,sp,-44
  811604:	df000a15 	stw	fp,40(sp)
  811608:	df000a04 	addi	fp,sp,40
  81160c:	e13ff915 	stw	r4,-28(fp)
  811610:	e17ff815 	stw	r5,-32(fp)
  811614:	e1bff715 	stw	r6,-36(fp)
  811618:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81161c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  811620:	d0a71c17 	ldw	r2,-25488(gp)
  
  if (alt_ticks_per_second ())
  811624:	10003e26 	beq	r2,zero,811720 <alt_alarm_start+0x120>
  {
    if (alarm)
  811628:	e0bff917 	ldw	r2,-28(fp)
  81162c:	10003a26 	beq	r2,zero,811718 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  811630:	e0bff917 	ldw	r2,-28(fp)
  811634:	e0fff717 	ldw	r3,-36(fp)
  811638:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  81163c:	e0bff917 	ldw	r2,-28(fp)
  811640:	e0fff617 	ldw	r3,-40(fp)
  811644:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  811648:	0005303a 	rdctl	r2,status
  81164c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811650:	e0fffd17 	ldw	r3,-12(fp)
  811654:	00bfff84 	movi	r2,-2
  811658:	1884703a 	and	r2,r3,r2
  81165c:	1001703a 	wrctl	status,r2
  return context;
  811660:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  811664:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
  811668:	d0a71d17 	ldw	r2,-25484(gp)
      
      current_nticks = alt_nticks();
  81166c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  811670:	e0fff817 	ldw	r3,-32(fp)
  811674:	e0bfff17 	ldw	r2,-4(fp)
  811678:	1885883a 	add	r2,r3,r2
  81167c:	10c00044 	addi	r3,r2,1
  811680:	e0bff917 	ldw	r2,-28(fp)
  811684:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  811688:	e0bff917 	ldw	r2,-28(fp)
  81168c:	10c00217 	ldw	r3,8(r2)
  811690:	e0bfff17 	ldw	r2,-4(fp)
  811694:	1880042e 	bgeu	r3,r2,8116a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  811698:	e0bff917 	ldw	r2,-28(fp)
  81169c:	00c00044 	movi	r3,1
  8116a0:	10c00405 	stb	r3,16(r2)
  8116a4:	00000206 	br	8116b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8116a8:	e0bff917 	ldw	r2,-28(fp)
  8116ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8116b0:	e0bff917 	ldw	r2,-28(fp)
  8116b4:	d0e01304 	addi	r3,gp,-32692
  8116b8:	e0fffb15 	stw	r3,-20(fp)
  8116bc:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
  8116c0:	e0bffa17 	ldw	r2,-24(fp)
  8116c4:	e0fffb17 	ldw	r3,-20(fp)
  8116c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8116cc:	e0bffb17 	ldw	r2,-20(fp)
  8116d0:	10c00017 	ldw	r3,0(r2)
  8116d4:	e0bffa17 	ldw	r2,-24(fp)
  8116d8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  8116dc:	e0bffb17 	ldw	r2,-20(fp)
  8116e0:	10800017 	ldw	r2,0(r2)
  8116e4:	e0fffa17 	ldw	r3,-24(fp)
  8116e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8116ec:	e0bffb17 	ldw	r2,-20(fp)
  8116f0:	e0fffa17 	ldw	r3,-24(fp)
  8116f4:	10c00015 	stw	r3,0(r2)
}
  8116f8:	0001883a 	nop
  8116fc:	e0bffe17 	ldw	r2,-8(fp)
  811700:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811704:	e0bffc17 	ldw	r2,-16(fp)
  811708:	1001703a 	wrctl	status,r2
}
  81170c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  811710:	0005883a 	mov	r2,zero
  811714:	00000306 	br	811724 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  811718:	00bffa84 	movi	r2,-22
  81171c:	00000106 	br	811724 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  811720:	00bfde84 	movi	r2,-134
  }
}
  811724:	e037883a 	mov	sp,fp
  811728:	df000017 	ldw	fp,0(sp)
  81172c:	dec00104 	addi	sp,sp,4
  811730:	f800283a 	ret

00811734 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811734:	defffe04 	addi	sp,sp,-8
  811738:	df000115 	stw	fp,4(sp)
  81173c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811740:	e03fff15 	stw	zero,-4(fp)
  811744:	00000506 	br	81175c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811748:	e0bfff17 	ldw	r2,-4(fp)
  81174c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811750:	e0bfff17 	ldw	r2,-4(fp)
  811754:	10800804 	addi	r2,r2,32
  811758:	e0bfff15 	stw	r2,-4(fp)
  81175c:	e0bfff17 	ldw	r2,-4(fp)
  811760:	10820030 	cmpltui	r2,r2,2048
  811764:	103ff81e 	bne	r2,zero,811748 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811768:	0001883a 	nop
  81176c:	0001883a 	nop
  811770:	e037883a 	mov	sp,fp
  811774:	df000017 	ldw	fp,0(sp)
  811778:	dec00104 	addi	sp,sp,4
  81177c:	f800283a 	ret

00811780 <alt_get_errno>:
{
  811780:	defffe04 	addi	sp,sp,-8
  811784:	dfc00115 	stw	ra,4(sp)
  811788:	df000015 	stw	fp,0(sp)
  81178c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811790:	d0a01117 	ldw	r2,-32700(gp)
  811794:	10000326 	beq	r2,zero,8117a4 <alt_get_errno+0x24>
  811798:	d0a01117 	ldw	r2,-32700(gp)
  81179c:	103ee83a 	callr	r2
  8117a0:	00000106 	br	8117a8 <alt_get_errno+0x28>
  8117a4:	d0a71804 	addi	r2,gp,-25504
}
  8117a8:	e037883a 	mov	sp,fp
  8117ac:	dfc00117 	ldw	ra,4(sp)
  8117b0:	df000017 	ldw	fp,0(sp)
  8117b4:	dec00204 	addi	sp,sp,8
  8117b8:	f800283a 	ret

008117bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8117bc:	defffa04 	addi	sp,sp,-24
  8117c0:	dfc00515 	stw	ra,20(sp)
  8117c4:	df000415 	stw	fp,16(sp)
  8117c8:	df000404 	addi	fp,sp,16
  8117cc:	e13ffd15 	stw	r4,-12(fp)
  8117d0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8117d4:	e0bffd17 	ldw	r2,-12(fp)
  8117d8:	10000326 	beq	r2,zero,8117e8 <alt_dev_llist_insert+0x2c>
  8117dc:	e0bffd17 	ldw	r2,-12(fp)
  8117e0:	10800217 	ldw	r2,8(r2)
  8117e4:	1000061e 	bne	r2,zero,811800 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8117e8:	08117800 	call	811780 <alt_get_errno>
  8117ec:	1007883a 	mov	r3,r2
  8117f0:	00800584 	movi	r2,22
  8117f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8117f8:	00bffa84 	movi	r2,-22
  8117fc:	00001406 	br	811850 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811800:	e0bffd17 	ldw	r2,-12(fp)
  811804:	e0fffc17 	ldw	r3,-16(fp)
  811808:	e0ffff15 	stw	r3,-4(fp)
  81180c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  811810:	e0bffe17 	ldw	r2,-8(fp)
  811814:	e0ffff17 	ldw	r3,-4(fp)
  811818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81181c:	e0bfff17 	ldw	r2,-4(fp)
  811820:	10c00017 	ldw	r3,0(r2)
  811824:	e0bffe17 	ldw	r2,-8(fp)
  811828:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  81182c:	e0bfff17 	ldw	r2,-4(fp)
  811830:	10800017 	ldw	r2,0(r2)
  811834:	e0fffe17 	ldw	r3,-8(fp)
  811838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81183c:	e0bfff17 	ldw	r2,-4(fp)
  811840:	e0fffe17 	ldw	r3,-8(fp)
  811844:	10c00015 	stw	r3,0(r2)
}
  811848:	0001883a 	nop

  return 0;  
  81184c:	0005883a 	mov	r2,zero
}
  811850:	e037883a 	mov	sp,fp
  811854:	dfc00117 	ldw	ra,4(sp)
  811858:	df000017 	ldw	fp,0(sp)
  81185c:	dec00204 	addi	sp,sp,8
  811860:	f800283a 	ret

00811864 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811864:	defffd04 	addi	sp,sp,-12
  811868:	dfc00215 	stw	ra,8(sp)
  81186c:	df000115 	stw	fp,4(sp)
  811870:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811874:	00802074 	movhi	r2,129
  811878:	10896f04 	addi	r2,r2,9660
  81187c:	e0bfff15 	stw	r2,-4(fp)
  811880:	00000606 	br	81189c <_do_ctors+0x38>
        (*ctor) (); 
  811884:	e0bfff17 	ldw	r2,-4(fp)
  811888:	10800017 	ldw	r2,0(r2)
  81188c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811890:	e0bfff17 	ldw	r2,-4(fp)
  811894:	10bfff04 	addi	r2,r2,-4
  811898:	e0bfff15 	stw	r2,-4(fp)
  81189c:	e0ffff17 	ldw	r3,-4(fp)
  8118a0:	00802074 	movhi	r2,129
  8118a4:	10897004 	addi	r2,r2,9664
  8118a8:	18bff62e 	bgeu	r3,r2,811884 <_do_ctors+0x20>
}
  8118ac:	0001883a 	nop
  8118b0:	0001883a 	nop
  8118b4:	e037883a 	mov	sp,fp
  8118b8:	dfc00117 	ldw	ra,4(sp)
  8118bc:	df000017 	ldw	fp,0(sp)
  8118c0:	dec00204 	addi	sp,sp,8
  8118c4:	f800283a 	ret

008118c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8118c8:	defffd04 	addi	sp,sp,-12
  8118cc:	dfc00215 	stw	ra,8(sp)
  8118d0:	df000115 	stw	fp,4(sp)
  8118d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8118d8:	00802074 	movhi	r2,129
  8118dc:	10896f04 	addi	r2,r2,9660
  8118e0:	e0bfff15 	stw	r2,-4(fp)
  8118e4:	00000606 	br	811900 <_do_dtors+0x38>
        (*dtor) (); 
  8118e8:	e0bfff17 	ldw	r2,-4(fp)
  8118ec:	10800017 	ldw	r2,0(r2)
  8118f0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
  8118f8:	10bfff04 	addi	r2,r2,-4
  8118fc:	e0bfff15 	stw	r2,-4(fp)
  811900:	e0ffff17 	ldw	r3,-4(fp)
  811904:	00802074 	movhi	r2,129
  811908:	10897004 	addi	r2,r2,9664
  81190c:	18bff62e 	bgeu	r3,r2,8118e8 <_do_dtors+0x20>
}
  811910:	0001883a 	nop
  811914:	0001883a 	nop
  811918:	e037883a 	mov	sp,fp
  81191c:	dfc00117 	ldw	ra,4(sp)
  811920:	df000017 	ldw	fp,0(sp)
  811924:	dec00204 	addi	sp,sp,8
  811928:	f800283a 	ret

0081192c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81192c:	defffe04 	addi	sp,sp,-8
  811930:	dfc00115 	stw	ra,4(sp)
  811934:	df000015 	stw	fp,0(sp)
  811938:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81193c:	01420004 	movi	r5,2048
  811940:	0009883a 	mov	r4,zero
  811944:	08122340 	call	812234 <alt_icache_flush>
#endif
}
  811948:	0001883a 	nop
  81194c:	e037883a 	mov	sp,fp
  811950:	dfc00117 	ldw	ra,4(sp)
  811954:	df000017 	ldw	fp,0(sp)
  811958:	dec00204 	addi	sp,sp,8
  81195c:	f800283a 	ret

00811960 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811960:	defff904 	addi	sp,sp,-28
  811964:	dfc00615 	stw	ra,24(sp)
  811968:	df000515 	stw	fp,20(sp)
  81196c:	df000504 	addi	fp,sp,20
  811970:	e13fff15 	stw	r4,-4(fp)
  811974:	e17ffe15 	stw	r5,-8(fp)
  811978:	e1bffd15 	stw	r6,-12(fp)
  81197c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811980:	e0800217 	ldw	r2,8(fp)
  811984:	d8800015 	stw	r2,0(sp)
  811988:	e1fffc17 	ldw	r7,-16(fp)
  81198c:	e1bffd17 	ldw	r6,-12(fp)
  811990:	e17ffe17 	ldw	r5,-8(fp)
  811994:	e13fff17 	ldw	r4,-4(fp)
  811998:	0811b100 	call	811b10 <alt_iic_isr_register>
}  
  81199c:	e037883a 	mov	sp,fp
  8119a0:	dfc00117 	ldw	ra,4(sp)
  8119a4:	df000017 	ldw	fp,0(sp)
  8119a8:	dec00204 	addi	sp,sp,8
  8119ac:	f800283a 	ret

008119b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8119b0:	defff904 	addi	sp,sp,-28
  8119b4:	df000615 	stw	fp,24(sp)
  8119b8:	df000604 	addi	fp,sp,24
  8119bc:	e13ffb15 	stw	r4,-20(fp)
  8119c0:	e17ffa15 	stw	r5,-24(fp)
  8119c4:	e0bffa17 	ldw	r2,-24(fp)
  8119c8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  8119cc:	0005303a 	rdctl	r2,status
  8119d0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119d4:	e0fffe17 	ldw	r3,-8(fp)
  8119d8:	00bfff84 	movi	r2,-2
  8119dc:	1884703a 	and	r2,r3,r2
  8119e0:	1001703a 	wrctl	status,r2
  return context;
  8119e4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8119e8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8119ec:	00c00044 	movi	r3,1
  8119f0:	e0bfff17 	ldw	r2,-4(fp)
  8119f4:	1884983a 	sll	r2,r3,r2
  8119f8:	1007883a 	mov	r3,r2
  8119fc:	d0a71e17 	ldw	r2,-25480(gp)
  811a00:	1884b03a 	or	r2,r3,r2
  811a04:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811a08:	d0a71e17 	ldw	r2,-25480(gp)
  811a0c:	100170fa 	wrctl	ienable,r2
  811a10:	e0bffd17 	ldw	r2,-12(fp)
  811a14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811a18:	e0bffc17 	ldw	r2,-16(fp)
  811a1c:	1001703a 	wrctl	status,r2
}
  811a20:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  811a24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811a28:	e037883a 	mov	sp,fp
  811a2c:	df000017 	ldw	fp,0(sp)
  811a30:	dec00104 	addi	sp,sp,4
  811a34:	f800283a 	ret

00811a38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811a38:	defff904 	addi	sp,sp,-28
  811a3c:	df000615 	stw	fp,24(sp)
  811a40:	df000604 	addi	fp,sp,24
  811a44:	e13ffb15 	stw	r4,-20(fp)
  811a48:	e17ffa15 	stw	r5,-24(fp)
  811a4c:	e0bffa17 	ldw	r2,-24(fp)
  811a50:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811a54:	0005303a 	rdctl	r2,status
  811a58:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a5c:	e0fffe17 	ldw	r3,-8(fp)
  811a60:	00bfff84 	movi	r2,-2
  811a64:	1884703a 	and	r2,r3,r2
  811a68:	1001703a 	wrctl	status,r2
  return context;
  811a6c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  811a70:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  811a74:	00c00044 	movi	r3,1
  811a78:	e0bfff17 	ldw	r2,-4(fp)
  811a7c:	1884983a 	sll	r2,r3,r2
  811a80:	0084303a 	nor	r2,zero,r2
  811a84:	1007883a 	mov	r3,r2
  811a88:	d0a71e17 	ldw	r2,-25480(gp)
  811a8c:	1884703a 	and	r2,r3,r2
  811a90:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811a94:	d0a71e17 	ldw	r2,-25480(gp)
  811a98:	100170fa 	wrctl	ienable,r2
  811a9c:	e0bffd17 	ldw	r2,-12(fp)
  811aa0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811aa4:	e0bffc17 	ldw	r2,-16(fp)
  811aa8:	1001703a 	wrctl	status,r2
}
  811aac:	0001883a 	nop
  return 0;
  811ab0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  811ab4:	e037883a 	mov	sp,fp
  811ab8:	df000017 	ldw	fp,0(sp)
  811abc:	dec00104 	addi	sp,sp,4
  811ac0:	f800283a 	ret

00811ac4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  811ac4:	defffc04 	addi	sp,sp,-16
  811ac8:	df000315 	stw	fp,12(sp)
  811acc:	df000304 	addi	fp,sp,12
  811ad0:	e13ffe15 	stw	r4,-8(fp)
  811ad4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811ad8:	000530fa 	rdctl	r2,ienable
  811adc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811ae0:	00c00044 	movi	r3,1
  811ae4:	e0bffd17 	ldw	r2,-12(fp)
  811ae8:	1884983a 	sll	r2,r3,r2
  811aec:	1007883a 	mov	r3,r2
  811af0:	e0bfff17 	ldw	r2,-4(fp)
  811af4:	1884703a 	and	r2,r3,r2
  811af8:	1004c03a 	cmpne	r2,r2,zero
  811afc:	10803fcc 	andi	r2,r2,255
}
  811b00:	e037883a 	mov	sp,fp
  811b04:	df000017 	ldw	fp,0(sp)
  811b08:	dec00104 	addi	sp,sp,4
  811b0c:	f800283a 	ret

00811b10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811b10:	defff504 	addi	sp,sp,-44
  811b14:	dfc00a15 	stw	ra,40(sp)
  811b18:	df000915 	stw	fp,36(sp)
  811b1c:	df000904 	addi	fp,sp,36
  811b20:	e13ffa15 	stw	r4,-24(fp)
  811b24:	e17ff915 	stw	r5,-28(fp)
  811b28:	e1bff815 	stw	r6,-32(fp)
  811b2c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  811b30:	00bffa84 	movi	r2,-22
  811b34:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811b38:	e0bff917 	ldw	r2,-28(fp)
  811b3c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811b40:	e0bffe17 	ldw	r2,-8(fp)
  811b44:	10800808 	cmpgei	r2,r2,32
  811b48:	1000251e 	bne	r2,zero,811be0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  811b4c:	0005303a 	rdctl	r2,status
  811b50:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b54:	e0fffc17 	ldw	r3,-16(fp)
  811b58:	00bfff84 	movi	r2,-2
  811b5c:	1884703a 	and	r2,r3,r2
  811b60:	1001703a 	wrctl	status,r2
  return context;
  811b64:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811b68:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  811b6c:	e0bffe17 	ldw	r2,-8(fp)
  811b70:	100890fa 	slli	r4,r2,3
  811b74:	e0fff817 	ldw	r3,-32(fp)
  811b78:	00802074 	movhi	r2,129
  811b7c:	2085883a 	add	r2,r4,r2
  811b80:	10da3915 	stw	r3,26852(r2)
    alt_irq[id].context = isr_context;
  811b84:	e0bffe17 	ldw	r2,-8(fp)
  811b88:	100890fa 	slli	r4,r2,3
  811b8c:	e0fff717 	ldw	r3,-36(fp)
  811b90:	00802074 	movhi	r2,129
  811b94:	2085883a 	add	r2,r4,r2
  811b98:	10da3a15 	stw	r3,26856(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811b9c:	e0bff817 	ldw	r2,-32(fp)
  811ba0:	10000526 	beq	r2,zero,811bb8 <alt_iic_isr_register+0xa8>
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	100b883a 	mov	r5,r2
  811bac:	e13ffa17 	ldw	r4,-24(fp)
  811bb0:	08119b00 	call	8119b0 <alt_ic_irq_enable>
  811bb4:	00000406 	br	811bc8 <alt_iic_isr_register+0xb8>
  811bb8:	e0bffe17 	ldw	r2,-8(fp)
  811bbc:	100b883a 	mov	r5,r2
  811bc0:	e13ffa17 	ldw	r4,-24(fp)
  811bc4:	0811a380 	call	811a38 <alt_ic_irq_disable>
  811bc8:	e0bfff15 	stw	r2,-4(fp)
  811bcc:	e0bffd17 	ldw	r2,-12(fp)
  811bd0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  811bd4:	e0bffb17 	ldw	r2,-20(fp)
  811bd8:	1001703a 	wrctl	status,r2
}
  811bdc:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  811be0:	e0bfff17 	ldw	r2,-4(fp)
}
  811be4:	e037883a 	mov	sp,fp
  811be8:	dfc00117 	ldw	ra,4(sp)
  811bec:	df000017 	ldw	fp,0(sp)
  811bf0:	dec00204 	addi	sp,sp,8
  811bf4:	f800283a 	ret

00811bf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811bf8:	defff904 	addi	sp,sp,-28
  811bfc:	dfc00615 	stw	ra,24(sp)
  811c00:	df000515 	stw	fp,20(sp)
  811c04:	df000504 	addi	fp,sp,20
  811c08:	e13ffe15 	stw	r4,-8(fp)
  811c0c:	e17ffd15 	stw	r5,-12(fp)
  811c10:	e1bffc15 	stw	r6,-16(fp)
  811c14:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  811c18:	e1bffb17 	ldw	r6,-20(fp)
  811c1c:	e17ffc17 	ldw	r5,-16(fp)
  811c20:	e13ffd17 	ldw	r4,-12(fp)
  811c24:	0811e600 	call	811e60 <open>
  811c28:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  811c2c:	e0bfff17 	ldw	r2,-4(fp)
  811c30:	10002016 	blt	r2,zero,811cb4 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  811c34:	e0ffff17 	ldw	r3,-4(fp)
  811c38:	1805883a 	mov	r2,r3
  811c3c:	1085883a 	add	r2,r2,r2
  811c40:	10c5883a 	add	r2,r2,r3
  811c44:	100490ba 	slli	r2,r2,2
  811c48:	00c02074 	movhi	r3,129
  811c4c:	10c7883a 	add	r3,r2,r3
  811c50:	18ce9717 	ldw	r3,14940(r3)
  811c54:	e0bffe17 	ldw	r2,-8(fp)
  811c58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811c5c:	e0ffff17 	ldw	r3,-4(fp)
  811c60:	1805883a 	mov	r2,r3
  811c64:	1085883a 	add	r2,r2,r2
  811c68:	10c5883a 	add	r2,r2,r3
  811c6c:	100490ba 	slli	r2,r2,2
  811c70:	00c02074 	movhi	r3,129
  811c74:	10c7883a 	add	r3,r2,r3
  811c78:	18ce9817 	ldw	r3,14944(r3)
  811c7c:	e0bffe17 	ldw	r2,-8(fp)
  811c80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811c84:	e0ffff17 	ldw	r3,-4(fp)
  811c88:	1805883a 	mov	r2,r3
  811c8c:	1085883a 	add	r2,r2,r2
  811c90:	10c5883a 	add	r2,r2,r3
  811c94:	100490ba 	slli	r2,r2,2
  811c98:	00c02074 	movhi	r3,129
  811c9c:	10c7883a 	add	r3,r2,r3
  811ca0:	18ce9917 	ldw	r3,14948(r3)
  811ca4:	e0bffe17 	ldw	r2,-8(fp)
  811ca8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811cac:	e13fff17 	ldw	r4,-4(fp)
  811cb0:	08104f00 	call	8104f0 <alt_release_fd>
  }
} 
  811cb4:	0001883a 	nop
  811cb8:	e037883a 	mov	sp,fp
  811cbc:	dfc00117 	ldw	ra,4(sp)
  811cc0:	df000017 	ldw	fp,0(sp)
  811cc4:	dec00204 	addi	sp,sp,8
  811cc8:	f800283a 	ret

00811ccc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811ccc:	defffb04 	addi	sp,sp,-20
  811cd0:	dfc00415 	stw	ra,16(sp)
  811cd4:	df000315 	stw	fp,12(sp)
  811cd8:	df000304 	addi	fp,sp,12
  811cdc:	e13fff15 	stw	r4,-4(fp)
  811ce0:	e17ffe15 	stw	r5,-8(fp)
  811ce4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811ce8:	01c07fc4 	movi	r7,511
  811cec:	01800044 	movi	r6,1
  811cf0:	e17fff17 	ldw	r5,-4(fp)
  811cf4:	01002074 	movhi	r4,129
  811cf8:	210e9a04 	addi	r4,r4,14952
  811cfc:	0811bf80 	call	811bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811d00:	01c07fc4 	movi	r7,511
  811d04:	000d883a 	mov	r6,zero
  811d08:	e17ffe17 	ldw	r5,-8(fp)
  811d0c:	01002074 	movhi	r4,129
  811d10:	210e9704 	addi	r4,r4,14940
  811d14:	0811bf80 	call	811bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811d18:	01c07fc4 	movi	r7,511
  811d1c:	01800044 	movi	r6,1
  811d20:	e17ffd17 	ldw	r5,-12(fp)
  811d24:	01002074 	movhi	r4,129
  811d28:	210e9d04 	addi	r4,r4,14964
  811d2c:	0811bf80 	call	811bf8 <alt_open_fd>
}  
  811d30:	0001883a 	nop
  811d34:	e037883a 	mov	sp,fp
  811d38:	dfc00117 	ldw	ra,4(sp)
  811d3c:	df000017 	ldw	fp,0(sp)
  811d40:	dec00204 	addi	sp,sp,8
  811d44:	f800283a 	ret

00811d48 <alt_get_errno>:
{
  811d48:	defffe04 	addi	sp,sp,-8
  811d4c:	dfc00115 	stw	ra,4(sp)
  811d50:	df000015 	stw	fp,0(sp)
  811d54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811d58:	d0a01117 	ldw	r2,-32700(gp)
  811d5c:	10000326 	beq	r2,zero,811d6c <alt_get_errno+0x24>
  811d60:	d0a01117 	ldw	r2,-32700(gp)
  811d64:	103ee83a 	callr	r2
  811d68:	00000106 	br	811d70 <alt_get_errno+0x28>
  811d6c:	d0a71804 	addi	r2,gp,-25504
}
  811d70:	e037883a 	mov	sp,fp
  811d74:	dfc00117 	ldw	ra,4(sp)
  811d78:	df000017 	ldw	fp,0(sp)
  811d7c:	dec00204 	addi	sp,sp,8
  811d80:	f800283a 	ret

00811d84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811d84:	defffd04 	addi	sp,sp,-12
  811d88:	df000215 	stw	fp,8(sp)
  811d8c:	df000204 	addi	fp,sp,8
  811d90:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811d94:	e0bffe17 	ldw	r2,-8(fp)
  811d98:	10800217 	ldw	r2,8(r2)
  811d9c:	10d00034 	orhi	r3,r2,16384
  811da0:	e0bffe17 	ldw	r2,-8(fp)
  811da4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811da8:	e03fff15 	stw	zero,-4(fp)
  811dac:	00002306 	br	811e3c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811db0:	e0ffff17 	ldw	r3,-4(fp)
  811db4:	1805883a 	mov	r2,r3
  811db8:	1085883a 	add	r2,r2,r2
  811dbc:	10c5883a 	add	r2,r2,r3
  811dc0:	100490ba 	slli	r2,r2,2
  811dc4:	00c02074 	movhi	r3,129
  811dc8:	10c7883a 	add	r3,r2,r3
  811dcc:	18ce9717 	ldw	r3,14940(r3)
  811dd0:	e0bffe17 	ldw	r2,-8(fp)
  811dd4:	10800017 	ldw	r2,0(r2)
  811dd8:	1880151e 	bne	r3,r2,811e30 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811ddc:	e0ffff17 	ldw	r3,-4(fp)
  811de0:	1805883a 	mov	r2,r3
  811de4:	1085883a 	add	r2,r2,r2
  811de8:	10c5883a 	add	r2,r2,r3
  811dec:	100490ba 	slli	r2,r2,2
  811df0:	00c02074 	movhi	r3,129
  811df4:	10c7883a 	add	r3,r2,r3
  811df8:	188e9917 	ldw	r2,14948(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  811dfc:	10000c0e 	bge	r2,zero,811e30 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  811e00:	e0ffff17 	ldw	r3,-4(fp)
  811e04:	1805883a 	mov	r2,r3
  811e08:	1085883a 	add	r2,r2,r2
  811e0c:	10c5883a 	add	r2,r2,r3
  811e10:	100490ba 	slli	r2,r2,2
  811e14:	00c02074 	movhi	r3,129
  811e18:	18ce9704 	addi	r3,r3,14940
  811e1c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811e20:	e0fffe17 	ldw	r3,-8(fp)
  811e24:	18800226 	beq	r3,r2,811e30 <alt_file_locked+0xac>
    {
      return -EACCES;
  811e28:	00bffcc4 	movi	r2,-13
  811e2c:	00000806 	br	811e50 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  811e30:	e0bfff17 	ldw	r2,-4(fp)
  811e34:	10800044 	addi	r2,r2,1
  811e38:	e0bfff15 	stw	r2,-4(fp)
  811e3c:	d0a01017 	ldw	r2,-32704(gp)
  811e40:	1007883a 	mov	r3,r2
  811e44:	e0bfff17 	ldw	r2,-4(fp)
  811e48:	18bfd92e 	bgeu	r3,r2,811db0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811e4c:	0005883a 	mov	r2,zero
}
  811e50:	e037883a 	mov	sp,fp
  811e54:	df000017 	ldw	fp,0(sp)
  811e58:	dec00104 	addi	sp,sp,4
  811e5c:	f800283a 	ret

00811e60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811e60:	defff604 	addi	sp,sp,-40
  811e64:	dfc00915 	stw	ra,36(sp)
  811e68:	df000815 	stw	fp,32(sp)
  811e6c:	df000804 	addi	fp,sp,32
  811e70:	e13ffa15 	stw	r4,-24(fp)
  811e74:	e17ff915 	stw	r5,-28(fp)
  811e78:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811e7c:	00bfffc4 	movi	r2,-1
  811e80:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  811e84:	00bffb44 	movi	r2,-19
  811e88:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  811e8c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811e90:	d1600e04 	addi	r5,gp,-32712
  811e94:	e13ffa17 	ldw	r4,-24(fp)
  811e98:	0811fe40 	call	811fe4 <alt_find_dev>
  811e9c:	e0bfff15 	stw	r2,-4(fp)
  811ea0:	e0bfff17 	ldw	r2,-4(fp)
  811ea4:	1000051e 	bne	r2,zero,811ebc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811ea8:	e13ffa17 	ldw	r4,-24(fp)
  811eac:	08120740 	call	812074 <alt_find_file>
  811eb0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  811eb4:	00800044 	movi	r2,1
  811eb8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811ebc:	e0bfff17 	ldw	r2,-4(fp)
  811ec0:	10002c26 	beq	r2,zero,811f74 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811ec4:	e13fff17 	ldw	r4,-4(fp)
  811ec8:	081217c0 	call	81217c <alt_get_fd>
  811ecc:	e0bffe15 	stw	r2,-8(fp)
  811ed0:	e0bffe17 	ldw	r2,-8(fp)
  811ed4:	1000030e 	bge	r2,zero,811ee4 <open+0x84>
    {
      status = index;
  811ed8:	e0bffe17 	ldw	r2,-8(fp)
  811edc:	e0bffd15 	stw	r2,-12(fp)
  811ee0:	00002606 	br	811f7c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811ee4:	e0fffe17 	ldw	r3,-8(fp)
  811ee8:	1805883a 	mov	r2,r3
  811eec:	1085883a 	add	r2,r2,r2
  811ef0:	10c5883a 	add	r2,r2,r3
  811ef4:	100490ba 	slli	r2,r2,2
  811ef8:	00c02074 	movhi	r3,129
  811efc:	18ce9704 	addi	r3,r3,14940
  811f00:	10c5883a 	add	r2,r2,r3
  811f04:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811f08:	e0fff917 	ldw	r3,-28(fp)
  811f0c:	00900034 	movhi	r2,16384
  811f10:	10bfffc4 	addi	r2,r2,-1
  811f14:	1886703a 	and	r3,r3,r2
  811f18:	e0bffb17 	ldw	r2,-20(fp)
  811f1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811f20:	e0bffc17 	ldw	r2,-16(fp)
  811f24:	1000051e 	bne	r2,zero,811f3c <open+0xdc>
  811f28:	e13ffb17 	ldw	r4,-20(fp)
  811f2c:	0811d840 	call	811d84 <alt_file_locked>
  811f30:	e0bffd15 	stw	r2,-12(fp)
  811f34:	e0bffd17 	ldw	r2,-12(fp)
  811f38:	10001016 	blt	r2,zero,811f7c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811f3c:	e0bfff17 	ldw	r2,-4(fp)
  811f40:	10800317 	ldw	r2,12(r2)
  811f44:	10000826 	beq	r2,zero,811f68 <open+0x108>
  811f48:	e0bfff17 	ldw	r2,-4(fp)
  811f4c:	10800317 	ldw	r2,12(r2)
  811f50:	e1fff817 	ldw	r7,-32(fp)
  811f54:	e1bff917 	ldw	r6,-28(fp)
  811f58:	e17ffa17 	ldw	r5,-24(fp)
  811f5c:	e13ffb17 	ldw	r4,-20(fp)
  811f60:	103ee83a 	callr	r2
  811f64:	00000106 	br	811f6c <open+0x10c>
  811f68:	0005883a 	mov	r2,zero
  811f6c:	e0bffd15 	stw	r2,-12(fp)
  811f70:	00000206 	br	811f7c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811f74:	00bffb44 	movi	r2,-19
  811f78:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811f7c:	e0bffd17 	ldw	r2,-12(fp)
  811f80:	1000090e 	bge	r2,zero,811fa8 <open+0x148>
  {
    alt_release_fd (index);  
  811f84:	e13ffe17 	ldw	r4,-8(fp)
  811f88:	08104f00 	call	8104f0 <alt_release_fd>
    ALT_ERRNO = -status;
  811f8c:	0811d480 	call	811d48 <alt_get_errno>
  811f90:	1007883a 	mov	r3,r2
  811f94:	e0bffd17 	ldw	r2,-12(fp)
  811f98:	0085c83a 	sub	r2,zero,r2
  811f9c:	18800015 	stw	r2,0(r3)
    return -1;
  811fa0:	00bfffc4 	movi	r2,-1
  811fa4:	00000106 	br	811fac <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  811fa8:	e0bffe17 	ldw	r2,-8(fp)
}
  811fac:	e037883a 	mov	sp,fp
  811fb0:	dfc00117 	ldw	ra,4(sp)
  811fb4:	df000017 	ldw	fp,0(sp)
  811fb8:	dec00204 	addi	sp,sp,8
  811fbc:	f800283a 	ret

00811fc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811fc0:	deffff04 	addi	sp,sp,-4
  811fc4:	df000015 	stw	fp,0(sp)
  811fc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811fcc:	000170fa 	wrctl	ienable,zero
}
  811fd0:	0001883a 	nop
  811fd4:	e037883a 	mov	sp,fp
  811fd8:	df000017 	ldw	fp,0(sp)
  811fdc:	dec00104 	addi	sp,sp,4
  811fe0:	f800283a 	ret

00811fe4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811fe4:	defffa04 	addi	sp,sp,-24
  811fe8:	dfc00515 	stw	ra,20(sp)
  811fec:	df000415 	stw	fp,16(sp)
  811ff0:	df000404 	addi	fp,sp,16
  811ff4:	e13ffd15 	stw	r4,-12(fp)
  811ff8:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811ffc:	e0bffc17 	ldw	r2,-16(fp)
  812000:	10800017 	ldw	r2,0(r2)
  812004:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812008:	e13ffd17 	ldw	r4,-12(fp)
  81200c:	0802c5c0 	call	802c5c <strlen>
  812010:	10800044 	addi	r2,r2,1
  812014:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812018:	00000d06 	br	812050 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81201c:	e0bfff17 	ldw	r2,-4(fp)
  812020:	10800217 	ldw	r2,8(r2)
  812024:	e0fffe17 	ldw	r3,-8(fp)
  812028:	180d883a 	mov	r6,r3
  81202c:	e17ffd17 	ldw	r5,-12(fp)
  812030:	1009883a 	mov	r4,r2
  812034:	08123a00 	call	8123a0 <memcmp>
  812038:	1000021e 	bne	r2,zero,812044 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81203c:	e0bfff17 	ldw	r2,-4(fp)
  812040:	00000706 	br	812060 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812044:	e0bfff17 	ldw	r2,-4(fp)
  812048:	10800017 	ldw	r2,0(r2)
  81204c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  812050:	e0ffff17 	ldw	r3,-4(fp)
  812054:	e0bffc17 	ldw	r2,-16(fp)
  812058:	18bff01e 	bne	r3,r2,81201c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  81205c:	0005883a 	mov	r2,zero
}
  812060:	e037883a 	mov	sp,fp
  812064:	dfc00117 	ldw	ra,4(sp)
  812068:	df000017 	ldw	fp,0(sp)
  81206c:	dec00204 	addi	sp,sp,8
  812070:	f800283a 	ret

00812074 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812074:	defffb04 	addi	sp,sp,-20
  812078:	dfc00415 	stw	ra,16(sp)
  81207c:	df000315 	stw	fp,12(sp)
  812080:	df000304 	addi	fp,sp,12
  812084:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812088:	d0a00c17 	ldw	r2,-32720(gp)
  81208c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812090:	00003106 	br	812158 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812094:	e0bfff17 	ldw	r2,-4(fp)
  812098:	10800217 	ldw	r2,8(r2)
  81209c:	1009883a 	mov	r4,r2
  8120a0:	0802c5c0 	call	802c5c <strlen>
  8120a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8120a8:	e0bfff17 	ldw	r2,-4(fp)
  8120ac:	10c00217 	ldw	r3,8(r2)
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	10bfffc4 	addi	r2,r2,-1
  8120b8:	1885883a 	add	r2,r3,r2
  8120bc:	10800003 	ldbu	r2,0(r2)
  8120c0:	10803fcc 	andi	r2,r2,255
  8120c4:	1080201c 	xori	r2,r2,128
  8120c8:	10bfe004 	addi	r2,r2,-128
  8120cc:	10800bd8 	cmpnei	r2,r2,47
  8120d0:	1000031e 	bne	r2,zero,8120e0 <alt_find_file+0x6c>
    {
      len -= 1;
  8120d4:	e0bffe17 	ldw	r2,-8(fp)
  8120d8:	10bfffc4 	addi	r2,r2,-1
  8120dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8120e0:	e0bffe17 	ldw	r2,-8(fp)
  8120e4:	e0fffd17 	ldw	r3,-12(fp)
  8120e8:	1885883a 	add	r2,r3,r2
  8120ec:	10800003 	ldbu	r2,0(r2)
  8120f0:	10803fcc 	andi	r2,r2,255
  8120f4:	1080201c 	xori	r2,r2,128
  8120f8:	10bfe004 	addi	r2,r2,-128
  8120fc:	10800be0 	cmpeqi	r2,r2,47
  812100:	1000081e 	bne	r2,zero,812124 <alt_find_file+0xb0>
  812104:	e0bffe17 	ldw	r2,-8(fp)
  812108:	e0fffd17 	ldw	r3,-12(fp)
  81210c:	1885883a 	add	r2,r3,r2
  812110:	10800003 	ldbu	r2,0(r2)
  812114:	10803fcc 	andi	r2,r2,255
  812118:	1080201c 	xori	r2,r2,128
  81211c:	10bfe004 	addi	r2,r2,-128
  812120:	10000a1e 	bne	r2,zero,81214c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812124:	e0bfff17 	ldw	r2,-4(fp)
  812128:	10800217 	ldw	r2,8(r2)
  81212c:	e0fffe17 	ldw	r3,-8(fp)
  812130:	180d883a 	mov	r6,r3
  812134:	e17ffd17 	ldw	r5,-12(fp)
  812138:	1009883a 	mov	r4,r2
  81213c:	08123a00 	call	8123a0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  812140:	1000021e 	bne	r2,zero,81214c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  812144:	e0bfff17 	ldw	r2,-4(fp)
  812148:	00000706 	br	812168 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81214c:	e0bfff17 	ldw	r2,-4(fp)
  812150:	10800017 	ldw	r2,0(r2)
  812154:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  812158:	e0ffff17 	ldw	r3,-4(fp)
  81215c:	d0a00c04 	addi	r2,gp,-32720
  812160:	18bfcc1e 	bne	r3,r2,812094 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  812164:	0005883a 	mov	r2,zero
}
  812168:	e037883a 	mov	sp,fp
  81216c:	dfc00117 	ldw	ra,4(sp)
  812170:	df000017 	ldw	fp,0(sp)
  812174:	dec00204 	addi	sp,sp,8
  812178:	f800283a 	ret

0081217c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81217c:	defffc04 	addi	sp,sp,-16
  812180:	df000315 	stw	fp,12(sp)
  812184:	df000304 	addi	fp,sp,12
  812188:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  81218c:	00bffa04 	movi	r2,-24
  812190:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812194:	e03fff15 	stw	zero,-4(fp)
  812198:	00001d06 	br	812210 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  81219c:	e0ffff17 	ldw	r3,-4(fp)
  8121a0:	1805883a 	mov	r2,r3
  8121a4:	1085883a 	add	r2,r2,r2
  8121a8:	10c5883a 	add	r2,r2,r3
  8121ac:	100490ba 	slli	r2,r2,2
  8121b0:	00c02074 	movhi	r3,129
  8121b4:	10c7883a 	add	r3,r2,r3
  8121b8:	188e9717 	ldw	r2,14940(r3)
  8121bc:	1000111e 	bne	r2,zero,812204 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  8121c0:	e0ffff17 	ldw	r3,-4(fp)
  8121c4:	1805883a 	mov	r2,r3
  8121c8:	1085883a 	add	r2,r2,r2
  8121cc:	10c5883a 	add	r2,r2,r3
  8121d0:	100490ba 	slli	r2,r2,2
  8121d4:	e13ffd17 	ldw	r4,-12(fp)
  8121d8:	00c02074 	movhi	r3,129
  8121dc:	10c7883a 	add	r3,r2,r3
  8121e0:	190e9715 	stw	r4,14940(r3)
      if (i > alt_max_fd)
  8121e4:	d0e01017 	ldw	r3,-32704(gp)
  8121e8:	e0bfff17 	ldw	r2,-4(fp)
  8121ec:	1880020e 	bge	r3,r2,8121f8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8121f0:	e0bfff17 	ldw	r2,-4(fp)
  8121f4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  8121f8:	e0bfff17 	ldw	r2,-4(fp)
  8121fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  812200:	00000706 	br	812220 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  812204:	e0bfff17 	ldw	r2,-4(fp)
  812208:	10800044 	addi	r2,r2,1
  81220c:	e0bfff15 	stw	r2,-4(fp)
  812210:	e0bfff17 	ldw	r2,-4(fp)
  812214:	10800810 	cmplti	r2,r2,32
  812218:	103fe01e 	bne	r2,zero,81219c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  81221c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  812220:	e0bffe17 	ldw	r2,-8(fp)
}
  812224:	e037883a 	mov	sp,fp
  812228:	df000017 	ldw	fp,0(sp)
  81222c:	dec00104 	addi	sp,sp,4
  812230:	f800283a 	ret

00812234 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  812234:	defffb04 	addi	sp,sp,-20
  812238:	df000415 	stw	fp,16(sp)
  81223c:	df000404 	addi	fp,sp,16
  812240:	e13ffd15 	stw	r4,-12(fp)
  812244:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  812248:	e0bffc17 	ldw	r2,-16(fp)
  81224c:	10820070 	cmpltui	r2,r2,2049
  812250:	1000021e 	bne	r2,zero,81225c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  812254:	00820004 	movi	r2,2048
  812258:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  81225c:	e0fffd17 	ldw	r3,-12(fp)
  812260:	e0bffc17 	ldw	r2,-16(fp)
  812264:	1885883a 	add	r2,r3,r2
  812268:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81226c:	e0bffd17 	ldw	r2,-12(fp)
  812270:	e0bfff15 	stw	r2,-4(fp)
  812274:	00000506 	br	81228c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812278:	e0bfff17 	ldw	r2,-4(fp)
  81227c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812280:	e0bfff17 	ldw	r2,-4(fp)
  812284:	10800804 	addi	r2,r2,32
  812288:	e0bfff15 	stw	r2,-4(fp)
  81228c:	e0ffff17 	ldw	r3,-4(fp)
  812290:	e0bffe17 	ldw	r2,-8(fp)
  812294:	18bff836 	bltu	r3,r2,812278 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812298:	e0bffd17 	ldw	r2,-12(fp)
  81229c:	108007cc 	andi	r2,r2,31
  8122a0:	10000226 	beq	r2,zero,8122ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8122a4:	e0bfff17 	ldw	r2,-4(fp)
  8122a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8122ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8122b0:	0001883a 	nop
  8122b4:	e037883a 	mov	sp,fp
  8122b8:	df000017 	ldw	fp,0(sp)
  8122bc:	dec00104 	addi	sp,sp,4
  8122c0:	f800283a 	ret

008122c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8122c4:	defffe04 	addi	sp,sp,-8
  8122c8:	df000115 	stw	fp,4(sp)
  8122cc:	df000104 	addi	fp,sp,4
  8122d0:	e13fff15 	stw	r4,-4(fp)
  8122d4:	e0bfff17 	ldw	r2,-4(fp)
  8122d8:	10bffe84 	addi	r2,r2,-6
  8122dc:	10c00428 	cmpgeui	r3,r2,16
  8122e0:	1800191e 	bne	r3,zero,812348 <alt_exception_cause_generated_bad_addr+0x84>
  8122e4:	100690ba 	slli	r3,r2,2
  8122e8:	00802074 	movhi	r2,129
  8122ec:	1885883a 	add	r2,r3,r2
  8122f0:	1088be17 	ldw	r2,8952(r2)
  8122f4:	1000683a 	jmp	r2
  8122f8:	00812338 	rdprs	r2,zero,1164
  8122fc:	00812338 	rdprs	r2,zero,1164
  812300:	00812348 	cmpgei	r2,zero,1165
  812304:	00812348 	cmpgei	r2,zero,1165
  812308:	00812348 	cmpgei	r2,zero,1165
  81230c:	00812338 	rdprs	r2,zero,1164
  812310:	00812340 	call	81234 <__alt_mem_sdram-0x77edcc>
  812314:	00812348 	cmpgei	r2,zero,1165
  812318:	00812338 	rdprs	r2,zero,1164
  81231c:	00812338 	rdprs	r2,zero,1164
  812320:	00812348 	cmpgei	r2,zero,1165
  812324:	00812338 	rdprs	r2,zero,1164
  812328:	00812340 	call	81234 <__alt_mem_sdram-0x77edcc>
  81232c:	00812348 	cmpgei	r2,zero,1165
  812330:	00812348 	cmpgei	r2,zero,1165
  812334:	00812338 	rdprs	r2,zero,1164
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812338:	00800044 	movi	r2,1
  81233c:	00000306 	br	81234c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812340:	0005883a 	mov	r2,zero
  812344:	00000106 	br	81234c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  812348:	0005883a 	mov	r2,zero
  }
}
  81234c:	e037883a 	mov	sp,fp
  812350:	df000017 	ldw	fp,0(sp)
  812354:	dec00104 	addi	sp,sp,4
  812358:	f800283a 	ret

0081235c <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
  81235c:	200b883a 	mov	r5,r4
  812360:	000f883a 	mov	r7,zero
  812364:	000d883a 	mov	r6,zero
  812368:	0009883a 	mov	r4,zero
  81236c:	08124181 	jmpi	812418 <__register_exitproc>

00812370 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
  812370:	defffe04 	addi	sp,sp,-8
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
  812374:	000b883a 	mov	r5,zero
{
  812378:	dc000015 	stw	r16,0(sp)
  81237c:	dfc00115 	stw	ra,4(sp)
  812380:	2021883a 	mov	r16,r4
    __call_exitprocs (code, NULL);
  812384:	08124a40 	call	8124a4 <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
  812388:	d1200817 	ldw	r4,-32736(gp)
  81238c:	20800f17 	ldw	r2,60(r4)
  812390:	10000126 	beq	r2,zero,812398 <exit+0x28>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
  812394:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
  812398:	8009883a 	mov	r4,r16
  81239c:	080fd3c0 	call	80fd3c <_exit>

008123a0 <memcmp>:
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
  8123a0:	30800130 	cmpltui	r2,r6,4
  8123a4:	10000b1e 	bne	r2,zero,8123d4 <memcmp+0x34>
  8123a8:	2144b03a 	or	r2,r4,r5
  8123ac:	108000cc 	andi	r2,r2,3
  8123b0:	1000171e 	bne	r2,zero,812410 <memcmp+0x70>
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
        {
          if (*a1 != *a2) 
  8123b4:	20c00017 	ldw	r3,0(r4)
  8123b8:	28800017 	ldw	r2,0(r5)
  8123bc:	1880141e 	bne	r3,r2,812410 <memcmp+0x70>
   	    break;
          a1++;
          a2++;
          n -= LBLOCKSIZE;
  8123c0:	31bfff04 	addi	r6,r6,-4
      while (n >= LBLOCKSIZE)
  8123c4:	30800128 	cmpgeui	r2,r6,4
          a1++;
  8123c8:	21000104 	addi	r4,r4,4
          a2++;
  8123cc:	29400104 	addi	r5,r5,4
      while (n >= LBLOCKSIZE)
  8123d0:	103ff81e 	bne	r2,zero,8123b4 <memcmp+0x14>

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
  8123d4:	30bfffc4 	addi	r2,r6,-1
  8123d8:	30000b26 	beq	r6,zero,812408 <memcmp+0x68>
  8123dc:	11800044 	addi	r6,r2,1
  8123e0:	218d883a 	add	r6,r4,r6
  8123e4:	00000106 	br	8123ec <memcmp+0x4c>
  8123e8:	21800726 	beq	r4,r6,812408 <memcmp+0x68>
    {
      if (*s1 != *s2)
  8123ec:	20800003 	ldbu	r2,0(r4)
  8123f0:	28c00003 	ldbu	r3,0(r5)
	return *s1 - *s2;
      s1++;
  8123f4:	21000044 	addi	r4,r4,1
      s2++;
  8123f8:	29400044 	addi	r5,r5,1
      if (*s1 != *s2)
  8123fc:	10fffa26 	beq	r2,r3,8123e8 <memcmp+0x48>
	return *s1 - *s2;
  812400:	10c5c83a 	sub	r2,r2,r3
  812404:	f800283a 	ret
    }

  return 0;
  812408:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  81240c:	f800283a 	ret
  while (n--)
  812410:	30bfffc4 	addi	r2,r6,-1
  812414:	003ff106 	br	8123dc <memcmp+0x3c>

00812418 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
  812418:	d0e00817 	ldw	r3,-32736(gp)
  81241c:	18805217 	ldw	r2,328(r3)
  if (p == NULL)
  812420:	10001726 	beq	r2,zero,812480 <__register_exitproc+0x68>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
  812424:	10c00117 	ldw	r3,4(r2)
  812428:	1a000808 	cmpgei	r8,r3,32
  81242c:	40001b1e 	bne	r8,zero,81249c <__register_exitproc+0x84>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
  812430:	20000b26 	beq	r4,zero,812460 <__register_exitproc+0x48>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
  812434:	181090ba 	slli	r8,r3,2
      args->_fntypes |= (1 << p->_ind);
  812438:	02400044 	movi	r9,1
  81243c:	48d2983a 	sll	r9,r9,r3
  812440:	1211883a 	add	r8,r2,r8
      args->_fnargs[p->_ind] = arg;
  812444:	41802215 	stw	r6,136(r8)
      args->_fntypes |= (1 << p->_ind);
  812448:	11806217 	ldw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
  81244c:	21000098 	cmpnei	r4,r4,2
      args->_fntypes |= (1 << p->_ind);
  812450:	324cb03a 	or	r6,r6,r9
  812454:	11806215 	stw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
  812458:	41c04215 	stw	r7,264(r8)
      if (type == __et_cxa)
  81245c:	20000b26 	beq	r4,zero,81248c <__register_exitproc+0x74>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
  812460:	19000084 	addi	r4,r3,2
  812464:	200890ba 	slli	r4,r4,2
  812468:	18c00044 	addi	r3,r3,1
  81246c:	10c00115 	stw	r3,4(r2)
  812470:	1105883a 	add	r2,r2,r4
  812474:	11400015 	stw	r5,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
  812478:	0005883a 	mov	r2,zero
  81247c:	f800283a 	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  812480:	18805304 	addi	r2,r3,332
  812484:	18805215 	stw	r2,328(r3)
  812488:	003fe606 	br	812424 <__register_exitproc+0xc>
	args->_is_cxa |= (1 << p->_ind);
  81248c:	11006317 	ldw	r4,396(r2)
  812490:	2252b03a 	or	r9,r4,r9
  812494:	12406315 	stw	r9,396(r2)
  812498:	003ff106 	br	812460 <__register_exitproc+0x48>
      return -1;
  81249c:	00bfffc4 	movi	r2,-1
}
  8124a0:	f800283a 	ret

008124a4 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
  8124a4:	defff704 	addi	sp,sp,-36
  8124a8:	dcc00315 	stw	r19,12(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
  8124ac:	d4e00817 	ldw	r19,-32736(gp)
{
  8124b0:	dc800215 	stw	r18,8(sp)
  8124b4:	dfc00815 	stw	ra,32(sp)
  p = _GLOBAL_ATEXIT;
  8124b8:	9c805217 	ldw	r18,328(r19)
{
  8124bc:	ddc00715 	stw	r23,28(sp)
  8124c0:	dd800615 	stw	r22,24(sp)
  8124c4:	dd400515 	stw	r21,20(sp)
  8124c8:	dd000415 	stw	r20,16(sp)
  8124cc:	dc400115 	stw	r17,4(sp)
  8124d0:	dc000015 	stw	r16,0(sp)
  lastp = &_GLOBAL_ATEXIT;
  while (p)
  8124d4:	90001026 	beq	r18,zero,812518 <__call_exitprocs+0x74>
  8124d8:	202b883a 	mov	r21,r4
  8124dc:	282d883a 	mov	r22,r5
  8124e0:	05000044 	movi	r20,1
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
  8124e4:	94000117 	ldw	r16,4(r18)
  8124e8:	847fffc4 	addi	r17,r16,-1
  8124ec:	88000a16 	blt	r17,zero,812518 <__call_exitprocs+0x74>
  8124f0:	84000044 	addi	r16,r16,1
  8124f4:	802090ba 	slli	r16,r16,2
  8124f8:	9421883a 	add	r16,r18,r16
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
  8124fc:	b0001126 	beq	r22,zero,812544 <__call_exitprocs+0xa0>
  812500:	80804017 	ldw	r2,256(r16)
  812504:	15800f26 	beq	r2,r22,812544 <__call_exitprocs+0xa0>
      for (n = p->_ind - 1; n >= 0; n--)
  812508:	8c7fffc4 	addi	r17,r17,-1
  81250c:	88bfffd8 	cmpnei	r2,r17,-1
  812510:	843fff04 	addi	r16,r16,-4
  812514:	103ff91e 	bne	r2,zero,8124fc <__call_exitprocs+0x58>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
  812518:	dfc00817 	ldw	ra,32(sp)
  81251c:	ddc00717 	ldw	r23,28(sp)
  812520:	dd800617 	ldw	r22,24(sp)
  812524:	dd400517 	ldw	r21,20(sp)
  812528:	dd000417 	ldw	r20,16(sp)
  81252c:	dcc00317 	ldw	r19,12(sp)
  812530:	dc800217 	ldw	r18,8(sp)
  812534:	dc400117 	ldw	r17,4(sp)
  812538:	dc000017 	ldw	r16,0(sp)
  81253c:	dec00904 	addi	sp,sp,36
  812540:	f800283a 	ret
	  if (n == p->_ind - 1)
  812544:	90800117 	ldw	r2,4(r18)
	  fn = p->_fns[n];
  812548:	81800017 	ldw	r6,0(r16)
	  if (n == p->_ind - 1)
  81254c:	10bfffc4 	addi	r2,r2,-1
  812550:	14401726 	beq	r2,r17,8125b0 <__call_exitprocs+0x10c>
	    p->_fns[n] = NULL;
  812554:	80000015 	stw	zero,0(r16)
	  if (!fn)
  812558:	303feb26 	beq	r6,zero,812508 <__call_exitprocs+0x64>
	  i = 1 << n;
  81255c:	a446983a 	sll	r3,r20,r17
	  if (!args || (args->_fntypes & i) == 0)
  812560:	90806217 	ldw	r2,392(r18)
	  ind = p->_ind;
  812564:	95c00117 	ldw	r23,4(r18)
	  if (!args || (args->_fntypes & i) == 0)
  812568:	1884703a 	and	r2,r3,r2
  81256c:	1000081e 	bne	r2,zero,812590 <__call_exitprocs+0xec>
	    fn ();
  812570:	303ee83a 	callr	r6
	  if (ind != p->_ind || *lastp != p)
  812574:	90c00117 	ldw	r3,4(r18)
  p = _GLOBAL_ATEXIT;
  812578:	98805217 	ldw	r2,328(r19)
	  if (ind != p->_ind || *lastp != p)
  81257c:	1dc0011e 	bne	r3,r23,812584 <__call_exitprocs+0xe0>
  812580:	90bfe126 	beq	r18,r2,812508 <__call_exitprocs+0x64>
  while (p)
  812584:	103fe426 	beq	r2,zero,812518 <__call_exitprocs+0x74>
  812588:	1025883a 	mov	r18,r2
  81258c:	003fd506 	br	8124e4 <__call_exitprocs+0x40>
	  else if ((args->_is_cxa & i) == 0)
  812590:	90806317 	ldw	r2,396(r18)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  812594:	81002017 	ldw	r4,128(r16)
	  else if ((args->_is_cxa & i) == 0)
  812598:	1886703a 	and	r3,r3,r2
  81259c:	1800061e 	bne	r3,zero,8125b8 <__call_exitprocs+0x114>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  8125a0:	200b883a 	mov	r5,r4
  8125a4:	a809883a 	mov	r4,r21
  8125a8:	303ee83a 	callr	r6
  8125ac:	003ff106 	br	812574 <__call_exitprocs+0xd0>
	    p->_ind--;
  8125b0:	94400115 	stw	r17,4(r18)
  8125b4:	003fe806 	br	812558 <__call_exitprocs+0xb4>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  8125b8:	303ee83a 	callr	r6
  8125bc:	003fed06 	br	812574 <__call_exitprocs+0xd0>
