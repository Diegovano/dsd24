
task6_fp_mult.elf:     file format elf32-littlenios2
task6_fp_mult.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001282c memsz 0x0001282c flags r-x
    LOAD off    0x0001384c vaddr 0x0081284c paddr 0x00814444 align 2**12
         filesz 0x00001bf8 memsz 0x00001bf8 flags rw-
    LOAD off    0x0001603c vaddr 0x0081603c paddr 0x0081603c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b50  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ac4  00811d88  00811d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf8  0081284c  00814444  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0081603c  0081603c  0001603c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816194  00816194  00015444  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00015444  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001240  00000000  00000000  00015478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000304a0  00000000  00000000  000166b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000c732  00000000  00000000  00046b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001a5db  00000000  00000000  0005328a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000280c  00000000  00000000  0006d868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004f16  00000000  00000000  00070074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000214ae  00000000  00000000  00074f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  00096438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a20  00000000  00000000  00096468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0009c6a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009c6a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009c6ac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009c6ad  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009c6ae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009c6b2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009c6b6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009c6ba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009c6c3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009c6cc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0009c6d5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  0009c6e7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  0009c71f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ed55  00000000  00000000  000a17b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
00811d88 l    d  .rodata	00000000 .rodata
0081284c l    d  .rwdata	00000000 .rwdata
0081603c l    d  .bss	00000000 .bss
00816194 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_fp_mult_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
00811ddc l     O .rodata	00000080 npio2_hw
00811e5c l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
008121a0 l     O .rodata	0000000c init_jk
00812174 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008045b0 l     F .text	000000c0 __sbprintf
00812304 l     O .rodata	00000010 blanks.1
008122f4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008047d0 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080643c l     F .text	00000008 __fp_lock
00806450 l     F .text	00000008 __fp_unlock
00806458 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081284c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812418 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809ae0 l     F .text	000000f4 __sprint_r.part.0
0080af48 l     F .text	000000c0 __sbprintf
0081254c l     O .rodata	00000010 blanks.1
0081253c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
0080b228 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080f3c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080f4d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080f53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080f740 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f8a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f994 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080fb74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814434 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0080fde0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0080fe94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080ffd4 l     F .text	00000034 alt_dev_reg
0081338c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008102cc l     F .text	0000020c altera_avalon_jtag_uart_irq
008104d8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810b1c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810d9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811214 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00811364 l     F .text	0000003c alt_get_errno
008113a0 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00816068 g     O .bss	00000004 alt_instruction_exception_handler
008091e8 g     F .text	00000070 _mprec_log10
008092d4 g     F .text	00000060 __any_on
0080b66c g     F .text	00000050 _isatty_r
00812424 g     O .rodata	00000028 __mprec_tinytens
0080fab0 g     F .text	0000007c alt_main
00802324 g     F .text	000000cc _puts_r
00816094 g     O .bss	00000100 alt_irq
0080b6bc g     F .text	0000005c _lseek_r
00814444 g       *ABS*	00000000 __flash_rwdata_start
0080def4 g     F .text	00000080 .hidden __eqdf2
00816194 g       *ABS*	00000000 __alt_heap_start
008143f8 g     O .rwdata	00000004 c_term1
0080beb8 g     F .text	00000058 _kill_r
008022f0 g     F .text	00000034 printf
0080b8d4 g     F .text	0000006c _wcrtomb_r
0080ba38 g     F .text	00000098 _signal_r
008099c4 g     F .text	0000005c __sseek
00806798 g     F .text	00000010 __sinit
0080b778 g     F .text	00000148 __swbuf_r
0080720c g     F .text	00000074 _setlocale_r
008065c0 g     F .text	00000078 __sfmoreglue
0080fb50 g     F .text	00000024 __malloc_unlock
00807f28 g     F .text	0000012c memmove
00806788 g     F .text	00000010 _cleanup
00808144 g     F .text	000000a4 _Balloc
00801fdc g     F .text	00000070 .hidden __fixsfsi
008143f4 g     O .rwdata	00000004 coeff3
0080df74 g     F .text	000000e8 .hidden __gtdf2
00811788 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0080fe1c g     F .text	00000078 times
008071ec g     F .text	00000008 __localeconv_l
00800724 g     F .text	00000468 __ieee754_rem_pio2f
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080b614 g     F .text	00000058 _fstat_r
0081604c g     O .bss	00000004 errno
0080993c g     F .text	00000008 __seofread
00816054 g     O .bss	00000004 alt_argv
0081c3ec g       *ABS*	00000000 _gp
00801b48 g     F .text	00000494 .hidden __subsf3
0080f634 g     F .text	00000020 getpid
0081320c g     O .rwdata	00000180 alt_fd_list
008117ac g     F .text	00000090 alt_find_dev
00807e28 g     F .text	00000100 memcpy
00806444 g     F .text	0000000c _cleanup_r
0080f278 g     F .text	000000b8 .hidden __floatsidf
008112e8 g     F .text	0000007c alt_io_redirect
0080e05c g     F .text	000000e8 .hidden __ltdf2
00811d88 g       *ABS*	00000000 __DTOR_END__
008023f0 g     F .text	0000000c puts
00811a8c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00809144 g     F .text	000000a4 __ratio
00814408 g     O .rwdata	00000004 c_term5
0080af30 g     F .text	00000018 __vfiprintf_internal
008106d4 g     F .text	00000220 altera_avalon_jtag_uart_read
008022c0 g     F .text	00000030 _printf_r
0080cbec g     F .text	00000064 .hidden __udivsi3
0080f690 g     F .text	000000b0 isatty
0080bad0 g     F .text	000000c4 _raise_r
0080b0f0 g     F .text	00000060 __assert_func
00812474 g     O .rodata	000000c8 __mprec_tens
008119fc g     F .text	00000090 alt_icache_flush
00816048 g     O .bss	00000004 __malloc_top_pad
0080bf10 g     F .text	00000004 _getpid_r
008071f4 g     F .text	0000000c _localeconv_r
008085b4 g     F .text	000000b0 __i2b
00806be4 g     F .text	000004c8 __sfvwrite_r
0080bb94 g     F .text	000000bc __sigtramp_r
00809898 g     F .text	00000050 _sbrk_r
0080b718 g     F .text	0000005c _read_r
0081442c g     O .rwdata	00000004 alt_max_fd
0080b2e8 g     F .text	00000070 _fclose_r
008063c0 g     F .text	0000007c fflush
00816044 g     O .bss	00000004 __malloc_max_sbrked_mem
00802170 g     F .text	000000fc .hidden __extendsfdf2
0080ccd4 g     F .text	000008f0 .hidden __adddf3
00801a20 g     F .text	00000070 .hidden __nesf2
00808ed8 g     F .text	00000108 __b2d
0080c534 g     F .text	000005c4 .hidden __umoddi3
0080f9d0 g     F .text	000000e0 lseek
0081440c g     O .rwdata	00000004 _global_impure_ptr
00809334 g     F .text	00000564 _realloc_r
0080170c g     F .text	00000110 __kernel_sinf
00816194 g       *ABS*	00000000 __bss_end
0081112c g     F .text	000000e8 alt_iic_isr_register
00811680 g     F .text	00000108 alt_tick
0080bf14 g     F .text	00000620 .hidden __udivdi3
0080b57c g     F .text	00000024 _fputwc_r
0081244c g     O .rodata	00000028 __mprec_bigtens
00808368 g     F .text	00000138 __s2b
0080b9c4 g     F .text	00000018 abort
0080f330 g     F .text	00000090 .hidden __floatunsidf
00808bf8 g     F .text	00000058 __mcmp
008067b8 g     F .text	00000010 __fp_lock_all
008110e0 g     F .text	0000004c alt_ic_irq_enabled
008115dc g     F .text	000000a4 alt_alarm_stop
00800688 g     F .text	0000009c cosf
0081605c g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
008131e4 g     O .rwdata	00000028 alt_dev_null
00810d50 g     F .text	0000004c alt_dcache_flush_all
008084a0 g     F .text	00000064 __hi0bits
0080f1f8 g     F .text	00000080 .hidden __fixdfsi
00800b8c g     F .text	000001d0 __kernel_cosf
00814444 g       *ABS*	00000000 __ram_rwdata_end
00814424 g     O .rwdata	00000008 alt_dev_list
0080fed0 g     F .text	00000104 write
00801a90 g     F .text	000000b8 .hidden __gtsf2
0081284c g       *ABS*	00000000 __ram_rodata_end
0080f578 g     F .text	000000bc fstat
0080f77c g     F .text	0000012c kill
00814404 g     O .rwdata	00000004 c_term4
0080e05c g     F .text	000000e8 .hidden __ledf2
008003bc g     F .text	00000104 theFunction
00808928 g     F .text	00000148 __pow5mult
00809bec g     F .text	00001344 ___vfiprintf_internal_r
0080cc50 g     F .text	0000005c .hidden __umodsi3
00816194 g       *ABS*	00000000 end
0081020c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00811d88 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810b98 g     F .text	00000084 alt_avalon_timer_sc_init
0080226c g     F .text	00000054 .hidden __clzsi2
008108f4 g     F .text	00000228 altera_avalon_jtag_uart_write
008067a8 g     F .text	00000004 __sfp_lock_acquire
00807d58 g     F .text	000000d0 memchr
00802494 g     F .text	00002104 ___vfprintf_internal_r
008068f0 g     F .text	000002f4 _free_r
008126a0 g     O .rodata	00000180 _ctype_b
00807280 g     F .text	0000000c __locale_mb_cur_max
00811c6c g     F .text	0000011c __call_exitprocs
00814414 g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
00816060 g     O .bss	00000004 _alt_tick_rate
00808a70 g     F .text	00000188 __lshift
00816064 g     O .bss	00000004 _alt_nticks
0080bd08 g     F .text	0000009c signal
0080fbb0 g     F .text	00000108 read
00810044 g     F .text	00000064 alt_sys_init
0080204c g     F .text	00000124 .hidden __floatsisf
00811be0 g     F .text	0000008c __register_exitproc
00808664 g     F .text	000002c4 __multiply
00810578 g     F .text	00000068 altera_avalon_jtag_uart_close
0080ccac g     F .text	00000028 .hidden __mulsi3
0081284c g       *ABS*	00000000 __ram_rwdata_start
00811d88 g       *ABS*	00000000 __ram_rodata_start
0081606c g     O .bss	00000028 __malloc_current_mallinfo
00801a20 g     F .text	00000070 .hidden __eqsf2
00808fe0 g     F .text	00000164 __d2b
008143fc g     O .rwdata	00000004 c_term2
008100a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00811944 g     F .text	000000b8 alt_get_fd
0080b0a0 g     F .text	00000050 _close_r
00800284 g     F .text	00000094 generateVector
00811b68 g     F .text	00000078 memcmp
00810168 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816194 g       *ABS*	00000000 __alt_stack_base
008101b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804670 g     F .text	00000160 __swsetup_r
0080d5c4 g     F .text	00000930 .hidden __divdf3
00806638 g     F .text	00000150 __sfp
00809258 g     F .text	0000007c __copybits
00812ddc g     O .rwdata	00000408 __malloc_av_
008067b4 g     F .text	00000004 __sinit_lock_release
0080e144 g     F .text	000007ac .hidden __muldf3
008098e8 g     F .text	00000054 __sread
0081183c g     F .text	00000108 alt_find_file
00810dd8 g     F .text	000000a8 alt_dev_llist_insert
0080fb2c g     F .text	00000024 __malloc_lock
0080fd28 g     F .text	000000b8 sbrk
00801904 g     F .text	0000011c scalbnf
00806360 g     F .text	00000060 _fflush_r
0080b164 g     F .text	000000c4 _calloc_r
0081603c g       *ABS*	00000000 __bss_start
00808054 g     F .text	000000f0 memset
008004c0 g     F .text	000001c8 main
00816058 g     O .bss	00000004 alt_envp
00816040 g     O .bss	00000004 __malloc_max_total_mem
00810108 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080b8c0 g     F .text	00000014 __swbuf
00809a20 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080b358 g     F .text	0000006c fclose
008049f0 g     F .text	00001748 _dtoa_r
00807548 g     F .text	000007c0 _malloc_r
0080b014 g     F .text	00000030 __ascii_wctomb
00814430 g     O .rwdata	00000004 alt_errno
0080b3c4 g     F .text	00000020 _fiprintf_r
0080bda4 g     F .text	0000005c _init_signal
008070ac g     F .text	00000098 _fwalk
00807d08 g     F .text	0000000c _mbtowc_r
0080caf8 g     F .text	00000080 .hidden __divsi3
008067d8 g     F .text	00000118 _malloc_trim_r
00811d88 g       *ABS*	00000000 __CTOR_END__
00809a28 g     F .text	000000b8 strcmp
00811d88 g       *ABS*	00000000 __flash_rodata_start
00811d88 g       *ABS*	00000000 __DTOR_LIST__
0080def4 g     F .text	00000080 .hidden __nedf2
00810008 g     F .text	0000003c alt_irq_init
0080fcb8 g     F .text	00000070 alt_release_fd
008121ac g     O .rodata	00000100 .hidden __clz_tab
0081603c g     O .bss	00000004 _PathLocale
00811b24 g     F .text	00000014 atexit
00801a90 g     F .text	000000b8 .hidden __gesf2
00800318 g     F .text	000000a4 sumVector
0080b044 g     F .text	0000005c _write_r
008143f0 g     O .rwdata	00000004 coeff2
0080728c g     F .text	00000074 setlocale
00814410 g     O .rwdata	00000004 _impure_ptr
00816050 g     O .bss	00000004 alt_argc
00806138 g     F .text	00000228 __sflush_r
00810ee4 g     F .text	00000064 _do_dtors
00814400 g     O .rwdata	00000004 c_term3
00800020 g       .exceptions	00000000 alt_irq_entry
00807d14 g     F .text	00000044 __ascii_mbtowc
00808e7c g     F .text	0000005c __ulp
008067c8 g     F .text	00000010 __fp_unlock_all
0081441c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807200 g     F .text	0000000c localeconv
008074b0 g     F .text	00000098 __swhatbuf_r
00810f7c g     F .text	00000050 alt_ic_isr_register
00814444 g       *ABS*	00000000 _edata
00816194 g       *ABS*	00000000 _end
0080b418 g     F .text	00000164 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
008105e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00811054 g     F .text	0000008c alt_ic_irq_disable
00809944 g     F .text	00000080 __swrite
00814418 g     O .rwdata	00000004 __malloc_trim_threshold
00811b38 g     F .text	00000030 exit
0080b3e4 g     F .text	00000034 fiprintf
0080b774 g     F .text	00000004 _vfiprintf_r
00807144 g     F .text	000000a8 _fwalk_reent
00808c50 g     F .text	0000022c __mdiff
0080cb78 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008067ac g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081259c g     O .rodata	00000101 _ctype_
0080f1a4 g     F .text	00000054 .hidden __unorddf2
0080f504 g     F .text	00000038 _exit
00800d5c g     F .text	000009b0 __kernel_rem_pio2f
00810c1c g     F .text	00000134 alt_alarm_start
00807300 g     F .text	000001b0 __smakebuf_r
008023fc g     F .text	00000098 strlen
0080b9dc g     F .text	0000005c _init_signal_r
0081147c g     F .text	00000160 open
0080df74 g     F .text	000000e8 .hidden __gedf2
0080b150 g     F .text	00000014 __assert
00809bd4 g     F .text	00000018 __sprint_r
00810f48 g     F .text	00000034 alt_icache_flush_all
0080181c g     F .text	000000e8 floorf
00814438 g     O .rwdata	00000004 alt_priority_mask
00810fcc g     F .text	00000088 alt_ic_irq_enable
00804598 g     F .text	00000018 __vfprintf_internal
0080b008 g     F .text	0000000c _wctomb_r
0080e8f0 g     F .text	000008b4 .hidden __subdf3
00808504 g     F .text	000000b0 __lo0bits
0081443c g     O .rwdata	00000008 alt_alarm_list
00810e80 g     F .text	00000064 _do_ctors
0080be00 g     F .text	000000b8 __sigtramp
0080b940 g     F .text	00000084 wcrtomb
008143ec g     O .rwdata	00000004 coeff1
0080f3fc g     F .text	000000dc close
00812c70 g     O .rwdata	0000016c __global_locale
0080f910 g     F .text	00000084 alt_load
0080b5a0 g     F .text	00000074 fputwc
0080bc50 g     F .text	000000b8 raise
008067b0 g     F .text	00000004 __sinit_lock_acquire
0080820c g     F .text	0000015c __multadd
008081e8 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10d82517 	ldw	r3,24724(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	10982617 	ldw	r2,24728(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a71f17 	ldw	r2,-25476(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a71f17 	ldw	r2,-25476(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6b0fb14 	ori	gp,gp,50156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	10980f14 	ori	r2,r2,24636

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18d86514 	ori	r3,r3,24980

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	080f9100 	call	80f910 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	080fab00 	call	80fab0 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <generateVector>:

#else

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
  800284:	defffd04 	addi	sp,sp,-12
  800288:	df000215 	stw	fp,8(sp)
  80028c:	df000204 	addi	fp,sp,8
  800290:	e13ffe15 	stw	r4,-8(fp)
  int i;
  x[0] = 0;
  800294:	e0bffe17 	ldw	r2,-8(fp)
  800298:	10000015 	stw	zero,0(r2)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  80029c:	00800044 	movi	r2,1
  8002a0:	e0bfff15 	stw	r2,-4(fp)
  8002a4:	00001206 	br	8002f0 <generateVector+0x6c>
  8002a8:	e0ffff17 	ldw	r3,-4(fp)
  8002ac:	00900034 	movhi	r2,16384
  8002b0:	10bfffc4 	addi	r2,r2,-1
  8002b4:	1885883a 	add	r2,r3,r2
  8002b8:	100490ba 	slli	r2,r2,2
  8002bc:	e0fffe17 	ldw	r3,-8(fp)
  8002c0:	1885883a 	add	r2,r3,r2
  8002c4:	11000017 	ldw	r4,0(r2)
  8002c8:	e0bfff17 	ldw	r2,-4(fp)
  8002cc:	100490ba 	slli	r2,r2,2
  8002d0:	e0fffe17 	ldw	r3,-8(fp)
  8002d4:	1885883a 	add	r2,r3,r2
  8002d8:	00cea034 	movhi	r3,14976
  8002dc:	20c7c072 	custom	1,r3,r4,r3
  8002e0:	10c00015 	stw	r3,0(r2)
  8002e4:	e0bfff17 	ldw	r2,-4(fp)
  8002e8:	10800044 	addi	r2,r2,1
  8002ec:	e0bfff15 	stw	r2,-4(fp)
  8002f0:	e0ffff17 	ldw	r3,-4(fp)
  8002f4:	00800134 	movhi	r2,4
  8002f8:	10bf0004 	addi	r2,r2,-1024
  8002fc:	10ffea0e 	bge	r2,r3,8002a8 <generateVector+0x24>
}
  800300:	0001883a 	nop
  800304:	0001883a 	nop
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <sumVector>:

#endif

float sumVector(float x[0], int M)
{
  800318:	defffb04 	addi	sp,sp,-20
  80031c:	df000415 	stw	fp,16(sp)
  800320:	df000404 	addi	fp,sp,16
  800324:	e13ffd15 	stw	r4,-12(fp)
  800328:	e17ffc15 	stw	r5,-16(fp)
  float sum = 0;
  80032c:	e03fff15 	stw	zero,-4(fp)
  int i = 0;
  800330:	e03ffe15 	stw	zero,-8(fp)
  for (; i < M; i++) 
  800334:	00001706 	br	800394 <sumVector+0x7c>
  {
    sum += (x[i] + x[i] * x[i]);
  800338:	e0bffe17 	ldw	r2,-8(fp)
  80033c:	100490ba 	slli	r2,r2,2
  800340:	e0fffd17 	ldw	r3,-12(fp)
  800344:	1885883a 	add	r2,r3,r2
  800348:	10c00017 	ldw	r3,0(r2)
  80034c:	e0bffe17 	ldw	r2,-8(fp)
  800350:	100490ba 	slli	r2,r2,2
  800354:	e13ffd17 	ldw	r4,-12(fp)
  800358:	2085883a 	add	r2,r4,r2
  80035c:	11000017 	ldw	r4,0(r2)
  800360:	e0bffe17 	ldw	r2,-8(fp)
  800364:	100490ba 	slli	r2,r2,2
  800368:	e17ffd17 	ldw	r5,-12(fp)
  80036c:	288b883a 	add	r5,r5,r2
  800370:	28800017 	ldw	r2,0(r5)
  800374:	2085c032 	custom	0,r2,r4,r2
  800378:	1885c072 	custom	1,r2,r3,r2
  80037c:	e0ffff17 	ldw	r3,-4(fp)
  800380:	1885c072 	custom	1,r2,r3,r2
  800384:	e0bfff15 	stw	r2,-4(fp)
  for (; i < M; i++) 
  800388:	e0bffe17 	ldw	r2,-8(fp)
  80038c:	10800044 	addi	r2,r2,1
  800390:	e0bffe15 	stw	r2,-8(fp)
  800394:	e0fffe17 	ldw	r3,-8(fp)
  800398:	e0bffc17 	ldw	r2,-16(fp)
  80039c:	18bfe616 	blt	r3,r2,800338 <sumVector+0x20>
  }

  return sum;
  8003a0:	e0bfff17 	ldw	r2,-4(fp)
  8003a4:	1007883a 	mov	r3,r2
}
  8003a8:	1805883a 	mov	r2,r3
  8003ac:	e037883a 	mov	sp,fp
  8003b0:	df000017 	ldw	fp,0(sp)
  8003b4:	dec00104 	addi	sp,sp,4
  8003b8:	f800283a 	ret

008003bc <theFunction>:
      c_term2 = 1 / 24.0f, 
      c_term3 = - 1 / 720.0f,
      c_term4 = 1 / 40320.0f,
      c_term5 = - 1 / 3628800.0f;

float theFunction(float x[0], int M) {
  8003bc:	defff804 	addi	sp,sp,-32
  8003c0:	dfc00715 	stw	ra,28(sp)
  8003c4:	df000615 	stw	fp,24(sp)
  8003c8:	dc400515 	stw	r17,20(sp)
  8003cc:	dc000415 	stw	r16,16(sp)
  8003d0:	df000604 	addi	fp,sp,24
  8003d4:	e13ffb15 	stw	r4,-20(fp)
  8003d8:	e17ffa15 	stw	r5,-24(fp)
  float sum = 0;
  8003dc:	e03ffd15 	stw	zero,-12(fp)
  int i = 0;
  8003e0:	e03ffc15 	stw	zero,-16(fp)
  for (; i < M; i++) 
  8003e4:	00002906 	br	80048c <theFunction+0xd0>


    // sum = FP_ADD(sum, FP_ADD(FP_MUL(coeff1,x[i]), FP_MUL(FP_MUL(x[i],x[i]),cosine)));


    sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] + -128.0f) * coeff2));
  8003e8:	e0bffc17 	ldw	r2,-16(fp)
  8003ec:	100490ba 	slli	r2,r2,2
  8003f0:	e0fffb17 	ldw	r3,-20(fp)
  8003f4:	1885883a 	add	r2,r3,r2
  8003f8:	10c00017 	ldw	r3,0(r2)
  8003fc:	008fc034 	movhi	r2,16128
  800400:	18a1c032 	custom	0,r16,r3,r2
  800404:	e0bffc17 	ldw	r2,-16(fp)
  800408:	100490ba 	slli	r2,r2,2
  80040c:	e0fffb17 	ldw	r3,-20(fp)
  800410:	1885883a 	add	r2,r3,r2
  800414:	10c00017 	ldw	r3,0(r2)
  800418:	e0bffc17 	ldw	r2,-16(fp)
  80041c:	100490ba 	slli	r2,r2,2
  800420:	e13ffb17 	ldw	r4,-20(fp)
  800424:	2089883a 	add	r4,r4,r2
  800428:	20800017 	ldw	r2,0(r4)
  80042c:	18a3c032 	custom	0,r17,r3,r2
  800430:	e0bffc17 	ldw	r2,-16(fp)
  800434:	100490ba 	slli	r2,r2,2
  800438:	e0fffb17 	ldw	r3,-20(fp)
  80043c:	1885883a 	add	r2,r3,r2
  800440:	10c00017 	ldw	r3,0(r2)
  800444:	0150c034 	movhi	r5,17152
  800448:	1809883a 	mov	r4,r3
  80044c:	0801b480 	call	801b48 <__subsf3>
  800450:	1009883a 	mov	r4,r2
  800454:	2007883a 	mov	r3,r4
  800458:	008f0034 	movhi	r2,15360
  80045c:	1885c032 	custom	0,r2,r3,r2
  800460:	1009883a 	mov	r4,r2
  800464:	08006880 	call	800688 <cosf>
  800468:	1007883a 	mov	r3,r2
  80046c:	88c5c032 	custom	0,r2,r17,r3
  800470:	8085c072 	custom	1,r2,r16,r2
  800474:	e0fffd17 	ldw	r3,-12(fp)
  800478:	1885c072 	custom	1,r2,r3,r2
  80047c:	e0bffd15 	stw	r2,-12(fp)
  for (; i < M; i++) 
  800480:	e0bffc17 	ldw	r2,-16(fp)
  800484:	10800044 	addi	r2,r2,1
  800488:	e0bffc15 	stw	r2,-16(fp)
  80048c:	e0fffc17 	ldw	r3,-16(fp)
  800490:	e0bffa17 	ldw	r2,-24(fp)
  800494:	18bfd416 	blt	r3,r2,8003e8 <theFunction+0x2c>
  }

  return sum;
  800498:	e0bffd17 	ldw	r2,-12(fp)
  80049c:	1007883a 	mov	r3,r2
}
  8004a0:	1805883a 	mov	r2,r3
  8004a4:	e6fffe04 	addi	sp,fp,-8
  8004a8:	dfc00317 	ldw	ra,12(sp)
  8004ac:	df000217 	ldw	fp,8(sp)
  8004b0:	dc400117 	ldw	r17,4(sp)
  8004b4:	dc000017 	ldw	r16,0(sp)
  8004b8:	dec00404 	addi	sp,sp,16
  8004bc:	f800283a 	ret

008004c0 <main>:

int main(int argc, char* argv[])
{
  8004c0:	defffe04 	addi	sp,sp,-8
  8004c4:	dfc00115 	stw	ra,4(sp)
  8004c8:	df000015 	stw	fp,0(sp)
  8004cc:	d839883a 	mov	fp,sp
  8004d0:	023ffc34 	movhi	r8,65520
  8004d4:	4203f604 	addi	r8,r8,4056
  8004d8:	da37883a 	add	sp,sp,r8
  8004dc:	00bffc34 	movhi	r2,65520
  8004e0:	1083f704 	addi	r2,r2,4060
  8004e4:	e085883a 	add	r2,fp,r2
  8004e8:	11000015 	stw	r4,0(r2)
  8004ec:	00bffc34 	movhi	r2,65520
  8004f0:	1083f604 	addi	r2,r2,4056
  8004f4:	e085883a 	add	r2,fp,r2
  8004f8:	11400015 	stw	r5,0(r2)
  const int numIterations = NUM_CASES;
  8004fc:	00800044 	movi	r2,1
  800500:	e0bffe15 	stw	r2,-8(fp)
  printf("Task 3!\n");
  800504:	01002074 	movhi	r4,129
  800508:	21076204 	addi	r4,r4,7560
  80050c:	08023f00 	call	8023f0 <puts>
  // printf("Ticks per second: %ld\n", alt_ticks_per_second());
  printf("Running %d tests\n", numIterations);
  800510:	e17ffe17 	ldw	r5,-8(fp)
  800514:	01002074 	movhi	r4,129
  800518:	21076404 	addi	r4,r4,7568
  80051c:	08022f00 	call	8022f0 <printf>


  // Returned result
  volatile float y;

  generateVector(x);
  800520:	00bffc34 	movhi	r2,65520
  800524:	1083fc04 	addi	r2,r2,4080
  800528:	e085883a 	add	r2,fp,r2
  80052c:	1009883a 	mov	r4,r2
  800530:	08002840 	call	800284 <generateVector>

  volatile clock_t exec_t1, exec_t2;

  // const int numIterations = 1 << TEST_REPEAT;

  exec_t1 = times(NULL);
  800534:	0009883a 	mov	r4,zero
  800538:	080fe1c0 	call	80fe1c <times>
  80053c:	1007883a 	mov	r3,r2
  800540:	00bffc34 	movhi	r2,65520
  800544:	1083fa04 	addi	r2,r2,4072
  800548:	e085883a 	add	r2,fp,r2
  80054c:	10c00015 	stw	r3,0(r2)

  int y1 = 0;
  800550:	e03ffd15 	stw	zero,-12(fp)

  for (int i = 0; i < numIterations; i++) {
  800554:	e03fff15 	stw	zero,-4(fp)
  800558:	00000f06 	br	800598 <main+0xd8>
    y = theFunction(x, N);
  80055c:	00bffc34 	movhi	r2,65520
  800560:	1083fc04 	addi	r2,r2,4080
  800564:	e085883a 	add	r2,fp,r2
  800568:	01400134 	movhi	r5,4
  80056c:	297f0044 	addi	r5,r5,-1023
  800570:	1009883a 	mov	r4,r2
  800574:	08003bc0 	call	8003bc <theFunction>
  800578:	1007883a 	mov	r3,r2
  80057c:	00bffc34 	movhi	r2,65520
  800580:	1083fb04 	addi	r2,r2,4076
  800584:	e085883a 	add	r2,fp,r2
  800588:	10c00015 	stw	r3,0(r2)
  for (int i = 0; i < numIterations; i++) {
  80058c:	e0bfff17 	ldw	r2,-4(fp)
  800590:	10800044 	addi	r2,r2,1
  800594:	e0bfff15 	stw	r2,-4(fp)
  800598:	e0ffff17 	ldw	r3,-4(fp)
  80059c:	e0bffe17 	ldw	r2,-8(fp)
  8005a0:	18bfee16 	blt	r3,r2,80055c <main+0x9c>
  }

  // till here
  exec_t2 = times(NULL);
  8005a4:	0009883a 	mov	r4,zero
  8005a8:	080fe1c0 	call	80fe1c <times>
  8005ac:	1007883a 	mov	r3,r2
  8005b0:	00bffc34 	movhi	r2,65520
  8005b4:	1083f904 	addi	r2,r2,4068
  8005b8:	e085883a 	add	r2,fp,r2
  8005bc:	10c00015 	stw	r3,0(r2)

  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  8005c0:	00bffc34 	movhi	r2,65520
  8005c4:	1083f904 	addi	r2,r2,4068
  8005c8:	e085883a 	add	r2,fp,r2
  8005cc:	10c00017 	ldw	r3,0(r2)
  8005d0:	00bffc34 	movhi	r2,65520
  8005d4:	1083fa04 	addi	r2,r2,4072
  8005d8:	e085883a 	add	r2,fp,r2
  8005dc:	10800017 	ldw	r2,0(r2)
  8005e0:	1885c83a 	sub	r2,r3,r2
  8005e4:	1007883a 	mov	r3,r2
  8005e8:	00bffc34 	movhi	r2,65520
  8005ec:	1083f804 	addi	r2,r2,4064
  8005f0:	e085883a 	add	r2,fp,r2
  8005f4:	10c00015 	stw	r3,0(r2)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  8005f8:	00bffc34 	movhi	r2,65520
  8005fc:	1083f804 	addi	r2,r2,4064
  800600:	e085883a 	add	r2,fp,r2
  800604:	10800017 	ldw	r2,0(r2)
  800608:	100b883a 	mov	r5,r2
  80060c:	01002074 	movhi	r4,129
  800610:	21076904 	addi	r4,r4,7588
  800614:	08022f00 	call	8022f0 <printf>
  printf("RESULT: %f, %x\n", y, *(int*)(&y));
  800618:	00bffc34 	movhi	r2,65520
  80061c:	1083fb04 	addi	r2,r2,4076
  800620:	e085883a 	add	r2,fp,r2
  800624:	10c00017 	ldw	r3,0(r2)
  800628:	1809883a 	mov	r4,r3
  80062c:	08021700 	call	802170 <__extendsfdf2>
  800630:	1011883a 	mov	r8,r2
  800634:	1813883a 	mov	r9,r3
  800638:	00bffc34 	movhi	r2,65520
  80063c:	1083fb04 	addi	r2,r2,4076
  800640:	e085883a 	add	r2,fp,r2
  800644:	10800017 	ldw	r2,0(r2)
  800648:	100f883a 	mov	r7,r2
  80064c:	400b883a 	mov	r5,r8
  800650:	480d883a 	mov	r6,r9
  800654:	01002074 	movhi	r4,129
  800658:	21076e04 	addi	r4,r4,7608
  80065c:	08022f00 	call	8022f0 <printf>
  printf("Num Iterations: %d\n", y1);
  800660:	e17ffd17 	ldw	r5,-12(fp)
  800664:	01002074 	movhi	r4,129
  800668:	21077204 	addi	r4,r4,7624
  80066c:	08022f00 	call	8022f0 <printf>
  // printf("Total ticks %d for %d iters\n", elapsedTicks , numIterations);
  // printf("Time Taken: %f\n",(float) elapsedTicks/numIterations);


  return 0;
  800670:	0005883a 	mov	r2,zero
}
  800674:	e037883a 	mov	sp,fp
  800678:	dfc00117 	ldw	ra,4(sp)
  80067c:	df000017 	ldw	fp,0(sp)
  800680:	dec00204 	addi	sp,sp,8
  800684:	f800283a 	ret

00800688 <cosf>:
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
  800688:	00a00034 	movhi	r2,32768
  80068c:	10bfffc4 	addi	r2,r2,-1
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800690:	00cfd274 	movhi	r3,16201
	ix &= 0x7fffffff;
  800694:	1104703a 	and	r2,r2,r4
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  800698:	18c3f604 	addi	r3,r3,4056
  80069c:	1880160e 	bge	r3,r2,8006f8 <cosf+0x70>
{
  8006a0:	defffd04 	addi	sp,sp,-12
  8006a4:	dfc00215 	stw	ra,8(sp)

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
  8006a8:	00dfe034 	movhi	r3,32640
  8006ac:	10c00516 	blt	r2,r3,8006c4 <cosf+0x3c>
  8006b0:	200b883a 	mov	r5,r4
  8006b4:	0801b480 	call	801b48 <__subsf3>
		case 2: return -__kernel_cosf(y[0],y[1]);
		default:
		        return  __kernel_sinf(y[0],y[1],1);
	    }
	}
}
  8006b8:	dfc00217 	ldw	ra,8(sp)
  8006bc:	dec00304 	addi	sp,sp,12
  8006c0:	f800283a 	ret
	    n = __ieee754_rem_pio2f(x,y);
  8006c4:	d80b883a 	mov	r5,sp
  8006c8:	08007240 	call	800724 <__ieee754_rem_pio2f>
	    switch(n&3) {
  8006cc:	108000cc 	andi	r2,r2,3
  8006d0:	10c00060 	cmpeqi	r3,r2,1
		        return  __kernel_sinf(y[0],y[1],1);
  8006d4:	d9400117 	ldw	r5,4(sp)
  8006d8:	d9000017 	ldw	r4,0(sp)
	    switch(n&3) {
  8006dc:	1800081e 	bne	r3,zero,800700 <cosf+0x78>
  8006e0:	10c000a0 	cmpeqi	r3,r2,2
  8006e4:	18000c1e 	bne	r3,zero,800718 <cosf+0x90>
  8006e8:	10000926 	beq	r2,zero,800710 <cosf+0x88>
		        return  __kernel_sinf(y[0],y[1],1);
  8006ec:	01800044 	movi	r6,1
  8006f0:	080170c0 	call	80170c <__kernel_sinf>
  8006f4:	003ff006 	br	8006b8 <cosf+0x30>
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
  8006f8:	000b883a 	mov	r5,zero
  8006fc:	0800b8c1 	jmpi	800b8c <__kernel_cosf>
		case 1: return -__kernel_sinf(y[0],y[1],1);
  800700:	01800044 	movi	r6,1
  800704:	080170c0 	call	80170c <__kernel_sinf>
  800708:	10a0003c 	xorhi	r2,r2,32768
  80070c:	003fea06 	br	8006b8 <cosf+0x30>
		case 0: return  __kernel_cosf(y[0],y[1]);
  800710:	0800b8c0 	call	800b8c <__kernel_cosf>
  800714:	003fe806 	br	8006b8 <cosf+0x30>
		case 2: return -__kernel_cosf(y[0],y[1]);
  800718:	0800b8c0 	call	800b8c <__kernel_cosf>
  80071c:	10a0003c 	xorhi	r2,r2,32768
  800720:	003fe506 	br	8006b8 <cosf+0x30>

00800724 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
  800724:	defff104 	addi	sp,sp,-60
  800728:	dc000515 	stw	r16,20(sp)
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
	ix = hx&0x7fffffff;
  80072c:	04200034 	movhi	r16,32768
  800730:	843fffc4 	addi	r16,r16,-1
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800734:	008fd274 	movhi	r2,16201
{
  800738:	dc400615 	stw	r17,24(sp)
  80073c:	dfc00e15 	stw	ra,56(sp)
  800740:	df000d15 	stw	fp,52(sp)
  800744:	ddc00c15 	stw	r23,48(sp)
  800748:	dd800b15 	stw	r22,44(sp)
  80074c:	dd400a15 	stw	r21,40(sp)
  800750:	dd000915 	stw	r20,36(sp)
  800754:	dcc00815 	stw	r19,32(sp)
  800758:	dc800715 	stw	r18,28(sp)
	ix = hx&0x7fffffff;
  80075c:	8120703a 	and	r16,r16,r4
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  800760:	1083f604 	addi	r2,r2,4056
{
  800764:	2007883a 	mov	r3,r4
  800768:	2823883a 	mov	r17,r5
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
  80076c:	14005b0e 	bge	r2,r16,8008dc <__ieee754_rem_pio2f+0x1b8>
	    {y[0] = x; y[1] = 0; return 0;}
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
  800770:	009005f4 	movhi	r2,16407
  800774:	10b2f8c4 	addi	r2,r2,-13341
  800778:	2027883a 	mov	r19,r4
  80077c:	14002516 	blt	r2,r16,800814 <__ieee754_rem_pio2f+0xf0>
	    if(hx>0) { 
		z = x - pio2_1;
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800780:	00bffc04 	movi	r2,-16
  800784:	80a0703a 	and	r16,r16,r2
	    if(hx>0) { 
  800788:	0100eb0e 	bge	zero,r4,800b38 <__ieee754_rem_pio2f+0x414>
		z = x - pio2_1;
  80078c:	014ff274 	movhi	r5,16329
  800790:	2943e004 	addi	r5,r5,3968
  800794:	0801b480 	call	801b48 <__subsf3>
  800798:	1025883a 	mov	r18,r2
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  80079c:	008ff274 	movhi	r2,16329
  8007a0:	1083f404 	addi	r2,r2,4048
		    y[0] = z - pio2_1t;
  8007a4:	014dcd74 	movhi	r5,14133
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  8007a8:	80808826 	beq	r16,r2,8009cc <__ieee754_rem_pio2f+0x2a8>
		    y[0] = z - pio2_1t;
  8007ac:	9009883a 	mov	r4,r18
  8007b0:	295110c4 	addi	r5,r5,17475
  8007b4:	0801b480 	call	801b48 <__subsf3>
		    y[1] = (z-y[0])-pio2_1t;
  8007b8:	9009883a 	mov	r4,r18
  8007bc:	100b883a 	mov	r5,r2
		    y[0] = z - pio2_1t;
  8007c0:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_1t;
  8007c4:	0801b480 	call	801b48 <__subsf3>
  8007c8:	014dcd74 	movhi	r5,14133
  8007cc:	295110c4 	addi	r5,r5,17475
  8007d0:	1009883a 	mov	r4,r2
  8007d4:	0801b480 	call	801b48 <__subsf3>
  8007d8:	88800115 	stw	r2,4(r17)
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
		    y[0] = z - pio2_2t;
		    y[1] = (z-y[0])-pio2_2t;
		}
		return 1;
  8007dc:	04800044 	movi	r18,1
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
  8007e0:	9005883a 	mov	r2,r18
  8007e4:	dfc00e17 	ldw	ra,56(sp)
  8007e8:	df000d17 	ldw	fp,52(sp)
  8007ec:	ddc00c17 	ldw	r23,48(sp)
  8007f0:	dd800b17 	ldw	r22,44(sp)
  8007f4:	dd400a17 	ldw	r21,40(sp)
  8007f8:	dd000917 	ldw	r20,36(sp)
  8007fc:	dcc00817 	ldw	r19,32(sp)
  800800:	dc800717 	ldw	r18,28(sp)
  800804:	dc400617 	ldw	r17,24(sp)
  800808:	dc000517 	ldw	r16,20(sp)
  80080c:	dec00f04 	addi	sp,sp,60
  800810:	f800283a 	ret
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
  800814:	0090d274 	movhi	r2,17225
  800818:	1083e004 	addi	r2,r2,3968
  80081c:	14003316 	blt	r2,r16,8008ec <__ieee754_rem_pio2f+0x1c8>
	    n  = (__int32_t) (t*invpio2+half);
  800820:	010fc8f4 	movhi	r4,16163
  800824:	213e6104 	addi	r4,r4,-1660
  800828:	008fc034 	movhi	r2,16128
  80082c:	2409c032 	custom	0,r4,r4,r16
  800830:	2089c072 	custom	1,r4,r4,r2
  800834:	0801fdc0 	call	801fdc <__fixsfsi>
	    fn = (float)n;
  800838:	1009883a 	mov	r4,r2
	    n  = (__int32_t) (t*invpio2+half);
  80083c:	1025883a 	mov	r18,r2
	    fn = (float)n;
  800840:	080204c0 	call	80204c <__floatsisf>
	    r  = t-fn*pio2_1;
  800844:	014ff274 	movhi	r5,16329
  800848:	2943e004 	addi	r5,r5,3968
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  80084c:	050dcd74 	movhi	r20,14133
	    fn = (float)n;
  800850:	102b883a 	mov	r21,r2
	    r  = t-fn*pio2_1;
  800854:	114bc032 	custom	0,r5,r2,r5
  800858:	8009883a 	mov	r4,r16
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  80085c:	a51110c4 	addi	r20,r20,17475
	    r  = t-fn*pio2_1;
  800860:	0801b480 	call	801b48 <__subsf3>
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
  800864:	ad29c032 	custom	0,r20,r21,r20
		y[0] = r-w;	/* quick check no cancellation */
  800868:	1009883a 	mov	r4,r2
  80086c:	a00b883a 	mov	r5,r20
	    r  = t-fn*pio2_1;
  800870:	102f883a 	mov	r23,r2
		y[0] = r-w;	/* quick check no cancellation */
  800874:	0801b480 	call	801b48 <__subsf3>
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800878:	90c00808 	cmpgei	r3,r18,32
	    r  = t-fn*pio2_1;
  80087c:	b809883a 	mov	r4,r23
		y[0] = r-w;	/* quick check no cancellation */
  800880:	102d883a 	mov	r22,r2
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
  800884:	1800641e 	bne	r3,zero,800a18 <__ieee754_rem_pio2f+0x2f4>
  800888:	900a90ba 	slli	r5,r18,2
  80088c:	00c02074 	movhi	r3,129
  800890:	28c7883a 	add	r3,r5,r3
  800894:	19477617 	ldw	r5,7640(r3)
  800898:	00ffc004 	movi	r3,-256
  80089c:	80c6703a 	and	r3,r16,r3
  8008a0:	19405d26 	beq	r3,r5,800a18 <__ieee754_rem_pio2f+0x2f4>
		    	y[0] = r-w;
  8008a4:	88800015 	stw	r2,0(r17)
	    y[1] = (r-y[0])-w;
  8008a8:	b00b883a 	mov	r5,r22
  8008ac:	0801b480 	call	801b48 <__subsf3>
  8008b0:	a00b883a 	mov	r5,r20
  8008b4:	1009883a 	mov	r4,r2
  8008b8:	0801b480 	call	801b48 <__subsf3>
  8008bc:	88800115 	stw	r2,4(r17)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
  8008c0:	983fc70e 	bge	r19,zero,8007e0 <__ieee754_rem_pio2f+0xbc>
  8008c4:	b5a0003c 	xorhi	r22,r22,32768
  8008c8:	10a0003c 	xorhi	r2,r2,32768
  8008cc:	8d800015 	stw	r22,0(r17)
  8008d0:	88800115 	stw	r2,4(r17)
  8008d4:	04a5c83a 	sub	r18,zero,r18
  8008d8:	003fc106 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
	    {y[0] = x; y[1] = 0; return 0;}
  8008dc:	89000015 	stw	r4,0(r17)
  8008e0:	28000115 	stw	zero,4(r5)
  8008e4:	0025883a 	mov	r18,zero
  8008e8:	003fbd06 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
	if(!FLT_UWORD_IS_FINITE(ix)) {
  8008ec:	009fe034 	movhi	r2,32640
  8008f0:	8080840e 	bge	r16,r2,800b04 <__ieee754_rem_pio2f+0x3e0>
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
  8008f4:	8025d5fa 	srai	r18,r16,23
  8008f8:	94bfde84 	addi	r18,r18,-134
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
  8008fc:	900495fa 	slli	r2,r18,23
  800900:	80a1c83a 	sub	r16,r16,r2
		tx[i] = (float)((__int32_t)(z));
  800904:	8009883a 	mov	r4,r16
  800908:	0801fdc0 	call	801fdc <__fixsfsi>
  80090c:	1009883a 	mov	r4,r2
  800910:	080204c0 	call	80204c <__floatsisf>
		z     = (z-tx[i])*two8;
  800914:	100b883a 	mov	r5,r2
  800918:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  80091c:	d8800215 	stw	r2,8(sp)
		z     = (z-tx[i])*two8;
  800920:	0410e034 	movhi	r16,17280
  800924:	0801b480 	call	801b48 <__subsf3>
  800928:	1421c032 	custom	0,r16,r2,r16
		tx[i] = (float)((__int32_t)(z));
  80092c:	8009883a 	mov	r4,r16
  800930:	0801fdc0 	call	801fdc <__fixsfsi>
  800934:	1009883a 	mov	r4,r2
  800938:	080204c0 	call	80204c <__floatsisf>
		z     = (z-tx[i])*two8;
  80093c:	100b883a 	mov	r5,r2
  800940:	8009883a 	mov	r4,r16
		tx[i] = (float)((__int32_t)(z));
  800944:	1029883a 	mov	r20,r2
  800948:	d8800315 	stw	r2,12(sp)
		z     = (z-tx[i])*two8;
  80094c:	0801b480 	call	801b48 <__subsf3>
  800950:	00d0e034 	movhi	r3,17280
  800954:	10c5c032 	custom	0,r2,r2,r3
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800958:	000b883a 	mov	r5,zero
  80095c:	1009883a 	mov	r4,r2
	tx[2] = z;
  800960:	d8800415 	stw	r2,16(sp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800964:	0801a200 	call	801a20 <__eqsf2>
  800968:	1000711e 	bne	r2,zero,800b30 <__ieee754_rem_pio2f+0x40c>
  80096c:	000b883a 	mov	r5,zero
  800970:	a009883a 	mov	r4,r20
  800974:	0801a200 	call	801a20 <__eqsf2>
  800978:	10006b1e 	bne	r2,zero,800b28 <__ieee754_rem_pio2f+0x404>
  80097c:	01c00044 	movi	r7,1
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
  800980:	00802074 	movhi	r2,129
  800984:	10879704 	addi	r2,r2,7772
  800988:	d8800115 	stw	r2,4(sp)
  80098c:	00800084 	movi	r2,2
  800990:	900d883a 	mov	r6,r18
  800994:	d8800015 	stw	r2,0(sp)
  800998:	880b883a 	mov	r5,r17
  80099c:	d9000204 	addi	r4,sp,8
  8009a0:	0800d5c0 	call	800d5c <__kernel_rem_pio2f>
  8009a4:	1025883a 	mov	r18,r2
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
  8009a8:	983f8d0e 	bge	r19,zero,8007e0 <__ieee754_rem_pio2f+0xbc>
  8009ac:	88c00017 	ldw	r3,0(r17)
  8009b0:	88800117 	ldw	r2,4(r17)
  8009b4:	04a5c83a 	sub	r18,zero,r18
  8009b8:	18e0003c 	xorhi	r3,r3,32768
  8009bc:	10a0003c 	xorhi	r2,r2,32768
  8009c0:	88c00015 	stw	r3,0(r17)
  8009c4:	88800115 	stw	r2,4(r17)
  8009c8:	003f8506 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
		    z -= pio2_2;
  8009cc:	9009883a 	mov	r4,r18
  8009d0:	29510004 	addi	r5,r5,17408
  8009d4:	0801b480 	call	801b48 <__subsf3>
		    y[0] = z - pio2_2t;
  8009d8:	014ba1b4 	movhi	r5,11910
  8009dc:	2968c204 	addi	r5,r5,-23800
  8009e0:	1009883a 	mov	r4,r2
		    z -= pio2_2;
  8009e4:	1021883a 	mov	r16,r2
		    y[0] = z - pio2_2t;
  8009e8:	0801b480 	call	801b48 <__subsf3>
		    y[1] = (z-y[0])-pio2_2t;
  8009ec:	100b883a 	mov	r5,r2
  8009f0:	8009883a 	mov	r4,r16
		    y[0] = z - pio2_2t;
  8009f4:	88800015 	stw	r2,0(r17)
		    y[1] = (z-y[0])-pio2_2t;
  8009f8:	0801b480 	call	801b48 <__subsf3>
  8009fc:	014ba1b4 	movhi	r5,11910
  800a00:	2968c204 	addi	r5,r5,-23800
  800a04:	1009883a 	mov	r4,r2
  800a08:	0801b480 	call	801b48 <__subsf3>
  800a0c:	88800115 	stw	r2,4(r17)
		return 1;
  800a10:	04800044 	movi	r18,1
  800a14:	003f7206 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
	        i = j-((high>>23)&0xff);
  800a18:	1006d5fa 	srli	r3,r2,23
	        j  = ix>>23;
  800a1c:	8021d5fa 	srai	r16,r16,23
	        i = j-((high>>23)&0xff);
  800a20:	18c03fcc 	andi	r3,r3,255
  800a24:	80c7c83a 	sub	r3,r16,r3
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
  800a28:	18c00248 	cmpgei	r3,r3,9
  800a2c:	183f9d26 	beq	r3,zero,8008a4 <__ieee754_rem_pio2f+0x180>
		    w  = fn*pio2_2;	
  800a30:	014dcd74 	movhi	r5,14133
  800a34:	29510004 	addi	r5,r5,17408
  800a38:	a969c032 	custom	0,r20,r21,r5
		    r  = t-w;
  800a3c:	a00b883a 	mov	r5,r20
  800a40:	b809883a 	mov	r4,r23
  800a44:	0801b480 	call	801b48 <__subsf3>
		    w  = fn*pio2_2t-((t-r)-w);	
  800a48:	100b883a 	mov	r5,r2
  800a4c:	b809883a 	mov	r4,r23
		    r  = t-w;
  800a50:	1039883a 	mov	fp,r2
		    w  = fn*pio2_2t-((t-r)-w);	
  800a54:	0801b480 	call	801b48 <__subsf3>
  800a58:	a00b883a 	mov	r5,r20
  800a5c:	1009883a 	mov	r4,r2
  800a60:	0801b480 	call	801b48 <__subsf3>
  800a64:	010ba1b4 	movhi	r4,11910
  800a68:	2128c204 	addi	r4,r4,-23800
  800a6c:	100b883a 	mov	r5,r2
  800a70:	a909c032 	custom	0,r4,r21,r4
  800a74:	0801b480 	call	801b48 <__subsf3>
		    y[0] = r-w;
  800a78:	100b883a 	mov	r5,r2
  800a7c:	e009883a 	mov	r4,fp
		    w  = fn*pio2_2t-((t-r)-w);	
  800a80:	1029883a 	mov	r20,r2
		    y[0] = r-w;
  800a84:	0801b480 	call	801b48 <__subsf3>
		    i = j-((high>>23)&0xff);
  800a88:	1006d5fa 	srli	r3,r2,23
		    y[0] = r-w;
  800a8c:	102d883a 	mov	r22,r2
		    i = j-((high>>23)&0xff);
  800a90:	18c03fcc 	andi	r3,r3,255
  800a94:	80e1c83a 	sub	r16,r16,r3
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
  800a98:	84000688 	cmpgei	r16,r16,26
  800a9c:	80001f26 	beq	r16,zero,800b1c <__ieee754_rem_pio2f+0x3f8>
		    	w  = fn*pio2_3;	
  800aa0:	008ba1b4 	movhi	r2,11910
  800aa4:	10a8c004 	addi	r2,r2,-23808
  800aa8:	a8a1c032 	custom	0,r16,r21,r2
		    	r  = t-w;
  800aac:	800b883a 	mov	r5,r16
  800ab0:	e009883a 	mov	r4,fp
  800ab4:	0801b480 	call	801b48 <__subsf3>
		    	w  = fn*pio2_3t-((t-r)-w);	
  800ab8:	100b883a 	mov	r5,r2
  800abc:	e009883a 	mov	r4,fp
		    	r  = t-w;
  800ac0:	102d883a 	mov	r22,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800ac4:	0801b480 	call	801b48 <__subsf3>
  800ac8:	800b883a 	mov	r5,r16
  800acc:	1009883a 	mov	r4,r2
  800ad0:	0801b480 	call	801b48 <__subsf3>
  800ad4:	01092374 	movhi	r4,9357
  800ad8:	210c4c84 	addi	r4,r4,12594
  800adc:	100b883a 	mov	r5,r2
  800ae0:	a909c032 	custom	0,r4,r21,r4
  800ae4:	0801b480 	call	801b48 <__subsf3>
		    	y[0] = r-w;
  800ae8:	b009883a 	mov	r4,r22
  800aec:	100b883a 	mov	r5,r2
		    	w  = fn*pio2_3t-((t-r)-w);	
  800af0:	1029883a 	mov	r20,r2
		    	y[0] = r-w;
  800af4:	0801b480 	call	801b48 <__subsf3>
		    	r  = t-w;
  800af8:	b009883a 	mov	r4,r22
		    	y[0] = r-w;
  800afc:	102d883a 	mov	r22,r2
  800b00:	003f6806 	br	8008a4 <__ieee754_rem_pio2f+0x180>
	    y[0]=y[1]=x-x; return 0;
  800b04:	200b883a 	mov	r5,r4
  800b08:	0801b480 	call	801b48 <__subsf3>
  800b0c:	88800115 	stw	r2,4(r17)
  800b10:	88800015 	stw	r2,0(r17)
  800b14:	0025883a 	mov	r18,zero
  800b18:	003f3106 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
		    y[0] = r-w;
  800b1c:	88800015 	stw	r2,0(r17)
		    r  = t-w;
  800b20:	e009883a 	mov	r4,fp
  800b24:	003f6006 	br	8008a8 <__ieee754_rem_pio2f+0x184>
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
  800b28:	01c00084 	movi	r7,2
  800b2c:	003f9406 	br	800980 <__ieee754_rem_pio2f+0x25c>
	nx = 3;
  800b30:	01c000c4 	movi	r7,3
  800b34:	003f9206 	br	800980 <__ieee754_rem_pio2f+0x25c>
		z = x + pio2_1;
  800b38:	010ff274 	movhi	r4,16329
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b3c:	008ff274 	movhi	r2,16329
		z = x + pio2_1;
  800b40:	2103e004 	addi	r4,r4,3968
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b44:	1083f404 	addi	r2,r2,4048
		z = x + pio2_1;
  800b48:	1909c072 	custom	1,r4,r3,r4
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
  800b4c:	80800926 	beq	r16,r2,800b74 <__ieee754_rem_pio2f+0x450>
		    y[0] = z + pio2_1t;
  800b50:	040dcd74 	movhi	r16,14133
  800b54:	841110c4 	addi	r16,r16,17475
		    y[0] = z + pio2_2t;
  800b58:	240bc072 	custom	1,r5,r4,r16
  800b5c:	89400015 	stw	r5,0(r17)
		    y[1] = (z-y[0])+pio2_2t;
  800b60:	0801b480 	call	801b48 <__subsf3>
  800b64:	1421c072 	custom	1,r16,r2,r16
  800b68:	8c000115 	stw	r16,4(r17)
		return -1;
  800b6c:	04bfffc4 	movi	r18,-1
  800b70:	003f1b06 	br	8007e0 <__ieee754_rem_pio2f+0xbc>
		    z += pio2_2;
  800b74:	008dcd74 	movhi	r2,14133
  800b78:	10910004 	addi	r2,r2,17408
		    y[0] = z + pio2_2t;
  800b7c:	040ba1b4 	movhi	r16,11910
		    z += pio2_2;
  800b80:	2089c072 	custom	1,r4,r4,r2
		    y[0] = z + pio2_2t;
  800b84:	8428c204 	addi	r16,r16,-23800
  800b88:	003ff306 	br	800b58 <__ieee754_rem_pio2f+0x434>

00800b8c <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
  800b8c:	defff904 	addi	sp,sp,-28
  800b90:	dc400115 	stw	r17,4(sp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800b94:	04600034 	movhi	r17,32768
  800b98:	8c7fffc4 	addi	r17,r17,-1
{
  800b9c:	dd000415 	stw	r20,16(sp)
  800ba0:	dc800215 	stw	r18,8(sp)
  800ba4:	dfc00615 	stw	ra,24(sp)
  800ba8:	dd400515 	stw	r21,20(sp)
  800bac:	dcc00315 	stw	r19,12(sp)
  800bb0:	dc000015 	stw	r16,0(sp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
  800bb4:	8922703a 	and	r17,r17,r4
	if(ix<0x32000000) {			/* if x < 2**27 */
  800bb8:	008c8034 	movhi	r2,12800
{
  800bbc:	2029883a 	mov	r20,r4
  800bc0:	2825883a 	mov	r18,r5
	if(ix<0x32000000) {			/* if x < 2**27 */
  800bc4:	8880260e 	bge	r17,r2,800c60 <__kernel_cosf+0xd4>
	    if(((int)x)==0) return one;		/* generate inexact */
  800bc8:	0801fdc0 	call	801fdc <__fixsfsi>
  800bcc:	10006126 	beq	r2,zero,800d54 <__kernel_cosf+0x1c8>
	}
	z  = x*x;
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800bd0:	012b5234 	movhi	r4,44360
	z  = x*x;
  800bd4:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800bd8:	2135d384 	addi	r4,r4,-10418
  800bdc:	008c43f4 	movhi	r2,12559
  800be0:	109d3d84 	addi	r2,r2,29942
  800be4:	9909c032 	custom	0,r4,r19,r4
  800be8:	2089c072 	custom	1,r4,r4,r2
  800bec:	014d2534 	movhi	r5,13460
  800bf0:	297c9f04 	addi	r5,r5,-3460
  800bf4:	24c9c032 	custom	0,r4,r4,r19
  800bf8:	0801b480 	call	801b48 <__subsf3>
  800bfc:	00cdf434 	movhi	r3,14288
  800c00:	18c34044 	addi	r3,r3,3329
  800c04:	14c9c032 	custom	0,r4,r2,r19
  800c08:	20c9c072 	custom	1,r4,r4,r3
  800c0c:	014eadb4 	movhi	r5,15030
  800c10:	2942d844 	addi	r5,r5,2913
  800c14:	24c9c032 	custom	0,r4,r4,r19
  800c18:	0801b480 	call	801b48 <__subsf3>
  800c1c:	00cf4af4 	movhi	r3,15659
  800c20:	14e1c032 	custom	0,r16,r2,r19
  800c24:	18eaaac4 	addi	r3,r3,-21845
  800c28:	80e1c072 	custom	1,r16,r16,r3
  800c2c:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
	    return one - ((float)0.5*z - (z*r - x*y));
  800c30:	a48bc032 	custom	0,r5,r20,r18
  800c34:	9c09c032 	custom	0,r4,r19,r16
  800c38:	044fc034 	movhi	r17,16128
  800c3c:	0801b480 	call	801b48 <__subsf3>
  800c40:	9c63c032 	custom	0,r17,r19,r17
  800c44:	8809883a 	mov	r4,r17
  800c48:	100b883a 	mov	r5,r2
  800c4c:	0801b480 	call	801b48 <__subsf3>
  800c50:	100b883a 	mov	r5,r2
  800c54:	010fe034 	movhi	r4,16256
  800c58:	0801b480 	call	801b48 <__subsf3>
  800c5c:	00003106 	br	800d24 <__kernel_cosf+0x198>
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c60:	012b5234 	movhi	r4,44360
	z  = x*x;
  800c64:	a527c032 	custom	0,r19,r20,r20
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800c68:	2135d384 	addi	r4,r4,-10418
  800c6c:	008c43f4 	movhi	r2,12559
  800c70:	109d3d84 	addi	r2,r2,29942
  800c74:	9909c032 	custom	0,r4,r19,r4
  800c78:	2089c072 	custom	1,r4,r4,r2
  800c7c:	014d2534 	movhi	r5,13460
  800c80:	297c9f04 	addi	r5,r5,-3460
  800c84:	24c9c032 	custom	0,r4,r4,r19
  800c88:	0801b480 	call	801b48 <__subsf3>
  800c8c:	00cdf434 	movhi	r3,14288
  800c90:	18c34044 	addi	r3,r3,3329
  800c94:	14c9c032 	custom	0,r4,r2,r19
  800c98:	20c9c072 	custom	1,r4,r4,r3
  800c9c:	014eadb4 	movhi	r5,15030
  800ca0:	24c9c032 	custom	0,r4,r4,r19
  800ca4:	2942d844 	addi	r5,r5,2913
  800ca8:	0801b480 	call	801b48 <__subsf3>
  800cac:	010f4af4 	movhi	r4,15659
  800cb0:	14e1c032 	custom	0,r16,r2,r19
  800cb4:	212aaac4 	addi	r4,r4,-21845
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800cb8:	00cfa6b4 	movhi	r3,16026
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800cbc:	8121c072 	custom	1,r16,r16,r4
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800cc0:	18e66644 	addi	r3,r3,-26215
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
  800cc4:	84e1c032 	custom	0,r16,r16,r19
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
  800cc8:	1c7fd90e 	bge	r3,r17,800c30 <__kernel_cosf+0xa4>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
  800ccc:	008fd234 	movhi	r2,16200
  800cd0:	14401d16 	blt	r2,r17,800d48 <__kernel_cosf+0x1bc>
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800cd4:	017fc034 	movhi	r5,65280
  800cd8:	894b883a 	add	r5,r17,r5
	    }
	    hz = (float)0.5*z-qx;
	    a  = one-qx;
  800cdc:	010fe034 	movhi	r4,16256
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
  800ce0:	2823883a 	mov	r17,r5
	    a  = one-qx;
  800ce4:	0801b480 	call	801b48 <__subsf3>
  800ce8:	102b883a 	mov	r21,r2
	    hz = (float)0.5*z-qx;
  800cec:	010fc034 	movhi	r4,16128
  800cf0:	880b883a 	mov	r5,r17
  800cf4:	9909c032 	custom	0,r4,r19,r4
  800cf8:	0801b480 	call	801b48 <__subsf3>
	    return a - (hz - (z*r-x*y));
  800cfc:	a48bc032 	custom	0,r5,r20,r18
  800d00:	9c09c032 	custom	0,r4,r19,r16
	    hz = (float)0.5*z-qx;
  800d04:	1023883a 	mov	r17,r2
	    return a - (hz - (z*r-x*y));
  800d08:	0801b480 	call	801b48 <__subsf3>
  800d0c:	100b883a 	mov	r5,r2
  800d10:	8809883a 	mov	r4,r17
  800d14:	0801b480 	call	801b48 <__subsf3>
  800d18:	100b883a 	mov	r5,r2
  800d1c:	a809883a 	mov	r4,r21
  800d20:	0801b480 	call	801b48 <__subsf3>
	}
}
  800d24:	dfc00617 	ldw	ra,24(sp)
  800d28:	dd400517 	ldw	r21,20(sp)
  800d2c:	dd000417 	ldw	r20,16(sp)
  800d30:	dcc00317 	ldw	r19,12(sp)
  800d34:	dc800217 	ldw	r18,8(sp)
  800d38:	dc400117 	ldw	r17,4(sp)
  800d3c:	dc000017 	ldw	r16,0(sp)
  800d40:	dec00704 	addi	sp,sp,28
  800d44:	f800283a 	ret
  800d48:	054fce34 	movhi	r21,16184
		qx = (float)0.28125;
  800d4c:	044fa434 	movhi	r17,16016
  800d50:	003fe606 	br	800cec <__kernel_cosf+0x160>
	    if(((int)x)==0) return one;		/* generate inexact */
  800d54:	008fe034 	movhi	r2,16256
  800d58:	003ff206 	br	800d24 <__kernel_cosf+0x198>

00800d5c <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
  800d5c:	deff9a04 	addi	sp,sp,-408
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
  800d60:	d8806617 	ldw	r2,408(sp)
{
  800d64:	dd806215 	stw	r22,392(sp)
  800d68:	dd006015 	stw	r20,384(sp)
	jk = init_jk[prec];
  800d6c:	100690ba 	slli	r3,r2,2
  800d70:	00802074 	movhi	r2,129
{
  800d74:	dfc06515 	stw	ra,404(sp)
	jk = init_jk[prec];
  800d78:	1885883a 	add	r2,r3,r2
  800d7c:	15086817 	ldw	r20,8608(r2)
{
  800d80:	df006415 	stw	fp,400(sp)
	jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
  800d84:	38bfffc4 	addi	r2,r7,-1
{
  800d88:	ddc06315 	stw	r23,396(sp)
  800d8c:	dd406115 	stw	r21,388(sp)
  800d90:	dcc05f15 	stw	r19,380(sp)
  800d94:	dc805e15 	stw	r18,376(sp)
  800d98:	dc405d15 	stw	r17,372(sp)
  800d9c:	dc005c15 	stw	r16,368(sp)
  800da0:	d9800b15 	stw	r6,44(sp)
  800da4:	d9c00615 	stw	r7,24(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  800da8:	30ffff10 	cmplti	r3,r6,-4
{
  800dac:	d9000515 	stw	r4,20(sp)
  800db0:	d9400815 	stw	r5,32(sp)
	jx =  nx-1;
  800db4:	102d883a 	mov	r22,r2
	jv = (e0-3)/8; if(jv<0) jv=0;
  800db8:	1801e11e 	bne	r3,zero,801540 <__kernel_rem_pio2f+0x7e4>
  800dbc:	30bfff44 	addi	r2,r6,-3
  800dc0:	1001e316 	blt	r2,zero,801550 <__kernel_rem_pio2f+0x7f4>
  800dc4:	1005d0fa 	srai	r2,r2,3
  800dc8:	d8800415 	stw	r2,16(sp)
	q0 =  e0-8*(jv+1);
  800dcc:	10800044 	addi	r2,r2,1
  800dd0:	100490fa 	slli	r2,r2,3
  800dd4:	d8800a15 	stw	r2,40(sp)
  800dd8:	d9000b17 	ldw	r4,44(sp)
  800ddc:	d9400a17 	ldw	r5,40(sp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
  800de0:	a585883a 	add	r2,r20,r22
	q0 =  e0-8*(jv+1);
  800de4:	2149c83a 	sub	r4,r4,r5
  800de8:	d9000115 	stw	r4,4(sp)
	j = jv-jx; m = jx+jk;
  800dec:	d9000417 	ldw	r4,16(sp)
  800df0:	25a1c83a 	sub	r16,r4,r22
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  800df4:	10000e16 	blt	r2,zero,800e30 <__kernel_rem_pio2f+0xd4>
  800df8:	802490ba 	slli	r18,r16,2
  800dfc:	d8c06717 	ldw	r3,412(sp)
  800e00:	10800044 	addi	r2,r2,1
  800e04:	dc402004 	addi	r17,sp,128
  800e08:	1ca5883a 	add	r18,r3,r18
  800e0c:	1427883a 	add	r19,r2,r16
  800e10:	80010f16 	blt	r16,zero,801250 <__kernel_rem_pio2f+0x4f4>
  800e14:	91000017 	ldw	r4,0(r18)
  800e18:	080204c0 	call	80204c <__floatsisf>
  800e1c:	88800015 	stw	r2,0(r17)
  800e20:	84000044 	addi	r16,r16,1
  800e24:	8c400104 	addi	r17,r17,4
  800e28:	94800104 	addi	r18,r18,4
  800e2c:	84fff81e 	bne	r16,r19,800e10 <__kernel_rem_pio2f+0xb4>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
  800e30:	a0001c16 	blt	r20,zero,800ea4 <__kernel_rem_pio2f+0x148>
  800e34:	b01090ba 	slli	r8,r22,2
  800e38:	d8802004 	addi	r2,sp,128
  800e3c:	db400517 	ldw	r13,20(sp)
  800e40:	41c00104 	addi	r7,r8,4
  800e44:	1211883a 	add	r8,r2,r8
  800e48:	d8800617 	ldw	r2,24(sp)
  800e4c:	b019883a 	mov	r12,r22
  800e50:	da804804 	addi	r10,sp,288
  800e54:	b013883a 	mov	r9,r22
  800e58:	a097883a 	add	r11,r20,r2
  800e5c:	3b4f883a 	add	r7,r7,r13
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  800e60:	000b883a 	mov	r5,zero
  800e64:	60000a16 	blt	r12,zero,800e90 <__kernel_rem_pio2f+0x134>
  800e68:	4009883a 	mov	r4,r8
  800e6c:	6805883a 	mov	r2,r13
  800e70:	000b883a 	mov	r5,zero
  800e74:	10c00017 	ldw	r3,0(r2)
  800e78:	21800017 	ldw	r6,0(r4)
  800e7c:	10800104 	addi	r2,r2,4
  800e80:	213fff04 	addi	r4,r4,-4
  800e84:	1987c032 	custom	0,r3,r3,r6
  800e88:	28cbc072 	custom	1,r5,r5,r3
  800e8c:	11fff91e 	bne	r2,r7,800e74 <__kernel_rem_pio2f+0x118>
	    q[i] = fw;
  800e90:	51400015 	stw	r5,0(r10)
	for (i=0;i<=jk;i++) {
  800e94:	4a400044 	addi	r9,r9,1
  800e98:	52800104 	addi	r10,r10,4
  800e9c:	42000104 	addi	r8,r8,4
  800ea0:	4affef1e 	bne	r9,r11,800e60 <__kernel_rem_pio2f+0x104>
  800ea4:	d8c00617 	ldw	r3,24(sp)
  800ea8:	d9000517 	ldw	r4,20(sp)
    /* check if recomputation is needed */
	if(z==zero) {
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800eac:	a0bfffc4 	addi	r2,r20,-1
  800eb0:	180690ba 	slli	r3,r3,2
  800eb4:	100490ba 	slli	r2,r2,2
  800eb8:	a02a90ba 	slli	r21,r20,2
  800ebc:	21ffff04 	addi	r7,r4,-4
  800ec0:	38f9883a 	add	fp,r7,r3
  800ec4:	d8c05c04 	addi	r3,sp,368
  800ec8:	d9000c04 	addi	r4,sp,48
  800ecc:	1885883a 	add	r2,r3,r2
	jk = init_jk[prec];
  800ed0:	a025883a 	mov	r18,r20
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  800ed4:	dd000315 	stw	r20,12(sp)
  800ed8:	256b883a 	add	r21,r4,r21
  800edc:	dcc04804 	addi	r19,sp,288
  800ee0:	d8800715 	stw	r2,28(sp)
  800ee4:	b029883a 	mov	r20,r22
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800ee8:	900690ba 	slli	r3,r18,2
  800eec:	d8805c04 	addi	r2,sp,368
  800ef0:	d8c00015 	stw	r3,0(sp)
  800ef4:	10c5883a 	add	r2,r2,r3
  800ef8:	147fec17 	ldw	r17,-80(r2)
  800efc:	0480140e 	bge	zero,r18,800f50 <__kernel_rem_pio2f+0x1f4>
  800f00:	98e1883a 	add	r16,r19,r3
  800f04:	dd800c04 	addi	r22,sp,48
	    fw    =  (float)((__int32_t)(twon8* z));
  800f08:	010ee034 	movhi	r4,15232
  800f0c:	8909c032 	custom	0,r4,r17,r4
  800f10:	0801fdc0 	call	801fdc <__fixsfsi>
  800f14:	1009883a 	mov	r4,r2
  800f18:	080204c0 	call	80204c <__floatsisf>
	    iq[i] =  (__int32_t)(z-two8*fw);
  800f1c:	0150e034 	movhi	r5,17280
  800f20:	8809883a 	mov	r4,r17
  800f24:	114bc032 	custom	0,r5,r2,r5
	    fw    =  (float)((__int32_t)(twon8* z));
  800f28:	102f883a 	mov	r23,r2
	    iq[i] =  (__int32_t)(z-two8*fw);
  800f2c:	0801b480 	call	801b48 <__subsf3>
  800f30:	1009883a 	mov	r4,r2
  800f34:	0801fdc0 	call	801fdc <__fixsfsi>
	    z     =  q[j-1]+fw;
  800f38:	847fff17 	ldw	r17,-4(r16)
	    iq[i] =  (__int32_t)(z-two8*fw);
  800f3c:	b0800015 	stw	r2,0(r22)
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800f40:	843fff04 	addi	r16,r16,-4
	    z     =  q[j-1]+fw;
  800f44:	bc63c072 	custom	1,r17,r23,r17
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
  800f48:	b5800104 	addi	r22,r22,4
  800f4c:	9c3fee1e 	bne	r19,r16,800f08 <__kernel_rem_pio2f+0x1ac>
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800f50:	dc000117 	ldw	r16,4(sp)
  800f54:	8809883a 	mov	r4,r17
  800f58:	800b883a 	mov	r5,r16
  800f5c:	08019040 	call	801904 <scalbnf>
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f60:	010f8034 	movhi	r4,15872
  800f64:	1109c032 	custom	0,r4,r2,r4
	z  = scalbnf(z,(int)q0);	/* actual value of z */
  800f68:	1023883a 	mov	r17,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f6c:	080181c0 	call	80181c <floorf>
  800f70:	01504034 	movhi	r5,16640
  800f74:	114bc032 	custom	0,r5,r2,r5
  800f78:	8809883a 	mov	r4,r17
  800f7c:	0801b480 	call	801b48 <__subsf3>
	n  = (__int32_t) z;
  800f80:	1009883a 	mov	r4,r2
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
  800f84:	102f883a 	mov	r23,r2
	n  = (__int32_t) z;
  800f88:	0801fdc0 	call	801fdc <__fixsfsi>
	z -= (float)n;
  800f8c:	1009883a 	mov	r4,r2
	n  = (__int32_t) z;
  800f90:	1023883a 	mov	r17,r2
	z -= (float)n;
  800f94:	080204c0 	call	80204c <__floatsisf>
  800f98:	100b883a 	mov	r5,r2
  800f9c:	b809883a 	mov	r4,r23
  800fa0:	0801b480 	call	801b48 <__subsf3>
  800fa4:	1011883a 	mov	r8,r2
  800fa8:	100d883a 	mov	r6,r2
	if(q0>0) {	/* need iq[jz-1] to determine n */
  800fac:	0400560e 	bge	zero,r16,801108 <__kernel_rem_pio2f+0x3ac>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800fb0:	90bfffc4 	addi	r2,r18,-1
  800fb4:	100490ba 	slli	r2,r2,2
  800fb8:	d9005c04 	addi	r4,sp,368
  800fbc:	00c00204 	movi	r3,8
  800fc0:	2085883a 	add	r2,r4,r2
  800fc4:	113fb017 	ldw	r4,-320(r2)
  800fc8:	1c07c83a 	sub	r3,r3,r16
	    ih = iq[jz-1]>>(7-q0);
  800fcc:	05c001c4 	movi	r23,7
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800fd0:	20cbd83a 	sra	r5,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  800fd4:	bc2fc83a 	sub	r23,r23,r16
	    iq[jz-1] -= i<<(8-q0);
  800fd8:	28c6983a 	sll	r3,r5,r3
	    i  = (iq[jz-1]>>(8-q0)); n += i;
  800fdc:	8963883a 	add	r17,r17,r5
	    iq[jz-1] -= i<<(8-q0);
  800fe0:	20c7c83a 	sub	r3,r4,r3
	    ih = iq[jz-1]>>(7-q0);
  800fe4:	1defd83a 	sra	r23,r3,r23
	    iq[jz-1] -= i<<(8-q0);
  800fe8:	10ffb015 	stw	r3,-320(r2)
	if(ih>0) {	/* q > 0.5 */
  800fec:	05c04f16 	blt	zero,r23,80112c <__kernel_rem_pio2f+0x3d0>
	if(z==zero) {
  800ff0:	3009883a 	mov	r4,r6
  800ff4:	000b883a 	mov	r5,zero
  800ff8:	d9800215 	stw	r6,8(sp)
  800ffc:	0801a200 	call	801a20 <__eqsf2>
  801000:	d9800217 	ldw	r6,8(sp)
  801004:	1001561e 	bne	r2,zero,801560 <__kernel_rem_pio2f+0x804>
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  801008:	d8800317 	ldw	r2,12(sp)
  80100c:	923fffc4 	addi	r8,r18,-1
  801010:	40800916 	blt	r8,r2,801038 <__kernel_rem_pio2f+0x2dc>
  801014:	d8800017 	ldw	r2,0(sp)
  801018:	d8c00c04 	addi	r3,sp,48
  80101c:	1885883a 	add	r2,r3,r2
	    j = 0;
  801020:	0007883a 	mov	r3,zero
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
  801024:	113fff17 	ldw	r4,-4(r2)
  801028:	10bfff04 	addi	r2,r2,-4
  80102c:	1906b03a 	or	r3,r3,r4
  801030:	157ffc1e 	bne	r2,r21,801024 <__kernel_rem_pio2f+0x2c8>
	    if(j==0) { /* need recomputation */
  801034:	1800981e 	bne	r3,zero,801298 <__kernel_rem_pio2f+0x53c>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
  801038:	d8800717 	ldw	r2,28(sp)
  80103c:	10bfb017 	ldw	r2,-320(r2)
  801040:	1000921e 	bne	r2,zero,80128c <__kernel_rem_pio2f+0x530>
  801044:	a805883a 	mov	r2,r21
  801048:	04400044 	movi	r17,1
  80104c:	10fffe17 	ldw	r3,-8(r2)
  801050:	8c400044 	addi	r17,r17,1
  801054:	10bfff04 	addi	r2,r2,-4
  801058:	183ffc26 	beq	r3,zero,80104c <__kernel_rem_pio2f+0x2f0>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  80105c:	95800044 	addi	r22,r18,1
  801060:	9463883a 	add	r17,r18,r17
  801064:	d8800417 	ldw	r2,16(sp)
  801068:	90af883a 	add	r23,r18,r2
  80106c:	d8800617 	ldw	r2,24(sp)
  801070:	b82e90ba 	slli	r23,r23,2
  801074:	14a5883a 	add	r18,r2,r18
  801078:	d8806717 	ldw	r2,412(sp)
  80107c:	902490ba 	slli	r18,r18,2
  801080:	15ef883a 	add	r23,r2,r23
  801084:	d8802004 	addi	r2,sp,128
  801088:	14a5883a 	add	r18,r2,r18
  80108c:	d8800017 	ldw	r2,0(sp)
  801090:	dd400015 	stw	r21,0(sp)
  801094:	98a1883a 	add	r16,r19,r2
  801098:	802b883a 	mov	r21,r16
  80109c:	dc000517 	ldw	r16,20(sp)
		    f[jx+i] = (float) ipio2[jv+i];
  8010a0:	b9000117 	ldw	r4,4(r23)
  8010a4:	080204c0 	call	80204c <__floatsisf>
  8010a8:	90800015 	stw	r2,0(r18)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  8010ac:	a0001416 	blt	r20,zero,801100 <__kernel_rem_pio2f+0x3a4>
  8010b0:	900b883a 	mov	r5,r18
  8010b4:	8009883a 	mov	r4,r16
  8010b8:	000d883a 	mov	r6,zero
  8010bc:	00000206 	br	8010c8 <__kernel_rem_pio2f+0x36c>
  8010c0:	28800017 	ldw	r2,0(r5)
  8010c4:	21000104 	addi	r4,r4,4
  8010c8:	20c00017 	ldw	r3,0(r4)
  8010cc:	297fff04 	addi	r5,r5,-4
  8010d0:	10c5c032 	custom	0,r2,r2,r3
  8010d4:	308dc072 	custom	1,r6,r6,r2
  8010d8:	273ff91e 	bne	r4,fp,8010c0 <__kernel_rem_pio2f+0x364>
		    q[i] = fw;
  8010dc:	a9800115 	stw	r6,4(r21)
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  8010e0:	b5800044 	addi	r22,r22,1
  8010e4:	bdc00104 	addi	r23,r23,4
  8010e8:	94800104 	addi	r18,r18,4
  8010ec:	ad400104 	addi	r21,r21,4
  8010f0:	8dbfeb0e 	bge	r17,r22,8010a0 <__kernel_rem_pio2f+0x344>
  8010f4:	dd400017 	ldw	r21,0(sp)
  8010f8:	8825883a 	mov	r18,r17
  8010fc:	003f7a06 	br	800ee8 <__kernel_rem_pio2f+0x18c>
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
  801100:	000d883a 	mov	r6,zero
  801104:	003ff506 	br	8010dc <__kernel_rem_pio2f+0x380>
	else if(q0==0) ih = iq[jz-1]>>8;
  801108:	d8800117 	ldw	r2,4(sp)
  80110c:	1000551e 	bne	r2,zero,801264 <__kernel_rem_pio2f+0x508>
  801110:	90bfffc4 	addi	r2,r18,-1
  801114:	100490ba 	slli	r2,r2,2
  801118:	d8c05c04 	addi	r3,sp,368
  80111c:	1885883a 	add	r2,r3,r2
  801120:	15ffb017 	ldw	r23,-320(r2)
  801124:	b82fd23a 	srai	r23,r23,8
	if(ih>0) {	/* q > 0.5 */
  801128:	05ffb10e 	bge	zero,r23,800ff0 <__kernel_rem_pio2f+0x294>
	    n += 1; carry = 0;
  80112c:	8c400044 	addi	r17,r17,1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801130:	0481090e 	bge	zero,r18,801558 <__kernel_rem_pio2f+0x7fc>
		j = iq[i];
  801134:	da400c17 	ldw	r9,48(sp)
		    if(j!=0) {
  801138:	4800471e 	bne	r9,zero,801258 <__kernel_rem_pio2f+0x4fc>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  80113c:	90800060 	cmpeqi	r2,r18,1
  801140:	1000241e 	bne	r2,zero,8011d4 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  801144:	da400d17 	ldw	r9,52(sp)
  801148:	d9000d04 	addi	r4,sp,52
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  80114c:	00c00044 	movi	r3,1
  801150:	18800044 	addi	r2,r3,1
  801154:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  801158:	4800061e 	bne	r9,zero,801174 <__kernel_rem_pio2f+0x418>
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  80115c:	90801d26 	beq	r18,r2,8011d4 <__kernel_rem_pio2f+0x478>
		j = iq[i];
  801160:	22400017 	ldw	r9,0(r4)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801164:	1007883a 	mov	r3,r2
  801168:	18800044 	addi	r2,r3,1
  80116c:	21000104 	addi	r4,r4,4
		    if(j!=0) {
  801170:	483ffa26 	beq	r9,zero,80115c <__kernel_rem_pio2f+0x400>
			carry = 1; iq[i] = 0x100- j;
  801174:	180690ba 	slli	r3,r3,2
  801178:	01004004 	movi	r4,256
  80117c:	2253c83a 	sub	r9,r4,r9
  801180:	d9005c04 	addi	r4,sp,368
  801184:	20c7883a 	add	r3,r4,r3
  801188:	1a7fb015 	stw	r9,-320(r3)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  80118c:	1480100e 	bge	r2,r18,8011d0 <__kernel_rem_pio2f+0x474>
		j = iq[i];
  801190:	d8c00017 	ldw	r3,0(sp)
  801194:	100490ba 	slli	r2,r2,2
  801198:	d9000c04 	addi	r4,sp,48
  80119c:	20cb883a 	add	r5,r4,r3
  8011a0:	d8c05c04 	addi	r3,sp,368
  8011a4:	1887883a 	add	r3,r3,r2
  8011a8:	d9c00c04 	addi	r7,sp,48
  8011ac:	18ffb017 	ldw	r3,-320(r3)
		} else  iq[i] = 0xff - j;
  8011b0:	01003fc4 	movi	r4,255
  8011b4:	3885883a 	add	r2,r7,r2
  8011b8:	00000106 	br	8011c0 <__kernel_rem_pio2f+0x464>
		j = iq[i];
  8011bc:	10c00017 	ldw	r3,0(r2)
		} else  iq[i] = 0xff - j;
  8011c0:	20c7c83a 	sub	r3,r4,r3
  8011c4:	10c00015 	stw	r3,0(r2)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  8011c8:	10800104 	addi	r2,r2,4
  8011cc:	117ffb1e 	bne	r2,r5,8011bc <__kernel_rem_pio2f+0x460>
  8011d0:	02400044 	movi	r9,1
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
  8011d4:	d8c00117 	ldw	r3,4(sp)
  8011d8:	00c00b0e 	bge	zero,r3,801208 <__kernel_rem_pio2f+0x4ac>
	        switch(q0) {
  8011dc:	18800060 	cmpeqi	r2,r3,1
  8011e0:	1000c71e 	bne	r2,zero,801500 <__kernel_rem_pio2f+0x7a4>
  8011e4:	188000a0 	cmpeqi	r2,r3,2
  8011e8:	10000726 	beq	r2,zero,801208 <__kernel_rem_pio2f+0x4ac>
	    	   iq[jz-1] &= 0x3f; break;
  8011ec:	90bfffc4 	addi	r2,r18,-1
  8011f0:	100490ba 	slli	r2,r2,2
  8011f4:	d8c05c04 	addi	r3,sp,368
  8011f8:	1885883a 	add	r2,r3,r2
  8011fc:	10ffb017 	ldw	r3,-320(r2)
  801200:	18c00fcc 	andi	r3,r3,63
  801204:	10ffb015 	stw	r3,-320(r2)
	    if(ih==2) {
  801208:	b8800098 	cmpnei	r2,r23,2
  80120c:	103f781e 	bne	r2,zero,800ff0 <__kernel_rem_pio2f+0x294>
		z = one - z;
  801210:	400b883a 	mov	r5,r8
  801214:	010fe034 	movhi	r4,16256
  801218:	da400215 	stw	r9,8(sp)
  80121c:	0801b480 	call	801b48 <__subsf3>
		if(carry!=0) z -= scalbnf(one,(int)q0);
  801220:	da400217 	ldw	r9,8(sp)
		z = one - z;
  801224:	102d883a 	mov	r22,r2
  801228:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  80122c:	483f7026 	beq	r9,zero,800ff0 <__kernel_rem_pio2f+0x294>
  801230:	d9400117 	ldw	r5,4(sp)
  801234:	010fe034 	movhi	r4,16256
  801238:	08019040 	call	801904 <scalbnf>
  80123c:	100b883a 	mov	r5,r2
  801240:	b009883a 	mov	r4,r22
  801244:	0801b480 	call	801b48 <__subsf3>
  801248:	100d883a 	mov	r6,r2
  80124c:	003f6806 	br	800ff0 <__kernel_rem_pio2f+0x294>
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
  801250:	0005883a 	mov	r2,zero
  801254:	003ef106 	br	800e1c <__kernel_rem_pio2f+0xc0>
		    if(j!=0) {
  801258:	00800044 	movi	r2,1
  80125c:	0007883a 	mov	r3,zero
  801260:	003fc406 	br	801174 <__kernel_rem_pio2f+0x418>
	else if(z>=(float)0.5) ih=2;
  801264:	4009883a 	mov	r4,r8
  801268:	014fc034 	movhi	r5,16128
  80126c:	da000915 	stw	r8,36(sp)
  801270:	da000215 	stw	r8,8(sp)
  801274:	0801a900 	call	801a90 <__gesf2>
  801278:	da000217 	ldw	r8,8(sp)
  80127c:	d9800917 	ldw	r6,36(sp)
  801280:	1000a70e 	bge	r2,zero,801520 <__kernel_rem_pio2f+0x7c4>
	ih = 0;
  801284:	002f883a 	mov	r23,zero
  801288:	003f5906 	br	800ff0 <__kernel_rem_pio2f+0x294>
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
  80128c:	95800044 	addi	r22,r18,1
  801290:	b023883a 	mov	r17,r22
  801294:	003f7306 	br	801064 <__kernel_rem_pio2f+0x308>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
  801298:	d8c00117 	ldw	r3,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  80129c:	400490ba 	slli	r2,r8,2
  8012a0:	dd000317 	ldw	r20,12(sp)
	    jz -= 1; q0 -= 8;
  8012a4:	193ffe04 	addi	r4,r3,-8
	    while(iq[jz]==0) { jz--; q0-=8;}
  8012a8:	d8c05c04 	addi	r3,sp,368
  8012ac:	1887883a 	add	r3,r3,r2
  8012b0:	18ffb017 	ldw	r3,-320(r3)
	    jz -= 1; q0 -= 8;
  8012b4:	d9000115 	stw	r4,4(sp)
	    while(iq[jz]==0) { jz--; q0-=8;}
  8012b8:	b839883a 	mov	fp,r23
  8012bc:	1800091e 	bne	r3,zero,8012e4 <__kernel_rem_pio2f+0x588>
  8012c0:	d8c00c04 	addi	r3,sp,48
  8012c4:	1885883a 	add	r2,r3,r2
  8012c8:	2007883a 	mov	r3,r4
  8012cc:	113fff17 	ldw	r4,-4(r2)
  8012d0:	423fffc4 	addi	r8,r8,-1
  8012d4:	10bfff04 	addi	r2,r2,-4
  8012d8:	18fffe04 	addi	r3,r3,-8
  8012dc:	203ffb26 	beq	r4,zero,8012cc <__kernel_rem_pio2f+0x570>
  8012e0:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
  8012e4:	d9400117 	ldw	r5,4(sp)
  8012e8:	010fe034 	movhi	r4,16256
  8012ec:	da000015 	stw	r8,0(sp)
  8012f0:	08019040 	call	801904 <scalbnf>
	for(i=jz;i>=0;i--) {
  8012f4:	da000017 	ldw	r8,0(sp)
	fw = scalbnf(one,(int)q0);
  8012f8:	102d883a 	mov	r22,r2
	for(i=jz;i>=0;i--) {
  8012fc:	4000f316 	blt	r8,zero,8016cc <__kernel_rem_pio2f+0x970>
  801300:	402090ba 	slli	r16,r8,2
  801304:	d8804804 	addi	r2,sp,288
  801308:	402f883a 	mov	r23,r8
  80130c:	1427883a 	add	r19,r2,r16
  801310:	d8800c04 	addi	r2,sp,48
  801314:	1425883a 	add	r18,r2,r16
  801318:	982b883a 	mov	r21,r19
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  80131c:	91000017 	ldw	r4,0(r18)
	for(i=jz;i>=0;i--) {
  801320:	ad7fff04 	addi	r21,r21,-4
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  801324:	080204c0 	call	80204c <__floatsisf>
  801328:	1585c032 	custom	0,r2,r2,r22
  80132c:	010ee034 	movhi	r4,15232
  801330:	9007883a 	mov	r3,r18
  801334:	a8800115 	stw	r2,4(r21)
	for(i=jz;i>=0;i--) {
  801338:	d8800c04 	addi	r2,sp,48
	    q[i] = fw*(float)iq[i]; fw*=twon8;
  80133c:	b12dc032 	custom	0,r22,r22,r4
	for(i=jz;i>=0;i--) {
  801340:	94bfff04 	addi	r18,r18,-4
  801344:	10fff51e 	bne	r2,r3,80131c <__kernel_rem_pio2f+0x5c0>
  801348:	dc803404 	addi	r18,sp,208
  80134c:	b811883a 	mov	r8,r23
  801350:	9015883a 	mov	r10,r18
  801354:	0013883a 	mov	r9,zero
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  801358:	a0001716 	blt	r20,zero,8013b8 <__kernel_rem_pio2f+0x65c>
  80135c:	01402074 	movhi	r5,129
  801360:	29485e04 	addi	r5,r5,8568
  801364:	9809883a 	mov	r4,r19
  801368:	00cff274 	movhi	r3,16329
  80136c:	000d883a 	mov	r6,zero
  801370:	0005883a 	mov	r2,zero
  801374:	00000306 	br	801384 <__kernel_rem_pio2f+0x628>
  801378:	48800816 	blt	r9,r2,80139c <__kernel_rem_pio2f+0x640>
  80137c:	28c00017 	ldw	r3,0(r5)
  801380:	29400104 	addi	r5,r5,4
  801384:	21c00017 	ldw	r7,0(r4)
  801388:	10800044 	addi	r2,r2,1
  80138c:	21000104 	addi	r4,r4,4
  801390:	19c7c032 	custom	0,r3,r3,r7
  801394:	30cdc072 	custom	1,r6,r6,r3
  801398:	a0bff70e 	bge	r20,r2,801378 <__kernel_rem_pio2f+0x61c>
	    fq[jz-i] = fw;
  80139c:	51800015 	stw	r6,0(r10)
	for(i=jz;i>=0;i--) {
  8013a0:	48800044 	addi	r2,r9,1
  8013a4:	52800104 	addi	r10,r10,4
  8013a8:	9cffff04 	addi	r19,r19,-4
  8013ac:	42400426 	beq	r8,r9,8013c0 <__kernel_rem_pio2f+0x664>
  8013b0:	1013883a 	mov	r9,r2
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
  8013b4:	a03fe90e 	bge	r20,zero,80135c <__kernel_rem_pio2f+0x600>
  8013b8:	000d883a 	mov	r6,zero
  8013bc:	003ff706 	br	80139c <__kernel_rem_pio2f+0x640>
	}

    /* compress fq[] into y[] */
	switch(prec) {
  8013c0:	d8806617 	ldw	r2,408(sp)
  8013c4:	108000c8 	cmpgei	r2,r2,3
  8013c8:	10001b1e 	bne	r2,zero,801438 <__kernel_rem_pio2f+0x6dc>
  8013cc:	d8806617 	ldw	r2,408(sp)
  8013d0:	00808c16 	blt	zero,r2,801604 <__kernel_rem_pio2f+0x8a8>
  8013d4:	10000b1e 	bne	r2,zero,801404 <__kernel_rem_pio2f+0x6a8>
  8013d8:	9421883a 	add	r16,r18,r16
  8013dc:	0005883a 	mov	r2,zero
	    case 0:
		fw = 0.0;
		for (i=jz;i>=0;i--) fw += fq[i];
  8013e0:	81000017 	ldw	r4,0(r16)
  8013e4:	8007883a 	mov	r3,r16
  8013e8:	843fff04 	addi	r16,r16,-4
  8013ec:	1105c072 	custom	1,r2,r2,r4
  8013f0:	90fffb1e 	bne	r18,r3,8013e0 <__kernel_rem_pio2f+0x684>
		y[0] = (ih==0)? fw: -fw; 
  8013f4:	e0000126 	beq	fp,zero,8013fc <__kernel_rem_pio2f+0x6a0>
  8013f8:	10a0003c 	xorhi	r2,r2,32768
  8013fc:	d8c00817 	ldw	r3,32(sp)
  801400:	18800015 	stw	r2,0(r3)
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
		}
	}
	return n&7;
  801404:	888001cc 	andi	r2,r17,7
}
  801408:	dfc06517 	ldw	ra,404(sp)
  80140c:	df006417 	ldw	fp,400(sp)
  801410:	ddc06317 	ldw	r23,396(sp)
  801414:	dd806217 	ldw	r22,392(sp)
  801418:	dd406117 	ldw	r21,388(sp)
  80141c:	dd006017 	ldw	r20,384(sp)
  801420:	dcc05f17 	ldw	r19,380(sp)
  801424:	dc805e17 	ldw	r18,376(sp)
  801428:	dc405d17 	ldw	r17,372(sp)
  80142c:	dc005c17 	ldw	r16,368(sp)
  801430:	dec06604 	addi	sp,sp,408
  801434:	f800283a 	ret
	switch(prec) {
  801438:	d8806617 	ldw	r2,408(sp)
  80143c:	108000e0 	cmpeqi	r2,r2,3
  801440:	103ff026 	beq	r2,zero,801404 <__kernel_rem_pio2f+0x6a8>
		for (i=jz;i>0;i--) {
  801444:	4000ad26 	beq	r8,zero,8016fc <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  801448:	d8805c04 	addi	r2,sp,368
  80144c:	1405883a 	add	r2,r2,r16
  801450:	153fd817 	ldw	r20,-160(r2)
  801454:	9427883a 	add	r19,r18,r16
  801458:	402b883a 	mov	r21,r8
  80145c:	993fff17 	ldw	r4,-4(r19)
  801460:	a02d883a 	mov	r22,r20
		for (i=jz;i>0;i--) {
  801464:	9cffff04 	addi	r19,r19,-4
		    fw      = fq[i-1]+fq[i]; 
  801468:	a129c072 	custom	1,r20,r20,r4
		    fq[i]  += fq[i-1]-fw;
  80146c:	a00b883a 	mov	r5,r20
  801470:	0801b480 	call	801b48 <__subsf3>
  801474:	1585c072 	custom	1,r2,r2,r22
  801478:	98800115 	stw	r2,4(r19)
		    fq[i-1] = fw;
  80147c:	9d000015 	stw	r20,0(r19)
		for (i=jz;i>0;i--) {
  801480:	94fff61e 	bne	r18,r19,80145c <__kernel_rem_pio2f+0x700>
		for (i=jz;i>1;i--) {
  801484:	aa000088 	cmpgei	r8,r21,2
  801488:	40009c26 	beq	r8,zero,8016fc <__kernel_rem_pio2f+0x9a0>
		    fw      = fq[i-1]+fq[i]; 
  80148c:	d8805c04 	addi	r2,sp,368
  801490:	1405883a 	add	r2,r2,r16
  801494:	14ffd817 	ldw	r19,-160(r2)
  801498:	9425883a 	add	r18,r18,r16
  80149c:	dd003504 	addi	r20,sp,212
  8014a0:	9021883a 	mov	r16,r18
  8014a4:	813fff17 	ldw	r4,-4(r16)
  8014a8:	982b883a 	mov	r21,r19
		for (i=jz;i>1;i--) {
  8014ac:	843fff04 	addi	r16,r16,-4
		    fw      = fq[i-1]+fq[i]; 
  8014b0:	9927c072 	custom	1,r19,r19,r4
		    fq[i]  += fq[i-1]-fw;
  8014b4:	980b883a 	mov	r5,r19
  8014b8:	0801b480 	call	801b48 <__subsf3>
  8014bc:	1545c072 	custom	1,r2,r2,r21
  8014c0:	80800115 	stw	r2,4(r16)
		    fq[i-1] = fw;
  8014c4:	84c00015 	stw	r19,0(r16)
		for (i=jz;i>1;i--) {
  8014c8:	a43ff61e 	bne	r20,r16,8014a4 <__kernel_rem_pio2f+0x748>
  8014cc:	0005883a 	mov	r2,zero
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  8014d0:	90c00017 	ldw	r3,0(r18)
  8014d4:	94bfff04 	addi	r18,r18,-4
  8014d8:	10c5c072 	custom	1,r2,r2,r3
  8014dc:	a4bffc1e 	bne	r20,r18,8014d0 <__kernel_rem_pio2f+0x774>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
  8014e0:	d9003417 	ldw	r4,208(sp)
  8014e4:	d8c03517 	ldw	r3,212(sp)
		if(ih==0) {
  8014e8:	e000691e 	bne	fp,zero,801690 <__kernel_rem_pio2f+0x934>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  8014ec:	d9400817 	ldw	r5,32(sp)
  8014f0:	29000015 	stw	r4,0(r5)
  8014f4:	28c00115 	stw	r3,4(r5)
  8014f8:	28800215 	stw	r2,8(r5)
  8014fc:	003fc106 	br	801404 <__kernel_rem_pio2f+0x6a8>
	    	   iq[jz-1] &= 0x7f; break;
  801500:	90bfffc4 	addi	r2,r18,-1
  801504:	100490ba 	slli	r2,r2,2
  801508:	d8c05c04 	addi	r3,sp,368
  80150c:	1885883a 	add	r2,r3,r2
  801510:	10ffb017 	ldw	r3,-320(r2)
  801514:	18c01fcc 	andi	r3,r3,127
  801518:	10ffb015 	stw	r3,-320(r2)
  80151c:	003f3a06 	br	801208 <__kernel_rem_pio2f+0x4ac>
	    n += 1; carry = 0;
  801520:	8c400044 	addi	r17,r17,1
	else if(z>=(float)0.5) ih=2;
  801524:	05c00084 	movi	r23,2
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
  801528:	04bf0216 	blt	zero,r18,801134 <__kernel_rem_pio2f+0x3d8>
		z = one - z;
  80152c:	400b883a 	mov	r5,r8
  801530:	010fe034 	movhi	r4,16256
  801534:	0801b480 	call	801b48 <__subsf3>
  801538:	100d883a 	mov	r6,r2
		if(carry!=0) z -= scalbnf(one,(int)q0);
  80153c:	003eac06 	br	800ff0 <__kernel_rem_pio2f+0x294>
  801540:	00800204 	movi	r2,8
  801544:	d8800a15 	stw	r2,40(sp)
	jv = (e0-3)/8; if(jv<0) jv=0;
  801548:	d8000415 	stw	zero,16(sp)
  80154c:	003e2206 	br	800dd8 <__kernel_rem_pio2f+0x7c>
  801550:	30800104 	addi	r2,r6,4
  801554:	003e1b06 	br	800dc4 <__kernel_rem_pio2f+0x68>
	    n += 1; carry = 0;
  801558:	0013883a 	mov	r9,zero
  80155c:	003f1d06 	br	8011d4 <__kernel_rem_pio2f+0x478>
	    z = scalbnf(z,-(int)q0);
  801560:	d8800a17 	ldw	r2,40(sp)
  801564:	d8c00b17 	ldw	r3,44(sp)
  801568:	3009883a 	mov	r4,r6
  80156c:	dd000317 	ldw	r20,12(sp)
  801570:	10cbc83a 	sub	r5,r2,r3
  801574:	08019040 	call	801904 <scalbnf>
	    if(z>=two8) { 
  801578:	0150e034 	movhi	r5,17280
  80157c:	1009883a 	mov	r4,r2
	    z = scalbnf(z,-(int)q0);
  801580:	b839883a 	mov	fp,r23
  801584:	1027883a 	mov	r19,r2
	    if(z>=two8) { 
  801588:	0801a900 	call	801a90 <__gesf2>
  80158c:	10003816 	blt	r2,zero,801670 <__kernel_rem_pio2f+0x914>
		fw = (float)((__int32_t)(twon8*z));
  801590:	010ee034 	movhi	r4,15232
  801594:	9909c032 	custom	0,r4,r19,r4
  801598:	0801fdc0 	call	801fdc <__fixsfsi>
  80159c:	1009883a 	mov	r4,r2
  8015a0:	080204c0 	call	80204c <__floatsisf>
		iq[jz] = (__int32_t)(z-two8*fw);
  8015a4:	0150e034 	movhi	r5,17280
  8015a8:	114bc032 	custom	0,r5,r2,r5
  8015ac:	9809883a 	mov	r4,r19
		fw = (float)((__int32_t)(twon8*z));
  8015b0:	102b883a 	mov	r21,r2
		iq[jz] = (__int32_t)(z-two8*fw);
  8015b4:	0801b480 	call	801b48 <__subsf3>
		jz += 1; q0 += 8;
  8015b8:	92000044 	addi	r8,r18,1
		iq[jz] = (__int32_t)(z-two8*fw);
  8015bc:	1009883a 	mov	r4,r2
		jz += 1; q0 += 8;
  8015c0:	da000215 	stw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  8015c4:	0801fdc0 	call	801fdc <__fixsfsi>
		iq[jz] = (__int32_t) fw;
  8015c8:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t)(z-two8*fw);
  8015cc:	d9000017 	ldw	r4,0(sp)
  8015d0:	d8c05c04 	addi	r3,sp,368
		iq[jz] = (__int32_t) fw;
  8015d4:	402490ba 	slli	r18,r8,2
		iq[jz] = (__int32_t)(z-two8*fw);
  8015d8:	1921883a 	add	r16,r3,r4
  8015dc:	80bfb015 	stw	r2,-320(r16)
		iq[jz] = (__int32_t) fw;
  8015e0:	a809883a 	mov	r4,r21
  8015e4:	1ca5883a 	add	r18,r3,r18
  8015e8:	0801fdc0 	call	801fdc <__fixsfsi>
		jz += 1; q0 += 8;
  8015ec:	d8c00117 	ldw	r3,4(sp)
  8015f0:	da000217 	ldw	r8,8(sp)
		iq[jz] = (__int32_t) fw;
  8015f4:	90bfb015 	stw	r2,-320(r18)
		jz += 1; q0 += 8;
  8015f8:	18c00204 	addi	r3,r3,8
  8015fc:	d8c00115 	stw	r3,4(sp)
		iq[jz] = (__int32_t) fw;
  801600:	003f3806 	br	8012e4 <__kernel_rem_pio2f+0x588>
		for (i=jz;i>=0;i--) fw += fq[i]; 
  801604:	9421883a 	add	r16,r18,r16
		fw = 0.0;
  801608:	000b883a 	mov	r5,zero
		for (i=jz;i>=0;i--) fw += fq[i]; 
  80160c:	80c00017 	ldw	r3,0(r16)
  801610:	8005883a 	mov	r2,r16
  801614:	843fff04 	addi	r16,r16,-4
  801618:	28cbc072 	custom	1,r5,r5,r3
  80161c:	90bffb1e 	bne	r18,r2,80160c <__kernel_rem_pio2f+0x8b0>
		y[0] = (ih==0)? fw: -fw; 
  801620:	da000015 	stw	r8,0(sp)
		fw = fq[0]-fw;
  801624:	d9003417 	ldw	r4,208(sp)
		y[0] = (ih==0)? fw: -fw; 
  801628:	e000211e 	bne	fp,zero,8016b0 <__kernel_rem_pio2f+0x954>
  80162c:	d8800817 	ldw	r2,32(sp)
  801630:	11400015 	stw	r5,0(r2)
		fw = fq[0]-fw;
  801634:	0801b480 	call	801b48 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  801638:	da000017 	ldw	r8,0(sp)
  80163c:	0200090e 	bge	zero,r8,801664 <__kernel_rem_pio2f+0x908>
  801640:	d9003504 	addi	r4,sp,212
  801644:	00c00044 	movi	r3,1
  801648:	21400017 	ldw	r5,0(r4)
  80164c:	18c00044 	addi	r3,r3,1
  801650:	21000104 	addi	r4,r4,4
  801654:	1145c072 	custom	1,r2,r2,r5
  801658:	40fffb0e 	bge	r8,r3,801648 <__kernel_rem_pio2f+0x8ec>
		y[1] = (ih==0)? fw: -fw; 
  80165c:	e0000126 	beq	fp,zero,801664 <__kernel_rem_pio2f+0x908>
  801660:	10a0003c 	xorhi	r2,r2,32768
  801664:	d8c00817 	ldw	r3,32(sp)
  801668:	18800115 	stw	r2,4(r3)
		break;
  80166c:	003f6506 	br	801404 <__kernel_rem_pio2f+0x6a8>
	    } else iq[jz] = (__int32_t) z ;
  801670:	9809883a 	mov	r4,r19
  801674:	0801fdc0 	call	801fdc <__fixsfsi>
  801678:	d9000017 	ldw	r4,0(sp)
  80167c:	d8c05c04 	addi	r3,sp,368
  801680:	9011883a 	mov	r8,r18
  801684:	1921883a 	add	r16,r3,r4
  801688:	80bfb015 	stw	r2,-320(r16)
  80168c:	003f1506 	br	8012e4 <__kernel_rem_pio2f+0x588>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
  801690:	d9400817 	ldw	r5,32(sp)
  801694:	2120003c 	xorhi	r4,r4,32768
  801698:	18e0003c 	xorhi	r3,r3,32768
  80169c:	10a0003c 	xorhi	r2,r2,32768
  8016a0:	29000015 	stw	r4,0(r5)
  8016a4:	28c00115 	stw	r3,4(r5)
  8016a8:	28800215 	stw	r2,8(r5)
  8016ac:	003f5506 	br	801404 <__kernel_rem_pio2f+0x6a8>
		y[0] = (ih==0)? fw: -fw; 
  8016b0:	d8c00817 	ldw	r3,32(sp)
  8016b4:	28a0003c 	xorhi	r2,r5,32768
  8016b8:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
  8016bc:	0801b480 	call	801b48 <__subsf3>
		for (i=1;i<=jz;i++) fw += fq[i];
  8016c0:	da000017 	ldw	r8,0(sp)
  8016c4:	023fde16 	blt	zero,r8,801640 <__kernel_rem_pio2f+0x8e4>
  8016c8:	003fe506 	br	801660 <__kernel_rem_pio2f+0x904>
	switch(prec) {
  8016cc:	d8806617 	ldw	r2,408(sp)
  8016d0:	108000c8 	cmpgei	r2,r2,3
  8016d4:	1000061e 	bne	r2,zero,8016f0 <__kernel_rem_pio2f+0x994>
  8016d8:	d8806617 	ldw	r2,408(sp)
  8016dc:	00800916 	blt	zero,r2,801704 <__kernel_rem_pio2f+0x9a8>
  8016e0:	103f481e 	bne	r2,zero,801404 <__kernel_rem_pio2f+0x6a8>
  8016e4:	0005883a 	mov	r2,zero
		y[0] = (ih==0)? fw: -fw; 
  8016e8:	e03f4426 	beq	fp,zero,8013fc <__kernel_rem_pio2f+0x6a0>
  8016ec:	003f4206 	br	8013f8 <__kernel_rem_pio2f+0x69c>
	switch(prec) {
  8016f0:	d8806617 	ldw	r2,408(sp)
  8016f4:	108000e0 	cmpeqi	r2,r2,3
  8016f8:	103f4226 	beq	r2,zero,801404 <__kernel_rem_pio2f+0x6a8>
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
  8016fc:	0005883a 	mov	r2,zero
  801700:	003f7706 	br	8014e0 <__kernel_rem_pio2f+0x784>
		fw = 0.0;
  801704:	000b883a 	mov	r5,zero
  801708:	003fc506 	br	801620 <__kernel_rem_pio2f+0x8c4>

0080170c <__kernel_sinf>:
#endif
{
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
	ix &= 0x7fffffff;			/* high word of x */
  80170c:	00a00034 	movhi	r2,32768
{
  801710:	defffa04 	addi	sp,sp,-24
	ix &= 0x7fffffff;			/* high word of x */
  801714:	10bfffc4 	addi	r2,r2,-1
{
  801718:	dcc00315 	stw	r19,12(sp)
  80171c:	dc800215 	stw	r18,8(sp)
  801720:	dc000015 	stw	r16,0(sp)
  801724:	dfc00515 	stw	ra,20(sp)
  801728:	dd000415 	stw	r20,16(sp)
  80172c:	dc400115 	stw	r17,4(sp)
	ix &= 0x7fffffff;			/* high word of x */
  801730:	1104703a 	and	r2,r2,r4
	if(ix<0x32000000)			/* |x| < 2**-27 */
  801734:	00cc8034 	movhi	r3,12800
{
  801738:	2021883a 	mov	r16,r4
  80173c:	2827883a 	mov	r19,r5
  801740:	3025883a 	mov	r18,r6
	if(ix<0x32000000)			/* |x| < 2**-27 */
  801744:	10c0020e 	bge	r2,r3,801750 <__kernel_sinf+0x44>
	   {if((int)x==0) return x;}		/* generate inexact */
  801748:	0801fdc0 	call	801fdc <__fixsfsi>
  80174c:	10003126 	beq	r2,zero,801814 <__kernel_sinf+0x108>
	z	=  x*x;
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  801750:	010bcbf4 	movhi	r4,12079
	z	=  x*x;
  801754:	8423c032 	custom	0,r17,r16,r16
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  801758:	213274c4 	addi	r4,r4,-13869
  80175c:	014cb5f4 	movhi	r5,13015
  801760:	294bcd04 	addi	r5,r5,12084
  801764:	8909c032 	custom	0,r4,r17,r4
  801768:	0801b480 	call	801b48 <__subsf3>
  80176c:	00cd8e74 	movhi	r3,13881
  801770:	18fbc6c4 	addi	r3,r3,-4325
  801774:	1449c032 	custom	0,r4,r2,r17
  801778:	20c9c072 	custom	1,r4,r4,r3
  80177c:	014e5434 	movhi	r5,14672
  801780:	29434044 	addi	r5,r5,3329
  801784:	2449c032 	custom	0,r4,r4,r17
  801788:	0801b480 	call	801b48 <__subsf3>
  80178c:	00cf0274 	movhi	r3,15369
  801790:	1445c032 	custom	0,r2,r2,r17
  801794:	18e22244 	addi	r3,r3,-30583
	v	=  z*x;
  801798:	8469c032 	custom	0,r20,r16,r17
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
  80179c:	10c5c072 	custom	1,r2,r2,r3
	if(iy==0) return x+v*(S1+z*r);
  8017a0:	90001526 	beq	r18,zero,8017f8 <__kernel_sinf+0xec>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
  8017a4:	010fc034 	movhi	r4,16128
  8017a8:	a08bc032 	custom	0,r5,r20,r2
  8017ac:	9909c032 	custom	0,r4,r19,r4
  8017b0:	0801b480 	call	801b48 <__subsf3>
  8017b4:	980b883a 	mov	r5,r19
  8017b8:	1449c032 	custom	0,r4,r2,r17
  8017bc:	0801b480 	call	801b48 <__subsf3>
  8017c0:	00cf8af4 	movhi	r3,15915
  8017c4:	18eaaac4 	addi	r3,r3,-21845
  8017c8:	a0e9c032 	custom	0,r20,r20,r3
  8017cc:	150bc072 	custom	1,r5,r2,r20
  8017d0:	8009883a 	mov	r4,r16
  8017d4:	0801b480 	call	801b48 <__subsf3>
}
  8017d8:	dfc00517 	ldw	ra,20(sp)
  8017dc:	dd000417 	ldw	r20,16(sp)
  8017e0:	dcc00317 	ldw	r19,12(sp)
  8017e4:	dc800217 	ldw	r18,8(sp)
  8017e8:	dc400117 	ldw	r17,4(sp)
  8017ec:	dc000017 	ldw	r16,0(sp)
  8017f0:	dec00604 	addi	sp,sp,24
  8017f4:	f800283a 	ret
	if(iy==0) return x+v*(S1+z*r);
  8017f8:	014f8af4 	movhi	r5,15915
  8017fc:	296aaac4 	addi	r5,r5,-21845
  801800:	8889c032 	custom	0,r4,r17,r2
  801804:	0801b480 	call	801b48 <__subsf3>
  801808:	1505c032 	custom	0,r2,r2,r20
  80180c:	1405c072 	custom	1,r2,r2,r16
  801810:	003ff106 	br	8017d8 <__kernel_sinf+0xcc>
	   {if((int)x==0) return x;}		/* generate inexact */
  801814:	8005883a 	mov	r2,r16
  801818:	003fef06 	br	8017d8 <__kernel_sinf+0xcc>

0080181c <floorf>:
#endif
{
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
	ix = (i0&0x7fffffff);
  80181c:	00a00034 	movhi	r2,32768
{
  801820:	defffb04 	addi	sp,sp,-20
	ix = (i0&0x7fffffff);
  801824:	10bfffc4 	addi	r2,r2,-1
{
  801828:	dc400115 	stw	r17,4(sp)
	ix = (i0&0x7fffffff);
  80182c:	1122703a 	and	r17,r2,r4
{
  801830:	dc800215 	stw	r18,8(sp)
	j0 = (ix>>23)-0x7f;
  801834:	8824d5fa 	srli	r18,r17,23
{
  801838:	dc000015 	stw	r16,0(sp)
  80183c:	dfc00415 	stw	ra,16(sp)
	j0 = (ix>>23)-0x7f;
  801840:	94bfe044 	addi	r18,r18,-127
{
  801844:	dcc00315 	stw	r19,12(sp)
	if(j0<23) {
  801848:	908005c8 	cmpgei	r2,r18,23
{
  80184c:	2021883a 	mov	r16,r4
	if(j0<23) {
  801850:	1000251e 	bne	r2,zero,8018e8 <floorf+0xcc>
  801854:	2027883a 	mov	r19,r4
	    if(j0<0) { 	/* raise inexact if x != 0 */
  801858:	90001216 	blt	r18,zero,8018a4 <floorf+0x88>
		    if(i0>=0) {i0=0;} 
		    else if(!FLT_UWORD_IS_ZERO(ix))
			{ i0=0xbf800000;}
		}
	    } else {
		i = (0x007fffff)>>j0;
  80185c:	00802034 	movhi	r2,128
  801860:	10bfffc4 	addi	r2,r2,-1
  801864:	14a3d83a 	sra	r17,r2,r18
		if((i0&i)==0) return x; /* x is integral */
  801868:	8904703a 	and	r2,r17,r4
  80186c:	10001626 	beq	r2,zero,8018c8 <floorf+0xac>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
  801870:	011c52b4 	movhi	r4,29002
  801874:	213cb284 	addi	r4,r4,-3382
  801878:	000b883a 	mov	r5,zero
  80187c:	8109c072 	custom	1,r4,r16,r4
  801880:	0801a900 	call	801a90 <__gesf2>
  801884:	0080100e 	bge	zero,r2,8018c8 <floorf+0xac>
		    if(i0<0) i0 += (0x00800000)>>j0;
  801888:	8000030e 	bge	r16,zero,801898 <floorf+0x7c>
  80188c:	00802034 	movhi	r2,128
  801890:	1485d83a 	sra	r2,r2,r18
  801894:	1427883a 	add	r19,r2,r16
		    i0 &= (~i);
  801898:	0460303a 	nor	r16,zero,r17
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	}
	SET_FLOAT_WORD(x,i0);
  80189c:	84c4703a 	and	r2,r16,r19
  8018a0:	00000a06 	br	8018cc <floorf+0xb0>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
  8018a4:	011c52b4 	movhi	r4,29002
  8018a8:	213cb284 	addi	r4,r4,-3382
  8018ac:	000b883a 	mov	r5,zero
  8018b0:	8109c072 	custom	1,r4,r16,r4
  8018b4:	0801a900 	call	801a90 <__gesf2>
  8018b8:	0080030e 	bge	zero,r2,8018c8 <floorf+0xac>
		    if(i0>=0) {i0=0;} 
  8018bc:	80000e16 	blt	r16,zero,8018f8 <floorf+0xdc>
  8018c0:	0005883a 	mov	r2,zero
  8018c4:	00000106 	br	8018cc <floorf+0xb0>
		if((i0&i)==0) return x; /* x is integral */
  8018c8:	8005883a 	mov	r2,r16
	return x;
}
  8018cc:	dfc00417 	ldw	ra,16(sp)
  8018d0:	dcc00317 	ldw	r19,12(sp)
  8018d4:	dc800217 	ldw	r18,8(sp)
  8018d8:	dc400117 	ldw	r17,4(sp)
  8018dc:	dc000017 	ldw	r16,0(sp)
  8018e0:	dec00504 	addi	sp,sp,20
  8018e4:	f800283a 	ret
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
  8018e8:	009fe034 	movhi	r2,32640
  8018ec:	88bff636 	bltu	r17,r2,8018c8 <floorf+0xac>
  8018f0:	2105c072 	custom	1,r2,r4,r4
  8018f4:	003ff506 	br	8018cc <floorf+0xb0>
		    else if(!FLT_UWORD_IS_ZERO(ix))
  8018f8:	883ff326 	beq	r17,zero,8018c8 <floorf+0xac>
  8018fc:	00afe034 	movhi	r2,49024
  801900:	003ff206 	br	8018cc <floorf+0xb0>

00801904 <scalbnf>:
{
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
	hx = ix&0x7fffffff;
  801904:	00e00034 	movhi	r3,32768
  801908:	18ffffc4 	addi	r3,r3,-1
  80190c:	1906703a 	and	r3,r3,r4
	GET_FLOAT_WORD(ix,x);
  801910:	2005883a 	mov	r2,r4
        k = hx>>23;		/* extract exponent */
	if (FLT_UWORD_IS_ZERO(hx))
  801914:	18001b26 	beq	r3,zero,801984 <scalbnf+0x80>
	    return x;
        if (!FLT_UWORD_IS_FINITE(hx))
  801918:	019fe034 	movhi	r6,32640
  80191c:	1980172e 	bgeu	r3,r6,80197c <scalbnf+0x78>
	    return x+x;		/* NaN or Inf */
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
  801920:	209fe02c 	andhi	r2,r4,32640
  801924:	1000181e 	bne	r2,zero,801988 <scalbnf+0x84>
	    x *= two25;
	    GET_FLOAT_WORD(ix,x);
	    k = ((ix&0x7f800000)>>23) - 25; 
            if (n< -50000) return tiny*x; 	/*underflow*/
  801928:	00bffff4 	movhi	r2,65535
	    x *= two25;
  80192c:	00d30034 	movhi	r3,19456
            if (n< -50000) return tiny*x; 	/*underflow*/
  801930:	108f2c04 	addi	r2,r2,15536
	    x *= two25;
  801934:	20c9c032 	custom	0,r4,r4,r3
            if (n< -50000) return tiny*x; 	/*underflow*/
  801938:	28802c16 	blt	r5,r2,8019ec <scalbnf+0xe8>
	    k = ((ix&0x7f800000)>>23) - 25; 
  80193c:	2007d5fa 	srai	r3,r4,23
	    GET_FLOAT_WORD(ix,x);
  801940:	2005883a 	mov	r2,r4
	    k = ((ix&0x7f800000)>>23) - 25; 
  801944:	18c03fcc 	andi	r3,r3,255
  801948:	18fff9c4 	addi	r3,r3,-25
        }
        k = k+n; 
  80194c:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  801950:	19803fd0 	cmplti	r6,r3,255
  801954:	3000111e 	bne	r6,zero,80199c <scalbnf+0x98>
        if (k > 0) 				/* normal result */
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
        if (k < FLT_SMALLEST_EXP) {
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
		return huge*copysignf(huge,x);	/*overflow*/
  801958:	009c52b4 	movhi	r2,29002
  80195c:	10bcb284 	addi	r2,r2,-3382
  801960:	2000020e 	bge	r4,zero,80196c <scalbnf+0x68>
  801964:	00bc52b4 	movhi	r2,61770
  801968:	10bcb284 	addi	r2,r2,-3382
  80196c:	011c52b4 	movhi	r4,29002
  801970:	213cb284 	addi	r4,r4,-3382
  801974:	1105c032 	custom	0,r2,r2,r4
  801978:	f800283a 	ret
	    return x+x;		/* NaN or Inf */
  80197c:	2105c072 	custom	1,r2,r4,r4
  801980:	f800283a 	ret
	    else return tiny*copysignf(tiny,x);	/*underflow*/
        }
        k += 25;				/* subnormal result */
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
        return x*twom25;
}
  801984:	f800283a 	ret
        k = hx>>23;		/* extract exponent */
  801988:	1806d5fa 	srli	r3,r3,23
	GET_FLOAT_WORD(ix,x);
  80198c:	2005883a 	mov	r2,r4
        k = k+n; 
  801990:	1947883a 	add	r3,r3,r5
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
  801994:	19803fd0 	cmplti	r6,r3,255
  801998:	303fef26 	beq	r6,zero,801958 <scalbnf+0x54>
        if (k > 0) 				/* normal result */
  80199c:	00c00d16 	blt	zero,r3,8019d4 <scalbnf+0xd0>
        if (k < FLT_SMALLEST_EXP) {
  8019a0:	19bffa88 	cmpgei	r6,r3,-22
  8019a4:	3000151e 	bne	r6,zero,8019fc <scalbnf+0xf8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
  8019a8:	00b0d414 	movui	r2,50000
  8019ac:	117fea16 	blt	r2,r5,801958 <scalbnf+0x54>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
  8019b0:	008368b4 	movhi	r2,3490
  8019b4:	10909804 	addi	r2,r2,16992
  8019b8:	2000020e 	bge	r4,zero,8019c4 <scalbnf+0xc0>
  8019bc:	00a368b4 	movhi	r2,36258
  8019c0:	10909804 	addi	r2,r2,16992
  8019c4:	010368b4 	movhi	r4,3490
  8019c8:	21109804 	addi	r4,r4,16992
  8019cc:	1105c032 	custom	0,r2,r2,r4
  8019d0:	f800283a 	ret
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
  8019d4:	180695fa 	slli	r3,r3,23
  8019d8:	01202034 	movhi	r4,32896
  8019dc:	213fffc4 	addi	r4,r4,-1
  8019e0:	1104703a 	and	r2,r2,r4
  8019e4:	10c4b03a 	or	r2,r2,r3
  8019e8:	f800283a 	ret
            if (n< -50000) return tiny*x; 	/*underflow*/
  8019ec:	008368b4 	movhi	r2,3490
  8019f0:	10909804 	addi	r2,r2,16992
  8019f4:	2085c032 	custom	0,r2,r4,r2
  8019f8:	f800283a 	ret
        k += 25;				/* subnormal result */
  8019fc:	18c00644 	addi	r3,r3,25
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
  801a00:	180695fa 	slli	r3,r3,23
  801a04:	01202034 	movhi	r4,32896
  801a08:	213fffc4 	addi	r4,r4,-1
  801a0c:	1104703a 	and	r2,r2,r4
  801a10:	1884b03a 	or	r2,r3,r2
        return x*twom25;
  801a14:	010cc034 	movhi	r4,13056
  801a18:	1105c032 	custom	0,r2,r2,r4
  801a1c:	f800283a 	ret

00801a20 <__eqsf2>:
  801a20:	200cd5fa 	srli	r6,r4,23
  801a24:	2806d5fa 	srli	r3,r5,23
  801a28:	00802034 	movhi	r2,128
  801a2c:	31803fcc 	andi	r6,r6,255
  801a30:	10bfffc4 	addi	r2,r2,-1
  801a34:	31c03fd8 	cmpnei	r7,r6,255
  801a38:	2010d7fa 	srli	r8,r4,31
  801a3c:	2812d7fa 	srli	r9,r5,31
  801a40:	1108703a 	and	r4,r2,r4
  801a44:	18c03fcc 	andi	r3,r3,255
  801a48:	1144703a 	and	r2,r2,r5
  801a4c:	38000626 	beq	r7,zero,801a68 <__eqsf2+0x48>
  801a50:	19403fe0 	cmpeqi	r5,r3,255
  801a54:	2800021e 	bne	r5,zero,801a60 <__eqsf2+0x40>
  801a58:	30c0011e 	bne	r6,r3,801a60 <__eqsf2+0x40>
  801a5c:	20800626 	beq	r4,r2,801a78 <__eqsf2+0x58>
  801a60:	00800044 	movi	r2,1
  801a64:	f800283a 	ret
  801a68:	203ffd1e 	bne	r4,zero,801a60 <__eqsf2+0x40>
  801a6c:	18c03fd8 	cmpnei	r3,r3,255
  801a70:	183ffb1e 	bne	r3,zero,801a60 <__eqsf2+0x40>
  801a74:	103ffa1e 	bne	r2,zero,801a60 <__eqsf2+0x40>
  801a78:	42400326 	beq	r8,r9,801a88 <__eqsf2+0x68>
  801a7c:	303ff81e 	bne	r6,zero,801a60 <__eqsf2+0x40>
  801a80:	2004c03a 	cmpne	r2,r4,zero
  801a84:	f800283a 	ret
  801a88:	0005883a 	mov	r2,zero
  801a8c:	f800283a 	ret

00801a90 <__gesf2>:
  801a90:	200cd5fa 	srli	r6,r4,23
  801a94:	280ed5fa 	srli	r7,r5,23
  801a98:	00c02034 	movhi	r3,128
  801a9c:	31803fcc 	andi	r6,r6,255
  801aa0:	18ffffc4 	addi	r3,r3,-1
  801aa4:	32003fd8 	cmpnei	r8,r6,255
  801aa8:	2012d7fa 	srli	r9,r4,31
  801aac:	2804d7fa 	srli	r2,r5,31
  801ab0:	1908703a 	and	r4,r3,r4
  801ab4:	1946703a 	and	r3,r3,r5
  801ab8:	39403fcc 	andi	r5,r7,255
  801abc:	40000826 	beq	r8,zero,801ae0 <__gesf2+0x50>
  801ac0:	29c03fd8 	cmpnei	r7,r5,255
  801ac4:	38000926 	beq	r7,zero,801aec <__gesf2+0x5c>
  801ac8:	3000121e 	bne	r6,zero,801b14 <__gesf2+0x84>
  801acc:	28000e1e 	bne	r5,zero,801b08 <__gesf2+0x78>
  801ad0:	18000d1e 	bne	r3,zero,801b08 <__gesf2+0x78>
  801ad4:	2000081e 	bne	r4,zero,801af8 <__gesf2+0x68>
  801ad8:	0005883a 	mov	r2,zero
  801adc:	f800283a 	ret
  801ae0:	2000171e 	bne	r4,zero,801b40 <__gesf2+0xb0>
  801ae4:	29c03fe0 	cmpeqi	r7,r5,255
  801ae8:	38000a26 	beq	r7,zero,801b14 <__gesf2+0x84>
  801aec:	1800141e 	bne	r3,zero,801b40 <__gesf2+0xb0>
  801af0:	30000526 	beq	r6,zero,801b08 <__gesf2+0x78>
  801af4:	48800a26 	beq	r9,r2,801b20 <__gesf2+0x90>
  801af8:	00800044 	movi	r2,1
  801afc:	48000426 	beq	r9,zero,801b10 <__gesf2+0x80>
  801b00:	00bfffc4 	movi	r2,-1
  801b04:	f800283a 	ret
  801b08:	203ffa1e 	bne	r4,zero,801af4 <__gesf2+0x64>
  801b0c:	103ffc26 	beq	r2,zero,801b00 <__gesf2+0x70>
  801b10:	f800283a 	ret
  801b14:	283ff71e 	bne	r5,zero,801af4 <__gesf2+0x64>
  801b18:	183ff61e 	bne	r3,zero,801af4 <__gesf2+0x64>
  801b1c:	003ff606 	br	801af8 <__gesf2+0x68>
  801b20:	29800416 	blt	r5,r6,801b34 <__gesf2+0xa4>
  801b24:	317ff916 	blt	r6,r5,801b0c <__gesf2+0x7c>
  801b28:	19000236 	bltu	r3,r4,801b34 <__gesf2+0xa4>
  801b2c:	20ffea2e 	bgeu	r4,r3,801ad8 <__gesf2+0x48>
  801b30:	003ff606 	br	801b0c <__gesf2+0x7c>
  801b34:	103ff21e 	bne	r2,zero,801b00 <__gesf2+0x70>
  801b38:	00800044 	movi	r2,1
  801b3c:	f800283a 	ret
  801b40:	00bfff84 	movi	r2,-2
  801b44:	f800283a 	ret

00801b48 <__subsf3>:
  801b48:	2804d5fa 	srli	r2,r5,23
  801b4c:	2006d5fa 	srli	r3,r4,23
  801b50:	200cd7fa 	srli	r6,r4,31
  801b54:	01c02034 	movhi	r7,128
  801b58:	defffc04 	addi	sp,sp,-16
  801b5c:	39ffffc4 	addi	r7,r7,-1
  801b60:	12803fcc 	andi	r10,r2,255
  801b64:	3908703a 	and	r4,r7,r4
  801b68:	dc800215 	stw	r18,8(sp)
  801b6c:	394e703a 	and	r7,r7,r5
  801b70:	dc400115 	stw	r17,4(sp)
  801b74:	1c803fcc 	andi	r18,r3,255
  801b78:	dfc00315 	stw	ra,12(sp)
  801b7c:	dc000015 	stw	r16,0(sp)
  801b80:	50803fd8 	cmpnei	r2,r10,255
  801b84:	3023883a 	mov	r17,r6
  801b88:	201090fa 	slli	r8,r4,3
  801b8c:	280ad7fa 	srli	r5,r5,31
  801b90:	381290fa 	slli	r9,r7,3
  801b94:	2019883a 	mov	r12,r4
  801b98:	31803fcc 	andi	r6,r6,255
  801b9c:	9297c83a 	sub	r11,r18,r10
  801ba0:	10003f26 	beq	r2,zero,801ca0 <__subsf3+0x158>
  801ba4:	2880005c 	xori	r2,r5,1
  801ba8:	30804526 	beq	r6,r2,801cc0 <__subsf3+0x178>
  801bac:	02c0310e 	bge	zero,r11,801c74 <__subsf3+0x12c>
  801bb0:	50003f1e 	bne	r10,zero,801cb0 <__subsf3+0x168>
  801bb4:	48009526 	beq	r9,zero,801e0c <__subsf3+0x2c4>
  801bb8:	58bfffc4 	addi	r2,r11,-1
  801bbc:	1000de26 	beq	r2,zero,801f38 <__subsf3+0x3f0>
  801bc0:	59003fe0 	cmpeqi	r4,r11,255
  801bc4:	20007d1e 	bne	r4,zero,801dbc <__subsf3+0x274>
  801bc8:	1017883a 	mov	r11,r2
  801bcc:	58800710 	cmplti	r2,r11,28
  801bd0:	10009a1e 	bne	r2,zero,801e3c <__subsf3+0x2f4>
  801bd4:	01000044 	movi	r4,1
  801bd8:	4109c83a 	sub	r4,r8,r4
  801bdc:	2081002c 	andhi	r2,r4,1024
  801be0:	10006a26 	beq	r2,zero,801d8c <__subsf3+0x244>
  801be4:	04010034 	movhi	r16,1024
  801be8:	843fffc4 	addi	r16,r16,-1
  801bec:	2420703a 	and	r16,r4,r16
  801bf0:	8009883a 	mov	r4,r16
  801bf4:	080226c0 	call	80226c <__clzsi2>
  801bf8:	10bffec4 	addi	r2,r2,-5
  801bfc:	8088983a 	sll	r4,r16,r2
  801c00:	1480840e 	bge	r2,r18,801e14 <__subsf3+0x2cc>
  801c04:	00ff0034 	movhi	r3,64512
  801c08:	18ffffc4 	addi	r3,r3,-1
  801c0c:	90a5c83a 	sub	r18,r18,r2
  801c10:	20c8703a 	and	r4,r4,r3
  801c14:	208001cc 	andi	r2,r4,7
  801c18:	10000426 	beq	r2,zero,801c2c <__subsf3+0xe4>
  801c1c:	208003cc 	andi	r2,r4,15
  801c20:	10800120 	cmpeqi	r2,r2,4
  801c24:	1000011e 	bne	r2,zero,801c2c <__subsf3+0xe4>
  801c28:	21000104 	addi	r4,r4,4
  801c2c:	2081002c 	andhi	r2,r4,1024
  801c30:	10005826 	beq	r2,zero,801d94 <__subsf3+0x24c>
  801c34:	90c00044 	addi	r3,r18,1
  801c38:	18803fe0 	cmpeqi	r2,r3,255
  801c3c:	1000481e 	bne	r2,zero,801d60 <__subsf3+0x218>
  801c40:	200891ba 	slli	r4,r4,6
  801c44:	2008d27a 	srli	r4,r4,9
  801c48:	18803fcc 	andi	r2,r3,255
  801c4c:	100495fa 	slli	r2,r2,23
  801c50:	880697fa 	slli	r3,r17,31
  801c54:	1108b03a 	or	r4,r2,r4
  801c58:	20c4b03a 	or	r2,r4,r3
  801c5c:	dfc00317 	ldw	ra,12(sp)
  801c60:	dc800217 	ldw	r18,8(sp)
  801c64:	dc400117 	ldw	r17,4(sp)
  801c68:	dc000017 	ldw	r16,0(sp)
  801c6c:	dec00404 	addi	sp,sp,16
  801c70:	f800283a 	ret
  801c74:	58002726 	beq	r11,zero,801d14 <__subsf3+0x1cc>
  801c78:	5497c83a 	sub	r11,r10,r18
  801c7c:	1023883a 	mov	r17,r2
  801c80:	9000751e 	bne	r18,zero,801e58 <__subsf3+0x310>
  801c84:	40006026 	beq	r8,zero,801e08 <__subsf3+0x2c0>
  801c88:	58bfffc4 	addi	r2,r11,-1
  801c8c:	1000cb26 	beq	r2,zero,801fbc <__subsf3+0x474>
  801c90:	5ac03fe0 	cmpeqi	r11,r11,255
  801c94:	5800481e 	bne	r11,zero,801db8 <__subsf3+0x270>
  801c98:	1017883a 	mov	r11,r2
  801c9c:	00007106 	br	801e64 <__subsf3+0x31c>
  801ca0:	483fc026 	beq	r9,zero,801ba4 <__subsf3+0x5c>
  801ca4:	28803fcc 	andi	r2,r5,255
  801ca8:	31404b26 	beq	r6,r5,801dd8 <__subsf3+0x290>
  801cac:	02fff10e 	bge	zero,r11,801c74 <__subsf3+0x12c>
  801cb0:	90803fe0 	cmpeqi	r2,r18,255
  801cb4:	1000411e 	bne	r2,zero,801dbc <__subsf3+0x274>
  801cb8:	4a410034 	orhi	r9,r9,1024
  801cbc:	003fc306 	br	801bcc <__subsf3+0x84>
  801cc0:	02c0450e 	bge	zero,r11,801dd8 <__subsf3+0x290>
  801cc4:	50001f26 	beq	r10,zero,801d44 <__subsf3+0x1fc>
  801cc8:	90803fe0 	cmpeqi	r2,r18,255
  801ccc:	10003b1e 	bne	r2,zero,801dbc <__subsf3+0x274>
  801cd0:	4a410034 	orhi	r9,r9,1024
  801cd4:	58800710 	cmplti	r2,r11,28
  801cd8:	1000701e 	bne	r2,zero,801e9c <__subsf3+0x354>
  801cdc:	01000044 	movi	r4,1
  801ce0:	2209883a 	add	r4,r4,r8
  801ce4:	2081002c 	andhi	r2,r4,1024
  801ce8:	10002826 	beq	r2,zero,801d8c <__subsf3+0x244>
  801cec:	94800044 	addi	r18,r18,1
  801cf0:	90803fe0 	cmpeqi	r2,r18,255
  801cf4:	10001a1e 	bne	r2,zero,801d60 <__subsf3+0x218>
  801cf8:	2004d07a 	srli	r2,r4,1
  801cfc:	00df8034 	movhi	r3,32256
  801d00:	18ffffc4 	addi	r3,r3,-1
  801d04:	2100004c 	andi	r4,r4,1
  801d08:	10c4703a 	and	r2,r2,r3
  801d0c:	1108b03a 	or	r4,r2,r4
  801d10:	003fc006 	br	801c14 <__subsf3+0xcc>
  801d14:	90c00044 	addi	r3,r18,1
  801d18:	18c03f8c 	andi	r3,r3,254
  801d1c:	1800571e 	bne	r3,zero,801e7c <__subsf3+0x334>
  801d20:	90007a1e 	bne	r18,zero,801f0c <__subsf3+0x3c4>
  801d24:	4000a126 	beq	r8,zero,801fac <__subsf3+0x464>
  801d28:	48008d26 	beq	r9,zero,801f60 <__subsf3+0x418>
  801d2c:	4249c83a 	sub	r4,r8,r9
  801d30:	20c1002c 	andhi	r3,r4,1024
  801d34:	1800a726 	beq	r3,zero,801fd4 <__subsf3+0x48c>
  801d38:	4a09c83a 	sub	r4,r9,r8
  801d3c:	1023883a 	mov	r17,r2
  801d40:	003fb406 	br	801c14 <__subsf3+0xcc>
  801d44:	48003126 	beq	r9,zero,801e0c <__subsf3+0x2c4>
  801d48:	58bfffc4 	addi	r2,r11,-1
  801d4c:	10007526 	beq	r2,zero,801f24 <__subsf3+0x3dc>
  801d50:	5ac03fe0 	cmpeqi	r11,r11,255
  801d54:	5800191e 	bne	r11,zero,801dbc <__subsf3+0x274>
  801d58:	1017883a 	mov	r11,r2
  801d5c:	003fdd06 	br	801cd4 <__subsf3+0x18c>
  801d60:	00ffffc4 	movi	r3,-1
  801d64:	0009883a 	mov	r4,zero
  801d68:	003fb706 	br	801c48 <__subsf3+0x100>
  801d6c:	90c00044 	addi	r3,r18,1
  801d70:	19403f8c 	andi	r5,r3,254
  801d74:	28005026 	beq	r5,zero,801eb8 <__subsf3+0x370>
  801d78:	18803fe0 	cmpeqi	r2,r3,255
  801d7c:	103ff81e 	bne	r2,zero,801d60 <__subsf3+0x218>
  801d80:	4249883a 	add	r4,r8,r9
  801d84:	2008d07a 	srli	r4,r4,1
  801d88:	1825883a 	mov	r18,r3
  801d8c:	208001cc 	andi	r2,r4,7
  801d90:	103fa21e 	bne	r2,zero,801c1c <__subsf3+0xd4>
  801d94:	2018d0fa 	srli	r12,r4,3
  801d98:	90803fe0 	cmpeqi	r2,r18,255
  801d9c:	1000071e 	bne	r2,zero,801dbc <__subsf3+0x274>
  801da0:	01002034 	movhi	r4,128
  801da4:	213fffc4 	addi	r4,r4,-1
  801da8:	6108703a 	and	r4,r12,r4
  801dac:	9007883a 	mov	r3,r18
  801db0:	003fa506 	br	801c48 <__subsf3+0x100>
  801db4:	40006c1e 	bne	r8,zero,801f68 <__subsf3+0x420>
  801db8:	3819883a 	mov	r12,r7
  801dbc:	603fe826 	beq	r12,zero,801d60 <__subsf3+0x218>
  801dc0:	00802034 	movhi	r2,128
  801dc4:	61001034 	orhi	r4,r12,64
  801dc8:	10bfffc4 	addi	r2,r2,-1
  801dcc:	2088703a 	and	r4,r4,r2
  801dd0:	00ffffc4 	movi	r3,-1
  801dd4:	003f9c06 	br	801c48 <__subsf3+0x100>
  801dd8:	583fe426 	beq	r11,zero,801d6c <__subsf3+0x224>
  801ddc:	5497c83a 	sub	r11,r10,r18
  801de0:	90004026 	beq	r18,zero,801ee4 <__subsf3+0x39c>
  801de4:	50803fe0 	cmpeqi	r2,r10,255
  801de8:	103ff31e 	bne	r2,zero,801db8 <__subsf3+0x270>
  801dec:	42010034 	orhi	r8,r8,1024
  801df0:	58800710 	cmplti	r2,r11,28
  801df4:	1000641e 	bne	r2,zero,801f88 <__subsf3+0x440>
  801df8:	01000044 	movi	r4,1
  801dfc:	2249883a 	add	r4,r4,r9
  801e00:	5025883a 	mov	r18,r10
  801e04:	003fb706 	br	801ce4 <__subsf3+0x19c>
  801e08:	3819883a 	mov	r12,r7
  801e0c:	5825883a 	mov	r18,r11
  801e10:	003fe106 	br	801d98 <__subsf3+0x250>
  801e14:	1485c83a 	sub	r2,r2,r18
  801e18:	14000044 	addi	r16,r2,1
  801e1c:	00800804 	movi	r2,32
  801e20:	1405c83a 	sub	r2,r2,r16
  801e24:	2084983a 	sll	r2,r4,r2
  801e28:	2408d83a 	srl	r4,r4,r16
  801e2c:	0025883a 	mov	r18,zero
  801e30:	1004c03a 	cmpne	r2,r2,zero
  801e34:	1108b03a 	or	r4,r2,r4
  801e38:	003f7606 	br	801c14 <__subsf3+0xcc>
  801e3c:	01000804 	movi	r4,32
  801e40:	22c9c83a 	sub	r4,r4,r11
  801e44:	4908983a 	sll	r4,r9,r4
  801e48:	4ad2d83a 	srl	r9,r9,r11
  801e4c:	2008c03a 	cmpne	r4,r4,zero
  801e50:	2248b03a 	or	r4,r4,r9
  801e54:	003f6006 	br	801bd8 <__subsf3+0x90>
  801e58:	50803fe0 	cmpeqi	r2,r10,255
  801e5c:	103fd61e 	bne	r2,zero,801db8 <__subsf3+0x270>
  801e60:	42010034 	orhi	r8,r8,1024
  801e64:	58800710 	cmplti	r2,r11,28
  801e68:	1000361e 	bne	r2,zero,801f44 <__subsf3+0x3fc>
  801e6c:	01000044 	movi	r4,1
  801e70:	4909c83a 	sub	r4,r9,r4
  801e74:	5025883a 	mov	r18,r10
  801e78:	003f5806 	br	801bdc <__subsf3+0x94>
  801e7c:	4261c83a 	sub	r16,r8,r9
  801e80:	80c1002c 	andhi	r3,r16,1024
  801e84:	18001e1e 	bne	r3,zero,801f00 <__subsf3+0x3b8>
  801e88:	803f591e 	bne	r16,zero,801bf0 <__subsf3+0xa8>
  801e8c:	0023883a 	mov	r17,zero
  801e90:	0007883a 	mov	r3,zero
  801e94:	0009883a 	mov	r4,zero
  801e98:	003f6b06 	br	801c48 <__subsf3+0x100>
  801e9c:	01000804 	movi	r4,32
  801ea0:	22c9c83a 	sub	r4,r4,r11
  801ea4:	4908983a 	sll	r4,r9,r4
  801ea8:	4ad2d83a 	srl	r9,r9,r11
  801eac:	2008c03a 	cmpne	r4,r4,zero
  801eb0:	2248b03a 	or	r4,r4,r9
  801eb4:	003f8a06 	br	801ce0 <__subsf3+0x198>
  801eb8:	903fbe1e 	bne	r18,zero,801db4 <__subsf3+0x26c>
  801ebc:	40004226 	beq	r8,zero,801fc8 <__subsf3+0x480>
  801ec0:	48002726 	beq	r9,zero,801f60 <__subsf3+0x418>
  801ec4:	4249883a 	add	r4,r8,r9
  801ec8:	2081002c 	andhi	r2,r4,1024
  801ecc:	103faf26 	beq	r2,zero,801d8c <__subsf3+0x244>
  801ed0:	00bf0034 	movhi	r2,64512
  801ed4:	10bfffc4 	addi	r2,r2,-1
  801ed8:	2088703a 	and	r4,r4,r2
  801edc:	04800044 	movi	r18,1
  801ee0:	003faa06 	br	801d8c <__subsf3+0x244>
  801ee4:	403fc826 	beq	r8,zero,801e08 <__subsf3+0x2c0>
  801ee8:	58bfffc4 	addi	r2,r11,-1
  801eec:	10000d26 	beq	r2,zero,801f24 <__subsf3+0x3dc>
  801ef0:	5ac03fe0 	cmpeqi	r11,r11,255
  801ef4:	583fb01e 	bne	r11,zero,801db8 <__subsf3+0x270>
  801ef8:	1017883a 	mov	r11,r2
  801efc:	003fbc06 	br	801df0 <__subsf3+0x2a8>
  801f00:	4a21c83a 	sub	r16,r9,r8
  801f04:	1023883a 	mov	r17,r2
  801f08:	003f3906 	br	801bf0 <__subsf3+0xa8>
  801f0c:	4000161e 	bne	r8,zero,801f68 <__subsf3+0x420>
  801f10:	48001a1e 	bne	r9,zero,801f7c <__subsf3+0x434>
  801f14:	01002034 	movhi	r4,128
  801f18:	0023883a 	mov	r17,zero
  801f1c:	213fffc4 	addi	r4,r4,-1
  801f20:	003fab06 	br	801dd0 <__subsf3+0x288>
  801f24:	4249883a 	add	r4,r8,r9
  801f28:	2081002c 	andhi	r2,r4,1024
  801f2c:	10001d26 	beq	r2,zero,801fa4 <__subsf3+0x45c>
  801f30:	04800084 	movi	r18,2
  801f34:	003f7006 	br	801cf8 <__subsf3+0x1b0>
  801f38:	4249c83a 	sub	r4,r8,r9
  801f3c:	04800044 	movi	r18,1
  801f40:	003f2606 	br	801bdc <__subsf3+0x94>
  801f44:	00c00804 	movi	r3,32
  801f48:	1ac7c83a 	sub	r3,r3,r11
  801f4c:	40c6983a 	sll	r3,r8,r3
  801f50:	42d0d83a 	srl	r8,r8,r11
  801f54:	1808c03a 	cmpne	r4,r3,zero
  801f58:	2208b03a 	or	r4,r4,r8
  801f5c:	003fc406 	br	801e70 <__subsf3+0x328>
  801f60:	0007883a 	mov	r3,zero
  801f64:	003f3806 	br	801c48 <__subsf3+0x100>
  801f68:	483f9426 	beq	r9,zero,801dbc <__subsf3+0x274>
  801f6c:	2100102c 	andhi	r4,r4,64
  801f70:	203f9226 	beq	r4,zero,801dbc <__subsf3+0x274>
  801f74:	38c0102c 	andhi	r3,r7,64
  801f78:	183f901e 	bne	r3,zero,801dbc <__subsf3+0x274>
  801f7c:	1023883a 	mov	r17,r2
  801f80:	3819883a 	mov	r12,r7
  801f84:	003f8d06 	br	801dbc <__subsf3+0x274>
  801f88:	01000804 	movi	r4,32
  801f8c:	22c9c83a 	sub	r4,r4,r11
  801f90:	4106983a 	sll	r3,r8,r4
  801f94:	42d0d83a 	srl	r8,r8,r11
  801f98:	1808c03a 	cmpne	r4,r3,zero
  801f9c:	2208b03a 	or	r4,r4,r8
  801fa0:	003f9606 	br	801dfc <__subsf3+0x2b4>
  801fa4:	04800044 	movi	r18,1
  801fa8:	003f7806 	br	801d8c <__subsf3+0x244>
  801fac:	483fb726 	beq	r9,zero,801e8c <__subsf3+0x344>
  801fb0:	1023883a 	mov	r17,r2
  801fb4:	3809883a 	mov	r4,r7
  801fb8:	003f2306 	br	801c48 <__subsf3+0x100>
  801fbc:	4a09c83a 	sub	r4,r9,r8
  801fc0:	04800044 	movi	r18,1
  801fc4:	003f0506 	br	801bdc <__subsf3+0x94>
  801fc8:	3809883a 	mov	r4,r7
  801fcc:	0007883a 	mov	r3,zero
  801fd0:	003f1d06 	br	801c48 <__subsf3+0x100>
  801fd4:	203fad26 	beq	r4,zero,801e8c <__subsf3+0x344>
  801fd8:	003f6c06 	br	801d8c <__subsf3+0x244>

00801fdc <__fixsfsi>:
  801fdc:	200ad5fa 	srli	r5,r4,23
  801fe0:	00c02034 	movhi	r3,128
  801fe4:	18ffffc4 	addi	r3,r3,-1
  801fe8:	29403fcc 	andi	r5,r5,255
  801fec:	29801fd0 	cmplti	r6,r5,127
  801ff0:	200ed7fa 	srli	r7,r4,31
  801ff4:	1906703a 	and	r3,r3,r4
  801ff8:	3000061e 	bne	r6,zero,802014 <__fixsfsi+0x38>
  801ffc:	28802790 	cmplti	r2,r5,158
  802000:	1000061e 	bne	r2,zero,80201c <__fixsfsi+0x40>
  802004:	00a00034 	movhi	r2,32768
  802008:	10bfffc4 	addi	r2,r2,-1
  80200c:	3885883a 	add	r2,r7,r2
  802010:	f800283a 	ret
  802014:	0005883a 	mov	r2,zero
  802018:	f800283a 	ret
  80201c:	28802590 	cmplti	r2,r5,150
  802020:	18c02034 	orhi	r3,r3,128
  802024:	1000051e 	bne	r2,zero,80203c <__fixsfsi+0x60>
  802028:	28bfda84 	addi	r2,r5,-150
  80202c:	1884983a 	sll	r2,r3,r2
  802030:	383ff926 	beq	r7,zero,802018 <__fixsfsi+0x3c>
  802034:	0085c83a 	sub	r2,zero,r2
  802038:	f800283a 	ret
  80203c:	00802584 	movi	r2,150
  802040:	1145c83a 	sub	r2,r2,r5
  802044:	1884d83a 	srl	r2,r3,r2
  802048:	003ff906 	br	802030 <__fixsfsi+0x54>

0080204c <__floatsisf>:
  80204c:	defffd04 	addi	sp,sp,-12
  802050:	dfc00215 	stw	ra,8(sp)
  802054:	dc400115 	stw	r17,4(sp)
  802058:	dc000015 	stw	r16,0(sp)
  80205c:	20001226 	beq	r4,zero,8020a8 <__floatsisf+0x5c>
  802060:	2022d7fa 	srli	r17,r4,31
  802064:	2021883a 	mov	r16,r4
  802068:	20003816 	blt	r4,zero,80214c <__floatsisf+0x100>
  80206c:	8009883a 	mov	r4,r16
  802070:	080226c0 	call	80226c <__clzsi2>
  802074:	1009883a 	mov	r4,r2
  802078:	00802784 	movi	r2,158
  80207c:	1105c83a 	sub	r2,r2,r4
  802080:	10c025c8 	cmpgei	r3,r2,151
  802084:	1800151e 	bne	r3,zero,8020dc <__floatsisf+0x90>
  802088:	20c00248 	cmpgei	r3,r4,9
  80208c:	18003126 	beq	r3,zero,802154 <__floatsisf+0x108>
  802090:	213ffe04 	addi	r4,r4,-8
  802094:	8120983a 	sll	r16,r16,r4
  802098:	00c02034 	movhi	r3,128
  80209c:	18ffffc4 	addi	r3,r3,-1
  8020a0:	80e0703a 	and	r16,r16,r3
  8020a4:	00000306 	br	8020b4 <__floatsisf+0x68>
  8020a8:	0023883a 	mov	r17,zero
  8020ac:	0005883a 	mov	r2,zero
  8020b0:	0021883a 	mov	r16,zero
  8020b4:	10803fcc 	andi	r2,r2,255
  8020b8:	100495fa 	slli	r2,r2,23
  8020bc:	882297fa 	slli	r17,r17,31
  8020c0:	1404b03a 	or	r2,r2,r16
  8020c4:	1444b03a 	or	r2,r2,r17
  8020c8:	dfc00217 	ldw	ra,8(sp)
  8020cc:	dc400117 	ldw	r17,4(sp)
  8020d0:	dc000017 	ldw	r16,0(sp)
  8020d4:	dec00304 	addi	sp,sp,12
  8020d8:	f800283a 	ret
  8020dc:	10c02690 	cmplti	r3,r2,154
  8020e0:	1800071e 	bne	r3,zero,802100 <__floatsisf+0xb4>
  8020e4:	20c006c4 	addi	r3,r4,27
  8020e8:	01400144 	movi	r5,5
  8020ec:	80c6983a 	sll	r3,r16,r3
  8020f0:	290bc83a 	sub	r5,r5,r4
  8020f4:	814ad83a 	srl	r5,r16,r5
  8020f8:	1806c03a 	cmpne	r3,r3,zero
  8020fc:	28e0b03a 	or	r16,r5,r3
  802100:	20c00188 	cmpgei	r3,r4,6
  802104:	1800171e 	bne	r3,zero,802164 <__floatsisf+0x118>
  802108:	00ff0034 	movhi	r3,64512
  80210c:	18ffffc4 	addi	r3,r3,-1
  802110:	818001cc 	andi	r6,r16,7
  802114:	80ca703a 	and	r5,r16,r3
  802118:	30000926 	beq	r6,zero,802140 <__floatsisf+0xf4>
  80211c:	818003cc 	andi	r6,r16,15
  802120:	31800120 	cmpeqi	r6,r6,4
  802124:	3000061e 	bne	r6,zero,802140 <__floatsisf+0xf4>
  802128:	29400104 	addi	r5,r5,4
  80212c:	2981002c 	andhi	r6,r5,1024
  802130:	30000326 	beq	r6,zero,802140 <__floatsisf+0xf4>
  802134:	28ca703a 	and	r5,r5,r3
  802138:	00c027c4 	movi	r3,159
  80213c:	1905c83a 	sub	r2,r3,r4
  802140:	282091ba 	slli	r16,r5,6
  802144:	8020d27a 	srli	r16,r16,9
  802148:	003fda06 	br	8020b4 <__floatsisf+0x68>
  80214c:	0121c83a 	sub	r16,zero,r4
  802150:	003fc606 	br	80206c <__floatsisf+0x20>
  802154:	01002034 	movhi	r4,128
  802158:	213fffc4 	addi	r4,r4,-1
  80215c:	8120703a 	and	r16,r16,r4
  802160:	003fd406 	br	8020b4 <__floatsisf+0x68>
  802164:	20fffec4 	addi	r3,r4,-5
  802168:	80e0983a 	sll	r16,r16,r3
  80216c:	003fe606 	br	802108 <__floatsisf+0xbc>

00802170 <__extendsfdf2>:
  802170:	200ad5fa 	srli	r5,r4,23
  802174:	defffd04 	addi	sp,sp,-12
  802178:	dc000015 	stw	r16,0(sp)
  80217c:	29403fcc 	andi	r5,r5,255
  802180:	04002034 	movhi	r16,128
  802184:	28800044 	addi	r2,r5,1
  802188:	dc400115 	stw	r17,4(sp)
  80218c:	843fffc4 	addi	r16,r16,-1
  802190:	dfc00215 	stw	ra,8(sp)
  802194:	10803f8c 	andi	r2,r2,254
  802198:	2022d7fa 	srli	r17,r4,31
  80219c:	8120703a 	and	r16,r16,r4
  8021a0:	10000d26 	beq	r2,zero,8021d8 <__extendsfdf2+0x68>
  8021a4:	8008d0fa 	srli	r4,r16,3
  8021a8:	8020977a 	slli	r16,r16,29
  8021ac:	28c0e004 	addi	r3,r5,896
  8021b0:	180a953a 	slli	r5,r3,20
  8021b4:	880697fa 	slli	r3,r17,31
  8021b8:	8005883a 	mov	r2,r16
  8021bc:	290ab03a 	or	r5,r5,r4
  8021c0:	28c6b03a 	or	r3,r5,r3
  8021c4:	dfc00217 	ldw	ra,8(sp)
  8021c8:	dc400117 	ldw	r17,4(sp)
  8021cc:	dc000017 	ldw	r16,0(sp)
  8021d0:	dec00304 	addi	sp,sp,12
  8021d4:	f800283a 	ret
  8021d8:	2800111e 	bne	r5,zero,802220 <__extendsfdf2+0xb0>
  8021dc:	80001926 	beq	r16,zero,802244 <__extendsfdf2+0xd4>
  8021e0:	8009883a 	mov	r4,r16
  8021e4:	080226c0 	call	80226c <__clzsi2>
  8021e8:	10c002c8 	cmpgei	r3,r2,11
  8021ec:	18001b1e 	bne	r3,zero,80225c <__extendsfdf2+0xec>
  8021f0:	010002c4 	movi	r4,11
  8021f4:	2089c83a 	sub	r4,r4,r2
  8021f8:	10c00544 	addi	r3,r2,21
  8021fc:	810ad83a 	srl	r5,r16,r4
  802200:	80e0983a 	sll	r16,r16,r3
  802204:	01000434 	movhi	r4,16
  802208:	00c0e244 	movi	r3,905
  80220c:	213fffc4 	addi	r4,r4,-1
  802210:	1887c83a 	sub	r3,r3,r2
  802214:	2908703a 	and	r4,r5,r4
  802218:	18c1ffcc 	andi	r3,r3,2047
  80221c:	003fe406 	br	8021b0 <__extendsfdf2+0x40>
  802220:	80000b26 	beq	r16,zero,802250 <__extendsfdf2+0xe0>
  802224:	800ad0fa 	srli	r5,r16,3
  802228:	00800434 	movhi	r2,16
  80222c:	10bfffc4 	addi	r2,r2,-1
  802230:	29000234 	orhi	r4,r5,8
  802234:	8020977a 	slli	r16,r16,29
  802238:	2088703a 	and	r4,r4,r2
  80223c:	00c1ffc4 	movi	r3,2047
  802240:	003fdb06 	br	8021b0 <__extendsfdf2+0x40>
  802244:	0007883a 	mov	r3,zero
  802248:	0009883a 	mov	r4,zero
  80224c:	003fd806 	br	8021b0 <__extendsfdf2+0x40>
  802250:	00c1ffc4 	movi	r3,2047
  802254:	0009883a 	mov	r4,zero
  802258:	003fd506 	br	8021b0 <__extendsfdf2+0x40>
  80225c:	113ffd44 	addi	r4,r2,-11
  802260:	810a983a 	sll	r5,r16,r4
  802264:	0021883a 	mov	r16,zero
  802268:	003fe606 	br	802204 <__extendsfdf2+0x94>

0080226c <__clzsi2>:
  80226c:	00bfffd4 	movui	r2,65535
  802270:	11000436 	bltu	r2,r4,802284 <__clzsi2+0x18>
  802274:	20804030 	cmpltui	r2,r4,256
  802278:	10000e26 	beq	r2,zero,8022b4 <__clzsi2+0x48>
  80227c:	01400804 	movi	r5,32
  802280:	00000406 	br	802294 <__clzsi2+0x28>
  802284:	00804034 	movhi	r2,256
  802288:	20800736 	bltu	r4,r2,8022a8 <__clzsi2+0x3c>
  80228c:	2008d63a 	srli	r4,r4,24
  802290:	01400204 	movi	r5,8
  802294:	00c02074 	movhi	r3,129
  802298:	20c7883a 	add	r3,r4,r3
  80229c:	18886b03 	ldbu	r2,8620(r3)
  8022a0:	2885c83a 	sub	r2,r5,r2
  8022a4:	f800283a 	ret
  8022a8:	2008d43a 	srli	r4,r4,16
  8022ac:	01400404 	movi	r5,16
  8022b0:	003ff806 	br	802294 <__clzsi2+0x28>
  8022b4:	2008d23a 	srli	r4,r4,8
  8022b8:	01400604 	movi	r5,24
  8022bc:	003ff506 	br	802294 <__clzsi2+0x28>

008022c0 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
  8022c0:	defffd04 	addi	sp,sp,-12
  8022c4:	2805883a 	mov	r2,r5
  8022c8:	dfc00015 	stw	ra,0(sp)
  8022cc:	d9800115 	stw	r6,4(sp)
  8022d0:	d9c00215 	stw	r7,8(sp)
  va_start (ap, fmt);
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
  8022d4:	21400217 	ldw	r5,8(r4)
  8022d8:	d9c00104 	addi	r7,sp,4
  8022dc:	100d883a 	mov	r6,r2
  8022e0:	08024940 	call	802494 <___vfprintf_internal_r>
  va_end (ap);
  return ret;
}
  8022e4:	dfc00017 	ldw	ra,0(sp)
  8022e8:	dec00304 	addi	sp,sp,12
  8022ec:	f800283a 	ret

008022f0 <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
  8022f0:	defffc04 	addi	sp,sp,-16
  8022f4:	dfc00015 	stw	ra,0(sp)
  8022f8:	d9400115 	stw	r5,4(sp)
  8022fc:	d9800215 	stw	r6,8(sp)
  802300:	d9c00315 	stw	r7,12(sp)
  va_start (ap, fmt);
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
  802304:	d0a00917 	ldw	r2,-32732(gp)
  802308:	200b883a 	mov	r5,r4
  80230c:	d9800104 	addi	r6,sp,4
  802310:	11000217 	ldw	r4,8(r2)
  802314:	08045980 	call	804598 <__vfprintf_internal>
  va_end (ap);
  return ret;
}
  802318:	dfc00017 	ldw	ra,0(sp)
  80231c:	dec00404 	addi	sp,sp,16
  802320:	f800283a 	ret

00802324 <_puts_r>:
 */

int
_puts_r (struct _reent *ptr,
       const char * s)
{
  802324:	defff504 	addi	sp,sp,-44
  802328:	dc000815 	stw	r16,32(sp)
  80232c:	2021883a 	mov	r16,r4
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
  802330:	2809883a 	mov	r4,r5
{
  802334:	dc400915 	stw	r17,36(sp)
  802338:	dfc00a15 	stw	ra,40(sp)
  80233c:	2823883a 	mov	r17,r5
  size_t c = strlen (s);
  802340:	08023fc0 	call	8023fc <strlen>

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  802344:	11000044 	addi	r4,r2,1
  iov[0].iov_len = c;
  802348:	d8800515 	stw	r2,20(sp)
  iov[1].iov_len = 1;
  80234c:	00800044 	movi	r2,1
  iov[1].iov_base = "\n";
  802350:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  802354:	d8800715 	stw	r2,28(sp)
  uio.uio_iov = &iov[0];
  802358:	d8800404 	addi	r2,sp,16
  iov[1].iov_base = "\n";
  80235c:	18c8ab04 	addi	r3,r3,8876
  uio.uio_iov = &iov[0];
  802360:	d8800115 	stw	r2,4(sp)
  uio.uio_iovcnt = 2;
  802364:	00800084 	movi	r2,2
  iov[0].iov_base = s;
  802368:	dc400415 	stw	r17,16(sp)
  iov[1].iov_base = "\n";
  80236c:	d8c00615 	stw	r3,24(sp)
  uio.uio_resid = c + 1;
  802370:	d9000315 	stw	r4,12(sp)
  uio.uio_iovcnt = 2;
  802374:	d8800215 	stw	r2,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  802378:	81400217 	ldw	r5,8(r16)
  CHECK_INIT (ptr, fp);
  80237c:	80000226 	beq	r16,zero,802388 <_puts_r+0x64>
  802380:	80800e17 	ldw	r2,56(r16)
  802384:	10001326 	beq	r2,zero,8023d4 <_puts_r+0xb0>
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  802388:	2880030b 	ldhu	r2,12(r5)
  80238c:	10c8000c 	andi	r3,r2,8192
  802390:	1800061e 	bne	r3,zero,8023ac <_puts_r+0x88>
  _newlib_flockfile_start (fp);
  802394:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  802398:	0137ffc4 	movi	r4,-8193
  80239c:	10880014 	ori	r2,r2,8192
  8023a0:	1906703a 	and	r3,r3,r4
  8023a4:	2880030d 	sth	r2,12(r5)
  8023a8:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  8023ac:	d9800104 	addi	r6,sp,4
  8023b0:	8009883a 	mov	r4,r16
  8023b4:	0806be40 	call	806be4 <__sfvwrite_r>
  8023b8:	10000b1e 	bne	r2,zero,8023e8 <_puts_r+0xc4>
  8023bc:	00800284 	movi	r2,10

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
  8023c0:	dfc00a17 	ldw	ra,40(sp)
  8023c4:	dc400917 	ldw	r17,36(sp)
  8023c8:	dc000817 	ldw	r16,32(sp)
  8023cc:	dec00b04 	addi	sp,sp,44
  8023d0:	f800283a 	ret
  CHECK_INIT (ptr, fp);
  8023d4:	8009883a 	mov	r4,r16
  8023d8:	d9400015 	stw	r5,0(sp)
  8023dc:	08067980 	call	806798 <__sinit>
  8023e0:	d9400017 	ldw	r5,0(sp)
  8023e4:	003fe806 	br	802388 <_puts_r+0x64>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  8023e8:	00bfffc4 	movi	r2,-1
  return result;
  8023ec:	003ff406 	br	8023c0 <_puts_r+0x9c>

008023f0 <puts>:

#ifndef _REENT_ONLY

int
puts (char const * s)
{
  8023f0:	200b883a 	mov	r5,r4
  return _puts_r (_REENT, s);
  8023f4:	d1200917 	ldw	r4,-32732(gp)
  8023f8:	08023241 	jmpi	802324 <_puts_r>

008023fc <strlen>:

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
  8023fc:	208000cc 	andi	r2,r4,3
  802400:	10000926 	beq	r2,zero,802428 <strlen+0x2c>
  802404:	2005883a 	mov	r2,r4
  802408:	00000306 	br	802418 <strlen+0x1c>
    {
      if (!*str)
	return str - start;
      str++;
  80240c:	10800044 	addi	r2,r2,1
  while (UNALIGNED (str))
  802410:	10c000cc 	andi	r3,r2,3
  802414:	18000526 	beq	r3,zero,80242c <strlen+0x30>
      if (!*str)
  802418:	10c00007 	ldb	r3,0(r2)
  80241c:	183ffb1e 	bne	r3,zero,80240c <strlen+0x10>

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
    str++;
  return str - start;
  802420:	1105c83a 	sub	r2,r2,r4
}
  802424:	f800283a 	ret
  while (UNALIGNED (str))
  802428:	2005883a 	mov	r2,r4
  while (!DETECTNULL (*aligned_addr))
  80242c:	11400017 	ldw	r5,0(r2)
  802430:	01ffbff4 	movhi	r7,65279
  802434:	39ffbfc4 	addi	r7,r7,-257
  802438:	29c7883a 	add	r3,r5,r7
  80243c:	01a02074 	movhi	r6,32897
  802440:	014a303a 	nor	r5,zero,r5
  802444:	1946703a 	and	r3,r3,r5
  802448:	31a02004 	addi	r6,r6,-32640
  80244c:	1986703a 	and	r3,r3,r6
  802450:	1800071e 	bne	r3,zero,802470 <strlen+0x74>
  802454:	11400117 	ldw	r5,4(r2)
    aligned_addr++;
  802458:	10800104 	addi	r2,r2,4
  while (!DETECTNULL (*aligned_addr))
  80245c:	29c7883a 	add	r3,r5,r7
  802460:	014a303a 	nor	r5,zero,r5
  802464:	1946703a 	and	r3,r3,r5
  802468:	1986703a 	and	r3,r3,r6
  80246c:	183ff926 	beq	r3,zero,802454 <strlen+0x58>
  while (*str)
  802470:	10c00007 	ldb	r3,0(r2)
  802474:	183fea26 	beq	r3,zero,802420 <strlen+0x24>
  802478:	10c00047 	ldb	r3,1(r2)
    str++;
  80247c:	10800044 	addi	r2,r2,1
  while (*str)
  802480:	183fe726 	beq	r3,zero,802420 <strlen+0x24>
  802484:	10c00047 	ldb	r3,1(r2)
    str++;
  802488:	10800044 	addi	r2,r2,1
  while (*str)
  80248c:	183ffa1e 	bne	r3,zero,802478 <strlen+0x7c>
  802490:	003fe306 	br	802420 <strlen+0x24>

00802494 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
  802494:	deffbf04 	addi	sp,sp,-260
  802498:	dfc04015 	stw	ra,256(sp)
  80249c:	dd803d15 	stw	r22,244(sp)
  8024a0:	dcc03a15 	stw	r19,232(sp)
  8024a4:	dc803915 	stw	r18,228(sp)
  8024a8:	2027883a 	mov	r19,r4
  8024ac:	2825883a 	mov	r18,r5
  8024b0:	302d883a 	mov	r22,r6
  8024b4:	d9c00615 	stw	r7,24(sp)
  8024b8:	df003f15 	stw	fp,252(sp)
  8024bc:	ddc03e15 	stw	r23,248(sp)
  8024c0:	dd403c15 	stw	r21,240(sp)
  8024c4:	dd003b15 	stw	r20,236(sp)
  8024c8:	dc403815 	stw	r17,224(sp)
  8024cc:	dc003715 	stw	r16,220(sp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
  8024d0:	08071f40 	call	8071f4 <_localeconv_r>
  8024d4:	10800017 	ldw	r2,0(r2)
	size_t decp_len = strlen (decimal_point);
  8024d8:	1009883a 	mov	r4,r2
	char *decimal_point = _localeconv_r (data)->decimal_point;
  8024dc:	d8800d15 	stw	r2,52(sp)
	size_t decp_len = strlen (decimal_point);
  8024e0:	08023fc0 	call	8023fc <strlen>
  8024e4:	d8800b15 	stw	r2,44(sp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
  8024e8:	98000226 	beq	r19,zero,8024f4 <___vfprintf_internal_r+0x60>
  8024ec:	98800e17 	ldw	r2,56(r19)
  8024f0:	1001e026 	beq	r2,zero,802c74 <___vfprintf_internal_r+0x7e0>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
  8024f4:	9080030b 	ldhu	r2,12(r18)
  8024f8:	10c8000c 	andi	r3,r2,8192
  8024fc:	1800061e 	bne	r3,zero,802518 <___vfprintf_internal_r+0x84>
	_newlib_flockfile_start (fp);
  802500:	90c01917 	ldw	r3,100(r18)
	ORIENT(fp, -1);
  802504:	0137ffc4 	movi	r4,-8193
  802508:	10880014 	ori	r2,r2,8192
  80250c:	1906703a 	and	r3,r3,r4
  802510:	9080030d 	sth	r2,12(r18)
  802514:	90c01915 	stw	r3,100(r18)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
  802518:	10c0020c 	andi	r3,r2,8
  80251c:	1800fc26 	beq	r3,zero,802910 <___vfprintf_internal_r+0x47c>
  802520:	90c00417 	ldw	r3,16(r18)
  802524:	1800fa26 	beq	r3,zero,802910 <___vfprintf_internal_r+0x47c>
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  802528:	1080068c 	andi	r2,r2,26
  80252c:	10800298 	cmpnei	r2,r2,10
  802530:	1000ff26 	beq	r2,zero,802930 <___vfprintf_internal_r+0x49c>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
  802534:	d8802704 	addi	r2,sp,156
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
  802538:	b02f883a 	mov	r23,r22
	uio.uio_iov = iovp = iov;
  80253c:	d8801a15 	stw	r2,104(sp)
	uio.uio_resid = 0;
  802540:	d8001c15 	stw	zero,112(sp)
	uio.uio_iovcnt = 0;
  802544:	d8001b15 	stw	zero,108(sp)
	int ndig = 0;		/* actual number of digits returned by cvt */
  802548:	d8000815 	stw	zero,32(sp)
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
  80254c:	d8000915 	stw	zero,36(sp)
  802550:	d8000a15 	stw	zero,40(sp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
  802554:	d8000c15 	stw	zero,48(sp)
	int expsize = 0;	/* character count for expstr */
  802558:	d8001015 	stw	zero,64(sp)
	ret = 0;
  80255c:	d8000515 	stw	zero,20(sp)
			PRINT (cp, m);
  802560:	102d883a 	mov	r22,r2
                while (*fmt != '\0' && *fmt != '%')
  802564:	b8800007 	ldb	r2,0(r23)
  802568:	1000d726 	beq	r2,zero,8028c8 <___vfprintf_internal_r+0x434>
  80256c:	b821883a 	mov	r16,r23
  802570:	00000306 	br	802580 <___vfprintf_internal_r+0xec>
  802574:	80800047 	ldb	r2,1(r16)
                    fmt += 1;
  802578:	84000044 	addi	r16,r16,1
                while (*fmt != '\0' && *fmt != '%')
  80257c:	10012226 	beq	r2,zero,802a08 <___vfprintf_internal_r+0x574>
  802580:	10800958 	cmpnei	r2,r2,37
  802584:	103ffb1e 	bne	r2,zero,802574 <___vfprintf_internal_r+0xe0>
		if ((m = fmt - cp) != 0) {
  802588:	85e3c83a 	sub	r17,r16,r23
  80258c:	85c1201e 	bne	r16,r23,802a10 <___vfprintf_internal_r+0x57c>
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
  802590:	80800003 	ldbu	r2,0(r16)
  802594:	10803fcc 	andi	r2,r2,255
  802598:	1080201c 	xori	r2,r2,128
  80259c:	10bfe004 	addi	r2,r2,-128
  8025a0:	1000c926 	beq	r2,zero,8028c8 <___vfprintf_internal_r+0x434>
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
  8025a4:	82c00047 	ldb	r11,1(r16)
  8025a8:	85c00044 	addi	r23,r16,1

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
  8025ac:	d8001345 	stb	zero,77(sp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
  8025b0:	0009883a 	mov	r4,zero
  8025b4:	000b883a 	mov	r5,zero
		prec = -1;
  8025b8:	023fffc4 	movi	r8,-1
		width = 0;
  8025bc:	0021883a 	mov	r16,zero
		flags = 0;
  8025c0:	0019883a 	mov	r12,zero
rflag:		ch = *fmt++;
  8025c4:	bdc00044 	addi	r23,r23,1
  8025c8:	5839883a 	mov	fp,r11
reswitch:	switch (ch) {
  8025cc:	e0bff804 	addi	r2,fp,-32
  8025d0:	10c01668 	cmpgeui	r3,r2,89
  8025d4:	18006c1e 	bne	r3,zero,802788 <___vfprintf_internal_r+0x2f4>
  8025d8:	100490ba 	slli	r2,r2,2
  8025dc:	00c02034 	movhi	r3,128
  8025e0:	10c7883a 	add	r3,r2,r3
  8025e4:	18897b17 	ldw	r2,9708(r3)
  8025e8:	1000683a 	jmp	r2
  8025ec:	00802f3c 	xorhi	r2,zero,188
  8025f0:	00802788 	cmpgei	r2,zero,158
  8025f4:	00802788 	cmpgei	r2,zero,158
  8025f8:	00802f30 	cmpltui	r2,zero,188
  8025fc:	00802788 	cmpgei	r2,zero,158
  802600:	00802788 	cmpgei	r2,zero,158
  802604:	00802788 	cmpgei	r2,zero,158
  802608:	00802788 	cmpgei	r2,zero,158
  80260c:	00802788 	cmpgei	r2,zero,158
  802610:	00802788 	cmpgei	r2,zero,158
  802614:	00802f08 	cmpgei	r2,zero,188
  802618:	00802ef8 	rdprs	r2,zero,187
  80261c:	00802788 	cmpgei	r2,zero,158
  802620:	00802ee0 	cmpeqi	r2,zero,187
  802624:	00802e94 	movui	r2,186
  802628:	00802788 	cmpgei	r2,zero,158
  80262c:	00802e88 	cmpgei	r2,zero,186
  802630:	00802750 	cmplti	r2,zero,157
  802634:	00802750 	cmplti	r2,zero,157
  802638:	00802750 	cmplti	r2,zero,157
  80263c:	00802750 	cmplti	r2,zero,157
  802640:	00802750 	cmplti	r2,zero,157
  802644:	00802750 	cmplti	r2,zero,157
  802648:	00802750 	cmplti	r2,zero,157
  80264c:	00802750 	cmplti	r2,zero,157
  802650:	00802750 	cmplti	r2,zero,157
  802654:	00802788 	cmpgei	r2,zero,158
  802658:	00802788 	cmpgei	r2,zero,158
  80265c:	00802788 	cmpgei	r2,zero,158
  802660:	00802788 	cmpgei	r2,zero,158
  802664:	00802788 	cmpgei	r2,zero,158
  802668:	00802788 	cmpgei	r2,zero,158
  80266c:	00802788 	cmpgei	r2,zero,158
  802670:	00802788 	cmpgei	r2,zero,158
  802674:	00802788 	cmpgei	r2,zero,158
  802678:	00802788 	cmpgei	r2,zero,158
  80267c:	00802da0 	cmpeqi	r2,zero,182
  802680:	00802a6c 	andhi	r2,zero,169
  802684:	00802788 	cmpgei	r2,zero,158
  802688:	00802a6c 	andhi	r2,zero,169
  80268c:	00802788 	cmpgei	r2,zero,158
  802690:	00802788 	cmpgei	r2,zero,158
  802694:	00802788 	cmpgei	r2,zero,158
  802698:	00802788 	cmpgei	r2,zero,158
  80269c:	00802d94 	movui	r2,182
  8026a0:	00802788 	cmpgei	r2,zero,158
  8026a4:	00802788 	cmpgei	r2,zero,158
  8026a8:	008029a0 	cmpeqi	r2,zero,166
  8026ac:	00802788 	cmpgei	r2,zero,158
  8026b0:	00802788 	cmpgei	r2,zero,158
  8026b4:	00802788 	cmpgei	r2,zero,158
  8026b8:	00802788 	cmpgei	r2,zero,158
  8026bc:	00802788 	cmpgei	r2,zero,158
  8026c0:	00802978 	rdprs	r2,zero,165
  8026c4:	00802788 	cmpgei	r2,zero,158
  8026c8:	00802788 	cmpgei	r2,zero,158
  8026cc:	00802d4c 	andi	r2,zero,181
  8026d0:	00802788 	cmpgei	r2,zero,158
  8026d4:	00802788 	cmpgei	r2,zero,158
  8026d8:	00802788 	cmpgei	r2,zero,158
  8026dc:	00802788 	cmpgei	r2,zero,158
  8026e0:	00802788 	cmpgei	r2,zero,158
  8026e4:	00802788 	cmpgei	r2,zero,158
  8026e8:	00802788 	cmpgei	r2,zero,158
  8026ec:	00802788 	cmpgei	r2,zero,158
  8026f0:	00802788 	cmpgei	r2,zero,158
  8026f4:	00802788 	cmpgei	r2,zero,158
  8026f8:	00802d24 	muli	r2,zero,180
  8026fc:	00802c80 	call	802c8 <__alt_mem_sdram-0x77fd38>
  802700:	00802a6c 	andhi	r2,zero,169
  802704:	00802a6c 	andhi	r2,zero,169
  802708:	00802a6c 	andhi	r2,zero,169
  80270c:	00802d18 	cmpnei	r2,zero,180
  802710:	00802c80 	call	802c8 <__alt_mem_sdram-0x77fd38>
  802714:	00802788 	cmpgei	r2,zero,158
  802718:	00802788 	cmpgei	r2,zero,158
  80271c:	00803090 	cmplti	r2,zero,194
  802720:	00802788 	cmpgei	r2,zero,158
  802724:	00803054 	movui	r2,193
  802728:	008029a4 	muli	r2,zero,166
  80272c:	00803014 	movui	r2,192
  802730:	00803008 	cmpgei	r2,zero,192
  802734:	00802788 	cmpgei	r2,zero,158
  802738:	00802fb0 	cmpltui	r2,zero,190
  80273c:	00802788 	cmpgei	r2,zero,158
  802740:	0080297c 	xorhi	r2,zero,165
  802744:	00802788 	cmpgei	r2,zero,158
  802748:	00802788 	cmpgei	r2,zero,158
  80274c:	00802f68 	cmpgeui	r2,zero,189
#endif
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
  802750:	0021883a 	mov	r16,zero
  802754:	e0fff404 	addi	r3,fp,-48
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
  802758:	800490ba 	slli	r2,r16,2
				ch = *fmt++;
  80275c:	bf000007 	ldb	fp,0(r23)
  802760:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  802764:	1421883a 	add	r16,r2,r16
  802768:	8421883a 	add	r16,r16,r16
  80276c:	1c21883a 	add	r16,r3,r16
			} while (is_digit (ch));
  802770:	e0fff404 	addi	r3,fp,-48
  802774:	188002b0 	cmpltui	r2,r3,10
  802778:	103ff71e 	bne	r2,zero,802758 <___vfprintf_internal_r+0x2c4>
reswitch:	switch (ch) {
  80277c:	e0bff804 	addi	r2,fp,-32
  802780:	10c01668 	cmpgeui	r3,r2,89
  802784:	183f9426 	beq	r3,zero,8025d8 <___vfprintf_internal_r+0x144>
  802788:	21003fcc 	andi	r4,r4,255
  80278c:	2006871e 	bne	r4,zero,8041ac <___vfprintf_internal_r+0x1d18>

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
  802790:	e0004d26 	beq	fp,zero,8028c8 <___vfprintf_internal_r+0x434>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
  802794:	df001d05 	stb	fp,116(sp)
			size = 1;
			sign = '\0';
  802798:	d8001345 	stb	zero,77(sp)
			break;
  80279c:	05000044 	movi	r20,1
			size = 1;
  8027a0:	05400044 	movi	r21,1
			cp = buf;
  8027a4:	dc401d04 	addi	r17,sp,116
		dprec = 0;
  8027a8:	db000415 	stw	r12,16(sp)
  8027ac:	0011883a 	mov	r8,zero
  8027b0:	d8000715 	stw	zero,28(sp)
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
  8027b4:	d8800417 	ldw	r2,16(sp)
  8027b8:	1380008c 	andi	r14,r2,2
  8027bc:	70000126 	beq	r14,zero,8027c4 <___vfprintf_internal_r+0x330>
			realsz+= 2;
  8027c0:	a5000084 	addi	r20,r20,2

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8027c4:	d8800417 	ldw	r2,16(sp)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
  8027c8:	d8c01c17 	ldw	r3,112(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  8027cc:	1340210c 	andi	r13,r2,132
  8027d0:	6800021e 	bne	r13,zero,8027dc <___vfprintf_internal_r+0x348>
			PAD (width - realsz, blanks);
  8027d4:	850fc83a 	sub	r7,r16,r20
  8027d8:	01c34516 	blt	zero,r7,8034f0 <___vfprintf_internal_r+0x105c>
		if (sign)
  8027dc:	d8801347 	ldb	r2,77(sp)
  8027e0:	10000c26 	beq	r2,zero,802814 <___vfprintf_internal_r+0x380>
			PRINT (&sign, 1);
  8027e4:	d8801b17 	ldw	r2,108(sp)
  8027e8:	d9001344 	addi	r4,sp,77
  8027ec:	18c00044 	addi	r3,r3,1
  8027f0:	10800044 	addi	r2,r2,1
  8027f4:	b1000015 	stw	r4,0(r22)
  8027f8:	01000044 	movi	r4,1
  8027fc:	d8801b15 	stw	r2,108(sp)
  802800:	b1000115 	stw	r4,4(r22)
  802804:	d8c01c15 	stw	r3,112(sp)
  802808:	10800208 	cmpgei	r2,r2,8
  80280c:	1003791e 	bne	r2,zero,8035f4 <___vfprintf_internal_r+0x1160>
  802810:	b5800204 	addi	r22,r22,8
		if (flags & HEXPREFIX)
  802814:	70000c26 	beq	r14,zero,802848 <___vfprintf_internal_r+0x3b4>
			PRINT (ox, 2);
  802818:	d8801b17 	ldw	r2,108(sp)
  80281c:	d9001384 	addi	r4,sp,78
  802820:	18c00084 	addi	r3,r3,2
  802824:	10800044 	addi	r2,r2,1
  802828:	b1000015 	stw	r4,0(r22)
  80282c:	01000084 	movi	r4,2
  802830:	d8801b15 	stw	r2,108(sp)
  802834:	b1000115 	stw	r4,4(r22)
  802838:	d8c01c15 	stw	r3,112(sp)
  80283c:	10800208 	cmpgei	r2,r2,8
  802840:	10037a1e 	bne	r2,zero,80362c <___vfprintf_internal_r+0x1198>
  802844:	b5800204 	addi	r22,r22,8

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  802848:	6b402018 	cmpnei	r13,r13,128
  80284c:	68025b26 	beq	r13,zero,8031bc <___vfprintf_internal_r+0xd28>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
  802850:	4551c83a 	sub	r8,r8,r21
  802854:	02029316 	blt	zero,r8,8032a4 <___vfprintf_internal_r+0xe10>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
  802858:	d8800417 	ldw	r2,16(sp)
  80285c:	1080400c 	andi	r2,r2,256
  802860:	1002101e 	bne	r2,zero,8030a4 <___vfprintf_internal_r+0xc10>
			PRINT (cp, size);
  802864:	d8801b17 	ldw	r2,108(sp)
  802868:	1d47883a 	add	r3,r3,r21
  80286c:	b4400015 	stw	r17,0(r22)
  802870:	10800044 	addi	r2,r2,1
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
  802874:	b5400115 	stw	r21,4(r22)
  802878:	d8801b15 	stw	r2,108(sp)
  80287c:	d8c01c15 	stw	r3,112(sp)
  802880:	10800208 	cmpgei	r2,r2,8
  802884:	1003101e 	bne	r2,zero,8034c8 <___vfprintf_internal_r+0x1034>
  802888:	b5800204 	addi	r22,r22,8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
  80288c:	d8800417 	ldw	r2,16(sp)
  802890:	1440010c 	andi	r17,r2,4
  802894:	88000226 	beq	r17,zero,8028a0 <___vfprintf_internal_r+0x40c>
			PAD (width - realsz, blanks);
  802898:	8523c83a 	sub	r17,r16,r20
  80289c:	0440c616 	blt	zero,r17,802bb8 <___vfprintf_internal_r+0x724>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
  8028a0:	8500010e 	bge	r16,r20,8028a8 <___vfprintf_internal_r+0x414>
  8028a4:	a021883a 	mov	r16,r20
  8028a8:	d8800517 	ldw	r2,20(sp)
  8028ac:	1405883a 	add	r2,r2,r16
  8028b0:	d8800515 	stw	r2,20(sp)

		FLUSH ();	/* copy out the I/O vectors */
  8028b4:	1802c21e 	bne	r3,zero,8033c0 <___vfprintf_internal_r+0xf2c>
                while (*fmt != '\0' && *fmt != '%')
  8028b8:	b8800007 	ldb	r2,0(r23)
		FLUSH ();	/* copy out the I/O vectors */
  8028bc:	d8001b15 	stw	zero,108(sp)
  8028c0:	dd802704 	addi	r22,sp,156
                while (*fmt != '\0' && *fmt != '%')
  8028c4:	103f291e 	bne	r2,zero,80256c <___vfprintf_internal_r+0xd8>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
  8028c8:	d8801c17 	ldw	r2,112(sp)
  8028cc:	1006391e 	bne	r2,zero,8041b4 <___vfprintf_internal_r+0x1d20>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
  8028d0:	9080030b 	ldhu	r2,12(r18)
  8028d4:	1080100c 	andi	r2,r2,64
  8028d8:	1006cf1e 	bne	r2,zero,804418 <___vfprintf_internal_r+0x1f84>
	/* NOTREACHED */
}
  8028dc:	d8800517 	ldw	r2,20(sp)
  8028e0:	dfc04017 	ldw	ra,256(sp)
  8028e4:	df003f17 	ldw	fp,252(sp)
  8028e8:	ddc03e17 	ldw	r23,248(sp)
  8028ec:	dd803d17 	ldw	r22,244(sp)
  8028f0:	dd403c17 	ldw	r21,240(sp)
  8028f4:	dd003b17 	ldw	r20,236(sp)
  8028f8:	dcc03a17 	ldw	r19,232(sp)
  8028fc:	dc803917 	ldw	r18,228(sp)
  802900:	dc403817 	ldw	r17,224(sp)
  802904:	dc003717 	ldw	r16,220(sp)
  802908:	dec04104 	addi	sp,sp,260
  80290c:	f800283a 	ret
	if (cantwrite (data, fp)) {
  802910:	900b883a 	mov	r5,r18
  802914:	9809883a 	mov	r4,r19
  802918:	08046700 	call	804670 <__swsetup_r>
  80291c:	1006be1e 	bne	r2,zero,804418 <___vfprintf_internal_r+0x1f84>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  802920:	9080030b 	ldhu	r2,12(r18)
  802924:	1080068c 	andi	r2,r2,26
  802928:	10800298 	cmpnei	r2,r2,10
  80292c:	103f011e 	bne	r2,zero,802534 <___vfprintf_internal_r+0xa0>
  802930:	9080038f 	ldh	r2,14(r18)
  802934:	103eff16 	blt	r2,zero,802534 <___vfprintf_internal_r+0xa0>
		return (__sbprintf (data, fp, fmt0, ap));
  802938:	d9c00617 	ldw	r7,24(sp)
  80293c:	b00d883a 	mov	r6,r22
  802940:	900b883a 	mov	r5,r18
  802944:	9809883a 	mov	r4,r19
}
  802948:	dfc04017 	ldw	ra,256(sp)
  80294c:	df003f17 	ldw	fp,252(sp)
  802950:	ddc03e17 	ldw	r23,248(sp)
  802954:	dd803d17 	ldw	r22,244(sp)
  802958:	dd403c17 	ldw	r21,240(sp)
  80295c:	dd003b17 	ldw	r20,236(sp)
  802960:	dcc03a17 	ldw	r19,232(sp)
  802964:	dc803917 	ldw	r18,228(sp)
  802968:	dc403817 	ldw	r17,224(sp)
  80296c:	dc003717 	ldw	r16,220(sp)
  802970:	dec04104 	addi	sp,sp,260
		return (__sbprintf (data, fp, fmt0, ap));
  802974:	08045b01 	jmpi	8045b0 <__sbprintf>
			flags |= LONGINT;
  802978:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  80297c:	6080080c 	andi	r2,r12,32
  802980:	10008126 	beq	r2,zero,802b88 <___vfprintf_internal_r+0x6f4>
  802984:	d8c00617 	ldw	r3,24(sp)
			base = DEC;
  802988:	00800044 	movi	r2,1
			_uquad = UARG ();
  80298c:	1d000017 	ldw	r20,0(r3)
  802990:	1d400117 	ldw	r21,4(r3)
  802994:	18c00204 	addi	r3,r3,8
  802998:	d8c00615 	stw	r3,24(sp)
  80299c:	00000906 	br	8029c4 <___vfprintf_internal_r+0x530>
			flags |= LONGINT;
  8029a0:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  8029a4:	6080080c 	andi	r2,r12,32
  8029a8:	10006b26 	beq	r2,zero,802b58 <___vfprintf_internal_r+0x6c4>
  8029ac:	d8c00617 	ldw	r3,24(sp)
			base = OCT;
  8029b0:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  8029b4:	1d000017 	ldw	r20,0(r3)
  8029b8:	1d400117 	ldw	r21,4(r3)
  8029bc:	18c00204 	addi	r3,r3,8
  8029c0:	d8c00615 	stw	r3,24(sp)
nosign:			sign = '\0';
  8029c4:	d8001345 	stb	zero,77(sp)
number:			if ((dprec = prec) >= 0)
  8029c8:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  8029cc:	001b883a 	mov	r13,zero
number:			if ((dprec = prec) >= 0)
  8029d0:	18010e1e 	bne	r3,zero,802e0c <___vfprintf_internal_r+0x978>
				flags &= ~ZEROPAD;
  8029d4:	047fdfc4 	movi	r17,-129
  8029d8:	6448703a 	and	r4,r12,r17
			if (_uquad != 0 || prec != 0) {
  8029dc:	a546b03a 	or	r3,r20,r21
				flags &= ~ZEROPAD;
  8029e0:	d9000415 	stw	r4,16(sp)
			if (_uquad != 0 || prec != 0) {
  8029e4:	1802c01e 	bne	r3,zero,8034e8 <___vfprintf_internal_r+0x1054>
  8029e8:	40025f1e 	bne	r8,zero,803368 <___vfprintf_internal_r+0xed4>
                       else if (base == OCT && (flags & ALT))
  8029ec:	1003751e 	bne	r2,zero,8037c4 <___vfprintf_internal_r+0x1330>
  8029f0:	6540004c 	andi	r21,r12,1
  8029f4:	a803b026 	beq	r21,zero,8038b8 <___vfprintf_internal_r+0x1424>
                         *--cp = '0';
  8029f8:	00800c04 	movi	r2,48
  8029fc:	d88026c5 	stb	r2,155(sp)
  802a00:	dc4026c4 	addi	r17,sp,155
  802a04:	0000ba06 	br	802cf0 <___vfprintf_internal_r+0x85c>
		if ((m = fmt - cp) != 0) {
  802a08:	85e3c83a 	sub	r17,r16,r23
  802a0c:	85ffae26 	beq	r16,r23,8028c8 <___vfprintf_internal_r+0x434>
			PRINT (cp, m);
  802a10:	d8c01c17 	ldw	r3,112(sp)
  802a14:	d8801b17 	ldw	r2,108(sp)
  802a18:	b5c00015 	stw	r23,0(r22)
  802a1c:	1c47883a 	add	r3,r3,r17
  802a20:	10800044 	addi	r2,r2,1
  802a24:	d8801b15 	stw	r2,108(sp)
  802a28:	b4400115 	stw	r17,4(r22)
  802a2c:	d8c01c15 	stw	r3,112(sp)
  802a30:	10800208 	cmpgei	r2,r2,8
  802a34:	1000061e 	bne	r2,zero,802a50 <___vfprintf_internal_r+0x5bc>
  802a38:	b5800204 	addi	r22,r22,8
			ret += m;
  802a3c:	d8c00517 	ldw	r3,20(sp)
                if (*fmt == '\0')
  802a40:	80800003 	ldbu	r2,0(r16)
			ret += m;
  802a44:	1c47883a 	add	r3,r3,r17
  802a48:	d8c00515 	stw	r3,20(sp)
  802a4c:	003ed106 	br	802594 <___vfprintf_internal_r+0x100>
			PRINT (cp, m);
  802a50:	d9801a04 	addi	r6,sp,104
  802a54:	900b883a 	mov	r5,r18
  802a58:	9809883a 	mov	r4,r19
  802a5c:	0809bd40 	call	809bd4 <__sprint_r>
  802a60:	103f9b1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  802a64:	dd802704 	addi	r22,sp,156
  802a68:	003ff406 	br	802a3c <___vfprintf_internal_r+0x5a8>
  802a6c:	21003fcc 	andi	r4,r4,255
  802a70:	2006671e 	bne	r4,zero,804410 <___vfprintf_internal_r+0x1f7c>
			_uquad = SARG ();
  802a74:	d8c00617 	ldw	r3,24(sp)
			if (flags & LONGDBL) {
  802a78:	6080020c 	andi	r2,r12,8
			_uquad = SARG ();
  802a7c:	19000204 	addi	r4,r3,8
  802a80:	d9000e15 	stw	r4,56(sp)
			if (flags & LONGDBL) {
  802a84:	1003a71e 	bne	r2,zero,803924 <___vfprintf_internal_r+0x1490>
				_fpvalue = GET_ARG (N, ap, double);
  802a88:	d8800617 	ldw	r2,24(sp)
  802a8c:	10c00017 	ldw	r3,0(r2)
  802a90:	10800117 	ldw	r2,4(r2)
  802a94:	d8c00915 	stw	r3,36(sp)
  802a98:	d8800a15 	stw	r2,40(sp)
			if (isinf (_fpvalue)) {
  802a9c:	dd400a17 	ldw	r21,40(sp)
  802aa0:	dd000917 	ldw	r20,36(sp)
  802aa4:	00a00034 	movhi	r2,32768
  802aa8:	10bfffc4 	addi	r2,r2,-1
  802aac:	a8a2703a 	and	r17,r21,r2
  802ab0:	01dffc34 	movhi	r7,32752
  802ab4:	01bfffc4 	movi	r6,-1
  802ab8:	39ffffc4 	addi	r7,r7,-1
  802abc:	a009883a 	mov	r4,r20
  802ac0:	880b883a 	mov	r5,r17
  802ac4:	da000615 	stw	r8,24(sp)
  802ac8:	db000415 	stw	r12,16(sp)
  802acc:	080f1a40 	call	80f1a4 <__unorddf2>
  802ad0:	db000417 	ldw	r12,16(sp)
  802ad4:	da000617 	ldw	r8,24(sp)
  802ad8:	1004641e 	bne	r2,zero,803c6c <___vfprintf_internal_r+0x17d8>
  802adc:	01dffc34 	movhi	r7,32752
  802ae0:	01bfffc4 	movi	r6,-1
  802ae4:	39ffffc4 	addi	r7,r7,-1
  802ae8:	a009883a 	mov	r4,r20
  802aec:	880b883a 	mov	r5,r17
  802af0:	080e05c0 	call	80e05c <__ledf2>
  802af4:	db000417 	ldw	r12,16(sp)
  802af8:	da000617 	ldw	r8,24(sp)
  802afc:	00845b0e 	bge	zero,r2,803c6c <___vfprintf_internal_r+0x17d8>
				if (_fpvalue < 0)
  802b00:	000d883a 	mov	r6,zero
  802b04:	000f883a 	mov	r7,zero
  802b08:	a009883a 	mov	r4,r20
  802b0c:	a80b883a 	mov	r5,r21
  802b10:	080e05c0 	call	80e05c <__ledf2>
  802b14:	db000417 	ldw	r12,16(sp)
  802b18:	10059116 	blt	r2,zero,804160 <___vfprintf_internal_r+0x1ccc>
		if (sign)
  802b1c:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  802b20:	e0801210 	cmplti	r2,fp,72
  802b24:	1005391e 	bne	r2,zero,80400c <___vfprintf_internal_r+0x1b78>
					cp = "inf";
  802b28:	04402074 	movhi	r17,129
  802b2c:	8c48ad04 	addi	r17,r17,8884
				flags &= ~ZEROPAD;
  802b30:	00bfdfc4 	movi	r2,-129
  802b34:	6084703a 	and	r2,r12,r2
  802b38:	d8800415 	stw	r2,16(sp)
				break;
  802b3c:	d8800e17 	ldw	r2,56(sp)
  802b40:	050000c4 	movi	r20,3
				size = 3;
  802b44:	054000c4 	movi	r21,3
				break;
  802b48:	d8800615 	stw	r2,24(sp)
		dprec = 0;
  802b4c:	0011883a 	mov	r8,zero
		lead = 0;
  802b50:	d8000715 	stw	zero,28(sp)
				break;
  802b54:	00006a06 	br	802d00 <___vfprintf_internal_r+0x86c>
			width = GET_ARG (n, ap, int);
  802b58:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  802b5c:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802b60:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  802b64:	10036a1e 	bne	r2,zero,803910 <___vfprintf_internal_r+0x147c>
  802b68:	6080100c 	andi	r2,r12,64
  802b6c:	10052126 	beq	r2,zero,803ff4 <___vfprintf_internal_r+0x1b60>
  802b70:	d8800617 	ldw	r2,24(sp)
  802b74:	002b883a 	mov	r21,zero
  802b78:	d8c00615 	stw	r3,24(sp)
  802b7c:	1500000b 	ldhu	r20,0(r2)
			base = OCT;
  802b80:	0005883a 	mov	r2,zero
  802b84:	003f8f06 	br	8029c4 <___vfprintf_internal_r+0x530>
			width = GET_ARG (n, ap, int);
  802b88:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  802b8c:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802b90:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  802b94:	1003501e 	bne	r2,zero,8038d8 <___vfprintf_internal_r+0x1444>
  802b98:	6080100c 	andi	r2,r12,64
  802b9c:	10055926 	beq	r2,zero,804104 <___vfprintf_internal_r+0x1c70>
  802ba0:	d8800617 	ldw	r2,24(sp)
  802ba4:	002b883a 	mov	r21,zero
  802ba8:	d8c00615 	stw	r3,24(sp)
  802bac:	1500000b 	ldhu	r20,0(r2)
			base = DEC;
  802bb0:	00800044 	movi	r2,1
  802bb4:	003f8306 	br	8029c4 <___vfprintf_internal_r+0x530>
			PAD (width - realsz, blanks);
  802bb8:	03002074 	movhi	r12,129
  802bbc:	89000450 	cmplti	r4,r17,17
  802bc0:	d8801b17 	ldw	r2,108(sp)
  802bc4:	6308c104 	addi	r12,r12,8964
  802bc8:	20001b1e 	bne	r4,zero,802c38 <___vfprintf_internal_r+0x7a4>
  802bcc:	05400404 	movi	r21,16
  802bd0:	6039883a 	mov	fp,r12
  802bd4:	00000406 	br	802be8 <___vfprintf_internal_r+0x754>
  802bd8:	8c7ffc04 	addi	r17,r17,-16
  802bdc:	89000448 	cmpgei	r4,r17,17
  802be0:	b5800204 	addi	r22,r22,8
  802be4:	20001326 	beq	r4,zero,802c34 <___vfprintf_internal_r+0x7a0>
  802be8:	10800044 	addi	r2,r2,1
  802bec:	18c00404 	addi	r3,r3,16
  802bf0:	b7000015 	stw	fp,0(r22)
  802bf4:	b5400115 	stw	r21,4(r22)
  802bf8:	d8c01c15 	stw	r3,112(sp)
  802bfc:	d8801b15 	stw	r2,108(sp)
  802c00:	11000208 	cmpgei	r4,r2,8
  802c04:	203ff426 	beq	r4,zero,802bd8 <___vfprintf_internal_r+0x744>
  802c08:	d9801a04 	addi	r6,sp,104
  802c0c:	900b883a 	mov	r5,r18
  802c10:	9809883a 	mov	r4,r19
  802c14:	0809bd40 	call	809bd4 <__sprint_r>
  802c18:	103f2d1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  802c1c:	8c7ffc04 	addi	r17,r17,-16
  802c20:	89000448 	cmpgei	r4,r17,17
  802c24:	d8c01c17 	ldw	r3,112(sp)
  802c28:	d8801b17 	ldw	r2,108(sp)
  802c2c:	dd802704 	addi	r22,sp,156
  802c30:	203fed1e 	bne	r4,zero,802be8 <___vfprintf_internal_r+0x754>
  802c34:	e019883a 	mov	r12,fp
  802c38:	10800044 	addi	r2,r2,1
  802c3c:	1c47883a 	add	r3,r3,r17
  802c40:	d8801b15 	stw	r2,108(sp)
  802c44:	b3000015 	stw	r12,0(r22)
  802c48:	b4400115 	stw	r17,4(r22)
  802c4c:	d8c01c15 	stw	r3,112(sp)
  802c50:	10800210 	cmplti	r2,r2,8
  802c54:	103f121e 	bne	r2,zero,8028a0 <___vfprintf_internal_r+0x40c>
  802c58:	d9801a04 	addi	r6,sp,104
  802c5c:	900b883a 	mov	r5,r18
  802c60:	9809883a 	mov	r4,r19
  802c64:	0809bd40 	call	809bd4 <__sprint_r>
  802c68:	103f191e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  802c6c:	d8c01c17 	ldw	r3,112(sp)
  802c70:	003f0b06 	br	8028a0 <___vfprintf_internal_r+0x40c>
	CHECK_INIT (data, fp);
  802c74:	9809883a 	mov	r4,r19
  802c78:	08067980 	call	806798 <__sinit>
  802c7c:	003e1d06 	br	8024f4 <___vfprintf_internal_r+0x60>
  802c80:	21003fcc 	andi	r4,r4,255
  802c84:	2005de1e 	bne	r4,zero,804400 <___vfprintf_internal_r+0x1f6c>
			_uquad = SARG ();
  802c88:	6080080c 	andi	r2,r12,32
  802c8c:	10004926 	beq	r2,zero,802db4 <___vfprintf_internal_r+0x920>
  802c90:	d8c00617 	ldw	r3,24(sp)
  802c94:	18800117 	ldw	r2,4(r3)
  802c98:	1d000017 	ldw	r20,0(r3)
  802c9c:	18c00204 	addi	r3,r3,8
  802ca0:	d8c00615 	stw	r3,24(sp)
  802ca4:	102b883a 	mov	r21,r2
			if ((quad_t)_uquad < 0)
  802ca8:	10004e16 	blt	r2,zero,802de4 <___vfprintf_internal_r+0x950>
number:			if ((dprec = prec) >= 0)
  802cac:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  802cb0:	db401343 	ldbu	r13,77(sp)
number:			if ((dprec = prec) >= 0)
  802cb4:	10000626 	beq	r2,zero,802cd0 <___vfprintf_internal_r+0x83c>
				flags &= ~ZEROPAD;
  802cb8:	047fdfc4 	movi	r17,-129
  802cbc:	6446703a 	and	r3,r12,r17
			if (_uquad != 0 || prec != 0) {
  802cc0:	a544b03a 	or	r2,r20,r21
				flags &= ~ZEROPAD;
  802cc4:	d8c00415 	stw	r3,16(sp)
			if (_uquad != 0 || prec != 0) {
  802cc8:	1002bd26 	beq	r2,zero,8037c0 <___vfprintf_internal_r+0x132c>
				flags &= ~ZEROPAD;
  802ccc:	db000417 	ldw	r12,16(sp)
					if (_uquad < 10) {
  802cd0:	a803701e 	bne	r21,zero,803a94 <___vfprintf_internal_r+0x1600>
  802cd4:	a08002a8 	cmpgeui	r2,r20,10
  802cd8:	10036e1e 	bne	r2,zero,803a94 <___vfprintf_internal_r+0x1600>
						*--cp = to_char(_uquad);
  802cdc:	a5000c04 	addi	r20,r20,48
  802ce0:	dd0026c5 	stb	r20,155(sp)
						break;
  802ce4:	db000415 	stw	r12,16(sp)
  802ce8:	05400044 	movi	r21,1
						*--cp = to_char(_uquad);
  802cec:	dc4026c4 	addi	r17,sp,155
		realsz = dprec > size ? dprec : size;
  802cf0:	4029883a 	mov	r20,r8
  802cf4:	4540010e 	bge	r8,r21,802cfc <___vfprintf_internal_r+0x868>
  802cf8:	a829883a 	mov	r20,r21
		lead = 0;
  802cfc:	d8000715 	stw	zero,28(sp)
		if (sign)
  802d00:	6b403fcc 	andi	r13,r13,255
  802d04:	6b40201c 	xori	r13,r13,128
  802d08:	6b7fe004 	addi	r13,r13,-128
  802d0c:	683ea926 	beq	r13,zero,8027b4 <___vfprintf_internal_r+0x320>
			realsz++;
  802d10:	a5000044 	addi	r20,r20,1
  802d14:	003ea706 	br	8027b4 <___vfprintf_internal_r+0x320>
				flags |= SHORTINT;
  802d18:	bac00007 	ldb	r11,0(r23)
  802d1c:	63001014 	ori	r12,r12,64
			goto rflag;
  802d20:	003e2806 	br	8025c4 <___vfprintf_internal_r+0x130>
				*cp = GET_ARG (N, ap, int);
  802d24:	d8c00617 	ldw	r3,24(sp)
			sign = '\0';
  802d28:	d8001345 	stb	zero,77(sp)
			break;
  802d2c:	05000044 	movi	r20,1
				*cp = GET_ARG (N, ap, int);
  802d30:	18800017 	ldw	r2,0(r3)
  802d34:	18c00104 	addi	r3,r3,4
  802d38:	d8c00615 	stw	r3,24(sp)
  802d3c:	d8801d05 	stb	r2,116(sp)
				size = 1;
  802d40:	05400044 	movi	r21,1
			cp = buf;
  802d44:	dc401d04 	addi	r17,sp,116
			break;
  802d48:	003e9706 	br	8027a8 <___vfprintf_internal_r+0x314>
  802d4c:	21003fcc 	andi	r4,r4,255
  802d50:	2005a71e 	bne	r4,zero,8043f0 <___vfprintf_internal_r+0x1f5c>
			xdigs = "0123456789ABCDEF";
  802d54:	00802074 	movhi	r2,129
  802d58:	1088b504 	addi	r2,r2,8916
  802d5c:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  802d60:	6080080c 	andi	r2,r12,32
  802d64:	10008726 	beq	r2,zero,802f84 <___vfprintf_internal_r+0xaf0>
  802d68:	d8800617 	ldw	r2,24(sp)
  802d6c:	15000017 	ldw	r20,0(r2)
  802d70:	15400117 	ldw	r21,4(r2)
  802d74:	10800204 	addi	r2,r2,8
  802d78:	d8800615 	stw	r2,24(sp)
			if (flags & ALT && _uquad != 0) {
  802d7c:	6080004c 	andi	r2,r12,1
  802d80:	10000226 	beq	r2,zero,802d8c <___vfprintf_internal_r+0x8f8>
  802d84:	a544b03a 	or	r2,r20,r21
  802d88:	1002cd1e 	bne	r2,zero,8038c0 <___vfprintf_internal_r+0x142c>
			base = HEX;
  802d8c:	00800084 	movi	r2,2
  802d90:	003f0c06 	br	8029c4 <___vfprintf_internal_r+0x530>
			flags |= LONGDBL;
  802d94:	bac00007 	ldb	r11,0(r23)
  802d98:	63000214 	ori	r12,r12,8
			goto rflag;
  802d9c:	003e0906 	br	8025c4 <___vfprintf_internal_r+0x130>
  802da0:	21003fcc 	andi	r4,r4,255
  802da4:	2005981e 	bne	r4,zero,804408 <___vfprintf_internal_r+0x1f74>
			flags |= LONGINT;
  802da8:	63000414 	ori	r12,r12,16
			_uquad = SARG ();
  802dac:	6080080c 	andi	r2,r12,32
  802db0:	103fb71e 	bne	r2,zero,802c90 <___vfprintf_internal_r+0x7fc>
			width = GET_ARG (n, ap, int);
  802db4:	d9000617 	ldw	r4,24(sp)
			_uquad = SARG ();
  802db8:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802dbc:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  802dc0:	1002dd1e 	bne	r2,zero,803938 <___vfprintf_internal_r+0x14a4>
  802dc4:	6080100c 	andi	r2,r12,64
  802dc8:	10048426 	beq	r2,zero,803fdc <___vfprintf_internal_r+0x1b48>
  802dcc:	d8800617 	ldw	r2,24(sp)
  802dd0:	d8c00615 	stw	r3,24(sp)
  802dd4:	1500000f 	ldh	r20,0(r2)
  802dd8:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  802ddc:	a805883a 	mov	r2,r21
  802de0:	103fb20e 	bge	r2,zero,802cac <___vfprintf_internal_r+0x818>
				_uquad = -_uquad;
  802de4:	a004c03a 	cmpne	r2,r20,zero
  802de8:	056bc83a 	sub	r21,zero,r21
  802dec:	a8abc83a 	sub	r21,r21,r2
				sign = '-';
  802df0:	00800b44 	movi	r2,45
  802df4:	d8801345 	stb	r2,77(sp)
number:			if ((dprec = prec) >= 0)
  802df8:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  802dfc:	0529c83a 	sub	r20,zero,r20
				sign = '-';
  802e00:	03400b44 	movi	r13,45
			base = DEC;
  802e04:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  802e08:	183ef226 	beq	r3,zero,8029d4 <___vfprintf_internal_r+0x540>
				switch (base) {
  802e0c:	10c00060 	cmpeqi	r3,r2,1
  802e10:	183faf1e 	bne	r3,zero,802cd0 <___vfprintf_internal_r+0x83c>
  802e14:	108000a0 	cmpeqi	r2,r2,2
  802e18:	1001581e 	bne	r2,zero,80337c <___vfprintf_internal_r+0xee8>
			cp = buf + BUF;
  802e1c:	dc402704 	addi	r17,sp,156
						_uquad >>= 3;
  802e20:	a006d0fa 	srli	r3,r20,3
  802e24:	a808977a 	slli	r4,r21,29
  802e28:	a82ad0fa 	srli	r21,r21,3
						*--cp = to_char (_uquad & 7);
  802e2c:	a50001cc 	andi	r20,r20,7
  802e30:	a0800c04 	addi	r2,r20,48
						_uquad >>= 3;
  802e34:	20e8b03a 	or	r20,r4,r3
						*--cp = to_char (_uquad & 7);
  802e38:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  802e3c:	a546b03a 	or	r3,r20,r21
  802e40:	880b883a 	mov	r5,r17
						*--cp = to_char (_uquad & 7);
  802e44:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  802e48:	183ff51e 	bne	r3,zero,802e20 <___vfprintf_internal_r+0x98c>
					if (flags & ALT && *cp != '0')
  802e4c:	60c0004c 	andi	r3,r12,1
  802e50:	18015726 	beq	r3,zero,8033b0 <___vfprintf_internal_r+0xf1c>
  802e54:	10803fcc 	andi	r2,r2,255
  802e58:	1080201c 	xori	r2,r2,128
  802e5c:	10bfe004 	addi	r2,r2,-128
  802e60:	10800c18 	cmpnei	r2,r2,48
  802e64:	10015226 	beq	r2,zero,8033b0 <___vfprintf_internal_r+0xf1c>
						*--cp = '0';
  802e68:	00800c04 	movi	r2,48
  802e6c:	297fff84 	addi	r5,r5,-2
  802e70:	88bfffc5 	stb	r2,-1(r17)
			size = buf + BUF - cp;
  802e74:	d8802704 	addi	r2,sp,156
  802e78:	116bc83a 	sub	r21,r2,r5
  802e7c:	db000415 	stw	r12,16(sp)
						*--cp = '0';
  802e80:	2823883a 	mov	r17,r5
  802e84:	003f9a06 	br	802cf0 <___vfprintf_internal_r+0x85c>
			flags |= ZEROPAD;
  802e88:	bac00007 	ldb	r11,0(r23)
  802e8c:	63002014 	ori	r12,r12,128
			goto rflag;
  802e90:	003dcc06 	br	8025c4 <___vfprintf_internal_r+0x130>
			if ((ch = *fmt++) == '*') {
  802e94:	bf000007 	ldb	fp,0(r23)
  802e98:	b8800044 	addi	r2,r23,1
  802e9c:	e0c00aa0 	cmpeqi	r3,fp,42
  802ea0:	1805b11e 	bne	r3,zero,804568 <___vfprintf_internal_r+0x20d4>
			while (is_digit (ch)) {
  802ea4:	e0fff404 	addi	r3,fp,-48
  802ea8:	198002b0 	cmpltui	r6,r3,10
			if ((ch = *fmt++) == '*') {
  802eac:	102f883a 	mov	r23,r2
			n = 0;
  802eb0:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  802eb4:	303dc526 	beq	r6,zero,8025cc <___vfprintf_internal_r+0x138>
				n = 10 * n + to_digit (ch);
  802eb8:	400490ba 	slli	r2,r8,2
				ch = *fmt++;
  802ebc:	bf000007 	ldb	fp,0(r23)
  802ec0:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  802ec4:	1211883a 	add	r8,r2,r8
  802ec8:	4211883a 	add	r8,r8,r8
  802ecc:	40d1883a 	add	r8,r8,r3
			while (is_digit (ch)) {
  802ed0:	e0fff404 	addi	r3,fp,-48
  802ed4:	188002b0 	cmpltui	r2,r3,10
  802ed8:	103ff71e 	bne	r2,zero,802eb8 <___vfprintf_internal_r+0xa24>
  802edc:	003dbb06 	br	8025cc <___vfprintf_internal_r+0x138>
			if ((ch = *fmt++) == '*') {
  802ee0:	bf000003 	ldbu	fp,0(r23)
			flags |= LADJUST;
  802ee4:	e2c03fcc 	andi	r11,fp,255
  802ee8:	5ac0201c 	xori	r11,r11,128
  802eec:	63000114 	ori	r12,r12,4
			goto rflag;
  802ef0:	5affe004 	addi	r11,r11,-128
  802ef4:	003db306 	br	8025c4 <___vfprintf_internal_r+0x130>
			goto rflag;
  802ef8:	bac00007 	ldb	r11,0(r23)
  802efc:	01000044 	movi	r4,1
			sign = '+';
  802f00:	01400ac4 	movi	r5,43
			goto rflag;
  802f04:	003daf06 	br	8025c4 <___vfprintf_internal_r+0x130>
			width = GET_ARG (n, ap, int);
  802f08:	d8800617 	ldw	r2,24(sp)
			if ((ch = *fmt++) == '*') {
  802f0c:	bf000003 	ldbu	fp,0(r23)
			width = GET_ARG (n, ap, int);
  802f10:	14000017 	ldw	r16,0(r2)
  802f14:	10800104 	addi	r2,r2,4
			if (width >= 0)
  802f18:	80028c16 	blt	r16,zero,80394c <___vfprintf_internal_r+0x14b8>
			width = GET_ARG (n, ap, int);
  802f1c:	d8800615 	stw	r2,24(sp)
  802f20:	e2c03fcc 	andi	r11,fp,255
  802f24:	5ac0201c 	xori	r11,r11,128
  802f28:	5affe004 	addi	r11,r11,-128
  802f2c:	003da506 	br	8025c4 <___vfprintf_internal_r+0x130>
			flags |= ALT;
  802f30:	bac00007 	ldb	r11,0(r23)
  802f34:	63000054 	ori	r12,r12,1
			goto rflag;
  802f38:	003da206 	br	8025c4 <___vfprintf_internal_r+0x130>
			if (!sign)
  802f3c:	28803fcc 	andi	r2,r5,255
  802f40:	1080201c 	xori	r2,r2,128
  802f44:	10bfe004 	addi	r2,r2,-128
			if ((ch = *fmt++) == '*') {
  802f48:	bf000003 	ldbu	fp,0(r23)
			if (!sign)
  802f4c:	103ff41e 	bne	r2,zero,802f20 <___vfprintf_internal_r+0xa8c>
  802f50:	e2c03fcc 	andi	r11,fp,255
  802f54:	5ac0201c 	xori	r11,r11,128
  802f58:	01000044 	movi	r4,1
				sign = ' ';
  802f5c:	01400804 	movi	r5,32
  802f60:	5affe004 	addi	r11,r11,-128
  802f64:	003d9706 	br	8025c4 <___vfprintf_internal_r+0x130>
  802f68:	21003fcc 	andi	r4,r4,255
  802f6c:	20051e1e 	bne	r4,zero,8043e8 <___vfprintf_internal_r+0x1f54>
			xdigs = "0123456789abcdef";
  802f70:	00802074 	movhi	r2,129
  802f74:	1088b004 	addi	r2,r2,8896
  802f78:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  802f7c:	6080080c 	andi	r2,r12,32
  802f80:	103f791e 	bne	r2,zero,802d68 <___vfprintf_internal_r+0x8d4>
			width = GET_ARG (n, ap, int);
  802f84:	d9000617 	ldw	r4,24(sp)
hex:			_uquad = UARG ();
  802f88:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  802f8c:	20c00104 	addi	r3,r4,4
hex:			_uquad = UARG ();
  802f90:	10025b1e 	bne	r2,zero,803900 <___vfprintf_internal_r+0x146c>
  802f94:	6080100c 	andi	r2,r12,64
  802f98:	10046026 	beq	r2,zero,80411c <___vfprintf_internal_r+0x1c88>
  802f9c:	d8800617 	ldw	r2,24(sp)
  802fa0:	002b883a 	mov	r21,zero
  802fa4:	d8c00615 	stw	r3,24(sp)
  802fa8:	1500000b 	ldhu	r20,0(r2)
  802fac:	003f7306 	br	802d7c <___vfprintf_internal_r+0x8e8>
			cp = GET_ARG (N, ap, char_ptr_t);
  802fb0:	d8800617 	ldw	r2,24(sp)
			sign = '\0';
  802fb4:	d8001345 	stb	zero,77(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  802fb8:	14400017 	ldw	r17,0(r2)
  802fbc:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  802fc0:	88028e26 	beq	r17,zero,8039fc <___vfprintf_internal_r+0x1568>
			if (prec >= 0) {
  802fc4:	40bfffe0 	cmpeqi	r2,r8,-1
  802fc8:	1003c01e 	bne	r2,zero,803ecc <___vfprintf_internal_r+0x1a38>
				char *p = memchr (cp, 0, prec);
  802fcc:	400d883a 	mov	r6,r8
  802fd0:	000b883a 	mov	r5,zero
  802fd4:	8809883a 	mov	r4,r17
  802fd8:	d8c00715 	stw	r3,28(sp)
  802fdc:	db000615 	stw	r12,24(sp)
  802fe0:	da000415 	stw	r8,16(sp)
  802fe4:	0807d580 	call	807d58 <memchr>
				if (p != NULL)
  802fe8:	da000417 	ldw	r8,16(sp)
  802fec:	db000617 	ldw	r12,24(sp)
  802ff0:	d8c00717 	ldw	r3,28(sp)
  802ff4:	1004ec26 	beq	r2,zero,8043a8 <___vfprintf_internal_r+0x1f14>
					size = p - cp;
  802ff8:	146bc83a 	sub	r21,r2,r17
  802ffc:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  803000:	d8c00615 	stw	r3,24(sp)
  803004:	003de806 	br	8027a8 <___vfprintf_internal_r+0x314>
			flags |= QUADINT;
  803008:	bac00007 	ldb	r11,0(r23)
  80300c:	63000814 	ori	r12,r12,32
			goto rflag;
  803010:	003d6c06 	br	8025c4 <___vfprintf_internal_r+0x130>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  803014:	d8c00617 	ldw	r3,24(sp)
			ox[0] = '0';
  803018:	00800c04 	movi	r2,48
  80301c:	d8801385 	stb	r2,78(sp)
			ox[1] = ch = 'x';
  803020:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  803024:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  803028:	d88013c5 	stb	r2,79(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80302c:	18800104 	addi	r2,r3,4
  803030:	d8800615 	stw	r2,24(sp)
			xdigs = "0123456789abcdef";
  803034:	2088b004 	addi	r2,r4,8896
  803038:	d8800c15 	stw	r2,48(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80303c:	1d000017 	ldw	r20,0(r3)
  803040:	002b883a 	mov	r21,zero
			flags |= HEXPREFIX;
  803044:	63000094 	ori	r12,r12,2
			base = HEX;
  803048:	00800084 	movi	r2,2
			ox[1] = ch = 'x';
  80304c:	07001e04 	movi	fp,120
			goto nosign;
  803050:	003e5c06 	br	8029c4 <___vfprintf_internal_r+0x530>
  803054:	21003fcc 	andi	r4,r4,255
  803058:	2004e71e 	bne	r4,zero,8043f8 <___vfprintf_internal_r+0x1f64>
			width = GET_ARG (n, ap, int);
  80305c:	d9000617 	ldw	r4,24(sp)
			if (flags & QUADINT)
  803060:	6080080c 	andi	r2,r12,32
			width = GET_ARG (n, ap, int);
  803064:	20c00017 	ldw	r3,0(r4)
  803068:	21000104 	addi	r4,r4,4
  80306c:	d9000615 	stw	r4,24(sp)
			if (flags & QUADINT)
  803070:	10021e1e 	bne	r2,zero,8038ec <___vfprintf_internal_r+0x1458>
			if (flags & LONGINT)
  803074:	6080040c 	andi	r2,r12,16
  803078:	1002ae1e 	bne	r2,zero,803b34 <___vfprintf_internal_r+0x16a0>
			else if (flags & SHORTINT)
  80307c:	6300100c 	andi	r12,r12,64
  803080:	6002ac26 	beq	r12,zero,803b34 <___vfprintf_internal_r+0x16a0>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  803084:	d8800517 	ldw	r2,20(sp)
  803088:	1880000d 	sth	r2,0(r3)
  80308c:	003d3506 	br	802564 <___vfprintf_internal_r+0xd0>
			if (*fmt == 'l') {
  803090:	bac00007 	ldb	r11,0(r23)
  803094:	58801b18 	cmpnei	r2,r11,108
  803098:	10024926 	beq	r2,zero,8039c0 <___vfprintf_internal_r+0x152c>
				flags |= LONGINT;
  80309c:	63000414 	ori	r12,r12,16
  8030a0:	003d4806 	br	8025c4 <___vfprintf_internal_r+0x130>
			if (ch >= 'f') {	/* 'f' or 'g' */
  8030a4:	e2c01990 	cmplti	r11,fp,102
  8030a8:	5800cb1e 	bne	r11,zero,8033d8 <___vfprintf_internal_r+0xf44>
				if (_fpvalue == 0) {
  8030ac:	d9000917 	ldw	r4,36(sp)
  8030b0:	d9400a17 	ldw	r5,40(sp)
  8030b4:	000d883a 	mov	r6,zero
  8030b8:	000f883a 	mov	r7,zero
  8030bc:	d8c00e15 	stw	r3,56(sp)
  8030c0:	080def40 	call	80def4 <__eqdf2>
  8030c4:	d8c00e17 	ldw	r3,56(sp)
  8030c8:	1001641e 	bne	r2,zero,80365c <___vfprintf_internal_r+0x11c8>
					PRINT ("0", 1);
  8030cc:	d8801b17 	ldw	r2,108(sp)
  8030d0:	01002074 	movhi	r4,129
  8030d4:	2108bc04 	addi	r4,r4,8944
  8030d8:	10800044 	addi	r2,r2,1
  8030dc:	18c00044 	addi	r3,r3,1
  8030e0:	b1000015 	stw	r4,0(r22)
  8030e4:	01000044 	movi	r4,1
  8030e8:	d8801b15 	stw	r2,108(sp)
  8030ec:	b1000115 	stw	r4,4(r22)
  8030f0:	d8c01c15 	stw	r3,112(sp)
  8030f4:	10800208 	cmpgei	r2,r2,8
  8030f8:	1003621e 	bne	r2,zero,803e84 <___vfprintf_internal_r+0x19f0>
  8030fc:	b5800204 	addi	r22,r22,8
					if (expt < ndig || flags & ALT) {
  803100:	d8801417 	ldw	r2,80(sp)
  803104:	d9000817 	ldw	r4,32(sp)
  803108:	1101e70e 	bge	r2,r4,8038a8 <___vfprintf_internal_r+0x1414>
						PRINT (decimal_point, decp_len);
  80310c:	d8800d17 	ldw	r2,52(sp)
  803110:	d9000b17 	ldw	r4,44(sp)
  803114:	b0800015 	stw	r2,0(r22)
  803118:	d8801b17 	ldw	r2,108(sp)
  80311c:	1907883a 	add	r3,r3,r4
  803120:	b1000115 	stw	r4,4(r22)
  803124:	10800044 	addi	r2,r2,1
  803128:	d8801b15 	stw	r2,108(sp)
  80312c:	d8c01c15 	stw	r3,112(sp)
  803130:	10800208 	cmpgei	r2,r2,8
  803134:	1002291e 	bne	r2,zero,8039dc <___vfprintf_internal_r+0x1548>
  803138:	b5800204 	addi	r22,r22,8
						PAD (ndig - 1, zeroes);
  80313c:	d8800817 	ldw	r2,32(sp)
  803140:	157fffc4 	addi	r21,r2,-1
  803144:	057dd10e 	bge	zero,r21,80288c <___vfprintf_internal_r+0x3f8>
  803148:	01c02074 	movhi	r7,129
  80314c:	a9000450 	cmplti	r4,r21,17
  803150:	d8801b17 	ldw	r2,108(sp)
  803154:	39c8bd04 	addi	r7,r7,8948
  803158:	2003461e 	bne	r4,zero,803e74 <___vfprintf_internal_r+0x19e0>
  80315c:	07000404 	movi	fp,16
  803160:	3823883a 	mov	r17,r7
  803164:	00000406 	br	803178 <___vfprintf_internal_r+0xce4>
  803168:	b5800204 	addi	r22,r22,8
  80316c:	ad7ffc04 	addi	r21,r21,-16
  803170:	a9000448 	cmpgei	r4,r21,17
  803174:	20033e26 	beq	r4,zero,803e70 <___vfprintf_internal_r+0x19dc>
  803178:	10800044 	addi	r2,r2,1
  80317c:	18c00404 	addi	r3,r3,16
  803180:	b4400015 	stw	r17,0(r22)
  803184:	b7000115 	stw	fp,4(r22)
  803188:	d8c01c15 	stw	r3,112(sp)
  80318c:	d8801b15 	stw	r2,108(sp)
  803190:	11000208 	cmpgei	r4,r2,8
  803194:	203ff426 	beq	r4,zero,803168 <___vfprintf_internal_r+0xcd4>
  803198:	d9801a04 	addi	r6,sp,104
  80319c:	900b883a 	mov	r5,r18
  8031a0:	9809883a 	mov	r4,r19
  8031a4:	0809bd40 	call	809bd4 <__sprint_r>
  8031a8:	103dc91e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  8031ac:	d8c01c17 	ldw	r3,112(sp)
  8031b0:	d8801b17 	ldw	r2,108(sp)
  8031b4:	dd802704 	addi	r22,sp,156
  8031b8:	003fec06 	br	80316c <___vfprintf_internal_r+0xcd8>
			PAD (width - realsz, zeroes);
  8031bc:	8519c83a 	sub	r12,r16,r20
  8031c0:	033da30e 	bge	zero,r12,802850 <___vfprintf_internal_r+0x3bc>
  8031c4:	01c02074 	movhi	r7,129
  8031c8:	61000450 	cmplti	r4,r12,17
  8031cc:	d8801b17 	ldw	r2,108(sp)
  8031d0:	39c8bd04 	addi	r7,r7,8948
  8031d4:	2000281e 	bne	r4,zero,803278 <___vfprintf_internal_r+0xde4>
  8031d8:	dc400e15 	stw	r17,56(sp)
  8031dc:	dc000f15 	stw	r16,60(sp)
  8031e0:	b009883a 	mov	r4,r22
  8031e4:	03400404 	movi	r13,16
  8031e8:	a02d883a 	mov	r22,r20
  8031ec:	6021883a 	mov	r16,r12
  8031f0:	4029883a 	mov	r20,r8
  8031f4:	3823883a 	mov	r17,r7
  8031f8:	00000406 	br	80320c <___vfprintf_internal_r+0xd78>
  8031fc:	843ffc04 	addi	r16,r16,-16
  803200:	81400448 	cmpgei	r5,r16,17
  803204:	21000204 	addi	r4,r4,8
  803208:	28001426 	beq	r5,zero,80325c <___vfprintf_internal_r+0xdc8>
  80320c:	10800044 	addi	r2,r2,1
  803210:	18c00404 	addi	r3,r3,16
  803214:	24400015 	stw	r17,0(r4)
  803218:	23400115 	stw	r13,4(r4)
  80321c:	d8c01c15 	stw	r3,112(sp)
  803220:	d8801b15 	stw	r2,108(sp)
  803224:	11400208 	cmpgei	r5,r2,8
  803228:	283ff426 	beq	r5,zero,8031fc <___vfprintf_internal_r+0xd68>
  80322c:	d9801a04 	addi	r6,sp,104
  803230:	900b883a 	mov	r5,r18
  803234:	9809883a 	mov	r4,r19
  803238:	0809bd40 	call	809bd4 <__sprint_r>
  80323c:	103da41e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  803240:	843ffc04 	addi	r16,r16,-16
  803244:	81400448 	cmpgei	r5,r16,17
  803248:	d8c01c17 	ldw	r3,112(sp)
  80324c:	d8801b17 	ldw	r2,108(sp)
  803250:	d9002704 	addi	r4,sp,156
  803254:	03400404 	movi	r13,16
  803258:	283fec1e 	bne	r5,zero,80320c <___vfprintf_internal_r+0xd78>
  80325c:	8019883a 	mov	r12,r16
  803260:	880f883a 	mov	r7,r17
  803264:	dc000f17 	ldw	r16,60(sp)
  803268:	dc400e17 	ldw	r17,56(sp)
  80326c:	a011883a 	mov	r8,r20
  803270:	b029883a 	mov	r20,r22
  803274:	202d883a 	mov	r22,r4
  803278:	10800044 	addi	r2,r2,1
  80327c:	1b07883a 	add	r3,r3,r12
  803280:	d8801b15 	stw	r2,108(sp)
  803284:	b1c00015 	stw	r7,0(r22)
  803288:	b3000115 	stw	r12,4(r22)
  80328c:	d8c01c15 	stw	r3,112(sp)
  803290:	10800208 	cmpgei	r2,r2,8
  803294:	1003031e 	bne	r2,zero,803ea4 <___vfprintf_internal_r+0x1a10>
		PAD (dprec - size, zeroes);
  803298:	4551c83a 	sub	r8,r8,r21
			PAD (width - realsz, zeroes);
  80329c:	b5800204 	addi	r22,r22,8
		PAD (dprec - size, zeroes);
  8032a0:	023d6d0e 	bge	zero,r8,802858 <___vfprintf_internal_r+0x3c4>
  8032a4:	01c02074 	movhi	r7,129
  8032a8:	41000450 	cmplti	r4,r8,17
  8032ac:	d8801b17 	ldw	r2,108(sp)
  8032b0:	39c8bd04 	addi	r7,r7,8948
  8032b4:	2000221e 	bne	r4,zero,803340 <___vfprintf_internal_r+0xeac>
  8032b8:	dc400e15 	stw	r17,56(sp)
  8032bc:	dc000f15 	stw	r16,60(sp)
  8032c0:	03000404 	movi	r12,16
  8032c4:	4021883a 	mov	r16,r8
  8032c8:	3823883a 	mov	r17,r7
  8032cc:	00000406 	br	8032e0 <___vfprintf_internal_r+0xe4c>
  8032d0:	843ffc04 	addi	r16,r16,-16
  8032d4:	81000448 	cmpgei	r4,r16,17
  8032d8:	b5800204 	addi	r22,r22,8
  8032dc:	20001426 	beq	r4,zero,803330 <___vfprintf_internal_r+0xe9c>
  8032e0:	10800044 	addi	r2,r2,1
  8032e4:	18c00404 	addi	r3,r3,16
  8032e8:	b4400015 	stw	r17,0(r22)
  8032ec:	b3000115 	stw	r12,4(r22)
  8032f0:	d8c01c15 	stw	r3,112(sp)
  8032f4:	d8801b15 	stw	r2,108(sp)
  8032f8:	11000208 	cmpgei	r4,r2,8
  8032fc:	203ff426 	beq	r4,zero,8032d0 <___vfprintf_internal_r+0xe3c>
  803300:	d9801a04 	addi	r6,sp,104
  803304:	900b883a 	mov	r5,r18
  803308:	9809883a 	mov	r4,r19
  80330c:	0809bd40 	call	809bd4 <__sprint_r>
  803310:	103d6f1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  803314:	843ffc04 	addi	r16,r16,-16
  803318:	81000448 	cmpgei	r4,r16,17
  80331c:	d8c01c17 	ldw	r3,112(sp)
  803320:	d8801b17 	ldw	r2,108(sp)
  803324:	dd802704 	addi	r22,sp,156
  803328:	03000404 	movi	r12,16
  80332c:	203fec1e 	bne	r4,zero,8032e0 <___vfprintf_internal_r+0xe4c>
  803330:	8011883a 	mov	r8,r16
  803334:	880f883a 	mov	r7,r17
  803338:	dc000f17 	ldw	r16,60(sp)
  80333c:	dc400e17 	ldw	r17,56(sp)
  803340:	10800044 	addi	r2,r2,1
  803344:	1a07883a 	add	r3,r3,r8
  803348:	d8801b15 	stw	r2,108(sp)
  80334c:	b1c00015 	stw	r7,0(r22)
  803350:	b2000115 	stw	r8,4(r22)
  803354:	d8c01c15 	stw	r3,112(sp)
  803358:	10800208 	cmpgei	r2,r2,8
  80335c:	10014a1e 	bne	r2,zero,803888 <___vfprintf_internal_r+0x13f4>
  803360:	b5800204 	addi	r22,r22,8
  803364:	003d3c06 	br	802858 <___vfprintf_internal_r+0x3c4>
				switch (base) {
  803368:	10c00060 	cmpeqi	r3,r2,1
  80336c:	1803bc1e 	bne	r3,zero,804260 <___vfprintf_internal_r+0x1dcc>
  803370:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  803374:	db000417 	ldw	r12,16(sp)
  803378:	103ea826 	beq	r2,zero,802e1c <___vfprintf_internal_r+0x988>
			cp = buf + BUF;
  80337c:	d9000c17 	ldw	r4,48(sp)
  803380:	dc402704 	addi	r17,sp,156
						*--cp = xdigs[_uquad & 15];
  803384:	a08003cc 	andi	r2,r20,15
						_uquad >>= 4;
  803388:	a806973a 	slli	r3,r21,28
  80338c:	a028d13a 	srli	r20,r20,4
						*--cp = xdigs[_uquad & 15];
  803390:	2085883a 	add	r2,r4,r2
  803394:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  803398:	a82ad13a 	srli	r21,r21,4
  80339c:	1d28b03a 	or	r20,r3,r20
						*--cp = xdigs[_uquad & 15];
  8033a0:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  8033a4:	a544b03a 	or	r2,r20,r21
						*--cp = xdigs[_uquad & 15];
  8033a8:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  8033ac:	103ff51e 	bne	r2,zero,803384 <___vfprintf_internal_r+0xef0>
			size = buf + BUF - cp;
  8033b0:	d8802704 	addi	r2,sp,156
  8033b4:	146bc83a 	sub	r21,r2,r17
  8033b8:	db000415 	stw	r12,16(sp)
  8033bc:	003e4c06 	br	802cf0 <___vfprintf_internal_r+0x85c>
		FLUSH ();	/* copy out the I/O vectors */
  8033c0:	d9801a04 	addi	r6,sp,104
  8033c4:	900b883a 	mov	r5,r18
  8033c8:	9809883a 	mov	r4,r19
  8033cc:	0809bd40 	call	809bd4 <__sprint_r>
  8033d0:	103d3926 	beq	r2,zero,8028b8 <___vfprintf_internal_r+0x424>
  8033d4:	003d3e06 	br	8028d0 <___vfprintf_internal_r+0x43c>
				if (ndig > 1 || flags & ALT) {
  8033d8:	d8800817 	ldw	r2,32(sp)
			PRINT (cp, size);
  8033dc:	da001b17 	ldw	r8,108(sp)
					PRINT ("0", 1);
  8033e0:	18c00044 	addi	r3,r3,1
				if (ndig > 1 || flags & ALT) {
  8033e4:	10800088 	cmpgei	r2,r2,2
			PRINT (cp, size);
  8033e8:	45400044 	addi	r21,r8,1
  8033ec:	b7000204 	addi	fp,r22,8
				if (ndig > 1 || flags & ALT) {
  8033f0:	1000f826 	beq	r2,zero,8037d4 <___vfprintf_internal_r+0x1340>
					PRINT (cp, 1);
  8033f4:	00800044 	movi	r2,1
  8033f8:	b0800115 	stw	r2,4(r22)
  8033fc:	b4400015 	stw	r17,0(r22)
  803400:	d8c01c15 	stw	r3,112(sp)
  803404:	dd401b15 	stw	r21,108(sp)
  803408:	a8800210 	cmplti	r2,r21,8
  80340c:	1001cc26 	beq	r2,zero,803b40 <___vfprintf_internal_r+0x16ac>
					PRINT (decimal_point, decp_len);
  803410:	d8800b17 	ldw	r2,44(sp)
  803414:	d9000d17 	ldw	r4,52(sp)
  803418:	ad400044 	addi	r21,r21,1
  80341c:	1887883a 	add	r3,r3,r2
  803420:	e0800115 	stw	r2,4(fp)
  803424:	e1000015 	stw	r4,0(fp)
  803428:	d8c01c15 	stw	r3,112(sp)
  80342c:	dd401b15 	stw	r21,108(sp)
  803430:	a8800208 	cmpgei	r2,r21,8
  803434:	1001cb1e 	bne	r2,zero,803b64 <___vfprintf_internal_r+0x16d0>
  803438:	e7000204 	addi	fp,fp,8
					if (_fpvalue) {
  80343c:	d9000917 	ldw	r4,36(sp)
  803440:	d9400a17 	ldw	r5,40(sp)
						PRINT (cp, ndig - 1);
  803444:	aa000044 	addi	r8,r21,1
					if (_fpvalue) {
  803448:	000d883a 	mov	r6,zero
  80344c:	000f883a 	mov	r7,zero
  803450:	d8c00e15 	stw	r3,56(sp)
						PRINT (cp, ndig - 1);
  803454:	da000715 	stw	r8,28(sp)
					if (_fpvalue) {
  803458:	080def40 	call	80def4 <__eqdf2>
						PAD (ndig - 1, zeroes);
  80345c:	d8c00817 	ldw	r3,32(sp)
						PRINT (cp, ndig - 1);
  803460:	da000717 	ldw	r8,28(sp)
  803464:	e5800204 	addi	r22,fp,8
						PAD (ndig - 1, zeroes);
  803468:	1affffc4 	addi	r11,r3,-1
					if (_fpvalue) {
  80346c:	d8c00e17 	ldw	r3,56(sp)
  803470:	1000e526 	beq	r2,zero,803808 <___vfprintf_internal_r+0x1374>
					cp++;
  803474:	8a400044 	addi	r9,r17,1
						PRINT (cp, ndig - 1);
  803478:	1ac7883a 	add	r3,r3,r11
  80347c:	da001b15 	stw	r8,108(sp)
  803480:	e2400015 	stw	r9,0(fp)
  803484:	e2c00115 	stw	r11,4(fp)
  803488:	d8c01c15 	stw	r3,112(sp)
  80348c:	42000208 	cmpgei	r8,r8,8
  803490:	40013e1e 	bne	r8,zero,80398c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  803494:	e0800404 	addi	r2,fp,16
  803498:	aa000084 	addi	r8,r21,2
						PRINT (cp, ndig - 1);
  80349c:	b039883a 	mov	fp,r22
				PRINT (expstr, expsize);
  8034a0:	102d883a 	mov	r22,r2
  8034a4:	d9001017 	ldw	r4,64(sp)
  8034a8:	d8801644 	addi	r2,sp,89
  8034ac:	da001b15 	stw	r8,108(sp)
  8034b0:	20c7883a 	add	r3,r4,r3
  8034b4:	e0800015 	stw	r2,0(fp)
  8034b8:	e1000115 	stw	r4,4(fp)
  8034bc:	d8c01c15 	stw	r3,112(sp)
  8034c0:	42000210 	cmplti	r8,r8,8
  8034c4:	403cf11e 	bne	r8,zero,80288c <___vfprintf_internal_r+0x3f8>
  8034c8:	d9801a04 	addi	r6,sp,104
  8034cc:	900b883a 	mov	r5,r18
  8034d0:	9809883a 	mov	r4,r19
  8034d4:	0809bd40 	call	809bd4 <__sprint_r>
  8034d8:	103cfd1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  8034dc:	d8c01c17 	ldw	r3,112(sp)
				PRINT (expstr, expsize);
  8034e0:	dd802704 	addi	r22,sp,156
  8034e4:	003ce906 	br	80288c <___vfprintf_internal_r+0x3f8>
				flags &= ~ZEROPAD;
  8034e8:	db000417 	ldw	r12,16(sp)
  8034ec:	003e4706 	br	802e0c <___vfprintf_internal_r+0x978>
			PAD (width - realsz, blanks);
  8034f0:	03002074 	movhi	r12,129
  8034f4:	39000450 	cmplti	r4,r7,17
  8034f8:	d8801b17 	ldw	r2,108(sp)
  8034fc:	6308c104 	addi	r12,r12,8964
  803500:	2000321e 	bne	r4,zero,8035cc <___vfprintf_internal_r+0x1138>
  803504:	dc401115 	stw	r17,68(sp)
  803508:	b009883a 	mov	r4,r22
  80350c:	9023883a 	mov	r17,r18
  803510:	a82d883a 	mov	r22,r21
  803514:	ddc01215 	stw	r23,72(sp)
  803518:	03c00404 	movi	r15,16
  80351c:	a02f883a 	mov	r23,r20
  803520:	db800e15 	stw	r14,56(sp)
  803524:	8029883a 	mov	r20,r16
  803528:	db400f15 	stw	r13,60(sp)
  80352c:	402b883a 	mov	r21,r8
  803530:	3821883a 	mov	r16,r7
  803534:	6025883a 	mov	r18,r12
  803538:	00000406 	br	80354c <___vfprintf_internal_r+0x10b8>
  80353c:	843ffc04 	addi	r16,r16,-16
  803540:	81800448 	cmpgei	r6,r16,17
  803544:	21000204 	addi	r4,r4,8
  803548:	30001426 	beq	r6,zero,80359c <___vfprintf_internal_r+0x1108>
  80354c:	10800044 	addi	r2,r2,1
  803550:	18c00404 	addi	r3,r3,16
  803554:	24800015 	stw	r18,0(r4)
  803558:	23c00115 	stw	r15,4(r4)
  80355c:	d8c01c15 	stw	r3,112(sp)
  803560:	d8801b15 	stw	r2,108(sp)
  803564:	11800208 	cmpgei	r6,r2,8
  803568:	303ff426 	beq	r6,zero,80353c <___vfprintf_internal_r+0x10a8>
  80356c:	d9801a04 	addi	r6,sp,104
  803570:	880b883a 	mov	r5,r17
  803574:	9809883a 	mov	r4,r19
  803578:	0809bd40 	call	809bd4 <__sprint_r>
  80357c:	1001b91e 	bne	r2,zero,803c64 <___vfprintf_internal_r+0x17d0>
  803580:	843ffc04 	addi	r16,r16,-16
  803584:	81800448 	cmpgei	r6,r16,17
  803588:	d8c01c17 	ldw	r3,112(sp)
  80358c:	d8801b17 	ldw	r2,108(sp)
  803590:	d9002704 	addi	r4,sp,156
  803594:	03c00404 	movi	r15,16
  803598:	303fec1e 	bne	r6,zero,80354c <___vfprintf_internal_r+0x10b8>
  80359c:	800f883a 	mov	r7,r16
  8035a0:	9019883a 	mov	r12,r18
  8035a4:	a021883a 	mov	r16,r20
  8035a8:	8825883a 	mov	r18,r17
  8035ac:	b829883a 	mov	r20,r23
  8035b0:	db800e17 	ldw	r14,56(sp)
  8035b4:	db400f17 	ldw	r13,60(sp)
  8035b8:	ddc01217 	ldw	r23,72(sp)
  8035bc:	dc401117 	ldw	r17,68(sp)
  8035c0:	a811883a 	mov	r8,r21
  8035c4:	b02b883a 	mov	r21,r22
  8035c8:	202d883a 	mov	r22,r4
  8035cc:	10800044 	addi	r2,r2,1
  8035d0:	19c7883a 	add	r3,r3,r7
  8035d4:	d8801b15 	stw	r2,108(sp)
  8035d8:	b3000015 	stw	r12,0(r22)
  8035dc:	b1c00115 	stw	r7,4(r22)
  8035e0:	d8c01c15 	stw	r3,112(sp)
  8035e4:	10800208 	cmpgei	r2,r2,8
  8035e8:	1001671e 	bne	r2,zero,803b88 <___vfprintf_internal_r+0x16f4>
  8035ec:	b5800204 	addi	r22,r22,8
  8035f0:	003c7a06 	br	8027dc <___vfprintf_internal_r+0x348>
			PRINT (&sign, 1);
  8035f4:	d9801a04 	addi	r6,sp,104
  8035f8:	900b883a 	mov	r5,r18
  8035fc:	9809883a 	mov	r4,r19
  803600:	da001115 	stw	r8,68(sp)
  803604:	db400f15 	stw	r13,60(sp)
  803608:	db800e15 	stw	r14,56(sp)
  80360c:	0809bd40 	call	809bd4 <__sprint_r>
  803610:	103caf1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
			PRINT (ox, 2);
  803614:	d8c01c17 	ldw	r3,112(sp)
			PRINT (&sign, 1);
  803618:	da001117 	ldw	r8,68(sp)
  80361c:	db400f17 	ldw	r13,60(sp)
  803620:	db800e17 	ldw	r14,56(sp)
  803624:	dd802704 	addi	r22,sp,156
  803628:	003c7a06 	br	802814 <___vfprintf_internal_r+0x380>
			PRINT (ox, 2);
  80362c:	d9801a04 	addi	r6,sp,104
  803630:	900b883a 	mov	r5,r18
  803634:	9809883a 	mov	r4,r19
  803638:	da000f15 	stw	r8,60(sp)
  80363c:	db400e15 	stw	r13,56(sp)
  803640:	0809bd40 	call	809bd4 <__sprint_r>
  803644:	103ca21e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  803648:	d8c01c17 	ldw	r3,112(sp)
			PRINT (ox, 2);
  80364c:	da000f17 	ldw	r8,60(sp)
  803650:	db400e17 	ldw	r13,56(sp)
  803654:	dd802704 	addi	r22,sp,156
  803658:	003c7b06 	br	802848 <___vfprintf_internal_r+0x3b4>
				} else if (expt <= 0) {
  80365c:	d9401417 	ldw	r5,80(sp)
  803660:	0141570e 	bge	zero,r5,803bc0 <___vfprintf_internal_r+0x172c>
					PRINTANDPAD(cp, convbuf + ndig,
  803664:	d8800717 	ldw	r2,28(sp)
  803668:	d9000817 	ldw	r4,32(sp)
  80366c:	102b883a 	mov	r21,r2
  803670:	2080b916 	blt	r4,r2,803958 <___vfprintf_internal_r+0x14c4>
  803674:	05400a0e 	bge	zero,r21,8036a0 <___vfprintf_internal_r+0x120c>
  803678:	d8801b17 	ldw	r2,108(sp)
  80367c:	1d47883a 	add	r3,r3,r21
  803680:	b4400015 	stw	r17,0(r22)
  803684:	10800044 	addi	r2,r2,1
  803688:	d8801b15 	stw	r2,108(sp)
  80368c:	b5400115 	stw	r21,4(r22)
  803690:	d8c01c15 	stw	r3,112(sp)
  803694:	10800208 	cmpgei	r2,r2,8
  803698:	10032d1e 	bne	r2,zero,804350 <___vfprintf_internal_r+0x1ebc>
  80369c:	b5800204 	addi	r22,r22,8
  8036a0:	a800c516 	blt	r21,zero,8039b8 <___vfprintf_internal_r+0x1524>
  8036a4:	d8800717 	ldw	r2,28(sp)
  8036a8:	156bc83a 	sub	r21,r2,r21
  8036ac:	0540db16 	blt	zero,r21,803a1c <___vfprintf_internal_r+0x1588>
					if (expt < ndig || flags & ALT)
  8036b0:	dd401417 	ldw	r21,80(sp)
  8036b4:	d8800817 	ldw	r2,32(sp)
  8036b8:	a880aa0e 	bge	r21,r2,803964 <___vfprintf_internal_r+0x14d0>
					    PRINT (decimal_point, decp_len);
  8036bc:	d8800d17 	ldw	r2,52(sp)
  8036c0:	d9000b17 	ldw	r4,44(sp)
  8036c4:	b0800015 	stw	r2,0(r22)
  8036c8:	d8801b17 	ldw	r2,108(sp)
  8036cc:	1907883a 	add	r3,r3,r4
  8036d0:	b1000115 	stw	r4,4(r22)
  8036d4:	10800044 	addi	r2,r2,1
  8036d8:	d8801b15 	stw	r2,108(sp)
  8036dc:	d8c01c15 	stw	r3,112(sp)
  8036e0:	10800208 	cmpgei	r2,r2,8
  8036e4:	1003111e 	bne	r2,zero,80432c <___vfprintf_internal_r+0x1e98>
  8036e8:	b5800204 	addi	r22,r22,8
					PRINTANDPAD (cp, convbuf + ndig,
  8036ec:	d9000817 	ldw	r4,32(sp)
  8036f0:	d9400717 	ldw	r5,28(sp)
  8036f4:	2545c83a 	sub	r2,r4,r21
  8036f8:	2149c83a 	sub	r4,r4,r5
  8036fc:	102b883a 	mov	r21,r2
  803700:	2080010e 	bge	r4,r2,803708 <___vfprintf_internal_r+0x1274>
  803704:	202b883a 	mov	r21,r4
  803708:	05400c0e 	bge	zero,r21,80373c <___vfprintf_internal_r+0x12a8>
					cp += lead;
  80370c:	d9000717 	ldw	r4,28(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  803710:	1d47883a 	add	r3,r3,r21
  803714:	b5400115 	stw	r21,4(r22)
					cp += lead;
  803718:	8913883a 	add	r9,r17,r4
					PRINTANDPAD (cp, convbuf + ndig,
  80371c:	d9001b17 	ldw	r4,108(sp)
  803720:	b2400015 	stw	r9,0(r22)
  803724:	d8c01c15 	stw	r3,112(sp)
  803728:	21000044 	addi	r4,r4,1
  80372c:	d9001b15 	stw	r4,108(sp)
  803730:	21000208 	cmpgei	r4,r4,8
  803734:	2003111e 	bne	r4,zero,80437c <___vfprintf_internal_r+0x1ee8>
  803738:	b5800204 	addi	r22,r22,8
  80373c:	a800010e 	bge	r21,zero,803744 <___vfprintf_internal_r+0x12b0>
  803740:	002b883a 	mov	r21,zero
  803744:	156bc83a 	sub	r21,r2,r21
  803748:	057c500e 	bge	zero,r21,80288c <___vfprintf_internal_r+0x3f8>
  80374c:	01c02074 	movhi	r7,129
  803750:	a9000450 	cmplti	r4,r21,17
  803754:	d8801b17 	ldw	r2,108(sp)
  803758:	39c8bd04 	addi	r7,r7,8948
  80375c:	2001c51e 	bne	r4,zero,803e74 <___vfprintf_internal_r+0x19e0>
  803760:	07000404 	movi	fp,16
  803764:	3823883a 	mov	r17,r7
  803768:	00000406 	br	80377c <___vfprintf_internal_r+0x12e8>
  80376c:	b5800204 	addi	r22,r22,8
  803770:	ad7ffc04 	addi	r21,r21,-16
  803774:	a9000448 	cmpgei	r4,r21,17
  803778:	2001bd26 	beq	r4,zero,803e70 <___vfprintf_internal_r+0x19dc>
  80377c:	10800044 	addi	r2,r2,1
  803780:	18c00404 	addi	r3,r3,16
  803784:	b4400015 	stw	r17,0(r22)
  803788:	b7000115 	stw	fp,4(r22)
  80378c:	d8c01c15 	stw	r3,112(sp)
  803790:	d8801b15 	stw	r2,108(sp)
  803794:	11000208 	cmpgei	r4,r2,8
  803798:	203ff426 	beq	r4,zero,80376c <___vfprintf_internal_r+0x12d8>
  80379c:	d9801a04 	addi	r6,sp,104
  8037a0:	900b883a 	mov	r5,r18
  8037a4:	9809883a 	mov	r4,r19
  8037a8:	0809bd40 	call	809bd4 <__sprint_r>
  8037ac:	103c481e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  8037b0:	d8c01c17 	ldw	r3,112(sp)
  8037b4:	d8801b17 	ldw	r2,108(sp)
  8037b8:	dd802704 	addi	r22,sp,156
  8037bc:	003fec06 	br	803770 <___vfprintf_internal_r+0x12dc>
			if (_uquad != 0 || prec != 0) {
  8037c0:	4002a71e 	bne	r8,zero,804260 <___vfprintf_internal_r+0x1dcc>
  8037c4:	0011883a 	mov	r8,zero
  8037c8:	002b883a 	mov	r21,zero
			cp = buf + BUF;
  8037cc:	dc402704 	addi	r17,sp,156
  8037d0:	003d4706 	br	802cf0 <___vfprintf_internal_r+0x85c>
				if (ndig > 1 || flags & ALT) {
  8037d4:	d8800417 	ldw	r2,16(sp)
  8037d8:	1080004c 	andi	r2,r2,1
  8037dc:	103f051e 	bne	r2,zero,8033f4 <___vfprintf_internal_r+0xf60>
					PRINT (cp, 1);
  8037e0:	00800044 	movi	r2,1
  8037e4:	dd401b15 	stw	r21,108(sp)
  8037e8:	b4400015 	stw	r17,0(r22)
  8037ec:	b0800115 	stw	r2,4(r22)
  8037f0:	d8c01c15 	stw	r3,112(sp)
  8037f4:	ad400208 	cmpgei	r21,r21,8
  8037f8:	a800641e 	bne	r21,zero,80398c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  8037fc:	42000084 	addi	r8,r8,2
  803800:	b5800404 	addi	r22,r22,16
  803804:	003f2706 	br	8034a4 <___vfprintf_internal_r+0x1010>
						PAD (ndig - 1, zeroes);
  803808:	02ff260e 	bge	zero,r11,8034a4 <___vfprintf_internal_r+0x1010>
  80380c:	58800450 	cmplti	r2,r11,17
  803810:	01c02074 	movhi	r7,129
  803814:	10034c1e 	bne	r2,zero,804548 <___vfprintf_internal_r+0x20b4>
  803818:	39c8bd04 	addi	r7,r7,8948
  80381c:	dc000715 	stw	r16,28(sp)
  803820:	05800404 	movi	r22,16
  803824:	5823883a 	mov	r17,r11
  803828:	402b883a 	mov	r21,r8
  80382c:	3821883a 	mov	r16,r7
  803830:	00000506 	br	803848 <___vfprintf_internal_r+0x13b4>
  803834:	e7000204 	addi	fp,fp,8
  803838:	8c7ffc04 	addi	r17,r17,-16
  80383c:	88800448 	cmpgei	r2,r17,17
  803840:	1001d626 	beq	r2,zero,803f9c <___vfprintf_internal_r+0x1b08>
  803844:	ad400044 	addi	r21,r21,1
  803848:	18c00404 	addi	r3,r3,16
  80384c:	e4000015 	stw	r16,0(fp)
  803850:	e5800115 	stw	r22,4(fp)
  803854:	d8c01c15 	stw	r3,112(sp)
  803858:	dd401b15 	stw	r21,108(sp)
  80385c:	a8800208 	cmpgei	r2,r21,8
  803860:	103ff426 	beq	r2,zero,803834 <___vfprintf_internal_r+0x13a0>
  803864:	d9801a04 	addi	r6,sp,104
  803868:	900b883a 	mov	r5,r18
  80386c:	9809883a 	mov	r4,r19
  803870:	0809bd40 	call	809bd4 <__sprint_r>
  803874:	103c161e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  803878:	dd401b17 	ldw	r21,108(sp)
  80387c:	d8c01c17 	ldw	r3,112(sp)
  803880:	df002704 	addi	fp,sp,156
  803884:	003fec06 	br	803838 <___vfprintf_internal_r+0x13a4>
		PAD (dprec - size, zeroes);
  803888:	d9801a04 	addi	r6,sp,104
  80388c:	900b883a 	mov	r5,r18
  803890:	9809883a 	mov	r4,r19
  803894:	0809bd40 	call	809bd4 <__sprint_r>
  803898:	103c0d1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  80389c:	d8c01c17 	ldw	r3,112(sp)
		PAD (dprec - size, zeroes);
  8038a0:	dd802704 	addi	r22,sp,156
  8038a4:	003bec06 	br	802858 <___vfprintf_internal_r+0x3c4>
					if (expt < ndig || flags & ALT) {
  8038a8:	d8800417 	ldw	r2,16(sp)
  8038ac:	1080004c 	andi	r2,r2,1
  8038b0:	103bf626 	beq	r2,zero,80288c <___vfprintf_internal_r+0x3f8>
  8038b4:	003e1506 	br	80310c <___vfprintf_internal_r+0xc78>
			cp = buf + BUF;
  8038b8:	dc402704 	addi	r17,sp,156
  8038bc:	003d0c06 	br	802cf0 <___vfprintf_internal_r+0x85c>
				ox[0] = '0';
  8038c0:	00800c04 	movi	r2,48
  8038c4:	d8801385 	stb	r2,78(sp)
				ox[1] = ch;
  8038c8:	df0013c5 	stb	fp,79(sp)
				flags |= HEXPREFIX;
  8038cc:	63000094 	ori	r12,r12,2
			base = HEX;
  8038d0:	00800084 	movi	r2,2
  8038d4:	003c3b06 	br	8029c4 <___vfprintf_internal_r+0x530>
			_uquad = UARG ();
  8038d8:	25000017 	ldw	r20,0(r4)
  8038dc:	002b883a 	mov	r21,zero
  8038e0:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  8038e4:	00800044 	movi	r2,1
  8038e8:	003c3606 	br	8029c4 <___vfprintf_internal_r+0x530>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  8038ec:	d9000517 	ldw	r4,20(sp)
  8038f0:	2005d7fa 	srai	r2,r4,31
  8038f4:	19000015 	stw	r4,0(r3)
  8038f8:	18800115 	stw	r2,4(r3)
  8038fc:	003b1906 	br	802564 <___vfprintf_internal_r+0xd0>
hex:			_uquad = UARG ();
  803900:	25000017 	ldw	r20,0(r4)
  803904:	002b883a 	mov	r21,zero
  803908:	d8c00615 	stw	r3,24(sp)
  80390c:	003d1b06 	br	802d7c <___vfprintf_internal_r+0x8e8>
			_uquad = UARG ();
  803910:	25000017 	ldw	r20,0(r4)
  803914:	002b883a 	mov	r21,zero
  803918:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  80391c:	0005883a 	mov	r2,zero
  803920:	003c2806 	br	8029c4 <___vfprintf_internal_r+0x530>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
  803924:	18800017 	ldw	r2,0(r3)
  803928:	d8800915 	stw	r2,36(sp)
  80392c:	18800117 	ldw	r2,4(r3)
  803930:	d8800a15 	stw	r2,40(sp)
  803934:	003c5906 	br	802a9c <___vfprintf_internal_r+0x608>
			_uquad = SARG ();
  803938:	25000017 	ldw	r20,0(r4)
  80393c:	d8c00615 	stw	r3,24(sp)
  803940:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  803944:	a805883a 	mov	r2,r21
  803948:	003cd706 	br	802ca8 <___vfprintf_internal_r+0x814>
			width = -width;
  80394c:	0421c83a 	sub	r16,zero,r16
			width = GET_ARG (n, ap, int);
  803950:	d8800615 	stw	r2,24(sp)
  803954:	003d6306 	br	802ee4 <___vfprintf_internal_r+0xa50>
  803958:	202b883a 	mov	r21,r4
					PRINTANDPAD(cp, convbuf + ndig,
  80395c:	057f4616 	blt	zero,r21,803678 <___vfprintf_internal_r+0x11e4>
  803960:	003f4f06 	br	8036a0 <___vfprintf_internal_r+0x120c>
					if (expt < ndig || flags & ALT)
  803964:	d8800417 	ldw	r2,16(sp)
  803968:	1080004c 	andi	r2,r2,1
  80396c:	103f531e 	bne	r2,zero,8036bc <___vfprintf_internal_r+0x1228>
					PRINTANDPAD (cp, convbuf + ndig,
  803970:	d9000817 	ldw	r4,32(sp)
  803974:	d9400717 	ldw	r5,28(sp)
  803978:	2545c83a 	sub	r2,r4,r21
  80397c:	216bc83a 	sub	r21,r4,r5
  803980:	157f6e0e 	bge	r2,r21,80373c <___vfprintf_internal_r+0x12a8>
  803984:	102b883a 	mov	r21,r2
  803988:	003f6c06 	br	80373c <___vfprintf_internal_r+0x12a8>
					PRINT (cp, 1);
  80398c:	d9801a04 	addi	r6,sp,104
  803990:	900b883a 	mov	r5,r18
  803994:	9809883a 	mov	r4,r19
  803998:	0809bd40 	call	809bd4 <__sprint_r>
  80399c:	103bcc1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
				PRINT (expstr, expsize);
  8039a0:	da001b17 	ldw	r8,108(sp)
  8039a4:	d8c01c17 	ldw	r3,112(sp)
  8039a8:	dd802904 	addi	r22,sp,164
  8039ac:	42000044 	addi	r8,r8,1
					PRINT (cp, 1);
  8039b0:	df002704 	addi	fp,sp,156
  8039b4:	003ebb06 	br	8034a4 <___vfprintf_internal_r+0x1010>
					PRINTANDPAD(cp, convbuf + ndig,
  8039b8:	002b883a 	mov	r21,zero
  8039bc:	003f3906 	br	8036a4 <___vfprintf_internal_r+0x1210>
rflag:		ch = *fmt++;
  8039c0:	bf000043 	ldbu	fp,1(r23)
				flags |= QUADINT;
  8039c4:	63000814 	ori	r12,r12,32
				fmt++;
  8039c8:	bdc00044 	addi	r23,r23,1
  8039cc:	e2c03fcc 	andi	r11,fp,255
  8039d0:	5ac0201c 	xori	r11,r11,128
  8039d4:	5affe004 	addi	r11,r11,-128
  8039d8:	003afa06 	br	8025c4 <___vfprintf_internal_r+0x130>
						PRINT (decimal_point, decp_len);
  8039dc:	d9801a04 	addi	r6,sp,104
  8039e0:	900b883a 	mov	r5,r18
  8039e4:	9809883a 	mov	r4,r19
  8039e8:	0809bd40 	call	809bd4 <__sprint_r>
  8039ec:	103bb81e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
		FLUSH ();	/* copy out the I/O vectors */
  8039f0:	d8c01c17 	ldw	r3,112(sp)
						PRINT (decimal_point, decp_len);
  8039f4:	dd802704 	addi	r22,sp,156
  8039f8:	003dd006 	br	80313c <___vfprintf_internal_r+0xca8>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  8039fc:	408001f0 	cmpltui	r2,r8,7
  803a00:	402b883a 	mov	r21,r8
  803a04:	1001e726 	beq	r2,zero,8041a4 <___vfprintf_internal_r+0x1d10>
				cp = "(null)";
  803a08:	04402074 	movhi	r17,129
  803a0c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  803a10:	d8c00615 	stw	r3,24(sp)
				cp = "(null)";
  803a14:	8c48ba04 	addi	r17,r17,8936
  803a18:	003b6306 	br	8027a8 <___vfprintf_internal_r+0x314>
					PRINTANDPAD(cp, convbuf + ndig,
  803a1c:	01c02074 	movhi	r7,129
  803a20:	a9000450 	cmplti	r4,r21,17
  803a24:	d8801b17 	ldw	r2,108(sp)
  803a28:	39c8bd04 	addi	r7,r7,8948
  803a2c:	2001c21e 	bne	r4,zero,804138 <___vfprintf_internal_r+0x1ca4>
  803a30:	dc000e15 	stw	r16,56(sp)
  803a34:	07000404 	movi	fp,16
  803a38:	3821883a 	mov	r16,r7
  803a3c:	00000406 	br	803a50 <___vfprintf_internal_r+0x15bc>
  803a40:	b5800204 	addi	r22,r22,8
  803a44:	ad7ffc04 	addi	r21,r21,-16
  803a48:	a9000448 	cmpgei	r4,r21,17
  803a4c:	2001b826 	beq	r4,zero,804130 <___vfprintf_internal_r+0x1c9c>
  803a50:	10800044 	addi	r2,r2,1
  803a54:	18c00404 	addi	r3,r3,16
  803a58:	b4000015 	stw	r16,0(r22)
  803a5c:	b7000115 	stw	fp,4(r22)
  803a60:	d8c01c15 	stw	r3,112(sp)
  803a64:	d8801b15 	stw	r2,108(sp)
  803a68:	11000208 	cmpgei	r4,r2,8
  803a6c:	203ff426 	beq	r4,zero,803a40 <___vfprintf_internal_r+0x15ac>
  803a70:	d9801a04 	addi	r6,sp,104
  803a74:	900b883a 	mov	r5,r18
  803a78:	9809883a 	mov	r4,r19
  803a7c:	0809bd40 	call	809bd4 <__sprint_r>
  803a80:	103b931e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  803a84:	d8c01c17 	ldw	r3,112(sp)
  803a88:	d8801b17 	ldw	r2,108(sp)
  803a8c:	dd802704 	addi	r22,sp,156
  803a90:	003fec06 	br	803a44 <___vfprintf_internal_r+0x15b0>
			cp = buf + BUF;
  803a94:	dc402704 	addi	r17,sp,156
  803a98:	a805883a 	mov	r2,r21
  803a9c:	dc000715 	stw	r16,28(sp)
  803aa0:	902b883a 	mov	r21,r18
  803aa4:	8821883a 	mov	r16,r17
  803aa8:	db000415 	stw	r12,16(sp)
  803aac:	a023883a 	mov	r17,r20
  803ab0:	da000e15 	stw	r8,56(sp)
  803ab4:	9829883a 	mov	r20,r19
  803ab8:	1025883a 	mov	r18,r2
  803abc:	6827883a 	mov	r19,r13
					  *--cp = to_char (_uquad % 10);
  803ac0:	8809883a 	mov	r4,r17
  803ac4:	900b883a 	mov	r5,r18
  803ac8:	01800284 	movi	r6,10
  803acc:	000f883a 	mov	r7,zero
  803ad0:	080c5340 	call	80c534 <__umoddi3>
  803ad4:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  803ad8:	8809883a 	mov	r4,r17
  803adc:	900b883a 	mov	r5,r18
  803ae0:	01800284 	movi	r6,10
  803ae4:	000f883a 	mov	r7,zero
					  *--cp = to_char (_uquad % 10);
  803ae8:	80bfffc5 	stb	r2,-1(r16)
					  _uquad /= 10;
  803aec:	080bf140 	call	80bf14 <__udivdi3>
  803af0:	900d883a 	mov	r6,r18
  803af4:	880f883a 	mov	r7,r17
					  *--cp = to_char (_uquad % 10);
  803af8:	843fffc4 	addi	r16,r16,-1
					  _uquad /= 10;
  803afc:	1023883a 	mov	r17,r2
  803b00:	1825883a 	mov	r18,r3
					} while (_uquad != 0);
  803b04:	303fee1e 	bne	r6,zero,803ac0 <___vfprintf_internal_r+0x162c>
  803b08:	39c002a8 	cmpgeui	r7,r7,10
  803b0c:	383fec1e 	bne	r7,zero,803ac0 <___vfprintf_internal_r+0x162c>
			size = buf + BUF - cp;
  803b10:	8023883a 	mov	r17,r16
  803b14:	d8802704 	addi	r2,sp,156
  803b18:	981b883a 	mov	r13,r19
  803b1c:	a825883a 	mov	r18,r21
  803b20:	dc000717 	ldw	r16,28(sp)
  803b24:	da000e17 	ldw	r8,56(sp)
  803b28:	a027883a 	mov	r19,r20
  803b2c:	146bc83a 	sub	r21,r2,r17
  803b30:	003c6f06 	br	802cf0 <___vfprintf_internal_r+0x85c>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  803b34:	d8800517 	ldw	r2,20(sp)
  803b38:	18800015 	stw	r2,0(r3)
  803b3c:	003a8906 	br	802564 <___vfprintf_internal_r+0xd0>
					PRINT (cp, 1);
  803b40:	d9801a04 	addi	r6,sp,104
  803b44:	900b883a 	mov	r5,r18
  803b48:	9809883a 	mov	r4,r19
  803b4c:	0809bd40 	call	809bd4 <__sprint_r>
  803b50:	103b5f1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
					PRINT (decimal_point, decp_len);
  803b54:	d8c01c17 	ldw	r3,112(sp)
  803b58:	dd401b17 	ldw	r21,108(sp)
					PRINT (cp, 1);
  803b5c:	df002704 	addi	fp,sp,156
  803b60:	003e2b06 	br	803410 <___vfprintf_internal_r+0xf7c>
					PRINT (decimal_point, decp_len);
  803b64:	d9801a04 	addi	r6,sp,104
  803b68:	900b883a 	mov	r5,r18
  803b6c:	9809883a 	mov	r4,r19
  803b70:	0809bd40 	call	809bd4 <__sprint_r>
  803b74:	103b561e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig - 1);
  803b78:	d8c01c17 	ldw	r3,112(sp)
  803b7c:	dd401b17 	ldw	r21,108(sp)
					PRINT (decimal_point, decp_len);
  803b80:	df002704 	addi	fp,sp,156
  803b84:	003e2d06 	br	80343c <___vfprintf_internal_r+0xfa8>
			PAD (width - realsz, blanks);
  803b88:	d9801a04 	addi	r6,sp,104
  803b8c:	900b883a 	mov	r5,r18
  803b90:	9809883a 	mov	r4,r19
  803b94:	da001115 	stw	r8,68(sp)
  803b98:	db400f15 	stw	r13,60(sp)
  803b9c:	db800e15 	stw	r14,56(sp)
  803ba0:	0809bd40 	call	809bd4 <__sprint_r>
  803ba4:	103b4a1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
			PRINT (&sign, 1);
  803ba8:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, blanks);
  803bac:	da001117 	ldw	r8,68(sp)
  803bb0:	db400f17 	ldw	r13,60(sp)
  803bb4:	db800e17 	ldw	r14,56(sp)
  803bb8:	dd802704 	addi	r22,sp,156
  803bbc:	003b0706 	br	8027dc <___vfprintf_internal_r+0x348>
					PRINT ("0", 1);
  803bc0:	d8801b17 	ldw	r2,108(sp)
  803bc4:	01002074 	movhi	r4,129
  803bc8:	2108bc04 	addi	r4,r4,8944
  803bcc:	10800044 	addi	r2,r2,1
  803bd0:	18c00044 	addi	r3,r3,1
  803bd4:	b1000015 	stw	r4,0(r22)
  803bd8:	01000044 	movi	r4,1
  803bdc:	d8801b15 	stw	r2,108(sp)
  803be0:	b1000115 	stw	r4,4(r22)
  803be4:	d8c01c15 	stw	r3,112(sp)
  803be8:	10800208 	cmpgei	r2,r2,8
  803bec:	1001641e 	bne	r2,zero,804180 <___vfprintf_internal_r+0x1cec>
  803bf0:	b5800204 	addi	r22,r22,8
					if (expt || ndig || flags & ALT) {
  803bf4:	2800bd1e 	bne	r5,zero,803eec <___vfprintf_internal_r+0x1a58>
  803bf8:	d8800417 	ldw	r2,16(sp)
  803bfc:	d9000817 	ldw	r4,32(sp)
  803c00:	1080004c 	andi	r2,r2,1
  803c04:	1104b03a 	or	r2,r2,r4
  803c08:	103b2026 	beq	r2,zero,80288c <___vfprintf_internal_r+0x3f8>
						PRINT (decimal_point, decp_len);
  803c0c:	d8800d17 	ldw	r2,52(sp)
  803c10:	d9000b17 	ldw	r4,44(sp)
  803c14:	b0800015 	stw	r2,0(r22)
  803c18:	d8801b17 	ldw	r2,108(sp)
  803c1c:	20c7883a 	add	r3,r4,r3
  803c20:	b1000115 	stw	r4,4(r22)
  803c24:	10800044 	addi	r2,r2,1
  803c28:	d8c01c15 	stw	r3,112(sp)
  803c2c:	d8801b15 	stw	r2,108(sp)
  803c30:	11000208 	cmpgei	r4,r2,8
  803c34:	2001771e 	bne	r4,zero,804214 <___vfprintf_internal_r+0x1d80>
  803c38:	b5800204 	addi	r22,r22,8
						PRINT (cp, ndig);
  803c3c:	d9000817 	ldw	r4,32(sp)
  803c40:	10800044 	addi	r2,r2,1
  803c44:	d8801b15 	stw	r2,108(sp)
  803c48:	20c7883a 	add	r3,r4,r3
  803c4c:	b4400015 	stw	r17,0(r22)
  803c50:	b1000115 	stw	r4,4(r22)
  803c54:	d8c01c15 	stw	r3,112(sp)
  803c58:	10800208 	cmpgei	r2,r2,8
  803c5c:	103b0a26 	beq	r2,zero,802888 <___vfprintf_internal_r+0x3f4>
  803c60:	003e1906 	br	8034c8 <___vfprintf_internal_r+0x1034>
  803c64:	8825883a 	mov	r18,r17
  803c68:	003b1906 	br	8028d0 <___vfprintf_internal_r+0x43c>
			if (isnan (_fpvalue)) {
  803c6c:	d9000917 	ldw	r4,36(sp)
  803c70:	d9400a17 	ldw	r5,40(sp)
  803c74:	da000615 	stw	r8,24(sp)
  803c78:	200d883a 	mov	r6,r4
  803c7c:	280f883a 	mov	r7,r5
  803c80:	db000415 	stw	r12,16(sp)
  803c84:	080f1a40 	call	80f1a4 <__unorddf2>
  803c88:	db000417 	ldw	r12,16(sp)
  803c8c:	da000617 	ldw	r8,24(sp)
  803c90:	1002061e 	bne	r2,zero,8044ac <___vfprintf_internal_r+0x2018>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  803c94:	057ff7c4 	movi	r21,-33
			if (prec == -1) {
  803c98:	40bfffe0 	cmpeqi	r2,r8,-1
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  803c9c:	e56a703a 	and	r21,fp,r21
			if (prec == -1) {
  803ca0:	1001b41e 	bne	r2,zero,804374 <___vfprintf_internal_r+0x1ee0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  803ca4:	a88011d8 	cmpnei	r2,r21,71
  803ca8:	10015726 	beq	r2,zero,804208 <___vfprintf_internal_r+0x1d74>
			flags |= FPT;
  803cac:	60804014 	ori	r2,r12,256
  803cb0:	d8800415 	stw	r2,16(sp)
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
  803cb4:	d8800a17 	ldw	r2,40(sp)
  803cb8:	10012d16 	blt	r2,zero,804170 <___vfprintf_internal_r+0x1cdc>
  803cbc:	dd000a17 	ldw	r20,40(sp)
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
  803cc0:	d8000605 	stb	zero,24(sp)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
  803cc4:	e08019a0 	cmpeqi	r2,fp,102
  803cc8:	d8800f15 	stw	r2,60(sp)
  803ccc:	1000d21e 	bne	r2,zero,804018 <___vfprintf_internal_r+0x1b84>
  803cd0:	e08011a0 	cmpeqi	r2,fp,70
  803cd4:	1000d01e 	bne	r2,zero,804018 <___vfprintf_internal_r+0x1b84>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
  803cd8:	a8801158 	cmpnei	r2,r21,69
  803cdc:	10016226 	beq	r2,zero,804268 <___vfprintf_internal_r+0x1dd4>
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  803ce0:	d8801804 	addi	r2,sp,96
  803ce4:	d8800315 	stw	r2,12(sp)
  803ce8:	d9400917 	ldw	r5,36(sp)
  803cec:	d8801504 	addi	r2,sp,84
  803cf0:	d8800215 	stw	r2,8(sp)
  803cf4:	d8801404 	addi	r2,sp,80
  803cf8:	da000015 	stw	r8,0(sp)
  803cfc:	9809883a 	mov	r4,r19
  803d00:	d8800115 	stw	r2,4(sp)
  803d04:	01c00084 	movi	r7,2
  803d08:	a00d883a 	mov	r6,r20
  803d0c:	db000815 	stw	r12,32(sp)
  803d10:	da000715 	stw	r8,28(sp)
  803d14:	08049f00 	call	8049f0 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  803d18:	da000717 	ldw	r8,28(sp)
  803d1c:	e10019d8 	cmpnei	r4,fp,103
  803d20:	db000817 	ldw	r12,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  803d24:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  803d28:	4007883a 	mov	r3,r8
  803d2c:	2001621e 	bne	r4,zero,8042b8 <___vfprintf_internal_r+0x1e24>
  803d30:	6080004c 	andi	r2,r12,1
  803d34:	1001621e 	bne	r2,zero,8042c0 <___vfprintf_internal_r+0x1e2c>
				if (expt <= -4 || expt > prec)
  803d38:	d8801417 	ldw	r2,80(sp)
			if (ch == 'g' || ch == 'G') {
  803d3c:	ad4011e0 	cmpeqi	r21,r21,71
				if (expt <= -4 || expt > prec)
  803d40:	d8800715 	stw	r2,28(sp)
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
  803d44:	d8801817 	ldw	r2,96(sp)
  803d48:	1445c83a 	sub	r2,r2,r17
  803d4c:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  803d50:	a8000526 	beq	r21,zero,803d68 <___vfprintf_internal_r+0x18d4>
				if (expt <= -4 || expt > prec)
  803d54:	d8c00717 	ldw	r3,28(sp)
  803d58:	18bfff50 	cmplti	r2,r3,-3
  803d5c:	1000011e 	bne	r2,zero,803d64 <___vfprintf_internal_r+0x18d0>
  803d60:	40c1670e 	bge	r8,r3,804300 <___vfprintf_internal_r+0x1e6c>
					ch -= 2; /* 'e' or 'E' */
  803d64:	e73fff84 	addi	fp,fp,-2
				--expt;
  803d68:	d8800717 	ldw	r2,28(sp)
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
  803d6c:	df001645 	stb	fp,89(sp)
				--expt;
  803d70:	157fffc4 	addi	r21,r2,-1
  803d74:	dd401415 	stw	r21,80(sp)
	if (exp < 0) {
  803d78:	a801d416 	blt	r21,zero,8044cc <___vfprintf_internal_r+0x2038>
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
  803d7c:	00800ac4 	movi	r2,43
  803d80:	d8801685 	stb	r2,90(sp)
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
  803d84:	a8800290 	cmplti	r2,r21,10
  803d88:	1001c11e 	bne	r2,zero,804490 <___vfprintf_internal_r+0x1ffc>
	t = expbuf + MAXEXPLEN;
  803d8c:	d98019c4 	addi	r6,sp,103
  803d90:	9029883a 	mov	r20,r18
  803d94:	dc400715 	stw	r17,28(sp)
  803d98:	8025883a 	mov	r18,r16
  803d9c:	db000f15 	stw	r12,60(sp)
  803da0:	3021883a 	mov	r16,r6
		do {
			*--t = to_char (exp % 10);
  803da4:	a809883a 	mov	r4,r21
  803da8:	01400284 	movi	r5,10
  803dac:	080cb780 	call	80cb78 <__modsi3>
  803db0:	10800c04 	addi	r2,r2,48
		} while ((exp /= 10) > 9);
  803db4:	a809883a 	mov	r4,r21
			*--t = to_char (exp % 10);
  803db8:	80bfffc5 	stb	r2,-1(r16)
		} while ((exp /= 10) > 9);
  803dbc:	01400284 	movi	r5,10
  803dc0:	080caf80 	call	80caf8 <__divsi3>
  803dc4:	a9001908 	cmpgei	r4,r21,100
  803dc8:	8023883a 	mov	r17,r16
  803dcc:	102b883a 	mov	r21,r2
			*--t = to_char (exp % 10);
  803dd0:	843fffc4 	addi	r16,r16,-1
		} while ((exp /= 10) > 9);
  803dd4:	203ff31e 	bne	r4,zero,803da4 <___vfprintf_internal_r+0x1910>
		*--t = to_char (exp);
  803dd8:	800d883a 	mov	r6,r16
  803ddc:	11000c04 	addi	r4,r2,48
  803de0:	9021883a 	mov	r16,r18
  803de4:	a025883a 	mov	r18,r20
  803de8:	8829883a 	mov	r20,r17
  803dec:	a0bfff84 	addi	r2,r20,-2
  803df0:	313fffc5 	stb	r4,-1(r6)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  803df4:	d8c019c4 	addi	r3,sp,103
		*--t = to_char (exp);
  803df8:	db000f17 	ldw	r12,60(sp)
  803dfc:	dc400717 	ldw	r17,28(sp)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  803e00:	10c1d62e 	bgeu	r2,r3,80455c <___vfprintf_internal_r+0x20c8>
  803e04:	d8c016c4 	addi	r3,sp,91
  803e08:	00000106 	br	803e10 <___vfprintf_internal_r+0x197c>
  803e0c:	11000003 	ldbu	r4,0(r2)
  803e10:	19000005 	stb	r4,0(r3)
  803e14:	10800044 	addi	r2,r2,1
  803e18:	d90019c4 	addi	r4,sp,103
  803e1c:	18c00044 	addi	r3,r3,1
  803e20:	113ffa1e 	bne	r2,r4,803e0c <___vfprintf_internal_r+0x1978>
  803e24:	d8801a44 	addi	r2,sp,105
  803e28:	d8c016c4 	addi	r3,sp,91
  803e2c:	1505c83a 	sub	r2,r2,r20
  803e30:	1885883a 	add	r2,r3,r2
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
  803e34:	d8c01644 	addi	r3,sp,89
  803e38:	10c5c83a 	sub	r2,r2,r3
  803e3c:	d8801015 	stw	r2,64(sp)
				if (ndig > 1 || flags & ALT)
  803e40:	d8c00817 	ldw	r3,32(sp)
				size = expsize + ndig;
  803e44:	d9001017 	ldw	r4,64(sp)
				if (ndig > 1 || flags & ALT)
  803e48:	18800088 	cmpgei	r2,r3,2
				size = expsize + ndig;
  803e4c:	192b883a 	add	r21,r3,r4
				if (ndig > 1 || flags & ALT)
  803e50:	1001aa26 	beq	r2,zero,8044fc <___vfprintf_internal_r+0x2068>
					size += decp_len;
  803e54:	d8800b17 	ldw	r2,44(sp)
  803e58:	a8ab883a 	add	r21,r21,r2
		realsz = dprec > size ? dprec : size;
  803e5c:	a829883a 	mov	r20,r21
  803e60:	a800010e 	bge	r21,zero,803e68 <___vfprintf_internal_r+0x19d4>
  803e64:	0029883a 	mov	r20,zero
		lead = 0;
  803e68:	d8000715 	stw	zero,28(sp)
  803e6c:	00009d06 	br	8040e4 <___vfprintf_internal_r+0x1c50>
  803e70:	880f883a 	mov	r7,r17
					PRINTANDPAD (cp, convbuf + ndig,
  803e74:	10800044 	addi	r2,r2,1
  803e78:	1d47883a 	add	r3,r3,r21
  803e7c:	b1c00015 	stw	r7,0(r22)
  803e80:	003a7c06 	br	802874 <___vfprintf_internal_r+0x3e0>
					PRINT ("0", 1);
  803e84:	d9801a04 	addi	r6,sp,104
  803e88:	900b883a 	mov	r5,r18
  803e8c:	9809883a 	mov	r4,r19
  803e90:	0809bd40 	call	809bd4 <__sprint_r>
  803e94:	103a8e1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
						PRINT (decimal_point, decp_len);
  803e98:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  803e9c:	dd802704 	addi	r22,sp,156
  803ea0:	003c9706 	br	803100 <___vfprintf_internal_r+0xc6c>
			PAD (width - realsz, zeroes);
  803ea4:	d9801a04 	addi	r6,sp,104
  803ea8:	900b883a 	mov	r5,r18
  803eac:	9809883a 	mov	r4,r19
  803eb0:	da000e15 	stw	r8,56(sp)
  803eb4:	0809bd40 	call	809bd4 <__sprint_r>
  803eb8:	103a851e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
			PRINT (cp, size);
  803ebc:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, zeroes);
  803ec0:	da000e17 	ldw	r8,56(sp)
  803ec4:	dd802704 	addi	r22,sp,156
  803ec8:	003a6106 	br	802850 <___vfprintf_internal_r+0x3bc>
				size = strlen (cp);
  803ecc:	8809883a 	mov	r4,r17
  803ed0:	db000415 	stw	r12,16(sp)
  803ed4:	d8c00615 	stw	r3,24(sp)
  803ed8:	08023fc0 	call	8023fc <strlen>
  803edc:	db000417 	ldw	r12,16(sp)
  803ee0:	102b883a 	mov	r21,r2
  803ee4:	1029883a 	mov	r20,r2
  803ee8:	003a2f06 	br	8027a8 <___vfprintf_internal_r+0x314>
						PRINT (decimal_point, decp_len);
  803eec:	d8800d17 	ldw	r2,52(sp)
  803ef0:	d9000b17 	ldw	r4,44(sp)
  803ef4:	b0800015 	stw	r2,0(r22)
  803ef8:	d8801b17 	ldw	r2,108(sp)
  803efc:	20c7883a 	add	r3,r4,r3
  803f00:	b1000115 	stw	r4,4(r22)
  803f04:	10800044 	addi	r2,r2,1
  803f08:	d8c01c15 	stw	r3,112(sp)
  803f0c:	d8801b15 	stw	r2,108(sp)
  803f10:	11000208 	cmpgei	r4,r2,8
  803f14:	2000bf1e 	bne	r4,zero,804214 <___vfprintf_internal_r+0x1d80>
  803f18:	b5800204 	addi	r22,r22,8
						PAD (-expt, zeroes);
  803f1c:	283f470e 	bge	r5,zero,803c3c <___vfprintf_internal_r+0x17a8>
  803f20:	01c02074 	movhi	r7,129
  803f24:	293ffc08 	cmpgei	r4,r5,-16
  803f28:	39c8bd04 	addi	r7,r7,8948
  803f2c:	0179c83a 	sub	fp,zero,r5
  803f30:	20013f1e 	bne	r4,zero,804430 <___vfprintf_internal_r+0x1f9c>
  803f34:	dc000715 	stw	r16,28(sp)
  803f38:	05400404 	movi	r21,16
  803f3c:	9021883a 	mov	r16,r18
  803f40:	3825883a 	mov	r18,r7
  803f44:	00000406 	br	803f58 <___vfprintf_internal_r+0x1ac4>
  803f48:	b5800204 	addi	r22,r22,8
  803f4c:	e73ffc04 	addi	fp,fp,-16
  803f50:	e1800448 	cmpgei	r6,fp,17
  803f54:	30013326 	beq	r6,zero,804424 <___vfprintf_internal_r+0x1f90>
  803f58:	10800044 	addi	r2,r2,1
  803f5c:	18c00404 	addi	r3,r3,16
  803f60:	b4800015 	stw	r18,0(r22)
  803f64:	b5400115 	stw	r21,4(r22)
  803f68:	d8c01c15 	stw	r3,112(sp)
  803f6c:	d8801b15 	stw	r2,108(sp)
  803f70:	11800208 	cmpgei	r6,r2,8
  803f74:	303ff426 	beq	r6,zero,803f48 <___vfprintf_internal_r+0x1ab4>
  803f78:	d9801a04 	addi	r6,sp,104
  803f7c:	800b883a 	mov	r5,r16
  803f80:	9809883a 	mov	r4,r19
  803f84:	0809bd40 	call	809bd4 <__sprint_r>
  803f88:	1001721e 	bne	r2,zero,804554 <___vfprintf_internal_r+0x20c0>
  803f8c:	d8c01c17 	ldw	r3,112(sp)
  803f90:	d8801b17 	ldw	r2,108(sp)
  803f94:	dd802704 	addi	r22,sp,156
  803f98:	003fec06 	br	803f4c <___vfprintf_internal_r+0x1ab8>
						PAD (ndig - 1, zeroes);
  803f9c:	800f883a 	mov	r7,r16
  803fa0:	dc000717 	ldw	r16,28(sp)
  803fa4:	8817883a 	mov	r11,r17
  803fa8:	aa000044 	addi	r8,r21,1
  803fac:	e0800204 	addi	r2,fp,8
  803fb0:	1ac7883a 	add	r3,r3,r11
  803fb4:	e1c00015 	stw	r7,0(fp)
  803fb8:	e2c00115 	stw	r11,4(fp)
  803fbc:	d8c01c15 	stw	r3,112(sp)
  803fc0:	da001b15 	stw	r8,108(sp)
  803fc4:	41000208 	cmpgei	r4,r8,8
  803fc8:	203e701e 	bne	r4,zero,80398c <___vfprintf_internal_r+0x14f8>
				PRINT (expstr, expsize);
  803fcc:	42000044 	addi	r8,r8,1
  803fd0:	15800204 	addi	r22,r2,8
						PAD (ndig - 1, zeroes);
  803fd4:	1039883a 	mov	fp,r2
  803fd8:	003d3206 	br	8034a4 <___vfprintf_internal_r+0x1010>
			_uquad = SARG ();
  803fdc:	d8800617 	ldw	r2,24(sp)
  803fe0:	d8c00615 	stw	r3,24(sp)
  803fe4:	15000017 	ldw	r20,0(r2)
  803fe8:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  803fec:	a805883a 	mov	r2,r21
  803ff0:	003b2d06 	br	802ca8 <___vfprintf_internal_r+0x814>
			_uquad = UARG ();
  803ff4:	d8800617 	ldw	r2,24(sp)
  803ff8:	002b883a 	mov	r21,zero
  803ffc:	d8c00615 	stw	r3,24(sp)
  804000:	15000017 	ldw	r20,0(r2)
			base = OCT;
  804004:	0005883a 	mov	r2,zero
  804008:	003a6e06 	br	8029c4 <___vfprintf_internal_r+0x530>
					cp = "INF";
  80400c:	04402074 	movhi	r17,129
  804010:	8c48ac04 	addi	r17,r17,8880
				flags &= ~ZEROPAD;
  804014:	003ac606 	br	802b30 <___vfprintf_internal_r+0x69c>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804018:	d8801804 	addi	r2,sp,96
  80401c:	d8800315 	stw	r2,12(sp)
  804020:	d9400917 	ldw	r5,36(sp)
  804024:	d8801504 	addi	r2,sp,84
  804028:	d8800215 	stw	r2,8(sp)
  80402c:	d8801404 	addi	r2,sp,80
  804030:	da000015 	stw	r8,0(sp)
  804034:	d8800115 	stw	r2,4(sp)
  804038:	01c000c4 	movi	r7,3
  80403c:	a00d883a 	mov	r6,r20
  804040:	9809883a 	mov	r4,r19
  804044:	db000815 	stw	r12,32(sp)
  804048:	da000715 	stw	r8,28(sp)
  80404c:	08049f00 	call	8049f0 <_dtoa_r>
		bp = digits + ndigits;
  804050:	da000717 	ldw	r8,28(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804054:	1023883a 	mov	r17,r2
		bp = digits + ndigits;
  804058:	db000817 	ldw	r12,32(sp)
  80405c:	1207883a 	add	r3,r2,r8
			if (*digits == '0' && value)
  804060:	88800007 	ldb	r2,0(r17)
  804064:	10800c20 	cmpeqi	r2,r2,48
  804068:	1000571e 	bne	r2,zero,8041c8 <___vfprintf_internal_r+0x1d34>
			bp += *decpt;
  80406c:	d8801417 	ldw	r2,80(sp)
  804070:	1893883a 	add	r9,r3,r2
		if (value == 0)	/* kludge for __dtoa irregularity */
  804074:	d9000917 	ldw	r4,36(sp)
  804078:	000d883a 	mov	r6,zero
  80407c:	000f883a 	mov	r7,zero
  804080:	a00b883a 	mov	r5,r20
  804084:	da401115 	stw	r9,68(sp)
  804088:	da000815 	stw	r8,32(sp)
  80408c:	db000715 	stw	r12,28(sp)
  804090:	080def40 	call	80def4 <__eqdf2>
  804094:	db000717 	ldw	r12,28(sp)
  804098:	da000817 	ldw	r8,32(sp)
  80409c:	da401117 	ldw	r9,68(sp)
  8040a0:	1000891e 	bne	r2,zero,8042c8 <___vfprintf_internal_r+0x1e34>
  8040a4:	4805883a 	mov	r2,r9
				if (expt <= -4 || expt > prec)
  8040a8:	d8c01417 	ldw	r3,80(sp)
	*length = rve - digits;
  8040ac:	1445c83a 	sub	r2,r2,r17
			if (ch == 'g' || ch == 'G') {
  8040b0:	ad4011d8 	cmpnei	r21,r21,71
				if (expt <= -4 || expt > prec)
  8040b4:	d8c00715 	stw	r3,28(sp)
	*length = rve - digits;
  8040b8:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  8040bc:	a83f2526 	beq	r21,zero,803d54 <___vfprintf_internal_r+0x18c0>
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
  8040c0:	d8800f17 	ldw	r2,60(sp)
  8040c4:	103f2826 	beq	r2,zero,803d68 <___vfprintf_internal_r+0x18d4>
					if (expt > 0) {
  8040c8:	d8c00717 	ldw	r3,28(sp)
  8040cc:	6080004c 	andi	r2,r12,1
  8040d0:	1204b03a 	or	r2,r2,r8
  8040d4:	00c1140e 	bge	zero,r3,804528 <___vfprintf_internal_r+0x2094>
						if (prec || flags & ALT)
  8040d8:	1001011e 	bne	r2,zero,8044e0 <___vfprintf_internal_r+0x204c>
  8040dc:	dd400717 	ldw	r21,28(sp)
  8040e0:	a829883a 	mov	r20,r21
			if (softsign)
  8040e4:	d8800607 	ldb	r2,24(sp)
  8040e8:	10008026 	beq	r2,zero,8042ec <___vfprintf_internal_r+0x1e58>
				sign = '-';
  8040ec:	00800b44 	movi	r2,45
  8040f0:	d8801345 	stb	r2,77(sp)
  8040f4:	d8800e17 	ldw	r2,56(sp)
		dprec = 0;
  8040f8:	0011883a 	mov	r8,zero
				sign = '-';
  8040fc:	d8800615 	stw	r2,24(sp)
  804100:	003b0306 	br	802d10 <___vfprintf_internal_r+0x87c>
			_uquad = UARG ();
  804104:	d8800617 	ldw	r2,24(sp)
  804108:	002b883a 	mov	r21,zero
  80410c:	d8c00615 	stw	r3,24(sp)
  804110:	15000017 	ldw	r20,0(r2)
			base = DEC;
  804114:	00800044 	movi	r2,1
  804118:	003a2a06 	br	8029c4 <___vfprintf_internal_r+0x530>
hex:			_uquad = UARG ();
  80411c:	d8800617 	ldw	r2,24(sp)
  804120:	002b883a 	mov	r21,zero
  804124:	d8c00615 	stw	r3,24(sp)
  804128:	15000017 	ldw	r20,0(r2)
  80412c:	003b1306 	br	802d7c <___vfprintf_internal_r+0x8e8>
  804130:	800f883a 	mov	r7,r16
  804134:	dc000e17 	ldw	r16,56(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804138:	10800044 	addi	r2,r2,1
  80413c:	1d47883a 	add	r3,r3,r21
  804140:	d8801b15 	stw	r2,108(sp)
  804144:	b1c00015 	stw	r7,0(r22)
  804148:	b5400115 	stw	r21,4(r22)
  80414c:	d8c01c15 	stw	r3,112(sp)
  804150:	10800208 	cmpgei	r2,r2,8
  804154:	10003a1e 	bne	r2,zero,804240 <___vfprintf_internal_r+0x1dac>
  804158:	b5800204 	addi	r22,r22,8
  80415c:	003d5406 	br	8036b0 <___vfprintf_internal_r+0x121c>
					sign = '-';
  804160:	00800b44 	movi	r2,45
  804164:	d8801345 	stb	r2,77(sp)
  804168:	03400b44 	movi	r13,45
  80416c:	003a6c06 	br	802b20 <___vfprintf_internal_r+0x68c>
		value = -value;
  804170:	1520003c 	xorhi	r20,r2,32768
		*sign = '-';
  804174:	00800b44 	movi	r2,45
  804178:	d8800605 	stb	r2,24(sp)
  80417c:	003ed106 	br	803cc4 <___vfprintf_internal_r+0x1830>
					PRINT ("0", 1);
  804180:	d9801a04 	addi	r6,sp,104
  804184:	900b883a 	mov	r5,r18
  804188:	9809883a 	mov	r4,r19
  80418c:	0809bd40 	call	809bd4 <__sprint_r>
  804190:	1039cf1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
					if (expt || ndig || flags & ALT) {
  804194:	d9401417 	ldw	r5,80(sp)
						PRINT (decimal_point, decp_len);
  804198:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  80419c:	dd802704 	addi	r22,sp,156
  8041a0:	003e9406 	br	803bf4 <___vfprintf_internal_r+0x1760>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  8041a4:	05400184 	movi	r21,6
  8041a8:	003e1706 	br	803a08 <___vfprintf_internal_r+0x1574>
  8041ac:	d9401345 	stb	r5,77(sp)
  8041b0:	00397706 	br	802790 <___vfprintf_internal_r+0x2fc>
	FLUSH ();
  8041b4:	d9801a04 	addi	r6,sp,104
  8041b8:	900b883a 	mov	r5,r18
  8041bc:	9809883a 	mov	r4,r19
  8041c0:	0809bd40 	call	809bd4 <__sprint_r>
  8041c4:	0039c206 	br	8028d0 <___vfprintf_internal_r+0x43c>
			if (*digits == '0' && value)
  8041c8:	d9000917 	ldw	r4,36(sp)
  8041cc:	000d883a 	mov	r6,zero
  8041d0:	000f883a 	mov	r7,zero
  8041d4:	a00b883a 	mov	r5,r20
  8041d8:	d8c01115 	stw	r3,68(sp)
  8041dc:	da000815 	stw	r8,32(sp)
  8041e0:	db000715 	stw	r12,28(sp)
  8041e4:	080def40 	call	80def4 <__eqdf2>
  8041e8:	db000717 	ldw	r12,28(sp)
  8041ec:	da000817 	ldw	r8,32(sp)
  8041f0:	d8c01117 	ldw	r3,68(sp)
  8041f4:	103f9d26 	beq	r2,zero,80406c <___vfprintf_internal_r+0x1bd8>
				*decpt = -ndigits + 1;
  8041f8:	00800044 	movi	r2,1
  8041fc:	1205c83a 	sub	r2,r2,r8
  804200:	d8801415 	stw	r2,80(sp)
  804204:	003f9a06 	br	804070 <___vfprintf_internal_r+0x1bdc>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  804208:	403ea81e 	bne	r8,zero,803cac <___vfprintf_internal_r+0x1818>
				prec = 1;
  80420c:	02000044 	movi	r8,1
  804210:	003ea606 	br	803cac <___vfprintf_internal_r+0x1818>
						PRINT (decimal_point, decp_len);
  804214:	d9801a04 	addi	r6,sp,104
  804218:	900b883a 	mov	r5,r18
  80421c:	9809883a 	mov	r4,r19
  804220:	0809bd40 	call	809bd4 <__sprint_r>
  804224:	1039aa1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
						PAD (-expt, zeroes);
  804228:	d9401417 	ldw	r5,80(sp)
						PRINT (cp, ndig);
  80422c:	d8c01c17 	ldw	r3,112(sp)
  804230:	d8801b17 	ldw	r2,108(sp)
						PRINT (decimal_point, decp_len);
  804234:	dd802704 	addi	r22,sp,156
						PAD (-expt, zeroes);
  804238:	283e800e 	bge	r5,zero,803c3c <___vfprintf_internal_r+0x17a8>
  80423c:	003f3806 	br	803f20 <___vfprintf_internal_r+0x1a8c>
					PRINTANDPAD(cp, convbuf + ndig,
  804240:	d9801a04 	addi	r6,sp,104
  804244:	900b883a 	mov	r5,r18
  804248:	9809883a 	mov	r4,r19
  80424c:	0809bd40 	call	809bd4 <__sprint_r>
  804250:	10399f1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804254:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804258:	dd802704 	addi	r22,sp,156
  80425c:	003d1406 	br	8036b0 <___vfprintf_internal_r+0x121c>
				flags &= ~ZEROPAD;
  804260:	db000417 	ldw	r12,16(sp)
  804264:	003a9d06 	br	802cdc <___vfprintf_internal_r+0x848>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  804268:	d8801804 	addi	r2,sp,96
  80426c:	d8800315 	stw	r2,12(sp)
  804270:	d9400917 	ldw	r5,36(sp)
  804274:	d8801504 	addi	r2,sp,84
			ndigits++;
  804278:	40c00044 	addi	r3,r8,1
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  80427c:	d8800215 	stw	r2,8(sp)
  804280:	d8801404 	addi	r2,sp,80
  804284:	d8c00015 	stw	r3,0(sp)
  804288:	d8800115 	stw	r2,4(sp)
  80428c:	01c00084 	movi	r7,2
  804290:	a00d883a 	mov	r6,r20
  804294:	9809883a 	mov	r4,r19
  804298:	db001115 	stw	r12,68(sp)
			ndigits++;
  80429c:	da000815 	stw	r8,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8042a0:	d8c00715 	stw	r3,28(sp)
  8042a4:	08049f00 	call	8049f0 <_dtoa_r>
  8042a8:	d8c00717 	ldw	r3,28(sp)
  8042ac:	da000817 	ldw	r8,32(sp)
  8042b0:	db001117 	ldw	r12,68(sp)
  8042b4:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  8042b8:	e08011d8 	cmpnei	r2,fp,71
  8042bc:	103e9c26 	beq	r2,zero,803d30 <___vfprintf_internal_r+0x189c>
		bp = digits + ndigits;
  8042c0:	88d3883a 	add	r9,r17,r3
		if (ch == 'f' || ch == 'F') {
  8042c4:	003f6b06 	br	804074 <___vfprintf_internal_r+0x1be0>
		while (rve < bp)
  8042c8:	d8801817 	ldw	r2,96(sp)
  8042cc:	127f762e 	bgeu	r2,r9,8040a8 <___vfprintf_internal_r+0x1c14>
			*rve++ = '0';
  8042d0:	01000c04 	movi	r4,48
  8042d4:	10c00044 	addi	r3,r2,1
  8042d8:	d8c01815 	stw	r3,96(sp)
  8042dc:	11000005 	stb	r4,0(r2)
		while (rve < bp)
  8042e0:	d8801817 	ldw	r2,96(sp)
  8042e4:	127ffb36 	bltu	r2,r9,8042d4 <___vfprintf_internal_r+0x1e40>
  8042e8:	003f6f06 	br	8040a8 <___vfprintf_internal_r+0x1c14>
		if (sign)
  8042ec:	d8800e17 	ldw	r2,56(sp)
  8042f0:	db401343 	ldbu	r13,77(sp)
		dprec = 0;
  8042f4:	0011883a 	mov	r8,zero
		if (sign)
  8042f8:	d8800615 	stw	r2,24(sp)
  8042fc:	003a8006 	br	802d00 <___vfprintf_internal_r+0x86c>
				} else if (expt >= ndig) { /* fixed g fmt */
  804300:	d8800717 	ldw	r2,28(sp)
  804304:	d8c00817 	ldw	r3,32(sp)
  804308:	10c02b16 	blt	r2,r3,8043b8 <___vfprintf_internal_r+0x1f24>
					if (flags & ALT)
  80430c:	6300004c 	andi	r12,r12,1
  804310:	6000581e 	bne	r12,zero,804474 <___vfprintf_internal_r+0x1fe0>
		realsz = dprec > size ? dprec : size;
  804314:	1029883a 	mov	r20,r2
  804318:	1000010e 	bge	r2,zero,804320 <___vfprintf_internal_r+0x1e8c>
  80431c:	0029883a 	mov	r20,zero
  804320:	dd400717 	ldw	r21,28(sp)
  804324:	070019c4 	movi	fp,103
  804328:	003f6e06 	br	8040e4 <___vfprintf_internal_r+0x1c50>
					    PRINT (decimal_point, decp_len);
  80432c:	d9801a04 	addi	r6,sp,104
  804330:	900b883a 	mov	r5,r18
  804334:	9809883a 	mov	r4,r19
  804338:	0809bd40 	call	809bd4 <__sprint_r>
  80433c:	1039641e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
					PRINTANDPAD (cp, convbuf + ndig,
  804340:	dd401417 	ldw	r21,80(sp)
  804344:	d8c01c17 	ldw	r3,112(sp)
					    PRINT (decimal_point, decp_len);
  804348:	dd802704 	addi	r22,sp,156
  80434c:	003ce706 	br	8036ec <___vfprintf_internal_r+0x1258>
					PRINTANDPAD(cp, convbuf + ndig,
  804350:	d9801a04 	addi	r6,sp,104
  804354:	900b883a 	mov	r5,r18
  804358:	9809883a 	mov	r4,r19
  80435c:	0809bd40 	call	809bd4 <__sprint_r>
  804360:	10395b1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
					    PRINT (decimal_point, decp_len);
  804364:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  804368:	dd802704 	addi	r22,sp,156
  80436c:	a83ccd0e 	bge	r21,zero,8036a4 <___vfprintf_internal_r+0x1210>
  804370:	003d9106 	br	8039b8 <___vfprintf_internal_r+0x1524>
				prec = DEFPREC;
  804374:	02000184 	movi	r8,6
  804378:	003e4c06 	br	803cac <___vfprintf_internal_r+0x1818>
					PRINTANDPAD (cp, convbuf + ndig,
  80437c:	d9801a04 	addi	r6,sp,104
  804380:	900b883a 	mov	r5,r18
  804384:	9809883a 	mov	r4,r19
  804388:	0809bd40 	call	809bd4 <__sprint_r>
  80438c:	1039501e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
  804390:	d8801417 	ldw	r2,80(sp)
  804394:	d9000817 	ldw	r4,32(sp)
		FLUSH ();	/* copy out the I/O vectors */
  804398:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  80439c:	dd802704 	addi	r22,sp,156
  8043a0:	2085c83a 	sub	r2,r4,r2
  8043a4:	003ce506 	br	80373c <___vfprintf_internal_r+0x12a8>
  8043a8:	4029883a 	mov	r20,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  8043ac:	d8c00615 	stw	r3,24(sp)
  8043b0:	402b883a 	mov	r21,r8
  8043b4:	0038fc06 	br	8027a8 <___vfprintf_internal_r+0x314>
					size = ndig + decp_len;
  8043b8:	d8800817 	ldw	r2,32(sp)
  8043bc:	d8c00b17 	ldw	r3,44(sp)
  8043c0:	10eb883a 	add	r21,r2,r3
					if (expt <= 0)
  8043c4:	d8800717 	ldw	r2,28(sp)
  8043c8:	00800316 	blt	zero,r2,8043d8 <___vfprintf_internal_r+0x1f44>
						size += 1 - expt;
  8043cc:	d8800717 	ldw	r2,28(sp)
  8043d0:	a8abc83a 	sub	r21,r21,r2
  8043d4:	ad400044 	addi	r21,r21,1
		realsz = dprec > size ? dprec : size;
  8043d8:	a829883a 	mov	r20,r21
  8043dc:	a8002a16 	blt	r21,zero,804488 <___vfprintf_internal_r+0x1ff4>
  8043e0:	070019c4 	movi	fp,103
  8043e4:	003f3f06 	br	8040e4 <___vfprintf_internal_r+0x1c50>
  8043e8:	d9401345 	stb	r5,77(sp)
  8043ec:	003ae006 	br	802f70 <___vfprintf_internal_r+0xadc>
  8043f0:	d9401345 	stb	r5,77(sp)
  8043f4:	003a5706 	br	802d54 <___vfprintf_internal_r+0x8c0>
  8043f8:	d9401345 	stb	r5,77(sp)
  8043fc:	003b1706 	br	80305c <___vfprintf_internal_r+0xbc8>
  804400:	d9401345 	stb	r5,77(sp)
  804404:	003a2006 	br	802c88 <___vfprintf_internal_r+0x7f4>
  804408:	d9401345 	stb	r5,77(sp)
  80440c:	003a6606 	br	802da8 <___vfprintf_internal_r+0x914>
  804410:	d9401345 	stb	r5,77(sp)
  804414:	00399706 	br	802a74 <___vfprintf_internal_r+0x5e0>
		return (EOF);
  804418:	00bfffc4 	movi	r2,-1
  80441c:	d8800515 	stw	r2,20(sp)
  804420:	00392e06 	br	8028dc <___vfprintf_internal_r+0x448>
  804424:	900f883a 	mov	r7,r18
  804428:	8025883a 	mov	r18,r16
  80442c:	dc000717 	ldw	r16,28(sp)
						PAD (-expt, zeroes);
  804430:	10800044 	addi	r2,r2,1
  804434:	1f07883a 	add	r3,r3,fp
  804438:	b1c00015 	stw	r7,0(r22)
  80443c:	b7000115 	stw	fp,4(r22)
  804440:	d8c01c15 	stw	r3,112(sp)
  804444:	d8801b15 	stw	r2,108(sp)
  804448:	11000208 	cmpgei	r4,r2,8
  80444c:	203dfa26 	beq	r4,zero,803c38 <___vfprintf_internal_r+0x17a4>
  804450:	d9801a04 	addi	r6,sp,104
  804454:	900b883a 	mov	r5,r18
  804458:	9809883a 	mov	r4,r19
  80445c:	0809bd40 	call	809bd4 <__sprint_r>
  804460:	10391b1e 	bne	r2,zero,8028d0 <___vfprintf_internal_r+0x43c>
						PRINT (cp, ndig);
  804464:	d8c01c17 	ldw	r3,112(sp)
  804468:	d8801b17 	ldw	r2,108(sp)
						PAD (-expt, zeroes);
  80446c:	dd802704 	addi	r22,sp,156
  804470:	003df206 	br	803c3c <___vfprintf_internal_r+0x17a8>
						size += decp_len;
  804474:	d8800717 	ldw	r2,28(sp)
  804478:	d8c00b17 	ldw	r3,44(sp)
  80447c:	10eb883a 	add	r21,r2,r3
		realsz = dprec > size ? dprec : size;
  804480:	a829883a 	mov	r20,r21
  804484:	a83fd60e 	bge	r21,zero,8043e0 <___vfprintf_internal_r+0x1f4c>
  804488:	0029883a 	mov	r20,zero
  80448c:	003fd406 	br	8043e0 <___vfprintf_internal_r+0x1f4c>
			*p++ = '0';
  804490:	00800c04 	movi	r2,48
		*p++ = to_char (exp);
  804494:	ad400c04 	addi	r21,r21,48
			*p++ = '0';
  804498:	d88016c5 	stb	r2,91(sp)
		*p++ = to_char (exp);
  80449c:	00800104 	movi	r2,4
  8044a0:	dd401705 	stb	r21,92(sp)
  8044a4:	d8801015 	stw	r2,64(sp)
  8044a8:	003e6506 	br	803e40 <___vfprintf_internal_r+0x19ac>
				if (signbit (_fpvalue))
  8044ac:	d8800a17 	ldw	r2,40(sp)
  8044b0:	10001916 	blt	r2,zero,804518 <___vfprintf_internal_r+0x2084>
		if (sign)
  8044b4:	db401343 	ldbu	r13,77(sp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
  8044b8:	e0801210 	cmplti	r2,fp,72
  8044bc:	1000131e 	bne	r2,zero,80450c <___vfprintf_internal_r+0x2078>
					cp = "nan";
  8044c0:	04402074 	movhi	r17,129
  8044c4:	8c48af04 	addi	r17,r17,8892
  8044c8:	00399906 	br	802b30 <___vfprintf_internal_r+0x69c>
		exp = -exp;
  8044cc:	05400044 	movi	r21,1
  8044d0:	a8abc83a 	sub	r21,r21,r2
		*p++ = '-';
  8044d4:	00800b44 	movi	r2,45
  8044d8:	d8801685 	stb	r2,90(sp)
  8044dc:	003e2906 	br	803d84 <___vfprintf_internal_r+0x18f0>
							size += prec + decp_len;
  8044e0:	d8800b17 	ldw	r2,44(sp)
  8044e4:	18ab883a 	add	r21,r3,r2
  8044e8:	aa2b883a 	add	r21,r21,r8
		realsz = dprec > size ? dprec : size;
  8044ec:	a829883a 	mov	r20,r21
  8044f0:	a83efc0e 	bge	r21,zero,8040e4 <___vfprintf_internal_r+0x1c50>
  8044f4:	0029883a 	mov	r20,zero
							  : 1;
  8044f8:	003efa06 	br	8040e4 <___vfprintf_internal_r+0x1c50>
  8044fc:	6080004c 	andi	r2,r12,1
  804500:	d8800715 	stw	r2,28(sp)
				if (ndig > 1 || flags & ALT)
  804504:	103e531e 	bne	r2,zero,803e54 <___vfprintf_internal_r+0x19c0>
  804508:	003ff806 	br	8044ec <___vfprintf_internal_r+0x2058>
					cp = "NAN";
  80450c:	04402074 	movhi	r17,129
  804510:	8c48ae04 	addi	r17,r17,8888
  804514:	00398606 	br	802b30 <___vfprintf_internal_r+0x69c>
					sign = '-';
  804518:	00800b44 	movi	r2,45
  80451c:	d8801345 	stb	r2,77(sp)
  804520:	03400b44 	movi	r13,45
  804524:	003fe406 	br	8044b8 <___vfprintf_internal_r+0x2024>
						size = (prec || flags & ALT)
  804528:	1000031e 	bne	r2,zero,804538 <___vfprintf_internal_r+0x20a4>
  80452c:	05000044 	movi	r20,1
							  : 1;
  804530:	05400044 	movi	r21,1
					lead = expt;
  804534:	003eeb06 	br	8040e4 <___vfprintf_internal_r+0x1c50>
							  ? prec + 1 + decp_len
  804538:	d8800b17 	ldw	r2,44(sp)
  80453c:	15400044 	addi	r21,r2,1
  804540:	aa2b883a 	add	r21,r21,r8
  804544:	003fe906 	br	8044ec <___vfprintf_internal_r+0x2058>
						PAD (ndig - 1, zeroes);
  804548:	b005883a 	mov	r2,r22
  80454c:	39c8bd04 	addi	r7,r7,8948
  804550:	003e9706 	br	803fb0 <___vfprintf_internal_r+0x1b1c>
  804554:	8025883a 	mov	r18,r16
  804558:	0038dd06 	br	8028d0 <___vfprintf_internal_r+0x43c>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  80455c:	00800084 	movi	r2,2
  804560:	d8801015 	stw	r2,64(sp)
  804564:	003e3606 	br	803e40 <___vfprintf_internal_r+0x19ac>
				prec = GET_ARG (n, ap, int);
  804568:	d8c00617 	ldw	r3,24(sp)
  80456c:	1a000017 	ldw	r8,0(r3)
  804570:	18c00104 	addi	r3,r3,4
				if (prec < 0)
  804574:	4000010e 	bge	r8,zero,80457c <___vfprintf_internal_r+0x20e8>
  804578:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  80457c:	bf000043 	ldbu	fp,1(r23)
				prec = GET_ARG (n, ap, int);
  804580:	d8c00615 	stw	r3,24(sp)
			if ((ch = *fmt++) == '*') {
  804584:	102f883a 	mov	r23,r2
  804588:	e2c03fcc 	andi	r11,fp,255
  80458c:	5ac0201c 	xori	r11,r11,128
  804590:	5affe004 	addi	r11,r11,-128
				goto rflag;
  804594:	00380b06 	br	8025c4 <___vfprintf_internal_r+0x130>

00804598 <__vfprintf_internal>:
{
  804598:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80459c:	d1200917 	ldw	r4,-32732(gp)
  8045a0:	300f883a 	mov	r7,r6
  8045a4:	280d883a 	mov	r6,r5
  8045a8:	100b883a 	mov	r5,r2
  8045ac:	08024941 	jmpi	802494 <___vfprintf_internal_r>

008045b0 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  8045b0:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  8045b4:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  8045b8:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  8045bc:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  8045c0:	2a400917 	ldw	r9,36(r5)
{
  8045c4:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  8045c8:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  8045cc:	00c10004 	movi	r3,1024
{
  8045d0:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  8045d4:	10bfff4c 	andi	r2,r2,65533
{
  8045d8:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  8045dc:	d80b883a 	mov	r5,sp
{
  8045e0:	dc811c15 	stw	r18,1136(sp)
  8045e4:	dc411b15 	stw	r17,1132(sp)
  8045e8:	dfc11d15 	stw	ra,1140(sp)
  8045ec:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  8045f0:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  8045f4:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  8045f8:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  8045fc:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  804600:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  804604:	da000015 	stw	r8,0(sp)
  804608:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80460c:	d8c00215 	stw	r3,8(sp)
  804610:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  804614:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  804618:	08024940 	call	802494 <___vfprintf_internal_r>
  80461c:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804620:	10000d0e 	bge	r2,zero,804658 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  804624:	d880030b 	ldhu	r2,12(sp)
  804628:	1080100c 	andi	r2,r2,64
  80462c:	10000326 	beq	r2,zero,80463c <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  804630:	8080030b 	ldhu	r2,12(r16)
  804634:	10801014 	ori	r2,r2,64
  804638:	8080030d 	sth	r2,12(r16)
}
  80463c:	8805883a 	mov	r2,r17
  804640:	dfc11d17 	ldw	ra,1140(sp)
  804644:	dc811c17 	ldw	r18,1136(sp)
  804648:	dc411b17 	ldw	r17,1132(sp)
  80464c:	dc011a17 	ldw	r16,1128(sp)
  804650:	dec11e04 	addi	sp,sp,1144
  804654:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  804658:	d80b883a 	mov	r5,sp
  80465c:	9009883a 	mov	r4,r18
  804660:	08063600 	call	806360 <_fflush_r>
  804664:	103fef26 	beq	r2,zero,804624 <__sbprintf+0x74>
		ret = EOF;
  804668:	047fffc4 	movi	r17,-1
  80466c:	003fed06 	br	804624 <__sbprintf+0x74>

00804670 <__swsetup_r>:
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
  804670:	d0a00917 	ldw	r2,-32732(gp)
{
  804674:	defffd04 	addi	sp,sp,-12
  804678:	dc400115 	stw	r17,4(sp)
  80467c:	dc000015 	stw	r16,0(sp)
  804680:	dfc00215 	stw	ra,8(sp)
  804684:	2023883a 	mov	r17,r4
  804688:	2821883a 	mov	r16,r5
  CHECK_INIT (_REENT, fp);
  80468c:	10000226 	beq	r2,zero,804698 <__swsetup_r+0x28>
  804690:	10c00e17 	ldw	r3,56(r2)
  804694:	18001f26 	beq	r3,zero,804714 <__swsetup_r+0xa4>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
  804698:	8180030b 	ldhu	r6,12(r16)
  80469c:	30c0020c 	andi	r3,r6,8
  8046a0:	3005883a 	mov	r2,r6
  8046a4:	18002126 	beq	r3,zero,80472c <__swsetup_r+0xbc>
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
  8046a8:	80c00417 	ldw	r3,16(r16)
  8046ac:	18002826 	beq	r3,zero,804750 <__swsetup_r+0xe0>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
  8046b0:	1100004c 	andi	r4,r2,1
  8046b4:	20000b1e 	bne	r4,zero,8046e4 <__swsetup_r+0x74>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  8046b8:	1100008c 	andi	r4,r2,2
  8046bc:	20002e1e 	bne	r4,zero,804778 <__swsetup_r+0x108>
  8046c0:	81000517 	ldw	r4,20(r16)
  8046c4:	81000215 	stw	r4,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
  8046c8:	18000b26 	beq	r3,zero,8046f8 <__swsetup_r+0x88>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
  8046cc:	0005883a 	mov	r2,zero
}
  8046d0:	dfc00217 	ldw	ra,8(sp)
  8046d4:	dc400117 	ldw	r17,4(sp)
  8046d8:	dc000017 	ldw	r16,0(sp)
  8046dc:	dec00304 	addi	sp,sp,12
  8046e0:	f800283a 	ret
      fp->_lbfsize = -fp->_bf._size;
  8046e4:	81000517 	ldw	r4,20(r16)
      fp->_w = 0;
  8046e8:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
  8046ec:	0109c83a 	sub	r4,zero,r4
  8046f0:	81000615 	stw	r4,24(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  8046f4:	183ff51e 	bne	r3,zero,8046cc <__swsetup_r+0x5c>
  8046f8:	10c0200c 	andi	r3,r2,128
  return 0;
  8046fc:	0005883a 	mov	r2,zero
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  804700:	183ff326 	beq	r3,zero,8046d0 <__swsetup_r+0x60>
      fp->_flags |= __SERR;
  804704:	31801014 	ori	r6,r6,64
  804708:	8180030d 	sth	r6,12(r16)
      return EOF;
  80470c:	00bfffc4 	movi	r2,-1
  804710:	003fef06 	br	8046d0 <__swsetup_r+0x60>
  CHECK_INIT (_REENT, fp);
  804714:	1009883a 	mov	r4,r2
  804718:	08067980 	call	806798 <__sinit>
  if ((fp->_flags & __SWR) == 0)
  80471c:	8180030b 	ldhu	r6,12(r16)
  804720:	30c0020c 	andi	r3,r6,8
  804724:	3005883a 	mov	r2,r6
  804728:	183fdf1e 	bne	r3,zero,8046a8 <__swsetup_r+0x38>
      if ((fp->_flags & __SRW) == 0)
  80472c:	3080040c 	andi	r2,r6,16
  804730:	10002126 	beq	r2,zero,8047b8 <__swsetup_r+0x148>
      if (fp->_flags & __SRD)
  804734:	3080010c 	andi	r2,r6,4
  804738:	1000111e 	bne	r2,zero,804780 <__swsetup_r+0x110>
  if (fp->_bf._base == NULL
  80473c:	80c00417 	ldw	r3,16(r16)
      fp->_flags |= __SWR;
  804740:	30800214 	ori	r2,r6,8
  804744:	8080030d 	sth	r2,12(r16)
  804748:	100d883a 	mov	r6,r2
  if (fp->_bf._base == NULL
  80474c:	183fd81e 	bne	r3,zero,8046b0 <__swsetup_r+0x40>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
  804750:	1100a00c 	andi	r4,r2,640
  804754:	21008020 	cmpeqi	r4,r4,512
  804758:	203fd51e 	bne	r4,zero,8046b0 <__swsetup_r+0x40>
    __smakebuf_r (ptr, fp);
  80475c:	800b883a 	mov	r5,r16
  804760:	8809883a 	mov	r4,r17
  804764:	08073000 	call	807300 <__smakebuf_r>
  if (fp->_flags & __SLBF)
  804768:	8180030b 	ldhu	r6,12(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  80476c:	80c00417 	ldw	r3,16(r16)
  if (fp->_flags & __SLBF)
  804770:	3005883a 	mov	r2,r6
  804774:	003fce06 	br	8046b0 <__swsetup_r+0x40>
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  804778:	0009883a 	mov	r4,zero
  80477c:	003fd106 	br	8046c4 <__swsetup_r+0x54>
	  if (HASUB (fp))
  804780:	81400c17 	ldw	r5,48(r16)
  804784:	28000626 	beq	r5,zero,8047a0 <__swsetup_r+0x130>
	    FREEUB (ptr, fp);
  804788:	80801004 	addi	r2,r16,64
  80478c:	28800326 	beq	r5,r2,80479c <__swsetup_r+0x12c>
  804790:	8809883a 	mov	r4,r17
  804794:	08068f00 	call	8068f0 <_free_r>
	  fp->_flags &= ~(__SRD | __SEOF);
  804798:	8180030b 	ldhu	r6,12(r16)
	    FREEUB (ptr, fp);
  80479c:	80000c15 	stw	zero,48(r16)
	  fp->_p = fp->_bf._base;
  8047a0:	80c00417 	ldw	r3,16(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
  8047a4:	00bff6c4 	movi	r2,-37
  8047a8:	118c703a 	and	r6,r2,r6
	  fp->_r = 0;
  8047ac:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
  8047b0:	80c00015 	stw	r3,0(r16)
  8047b4:	003fe206 	br	804740 <__swsetup_r+0xd0>
	  ptr->_errno = EBADF;
  8047b8:	00800244 	movi	r2,9
  8047bc:	88800015 	stw	r2,0(r17)
	  fp->_flags |= __SERR;
  8047c0:	31801014 	ori	r6,r6,64
  8047c4:	8180030d 	sth	r6,12(r16)
	  return EOF;
  8047c8:	00bfffc4 	movi	r2,-1
  8047cc:	003fc006 	br	8046d0 <__swsetup_r+0x60>

008047d0 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
  8047d0:	defff204 	addi	sp,sp,-56
  8047d4:	dc400515 	stw	r17,20(sp)
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
  8047d8:	20800417 	ldw	r2,16(r4)
  n = S->_wds;
  8047dc:	2c400417 	ldw	r17,16(r5)
{
  8047e0:	dfc00d15 	stw	ra,52(sp)
  8047e4:	df000c15 	stw	fp,48(sp)
  8047e8:	ddc00b15 	stw	r23,44(sp)
  8047ec:	dd800a15 	stw	r22,40(sp)
  8047f0:	dd400915 	stw	r21,36(sp)
  8047f4:	dd000815 	stw	r20,32(sp)
  8047f8:	dcc00715 	stw	r19,28(sp)
  8047fc:	dc800615 	stw	r18,24(sp)
  804800:	dc000415 	stw	r16,16(sp)
  804804:	d9000115 	stw	r4,4(sp)
  804808:	d9400215 	stw	r5,8(sp)
  if (b->_wds < n)
  80480c:	14407616 	blt	r2,r17,8049e8 <quorem+0x218>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  804810:	8c7fffc4 	addi	r17,r17,-1
  804814:	882a90ba 	slli	r21,r17,2
  sx = S->_x;
  804818:	2f000504 	addi	fp,r5,20
  bx = b->_x;
  80481c:	25800504 	addi	r22,r4,20
  sxe = sx + --n;
  804820:	e565883a 	add	r18,fp,r21
  bxe = bx + n;
  804824:	b545883a 	add	r2,r22,r21
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  804828:	95c00017 	ldw	r23,0(r18)
  80482c:	15000017 	ldw	r20,0(r2)
  bx = b->_x;
  804830:	dd800015 	stw	r22,0(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  804834:	bdc00044 	addi	r23,r23,1
  804838:	b80b883a 	mov	r5,r23
  80483c:	a009883a 	mov	r4,r20
  bxe = bx + n;
  804840:	d8800315 	stw	r2,12(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  804844:	080cbec0 	call	80cbec <__udivsi3>
  804848:	1021883a 	mov	r16,r2
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
  80484c:	a5c02f36 	bltu	r20,r23,80490c <quorem+0x13c>
  sx = S->_x;
  804850:	e029883a 	mov	r20,fp
    {
      borrow = 0;
      carry = 0;
  804854:	002b883a 	mov	r21,zero
      borrow = 0;
  804858:	002f883a 	mov	r23,zero
      do
	{
#ifdef Pack_32
	  si = *sx++;
  80485c:	a4c00017 	ldw	r19,0(r20)
	  ys = (si & 0xffff) * q + carry;
  804860:	800b883a 	mov	r5,r16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  804864:	b5800104 	addi	r22,r22,4
	  ys = (si & 0xffff) * q + carry;
  804868:	993fffcc 	andi	r4,r19,65535
  80486c:	080ccac0 	call	80ccac <__mulsi3>
	  zs = (si >> 16) * q + (ys >> 16);
  804870:	9808d43a 	srli	r4,r19,16
  804874:	800b883a 	mov	r5,r16
	  ys = (si & 0xffff) * q + carry;
  804878:	156b883a 	add	r21,r2,r21
	  zs = (si >> 16) * q + (ys >> 16);
  80487c:	080ccac0 	call	80ccac <__mulsi3>
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804880:	b0ffff17 	ldw	r3,-4(r22)
	  zs = (si >> 16) * q + (ys >> 16);
  804884:	a80ad43a 	srli	r5,r21,16
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804888:	a93fffcc 	andi	r4,r21,65535
  80488c:	19bfffcc 	andi	r6,r3,65535
  804890:	b909c83a 	sub	r4,r23,r4
  804894:	2189883a 	add	r4,r4,r6
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  804898:	1806d43a 	srli	r3,r3,16
	  zs = (si >> 16) * q + (ys >> 16);
  80489c:	1145883a 	add	r2,r2,r5
	  borrow = y >> 16;
  8048a0:	200bd43a 	srai	r5,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  8048a4:	11bfffcc 	andi	r6,r2,65535
  8048a8:	1987c83a 	sub	r3,r3,r6
  8048ac:	1947883a 	add	r3,r3,r5
	  Storeinc (bx, z, y);
  8048b0:	180a943a 	slli	r5,r3,16
  8048b4:	213fffcc 	andi	r4,r4,65535
	  si = *sx++;
  8048b8:	a5000104 	addi	r20,r20,4
	  Storeinc (bx, z, y);
  8048bc:	2908b03a 	or	r4,r5,r4
  8048c0:	b13fff15 	stw	r4,-4(r22)
	  carry = zs >> 16;
  8048c4:	102ad43a 	srli	r21,r2,16
	  borrow = z >> 16;
  8048c8:	182fd43a 	srai	r23,r3,16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  8048cc:	953fe32e 	bgeu	r18,r20,80485c <quorem+0x8c>
      if (!*bxe)
  8048d0:	d8c00317 	ldw	r3,12(sp)
  8048d4:	18800017 	ldw	r2,0(r3)
  8048d8:	10000c1e 	bne	r2,zero,80490c <quorem+0x13c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
  8048dc:	d8800017 	ldw	r2,0(sp)
  8048e0:	1d7fff04 	addi	r21,r3,-4
  8048e4:	15400436 	bltu	r2,r21,8048f8 <quorem+0x128>
  8048e8:	00000606 	br	804904 <quorem+0x134>
  8048ec:	d8800017 	ldw	r2,0(sp)
	    --n;
  8048f0:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  8048f4:	1540032e 	bgeu	r2,r21,804904 <quorem+0x134>
  8048f8:	a8800017 	ldw	r2,0(r21)
  8048fc:	ad7fff04 	addi	r21,r21,-4
  804900:	103ffa26 	beq	r2,zero,8048ec <quorem+0x11c>
	  b->_wds = n;
  804904:	d8800117 	ldw	r2,4(sp)
  804908:	14400415 	stw	r17,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
  80490c:	d9400217 	ldw	r5,8(sp)
  804910:	d9000117 	ldw	r4,4(sp)
  804914:	0808bf80 	call	808bf8 <__mcmp>
  804918:	10002616 	blt	r2,zero,8049b4 <quorem+0x1e4>
  bx = b->_x;
  80491c:	d9400017 	ldw	r5,0(sp)
    {
      q++;
  804920:	84000044 	addi	r16,r16,1
      borrow = 0;
  804924:	0007883a 	mov	r3,zero
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
  804928:	e1000017 	ldw	r4,0(fp)
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  80492c:	29800017 	ldw	r6,0(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  804930:	29400104 	addi	r5,r5,4
	  ys = (si & 0xffff) + carry;
  804934:	20bfffcc 	andi	r2,r4,65535
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  804938:	1887c83a 	sub	r3,r3,r2
  80493c:	30bfffcc 	andi	r2,r6,65535
  804940:	1885883a 	add	r2,r3,r2
	  zs = (si >> 16) + (ys >> 16);
  804944:	2008d43a 	srli	r4,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  804948:	3006d43a 	srli	r3,r6,16
	  borrow = y >> 16;
  80494c:	100fd43a 	srai	r7,r2,16
	  Storeinc (bx, z, y);
  804950:	11bfffcc 	andi	r6,r2,65535
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  804954:	1907c83a 	sub	r3,r3,r4
  804958:	19c7883a 	add	r3,r3,r7
	  Storeinc (bx, z, y);
  80495c:	1804943a 	slli	r2,r3,16
	  si = *sx++;
  804960:	e7000104 	addi	fp,fp,4
	  borrow = z >> 16;
  804964:	1807d43a 	srai	r3,r3,16
	  Storeinc (bx, z, y);
  804968:	1184b03a 	or	r2,r2,r6
  80496c:	28bfff15 	stw	r2,-4(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  804970:	973fed2e 	bgeu	r18,fp,804928 <quorem+0x158>
      bx = b->_x;
      bxe = bx + n;
  804974:	880490ba 	slli	r2,r17,2
  804978:	d9000017 	ldw	r4,0(sp)
  80497c:	2085883a 	add	r2,r4,r2
      if (!*bxe)
  804980:	10c00017 	ldw	r3,0(r2)
  804984:	18000b1e 	bne	r3,zero,8049b4 <quorem+0x1e4>
	{
	  while (--bxe > bx && !*bxe)
  804988:	10bfff04 	addi	r2,r2,-4
  80498c:	20800436 	bltu	r4,r2,8049a0 <quorem+0x1d0>
  804990:	00000606 	br	8049ac <quorem+0x1dc>
  804994:	d8c00017 	ldw	r3,0(sp)
	    --n;
  804998:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  80499c:	1880032e 	bgeu	r3,r2,8049ac <quorem+0x1dc>
  8049a0:	10c00017 	ldw	r3,0(r2)
  8049a4:	10bfff04 	addi	r2,r2,-4
  8049a8:	183ffa26 	beq	r3,zero,804994 <quorem+0x1c4>
	  b->_wds = n;
  8049ac:	d8800117 	ldw	r2,4(sp)
  8049b0:	14400415 	stw	r17,16(r2)
	}
    }
  return q;
  8049b4:	8005883a 	mov	r2,r16
}
  8049b8:	dfc00d17 	ldw	ra,52(sp)
  8049bc:	df000c17 	ldw	fp,48(sp)
  8049c0:	ddc00b17 	ldw	r23,44(sp)
  8049c4:	dd800a17 	ldw	r22,40(sp)
  8049c8:	dd400917 	ldw	r21,36(sp)
  8049cc:	dd000817 	ldw	r20,32(sp)
  8049d0:	dcc00717 	ldw	r19,28(sp)
  8049d4:	dc800617 	ldw	r18,24(sp)
  8049d8:	dc400517 	ldw	r17,20(sp)
  8049dc:	dc000417 	ldw	r16,16(sp)
  8049e0:	dec00e04 	addi	sp,sp,56
  8049e4:	f800283a 	ret
    return 0;
  8049e8:	0005883a 	mov	r2,zero
  8049ec:	003ff206 	br	8049b8 <quorem+0x1e8>

008049f0 <_dtoa_r>:
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
  8049f0:	20801017 	ldw	r2,64(r4)
{
  8049f4:	deffe204 	addi	sp,sp,-120
  8049f8:	ddc01b15 	stw	r23,108(sp)
  8049fc:	dcc01715 	stw	r19,92(sp)
  804a00:	dc801615 	stw	r18,88(sp)
  804a04:	dc401515 	stw	r17,84(sp)
  804a08:	dc001415 	stw	r16,80(sp)
  804a0c:	dfc01d15 	stw	ra,116(sp)
  804a10:	df001c15 	stw	fp,112(sp)
  804a14:	dd801a15 	stw	r22,104(sp)
  804a18:	dd401915 	stw	r21,100(sp)
  804a1c:	dd001815 	stw	r20,96(sp)
  804a20:	d9c00215 	stw	r7,8(sp)
  804a24:	dc002017 	ldw	r16,128(sp)
  804a28:	202f883a 	mov	r23,r4
  804a2c:	3025883a 	mov	r18,r6
  804a30:	2827883a 	mov	r19,r5
  d.d = _d;
  804a34:	3023883a 	mov	r17,r6
  if (_REENT_MP_RESULT(ptr))
  804a38:	10000826 	beq	r2,zero,804a5c <_dtoa_r+0x6c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  804a3c:	21801117 	ldw	r6,68(r4)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804a40:	00c00044 	movi	r3,1
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  804a44:	100b883a 	mov	r5,r2
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804a48:	1986983a 	sll	r3,r3,r6
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  804a4c:	11800115 	stw	r6,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  804a50:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  804a54:	08081e80 	call	8081e8 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
  804a58:	b8001015 	stw	zero,64(r23)
    }

  if (word0 (d) & Sign_bit)
  804a5c:	90018816 	blt	r18,zero,805080 <_dtoa_r+0x690>
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
  804a60:	80000015 	stw	zero,0(r16)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
  804a64:	909ffc2c 	andhi	r2,r18,32752
  804a68:	00dffc34 	movhi	r3,32752
  804a6c:	10c18d26 	beq	r2,r3,8050a4 <_dtoa_r+0x6b4>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
  804a70:	000d883a 	mov	r6,zero
  804a74:	000f883a 	mov	r7,zero
  804a78:	9809883a 	mov	r4,r19
  804a7c:	880b883a 	mov	r5,r17
  804a80:	080def40 	call	80def4 <__eqdf2>
  804a84:	1000191e 	bne	r2,zero,804aec <_dtoa_r+0xfc>
    {
      *decpt = 1;
  804a88:	d8c01f17 	ldw	r3,124(sp)
  804a8c:	00800044 	movi	r2,1
  804a90:	18800015 	stw	r2,0(r3)
      s = "0";
      if (rve)
  804a94:	d8802117 	ldw	r2,132(sp)
  804a98:	1002f926 	beq	r2,zero,805680 <_dtoa_r+0xc90>
	*rve = s + 1;
  804a9c:	d9002117 	ldw	r4,132(sp)
  804aa0:	00802074 	movhi	r2,129
  804aa4:	1088bc44 	addi	r2,r2,8945
      return s;
  804aa8:	00c02074 	movhi	r3,129
	*rve = s + 1;
  804aac:	20800015 	stw	r2,0(r4)
      return s;
  804ab0:	1888bc04 	addi	r2,r3,8944
  804ab4:	d8800115 	stw	r2,4(sp)
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
  804ab8:	d8800117 	ldw	r2,4(sp)
  804abc:	dfc01d17 	ldw	ra,116(sp)
  804ac0:	df001c17 	ldw	fp,112(sp)
  804ac4:	ddc01b17 	ldw	r23,108(sp)
  804ac8:	dd801a17 	ldw	r22,104(sp)
  804acc:	dd401917 	ldw	r21,100(sp)
  804ad0:	dd001817 	ldw	r20,96(sp)
  804ad4:	dcc01717 	ldw	r19,92(sp)
  804ad8:	dc801617 	ldw	r18,88(sp)
  804adc:	dc401517 	ldw	r17,84(sp)
  804ae0:	dc001417 	ldw	r16,80(sp)
  804ae4:	dec01e04 	addi	sp,sp,120
  804ae8:	f800283a 	ret
  b = d2b (ptr, d.d, &be, &bbits);
  804aec:	d8801204 	addi	r2,sp,72
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  804af0:	9020d53a 	srli	r16,r18,20
  b = d2b (ptr, d.d, &be, &bbits);
  804af4:	d8800015 	stw	r2,0(sp)
  804af8:	d9c01304 	addi	r7,sp,76
  804afc:	980b883a 	mov	r5,r19
  804b00:	880d883a 	mov	r6,r17
  804b04:	b809883a 	mov	r4,r23
  804b08:	0808fe00 	call	808fe0 <__d2b>
  804b0c:	1039883a 	mov	fp,r2
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  804b10:	8001771e 	bne	r16,zero,8050f0 <_dtoa_r+0x700>
      i = bbits + be + (Bias + (P - 1) - 1);
  804b14:	dd001217 	ldw	r20,72(sp)
  804b18:	dc001317 	ldw	r16,76(sp)
  804b1c:	a421883a 	add	r16,r20,r16
  804b20:	80810c84 	addi	r2,r16,1074
       : (word1 (d) << (32 - i));
  804b24:	10c00850 	cmplti	r3,r2,33
  804b28:	1802e51e 	bne	r3,zero,8056c0 <_dtoa_r+0xcd0>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
  804b2c:	01001004 	movi	r4,64
  804b30:	2085c83a 	sub	r2,r4,r2
  804b34:	81010484 	addi	r4,r16,1042
  804b38:	90a4983a 	sll	r18,r18,r2
  804b3c:	9908d83a 	srl	r4,r19,r4
       : (word1 (d) << (32 - i));
  804b40:	9108b03a 	or	r4,r18,r4
      d2.d = x;
  804b44:	080f3300 	call	80f330 <__floatunsidf>
  804b48:	1009883a 	mov	r4,r2
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  804b4c:	017f8434 	movhi	r5,65040
      denorm = 1;
  804b50:	00800044 	movi	r2,1
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  804b54:	194b883a 	add	r5,r3,r5
      i -= (Bias + (P - 1) - 1) + 1;
  804b58:	843fffc4 	addi	r16,r16,-1
      denorm = 1;
  804b5c:	d8800a15 	stw	r2,40(sp)
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  804b60:	000d883a 	mov	r6,zero
  804b64:	01cffe34 	movhi	r7,16376
  804b68:	080e8f00 	call	80e8f0 <__subdf3>
  804b6c:	0198dbf4 	movhi	r6,25455
  804b70:	01cff4f4 	movhi	r7,16339
  804b74:	3190d844 	addi	r6,r6,17249
  804b78:	39e1e9c4 	addi	r7,r7,-30809
  804b7c:	1009883a 	mov	r4,r2
  804b80:	180b883a 	mov	r5,r3
  804b84:	080e1440 	call	80e144 <__muldf3>
  804b88:	01a2d874 	movhi	r6,35681
  804b8c:	01cff1f4 	movhi	r7,16327
  804b90:	31b22cc4 	addi	r6,r6,-14157
  804b94:	39e28a04 	addi	r7,r7,-30168
  804b98:	180b883a 	mov	r5,r3
  804b9c:	1009883a 	mov	r4,r2
  804ba0:	080ccd40 	call	80ccd4 <__adddf3>
  804ba4:	8009883a 	mov	r4,r16
  804ba8:	102b883a 	mov	r21,r2
  804bac:	1825883a 	mov	r18,r3
  804bb0:	080f2780 	call	80f278 <__floatsidf>
  804bb4:	019427f4 	movhi	r6,20639
  804bb8:	01cff4f4 	movhi	r7,16339
  804bbc:	319e7ec4 	addi	r6,r6,31227
  804bc0:	39d104c4 	addi	r7,r7,17427
  804bc4:	1009883a 	mov	r4,r2
  804bc8:	180b883a 	mov	r5,r3
  804bcc:	080e1440 	call	80e144 <__muldf3>
  804bd0:	100d883a 	mov	r6,r2
  804bd4:	180f883a 	mov	r7,r3
  804bd8:	a809883a 	mov	r4,r21
  804bdc:	900b883a 	mov	r5,r18
  804be0:	080ccd40 	call	80ccd4 <__adddf3>
  k = (int) ds;
  804be4:	1009883a 	mov	r4,r2
  804be8:	180b883a 	mov	r5,r3
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  804bec:	1025883a 	mov	r18,r2
  804bf0:	182d883a 	mov	r22,r3
  k = (int) ds;
  804bf4:	080f1f80 	call	80f1f8 <__fixdfsi>
  if (ds < 0. && ds != k)
  804bf8:	000d883a 	mov	r6,zero
  804bfc:	000f883a 	mov	r7,zero
  804c00:	9009883a 	mov	r4,r18
  804c04:	b00b883a 	mov	r5,r22
  k = (int) ds;
  804c08:	102b883a 	mov	r21,r2
  804c0c:	d8800315 	stw	r2,12(sp)
  if (ds < 0. && ds != k)
  804c10:	080e05c0 	call	80e05c <__ledf2>
  804c14:	10028f16 	blt	r2,zero,805654 <_dtoa_r+0xc64>
  if (k >= 0 && k <= Ten_pmax)
  804c18:	dc800317 	ldw	r18,12(sp)
  j = bbits - i - 1;
  804c1c:	a421c83a 	sub	r16,r20,r16
  804c20:	85bfffc4 	addi	r22,r16,-1
  if (k >= 0 && k <= Ten_pmax)
  804c24:	908005e8 	cmpgeui	r2,r18,23
  804c28:	1002821e 	bne	r2,zero,805634 <_dtoa_r+0xc44>
      if (d.d < tens[k])
  804c2c:	900690fa 	slli	r3,r18,3
  804c30:	00802074 	movhi	r2,129
  804c34:	10891d04 	addi	r2,r2,9332
  804c38:	10c5883a 	add	r2,r2,r3
  804c3c:	11800017 	ldw	r6,0(r2)
  804c40:	11c00117 	ldw	r7,4(r2)
  804c44:	9809883a 	mov	r4,r19
  804c48:	880b883a 	mov	r5,r17
  804c4c:	080e05c0 	call	80e05c <__ledf2>
  804c50:	1002550e 	bge	r2,zero,8055a8 <_dtoa_r+0xbb8>
	k--;
  804c54:	90bfffc4 	addi	r2,r18,-1
  804c58:	d8800315 	stw	r2,12(sp)
      k_check = 0;
  804c5c:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  804c60:	b0027716 	blt	r22,zero,805640 <_dtoa_r+0xc50>
      b2 = 0;
  804c64:	d8000615 	stw	zero,24(sp)
  if (k >= 0)
  804c68:	d8800317 	ldw	r2,12(sp)
  804c6c:	1002510e 	bge	r2,zero,8055b4 <_dtoa_r+0xbc4>
      b2 -= k;
  804c70:	d8800317 	ldw	r2,12(sp)
  804c74:	d8c00617 	ldw	r3,24(sp)
      s5 = 0;
  804c78:	d8000315 	stw	zero,12(sp)
      b5 = -k;
  804c7c:	d8800415 	stw	r2,16(sp)
      b2 -= k;
  804c80:	1887c83a 	sub	r3,r3,r2
  804c84:	d8c00615 	stw	r3,24(sp)
      b5 = -k;
  804c88:	0087c83a 	sub	r3,zero,r2
  804c8c:	d8c00815 	stw	r3,32(sp)
  if (mode < 0 || mode > 9)
  804c90:	d8c00217 	ldw	r3,8(sp)
  804c94:	188002a8 	cmpgeui	r2,r3,10
  804c98:	10024d1e 	bne	r2,zero,8055d0 <_dtoa_r+0xbe0>
  if (mode > 5)
  804c9c:	18800190 	cmplti	r2,r3,6
  804ca0:	10028b1e 	bne	r2,zero,8056d0 <_dtoa_r+0xce0>
      mode -= 4;
  804ca4:	18bfff04 	addi	r2,r3,-4
  804ca8:	d8800215 	stw	r2,8(sp)
      try_quick = 0;
  804cac:	0021883a 	mov	r16,zero
  switch (mode)
  804cb0:	d8c00217 	ldw	r3,8(sp)
  804cb4:	18800120 	cmpeqi	r2,r3,4
  804cb8:	10035d1e 	bne	r2,zero,805a30 <_dtoa_r+0x1040>
  804cbc:	18800160 	cmpeqi	r2,r3,5
  804cc0:	10031b1e 	bne	r2,zero,805930 <_dtoa_r+0xf40>
  804cc4:	188000a0 	cmpeqi	r2,r3,2
  804cc8:	10024d26 	beq	r2,zero,805600 <_dtoa_r+0xc10>
      leftright = 0;
  804ccc:	d8000715 	stw	zero,28(sp)
      if (ndigits <= 0)
  804cd0:	d8801e17 	ldw	r2,120(sp)
  804cd4:	0083260e 	bge	zero,r2,805970 <_dtoa_r+0xf80>
  804cd8:	d8800b15 	stw	r2,44(sp)
  804cdc:	d8800515 	stw	r2,20(sp)
  804ce0:	100d883a 	mov	r6,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  804ce4:	b8001115 	stw	zero,68(r23)
  804ce8:	30800610 	cmplti	r2,r6,24
  804cec:	1004f11e 	bne	r2,zero,8060b4 <_dtoa_r+0x16c4>
  804cf0:	00c00044 	movi	r3,1
  j = sizeof (__ULong);
  804cf4:	00800104 	movi	r2,4
       j <<= 1)
  804cf8:	1085883a 	add	r2,r2,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  804cfc:	11000504 	addi	r4,r2,20
    _REENT_MP_RESULT_K(ptr)++;
  804d00:	180b883a 	mov	r5,r3
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  804d04:	18c00044 	addi	r3,r3,1
  804d08:	313ffb2e 	bgeu	r6,r4,804cf8 <_dtoa_r+0x308>
  804d0c:	b9401115 	stw	r5,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  804d10:	b809883a 	mov	r4,r23
  804d14:	08081440 	call	808144 <_Balloc>
  804d18:	d8800115 	stw	r2,4(sp)
  804d1c:	1004de26 	beq	r2,zero,806098 <_dtoa_r+0x16a8>
  804d20:	d8800117 	ldw	r2,4(sp)
  804d24:	b8801015 	stw	r2,64(r23)
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
  804d28:	d8800517 	ldw	r2,20(sp)
  804d2c:	108003e8 	cmpgeui	r2,r2,15
  804d30:	1001021e 	bne	r2,zero,80513c <_dtoa_r+0x74c>
  804d34:	80010126 	beq	r16,zero,80513c <_dtoa_r+0x74c>
      if (k > 0)
  804d38:	d9000417 	ldw	r4,16(sp)
  804d3c:	01038b0e 	bge	zero,r4,805b6c <_dtoa_r+0x117c>
	  ds = tens[k & 0xf];
  804d40:	208003cc 	andi	r2,r4,15
  804d44:	100690fa 	slli	r3,r2,3
	  j = k >> 4;
  804d48:	2029d13a 	srai	r20,r4,4
	  ds = tens[k & 0xf];
  804d4c:	00802074 	movhi	r2,129
  804d50:	10891d04 	addi	r2,r2,9332
  804d54:	10c5883a 	add	r2,r2,r3
	  if (j & Bletch)
  804d58:	a0c0040c 	andi	r3,r20,16
	  ds = tens[k & 0xf];
  804d5c:	12800017 	ldw	r10,0(r2)
  804d60:	12400117 	ldw	r9,4(r2)
	  if (j & Bletch)
  804d64:	18032c26 	beq	r3,zero,805a18 <_dtoa_r+0x1028>
	      d.d /= bigtens[n_bigtens - 1];
  804d68:	00802074 	movhi	r2,129
  804d6c:	10891304 	addi	r2,r2,9292
  804d70:	11800817 	ldw	r6,32(r2)
  804d74:	11c00917 	ldw	r7,36(r2)
  804d78:	9809883a 	mov	r4,r19
  804d7c:	880b883a 	mov	r5,r17
  804d80:	da400e15 	stw	r9,56(sp)
  804d84:	da800d15 	stw	r10,52(sp)
  804d88:	080d5c40 	call	80d5c4 <__divdf3>
  804d8c:	da800d17 	ldw	r10,52(sp)
  804d90:	da400e17 	ldw	r9,56(sp)
	      j &= Bletch - 1;
  804d94:	a50003cc 	andi	r20,r20,15
	      d.d /= bigtens[n_bigtens - 1];
  804d98:	d8800c15 	stw	r2,48(sp)
  804d9c:	1825883a 	mov	r18,r3
	      ieps++;
  804da0:	054000c4 	movi	r21,3
	  for (; j; j >>= 1, i++)
  804da4:	a0001126 	beq	r20,zero,804dec <_dtoa_r+0x3fc>
  804da8:	04002074 	movhi	r16,129
  804dac:	84091304 	addi	r16,r16,9292
  804db0:	5009883a 	mov	r4,r10
  804db4:	480b883a 	mov	r5,r9
	    if (j & 1)
  804db8:	a180004c 	andi	r6,r20,1
  804dbc:	30000626 	beq	r6,zero,804dd8 <_dtoa_r+0x3e8>
		ds *= bigtens[i];
  804dc0:	81800017 	ldw	r6,0(r16)
  804dc4:	81c00117 	ldw	r7,4(r16)
		ieps++;
  804dc8:	ad400044 	addi	r21,r21,1
		ds *= bigtens[i];
  804dcc:	080e1440 	call	80e144 <__muldf3>
  804dd0:	1009883a 	mov	r4,r2
  804dd4:	180b883a 	mov	r5,r3
	  for (; j; j >>= 1, i++)
  804dd8:	a029d07a 	srai	r20,r20,1
  804ddc:	84000204 	addi	r16,r16,8
  804de0:	a03ff51e 	bne	r20,zero,804db8 <_dtoa_r+0x3c8>
  804de4:	2015883a 	mov	r10,r4
  804de8:	2813883a 	mov	r9,r5
	  d.d /= ds;
  804dec:	d9000c17 	ldw	r4,48(sp)
  804df0:	900b883a 	mov	r5,r18
  804df4:	500d883a 	mov	r6,r10
  804df8:	480f883a 	mov	r7,r9
  804dfc:	080d5c40 	call	80d5c4 <__divdf3>
  804e00:	1021883a 	mov	r16,r2
  804e04:	1825883a 	mov	r18,r3
      if (k_check && d.d < 1. && ilim > 0)
  804e08:	d8800917 	ldw	r2,36(sp)
  804e0c:	10000626 	beq	r2,zero,804e28 <_dtoa_r+0x438>
  804e10:	000d883a 	mov	r6,zero
  804e14:	01cffc34 	movhi	r7,16368
  804e18:	8009883a 	mov	r4,r16
  804e1c:	900b883a 	mov	r5,r18
  804e20:	080e05c0 	call	80e05c <__ledf2>
  804e24:	10044416 	blt	r2,zero,805f38 <_dtoa_r+0x1548>
      eps.d = ieps * d.d + 7.;
  804e28:	a809883a 	mov	r4,r21
  804e2c:	080f2780 	call	80f278 <__floatsidf>
  804e30:	800d883a 	mov	r6,r16
  804e34:	900f883a 	mov	r7,r18
  804e38:	1009883a 	mov	r4,r2
  804e3c:	180b883a 	mov	r5,r3
  804e40:	080e1440 	call	80e144 <__muldf3>
  804e44:	000d883a 	mov	r6,zero
  804e48:	01d00734 	movhi	r7,16412
  804e4c:	1009883a 	mov	r4,r2
  804e50:	180b883a 	mov	r5,r3
  804e54:	080ccd40 	call	80ccd4 <__adddf3>
  804e58:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  804e5c:	00bf3034 	movhi	r2,64704
  804e60:	1885883a 	add	r2,r3,r2
  804e64:	d8800c15 	stw	r2,48(sp)
      if (ilim == 0)
  804e68:	d8800517 	ldw	r2,20(sp)
  804e6c:	10032226 	beq	r2,zero,805af8 <_dtoa_r+0x1108>
  804e70:	d8800417 	ldw	r2,16(sp)
  804e74:	d8801115 	stw	r2,68(sp)
  804e78:	d8800517 	ldw	r2,20(sp)
  804e7c:	d8800d15 	stw	r2,52(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804e80:	d8800d17 	ldw	r2,52(sp)
	      L = d.d;
  804e84:	900b883a 	mov	r5,r18
  804e88:	8009883a 	mov	r4,r16
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804e8c:	10bfffc4 	addi	r2,r2,-1
  804e90:	100690fa 	slli	r3,r2,3
  804e94:	00802074 	movhi	r2,129
  804e98:	10891d04 	addi	r2,r2,9332
  804e9c:	10c5883a 	add	r2,r2,r3
  804ea0:	12800017 	ldw	r10,0(r2)
  804ea4:	12c00117 	ldw	r11,4(r2)
  804ea8:	da800f15 	stw	r10,60(sp)
  804eac:	dac00e15 	stw	r11,56(sp)
	      L = d.d;
  804eb0:	080f1f80 	call	80f1f8 <__fixdfsi>
  804eb4:	1009883a 	mov	r4,r2
	      *s++ = '0' + (int) L;
  804eb8:	10800c04 	addi	r2,r2,48
  804ebc:	d8801015 	stw	r2,64(sp)
	      d.d -= L;
  804ec0:	080f2780 	call	80f278 <__floatsidf>
  804ec4:	8009883a 	mov	r4,r16
  804ec8:	100d883a 	mov	r6,r2
  804ecc:	180f883a 	mov	r7,r3
  804ed0:	900b883a 	mov	r5,r18
  804ed4:	080e8f00 	call	80e8f0 <__subdf3>
	      *s++ = '0' + (int) L;
  804ed8:	d9000117 	ldw	r4,4(sp)
      if (leftright)
  804edc:	dac00e17 	ldw	r11,56(sp)
  804ee0:	da800f17 	ldw	r10,60(sp)
	      d.d -= L;
  804ee4:	1825883a 	mov	r18,r3
      if (leftright)
  804ee8:	d8c00717 	ldw	r3,28(sp)
	      *s++ = '0' + (int) L;
  804eec:	25400044 	addi	r21,r4,1
	      d.d -= L;
  804ef0:	1021883a 	mov	r16,r2
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804ef4:	500d883a 	mov	r6,r10
  804ef8:	580f883a 	mov	r7,r11
      if (leftright)
  804efc:	1803b626 	beq	r3,zero,805dd8 <_dtoa_r+0x13e8>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804f00:	0009883a 	mov	r4,zero
  804f04:	014ff834 	movhi	r5,16352
  804f08:	080d5c40 	call	80d5c4 <__divdf3>
  804f0c:	d9c00c17 	ldw	r7,48(sp)
  804f10:	a00d883a 	mov	r6,r20
  804f14:	1009883a 	mov	r4,r2
  804f18:	180b883a 	mov	r5,r3
  804f1c:	080e8f00 	call	80e8f0 <__subdf3>
	      *s++ = '0' + (int) L;
  804f20:	d9000117 	ldw	r4,4(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804f24:	1029883a 	mov	r20,r2
	      *s++ = '0' + (int) L;
  804f28:	d8801017 	ldw	r2,64(sp)
	      if (d.d < eps.d)
  804f2c:	800d883a 	mov	r6,r16
  804f30:	900f883a 	mov	r7,r18
	      *s++ = '0' + (int) L;
  804f34:	20800005 	stb	r2,0(r4)
	      if (d.d < eps.d)
  804f38:	180b883a 	mov	r5,r3
  804f3c:	a009883a 	mov	r4,r20
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  804f40:	d8c00c15 	stw	r3,48(sp)
	      if (d.d < eps.d)
  804f44:	080df740 	call	80df74 <__gedf2>
  804f48:	0083e716 	blt	zero,r2,805ee8 <_dtoa_r+0x14f8>
	  for (i = 0;;)
  804f4c:	0005883a 	mov	r2,zero
  804f50:	dd800e15 	stw	r22,56(sp)
  804f54:	dc400f15 	stw	r17,60(sp)
  804f58:	dd800d17 	ldw	r22,52(sp)
  804f5c:	dc400c17 	ldw	r17,48(sp)
  804f60:	ddc00d15 	stw	r23,52(sp)
  804f64:	dcc00c15 	stw	r19,48(sp)
  804f68:	1027883a 	mov	r19,r2
  804f6c:	00002606 	br	805008 <_dtoa_r+0x618>
	      if (++i >= ilim)
  804f70:	9cc00044 	addi	r19,r19,1
  804f74:	9d806d0e 	bge	r19,r22,80512c <_dtoa_r+0x73c>
	      eps.d *= 10.;
  804f78:	a009883a 	mov	r4,r20
  804f7c:	880b883a 	mov	r5,r17
  804f80:	000d883a 	mov	r6,zero
  804f84:	01d00934 	movhi	r7,16420
  804f88:	080e1440 	call	80e144 <__muldf3>
	      d.d *= 10.;
  804f8c:	000d883a 	mov	r6,zero
  804f90:	01d00934 	movhi	r7,16420
  804f94:	8009883a 	mov	r4,r16
  804f98:	900b883a 	mov	r5,r18
	      eps.d *= 10.;
  804f9c:	1029883a 	mov	r20,r2
  804fa0:	1823883a 	mov	r17,r3
	      d.d *= 10.;
  804fa4:	080e1440 	call	80e144 <__muldf3>
	      L = d.d;
  804fa8:	180b883a 	mov	r5,r3
  804fac:	1009883a 	mov	r4,r2
	      d.d *= 10.;
  804fb0:	1821883a 	mov	r16,r3
  804fb4:	1025883a 	mov	r18,r2
	      L = d.d;
  804fb8:	080f1f80 	call	80f1f8 <__fixdfsi>
	      d.d -= L;
  804fbc:	1009883a 	mov	r4,r2
	      L = d.d;
  804fc0:	102f883a 	mov	r23,r2
	      d.d -= L;
  804fc4:	080f2780 	call	80f278 <__floatsidf>
  804fc8:	9009883a 	mov	r4,r18
  804fcc:	800b883a 	mov	r5,r16
  804fd0:	100d883a 	mov	r6,r2
  804fd4:	180f883a 	mov	r7,r3
  804fd8:	080e8f00 	call	80e8f0 <__subdf3>
	      *s++ = '0' + (int) L;
  804fdc:	ad400044 	addi	r21,r21,1
  804fe0:	ba000c04 	addi	r8,r23,48
  804fe4:	aa3fffc5 	stb	r8,-1(r21)
	      if (d.d < eps.d)
  804fe8:	a00d883a 	mov	r6,r20
  804fec:	880f883a 	mov	r7,r17
  804ff0:	1009883a 	mov	r4,r2
  804ff4:	180b883a 	mov	r5,r3
	      d.d -= L;
  804ff8:	1021883a 	mov	r16,r2
  804ffc:	1825883a 	mov	r18,r3
	      if (d.d < eps.d)
  805000:	080e05c0 	call	80e05c <__ledf2>
  805004:	10040516 	blt	r2,zero,80601c <_dtoa_r+0x162c>
	      if (1. - d.d < eps.d)
  805008:	800d883a 	mov	r6,r16
  80500c:	900f883a 	mov	r7,r18
  805010:	0009883a 	mov	r4,zero
  805014:	014ffc34 	movhi	r5,16368
  805018:	080e8f00 	call	80e8f0 <__subdf3>
  80501c:	a00d883a 	mov	r6,r20
  805020:	880f883a 	mov	r7,r17
  805024:	1009883a 	mov	r4,r2
  805028:	180b883a 	mov	r5,r3
  80502c:	080e05c0 	call	80e05c <__ledf2>
  805030:	103fcf0e 	bge	r2,zero,804f70 <_dtoa_r+0x580>
			k++;
  805034:	d8801117 	ldw	r2,68(sp)
  805038:	ddc00d17 	ldw	r23,52(sp)
  80503c:	d9000117 	ldw	r4,4(sp)
  805040:	10800044 	addi	r2,r2,1
  805044:	d8800415 	stw	r2,16(sp)
  805048:	a829883a 	mov	r20,r21
  80504c:	00000106 	br	805054 <_dtoa_r+0x664>
		    if (s == s0)
  805050:	a103da26 	beq	r20,r4,805fbc <_dtoa_r+0x15cc>
		  while (*--s == '9')
  805054:	a0ffffc3 	ldbu	r3,-1(r20)
  805058:	a02b883a 	mov	r21,r20
  80505c:	a53fffc4 	addi	r20,r20,-1
  805060:	18803fcc 	andi	r2,r3,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	10800e60 	cmpeqi	r2,r2,57
  805070:	103ff71e 	bne	r2,zero,805050 <_dtoa_r+0x660>
		  ++*s++;
  805074:	18c00044 	addi	r3,r3,1
  805078:	a0c00005 	stb	r3,0(r20)
  80507c:	00013f06 	br	80557c <_dtoa_r+0xb8c>
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  805080:	04600034 	movhi	r17,32768
  805084:	8c7fffc4 	addi	r17,r17,-1
  805088:	9462703a 	and	r17,r18,r17
      *sign = 1;
  80508c:	00800044 	movi	r2,1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  805090:	8825883a 	mov	r18,r17
      *sign = 1;
  805094:	80800015 	stw	r2,0(r16)
  if ((word0 (d) & Exp_mask) == Exp_mask)
  805098:	00dffc34 	movhi	r3,32752
  80509c:	909ffc2c 	andhi	r2,r18,32752
  8050a0:	10fe731e 	bne	r2,r3,804a70 <_dtoa_r+0x80>
      *decpt = 9999;
  8050a4:	d9001f17 	ldw	r4,124(sp)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8050a8:	00800434 	movhi	r2,16
  8050ac:	10bfffc4 	addi	r2,r2,-1
  8050b0:	9084703a 	and	r2,r18,r2
      *decpt = 9999;
  8050b4:	00c9c3c4 	movi	r3,9999
  8050b8:	20c00015 	stw	r3,0(r4)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8050bc:	14e6b03a 	or	r19,r2,r19
  8050c0:	9800141e 	bne	r19,zero,805114 <_dtoa_r+0x724>
      if (rve)
  8050c4:	d8802117 	ldw	r2,132(sp)
  8050c8:	10041226 	beq	r2,zero,806114 <_dtoa_r+0x1724>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8050cc:	00802074 	movhi	r2,129
  8050d0:	1007883a 	mov	r3,r2
  8050d4:	18c8c604 	addi	r3,r3,8984
	  s[3] ? s + 8 :
  8050d8:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8050dc:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  8050e0:	1088c804 	addi	r2,r2,8992
	*rve =
  8050e4:	d8c02117 	ldw	r3,132(sp)
  8050e8:	18800015 	stw	r2,0(r3)
  8050ec:	003e7206 	br	804ab8 <_dtoa_r+0xc8>
      word0 (d2) &= Frac_mask1;
  8050f0:	01400434 	movhi	r5,16
  8050f4:	297fffc4 	addi	r5,r5,-1
  8050f8:	894a703a 	and	r5,r17,r5
      i = bbits + be + (Bias + (P - 1) - 1);
  8050fc:	dd001217 	ldw	r20,72(sp)
      d2.d = d.d;
  805100:	9809883a 	mov	r4,r19
      word0 (d2) |= Exp_11;
  805104:	294ffc34 	orhi	r5,r5,16368
      i -= Bias;
  805108:	843f0044 	addi	r16,r16,-1023
      denorm = 0;
  80510c:	d8000a15 	stw	zero,40(sp)
  805110:	003e9306 	br	804b60 <_dtoa_r+0x170>
      if (rve)
  805114:	d8802117 	ldw	r2,132(sp)
  805118:	1001fe1e 	bne	r2,zero,805914 <_dtoa_r+0xf24>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80511c:	00802074 	movhi	r2,129
  805120:	1088c504 	addi	r2,r2,8980
  805124:	d8800115 	stw	r2,4(sp)
  805128:	003e6306 	br	804ab8 <_dtoa_r+0xc8>
  80512c:	dd800e17 	ldw	r22,56(sp)
  805130:	ddc00d17 	ldw	r23,52(sp)
  805134:	dc400f17 	ldw	r17,60(sp)
  805138:	dcc00c17 	ldw	r19,48(sp)
  if (be >= 0 && k <= Int_max)
  80513c:	d8801317 	ldw	r2,76(sp)
  805140:	10006e16 	blt	r2,zero,8052fc <_dtoa_r+0x90c>
  805144:	d9000417 	ldw	r4,16(sp)
  805148:	20c003c8 	cmpgei	r3,r4,15
  80514c:	18006b1e 	bne	r3,zero,8052fc <_dtoa_r+0x90c>
      ds = tens[k];
  805150:	200690fa 	slli	r3,r4,3
  805154:	00802074 	movhi	r2,129
  805158:	10891d04 	addi	r2,r2,9332
  80515c:	10c5883a 	add	r2,r2,r3
  805160:	14000017 	ldw	r16,0(r2)
  805164:	14800117 	ldw	r18,4(r2)
      if (ndigits < 0 && ilim <= 0)
  805168:	d8801e17 	ldw	r2,120(sp)
  80516c:	1000150e 	bge	r2,zero,8051c4 <_dtoa_r+0x7d4>
  805170:	d8800517 	ldw	r2,20(sp)
  805174:	00801316 	blt	zero,r2,8051c4 <_dtoa_r+0x7d4>
	  if (ilim < 0 || d.d <= 5 * ds)
  805178:	d8800517 	ldw	r2,20(sp)
  80517c:	1002721e 	bne	r2,zero,805b48 <_dtoa_r+0x1158>
  805180:	8009883a 	mov	r4,r16
  805184:	000d883a 	mov	r6,zero
  805188:	01d00534 	movhi	r7,16404
  80518c:	900b883a 	mov	r5,r18
  805190:	080e1440 	call	80e144 <__muldf3>
  805194:	100d883a 	mov	r6,r2
  805198:	180f883a 	mov	r7,r3
  80519c:	9809883a 	mov	r4,r19
  8051a0:	880b883a 	mov	r5,r17
  8051a4:	080e05c0 	call	80e05c <__ledf2>
	  S = mhi = 0;
  8051a8:	0029883a 	mov	r20,zero
  8051ac:	0021883a 	mov	r16,zero
	  if (ilim < 0 || d.d <= 5 * ds)
  8051b0:	00820216 	blt	zero,r2,8059bc <_dtoa_r+0xfcc>
	  k = -1 - ndigits;
  8051b4:	d8801e17 	ldw	r2,120(sp)
	  goto ret;
  8051b8:	dd400117 	ldw	r21,4(sp)
	  k = -1 - ndigits;
  8051bc:	00a2303a 	nor	r17,zero,r2
	  goto ret;
  8051c0:	00020406 	br	8059d4 <_dtoa_r+0xfe4>
	  L = d.d / ds;
  8051c4:	800d883a 	mov	r6,r16
  8051c8:	900f883a 	mov	r7,r18
  8051cc:	9809883a 	mov	r4,r19
  8051d0:	880b883a 	mov	r5,r17
  8051d4:	080d5c40 	call	80d5c4 <__divdf3>
  8051d8:	180b883a 	mov	r5,r3
  8051dc:	1009883a 	mov	r4,r2
  8051e0:	080f1f80 	call	80f1f8 <__fixdfsi>
	  d.d -= L * ds;
  8051e4:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  8051e8:	102b883a 	mov	r21,r2
	  d.d -= L * ds;
  8051ec:	080f2780 	call	80f278 <__floatsidf>
  8051f0:	800d883a 	mov	r6,r16
  8051f4:	900f883a 	mov	r7,r18
  8051f8:	1009883a 	mov	r4,r2
  8051fc:	180b883a 	mov	r5,r3
  805200:	080e1440 	call	80e144 <__muldf3>
  805204:	100d883a 	mov	r6,r2
  805208:	9809883a 	mov	r4,r19
  80520c:	880b883a 	mov	r5,r17
  805210:	180f883a 	mov	r7,r3
  805214:	080e8f00 	call	80e8f0 <__subdf3>
	  *s++ = '0' + (int) L;
  805218:	d9800117 	ldw	r6,4(sp)
	  if (i == ilim)
  80521c:	dd800517 	ldw	r22,20(sp)
	  d.d -= L * ds;
  805220:	1009883a 	mov	r4,r2
	  *s++ = '0' + (int) L;
  805224:	a8800c04 	addi	r2,r21,48
  805228:	30800005 	stb	r2,0(r6)
	  if (i == ilim)
  80522c:	b0800060 	cmpeqi	r2,r22,1
	  d.d -= L * ds;
  805230:	180b883a 	mov	r5,r3
	  *s++ = '0' + (int) L;
  805234:	35000044 	addi	r20,r6,1
	  if (i == ilim)
  805238:	10029f1e 	bne	r2,zero,805cb8 <_dtoa_r+0x12c8>
  80523c:	04400044 	movi	r17,1
  805240:	ddc00215 	stw	r23,8(sp)
  805244:	00001c06 	br	8052b8 <_dtoa_r+0x8c8>
	  L = d.d / ds;
  805248:	800d883a 	mov	r6,r16
  80524c:	900f883a 	mov	r7,r18
  805250:	a809883a 	mov	r4,r21
  805254:	980b883a 	mov	r5,r19
  805258:	080d5c40 	call	80d5c4 <__divdf3>
  80525c:	180b883a 	mov	r5,r3
  805260:	1009883a 	mov	r4,r2
  805264:	080f1f80 	call	80f1f8 <__fixdfsi>
	  d.d -= L * ds;
  805268:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  80526c:	102f883a 	mov	r23,r2
	  d.d -= L * ds;
  805270:	080f2780 	call	80f278 <__floatsidf>
  805274:	800d883a 	mov	r6,r16
  805278:	900f883a 	mov	r7,r18
  80527c:	1009883a 	mov	r4,r2
  805280:	180b883a 	mov	r5,r3
  805284:	080e1440 	call	80e144 <__muldf3>
  805288:	a809883a 	mov	r4,r21
  80528c:	980b883a 	mov	r5,r19
  805290:	100d883a 	mov	r6,r2
  805294:	180f883a 	mov	r7,r3
  805298:	080e8f00 	call	80e8f0 <__subdf3>
	  *s++ = '0' + (int) L;
  80529c:	b9000c04 	addi	r4,r23,48
  8052a0:	a1000005 	stb	r4,0(r20)
      for (i = 1;; i++)
  8052a4:	8c400044 	addi	r17,r17,1
	  *s++ = '0' + (int) L;
  8052a8:	a5000044 	addi	r20,r20,1
	  d.d -= L * ds;
  8052ac:	1009883a 	mov	r4,r2
  8052b0:	180b883a 	mov	r5,r3
	  if (i == ilim)
  8052b4:	8d827e26 	beq	r17,r22,805cb0 <_dtoa_r+0x12c0>
	  if (!(d.d *= 10.))
  8052b8:	000d883a 	mov	r6,zero
  8052bc:	01d00934 	movhi	r7,16420
  8052c0:	080e1440 	call	80e144 <__muldf3>
  8052c4:	000d883a 	mov	r6,zero
  8052c8:	000f883a 	mov	r7,zero
  8052cc:	1009883a 	mov	r4,r2
  8052d0:	180b883a 	mov	r5,r3
  8052d4:	102b883a 	mov	r21,r2
  8052d8:	1827883a 	mov	r19,r3
  8052dc:	080def40 	call	80def4 <__eqdf2>
  8052e0:	103fd91e 	bne	r2,zero,805248 <_dtoa_r+0x858>
  *decpt = k + 1;
  8052e4:	d8800417 	ldw	r2,16(sp)
  8052e8:	ddc00217 	ldw	r23,8(sp)
  8052ec:	a02b883a 	mov	r21,r20
  8052f0:	10800044 	addi	r2,r2,1
  8052f4:	d8800415 	stw	r2,16(sp)
  8052f8:	0000a006 	br	80557c <_dtoa_r+0xb8c>
  if (leftright)
  8052fc:	d8c00717 	ldw	r3,28(sp)
  805300:	1800e326 	beq	r3,zero,805690 <_dtoa_r+0xca0>
      if (mode < 2)
  805304:	d8c00217 	ldw	r3,8(sp)
  805308:	18c00088 	cmpgei	r3,r3,2
  80530c:	1801e026 	beq	r3,zero,805a90 <_dtoa_r+0x10a0>
	  j = ilim - 1;
  805310:	d8800517 	ldw	r2,20(sp)
  805314:	153fffc4 	addi	r20,r2,-1
	  if (m5 >= j)
  805318:	d8800817 	ldw	r2,32(sp)
  80531c:	1501bc0e 	bge	r2,r20,805a10 <_dtoa_r+0x1020>
	      s5 += j -= m5;
  805320:	d8800817 	ldw	r2,32(sp)
  805324:	d8c00317 	ldw	r3,12(sp)
  805328:	dd000815 	stw	r20,32(sp)
  80532c:	a085c83a 	sub	r2,r20,r2
  805330:	1885883a 	add	r2,r3,r2
  805334:	d8800315 	stw	r2,12(sp)
	      m5 = 0;
  805338:	0029883a 	mov	r20,zero
	  if ((i = ilim) < 0)
  80533c:	d8800517 	ldw	r2,20(sp)
  805340:	10028b16 	blt	r2,zero,805d70 <_dtoa_r+0x1380>
  m2 = b2;
  805344:	d8c00617 	ldw	r3,24(sp)
      s2 += i;
  805348:	b0ad883a 	add	r22,r22,r2
  80534c:	1885883a 	add	r2,r3,r2
  m2 = b2;
  805350:	1825883a 	mov	r18,r3
      s2 += i;
  805354:	d8800615 	stw	r2,24(sp)
      mhi = i2b (ptr, 1);
  805358:	01400044 	movi	r5,1
  80535c:	b809883a 	mov	r4,r23
  805360:	08085b40 	call	8085b4 <__i2b>
  805364:	1021883a 	mov	r16,r2
  if (m2 > 0 && s2 > 0)
  805368:	0480080e 	bge	zero,r18,80538c <_dtoa_r+0x99c>
  80536c:	0580070e 	bge	zero,r22,80538c <_dtoa_r+0x99c>
      i = m2 < s2 ? m2 : s2;
  805370:	9005883a 	mov	r2,r18
  805374:	b4819e16 	blt	r22,r18,8059f0 <_dtoa_r+0x1000>
      b2 -= i;
  805378:	d8c00617 	ldw	r3,24(sp)
      m2 -= i;
  80537c:	90a5c83a 	sub	r18,r18,r2
      s2 -= i;
  805380:	b0adc83a 	sub	r22,r22,r2
      b2 -= i;
  805384:	1887c83a 	sub	r3,r3,r2
  805388:	d8c00615 	stw	r3,24(sp)
  if (b5 > 0)
  80538c:	d8800817 	ldw	r2,32(sp)
  805390:	10001426 	beq	r2,zero,8053e4 <_dtoa_r+0x9f4>
      if (leftright)
  805394:	d8800717 	ldw	r2,28(sp)
  805398:	1001ee26 	beq	r2,zero,805b54 <_dtoa_r+0x1164>
	  if (m5 > 0)
  80539c:	05000e0e 	bge	zero,r20,8053d8 <_dtoa_r+0x9e8>
	      mhi = pow5mult (ptr, mhi, m5);
  8053a0:	800b883a 	mov	r5,r16
  8053a4:	a00d883a 	mov	r6,r20
  8053a8:	b809883a 	mov	r4,r23
  8053ac:	08089280 	call	808928 <__pow5mult>
	      b1 = mult (ptr, mhi, b);
  8053b0:	e00d883a 	mov	r6,fp
  8053b4:	100b883a 	mov	r5,r2
  8053b8:	b809883a 	mov	r4,r23
	      mhi = pow5mult (ptr, mhi, m5);
  8053bc:	1021883a 	mov	r16,r2
	      b1 = mult (ptr, mhi, b);
  8053c0:	08086640 	call	808664 <__multiply>
  8053c4:	102b883a 	mov	r21,r2
	      Bfree (ptr, b);
  8053c8:	e00b883a 	mov	r5,fp
  8053cc:	b809883a 	mov	r4,r23
  8053d0:	08081e80 	call	8081e8 <_Bfree>
	      b = b1;
  8053d4:	a839883a 	mov	fp,r21
         if ((j = b5 - m5) != 0)
  8053d8:	d8800817 	ldw	r2,32(sp)
  8053dc:	150dc83a 	sub	r6,r2,r20
  8053e0:	15025e1e 	bne	r2,r20,805d5c <_dtoa_r+0x136c>
  S = i2b (ptr, 1);
  8053e4:	01400044 	movi	r5,1
  8053e8:	b809883a 	mov	r4,r23
  8053ec:	08085b40 	call	8085b4 <__i2b>
  if (s5 > 0)
  8053f0:	d9800317 	ldw	r6,12(sp)
  S = i2b (ptr, 1);
  8053f4:	1029883a 	mov	r20,r2
  if (s5 > 0)
  8053f8:	0180b716 	blt	zero,r6,8056d8 <_dtoa_r+0xce8>
  if (mode < 2)
  8053fc:	d8800217 	ldw	r2,8(sp)
  805400:	10800088 	cmpgei	r2,r2,2
  805404:	10014d26 	beq	r2,zero,80593c <_dtoa_r+0xf4c>
  spec_case = 0;
  805408:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  80540c:	d8c00317 	ldw	r3,12(sp)
  805410:	00800044 	movi	r2,1
  805414:	1800b81e 	bne	r3,zero,8056f8 <_dtoa_r+0xd08>
  805418:	1585883a 	add	r2,r2,r22
  80541c:	108007cc 	andi	r2,r2,31
  805420:	1000a526 	beq	r2,zero,8056b8 <_dtoa_r+0xcc8>
    i = 32 - i;
  805424:	00c00804 	movi	r3,32
  805428:	1887c83a 	sub	r3,r3,r2
  if (i > 4)
  80542c:	19000150 	cmplti	r4,r3,5
  805430:	20033c1e 	bne	r4,zero,806124 <_dtoa_r+0x1734>
      i -= 4;
  805434:	00c00704 	movi	r3,28
  805438:	1885c83a 	sub	r2,r3,r2
      b2 += i;
  80543c:	d8c00617 	ldw	r3,24(sp)
      m2 += i;
  805440:	90a5883a 	add	r18,r18,r2
      s2 += i;
  805444:	b0ad883a 	add	r22,r22,r2
      b2 += i;
  805448:	1887883a 	add	r3,r3,r2
  80544c:	d8c00615 	stw	r3,24(sp)
  if (b2 > 0)
  805450:	d8800617 	ldw	r2,24(sp)
  805454:	00809216 	blt	zero,r2,8056a0 <_dtoa_r+0xcb0>
  if (s2 > 0)
  805458:	0580050e 	bge	zero,r22,805470 <_dtoa_r+0xa80>
    S = lshift (ptr, S, s2);
  80545c:	a00b883a 	mov	r5,r20
  805460:	b00d883a 	mov	r6,r22
  805464:	b809883a 	mov	r4,r23
  805468:	0808a700 	call	808a70 <__lshift>
  80546c:	1029883a 	mov	r20,r2
  if (k_check)
  805470:	d8800917 	ldw	r2,36(sp)
  805474:	1001151e 	bne	r2,zero,8058cc <_dtoa_r+0xedc>
  if (ilim <= 0 && mode > 2)
  805478:	d8800517 	ldw	r2,20(sp)
  80547c:	0081020e 	bge	zero,r2,805888 <_dtoa_r+0xe98>
  if (leftright)
  805480:	d8800717 	ldw	r2,28(sp)
  805484:	1000af1e 	bne	r2,zero,805744 <_dtoa_r+0xd54>
  *decpt = k + 1;
  805488:	d8800417 	ldw	r2,16(sp)
  80548c:	10800044 	addi	r2,r2,1
  805490:	d8800415 	stw	r2,16(sp)
  if (ilim <= 0 && mode > 2)
  805494:	dc800517 	ldw	r18,20(sp)
  805498:	dd400117 	ldw	r21,4(sp)
  80549c:	04400044 	movi	r17,1
  8054a0:	00000706 	br	8054c0 <_dtoa_r+0xad0>
	b = multadd (ptr, b, 10, 0);
  8054a4:	e00b883a 	mov	r5,fp
  8054a8:	000f883a 	mov	r7,zero
  8054ac:	01800284 	movi	r6,10
  8054b0:	b809883a 	mov	r4,r23
  8054b4:	080820c0 	call	80820c <__multadd>
  8054b8:	1039883a 	mov	fp,r2
    for (i = 1;; i++)
  8054bc:	8c400044 	addi	r17,r17,1
	*s++ = dig = quorem (b, S) + '0';
  8054c0:	a00b883a 	mov	r5,r20
  8054c4:	e009883a 	mov	r4,fp
  8054c8:	08047d00 	call	8047d0 <quorem>
  8054cc:	14c00c04 	addi	r19,r2,48
  8054d0:	ac45883a 	add	r2,r21,r17
  8054d4:	14ffffc5 	stb	r19,-1(r2)
	if (i >= ilim)
  8054d8:	8cbff216 	blt	r17,r18,8054a4 <_dtoa_r+0xab4>
	*s++ = dig = quorem (b, S) + '0';
  8054dc:	d8800517 	ldw	r2,20(sp)
  8054e0:	0081510e 	bge	zero,r2,805a28 <_dtoa_r+0x1038>
  8054e4:	d8c00117 	ldw	r3,4(sp)
  mhi = mlo = 0;
  8054e8:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  8054ec:	18ab883a 	add	r21,r3,r2
  b = lshift (ptr, b, 1);
  8054f0:	e00b883a 	mov	r5,fp
  8054f4:	01800044 	movi	r6,1
  8054f8:	b809883a 	mov	r4,r23
  8054fc:	0808a700 	call	808a70 <__lshift>
  j = cmp (b, S);
  805500:	1009883a 	mov	r4,r2
  805504:	a00b883a 	mov	r5,r20
  b = lshift (ptr, b, 1);
  805508:	1039883a 	mov	fp,r2
  j = cmp (b, S);
  80550c:	0808bf80 	call	808bf8 <__mcmp>
      while (*--s == '9')
  805510:	a93fffc3 	ldbu	r4,-1(r21)
  if ((j > 0) || ((j == 0) && (dig & 1)))
  805514:	0081490e 	bge	zero,r2,805a3c <_dtoa_r+0x104c>
  805518:	d9400117 	ldw	r5,4(sp)
  80551c:	00000306 	br	80552c <_dtoa_r+0xb3c>
	if (s == s0)
  805520:	19415426 	beq	r3,r5,805a74 <_dtoa_r+0x1084>
      while (*--s == '9')
  805524:	193fffc3 	ldbu	r4,-1(r3)
  805528:	182b883a 	mov	r21,r3
  80552c:	20803fcc 	andi	r2,r4,255
  805530:	1080201c 	xori	r2,r2,128
  805534:	10bfe004 	addi	r2,r2,-128
  805538:	10800e60 	cmpeqi	r2,r2,57
  80553c:	a8ffffc4 	addi	r3,r21,-1
  805540:	103ff71e 	bne	r2,zero,805520 <_dtoa_r+0xb30>
      ++*s++;
  805544:	21000044 	addi	r4,r4,1
  805548:	19000005 	stb	r4,0(r3)
  Bfree (ptr, S);
  80554c:	a00b883a 	mov	r5,r20
  805550:	b809883a 	mov	r4,r23
  805554:	08081e80 	call	8081e8 <_Bfree>
  if (mhi)
  805558:	80000826 	beq	r16,zero,80557c <_dtoa_r+0xb8c>
      if (mlo && mlo != mhi)
  80555c:	88000426 	beq	r17,zero,805570 <_dtoa_r+0xb80>
  805560:	8c000326 	beq	r17,r16,805570 <_dtoa_r+0xb80>
	Bfree (ptr, mlo);
  805564:	880b883a 	mov	r5,r17
  805568:	b809883a 	mov	r4,r23
  80556c:	08081e80 	call	8081e8 <_Bfree>
      Bfree (ptr, mhi);
  805570:	800b883a 	mov	r5,r16
  805574:	b809883a 	mov	r4,r23
  805578:	08081e80 	call	8081e8 <_Bfree>
  Bfree (ptr, b);
  80557c:	e00b883a 	mov	r5,fp
  805580:	b809883a 	mov	r4,r23
  805584:	08081e80 	call	8081e8 <_Bfree>
  *decpt = k + 1;
  805588:	d8801f17 	ldw	r2,124(sp)
  80558c:	d8c00417 	ldw	r3,16(sp)
  *s = 0;
  805590:	a8000005 	stb	zero,0(r21)
  *decpt = k + 1;
  805594:	10c00015 	stw	r3,0(r2)
  if (rve)
  805598:	d8802117 	ldw	r2,132(sp)
  80559c:	103d4626 	beq	r2,zero,804ab8 <_dtoa_r+0xc8>
    *rve = s;
  8055a0:	15400015 	stw	r21,0(r2)
  8055a4:	003d4406 	br	804ab8 <_dtoa_r+0xc8>
      k_check = 0;
  8055a8:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  8055ac:	b0002416 	blt	r22,zero,805640 <_dtoa_r+0xc50>
      b2 = 0;
  8055b0:	d8000615 	stw	zero,24(sp)
      s2 += k;
  8055b4:	d8800317 	ldw	r2,12(sp)
  if (mode < 0 || mode > 9)
  8055b8:	d8c00217 	ldw	r3,8(sp)
      b5 = 0;
  8055bc:	d8000815 	stw	zero,32(sp)
      s2 += k;
  8055c0:	b0ad883a 	add	r22,r22,r2
  if (mode < 0 || mode > 9)
  8055c4:	d8800415 	stw	r2,16(sp)
  8055c8:	188002a8 	cmpgeui	r2,r3,10
  8055cc:	103db326 	beq	r2,zero,804c9c <_dtoa_r+0x2ac>
  leftright = 1;
  8055d0:	00800044 	movi	r2,1
  8055d4:	d8800715 	stw	r2,28(sp)
  ilim = ilim1 = -1;
  8055d8:	00bfffc4 	movi	r2,-1
  try_quick = 1;
  8055dc:	04000044 	movi	r16,1
    mode = 0;
  8055e0:	d8000215 	stw	zero,8(sp)
  ilim = ilim1 = -1;
  8055e4:	d8800515 	stw	r2,20(sp)
      ndigits = 0;
  8055e8:	d8001e15 	stw	zero,120(sp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8055ec:	d8800517 	ldw	r2,20(sp)
  8055f0:	b8001115 	stw	zero,68(r23)
  8055f4:	000b883a 	mov	r5,zero
  8055f8:	d8800b15 	stw	r2,44(sp)
  8055fc:	003dc406 	br	804d10 <_dtoa_r+0x320>
  switch (mode)
  805600:	188000e0 	cmpeqi	r2,r3,3
      leftright = 0;
  805604:	d8000715 	stw	zero,28(sp)
  switch (mode)
  805608:	1002ac26 	beq	r2,zero,8060bc <_dtoa_r+0x16cc>
      i = ndigits + k + 1;
  80560c:	d8801e17 	ldw	r2,120(sp)
  805610:	d8c00417 	ldw	r3,16(sp)
  805614:	10c5883a 	add	r2,r2,r3
  805618:	d8800b15 	stw	r2,44(sp)
  80561c:	10800044 	addi	r2,r2,1
  805620:	d8800515 	stw	r2,20(sp)
      if (i <= 0)
  805624:	100d883a 	mov	r6,r2
  805628:	00bdae16 	blt	zero,r2,804ce4 <_dtoa_r+0x2f4>
  80562c:	01800044 	movi	r6,1
  805630:	003dac06 	br	804ce4 <_dtoa_r+0x2f4>
  k_check = 1;
  805634:	00800044 	movi	r2,1
  805638:	d8800915 	stw	r2,36(sp)
  if (j >= 0)
  80563c:	b03d890e 	bge	r22,zero,804c64 <_dtoa_r+0x274>
      b2 = -j;
  805640:	00800044 	movi	r2,1
  805644:	1405c83a 	sub	r2,r2,r16
  805648:	d8800615 	stw	r2,24(sp)
      s2 = 0;
  80564c:	002d883a 	mov	r22,zero
  805650:	003d8506 	br	804c68 <_dtoa_r+0x278>
  if (ds < 0. && ds != k)
  805654:	a809883a 	mov	r4,r21
  805658:	080f2780 	call	80f278 <__floatsidf>
  80565c:	900d883a 	mov	r6,r18
  805660:	b00f883a 	mov	r7,r22
  805664:	1009883a 	mov	r4,r2
  805668:	180b883a 	mov	r5,r3
  80566c:	080def40 	call	80def4 <__eqdf2>
  805670:	103d6926 	beq	r2,zero,804c18 <_dtoa_r+0x228>
    k--;			/* want k = floor(ds) */
  805674:	a8bfffc4 	addi	r2,r21,-1
  805678:	d8800315 	stw	r2,12(sp)
  80567c:	003d6606 	br	804c18 <_dtoa_r+0x228>
      return s;
  805680:	00802074 	movhi	r2,129
  805684:	1088bc04 	addi	r2,r2,8944
  805688:	d8800115 	stw	r2,4(sp)
  80568c:	003d0a06 	br	804ab8 <_dtoa_r+0xc8>
  805690:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  805694:	dc800617 	ldw	r18,24(sp)
  mhi = mlo = 0;
  805698:	0021883a 	mov	r16,zero
  80569c:	003f3206 	br	805368 <_dtoa_r+0x978>
    b = lshift (ptr, b, b2);
  8056a0:	e00b883a 	mov	r5,fp
  8056a4:	100d883a 	mov	r6,r2
  8056a8:	b809883a 	mov	r4,r23
  8056ac:	0808a700 	call	808a70 <__lshift>
  8056b0:	1039883a 	mov	fp,r2
  8056b4:	003f6806 	br	805458 <_dtoa_r+0xa68>
  8056b8:	00800704 	movi	r2,28
  8056bc:	003f5f06 	br	80543c <_dtoa_r+0xa4c>
       : (word1 (d) << (32 - i));
  8056c0:	01000804 	movi	r4,32
  8056c4:	2089c83a 	sub	r4,r4,r2
  8056c8:	9908983a 	sll	r4,r19,r4
  8056cc:	003d1d06 	br	804b44 <_dtoa_r+0x154>
  try_quick = 1;
  8056d0:	04000044 	movi	r16,1
  8056d4:	003d7606 	br	804cb0 <_dtoa_r+0x2c0>
    S = pow5mult (ptr, S, s5);
  8056d8:	100b883a 	mov	r5,r2
  8056dc:	b809883a 	mov	r4,r23
  8056e0:	08089280 	call	808928 <__pow5mult>
  if (mode < 2)
  8056e4:	d8c00217 	ldw	r3,8(sp)
    S = pow5mult (ptr, S, s5);
  8056e8:	1029883a 	mov	r20,r2
  if (mode < 2)
  8056ec:	18c00090 	cmplti	r3,r3,2
  8056f0:	1801511e 	bne	r3,zero,805c38 <_dtoa_r+0x1248>
  spec_case = 0;
  8056f4:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  8056f8:	a0800417 	ldw	r2,16(r20)
  8056fc:	10800104 	addi	r2,r2,4
  805700:	100490ba 	slli	r2,r2,2
  805704:	a085883a 	add	r2,r20,r2
  805708:	11000017 	ldw	r4,0(r2)
  80570c:	08084a00 	call	8084a0 <__hi0bits>
  805710:	00c00804 	movi	r3,32
  805714:	1885c83a 	sub	r2,r3,r2
  805718:	003f3f06 	br	805418 <_dtoa_r+0xa28>
	    mhi = multadd (ptr, mhi, 10, 0);
  80571c:	800b883a 	mov	r5,r16
  805720:	000f883a 	mov	r7,zero
  805724:	01800284 	movi	r6,10
  805728:	b809883a 	mov	r4,r23
  80572c:	080820c0 	call	80820c <__multadd>
  805730:	1021883a 	mov	r16,r2
  if (ilim <= 0 && mode > 2)
  805734:	d8800b17 	ldw	r2,44(sp)
  805738:	00824b0e 	bge	zero,r2,806068 <_dtoa_r+0x1678>
	  k--;
  80573c:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  805740:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  805744:	0480ac16 	blt	zero,r18,8059f8 <_dtoa_r+0x1008>
      if (spec_case)
  805748:	8801731e 	bne	r17,zero,805d18 <_dtoa_r+0x1328>
  80574c:	8025883a 	mov	r18,r16
  805750:	dd800117 	ldw	r22,4(sp)
  805754:	d9000517 	ldw	r4,20(sp)
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  805758:	98c0004c 	andi	r3,r19,1
  80575c:	b0bfffc4 	addi	r2,r22,-1
  805760:	1105883a 	add	r2,r2,r4
  805764:	d8800515 	stw	r2,20(sp)
  805768:	d8800217 	ldw	r2,8(sp)
  80576c:	d8c00815 	stw	r3,32(sp)
  805770:	1884b03a 	or	r2,r3,r2
  805774:	d8800715 	stw	r2,28(sp)
  805778:	00002906 	br	805820 <_dtoa_r+0xe30>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  80577c:	e009883a 	mov	r4,fp
  805780:	0808bf80 	call	808bf8 <__mcmp>
	  Bfree (ptr, delta);
  805784:	980b883a 	mov	r5,r19
  805788:	b809883a 	mov	r4,r23
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  80578c:	d8800315 	stw	r2,12(sp)
	  Bfree (ptr, delta);
  805790:	08081e80 	call	8081e8 <_Bfree>
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  805794:	d8800317 	ldw	r2,12(sp)
  805798:	1000021e 	bne	r2,zero,8057a4 <_dtoa_r+0xdb4>
  80579c:	d8c00717 	ldw	r3,28(sp)
  8057a0:	18022326 	beq	r3,zero,806030 <_dtoa_r+0x1640>
         if ((j < 0) || ((j == 0) && !mode
  8057a4:	b4c00044 	addi	r19,r22,1
  8057a8:	88012916 	blt	r17,zero,805c50 <_dtoa_r+0x1260>
	      && !(word1 (d) & 1)
  8057ac:	d8c00217 	ldw	r3,8(sp)
  8057b0:	88e2b03a 	or	r17,r17,r3
  8057b4:	d8c00817 	ldw	r3,32(sp)
  8057b8:	1c62b03a 	or	r17,r3,r17
  8057bc:	88012426 	beq	r17,zero,805c50 <_dtoa_r+0x1260>
	  if (j1 > 0)
  8057c0:	00816f16 	blt	zero,r2,805d80 <_dtoa_r+0x1390>
	  if (i == ilim)
  8057c4:	d8800517 	ldw	r2,20(sp)
	  *s++ = dig;
  8057c8:	b5400005 	stb	r21,0(r22)
	  if (i == ilim)
  8057cc:	15817926 	beq	r2,r22,805db4 <_dtoa_r+0x13c4>
	  b = multadd (ptr, b, 10, 0);
  8057d0:	e00b883a 	mov	r5,fp
  8057d4:	000f883a 	mov	r7,zero
  8057d8:	01800284 	movi	r6,10
  8057dc:	b809883a 	mov	r4,r23
  8057e0:	080820c0 	call	80820c <__multadd>
  8057e4:	1039883a 	mov	fp,r2
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  8057e8:	800b883a 	mov	r5,r16
  8057ec:	000f883a 	mov	r7,zero
  8057f0:	01800284 	movi	r6,10
  8057f4:	b809883a 	mov	r4,r23
	  if (mlo == mhi)
  8057f8:	84801f26 	beq	r16,r18,805878 <_dtoa_r+0xe88>
	      mlo = multadd (ptr, mlo, 10, 0);
  8057fc:	080820c0 	call	80820c <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
  805800:	900b883a 	mov	r5,r18
  805804:	000f883a 	mov	r7,zero
  805808:	01800284 	movi	r6,10
  80580c:	b809883a 	mov	r4,r23
	      mlo = multadd (ptr, mlo, 10, 0);
  805810:	1021883a 	mov	r16,r2
	      mhi = multadd (ptr, mhi, 10, 0);
  805814:	080820c0 	call	80820c <__multadd>
  805818:	1025883a 	mov	r18,r2
	  dig = quorem (b, S) + '0';
  80581c:	982d883a 	mov	r22,r19
  805820:	a00b883a 	mov	r5,r20
  805824:	e009883a 	mov	r4,fp
  805828:	08047d00 	call	8047d0 <quorem>
	  j = cmp (b, mlo);
  80582c:	800b883a 	mov	r5,r16
  805830:	e009883a 	mov	r4,fp
	  dig = quorem (b, S) + '0';
  805834:	102b883a 	mov	r21,r2
  805838:	d8800615 	stw	r2,24(sp)
	  j = cmp (b, mlo);
  80583c:	0808bf80 	call	808bf8 <__mcmp>
	  delta = diff (ptr, S, mhi);
  805840:	a00b883a 	mov	r5,r20
  805844:	900d883a 	mov	r6,r18
  805848:	b809883a 	mov	r4,r23
	  j = cmp (b, mlo);
  80584c:	1023883a 	mov	r17,r2
	  delta = diff (ptr, S, mhi);
  805850:	0808c500 	call	808c50 <__mdiff>
  805854:	1027883a 	mov	r19,r2
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  805858:	10800317 	ldw	r2,12(r2)
	  dig = quorem (b, S) + '0';
  80585c:	ad400c04 	addi	r21,r21,48
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  805860:	980b883a 	mov	r5,r19
  805864:	103fc526 	beq	r2,zero,80577c <_dtoa_r+0xd8c>
	  Bfree (ptr, delta);
  805868:	b809883a 	mov	r4,r23
  80586c:	08081e80 	call	8081e8 <_Bfree>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  805870:	00800044 	movi	r2,1
  805874:	003fcb06 	br	8057a4 <_dtoa_r+0xdb4>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  805878:	080820c0 	call	80820c <__multadd>
  80587c:	1021883a 	mov	r16,r2
  805880:	1025883a 	mov	r18,r2
  805884:	003fe506 	br	80581c <_dtoa_r+0xe2c>
  if (ilim <= 0 && mode > 2)
  805888:	d8800217 	ldw	r2,8(sp)
  80588c:	108000d0 	cmplti	r2,r2,3
  805890:	10003e26 	beq	r2,zero,80598c <_dtoa_r+0xf9c>
  if (leftright)
  805894:	d8800717 	ldw	r2,28(sp)
  805898:	103faa1e 	bne	r2,zero,805744 <_dtoa_r+0xd54>
	*s++ = dig = quorem (b, S) + '0';
  80589c:	a00b883a 	mov	r5,r20
  8058a0:	e009883a 	mov	r4,fp
  8058a4:	08047d00 	call	8047d0 <quorem>
  8058a8:	14c00c04 	addi	r19,r2,48
  8058ac:	d8800117 	ldw	r2,4(sp)
  mhi = mlo = 0;
  8058b0:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  8058b4:	15400044 	addi	r21,r2,1
  8058b8:	14c00005 	stb	r19,0(r2)
  *decpt = k + 1;
  8058bc:	d8800417 	ldw	r2,16(sp)
  8058c0:	10800044 	addi	r2,r2,1
  8058c4:	d8800415 	stw	r2,16(sp)
  8058c8:	003f0906 	br	8054f0 <_dtoa_r+0xb00>
      if (cmp (b, S) < 0)
  8058cc:	a00b883a 	mov	r5,r20
  8058d0:	e009883a 	mov	r4,fp
  8058d4:	0808bf80 	call	808bf8 <__mcmp>
  8058d8:	103ee70e 	bge	r2,zero,805478 <_dtoa_r+0xa88>
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  8058dc:	e00b883a 	mov	r5,fp
  8058e0:	000f883a 	mov	r7,zero
  8058e4:	01800284 	movi	r6,10
  8058e8:	b809883a 	mov	r4,r23
  8058ec:	080820c0 	call	80820c <__multadd>
	  k--;
  8058f0:	d8c00417 	ldw	r3,16(sp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  8058f4:	1039883a 	mov	fp,r2
	  if (leftright)
  8058f8:	d8800717 	ldw	r2,28(sp)
	  k--;
  8058fc:	1d7fffc4 	addi	r21,r3,-1
	  if (leftright)
  805900:	103f861e 	bne	r2,zero,80571c <_dtoa_r+0xd2c>
  if (ilim <= 0 && mode > 2)
  805904:	d8800b17 	ldw	r2,44(sp)
  805908:	0081d20e 	bge	zero,r2,806054 <_dtoa_r+0x1664>
  80590c:	d8800515 	stw	r2,20(sp)
  805910:	003ee006 	br	805494 <_dtoa_r+0xaa4>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805914:	00802074 	movhi	r2,129
  805918:	1007883a 	mov	r3,r2
  80591c:	18c8c504 	addi	r3,r3,8980
	  s[3] ? s + 8 :
  805920:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  805924:	d8c00115 	stw	r3,4(sp)
	  s[3] ? s + 8 :
  805928:	1088c5c4 	addi	r2,r2,8983
  80592c:	003ded06 	br	8050e4 <_dtoa_r+0x6f4>
  switch (mode)
  805930:	00800044 	movi	r2,1
  805934:	d8800715 	stw	r2,28(sp)
  805938:	003f3406 	br	80560c <_dtoa_r+0xc1c>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  80593c:	983eb21e 	bne	r19,zero,805408 <_dtoa_r+0xa18>
  805940:	00800434 	movhi	r2,16
  805944:	10bfffc4 	addi	r2,r2,-1
  805948:	8884703a 	and	r2,r17,r2
  80594c:	103eae1e 	bne	r2,zero,805408 <_dtoa_r+0xa18>
	  && word0 (d) & Exp_mask
  805950:	8c5ffc2c 	andhi	r17,r17,32752
  805954:	883eac26 	beq	r17,zero,805408 <_dtoa_r+0xa18>
	  b2 += Log2P;
  805958:	d8800617 	ldw	r2,24(sp)
	  s2 += Log2P;
  80595c:	b5800044 	addi	r22,r22,1
	  spec_case = 1;
  805960:	04400044 	movi	r17,1
	  b2 += Log2P;
  805964:	10800044 	addi	r2,r2,1
  805968:	d8800615 	stw	r2,24(sp)
	  spec_case = 1;
  80596c:	003ea706 	br	80540c <_dtoa_r+0xa1c>
	ndigits = 1;
  805970:	00800044 	movi	r2,1
  805974:	d8800515 	stw	r2,20(sp)
  805978:	d8801e15 	stw	r2,120(sp)
  80597c:	003f1b06 	br	8055ec <_dtoa_r+0xbfc>
  if (ilim <= 0 && mode > 2)
  805980:	d8800b17 	ldw	r2,44(sp)
	  k--;
  805984:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  805988:	d8800515 	stw	r2,20(sp)
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
  80598c:	d8800517 	ldw	r2,20(sp)
  805990:	103e081e 	bne	r2,zero,8051b4 <_dtoa_r+0x7c4>
  805994:	a00b883a 	mov	r5,r20
  805998:	b809883a 	mov	r4,r23
  80599c:	000f883a 	mov	r7,zero
  8059a0:	01800144 	movi	r6,5
  8059a4:	080820c0 	call	80820c <__multadd>
  8059a8:	100b883a 	mov	r5,r2
  8059ac:	e009883a 	mov	r4,fp
  8059b0:	1029883a 	mov	r20,r2
  8059b4:	0808bf80 	call	808bf8 <__mcmp>
  8059b8:	00bdfe0e 	bge	zero,r2,8051b4 <_dtoa_r+0x7c4>
      *s++ = '1';
  8059bc:	d8c00117 	ldw	r3,4(sp)
  8059c0:	00800c44 	movi	r2,49
  8059c4:	18800005 	stb	r2,0(r3)
      k++;
  8059c8:	d8800417 	ldw	r2,16(sp)
      *s++ = '1';
  8059cc:	1d400044 	addi	r21,r3,1
      k++;
  8059d0:	14400044 	addi	r17,r2,1
  Bfree (ptr, S);
  8059d4:	a00b883a 	mov	r5,r20
  8059d8:	b809883a 	mov	r4,r23
  8059dc:	08081e80 	call	8081e8 <_Bfree>
  *decpt = k + 1;
  8059e0:	88800044 	addi	r2,r17,1
  8059e4:	d8800415 	stw	r2,16(sp)
  if (mhi)
  8059e8:	803ee11e 	bne	r16,zero,805570 <_dtoa_r+0xb80>
  8059ec:	003ee306 	br	80557c <_dtoa_r+0xb8c>
      i = m2 < s2 ? m2 : s2;
  8059f0:	b005883a 	mov	r2,r22
  8059f4:	003e6006 	br	805378 <_dtoa_r+0x988>
	mhi = lshift (ptr, mhi, m2);
  8059f8:	800b883a 	mov	r5,r16
  8059fc:	900d883a 	mov	r6,r18
  805a00:	b809883a 	mov	r4,r23
  805a04:	0808a700 	call	808a70 <__lshift>
  805a08:	1021883a 	mov	r16,r2
  805a0c:	003f4e06 	br	805748 <_dtoa_r+0xd58>
	    m5 -= j;
  805a10:	1529c83a 	sub	r20,r2,r20
  805a14:	003e4906 	br	80533c <_dtoa_r+0x94c>
  805a18:	dcc00c15 	stw	r19,48(sp)
  805a1c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  805a20:	05400084 	movi	r21,2
  805a24:	003cdf06 	br	804da4 <_dtoa_r+0x3b4>
	*s++ = dig = quorem (b, S) + '0';
  805a28:	00800044 	movi	r2,1
  805a2c:	003ead06 	br	8054e4 <_dtoa_r+0xaf4>
  switch (mode)
  805a30:	00800044 	movi	r2,1
  805a34:	d8800715 	stw	r2,28(sp)
  805a38:	003ca506 	br	804cd0 <_dtoa_r+0x2e0>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  805a3c:	1000021e 	bne	r2,zero,805a48 <_dtoa_r+0x1058>
  805a40:	98c0004c 	andi	r3,r19,1
  805a44:	183eb41e 	bne	r3,zero,805518 <_dtoa_r+0xb28>
  805a48:	2005883a 	mov	r2,r4
  805a4c:	00000206 	br	805a58 <_dtoa_r+0x1068>
      while (*--s == '0');
  805a50:	a8bfff83 	ldbu	r2,-2(r21)
  805a54:	182b883a 	mov	r21,r3
  805a58:	10803fcc 	andi	r2,r2,255
  805a5c:	1080201c 	xori	r2,r2,128
  805a60:	10bfe004 	addi	r2,r2,-128
  805a64:	10800c18 	cmpnei	r2,r2,48
  805a68:	a8ffffc4 	addi	r3,r21,-1
  805a6c:	103ff826 	beq	r2,zero,805a50 <_dtoa_r+0x1060>
  805a70:	003eb606 	br	80554c <_dtoa_r+0xb5c>
	    *s++ = '1';
  805a74:	d8c00117 	ldw	r3,4(sp)
  805a78:	00800c44 	movi	r2,49
  805a7c:	18800005 	stb	r2,0(r3)
  *decpt = k + 1;
  805a80:	d8800417 	ldw	r2,16(sp)
  805a84:	10800044 	addi	r2,r2,1
  805a88:	d8800415 	stw	r2,16(sp)
	    goto ret;
  805a8c:	003eaf06 	br	80554c <_dtoa_r+0xb5c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805a90:	d8c00a17 	ldw	r3,40(sp)
  805a94:	18011826 	beq	r3,zero,805ef8 <_dtoa_r+0x1508>
  m2 = b2;
  805a98:	d8c00617 	ldw	r3,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805a9c:	10810cc4 	addi	r2,r2,1075
      s2 += i;
  805aa0:	b0ad883a 	add	r22,r22,r2
  805aa4:	1885883a 	add	r2,r3,r2
  805aa8:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  805aac:	1825883a 	mov	r18,r3
  805ab0:	d8800615 	stw	r2,24(sp)
  805ab4:	003e2806 	br	805358 <_dtoa_r+0x968>
      eps.d = ieps * d.d + 7.;
  805ab8:	a809883a 	mov	r4,r21
  805abc:	080f2780 	call	80f278 <__floatsidf>
  805ac0:	800d883a 	mov	r6,r16
  805ac4:	900f883a 	mov	r7,r18
  805ac8:	1009883a 	mov	r4,r2
  805acc:	180b883a 	mov	r5,r3
  805ad0:	080e1440 	call	80e144 <__muldf3>
  805ad4:	000d883a 	mov	r6,zero
  805ad8:	01d00734 	movhi	r7,16412
  805adc:	1009883a 	mov	r4,r2
  805ae0:	180b883a 	mov	r5,r3
  805ae4:	080ccd40 	call	80ccd4 <__adddf3>
  805ae8:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  805aec:	00bf3034 	movhi	r2,64704
  805af0:	1885883a 	add	r2,r3,r2
  805af4:	d8800c15 	stw	r2,48(sp)
	  d.d -= 5.;
  805af8:	8009883a 	mov	r4,r16
  805afc:	900b883a 	mov	r5,r18
  805b00:	000d883a 	mov	r6,zero
  805b04:	01d00534 	movhi	r7,16404
  805b08:	080e8f00 	call	80e8f0 <__subdf3>
	  if (d.d > eps.d)
  805b0c:	dd400c17 	ldw	r21,48(sp)
  805b10:	a00d883a 	mov	r6,r20
  805b14:	1009883a 	mov	r4,r2
  805b18:	a80f883a 	mov	r7,r21
  805b1c:	180b883a 	mov	r5,r3
	  d.d -= 5.;
  805b20:	1025883a 	mov	r18,r2
  805b24:	1821883a 	mov	r16,r3
	  if (d.d > eps.d)
  805b28:	080df740 	call	80df74 <__gedf2>
  805b2c:	00812f16 	blt	zero,r2,805fec <_dtoa_r+0x15fc>
	  if (d.d < -eps.d)
  805b30:	a9e0003c 	xorhi	r7,r21,32768
  805b34:	a00d883a 	mov	r6,r20
  805b38:	9009883a 	mov	r4,r18
  805b3c:	800b883a 	mov	r5,r16
  805b40:	080e05c0 	call	80e05c <__ledf2>
  805b44:	103d7d0e 	bge	r2,zero,80513c <_dtoa_r+0x74c>
	  S = mhi = 0;
  805b48:	0029883a 	mov	r20,zero
  805b4c:	0021883a 	mov	r16,zero
  805b50:	003d9806 	br	8051b4 <_dtoa_r+0x7c4>
	b = pow5mult (ptr, b, b5);
  805b54:	d9800817 	ldw	r6,32(sp)
  805b58:	e00b883a 	mov	r5,fp
  805b5c:	b809883a 	mov	r4,r23
  805b60:	08089280 	call	808928 <__pow5mult>
  805b64:	1039883a 	mov	fp,r2
  805b68:	003e1e06 	br	8053e4 <_dtoa_r+0x9f4>
      else if ((j1 = -k) != 0)
  805b6c:	d8800417 	ldw	r2,16(sp)
  805b70:	1000ed26 	beq	r2,zero,805f28 <_dtoa_r+0x1538>
  805b74:	00a9c83a 	sub	r20,zero,r2
	  d.d *= tens[j1 & 0xf];
  805b78:	a08003cc 	andi	r2,r20,15
  805b7c:	100690fa 	slli	r3,r2,3
  805b80:	00802074 	movhi	r2,129
  805b84:	10891d04 	addi	r2,r2,9332
  805b88:	10c5883a 	add	r2,r2,r3
  805b8c:	11800017 	ldw	r6,0(r2)
  805b90:	11c00117 	ldw	r7,4(r2)
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805b94:	a029d13a 	srai	r20,r20,4
	  d.d *= tens[j1 & 0xf];
  805b98:	9809883a 	mov	r4,r19
  805b9c:	880b883a 	mov	r5,r17
  805ba0:	080e1440 	call	80e144 <__muldf3>
  805ba4:	1021883a 	mov	r16,r2
  805ba8:	1825883a 	mov	r18,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805bac:	a0013826 	beq	r20,zero,806090 <_dtoa_r+0x16a0>
  805bb0:	02002074 	movhi	r8,129
      ieps = 2;			/* conservative */
  805bb4:	05400084 	movi	r21,2
  805bb8:	42091304 	addi	r8,r8,9292
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805bbc:	1009883a 	mov	r4,r2
      ieps = 2;			/* conservative */
  805bc0:	9805883a 	mov	r2,r19
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805bc4:	180b883a 	mov	r5,r3
      ieps = 2;			/* conservative */
  805bc8:	dc000c15 	stw	r16,48(sp)
  805bcc:	8827883a 	mov	r19,r17
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805bd0:	0007883a 	mov	r3,zero
      ieps = 2;			/* conservative */
  805bd4:	a823883a 	mov	r17,r21
  805bd8:	4021883a 	mov	r16,r8
  805bdc:	102b883a 	mov	r21,r2
	    if (j & 1)
  805be0:	a180004c 	andi	r6,r20,1
  805be4:	30000726 	beq	r6,zero,805c04 <_dtoa_r+0x1214>
		d.d *= bigtens[i];
  805be8:	81800017 	ldw	r6,0(r16)
  805bec:	81c00117 	ldw	r7,4(r16)
		ieps++;
  805bf0:	8c400044 	addi	r17,r17,1
		d.d *= bigtens[i];
  805bf4:	080e1440 	call	80e144 <__muldf3>
  805bf8:	180b883a 	mov	r5,r3
  805bfc:	1009883a 	mov	r4,r2
  805c00:	00c00044 	movi	r3,1
	  for (j = j1 >> 4; j; j >>= 1, i++)
  805c04:	a029d07a 	srai	r20,r20,1
  805c08:	84000204 	addi	r16,r16,8
  805c0c:	a03ff41e 	bne	r20,zero,805be0 <_dtoa_r+0x11f0>
  805c10:	a805883a 	mov	r2,r21
  805c14:	18c03fcc 	andi	r3,r3,255
  805c18:	882b883a 	mov	r21,r17
  805c1c:	dc000c17 	ldw	r16,48(sp)
  805c20:	9823883a 	mov	r17,r19
  805c24:	1027883a 	mov	r19,r2
  805c28:	183c7726 	beq	r3,zero,804e08 <_dtoa_r+0x418>
  805c2c:	2021883a 	mov	r16,r4
  805c30:	2825883a 	mov	r18,r5
  805c34:	003c7406 	br	804e08 <_dtoa_r+0x418>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  805c38:	983eae1e 	bne	r19,zero,8056f4 <_dtoa_r+0xd04>
  805c3c:	00800434 	movhi	r2,16
  805c40:	10bfffc4 	addi	r2,r2,-1
  805c44:	8884703a 	and	r2,r17,r2
  805c48:	103f4126 	beq	r2,zero,805950 <_dtoa_r+0xf60>
  805c4c:	003ea906 	br	8056f4 <_dtoa_r+0xd04>
  *decpt = k + 1;
  805c50:	9807883a 	mov	r3,r19
  805c54:	a827883a 	mov	r19,r21
  805c58:	182b883a 	mov	r21,r3
  805c5c:	d8c00417 	ldw	r3,16(sp)
  805c60:	18c00044 	addi	r3,r3,1
  805c64:	d8c00415 	stw	r3,16(sp)
	      if (j1 > 0)
  805c68:	00800d0e 	bge	zero,r2,805ca0 <_dtoa_r+0x12b0>
		  b = lshift (ptr, b, 1);
  805c6c:	e00b883a 	mov	r5,fp
  805c70:	b809883a 	mov	r4,r23
  805c74:	01800044 	movi	r6,1
  805c78:	0808a700 	call	808a70 <__lshift>
		  j1 = cmp (b, S);
  805c7c:	a00b883a 	mov	r5,r20
  805c80:	1009883a 	mov	r4,r2
		  b = lshift (ptr, b, 1);
  805c84:	1039883a 	mov	fp,r2
		  j1 = cmp (b, S);
  805c88:	0808bf80 	call	808bf8 <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  805c8c:	0080df0e 	bge	zero,r2,80600c <_dtoa_r+0x161c>
		      && dig++ == '9')
  805c90:	98c00e60 	cmpeqi	r3,r19,57
  805c94:	1800ce1e 	bne	r3,zero,805fd0 <_dtoa_r+0x15e0>
  805c98:	d8800617 	ldw	r2,24(sp)
  805c9c:	14c00c44 	addi	r19,r2,49
	      goto ret;
  805ca0:	8023883a 	mov	r17,r16
	      *s++ = dig;
  805ca4:	b4c00005 	stb	r19,0(r22)
	      goto ret;
  805ca8:	9021883a 	mov	r16,r18
  805cac:	003e2706 	br	80554c <_dtoa_r+0xb5c>
  805cb0:	b82b883a 	mov	r21,r23
  805cb4:	ddc00217 	ldw	r23,8(sp)
	      d.d += d.d;
  805cb8:	200d883a 	mov	r6,r4
  805cbc:	280f883a 	mov	r7,r5
  805cc0:	080ccd40 	call	80ccd4 <__adddf3>
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  805cc4:	180b883a 	mov	r5,r3
  805cc8:	800d883a 	mov	r6,r16
  805ccc:	900f883a 	mov	r7,r18
  805cd0:	1009883a 	mov	r4,r2
	      d.d += d.d;
  805cd4:	1823883a 	mov	r17,r3
  805cd8:	1027883a 	mov	r19,r2
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  805cdc:	080df740 	call	80df74 <__gedf2>
			k++;
  805ce0:	d8c00417 	ldw	r3,16(sp)
  805ce4:	18c00044 	addi	r3,r3,1
  805ce8:	d8c00415 	stw	r3,16(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  805cec:	00808c16 	blt	zero,r2,805f20 <_dtoa_r+0x1530>
  805cf0:	800d883a 	mov	r6,r16
  805cf4:	900f883a 	mov	r7,r18
  805cf8:	9809883a 	mov	r4,r19
  805cfc:	880b883a 	mov	r5,r17
  805d00:	080def40 	call	80def4 <__eqdf2>
  805d04:	1000021e 	bne	r2,zero,805d10 <_dtoa_r+0x1320>
  805d08:	ad40004c 	andi	r21,r21,1
  805d0c:	a800841e 	bne	r21,zero,805f20 <_dtoa_r+0x1530>
  805d10:	a02b883a 	mov	r21,r20
  805d14:	003e1906 	br	80557c <_dtoa_r+0xb8c>
	  mhi = eBalloc (ptr, mhi->_k);
  805d18:	81400117 	ldw	r5,4(r16)
  805d1c:	b809883a 	mov	r4,r23
  805d20:	08081440 	call	808144 <_Balloc>
  805d24:	1023883a 	mov	r17,r2
  805d28:	1000f326 	beq	r2,zero,8060f8 <_dtoa_r+0x1708>
	  Bcopy (mhi, mlo);
  805d2c:	81800417 	ldw	r6,16(r16)
  805d30:	81400304 	addi	r5,r16,12
  805d34:	11000304 	addi	r4,r2,12
  805d38:	31800084 	addi	r6,r6,2
  805d3c:	300c90ba 	slli	r6,r6,2
  805d40:	0807e280 	call	807e28 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
  805d44:	01800044 	movi	r6,1
  805d48:	880b883a 	mov	r5,r17
  805d4c:	b809883a 	mov	r4,r23
  805d50:	0808a700 	call	808a70 <__lshift>
  805d54:	1025883a 	mov	r18,r2
  805d58:	003e7d06 	br	805750 <_dtoa_r+0xd60>
	    b = pow5mult (ptr, b, j);
  805d5c:	e00b883a 	mov	r5,fp
  805d60:	b809883a 	mov	r4,r23
  805d64:	08089280 	call	808928 <__pow5mult>
  805d68:	1039883a 	mov	fp,r2
  805d6c:	003d9d06 	br	8053e4 <_dtoa_r+0x9f4>
	      m2 -= i;
  805d70:	d8800617 	ldw	r2,24(sp)
  805d74:	d8c00517 	ldw	r3,20(sp)
  805d78:	10e5c83a 	sub	r18,r2,r3
	      i = 0;
  805d7c:	003d7606 	br	805358 <_dtoa_r+0x968>
  *decpt = k + 1;
  805d80:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  805d84:	9805883a 	mov	r2,r19
  805d88:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  805d8c:	18c00044 	addi	r3,r3,1
	      if (dig == '9')
  805d90:	102b883a 	mov	r21,r2
  *decpt = k + 1;
  805d94:	d8c00415 	stw	r3,16(sp)
	      if (dig == '9')
  805d98:	98800e58 	cmpnei	r2,r19,57
  805d9c:	10008c26 	beq	r2,zero,805fd0 <_dtoa_r+0x15e0>
	      *s++ = dig + 1;
  805da0:	98c00044 	addi	r3,r19,1
	      goto ret;
  805da4:	8023883a 	mov	r17,r16
	      *s++ = dig + 1;
  805da8:	b0c00005 	stb	r3,0(r22)
	      goto ret;
  805dac:	9021883a 	mov	r16,r18
  805db0:	003de606 	br	80554c <_dtoa_r+0xb5c>
  *decpt = k + 1;
  805db4:	9805883a 	mov	r2,r19
  805db8:	a827883a 	mov	r19,r21
  805dbc:	102b883a 	mov	r21,r2
  805dc0:	d8800417 	ldw	r2,16(sp)
  805dc4:	8023883a 	mov	r17,r16
  805dc8:	9021883a 	mov	r16,r18
  805dcc:	10800044 	addi	r2,r2,1
  805dd0:	d8800415 	stw	r2,16(sp)
  805dd4:	003dc606 	br	8054f0 <_dtoa_r+0xb00>
	  eps.d *= tens[ilim - 1];
  805dd8:	d9400c17 	ldw	r5,48(sp)
  805ddc:	a009883a 	mov	r4,r20
  805de0:	080e1440 	call	80e144 <__muldf3>
	      if (i == ilim)
  805de4:	d9800d17 	ldw	r6,52(sp)
	      *s++ = '0' + (int) L;
  805de8:	d9400117 	ldw	r5,4(sp)
  805dec:	d9001017 	ldw	r4,64(sp)
	  eps.d *= tens[ilim - 1];
  805df0:	d8800c15 	stw	r2,48(sp)
  805df4:	d8c00d15 	stw	r3,52(sp)
	      *s++ = '0' + (int) L;
  805df8:	29000005 	stb	r4,0(r5)
	      if (i == ilim)
  805dfc:	31000058 	cmpnei	r4,r6,1
  805e00:	29a9883a 	add	r20,r5,r6
  805e04:	2000a026 	beq	r4,zero,806088 <_dtoa_r+0x1698>
  805e08:	dc400e15 	stw	r17,56(sp)
  805e0c:	8009883a 	mov	r4,r16
  805e10:	900b883a 	mov	r5,r18
  805e14:	a823883a 	mov	r17,r21
	  for (i = 1;; i++, d.d *= 10.)
  805e18:	000d883a 	mov	r6,zero
  805e1c:	01d00934 	movhi	r7,16420
  805e20:	080e1440 	call	80e144 <__muldf3>
	      L = d.d;
  805e24:	180b883a 	mov	r5,r3
  805e28:	1009883a 	mov	r4,r2
	  for (i = 1;; i++, d.d *= 10.)
  805e2c:	1825883a 	mov	r18,r3
  805e30:	102b883a 	mov	r21,r2
	      L = d.d;
  805e34:	080f1f80 	call	80f1f8 <__fixdfsi>
	      d.d -= L;
  805e38:	1009883a 	mov	r4,r2
	      L = d.d;
  805e3c:	1021883a 	mov	r16,r2
	      d.d -= L;
  805e40:	080f2780 	call	80f278 <__floatsidf>
  805e44:	a809883a 	mov	r4,r21
  805e48:	900b883a 	mov	r5,r18
  805e4c:	100d883a 	mov	r6,r2
  805e50:	180f883a 	mov	r7,r3
	      *s++ = '0' + (int) L;
  805e54:	8c400044 	addi	r17,r17,1
  805e58:	84000c04 	addi	r16,r16,48
	      d.d -= L;
  805e5c:	080e8f00 	call	80e8f0 <__subdf3>
	      *s++ = '0' + (int) L;
  805e60:	8c3fffc5 	stb	r16,-1(r17)
	      d.d -= L;
  805e64:	1009883a 	mov	r4,r2
  805e68:	180b883a 	mov	r5,r3
	      if (i == ilim)
  805e6c:	a47fea1e 	bne	r20,r17,805e18 <_dtoa_r+0x1428>
  805e70:	dc400e17 	ldw	r17,56(sp)
  805e74:	1021883a 	mov	r16,r2
  805e78:	1825883a 	mov	r18,r3
		  if (d.d > 0.5 + eps.d)
  805e7c:	d9000c17 	ldw	r4,48(sp)
  805e80:	d9400d17 	ldw	r5,52(sp)
  805e84:	000d883a 	mov	r6,zero
  805e88:	01cff834 	movhi	r7,16352
  805e8c:	080ccd40 	call	80ccd4 <__adddf3>
  805e90:	800d883a 	mov	r6,r16
  805e94:	900f883a 	mov	r7,r18
  805e98:	1009883a 	mov	r4,r2
  805e9c:	180b883a 	mov	r5,r3
  805ea0:	080e05c0 	call	80e05c <__ledf2>
  805ea4:	10005416 	blt	r2,zero,805ff8 <_dtoa_r+0x1608>
		  else if (d.d < 0.5 - eps.d)
  805ea8:	d9800c17 	ldw	r6,48(sp)
  805eac:	d9c00d17 	ldw	r7,52(sp)
  805eb0:	0009883a 	mov	r4,zero
  805eb4:	014ff834 	movhi	r5,16352
  805eb8:	080e8f00 	call	80e8f0 <__subdf3>
  805ebc:	800d883a 	mov	r6,r16
  805ec0:	900f883a 	mov	r7,r18
  805ec4:	1009883a 	mov	r4,r2
  805ec8:	180b883a 	mov	r5,r3
  805ecc:	080df740 	call	80df74 <__gedf2>
  805ed0:	00bc9a0e 	bge	zero,r2,80513c <_dtoa_r+0x74c>
		      while (*--s == '0');
  805ed4:	a0bfffc7 	ldb	r2,-1(r20)
  805ed8:	a02b883a 	mov	r21,r20
  805edc:	a53fffc4 	addi	r20,r20,-1
  805ee0:	10800c20 	cmpeqi	r2,r2,48
  805ee4:	103ffb1e 	bne	r2,zero,805ed4 <_dtoa_r+0x14e4>
  *decpt = k + 1;
  805ee8:	d8801117 	ldw	r2,68(sp)
  805eec:	10800044 	addi	r2,r2,1
  805ef0:	d8800415 	stw	r2,16(sp)
  805ef4:	003da106 	br	80557c <_dtoa_r+0xb8c>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805ef8:	d8c01217 	ldw	r3,72(sp)
  m2 = b2;
  805efc:	d9000617 	ldw	r4,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  805f00:	00800d84 	movi	r2,54
  805f04:	10c5c83a 	sub	r2,r2,r3
      s2 += i;
  805f08:	b0ad883a 	add	r22,r22,r2
  805f0c:	2085883a 	add	r2,r4,r2
  805f10:	dd000817 	ldw	r20,32(sp)
  m2 = b2;
  805f14:	2025883a 	mov	r18,r4
      s2 += i;
  805f18:	d8800615 	stw	r2,24(sp)
  805f1c:	003d0e06 	br	805358 <_dtoa_r+0x968>
  805f20:	d9000117 	ldw	r4,4(sp)
  805f24:	003c4b06 	br	805054 <_dtoa_r+0x664>
  805f28:	9821883a 	mov	r16,r19
  805f2c:	8825883a 	mov	r18,r17
      ieps = 2;			/* conservative */
  805f30:	05400084 	movi	r21,2
  805f34:	003bb406 	br	804e08 <_dtoa_r+0x418>
      if (k_check && d.d < 1. && ilim > 0)
  805f38:	d8800517 	ldw	r2,20(sp)
  805f3c:	103ede26 	beq	r2,zero,805ab8 <_dtoa_r+0x10c8>
	  if (ilim1 <= 0)
  805f40:	d8800b17 	ldw	r2,44(sp)
  805f44:	00bc7d0e 	bge	zero,r2,80513c <_dtoa_r+0x74c>
	  d.d *= 10.;
  805f48:	900b883a 	mov	r5,r18
  805f4c:	8009883a 	mov	r4,r16
  805f50:	000d883a 	mov	r6,zero
  805f54:	01d00934 	movhi	r7,16420
  805f58:	080e1440 	call	80e144 <__muldf3>
      eps.d = ieps * d.d + 7.;
  805f5c:	a9000044 	addi	r4,r21,1
	  d.d *= 10.;
  805f60:	1021883a 	mov	r16,r2
  805f64:	1825883a 	mov	r18,r3
      eps.d = ieps * d.d + 7.;
  805f68:	080f2780 	call	80f278 <__floatsidf>
  805f6c:	800d883a 	mov	r6,r16
  805f70:	900f883a 	mov	r7,r18
  805f74:	1009883a 	mov	r4,r2
  805f78:	180b883a 	mov	r5,r3
  805f7c:	080e1440 	call	80e144 <__muldf3>
  805f80:	1009883a 	mov	r4,r2
  805f84:	000d883a 	mov	r6,zero
  805f88:	01d00734 	movhi	r7,16412
  805f8c:	180b883a 	mov	r5,r3
  805f90:	080ccd40 	call	80ccd4 <__adddf3>
	  k--;
  805f94:	d9000417 	ldw	r4,16(sp)
      eps.d = ieps * d.d + 7.;
  805f98:	1029883a 	mov	r20,r2
      word0 (eps) -= (P - 1) * Exp_msk1;
  805f9c:	00bf3034 	movhi	r2,64704
  805fa0:	1887883a 	add	r3,r3,r2
  805fa4:	d8800b17 	ldw	r2,44(sp)
	  k--;
  805fa8:	213fffc4 	addi	r4,r4,-1
  805fac:	d9001115 	stw	r4,68(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  805fb0:	d8c00c15 	stw	r3,48(sp)
  805fb4:	d8800d15 	stw	r2,52(sp)
  805fb8:	003bb106 	br	804e80 <_dtoa_r+0x490>
  *decpt = k + 1;
  805fbc:	d8800417 	ldw	r2,16(sp)
			break;
  805fc0:	00c00c44 	movi	r3,49
  *decpt = k + 1;
  805fc4:	10800044 	addi	r2,r2,1
  805fc8:	d8800415 	stw	r2,16(sp)
			break;
  805fcc:	003c2a06 	br	805078 <_dtoa_r+0x688>
		  *s++ = '9';
  805fd0:	00800e44 	movi	r2,57
		  goto roundoff;
  805fd4:	8023883a 	mov	r17,r16
  805fd8:	d9400117 	ldw	r5,4(sp)
		  *s++ = '9';
  805fdc:	b0800005 	stb	r2,0(r22)
		  goto roundoff;
  805fe0:	9021883a 	mov	r16,r18
  805fe4:	01000e44 	movi	r4,57
  805fe8:	003d5006 	br	80552c <_dtoa_r+0xb3c>
	  S = mhi = 0;
  805fec:	0029883a 	mov	r20,zero
  805ff0:	0021883a 	mov	r16,zero
  805ff4:	003e7106 	br	8059bc <_dtoa_r+0xfcc>
			k++;
  805ff8:	d8801117 	ldw	r2,68(sp)
  805ffc:	d9000117 	ldw	r4,4(sp)
  806000:	10800044 	addi	r2,r2,1
  806004:	d8800415 	stw	r2,16(sp)
  806008:	003c1206 	br	805054 <_dtoa_r+0x664>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  80600c:	103f241e 	bne	r2,zero,805ca0 <_dtoa_r+0x12b0>
  806010:	9880004c 	andi	r2,r19,1
  806014:	103f1e1e 	bne	r2,zero,805c90 <_dtoa_r+0x12a0>
  806018:	003f2106 	br	805ca0 <_dtoa_r+0x12b0>
  *decpt = k + 1;
  80601c:	d8801117 	ldw	r2,68(sp)
  806020:	ddc00d17 	ldw	r23,52(sp)
  806024:	10800044 	addi	r2,r2,1
  806028:	d8800415 	stw	r2,16(sp)
  80602c:	003d5306 	br	80557c <_dtoa_r+0xb8c>
  806030:	d8c00417 	ldw	r3,16(sp)
	      if (dig == '9')
  806034:	a8800e60 	cmpeqi	r2,r21,57
  806038:	a827883a 	mov	r19,r21
  *decpt = k + 1;
  80603c:	18c00044 	addi	r3,r3,1
  806040:	d8c00415 	stw	r3,16(sp)
	      *s++ = dig;
  806044:	b5400044 	addi	r21,r22,1
	      if (dig == '9')
  806048:	103fe11e 	bne	r2,zero,805fd0 <_dtoa_r+0x15e0>
	      if (j > 0)
  80604c:	047f1216 	blt	zero,r17,805c98 <_dtoa_r+0x12a8>
  806050:	003f1306 	br	805ca0 <_dtoa_r+0x12b0>
  if (ilim <= 0 && mode > 2)
  806054:	d8800217 	ldw	r2,8(sp)
  806058:	108000c8 	cmpgei	r2,r2,3
  80605c:	103e481e 	bne	r2,zero,805980 <_dtoa_r+0xf90>
	  k--;
  806060:	dd400415 	stw	r21,16(sp)
  806064:	003e0d06 	br	80589c <_dtoa_r+0xeac>
  if (ilim <= 0 && mode > 2)
  806068:	d8800217 	ldw	r2,8(sp)
  80606c:	108000c8 	cmpgei	r2,r2,3
  806070:	103e431e 	bne	r2,zero,805980 <_dtoa_r+0xf90>
  806074:	d8800b17 	ldw	r2,44(sp)
	  k--;
  806078:	dd400415 	stw	r21,16(sp)
  if (ilim <= 0 && mode > 2)
  80607c:	d8800515 	stw	r2,20(sp)
      if (m2 > 0)
  806080:	04bdb10e 	bge	zero,r18,805748 <_dtoa_r+0xd58>
  806084:	003e5c06 	br	8059f8 <_dtoa_r+0x1008>
	      *s++ = '0' + (int) L;
  806088:	a829883a 	mov	r20,r21
  80608c:	003f7b06 	br	805e7c <_dtoa_r+0x148c>
      ieps = 2;			/* conservative */
  806090:	05400084 	movi	r21,2
  806094:	003b5c06 	br	804e08 <_dtoa_r+0x418>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  806098:	01c02074 	movhi	r7,129
  80609c:	01002074 	movhi	r4,129
  8060a0:	39c8c904 	addi	r7,r7,8996
  8060a4:	000d883a 	mov	r6,zero
  8060a8:	01406a84 	movi	r5,426
  8060ac:	2108ce04 	addi	r4,r4,9016
  8060b0:	080b0f00 	call	80b0f0 <__assert_func>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8060b4:	000b883a 	mov	r5,zero
  8060b8:	003b1506 	br	804d10 <_dtoa_r+0x320>
  8060bc:	b8001115 	stw	zero,68(r23)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8060c0:	000b883a 	mov	r5,zero
  8060c4:	b809883a 	mov	r4,r23
  8060c8:	08081440 	call	808144 <_Balloc>
  8060cc:	d8800115 	stw	r2,4(sp)
  8060d0:	103ff126 	beq	r2,zero,806098 <_dtoa_r+0x16a8>
  8060d4:	d8800117 	ldw	r2,4(sp)
      ndigits = 0;
  8060d8:	d8001e15 	stw	zero,120(sp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8060dc:	b8801015 	stw	r2,64(r23)
  ilim = ilim1 = -1;
  8060e0:	00bfffc4 	movi	r2,-1
  8060e4:	d8800515 	stw	r2,20(sp)
  8060e8:	d8800b15 	stw	r2,44(sp)
  leftright = 1;
  8060ec:	00800044 	movi	r2,1
  8060f0:	d8800715 	stw	r2,28(sp)
  8060f4:	003c1106 	br	80513c <_dtoa_r+0x74c>
	  mhi = eBalloc (ptr, mhi->_k);
  8060f8:	01c02074 	movhi	r7,129
  8060fc:	01002074 	movhi	r4,129
  806100:	39c8c904 	addi	r7,r7,8996
  806104:	000d883a 	mov	r6,zero
  806108:	0140ba84 	movi	r5,746
  80610c:	2108ce04 	addi	r4,r4,9016
  806110:	080b0f00 	call	80b0f0 <__assert_func>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  806114:	00802074 	movhi	r2,129
  806118:	1088c604 	addi	r2,r2,8984
  80611c:	d8800115 	stw	r2,4(sp)
  806120:	003a6506 	br	804ab8 <_dtoa_r+0xc8>
  else if (i < 4)
  806124:	18c00120 	cmpeqi	r3,r3,4
  806128:	183cc91e 	bne	r3,zero,805450 <_dtoa_r+0xa60>
      i += 28;
  80612c:	00c00f04 	movi	r3,60
  806130:	1885c83a 	sub	r2,r3,r2
  806134:	003cc106 	br	80543c <_dtoa_r+0xa4c>

00806138 <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  806138:	2880030b 	ldhu	r2,12(r5)
{
  80613c:	defffb04 	addi	sp,sp,-20
  806140:	dcc00315 	stw	r19,12(sp)
  806144:	dc000015 	stw	r16,0(sp)
  806148:	dfc00415 	stw	ra,16(sp)
  80614c:	dc800215 	stw	r18,8(sp)
  806150:	dc400115 	stw	r17,4(sp)
  if ((flags & __SWR) == 0)
  806154:	10c0020c 	andi	r3,r2,8
{
  806158:	2821883a 	mov	r16,r5
  80615c:	2027883a 	mov	r19,r4
  if ((flags & __SWR) == 0)
  806160:	18003f1e 	bne	r3,zero,806260 <__sflush_r+0x128>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806164:	28c00117 	ldw	r3,4(r5)
      fp->_flags |= __SNPT;
  806168:	10820014 	ori	r2,r2,2048
  80616c:	2880030d 	sth	r2,12(r5)
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  806170:	00c0550e 	bge	zero,r3,8062c8 <__sflush_r+0x190>
  806174:	82000a17 	ldw	r8,40(r16)
  806178:	40003126 	beq	r8,zero,806240 <__sflush_r+0x108>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
  80617c:	9c400017 	ldw	r17,0(r19)
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
  806180:	1104000c 	andi	r4,r2,4096
	  ptr->_errno = 0;
  806184:	98000015 	stw	zero,0(r19)
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  806188:	81400717 	ldw	r5,28(r16)
	  if (fp->_flags & __SOFF)
  80618c:	1007883a 	mov	r3,r2
  806190:	2000521e 	bne	r4,zero,8062dc <__sflush_r+0x1a4>
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  806194:	01c00044 	movi	r7,1
  806198:	000d883a 	mov	r6,zero
  80619c:	9809883a 	mov	r4,r19
  8061a0:	403ee83a 	callr	r8
	      if (curoff == -1L && ptr->_errno != 0)
  8061a4:	10ffffd8 	cmpnei	r3,r2,-1
  8061a8:	18005826 	beq	r3,zero,80630c <__sflush_r+0x1d4>
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
  8061ac:	80c0030b 	ldhu	r3,12(r16)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  8061b0:	82000a17 	ldw	r8,40(r16)
  8061b4:	81400717 	ldw	r5,28(r16)
          if (fp->_flags & __SRD)
  8061b8:	18c0010c 	andi	r3,r3,4
  8061bc:	18000626 	beq	r3,zero,8061d8 <__sflush_r+0xa0>
              curoff -= fp->_r;
  8061c0:	81000117 	ldw	r4,4(r16)
              if (HASUB (fp))
  8061c4:	80c00c17 	ldw	r3,48(r16)
              curoff -= fp->_r;
  8061c8:	1105c83a 	sub	r2,r2,r4
              if (HASUB (fp))
  8061cc:	18000226 	beq	r3,zero,8061d8 <__sflush_r+0xa0>
                curoff -= fp->_ur;
  8061d0:	80c00f17 	ldw	r3,60(r16)
  8061d4:	10c5c83a 	sub	r2,r2,r3
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  8061d8:	100d883a 	mov	r6,r2
  8061dc:	000f883a 	mov	r7,zero
  8061e0:	9809883a 	mov	r4,r19
  8061e4:	403ee83a 	callr	r8
	  if (curoff != -1 || ptr->_errno == 0
  8061e8:	10ffffd8 	cmpnei	r3,r2,-1
  8061ec:	18003d1e 	bne	r3,zero,8062e4 <__sflush_r+0x1ac>
  8061f0:	99000017 	ldw	r4,0(r19)
	      if (HASUB (fp))
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
  8061f4:	80c0030b 	ldhu	r3,12(r16)
	  if (curoff != -1 || ptr->_errno == 0
  8061f8:	20004e26 	beq	r4,zero,806334 <__sflush_r+0x1fc>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  8061fc:	21400760 	cmpeqi	r5,r4,29
  806200:	2800021e 	bne	r5,zero,80620c <__sflush_r+0xd4>
  806204:	210005a0 	cmpeqi	r4,r4,22
  806208:	20002c26 	beq	r4,zero,8062bc <__sflush_r+0x184>
	      fp->_p = fp->_bf._base;
  80620c:	80800417 	ldw	r2,16(r16)
	      fp->_flags &= ~__SNPT;
  806210:	18fdffcc 	andi	r3,r3,63487
  806214:	80c0030d 	sth	r3,12(r16)
	      fp->_r = 0;
  806218:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  80621c:	80800015 	stw	r2,0(r16)
	      if (HASUB (fp))
  806220:	81400c17 	ldw	r5,48(r16)
	      ptr->_errno = tmp_errno;
  806224:	9c400015 	stw	r17,0(r19)
	      if (HASUB (fp))
  806228:	28000526 	beq	r5,zero,806240 <__sflush_r+0x108>
		FREEUB (ptr, fp);
  80622c:	80801004 	addi	r2,r16,64
  806230:	28800226 	beq	r5,r2,80623c <__sflush_r+0x104>
  806234:	9809883a 	mov	r4,r19
  806238:	08068f00 	call	8068f0 <_free_r>
  80623c:	80000c15 	stw	zero,48(r16)
	      return EOF;
	    }
	}
      return 0;
  806240:	0005883a 	mov	r2,zero
	}
      p += t;
      n -= t;
    }
  return 0;
}
  806244:	dfc00417 	ldw	ra,16(sp)
  806248:	dcc00317 	ldw	r19,12(sp)
  80624c:	dc800217 	ldw	r18,8(sp)
  806250:	dc400117 	ldw	r17,4(sp)
  806254:	dc000017 	ldw	r16,0(sp)
  806258:	dec00504 	addi	sp,sp,20
  80625c:	f800283a 	ret
  if ((p = fp->_bf._base) == NULL)
  806260:	2c800417 	ldw	r18,16(r5)
  806264:	903ff626 	beq	r18,zero,806240 <__sflush_r+0x108>
  n = fp->_p - p;		/* write this much */
  806268:	2c400017 	ldw	r17,0(r5)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  80626c:	108000cc 	andi	r2,r2,3
  fp->_p = p;
  806270:	2c800015 	stw	r18,0(r5)
  n = fp->_p - p;		/* write this much */
  806274:	8ca3c83a 	sub	r17,r17,r18
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  806278:	1000161e 	bne	r2,zero,8062d4 <__sflush_r+0x19c>
  80627c:	28800517 	ldw	r2,20(r5)
  806280:	80800215 	stw	r2,8(r16)
  while (n > 0)
  806284:	04400316 	blt	zero,r17,806294 <__sflush_r+0x15c>
  806288:	003fed06 	br	806240 <__sflush_r+0x108>
      p += t;
  80628c:	90a5883a 	add	r18,r18,r2
  while (n > 0)
  806290:	047feb0e 	bge	zero,r17,806240 <__sflush_r+0x108>
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
  806294:	80800917 	ldw	r2,36(r16)
  806298:	81400717 	ldw	r5,28(r16)
  80629c:	880f883a 	mov	r7,r17
  8062a0:	900d883a 	mov	r6,r18
  8062a4:	9809883a 	mov	r4,r19
  8062a8:	103ee83a 	callr	r2
      n -= t;
  8062ac:	88a3c83a 	sub	r17,r17,r2
      if (t <= 0)
  8062b0:	00bff616 	blt	zero,r2,80628c <__sflush_r+0x154>
          fp->_flags |= __SERR;
  8062b4:	80c0030b 	ldhu	r3,12(r16)
          return EOF;
  8062b8:	00bfffc4 	movi	r2,-1
          fp->_flags |= __SERR;
  8062bc:	18c01014 	ori	r3,r3,64
  8062c0:	80c0030d 	sth	r3,12(r16)
          return EOF;
  8062c4:	003fdf06 	br	806244 <__sflush_r+0x10c>
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  8062c8:	28c00f17 	ldw	r3,60(r5)
  8062cc:	00ffa916 	blt	zero,r3,806174 <__sflush_r+0x3c>
  8062d0:	003fdb06 	br	806240 <__sflush_r+0x108>
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  8062d4:	0005883a 	mov	r2,zero
  8062d8:	003fe906 	br	806280 <__sflush_r+0x148>
	    curoff = fp->_offset;
  8062dc:	80801417 	ldw	r2,80(r16)
  8062e0:	003fb506 	br	8061b8 <__sflush_r+0x80>
	      fp->_flags &= ~__SNPT;
  8062e4:	80c0030b 	ldhu	r3,12(r16)
	      fp->_p = fp->_bf._base;
  8062e8:	81000417 	ldw	r4,16(r16)
	      fp->_r = 0;
  8062ec:	80000115 	stw	zero,4(r16)
	      fp->_flags &= ~__SNPT;
  8062f0:	197dffcc 	andi	r5,r3,63487
  8062f4:	8140030d 	sth	r5,12(r16)
	      fp->_p = fp->_bf._base;
  8062f8:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  8062fc:	18c4000c 	andi	r3,r3,4096
  806300:	183fc726 	beq	r3,zero,806220 <__sflush_r+0xe8>
		fp->_offset = curoff;
  806304:	80801415 	stw	r2,80(r16)
  806308:	003fc506 	br	806220 <__sflush_r+0xe8>
	      if (curoff == -1L && ptr->_errno != 0)
  80630c:	98c00017 	ldw	r3,0(r19)
  806310:	183fa626 	beq	r3,zero,8061ac <__sflush_r+0x74>
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  806314:	19000760 	cmpeqi	r4,r3,29
  806318:	20000e1e 	bne	r4,zero,806354 <__sflush_r+0x21c>
  80631c:	18c00598 	cmpnei	r3,r3,22
  806320:	18000c26 	beq	r3,zero,806354 <__sflush_r+0x21c>
		    fp->_flags |= __SERR;
  806324:	80c0030b 	ldhu	r3,12(r16)
  806328:	18c01014 	ori	r3,r3,64
  80632c:	80c0030d 	sth	r3,12(r16)
  806330:	003fc406 	br	806244 <__sflush_r+0x10c>
	      fp->_p = fp->_bf._base;
  806334:	81000417 	ldw	r4,16(r16)
	      fp->_flags &= ~__SNPT;
  806338:	197dffcc 	andi	r5,r3,63487
  80633c:	8140030d 	sth	r5,12(r16)
	      fp->_r = 0;
  806340:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  806344:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  806348:	18c4000c 	andi	r3,r3,4096
  80634c:	183fb426 	beq	r3,zero,806220 <__sflush_r+0xe8>
  806350:	003fec06 	br	806304 <__sflush_r+0x1cc>
		      ptr->_errno = tmp_errno;
  806354:	9c400015 	stw	r17,0(r19)
		      result = 0;
  806358:	0005883a 	mov	r2,zero
		      ptr->_errno = tmp_errno;
  80635c:	003fb906 	br	806244 <__sflush_r+0x10c>

00806360 <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
  806360:	defffd04 	addi	sp,sp,-12
  806364:	dc000115 	stw	r16,4(sp)
  806368:	dfc00215 	stw	ra,8(sp)
  80636c:	2021883a 	mov	r16,r4
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
  806370:	20000226 	beq	r4,zero,80637c <_fflush_r+0x1c>
  806374:	20800e17 	ldw	r2,56(r4)
  806378:	10000726 	beq	r2,zero,806398 <_fflush_r+0x38>

  if (!fp->_flags)
  80637c:	2880030f 	ldh	r2,12(r5)
  806380:	10000a1e 	bne	r2,zero,8063ac <_fflush_r+0x4c>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
  806384:	0005883a 	mov	r2,zero
  806388:	dfc00217 	ldw	ra,8(sp)
  80638c:	dc000117 	ldw	r16,4(sp)
  806390:	dec00304 	addi	sp,sp,12
  806394:	f800283a 	ret
  806398:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (ptr, fp);
  80639c:	08067980 	call	806798 <__sinit>
  8063a0:	d9400017 	ldw	r5,0(sp)
  if (!fp->_flags)
  8063a4:	2880030f 	ldh	r2,12(r5)
  8063a8:	103ff626 	beq	r2,zero,806384 <_fflush_r+0x24>
  ret = __sflush_r (ptr, fp);
  8063ac:	8009883a 	mov	r4,r16
}
  8063b0:	dfc00217 	ldw	ra,8(sp)
  8063b4:	dc000117 	ldw	r16,4(sp)
  8063b8:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  8063bc:	08061381 	jmpi	806138 <__sflush_r>

008063c0 <fflush>:
#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
  if (fp == NULL)
  8063c0:	20001626 	beq	r4,zero,80641c <fflush+0x5c>
  8063c4:	200b883a 	mov	r5,r4
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
  8063c8:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (ptr, fp);
  8063cc:	20000226 	beq	r4,zero,8063d8 <fflush+0x18>
  8063d0:	20800e17 	ldw	r2,56(r4)
  8063d4:	10000526 	beq	r2,zero,8063ec <fflush+0x2c>
  if (!fp->_flags)
  8063d8:	2880030f 	ldh	r2,12(r5)
  8063dc:	1000021e 	bne	r2,zero,8063e8 <fflush+0x28>
}
  8063e0:	0005883a 	mov	r2,zero
  8063e4:	f800283a 	ret
  ret = __sflush_r (ptr, fp);
  8063e8:	08061381 	jmpi	806138 <__sflush_r>
{
  8063ec:	defffd04 	addi	sp,sp,-12
  8063f0:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  8063f4:	d9000015 	stw	r4,0(sp)
{
  8063f8:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (ptr, fp);
  8063fc:	08067980 	call	806798 <__sinit>
  806400:	d9400117 	ldw	r5,4(sp)
  806404:	d9000017 	ldw	r4,0(sp)
  if (!fp->_flags)
  806408:	2880030f 	ldh	r2,12(r5)
  80640c:	10000726 	beq	r2,zero,80642c <fflush+0x6c>
}
  806410:	dfc00217 	ldw	ra,8(sp)
  806414:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  806418:	08061381 	jmpi	806138 <__sflush_r>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
  80641c:	d1200817 	ldw	r4,-32736(gp)
  806420:	01402034 	movhi	r5,128
  806424:	2958d804 	addi	r5,r5,25440
  806428:	08071441 	jmpi	807144 <_fwalk_reent>
}
  80642c:	0005883a 	mov	r2,zero
  806430:	dfc00217 	ldw	ra,8(sp)
  806434:	dec00304 	addi	sp,sp,12
  806438:	f800283a 	ret

0080643c <__fp_lock>:
{
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
}
  80643c:	0005883a 	mov	r2,zero
  806440:	f800283a 	ret

00806444 <_cleanup_r>:
  (void) _fwalk_reent (ptr, cleanup_func);
  806444:	01402074 	movhi	r5,129
  806448:	296cba04 	addi	r5,r5,-19736
  80644c:	08071441 	jmpi	807144 <_fwalk_reent>

00806450 <__fp_unlock>:
  806450:	0005883a 	mov	r2,zero
  806454:	f800283a 	ret

00806458 <__sinit.part.0>:
  s->__cleanup = _cleanup_r;	/* conservative */
  806458:	00c02034 	movhi	r3,128
  stdin_init (s->_stdin);
  80645c:	20800117 	ldw	r2,4(r4)
  s->__cleanup = _cleanup_r;	/* conservative */
  806460:	18d91104 	addi	r3,r3,25668
  806464:	20c00f15 	stw	r3,60(r4)
  s->__sglue._iobs = &s->__sf[0];
  806468:	2140bb04 	addi	r5,r4,748
  s->__sglue._niobs = 3;
  80646c:	00c000c4 	movi	r3,3
  806470:	20c0b915 	stw	r3,740(r4)
  s->__sglue._iobs = &s->__sf[0];
  806474:	2140ba15 	stw	r5,744(r4)
  s->__sglue._next = NULL;
  806478:	2000b815 	stw	zero,736(r4)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  80647c:	10001705 	stb	zero,92(r2)
  806480:	10001745 	stb	zero,93(r2)
  806484:	10001785 	stb	zero,94(r2)
  806488:	100017c5 	stb	zero,95(r2)
  80648c:	10001805 	stb	zero,96(r2)
  806490:	10001845 	stb	zero,97(r2)
  806494:	10001885 	stb	zero,98(r2)
  806498:	100018c5 	stb	zero,99(r2)
  ptr->_flags = flags;
  80649c:	00c00104 	movi	r3,4
  8064a0:	10c00315 	stw	r3,12(r2)
  ptr->_read = __sread;
  8064a4:	02002074 	movhi	r8,129
  stdout_init (s->_stdout);
  8064a8:	20c00217 	ldw	r3,8(r4)
  ptr->_write = __swrite;
  8064ac:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  8064b0:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  8064b4:	01402074 	movhi	r5,129
  ptr->_read = __sread;
  8064b8:	42263a04 	addi	r8,r8,-26392
  ptr->_write = __swrite;
  8064bc:	39e65104 	addi	r7,r7,-26300
  ptr->_seek = __sseek;
  8064c0:	31a67104 	addi	r6,r6,-26172
  ptr->_close = __sclose;
  8064c4:	29668804 	addi	r5,r5,-26080
  ptr->_flags = flags;
  8064c8:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  8064cc:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  8064d0:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  8064d4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  8064d8:	10000215 	stw	zero,8(r2)
  ptr->_bf._base = 0;
  8064dc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  8064e0:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  8064e4:	10000615 	stw	zero,24(r2)
  ptr->_cookie = ptr;
  8064e8:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  8064ec:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  8064f0:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  8064f4:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  8064f8:	11400b15 	stw	r5,44(r2)
  ptr->_flags = flags;
  8064fc:	4a400284 	addi	r9,r9,10
  806500:	1a400315 	stw	r9,12(r3)
  ptr->_flags2 = 0;
  806504:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  806508:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  80650c:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  806510:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  806514:	18000415 	stw	zero,16(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806518:	18001705 	stb	zero,92(r3)
  80651c:	18001745 	stb	zero,93(r3)
  806520:	18001785 	stb	zero,94(r3)
  806524:	180017c5 	stb	zero,95(r3)
  806528:	18001805 	stb	zero,96(r3)
  80652c:	18001845 	stb	zero,97(r3)
  806530:	18001885 	stb	zero,98(r3)
  806534:	180018c5 	stb	zero,99(r3)
  stderr_init (s->_stderr);
  806538:	20800317 	ldw	r2,12(r4)
  ptr->_flags = flags;
  80653c:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  806540:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  806544:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  806548:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  80654c:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  806550:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  806554:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  806558:	19400b15 	stw	r5,44(r3)
  ptr->_flags = flags;
  80655c:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  806560:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  806564:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  806568:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  80656c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
  806570:	12400315 	stw	r9,12(r2)
  ptr->_bf._base = 0;
  806574:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  806578:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  80657c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  806580:	10001705 	stb	zero,92(r2)
  806584:	10001745 	stb	zero,93(r2)
  806588:	10001785 	stb	zero,94(r2)
  80658c:	100017c5 	stb	zero,95(r2)
  806590:	10001805 	stb	zero,96(r2)
  806594:	10001845 	stb	zero,97(r2)
  806598:	10001885 	stb	zero,98(r2)
  80659c:	100018c5 	stb	zero,99(r2)
  ptr->_cookie = ptr;
  8065a0:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  8065a4:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  8065a8:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  8065ac:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  8065b0:	11400b15 	stw	r5,44(r2)
  s->__sdidinit = 1;
  8065b4:	00800044 	movi	r2,1
  8065b8:	20800e15 	stw	r2,56(r4)
}
  8065bc:	f800283a 	ret

008065c0 <__sfmoreglue>:
{
  8065c0:	defffc04 	addi	sp,sp,-16
  8065c4:	dc800215 	stw	r18,8(sp)
  8065c8:	2825883a 	mov	r18,r5
  8065cc:	dc000015 	stw	r16,0(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  8065d0:	01401a04 	movi	r5,104
{
  8065d4:	2021883a 	mov	r16,r4
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  8065d8:	913fffc4 	addi	r4,r18,-1
{
  8065dc:	dfc00315 	stw	ra,12(sp)
  8065e0:	dc400115 	stw	r17,4(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  8065e4:	080ccac0 	call	80ccac <__mulsi3>
  8065e8:	8009883a 	mov	r4,r16
  8065ec:	11401d04 	addi	r5,r2,116
  8065f0:	1023883a 	mov	r17,r2
  8065f4:	08075480 	call	807548 <_malloc_r>
  8065f8:	1021883a 	mov	r16,r2
  if (g == NULL)
  8065fc:	10000726 	beq	r2,zero,80661c <__sfmoreglue+0x5c>
  g->glue._iobs = &g->file;
  806600:	11000304 	addi	r4,r2,12
  g->glue._next = NULL;
  806604:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  806608:	14800115 	stw	r18,4(r2)
  g->glue._iobs = &g->file;
  80660c:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806610:	89801a04 	addi	r6,r17,104
  806614:	000b883a 	mov	r5,zero
  806618:	08080540 	call	808054 <memset>
}
  80661c:	8005883a 	mov	r2,r16
  806620:	dfc00317 	ldw	ra,12(sp)
  806624:	dc800217 	ldw	r18,8(sp)
  806628:	dc400117 	ldw	r17,4(sp)
  80662c:	dc000017 	ldw	r16,0(sp)
  806630:	dec00404 	addi	sp,sp,16
  806634:	f800283a 	ret

00806638 <__sfp>:
{
  806638:	defffb04 	addi	sp,sp,-20
  80663c:	dc000015 	stw	r16,0(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  806640:	d4200817 	ldw	r16,-32736(gp)
{
  806644:	dc400115 	stw	r17,4(sp)
  806648:	dfc00415 	stw	ra,16(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  80664c:	80800e17 	ldw	r2,56(r16)
{
  806650:	dcc00315 	stw	r19,12(sp)
  806654:	dc800215 	stw	r18,8(sp)
  806658:	2023883a 	mov	r17,r4
  if (!_GLOBAL_REENT->__sdidinit)
  80665c:	10003126 	beq	r2,zero,806724 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806660:	8100ba17 	ldw	r4,744(r16)
  806664:	8140b917 	ldw	r5,740(r16)
  g->glue._niobs = n;
  806668:	04c00104 	movi	r19,4
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
  80666c:	8400b804 	addi	r16,r16,736
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806670:	297fffc4 	addi	r5,r5,-1
  806674:	2800050e 	bge	r5,zero,80668c <__sfp+0x54>
  806678:	00002406 	br	80670c <__sfp+0xd4>
  80667c:	297fffc4 	addi	r5,r5,-1
  806680:	28bfffd8 	cmpnei	r2,r5,-1
  806684:	21001a04 	addi	r4,r4,104
  806688:	10002026 	beq	r2,zero,80670c <__sfp+0xd4>
	if (fp->_flags == 0)
  80668c:	2080030f 	ldh	r2,12(r4)
  806690:	103ffa1e 	bne	r2,zero,80667c <__sfp+0x44>
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  806694:	00bffff4 	movhi	r2,65535
  806698:	10800044 	addi	r2,r2,1
  fp->_flags2 = 0;
  80669c:	20001915 	stw	zero,100(r4)
  fp->_p = NULL;		/* no current pointer */
  8066a0:	20000015 	stw	zero,0(r4)
  fp->_r = 0;
  8066a4:	20000115 	stw	zero,4(r4)
  fp->_w = 0;			/* nothing to read or write */
  8066a8:	20000215 	stw	zero,8(r4)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  8066ac:	20800315 	stw	r2,12(r4)
  fp->_bf._base = NULL;		/* no buffer */
  8066b0:	20000415 	stw	zero,16(r4)
  fp->_bf._size = 0;
  8066b4:	20000515 	stw	zero,20(r4)
  fp->_lbfsize = 0;		/* not line buffered */
  8066b8:	20000615 	stw	zero,24(r4)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
  8066bc:	20001705 	stb	zero,92(r4)
  8066c0:	20001745 	stb	zero,93(r4)
  8066c4:	20001785 	stb	zero,94(r4)
  8066c8:	200017c5 	stb	zero,95(r4)
  8066cc:	20001805 	stb	zero,96(r4)
  8066d0:	20001845 	stb	zero,97(r4)
  8066d4:	20001885 	stb	zero,98(r4)
  8066d8:	200018c5 	stb	zero,99(r4)
  fp->_ub._base = NULL;		/* no ungetc buffer */
  8066dc:	20000c15 	stw	zero,48(r4)
  fp->_ub._size = 0;
  8066e0:	20000d15 	stw	zero,52(r4)
  fp->_lb._base = NULL;		/* no line buffer */
  8066e4:	20001115 	stw	zero,68(r4)
  fp->_lb._size = 0;
  8066e8:	20001215 	stw	zero,72(r4)
}
  8066ec:	2005883a 	mov	r2,r4
  8066f0:	dfc00417 	ldw	ra,16(sp)
  8066f4:	dcc00317 	ldw	r19,12(sp)
  8066f8:	dc800217 	ldw	r18,8(sp)
  8066fc:	dc400117 	ldw	r17,4(sp)
  806700:	dc000017 	ldw	r16,0(sp)
  806704:	dec00504 	addi	sp,sp,20
  806708:	f800283a 	ret
      if (g->_next == NULL &&
  80670c:	80800017 	ldw	r2,0(r16)
  806710:	10000726 	beq	r2,zero,806730 <__sfp+0xf8>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806714:	11000217 	ldw	r4,8(r2)
  806718:	11400117 	ldw	r5,4(r2)
  80671c:	1021883a 	mov	r16,r2
  806720:	003fd306 	br	806670 <__sfp+0x38>
  if (s->__sdidinit)
  806724:	8009883a 	mov	r4,r16
  806728:	08064580 	call	806458 <__sinit.part.0>
  80672c:	003fcc06 	br	806660 <__sfp+0x28>
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  806730:	01406b04 	movi	r5,428
  806734:	8809883a 	mov	r4,r17
  806738:	08075480 	call	807548 <_malloc_r>
  80673c:	1025883a 	mov	r18,r2
  if (g == NULL)
  806740:	10000c26 	beq	r2,zero,806774 <__sfp+0x13c>
  g->glue._iobs = &g->file;
  806744:	11000304 	addi	r4,r2,12
  806748:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  80674c:	000b883a 	mov	r5,zero
  g->glue._next = NULL;
  806750:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  806754:	14c00115 	stw	r19,4(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  806758:	01806804 	movi	r6,416
  80675c:	08080540 	call	808054 <memset>
  806760:	1009883a 	mov	r4,r2
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  806764:	84800015 	stw	r18,0(r16)
  806768:	014000c4 	movi	r5,3
  80676c:	9021883a 	mov	r16,r18
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  806770:	003fc606 	br	80668c <__sfp+0x54>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  806774:	80000015 	stw	zero,0(r16)
  d->_errno = ENOMEM;
  806778:	00800304 	movi	r2,12
  80677c:	88800015 	stw	r2,0(r17)
  return NULL;
  806780:	0009883a 	mov	r4,zero
  806784:	003fd906 	br	8066ec <__sfp+0xb4>

00806788 <_cleanup>:
  (void) _fwalk_reent (ptr, cleanup_func);
  806788:	d1200817 	ldw	r4,-32736(gp)
  80678c:	01402074 	movhi	r5,129
  806790:	296cba04 	addi	r5,r5,-19736
  806794:	08071441 	jmpi	807144 <_fwalk_reent>

00806798 <__sinit>:
  if (s->__sdidinit)
  806798:	20800e17 	ldw	r2,56(r4)
  80679c:	10000126 	beq	r2,zero,8067a4 <__sinit+0xc>
}
  8067a0:	f800283a 	ret
  8067a4:	08064581 	jmpi	806458 <__sinit.part.0>

008067a8 <__sfp_lock_acquire>:
}
  8067a8:	f800283a 	ret

008067ac <__sfp_lock_release>:
  8067ac:	f800283a 	ret

008067b0 <__sinit_lock_acquire>:
  8067b0:	f800283a 	ret

008067b4 <__sinit_lock_release>:
  8067b4:	f800283a 	ret

008067b8 <__fp_lock_all>:
void
__fp_lock_all (void)
{
  __sfp_lock_acquire ();

  (void) _fwalk (_REENT, __fp_lock);
  8067b8:	d1200917 	ldw	r4,-32732(gp)
  8067bc:	01402034 	movhi	r5,128
  8067c0:	29590f04 	addi	r5,r5,25660
  8067c4:	08070ac1 	jmpi	8070ac <_fwalk>

008067c8 <__fp_unlock_all>:
}

void
__fp_unlock_all (void)
{
  (void) _fwalk (_REENT, __fp_unlock);
  8067c8:	d1200917 	ldw	r4,-32732(gp)
  8067cc:	01402034 	movhi	r5,128
  8067d0:	29591404 	addi	r5,r5,25680
  8067d4:	08070ac1 	jmpi	8070ac <_fwalk>

008067d8 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
  8067d8:	defffb04 	addi	sp,sp,-20
  8067dc:	dcc00315 	stw	r19,12(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
  8067e0:	04c02074 	movhi	r19,129
{
  8067e4:	dc800215 	stw	r18,8(sp)
  8067e8:	dc400115 	stw	r17,4(sp)
  8067ec:	dc000015 	stw	r16,0(sp)
  8067f0:	dfc00415 	stw	ra,16(sp)
  8067f4:	2821883a 	mov	r16,r5
  top_size = chunksize(top);
  8067f8:	9ccb7704 	addi	r19,r19,11740
{
  8067fc:	2025883a 	mov	r18,r4
  MALLOC_LOCK;
  806800:	080fb2c0 	call	80fb2c <__malloc_lock>
  top_size = chunksize(top);
  806804:	98800217 	ldw	r2,8(r19)
  806808:	14400117 	ldw	r17,4(r2)
  80680c:	00bfff04 	movi	r2,-4
  806810:	88a2703a 	and	r17,r17,r2
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
  806814:	8c21c83a 	sub	r16,r17,r16
  806818:	8403fbc4 	addi	r16,r16,4079
  80681c:	8020d33a 	srli	r16,r16,12
  806820:	843fffc4 	addi	r16,r16,-1
  806824:	8020933a 	slli	r16,r16,12

  if (extra < (long)pagesz)  /* Not enough memory to release */
  806828:	80840008 	cmpgei	r2,r16,4096
  80682c:	10000626 	beq	r2,zero,806848 <_malloc_trim_r+0x70>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
  806830:	000b883a 	mov	r5,zero
  806834:	9009883a 	mov	r4,r18
  806838:	08098980 	call	809898 <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
  80683c:	98c00217 	ldw	r3,8(r19)
  806840:	1c47883a 	add	r3,r3,r17
  806844:	10c00a26 	beq	r2,r3,806870 <_malloc_trim_r+0x98>
    MALLOC_UNLOCK;
  806848:	9009883a 	mov	r4,r18
  80684c:	080fb500 	call	80fb50 <__malloc_unlock>
    return 0;
  806850:	0005883a 	mov	r2,zero
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
  806854:	dfc00417 	ldw	ra,16(sp)
  806858:	dcc00317 	ldw	r19,12(sp)
  80685c:	dc800217 	ldw	r18,8(sp)
  806860:	dc400117 	ldw	r17,4(sp)
  806864:	dc000017 	ldw	r16,0(sp)
  806868:	dec00504 	addi	sp,sp,20
  80686c:	f800283a 	ret
      new_brk = (char*)(MORECORE (-extra));
  806870:	040bc83a 	sub	r5,zero,r16
  806874:	9009883a 	mov	r4,r18
  806878:	08098980 	call	809898 <_sbrk_r>
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
  80687c:	10bfffd8 	cmpnei	r2,r2,-1
  806880:	10000d26 	beq	r2,zero,8068b8 <_malloc_trim_r+0xe0>
        sbrked_mem -= extra;
  806884:	00802074 	movhi	r2,129
  806888:	10981b17 	ldw	r2,24684(r2)
        set_head(top, (top_size - extra) | PREV_INUSE);
  80688c:	98c00217 	ldw	r3,8(r19)
  806890:	8c23c83a 	sub	r17,r17,r16
  806894:	8c400054 	ori	r17,r17,1
        sbrked_mem -= extra;
  806898:	1421c83a 	sub	r16,r2,r16
        set_head(top, (top_size - extra) | PREV_INUSE);
  80689c:	1c400115 	stw	r17,4(r3)
        sbrked_mem -= extra;
  8068a0:	00802074 	movhi	r2,129
	MALLOC_UNLOCK;
  8068a4:	9009883a 	mov	r4,r18
        sbrked_mem -= extra;
  8068a8:	14181b15 	stw	r16,24684(r2)
	MALLOC_UNLOCK;
  8068ac:	080fb500 	call	80fb50 <__malloc_unlock>
        return 1;
  8068b0:	00800044 	movi	r2,1
  8068b4:	003fe706 	br	806854 <_malloc_trim_r+0x7c>
        current_brk = (char*)(MORECORE (0));
  8068b8:	000b883a 	mov	r5,zero
  8068bc:	9009883a 	mov	r4,r18
  8068c0:	08098980 	call	809898 <_sbrk_r>
        top_size = current_brk - (char*)top;
  8068c4:	99000217 	ldw	r4,8(r19)
  8068c8:	1107c83a 	sub	r3,r2,r4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
  8068cc:	19400410 	cmplti	r5,r3,16
  8068d0:	283fdd1e 	bne	r5,zero,806848 <_malloc_trim_r+0x70>
          sbrked_mem = current_brk - sbrk_base;
  8068d4:	d1600a17 	ldw	r5,-32728(gp)
          set_head(top, top_size | PREV_INUSE);
  8068d8:	18c00054 	ori	r3,r3,1
  8068dc:	20c00115 	stw	r3,4(r4)
          sbrked_mem = current_brk - sbrk_base;
  8068e0:	1145c83a 	sub	r2,r2,r5
  8068e4:	01402074 	movhi	r5,129
  8068e8:	28981b15 	stw	r2,24684(r5)
          set_head(top, top_size | PREV_INUSE);
  8068ec:	003fd606 	br	806848 <_malloc_trim_r+0x70>

008068f0 <_free_r>:
  if (mem == 0)                              /* free(0) has no effect */
  8068f0:	28004f26 	beq	r5,zero,806a30 <_free_r+0x140>
{
  8068f4:	defffd04 	addi	sp,sp,-12
  8068f8:	dc400115 	stw	r17,4(sp)
  8068fc:	dc000015 	stw	r16,0(sp)
  806900:	2023883a 	mov	r17,r4
  MALLOC_LOCK;
  806904:	2821883a 	mov	r16,r5
{
  806908:	dfc00215 	stw	ra,8(sp)
  MALLOC_LOCK;
  80690c:	080fb2c0 	call	80fb2c <__malloc_lock>
  hd = p->size;
  806910:	81ffff17 	ldw	r7,-4(r16)
  sz = hd & ~PREV_INUSE;
  806914:	00bfff84 	movi	r2,-2
  p = mem2chunk(mem);
  806918:	80fffe04 	addi	r3,r16,-8
  sz = hd & ~PREV_INUSE;
  80691c:	3884703a 	and	r2,r7,r2
  if (next == top)                            /* merge with top */
  806920:	01002074 	movhi	r4,129
  next = chunk_at_offset(p, sz);
  806924:	188d883a 	add	r6,r3,r2
  if (next == top)                            /* merge with top */
  806928:	210b7704 	addi	r4,r4,11740
  nextsz = chunksize(next);
  80692c:	31400117 	ldw	r5,4(r6)
  if (next == top)                            /* merge with top */
  806930:	22000217 	ldw	r8,8(r4)
  nextsz = chunksize(next);
  806934:	027fff04 	movi	r9,-4
  806938:	2a4a703a 	and	r5,r5,r9
  if (next == top)                            /* merge with top */
  80693c:	41806426 	beq	r8,r6,806ad0 <_free_r+0x1e0>
  set_head(next, nextsz);                    /* clear inuse bit */
  806940:	31400115 	stw	r5,4(r6)
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  806944:	39c0004c 	andi	r7,r7,1
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806948:	3151883a 	add	r8,r6,r5
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  80694c:	3800281e 	bne	r7,zero,8069f0 <_free_r+0x100>
    prevsz = p->prev_size;
  806950:	82bffe17 	ldw	r10,-8(r16)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806954:	42000117 	ldw	r8,4(r8)
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806958:	01c02074 	movhi	r7,129
    p = chunk_at_offset(p, -prevsz);
  80695c:	1a87c83a 	sub	r3,r3,r10
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806960:	1a400217 	ldw	r9,8(r3)
  806964:	39cb7904 	addi	r7,r7,11748
    sz += prevsz;
  806968:	1285883a 	add	r2,r2,r10
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  80696c:	4200004c 	andi	r8,r8,1
    if (p->fd == last_remainder)             /* keep as last_remainder */
  806970:	49c04c26 	beq	r9,r7,806aa4 <_free_r+0x1b4>
      unlink(p, bck, fwd);
  806974:	1a800317 	ldw	r10,12(r3)
  806978:	4a800315 	stw	r10,12(r9)
  80697c:	52400215 	stw	r9,8(r10)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806980:	40006f26 	beq	r8,zero,806b40 <_free_r+0x250>
  set_head(p, sz | PREV_INUSE);
  806984:	11400054 	ori	r5,r2,1
  806988:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  80698c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  806990:	11408028 	cmpgeui	r5,r2,512
  806994:	28002c1e 	bne	r5,zero,806a48 <_free_r+0x158>
  806998:	100ad0fa 	srli	r5,r2,3
  80699c:	100cd17a 	srli	r6,r2,5
  8069a0:	00800044 	movi	r2,1
  8069a4:	29400044 	addi	r5,r5,1
  8069a8:	280a90fa 	slli	r5,r5,3
  8069ac:	21c00117 	ldw	r7,4(r4)
  8069b0:	1184983a 	sll	r2,r2,r6
  8069b4:	214b883a 	add	r5,r4,r5
  8069b8:	29800017 	ldw	r6,0(r5)
  8069bc:	11c4b03a 	or	r2,r2,r7
  8069c0:	29fffe04 	addi	r7,r5,-8
  8069c4:	19c00315 	stw	r7,12(r3)
  8069c8:	19800215 	stw	r6,8(r3)
  8069cc:	20800115 	stw	r2,4(r4)
  8069d0:	28c00015 	stw	r3,0(r5)
  8069d4:	30c00315 	stw	r3,12(r6)
    MALLOC_UNLOCK;
  8069d8:	8809883a 	mov	r4,r17
}
  8069dc:	dfc00217 	ldw	ra,8(sp)
  8069e0:	dc400117 	ldw	r17,4(sp)
  8069e4:	dc000017 	ldw	r16,0(sp)
  8069e8:	dec00304 	addi	sp,sp,12
    MALLOC_UNLOCK;
  8069ec:	080fb501 	jmpi	80fb50 <__malloc_unlock>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  8069f0:	41c00117 	ldw	r7,4(r8)
  8069f4:	39c0004c 	andi	r7,r7,1
  8069f8:	38000e1e 	bne	r7,zero,806a34 <_free_r+0x144>
    sz += nextsz;
  8069fc:	01c02074 	movhi	r7,129
  806a00:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  806a04:	39cb7904 	addi	r7,r7,11748
  806a08:	31400217 	ldw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  806a0c:	12400054 	ori	r9,r2,1
  set_foot(p, sz);
  806a10:	1891883a 	add	r8,r3,r2
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  806a14:	29c05026 	beq	r5,r7,806b58 <_free_r+0x268>
      unlink(next, bck, fwd);
  806a18:	31800317 	ldw	r6,12(r6)
  806a1c:	29800315 	stw	r6,12(r5)
  806a20:	31400215 	stw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  806a24:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  806a28:	40800015 	stw	r2,0(r8)
  if (!islr)
  806a2c:	003fd806 	br	806990 <_free_r+0xa0>
  806a30:	f800283a 	ret
  set_head(p, sz | PREV_INUSE);
  806a34:	11400054 	ori	r5,r2,1
  806a38:	817fff15 	stw	r5,-4(r16)
  set_foot(p, sz);
  806a3c:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  806a40:	11408028 	cmpgeui	r5,r2,512
  806a44:	283fd426 	beq	r5,zero,806998 <_free_r+0xa8>
  806a48:	100ad27a 	srli	r5,r2,9
  806a4c:	29800168 	cmpgeui	r6,r5,5
  806a50:	3000321e 	bne	r6,zero,806b1c <_free_r+0x22c>
  806a54:	100ad1ba 	srli	r5,r2,6
  806a58:	29800e44 	addi	r6,r5,57
  806a5c:	300c90fa 	slli	r6,r6,3
  806a60:	29c00e04 	addi	r7,r5,56
  806a64:	218d883a 	add	r6,r4,r6
  806a68:	31400017 	ldw	r5,0(r6)
  806a6c:	31bffe04 	addi	r6,r6,-8
  806a70:	31404026 	beq	r6,r5,806b74 <_free_r+0x284>
  806a74:	01ffff04 	movi	r7,-4
  806a78:	29000117 	ldw	r4,4(r5)
  806a7c:	21c8703a 	and	r4,r4,r7
  806a80:	1100022e 	bgeu	r2,r4,806a8c <_free_r+0x19c>
  806a84:	29400217 	ldw	r5,8(r5)
  806a88:	317ffb1e 	bne	r6,r5,806a78 <_free_r+0x188>
  806a8c:	29800317 	ldw	r6,12(r5)
  806a90:	19800315 	stw	r6,12(r3)
  806a94:	19400215 	stw	r5,8(r3)
  806a98:	30c00215 	stw	r3,8(r6)
  806a9c:	28c00315 	stw	r3,12(r5)
  806aa0:	003fcd06 	br	8069d8 <_free_r+0xe8>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  806aa4:	40004b1e 	bne	r8,zero,806bd4 <_free_r+0x2e4>
      unlink(next, bck, fwd);
  806aa8:	31000317 	ldw	r4,12(r6)
  806aac:	31800217 	ldw	r6,8(r6)
    sz += nextsz;
  806ab0:	2885883a 	add	r2,r5,r2
  set_head(p, sz | PREV_INUSE);
  806ab4:	11400054 	ori	r5,r2,1
      unlink(next, bck, fwd);
  806ab8:	31000315 	stw	r4,12(r6)
  806abc:	21800215 	stw	r6,8(r4)
  set_head(p, sz | PREV_INUSE);
  806ac0:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  806ac4:	1887883a 	add	r3,r3,r2
  806ac8:	18800015 	stw	r2,0(r3)
  if (!islr)
  806acc:	003fc206 	br	8069d8 <_free_r+0xe8>
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  806ad0:	39c0004c 	andi	r7,r7,1
    sz += nextsz;
  806ad4:	1145883a 	add	r2,r2,r5
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  806ad8:	3800071e 	bne	r7,zero,806af8 <_free_r+0x208>
      prevsz = p->prev_size;
  806adc:	81fffe17 	ldw	r7,-8(r16)
      p = chunk_at_offset(p, -prevsz);
  806ae0:	19c7c83a 	sub	r3,r3,r7
      unlink(p, bck, fwd);
  806ae4:	19400317 	ldw	r5,12(r3)
  806ae8:	19800217 	ldw	r6,8(r3)
      sz += prevsz;
  806aec:	11c5883a 	add	r2,r2,r7
      unlink(p, bck, fwd);
  806af0:	31400315 	stw	r5,12(r6)
  806af4:	29800215 	stw	r6,8(r5)
    set_head(p, sz | PREV_INUSE);
  806af8:	11800054 	ori	r6,r2,1
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  806afc:	d1600b17 	ldw	r5,-32724(gp)
    set_head(p, sz | PREV_INUSE);
  806b00:	19800115 	stw	r6,4(r3)
    top = p;
  806b04:	20c00215 	stw	r3,8(r4)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  806b08:	117fb336 	bltu	r2,r5,8069d8 <_free_r+0xe8>
      malloc_trim(RCALL top_pad); 
  806b0c:	d1671717 	ldw	r5,-25508(gp)
  806b10:	8809883a 	mov	r4,r17
  806b14:	08067d80 	call	8067d8 <_malloc_trim_r>
  806b18:	003faf06 	br	8069d8 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  806b1c:	29800568 	cmpgeui	r6,r5,21
  806b20:	30000926 	beq	r6,zero,806b48 <_free_r+0x258>
  806b24:	29801568 	cmpgeui	r6,r5,85
  806b28:	3000191e 	bne	r6,zero,806b90 <_free_r+0x2a0>
  806b2c:	100ad33a 	srli	r5,r2,12
  806b30:	29801bc4 	addi	r6,r5,111
  806b34:	300c90fa 	slli	r6,r6,3
  806b38:	29c01b84 	addi	r7,r5,110
  806b3c:	003fc906 	br	806a64 <_free_r+0x174>
    sz += nextsz;
  806b40:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  806b44:	003fb006 	br	806a08 <_free_r+0x118>
    frontlink(p, sz, idx, bck, fwd);  
  806b48:	29801704 	addi	r6,r5,92
  806b4c:	300c90fa 	slli	r6,r6,3
  806b50:	29c016c4 	addi	r7,r5,91
  806b54:	003fc306 	br	806a64 <_free_r+0x174>
      link_last_remainder(p);   
  806b58:	20c00515 	stw	r3,20(r4)
  806b5c:	20c00415 	stw	r3,16(r4)
  806b60:	19c00315 	stw	r7,12(r3)
  806b64:	19c00215 	stw	r7,8(r3)
  set_head(p, sz | PREV_INUSE);
  806b68:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  806b6c:	40800015 	stw	r2,0(r8)
  if (!islr)
  806b70:	003f9906 	br	8069d8 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  806b74:	380fd0ba 	srai	r7,r7,2
  806b78:	00800044 	movi	r2,1
  806b7c:	22000117 	ldw	r8,4(r4)
  806b80:	11ce983a 	sll	r7,r2,r7
  806b84:	3a0eb03a 	or	r7,r7,r8
  806b88:	21c00115 	stw	r7,4(r4)
  806b8c:	003fc006 	br	806a90 <_free_r+0x1a0>
  806b90:	29805568 	cmpgeui	r6,r5,341
  806b94:	3000051e 	bne	r6,zero,806bac <_free_r+0x2bc>
  806b98:	100ad3fa 	srli	r5,r2,15
  806b9c:	29801e04 	addi	r6,r5,120
  806ba0:	300c90fa 	slli	r6,r6,3
  806ba4:	29c01dc4 	addi	r7,r5,119
  806ba8:	003fae06 	br	806a64 <_free_r+0x174>
  806bac:	29415568 	cmpgeui	r5,r5,1365
  806bb0:	2800051e 	bne	r5,zero,806bc8 <_free_r+0x2d8>
  806bb4:	100ad4ba 	srli	r5,r2,18
  806bb8:	29801f44 	addi	r6,r5,125
  806bbc:	300c90fa 	slli	r6,r6,3
  806bc0:	29c01f04 	addi	r7,r5,124
  806bc4:	003fa706 	br	806a64 <_free_r+0x174>
  806bc8:	0180fe04 	movi	r6,1016
  806bcc:	01c01f84 	movi	r7,126
  806bd0:	003fa406 	br	806a64 <_free_r+0x174>
  set_head(p, sz | PREV_INUSE);
  806bd4:	11000054 	ori	r4,r2,1
  806bd8:	19000115 	stw	r4,4(r3)
  set_foot(p, sz);
  806bdc:	30800015 	stw	r2,0(r6)
  if (!islr)
  806be0:	003f7d06 	br	8069d8 <_free_r+0xe8>

00806be4 <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
  806be4:	30800217 	ldw	r2,8(r6)
  806be8:	1000a326 	beq	r2,zero,806e78 <__sfvwrite_r+0x294>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
  806bec:	29c0030b 	ldhu	r7,12(r5)
{
  806bf0:	defff404 	addi	sp,sp,-48
  806bf4:	ddc00915 	stw	r23,36(sp)
  806bf8:	dd400715 	stw	r21,28(sp)
  806bfc:	dc000215 	stw	r16,8(sp)
  806c00:	dfc00b15 	stw	ra,44(sp)
  806c04:	df000a15 	stw	fp,40(sp)
  806c08:	dd800815 	stw	r22,32(sp)
  806c0c:	dd000615 	stw	r20,24(sp)
  806c10:	dcc00515 	stw	r19,20(sp)
  806c14:	dc800415 	stw	r18,16(sp)
  806c18:	dc400315 	stw	r17,12(sp)
  if (cantwrite (ptr, fp))
  806c1c:	3880020c 	andi	r2,r7,8
  806c20:	302f883a 	mov	r23,r6
  806c24:	202b883a 	mov	r21,r4
  806c28:	2821883a 	mov	r16,r5
  806c2c:	10002226 	beq	r2,zero,806cb8 <__sfvwrite_r+0xd4>
  806c30:	28800417 	ldw	r2,16(r5)
  806c34:	10002026 	beq	r2,zero,806cb8 <__sfvwrite_r+0xd4>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
  806c38:	3880008c 	andi	r2,r7,2
  iov = uio->uio_iov;
  806c3c:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  806c40:	10002526 	beq	r2,zero,806cd8 <__sfvwrite_r+0xf4>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
  806c44:	80800917 	ldw	r2,36(r16)
  806c48:	81400717 	ldw	r5,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  806c4c:	05200034 	movhi	r20,32768
  register const char *p = NULL;
  806c50:	0027883a 	mov	r19,zero
  len = 0;
  806c54:	0025883a 	mov	r18,zero
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  806c58:	a53f0004 	addi	r20,r20,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
  806c5c:	980d883a 	mov	r6,r19
  806c60:	a809883a 	mov	r4,r21
	  GETIOV (;);
  806c64:	90001026 	beq	r18,zero,806ca8 <__sfvwrite_r+0xc4>
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  806c68:	900f883a 	mov	r7,r18
  806c6c:	a480012e 	bgeu	r20,r18,806c74 <__sfvwrite_r+0x90>
  806c70:	a00f883a 	mov	r7,r20
	  w = fp->_write (ptr, fp->_cookie, p,
  806c74:	103ee83a 	callr	r2
	  if (w <= 0)
  806c78:	00807a0e 	bge	zero,r2,806e64 <__sfvwrite_r+0x280>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
  806c7c:	b9000217 	ldw	r4,8(r23)
	  p += w;
  806c80:	98a7883a 	add	r19,r19,r2
	  len -= w;
  806c84:	90a5c83a 	sub	r18,r18,r2
      while ((uio->uio_resid -= w) != 0);
  806c88:	2085c83a 	sub	r2,r4,r2
  806c8c:	b8800215 	stw	r2,8(r23)
  806c90:	10006326 	beq	r2,zero,806e20 <__sfvwrite_r+0x23c>
	  w = fp->_write (ptr, fp->_cookie, p,
  806c94:	80800917 	ldw	r2,36(r16)
  806c98:	81400717 	ldw	r5,28(r16)
  806c9c:	980d883a 	mov	r6,r19
  806ca0:	a809883a 	mov	r4,r21
	  GETIOV (;);
  806ca4:	903ff01e 	bne	r18,zero,806c68 <__sfvwrite_r+0x84>
  806ca8:	8cc00017 	ldw	r19,0(r17)
  806cac:	8c800117 	ldw	r18,4(r17)
  806cb0:	8c400204 	addi	r17,r17,8
  806cb4:	003fe906 	br	806c5c <__sfvwrite_r+0x78>
  if (cantwrite (ptr, fp))
  806cb8:	800b883a 	mov	r5,r16
  806cbc:	a809883a 	mov	r4,r21
  806cc0:	08046700 	call	804670 <__swsetup_r>
  806cc4:	1000f71e 	bne	r2,zero,8070a4 <__sfvwrite_r+0x4c0>
  if (fp->_flags & __SNBF)
  806cc8:	81c0030b 	ldhu	r7,12(r16)
  iov = uio->uio_iov;
  806ccc:	bc400017 	ldw	r17,0(r23)
  if (fp->_flags & __SNBF)
  806cd0:	3880008c 	andi	r2,r7,2
  806cd4:	103fdb1e 	bne	r2,zero,806c44 <__sfvwrite_r+0x60>
    }
  else if ((fp->_flags & __SLBF) == 0)
  806cd8:	3880004c 	andi	r2,r7,1
	      nl = memchr ((void *) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
  806cdc:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  806ce0:	82000017 	ldw	r8,0(r16)
  else if ((fp->_flags & __SLBF) == 0)
  806ce4:	1000661e 	bne	r2,zero,806e80 <__sfvwrite_r+0x29c>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806ce8:	00a00034 	movhi	r2,32768
  806cec:	10bfff84 	addi	r2,r2,-2
  806cf0:	00e00034 	movhi	r3,32768
  806cf4:	d8800015 	stw	r2,0(sp)
  806cf8:	18bfffc4 	addi	r2,r3,-1
  register const char *p = NULL;
  806cfc:	0039883a 	mov	fp,zero
  len = 0;
  806d00:	0027883a 	mov	r19,zero
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806d04:	d8800115 	stw	r2,4(sp)
	  GETIOV (;);
  806d08:	98004126 	beq	r19,zero,806e10 <__sfvwrite_r+0x22c>
	  if (fp->_flags & __SSTR)
  806d0c:	3880800c 	andi	r2,r7,512
  806d10:	10009726 	beq	r2,zero,806f70 <__sfvwrite_r+0x38c>
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
  806d14:	902d883a 	mov	r22,r18
  806d18:	9c80be36 	bltu	r19,r18,807014 <__sfvwrite_r+0x430>
  806d1c:	3881200c 	andi	r2,r7,1152
  806d20:	10002626 	beq	r2,zero,806dbc <__sfvwrite_r+0x1d8>
		  int newsize = fp->_bf._size * 3 / 2;
  806d24:	81800517 	ldw	r6,20(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  806d28:	81400417 	ldw	r5,16(r16)
		  if (newsize < curpos + len + 1)
  806d2c:	98800044 	addi	r2,r19,1
		  int newsize = fp->_bf._size * 3 / 2;
  806d30:	3189883a 	add	r4,r6,r6
  806d34:	2189883a 	add	r4,r4,r6
  806d38:	2028d7fa 	srli	r20,r4,31
		  int curpos = (fp->_p - fp->_bf._base);
  806d3c:	4165c83a 	sub	r18,r8,r5
		  if (newsize < curpos + len + 1)
  806d40:	1485883a 	add	r2,r2,r18
		  int newsize = fp->_bf._size * 3 / 2;
  806d44:	a109883a 	add	r4,r20,r4
  806d48:	2029d07a 	srai	r20,r4,1
		  if (newsize < curpos + len + 1)
  806d4c:	a00d883a 	mov	r6,r20
  806d50:	a080022e 	bgeu	r20,r2,806d5c <__sfvwrite_r+0x178>
		    newsize = curpos + len + 1;
  806d54:	1029883a 	mov	r20,r2
  806d58:	100d883a 	mov	r6,r2
		  if (fp->_flags & __SOPT)
  806d5c:	39c1000c 	andi	r7,r7,1024
  806d60:	3800c026 	beq	r7,zero,807064 <__sfvwrite_r+0x480>
		      str = (unsigned char *)_malloc_r (ptr, newsize);
  806d64:	a809883a 	mov	r4,r21
  806d68:	300b883a 	mov	r5,r6
  806d6c:	08075480 	call	807548 <_malloc_r>
  806d70:	1009883a 	mov	r4,r2
		      if (!str)
  806d74:	1000c726 	beq	r2,zero,807094 <__sfvwrite_r+0x4b0>
		      memcpy (str, fp->_bf._base, curpos);
  806d78:	81400417 	ldw	r5,16(r16)
  806d7c:	900d883a 	mov	r6,r18
  806d80:	0807e280 	call	807e28 <memcpy>
  806d84:	1009883a 	mov	r4,r2
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
  806d88:	8080030b 	ldhu	r2,12(r16)
  806d8c:	00fedfc4 	movi	r3,-1153
  806d90:	10c4703a 	and	r2,r2,r3
  806d94:	10802014 	ori	r2,r2,128
  806d98:	8080030d 	sth	r2,12(r16)
		  fp->_p = str + curpos;
  806d9c:	2491883a 	add	r8,r4,r18
		  fp->_w = newsize - curpos;
  806da0:	a485c83a 	sub	r2,r20,r18
		  fp->_bf._base = str;
  806da4:	81000415 	stw	r4,16(r16)
		  fp->_p = str + curpos;
  806da8:	82000015 	stw	r8,0(r16)
		  fp->_bf._size = newsize;
  806dac:	85000515 	stw	r20,20(r16)
		  w = len;
  806db0:	9825883a 	mov	r18,r19
		  fp->_w = newsize - curpos;
  806db4:	80800215 	stw	r2,8(r16)
	      if (len < w)
  806db8:	982d883a 	mov	r22,r19
	      COPY (w);		/* copy MIN(fp->_w,len), */
  806dbc:	4009883a 	mov	r4,r8
  806dc0:	b00d883a 	mov	r6,r22
  806dc4:	e00b883a 	mov	r5,fp
  806dc8:	0807f280 	call	807f28 <memmove>
	      fp->_w -= w;
  806dcc:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  806dd0:	80800017 	ldw	r2,0(r16)
  806dd4:	9829883a 	mov	r20,r19
	      fp->_w -= w;
  806dd8:	24a5c83a 	sub	r18,r4,r18
	      fp->_p += w;
  806ddc:	1585883a 	add	r2,r2,r22
	      fp->_w -= w;
  806de0:	84800215 	stw	r18,8(r16)
	      fp->_p += w;
  806de4:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
  806de8:	0027883a 	mov	r19,zero
      while ((uio->uio_resid -= w) != 0);
  806dec:	b8800217 	ldw	r2,8(r23)
	  p += w;
  806df0:	e539883a 	add	fp,fp,r20
      while ((uio->uio_resid -= w) != 0);
  806df4:	1529c83a 	sub	r20,r2,r20
  806df8:	bd000215 	stw	r20,8(r23)
  806dfc:	a0000826 	beq	r20,zero,806e20 <__sfvwrite_r+0x23c>
	  if (fp->_flags & __SSTR)
  806e00:	81c0030b 	ldhu	r7,12(r16)
	  w = fp->_w;
  806e04:	84800217 	ldw	r18,8(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  806e08:	82000017 	ldw	r8,0(r16)
	  GETIOV (;);
  806e0c:	983fbf1e 	bne	r19,zero,806d0c <__sfvwrite_r+0x128>
  806e10:	8f000017 	ldw	fp,0(r17)
  806e14:	8cc00117 	ldw	r19,4(r17)
  806e18:	8c400204 	addi	r17,r17,8
  806e1c:	003fba06 	br	806d08 <__sfvwrite_r+0x124>
    return 0;
  806e20:	0005883a 	mov	r2,zero
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
  806e24:	dfc00b17 	ldw	ra,44(sp)
  806e28:	df000a17 	ldw	fp,40(sp)
  806e2c:	ddc00917 	ldw	r23,36(sp)
  806e30:	dd800817 	ldw	r22,32(sp)
  806e34:	dd400717 	ldw	r21,28(sp)
  806e38:	dd000617 	ldw	r20,24(sp)
  806e3c:	dcc00517 	ldw	r19,20(sp)
  806e40:	dc800417 	ldw	r18,16(sp)
  806e44:	dc400317 	ldw	r17,12(sp)
  806e48:	dc000217 	ldw	r16,8(sp)
  806e4c:	dec00c04 	addi	sp,sp,48
  806e50:	f800283a 	ret
	      if (_fflush_r (ptr, fp))
  806e54:	800b883a 	mov	r5,r16
  806e58:	a809883a 	mov	r4,r21
  806e5c:	08063600 	call	806360 <_fflush_r>
  806e60:	10002026 	beq	r2,zero,806ee4 <__sfvwrite_r+0x300>
  fp->_flags |= __SERR;
  806e64:	8080030b 	ldhu	r2,12(r16)
  806e68:	10801014 	ori	r2,r2,64
  806e6c:	8080030d 	sth	r2,12(r16)
  return EOF;
  806e70:	00bfffc4 	movi	r2,-1
  806e74:	003feb06 	br	806e24 <__sfvwrite_r+0x240>
    return 0;
  806e78:	0005883a 	mov	r2,zero
}
  806e7c:	f800283a 	ret
  len = 0;
  806e80:	002d883a 	mov	r22,zero
      nldist = 0;
  806e84:	0027883a 	mov	r19,zero
      nlknown = 0;
  806e88:	0005883a 	mov	r2,zero
  register const char *p = NULL;
  806e8c:	0039883a 	mov	fp,zero
	  GETIOV (nlknown = 0);
  806e90:	b0001d26 	beq	r22,zero,806f08 <__sfvwrite_r+0x324>
	  if (!nlknown)
  806e94:	10002026 	beq	r2,zero,806f18 <__sfvwrite_r+0x334>
	  s = MIN (len, nldist);
  806e98:	9829883a 	mov	r20,r19
  806e9c:	b500012e 	bgeu	r22,r20,806ea4 <__sfvwrite_r+0x2c0>
  806ea0:	b029883a 	mov	r20,r22
	  if (fp->_p > fp->_bf._base && s > w)
  806ea4:	80800417 	ldw	r2,16(r16)
	  w = fp->_w + fp->_bf._size;
  806ea8:	81c00517 	ldw	r7,20(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  806eac:	1200022e 	bgeu	r2,r8,806eb8 <__sfvwrite_r+0x2d4>
	  w = fp->_w + fp->_bf._size;
  806eb0:	3ca5883a 	add	r18,r7,r18
	  if (fp->_p > fp->_bf._base && s > w)
  806eb4:	95002216 	blt	r18,r20,806f40 <__sfvwrite_r+0x35c>
	  else if (s >= (w = fp->_bf._size))
  806eb8:	a1c05916 	blt	r20,r7,807020 <__sfvwrite_r+0x43c>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  806ebc:	80800917 	ldw	r2,36(r16)
  806ec0:	81400717 	ldw	r5,28(r16)
  806ec4:	e00d883a 	mov	r6,fp
  806ec8:	a809883a 	mov	r4,r21
  806ecc:	103ee83a 	callr	r2
  806ed0:	1025883a 	mov	r18,r2
	      if (w <= 0)
  806ed4:	00bfe30e 	bge	zero,r2,806e64 <__sfvwrite_r+0x280>
	  if ((nldist -= w) == 0)
  806ed8:	9ca7c83a 	sub	r19,r19,r18
  806edc:	983fdd26 	beq	r19,zero,806e54 <__sfvwrite_r+0x270>
  806ee0:	00800044 	movi	r2,1
      while ((uio->uio_resid -= w) != 0);
  806ee4:	b9800217 	ldw	r6,8(r23)
	  p += w;
  806ee8:	e4b9883a 	add	fp,fp,r18
	  len -= w;
  806eec:	b4adc83a 	sub	r22,r22,r18
      while ((uio->uio_resid -= w) != 0);
  806ef0:	34a5c83a 	sub	r18,r6,r18
  806ef4:	bc800215 	stw	r18,8(r23)
  806ef8:	903fc926 	beq	r18,zero,806e20 <__sfvwrite_r+0x23c>
	  w = fp->_w + fp->_bf._size;
  806efc:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  806f00:	82000017 	ldw	r8,0(r16)
	  GETIOV (nlknown = 0);
  806f04:	b03fe31e 	bne	r22,zero,806e94 <__sfvwrite_r+0x2b0>
  806f08:	8d800117 	ldw	r22,4(r17)
  806f0c:	8f000017 	ldw	fp,0(r17)
  806f10:	8c400204 	addi	r17,r17,8
  806f14:	b03ffc26 	beq	r22,zero,806f08 <__sfvwrite_r+0x324>
	      nl = memchr ((void *) p, '\n', len);
  806f18:	b00d883a 	mov	r6,r22
  806f1c:	01400284 	movi	r5,10
  806f20:	e009883a 	mov	r4,fp
  806f24:	da000015 	stw	r8,0(sp)
  806f28:	0807d580 	call	807d58 <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
  806f2c:	da000017 	ldw	r8,0(sp)
  806f30:	10004926 	beq	r2,zero,807058 <__sfvwrite_r+0x474>
  806f34:	10800044 	addi	r2,r2,1
  806f38:	1727c83a 	sub	r19,r2,fp
  806f3c:	003fd606 	br	806e98 <__sfvwrite_r+0x2b4>
	      COPY (w);
  806f40:	e00b883a 	mov	r5,fp
  806f44:	4009883a 	mov	r4,r8
  806f48:	900d883a 	mov	r6,r18
  806f4c:	0807f280 	call	807f28 <memmove>
	      fp->_p += w;
  806f50:	80800017 	ldw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  806f54:	800b883a 	mov	r5,r16
  806f58:	a809883a 	mov	r4,r21
	      fp->_p += w;
  806f5c:	1485883a 	add	r2,r2,r18
  806f60:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  806f64:	08063600 	call	806360 <_fflush_r>
  806f68:	103fdb26 	beq	r2,zero,806ed8 <__sfvwrite_r+0x2f4>
  806f6c:	003fbd06 	br	806e64 <__sfvwrite_r+0x280>
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
  806f70:	80800417 	ldw	r2,16(r16)
  806f74:	12001436 	bltu	r2,r8,806fc8 <__sfvwrite_r+0x3e4>
  806f78:	85000517 	ldw	r20,20(r16)
  806f7c:	9d001236 	bltu	r19,r20,806fc8 <__sfvwrite_r+0x3e4>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  806f80:	d8800017 	ldw	r2,0(sp)
  806f84:	14c0322e 	bgeu	r2,r19,807050 <__sfvwrite_r+0x46c>
  806f88:	d9000117 	ldw	r4,4(sp)
  806f8c:	a00b883a 	mov	r5,r20
  806f90:	080caf80 	call	80caf8 <__divsi3>
  806f94:	a00b883a 	mov	r5,r20
  806f98:	1009883a 	mov	r4,r2
  806f9c:	080ccac0 	call	80ccac <__mulsi3>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  806fa0:	82000917 	ldw	r8,36(r16)
  806fa4:	81400717 	ldw	r5,28(r16)
  806fa8:	100f883a 	mov	r7,r2
  806fac:	e00d883a 	mov	r6,fp
  806fb0:	a809883a 	mov	r4,r21
  806fb4:	403ee83a 	callr	r8
  806fb8:	1029883a 	mov	r20,r2
	      if (w <= 0)
  806fbc:	00bfa90e 	bge	zero,r2,806e64 <__sfvwrite_r+0x280>
	  len -= w;
  806fc0:	9d27c83a 	sub	r19,r19,r20
  806fc4:	003f8906 	br	806dec <__sfvwrite_r+0x208>
	      w = MIN (len, w);
  806fc8:	9029883a 	mov	r20,r18
  806fcc:	9c80012e 	bgeu	r19,r18,806fd4 <__sfvwrite_r+0x3f0>
  806fd0:	9829883a 	mov	r20,r19
	      COPY (w);
  806fd4:	4009883a 	mov	r4,r8
  806fd8:	a00d883a 	mov	r6,r20
  806fdc:	e00b883a 	mov	r5,fp
  806fe0:	0807f280 	call	807f28 <memmove>
	      fp->_w -= w;
  806fe4:	80800217 	ldw	r2,8(r16)
	      fp->_p += w;
  806fe8:	81000017 	ldw	r4,0(r16)
	      fp->_w -= w;
  806fec:	1505c83a 	sub	r2,r2,r20
	      fp->_p += w;
  806ff0:	2509883a 	add	r4,r4,r20
	      fp->_w -= w;
  806ff4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
  806ff8:	81000015 	stw	r4,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
  806ffc:	103ff01e 	bne	r2,zero,806fc0 <__sfvwrite_r+0x3dc>
  807000:	800b883a 	mov	r5,r16
  807004:	a809883a 	mov	r4,r21
  807008:	08063600 	call	806360 <_fflush_r>
  80700c:	103fec26 	beq	r2,zero,806fc0 <__sfvwrite_r+0x3dc>
  807010:	003f9406 	br	806e64 <__sfvwrite_r+0x280>
		w = len;
  807014:	9825883a 	mov	r18,r19
  807018:	982d883a 	mov	r22,r19
  80701c:	003f6706 	br	806dbc <__sfvwrite_r+0x1d8>
	      COPY (w);
  807020:	4009883a 	mov	r4,r8
  807024:	a00d883a 	mov	r6,r20
  807028:	e00b883a 	mov	r5,fp
  80702c:	0807f280 	call	807f28 <memmove>
	      fp->_w -= w;
  807030:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  807034:	80800017 	ldw	r2,0(r16)
  807038:	a025883a 	mov	r18,r20
	      fp->_w -= w;
  80703c:	2509c83a 	sub	r4,r4,r20
	      fp->_p += w;
  807040:	1505883a 	add	r2,r2,r20
	      fp->_w -= w;
  807044:	81000215 	stw	r4,8(r16)
	      fp->_p += w;
  807048:	80800015 	stw	r2,0(r16)
  80704c:	003fa206 	br	806ed8 <__sfvwrite_r+0x2f4>
  807050:	9809883a 	mov	r4,r19
  807054:	003fcd06 	br	806f8c <__sfvwrite_r+0x3a8>
	      nldist = nl ? nl + 1 - p : len + 1;
  807058:	b5000044 	addi	r20,r22,1
  80705c:	a027883a 	mov	r19,r20
  807060:	003f8e06 	br	806e9c <__sfvwrite_r+0x2b8>
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
  807064:	a809883a 	mov	r4,r21
  807068:	08093340 	call	809334 <_realloc_r>
  80706c:	1009883a 	mov	r4,r2
		      if (!str)
  807070:	103f4a1e 	bne	r2,zero,806d9c <__sfvwrite_r+0x1b8>
			  _free_r (ptr, fp->_bf._base);
  807074:	81400417 	ldw	r5,16(r16)
  807078:	a809883a 	mov	r4,r21
  80707c:	08068f00 	call	8068f0 <_free_r>
			  fp->_flags &=  ~__SMBF;
  807080:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  807084:	00c00304 	movi	r3,12
  807088:	a8c00015 	stw	r3,0(r21)
			  fp->_flags &=  ~__SMBF;
  80708c:	10bfdfcc 	andi	r2,r2,65407
			  goto err;
  807090:	003f7506 	br	806e68 <__sfvwrite_r+0x284>
			  ptr->_errno = ENOMEM;
  807094:	00c00304 	movi	r3,12
  fp->_flags |= __SERR;
  807098:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  80709c:	a8c00015 	stw	r3,0(r21)
			  goto err;
  8070a0:	003f7106 	br	806e68 <__sfvwrite_r+0x284>
    return EOF;
  8070a4:	00bfffc4 	movi	r2,-1
  8070a8:	003f5e06 	br	806e24 <__sfvwrite_r+0x240>

008070ac <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
  8070ac:	defffa04 	addi	sp,sp,-24
  8070b0:	dd000415 	stw	r20,16(sp)
  8070b4:	dcc00315 	stw	r19,12(sp)
  8070b8:	dc800215 	stw	r18,8(sp)
  8070bc:	dfc00515 	stw	ra,20(sp)
  8070c0:	dc400115 	stw	r17,4(sp)
  8070c4:	dc000015 	stw	r16,0(sp)
  8070c8:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8070cc:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  8070d0:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8070d4:	94400117 	ldw	r17,4(r18)
  8070d8:	94000217 	ldw	r16,8(r18)
  8070dc:	8c7fffc4 	addi	r17,r17,-1
  8070e0:	88000d16 	blt	r17,zero,807118 <_fwalk+0x6c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8070e4:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8070e8:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8070ec:	108000b0 	cmpltui	r2,r2,2
  8070f0:	1000061e 	bne	r2,zero,80710c <_fwalk+0x60>
  8070f4:	8080038f 	ldh	r2,14(r16)
	ret |= (*function) (fp);
  8070f8:	8009883a 	mov	r4,r16
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8070fc:	10bfffe0 	cmpeqi	r2,r2,-1
  807100:	1000021e 	bne	r2,zero,80710c <_fwalk+0x60>
	ret |= (*function) (fp);
  807104:	983ee83a 	callr	r19
  807108:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  80710c:	88bfffd8 	cmpnei	r2,r17,-1
  807110:	84001a04 	addi	r16,r16,104
  807114:	103ff31e 	bne	r2,zero,8070e4 <_fwalk+0x38>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  807118:	94800017 	ldw	r18,0(r18)
  80711c:	903fed1e 	bne	r18,zero,8070d4 <_fwalk+0x28>

  return ret;
}
  807120:	a005883a 	mov	r2,r20
  807124:	dfc00517 	ldw	ra,20(sp)
  807128:	dd000417 	ldw	r20,16(sp)
  80712c:	dcc00317 	ldw	r19,12(sp)
  807130:	dc800217 	ldw	r18,8(sp)
  807134:	dc400117 	ldw	r17,4(sp)
  807138:	dc000017 	ldw	r16,0(sp)
  80713c:	dec00604 	addi	sp,sp,24
  807140:	f800283a 	ret

00807144 <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
  807144:	defff904 	addi	sp,sp,-28
  807148:	dd400515 	stw	r21,20(sp)
  80714c:	dd000415 	stw	r20,16(sp)
  807150:	dcc00315 	stw	r19,12(sp)
  807154:	dc800215 	stw	r18,8(sp)
  807158:	dfc00615 	stw	ra,24(sp)
  80715c:	dc400115 	stw	r17,4(sp)
  807160:	dc000015 	stw	r16,0(sp)
  807164:	202b883a 	mov	r21,r4
  807168:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  80716c:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  807170:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807174:	94400117 	ldw	r17,4(r18)
  807178:	94000217 	ldw	r16,8(r18)
  80717c:	8c7fffc4 	addi	r17,r17,-1
  807180:	88000e16 	blt	r17,zero,8071bc <_fwalk_reent+0x78>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  807184:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  807188:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  80718c:	108000b0 	cmpltui	r2,r2,2
  807190:	1000071e 	bne	r2,zero,8071b0 <_fwalk_reent+0x6c>
  807194:	8080038f 	ldh	r2,14(r16)
	ret |= (*reent_function) (ptr, fp);
  807198:	800b883a 	mov	r5,r16
  80719c:	a809883a 	mov	r4,r21
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8071a0:	10bfffe0 	cmpeqi	r2,r2,-1
  8071a4:	1000021e 	bne	r2,zero,8071b0 <_fwalk_reent+0x6c>
	ret |= (*reent_function) (ptr, fp);
  8071a8:	983ee83a 	callr	r19
  8071ac:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8071b0:	88bfffd8 	cmpnei	r2,r17,-1
  8071b4:	84001a04 	addi	r16,r16,104
  8071b8:	103ff21e 	bne	r2,zero,807184 <_fwalk_reent+0x40>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8071bc:	94800017 	ldw	r18,0(r18)
  8071c0:	903fec1e 	bne	r18,zero,807174 <_fwalk_reent+0x30>

  return ret;
}
  8071c4:	a005883a 	mov	r2,r20
  8071c8:	dfc00617 	ldw	ra,24(sp)
  8071cc:	dd400517 	ldw	r21,20(sp)
  8071d0:	dd000417 	ldw	r20,16(sp)
  8071d4:	dcc00317 	ldw	r19,12(sp)
  8071d8:	dc800217 	ldw	r18,8(sp)
  8071dc:	dc400117 	ldw	r17,4(sp)
  8071e0:	dc000017 	ldw	r16,0(sp)
  8071e4:	dec00704 	addi	sp,sp,28
  8071e8:	f800283a 	ret

008071ec <__localeconv_l>:
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
}
  8071ec:	20803c04 	addi	r2,r4,240
  8071f0:	f800283a 	ret

008071f4 <_localeconv_r>:
{
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
}
  8071f4:	00802074 	movhi	r2,129
  8071f8:	108b5804 	addi	r2,r2,11616
  8071fc:	f800283a 	ret

00807200 <localeconv>:
#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
  return __localeconv_l (__get_current_locale ());
}
  807200:	00802074 	movhi	r2,129
  807204:	108b5804 	addi	r2,r2,11616
  807208:	f800283a 	ret

0080720c <_setlocale_r>:
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
  80720c:	30001626 	beq	r6,zero,807268 <_setlocale_r+0x5c>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807210:	01402074 	movhi	r5,129
{
  807214:	defffe04 	addi	sp,sp,-8
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807218:	2948e904 	addi	r5,r5,9124
  80721c:	3009883a 	mov	r4,r6
{
  807220:	dc000015 	stw	r16,0(sp)
  807224:	dfc00115 	stw	ra,4(sp)
  807228:	3021883a 	mov	r16,r6
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  80722c:	0809a280 	call	809a28 <strcmp>
  807230:	1000061e 	bne	r2,zero,80724c <_setlocale_r+0x40>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
  807234:	00802074 	movhi	r2,129
  807238:	1088e804 	addi	r2,r2,9120
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
  80723c:	dfc00117 	ldw	ra,4(sp)
  807240:	dc000017 	ldw	r16,0(sp)
  807244:	dec00204 	addi	sp,sp,8
  807248:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  80724c:	80800003 	ldbu	r2,0(r16)
  807250:	10bfef44 	addi	r2,r2,-67
  807254:	10000726 	beq	r2,zero,807274 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
  807258:	80800003 	ldbu	r2,0(r16)
  80725c:	103ff526 	beq	r2,zero,807234 <_setlocale_r+0x28>
        return NULL;
  807260:	0005883a 	mov	r2,zero
  807264:	003ff506 	br	80723c <_setlocale_r+0x30>
  return "C";
  807268:	00802074 	movhi	r2,129
  80726c:	1088e804 	addi	r2,r2,9120
}
  807270:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  807274:	80800043 	ldbu	r2,1(r16)
  807278:	103fee26 	beq	r2,zero,807234 <_setlocale_r+0x28>
  80727c:	003ff606 	br	807258 <_setlocale_r+0x4c>

00807280 <__locale_mb_cur_max>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
#endif
}
  807280:	00802074 	movhi	r2,129
  807284:	108b6607 	ldb	r2,11672(r2)
  807288:	f800283a 	ret

0080728c <setlocale>:
  if (locale)
  80728c:	28001626 	beq	r5,zero,8072e8 <setlocale+0x5c>
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
  807290:	defffe04 	addi	sp,sp,-8
  807294:	dc000015 	stw	r16,0(sp)
  807298:	2821883a 	mov	r16,r5
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  80729c:	01402074 	movhi	r5,129
  8072a0:	2948e904 	addi	r5,r5,9124
  8072a4:	8009883a 	mov	r4,r16
{
  8072a8:	dfc00115 	stw	ra,4(sp)
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8072ac:	0809a280 	call	809a28 <strcmp>
  8072b0:	1000061e 	bne	r2,zero,8072cc <setlocale+0x40>
  return "C";
  8072b4:	00802074 	movhi	r2,129
  8072b8:	1088e804 	addi	r2,r2,9120
  return _setlocale_r (_REENT, category, locale);
}
  8072bc:	dfc00117 	ldw	ra,4(sp)
  8072c0:	dc000017 	ldw	r16,0(sp)
  8072c4:	dec00204 	addi	sp,sp,8
  8072c8:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8072cc:	80800003 	ldbu	r2,0(r16)
  8072d0:	10bfef44 	addi	r2,r2,-67
  8072d4:	10000726 	beq	r2,zero,8072f4 <setlocale+0x68>
	  && strcmp (locale, ""))
  8072d8:	80800003 	ldbu	r2,0(r16)
  8072dc:	103ff526 	beq	r2,zero,8072b4 <setlocale+0x28>
        return NULL;
  8072e0:	0005883a 	mov	r2,zero
  8072e4:	003ff506 	br	8072bc <setlocale+0x30>
  return "C";
  8072e8:	00802074 	movhi	r2,129
  8072ec:	1088e804 	addi	r2,r2,9120
}
  8072f0:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8072f4:	80800043 	ldbu	r2,1(r16)
  8072f8:	103fee26 	beq	r2,zero,8072b4 <setlocale+0x28>
  8072fc:	003ff606 	br	8072d8 <setlocale+0x4c>

00807300 <__smakebuf_r>:
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
  807300:	2880030b 	ldhu	r2,12(r5)
{
  807304:	deffe804 	addi	sp,sp,-96
  807308:	dc001215 	stw	r16,72(sp)
  80730c:	dfc01715 	stw	ra,92(sp)
  807310:	dd001615 	stw	r20,88(sp)
  807314:	dcc01515 	stw	r19,84(sp)
  807318:	dc801415 	stw	r18,80(sp)
  80731c:	dc401315 	stw	r17,76(sp)
  if (fp->_flags & __SNBF)
  807320:	10c0008c 	andi	r3,r2,2
{
  807324:	2821883a 	mov	r16,r5
  if (fp->_flags & __SNBF)
  807328:	18000d26 	beq	r3,zero,807360 <__smakebuf_r+0x60>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
  80732c:	288010c4 	addi	r2,r5,67
  807330:	28800015 	stw	r2,0(r5)
  807334:	28800415 	stw	r2,16(r5)
      fp->_bf._size = 1;
  807338:	00800044 	movi	r2,1
  80733c:	28800515 	stw	r2,20(r5)
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
      fp->_flags |= flags;
    }
}
  807340:	dfc01717 	ldw	ra,92(sp)
  807344:	dd001617 	ldw	r20,88(sp)
  807348:	dcc01517 	ldw	r19,84(sp)
  80734c:	dc801417 	ldw	r18,80(sp)
  807350:	dc401317 	ldw	r17,76(sp)
  807354:	dc001217 	ldw	r16,72(sp)
  807358:	dec01804 	addi	sp,sp,96
  80735c:	f800283a 	ret

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  807360:	2940038f 	ldh	r5,14(r5)
  807364:	2023883a 	mov	r17,r4
  807368:	28002816 	blt	r5,zero,80740c <__smakebuf_r+0x10c>
  80736c:	d80d883a 	mov	r6,sp
  807370:	080b6140 	call	80b614 <_fstat_r>
  807374:	10002416 	blt	r2,zero,807408 <__smakebuf_r+0x108>
        *bufsize = BUFSIZ;
      return (0);
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
  807378:	d8800117 	ldw	r2,4(sp)
  80737c:	10bc000c 	andi	r2,r2,61440
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
  807380:	10880018 	cmpnei	r2,r2,8192
  807384:	1000461e 	bne	r2,zero,8074a0 <__smakebuf_r+0x1a0>
  807388:	8140038f 	ldh	r5,14(r16)
  80738c:	8809883a 	mov	r4,r17
  807390:	080b66c0 	call	80b66c <_isatty_r>
  807394:	10003e26 	beq	r2,zero,807490 <__smakebuf_r+0x190>
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  807398:	8080030b 	ldhu	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  80739c:	80c010c4 	addi	r3,r16,67
  8073a0:	80c00015 	stw	r3,0(r16)
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  8073a4:	10800054 	ori	r2,r2,1
  8073a8:	8080030d 	sth	r2,12(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  8073ac:	00800044 	movi	r2,1
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  8073b0:	80c00415 	stw	r3,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  8073b4:	80800515 	stw	r2,20(r16)
  8073b8:	04c00044 	movi	r19,1
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
  8073bc:	05010004 	movi	r20,1024
  return (snpt);
  8073c0:	04820004 	movi	r18,2048
  if ((p = _malloc_r (ptr, size)) == NULL)
  8073c4:	a00b883a 	mov	r5,r20
  8073c8:	8809883a 	mov	r4,r17
  8073cc:	08075480 	call	807548 <_malloc_r>
  8073d0:	10001726 	beq	r2,zero,807430 <__smakebuf_r+0x130>
      fp->_flags |= __SMBF;
  8073d4:	80c0030b 	ldhu	r3,12(r16)
      ptr->__cleanup = _cleanup_r;
  8073d8:	01002034 	movhi	r4,128
  8073dc:	21191104 	addi	r4,r4,25668
  8073e0:	89000f15 	stw	r4,60(r17)
      fp->_flags |= __SMBF;
  8073e4:	18c02014 	ori	r3,r3,128
  8073e8:	80c0030d 	sth	r3,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
  8073ec:	80800015 	stw	r2,0(r16)
  8073f0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
  8073f4:	85000515 	stw	r20,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  8073f8:	98001d1e 	bne	r19,zero,807470 <__smakebuf_r+0x170>
      fp->_flags |= flags;
  8073fc:	90c6b03a 	or	r3,r18,r3
  807400:	80c0030d 	sth	r3,12(r16)
  807404:	003fce06 	br	807340 <__smakebuf_r+0x40>
      if (fp->_flags & __SMBF)
  807408:	8080030b 	ldhu	r2,12(r16)
  80740c:	1080200c 	andi	r2,r2,128
      *couldbetty = 0;
  807410:	0027883a 	mov	r19,zero
      if (fp->_flags & __SMBF)
  807414:	10001326 	beq	r2,zero,807464 <__smakebuf_r+0x164>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807418:	05001004 	movi	r20,64
  if ((p = _malloc_r (ptr, size)) == NULL)
  80741c:	a00b883a 	mov	r5,r20
  807420:	8809883a 	mov	r4,r17
  807424:	0025883a 	mov	r18,zero
  807428:	08075480 	call	807548 <_malloc_r>
  80742c:	103fe91e 	bne	r2,zero,8073d4 <__smakebuf_r+0xd4>
      if (!(fp->_flags & __SSTR))
  807430:	8080030b 	ldhu	r2,12(r16)
  807434:	10c0800c 	andi	r3,r2,512
  807438:	183fc11e 	bne	r3,zero,807340 <__smakebuf_r+0x40>
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  80743c:	00ffff04 	movi	r3,-4
  807440:	10c4703a 	and	r2,r2,r3
  807444:	10800094 	ori	r2,r2,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807448:	80c010c4 	addi	r3,r16,67
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  80744c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._size = 1;
  807450:	00800044 	movi	r2,1
	  fp->_bf._base = fp->_p = fp->_nbuf;
  807454:	80c00015 	stw	r3,0(r16)
  807458:	80c00415 	stw	r3,16(r16)
	  fp->_bf._size = 1;
  80745c:	80800515 	stw	r2,20(r16)
  807460:	003fb706 	br	807340 <__smakebuf_r+0x40>
        *bufsize = BUFSIZ;
  807464:	05010004 	movi	r20,1024
  807468:	0025883a 	mov	r18,zero
  80746c:	003fd506 	br	8073c4 <__smakebuf_r+0xc4>
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807470:	8140038f 	ldh	r5,14(r16)
  807474:	8809883a 	mov	r4,r17
  807478:	080b66c0 	call	80b66c <_isatty_r>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  80747c:	80c0030b 	ldhu	r3,12(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  807480:	103fde26 	beq	r2,zero,8073fc <__smakebuf_r+0xfc>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  807484:	18ffff0c 	andi	r3,r3,65532
  807488:	18c00054 	ori	r3,r3,1
  80748c:	003fdb06 	br	8073fc <__smakebuf_r+0xfc>
  807490:	04c00044 	movi	r19,1
  *bufsize = BUFSIZ;
  807494:	05010004 	movi	r20,1024
  return (snpt);
  807498:	04820004 	movi	r18,2048
  80749c:	003fc906 	br	8073c4 <__smakebuf_r+0xc4>
  8074a0:	0027883a 	mov	r19,zero
  *bufsize = BUFSIZ;
  8074a4:	05010004 	movi	r20,1024
  return (snpt);
  8074a8:	04820004 	movi	r18,2048
  8074ac:	003fc506 	br	8073c4 <__smakebuf_r+0xc4>

008074b0 <__swhatbuf_r>:
{
  8074b0:	deffea04 	addi	sp,sp,-88
  8074b4:	dc001215 	stw	r16,72(sp)
  8074b8:	2821883a 	mov	r16,r5
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  8074bc:	2940038f 	ldh	r5,14(r5)
{
  8074c0:	dc801415 	stw	r18,80(sp)
  8074c4:	dc401315 	stw	r17,76(sp)
  8074c8:	dfc01515 	stw	ra,84(sp)
  8074cc:	3023883a 	mov	r17,r6
  8074d0:	3825883a 	mov	r18,r7
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  8074d4:	28001016 	blt	r5,zero,807518 <__swhatbuf_r+0x68>
  8074d8:	d80d883a 	mov	r6,sp
  8074dc:	080b6140 	call	80b614 <_fstat_r>
  8074e0:	10000d16 	blt	r2,zero,807518 <__swhatbuf_r+0x68>
  *couldbetty = S_ISCHR(st.st_mode);
  8074e4:	d8c00117 	ldw	r3,4(sp)
  return (snpt);
  8074e8:	00820004 	movi	r2,2048
  *couldbetty = S_ISCHR(st.st_mode);
  8074ec:	18fc000c 	andi	r3,r3,61440
  8074f0:	18c80020 	cmpeqi	r3,r3,8192
  8074f4:	90c00015 	stw	r3,0(r18)
  *bufsize = BUFSIZ;
  8074f8:	00c10004 	movi	r3,1024
  8074fc:	88c00015 	stw	r3,0(r17)
}
  807500:	dfc01517 	ldw	ra,84(sp)
  807504:	dc801417 	ldw	r18,80(sp)
  807508:	dc401317 	ldw	r17,76(sp)
  80750c:	dc001217 	ldw	r16,72(sp)
  807510:	dec01604 	addi	sp,sp,88
  807514:	f800283a 	ret
  807518:	8080030b 	ldhu	r2,12(r16)
      *couldbetty = 0;
  80751c:	90000015 	stw	zero,0(r18)
      if (fp->_flags & __SMBF)
  807520:	1080200c 	andi	r2,r2,128
  807524:	10000426 	beq	r2,zero,807538 <__swhatbuf_r+0x88>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  807528:	00801004 	movi	r2,64
  80752c:	88800015 	stw	r2,0(r17)
  807530:	0005883a 	mov	r2,zero
  807534:	003ff206 	br	807500 <__swhatbuf_r+0x50>
        *bufsize = BUFSIZ;
  807538:	00810004 	movi	r2,1024
  80753c:	88800015 	stw	r2,0(r17)
  807540:	0005883a 	mov	r2,zero
  807544:	003fee06 	br	807500 <__swhatbuf_r+0x50>

00807548 <_malloc_r>:
{
  807548:	defff604 	addi	sp,sp,-40
  80754c:	dc400115 	stw	r17,4(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807550:	2c4002c4 	addi	r17,r5,11
{
  807554:	dc800215 	stw	r18,8(sp)
  807558:	dfc00915 	stw	ra,36(sp)
  80755c:	df000815 	stw	fp,32(sp)
  807560:	ddc00715 	stw	r23,28(sp)
  807564:	dd800615 	stw	r22,24(sp)
  807568:	dd400515 	stw	r21,20(sp)
  80756c:	dd000415 	stw	r20,16(sp)
  807570:	dcc00315 	stw	r19,12(sp)
  807574:	dc000015 	stw	r16,0(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807578:	888005e8 	cmpgeui	r2,r17,23
{
  80757c:	2025883a 	mov	r18,r4
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  807580:	10001b1e 	bne	r2,zero,8075f0 <_malloc_r+0xa8>
  if (nb > INT_MAX || nb < bytes)
  807584:	29400468 	cmpgeui	r5,r5,17
  807588:	2800821e 	bne	r5,zero,807794 <_malloc_r+0x24c>
  MALLOC_LOCK;
  80758c:	080fb2c0 	call	80fb2c <__malloc_lock>
  807590:	04400404 	movi	r17,16
  807594:	00800604 	movi	r2,24
  807598:	01c00084 	movi	r7,2
    q = bin_at(idx);
  80759c:	04c02074 	movhi	r19,129
  8075a0:	9ccb7704 	addi	r19,r19,11740
  8075a4:	9885883a 	add	r2,r19,r2
    victim = last(q);
  8075a8:	14000117 	ldw	r16,4(r2)
    q = bin_at(idx);
  8075ac:	10fffe04 	addi	r3,r2,-8
    if (victim == q)
  8075b0:	80c08b26 	beq	r16,r3,8077e0 <_malloc_r+0x298>
      victim_size = chunksize(victim);
  8075b4:	80800117 	ldw	r2,4(r16)
      unlink(victim, bck, fwd);
  8075b8:	81000317 	ldw	r4,12(r16)
      victim_size = chunksize(victim);
  8075bc:	00ffff04 	movi	r3,-4
  8075c0:	10c4703a 	and	r2,r2,r3
        unlink(victim, bck, fwd);
  8075c4:	81400217 	ldw	r5,8(r16)
        set_inuse_bit_at_offset(victim, victim_size);
  8075c8:	8085883a 	add	r2,r16,r2
  8075cc:	10c00117 	ldw	r3,4(r2)
        unlink(victim, bck, fwd);
  8075d0:	29000315 	stw	r4,12(r5)
  8075d4:	21400215 	stw	r5,8(r4)
        set_inuse_bit_at_offset(victim, victim_size);
  8075d8:	18c00054 	ori	r3,r3,1
  8075dc:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
  8075e0:	9009883a 	mov	r4,r18
  8075e4:	080fb500 	call	80fb50 <__malloc_unlock>
        return chunk2mem(victim);
  8075e8:	80800204 	addi	r2,r16,8
  8075ec:	00006c06 	br	8077a0 <_malloc_r+0x258>
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  8075f0:	00bffe04 	movi	r2,-8
  8075f4:	88a2703a 	and	r17,r17,r2
  if (nb > INT_MAX || nb < bytes)
  8075f8:	88006616 	blt	r17,zero,807794 <_malloc_r+0x24c>
  8075fc:	89406536 	bltu	r17,r5,807794 <_malloc_r+0x24c>
  MALLOC_LOCK;
  807600:	080fb2c0 	call	80fb2c <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
  807604:	88807e28 	cmpgeui	r2,r17,504
  807608:	10011b26 	beq	r2,zero,807a78 <_malloc_r+0x530>
    idx = bin_index(nb);
  80760c:	8804d27a 	srli	r2,r17,9
  807610:	10006f26 	beq	r2,zero,8077d0 <_malloc_r+0x288>
  807614:	10c00168 	cmpgeui	r3,r2,5
  807618:	1800f71e 	bne	r3,zero,8079f8 <_malloc_r+0x4b0>
  80761c:	8804d1ba 	srli	r2,r17,6
    bin = bin_at(idx);
  807620:	11c00e44 	addi	r7,r2,57
  807624:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807628:	12000e04 	addi	r8,r2,56
    bin = bin_at(idx);
  80762c:	04c02074 	movhi	r19,129
  807630:	9ccb7704 	addi	r19,r19,11740
  807634:	9909883a 	add	r4,r19,r4
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807638:	24000117 	ldw	r16,4(r4)
    bin = bin_at(idx);
  80763c:	213ffe04 	addi	r4,r4,-8
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807640:	24000b26 	beq	r4,r16,807670 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807644:	01bfff04 	movi	r6,-4
  807648:	00000306 	br	807658 <_malloc_r+0x110>
      else if (remainder_size >= 0) /* exact fit */
  80764c:	1800cf0e 	bge	r3,zero,80798c <_malloc_r+0x444>
    for (victim = last(bin); victim != bin; victim = victim->bk)
  807650:	84000317 	ldw	r16,12(r16)
  807654:	24000626 	beq	r4,r16,807670 <_malloc_r+0x128>
      victim_size = chunksize(victim);
  807658:	80800117 	ldw	r2,4(r16)
  80765c:	1184703a 	and	r2,r2,r6
      remainder_size = long_sub_size_t(victim_size, nb);
  807660:	1447c83a 	sub	r3,r2,r17
      if (remainder_size >= (long)MINSIZE) /* too big */
  807664:	19400408 	cmpgei	r5,r3,16
  807668:	283ff826 	beq	r5,zero,80764c <_malloc_r+0x104>
  80766c:	400f883a 	mov	r7,r8
  if ( (victim = last_remainder->fd) != last_remainder)
  807670:	9c000417 	ldw	r16,16(r19)
  807674:	02402074 	movhi	r9,129
  807678:	4a4b7904 	addi	r9,r9,11748
  80767c:	82405f26 	beq	r16,r9,8077fc <_malloc_r+0x2b4>
    victim_size = chunksize(victim);
  807680:	80c00117 	ldw	r3,4(r16)
  807684:	00bfff04 	movi	r2,-4
  807688:	1884703a 	and	r2,r3,r2
    remainder_size = long_sub_size_t(victim_size, nb);
  80768c:	1447c83a 	sub	r3,r2,r17
    if (remainder_size >= (long)MINSIZE) /* re-split */
  807690:	19000410 	cmplti	r4,r3,16
  807694:	20010326 	beq	r4,zero,807aa4 <_malloc_r+0x55c>
    clear_last_remainder;
  807698:	9a400515 	stw	r9,20(r19)
  80769c:	9a400415 	stw	r9,16(r19)
    if (remainder_size >= 0)  /* exhaust */
  8076a0:	1800f80e 	bge	r3,zero,807a84 <_malloc_r+0x53c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8076a4:	10c08028 	cmpgeui	r3,r2,512
  8076a8:	1800ba1e 	bne	r3,zero,807994 <_malloc_r+0x44c>
  8076ac:	1006d0fa 	srli	r3,r2,3
  8076b0:	1008d17a 	srli	r4,r2,5
  8076b4:	00800044 	movi	r2,1
  8076b8:	18c00044 	addi	r3,r3,1
  8076bc:	180690fa 	slli	r3,r3,3
  8076c0:	99400117 	ldw	r5,4(r19)
  8076c4:	1104983a 	sll	r2,r2,r4
  8076c8:	98c7883a 	add	r3,r19,r3
  8076cc:	19000017 	ldw	r4,0(r3)
  8076d0:	1144b03a 	or	r2,r2,r5
  8076d4:	197ffe04 	addi	r5,r3,-8
  8076d8:	81400315 	stw	r5,12(r16)
  8076dc:	81000215 	stw	r4,8(r16)
  8076e0:	98800115 	stw	r2,4(r19)
  8076e4:	1c000015 	stw	r16,0(r3)
  8076e8:	24000315 	stw	r16,12(r4)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8076ec:	3807d0ba 	srai	r3,r7,2
  8076f0:	01000044 	movi	r4,1
  8076f4:	20c8983a 	sll	r4,r4,r3
  8076f8:	11004536 	bltu	r2,r4,807810 <_malloc_r+0x2c8>
    if ( (block & binblocks) == 0) 
  8076fc:	2086703a 	and	r3,r4,r2
  807700:	18000a1e 	bne	r3,zero,80772c <_malloc_r+0x1e4>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  807704:	00ffff04 	movi	r3,-4
      block <<= 1;
  807708:	2109883a 	add	r4,r4,r4
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  80770c:	38ce703a 	and	r7,r7,r3
      while ((block & binblocks) == 0)
  807710:	2086703a 	and	r3,r4,r2
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  807714:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  807718:	1800041e 	bne	r3,zero,80772c <_malloc_r+0x1e4>
        block <<= 1;
  80771c:	2109883a 	add	r4,r4,r4
      while ((block & binblocks) == 0)
  807720:	2086703a 	and	r3,r4,r2
        idx += BINBLOCKWIDTH;
  807724:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  807728:	183ffc26 	beq	r3,zero,80771c <_malloc_r+0x1d4>
          victim_size = chunksize(victim);
  80772c:	02bfff04 	movi	r10,-4
      q = bin = bin_at(idx);
  807730:	381690fa 	slli	r11,r7,3
  807734:	3819883a 	mov	r12,r7
  807738:	9ad7883a 	add	r11,r19,r11
  80773c:	5811883a 	mov	r8,r11
        for (victim = last(bin); victim != bin; victim = victim->bk)
  807740:	40800317 	ldw	r2,12(r8)
  807744:	4080b526 	beq	r8,r2,807a1c <_malloc_r+0x4d4>
          victim_size = chunksize(victim);
  807748:	10c00117 	ldw	r3,4(r2)
  80774c:	1021883a 	mov	r16,r2
            unlink(victim, bck, fwd);
  807750:	10800317 	ldw	r2,12(r2)
          victim_size = chunksize(victim);
  807754:	1a86703a 	and	r3,r3,r10
          remainder_size = long_sub_size_t(victim_size, nb);
  807758:	1c4bc83a 	sub	r5,r3,r17
          if (remainder_size >= (long)MINSIZE) /* split */
  80775c:	29800410 	cmplti	r6,r5,16
  807760:	3000b326 	beq	r6,zero,807a30 <_malloc_r+0x4e8>
          else if (remainder_size >= 0)  /* take */
  807764:	283ff716 	blt	r5,zero,807744 <_malloc_r+0x1fc>
            set_inuse_bit_at_offset(victim, victim_size);
  807768:	80c7883a 	add	r3,r16,r3
  80776c:	19400117 	ldw	r5,4(r3)
            unlink(victim, bck, fwd);
  807770:	81800217 	ldw	r6,8(r16)
	    MALLOC_UNLOCK;
  807774:	9009883a 	mov	r4,r18
            set_inuse_bit_at_offset(victim, victim_size);
  807778:	29400054 	ori	r5,r5,1
  80777c:	19400115 	stw	r5,4(r3)
            unlink(victim, bck, fwd);
  807780:	30800315 	stw	r2,12(r6)
  807784:	11800215 	stw	r6,8(r2)
	    MALLOC_UNLOCK;
  807788:	080fb500 	call	80fb50 <__malloc_unlock>
            return chunk2mem(victim);
  80778c:	80800204 	addi	r2,r16,8
  807790:	00000306 	br	8077a0 <_malloc_r+0x258>
    RERRNO = ENOMEM;
  807794:	00800304 	movi	r2,12
  807798:	90800015 	stw	r2,0(r18)
    return 0;
  80779c:	0005883a 	mov	r2,zero
}
  8077a0:	dfc00917 	ldw	ra,36(sp)
  8077a4:	df000817 	ldw	fp,32(sp)
  8077a8:	ddc00717 	ldw	r23,28(sp)
  8077ac:	dd800617 	ldw	r22,24(sp)
  8077b0:	dd400517 	ldw	r21,20(sp)
  8077b4:	dd000417 	ldw	r20,16(sp)
  8077b8:	dcc00317 	ldw	r19,12(sp)
  8077bc:	dc800217 	ldw	r18,8(sp)
  8077c0:	dc400117 	ldw	r17,4(sp)
  8077c4:	dc000017 	ldw	r16,0(sp)
  8077c8:	dec00a04 	addi	sp,sp,40
  8077cc:	f800283a 	ret
  8077d0:	01008004 	movi	r4,512
  8077d4:	01c01004 	movi	r7,64
    idx = bin_index(nb);
  8077d8:	02000fc4 	movi	r8,63
  8077dc:	003f9306 	br	80762c <_malloc_r+0xe4>
      victim = last(q);
  8077e0:	14000317 	ldw	r16,12(r2)
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
  8077e4:	39c00084 	addi	r7,r7,2
    if (victim != q)
  8077e8:	143f721e 	bne	r2,r16,8075b4 <_malloc_r+0x6c>
  if ( (victim = last_remainder->fd) != last_remainder)
  8077ec:	9c000417 	ldw	r16,16(r19)
  8077f0:	02402074 	movhi	r9,129
  8077f4:	4a4b7904 	addi	r9,r9,11748
  8077f8:	827fa11e 	bne	r16,r9,807680 <_malloc_r+0x138>
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8077fc:	3807d0ba 	srai	r3,r7,2
  807800:	01000044 	movi	r4,1
  807804:	98800117 	ldw	r2,4(r19)
  807808:	20c8983a 	sll	r4,r4,r3
  80780c:	113fbb2e 	bgeu	r2,r4,8076fc <_malloc_r+0x1b4>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  807810:	9c000217 	ldw	r16,8(r19)
  807814:	00bfff04 	movi	r2,-4
  807818:	85400117 	ldw	r21,4(r16)
  80781c:	a8ac703a 	and	r22,r21,r2
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  807820:	b4400336 	bltu	r22,r17,807830 <_malloc_r+0x2e8>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  807824:	b445c83a 	sub	r2,r22,r17
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  807828:	10c00408 	cmpgei	r3,r2,16
  80782c:	18004d1e 	bne	r3,zero,807964 <_malloc_r+0x41c>
  if (sbrk_base != (char*)(-1))
  807830:	d0a00a17 	ldw	r2,-32728(gp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807834:	d5671717 	ldw	r21,-25508(gp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
  807838:	85b9883a 	add	fp,r16,r22
  if (sbrk_base != (char*)(-1))
  80783c:	10bfffd8 	cmpnei	r2,r2,-1
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807840:	8d6b883a 	add	r21,r17,r21
  if (sbrk_base != (char*)(-1))
  807844:	1000d126 	beq	r2,zero,807b8c <_malloc_r+0x644>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
  807848:	ad4403c4 	addi	r21,r21,4111
  80784c:	00bc0004 	movi	r2,-4096
  807850:	a8aa703a 	and	r21,r21,r2
  brk = (char*)(MORECORE (sbrk_size));
  807854:	a80b883a 	mov	r5,r21
  807858:	9009883a 	mov	r4,r18
  80785c:	08098980 	call	809898 <_sbrk_r>
  807860:	102f883a 	mov	r23,r2
  if (brk == (char*)(MORECORE_FAILURE) || 
  807864:	10bfffd8 	cmpnei	r2,r2,-1
  807868:	1000a326 	beq	r2,zero,807af8 <_malloc_r+0x5b0>
  80786c:	bf00a136 	bltu	r23,fp,807af4 <_malloc_r+0x5ac>
  sbrked_mem += sbrk_size;
  807870:	00802074 	movhi	r2,129
  807874:	15181b17 	ldw	r20,24684(r2)
  807878:	ad29883a 	add	r20,r21,r20
  80787c:	15181b15 	stw	r20,24684(r2)
  807880:	a007883a 	mov	r3,r20
  if (brk == old_end /* can just add bytes to current top, unless
  807884:	e5c0e726 	beq	fp,r23,807c24 <_malloc_r+0x6dc>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
  807888:	d0a00a17 	ldw	r2,-32728(gp)
  80788c:	10bfffd8 	cmpnei	r2,r2,-1
  807890:	1000eb26 	beq	r2,zero,807c40 <_malloc_r+0x6f8>
      sbrked_mem += brk - (char*)old_end;
  807894:	bf39c83a 	sub	fp,r23,fp
  807898:	e0c7883a 	add	r3,fp,r3
  80789c:	00802074 	movhi	r2,129
  8078a0:	10d81b15 	stw	r3,24684(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
  8078a4:	bf0001cc 	andi	fp,r23,7
    if (front_misalign > 0) 
  8078a8:	e000c126 	beq	fp,zero,807bb0 <_malloc_r+0x668>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
  8078ac:	bf2fc83a 	sub	r23,r23,fp
      brk += correction;
  8078b0:	bdc00204 	addi	r23,r23,8
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  8078b4:	05040204 	movi	r20,4104
  8078b8:	a729c83a 	sub	r20,r20,fp
  8078bc:	bd6b883a 	add	r21,r23,r21
    correction &= (pagesz - 1);
  8078c0:	a569c83a 	sub	r20,r20,r21
  8078c4:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  8078c8:	a00b883a 	mov	r5,r20
  8078cc:	9009883a 	mov	r4,r18
  8078d0:	08098980 	call	809898 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  8078d4:	10ffffe0 	cmpeqi	r3,r2,-1
  8078d8:	1800ee1e 	bne	r3,zero,807c94 <_malloc_r+0x74c>
    top_size = new_brk - brk + correction;
  8078dc:	15c5c83a 	sub	r2,r2,r23
  8078e0:	152b883a 	add	r21,r2,r20
    sbrked_mem += correction;
  8078e4:	00802074 	movhi	r2,129
  8078e8:	11581b17 	ldw	r5,24684(r2)
    top = (mchunkptr)brk;
  8078ec:	9dc00215 	stw	r23,8(r19)
    set_head(top, top_size | PREV_INUSE);
  8078f0:	ad400054 	ori	r21,r21,1
    sbrked_mem += correction;
  8078f4:	a169883a 	add	r20,r20,r5
  8078f8:	15181b15 	stw	r20,24684(r2)
    set_head(top, top_size | PREV_INUSE);
  8078fc:	bd400115 	stw	r21,4(r23)
    if (old_top != initial_top)
  807900:	84c0d126 	beq	r16,r19,807c48 <_malloc_r+0x700>
      if (old_top_size < MINSIZE) 
  807904:	b0800428 	cmpgeui	r2,r22,16
  807908:	1000d126 	beq	r2,zero,807c50 <_malloc_r+0x708>
      set_head_size(old_top, old_top_size);
  80790c:	80c00117 	ldw	r3,4(r16)
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
  807910:	013ffe04 	movi	r4,-8
  807914:	b0bffd04 	addi	r2,r22,-12
  807918:	1104703a 	and	r2,r2,r4
      set_head_size(old_top, old_top_size);
  80791c:	18c0004c 	andi	r3,r3,1
  807920:	1886b03a 	or	r3,r3,r2
  807924:	80c00115 	stw	r3,4(r16)
      chunk_at_offset(old_top, old_top_size          )->size =
  807928:	01000144 	movi	r4,5
  80792c:	8087883a 	add	r3,r16,r2
  807930:	19000115 	stw	r4,4(r3)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
  807934:	19000215 	stw	r4,8(r3)
      if (old_top_size >= MINSIZE) 
  807938:	10800428 	cmpgeui	r2,r2,16
  80793c:	1000da1e 	bne	r2,zero,807ca8 <_malloc_r+0x760>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807940:	bd400117 	ldw	r21,4(r23)
  807944:	b821883a 	mov	r16,r23
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  807948:	d0a71617 	ldw	r2,-25512(gp)
  80794c:	1500012e 	bgeu	r2,r20,807954 <_malloc_r+0x40c>
    max_sbrked_mem = sbrked_mem;
  807950:	d5271615 	stw	r20,-25512(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
  807954:	d0a71517 	ldw	r2,-25516(gp)
  807958:	1500692e 	bgeu	r2,r20,807b00 <_malloc_r+0x5b8>
    max_total_mem = sbrked_mem;
  80795c:	d5271515 	stw	r20,-25516(gp)
  807960:	00006706 	br	807b00 <_malloc_r+0x5b8>
  set_head(victim, nb | PREV_INUSE);
  807964:	88c00054 	ori	r3,r17,1
  807968:	80c00115 	stw	r3,4(r16)
  top = chunk_at_offset(victim, nb);
  80796c:	8463883a 	add	r17,r16,r17
  set_head(top, remainder_size | PREV_INUSE);
  807970:	10800054 	ori	r2,r2,1
  top = chunk_at_offset(victim, nb);
  807974:	9c400215 	stw	r17,8(r19)
  set_head(top, remainder_size | PREV_INUSE);
  807978:	88800115 	stw	r2,4(r17)
  MALLOC_UNLOCK;
  80797c:	9009883a 	mov	r4,r18
  807980:	080fb500 	call	80fb50 <__malloc_unlock>
  return chunk2mem(victim);
  807984:	80800204 	addi	r2,r16,8
  807988:	003f8506 	br	8077a0 <_malloc_r+0x258>
        unlink(victim, bck, fwd);
  80798c:	81000317 	ldw	r4,12(r16)
  807990:	003f0c06 	br	8075c4 <_malloc_r+0x7c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807994:	1006d27a 	srli	r3,r2,9
  807998:	19000168 	cmpgeui	r4,r3,5
  80799c:	20005026 	beq	r4,zero,807ae0 <_malloc_r+0x598>
  8079a0:	19000568 	cmpgeui	r4,r3,21
  8079a4:	20008c1e 	bne	r4,zero,807bd8 <_malloc_r+0x690>
  8079a8:	19401704 	addi	r5,r3,92
  8079ac:	280a90fa 	slli	r5,r5,3
  8079b0:	190016c4 	addi	r4,r3,91
  8079b4:	994b883a 	add	r5,r19,r5
  8079b8:	28c00017 	ldw	r3,0(r5)
  8079bc:	297ffe04 	addi	r5,r5,-8
  8079c0:	28c07426 	beq	r5,r3,807b94 <_malloc_r+0x64c>
  8079c4:	01bfff04 	movi	r6,-4
  8079c8:	19000117 	ldw	r4,4(r3)
  8079cc:	2188703a 	and	r4,r4,r6
  8079d0:	1100022e 	bgeu	r2,r4,8079dc <_malloc_r+0x494>
  8079d4:	18c00217 	ldw	r3,8(r3)
  8079d8:	28fffb1e 	bne	r5,r3,8079c8 <_malloc_r+0x480>
  8079dc:	19400317 	ldw	r5,12(r3)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  8079e0:	98800117 	ldw	r2,4(r19)
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8079e4:	81400315 	stw	r5,12(r16)
  8079e8:	80c00215 	stw	r3,8(r16)
  8079ec:	2c000215 	stw	r16,8(r5)
  8079f0:	1c000315 	stw	r16,12(r3)
  8079f4:	003f3d06 	br	8076ec <_malloc_r+0x1a4>
    idx = bin_index(nb);
  8079f8:	10c00568 	cmpgeui	r3,r2,21
  8079fc:	18004a26 	beq	r3,zero,807b28 <_malloc_r+0x5e0>
  807a00:	10c01568 	cmpgeui	r3,r2,85
  807a04:	18007b1e 	bne	r3,zero,807bf4 <_malloc_r+0x6ac>
  807a08:	8804d33a 	srli	r2,r17,12
    bin = bin_at(idx);
  807a0c:	11c01bc4 	addi	r7,r2,111
  807a10:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807a14:	12001b84 	addi	r8,r2,110
  807a18:	003f0406 	br	80762c <_malloc_r+0xe4>
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  807a1c:	63000044 	addi	r12,r12,1
  807a20:	608000cc 	andi	r2,r12,3
       bin = next_bin(bin);
  807a24:	42000204 	addi	r8,r8,8
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  807a28:	103f451e 	bne	r2,zero,807740 <_malloc_r+0x1f8>
  807a2c:	00004506 	br	807b44 <_malloc_r+0x5fc>
            unlink(victim, bck, fwd);
  807a30:	81000217 	ldw	r4,8(r16)
            set_head(victim, nb | PREV_INUSE);
  807a34:	89800054 	ori	r6,r17,1
  807a38:	81800115 	stw	r6,4(r16)
            unlink(victim, bck, fwd);
  807a3c:	20800315 	stw	r2,12(r4)
  807a40:	11000215 	stw	r4,8(r2)
            remainder = chunk_at_offset(victim, nb);
  807a44:	8463883a 	add	r17,r16,r17
            link_last_remainder(remainder);
  807a48:	9c400515 	stw	r17,20(r19)
  807a4c:	9c400415 	stw	r17,16(r19)
            set_head(remainder, remainder_size | PREV_INUSE);
  807a50:	28800054 	ori	r2,r5,1
  807a54:	88800115 	stw	r2,4(r17)
            link_last_remainder(remainder);
  807a58:	8a400315 	stw	r9,12(r17)
  807a5c:	8a400215 	stw	r9,8(r17)
            set_foot(remainder, remainder_size);
  807a60:	80c7883a 	add	r3,r16,r3
  807a64:	19400015 	stw	r5,0(r3)
	    MALLOC_UNLOCK;
  807a68:	9009883a 	mov	r4,r18
  807a6c:	080fb500 	call	80fb50 <__malloc_unlock>
            return chunk2mem(victim);
  807a70:	80800204 	addi	r2,r16,8
  807a74:	003f4a06 	br	8077a0 <_malloc_r+0x258>
    q = bin_at(idx);
  807a78:	880ed0fa 	srli	r7,r17,3
  807a7c:	88800204 	addi	r2,r17,8
  807a80:	003ec606 	br	80759c <_malloc_r+0x54>
      set_inuse_bit_at_offset(victim, victim_size);
  807a84:	8085883a 	add	r2,r16,r2
  807a88:	10c00117 	ldw	r3,4(r2)
      MALLOC_UNLOCK;
  807a8c:	9009883a 	mov	r4,r18
      set_inuse_bit_at_offset(victim, victim_size);
  807a90:	18c00054 	ori	r3,r3,1
  807a94:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
  807a98:	080fb500 	call	80fb50 <__malloc_unlock>
      return chunk2mem(victim);
  807a9c:	80800204 	addi	r2,r16,8
  807aa0:	003f3f06 	br	8077a0 <_malloc_r+0x258>
      set_head(victim, nb | PREV_INUSE);
  807aa4:	89000054 	ori	r4,r17,1
  807aa8:	81000115 	stw	r4,4(r16)
      remainder = chunk_at_offset(victim, nb);
  807aac:	8463883a 	add	r17,r16,r17
      link_last_remainder(remainder);
  807ab0:	9c400515 	stw	r17,20(r19)
  807ab4:	9c400415 	stw	r17,16(r19)
      set_head(remainder, remainder_size | PREV_INUSE);
  807ab8:	19000054 	ori	r4,r3,1
  807abc:	89000115 	stw	r4,4(r17)
      set_foot(remainder, remainder_size);
  807ac0:	8085883a 	add	r2,r16,r2
      link_last_remainder(remainder);
  807ac4:	8a400315 	stw	r9,12(r17)
  807ac8:	8a400215 	stw	r9,8(r17)
      set_foot(remainder, remainder_size);
  807acc:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
  807ad0:	9009883a 	mov	r4,r18
  807ad4:	080fb500 	call	80fb50 <__malloc_unlock>
      return chunk2mem(victim);
  807ad8:	80800204 	addi	r2,r16,8
  807adc:	003f3006 	br	8077a0 <_malloc_r+0x258>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807ae0:	1006d1ba 	srli	r3,r2,6
  807ae4:	19400e44 	addi	r5,r3,57
  807ae8:	280a90fa 	slli	r5,r5,3
  807aec:	19000e04 	addi	r4,r3,56
  807af0:	003fb006 	br	8079b4 <_malloc_r+0x46c>
      (brk < old_end && old_top != initial_top))
  807af4:	84c04626 	beq	r16,r19,807c10 <_malloc_r+0x6c8>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807af8:	9c000217 	ldw	r16,8(r19)
  807afc:	85400117 	ldw	r21,4(r16)
  807b00:	00bfff04 	movi	r2,-4
  807b04:	a8aa703a 	and	r21,r21,r2
  807b08:	ac45c83a 	sub	r2,r21,r17
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  807b0c:	ac400236 	bltu	r21,r17,807b18 <_malloc_r+0x5d0>
  807b10:	10c00408 	cmpgei	r3,r2,16
  807b14:	183f931e 	bne	r3,zero,807964 <_malloc_r+0x41c>
      MALLOC_UNLOCK;
  807b18:	9009883a 	mov	r4,r18
  807b1c:	080fb500 	call	80fb50 <__malloc_unlock>
      return 0; /* propagate failure */
  807b20:	0005883a 	mov	r2,zero
  807b24:	003f1e06 	br	8077a0 <_malloc_r+0x258>
    bin = bin_at(idx);
  807b28:	11c01704 	addi	r7,r2,92
  807b2c:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807b30:	120016c4 	addi	r8,r2,91
  807b34:	003ebd06 	br	80762c <_malloc_r+0xe4>
      } while (first(q) == q);
  807b38:	58800217 	ldw	r2,8(r11)
        --startidx;
  807b3c:	39ffffc4 	addi	r7,r7,-1
      } while (first(q) == q);
  807b40:	12c06f1e 	bne	r2,r11,807d00 <_malloc_r+0x7b8>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  807b44:	388000cc 	andi	r2,r7,3
       q = prev_bin(q);
  807b48:	5afffe04 	addi	r11,r11,-8
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  807b4c:	103ffa1e 	bne	r2,zero,807b38 <_malloc_r+0x5f0>
          binblocks &= ~block;
  807b50:	98c00117 	ldw	r3,4(r19)
  807b54:	0104303a 	nor	r2,zero,r4
  807b58:	10c4703a 	and	r2,r2,r3
  807b5c:	98800115 	stw	r2,4(r19)
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  807b60:	2109883a 	add	r4,r4,r4
  807b64:	113f2a36 	bltu	r2,r4,807810 <_malloc_r+0x2c8>
  807b68:	203f2926 	beq	r4,zero,807810 <_malloc_r+0x2c8>
        while ((block & binblocks) == 0)
  807b6c:	2086703a 	and	r3,r4,r2
  807b70:	1800041e 	bne	r3,zero,807b84 <_malloc_r+0x63c>
          block <<= 1;
  807b74:	2109883a 	add	r4,r4,r4
        while ((block & binblocks) == 0)
  807b78:	2086703a 	and	r3,r4,r2
          idx += BINBLOCKWIDTH;
  807b7c:	63000104 	addi	r12,r12,4
        while ((block & binblocks) == 0)
  807b80:	183ffc26 	beq	r3,zero,807b74 <_malloc_r+0x62c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807b84:	600f883a 	mov	r7,r12
  807b88:	003ee906 	br	807730 <_malloc_r+0x1e8>
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  807b8c:	ad400404 	addi	r21,r21,16
  807b90:	003f3006 	br	807854 <_malloc_r+0x30c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807b94:	2009d0ba 	srai	r4,r4,2
  807b98:	00800044 	movi	r2,1
  807b9c:	99800117 	ldw	r6,4(r19)
  807ba0:	1104983a 	sll	r2,r2,r4
  807ba4:	1184b03a 	or	r2,r2,r6
  807ba8:	98800115 	stw	r2,4(r19)
  807bac:	003f8d06 	br	8079e4 <_malloc_r+0x49c>
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  807bb0:	bd69883a 	add	r20,r23,r21
  807bb4:	0529c83a 	sub	r20,zero,r20
  807bb8:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  807bbc:	a00b883a 	mov	r5,r20
  807bc0:	9009883a 	mov	r4,r18
  807bc4:	08098980 	call	809898 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  807bc8:	10ffffe0 	cmpeqi	r3,r2,-1
  807bcc:	183f4326 	beq	r3,zero,8078dc <_malloc_r+0x394>
	correction = 0;
  807bd0:	0029883a 	mov	r20,zero
  807bd4:	003f4306 	br	8078e4 <_malloc_r+0x39c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807bd8:	19001568 	cmpgeui	r4,r3,85
  807bdc:	20001f1e 	bne	r4,zero,807c5c <_malloc_r+0x714>
  807be0:	1006d33a 	srli	r3,r2,12
  807be4:	19401bc4 	addi	r5,r3,111
  807be8:	280a90fa 	slli	r5,r5,3
  807bec:	19001b84 	addi	r4,r3,110
  807bf0:	003f7006 	br	8079b4 <_malloc_r+0x46c>
    idx = bin_index(nb);
  807bf4:	10c05568 	cmpgeui	r3,r2,341
  807bf8:	18001f1e 	bne	r3,zero,807c78 <_malloc_r+0x730>
  807bfc:	8804d3fa 	srli	r2,r17,15
    bin = bin_at(idx);
  807c00:	11c01e04 	addi	r7,r2,120
  807c04:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807c08:	12001dc4 	addi	r8,r2,119
  807c0c:	003e8706 	br	80762c <_malloc_r+0xe4>
  sbrked_mem += sbrk_size;
  807c10:	00802074 	movhi	r2,129
  807c14:	10d81b17 	ldw	r3,24684(r2)
  807c18:	a8c7883a 	add	r3,r21,r3
  807c1c:	10d81b15 	stw	r3,24684(r2)
  if (brk == old_end /* can just add bytes to current top, unless
  807c20:	003f1906 	br	807888 <_malloc_r+0x340>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  807c24:	e083ffcc 	andi	r2,fp,4095
  807c28:	103f171e 	bne	r2,zero,807888 <_malloc_r+0x340>
    set_head(top, top_size | PREV_INUSE);
  807c2c:	9c000217 	ldw	r16,8(r19)
    top_size = sbrk_size + old_top_size;
  807c30:	b56b883a 	add	r21,r22,r21
    set_head(top, top_size | PREV_INUSE);
  807c34:	ad400054 	ori	r21,r21,1
  807c38:	85400115 	stw	r21,4(r16)
  807c3c:	003f4206 	br	807948 <_malloc_r+0x400>
      sbrk_base = brk;
  807c40:	d5e00a15 	stw	r23,-32728(gp)
  807c44:	003f1706 	br	8078a4 <_malloc_r+0x35c>
  807c48:	b821883a 	mov	r16,r23
  807c4c:	003f3e06 	br	807948 <_malloc_r+0x400>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
  807c50:	00800044 	movi	r2,1
  807c54:	b8800115 	stw	r2,4(r23)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  807c58:	003faf06 	br	807b18 <_malloc_r+0x5d0>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807c5c:	19005568 	cmpgeui	r4,r3,341
  807c60:	2000191e 	bne	r4,zero,807cc8 <_malloc_r+0x780>
  807c64:	1006d3fa 	srli	r3,r2,15
  807c68:	19401e04 	addi	r5,r3,120
  807c6c:	280a90fa 	slli	r5,r5,3
  807c70:	19001dc4 	addi	r4,r3,119
  807c74:	003f4f06 	br	8079b4 <_malloc_r+0x46c>
    idx = bin_index(nb);
  807c78:	10815568 	cmpgeui	r2,r2,1365
  807c7c:	1000191e 	bne	r2,zero,807ce4 <_malloc_r+0x79c>
  807c80:	8804d4ba 	srli	r2,r17,18
    bin = bin_at(idx);
  807c84:	11c01f44 	addi	r7,r2,125
  807c88:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  807c8c:	12001f04 	addi	r8,r2,124
  807c90:	003e6606 	br	80762c <_malloc_r+0xe4>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
  807c94:	e73ffe04 	addi	fp,fp,-8
  807c98:	af2b883a 	add	r21,r21,fp
    top_size = new_brk - brk + correction;
  807c9c:	adebc83a 	sub	r21,r21,r23
	correction = 0;
  807ca0:	0029883a 	mov	r20,zero
  807ca4:	003f0f06 	br	8078e4 <_malloc_r+0x39c>
        fREe(RCALL chunk2mem(old_top));
  807ca8:	81400204 	addi	r5,r16,8
  807cac:	9009883a 	mov	r4,r18
  807cb0:	08068f00 	call	8068f0 <_free_r>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807cb4:	9c000217 	ldw	r16,8(r19)
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  807cb8:	00802074 	movhi	r2,129
  807cbc:	15181b17 	ldw	r20,24684(r2)
    remainder_size = long_sub_size_t(chunksize(top), nb);
  807cc0:	85400117 	ldw	r21,4(r16)
  807cc4:	003f2006 	br	807948 <_malloc_r+0x400>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807cc8:	18c15568 	cmpgeui	r3,r3,1365
  807ccc:	1800091e 	bne	r3,zero,807cf4 <_malloc_r+0x7ac>
  807cd0:	1006d4ba 	srli	r3,r2,18
  807cd4:	19401f44 	addi	r5,r3,125
  807cd8:	280a90fa 	slli	r5,r5,3
  807cdc:	19001f04 	addi	r4,r3,124
  807ce0:	003f3406 	br	8079b4 <_malloc_r+0x46c>
  807ce4:	0100fe04 	movi	r4,1016
  807ce8:	01c01fc4 	movi	r7,127
    idx = bin_index(nb);
  807cec:	02001f84 	movi	r8,126
  807cf0:	003e4e06 	br	80762c <_malloc_r+0xe4>
  807cf4:	0140fe04 	movi	r5,1016
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  807cf8:	01001f84 	movi	r4,126
  807cfc:	003f2d06 	br	8079b4 <_malloc_r+0x46c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  807d00:	98800117 	ldw	r2,4(r19)
  807d04:	003f9606 	br	807b60 <_malloc_r+0x618>

00807d08 <_mbtowc_r>:
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
  return __MBTOWC (r, pwc, s, n, state);
  807d08:	00802074 	movhi	r2,129
  807d0c:	108b5517 	ldw	r2,11604(r2)
  807d10:	1000683a 	jmp	r2

00807d14 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
  807d14:	deffff04 	addi	sp,sp,-4
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;

  if (pwc == NULL)
  807d18:	28000826 	beq	r5,zero,807d3c <__ascii_mbtowc+0x28>
    pwc = &dummy;

  if (s == NULL)
  807d1c:	30000926 	beq	r6,zero,807d44 <__ascii_mbtowc+0x30>
    return 0;

  if (n == 0)
  807d20:	38000b26 	beq	r7,zero,807d50 <__ascii_mbtowc+0x3c>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
  807d24:	30800003 	ldbu	r2,0(r6)
  807d28:	28800015 	stw	r2,0(r5)
  
  if (*t == '\0')
  807d2c:	30800003 	ldbu	r2,0(r6)
  807d30:	1004c03a 	cmpne	r2,r2,zero
    return 0;

  return 1;
}
  807d34:	dec00104 	addi	sp,sp,4
  807d38:	f800283a 	ret
    pwc = &dummy;
  807d3c:	d80b883a 	mov	r5,sp
  if (s == NULL)
  807d40:	303ff71e 	bne	r6,zero,807d20 <__ascii_mbtowc+0xc>
    return 0;
  807d44:	0005883a 	mov	r2,zero
}
  807d48:	dec00104 	addi	sp,sp,4
  807d4c:	f800283a 	ret
    return -2;
  807d50:	00bfff84 	movi	r2,-2
  807d54:	003ff706 	br	807d34 <__ascii_mbtowc+0x20>

00807d58 <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
  807d58:	208000cc 	andi	r2,r4,3
  unsigned char d = c;
  807d5c:	280f883a 	mov	r7,r5
  while (UNALIGNED (src))
  807d60:	10000e26 	beq	r2,zero,807d9c <memchr+0x44>
    {
      if (!length--)
  807d64:	30bfffc4 	addi	r2,r6,-1
  807d68:	30001726 	beq	r6,zero,807dc8 <memchr+0x70>
  807d6c:	29803fcc 	andi	r6,r5,255
  807d70:	00000606 	br	807d8c <memchr+0x34>
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
  807d74:	21000044 	addi	r4,r4,1
  while (UNALIGNED (src))
  807d78:	20c000cc 	andi	r3,r4,3
  807d7c:	18000826 	beq	r3,zero,807da0 <memchr+0x48>
      if (!length--)
  807d80:	10bfffc4 	addi	r2,r2,-1
  807d84:	10ffffe0 	cmpeqi	r3,r2,-1
  807d88:	18000f1e 	bne	r3,zero,807dc8 <memchr+0x70>
      if (*src == d)
  807d8c:	20c00003 	ldbu	r3,0(r4)
  807d90:	19bff81e 	bne	r3,r6,807d74 <memchr+0x1c>
  807d94:	2005883a 	mov	r2,r4
        return (void *) src;
      src++;
    }

  return NULL;
}
  807d98:	f800283a 	ret
  while (UNALIGNED (src))
  807d9c:	3005883a 	mov	r2,r6
  if (!TOO_SMALL (length))
  807da0:	10c00128 	cmpgeui	r3,r2,4
  807da4:	18000a1e 	bne	r3,zero,807dd0 <memchr+0x78>
  while (length--)
  807da8:	10001e26 	beq	r2,zero,807e24 <memchr+0xcc>
  807dac:	2087883a 	add	r3,r4,r2
  807db0:	39803fcc 	andi	r6,r7,255
  while (UNALIGNED (src))
  807db4:	2005883a 	mov	r2,r4
      if (*src == d)
  807db8:	11000003 	ldbu	r4,0(r2)
  807dbc:	21bff626 	beq	r4,r6,807d98 <memchr+0x40>
      src++;
  807dc0:	10800044 	addi	r2,r2,1
  while (length--)
  807dc4:	18bffc1e 	bne	r3,r2,807db8 <memchr+0x60>
        return NULL;
  807dc8:	0005883a 	mov	r2,zero
  807dcc:	f800283a 	ret
      mask = d << 8 | d;
  807dd0:	29403fcc 	andi	r5,r5,255
  807dd4:	280c923a 	slli	r6,r5,8
          if (DETECTCHAR (*asrc, mask))
  807dd8:	027fbff4 	movhi	r9,65279
  807ddc:	02202074 	movhi	r8,32897
      mask = d << 8 | d;
  807de0:	314ab03a 	or	r5,r6,r5
      mask = mask << 16 | mask;
  807de4:	280c943a 	slli	r6,r5,16
          if (DETECTCHAR (*asrc, mask))
  807de8:	4a7fbfc4 	addi	r9,r9,-257
  807dec:	42202004 	addi	r8,r8,-32640
      mask = mask << 16 | mask;
  807df0:	314cb03a 	or	r6,r6,r5
          if (DETECTCHAR (*asrc, mask))
  807df4:	20c00017 	ldw	r3,0(r4)
  807df8:	30c6f03a 	xor	r3,r6,r3
  807dfc:	1a4b883a 	add	r5,r3,r9
  807e00:	00c6303a 	nor	r3,zero,r3
  807e04:	28c6703a 	and	r3,r5,r3
  807e08:	1a06703a 	and	r3,r3,r8
  807e0c:	183fe71e 	bne	r3,zero,807dac <memchr+0x54>
          length -= LBLOCKSIZE;
  807e10:	10bfff04 	addi	r2,r2,-4
      while (length >= LBLOCKSIZE)
  807e14:	10c00128 	cmpgeui	r3,r2,4
          asrc++;
  807e18:	21000104 	addi	r4,r4,4
      while (length >= LBLOCKSIZE)
  807e1c:	183ff51e 	bne	r3,zero,807df4 <memchr+0x9c>
  807e20:	003fe106 	br	807da8 <memchr+0x50>
  807e24:	f800283a 	ret

00807e28 <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  807e28:	30c00430 	cmpltui	r3,r6,16
{
  807e2c:	2005883a 	mov	r2,r4
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  807e30:	18002d1e 	bne	r3,zero,807ee8 <memcpy+0xc0>
  807e34:	2906b03a 	or	r3,r5,r4
  807e38:	18c000cc 	andi	r3,r3,3
  807e3c:	1800351e 	bne	r3,zero,807f14 <memcpy+0xec>
  807e40:	32fffc04 	addi	r11,r6,-16
  807e44:	5816d13a 	srli	r11,r11,4
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;
  807e48:	280f883a 	mov	r7,r5
      aligned_dst = (long*)dst;
  807e4c:	2007883a 	mov	r3,r4
  807e50:	5ac00044 	addi	r11,r11,1
  807e54:	5816913a 	slli	r11,r11,4
  807e58:	22d5883a 	add	r10,r4,r11

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
  807e5c:	39000117 	ldw	r4,4(r7)
          *aligned_dst++ = *aligned_src++;
  807e60:	3a400017 	ldw	r9,0(r7)
          *aligned_dst++ = *aligned_src++;
  807e64:	3a000217 	ldw	r8,8(r7)
          *aligned_dst++ = *aligned_src++;
  807e68:	19000115 	stw	r4,4(r3)
          *aligned_dst++ = *aligned_src++;
  807e6c:	39000317 	ldw	r4,12(r7)
          *aligned_dst++ = *aligned_src++;
  807e70:	1a400015 	stw	r9,0(r3)
          *aligned_dst++ = *aligned_src++;
  807e74:	1a000215 	stw	r8,8(r3)
          *aligned_dst++ = *aligned_src++;
  807e78:	19000315 	stw	r4,12(r3)
  807e7c:	18c00404 	addi	r3,r3,16
  807e80:	39c00404 	addi	r7,r7,16
      while (len0 >= BIGBLOCKSIZE)
  807e84:	50fff51e 	bne	r10,r3,807e5c <memcpy+0x34>
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
  807e88:	3100030c 	andi	r4,r6,12
          *aligned_dst++ = *aligned_src++;
  807e8c:	2acb883a 	add	r5,r5,r11
          len0 -= BIGBLOCKSIZE;
  807e90:	320003cc 	andi	r8,r6,15
      while (len0 >= LITTLEBLOCKSIZE)
  807e94:	20002226 	beq	r4,zero,807f20 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
  807e98:	280f883a 	mov	r7,r5
      while (len0 >= LITTLEBLOCKSIZE)
  807e9c:	1813883a 	mov	r9,r3
        {
          *aligned_dst++ = *aligned_src++;
  807ea0:	39c00104 	addi	r7,r7,4
  807ea4:	3abfff17 	ldw	r10,-4(r7)
  807ea8:	41c9c83a 	sub	r4,r8,r7
      while (len0 >= LITTLEBLOCKSIZE)
  807eac:	2909883a 	add	r4,r5,r4
          *aligned_dst++ = *aligned_src++;
  807eb0:	4a800015 	stw	r10,0(r9)
      while (len0 >= LITTLEBLOCKSIZE)
  807eb4:	21000128 	cmpgeui	r4,r4,4
          *aligned_dst++ = *aligned_src++;
  807eb8:	4a400104 	addi	r9,r9,4
      while (len0 >= LITTLEBLOCKSIZE)
  807ebc:	203ff81e 	bne	r4,zero,807ea0 <memcpy+0x78>
  807ec0:	413fff04 	addi	r4,r8,-4
  807ec4:	2008d0ba 	srli	r4,r4,2
          len0 -= LITTLEBLOCKSIZE;
  807ec8:	318000cc 	andi	r6,r6,3
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
  807ecc:	31ffffc4 	addi	r7,r6,-1
  807ed0:	21000044 	addi	r4,r4,1
  807ed4:	200890ba 	slli	r4,r4,2
          *aligned_dst++ = *aligned_src++;
  807ed8:	1907883a 	add	r3,r3,r4
  807edc:	290b883a 	add	r5,r5,r4
  while (len0--)
  807ee0:	3000041e 	bne	r6,zero,807ef4 <memcpy+0xcc>
  807ee4:	f800283a 	ret
  char *dst = dst0;
  807ee8:	2007883a 	mov	r3,r4
  while (len0--)
  807eec:	31ffffc4 	addi	r7,r6,-1
  807ef0:	303ffc26 	beq	r6,zero,807ee4 <memcpy+0xbc>
  807ef4:	39c00044 	addi	r7,r7,1
  807ef8:	19cf883a 	add	r7,r3,r7
    *dst++ = *src++;
  807efc:	29800003 	ldbu	r6,0(r5)
  807f00:	18c00044 	addi	r3,r3,1
  807f04:	29400044 	addi	r5,r5,1
  807f08:	19bfffc5 	stb	r6,-1(r3)
  while (len0--)
  807f0c:	38fffb1e 	bne	r7,r3,807efc <memcpy+0xd4>
  807f10:	f800283a 	ret
  807f14:	31ffffc4 	addi	r7,r6,-1
  char *dst = dst0;
  807f18:	2007883a 	mov	r3,r4
  807f1c:	003ff506 	br	807ef4 <memcpy+0xcc>
      while (len0 >= LITTLEBLOCKSIZE)
  807f20:	400d883a 	mov	r6,r8
  807f24:	003ff106 	br	807eec <memcpy+0xc4>

00807f28 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
  807f28:	2005883a 	mov	r2,r4
  char *dst = dst_void;
  const char *src = src_void;
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
  807f2c:	29000a2e 	bgeu	r5,r4,807f58 <memmove+0x30>
  807f30:	2989883a 	add	r4,r5,r6
  807f34:	1100082e 	bgeu	r2,r4,807f58 <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
  807f38:	1187883a 	add	r3,r2,r6
      while (length--)
  807f3c:	30003e26 	beq	r6,zero,808038 <memmove+0x110>
	{
	  *--dst = *--src;
  807f40:	217fffc3 	ldbu	r5,-1(r4)
  807f44:	18ffffc4 	addi	r3,r3,-1
  807f48:	213fffc4 	addi	r4,r4,-1
  807f4c:	19400005 	stb	r5,0(r3)
      while (length--)
  807f50:	10fffb1e 	bne	r2,r3,807f40 <memmove+0x18>
  807f54:	f800283a 	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  807f58:	30c00430 	cmpltui	r3,r6,16
  807f5c:	18000b26 	beq	r3,zero,807f8c <memmove+0x64>
  807f60:	1007883a 	mov	r3,r2
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
  807f64:	31ffffc4 	addi	r7,r6,-1
  807f68:	30003726 	beq	r6,zero,808048 <memmove+0x120>
  807f6c:	39c00044 	addi	r7,r7,1
  807f70:	29cf883a 	add	r7,r5,r7
        {
          *dst++ = *src++;
  807f74:	29800003 	ldbu	r6,0(r5)
  807f78:	29400044 	addi	r5,r5,1
  807f7c:	18c00044 	addi	r3,r3,1
  807f80:	19bfffc5 	stb	r6,-1(r3)
      while (length--)
  807f84:	29fffb1e 	bne	r5,r7,807f74 <memmove+0x4c>
  807f88:	f800283a 	ret
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  807f8c:	2886b03a 	or	r3,r5,r2
  807f90:	18c000cc 	andi	r3,r3,3
  807f94:	1800291e 	bne	r3,zero,80803c <memmove+0x114>
  807f98:	327ffc04 	addi	r9,r6,-16
  807f9c:	4812d13a 	srli	r9,r9,4
  807fa0:	280f883a 	mov	r7,r5
  807fa4:	1007883a 	mov	r3,r2
  807fa8:	4a400044 	addi	r9,r9,1
  807fac:	4812913a 	slli	r9,r9,4
  807fb0:	1251883a 	add	r8,r2,r9
              *aligned_dst++ = *aligned_src++;
  807fb4:	39000017 	ldw	r4,0(r7)
  807fb8:	39c00404 	addi	r7,r7,16
  807fbc:	18c00404 	addi	r3,r3,16
  807fc0:	193ffc15 	stw	r4,-16(r3)
              *aligned_dst++ = *aligned_src++;
  807fc4:	393ffd17 	ldw	r4,-12(r7)
  807fc8:	193ffd15 	stw	r4,-12(r3)
              *aligned_dst++ = *aligned_src++;
  807fcc:	393ffe17 	ldw	r4,-8(r7)
  807fd0:	193ffe15 	stw	r4,-8(r3)
              *aligned_dst++ = *aligned_src++;
  807fd4:	393fff17 	ldw	r4,-4(r7)
  807fd8:	193fff15 	stw	r4,-4(r3)
          while (length >= BIGBLOCKSIZE)
  807fdc:	40fff51e 	bne	r8,r3,807fb4 <memmove+0x8c>
          while (length >= LITTLEBLOCKSIZE)
  807fe0:	3100030c 	andi	r4,r6,12
              *aligned_dst++ = *aligned_src++;
  807fe4:	2a4b883a 	add	r5,r5,r9
              length -= BIGBLOCKSIZE;
  807fe8:	320003cc 	andi	r8,r6,15
          while (length >= LITTLEBLOCKSIZE)
  807fec:	20001726 	beq	r4,zero,80804c <memmove+0x124>
              *aligned_dst++ = *aligned_src++;
  807ff0:	2813883a 	mov	r9,r5
          while (length >= LITTLEBLOCKSIZE)
  807ff4:	180f883a 	mov	r7,r3
              *aligned_dst++ = *aligned_src++;
  807ff8:	4a800017 	ldw	r10,0(r9)
  807ffc:	39c00104 	addi	r7,r7,4
  808000:	41c9c83a 	sub	r4,r8,r7
          while (length >= LITTLEBLOCKSIZE)
  808004:	1909883a 	add	r4,r3,r4
  808008:	21000128 	cmpgeui	r4,r4,4
              *aligned_dst++ = *aligned_src++;
  80800c:	3abfff15 	stw	r10,-4(r7)
  808010:	4a400104 	addi	r9,r9,4
          while (length >= LITTLEBLOCKSIZE)
  808014:	203ff81e 	bne	r4,zero,807ff8 <memmove+0xd0>
  808018:	413fff04 	addi	r4,r8,-4
  80801c:	2008d0ba 	srli	r4,r4,2
              length -= LITTLEBLOCKSIZE;
  808020:	318000cc 	andi	r6,r6,3
  808024:	21000044 	addi	r4,r4,1
  808028:	200890ba 	slli	r4,r4,2
              *aligned_dst++ = *aligned_src++;
  80802c:	1907883a 	add	r3,r3,r4
  808030:	290b883a 	add	r5,r5,r4
  808034:	003fcb06 	br	807f64 <memmove+0x3c>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  808038:	f800283a 	ret
      while (length--)
  80803c:	31ffffc4 	addi	r7,r6,-1
  808040:	1007883a 	mov	r3,r2
  808044:	003fc906 	br	807f6c <memmove+0x44>
  808048:	f800283a 	ret
          while (length >= LITTLEBLOCKSIZE)
  80804c:	400d883a 	mov	r6,r8
  808050:	003fc406 	br	807f64 <memmove+0x3c>

00808054 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
  808054:	20c000cc 	andi	r3,r4,3
{
  808058:	2005883a 	mov	r2,r4
  while (UNALIGNED (s))
  80805c:	18003626 	beq	r3,zero,808138 <memset+0xe4>
    {
      if (n--)
  808060:	31ffffc4 	addi	r7,r6,-1
  808064:	30003326 	beq	r6,zero,808134 <memset+0xe0>
        *s++ = (char) c;
  808068:	2811883a 	mov	r8,r5
  char *s = (char *) m;
  80806c:	2007883a 	mov	r3,r4
  808070:	00000306 	br	808080 <memset+0x2c>
      if (n--)
  808074:	39ffffc4 	addi	r7,r7,-1
  808078:	39bfffe0 	cmpeqi	r6,r7,-1
  80807c:	30002d1e 	bne	r6,zero,808134 <memset+0xe0>
        *s++ = (char) c;
  808080:	18c00044 	addi	r3,r3,1
  while (UNALIGNED (s))
  808084:	198000cc 	andi	r6,r3,3
        *s++ = (char) c;
  808088:	1a3fffc5 	stb	r8,-1(r3)
  while (UNALIGNED (s))
  80808c:	303ff91e 	bne	r6,zero,808074 <memset+0x20>
      else
        return m;
    }

  if (!TOO_SMALL (n))
  808090:	39000130 	cmpltui	r4,r7,4
  808094:	2000221e 	bne	r4,zero,808120 <memset+0xcc>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
  808098:	29003fcc 	andi	r4,r5,255
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
  80809c:	200c923a 	slli	r6,r4,8
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
  8080a0:	3a000430 	cmpltui	r8,r7,16
      buffer = (d << 8) | d;
  8080a4:	3108b03a 	or	r4,r6,r4
      buffer |= (buffer << 16);
  8080a8:	200c943a 	slli	r6,r4,16
  8080ac:	310cb03a 	or	r6,r6,r4
      while (n >= LBLOCKSIZE*4)
  8080b0:	40000e1e 	bne	r8,zero,8080ec <memset+0x98>
  8080b4:	393ffc04 	addi	r4,r7,-16
  8080b8:	2008d13a 	srli	r4,r4,4
  8080bc:	21000044 	addi	r4,r4,1
  8080c0:	2008913a 	slli	r4,r4,4
  8080c4:	1909883a 	add	r4,r3,r4
        {
          *aligned_addr++ = buffer;
  8080c8:	19800015 	stw	r6,0(r3)
          *aligned_addr++ = buffer;
  8080cc:	19800115 	stw	r6,4(r3)
          *aligned_addr++ = buffer;
  8080d0:	19800215 	stw	r6,8(r3)
          *aligned_addr++ = buffer;
  8080d4:	19800315 	stw	r6,12(r3)
  8080d8:	18c00404 	addi	r3,r3,16
      while (n >= LBLOCKSIZE*4)
  8080dc:	20fffa1e 	bne	r4,r3,8080c8 <memset+0x74>
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
  8080e0:	3900030c 	andi	r4,r7,12
          n -= 4*LBLOCKSIZE;
  8080e4:	39c003cc 	andi	r7,r7,15
      while (n >= LBLOCKSIZE)
  8080e8:	20000d26 	beq	r4,zero,808120 <memset+0xcc>
      while (n >= LBLOCKSIZE*4)
  8080ec:	1811883a 	mov	r8,r3
        {
          *aligned_addr++ = buffer;
  8080f0:	42000104 	addi	r8,r8,4
  8080f4:	3a09c83a 	sub	r4,r7,r8
      while (n >= LBLOCKSIZE)
  8080f8:	1909883a 	add	r4,r3,r4
  8080fc:	21000128 	cmpgeui	r4,r4,4
          *aligned_addr++ = buffer;
  808100:	41bfff15 	stw	r6,-4(r8)
      while (n >= LBLOCKSIZE)
  808104:	203ffa1e 	bne	r4,zero,8080f0 <memset+0x9c>
          *aligned_addr++ = buffer;
  808108:	393fff04 	addi	r4,r7,-4
  80810c:	2008d0ba 	srli	r4,r4,2
          n -= LBLOCKSIZE;
  808110:	39c000cc 	andi	r7,r7,3
          *aligned_addr++ = buffer;
  808114:	21000044 	addi	r4,r4,1
  808118:	200890ba 	slli	r4,r4,2
  80811c:	1907883a 	add	r3,r3,r4
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
  808120:	38000426 	beq	r7,zero,808134 <memset+0xe0>
  808124:	19cf883a 	add	r7,r3,r7
    *s++ = (char) c;
  808128:	18c00044 	addi	r3,r3,1
  80812c:	197fffc5 	stb	r5,-1(r3)
  while (n--)
  808130:	38fffd1e 	bne	r7,r3,808128 <memset+0xd4>

  return m;
}
  808134:	f800283a 	ret
  char *s = (char *) m;
  808138:	2007883a 	mov	r3,r4
  while (UNALIGNED (s))
  80813c:	300f883a 	mov	r7,r6
  808140:	003fd306 	br	808090 <memset+0x3c>

00808144 <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808144:	20801317 	ldw	r2,76(r4)
{
  808148:	defffc04 	addi	sp,sp,-16
  80814c:	dc400115 	stw	r17,4(sp)
  808150:	dc000015 	stw	r16,0(sp)
  808154:	dfc00315 	stw	ra,12(sp)
  808158:	dc800215 	stw	r18,8(sp)
  80815c:	2021883a 	mov	r16,r4
  808160:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  808164:	10000e26 	beq	r2,zero,8081a0 <_Balloc+0x5c>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  808168:	880690ba 	slli	r3,r17,2
  80816c:	10c7883a 	add	r3,r2,r3
  808170:	18800017 	ldw	r2,0(r3)
  808174:	10001126 	beq	r2,zero,8081bc <_Balloc+0x78>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  808178:	11000017 	ldw	r4,0(r2)
  80817c:	19000015 	stw	r4,0(r3)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
  808180:	10000415 	stw	zero,16(r2)
  808184:	10000315 	stw	zero,12(r2)
  return rv;
}
  808188:	dfc00317 	ldw	ra,12(sp)
  80818c:	dc800217 	ldw	r18,8(sp)
  808190:	dc400117 	ldw	r17,4(sp)
  808194:	dc000017 	ldw	r16,0(sp)
  808198:	dec00404 	addi	sp,sp,16
  80819c:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8081a0:	01800844 	movi	r6,33
  8081a4:	01400104 	movi	r5,4
  8081a8:	080b1640 	call	80b164 <_calloc_r>
  8081ac:	80801315 	stw	r2,76(r16)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8081b0:	103fed1e 	bne	r2,zero,808168 <_Balloc+0x24>
	  return NULL;
  8081b4:	0005883a 	mov	r2,zero
  8081b8:	003ff306 	br	808188 <_Balloc+0x44>
      x = 1 << k;
  8081bc:	04800044 	movi	r18,1
  8081c0:	9464983a 	sll	r18,r18,r17
      rv = (_Bigint *) _calloc_r (ptr,
  8081c4:	01400044 	movi	r5,1
  8081c8:	8009883a 	mov	r4,r16
				  sizeof (_Bigint) +
  8081cc:	91800144 	addi	r6,r18,5
      rv = (_Bigint *) _calloc_r (ptr,
  8081d0:	300c90ba 	slli	r6,r6,2
  8081d4:	080b1640 	call	80b164 <_calloc_r>
      if (rv == NULL) return NULL;
  8081d8:	103ff626 	beq	r2,zero,8081b4 <_Balloc+0x70>
      rv->_k = k;
  8081dc:	14400115 	stw	r17,4(r2)
      rv->_maxwds = x;
  8081e0:	14800215 	stw	r18,8(r2)
  8081e4:	003fe606 	br	808180 <_Balloc+0x3c>

008081e8 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
  8081e8:	28000726 	beq	r5,zero,808208 <_Bfree+0x20>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8081ec:	28c00117 	ldw	r3,4(r5)
  8081f0:	20801317 	ldw	r2,76(r4)
  8081f4:	180690ba 	slli	r3,r3,2
  8081f8:	10c5883a 	add	r2,r2,r3
  8081fc:	10c00017 	ldw	r3,0(r2)
  808200:	28c00015 	stw	r3,0(r5)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808204:	11400015 	stw	r5,0(r2)
    }
}
  808208:	f800283a 	ret

0080820c <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
  80820c:	defff704 	addi	sp,sp,-36
  808210:	dc800215 	stw	r18,8(sp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  808214:	2c800417 	ldw	r18,16(r5)
{
  808218:	ddc00715 	stw	r23,28(sp)
  80821c:	dd800615 	stw	r22,24(sp)
  808220:	dd400515 	stw	r21,20(sp)
  808224:	dd000415 	stw	r20,16(sp)
  808228:	dcc00315 	stw	r19,12(sp)
  80822c:	dc400115 	stw	r17,4(sp)
  808230:	dfc00815 	stw	ra,32(sp)
  808234:	dc000015 	stw	r16,0(sp)
  808238:	2827883a 	mov	r19,r5
  80823c:	2029883a 	mov	r20,r4
  808240:	302b883a 	mov	r21,r6
  808244:	3823883a 	mov	r17,r7
  x = b->_x;
  808248:	2d800504 	addi	r22,r5,20
  i = 0;
  80824c:	002f883a 	mov	r23,zero
  do
    {
#ifdef Pack_32
      xi = *x;
  808250:	b4000017 	ldw	r16,0(r22)
      y = (xi & 0xffff) * m + a;
  808254:	a80b883a 	mov	r5,r21
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
  808258:	b5800104 	addi	r22,r22,4
      y = (xi & 0xffff) * m + a;
  80825c:	813fffcc 	andi	r4,r16,65535
  808260:	080ccac0 	call	80ccac <__mulsi3>
      z = (xi >> 16) * m + (y >> 16);
  808264:	8008d43a 	srli	r4,r16,16
  808268:	a80b883a 	mov	r5,r21
      y = (xi & 0xffff) * m + a;
  80826c:	1461883a 	add	r16,r2,r17
      z = (xi >> 16) * m + (y >> 16);
  808270:	080ccac0 	call	80ccac <__mulsi3>
  808274:	800ed43a 	srli	r7,r16,16
      *x++ = (z << 16) + (y & 0xffff);
  808278:	843fffcc 	andi	r16,r16,65535
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
  80827c:	bdc00044 	addi	r23,r23,1
      z = (xi >> 16) * m + (y >> 16);
  808280:	11c5883a 	add	r2,r2,r7
      *x++ = (z << 16) + (y & 0xffff);
  808284:	1006943a 	slli	r3,r2,16
      a = (int) (z >> 16);
  808288:	1022d43a 	srli	r17,r2,16
      *x++ = (z << 16) + (y & 0xffff);
  80828c:	1c21883a 	add	r16,r3,r16
  808290:	b43fff15 	stw	r16,-4(r22)
  while (++i < wds);
  808294:	bcbfee16 	blt	r23,r18,808250 <__multadd+0x44>
  if (a)
  808298:	88000826 	beq	r17,zero,8082bc <__multadd+0xb0>
    {
      if (wds >= b->_maxwds)
  80829c:	98800217 	ldw	r2,8(r19)
  8082a0:	9080120e 	bge	r18,r2,8082ec <__multadd+0xe0>
	  b1 = eBalloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
  8082a4:	90800144 	addi	r2,r18,5
  8082a8:	100490ba 	slli	r2,r2,2
  8082ac:	94800044 	addi	r18,r18,1
  8082b0:	9885883a 	add	r2,r19,r2
  8082b4:	14400015 	stw	r17,0(r2)
      b->_wds = wds;
  8082b8:	9c800415 	stw	r18,16(r19)
    }
  return b;
}
  8082bc:	9805883a 	mov	r2,r19
  8082c0:	dfc00817 	ldw	ra,32(sp)
  8082c4:	ddc00717 	ldw	r23,28(sp)
  8082c8:	dd800617 	ldw	r22,24(sp)
  8082cc:	dd400517 	ldw	r21,20(sp)
  8082d0:	dd000417 	ldw	r20,16(sp)
  8082d4:	dcc00317 	ldw	r19,12(sp)
  8082d8:	dc800217 	ldw	r18,8(sp)
  8082dc:	dc400117 	ldw	r17,4(sp)
  8082e0:	dc000017 	ldw	r16,0(sp)
  8082e4:	dec00904 	addi	sp,sp,36
  8082e8:	f800283a 	ret
	  b1 = eBalloc (ptr, b->_k + 1);
  8082ec:	99400117 	ldw	r5,4(r19)
  8082f0:	a009883a 	mov	r4,r20
  8082f4:	29400044 	addi	r5,r5,1
  8082f8:	08081440 	call	808144 <_Balloc>
  8082fc:	1021883a 	mov	r16,r2
  808300:	10001226 	beq	r2,zero,80834c <__multadd+0x140>
	  Bcopy (b1, b);
  808304:	99800417 	ldw	r6,16(r19)
  808308:	99400304 	addi	r5,r19,12
  80830c:	11000304 	addi	r4,r2,12
  808310:	31800084 	addi	r6,r6,2
  808314:	300c90ba 	slli	r6,r6,2
  808318:	0807e280 	call	807e28 <memcpy>
  if (v)
  80831c:	98000926 	beq	r19,zero,808344 <__multadd+0x138>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808320:	98c00117 	ldw	r3,4(r19)
  808324:	a0801317 	ldw	r2,76(r20)
  808328:	180690ba 	slli	r3,r3,2
  80832c:	10c5883a 	add	r2,r2,r3
  808330:	10c00017 	ldw	r3,0(r2)
  808334:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808338:	14c00015 	stw	r19,0(r2)
  80833c:	8027883a 	mov	r19,r16
  808340:	003fd806 	br	8082a4 <__multadd+0x98>
  808344:	8027883a 	mov	r19,r16
  808348:	003fd606 	br	8082a4 <__multadd+0x98>
	  b1 = eBalloc (ptr, b->_k + 1);
  80834c:	01c02074 	movhi	r7,129
  808350:	01002074 	movhi	r4,129
  808354:	39c8c904 	addi	r7,r7,8996
  808358:	000d883a 	mov	r6,zero
  80835c:	01402d44 	movi	r5,181
  808360:	2108ec04 	addi	r4,r4,9136
  808364:	080b0f00 	call	80b0f0 <__assert_func>

00808368 <__s2b>:
s2b (struct _reent * ptr,
	const char *s,
	int nd0,
	int nd,
	__ULong y9)
{
  808368:	defff904 	addi	sp,sp,-28
  80836c:	dc800215 	stw	r18,8(sp)
  808370:	dc000015 	stw	r16,0(sp)
  808374:	2025883a 	mov	r18,r4
  808378:	2821883a 	mov	r16,r5
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  80837c:	39000204 	addi	r4,r7,8
  808380:	01400244 	movi	r5,9
{
  808384:	dcc00315 	stw	r19,12(sp)
  808388:	dc400115 	stw	r17,4(sp)
  80838c:	dfc00615 	stw	ra,24(sp)
  808390:	3823883a 	mov	r17,r7
  808394:	dd400515 	stw	r21,20(sp)
  808398:	dd000415 	stw	r20,16(sp)
  80839c:	3027883a 	mov	r19,r6
  x = (nd + 8) / 9;
  8083a0:	080caf80 	call	80caf8 <__divsi3>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  8083a4:	88c00290 	cmplti	r3,r17,10
  8083a8:	1800341e 	bne	r3,zero,80847c <__s2b+0x114>
  8083ac:	00c00044 	movi	r3,1
  8083b0:	000b883a 	mov	r5,zero
  8083b4:	18c7883a 	add	r3,r3,r3
  8083b8:	29400044 	addi	r5,r5,1
  8083bc:	18bffd16 	blt	r3,r2,8083b4 <__s2b+0x4c>
#ifdef Pack_32
  b = eBalloc (ptr, k);
  8083c0:	9009883a 	mov	r4,r18
  8083c4:	08081440 	call	808144 <_Balloc>
  8083c8:	100b883a 	mov	r5,r2
  8083cc:	10002d26 	beq	r2,zero,808484 <__s2b+0x11c>
  b->_x[0] = y9;
  8083d0:	d8800717 	ldw	r2,28(sp)
  8083d4:	28800515 	stw	r2,20(r5)
  b->_wds = 1;
  8083d8:	00800044 	movi	r2,1
  8083dc:	28800415 	stw	r2,16(r5)
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
  8083e0:	98800290 	cmplti	r2,r19,10
  8083e4:	1000221e 	bne	r2,zero,808470 <__s2b+0x108>
    {
      s += 9;
  8083e8:	85400244 	addi	r21,r16,9
  8083ec:	a829883a 	mov	r20,r21
  8083f0:	84e1883a 	add	r16,r16,r19
      do
	b = multadd (ptr, b, 10, *s++ - '0');
  8083f4:	a1c00007 	ldb	r7,0(r20)
  8083f8:	01800284 	movi	r6,10
  8083fc:	9009883a 	mov	r4,r18
  808400:	39fff404 	addi	r7,r7,-48
  808404:	080820c0 	call	80820c <__multadd>
  808408:	a5000044 	addi	r20,r20,1
  80840c:	100b883a 	mov	r5,r2
      while (++i < nd0);
  808410:	a43ff81e 	bne	r20,r16,8083f4 <__s2b+0x8c>
      s++;
  808414:	9c3ffe04 	addi	r16,r19,-8
  808418:	ac21883a 	add	r16,r21,r16
    }
  else
    s += 10;
  for (; i < nd; i++)
  80841c:	9c400a0e 	bge	r19,r17,808448 <__s2b+0xe0>
  808420:	8ce3c83a 	sub	r17,r17,r19
  808424:	8463883a 	add	r17,r16,r17
    b = multadd (ptr, b, 10, *s++ - '0');
  808428:	81c00007 	ldb	r7,0(r16)
  80842c:	01800284 	movi	r6,10
  808430:	9009883a 	mov	r4,r18
  808434:	39fff404 	addi	r7,r7,-48
  808438:	080820c0 	call	80820c <__multadd>
  80843c:	84000044 	addi	r16,r16,1
  808440:	100b883a 	mov	r5,r2
  for (; i < nd; i++)
  808444:	8c3ff81e 	bne	r17,r16,808428 <__s2b+0xc0>
  return b;
}
  808448:	2805883a 	mov	r2,r5
  80844c:	dfc00617 	ldw	ra,24(sp)
  808450:	dd400517 	ldw	r21,20(sp)
  808454:	dd000417 	ldw	r20,16(sp)
  808458:	dcc00317 	ldw	r19,12(sp)
  80845c:	dc800217 	ldw	r18,8(sp)
  808460:	dc400117 	ldw	r17,4(sp)
  808464:	dc000017 	ldw	r16,0(sp)
  808468:	dec00704 	addi	sp,sp,28
  80846c:	f800283a 	ret
    s += 10;
  808470:	84000284 	addi	r16,r16,10
  i = 9;
  808474:	04c00244 	movi	r19,9
  808478:	003fe806 	br	80841c <__s2b+0xb4>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  80847c:	000b883a 	mov	r5,zero
  808480:	003fcf06 	br	8083c0 <__s2b+0x58>
  b = eBalloc (ptr, k);
  808484:	01c02074 	movhi	r7,129
  808488:	01002074 	movhi	r4,129
  80848c:	39c8c904 	addi	r7,r7,8996
  808490:	000d883a 	mov	r6,zero
  808494:	01403384 	movi	r5,206
  808498:	2108ec04 	addi	r4,r4,9136
  80849c:	080b0f00 	call	80b0f0 <__assert_func>

008084a0 <__hi0bits>:
int
hi0bits (register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
  8084a0:	20bfffec 	andhi	r2,r4,65535
  8084a4:	1000131e 	bne	r2,zero,8084f4 <__hi0bits+0x54>
    {
      k = 16;
      x <<= 16;
  8084a8:	2008943a 	slli	r4,r4,16
      k = 16;
  8084ac:	00800404 	movi	r2,16
    }
  if (!(x & 0xff000000))
  8084b0:	20ffc02c 	andhi	r3,r4,65280
  8084b4:	1800021e 	bne	r3,zero,8084c0 <__hi0bits+0x20>
    {
      k += 8;
      x <<= 8;
  8084b8:	2008923a 	slli	r4,r4,8
      k += 8;
  8084bc:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf0000000))
  8084c0:	20fc002c 	andhi	r3,r4,61440
  8084c4:	1800021e 	bne	r3,zero,8084d0 <__hi0bits+0x30>
    {
      k += 4;
      x <<= 4;
  8084c8:	2008913a 	slli	r4,r4,4
      k += 4;
  8084cc:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0xc0000000))
  8084d0:	20f0002c 	andhi	r3,r4,49152
  8084d4:	1800021e 	bne	r3,zero,8084e0 <__hi0bits+0x40>
    {
      k += 2;
      x <<= 2;
  8084d8:	200890ba 	slli	r4,r4,2
      k += 2;
  8084dc:	10800084 	addi	r2,r2,2
    }
  if (!(x & 0x80000000))
  8084e0:	20000316 	blt	r4,zero,8084f0 <__hi0bits+0x50>
    {
      k++;
      if (!(x & 0x40000000))
  8084e4:	2110002c 	andhi	r4,r4,16384
      k++;
  8084e8:	10800044 	addi	r2,r2,1
      if (!(x & 0x40000000))
  8084ec:	20000326 	beq	r4,zero,8084fc <__hi0bits+0x5c>
	return 32;
    }
  return k;
}
  8084f0:	f800283a 	ret
  register int k = 0;
  8084f4:	0005883a 	mov	r2,zero
  8084f8:	003fed06 	br	8084b0 <__hi0bits+0x10>
	return 32;
  8084fc:	00800804 	movi	r2,32
}
  808500:	f800283a 	ret

00808504 <__lo0bits>:

int
lo0bits (__ULong *y)
{
  register int k;
  register __ULong x = *y;
  808504:	20c00017 	ldw	r3,0(r4)

  if (x & 7)
  808508:	188001cc 	andi	r2,r3,7
  80850c:	10000826 	beq	r2,zero,808530 <__lo0bits+0x2c>
    {
      if (x & 1)
  808510:	1880004c 	andi	r2,r3,1
  808514:	10001f1e 	bne	r2,zero,808594 <__lo0bits+0x90>
	return 0;
      if (x & 2)
  808518:	1880008c 	andi	r2,r3,2
  80851c:	10002126 	beq	r2,zero,8085a4 <__lo0bits+0xa0>
	{
	  *y = x >> 1;
  808520:	1806d07a 	srli	r3,r3,1
	  return 1;
  808524:	00800044 	movi	r2,1
	  *y = x >> 1;
  808528:	20c00015 	stw	r3,0(r4)
	  return 1;
  80852c:	f800283a 	ret
	}
      *y = x >> 2;
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
  808530:	18bfffcc 	andi	r2,r3,65535
  808534:	10001426 	beq	r2,zero,808588 <__lo0bits+0x84>
  k = 0;
  808538:	0005883a 	mov	r2,zero
    {
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
  80853c:	19403fcc 	andi	r5,r3,255
  808540:	2800021e 	bne	r5,zero,80854c <__lo0bits+0x48>
    {
      k += 8;
      x >>= 8;
  808544:	1806d23a 	srli	r3,r3,8
      k += 8;
  808548:	10800204 	addi	r2,r2,8
    }
  if (!(x & 0xf))
  80854c:	194003cc 	andi	r5,r3,15
  808550:	2800021e 	bne	r5,zero,80855c <__lo0bits+0x58>
    {
      k += 4;
      x >>= 4;
  808554:	1806d13a 	srli	r3,r3,4
      k += 4;
  808558:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0x3))
  80855c:	194000cc 	andi	r5,r3,3
  808560:	2800021e 	bne	r5,zero,80856c <__lo0bits+0x68>
    {
      k += 2;
      x >>= 2;
  808564:	1806d0ba 	srli	r3,r3,2
      k += 2;
  808568:	10800084 	addi	r2,r2,2
    }
  if (!(x & 1))
  80856c:	1940004c 	andi	r5,r3,1
  808570:	2800031e 	bne	r5,zero,808580 <__lo0bits+0x7c>
    {
      k++;
      x >>= 1;
  808574:	1806d07a 	srli	r3,r3,1
      k++;
  808578:	10800044 	addi	r2,r2,1
      if (!x & 1)
  80857c:	18000726 	beq	r3,zero,80859c <__lo0bits+0x98>
	return 32;
    }
  *y = x;
  808580:	20c00015 	stw	r3,0(r4)
  return k;
  808584:	f800283a 	ret
      x >>= 16;
  808588:	1806d43a 	srli	r3,r3,16
      k = 16;
  80858c:	00800404 	movi	r2,16
  808590:	003fea06 	br	80853c <__lo0bits+0x38>
	return 0;
  808594:	0005883a 	mov	r2,zero
  808598:	f800283a 	ret
	return 32;
  80859c:	00800804 	movi	r2,32
}
  8085a0:	f800283a 	ret
      *y = x >> 2;
  8085a4:	1806d0ba 	srli	r3,r3,2
      return 2;
  8085a8:	00800084 	movi	r2,2
      *y = x >> 2;
  8085ac:	20c00015 	stw	r3,0(r4)
      return 2;
  8085b0:	f800283a 	ret

008085b4 <__i2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8085b4:	20c01317 	ldw	r3,76(r4)

_Bigint *
i2b (struct _reent * ptr, int i)
{
  8085b8:	defffd04 	addi	sp,sp,-12
  8085bc:	dc400115 	stw	r17,4(sp)
  8085c0:	dc000015 	stw	r16,0(sp)
  8085c4:	dfc00215 	stw	ra,8(sp)
  8085c8:	2021883a 	mov	r16,r4
  8085cc:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8085d0:	18000d26 	beq	r3,zero,808608 <__i2b+0x54>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8085d4:	18800117 	ldw	r2,4(r3)
  8085d8:	10001826 	beq	r2,zero,80863c <__i2b+0x88>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8085dc:	11000017 	ldw	r4,0(r2)
  8085e0:	19000115 	stw	r4,4(r3)
  _Bigint *b;

  b = eBalloc (ptr, 1);
  b->_x[0] = i;
  b->_wds = 1;
  8085e4:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  8085e8:	10000315 	stw	zero,12(r2)
  b->_x[0] = i;
  8085ec:	14400515 	stw	r17,20(r2)
  b->_wds = 1;
  8085f0:	10c00415 	stw	r3,16(r2)
  return b;
}
  8085f4:	dfc00217 	ldw	ra,8(sp)
  8085f8:	dc400117 	ldw	r17,4(sp)
  8085fc:	dc000017 	ldw	r16,0(sp)
  808600:	dec00304 	addi	sp,sp,12
  808604:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  808608:	01800844 	movi	r6,33
  80860c:	01400104 	movi	r5,4
  808610:	080b1640 	call	80b164 <_calloc_r>
  808614:	80801315 	stw	r2,76(r16)
  808618:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  80861c:	103fed1e 	bne	r2,zero,8085d4 <__i2b+0x20>
  b = eBalloc (ptr, 1);
  808620:	01c02074 	movhi	r7,129
  808624:	01002074 	movhi	r4,129
  808628:	39c8c904 	addi	r7,r7,8996
  80862c:	000d883a 	mov	r6,zero
  808630:	01405004 	movi	r5,320
  808634:	2108ec04 	addi	r4,r4,9136
  808638:	080b0f00 	call	80b0f0 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  80863c:	01800704 	movi	r6,28
  808640:	01400044 	movi	r5,1
  808644:	8009883a 	mov	r4,r16
  808648:	080b1640 	call	80b164 <_calloc_r>
      if (rv == NULL) return NULL;
  80864c:	103ff426 	beq	r2,zero,808620 <__i2b+0x6c>
      rv->_k = k;
  808650:	00c00044 	movi	r3,1
  808654:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  808658:	00c00084 	movi	r3,2
  80865c:	10c00215 	stw	r3,8(r2)
  808660:	003fe006 	br	8085e4 <__i2b+0x30>

00808664 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
  808664:	defff004 	addi	sp,sp,-64
  808668:	dd800c15 	stw	r22,48(sp)
  80866c:	dc400715 	stw	r17,28(sp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
  808670:	2d800417 	ldw	r22,16(r5)
  808674:	34400417 	ldw	r17,16(r6)
{
  808678:	dc800815 	stw	r18,32(sp)
  80867c:	dc000615 	stw	r16,24(sp)
  808680:	dfc00f15 	stw	ra,60(sp)
  808684:	df000e15 	stw	fp,56(sp)
  808688:	ddc00d15 	stw	r23,52(sp)
  80868c:	dd400b15 	stw	r21,44(sp)
  808690:	dd000a15 	stw	r20,40(sp)
  808694:	dcc00915 	stw	r19,36(sp)
  808698:	2825883a 	mov	r18,r5
  80869c:	3021883a 	mov	r16,r6
  if (a->_wds < b->_wds)
  8086a0:	b4400516 	blt	r22,r17,8086b8 <__multiply+0x54>
  8086a4:	8807883a 	mov	r3,r17
  8086a8:	2821883a 	mov	r16,r5
  8086ac:	b023883a 	mov	r17,r22
  8086b0:	3025883a 	mov	r18,r6
  8086b4:	182d883a 	mov	r22,r3
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
  8086b8:	80800217 	ldw	r2,8(r16)
  wc = wa + wb;
  8086bc:	8d87883a 	add	r3,r17,r22
  8086c0:	d8c00015 	stw	r3,0(sp)
  k = a->_k;
  8086c4:	81400117 	ldw	r5,4(r16)
  if (wc > a->_maxwds)
  8086c8:	10c0010e 	bge	r2,r3,8086d0 <__multiply+0x6c>
    k++;
  8086cc:	29400044 	addi	r5,r5,1
  c = eBalloc (ptr, k);
  8086d0:	08081440 	call	808144 <_Balloc>
  8086d4:	d8800515 	stw	r2,20(sp)
  8086d8:	10008c26 	beq	r2,zero,80890c <__multiply+0x2a8>
  for (x = c->_x, xa = x + wc; x < xa; x++)
  8086dc:	d8800017 	ldw	r2,0(sp)
  8086e0:	102690ba 	slli	r19,r2,2
  8086e4:	d8800517 	ldw	r2,20(sp)
  8086e8:	15000504 	addi	r20,r2,20
  8086ec:	a4c5883a 	add	r2,r20,r19
  8086f0:	d8800115 	stw	r2,4(sp)
  8086f4:	a0800a2e 	bgeu	r20,r2,808720 <__multiply+0xbc>
    *x = 0;
  8086f8:	d8800117 	ldw	r2,4(sp)
  8086fc:	d8c00517 	ldw	r3,20(sp)
  808700:	000b883a 	mov	r5,zero
  808704:	a009883a 	mov	r4,r20
  808708:	10cdc83a 	sub	r6,r2,r3
  80870c:	31bffac4 	addi	r6,r6,-21
  808710:	300cd0ba 	srli	r6,r6,2
  808714:	31800044 	addi	r6,r6,1
  808718:	300c90ba 	slli	r6,r6,2
  80871c:	08080540 	call	808054 <memset>
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  808720:	b02c90ba 	slli	r22,r22,2
  xae = xa + wa;
  808724:	882290ba 	slli	r17,r17,2
  xb = b->_x;
  808728:	94800504 	addi	r18,r18,20
  xa = a->_x;
  80872c:	80800504 	addi	r2,r16,20
  xbe = xb + wb;
  808730:	9587883a 	add	r3,r18,r22
  xa = a->_x;
  808734:	d8800315 	stw	r2,12(sp)
  xbe = xb + wb;
  808738:	d8c00215 	stw	r3,8(sp)
  xae = xa + wa;
  80873c:	1463883a 	add	r17,r2,r17
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
  808740:	90c0542e 	bgeu	r18,r3,808894 <__multiply+0x230>
  808744:	80800544 	addi	r2,r16,21
  808748:	88806d36 	bltu	r17,r2,808900 <__multiply+0x29c>
  80874c:	8c05c83a 	sub	r2,r17,r16
  808750:	10bffac4 	addi	r2,r2,-21
  808754:	1004d0ba 	srli	r2,r2,2
  808758:	10800044 	addi	r2,r2,1
  80875c:	100490ba 	slli	r2,r2,2
  808760:	d8800415 	stw	r2,16(sp)
  808764:	00000606 	br	808780 <__multiply+0x11c>
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
	  *xc = carry;
	}
      if ((y = *xb >> 16) != 0)
  808768:	102ad43a 	srli	r21,r2,16
  80876c:	a800271e 	bne	r21,zero,80880c <__multiply+0x1a8>
  for (; xb < xbe; xb++, xc0++)
  808770:	d8800217 	ldw	r2,8(sp)
  808774:	94800104 	addi	r18,r18,4
  808778:	a5000104 	addi	r20,r20,4
  80877c:	9080452e 	bgeu	r18,r2,808894 <__multiply+0x230>
      if ((y = *xb & 0xffff) != 0)
  808780:	90800017 	ldw	r2,0(r18)
  808784:	15ffffcc 	andi	r23,r2,65535
  808788:	b83ff726 	beq	r23,zero,808768 <__multiply+0x104>
	  x = xa;
  80878c:	dd400317 	ldw	r21,12(sp)
  808790:	a02d883a 	mov	r22,r20
	  carry = 0;
  808794:	0027883a 	mov	r19,zero
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  808798:	af000017 	ldw	fp,0(r21)
  80879c:	b4000017 	ldw	r16,0(r22)
  8087a0:	b80b883a 	mov	r5,r23
  8087a4:	e13fffcc 	andi	r4,fp,65535
  8087a8:	080ccac0 	call	80ccac <__mulsi3>
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087ac:	e008d43a 	srli	r4,fp,16
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8087b0:	823fffcc 	andi	r8,r16,65535
  8087b4:	1205883a 	add	r2,r2,r8
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087b8:	b80b883a 	mov	r5,r23
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  8087bc:	14e7883a 	add	r19,r2,r19
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087c0:	8020d43a 	srli	r16,r16,16
  8087c4:	080ccac0 	call	80ccac <__mulsi3>
	      carry = z >> 16;
  8087c8:	9808d43a 	srli	r4,r19,16
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087cc:	1405883a 	add	r2,r2,r16
	      Storeinc (xc, z2, z);
  8087d0:	98ffffcc 	andi	r3,r19,65535
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087d4:	1105883a 	add	r2,r2,r4
	      Storeinc (xc, z2, z);
  8087d8:	1008943a 	slli	r4,r2,16
  8087dc:	b5800104 	addi	r22,r22,4
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  8087e0:	ad400104 	addi	r21,r21,4
	      Storeinc (xc, z2, z);
  8087e4:	20c6b03a 	or	r3,r4,r3
  8087e8:	b0ffff15 	stw	r3,-4(r22)
	      carry = z2 >> 16;
  8087ec:	1026d43a 	srli	r19,r2,16
	  while (x < xae);
  8087f0:	ac7fe936 	bltu	r21,r17,808798 <__multiply+0x134>
	  *xc = carry;
  8087f4:	d8800417 	ldw	r2,16(sp)
  8087f8:	a085883a 	add	r2,r20,r2
  8087fc:	14c00015 	stw	r19,0(r2)
      if ((y = *xb >> 16) != 0)
  808800:	90800017 	ldw	r2,0(r18)
  808804:	102ad43a 	srli	r21,r2,16
  808808:	a83fd926 	beq	r21,zero,808770 <__multiply+0x10c>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
  80880c:	a5c00017 	ldw	r23,0(r20)
	  x = xa;
  808810:	dd800317 	ldw	r22,12(sp)
	  z2 = *xc;
  808814:	a027883a 	mov	r19,r20
  808818:	b821883a 	mov	r16,r23
	  carry = 0;
  80881c:	0039883a 	mov	fp,zero
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  808820:	b100000b 	ldhu	r4,0(r22)
  808824:	a80b883a 	mov	r5,r21
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
  808828:	9cc00104 	addi	r19,r19,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80882c:	080ccac0 	call	80ccac <__mulsi3>
  808830:	800cd43a 	srli	r6,r16,16
	      Storeinc (xc, z, z2);
  808834:	b8ffffcc 	andi	r3,r23,65535
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808838:	b5800104 	addi	r22,r22,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  80883c:	118d883a 	add	r6,r2,r6
  808840:	3739883a 	add	fp,r6,fp
	      Storeinc (xc, z, z2);
  808844:	e004943a 	slli	r2,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808848:	9c000017 	ldw	r16,0(r19)
  80884c:	a80b883a 	mov	r5,r21
	      Storeinc (xc, z, z2);
  808850:	10c6b03a 	or	r3,r2,r3
  808854:	98ffff15 	stw	r3,-4(r19)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808858:	b13fff8b 	ldhu	r4,-2(r22)
  80885c:	080ccac0 	call	80ccac <__mulsi3>
	      carry = z >> 16;
  808860:	e00cd43a 	srli	r6,fp,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  808864:	80ffffcc 	andi	r3,r16,65535
  808868:	10c7883a 	add	r3,r2,r3
  80886c:	19af883a 	add	r23,r3,r6
	      carry = z2 >> 16;
  808870:	b838d43a 	srli	fp,r23,16
	    }
	  while (x < xae);
  808874:	b47fea36 	bltu	r22,r17,808820 <__multiply+0x1bc>
	  *xc = z2;
  808878:	d8800417 	ldw	r2,16(sp)
  for (; xb < xbe; xb++, xc0++)
  80887c:	94800104 	addi	r18,r18,4
	  *xc = z2;
  808880:	a085883a 	add	r2,r20,r2
  808884:	15c00015 	stw	r23,0(r2)
  for (; xb < xbe; xb++, xc0++)
  808888:	d8800217 	ldw	r2,8(sp)
  80888c:	a5000104 	addi	r20,r20,4
  808890:	90bfbb36 	bltu	r18,r2,808780 <__multiply+0x11c>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
  808894:	d8800017 	ldw	r2,0(sp)
  808898:	00800516 	blt	zero,r2,8088b0 <__multiply+0x24c>
  80889c:	00000906 	br	8088c4 <__multiply+0x260>
  8088a0:	d8800017 	ldw	r2,0(sp)
  8088a4:	10bfffc4 	addi	r2,r2,-1
  8088a8:	d8800015 	stw	r2,0(sp)
  8088ac:	10000526 	beq	r2,zero,8088c4 <__multiply+0x260>
  8088b0:	d8c00117 	ldw	r3,4(sp)
  8088b4:	18bfff17 	ldw	r2,-4(r3)
  8088b8:	18ffff04 	addi	r3,r3,-4
  8088bc:	d8c00115 	stw	r3,4(sp)
  8088c0:	103ff726 	beq	r2,zero,8088a0 <__multiply+0x23c>
  c->_wds = wc;
  8088c4:	d8800517 	ldw	r2,20(sp)
  8088c8:	d8c00017 	ldw	r3,0(sp)
  8088cc:	10c00415 	stw	r3,16(r2)
  return c;
}
  8088d0:	dfc00f17 	ldw	ra,60(sp)
  8088d4:	df000e17 	ldw	fp,56(sp)
  8088d8:	ddc00d17 	ldw	r23,52(sp)
  8088dc:	dd800c17 	ldw	r22,48(sp)
  8088e0:	dd400b17 	ldw	r21,44(sp)
  8088e4:	dd000a17 	ldw	r20,40(sp)
  8088e8:	dcc00917 	ldw	r19,36(sp)
  8088ec:	dc800817 	ldw	r18,32(sp)
  8088f0:	dc400717 	ldw	r17,28(sp)
  8088f4:	dc000617 	ldw	r16,24(sp)
  8088f8:	dec01004 	addi	sp,sp,64
  8088fc:	f800283a 	ret
  808900:	00800104 	movi	r2,4
  808904:	d8800415 	stw	r2,16(sp)
  808908:	003f9d06 	br	808780 <__multiply+0x11c>
  c = eBalloc (ptr, k);
  80890c:	01c02074 	movhi	r7,129
  808910:	01002074 	movhi	r4,129
  808914:	39c8c904 	addi	r7,r7,8996
  808918:	000d883a 	mov	r6,zero
  80891c:	01405744 	movi	r5,349
  808920:	2108ec04 	addi	r4,r4,9136
  808924:	080b0f00 	call	80b0f0 <__assert_func>

00808928 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
  808928:	defffb04 	addi	sp,sp,-20
  80892c:	dcc00315 	stw	r19,12(sp)
  808930:	dc000015 	stw	r16,0(sp)
  808934:	dfc00415 	stw	ra,16(sp)
  808938:	dc800215 	stw	r18,8(sp)
  80893c:	dc400115 	stw	r17,4(sp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
  808940:	308000cc 	andi	r2,r6,3
{
  808944:	3021883a 	mov	r16,r6
  808948:	2027883a 	mov	r19,r4
  if ((i = k & 3) != 0)
  80894c:	10002d1e 	bne	r2,zero,808a04 <__pow5mult+0xdc>
  808950:	2825883a 	mov	r18,r5
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
  808954:	8021d0ba 	srai	r16,r16,2
  808958:	80001926 	beq	r16,zero,8089c0 <__pow5mult+0x98>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
  80895c:	9c401217 	ldw	r17,72(r19)
  808960:	8800061e 	bne	r17,zero,80897c <__pow5mult+0x54>
  808964:	00002f06 	br	808a24 <__pow5mult+0xfc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
  808968:	8021d07a 	srai	r16,r16,1
  80896c:	80001426 	beq	r16,zero,8089c0 <__pow5mult+0x98>
	break;
      if (!(p51 = p5->_next))
  808970:	88800017 	ldw	r2,0(r17)
  808974:	10001a26 	beq	r2,zero,8089e0 <__pow5mult+0xb8>
{
  808978:	1023883a 	mov	r17,r2
      if (k & 1)
  80897c:	8080004c 	andi	r2,r16,1
  808980:	103ff926 	beq	r2,zero,808968 <__pow5mult+0x40>
	  b1 = mult (ptr, b, p5);
  808984:	880d883a 	mov	r6,r17
  808988:	900b883a 	mov	r5,r18
  80898c:	9809883a 	mov	r4,r19
  808990:	08086640 	call	808664 <__multiply>
  if (v)
  808994:	90001926 	beq	r18,zero,8089fc <__pow5mult+0xd4>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808998:	91000117 	ldw	r4,4(r18)
  80899c:	98c01317 	ldw	r3,76(r19)
      if (!(k >>= 1))
  8089a0:	8021d07a 	srai	r16,r16,1
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  8089a4:	200890ba 	slli	r4,r4,2
  8089a8:	1907883a 	add	r3,r3,r4
  8089ac:	19000017 	ldw	r4,0(r3)
  8089b0:	91000015 	stw	r4,0(r18)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  8089b4:	1c800015 	stw	r18,0(r3)
	  b = b1;
  8089b8:	1025883a 	mov	r18,r2
      if (!(k >>= 1))
  8089bc:	803fec1e 	bne	r16,zero,808970 <__pow5mult+0x48>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
  8089c0:	9005883a 	mov	r2,r18
  8089c4:	dfc00417 	ldw	ra,16(sp)
  8089c8:	dcc00317 	ldw	r19,12(sp)
  8089cc:	dc800217 	ldw	r18,8(sp)
  8089d0:	dc400117 	ldw	r17,4(sp)
  8089d4:	dc000017 	ldw	r16,0(sp)
  8089d8:	dec00504 	addi	sp,sp,20
  8089dc:	f800283a 	ret
	  p51 = p5->_next = mult (ptr, p5, p5);
  8089e0:	880d883a 	mov	r6,r17
  8089e4:	880b883a 	mov	r5,r17
  8089e8:	9809883a 	mov	r4,r19
  8089ec:	08086640 	call	808664 <__multiply>
  8089f0:	88800015 	stw	r2,0(r17)
	  p51->_next = 0;
  8089f4:	10000015 	stw	zero,0(r2)
  8089f8:	003fdf06 	br	808978 <__pow5mult+0x50>
	  b = b1;
  8089fc:	1025883a 	mov	r18,r2
  808a00:	003fd906 	br	808968 <__pow5mult+0x40>
    b = multadd (ptr, b, p05[i - 1], 0);
  808a04:	100490ba 	slli	r2,r2,2
  808a08:	00c02074 	movhi	r3,129
  808a0c:	000f883a 	mov	r7,zero
  808a10:	10c7883a 	add	r3,r2,r3
  808a14:	19890517 	ldw	r6,9236(r3)
  808a18:	080820c0 	call	80820c <__multadd>
  808a1c:	1025883a 	mov	r18,r2
  808a20:	003fcc06 	br	808954 <__pow5mult+0x2c>
  b = eBalloc (ptr, 1);
  808a24:	01400044 	movi	r5,1
  808a28:	9809883a 	mov	r4,r19
  808a2c:	08081440 	call	808144 <_Balloc>
  808a30:	1023883a 	mov	r17,r2
  808a34:	10000726 	beq	r2,zero,808a54 <__pow5mult+0x12c>
  b->_x[0] = i;
  808a38:	00809c44 	movi	r2,625
  808a3c:	88800515 	stw	r2,20(r17)
  b->_wds = 1;
  808a40:	00800044 	movi	r2,1
  808a44:	88800415 	stw	r2,16(r17)
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
  808a48:	9c401215 	stw	r17,72(r19)
      p5->_next = 0;
  808a4c:	88000015 	stw	zero,0(r17)
  808a50:	003fca06 	br	80897c <__pow5mult+0x54>
  b = eBalloc (ptr, 1);
  808a54:	01c02074 	movhi	r7,129
  808a58:	01002074 	movhi	r4,129
  808a5c:	39c8c904 	addi	r7,r7,8996
  808a60:	000d883a 	mov	r6,zero
  808a64:	01405004 	movi	r5,320
  808a68:	2108ec04 	addi	r4,r4,9136
  808a6c:	080b0f00 	call	80b0f0 <__assert_func>

00808a70 <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
  808a70:	defff804 	addi	sp,sp,-32
  808a74:	dd800615 	stw	r22,24(sp)
  808a78:	dc000015 	stw	r16,0(sp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
  808a7c:	302dd17a 	srai	r22,r6,5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  808a80:	2c000417 	ldw	r16,16(r5)
  for (i = b->_maxwds; n1 > i; i <<= 1)
  808a84:	28800217 	ldw	r2,8(r5)
{
  808a88:	dd000415 	stw	r20,16(sp)
  n1 = n + b->_wds + 1;
  808a8c:	b421883a 	add	r16,r22,r16
{
  808a90:	dcc00315 	stw	r19,12(sp)
  808a94:	dc800215 	stw	r18,8(sp)
  808a98:	dc400115 	stw	r17,4(sp)
  808a9c:	dfc00715 	stw	ra,28(sp)
  808aa0:	dd400515 	stw	r21,20(sp)
  n1 = n + b->_wds + 1;
  808aa4:	85000044 	addi	r20,r16,1
{
  808aa8:	2827883a 	mov	r19,r5
  808aac:	3025883a 	mov	r18,r6
  k1 = b->_k;
  808ab0:	29400117 	ldw	r5,4(r5)
{
  808ab4:	2023883a 	mov	r17,r4
  for (i = b->_maxwds; n1 > i; i <<= 1)
  808ab8:	1500030e 	bge	r2,r20,808ac8 <__lshift+0x58>
  808abc:	1085883a 	add	r2,r2,r2
    k1++;
  808ac0:	29400044 	addi	r5,r5,1
  for (i = b->_maxwds; n1 > i; i <<= 1)
  808ac4:	153ffd16 	blt	r2,r20,808abc <__lshift+0x4c>
  b1 = eBalloc (ptr, k1);
  808ac8:	8809883a 	mov	r4,r17
  808acc:	08081440 	call	808144 <_Balloc>
  808ad0:	102b883a 	mov	r21,r2
  808ad4:	10004126 	beq	r2,zero,808bdc <__lshift+0x16c>
  x1 = b1->_x;
  808ad8:	11000504 	addi	r4,r2,20
  for (i = 0; i < n; i++)
  808adc:	0580050e 	bge	zero,r22,808af4 <__lshift+0x84>
    *x1++ = 0;
  808ae0:	b02c90ba 	slli	r22,r22,2
  808ae4:	000b883a 	mov	r5,zero
  808ae8:	b00d883a 	mov	r6,r22
  808aec:	08080540 	call	808054 <memset>
  808af0:	1589883a 	add	r4,r2,r22
  x = b->_x;
  xe = x + b->_wds;
  808af4:	9a000417 	ldw	r8,16(r19)
  x = b->_x;
  808af8:	98c00504 	addi	r3,r19,20
#ifdef Pack_32
  if (k &= 0x1f)
  808afc:	948007cc 	andi	r18,r18,31
  xe = x + b->_wds;
  808b00:	401090ba 	slli	r8,r8,2
  808b04:	1a11883a 	add	r8,r3,r8
  if (k &= 0x1f)
  808b08:	90002c26 	beq	r18,zero,808bbc <__lshift+0x14c>
    {
      k1 = 32 - k;
  808b0c:	01400804 	movi	r5,32
  808b10:	2c8bc83a 	sub	r5,r5,r18
  808b14:	2005883a 	mov	r2,r4
      z = 0;
  808b18:	000f883a 	mov	r7,zero
      do
	{
	  *x1++ = *x << k | z;
  808b1c:	19800017 	ldw	r6,0(r3)
  808b20:	10800104 	addi	r2,r2,4
	  z = *x++ >> k1;
  808b24:	18c00104 	addi	r3,r3,4
	  *x1++ = *x << k | z;
  808b28:	348c983a 	sll	r6,r6,r18
  808b2c:	31ccb03a 	or	r6,r6,r7
  808b30:	11bfff15 	stw	r6,-4(r2)
	  z = *x++ >> k1;
  808b34:	19bfff17 	ldw	r6,-4(r3)
  808b38:	314ed83a 	srl	r7,r6,r5
	}
      while (x < xe);
  808b3c:	1a3ff736 	bltu	r3,r8,808b1c <__lshift+0xac>
	  *x1++ = *x << k | z;
  808b40:	98800544 	addi	r2,r19,21
  808b44:	40802336 	bltu	r8,r2,808bd4 <__lshift+0x164>
  808b48:	44c7c83a 	sub	r3,r8,r19
  808b4c:	18fffac4 	addi	r3,r3,-21
  808b50:	1806d0ba 	srli	r3,r3,2
  808b54:	18c00044 	addi	r3,r3,1
  808b58:	180690ba 	slli	r3,r3,2
      if ((*x1 = z) != 0)
  808b5c:	20c9883a 	add	r4,r4,r3
  808b60:	21c00015 	stw	r7,0(r4)
  808b64:	38000126 	beq	r7,zero,808b6c <__lshift+0xfc>
  n1 = n + b->_wds + 1;
  808b68:	a021883a 	mov	r16,r20
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  808b6c:	ac000415 	stw	r16,16(r21)
  if (v)
  808b70:	98000726 	beq	r19,zero,808b90 <__lshift+0x120>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  808b74:	98c00117 	ldw	r3,4(r19)
  808b78:	88801317 	ldw	r2,76(r17)
  808b7c:	180690ba 	slli	r3,r3,2
  808b80:	10c5883a 	add	r2,r2,r3
  808b84:	10c00017 	ldw	r3,0(r2)
  808b88:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  808b8c:	14c00015 	stw	r19,0(r2)
  Bfree (ptr, b);
  return b1;
}
  808b90:	a805883a 	mov	r2,r21
  808b94:	dfc00717 	ldw	ra,28(sp)
  808b98:	dd800617 	ldw	r22,24(sp)
  808b9c:	dd400517 	ldw	r21,20(sp)
  808ba0:	dd000417 	ldw	r20,16(sp)
  808ba4:	dcc00317 	ldw	r19,12(sp)
  808ba8:	dc800217 	ldw	r18,8(sp)
  808bac:	dc400117 	ldw	r17,4(sp)
  808bb0:	dc000017 	ldw	r16,0(sp)
  808bb4:	dec00804 	addi	sp,sp,32
  808bb8:	f800283a 	ret
      *x1++ = *x++;
  808bbc:	18800017 	ldw	r2,0(r3)
  808bc0:	18c00104 	addi	r3,r3,4
  808bc4:	21000104 	addi	r4,r4,4
  808bc8:	20bfff15 	stw	r2,-4(r4)
    while (x < xe);
  808bcc:	1a3ffb36 	bltu	r3,r8,808bbc <__lshift+0x14c>
  808bd0:	003fe606 	br	808b6c <__lshift+0xfc>
	  *x1++ = *x << k | z;
  808bd4:	00c00104 	movi	r3,4
  808bd8:	003fe006 	br	808b5c <__lshift+0xec>
  b1 = eBalloc (ptr, k1);
  808bdc:	01c02074 	movhi	r7,129
  808be0:	01002074 	movhi	r4,129
  808be4:	39c8c904 	addi	r7,r7,8996
  808be8:	000d883a 	mov	r6,zero
  808bec:	01407644 	movi	r5,473
  808bf0:	2108ec04 	addi	r4,r4,9136
  808bf4:	080b0f00 	call	80b0f0 <__assert_func>

00808bf8 <__mcmp>:
cmp (_Bigint * a, _Bigint * b)
{
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  808bf8:	21800417 	ldw	r6,16(r4)
  j = b->_wds;
  808bfc:	28c00417 	ldw	r3,16(r5)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
  808c00:	30c5c83a 	sub	r2,r6,r3
  808c04:	30c00e1e 	bne	r6,r3,808c40 <__mcmp+0x48>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
  808c08:	180690ba 	slli	r3,r3,2
  xa0 = a->_x;
  808c0c:	21c00504 	addi	r7,r4,20
  xb0 = b->_x;
  808c10:	29400504 	addi	r5,r5,20
  xa = xa0 + j;
  808c14:	38c9883a 	add	r4,r7,r3
  xb = xb0 + j;
  808c18:	28c7883a 	add	r3,r5,r3
  808c1c:	00000106 	br	808c24 <__mcmp+0x2c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
  808c20:	3900082e 	bgeu	r7,r4,808c44 <__mcmp+0x4c>
      if (*--xa != *--xb)
  808c24:	21bfff17 	ldw	r6,-4(r4)
  808c28:	197fff17 	ldw	r5,-4(r3)
  808c2c:	213fff04 	addi	r4,r4,-4
  808c30:	18ffff04 	addi	r3,r3,-4
  808c34:	317ffa26 	beq	r6,r5,808c20 <__mcmp+0x28>
	return *xa < *xb ? -1 : 1;
  808c38:	3140032e 	bgeu	r6,r5,808c48 <__mcmp+0x50>
  808c3c:	00bfffc4 	movi	r2,-1
	break;
    }
  return 0;
}
  808c40:	f800283a 	ret
  808c44:	f800283a 	ret
	return *xa < *xb ? -1 : 1;
  808c48:	00800044 	movi	r2,1
  808c4c:	f800283a 	ret

00808c50 <__mdiff>:
  i = a->_wds;
  808c50:	28800417 	ldw	r2,16(r5)
  j = b->_wds;
  808c54:	30c00417 	ldw	r3,16(r6)

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
  808c58:	defffc04 	addi	sp,sp,-16
  808c5c:	dc800215 	stw	r18,8(sp)
  808c60:	dc400115 	stw	r17,4(sp)
  808c64:	dc000015 	stw	r16,0(sp)
  808c68:	dfc00315 	stw	ra,12(sp)
  808c6c:	2823883a 	mov	r17,r5
  808c70:	3021883a 	mov	r16,r6
  if (i -= j)
  808c74:	10e5c83a 	sub	r18,r2,r3
  808c78:	10c0641e 	bne	r2,r3,808e0c <__mdiff+0x1bc>
  xa = xa0 + j;
  808c7c:	180c90ba 	slli	r6,r3,2
  xa0 = a->_x;
  808c80:	29400504 	addi	r5,r5,20
  xb0 = b->_x;
  808c84:	80c00504 	addi	r3,r16,20
  xa = xa0 + j;
  808c88:	2985883a 	add	r2,r5,r6
  xb = xb0 + j;
  808c8c:	1987883a 	add	r3,r3,r6
  808c90:	00000106 	br	808c98 <__mdiff+0x48>
      if (xa <= xa0)
  808c94:	2880642e 	bgeu	r5,r2,808e28 <__mdiff+0x1d8>
      if (*--xa != *--xb)
  808c98:	11bfff17 	ldw	r6,-4(r2)
  808c9c:	19ffff17 	ldw	r7,-4(r3)
  808ca0:	10bfff04 	addi	r2,r2,-4
  808ca4:	18ffff04 	addi	r3,r3,-4
  808ca8:	31fffa26 	beq	r6,r7,808c94 <__mdiff+0x44>
	return *xa < *xb ? -1 : 1;
  808cac:	31c05236 	bltu	r6,r7,808df8 <__mdiff+0x1a8>
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = eBalloc (ptr, a->_k);
  808cb0:	89400117 	ldw	r5,4(r17)
  808cb4:	08081440 	call	808144 <_Balloc>
  808cb8:	10006226 	beq	r2,zero,808e44 <__mdiff+0x1f4>
  c->_sign = i;
  wa = a->_wds;
  808cbc:	8a400417 	ldw	r9,16(r17)
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
  808cc0:	83000417 	ldw	r12,16(r16)
  xa = a->_x;
  808cc4:	8ac00504 	addi	r11,r17,20
  xae = xa + wa;
  808cc8:	481090ba 	slli	r8,r9,2
  xbe = xb + wb;
  808ccc:	601890ba 	slli	r12,r12,2
  xb = b->_x;
  808cd0:	81800504 	addi	r6,r16,20
  xc = c->_x;
  808cd4:	13400504 	addi	r13,r2,20
  c->_sign = i;
  808cd8:	14800315 	stw	r18,12(r2)
  xae = xa + wa;
  808cdc:	5a11883a 	add	r8,r11,r8
  xbe = xb + wb;
  808ce0:	3319883a 	add	r12,r6,r12
  xc = c->_x;
  808ce4:	681d883a 	mov	r14,r13
  xa = a->_x;
  808ce8:	5815883a 	mov	r10,r11
  borrow = 0;
  808cec:	0007883a 	mov	r3,zero
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  808cf0:	51000017 	ldw	r4,0(r10)
  808cf4:	31c00017 	ldw	r7,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  808cf8:	73800104 	addi	r14,r14,4
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  808cfc:	217fffcc 	andi	r5,r4,65535
  808d00:	28cb883a 	add	r5,r5,r3
  808d04:	38ffffcc 	andi	r3,r7,65535
  808d08:	28cbc83a 	sub	r5,r5,r3
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808d0c:	380ed43a 	srli	r7,r7,16
  808d10:	2006d43a 	srli	r3,r4,16
      borrow = y >> 16;
  808d14:	2809d43a 	srai	r4,r5,16
      Storeinc (xc, z, y);
  808d18:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808d1c:	19c7c83a 	sub	r3,r3,r7
  808d20:	1907883a 	add	r3,r3,r4
      Storeinc (xc, z, y);
  808d24:	1808943a 	slli	r4,r3,16
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808d28:	31800104 	addi	r6,r6,4
      borrow = z >> 16;
  808d2c:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  808d30:	214ab03a 	or	r5,r4,r5
  808d34:	717fff15 	stw	r5,-4(r14)
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808d38:	52800104 	addi	r10,r10,4
    }
  while (xb < xbe);
  808d3c:	333fec36 	bltu	r6,r12,808cf0 <__mdiff+0xa0>
  808d40:	640fc83a 	sub	r7,r12,r16
  808d44:	39fffac4 	addi	r7,r7,-21
  808d48:	84000544 	addi	r16,r16,21
  808d4c:	380ed0ba 	srli	r7,r7,2
  808d50:	64003336 	bltu	r12,r16,808e20 <__mdiff+0x1d0>
  808d54:	380890ba 	slli	r4,r7,2
  808d58:	6909883a 	add	r4,r13,r4
  808d5c:	64002e36 	bltu	r12,r16,808e18 <__mdiff+0x1c8>
  808d60:	39800044 	addi	r6,r7,1
  808d64:	300c90ba 	slli	r6,r6,2
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  808d68:	5997883a 	add	r11,r11,r6
      Storeinc (xc, z, y);
  808d6c:	699b883a 	add	r13,r13,r6
  while (xa < xae)
  808d70:	5a00152e 	bgeu	r11,r8,808dc8 <__mdiff+0x178>
      Storeinc (xc, z, y);
  808d74:	680f883a 	mov	r7,r13
  while (xa < xae)
  808d78:	580d883a 	mov	r6,r11
    {
      y = (*xa & 0xffff) + borrow;
  808d7c:	31000017 	ldw	r4,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  808d80:	39c00104 	addi	r7,r7,4
      z = (*xa++ >> 16) + borrow;
  808d84:	31800104 	addi	r6,r6,4
      y = (*xa & 0xffff) + borrow;
  808d88:	217fffcc 	andi	r5,r4,65535
  808d8c:	28cb883a 	add	r5,r5,r3
      borrow = y >> 16;
  808d90:	2815d43a 	srai	r10,r5,16
      z = (*xa++ >> 16) + borrow;
  808d94:	2006d43a 	srli	r3,r4,16
      Storeinc (xc, z, y);
  808d98:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) + borrow;
  808d9c:	1a87883a 	add	r3,r3,r10
      Storeinc (xc, z, y);
  808da0:	1814943a 	slli	r10,r3,16
      borrow = z >> 16;
  808da4:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  808da8:	514ab03a 	or	r5,r10,r5
  808dac:	397fff15 	stw	r5,-4(r7)
  while (xa < xae)
  808db0:	323ff236 	bltu	r6,r8,808d7c <__mdiff+0x12c>
  808db4:	413fffc4 	addi	r4,r8,-1
  808db8:	22c9c83a 	sub	r4,r4,r11
  808dbc:	2008d0ba 	srli	r4,r4,2
  808dc0:	200890ba 	slli	r4,r4,2
  808dc4:	6909883a 	add	r4,r13,r4
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
  808dc8:	2800041e 	bne	r5,zero,808ddc <__mdiff+0x18c>
  808dcc:	20ffff17 	ldw	r3,-4(r4)
    wa--;
  808dd0:	4a7fffc4 	addi	r9,r9,-1
  while (!*--xc)
  808dd4:	213fff04 	addi	r4,r4,-4
  808dd8:	183ffc26 	beq	r3,zero,808dcc <__mdiff+0x17c>
  c->_wds = wa;
  808ddc:	12400415 	stw	r9,16(r2)
  return c;
}
  808de0:	dfc00317 	ldw	ra,12(sp)
  808de4:	dc800217 	ldw	r18,8(sp)
  808de8:	dc400117 	ldw	r17,4(sp)
  808dec:	dc000017 	ldw	r16,0(sp)
  808df0:	dec00404 	addi	sp,sp,16
  808df4:	f800283a 	ret
  if (i < 0)
  808df8:	8805883a 	mov	r2,r17
      i = 1;
  808dfc:	04800044 	movi	r18,1
      a = b;
  808e00:	8023883a 	mov	r17,r16
      b = c;
  808e04:	1021883a 	mov	r16,r2
  808e08:	003fa906 	br	808cb0 <__mdiff+0x60>
  if (i < 0)
  808e0c:	903ffa16 	blt	r18,zero,808df8 <__mdiff+0x1a8>
    i = 0;
  808e10:	0025883a 	mov	r18,zero
  808e14:	003fa606 	br	808cb0 <__mdiff+0x60>
  808e18:	01800104 	movi	r6,4
  808e1c:	003fd206 	br	808d68 <__mdiff+0x118>
  808e20:	0009883a 	mov	r4,zero
  808e24:	003fcc06 	br	808d58 <__mdiff+0x108>
      c = eBalloc (ptr, 0);
  808e28:	000b883a 	mov	r5,zero
  808e2c:	08081440 	call	808144 <_Balloc>
  808e30:	10000b26 	beq	r2,zero,808e60 <__mdiff+0x210>
      c->_wds = 1;
  808e34:	00c00044 	movi	r3,1
  808e38:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
  808e3c:	10000515 	stw	zero,20(r2)
      return c;
  808e40:	003fe706 	br	808de0 <__mdiff+0x190>
  c = eBalloc (ptr, a->_k);
  808e44:	01c02074 	movhi	r7,129
  808e48:	01002074 	movhi	r4,129
  808e4c:	39c8c904 	addi	r7,r7,8996
  808e50:	000d883a 	mov	r6,zero
  808e54:	01409004 	movi	r5,576
  808e58:	2108ec04 	addi	r4,r4,9136
  808e5c:	080b0f00 	call	80b0f0 <__assert_func>
      c = eBalloc (ptr, 0);
  808e60:	01c02074 	movhi	r7,129
  808e64:	01002074 	movhi	r4,129
  808e68:	39c8c904 	addi	r7,r7,8996
  808e6c:	000d883a 	mov	r6,zero
  808e70:	01408c84 	movi	r5,562
  808e74:	2108ec04 	addi	r4,r4,9136
  808e78:	080b0f00 	call	80b0f0 <__assert_func>

00808e7c <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
  808e7c:	28dffc2c 	andhi	r3,r5,32752
  808e80:	017f3034 	movhi	r5,64704
  808e84:	1947883a 	add	r3,r3,r5
#ifndef Sudden_Underflow
  if (L > 0)
  808e88:	00c0020e 	bge	zero,r3,808e94 <__ulp+0x18>
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
  808e8c:	0005883a 	mov	r2,zero
  808e90:	f800283a 	ret
      L = -L >> Exp_shift;
  808e94:	00c7c83a 	sub	r3,zero,r3
  808e98:	1807d53a 	srai	r3,r3,20
      if (L < Exp_shift)
  808e9c:	18800508 	cmpgei	r2,r3,20
  808ea0:	1000041e 	bne	r2,zero,808eb4 <__ulp+0x38>
	  word0 (a) = 0x80000 >> L;
  808ea4:	00800234 	movhi	r2,8
  808ea8:	10c7d83a 	sra	r3,r2,r3
	  word1 (a) = 0;
  808eac:	0005883a 	mov	r2,zero
  808eb0:	f800283a 	ret
#endif
	}
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
  808eb4:	193ffb04 	addi	r4,r3,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  808eb8:	208007c8 	cmpgei	r2,r4,31
	  word0 (a) = 0;
  808ebc:	0007883a 	mov	r3,zero
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  808ec0:	1000031e 	bne	r2,zero,808ed0 <__ulp+0x54>
  808ec4:	00a00034 	movhi	r2,32768
  808ec8:	1104d83a 	srl	r2,r2,r4
  808ecc:	f800283a 	ret
  808ed0:	00800044 	movi	r2,1
#endif
	}
    }
#endif
  return a.d;
}
  808ed4:	f800283a 	ret

00808ed8 <__b2d>:

double
b2d (_Bigint * a, int *e)
{
  808ed8:	defffa04 	addi	sp,sp,-24
  808edc:	dc400115 	stw	r17,4(sp)
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  808ee0:	24400417 	ldw	r17,16(r4)
{
  808ee4:	dc000015 	stw	r16,0(sp)
  xa0 = a->_x;
  808ee8:	24000504 	addi	r16,r4,20
  xa = xa0 + a->_wds;
  808eec:	882290ba 	slli	r17,r17,2
{
  808ef0:	dc800215 	stw	r18,8(sp)
  808ef4:	dd000415 	stw	r20,16(sp)
  xa = xa0 + a->_wds;
  808ef8:	8463883a 	add	r17,r16,r17
  y = *--xa;
  808efc:	8cbfff17 	ldw	r18,-4(r17)
{
  808f00:	dcc00315 	stw	r19,12(sp)
  808f04:	dfc00515 	stw	ra,20(sp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  808f08:	9009883a 	mov	r4,r18
{
  808f0c:	2827883a 	mov	r19,r5
  k = hi0bits (y);
  808f10:	08084a00 	call	8084a0 <__hi0bits>
  *e = 32 - k;
  808f14:	00c00804 	movi	r3,32
  808f18:	1889c83a 	sub	r4,r3,r2
  808f1c:	99000015 	stw	r4,0(r19)
#ifdef Pack_32
  if (k < Ebits)
  808f20:	110002c8 	cmpgei	r4,r2,11
  y = *--xa;
  808f24:	8d3fff04 	addi	r20,r17,-4
  if (k < Ebits)
  808f28:	20002026 	beq	r4,zero,808fac <__b2d+0xd4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
  808f2c:	10bffd44 	addi	r2,r2,-11
  z = xa > xa0 ? *--xa : 0;
  808f30:	85000e2e 	bgeu	r16,r20,808f6c <__b2d+0x94>
  808f34:	897ffe17 	ldw	r5,-8(r17)
  if (k -= Ebits)
  808f38:	10001226 	beq	r2,zero,808f84 <__b2d+0xac>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
  808f3c:	1889c83a 	sub	r4,r3,r2
  808f40:	90a4983a 	sll	r18,r18,r2
  808f44:	2906d83a 	srl	r3,r5,r4
  z = xa > xa0 ? *--xa : 0;
  808f48:	89bffe04 	addi	r6,r17,-8
      y = xa > xa0 ? *--xa : 0;
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
  808f4c:	2884983a 	sll	r2,r5,r2
      d0 = Exp_1 | y << k | z >> (32 - k);
  808f50:	90e4b03a 	or	r18,r18,r3
  808f54:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  808f58:	81800c2e 	bgeu	r16,r6,808f8c <__b2d+0xb4>
      d1 = z << k | y >> (32 - k);
  808f5c:	897ffd17 	ldw	r5,-12(r17)
  808f60:	2908d83a 	srl	r4,r5,r4
  808f64:	1104b03a 	or	r2,r2,r4
  808f68:	00000806 	br	808f8c <__b2d+0xb4>
  if (k -= Ebits)
  808f6c:	10000426 	beq	r2,zero,808f80 <__b2d+0xa8>
      d0 = Exp_1 | y << k | z >> (32 - k);
  808f70:	90a4983a 	sll	r18,r18,r2
  808f74:	0005883a 	mov	r2,zero
  808f78:	90cffc34 	orhi	r3,r18,16368
      y = xa > xa0 ? *--xa : 0;
  808f7c:	00000306 	br	808f8c <__b2d+0xb4>
  z = xa > xa0 ? *--xa : 0;
  808f80:	000b883a 	mov	r5,zero
#endif
    }
  else
    {
      d0 = Exp_1 | y;
  808f84:	90cffc34 	orhi	r3,r18,16368
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
  808f88:	2805883a 	mov	r2,r5
#else
#undef d0
#undef d1
#endif
  return d.d;
}
  808f8c:	dfc00517 	ldw	ra,20(sp)
  808f90:	dd000417 	ldw	r20,16(sp)
  808f94:	dcc00317 	ldw	r19,12(sp)
  808f98:	dc800217 	ldw	r18,8(sp)
  808f9c:	dc400117 	ldw	r17,4(sp)
  808fa0:	dc000017 	ldw	r16,0(sp)
  808fa4:	dec00604 	addi	sp,sp,24
  808fa8:	f800283a 	ret
      d0 = Exp_1 | y >> (Ebits - k);
  808fac:	014002c4 	movi	r5,11
  808fb0:	2889c83a 	sub	r4,r5,r2
  808fb4:	9106d83a 	srl	r3,r18,r4
  808fb8:	18cffc34 	orhi	r3,r3,16368
      w = xa > xa0 ? *--xa : 0;
  808fbc:	85000536 	bltu	r16,r20,808fd4 <__b2d+0xfc>
  808fc0:	000b883a 	mov	r5,zero
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  808fc4:	10800544 	addi	r2,r2,21
  808fc8:	9084983a 	sll	r2,r18,r2
  808fcc:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  808fd0:	003fee06 	br	808f8c <__b2d+0xb4>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  808fd4:	897ffe17 	ldw	r5,-8(r17)
  808fd8:	290ad83a 	srl	r5,r5,r4
  808fdc:	003ff906 	br	808fc4 <__b2d+0xec>

00808fe0 <__d2b>:
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
  808fe0:	defff804 	addi	sp,sp,-32
  808fe4:	dd000615 	stw	r20,24(sp)
  808fe8:	2829883a 	mov	r20,r5
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = eBalloc (ptr, 1);
  808fec:	01400044 	movi	r5,1
{
  808ff0:	dcc00515 	stw	r19,20(sp)
  808ff4:	dc000215 	stw	r16,8(sp)
  808ff8:	dfc00715 	stw	ra,28(sp)
  808ffc:	dc800415 	stw	r18,16(sp)
  809000:	dc400315 	stw	r17,12(sp)
  809004:	3021883a 	mov	r16,r6
  809008:	3827883a 	mov	r19,r7
  b = eBalloc (ptr, 1);
  80900c:	08081440 	call	808144 <_Balloc>
  809010:	10004526 	beq	r2,zero,809128 <__d2b+0x148>
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809014:	8024d53a 	srli	r18,r16,20
  z = d0 & Frac_mask;
  809018:	01800434 	movhi	r6,16
  80901c:	31bfffc4 	addi	r6,r6,-1
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  809020:	9481ffcc 	andi	r18,r18,2047
  809024:	1023883a 	mov	r17,r2
  z = d0 & Frac_mask;
  809028:	81a0703a 	and	r16,r16,r6
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  80902c:	90000126 	beq	r18,zero,809034 <__d2b+0x54>
    z |= Exp_msk1;
  809030:	84000434 	orhi	r16,r16,16
  809034:	dc000115 	stw	r16,4(sp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
  809038:	a0002226 	beq	r20,zero,8090c4 <__d2b+0xe4>
    {
      y = d1;
      k = lo0bits (&y);
  80903c:	d809883a 	mov	r4,sp
      y = d1;
  809040:	dd000015 	stw	r20,0(sp)
      k = lo0bits (&y);
  809044:	08085040 	call	808504 <__lo0bits>
      if (k)
	{
         x[0] = y | z << (32 - k);
  809048:	d8c00117 	ldw	r3,4(sp)
      if (k)
  80904c:	10003326 	beq	r2,zero,80911c <__d2b+0x13c>
         x[0] = y | z << (32 - k);
  809050:	01000804 	movi	r4,32
  809054:	2089c83a 	sub	r4,r4,r2
  809058:	1908983a 	sll	r4,r3,r4
  80905c:	d9400017 	ldw	r5,0(sp)
	  z >>= k;
  809060:	1886d83a 	srl	r3,r3,r2
         x[0] = y | z << (32 - k);
  809064:	2148b03a 	or	r4,r4,r5
  809068:	89000515 	stw	r4,20(r17)
	  z >>= k;
  80906c:	d8c00115 	stw	r3,4(sp)
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
  809070:	88c00615 	stw	r3,24(r17)
  809074:	1800271e 	bne	r3,zero,809114 <__d2b+0x134>
  809078:	04000044 	movi	r16,1
  80907c:	8c000415 	stw	r16,16(r17)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
  809080:	90001926 	beq	r18,zero,8090e8 <__d2b+0x108>
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
      *bits = P - k;
  809084:	00c00d44 	movi	r3,53
      *e = de - Bias - (P - 1) + k;
  809088:	94bef344 	addi	r18,r18,-1075
  80908c:	90a5883a 	add	r18,r18,r2
      *bits = P - k;
  809090:	1885c83a 	sub	r2,r3,r2
  809094:	d8c00817 	ldw	r3,32(sp)
      *e = de - Bias - (P - 1) + k;
  809098:	9c800015 	stw	r18,0(r19)
      *bits = P - k;
  80909c:	18800015 	stw	r2,0(r3)
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
  8090a0:	8805883a 	mov	r2,r17
  8090a4:	dfc00717 	ldw	ra,28(sp)
  8090a8:	dd000617 	ldw	r20,24(sp)
  8090ac:	dcc00517 	ldw	r19,20(sp)
  8090b0:	dc800417 	ldw	r18,16(sp)
  8090b4:	dc400317 	ldw	r17,12(sp)
  8090b8:	dc000217 	ldw	r16,8(sp)
  8090bc:	dec00804 	addi	sp,sp,32
  8090c0:	f800283a 	ret
      k = lo0bits (&z);
  8090c4:	d9000104 	addi	r4,sp,4
  8090c8:	08085040 	call	808504 <__lo0bits>
      i = b->_wds = 1;
  8090cc:	00c00044 	movi	r3,1
  8090d0:	88c00415 	stw	r3,16(r17)
      x[0] = z;
  8090d4:	d8c00117 	ldw	r3,4(sp)
      k += 32;
  8090d8:	10800804 	addi	r2,r2,32
      i = b->_wds = 1;
  8090dc:	04000044 	movi	r16,1
      x[0] = z;
  8090e0:	88c00515 	stw	r3,20(r17)
  if (de)
  8090e4:	903fe71e 	bne	r18,zero,809084 <__d2b+0xa4>
      *bits = 32 * i - hi0bits (x[i - 1]);
  8090e8:	800690ba 	slli	r3,r16,2
      *e = de - Bias - (P - 1) + 1 + k;
  8090ec:	10bef384 	addi	r2,r2,-1074
  8090f0:	98800015 	stw	r2,0(r19)
      *bits = 32 * i - hi0bits (x[i - 1]);
  8090f4:	88c5883a 	add	r2,r17,r3
  8090f8:	11000417 	ldw	r4,16(r2)
  8090fc:	8020917a 	slli	r16,r16,5
  809100:	08084a00 	call	8084a0 <__hi0bits>
  809104:	80a1c83a 	sub	r16,r16,r2
  809108:	d8800817 	ldw	r2,32(sp)
  80910c:	14000015 	stw	r16,0(r2)
  return b;
  809110:	003fe306 	br	8090a0 <__d2b+0xc0>
      i = b->_wds = (x[1] = z) ? 2 : 1;
  809114:	04000084 	movi	r16,2
  809118:	003fd806 	br	80907c <__d2b+0x9c>
	x[0] = y;
  80911c:	d9000017 	ldw	r4,0(sp)
  809120:	89000515 	stw	r4,20(r17)
  809124:	003fd206 	br	809070 <__d2b+0x90>
  b = eBalloc (ptr, 1);
  809128:	01c02074 	movhi	r7,129
  80912c:	01002074 	movhi	r4,129
  809130:	39c8c904 	addi	r7,r7,8996
  809134:	000d883a 	mov	r6,zero
  809138:	0140c284 	movi	r5,778
  80913c:	2108ec04 	addi	r4,r4,9136
  809140:	080b0f00 	call	80b0f0 <__assert_func>

00809144 <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
  809144:	defff904 	addi	sp,sp,-28
  809148:	dc400315 	stw	r17,12(sp)
  80914c:	2823883a 	mov	r17,r5
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  809150:	d80b883a 	mov	r5,sp
{
  809154:	dfc00615 	stw	ra,24(sp)
  809158:	dcc00515 	stw	r19,20(sp)
  80915c:	dc800415 	stw	r18,16(sp)
  809160:	2027883a 	mov	r19,r4
  809164:	dc000215 	stw	r16,8(sp)
  da.d = b2d (a, &ka);
  809168:	0808ed80 	call	808ed8 <__b2d>
  db.d = b2d (b, &kb);
  80916c:	d9400104 	addi	r5,sp,4
  809170:	8809883a 	mov	r4,r17
  da.d = b2d (a, &ka);
  809174:	1025883a 	mov	r18,r2
  809178:	1821883a 	mov	r16,r3
  db.d = b2d (b, &kb);
  80917c:	0808ed80 	call	808ed8 <__b2d>
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809180:	89000417 	ldw	r4,16(r17)
  809184:	9a000417 	ldw	r8,16(r19)
  809188:	d9400117 	ldw	r5,4(sp)
  db.d = b2d (b, &kb);
  80918c:	100d883a 	mov	r6,r2
  k = ka - kb + 32 * (a->_wds - b->_wds);
  809190:	4111c83a 	sub	r8,r8,r4
  809194:	d9000017 	ldw	r4,0(sp)
  809198:	4010917a 	slli	r8,r8,5
  db.d = b2d (b, &kb);
  80919c:	180f883a 	mov	r7,r3
  k = ka - kb + 32 * (a->_wds - b->_wds);
  8091a0:	2149c83a 	sub	r4,r4,r5
  8091a4:	4111883a 	add	r8,r8,r4
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
  8091a8:	02000c0e 	bge	zero,r8,8091dc <__ratio+0x98>
    word0 (da) += k * Exp_msk1;
  8091ac:	4010953a 	slli	r8,r8,20
  8091b0:	4421883a 	add	r16,r8,r16
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
  8091b4:	9009883a 	mov	r4,r18
  8091b8:	800b883a 	mov	r5,r16
  8091bc:	080d5c40 	call	80d5c4 <__divdf3>
}
  8091c0:	dfc00617 	ldw	ra,24(sp)
  8091c4:	dcc00517 	ldw	r19,20(sp)
  8091c8:	dc800417 	ldw	r18,16(sp)
  8091cc:	dc400317 	ldw	r17,12(sp)
  8091d0:	dc000217 	ldw	r16,8(sp)
  8091d4:	dec00704 	addi	sp,sp,28
  8091d8:	f800283a 	ret
      word0 (db) += k * Exp_msk1;
  8091dc:	4010953a 	slli	r8,r8,20
  8091e0:	1a0fc83a 	sub	r7,r3,r8
  8091e4:	003ff306 	br	8091b4 <__ratio+0x70>

008091e8 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
  8091e8:	defffe04 	addi	sp,sp,-8
  8091ec:	dc000015 	stw	r16,0(sp)
  8091f0:	dfc00115 	stw	ra,4(sp)
  double v = 1.0;
  if (dig < 24)
  8091f4:	20800608 	cmpgei	r2,r4,24
{
  8091f8:	2021883a 	mov	r16,r4
  if (dig < 24)
  8091fc:	10000f26 	beq	r2,zero,80923c <_mprec_log10+0x54>
  double v = 1.0;
  809200:	0009883a 	mov	r4,zero
  809204:	014ffc34 	movhi	r5,16368
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
  809208:	000d883a 	mov	r6,zero
  80920c:	01d00934 	movhi	r7,16420
  809210:	080e1440 	call	80e144 <__muldf3>
      dig--;
  809214:	843fffc4 	addi	r16,r16,-1
      v *= 10;
  809218:	1009883a 	mov	r4,r2
  80921c:	180b883a 	mov	r5,r3
  while (dig > 0)
  809220:	803ff91e 	bne	r16,zero,809208 <_mprec_log10+0x20>
    }
  return v;
}
  809224:	2005883a 	mov	r2,r4
  809228:	2807883a 	mov	r3,r5
  80922c:	dfc00117 	ldw	ra,4(sp)
  809230:	dc000017 	ldw	r16,0(sp)
  809234:	dec00204 	addi	sp,sp,8
  809238:	f800283a 	ret
    return tens[dig];
  80923c:	202090fa 	slli	r16,r4,3
  809240:	00802074 	movhi	r2,129
  809244:	10891d04 	addi	r2,r2,9332
  809248:	1421883a 	add	r16,r2,r16
  80924c:	81000017 	ldw	r4,0(r16)
  809250:	81400117 	ldw	r5,4(r16)
  809254:	003ff306 	br	809224 <_mprec_log10+0x3c>

00809258 <__copybits>:
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
  809258:	297fffc4 	addi	r5,r5,-1
  80925c:	280fd17a 	srai	r7,r5,5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
  809260:	31400417 	ldw	r5,16(r6)
	x = b->_x;
  809264:	30800504 	addi	r2,r6,20
	ce = c + ((n-1) >> kshift) + 1;
  809268:	39c00044 	addi	r7,r7,1
	xe = x + b->_wds;
  80926c:	280a90ba 	slli	r5,r5,2
	ce = c + ((n-1) >> kshift) + 1;
  809270:	380e90ba 	slli	r7,r7,2
	xe = x + b->_wds;
  809274:	114b883a 	add	r5,r2,r5
	ce = c + ((n-1) >> kshift) + 1;
  809278:	21cf883a 	add	r7,r4,r7
	while(x < xe)
  80927c:	11400c2e 	bgeu	r2,r5,8092b0 <__copybits+0x58>
  809280:	2007883a 	mov	r3,r4
		*c++ = *x++;
  809284:	12000017 	ldw	r8,0(r2)
  809288:	10800104 	addi	r2,r2,4
  80928c:	18c00104 	addi	r3,r3,4
  809290:	1a3fff15 	stw	r8,-4(r3)
	while(x < xe)
  809294:	117ffb36 	bltu	r2,r5,809284 <__copybits+0x2c>
		*c++ = *x++;
  809298:	2985c83a 	sub	r2,r5,r6
  80929c:	10bffac4 	addi	r2,r2,-21
  8092a0:	1004d0ba 	srli	r2,r2,2
  8092a4:	10800044 	addi	r2,r2,1
  8092a8:	100490ba 	slli	r2,r2,2
  8092ac:	2089883a 	add	r4,r4,r2
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
  8092b0:	21c0072e 	bgeu	r4,r7,8092d0 <__copybits+0x78>
		*c++ = 0;
  8092b4:	39bfffc4 	addi	r6,r7,-1
  8092b8:	310dc83a 	sub	r6,r6,r4
  8092bc:	300cd0ba 	srli	r6,r6,2
  8092c0:	000b883a 	mov	r5,zero
  8092c4:	31800044 	addi	r6,r6,1
  8092c8:	300c90ba 	slli	r6,r6,2
  8092cc:	08080541 	jmpi	808054 <memset>
}
  8092d0:	f800283a 	ret

008092d4 <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
  8092d4:	20c00417 	ldw	r3,16(r4)
	n = k >> kshift;
  8092d8:	280dd17a 	srai	r6,r5,5
	x = b->_x;
  8092dc:	21000504 	addi	r4,r4,20
	if (n > nwds)
  8092e0:	1980080e 	bge	r3,r6,809304 <__any_on+0x30>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
  8092e4:	180490ba 	slli	r2,r3,2
  8092e8:	2085883a 	add	r2,r4,r2
	while(x > x0)
  8092ec:	20800f2e 	bgeu	r4,r2,80932c <__any_on+0x58>
		if (*--x)
  8092f0:	10ffff17 	ldw	r3,-4(r2)
  8092f4:	10bfff04 	addi	r2,r2,-4
  8092f8:	183ffc26 	beq	r3,zero,8092ec <__any_on+0x18>
			return 1;
  8092fc:	00800044 	movi	r2,1
			return 1;
	return 0;
}
  809300:	f800283a 	ret
		x1 = x2 = x[n];
  809304:	300490ba 	slli	r2,r6,2
  809308:	2085883a 	add	r2,r4,r2
	else if (n < nwds && (k &= kmask)) {
  80930c:	30fff70e 	bge	r6,r3,8092ec <__any_on+0x18>
  809310:	294007cc 	andi	r5,r5,31
  809314:	283ff526 	beq	r5,zero,8092ec <__any_on+0x18>
		x1 = x2 = x[n];
  809318:	11800017 	ldw	r6,0(r2)
		x1 >>= k;
  80931c:	3146d83a 	srl	r3,r6,r5
		x1 <<= k;
  809320:	194a983a 	sll	r5,r3,r5
		if (x1 != x2)
  809324:	317ff51e 	bne	r6,r5,8092fc <__any_on+0x28>
  809328:	003ff006 	br	8092ec <__any_on+0x18>
	return 0;
  80932c:	0005883a 	mov	r2,zero
  809330:	f800283a 	ret

00809334 <_realloc_r>:
{
  809334:	defff504 	addi	sp,sp,-44
  809338:	dc800315 	stw	r18,12(sp)
  80933c:	dfc00a15 	stw	ra,40(sp)
  809340:	df000915 	stw	fp,36(sp)
  809344:	ddc00815 	stw	r23,32(sp)
  809348:	dd800715 	stw	r22,28(sp)
  80934c:	dd400615 	stw	r21,24(sp)
  809350:	dd000515 	stw	r20,20(sp)
  809354:	dcc00415 	stw	r19,16(sp)
  809358:	dc400215 	stw	r17,8(sp)
  80935c:	dc000115 	stw	r16,4(sp)
  809360:	3025883a 	mov	r18,r6
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809364:	28008b26 	beq	r5,zero,809594 <_realloc_r+0x260>
  809368:	2821883a 	mov	r16,r5
  80936c:	2027883a 	mov	r19,r4
  nb = request2size(bytes);
  809370:	944002c4 	addi	r17,r18,11
  MALLOC_LOCK;
  809374:	080fb2c0 	call	80fb2c <__malloc_lock>
  nb = request2size(bytes);
  809378:	888005f0 	cmpltui	r2,r17,23
  80937c:	1000521e 	bne	r2,zero,8094c8 <_realloc_r+0x194>
  809380:	017ffe04 	movi	r5,-8
  809384:	8962703a 	and	r17,r17,r5
  if (nb > INT_MAX || nb < bytes)
  809388:	8807883a 	mov	r3,r17
  80938c:	88005116 	blt	r17,zero,8094d4 <_realloc_r+0x1a0>
  809390:	8c805036 	bltu	r17,r18,8094d4 <_realloc_r+0x1a0>
  newsize = oldsize = chunksize(oldp);
  809394:	80bfff17 	ldw	r2,-4(r16)
  809398:	017fff04 	movi	r5,-4
  newp    = oldp    = mem2chunk(oldmem);
  80939c:	857ffe04 	addi	r21,r16,-8
  newsize = oldsize = chunksize(oldp);
  8093a0:	1168703a 	and	r20,r2,r5
    next = chunk_at_offset(oldp, oldsize);
  8093a4:	ad2d883a 	add	r22,r21,r20
  if ((long)(oldsize) < (long)(nb))  
  8093a8:	a0c0390e 	bge	r20,r3,809490 <_realloc_r+0x15c>
    if (next == top || !inuse(next)) 
  8093ac:	07002074 	movhi	fp,129
  8093b0:	e70b7704 	addi	fp,fp,11740
  8093b4:	e2000217 	ldw	r8,8(fp)
  8093b8:	b1000117 	ldw	r4,4(r22)
  8093bc:	45808e26 	beq	r8,r22,8095f8 <_realloc_r+0x2c4>
  8093c0:	01bfff84 	movi	r6,-2
  8093c4:	218c703a 	and	r6,r4,r6
  8093c8:	b18d883a 	add	r6,r22,r6
  8093cc:	31800117 	ldw	r6,4(r6)
  8093d0:	3180004c 	andi	r6,r6,1
  8093d4:	30004f1e 	bne	r6,zero,809514 <_realloc_r+0x1e0>
      nextsize = chunksize(next);
  8093d8:	2148703a 	and	r4,r4,r5
      else if (((long)(nextsize + newsize) >= (long)(nb)))
  8093dc:	a10b883a 	add	r5,r20,r4
  8093e0:	28c0bf0e 	bge	r5,r3,8096e0 <_realloc_r+0x3ac>
    if (!prev_inuse(oldp))
  8093e4:	1080004c 	andi	r2,r2,1
  8093e8:	10004c1e 	bne	r2,zero,80951c <_realloc_r+0x1e8>
      prev = prev_chunk(oldp);
  8093ec:	81fffe17 	ldw	r7,-8(r16)
      prevsize = chunksize(prev);
  8093f0:	00bfff04 	movi	r2,-4
      prev = prev_chunk(oldp);
  8093f4:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  8093f8:	39400117 	ldw	r5,4(r7)
  8093fc:	288a703a 	and	r5,r5,r2
      if (next != 0)
  809400:	b0000426 	beq	r22,zero,809414 <_realloc_r+0xe0>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  809404:	a16f883a 	add	r23,r20,r5
  809408:	b92f883a 	add	r23,r23,r4
        if (next == top)
  80940c:	4580bf26 	beq	r8,r22,80970c <_realloc_r+0x3d8>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
  809410:	b8c0930e 	bge	r23,r3,809660 <_realloc_r+0x32c>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
  809414:	38004126 	beq	r7,zero,80951c <_realloc_r+0x1e8>
  809418:	a16f883a 	add	r23,r20,r5
  80941c:	b8c03f16 	blt	r23,r3,80951c <_realloc_r+0x1e8>
        unlink(prev, bck, fwd);
  809420:	38800317 	ldw	r2,12(r7)
  809424:	38c00217 	ldw	r3,8(r7)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809428:	a1bfff04 	addi	r6,r20,-4
  80942c:	31400968 	cmpgeui	r5,r6,37
        unlink(prev, bck, fwd);
  809430:	18800315 	stw	r2,12(r3)
  809434:	10c00215 	stw	r3,8(r2)
        newmem = chunk2mem(newp);
  809438:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  80943c:	3ded883a 	add	r22,r7,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809440:	2800941e 	bne	r5,zero,809694 <_realloc_r+0x360>
  809444:	30800530 	cmpltui	r2,r6,20
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809448:	80c00017 	ldw	r3,0(r16)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80944c:	1000df1e 	bne	r2,zero,8097cc <_realloc_r+0x498>
  809450:	38c00215 	stw	r3,8(r7)
  809454:	80c00117 	ldw	r3,4(r16)
  809458:	30800728 	cmpgeui	r2,r6,28
  80945c:	38c00315 	stw	r3,12(r7)
  809460:	1000dc1e 	bne	r2,zero,8097d4 <_realloc_r+0x4a0>
  809464:	80c00217 	ldw	r3,8(r16)
  809468:	38800404 	addi	r2,r7,16
  80946c:	84000204 	addi	r16,r16,8
  809470:	10c00015 	stw	r3,0(r2)
  809474:	80c00117 	ldw	r3,4(r16)
        newsize += prevsize;
  809478:	b829883a 	mov	r20,r23
  80947c:	382b883a 	mov	r21,r7
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809480:	10c00115 	stw	r3,4(r2)
  809484:	80c00217 	ldw	r3,8(r16)
  809488:	2021883a 	mov	r16,r4
  80948c:	10c00215 	stw	r3,8(r2)
    set_head_size(newp, nb);
  809490:	a9800117 	ldw	r6,4(r21)
  remainder_size = long_sub_size_t(newsize, nb);
  809494:	a445c83a 	sub	r2,r20,r17
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  809498:	10c00430 	cmpltui	r3,r2,16
    set_head_size(newp, nb);
  80949c:	3180004c 	andi	r6,r6,1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  8094a0:	18004926 	beq	r3,zero,8095c8 <_realloc_r+0x294>
    set_head_size(newp, newsize);
  8094a4:	a18cb03a 	or	r6,r20,r6
  8094a8:	a9800115 	stw	r6,4(r21)
    set_inuse_bit_at_offset(newp, newsize);
  8094ac:	b0800117 	ldw	r2,4(r22)
  8094b0:	10800054 	ori	r2,r2,1
  8094b4:	b0800115 	stw	r2,4(r22)
  MALLOC_UNLOCK;
  8094b8:	9809883a 	mov	r4,r19
  8094bc:	080fb500 	call	80fb50 <__malloc_unlock>
  return chunk2mem(newp);
  8094c0:	8025883a 	mov	r18,r16
  8094c4:	00000606 	br	8094e0 <_realloc_r+0x1ac>
  nb = request2size(bytes);
  8094c8:	04400404 	movi	r17,16
  if (nb > INT_MAX || nb < bytes)
  8094cc:	00c00404 	movi	r3,16
  8094d0:	8cbfb02e 	bgeu	r17,r18,809394 <_realloc_r+0x60>
    RERRNO = ENOMEM;
  8094d4:	00800304 	movi	r2,12
  8094d8:	98800015 	stw	r2,0(r19)
    return 0;
  8094dc:	0025883a 	mov	r18,zero
}
  8094e0:	9005883a 	mov	r2,r18
  8094e4:	dfc00a17 	ldw	ra,40(sp)
  8094e8:	df000917 	ldw	fp,36(sp)
  8094ec:	ddc00817 	ldw	r23,32(sp)
  8094f0:	dd800717 	ldw	r22,28(sp)
  8094f4:	dd400617 	ldw	r21,24(sp)
  8094f8:	dd000517 	ldw	r20,20(sp)
  8094fc:	dcc00417 	ldw	r19,16(sp)
  809500:	dc800317 	ldw	r18,12(sp)
  809504:	dc400217 	ldw	r17,8(sp)
  809508:	dc000117 	ldw	r16,4(sp)
  80950c:	dec00b04 	addi	sp,sp,44
  809510:	f800283a 	ret
    if (!prev_inuse(oldp))
  809514:	1080004c 	andi	r2,r2,1
  809518:	10006c26 	beq	r2,zero,8096cc <_realloc_r+0x398>
    newmem = mALLOc (RCALL bytes);
  80951c:	900b883a 	mov	r5,r18
  809520:	9809883a 	mov	r4,r19
  809524:	08075480 	call	807548 <_malloc_r>
  809528:	1025883a 	mov	r18,r2
    if (newmem == 0)  /* propagate failure */
  80952c:	10001626 	beq	r2,zero,809588 <_realloc_r+0x254>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
  809530:	80bfff17 	ldw	r2,-4(r16)
  809534:	013fff84 	movi	r4,-2
  809538:	90fffe04 	addi	r3,r18,-8
  80953c:	1104703a 	and	r2,r2,r4
  809540:	a885883a 	add	r2,r21,r2
  809544:	10c05b26 	beq	r2,r3,8096b4 <_realloc_r+0x380>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809548:	a1bfff04 	addi	r6,r20,-4
  80954c:	30800968 	cmpgeui	r2,r6,37
  809550:	10006a1e 	bne	r2,zero,8096fc <_realloc_r+0x3c8>
  809554:	30800530 	cmpltui	r2,r6,20
  809558:	81000017 	ldw	r4,0(r16)
  80955c:	10003726 	beq	r2,zero,80963c <_realloc_r+0x308>
  809560:	9005883a 	mov	r2,r18
  809564:	8007883a 	mov	r3,r16
  809568:	11000015 	stw	r4,0(r2)
  80956c:	19000117 	ldw	r4,4(r3)
  809570:	11000115 	stw	r4,4(r2)
  809574:	18c00217 	ldw	r3,8(r3)
  809578:	10c00215 	stw	r3,8(r2)
    fREe(RCALL oldmem);
  80957c:	800b883a 	mov	r5,r16
  809580:	9809883a 	mov	r4,r19
  809584:	08068f00 	call	8068f0 <_free_r>
    MALLOC_UNLOCK;
  809588:	9809883a 	mov	r4,r19
  80958c:	080fb500 	call	80fb50 <__malloc_unlock>
    return newmem;
  809590:	003fd306 	br	8094e0 <_realloc_r+0x1ac>
  if (oldmem == 0) return mALLOc(RCALL bytes);
  809594:	300b883a 	mov	r5,r6
}
  809598:	dfc00a17 	ldw	ra,40(sp)
  80959c:	df000917 	ldw	fp,36(sp)
  8095a0:	ddc00817 	ldw	r23,32(sp)
  8095a4:	dd800717 	ldw	r22,28(sp)
  8095a8:	dd400617 	ldw	r21,24(sp)
  8095ac:	dd000517 	ldw	r20,20(sp)
  8095b0:	dcc00417 	ldw	r19,16(sp)
  8095b4:	dc800317 	ldw	r18,12(sp)
  8095b8:	dc400217 	ldw	r17,8(sp)
  8095bc:	dc000117 	ldw	r16,4(sp)
  8095c0:	dec00b04 	addi	sp,sp,44
  if (oldmem == 0) return mALLOc(RCALL bytes);
  8095c4:	08075481 	jmpi	807548 <_malloc_r>
    set_head_size(newp, nb);
  8095c8:	344cb03a 	or	r6,r6,r17
  8095cc:	a9800115 	stw	r6,4(r21)
    remainder = chunk_at_offset(newp, nb);
  8095d0:	ac4b883a 	add	r5,r21,r17
    set_head(remainder, remainder_size | PREV_INUSE);
  8095d4:	10800054 	ori	r2,r2,1
  8095d8:	28800115 	stw	r2,4(r5)
    set_inuse_bit_at_offset(remainder, remainder_size);
  8095dc:	b0800117 	ldw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  8095e0:	29400204 	addi	r5,r5,8
  8095e4:	9809883a 	mov	r4,r19
    set_inuse_bit_at_offset(remainder, remainder_size);
  8095e8:	10800054 	ori	r2,r2,1
  8095ec:	b0800115 	stw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  8095f0:	08068f00 	call	8068f0 <_free_r>
  8095f4:	003fb006 	br	8094b8 <_realloc_r+0x184>
      nextsize = chunksize(next);
  8095f8:	2148703a 	and	r4,r4,r5
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
  8095fc:	a10b883a 	add	r5,r20,r4
  809600:	89800404 	addi	r6,r17,16
  809604:	29bf7716 	blt	r5,r6,8093e4 <_realloc_r+0xb0>
          top = chunk_at_offset(oldp, nb);
  809608:	ac6b883a 	add	r21,r21,r17
          set_head(top, (newsize - nb) | PREV_INUSE);
  80960c:	2c45c83a 	sub	r2,r5,r17
          top = chunk_at_offset(oldp, nb);
  809610:	e5400215 	stw	r21,8(fp)
          set_head(top, (newsize - nb) | PREV_INUSE);
  809614:	10800054 	ori	r2,r2,1
  809618:	a8800115 	stw	r2,4(r21)
          set_head_size(oldp, nb);
  80961c:	80bfff17 	ldw	r2,-4(r16)
	  MALLOC_UNLOCK;
  809620:	9809883a 	mov	r4,r19
          return chunk2mem(oldp);
  809624:	8025883a 	mov	r18,r16
          set_head_size(oldp, nb);
  809628:	1080004c 	andi	r2,r2,1
  80962c:	1462b03a 	or	r17,r2,r17
  809630:	847fff15 	stw	r17,-4(r16)
	  MALLOC_UNLOCK;
  809634:	080fb500 	call	80fb50 <__malloc_unlock>
          return chunk2mem(oldp);
  809638:	003fa906 	br	8094e0 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80963c:	91000015 	stw	r4,0(r18)
  809640:	80c00117 	ldw	r3,4(r16)
  809644:	30800728 	cmpgeui	r2,r6,28
  809648:	90c00115 	stw	r3,4(r18)
  80964c:	1000551e 	bne	r2,zero,8097a4 <_realloc_r+0x470>
  809650:	81000217 	ldw	r4,8(r16)
  809654:	80c00204 	addi	r3,r16,8
  809658:	90800204 	addi	r2,r18,8
  80965c:	003fc206 	br	809568 <_realloc_r+0x234>
          unlink(next, bck, fwd);
  809660:	b0800317 	ldw	r2,12(r22)
  809664:	b0c00217 	ldw	r3,8(r22)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809668:	a1bfff04 	addi	r6,r20,-4
  80966c:	31400968 	cmpgeui	r5,r6,37
          unlink(next, bck, fwd);
  809670:	18800315 	stw	r2,12(r3)
  809674:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
  809678:	38c00217 	ldw	r3,8(r7)
  80967c:	38800317 	ldw	r2,12(r7)
          newmem = chunk2mem(newp);
  809680:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  809684:	3ded883a 	add	r22,r7,r23
          unlink(prev, bck, fwd);
  809688:	18800315 	stw	r2,12(r3)
  80968c:	10c00215 	stw	r3,8(r2)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809690:	283f6c26 	beq	r5,zero,809444 <_realloc_r+0x110>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809694:	800b883a 	mov	r5,r16
  809698:	d9c00015 	stw	r7,0(sp)
  80969c:	0807f280 	call	807f28 <memmove>
  8096a0:	d9c00017 	ldw	r7,0(sp)
  8096a4:	1021883a 	mov	r16,r2
        newsize += prevsize;
  8096a8:	b829883a 	mov	r20,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8096ac:	382b883a 	mov	r21,r7
  8096b0:	003f7706 	br	809490 <_realloc_r+0x15c>
      newsize += chunksize(newp);
  8096b4:	90bfff17 	ldw	r2,-4(r18)
  8096b8:	00ffff04 	movi	r3,-4
  8096bc:	10c4703a 	and	r2,r2,r3
  8096c0:	a0a9883a 	add	r20,r20,r2
    set_inuse_bit_at_offset(remainder, remainder_size);
  8096c4:	ad2d883a 	add	r22,r21,r20
      goto split;
  8096c8:	003f7106 	br	809490 <_realloc_r+0x15c>
      prev = prev_chunk(oldp);
  8096cc:	81fffe17 	ldw	r7,-8(r16)
  8096d0:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  8096d4:	38800117 	ldw	r2,4(r7)
  8096d8:	114a703a 	and	r5,r2,r5
      if (next != 0)
  8096dc:	003f4d06 	br	809414 <_realloc_r+0xe0>
        unlink(next, bck, fwd);
  8096e0:	b0800317 	ldw	r2,12(r22)
  8096e4:	b0c00217 	ldw	r3,8(r22)
        newsize  += nextsize;
  8096e8:	2829883a 	mov	r20,r5
    set_inuse_bit_at_offset(remainder, remainder_size);
  8096ec:	a96d883a 	add	r22,r21,r5
        unlink(next, bck, fwd);
  8096f0:	18800315 	stw	r2,12(r3)
  8096f4:	10c00215 	stw	r3,8(r2)
        goto split;
  8096f8:	003f6506 	br	809490 <_realloc_r+0x15c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8096fc:	800b883a 	mov	r5,r16
  809700:	9009883a 	mov	r4,r18
  809704:	0807f280 	call	807f28 <memmove>
  809708:	003f9c06 	br	80957c <_realloc_r+0x248>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  80970c:	88800404 	addi	r2,r17,16
  809710:	b8bf4016 	blt	r23,r2,809414 <_realloc_r+0xe0>
            unlink(prev, bck, fwd);
  809714:	38800317 	ldw	r2,12(r7)
  809718:	38c00217 	ldw	r3,8(r7)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80971c:	a1bfff04 	addi	r6,r20,-4
  809720:	31000968 	cmpgeui	r4,r6,37
            unlink(prev, bck, fwd);
  809724:	18800315 	stw	r2,12(r3)
  809728:	10c00215 	stw	r3,8(r2)
            newmem = chunk2mem(newp);
  80972c:	3c800204 	addi	r18,r7,8
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809730:	20003b1e 	bne	r4,zero,809820 <_realloc_r+0x4ec>
  809734:	30800530 	cmpltui	r2,r6,20
  809738:	80c00017 	ldw	r3,0(r16)
  80973c:	1000361e 	bne	r2,zero,809818 <_realloc_r+0x4e4>
  809740:	38c00215 	stw	r3,8(r7)
  809744:	80c00117 	ldw	r3,4(r16)
  809748:	30800728 	cmpgeui	r2,r6,28
  80974c:	38c00315 	stw	r3,12(r7)
  809750:	1000401e 	bne	r2,zero,809854 <_realloc_r+0x520>
  809754:	80c00217 	ldw	r3,8(r16)
  809758:	38800404 	addi	r2,r7,16
  80975c:	84000204 	addi	r16,r16,8
  809760:	10c00015 	stw	r3,0(r2)
  809764:	80c00117 	ldw	r3,4(r16)
  809768:	10c00115 	stw	r3,4(r2)
  80976c:	80c00217 	ldw	r3,8(r16)
  809770:	10c00215 	stw	r3,8(r2)
            top = chunk_at_offset(newp, nb);
  809774:	3c47883a 	add	r3,r7,r17
            set_head(top, (newsize - nb) | PREV_INUSE);
  809778:	bc45c83a 	sub	r2,r23,r17
            top = chunk_at_offset(newp, nb);
  80977c:	e0c00215 	stw	r3,8(fp)
            set_head(top, (newsize - nb) | PREV_INUSE);
  809780:	10800054 	ori	r2,r2,1
  809784:	18800115 	stw	r2,4(r3)
            set_head_size(newp, nb);
  809788:	38800117 	ldw	r2,4(r7)
	    MALLOC_UNLOCK;
  80978c:	9809883a 	mov	r4,r19
            set_head_size(newp, nb);
  809790:	1080004c 	andi	r2,r2,1
  809794:	1462b03a 	or	r17,r2,r17
  809798:	3c400115 	stw	r17,4(r7)
	    MALLOC_UNLOCK;
  80979c:	080fb500 	call	80fb50 <__malloc_unlock>
            return newmem;
  8097a0:	003f4f06 	br	8094e0 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097a4:	80800217 	ldw	r2,8(r16)
  8097a8:	31800920 	cmpeqi	r6,r6,36
  8097ac:	90800215 	stw	r2,8(r18)
  8097b0:	80800317 	ldw	r2,12(r16)
  8097b4:	90800315 	stw	r2,12(r18)
  8097b8:	81000417 	ldw	r4,16(r16)
  8097bc:	30000f1e 	bne	r6,zero,8097fc <_realloc_r+0x4c8>
  8097c0:	80c00404 	addi	r3,r16,16
  8097c4:	90800404 	addi	r2,r18,16
  8097c8:	003f6706 	br	809568 <_realloc_r+0x234>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097cc:	2005883a 	mov	r2,r4
  8097d0:	003f2706 	br	809470 <_realloc_r+0x13c>
  8097d4:	80800217 	ldw	r2,8(r16)
  8097d8:	31800920 	cmpeqi	r6,r6,36
  8097dc:	38800415 	stw	r2,16(r7)
  8097e0:	80800317 	ldw	r2,12(r16)
  8097e4:	38800515 	stw	r2,20(r7)
  8097e8:	80c00417 	ldw	r3,16(r16)
  8097ec:	3000121e 	bne	r6,zero,809838 <_realloc_r+0x504>
  8097f0:	38800604 	addi	r2,r7,24
  8097f4:	84000404 	addi	r16,r16,16
  8097f8:	003f1d06 	br	809470 <_realloc_r+0x13c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8097fc:	91000415 	stw	r4,16(r18)
  809800:	81000517 	ldw	r4,20(r16)
  809804:	80c00604 	addi	r3,r16,24
  809808:	90800604 	addi	r2,r18,24
  80980c:	91000515 	stw	r4,20(r18)
  809810:	81000617 	ldw	r4,24(r16)
  809814:	003f5406 	br	809568 <_realloc_r+0x234>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809818:	9005883a 	mov	r2,r18
  80981c:	003fd006 	br	809760 <_realloc_r+0x42c>
  809820:	800b883a 	mov	r5,r16
  809824:	9009883a 	mov	r4,r18
  809828:	d9c00015 	stw	r7,0(sp)
  80982c:	0807f280 	call	807f28 <memmove>
  809830:	d9c00017 	ldw	r7,0(sp)
  809834:	003fcf06 	br	809774 <_realloc_r+0x440>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809838:	84000604 	addi	r16,r16,24
  80983c:	38c00615 	stw	r3,24(r7)
  809840:	80ffff17 	ldw	r3,-4(r16)
  809844:	38800804 	addi	r2,r7,32
  809848:	38c00715 	stw	r3,28(r7)
  80984c:	80c00017 	ldw	r3,0(r16)
  809850:	003f0706 	br	809470 <_realloc_r+0x13c>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  809854:	80800217 	ldw	r2,8(r16)
  809858:	31800920 	cmpeqi	r6,r6,36
  80985c:	38800415 	stw	r2,16(r7)
  809860:	80800317 	ldw	r2,12(r16)
  809864:	38800515 	stw	r2,20(r7)
  809868:	80c00417 	ldw	r3,16(r16)
  80986c:	3000031e 	bne	r6,zero,80987c <_realloc_r+0x548>
  809870:	38800604 	addi	r2,r7,24
  809874:	84000404 	addi	r16,r16,16
  809878:	003fb906 	br	809760 <_realloc_r+0x42c>
  80987c:	84000604 	addi	r16,r16,24
  809880:	38c00615 	stw	r3,24(r7)
  809884:	80ffff17 	ldw	r3,-4(r16)
  809888:	38800804 	addi	r2,r7,32
  80988c:	38c00715 	stw	r3,28(r7)
  809890:	80c00017 	ldw	r3,0(r16)
  809894:	003fb206 	br	809760 <_realloc_r+0x42c>

00809898 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
  809898:	defffe04 	addi	sp,sp,-8
  80989c:	dc000015 	stw	r16,0(sp)
  8098a0:	2021883a 	mov	r16,r4
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  8098a4:	2809883a 	mov	r4,r5
{
  8098a8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  8098ac:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  8098b0:	080fd280 	call	80fd28 <sbrk>
  8098b4:	10ffffd8 	cmpnei	r3,r2,-1
  8098b8:	18000426 	beq	r3,zero,8098cc <_sbrk_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  8098bc:	dfc00117 	ldw	ra,4(sp)
  8098c0:	dc000017 	ldw	r16,0(sp)
  8098c4:	dec00204 	addi	sp,sp,8
  8098c8:	f800283a 	ret
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  8098cc:	d0e71817 	ldw	r3,-25504(gp)
  8098d0:	183ffa26 	beq	r3,zero,8098bc <_sbrk_r+0x24>
    ptr->_errno = errno;
  8098d4:	80c00015 	stw	r3,0(r16)
}
  8098d8:	dfc00117 	ldw	ra,4(sp)
  8098dc:	dc000017 	ldw	r16,0(sp)
  8098e0:	dec00204 	addi	sp,sp,8
  8098e4:	f800283a 	ret

008098e8 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
  8098e8:	defffe04 	addi	sp,sp,-8
  8098ec:	dc000015 	stw	r16,0(sp)
  8098f0:	2821883a 	mov	r16,r5
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
  8098f4:	2940038f 	ldh	r5,14(r5)
{
  8098f8:	dfc00115 	stw	ra,4(sp)
  ret = _read_r (ptr, fp->_file, buf, n);
  8098fc:	080b7180 	call	80b718 <_read_r>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
  809900:	10000716 	blt	r2,zero,809920 <__sread+0x38>
    fp->_offset += ret;
  809904:	80c01417 	ldw	r3,80(r16)
  809908:	1887883a 	add	r3,r3,r2
  80990c:	80c01415 	stw	r3,80(r16)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
  809910:	dfc00117 	ldw	ra,4(sp)
  809914:	dc000017 	ldw	r16,0(sp)
  809918:	dec00204 	addi	sp,sp,8
  80991c:	f800283a 	ret
    fp->_flags &= ~__SOFF;	/* paranoia */
  809920:	80c0030b 	ldhu	r3,12(r16)
  809924:	18fbffcc 	andi	r3,r3,61439
  809928:	80c0030d 	sth	r3,12(r16)
}
  80992c:	dfc00117 	ldw	ra,4(sp)
  809930:	dc000017 	ldw	r16,0(sp)
  809934:	dec00204 	addi	sp,sp,8
  809938:	f800283a 	ret

0080993c <__seofread>:
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
  80993c:	0005883a 	mov	r2,zero
  809940:	f800283a 	ret

00809944 <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
  809944:	2880030b 	ldhu	r2,12(r5)
{
  809948:	defffb04 	addi	sp,sp,-20
  80994c:	dcc00315 	stw	r19,12(sp)
  809950:	dc800215 	stw	r18,8(sp)
  809954:	dc400115 	stw	r17,4(sp)
  809958:	dc000015 	stw	r16,0(sp)
  80995c:	dfc00415 	stw	ra,16(sp)
  if (fp->_flags & __SAPP)
  809960:	10c0400c 	andi	r3,r2,256
{
  809964:	2821883a 	mov	r16,r5
  809968:	2023883a 	mov	r17,r4
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80996c:	2940038f 	ldh	r5,14(r5)
{
  809970:	3025883a 	mov	r18,r6
  809974:	3827883a 	mov	r19,r7
  if (fp->_flags & __SAPP)
  809978:	18000c1e 	bne	r3,zero,8099ac <__swrite+0x68>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80997c:	10bbffcc 	andi	r2,r2,61439
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
  809980:	980f883a 	mov	r7,r19
  809984:	900d883a 	mov	r6,r18
  809988:	8809883a 	mov	r4,r17
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80998c:	8080030d 	sth	r2,12(r16)
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
  809990:	dfc00417 	ldw	ra,16(sp)
  809994:	dcc00317 	ldw	r19,12(sp)
  809998:	dc800217 	ldw	r18,8(sp)
  80999c:	dc400117 	ldw	r17,4(sp)
  8099a0:	dc000017 	ldw	r16,0(sp)
  8099a4:	dec00504 	addi	sp,sp,20
  w = _write_r (ptr, fp->_file, buf, n);
  8099a8:	080b0441 	jmpi	80b044 <_write_r>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  8099ac:	01c00084 	movi	r7,2
  8099b0:	000d883a 	mov	r6,zero
  8099b4:	080b6bc0 	call	80b6bc <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  8099b8:	8080030b 	ldhu	r2,12(r16)
  w = _write_r (ptr, fp->_file, buf, n);
  8099bc:	8140038f 	ldh	r5,14(r16)
  8099c0:	003fee06 	br	80997c <__swrite+0x38>

008099c4 <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
  8099c4:	defffe04 	addi	sp,sp,-8
  8099c8:	dc000015 	stw	r16,0(sp)
  8099cc:	2821883a 	mov	r16,r5
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  8099d0:	2940038f 	ldh	r5,14(r5)
{
  8099d4:	dfc00115 	stw	ra,4(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  8099d8:	080b6bc0 	call	80b6bc <_lseek_r>
  if (ret == -1L)
  8099dc:	10ffffd8 	cmpnei	r3,r2,-1
  8099e0:	18000826 	beq	r3,zero,809a04 <__sseek+0x40>
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
  8099e4:	80c0030b 	ldhu	r3,12(r16)
      fp->_offset = ret;
  8099e8:	80801415 	stw	r2,80(r16)
      fp->_flags |= __SOFF;
  8099ec:	18c40014 	ori	r3,r3,4096
  8099f0:	80c0030d 	sth	r3,12(r16)
    }
  return ret;
}
  8099f4:	dfc00117 	ldw	ra,4(sp)
  8099f8:	dc000017 	ldw	r16,0(sp)
  8099fc:	dec00204 	addi	sp,sp,8
  809a00:	f800283a 	ret
    fp->_flags &= ~__SOFF;
  809a04:	80c0030b 	ldhu	r3,12(r16)
  809a08:	18fbffcc 	andi	r3,r3,61439
  809a0c:	80c0030d 	sth	r3,12(r16)
}
  809a10:	dfc00117 	ldw	ra,4(sp)
  809a14:	dc000017 	ldw	r16,0(sp)
  809a18:	dec00204 	addi	sp,sp,8
  809a1c:	f800283a 	ret

00809a20 <__sclose>:
__sclose (struct _reent *ptr,
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
  809a20:	2940038f 	ldh	r5,14(r5)
  809a24:	080b0a01 	jmpi	80b0a0 <_close_r>

00809a28 <strcmp>:
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
  809a28:	2144b03a 	or	r2,r4,r5
  809a2c:	108000cc 	andi	r2,r2,3
  809a30:	1000141e 	bne	r2,zero,809a84 <strcmp+0x5c>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
  809a34:	20800017 	ldw	r2,0(r4)
  809a38:	28c00017 	ldw	r3,0(r5)
  809a3c:	10c0111e 	bne	r2,r3,809a84 <strcmp+0x5c>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
  809a40:	01ffbff4 	movhi	r7,65279
  809a44:	01a02074 	movhi	r6,32897
  809a48:	39ffbfc4 	addi	r7,r7,-257
  809a4c:	31a02004 	addi	r6,r6,-32640
  809a50:	00000306 	br	809a60 <strcmp+0x38>
      while (*a1 == *a2)
  809a54:	20800017 	ldw	r2,0(r4)
  809a58:	28c00017 	ldw	r3,0(r5)
  809a5c:	10c0091e 	bne	r2,r3,809a84 <strcmp+0x5c>
          if (DETECTNULL (*a1))
  809a60:	11c7883a 	add	r3,r2,r7
  809a64:	0084303a 	nor	r2,zero,r2
  809a68:	1884703a 	and	r2,r3,r2
  809a6c:	1184703a 	and	r2,r2,r6
	    return 0;

          a1++;
  809a70:	21000104 	addi	r4,r4,4
          a2++;
  809a74:	29400104 	addi	r5,r5,4
          if (DETECTNULL (*a1))
  809a78:	103ff626 	beq	r2,zero,809a54 <strcmp+0x2c>
	    return 0;
  809a7c:	0005883a 	mov	r2,zero
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  809a80:	f800283a 	ret
  while (*s1 != '\0' && *s1 == *s2)
  809a84:	20c00003 	ldbu	r3,0(r4)
  809a88:	18803fcc 	andi	r2,r3,255
  809a8c:	1080201c 	xori	r2,r2,128
  809a90:	10bfe004 	addi	r2,r2,-128
  809a94:	1000071e 	bne	r2,zero,809ab4 <strcmp+0x8c>
  809a98:	00000a06 	br	809ac4 <strcmp+0x9c>
  809a9c:	20c00003 	ldbu	r3,0(r4)
      s2++;
  809aa0:	29400044 	addi	r5,r5,1
  while (*s1 != '\0' && *s1 == *s2)
  809aa4:	18803fcc 	andi	r2,r3,255
  809aa8:	1080201c 	xori	r2,r2,128
  809aac:	10bfe004 	addi	r2,r2,-128
  809ab0:	10000726 	beq	r2,zero,809ad0 <strcmp+0xa8>
  809ab4:	29800007 	ldb	r6,0(r5)
      s1++;
  809ab8:	21000044 	addi	r4,r4,1
  while (*s1 != '\0' && *s1 == *s2)
  809abc:	30bff726 	beq	r6,r2,809a9c <strcmp+0x74>
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
  809ac0:	18803fcc 	andi	r2,r3,255
  809ac4:	28c00003 	ldbu	r3,0(r5)
  809ac8:	10c5c83a 	sub	r2,r2,r3
  809acc:	f800283a 	ret
  809ad0:	28c00003 	ldbu	r3,0(r5)
  809ad4:	0005883a 	mov	r2,zero
  809ad8:	10c5c83a 	sub	r2,r2,r3
  809adc:	f800283a 	ret

00809ae0 <__sprint_r.part.0>:
	if (fp->_flags2 & __SWID) {
  809ae0:	28801917 	ldw	r2,100(r5)
__sprint_r (struct _reent *ptr,
  809ae4:	defff604 	addi	sp,sp,-40
  809ae8:	dcc00315 	stw	r19,12(sp)
  809aec:	dfc00915 	stw	ra,36(sp)
  809af0:	df000815 	stw	fp,32(sp)
  809af4:	ddc00715 	stw	r23,28(sp)
  809af8:	dd800615 	stw	r22,24(sp)
  809afc:	dd400515 	stw	r21,20(sp)
  809b00:	dd000415 	stw	r20,16(sp)
  809b04:	dc800215 	stw	r18,8(sp)
  809b08:	dc400115 	stw	r17,4(sp)
  809b0c:	dc000015 	stw	r16,0(sp)
	if (fp->_flags2 & __SWID) {
  809b10:	1088000c 	andi	r2,r2,8192
__sprint_r (struct _reent *ptr,
  809b14:	3027883a 	mov	r19,r6
	if (fp->_flags2 & __SWID) {
  809b18:	10002c26 	beq	r2,zero,809bcc <__sprint_r.part.0+0xec>
		for (; uio->uio_resid != 0;
  809b1c:	30800217 	ldw	r2,8(r6)
		iov = uio->uio_iov;
  809b20:	35000017 	ldw	r20,0(r6)
  809b24:	2821883a 	mov	r16,r5
  809b28:	2023883a 	mov	r17,r4
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809b2c:	05bfff04 	movi	r22,-4
		for (; uio->uio_resid != 0;
  809b30:	10002426 	beq	r2,zero,809bc4 <__sprint_r.part.0+0xe4>
			len = iov->iov_len / sizeof (wchar_t);
  809b34:	a5400117 	ldw	r21,4(r20)
			p = (wchar_t *) iov->iov_base;
  809b38:	a5c00017 	ldw	r23,0(r20)
			len = iov->iov_len / sizeof (wchar_t);
  809b3c:	a824d0ba 	srli	r18,r21,2
			for (i = 0; i < len; i++) {
  809b40:	90001b26 	beq	r18,zero,809bb0 <__sprint_r.part.0+0xd0>
  809b44:	0039883a 	mov	fp,zero
  809b48:	00000206 	br	809b54 <__sprint_r.part.0+0x74>
  809b4c:	bdc00104 	addi	r23,r23,4
  809b50:	97001626 	beq	r18,fp,809bac <__sprint_r.part.0+0xcc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809b54:	b9400017 	ldw	r5,0(r23)
  809b58:	800d883a 	mov	r6,r16
  809b5c:	8809883a 	mov	r4,r17
  809b60:	080b57c0 	call	80b57c <_fputwc_r>
  809b64:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809b68:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809b6c:	103ff726 	beq	r2,zero,809b4c <__sprint_r.part.0+0x6c>
					err = -1;
  809b70:	00bfffc4 	movi	r2,-1
	uio->uio_resid = 0;
  809b74:	98000215 	stw	zero,8(r19)
	uio->uio_iovcnt = 0;
  809b78:	98000115 	stw	zero,4(r19)
}
  809b7c:	dfc00917 	ldw	ra,36(sp)
  809b80:	df000817 	ldw	fp,32(sp)
  809b84:	ddc00717 	ldw	r23,28(sp)
  809b88:	dd800617 	ldw	r22,24(sp)
  809b8c:	dd400517 	ldw	r21,20(sp)
  809b90:	dd000417 	ldw	r20,16(sp)
  809b94:	dcc00317 	ldw	r19,12(sp)
  809b98:	dc800217 	ldw	r18,8(sp)
  809b9c:	dc400117 	ldw	r17,4(sp)
  809ba0:	dc000017 	ldw	r16,0(sp)
  809ba4:	dec00a04 	addi	sp,sp,40
  809ba8:	f800283a 	ret
  809bac:	98800217 	ldw	r2,8(r19)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809bb0:	adaa703a 	and	r21,r21,r22
  809bb4:	1545c83a 	sub	r2,r2,r21
  809bb8:	98800215 	stw	r2,8(r19)
  809bbc:	a5000204 	addi	r20,r20,8
		for (; uio->uio_resid != 0;
  809bc0:	103fdc1e 	bne	r2,zero,809b34 <__sprint_r.part.0+0x54>
	register int err = 0;
  809bc4:	0005883a 	mov	r2,zero
  809bc8:	003fea06 	br	809b74 <__sprint_r.part.0+0x94>
		err = __sfvwrite_r(ptr, fp, uio);
  809bcc:	0806be40 	call	806be4 <__sfvwrite_r>
  809bd0:	003fe806 	br	809b74 <__sprint_r.part.0+0x94>

00809bd4 <__sprint_r>:
	if (uio->uio_resid == 0) {
  809bd4:	30c00217 	ldw	r3,8(r6)
  809bd8:	18000126 	beq	r3,zero,809be0 <__sprint_r+0xc>
}
  809bdc:	0809ae01 	jmpi	809ae0 <__sprint_r.part.0>
		uio->uio_iovcnt = 0;
  809be0:	30000115 	stw	zero,4(r6)
}
  809be4:	0005883a 	mov	r2,zero
  809be8:	f800283a 	ret

00809bec <___vfiprintf_internal_r>:
{
  809bec:	deffcf04 	addi	sp,sp,-196
  809bf0:	dd802d15 	stw	r22,180(sp)
  809bf4:	dd402c15 	stw	r21,176(sp)
  809bf8:	dd002b15 	stw	r20,172(sp)
  809bfc:	dfc03015 	stw	ra,192(sp)
  809c00:	df002f15 	stw	fp,188(sp)
  809c04:	ddc02e15 	stw	r23,184(sp)
  809c08:	dcc02a15 	stw	r19,168(sp)
  809c0c:	dc802915 	stw	r18,164(sp)
  809c10:	dc402815 	stw	r17,160(sp)
  809c14:	dc002715 	stw	r16,156(sp)
  809c18:	d9c00415 	stw	r7,16(sp)
  809c1c:	202d883a 	mov	r22,r4
  809c20:	282b883a 	mov	r21,r5
  809c24:	3029883a 	mov	r20,r6
	CHECK_INIT (data, fp);
  809c28:	20000226 	beq	r4,zero,809c34 <___vfiprintf_internal_r+0x48>
  809c2c:	20800e17 	ldw	r2,56(r4)
  809c30:	1001bd26 	beq	r2,zero,80a328 <___vfiprintf_internal_r+0x73c>
	ORIENT(fp, -1);
  809c34:	a880030b 	ldhu	r2,12(r21)
  809c38:	10c8000c 	andi	r3,r2,8192
  809c3c:	1800061e 	bne	r3,zero,809c58 <___vfiprintf_internal_r+0x6c>
	_newlib_flockfile_start (fp);
  809c40:	a8c01917 	ldw	r3,100(r21)
	ORIENT(fp, -1);
  809c44:	0137ffc4 	movi	r4,-8193
  809c48:	10880014 	ori	r2,r2,8192
  809c4c:	1906703a 	and	r3,r3,r4
  809c50:	a880030d 	sth	r2,12(r21)
  809c54:	a8c01915 	stw	r3,100(r21)
	if (cantwrite (data, fp)) {
  809c58:	10c0020c 	andi	r3,r2,8
  809c5c:	18010826 	beq	r3,zero,80a080 <___vfiprintf_internal_r+0x494>
  809c60:	a8c00417 	ldw	r3,16(r21)
  809c64:	18010626 	beq	r3,zero,80a080 <___vfiprintf_internal_r+0x494>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  809c68:	1080068c 	andi	r2,r2,26
  809c6c:	10800298 	cmpnei	r2,r2,10
  809c70:	10010b26 	beq	r2,zero,80a0a0 <___vfiprintf_internal_r+0x4b4>
	uio.uio_iov = iovp = iov;
  809c74:	dc801704 	addi	r18,sp,92
  809c78:	dc800a15 	stw	r18,40(sp)
	uio.uio_resid = 0;
  809c7c:	d8000c15 	stw	zero,48(sp)
	uio.uio_iovcnt = 0;
  809c80:	d8000b15 	stw	zero,44(sp)
	uio.uio_iov = iovp = iov;
  809c84:	9021883a 	mov	r16,r18
	char *xdigs = NULL;	/* digits for [xX] conversion */
  809c88:	d8000515 	stw	zero,20(sp)
	ret = 0;
  809c8c:	d8000115 	stw	zero,4(sp)
                while (*fmt != '\0' && *fmt != '%')
  809c90:	a0800007 	ldb	r2,0(r20)
  809c94:	1000e826 	beq	r2,zero,80a038 <___vfiprintf_internal_r+0x44c>
  809c98:	a023883a 	mov	r17,r20
  809c9c:	00000306 	br	809cac <___vfiprintf_internal_r+0xc0>
  809ca0:	88800047 	ldb	r2,1(r17)
                    fmt += 1;
  809ca4:	8c400044 	addi	r17,r17,1
                while (*fmt != '\0' && *fmt != '%')
  809ca8:	10013326 	beq	r2,zero,80a178 <___vfiprintf_internal_r+0x58c>
  809cac:	10800958 	cmpnei	r2,r2,37
  809cb0:	103ffb1e 	bne	r2,zero,809ca0 <___vfiprintf_internal_r+0xb4>
		if ((m = fmt - cp) != 0) {
  809cb4:	8d27c83a 	sub	r19,r17,r20
  809cb8:	8d01311e 	bne	r17,r20,80a180 <___vfiprintf_internal_r+0x594>
                if (*fmt == '\0')
  809cbc:	88800003 	ldbu	r2,0(r17)
  809cc0:	10803fcc 	andi	r2,r2,255
  809cc4:	1080201c 	xori	r2,r2,128
  809cc8:	10bfe004 	addi	r2,r2,-128
  809ccc:	1000da26 	beq	r2,zero,80a038 <___vfiprintf_internal_r+0x44c>
		fmt++;		/* skip over '%' */
  809cd0:	88800047 	ldb	r2,1(r17)
  809cd4:	8d000044 	addi	r20,r17,1
		sign = '\0';
  809cd8:	d8000945 	stb	zero,37(sp)
rflag:		ch = *fmt++;
  809cdc:	000b883a 	mov	r5,zero
  809ce0:	000d883a 	mov	r6,zero
		prec = -1;
  809ce4:	023fffc4 	movi	r8,-1
		width = 0;
  809ce8:	0023883a 	mov	r17,zero
		flags = 0;
  809cec:	001b883a 	mov	r13,zero
rflag:		ch = *fmt++;
  809cf0:	a5000044 	addi	r20,r20,1
reswitch:	switch (ch) {
  809cf4:	10fff804 	addi	r3,r2,-32
  809cf8:	19001668 	cmpgeui	r4,r3,89
  809cfc:	20006c1e 	bne	r4,zero,809eb0 <___vfiprintf_internal_r+0x2c4>
  809d00:	180690ba 	slli	r3,r3,2
  809d04:	01002074 	movhi	r4,129
  809d08:	1909883a 	add	r4,r3,r4
  809d0c:	20e74517 	ldw	r3,-25324(r4)
  809d10:	1800683a 	jmp	r3
  809d14:	0080a650 	cmplti	r2,zero,665
  809d18:	00809eb0 	cmpltui	r2,zero,634
  809d1c:	00809eb0 	cmpltui	r2,zero,634
  809d20:	0080a644 	movi	r2,665
  809d24:	00809eb0 	cmpltui	r2,zero,634
  809d28:	00809eb0 	cmpltui	r2,zero,634
  809d2c:	00809eb0 	cmpltui	r2,zero,634
  809d30:	00809eb0 	cmpltui	r2,zero,634
  809d34:	00809eb0 	cmpltui	r2,zero,634
  809d38:	00809eb0 	cmpltui	r2,zero,634
  809d3c:	0080a61c 	xori	r2,zero,664
  809d40:	0080a60c 	andi	r2,zero,664
  809d44:	00809eb0 	cmpltui	r2,zero,634
  809d48:	0080a5f4 	movhi	r2,663
  809d4c:	0080a5a8 	cmpgeui	r2,zero,662
  809d50:	00809eb0 	cmpltui	r2,zero,634
  809d54:	0080a59c 	xori	r2,zero,662
  809d58:	00809e78 	rdprs	r2,zero,633
  809d5c:	00809e78 	rdprs	r2,zero,633
  809d60:	00809e78 	rdprs	r2,zero,633
  809d64:	00809e78 	rdprs	r2,zero,633
  809d68:	00809e78 	rdprs	r2,zero,633
  809d6c:	00809e78 	rdprs	r2,zero,633
  809d70:	00809e78 	rdprs	r2,zero,633
  809d74:	00809e78 	rdprs	r2,zero,633
  809d78:	00809e78 	rdprs	r2,zero,633
  809d7c:	00809eb0 	cmpltui	r2,zero,634
  809d80:	00809eb0 	cmpltui	r2,zero,634
  809d84:	00809eb0 	cmpltui	r2,zero,634
  809d88:	00809eb0 	cmpltui	r2,zero,634
  809d8c:	00809eb0 	cmpltui	r2,zero,634
  809d90:	00809eb0 	cmpltui	r2,zero,634
  809d94:	00809eb0 	cmpltui	r2,zero,634
  809d98:	00809eb0 	cmpltui	r2,zero,634
  809d9c:	00809eb0 	cmpltui	r2,zero,634
  809da0:	00809eb0 	cmpltui	r2,zero,634
  809da4:	0080a498 	cmpnei	r2,zero,658
  809da8:	00809eb0 	cmpltui	r2,zero,634
  809dac:	00809eb0 	cmpltui	r2,zero,634
  809db0:	00809eb0 	cmpltui	r2,zero,634
  809db4:	00809eb0 	cmpltui	r2,zero,634
  809db8:	00809eb0 	cmpltui	r2,zero,634
  809dbc:	00809eb0 	cmpltui	r2,zero,634
  809dc0:	00809eb0 	cmpltui	r2,zero,634
  809dc4:	00809eb0 	cmpltui	r2,zero,634
  809dc8:	00809eb0 	cmpltui	r2,zero,634
  809dcc:	00809eb0 	cmpltui	r2,zero,634
  809dd0:	0080a110 	cmplti	r2,zero,644
  809dd4:	00809eb0 	cmpltui	r2,zero,634
  809dd8:	00809eb0 	cmpltui	r2,zero,634
  809ddc:	00809eb0 	cmpltui	r2,zero,634
  809de0:	00809eb0 	cmpltui	r2,zero,634
  809de4:	00809eb0 	cmpltui	r2,zero,634
  809de8:	0080a0e8 	cmpgeui	r2,zero,643
  809dec:	00809eb0 	cmpltui	r2,zero,634
  809df0:	00809eb0 	cmpltui	r2,zero,634
  809df4:	0080a6a4 	muli	r2,zero,666
  809df8:	00809eb0 	cmpltui	r2,zero,634
  809dfc:	00809eb0 	cmpltui	r2,zero,634
  809e00:	00809eb0 	cmpltui	r2,zero,634
  809e04:	00809eb0 	cmpltui	r2,zero,634
  809e08:	00809eb0 	cmpltui	r2,zero,634
  809e0c:	00809eb0 	cmpltui	r2,zero,634
  809e10:	00809eb0 	cmpltui	r2,zero,634
  809e14:	00809eb0 	cmpltui	r2,zero,634
  809e18:	00809eb0 	cmpltui	r2,zero,634
  809e1c:	00809eb0 	cmpltui	r2,zero,634
  809e20:	0080a67c 	xorhi	r2,zero,665
  809e24:	0080a330 	cmpltui	r2,zero,652
  809e28:	00809eb0 	cmpltui	r2,zero,634
  809e2c:	00809eb0 	cmpltui	r2,zero,634
  809e30:	00809eb0 	cmpltui	r2,zero,634
  809e34:	0080a3a4 	muli	r2,zero,654
  809e38:	0080a330 	cmpltui	r2,zero,652
  809e3c:	00809eb0 	cmpltui	r2,zero,634
  809e40:	00809eb0 	cmpltui	r2,zero,634
  809e44:	0080a728 	cmpgeui	r2,zero,668
  809e48:	00809eb0 	cmpltui	r2,zero,634
  809e4c:	0080a6ec 	andhi	r2,zero,667
  809e50:	0080a114 	movui	r2,644
  809e54:	0080a45c 	xori	r2,zero,657
  809e58:	0080a450 	cmplti	r2,zero,657
  809e5c:	00809eb0 	cmpltui	r2,zero,634
  809e60:	0080a3f8 	rdprs	r2,zero,655
  809e64:	00809eb0 	cmpltui	r2,zero,634
  809e68:	0080a0ec 	andhi	r2,zero,643
  809e6c:	00809eb0 	cmpltui	r2,zero,634
  809e70:	00809eb0 	cmpltui	r2,zero,634
  809e74:	0080a3b0 	cmpltui	r2,zero,654
			n = 0;
  809e78:	0023883a 	mov	r17,zero
  809e7c:	113ff404 	addi	r4,r2,-48
				n = 10 * n + to_digit (ch);
  809e80:	880690ba 	slli	r3,r17,2
				ch = *fmt++;
  809e84:	a0800007 	ldb	r2,0(r20)
  809e88:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  809e8c:	1c63883a 	add	r17,r3,r17
  809e90:	8c63883a 	add	r17,r17,r17
  809e94:	2463883a 	add	r17,r4,r17
			} while (is_digit (ch));
  809e98:	113ff404 	addi	r4,r2,-48
  809e9c:	20c002b0 	cmpltui	r3,r4,10
  809ea0:	183ff71e 	bne	r3,zero,809e80 <___vfiprintf_internal_r+0x294>
reswitch:	switch (ch) {
  809ea4:	10fff804 	addi	r3,r2,-32
  809ea8:	19001668 	cmpgeui	r4,r3,89
  809eac:	203f9426 	beq	r4,zero,809d00 <___vfiprintf_internal_r+0x114>
  809eb0:	29403fcc 	andi	r5,r5,255
  809eb4:	2803ed1e 	bne	r5,zero,80ae6c <___vfiprintf_internal_r+0x1280>
			if (ch == '\0')
  809eb8:	10005f26 	beq	r2,zero,80a038 <___vfiprintf_internal_r+0x44c>
			*cp = ch;
  809ebc:	d8800d05 	stb	r2,52(sp)
			sign = '\0';
  809ec0:	d8000945 	stb	zero,37(sp)
			break;
  809ec4:	05c00044 	movi	r23,1
			size = 1;
  809ec8:	07000044 	movi	fp,1
			cp = buf;
  809ecc:	dcc00d04 	addi	r19,sp,52
			cp = buf + BUF;
  809ed0:	db400015 	stw	r13,0(sp)
  809ed4:	0011883a 	mov	r8,zero
		if (flags & HEXPREFIX)
  809ed8:	d8800017 	ldw	r2,0(sp)
  809edc:	1380008c 	andi	r14,r2,2
  809ee0:	70000126 	beq	r14,zero,809ee8 <___vfiprintf_internal_r+0x2fc>
			realsz+= 2;
  809ee4:	bdc00084 	addi	r23,r23,2
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  809ee8:	d8800017 	ldw	r2,0(sp)
			PRINT (&sign, 1);
  809eec:	d9000b17 	ldw	r4,44(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  809ef0:	1340210c 	andi	r13,r2,132
			PRINT (&sign, 1);
  809ef4:	21800044 	addi	r6,r4,1
  809ef8:	d8800c17 	ldw	r2,48(sp)
  809efc:	300b883a 	mov	r5,r6
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  809f00:	6800021e 	bne	r13,zero,809f0c <___vfiprintf_internal_r+0x320>
			PAD (width - realsz, blanks);
  809f04:	8dc7c83a 	sub	r3,r17,r23
  809f08:	00c2e216 	blt	zero,r3,80aa94 <___vfiprintf_internal_r+0xea8>
		if (sign)
  809f0c:	d8c00947 	ldb	r3,37(sp)
			PRINT (&sign, 1);
  809f10:	81800204 	addi	r6,r16,8
		if (sign)
  809f14:	18000d26 	beq	r3,zero,809f4c <___vfiprintf_internal_r+0x360>
			PRINT (&sign, 1);
  809f18:	d8c00944 	addi	r3,sp,37
  809f1c:	10800044 	addi	r2,r2,1
  809f20:	80c00015 	stw	r3,0(r16)
  809f24:	00c00044 	movi	r3,1
  809f28:	80c00115 	stw	r3,4(r16)
  809f2c:	d8800c15 	stw	r2,48(sp)
  809f30:	d9400b15 	stw	r5,44(sp)
  809f34:	28c00208 	cmpgei	r3,r5,8
  809f38:	18029a1e 	bne	r3,zero,80a9a4 <___vfiprintf_internal_r+0xdb8>
			PRINT (ox, 2);
  809f3c:	2809883a 	mov	r4,r5
  809f40:	3021883a 	mov	r16,r6
  809f44:	29400044 	addi	r5,r5,1
  809f48:	31800204 	addi	r6,r6,8
		if (flags & HEXPREFIX)
  809f4c:	70001826 	beq	r14,zero,809fb0 <___vfiprintf_internal_r+0x3c4>
			PRINT (ox, 2);
  809f50:	d8c00984 	addi	r3,sp,38
  809f54:	10800084 	addi	r2,r2,2
  809f58:	80c00015 	stw	r3,0(r16)
  809f5c:	00c00084 	movi	r3,2
  809f60:	80c00115 	stw	r3,4(r16)
  809f64:	d8800c15 	stw	r2,48(sp)
  809f68:	d9400b15 	stw	r5,44(sp)
  809f6c:	28c00208 	cmpgei	r3,r5,8
  809f70:	1802a426 	beq	r3,zero,80aa04 <___vfiprintf_internal_r+0xe18>
	if (uio->uio_resid == 0) {
  809f74:	10032226 	beq	r2,zero,80ac00 <___vfiprintf_internal_r+0x1014>
  809f78:	d9800a04 	addi	r6,sp,40
  809f7c:	a80b883a 	mov	r5,r21
  809f80:	b009883a 	mov	r4,r22
  809f84:	da000315 	stw	r8,12(sp)
  809f88:	db400215 	stw	r13,8(sp)
  809f8c:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PRINT (ox, 2);
  809f90:	10002b1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  809f94:	d9000b17 	ldw	r4,44(sp)
  809f98:	d8800c17 	ldw	r2,48(sp)
			PRINT (ox, 2);
  809f9c:	da000317 	ldw	r8,12(sp)
  809fa0:	db400217 	ldw	r13,8(sp)
		PRINT (cp, size);
  809fa4:	d9801904 	addi	r6,sp,100
  809fa8:	21400044 	addi	r5,r4,1
			PRINT (ox, 2);
  809fac:	9021883a 	mov	r16,r18
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  809fb0:	6b402018 	cmpnei	r13,r13,128
  809fb4:	6801e526 	beq	r13,zero,80a74c <___vfiprintf_internal_r+0xb60>
		PAD (dprec - size, zeroes);
  809fb8:	4711c83a 	sub	r8,r8,fp
  809fbc:	02022416 	blt	zero,r8,80a850 <___vfiprintf_internal_r+0xc64>
		PRINT (cp, size);
  809fc0:	e085883a 	add	r2,fp,r2
  809fc4:	d9400b15 	stw	r5,44(sp)
  809fc8:	84c00015 	stw	r19,0(r16)
  809fcc:	87000115 	stw	fp,4(r16)
  809fd0:	d8800c15 	stw	r2,48(sp)
  809fd4:	29400210 	cmplti	r5,r5,8
  809fd8:	2800081e 	bne	r5,zero,809ffc <___vfiprintf_internal_r+0x410>
	if (uio->uio_resid == 0) {
  809fdc:	10009826 	beq	r2,zero,80a240 <___vfiprintf_internal_r+0x654>
  809fe0:	d9800a04 	addi	r6,sp,40
  809fe4:	a80b883a 	mov	r5,r21
  809fe8:	b009883a 	mov	r4,r22
  809fec:	0809ae00 	call	809ae0 <__sprint_r.part.0>
		PRINT (cp, size);
  809ff0:	1000131e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  809ff4:	d8800c17 	ldw	r2,48(sp)
		PRINT (cp, size);
  809ff8:	900d883a 	mov	r6,r18
		if (flags & LADJUST)
  809ffc:	d8c00017 	ldw	r3,0(sp)
  80a000:	1cc0010c 	andi	r19,r3,4
  80a004:	98000226 	beq	r19,zero,80a010 <___vfiprintf_internal_r+0x424>
			PAD (width - realsz, blanks);
  80a008:	8de1c83a 	sub	r16,r17,r23
  80a00c:	04009316 	blt	zero,r16,80a25c <___vfiprintf_internal_r+0x670>
		ret += width > realsz ? width : realsz;
  80a010:	8dc0010e 	bge	r17,r23,80a018 <___vfiprintf_internal_r+0x42c>
  80a014:	b823883a 	mov	r17,r23
  80a018:	d8c00117 	ldw	r3,4(sp)
  80a01c:	1c47883a 	add	r3,r3,r17
  80a020:	d8c00115 	stw	r3,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80a024:	1002551e 	bne	r2,zero,80a97c <___vfiprintf_internal_r+0xd90>
                while (*fmt != '\0' && *fmt != '%')
  80a028:	a0800007 	ldb	r2,0(r20)
		FLUSH ();	/* copy out the I/O vectors */
  80a02c:	d8000b15 	stw	zero,44(sp)
  80a030:	9021883a 	mov	r16,r18
                while (*fmt != '\0' && *fmt != '%')
  80a034:	103f181e 	bne	r2,zero,809c98 <___vfiprintf_internal_r+0xac>
	FLUSH ();
  80a038:	d8800c17 	ldw	r2,48(sp)
  80a03c:	10038d1e 	bne	r2,zero,80ae74 <___vfiprintf_internal_r+0x1288>
	return (__sferror (fp) ? EOF : ret);
  80a040:	a880030b 	ldhu	r2,12(r21)
  80a044:	1080100c 	andi	r2,r2,64
  80a048:	1003a51e 	bne	r2,zero,80aee0 <___vfiprintf_internal_r+0x12f4>
}
  80a04c:	d8800117 	ldw	r2,4(sp)
  80a050:	dfc03017 	ldw	ra,192(sp)
  80a054:	df002f17 	ldw	fp,188(sp)
  80a058:	ddc02e17 	ldw	r23,184(sp)
  80a05c:	dd802d17 	ldw	r22,180(sp)
  80a060:	dd402c17 	ldw	r21,176(sp)
  80a064:	dd002b17 	ldw	r20,172(sp)
  80a068:	dcc02a17 	ldw	r19,168(sp)
  80a06c:	dc802917 	ldw	r18,164(sp)
  80a070:	dc402817 	ldw	r17,160(sp)
  80a074:	dc002717 	ldw	r16,156(sp)
  80a078:	dec03104 	addi	sp,sp,196
  80a07c:	f800283a 	ret
	if (cantwrite (data, fp)) {
  80a080:	a80b883a 	mov	r5,r21
  80a084:	b009883a 	mov	r4,r22
  80a088:	08046700 	call	804670 <__swsetup_r>
  80a08c:	1003941e 	bne	r2,zero,80aee0 <___vfiprintf_internal_r+0x12f4>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  80a090:	a880030b 	ldhu	r2,12(r21)
  80a094:	1080068c 	andi	r2,r2,26
  80a098:	10800298 	cmpnei	r2,r2,10
  80a09c:	103ef51e 	bne	r2,zero,809c74 <___vfiprintf_internal_r+0x88>
  80a0a0:	a880038f 	ldh	r2,14(r21)
  80a0a4:	103ef316 	blt	r2,zero,809c74 <___vfiprintf_internal_r+0x88>
		return (__sbprintf (data, fp, fmt0, ap));
  80a0a8:	d9c00417 	ldw	r7,16(sp)
  80a0ac:	a00d883a 	mov	r6,r20
  80a0b0:	a80b883a 	mov	r5,r21
  80a0b4:	b009883a 	mov	r4,r22
}
  80a0b8:	dfc03017 	ldw	ra,192(sp)
  80a0bc:	df002f17 	ldw	fp,188(sp)
  80a0c0:	ddc02e17 	ldw	r23,184(sp)
  80a0c4:	dd802d17 	ldw	r22,180(sp)
  80a0c8:	dd402c17 	ldw	r21,176(sp)
  80a0cc:	dd002b17 	ldw	r20,172(sp)
  80a0d0:	dcc02a17 	ldw	r19,168(sp)
  80a0d4:	dc802917 	ldw	r18,164(sp)
  80a0d8:	dc402817 	ldw	r17,160(sp)
  80a0dc:	dc002717 	ldw	r16,156(sp)
  80a0e0:	dec03104 	addi	sp,sp,196
		return (__sbprintf (data, fp, fmt0, ap));
  80a0e4:	080af481 	jmpi	80af48 <__sbprintf>
			flags |= LONGINT;
  80a0e8:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80a0ec:	6880080c 	andi	r2,r13,32
  80a0f0:	10004726 	beq	r2,zero,80a210 <___vfiprintf_internal_r+0x624>
  80a0f4:	d8c00417 	ldw	r3,16(sp)
			base = DEC;
  80a0f8:	00800044 	movi	r2,1
			_uquad = UARG ();
  80a0fc:	1dc00017 	ldw	r23,0(r3)
  80a100:	1f000117 	ldw	fp,4(r3)
  80a104:	18c00204 	addi	r3,r3,8
  80a108:	d8c00415 	stw	r3,16(sp)
  80a10c:	00000906 	br	80a134 <___vfiprintf_internal_r+0x548>
			flags |= LONGINT;
  80a110:	6b400414 	ori	r13,r13,16
			_uquad = UARG ();
  80a114:	6880080c 	andi	r2,r13,32
  80a118:	10003126 	beq	r2,zero,80a1e0 <___vfiprintf_internal_r+0x5f4>
  80a11c:	d8c00417 	ldw	r3,16(sp)
			base = OCT;
  80a120:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  80a124:	1dc00017 	ldw	r23,0(r3)
  80a128:	1f000117 	ldw	fp,4(r3)
  80a12c:	18c00204 	addi	r3,r3,8
  80a130:	d8c00415 	stw	r3,16(sp)
nosign:			sign = '\0';
  80a134:	d8000945 	stb	zero,37(sp)
number:			if ((dprec = prec) >= 0)
  80a138:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  80a13c:	001d883a 	mov	r14,zero
number:			if ((dprec = prec) >= 0)
  80a140:	1800f01e 	bne	r3,zero,80a504 <___vfiprintf_internal_r+0x918>
				flags &= ~ZEROPAD;
  80a144:	04ffdfc4 	movi	r19,-129
  80a148:	6cc8703a 	and	r4,r13,r19
			if (_uquad != 0 || prec != 0) {
  80a14c:	bf06b03a 	or	r3,r23,fp
				flags &= ~ZEROPAD;
  80a150:	d9000015 	stw	r4,0(sp)
			if (_uquad != 0 || prec != 0) {
  80a154:	1802301e 	bne	r3,zero,80aa18 <___vfiprintf_internal_r+0xe2c>
  80a158:	4001f31e 	bne	r8,zero,80a928 <___vfiprintf_internal_r+0xd3c>
                       else if (base == OCT && (flags & ALT))
  80a15c:	10029e1e 	bne	r2,zero,80abd8 <___vfiprintf_internal_r+0xfec>
  80a160:	6f00004c 	andi	fp,r13,1
  80a164:	e002bc26 	beq	fp,zero,80ac58 <___vfiprintf_internal_r+0x106c>
                         *--cp = '0';
  80a168:	00800c04 	movi	r2,48
  80a16c:	d88016c5 	stb	r2,91(sp)
  80a170:	dcc016c4 	addi	r19,sp,91
  80a174:	00010006 	br	80a578 <___vfiprintf_internal_r+0x98c>
		if ((m = fmt - cp) != 0) {
  80a178:	8d27c83a 	sub	r19,r17,r20
  80a17c:	8d3fae26 	beq	r17,r20,80a038 <___vfiprintf_internal_r+0x44c>
			PRINT (cp, m);
  80a180:	d8c00c17 	ldw	r3,48(sp)
  80a184:	d8800b17 	ldw	r2,44(sp)
  80a188:	85000015 	stw	r20,0(r16)
  80a18c:	98c7883a 	add	r3,r19,r3
  80a190:	10800044 	addi	r2,r2,1
  80a194:	d8800b15 	stw	r2,44(sp)
  80a198:	84c00115 	stw	r19,4(r16)
  80a19c:	d8c00c15 	stw	r3,48(sp)
  80a1a0:	10800208 	cmpgei	r2,r2,8
  80a1a4:	1000061e 	bne	r2,zero,80a1c0 <___vfiprintf_internal_r+0x5d4>
  80a1a8:	84000204 	addi	r16,r16,8
			ret += m;
  80a1ac:	d8c00117 	ldw	r3,4(sp)
                if (*fmt == '\0')
  80a1b0:	88800003 	ldbu	r2,0(r17)
			ret += m;
  80a1b4:	1cc7883a 	add	r3,r3,r19
  80a1b8:	d8c00115 	stw	r3,4(sp)
  80a1bc:	003ec006 	br	809cc0 <___vfiprintf_internal_r+0xd4>
	if (uio->uio_resid == 0) {
  80a1c0:	18028126 	beq	r3,zero,80abc8 <___vfiprintf_internal_r+0xfdc>
  80a1c4:	d9800a04 	addi	r6,sp,40
  80a1c8:	a80b883a 	mov	r5,r21
  80a1cc:	b009883a 	mov	r4,r22
  80a1d0:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PRINT (cp, m);
  80a1d4:	103f9a1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80a1d8:	9021883a 	mov	r16,r18
  80a1dc:	003ff306 	br	80a1ac <___vfiprintf_internal_r+0x5c0>
			width = GET_ARG (n, ap, int);
  80a1e0:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80a1e4:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80a1e8:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80a1ec:	1002ac1e 	bne	r2,zero,80aca0 <___vfiprintf_internal_r+0x10b4>
  80a1f0:	6880100c 	andi	r2,r13,64
  80a1f4:	1002fb26 	beq	r2,zero,80ade4 <___vfiprintf_internal_r+0x11f8>
  80a1f8:	d8800417 	ldw	r2,16(sp)
  80a1fc:	0039883a 	mov	fp,zero
  80a200:	d8c00415 	stw	r3,16(sp)
  80a204:	15c0000b 	ldhu	r23,0(r2)
			base = OCT;
  80a208:	0005883a 	mov	r2,zero
  80a20c:	003fc906 	br	80a134 <___vfiprintf_internal_r+0x548>
			width = GET_ARG (n, ap, int);
  80a210:	d9000417 	ldw	r4,16(sp)
			_uquad = UARG ();
  80a214:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80a218:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80a21c:	1002af1e 	bne	r2,zero,80acdc <___vfiprintf_internal_r+0x10f0>
  80a220:	6880100c 	andi	r2,r13,64
  80a224:	1002fb26 	beq	r2,zero,80ae14 <___vfiprintf_internal_r+0x1228>
  80a228:	d8800417 	ldw	r2,16(sp)
  80a22c:	0039883a 	mov	fp,zero
  80a230:	d8c00415 	stw	r3,16(sp)
  80a234:	15c0000b 	ldhu	r23,0(r2)
			base = DEC;
  80a238:	00800044 	movi	r2,1
  80a23c:	003fbd06 	br	80a134 <___vfiprintf_internal_r+0x548>
		if (flags & LADJUST)
  80a240:	d8c00017 	ldw	r3,0(sp)
		uio->uio_iovcnt = 0;
  80a244:	d8000b15 	stw	zero,44(sp)
		if (flags & LADJUST)
  80a248:	1cc0010c 	andi	r19,r3,4
  80a24c:	98024c26 	beq	r19,zero,80ab80 <___vfiprintf_internal_r+0xf94>
			PAD (width - realsz, blanks);
  80a250:	8de1c83a 	sub	r16,r17,r23
  80a254:	04024a0e 	bge	zero,r16,80ab80 <___vfiprintf_internal_r+0xf94>
		PRINT (cp, size);
  80a258:	900d883a 	mov	r6,r18
			PAD (width - realsz, blanks);
  80a25c:	80c00450 	cmplti	r3,r16,17
  80a260:	d9000b17 	ldw	r4,44(sp)
  80a264:	01c02074 	movhi	r7,129
  80a268:	18031a1e 	bne	r3,zero,80aed4 <___vfiprintf_internal_r+0x12e8>
  80a26c:	39c95304 	addi	r7,r7,9548
  80a270:	04c00404 	movi	r19,16
  80a274:	00000606 	br	80a290 <___vfiprintf_internal_r+0x6a4>
  80a278:	21400084 	addi	r5,r4,2
  80a27c:	31800204 	addi	r6,r6,8
  80a280:	1809883a 	mov	r4,r3
  80a284:	843ffc04 	addi	r16,r16,-16
  80a288:	80c00448 	cmpgei	r3,r16,17
  80a28c:	18001726 	beq	r3,zero,80a2ec <___vfiprintf_internal_r+0x700>
  80a290:	20c00044 	addi	r3,r4,1
  80a294:	10800404 	addi	r2,r2,16
  80a298:	31c00015 	stw	r7,0(r6)
  80a29c:	34c00115 	stw	r19,4(r6)
  80a2a0:	d8800c15 	stw	r2,48(sp)
  80a2a4:	d8c00b15 	stw	r3,44(sp)
  80a2a8:	19400208 	cmpgei	r5,r3,8
  80a2ac:	283ff226 	beq	r5,zero,80a278 <___vfiprintf_internal_r+0x68c>
  80a2b0:	d9800a04 	addi	r6,sp,40
  80a2b4:	a80b883a 	mov	r5,r21
  80a2b8:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80a2bc:	10011f26 	beq	r2,zero,80a73c <___vfiprintf_internal_r+0xb50>
  80a2c0:	d9c00015 	stw	r7,0(sp)
  80a2c4:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80a2c8:	103f5d1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80a2cc:	d9000b17 	ldw	r4,44(sp)
  80a2d0:	843ffc04 	addi	r16,r16,-16
  80a2d4:	80c00448 	cmpgei	r3,r16,17
  80a2d8:	d8800c17 	ldw	r2,48(sp)
  80a2dc:	d9c00017 	ldw	r7,0(sp)
  80a2e0:	900d883a 	mov	r6,r18
  80a2e4:	21400044 	addi	r5,r4,1
  80a2e8:	183fe91e 	bne	r3,zero,80a290 <___vfiprintf_internal_r+0x6a4>
  80a2ec:	1405883a 	add	r2,r2,r16
  80a2f0:	d9400b15 	stw	r5,44(sp)
  80a2f4:	31c00015 	stw	r7,0(r6)
  80a2f8:	34000115 	stw	r16,4(r6)
  80a2fc:	d8800c15 	stw	r2,48(sp)
  80a300:	29400210 	cmplti	r5,r5,8
  80a304:	283f421e 	bne	r5,zero,80a010 <___vfiprintf_internal_r+0x424>
	if (uio->uio_resid == 0) {
  80a308:	10021d26 	beq	r2,zero,80ab80 <___vfiprintf_internal_r+0xf94>
  80a30c:	d9800a04 	addi	r6,sp,40
  80a310:	a80b883a 	mov	r5,r21
  80a314:	b009883a 	mov	r4,r22
  80a318:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80a31c:	103f481e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
		FLUSH ();	/* copy out the I/O vectors */
  80a320:	d8800c17 	ldw	r2,48(sp)
  80a324:	003f3a06 	br	80a010 <___vfiprintf_internal_r+0x424>
	CHECK_INIT (data, fp);
  80a328:	08067980 	call	806798 <__sinit>
  80a32c:	003e4106 	br	809c34 <___vfiprintf_internal_r+0x48>
  80a330:	29403fcc 	andi	r5,r5,255
  80a334:	2802da1e 	bne	r5,zero,80aea0 <___vfiprintf_internal_r+0x12b4>
			_uquad = SARG ();
  80a338:	6880080c 	andi	r2,r13,32
  80a33c:	10005b26 	beq	r2,zero,80a4ac <___vfiprintf_internal_r+0x8c0>
  80a340:	d8c00417 	ldw	r3,16(sp)
  80a344:	18800117 	ldw	r2,4(r3)
  80a348:	1dc00017 	ldw	r23,0(r3)
  80a34c:	18c00204 	addi	r3,r3,8
  80a350:	d8c00415 	stw	r3,16(sp)
  80a354:	1039883a 	mov	fp,r2
			if ((quad_t)_uquad < 0)
  80a358:	10006016 	blt	r2,zero,80a4dc <___vfiprintf_internal_r+0x8f0>
number:			if ((dprec = prec) >= 0)
  80a35c:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  80a360:	db800943 	ldbu	r14,37(sp)
number:			if ((dprec = prec) >= 0)
  80a364:	10000626 	beq	r2,zero,80a380 <___vfiprintf_internal_r+0x794>
				flags &= ~ZEROPAD;
  80a368:	04ffdfc4 	movi	r19,-129
  80a36c:	6cc6703a 	and	r3,r13,r19
			if (_uquad != 0 || prec != 0) {
  80a370:	bf04b03a 	or	r2,r23,fp
				flags &= ~ZEROPAD;
  80a374:	d8c00015 	stw	r3,0(sp)
			if (_uquad != 0 || prec != 0) {
  80a378:	10021626 	beq	r2,zero,80abd4 <___vfiprintf_internal_r+0xfe8>
				flags &= ~ZEROPAD;
  80a37c:	db400017 	ldw	r13,0(sp)
					if (_uquad < 10) {
  80a380:	e001a71e 	bne	fp,zero,80aa20 <___vfiprintf_internal_r+0xe34>
  80a384:	b88002a8 	cmpgeui	r2,r23,10
  80a388:	1001a51e 	bne	r2,zero,80aa20 <___vfiprintf_internal_r+0xe34>
						*--cp = to_char(_uquad);
  80a38c:	bdc00c04 	addi	r23,r23,48
  80a390:	ddc016c5 	stb	r23,91(sp)
						break;
  80a394:	db400015 	stw	r13,0(sp)
  80a398:	07000044 	movi	fp,1
						*--cp = to_char(_uquad);
  80a39c:	dcc016c4 	addi	r19,sp,91
						break;
  80a3a0:	00007506 	br	80a578 <___vfiprintf_internal_r+0x98c>
				flags |= SHORTINT;
  80a3a4:	a0800007 	ldb	r2,0(r20)
  80a3a8:	6b401014 	ori	r13,r13,64
			goto rflag;
  80a3ac:	003e5006 	br	809cf0 <___vfiprintf_internal_r+0x104>
  80a3b0:	29403fcc 	andi	r5,r5,255
  80a3b4:	2802bc1e 	bne	r5,zero,80aea8 <___vfiprintf_internal_r+0x12bc>
			xdigs = "0123456789abcdef";
  80a3b8:	00c02074 	movhi	r3,129
  80a3bc:	18c8b004 	addi	r3,r3,8896
  80a3c0:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80a3c4:	68c0080c 	andi	r3,r13,32
  80a3c8:	1800bd26 	beq	r3,zero,80a6c0 <___vfiprintf_internal_r+0xad4>
  80a3cc:	d8c00417 	ldw	r3,16(sp)
  80a3d0:	1dc00017 	ldw	r23,0(r3)
  80a3d4:	1f000117 	ldw	fp,4(r3)
  80a3d8:	18c00204 	addi	r3,r3,8
  80a3dc:	d8c00415 	stw	r3,16(sp)
			if (flags & ALT && _uquad != 0) {
  80a3e0:	68c0004c 	andi	r3,r13,1
  80a3e4:	18000226 	beq	r3,zero,80a3f0 <___vfiprintf_internal_r+0x804>
  80a3e8:	bf06b03a 	or	r3,r23,fp
  80a3ec:	1802261e 	bne	r3,zero,80ac88 <___vfiprintf_internal_r+0x109c>
			base = HEX;
  80a3f0:	00800084 	movi	r2,2
  80a3f4:	003f4f06 	br	80a134 <___vfiprintf_internal_r+0x548>
			cp = GET_ARG (N, ap, char_ptr_t);
  80a3f8:	d8800417 	ldw	r2,16(sp)
			sign = '\0';
  80a3fc:	d8000945 	stb	zero,37(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80a400:	14c00017 	ldw	r19,0(r2)
  80a404:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  80a408:	98026926 	beq	r19,zero,80adb0 <___vfiprintf_internal_r+0x11c4>
			if (prec >= 0) {
  80a40c:	40bfffe0 	cmpeqi	r2,r8,-1
  80a410:	1002411e 	bne	r2,zero,80ad18 <___vfiprintf_internal_r+0x112c>
				char *p = memchr (cp, 0, prec);
  80a414:	400d883a 	mov	r6,r8
  80a418:	000b883a 	mov	r5,zero
  80a41c:	9809883a 	mov	r4,r19
  80a420:	d8c00315 	stw	r3,12(sp)
  80a424:	db400215 	stw	r13,8(sp)
  80a428:	da000015 	stw	r8,0(sp)
  80a42c:	0807d580 	call	807d58 <memchr>
				if (p != NULL)
  80a430:	da000017 	ldw	r8,0(sp)
  80a434:	db400217 	ldw	r13,8(sp)
  80a438:	d8c00317 	ldw	r3,12(sp)
  80a43c:	10029426 	beq	r2,zero,80ae90 <___vfiprintf_internal_r+0x12a4>
					size = p - cp;
  80a440:	14f9c83a 	sub	fp,r2,r19
  80a444:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80a448:	d8c00415 	stw	r3,16(sp)
  80a44c:	003ea006 	br	809ed0 <___vfiprintf_internal_r+0x2e4>
			flags |= QUADINT;
  80a450:	a0800007 	ldb	r2,0(r20)
  80a454:	6b400814 	ori	r13,r13,32
			goto rflag;
  80a458:	003e2506 	br	809cf0 <___vfiprintf_internal_r+0x104>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a45c:	d8c00417 	ldw	r3,16(sp)
			ox[0] = '0';
  80a460:	00800c04 	movi	r2,48
  80a464:	d8800985 	stb	r2,38(sp)
			ox[1] = ch = 'x';
  80a468:	00801e04 	movi	r2,120
			xdigs = "0123456789abcdef";
  80a46c:	01002074 	movhi	r4,129
			ox[1] = ch = 'x';
  80a470:	d88009c5 	stb	r2,39(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a474:	18800104 	addi	r2,r3,4
  80a478:	d8800415 	stw	r2,16(sp)
			xdigs = "0123456789abcdef";
  80a47c:	2088b004 	addi	r2,r4,8896
  80a480:	d8800515 	stw	r2,20(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80a484:	1dc00017 	ldw	r23,0(r3)
  80a488:	0039883a 	mov	fp,zero
			flags |= HEXPREFIX;
  80a48c:	6b400094 	ori	r13,r13,2
			base = HEX;
  80a490:	00800084 	movi	r2,2
			goto nosign;
  80a494:	003f2706 	br	80a134 <___vfiprintf_internal_r+0x548>
  80a498:	29403fcc 	andi	r5,r5,255
  80a49c:	2802841e 	bne	r5,zero,80aeb0 <___vfiprintf_internal_r+0x12c4>
			flags |= LONGINT;
  80a4a0:	6b400414 	ori	r13,r13,16
			_uquad = SARG ();
  80a4a4:	6880080c 	andi	r2,r13,32
  80a4a8:	103fa51e 	bne	r2,zero,80a340 <___vfiprintf_internal_r+0x754>
			width = GET_ARG (n, ap, int);
  80a4ac:	d9000417 	ldw	r4,16(sp)
			_uquad = SARG ();
  80a4b0:	6880040c 	andi	r2,r13,16
			width = GET_ARG (n, ap, int);
  80a4b4:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  80a4b8:	1001ee1e 	bne	r2,zero,80ac74 <___vfiprintf_internal_r+0x1088>
  80a4bc:	6880100c 	andi	r2,r13,64
  80a4c0:	10024e26 	beq	r2,zero,80adfc <___vfiprintf_internal_r+0x1210>
  80a4c4:	d8800417 	ldw	r2,16(sp)
  80a4c8:	d8c00415 	stw	r3,16(sp)
  80a4cc:	15c0000f 	ldh	r23,0(r2)
  80a4d0:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80a4d4:	e005883a 	mov	r2,fp
  80a4d8:	103fa00e 	bge	r2,zero,80a35c <___vfiprintf_internal_r+0x770>
				_uquad = -_uquad;
  80a4dc:	b804c03a 	cmpne	r2,r23,zero
  80a4e0:	0739c83a 	sub	fp,zero,fp
  80a4e4:	e0b9c83a 	sub	fp,fp,r2
				sign = '-';
  80a4e8:	00800b44 	movi	r2,45
  80a4ec:	d8800945 	stb	r2,37(sp)
number:			if ((dprec = prec) >= 0)
  80a4f0:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  80a4f4:	05efc83a 	sub	r23,zero,r23
				sign = '-';
  80a4f8:	03800b44 	movi	r14,45
			base = DEC;
  80a4fc:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  80a500:	183f1026 	beq	r3,zero,80a144 <___vfiprintf_internal_r+0x558>
				switch (base) {
  80a504:	10c00060 	cmpeqi	r3,r2,1
  80a508:	183f9d1e 	bne	r3,zero,80a380 <___vfiprintf_internal_r+0x794>
  80a50c:	108000a0 	cmpeqi	r2,r2,2
  80a510:	10010a1e 	bne	r2,zero,80a93c <___vfiprintf_internal_r+0xd50>
			cp = buf + BUF;
  80a514:	9027883a 	mov	r19,r18
						_uquad >>= 3;
  80a518:	e008977a 	slli	r4,fp,29
  80a51c:	b806d0fa 	srli	r3,r23,3
  80a520:	e038d0fa 	srli	fp,fp,3
						*--cp = to_char (_uquad & 7);
  80a524:	b88001cc 	andi	r2,r23,7
  80a528:	10800c04 	addi	r2,r2,48
						_uquad >>= 3;
  80a52c:	20eeb03a 	or	r23,r4,r3
						*--cp = to_char (_uquad & 7);
  80a530:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80a534:	bf06b03a 	or	r3,r23,fp
  80a538:	980b883a 	mov	r5,r19
						*--cp = to_char (_uquad & 7);
  80a53c:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80a540:	183ff51e 	bne	r3,zero,80a518 <___vfiprintf_internal_r+0x92c>
					if (flags & ALT && *cp != '0')
  80a544:	68c0004c 	andi	r3,r13,1
  80a548:	18010926 	beq	r3,zero,80a970 <___vfiprintf_internal_r+0xd84>
  80a54c:	10803fcc 	andi	r2,r2,255
  80a550:	1080201c 	xori	r2,r2,128
  80a554:	10bfe004 	addi	r2,r2,-128
  80a558:	10800c18 	cmpnei	r2,r2,48
  80a55c:	10010426 	beq	r2,zero,80a970 <___vfiprintf_internal_r+0xd84>
						*--cp = '0';
  80a560:	297fff84 	addi	r5,r5,-2
  80a564:	00800c04 	movi	r2,48
  80a568:	98bfffc5 	stb	r2,-1(r19)
			size = buf + BUF - cp;
  80a56c:	9179c83a 	sub	fp,r18,r5
  80a570:	db400015 	stw	r13,0(sp)
						*--cp = '0';
  80a574:	2827883a 	mov	r19,r5
		realsz = dprec > size ? dprec : size;
  80a578:	402f883a 	mov	r23,r8
  80a57c:	4700010e 	bge	r8,fp,80a584 <___vfiprintf_internal_r+0x998>
  80a580:	e02f883a 	mov	r23,fp
		if (sign)
  80a584:	73803fcc 	andi	r14,r14,255
  80a588:	7380201c 	xori	r14,r14,128
  80a58c:	73bfe004 	addi	r14,r14,-128
  80a590:	703e5126 	beq	r14,zero,809ed8 <___vfiprintf_internal_r+0x2ec>
			realsz++;
  80a594:	bdc00044 	addi	r23,r23,1
  80a598:	003e4f06 	br	809ed8 <___vfiprintf_internal_r+0x2ec>
			flags |= ZEROPAD;
  80a59c:	a0800007 	ldb	r2,0(r20)
  80a5a0:	6b402014 	ori	r13,r13,128
			goto rflag;
  80a5a4:	003dd206 	br	809cf0 <___vfiprintf_internal_r+0x104>
			if ((ch = *fmt++) == '*') {
  80a5a8:	a0800007 	ldb	r2,0(r20)
  80a5ac:	a0c00044 	addi	r3,r20,1
  80a5b0:	11000aa0 	cmpeqi	r4,r2,42
  80a5b4:	2002521e 	bne	r4,zero,80af00 <___vfiprintf_internal_r+0x1314>
			while (is_digit (ch)) {
  80a5b8:	113ff404 	addi	r4,r2,-48
  80a5bc:	21c002b0 	cmpltui	r7,r4,10
			if ((ch = *fmt++) == '*') {
  80a5c0:	1829883a 	mov	r20,r3
			n = 0;
  80a5c4:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  80a5c8:	383dca26 	beq	r7,zero,809cf4 <___vfiprintf_internal_r+0x108>
				n = 10 * n + to_digit (ch);
  80a5cc:	400690ba 	slli	r3,r8,2
				ch = *fmt++;
  80a5d0:	a0800007 	ldb	r2,0(r20)
  80a5d4:	a5000044 	addi	r20,r20,1
				n = 10 * n + to_digit (ch);
  80a5d8:	1a11883a 	add	r8,r3,r8
  80a5dc:	4211883a 	add	r8,r8,r8
  80a5e0:	4111883a 	add	r8,r8,r4
			while (is_digit (ch)) {
  80a5e4:	113ff404 	addi	r4,r2,-48
  80a5e8:	20c002b0 	cmpltui	r3,r4,10
  80a5ec:	183ff71e 	bne	r3,zero,80a5cc <___vfiprintf_internal_r+0x9e0>
  80a5f0:	003dc006 	br	809cf4 <___vfiprintf_internal_r+0x108>
			if ((ch = *fmt++) == '*') {
  80a5f4:	a0800003 	ldbu	r2,0(r20)
			flags |= LADJUST;
  80a5f8:	10803fcc 	andi	r2,r2,255
  80a5fc:	1080201c 	xori	r2,r2,128
  80a600:	6b400114 	ori	r13,r13,4
			goto rflag;
  80a604:	10bfe004 	addi	r2,r2,-128
  80a608:	003db906 	br	809cf0 <___vfiprintf_internal_r+0x104>
			goto rflag;
  80a60c:	a0800007 	ldb	r2,0(r20)
  80a610:	01400044 	movi	r5,1
			sign = '+';
  80a614:	01800ac4 	movi	r6,43
			goto rflag;
  80a618:	003db506 	br	809cf0 <___vfiprintf_internal_r+0x104>
			width = GET_ARG (n, ap, int);
  80a61c:	d8c00417 	ldw	r3,16(sp)
			if ((ch = *fmt++) == '*') {
  80a620:	a0800003 	ldbu	r2,0(r20)
			width = GET_ARG (n, ap, int);
  80a624:	1c400017 	ldw	r17,0(r3)
  80a628:	18c00104 	addi	r3,r3,4
			if (width >= 0)
  80a62c:	8801b716 	blt	r17,zero,80ad0c <___vfiprintf_internal_r+0x1120>
			width = GET_ARG (n, ap, int);
  80a630:	d8c00415 	stw	r3,16(sp)
  80a634:	10803fcc 	andi	r2,r2,255
  80a638:	1080201c 	xori	r2,r2,128
  80a63c:	10bfe004 	addi	r2,r2,-128
  80a640:	003dab06 	br	809cf0 <___vfiprintf_internal_r+0x104>
			flags |= ALT;
  80a644:	a0800007 	ldb	r2,0(r20)
  80a648:	6b400054 	ori	r13,r13,1
			goto rflag;
  80a64c:	003da806 	br	809cf0 <___vfiprintf_internal_r+0x104>
			if (!sign)
  80a650:	30c03fcc 	andi	r3,r6,255
  80a654:	18c0201c 	xori	r3,r3,128
  80a658:	18ffe004 	addi	r3,r3,-128
			if ((ch = *fmt++) == '*') {
  80a65c:	a0800003 	ldbu	r2,0(r20)
			if (!sign)
  80a660:	183ff41e 	bne	r3,zero,80a634 <___vfiprintf_internal_r+0xa48>
  80a664:	10803fcc 	andi	r2,r2,255
  80a668:	1080201c 	xori	r2,r2,128
  80a66c:	01400044 	movi	r5,1
				sign = ' ';
  80a670:	01800804 	movi	r6,32
  80a674:	10bfe004 	addi	r2,r2,-128
  80a678:	003d9d06 	br	809cf0 <___vfiprintf_internal_r+0x104>
				*cp = GET_ARG (N, ap, int);
  80a67c:	d8c00417 	ldw	r3,16(sp)
			sign = '\0';
  80a680:	d8000945 	stb	zero,37(sp)
			break;
  80a684:	05c00044 	movi	r23,1
				*cp = GET_ARG (N, ap, int);
  80a688:	18800017 	ldw	r2,0(r3)
  80a68c:	18c00104 	addi	r3,r3,4
  80a690:	d8c00415 	stw	r3,16(sp)
  80a694:	d8800d05 	stb	r2,52(sp)
				size = 1;
  80a698:	07000044 	movi	fp,1
			cp = buf;
  80a69c:	dcc00d04 	addi	r19,sp,52
			break;
  80a6a0:	003e0b06 	br	809ed0 <___vfiprintf_internal_r+0x2e4>
  80a6a4:	29403fcc 	andi	r5,r5,255
  80a6a8:	2802061e 	bne	r5,zero,80aec4 <___vfiprintf_internal_r+0x12d8>
			xdigs = "0123456789ABCDEF";
  80a6ac:	00c02074 	movhi	r3,129
  80a6b0:	18c8b504 	addi	r3,r3,8916
  80a6b4:	d8c00515 	stw	r3,20(sp)
hex:			_uquad = UARG ();
  80a6b8:	68c0080c 	andi	r3,r13,32
  80a6bc:	183f431e 	bne	r3,zero,80a3cc <___vfiprintf_internal_r+0x7e0>
			width = GET_ARG (n, ap, int);
  80a6c0:	d9400417 	ldw	r5,16(sp)
hex:			_uquad = UARG ();
  80a6c4:	68c0040c 	andi	r3,r13,16
			width = GET_ARG (n, ap, int);
  80a6c8:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  80a6cc:	18017f1e 	bne	r3,zero,80accc <___vfiprintf_internal_r+0x10e0>
  80a6d0:	68c0100c 	andi	r3,r13,64
  80a6d4:	1801be26 	beq	r3,zero,80add0 <___vfiprintf_internal_r+0x11e4>
  80a6d8:	d8c00417 	ldw	r3,16(sp)
  80a6dc:	0039883a 	mov	fp,zero
  80a6e0:	d9000415 	stw	r4,16(sp)
  80a6e4:	1dc0000b 	ldhu	r23,0(r3)
  80a6e8:	003f3d06 	br	80a3e0 <___vfiprintf_internal_r+0x7f4>
  80a6ec:	29403fcc 	andi	r5,r5,255
  80a6f0:	2801f61e 	bne	r5,zero,80aecc <___vfiprintf_internal_r+0x12e0>
			width = GET_ARG (n, ap, int);
  80a6f4:	d9000417 	ldw	r4,16(sp)
			if (flags & QUADINT)
  80a6f8:	6880080c 	andi	r2,r13,32
			width = GET_ARG (n, ap, int);
  80a6fc:	20c00017 	ldw	r3,0(r4)
  80a700:	21000104 	addi	r4,r4,4
			if (flags & QUADINT)
  80a704:	10016b1e 	bne	r2,zero,80acb4 <___vfiprintf_internal_r+0x10c8>
			if (flags & LONGINT)
  80a708:	6880040c 	andi	r2,r13,16
  80a70c:	1001951e 	bne	r2,zero,80ad64 <___vfiprintf_internal_r+0x1178>
			else if (flags & SHORTINT)
  80a710:	6b40100c 	andi	r13,r13,64
  80a714:	68019326 	beq	r13,zero,80ad64 <___vfiprintf_internal_r+0x1178>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  80a718:	d8800117 	ldw	r2,4(sp)
  80a71c:	d9000415 	stw	r4,16(sp)
  80a720:	1880000d 	sth	r2,0(r3)
  80a724:	003d5a06 	br	809c90 <___vfiprintf_internal_r+0xa4>
			if (*fmt == 'l') {
  80a728:	a0800007 	ldb	r2,0(r20)
  80a72c:	10c01b18 	cmpnei	r3,r2,108
  80a730:	18019826 	beq	r3,zero,80ad94 <___vfiprintf_internal_r+0x11a8>
				flags |= LONGINT;
  80a734:	6b400414 	ori	r13,r13,16
  80a738:	003d6d06 	br	809cf0 <___vfiprintf_internal_r+0x104>
		uio->uio_iovcnt = 0;
  80a73c:	01400044 	movi	r5,1
  80a740:	0009883a 	mov	r4,zero
			PAD (width - realsz, blanks);
  80a744:	900d883a 	mov	r6,r18
  80a748:	003ece06 	br	80a284 <___vfiprintf_internal_r+0x698>
			PAD (width - realsz, zeroes);
  80a74c:	8dc7c83a 	sub	r3,r17,r23
  80a750:	00fe190e 	bge	zero,r3,809fb8 <___vfiprintf_internal_r+0x3cc>
  80a754:	19c00450 	cmplti	r7,r3,17
  80a758:	3801e41e 	bne	r7,zero,80aeec <___vfiprintf_internal_r+0x1300>
  80a75c:	01c02074 	movhi	r7,129
  80a760:	39c94f04 	addi	r7,r7,9532
  80a764:	03400404 	movi	r13,16
  80a768:	00000606 	br	80a784 <___vfiprintf_internal_r+0xb98>
  80a76c:	23800084 	addi	r14,r4,2
  80a770:	84000204 	addi	r16,r16,8
  80a774:	2809883a 	mov	r4,r5
  80a778:	18fffc04 	addi	r3,r3,-16
  80a77c:	19400448 	cmpgei	r5,r3,17
  80a780:	28001c26 	beq	r5,zero,80a7f4 <___vfiprintf_internal_r+0xc08>
  80a784:	21400044 	addi	r5,r4,1
  80a788:	10800404 	addi	r2,r2,16
  80a78c:	81c00015 	stw	r7,0(r16)
  80a790:	83400115 	stw	r13,4(r16)
  80a794:	d8800c15 	stw	r2,48(sp)
  80a798:	d9400b15 	stw	r5,44(sp)
  80a79c:	29800208 	cmpgei	r6,r5,8
  80a7a0:	303ff226 	beq	r6,zero,80a76c <___vfiprintf_internal_r+0xb80>
  80a7a4:	d9800a04 	addi	r6,sp,40
  80a7a8:	a80b883a 	mov	r5,r21
  80a7ac:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80a7b0:	10007826 	beq	r2,zero,80a994 <___vfiprintf_internal_r+0xda8>
  80a7b4:	d9c00615 	stw	r7,24(sp)
  80a7b8:	d8c00315 	stw	r3,12(sp)
  80a7bc:	da000215 	stw	r8,8(sp)
  80a7c0:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80a7c4:	103e1e1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80a7c8:	d8c00317 	ldw	r3,12(sp)
  80a7cc:	d9000b17 	ldw	r4,44(sp)
  80a7d0:	d8800c17 	ldw	r2,48(sp)
  80a7d4:	18fffc04 	addi	r3,r3,-16
  80a7d8:	19400448 	cmpgei	r5,r3,17
  80a7dc:	d9c00617 	ldw	r7,24(sp)
  80a7e0:	da000217 	ldw	r8,8(sp)
  80a7e4:	9021883a 	mov	r16,r18
  80a7e8:	23800044 	addi	r14,r4,1
  80a7ec:	03400404 	movi	r13,16
  80a7f0:	283fe41e 	bne	r5,zero,80a784 <___vfiprintf_internal_r+0xb98>
  80a7f4:	83400204 	addi	r13,r16,8
  80a7f8:	10c5883a 	add	r2,r2,r3
  80a7fc:	80c00115 	stw	r3,4(r16)
  80a800:	81c00015 	stw	r7,0(r16)
  80a804:	d8800c15 	stw	r2,48(sp)
  80a808:	db800b15 	stw	r14,44(sp)
  80a80c:	70c00208 	cmpgei	r3,r14,8
  80a810:	18011326 	beq	r3,zero,80ac60 <___vfiprintf_internal_r+0x1074>
	if (uio->uio_resid == 0) {
  80a814:	10018826 	beq	r2,zero,80ae38 <___vfiprintf_internal_r+0x124c>
  80a818:	d9800a04 	addi	r6,sp,40
  80a81c:	a80b883a 	mov	r5,r21
  80a820:	b009883a 	mov	r4,r22
  80a824:	da000215 	stw	r8,8(sp)
  80a828:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, zeroes);
  80a82c:	103e041e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80a830:	da000217 	ldw	r8,8(sp)
		PRINT (cp, size);
  80a834:	d9000b17 	ldw	r4,44(sp)
  80a838:	d8800c17 	ldw	r2,48(sp)
		PAD (dprec - size, zeroes);
  80a83c:	4711c83a 	sub	r8,r8,fp
		PRINT (cp, size);
  80a840:	d9801904 	addi	r6,sp,100
  80a844:	21400044 	addi	r5,r4,1
			PAD (width - realsz, zeroes);
  80a848:	9021883a 	mov	r16,r18
		PAD (dprec - size, zeroes);
  80a84c:	023ddc0e 	bge	zero,r8,809fc0 <___vfiprintf_internal_r+0x3d4>
  80a850:	40c00450 	cmplti	r3,r8,17
  80a854:	01c02074 	movhi	r7,129
  80a858:	1801741e 	bne	r3,zero,80ae2c <___vfiprintf_internal_r+0x1240>
  80a85c:	39c94f04 	addi	r7,r7,9532
  80a860:	03400404 	movi	r13,16
  80a864:	00000606 	br	80a880 <___vfiprintf_internal_r+0xc94>
  80a868:	21400084 	addi	r5,r4,2
  80a86c:	84000204 	addi	r16,r16,8
  80a870:	1809883a 	mov	r4,r3
  80a874:	423ffc04 	addi	r8,r8,-16
  80a878:	40c00448 	cmpgei	r3,r8,17
  80a87c:	18001a26 	beq	r3,zero,80a8e8 <___vfiprintf_internal_r+0xcfc>
  80a880:	20c00044 	addi	r3,r4,1
  80a884:	10800404 	addi	r2,r2,16
  80a888:	81c00015 	stw	r7,0(r16)
  80a88c:	83400115 	stw	r13,4(r16)
  80a890:	d8800c15 	stw	r2,48(sp)
  80a894:	d8c00b15 	stw	r3,44(sp)
  80a898:	19400208 	cmpgei	r5,r3,8
  80a89c:	283ff226 	beq	r5,zero,80a868 <___vfiprintf_internal_r+0xc7c>
  80a8a0:	d9800a04 	addi	r6,sp,40
  80a8a4:	a80b883a 	mov	r5,r21
  80a8a8:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80a8ac:	10001a26 	beq	r2,zero,80a918 <___vfiprintf_internal_r+0xd2c>
  80a8b0:	d9c00315 	stw	r7,12(sp)
  80a8b4:	da000215 	stw	r8,8(sp)
  80a8b8:	0809ae00 	call	809ae0 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80a8bc:	103de01e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80a8c0:	da000217 	ldw	r8,8(sp)
  80a8c4:	d9000b17 	ldw	r4,44(sp)
  80a8c8:	d8800c17 	ldw	r2,48(sp)
  80a8cc:	423ffc04 	addi	r8,r8,-16
  80a8d0:	40c00448 	cmpgei	r3,r8,17
  80a8d4:	d9c00317 	ldw	r7,12(sp)
  80a8d8:	9021883a 	mov	r16,r18
  80a8dc:	21400044 	addi	r5,r4,1
  80a8e0:	03400404 	movi	r13,16
  80a8e4:	183fe61e 	bne	r3,zero,80a880 <___vfiprintf_internal_r+0xc94>
  80a8e8:	81000204 	addi	r4,r16,8
  80a8ec:	1205883a 	add	r2,r2,r8
  80a8f0:	81c00015 	stw	r7,0(r16)
  80a8f4:	82000115 	stw	r8,4(r16)
  80a8f8:	d8800c15 	stw	r2,48(sp)
  80a8fc:	d9400b15 	stw	r5,44(sp)
  80a900:	28c00208 	cmpgei	r3,r5,8
  80a904:	1800a41e 	bne	r3,zero,80ab98 <___vfiprintf_internal_r+0xfac>
		PRINT (cp, size);
  80a908:	29400044 	addi	r5,r5,1
  80a90c:	21800204 	addi	r6,r4,8
		PAD (dprec - size, zeroes);
  80a910:	2021883a 	mov	r16,r4
  80a914:	003daa06 	br	809fc0 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80a918:	01400044 	movi	r5,1
  80a91c:	0009883a 	mov	r4,zero
		PAD (dprec - size, zeroes);
  80a920:	9021883a 	mov	r16,r18
  80a924:	003fd306 	br	80a874 <___vfiprintf_internal_r+0xc88>
				switch (base) {
  80a928:	10c00060 	cmpeqi	r3,r2,1
  80a92c:	1801561e 	bne	r3,zero,80ae88 <___vfiprintf_internal_r+0x129c>
  80a930:	108000a0 	cmpeqi	r2,r2,2
				flags &= ~ZEROPAD;
  80a934:	db400017 	ldw	r13,0(sp)
  80a938:	103ef626 	beq	r2,zero,80a514 <___vfiprintf_internal_r+0x928>
			cp = buf + BUF;
  80a93c:	9027883a 	mov	r19,r18
						*--cp = xdigs[_uquad & 15];
  80a940:	d9000517 	ldw	r4,20(sp)
  80a944:	b88003cc 	andi	r2,r23,15
						_uquad >>= 4;
  80a948:	e006973a 	slli	r3,fp,28
  80a94c:	b82ed13a 	srli	r23,r23,4
						*--cp = xdigs[_uquad & 15];
  80a950:	2085883a 	add	r2,r4,r2
  80a954:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  80a958:	e038d13a 	srli	fp,fp,4
  80a95c:	1deeb03a 	or	r23,r3,r23
						*--cp = xdigs[_uquad & 15];
  80a960:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  80a964:	bf04b03a 	or	r2,r23,fp
						*--cp = xdigs[_uquad & 15];
  80a968:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80a96c:	103ff41e 	bne	r2,zero,80a940 <___vfiprintf_internal_r+0xd54>
			size = buf + BUF - cp;
  80a970:	94f9c83a 	sub	fp,r18,r19
  80a974:	db400015 	stw	r13,0(sp)
  80a978:	003eff06 	br	80a578 <___vfiprintf_internal_r+0x98c>
	if (uio->uio_resid == 0) {
  80a97c:	d9800a04 	addi	r6,sp,40
  80a980:	a80b883a 	mov	r5,r21
  80a984:	b009883a 	mov	r4,r22
  80a988:	0809ae00 	call	809ae0 <__sprint_r.part.0>
		FLUSH ();	/* copy out the I/O vectors */
  80a98c:	103da626 	beq	r2,zero,80a028 <___vfiprintf_internal_r+0x43c>
  80a990:	003dab06 	br	80a040 <___vfiprintf_internal_r+0x454>
		uio->uio_iovcnt = 0;
  80a994:	03800044 	movi	r14,1
  80a998:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80a99c:	9021883a 	mov	r16,r18
  80a9a0:	003f7506 	br	80a778 <___vfiprintf_internal_r+0xb8c>
	if (uio->uio_resid == 0) {
  80a9a4:	10009026 	beq	r2,zero,80abe8 <___vfiprintf_internal_r+0xffc>
  80a9a8:	d9800a04 	addi	r6,sp,40
  80a9ac:	a80b883a 	mov	r5,r21
  80a9b0:	b009883a 	mov	r4,r22
  80a9b4:	da000615 	stw	r8,24(sp)
  80a9b8:	db400315 	stw	r13,12(sp)
  80a9bc:	db800215 	stw	r14,8(sp)
  80a9c0:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PRINT (&sign, 1);
  80a9c4:	103d9e1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
			PRINT (ox, 2);
  80a9c8:	d9000b17 	ldw	r4,44(sp)
  80a9cc:	d8800c17 	ldw	r2,48(sp)
			PRINT (&sign, 1);
  80a9d0:	da000617 	ldw	r8,24(sp)
  80a9d4:	db400317 	ldw	r13,12(sp)
  80a9d8:	db800217 	ldw	r14,8(sp)
			PRINT (ox, 2);
  80a9dc:	d9801904 	addi	r6,sp,100
  80a9e0:	21400044 	addi	r5,r4,1
			PRINT (&sign, 1);
  80a9e4:	9021883a 	mov	r16,r18
  80a9e8:	003d5806 	br	809f4c <___vfiprintf_internal_r+0x360>
			PRINT (ox, 2);
  80a9ec:	d8800984 	addi	r2,sp,38
  80a9f0:	d8801715 	stw	r2,92(sp)
  80a9f4:	00800084 	movi	r2,2
  80a9f8:	d8801815 	stw	r2,96(sp)
			PRINT (&sign, 1);
  80a9fc:	d9801904 	addi	r6,sp,100
			PRINT (ox, 2);
  80aa00:	01400044 	movi	r5,1
  80aa04:	3021883a 	mov	r16,r6
  80aa08:	2809883a 	mov	r4,r5
		PRINT (cp, size);
  80aa0c:	21400044 	addi	r5,r4,1
  80aa10:	81800204 	addi	r6,r16,8
  80aa14:	003d6606 	br	809fb0 <___vfiprintf_internal_r+0x3c4>
				flags &= ~ZEROPAD;
  80aa18:	db400017 	ldw	r13,0(sp)
  80aa1c:	003eb906 	br	80a504 <___vfiprintf_internal_r+0x918>
			cp = buf + BUF;
  80aa20:	9027883a 	mov	r19,r18
					  *--cp = to_char (_uquad % 10);
  80aa24:	b809883a 	mov	r4,r23
  80aa28:	e00b883a 	mov	r5,fp
  80aa2c:	01800284 	movi	r6,10
  80aa30:	000f883a 	mov	r7,zero
  80aa34:	db800315 	stw	r14,12(sp)
  80aa38:	da000215 	stw	r8,8(sp)
  80aa3c:	db400015 	stw	r13,0(sp)
  80aa40:	080c5340 	call	80c534 <__umoddi3>
  80aa44:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  80aa48:	b809883a 	mov	r4,r23
  80aa4c:	e00b883a 	mov	r5,fp
					  *--cp = to_char (_uquad % 10);
  80aa50:	98bfffc5 	stb	r2,-1(r19)
					  _uquad /= 10;
  80aa54:	01800284 	movi	r6,10
  80aa58:	000f883a 	mov	r7,zero
  80aa5c:	080bf140 	call	80bf14 <__udivdi3>
  80aa60:	e009883a 	mov	r4,fp
  80aa64:	b80b883a 	mov	r5,r23
					} while (_uquad != 0);
  80aa68:	db400017 	ldw	r13,0(sp)
  80aa6c:	da000217 	ldw	r8,8(sp)
  80aa70:	db800317 	ldw	r14,12(sp)
					  *--cp = to_char (_uquad % 10);
  80aa74:	9cffffc4 	addi	r19,r19,-1
					  _uquad /= 10;
  80aa78:	102f883a 	mov	r23,r2
  80aa7c:	1839883a 	mov	fp,r3
					} while (_uquad != 0);
  80aa80:	203fe81e 	bne	r4,zero,80aa24 <___vfiprintf_internal_r+0xe38>
  80aa84:	294002a8 	cmpgeui	r5,r5,10
  80aa88:	283fe61e 	bne	r5,zero,80aa24 <___vfiprintf_internal_r+0xe38>
			size = buf + BUF - cp;
  80aa8c:	94f9c83a 	sub	fp,r18,r19
  80aa90:	003eb906 	br	80a578 <___vfiprintf_internal_r+0x98c>
			PAD (width - realsz, blanks);
  80aa94:	19400450 	cmplti	r5,r3,17
  80aa98:	01c02074 	movhi	r7,129
  80aa9c:	2801061e 	bne	r5,zero,80aeb8 <___vfiprintf_internal_r+0x12cc>
  80aaa0:	39c95304 	addi	r7,r7,9548
  80aaa4:	03c00404 	movi	r15,16
  80aaa8:	00000706 	br	80aac8 <___vfiprintf_internal_r+0xedc>
  80aaac:	27c00084 	addi	ra,r4,2
  80aab0:	84000204 	addi	r16,r16,8
  80aab4:	3009883a 	mov	r4,r6
  80aab8:	18fffc04 	addi	r3,r3,-16
  80aabc:	19400448 	cmpgei	r5,r3,17
  80aac0:	28002026 	beq	r5,zero,80ab44 <___vfiprintf_internal_r+0xf58>
  80aac4:	21800044 	addi	r6,r4,1
  80aac8:	10800404 	addi	r2,r2,16
  80aacc:	81c00015 	stw	r7,0(r16)
  80aad0:	83c00115 	stw	r15,4(r16)
  80aad4:	d8800c15 	stw	r2,48(sp)
  80aad8:	d9800b15 	stw	r6,44(sp)
  80aadc:	31400208 	cmpgei	r5,r6,8
  80aae0:	283ff226 	beq	r5,zero,80aaac <___vfiprintf_internal_r+0xec0>
  80aae4:	d9800a04 	addi	r6,sp,40
  80aae8:	a80b883a 	mov	r5,r21
  80aaec:	b009883a 	mov	r4,r22
	if (uio->uio_resid == 0) {
  80aaf0:	10001f26 	beq	r2,zero,80ab70 <___vfiprintf_internal_r+0xf84>
  80aaf4:	d9c00815 	stw	r7,32(sp)
  80aaf8:	d8c00715 	stw	r3,28(sp)
  80aafc:	da000615 	stw	r8,24(sp)
  80ab00:	db400315 	stw	r13,12(sp)
  80ab04:	db800215 	stw	r14,8(sp)
  80ab08:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80ab0c:	103d4c1e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
  80ab10:	d8c00717 	ldw	r3,28(sp)
  80ab14:	d9000b17 	ldw	r4,44(sp)
  80ab18:	d8800c17 	ldw	r2,48(sp)
  80ab1c:	18fffc04 	addi	r3,r3,-16
  80ab20:	19400448 	cmpgei	r5,r3,17
  80ab24:	d9c00817 	ldw	r7,32(sp)
  80ab28:	da000617 	ldw	r8,24(sp)
  80ab2c:	db400317 	ldw	r13,12(sp)
  80ab30:	db800217 	ldw	r14,8(sp)
  80ab34:	9021883a 	mov	r16,r18
  80ab38:	27c00044 	addi	ra,r4,1
  80ab3c:	03c00404 	movi	r15,16
  80ab40:	283fe01e 	bne	r5,zero,80aac4 <___vfiprintf_internal_r+0xed8>
  80ab44:	10c5883a 	add	r2,r2,r3
  80ab48:	80c00115 	stw	r3,4(r16)
  80ab4c:	81c00015 	stw	r7,0(r16)
  80ab50:	d8800c15 	stw	r2,48(sp)
  80ab54:	dfc00b15 	stw	ra,44(sp)
  80ab58:	f8c00208 	cmpgei	r3,ra,8
  80ab5c:	18002d1e 	bne	r3,zero,80ac14 <___vfiprintf_internal_r+0x1028>
  80ab60:	84000204 	addi	r16,r16,8
			PRINT (&sign, 1);
  80ab64:	f9400044 	addi	r5,ra,1
  80ab68:	f809883a 	mov	r4,ra
  80ab6c:	003ce706 	br	809f0c <___vfiprintf_internal_r+0x320>
		uio->uio_iovcnt = 0;
  80ab70:	0009883a 	mov	r4,zero
  80ab74:	07c00044 	movi	ra,1
			PAD (width - realsz, blanks);
  80ab78:	9021883a 	mov	r16,r18
  80ab7c:	003fce06 	br	80aab8 <___vfiprintf_internal_r+0xecc>
		ret += width > realsz ? width : realsz;
  80ab80:	8dc0010e 	bge	r17,r23,80ab88 <___vfiprintf_internal_r+0xf9c>
  80ab84:	b823883a 	mov	r17,r23
  80ab88:	d8800117 	ldw	r2,4(sp)
  80ab8c:	1445883a 	add	r2,r2,r17
  80ab90:	d8800115 	stw	r2,4(sp)
		FLUSH ();	/* copy out the I/O vectors */
  80ab94:	003d2406 	br	80a028 <___vfiprintf_internal_r+0x43c>
	if (uio->uio_resid == 0) {
  80ab98:	10007626 	beq	r2,zero,80ad74 <___vfiprintf_internal_r+0x1188>
  80ab9c:	d9800a04 	addi	r6,sp,40
  80aba0:	a80b883a 	mov	r5,r21
  80aba4:	b009883a 	mov	r4,r22
  80aba8:	0809ae00 	call	809ae0 <__sprint_r.part.0>
		PAD (dprec - size, zeroes);
  80abac:	103d241e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
		PRINT (cp, size);
  80abb0:	d9400b17 	ldw	r5,44(sp)
  80abb4:	d8800c17 	ldw	r2,48(sp)
  80abb8:	d9801904 	addi	r6,sp,100
  80abbc:	29400044 	addi	r5,r5,1
		PAD (dprec - size, zeroes);
  80abc0:	9021883a 	mov	r16,r18
  80abc4:	003cfe06 	br	809fc0 <___vfiprintf_internal_r+0x3d4>
		uio->uio_iovcnt = 0;
  80abc8:	d8000b15 	stw	zero,44(sp)
			PRINT (cp, m);
  80abcc:	9021883a 	mov	r16,r18
  80abd0:	003d7606 	br	80a1ac <___vfiprintf_internal_r+0x5c0>
			if (_uquad != 0 || prec != 0) {
  80abd4:	4000ac1e 	bne	r8,zero,80ae88 <___vfiprintf_internal_r+0x129c>
  80abd8:	0011883a 	mov	r8,zero
  80abdc:	0039883a 	mov	fp,zero
			cp = buf + BUF;
  80abe0:	9027883a 	mov	r19,r18
  80abe4:	003e6406 	br	80a578 <___vfiprintf_internal_r+0x98c>
		if (flags & HEXPREFIX)
  80abe8:	7000411e 	bne	r14,zero,80acf0 <___vfiprintf_internal_r+0x1104>
  80abec:	0009883a 	mov	r4,zero
  80abf0:	d9801904 	addi	r6,sp,100
  80abf4:	01400044 	movi	r5,1
			PRINT (&sign, 1);
  80abf8:	9021883a 	mov	r16,r18
  80abfc:	003cec06 	br	809fb0 <___vfiprintf_internal_r+0x3c4>
		uio->uio_iovcnt = 0;
  80ac00:	d9801904 	addi	r6,sp,100
  80ac04:	01400044 	movi	r5,1
  80ac08:	0009883a 	mov	r4,zero
			PRINT (ox, 2);
  80ac0c:	9021883a 	mov	r16,r18
  80ac10:	003ce706 	br	809fb0 <___vfiprintf_internal_r+0x3c4>
	if (uio->uio_resid == 0) {
  80ac14:	10004a26 	beq	r2,zero,80ad40 <___vfiprintf_internal_r+0x1154>
  80ac18:	d9800a04 	addi	r6,sp,40
  80ac1c:	a80b883a 	mov	r5,r21
  80ac20:	b009883a 	mov	r4,r22
  80ac24:	da000615 	stw	r8,24(sp)
  80ac28:	db400315 	stw	r13,12(sp)
  80ac2c:	db800215 	stw	r14,8(sp)
  80ac30:	0809ae00 	call	809ae0 <__sprint_r.part.0>
			PAD (width - realsz, blanks);
  80ac34:	103d021e 	bne	r2,zero,80a040 <___vfiprintf_internal_r+0x454>
			PRINT (&sign, 1);
  80ac38:	d9000b17 	ldw	r4,44(sp)
  80ac3c:	d8800c17 	ldw	r2,48(sp)
  80ac40:	da000617 	ldw	r8,24(sp)
  80ac44:	db400317 	ldw	r13,12(sp)
  80ac48:	db800217 	ldw	r14,8(sp)
			PAD (width - realsz, blanks);
  80ac4c:	9021883a 	mov	r16,r18
			PRINT (&sign, 1);
  80ac50:	21400044 	addi	r5,r4,1
  80ac54:	003cad06 	br	809f0c <___vfiprintf_internal_r+0x320>
			cp = buf + BUF;
  80ac58:	9027883a 	mov	r19,r18
  80ac5c:	003e4606 	br	80a578 <___vfiprintf_internal_r+0x98c>
		PRINT (cp, size);
  80ac60:	71400044 	addi	r5,r14,1
  80ac64:	69800204 	addi	r6,r13,8
  80ac68:	7009883a 	mov	r4,r14
			PAD (width - realsz, zeroes);
  80ac6c:	6821883a 	mov	r16,r13
  80ac70:	003cd106 	br	809fb8 <___vfiprintf_internal_r+0x3cc>
			_uquad = SARG ();
  80ac74:	25c00017 	ldw	r23,0(r4)
  80ac78:	d8c00415 	stw	r3,16(sp)
  80ac7c:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80ac80:	e005883a 	mov	r2,fp
  80ac84:	003db406 	br	80a358 <___vfiprintf_internal_r+0x76c>
				ox[0] = '0';
  80ac88:	00c00c04 	movi	r3,48
				ox[1] = ch;
  80ac8c:	d88009c5 	stb	r2,39(sp)
				ox[0] = '0';
  80ac90:	d8c00985 	stb	r3,38(sp)
				flags |= HEXPREFIX;
  80ac94:	6b400094 	ori	r13,r13,2
			base = HEX;
  80ac98:	00800084 	movi	r2,2
  80ac9c:	003d2506 	br	80a134 <___vfiprintf_internal_r+0x548>
			_uquad = UARG ();
  80aca0:	25c00017 	ldw	r23,0(r4)
  80aca4:	0039883a 	mov	fp,zero
  80aca8:	d8c00415 	stw	r3,16(sp)
			base = OCT;
  80acac:	0005883a 	mov	r2,zero
  80acb0:	003d2006 	br	80a134 <___vfiprintf_internal_r+0x548>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  80acb4:	d9400117 	ldw	r5,4(sp)
  80acb8:	d9000415 	stw	r4,16(sp)
  80acbc:	2805d7fa 	srai	r2,r5,31
  80acc0:	19400015 	stw	r5,0(r3)
  80acc4:	18800115 	stw	r2,4(r3)
  80acc8:	003bf106 	br	809c90 <___vfiprintf_internal_r+0xa4>
hex:			_uquad = UARG ();
  80accc:	2dc00017 	ldw	r23,0(r5)
  80acd0:	0039883a 	mov	fp,zero
  80acd4:	d9000415 	stw	r4,16(sp)
  80acd8:	003dc106 	br	80a3e0 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80acdc:	25c00017 	ldw	r23,0(r4)
  80ace0:	0039883a 	mov	fp,zero
  80ace4:	d8c00415 	stw	r3,16(sp)
			base = DEC;
  80ace8:	00800044 	movi	r2,1
  80acec:	003d1106 	br	80a134 <___vfiprintf_internal_r+0x548>
			PRINT (ox, 2);
  80acf0:	d8800984 	addi	r2,sp,38
  80acf4:	d8801715 	stw	r2,92(sp)
  80acf8:	00800084 	movi	r2,2
  80acfc:	d8801815 	stw	r2,96(sp)
  80ad00:	dc001904 	addi	r16,sp,100
  80ad04:	01000044 	movi	r4,1
  80ad08:	003f4006 	br	80aa0c <___vfiprintf_internal_r+0xe20>
			width = -width;
  80ad0c:	0463c83a 	sub	r17,zero,r17
			width = GET_ARG (n, ap, int);
  80ad10:	d8c00415 	stw	r3,16(sp)
  80ad14:	003e3806 	br	80a5f8 <___vfiprintf_internal_r+0xa0c>
				size = strlen (cp);
  80ad18:	9809883a 	mov	r4,r19
  80ad1c:	d8c00215 	stw	r3,8(sp)
  80ad20:	db400015 	stw	r13,0(sp)
  80ad24:	08023fc0 	call	8023fc <strlen>
			cp = GET_ARG (N, ap, char_ptr_t);
  80ad28:	d8c00217 	ldw	r3,8(sp)
  80ad2c:	db400017 	ldw	r13,0(sp)
				size = strlen (cp);
  80ad30:	1039883a 	mov	fp,r2
  80ad34:	102f883a 	mov	r23,r2
			cp = GET_ARG (N, ap, char_ptr_t);
  80ad38:	d8c00415 	stw	r3,16(sp)
  80ad3c:	003c6406 	br	809ed0 <___vfiprintf_internal_r+0x2e4>
		if (sign)
  80ad40:	d8c00947 	ldb	r3,37(sp)
  80ad44:	18004326 	beq	r3,zero,80ae54 <___vfiprintf_internal_r+0x1268>
			PRINT (&sign, 1);
  80ad48:	d8800944 	addi	r2,sp,37
  80ad4c:	d8801715 	stw	r2,92(sp)
  80ad50:	00800044 	movi	r2,1
  80ad54:	d8801815 	stw	r2,96(sp)
  80ad58:	d9801904 	addi	r6,sp,100
  80ad5c:	01400044 	movi	r5,1
  80ad60:	003c7606 	br	809f3c <___vfiprintf_internal_r+0x350>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  80ad64:	d8800117 	ldw	r2,4(sp)
  80ad68:	18800015 	stw	r2,0(r3)
  80ad6c:	d9000415 	stw	r4,16(sp)
  80ad70:	003bc706 	br	809c90 <___vfiprintf_internal_r+0xa4>
		PRINT (cp, size);
  80ad74:	00c00044 	movi	r3,1
  80ad78:	e005883a 	mov	r2,fp
  80ad7c:	dcc01715 	stw	r19,92(sp)
  80ad80:	df001815 	stw	fp,96(sp)
  80ad84:	df000c15 	stw	fp,48(sp)
  80ad88:	d8c00b15 	stw	r3,44(sp)
  80ad8c:	d9801904 	addi	r6,sp,100
  80ad90:	003c9a06 	br	809ffc <___vfiprintf_internal_r+0x410>
rflag:		ch = *fmt++;
  80ad94:	a0800043 	ldbu	r2,1(r20)
				flags |= QUADINT;
  80ad98:	6b400814 	ori	r13,r13,32
				fmt++;
  80ad9c:	a5000044 	addi	r20,r20,1
  80ada0:	10803fcc 	andi	r2,r2,255
  80ada4:	1080201c 	xori	r2,r2,128
  80ada8:	10bfe004 	addi	r2,r2,-128
  80adac:	003bd006 	br	809cf0 <___vfiprintf_internal_r+0x104>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80adb0:	408001f0 	cmpltui	r2,r8,7
  80adb4:	4039883a 	mov	fp,r8
  80adb8:	10002426 	beq	r2,zero,80ae4c <___vfiprintf_internal_r+0x1260>
				cp = "(null)";
  80adbc:	04c02074 	movhi	r19,129
  80adc0:	e02f883a 	mov	r23,fp
			cp = GET_ARG (N, ap, char_ptr_t);
  80adc4:	d8c00415 	stw	r3,16(sp)
				cp = "(null)";
  80adc8:	9cc8ba04 	addi	r19,r19,8936
  80adcc:	003c4006 	br	809ed0 <___vfiprintf_internal_r+0x2e4>
hex:			_uquad = UARG ();
  80add0:	d8c00417 	ldw	r3,16(sp)
  80add4:	0039883a 	mov	fp,zero
  80add8:	d9000415 	stw	r4,16(sp)
  80addc:	1dc00017 	ldw	r23,0(r3)
  80ade0:	003d7f06 	br	80a3e0 <___vfiprintf_internal_r+0x7f4>
			_uquad = UARG ();
  80ade4:	d8800417 	ldw	r2,16(sp)
  80ade8:	0039883a 	mov	fp,zero
  80adec:	d8c00415 	stw	r3,16(sp)
  80adf0:	15c00017 	ldw	r23,0(r2)
			base = OCT;
  80adf4:	0005883a 	mov	r2,zero
  80adf8:	003cce06 	br	80a134 <___vfiprintf_internal_r+0x548>
			_uquad = SARG ();
  80adfc:	d8800417 	ldw	r2,16(sp)
  80ae00:	d8c00415 	stw	r3,16(sp)
  80ae04:	15c00017 	ldw	r23,0(r2)
  80ae08:	b839d7fa 	srai	fp,r23,31
			if ((quad_t)_uquad < 0)
  80ae0c:	e005883a 	mov	r2,fp
  80ae10:	003d5106 	br	80a358 <___vfiprintf_internal_r+0x76c>
			_uquad = UARG ();
  80ae14:	d8800417 	ldw	r2,16(sp)
  80ae18:	0039883a 	mov	fp,zero
  80ae1c:	d8c00415 	stw	r3,16(sp)
  80ae20:	15c00017 	ldw	r23,0(r2)
			base = DEC;
  80ae24:	00800044 	movi	r2,1
  80ae28:	003cc206 	br	80a134 <___vfiprintf_internal_r+0x548>
		PAD (dprec - size, zeroes);
  80ae2c:	3009883a 	mov	r4,r6
  80ae30:	39c94f04 	addi	r7,r7,9532
  80ae34:	003ead06 	br	80a8ec <___vfiprintf_internal_r+0xd00>
		uio->uio_iovcnt = 0;
  80ae38:	d9801904 	addi	r6,sp,100
  80ae3c:	01400044 	movi	r5,1
  80ae40:	0009883a 	mov	r4,zero
			PAD (width - realsz, zeroes);
  80ae44:	9021883a 	mov	r16,r18
  80ae48:	003c5b06 	br	809fb8 <___vfiprintf_internal_r+0x3cc>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80ae4c:	07000184 	movi	fp,6
  80ae50:	003fda06 	br	80adbc <___vfiprintf_internal_r+0x11d0>
		if (flags & HEXPREFIX)
  80ae54:	703ee51e 	bne	r14,zero,80a9ec <___vfiprintf_internal_r+0xe00>
  80ae58:	0009883a 	mov	r4,zero
			PRINT (&sign, 1);
  80ae5c:	d9801904 	addi	r6,sp,100
		if (flags & HEXPREFIX)
  80ae60:	01400044 	movi	r5,1
			PAD (width - realsz, blanks);
  80ae64:	9021883a 	mov	r16,r18
  80ae68:	003c5306 	br	809fb8 <___vfiprintf_internal_r+0x3cc>
  80ae6c:	d9800945 	stb	r6,37(sp)
  80ae70:	003c1106 	br	809eb8 <___vfiprintf_internal_r+0x2cc>
	if (uio->uio_resid == 0) {
  80ae74:	d9800a04 	addi	r6,sp,40
  80ae78:	a80b883a 	mov	r5,r21
  80ae7c:	b009883a 	mov	r4,r22
  80ae80:	0809ae00 	call	809ae0 <__sprint_r.part.0>
  80ae84:	003c6e06 	br	80a040 <___vfiprintf_internal_r+0x454>
				flags &= ~ZEROPAD;
  80ae88:	db400017 	ldw	r13,0(sp)
  80ae8c:	003d3f06 	br	80a38c <___vfiprintf_internal_r+0x7a0>
  80ae90:	402f883a 	mov	r23,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  80ae94:	d8c00415 	stw	r3,16(sp)
  80ae98:	4039883a 	mov	fp,r8
  80ae9c:	003c0c06 	br	809ed0 <___vfiprintf_internal_r+0x2e4>
  80aea0:	d9800945 	stb	r6,37(sp)
  80aea4:	003d2406 	br	80a338 <___vfiprintf_internal_r+0x74c>
  80aea8:	d9800945 	stb	r6,37(sp)
  80aeac:	003d4206 	br	80a3b8 <___vfiprintf_internal_r+0x7cc>
  80aeb0:	d9800945 	stb	r6,37(sp)
  80aeb4:	003d7a06 	br	80a4a0 <___vfiprintf_internal_r+0x8b4>
			PAD (width - realsz, blanks);
  80aeb8:	303f883a 	mov	ra,r6
  80aebc:	39c95304 	addi	r7,r7,9548
  80aec0:	003f2006 	br	80ab44 <___vfiprintf_internal_r+0xf58>
  80aec4:	d9800945 	stb	r6,37(sp)
  80aec8:	003df806 	br	80a6ac <___vfiprintf_internal_r+0xac0>
  80aecc:	d9800945 	stb	r6,37(sp)
  80aed0:	003e0806 	br	80a6f4 <___vfiprintf_internal_r+0xb08>
			PAD (width - realsz, blanks);
  80aed4:	21400044 	addi	r5,r4,1
  80aed8:	39c95304 	addi	r7,r7,9548
  80aedc:	003d0306 	br	80a2ec <___vfiprintf_internal_r+0x700>
		return (EOF);
  80aee0:	00bfffc4 	movi	r2,-1
  80aee4:	d8800115 	stw	r2,4(sp)
  80aee8:	003c5806 	br	80a04c <___vfiprintf_internal_r+0x460>
  80aeec:	01c02074 	movhi	r7,129
			PAD (width - realsz, zeroes);
  80aef0:	301b883a 	mov	r13,r6
  80aef4:	281d883a 	mov	r14,r5
  80aef8:	39c94f04 	addi	r7,r7,9532
  80aefc:	003e3e06 	br	80a7f8 <___vfiprintf_internal_r+0xc0c>
				prec = GET_ARG (n, ap, int);
  80af00:	d8800417 	ldw	r2,16(sp)
  80af04:	12000017 	ldw	r8,0(r2)
  80af08:	11000104 	addi	r4,r2,4
				if (prec < 0)
  80af0c:	4000010e 	bge	r8,zero,80af14 <___vfiprintf_internal_r+0x1328>
  80af10:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  80af14:	a0800043 	ldbu	r2,1(r20)
				prec = GET_ARG (n, ap, int);
  80af18:	d9000415 	stw	r4,16(sp)
			if ((ch = *fmt++) == '*') {
  80af1c:	1829883a 	mov	r20,r3
  80af20:	10803fcc 	andi	r2,r2,255
  80af24:	1080201c 	xori	r2,r2,128
  80af28:	10bfe004 	addi	r2,r2,-128
				goto rflag;
  80af2c:	003b7006 	br	809cf0 <___vfiprintf_internal_r+0x104>

0080af30 <__vfiprintf_internal>:
{
  80af30:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80af34:	d1200917 	ldw	r4,-32732(gp)
  80af38:	300f883a 	mov	r7,r6
  80af3c:	280d883a 	mov	r6,r5
  80af40:	100b883a 	mov	r5,r2
  80af44:	0809bec1 	jmpi	809bec <___vfiprintf_internal_r>

0080af48 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  80af48:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  80af4c:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  80af50:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  80af54:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  80af58:	2a400917 	ldw	r9,36(r5)
{
  80af5c:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  80af60:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  80af64:	00c10004 	movi	r3,1024
{
  80af68:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  80af6c:	10bfff4c 	andi	r2,r2,65533
{
  80af70:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80af74:	d80b883a 	mov	r5,sp
{
  80af78:	dc811c15 	stw	r18,1136(sp)
  80af7c:	dc411b15 	stw	r17,1132(sp)
  80af80:	dfc11d15 	stw	ra,1140(sp)
  80af84:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  80af88:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  80af8c:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  80af90:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80af94:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  80af98:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  80af9c:	da000015 	stw	r8,0(sp)
  80afa0:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80afa4:	d8c00215 	stw	r3,8(sp)
  80afa8:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  80afac:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80afb0:	0809bec0 	call	809bec <___vfiprintf_internal_r>
  80afb4:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80afb8:	10000d0e 	bge	r2,zero,80aff0 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  80afbc:	d880030b 	ldhu	r2,12(sp)
  80afc0:	1080100c 	andi	r2,r2,64
  80afc4:	10000326 	beq	r2,zero,80afd4 <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  80afc8:	8080030b 	ldhu	r2,12(r16)
  80afcc:	10801014 	ori	r2,r2,64
  80afd0:	8080030d 	sth	r2,12(r16)
}
  80afd4:	8805883a 	mov	r2,r17
  80afd8:	dfc11d17 	ldw	ra,1140(sp)
  80afdc:	dc811c17 	ldw	r18,1136(sp)
  80afe0:	dc411b17 	ldw	r17,1132(sp)
  80afe4:	dc011a17 	ldw	r16,1128(sp)
  80afe8:	dec11e04 	addi	sp,sp,1144
  80afec:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80aff0:	d80b883a 	mov	r5,sp
  80aff4:	9009883a 	mov	r4,r18
  80aff8:	08063600 	call	806360 <_fflush_r>
  80affc:	103fef26 	beq	r2,zero,80afbc <__sbprintf+0x74>
		ret = EOF;
  80b000:	047fffc4 	movi	r17,-1
  80b004:	003fed06 	br	80afbc <__sbprintf+0x74>

0080b008 <_wctomb_r>:
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
  return __WCTOMB (r, s, _wchar, state);
  80b008:	00802074 	movhi	r2,129
  80b00c:	108b5417 	ldw	r2,11600(r2)
  80b010:	1000683a 	jmp	r2

0080b014 <__ascii_wctomb>:
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;

  if (s == NULL)
  80b014:	28000926 	beq	r5,zero,80b03c <__ascii_wctomb+0x28>
    return 0;
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
  80b018:	30804030 	cmpltui	r2,r6,256
  80b01c:	10000326 	beq	r2,zero,80b02c <__ascii_wctomb+0x18>
    {
      r->_errno = EILSEQ;
      return -1;
    }

  *s = (char) wchar;
  80b020:	29800005 	stb	r6,0(r5)
  return 1;
  80b024:	00800044 	movi	r2,1
  80b028:	f800283a 	ret
      r->_errno = EILSEQ;
  80b02c:	00802284 	movi	r2,138
  80b030:	20800015 	stw	r2,0(r4)
      return -1;
  80b034:	00bfffc4 	movi	r2,-1
  80b038:	f800283a 	ret
    return 0;
  80b03c:	0005883a 	mov	r2,zero
}
  80b040:	f800283a 	ret

0080b044 <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
  80b044:	2807883a 	mov	r3,r5
  80b048:	defffe04 	addi	sp,sp,-8
  80b04c:	dc000015 	stw	r16,0(sp)
  80b050:	300b883a 	mov	r5,r6
  80b054:	2021883a 	mov	r16,r4
  80b058:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b05c:	1809883a 	mov	r4,r3
{
  80b060:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b064:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b068:	080fed00 	call	80fed0 <write>
  80b06c:	10ffffd8 	cmpnei	r3,r2,-1
  80b070:	18000426 	beq	r3,zero,80b084 <_write_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b074:	dfc00117 	ldw	ra,4(sp)
  80b078:	dc000017 	ldw	r16,0(sp)
  80b07c:	dec00204 	addi	sp,sp,8
  80b080:	f800283a 	ret
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80b084:	d0e71817 	ldw	r3,-25504(gp)
  80b088:	183ffa26 	beq	r3,zero,80b074 <_write_r+0x30>
    ptr->_errno = errno;
  80b08c:	80c00015 	stw	r3,0(r16)
}
  80b090:	dfc00117 	ldw	ra,4(sp)
  80b094:	dc000017 	ldw	r16,0(sp)
  80b098:	dec00204 	addi	sp,sp,8
  80b09c:	f800283a 	ret

0080b0a0 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80b0a0:	defffe04 	addi	sp,sp,-8
  80b0a4:	dc000015 	stw	r16,0(sp)
  80b0a8:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b0ac:	2809883a 	mov	r4,r5
{
  80b0b0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b0b4:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b0b8:	080f3fc0 	call	80f3fc <close>
  80b0bc:	10ffffd8 	cmpnei	r3,r2,-1
  80b0c0:	18000426 	beq	r3,zero,80b0d4 <_close_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80b0c4:	dfc00117 	ldw	ra,4(sp)
  80b0c8:	dc000017 	ldw	r16,0(sp)
  80b0cc:	dec00204 	addi	sp,sp,8
  80b0d0:	f800283a 	ret
  if ((ret = _close (fd)) == -1 && errno != 0)
  80b0d4:	d0e71817 	ldw	r3,-25504(gp)
  80b0d8:	183ffa26 	beq	r3,zero,80b0c4 <_close_r+0x24>
    ptr->_errno = errno;
  80b0dc:	80c00015 	stw	r3,0(r16)
}
  80b0e0:	dfc00117 	ldw	ra,4(sp)
  80b0e4:	dc000017 	ldw	r16,0(sp)
  80b0e8:	dec00204 	addi	sp,sp,8
  80b0ec:	f800283a 	ret

0080b0f0 <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
  80b0f0:	3005883a 	mov	r2,r6
  fiprintf(stderr,
  80b0f4:	d1a00917 	ldw	r6,-32732(gp)
{
  80b0f8:	defffc04 	addi	sp,sp,-16
  80b0fc:	3807883a 	mov	r3,r7
  80b100:	dfc00315 	stw	ra,12(sp)
  fiprintf(stderr,
  80b104:	32400317 	ldw	r9,12(r6)
{
  80b108:	200f883a 	mov	r7,r4
  80b10c:	2811883a 	mov	r8,r5
  80b110:	180d883a 	mov	r6,r3
  fiprintf(stderr,
  80b114:	10000a26 	beq	r2,zero,80b140 <__assert_func+0x50>
  80b118:	00c02074 	movhi	r3,129
  80b11c:	18c95704 	addi	r3,r3,9564
  80b120:	01402074 	movhi	r5,129
  80b124:	29495b04 	addi	r5,r5,9580
  80b128:	4809883a 	mov	r4,r9
  80b12c:	d8c00115 	stw	r3,4(sp)
  80b130:	da000015 	stw	r8,0(sp)
  80b134:	d8800215 	stw	r2,8(sp)
  80b138:	080b3e40 	call	80b3e4 <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
  80b13c:	080b9c40 	call	80b9c4 <abort>
  fiprintf(stderr,
  80b140:	00c02074 	movhi	r3,129
  80b144:	18c95a04 	addi	r3,r3,9576
  80b148:	1805883a 	mov	r2,r3
  80b14c:	003ff406 	br	80b120 <__assert_func+0x30>

0080b150 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
  80b150:	deffff04 	addi	sp,sp,-4
   __assert_func (file, line, NULL, failedexpr);
  80b154:	300f883a 	mov	r7,r6
  80b158:	000d883a 	mov	r6,zero
{
  80b15c:	dfc00015 	stw	ra,0(sp)
   __assert_func (file, line, NULL, failedexpr);
  80b160:	080b0f00 	call	80b0f0 <__assert_func>

0080b164 <_calloc_r>:
{
  80b164:	defffe04 	addi	sp,sp,-8
  80b168:	dc000015 	stw	r16,0(sp)
  80b16c:	2021883a 	mov	r16,r4
  80b170:	2809883a 	mov	r4,r5
  INTERNAL_SIZE_T sz = n * elem_size;
  80b174:	300b883a 	mov	r5,r6
{
  80b178:	dfc00115 	stw	ra,4(sp)
  INTERNAL_SIZE_T sz = n * elem_size;
  80b17c:	080ccac0 	call	80ccac <__mulsi3>
  mem = mALLOc (RCALL sz);
  80b180:	8009883a 	mov	r4,r16
  80b184:	100b883a 	mov	r5,r2
  80b188:	08075480 	call	807548 <_malloc_r>
  80b18c:	1009883a 	mov	r4,r2
  if (mem == 0) 
  80b190:	10000c26 	beq	r2,zero,80b1c4 <_calloc_r+0x60>
    csz = chunksize(p);
  80b194:	11bfff17 	ldw	r6,-4(r2)
  80b198:	00bfff04 	movi	r2,-4
  80b19c:	308c703a 	and	r6,r6,r2
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80b1a0:	31bfff04 	addi	r6,r6,-4
  80b1a4:	30800968 	cmpgeui	r2,r6,37
  80b1a8:	1000151e 	bne	r2,zero,80b200 <_calloc_r+0x9c>
  80b1ac:	30800530 	cmpltui	r2,r6,20
  80b1b0:	10000926 	beq	r2,zero,80b1d8 <_calloc_r+0x74>
  80b1b4:	2005883a 	mov	r2,r4
  80b1b8:	10000015 	stw	zero,0(r2)
  80b1bc:	10000115 	stw	zero,4(r2)
  80b1c0:	10000215 	stw	zero,8(r2)
}
  80b1c4:	2005883a 	mov	r2,r4
  80b1c8:	dfc00117 	ldw	ra,4(sp)
  80b1cc:	dc000017 	ldw	r16,0(sp)
  80b1d0:	dec00204 	addi	sp,sp,8
  80b1d4:	f800283a 	ret
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80b1d8:	20000015 	stw	zero,0(r4)
  80b1dc:	20000115 	stw	zero,4(r4)
  80b1e0:	30800728 	cmpgeui	r2,r6,28
  80b1e4:	10000a26 	beq	r2,zero,80b210 <_calloc_r+0xac>
  80b1e8:	20000215 	stw	zero,8(r4)
  80b1ec:	20000315 	stw	zero,12(r4)
  80b1f0:	31800920 	cmpeqi	r6,r6,36
  80b1f4:	3000081e 	bne	r6,zero,80b218 <_calloc_r+0xb4>
  80b1f8:	20800404 	addi	r2,r4,16
  80b1fc:	003fee06 	br	80b1b8 <_calloc_r+0x54>
  80b200:	000b883a 	mov	r5,zero
  80b204:	08080540 	call	808054 <memset>
  80b208:	1009883a 	mov	r4,r2
  80b20c:	003fed06 	br	80b1c4 <_calloc_r+0x60>
  80b210:	20800204 	addi	r2,r4,8
  80b214:	003fe806 	br	80b1b8 <_calloc_r+0x54>
  80b218:	20000415 	stw	zero,16(r4)
  80b21c:	20800604 	addi	r2,r4,24
  80b220:	20000515 	stw	zero,20(r4)
  80b224:	003fe406 	br	80b1b8 <_calloc_r+0x54>

0080b228 <_fclose_r.part.0>:
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_diprintf_r (struct _reent *, int, const char *, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_dprintf_r (struct _reent *, int, const char *__restrict, ...)
               _ATTRIBUTE ((__format__ (__printf__, 3, 4)));
int	_fclose_r (struct _reent *, FILE *);
  80b228:	defffc04 	addi	sp,sp,-16
  80b22c:	dc800215 	stw	r18,8(sp)
  80b230:	dc400115 	stw	r17,4(sp)
  80b234:	dc000015 	stw	r16,0(sp)
  80b238:	dfc00315 	stw	ra,12(sp)
  80b23c:	2821883a 	mov	r16,r5
  80b240:	2023883a 	mov	r17,r4
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
  80b244:	08061380 	call	806138 <__sflush_r>
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80b248:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80b24c:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80b250:	18000426 	beq	r3,zero,80b264 <_fclose_r.part.0+0x3c>
  80b254:	81400717 	ldw	r5,28(r16)
  80b258:	8809883a 	mov	r4,r17
  80b25c:	183ee83a 	callr	r3
  80b260:	10001916 	blt	r2,zero,80b2c8 <_fclose_r.part.0+0xa0>
    r = EOF;
  if (fp->_flags & __SMBF)
  80b264:	8080030b 	ldhu	r2,12(r16)
  80b268:	1080200c 	andi	r2,r2,128
  80b26c:	10001a1e 	bne	r2,zero,80b2d8 <_fclose_r.part.0+0xb0>
    _free_r (rptr, (char *) fp->_bf._base);
  if (HASUB (fp))
  80b270:	81400c17 	ldw	r5,48(r16)
  80b274:	28000526 	beq	r5,zero,80b28c <_fclose_r.part.0+0x64>
    FREEUB (rptr, fp);
  80b278:	80801004 	addi	r2,r16,64
  80b27c:	28800226 	beq	r5,r2,80b288 <_fclose_r.part.0+0x60>
  80b280:	8809883a 	mov	r4,r17
  80b284:	08068f00 	call	8068f0 <_free_r>
  80b288:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80b28c:	81401117 	ldw	r5,68(r16)
  80b290:	28000326 	beq	r5,zero,80b2a0 <_fclose_r.part.0+0x78>
    FREELB (rptr, fp);
  80b294:	8809883a 	mov	r4,r17
  80b298:	08068f00 	call	8068f0 <_free_r>
  80b29c:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80b2a0:	08067a80 	call	8067a8 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80b2a4:	8000030d 	sth	zero,12(r16)
    _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
  80b2a8:	08067ac0 	call	8067ac <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
  80b2ac:	9005883a 	mov	r2,r18
  80b2b0:	dfc00317 	ldw	ra,12(sp)
  80b2b4:	dc800217 	ldw	r18,8(sp)
  80b2b8:	dc400117 	ldw	r17,4(sp)
  80b2bc:	dc000017 	ldw	r16,0(sp)
  80b2c0:	dec00404 	addi	sp,sp,16
  80b2c4:	f800283a 	ret
  if (fp->_flags & __SMBF)
  80b2c8:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80b2cc:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80b2d0:	1080200c 	andi	r2,r2,128
  80b2d4:	103fe626 	beq	r2,zero,80b270 <_fclose_r.part.0+0x48>
    _free_r (rptr, (char *) fp->_bf._base);
  80b2d8:	81400417 	ldw	r5,16(r16)
  80b2dc:	8809883a 	mov	r4,r17
  80b2e0:	08068f00 	call	8068f0 <_free_r>
  80b2e4:	003fe206 	br	80b270 <_fclose_r.part.0+0x48>

0080b2e8 <_fclose_r>:
  if (fp == NULL)
  80b2e8:	28001926 	beq	r5,zero,80b350 <_fclose_r+0x68>
{
  80b2ec:	defffd04 	addi	sp,sp,-12
  80b2f0:	dc000115 	stw	r16,4(sp)
  80b2f4:	dfc00215 	stw	ra,8(sp)
  80b2f8:	2021883a 	mov	r16,r4
  CHECK_INIT (rptr, fp);
  80b2fc:	20000226 	beq	r4,zero,80b308 <_fclose_r+0x20>
  80b300:	20800e17 	ldw	r2,56(r4)
  80b304:	10000c26 	beq	r2,zero,80b338 <_fclose_r+0x50>
  if (fp->_flags == 0)		/* not open! */
  80b308:	2880030f 	ldh	r2,12(r5)
  80b30c:	1000051e 	bne	r2,zero,80b324 <_fclose_r+0x3c>
}
  80b310:	0005883a 	mov	r2,zero
  80b314:	dfc00217 	ldw	ra,8(sp)
  80b318:	dc000117 	ldw	r16,4(sp)
  80b31c:	dec00304 	addi	sp,sp,12
  80b320:	f800283a 	ret
  80b324:	8009883a 	mov	r4,r16
  80b328:	dfc00217 	ldw	ra,8(sp)
  80b32c:	dc000117 	ldw	r16,4(sp)
  80b330:	dec00304 	addi	sp,sp,12
  80b334:	080b2281 	jmpi	80b228 <_fclose_r.part.0>
  80b338:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (rptr, fp);
  80b33c:	08067980 	call	806798 <__sinit>
  80b340:	d9400017 	ldw	r5,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80b344:	2880030f 	ldh	r2,12(r5)
  80b348:	103ff126 	beq	r2,zero,80b310 <_fclose_r+0x28>
  80b34c:	003ff506 	br	80b324 <_fclose_r+0x3c>
}
  80b350:	0005883a 	mov	r2,zero
  80b354:	f800283a 	ret

0080b358 <fclose>:
  if (fp == NULL)
  80b358:	20000726 	beq	r4,zero,80b378 <fclose+0x20>
  80b35c:	200b883a 	mov	r5,r4
#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
  return _fclose_r(_REENT, fp);
  80b360:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (rptr, fp);
  80b364:	20000226 	beq	r4,zero,80b370 <fclose+0x18>
  80b368:	20800e17 	ldw	r2,56(r4)
  80b36c:	10000526 	beq	r2,zero,80b384 <fclose+0x2c>
  if (fp->_flags == 0)		/* not open! */
  80b370:	2880030f 	ldh	r2,12(r5)
  80b374:	1000021e 	bne	r2,zero,80b380 <fclose+0x28>
}
  80b378:	0005883a 	mov	r2,zero
  80b37c:	f800283a 	ret
  80b380:	080b2281 	jmpi	80b228 <_fclose_r.part.0>
{
  80b384:	defffd04 	addi	sp,sp,-12
  80b388:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (rptr, fp);
  80b38c:	d9000015 	stw	r4,0(sp)
{
  80b390:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (rptr, fp);
  80b394:	08067980 	call	806798 <__sinit>
  80b398:	d9400117 	ldw	r5,4(sp)
  80b39c:	d9000017 	ldw	r4,0(sp)
  if (fp->_flags == 0)		/* not open! */
  80b3a0:	2880030f 	ldh	r2,12(r5)
  80b3a4:	10000326 	beq	r2,zero,80b3b4 <fclose+0x5c>
}
  80b3a8:	dfc00217 	ldw	ra,8(sp)
  80b3ac:	dec00304 	addi	sp,sp,12
  80b3b0:	080b2281 	jmpi	80b228 <_fclose_r.part.0>
  80b3b4:	0005883a 	mov	r2,zero
  80b3b8:	dfc00217 	ldw	ra,8(sp)
  80b3bc:	dec00304 	addi	sp,sp,12
  80b3c0:	f800283a 	ret

0080b3c4 <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
  80b3c4:	defffe04 	addi	sp,sp,-8
  80b3c8:	dfc00015 	stw	ra,0(sp)
  80b3cc:	d9c00115 	stw	r7,4(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
  80b3d0:	d9c00104 	addi	r7,sp,4
  80b3d4:	080b7740 	call	80b774 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80b3d8:	dfc00017 	ldw	ra,0(sp)
  80b3dc:	dec00204 	addi	sp,sp,8
  80b3e0:	f800283a 	ret

0080b3e4 <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
  80b3e4:	defffd04 	addi	sp,sp,-12
  80b3e8:	2005883a 	mov	r2,r4
  80b3ec:	dfc00015 	stw	ra,0(sp)
  80b3f0:	d9800115 	stw	r6,4(sp)
  80b3f4:	d9c00215 	stw	r7,8(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
  80b3f8:	d1200917 	ldw	r4,-32732(gp)
  80b3fc:	280d883a 	mov	r6,r5
  80b400:	d9c00104 	addi	r7,sp,4
  80b404:	100b883a 	mov	r5,r2
  80b408:	080b7740 	call	80b774 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80b40c:	dfc00017 	ldw	ra,0(sp)
  80b410:	dec00304 	addi	sp,sp,12
  80b414:	f800283a 	ret

0080b418 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
  80b418:	defff904 	addi	sp,sp,-28
  80b41c:	dcc00415 	stw	r19,16(sp)
  80b420:	dc800315 	stw	r18,12(sp)
  80b424:	dc000115 	stw	r16,4(sp)
  80b428:	dfc00615 	stw	ra,24(sp)
  80b42c:	dd000515 	stw	r20,20(sp)
  80b430:	dc400215 	stw	r17,8(sp)
  80b434:	2025883a 	mov	r18,r4
  80b438:	2827883a 	mov	r19,r5
  80b43c:	3021883a 	mov	r16,r6
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80b440:	08072800 	call	807280 <__locale_mb_cur_max>
  80b444:	10800058 	cmpnei	r2,r2,1
  80b448:	1000071e 	bne	r2,zero,80b468 <__fputwc+0x50>
  80b44c:	98bfffc4 	addi	r2,r19,-1
  80b450:	10803fe8 	cmpgeui	r2,r2,255
  80b454:	1000041e 	bne	r2,zero,80b468 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
  80b458:	980b883a 	mov	r5,r19
  80b45c:	dcc000c5 	stb	r19,3(sp)
      len = 1;
  80b460:	05000044 	movi	r20,1
  80b464:	00000a06 	br	80b490 <__fputwc+0x78>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80b468:	81c01704 	addi	r7,r16,92
  80b46c:	980d883a 	mov	r6,r19
  80b470:	d94000c4 	addi	r5,sp,3
  80b474:	9009883a 	mov	r4,r18
  80b478:	080b8d40 	call	80b8d4 <_wcrtomb_r>
  80b47c:	1029883a 	mov	r20,r2
  80b480:	10bfffd8 	cmpnei	r2,r2,-1
  80b484:	10003926 	beq	r2,zero,80b56c <__fputwc+0x154>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
  80b488:	a0001f26 	beq	r20,zero,80b508 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b48c:	d94000c3 	ldbu	r5,3(sp)
  for (i = 0; i < len; i++)
  80b490:	0023883a 	mov	r17,zero
  80b494:	00000a06 	br	80b4c0 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b498:	80800017 	ldw	r2,0(r16)
  80b49c:	11400005 	stb	r5,0(r2)
  80b4a0:	80c00017 	ldw	r3,0(r16)
  80b4a4:	18c00044 	addi	r3,r3,1
  80b4a8:	80c00015 	stw	r3,0(r16)
  for (i = 0; i < len; i++)
  80b4ac:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b4b0:	d88000c4 	addi	r2,sp,3
  80b4b4:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80b4b8:	8d00132e 	bgeu	r17,r20,80b508 <__fputwc+0xf0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b4bc:	19400003 	ldbu	r5,0(r3)
  80b4c0:	80c00217 	ldw	r3,8(r16)
  80b4c4:	18ffffc4 	addi	r3,r3,-1
  80b4c8:	80c00215 	stw	r3,8(r16)
  80b4cc:	183ff20e 	bge	r3,zero,80b498 <__fputwc+0x80>
  80b4d0:	80800617 	ldw	r2,24(r16)
  80b4d4:	18801616 	blt	r3,r2,80b530 <__fputwc+0x118>
  80b4d8:	80800017 	ldw	r2,0(r16)
  80b4dc:	11400005 	stb	r5,0(r2)
  80b4e0:	80800017 	ldw	r2,0(r16)
  80b4e4:	10c00003 	ldbu	r3,0(r2)
  80b4e8:	10800044 	addi	r2,r2,1
  80b4ec:	18c002a0 	cmpeqi	r3,r3,10
  80b4f0:	1800171e 	bne	r3,zero,80b550 <__fputwc+0x138>
  80b4f4:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80b4f8:	8c400044 	addi	r17,r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b4fc:	d88000c4 	addi	r2,sp,3
  80b500:	1447883a 	add	r3,r2,r17
  for (i = 0; i < len; i++)
  80b504:	8d3fed36 	bltu	r17,r20,80b4bc <__fputwc+0xa4>
      return WEOF;

  return (wint_t) wc;
  80b508:	9829883a 	mov	r20,r19
}
  80b50c:	a005883a 	mov	r2,r20
  80b510:	dfc00617 	ldw	ra,24(sp)
  80b514:	dd000517 	ldw	r20,20(sp)
  80b518:	dcc00417 	ldw	r19,16(sp)
  80b51c:	dc800317 	ldw	r18,12(sp)
  80b520:	dc400217 	ldw	r17,8(sp)
  80b524:	dc000117 	ldw	r16,4(sp)
  80b528:	dec00704 	addi	sp,sp,28
  80b52c:	f800283a 	ret
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b530:	29403fcc 	andi	r5,r5,255
  80b534:	800d883a 	mov	r6,r16
  80b538:	9009883a 	mov	r4,r18
  80b53c:	080b7780 	call	80b778 <__swbuf_r>
  80b540:	10bfffe0 	cmpeqi	r2,r2,-1
  80b544:	103fd926 	beq	r2,zero,80b4ac <__fputwc+0x94>
      return WEOF;
  80b548:	053fffc4 	movi	r20,-1
  80b54c:	003fef06 	br	80b50c <__fputwc+0xf4>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80b550:	800d883a 	mov	r6,r16
  80b554:	01400284 	movi	r5,10
  80b558:	9009883a 	mov	r4,r18
  80b55c:	080b7780 	call	80b778 <__swbuf_r>
  80b560:	10bfffe0 	cmpeqi	r2,r2,-1
  80b564:	103fd126 	beq	r2,zero,80b4ac <__fputwc+0x94>
  80b568:	003ff706 	br	80b548 <__fputwc+0x130>
	  fp->_flags |= __SERR;
  80b56c:	8080030b 	ldhu	r2,12(r16)
  80b570:	10801014 	ori	r2,r2,64
  80b574:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80b578:	003fe406 	br	80b50c <__fputwc+0xf4>

0080b57c <_fputwc_r>:
	FILE *fp)
{
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
  80b57c:	3080030b 	ldhu	r2,12(r6)
  80b580:	10c8000c 	andi	r3,r2,8192
  80b584:	1800051e 	bne	r3,zero,80b59c <_fputwc_r+0x20>
  _newlib_flockfile_start (fp);
  80b588:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80b58c:	10880014 	ori	r2,r2,8192
  80b590:	3080030d 	sth	r2,12(r6)
  80b594:	18880014 	ori	r2,r3,8192
  80b598:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80b59c:	080b4181 	jmpi	80b418 <__fputwc>

0080b5a0 <fputwc>:
}

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
  80b5a0:	defffc04 	addi	sp,sp,-16
  80b5a4:	dc000215 	stw	r16,8(sp)
  struct _reent *reent = _REENT;
  80b5a8:	d4200917 	ldw	r16,-32732(gp)
{
  80b5ac:	dfc00315 	stw	ra,12(sp)
  80b5b0:	280d883a 	mov	r6,r5
  80b5b4:	200b883a 	mov	r5,r4

  CHECK_INIT(reent, fp);
  80b5b8:	80000226 	beq	r16,zero,80b5c4 <fputwc+0x24>
  80b5bc:	80800e17 	ldw	r2,56(r16)
  80b5c0:	10000d26 	beq	r2,zero,80b5f8 <fputwc+0x58>
  ORIENT(fp, 1);
  80b5c4:	3080030b 	ldhu	r2,12(r6)
  80b5c8:	10c8000c 	andi	r3,r2,8192
  80b5cc:	1800051e 	bne	r3,zero,80b5e4 <fputwc+0x44>
  _newlib_flockfile_start (fp);
  80b5d0:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80b5d4:	10880014 	ori	r2,r2,8192
  80b5d8:	3080030d 	sth	r2,12(r6)
  80b5dc:	18880014 	ori	r2,r3,8192
  80b5e0:	30801915 	stw	r2,100(r6)
  r = __fputwc(ptr, wc, fp);
  80b5e4:	8009883a 	mov	r4,r16
  return _fputwc_r (reent, wc, fp);
}
  80b5e8:	dfc00317 	ldw	ra,12(sp)
  80b5ec:	dc000217 	ldw	r16,8(sp)
  80b5f0:	dec00404 	addi	sp,sp,16
  r = __fputwc(ptr, wc, fp);
  80b5f4:	080b4181 	jmpi	80b418 <__fputwc>
  80b5f8:	d9000015 	stw	r4,0(sp)
  CHECK_INIT(reent, fp);
  80b5fc:	8009883a 	mov	r4,r16
  80b600:	d9800115 	stw	r6,4(sp)
  80b604:	08067980 	call	806798 <__sinit>
  80b608:	d9800117 	ldw	r6,4(sp)
  80b60c:	d9400017 	ldw	r5,0(sp)
  80b610:	003fec06 	br	80b5c4 <fputwc+0x24>

0080b614 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
  80b614:	2807883a 	mov	r3,r5
  80b618:	defffe04 	addi	sp,sp,-8
  80b61c:	dc000015 	stw	r16,0(sp)
  80b620:	300b883a 	mov	r5,r6
  80b624:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80b628:	1809883a 	mov	r4,r3
{
  80b62c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b630:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80b634:	080f5780 	call	80f578 <fstat>
  80b638:	10ffffd8 	cmpnei	r3,r2,-1
  80b63c:	18000426 	beq	r3,zero,80b650 <_fstat_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80b640:	dfc00117 	ldw	ra,4(sp)
  80b644:	dc000017 	ldw	r16,0(sp)
  80b648:	dec00204 	addi	sp,sp,8
  80b64c:	f800283a 	ret
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80b650:	d0e71817 	ldw	r3,-25504(gp)
  80b654:	183ffa26 	beq	r3,zero,80b640 <_fstat_r+0x2c>
    ptr->_errno = errno;
  80b658:	80c00015 	stw	r3,0(r16)
}
  80b65c:	dfc00117 	ldw	ra,4(sp)
  80b660:	dc000017 	ldw	r16,0(sp)
  80b664:	dec00204 	addi	sp,sp,8
  80b668:	f800283a 	ret

0080b66c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80b66c:	defffe04 	addi	sp,sp,-8
  80b670:	dc000015 	stw	r16,0(sp)
  80b674:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80b678:	2809883a 	mov	r4,r5
{
  80b67c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b680:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80b684:	080f6900 	call	80f690 <isatty>
  80b688:	10ffffd8 	cmpnei	r3,r2,-1
  80b68c:	18000426 	beq	r3,zero,80b6a0 <_isatty_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80b690:	dfc00117 	ldw	ra,4(sp)
  80b694:	dc000017 	ldw	r16,0(sp)
  80b698:	dec00204 	addi	sp,sp,8
  80b69c:	f800283a 	ret
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80b6a0:	d0e71817 	ldw	r3,-25504(gp)
  80b6a4:	183ffa26 	beq	r3,zero,80b690 <_isatty_r+0x24>
    ptr->_errno = errno;
  80b6a8:	80c00015 	stw	r3,0(r16)
}
  80b6ac:	dfc00117 	ldw	ra,4(sp)
  80b6b0:	dc000017 	ldw	r16,0(sp)
  80b6b4:	dec00204 	addi	sp,sp,8
  80b6b8:	f800283a 	ret

0080b6bc <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
  80b6bc:	2807883a 	mov	r3,r5
  80b6c0:	defffe04 	addi	sp,sp,-8
  80b6c4:	dc000015 	stw	r16,0(sp)
  80b6c8:	300b883a 	mov	r5,r6
  80b6cc:	2021883a 	mov	r16,r4
  80b6d0:	380d883a 	mov	r6,r7
  _off_t ret;

  errno = 0;
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80b6d4:	1809883a 	mov	r4,r3
{
  80b6d8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b6dc:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80b6e0:	080f9d00 	call	80f9d0 <lseek>
  80b6e4:	10ffffd8 	cmpnei	r3,r2,-1
  80b6e8:	18000426 	beq	r3,zero,80b6fc <_lseek_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b6ec:	dfc00117 	ldw	ra,4(sp)
  80b6f0:	dc000017 	ldw	r16,0(sp)
  80b6f4:	dec00204 	addi	sp,sp,8
  80b6f8:	f800283a 	ret
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80b6fc:	d0e71817 	ldw	r3,-25504(gp)
  80b700:	183ffa26 	beq	r3,zero,80b6ec <_lseek_r+0x30>
    ptr->_errno = errno;
  80b704:	80c00015 	stw	r3,0(r16)
}
  80b708:	dfc00117 	ldw	ra,4(sp)
  80b70c:	dc000017 	ldw	r16,0(sp)
  80b710:	dec00204 	addi	sp,sp,8
  80b714:	f800283a 	ret

0080b718 <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
  80b718:	2807883a 	mov	r3,r5
  80b71c:	defffe04 	addi	sp,sp,-8
  80b720:	dc000015 	stw	r16,0(sp)
  80b724:	300b883a 	mov	r5,r6
  80b728:	2021883a 	mov	r16,r4
  80b72c:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80b730:	1809883a 	mov	r4,r3
{
  80b734:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b738:	d0271815 	stw	zero,-25504(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80b73c:	080fbb00 	call	80fbb0 <read>
  80b740:	10ffffd8 	cmpnei	r3,r2,-1
  80b744:	18000426 	beq	r3,zero,80b758 <_read_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80b748:	dfc00117 	ldw	ra,4(sp)
  80b74c:	dc000017 	ldw	r16,0(sp)
  80b750:	dec00204 	addi	sp,sp,8
  80b754:	f800283a 	ret
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80b758:	d0e71817 	ldw	r3,-25504(gp)
  80b75c:	183ffa26 	beq	r3,zero,80b748 <_read_r+0x30>
    ptr->_errno = errno;
  80b760:	80c00015 	stw	r3,0(r16)
}
  80b764:	dfc00117 	ldw	ra,4(sp)
  80b768:	dc000017 	ldw	r16,0(sp)
  80b76c:	dec00204 	addi	sp,sp,8
  80b770:	f800283a 	ret

0080b774 <_vfiprintf_r>:
{
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
  80b774:	0809bec1 	jmpi	809bec <___vfiprintf_internal_r>

0080b778 <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
  80b778:	defffb04 	addi	sp,sp,-20
  80b77c:	dcc00315 	stw	r19,12(sp)
  80b780:	dc400115 	stw	r17,4(sp)
  80b784:	dc000015 	stw	r16,0(sp)
  80b788:	dfc00415 	stw	ra,16(sp)
  80b78c:	dc800215 	stw	r18,8(sp)
  80b790:	2027883a 	mov	r19,r4
  80b794:	2823883a 	mov	r17,r5
  80b798:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
  80b79c:	20000226 	beq	r4,zero,80b7a8 <__swbuf_r+0x30>
  80b7a0:	20800e17 	ldw	r2,56(r4)
  80b7a4:	10003e26 	beq	r2,zero,80b8a0 <__swbuf_r+0x128>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
  80b7a8:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80b7ac:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80b7b0:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80b7b4:	1880020c 	andi	r2,r3,8
  80b7b8:	10001f26 	beq	r2,zero,80b838 <__swbuf_r+0xc0>
  80b7bc:	80800417 	ldw	r2,16(r16)
  80b7c0:	10001d26 	beq	r2,zero,80b838 <__swbuf_r+0xc0>
    return EOF;
  c = (unsigned char) c;

  ORIENT (fp, -1);
  80b7c4:	1948000c 	andi	r5,r3,8192
  80b7c8:	8c803fcc 	andi	r18,r17,255
  80b7cc:	28002326 	beq	r5,zero,80b85c <__swbuf_r+0xe4>
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
  80b7d0:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80b7d4:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80b7d8:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80b7dc:	1100290e 	bge	r2,r4,80b884 <__swbuf_r+0x10c>
	return EOF;
      n = 0;
    }
  fp->_w--;
  *fp->_p++ = c;
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80b7e0:	10800044 	addi	r2,r2,1
  fp->_w--;
  80b7e4:	81400217 	ldw	r5,8(r16)
  *fp->_p++ = c;
  80b7e8:	19000044 	addi	r4,r3,1
  80b7ec:	81000015 	stw	r4,0(r16)
  fp->_w--;
  80b7f0:	297fffc4 	addi	r5,r5,-1
  80b7f4:	81400215 	stw	r5,8(r16)
  *fp->_p++ = c;
  80b7f8:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80b7fc:	80c00517 	ldw	r3,20(r16)
  80b800:	18802926 	beq	r3,r2,80b8a8 <__swbuf_r+0x130>
  80b804:	8080030b 	ldhu	r2,12(r16)
  80b808:	1080004c 	andi	r2,r2,1
  80b80c:	10000226 	beq	r2,zero,80b818 <__swbuf_r+0xa0>
  80b810:	90800298 	cmpnei	r2,r18,10
  80b814:	10002426 	beq	r2,zero,80b8a8 <__swbuf_r+0x130>
    if (_fflush_r (ptr, fp))
      return EOF;
  return c;
}
  80b818:	9005883a 	mov	r2,r18
  80b81c:	dfc00417 	ldw	ra,16(sp)
  80b820:	dcc00317 	ldw	r19,12(sp)
  80b824:	dc800217 	ldw	r18,8(sp)
  80b828:	dc400117 	ldw	r17,4(sp)
  80b82c:	dc000017 	ldw	r16,0(sp)
  80b830:	dec00504 	addi	sp,sp,20
  80b834:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80b838:	800b883a 	mov	r5,r16
  80b83c:	9809883a 	mov	r4,r19
  80b840:	08046700 	call	804670 <__swsetup_r>
  80b844:	10001c1e 	bne	r2,zero,80b8b8 <__swbuf_r+0x140>
  ORIENT (fp, -1);
  80b848:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80b84c:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80b850:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80b854:	1948000c 	andi	r5,r3,8192
  80b858:	283fdd1e 	bne	r5,zero,80b7d0 <__swbuf_r+0x58>
  80b85c:	81001917 	ldw	r4,100(r16)
  80b860:	18c80014 	ori	r3,r3,8192
  80b864:	0177ffc4 	movi	r5,-8193
  80b868:	2148703a 	and	r4,r4,r5
  80b86c:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80b870:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80b874:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80b878:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80b87c:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80b880:	113fd716 	blt	r2,r4,80b7e0 <__swbuf_r+0x68>
      if (_fflush_r (ptr, fp))
  80b884:	800b883a 	mov	r5,r16
  80b888:	9809883a 	mov	r4,r19
  80b88c:	08063600 	call	806360 <_fflush_r>
  80b890:	1000091e 	bne	r2,zero,80b8b8 <__swbuf_r+0x140>
  *fp->_p++ = c;
  80b894:	80c00017 	ldw	r3,0(r16)
  80b898:	00800044 	movi	r2,1
  80b89c:	003fd106 	br	80b7e4 <__swbuf_r+0x6c>
  CHECK_INIT (ptr, fp);
  80b8a0:	08067980 	call	806798 <__sinit>
  80b8a4:	003fc006 	br	80b7a8 <__swbuf_r+0x30>
    if (_fflush_r (ptr, fp))
  80b8a8:	800b883a 	mov	r5,r16
  80b8ac:	9809883a 	mov	r4,r19
  80b8b0:	08063600 	call	806360 <_fflush_r>
  80b8b4:	103fd826 	beq	r2,zero,80b818 <__swbuf_r+0xa0>
    return EOF;
  80b8b8:	04bfffc4 	movi	r18,-1
  80b8bc:	003fd606 	br	80b818 <__swbuf_r+0xa0>

0080b8c0 <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
  80b8c0:	2005883a 	mov	r2,r4
  return __swbuf_r (_REENT, c, fp);
  80b8c4:	d1200917 	ldw	r4,-32732(gp)
  80b8c8:	280d883a 	mov	r6,r5
  80b8cc:	100b883a 	mov	r5,r2
  80b8d0:	080b7781 	jmpi	80b778 <__swbuf_r>

0080b8d4 <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
  80b8d4:	defffa04 	addi	sp,sp,-24
  80b8d8:	dc400415 	stw	r17,16(sp)
  80b8dc:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b8e0:	00802074 	movhi	r2,129
{
  80b8e4:	dfc00515 	stw	ra,20(sp)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b8e8:	108b5417 	ldw	r2,11600(r2)
{
  80b8ec:	2023883a 	mov	r17,r4
  80b8f0:	3821883a 	mov	r16,r7
  if (s == NULL)
  80b8f4:	28000826 	beq	r5,zero,80b918 <_wcrtomb_r+0x44>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
  80b8f8:	103ee83a 	callr	r2

  if (retval == -1)
  80b8fc:	10ffffd8 	cmpnei	r3,r2,-1
  80b900:	18000a26 	beq	r3,zero,80b92c <_wcrtomb_r+0x58>
      ptr->_errno = EILSEQ;
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
}
  80b904:	dfc00517 	ldw	ra,20(sp)
  80b908:	dc400417 	ldw	r17,16(sp)
  80b90c:	dc000317 	ldw	r16,12(sp)
  80b910:	dec00604 	addi	sp,sp,24
  80b914:	f800283a 	ret
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b918:	000d883a 	mov	r6,zero
  80b91c:	d9400084 	addi	r5,sp,2
  80b920:	103ee83a 	callr	r2
  if (retval == -1)
  80b924:	10ffffd8 	cmpnei	r3,r2,-1
  80b928:	183ff61e 	bne	r3,zero,80b904 <_wcrtomb_r+0x30>
      ptr->_errno = EILSEQ;
  80b92c:	00802284 	movi	r2,138
      ps->__count = 0;
  80b930:	80000015 	stw	zero,0(r16)
      ptr->_errno = EILSEQ;
  80b934:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80b938:	00bfffc4 	movi	r2,-1
  80b93c:	003ff106 	br	80b904 <_wcrtomb_r+0x30>

0080b940 <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
  80b940:	defffa04 	addi	sp,sp,-24
  80b944:	dc400415 	stw	r17,16(sp)
  80b948:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b94c:	00c02074 	movhi	r3,129
{
  80b950:	dfc00515 	stw	ra,20(sp)
  struct _reent *reent = _REENT;
  80b954:	d4600917 	ldw	r17,-32732(gp)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b958:	18cb5417 	ldw	r3,11600(r3)
{
  80b95c:	3021883a 	mov	r16,r6
  if (s == NULL)
  80b960:	20000c26 	beq	r4,zero,80b994 <wcrtomb+0x54>
  80b964:	280d883a 	mov	r6,r5
  else
    retval = __WCTOMB (reent, s, wc, ps);
  80b968:	800f883a 	mov	r7,r16
  80b96c:	200b883a 	mov	r5,r4
  80b970:	8809883a 	mov	r4,r17
  80b974:	183ee83a 	callr	r3

  if (retval == -1)
  80b978:	10ffffd8 	cmpnei	r3,r2,-1
  80b97c:	18000c26 	beq	r3,zero,80b9b0 <wcrtomb+0x70>
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80b980:	dfc00517 	ldw	ra,20(sp)
  80b984:	dc400417 	ldw	r17,16(sp)
  80b988:	dc000317 	ldw	r16,12(sp)
  80b98c:	dec00604 	addi	sp,sp,24
  80b990:	f800283a 	ret
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b994:	300f883a 	mov	r7,r6
  80b998:	d9400084 	addi	r5,sp,2
  80b99c:	000d883a 	mov	r6,zero
  80b9a0:	8809883a 	mov	r4,r17
  80b9a4:	183ee83a 	callr	r3
  if (retval == -1)
  80b9a8:	10ffffd8 	cmpnei	r3,r2,-1
  80b9ac:	183ff41e 	bne	r3,zero,80b980 <wcrtomb+0x40>
      reent->_errno = EILSEQ;
  80b9b0:	00802284 	movi	r2,138
      ps->__count = 0;
  80b9b4:	80000015 	stw	zero,0(r16)
      reent->_errno = EILSEQ;
  80b9b8:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80b9bc:	00bfffc4 	movi	r2,-1
  80b9c0:	003fef06 	br	80b980 <wcrtomb+0x40>

0080b9c4 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
  80b9c4:	deffff04 	addi	sp,sp,-4
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
  80b9c8:	01000184 	movi	r4,6
{
  80b9cc:	dfc00015 	stw	ra,0(sp)
      raise (SIGABRT);
  80b9d0:	080bc500 	call	80bc50 <raise>
      _exit (1);
  80b9d4:	01000044 	movi	r4,1
  80b9d8:	080f5040 	call	80f504 <_exit>

0080b9dc <_init_signal_r>:
int
_init_signal_r (struct _reent *ptr)
{
  int i;

  if (ptr->_sig_func == NULL)
  80b9dc:	2080b717 	ldw	r2,732(r4)
  80b9e0:	10000226 	beq	r2,zero,80b9ec <_init_signal_r+0x10>

      for (i = 0; i < NSIG; i++)
	ptr->_sig_func[i] = SIG_DFL;
    }

  return 0;
  80b9e4:	0005883a 	mov	r2,zero
}
  80b9e8:	f800283a 	ret
{
  80b9ec:	defffe04 	addi	sp,sp,-8
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b9f0:	01402004 	movi	r5,128
{
  80b9f4:	dc000015 	stw	r16,0(sp)
  80b9f8:	dfc00115 	stw	ra,4(sp)
  80b9fc:	2021883a 	mov	r16,r4
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80ba00:	08075480 	call	807548 <_malloc_r>
  80ba04:	8080b715 	stw	r2,732(r16)
  80ba08:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80ba0c:	10000826 	beq	r2,zero,80ba30 <_init_signal_r+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80ba10:	01802004 	movi	r6,128
  80ba14:	000b883a 	mov	r5,zero
  80ba18:	08080540 	call	808054 <memset>
  return 0;
  80ba1c:	0005883a 	mov	r2,zero
}
  80ba20:	dfc00117 	ldw	ra,4(sp)
  80ba24:	dc000017 	ldw	r16,0(sp)
  80ba28:	dec00204 	addi	sp,sp,8
  80ba2c:	f800283a 	ret
	return -1;
  80ba30:	00bfffc4 	movi	r2,-1
  80ba34:	003ffa06 	br	80ba20 <_init_signal_r+0x44>

0080ba38 <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
  80ba38:	defffc04 	addi	sp,sp,-16
  80ba3c:	dc400115 	stw	r17,4(sp)
  80ba40:	dfc00315 	stw	ra,12(sp)
  80ba44:	dc800215 	stw	r18,8(sp)
  80ba48:	dc000015 	stw	r16,0(sp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
  80ba4c:	28800830 	cmpltui	r2,r5,32
{
  80ba50:	2023883a 	mov	r17,r4
  if (sig < 0 || sig >= NSIG)
  80ba54:	10000e26 	beq	r2,zero,80ba90 <_signal_r+0x58>
    {
      ptr->_errno = EINVAL;
      return SIG_ERR;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80ba58:	20c0b717 	ldw	r3,732(r4)
  80ba5c:	2821883a 	mov	r16,r5
  80ba60:	3025883a 	mov	r18,r6
  80ba64:	18000e26 	beq	r3,zero,80baa0 <_signal_r+0x68>
    return SIG_ERR;
  
  old_func = ptr->_sig_func[sig];
  80ba68:	802090ba 	slli	r16,r16,2
  80ba6c:	1c21883a 	add	r16,r3,r16
  80ba70:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80ba74:	84800015 	stw	r18,0(r16)

  return old_func;
}
  80ba78:	dfc00317 	ldw	ra,12(sp)
  80ba7c:	dc800217 	ldw	r18,8(sp)
  80ba80:	dc400117 	ldw	r17,4(sp)
  80ba84:	dc000017 	ldw	r16,0(sp)
  80ba88:	dec00404 	addi	sp,sp,16
  80ba8c:	f800283a 	ret
      ptr->_errno = EINVAL;
  80ba90:	00800584 	movi	r2,22
  80ba94:	20800015 	stw	r2,0(r4)
      return SIG_ERR;
  80ba98:	00bfffc4 	movi	r2,-1
  80ba9c:	003ff606 	br	80ba78 <_signal_r+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80baa0:	01402004 	movi	r5,128
  80baa4:	08075480 	call	807548 <_malloc_r>
  80baa8:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80baac:	10000626 	beq	r2,zero,80bac8 <_signal_r+0x90>
	ptr->_sig_func[i] = SIG_DFL;
  80bab0:	01802004 	movi	r6,128
  80bab4:	000b883a 	mov	r5,zero
  80bab8:	1009883a 	mov	r4,r2
  80babc:	08080540 	call	808054 <memset>
  80bac0:	1007883a 	mov	r3,r2
  80bac4:	003fe806 	br	80ba68 <_signal_r+0x30>
    return SIG_ERR;
  80bac8:	00bfffc4 	movi	r2,-1
  80bacc:	003fea06 	br	80ba78 <_signal_r+0x40>

0080bad0 <_raise_r>:
_raise_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80bad0:	28800830 	cmpltui	r2,r5,32
  80bad4:	10002b26 	beq	r2,zero,80bb84 <_raise_r+0xb4>
    {
      ptr->_errno = EINVAL;
      return -1;
    }

  if (ptr->_sig_func == NULL)
  80bad8:	2080b717 	ldw	r2,732(r4)
{
  80badc:	defffd04 	addi	sp,sp,-12
  80bae0:	dc000115 	stw	r16,4(sp)
  80bae4:	dfc00215 	stw	ra,8(sp)
  80bae8:	2821883a 	mov	r16,r5
  if (ptr->_sig_func == NULL)
  80baec:	10001026 	beq	r2,zero,80bb30 <_raise_r+0x60>
    func = SIG_DFL;
  else
    func = ptr->_sig_func[sig];
  80baf0:	280690ba 	slli	r3,r5,2
  80baf4:	10c5883a 	add	r2,r2,r3
  80baf8:	10c00017 	ldw	r3,0(r2)

  if (func == SIG_DFL)
  80bafc:	18000c26 	beq	r3,zero,80bb30 <_raise_r+0x60>
    return _kill_r (ptr, _getpid_r (ptr), sig);
  else if (func == SIG_IGN)
  80bb00:	19400060 	cmpeqi	r5,r3,1
  80bb04:	28001a1e 	bne	r5,zero,80bb70 <_raise_r+0xa0>
    return 0;
  else if (func == SIG_ERR)
  80bb08:	197fffd8 	cmpnei	r5,r3,-1
  80bb0c:	28001126 	beq	r5,zero,80bb54 <_raise_r+0x84>
      ptr->_errno = EINVAL;
      return 1;
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80bb10:	10000015 	stw	zero,0(r2)
      func (sig);
  80bb14:	8009883a 	mov	r4,r16
  80bb18:	183ee83a 	callr	r3
      return 0;
  80bb1c:	0005883a 	mov	r2,zero
    }
}
  80bb20:	dfc00217 	ldw	ra,8(sp)
  80bb24:	dc000117 	ldw	r16,4(sp)
  80bb28:	dec00304 	addi	sp,sp,12
  80bb2c:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80bb30:	d9000015 	stw	r4,0(sp)
  80bb34:	080bf100 	call	80bf10 <_getpid_r>
  80bb38:	d9000017 	ldw	r4,0(sp)
  80bb3c:	800d883a 	mov	r6,r16
  80bb40:	100b883a 	mov	r5,r2
}
  80bb44:	dfc00217 	ldw	ra,8(sp)
  80bb48:	dc000117 	ldw	r16,4(sp)
  80bb4c:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80bb50:	080beb81 	jmpi	80beb8 <_kill_r>
      ptr->_errno = EINVAL;
  80bb54:	00800584 	movi	r2,22
  80bb58:	20800015 	stw	r2,0(r4)
      return 1;
  80bb5c:	00800044 	movi	r2,1
}
  80bb60:	dfc00217 	ldw	ra,8(sp)
  80bb64:	dc000117 	ldw	r16,4(sp)
  80bb68:	dec00304 	addi	sp,sp,12
  80bb6c:	f800283a 	ret
    return 0;
  80bb70:	0005883a 	mov	r2,zero
}
  80bb74:	dfc00217 	ldw	ra,8(sp)
  80bb78:	dc000117 	ldw	r16,4(sp)
  80bb7c:	dec00304 	addi	sp,sp,12
  80bb80:	f800283a 	ret
      ptr->_errno = EINVAL;
  80bb84:	00800584 	movi	r2,22
  80bb88:	20800015 	stw	r2,0(r4)
      return -1;
  80bb8c:	00bfffc4 	movi	r2,-1
}
  80bb90:	f800283a 	ret

0080bb94 <__sigtramp_r>:
__sigtramp_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80bb94:	28800830 	cmpltui	r2,r5,32
  80bb98:	10002b26 	beq	r2,zero,80bc48 <__sigtramp_r+0xb4>
    {
      return -1;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80bb9c:	20c0b717 	ldw	r3,732(r4)
{
  80bba0:	defffd04 	addi	sp,sp,-12
  80bba4:	dc400115 	stw	r17,4(sp)
  80bba8:	dc000015 	stw	r16,0(sp)
  80bbac:	dfc00215 	stw	ra,8(sp)
  80bbb0:	2821883a 	mov	r16,r5
  80bbb4:	2023883a 	mov	r17,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80bbb8:	18001326 	beq	r3,zero,80bc08 <__sigtramp_r+0x74>
    return -1;

  func = ptr->_sig_func[sig];
  80bbbc:	800490ba 	slli	r2,r16,2
  80bbc0:	1887883a 	add	r3,r3,r2
  80bbc4:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80bbc8:	10000d26 	beq	r2,zero,80bc00 <__sigtramp_r+0x6c>
    return 1;
  else if (func == SIG_ERR)
  80bbcc:	113fffe0 	cmpeqi	r4,r2,-1
  80bbd0:	2000191e 	bne	r4,zero,80bc38 <__sigtramp_r+0xa4>
    return 2;
  else if (func == SIG_IGN)
  80bbd4:	11000060 	cmpeqi	r4,r2,1
  80bbd8:	2000151e 	bne	r4,zero,80bc30 <__sigtramp_r+0x9c>
    return 3;
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80bbdc:	18000015 	stw	zero,0(r3)
      func (sig);
  80bbe0:	8009883a 	mov	r4,r16
  80bbe4:	103ee83a 	callr	r2
      return 0;
  80bbe8:	0005883a 	mov	r2,zero
    }
}
  80bbec:	dfc00217 	ldw	ra,8(sp)
  80bbf0:	dc400117 	ldw	r17,4(sp)
  80bbf4:	dc000017 	ldw	r16,0(sp)
  80bbf8:	dec00304 	addi	sp,sp,12
  80bbfc:	f800283a 	ret
    return 1;
  80bc00:	00800044 	movi	r2,1
  80bc04:	003ff906 	br	80bbec <__sigtramp_r+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80bc08:	01402004 	movi	r5,128
  80bc0c:	08075480 	call	807548 <_malloc_r>
  80bc10:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80bc14:	10000a26 	beq	r2,zero,80bc40 <__sigtramp_r+0xac>
	ptr->_sig_func[i] = SIG_DFL;
  80bc18:	01802004 	movi	r6,128
  80bc1c:	000b883a 	mov	r5,zero
  80bc20:	1009883a 	mov	r4,r2
  80bc24:	08080540 	call	808054 <memset>
  80bc28:	1007883a 	mov	r3,r2
  80bc2c:	003fe306 	br	80bbbc <__sigtramp_r+0x28>
    return 3;
  80bc30:	008000c4 	movi	r2,3
  80bc34:	003fed06 	br	80bbec <__sigtramp_r+0x58>
    return 2;
  80bc38:	00800084 	movi	r2,2
  80bc3c:	003feb06 	br	80bbec <__sigtramp_r+0x58>
      return -1;
  80bc40:	00bfffc4 	movi	r2,-1
  80bc44:	003fe906 	br	80bbec <__sigtramp_r+0x58>
  80bc48:	00bfffc4 	movi	r2,-1
}
  80bc4c:	f800283a 	ret

0080bc50 <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
  80bc50:	defffd04 	addi	sp,sp,-12
  80bc54:	dc400115 	stw	r17,4(sp)
  80bc58:	dfc00215 	stw	ra,8(sp)
  80bc5c:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80bc60:	20800830 	cmpltui	r2,r4,32
  return _raise_r (_REENT, sig);
  80bc64:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80bc68:	10002326 	beq	r2,zero,80bcf8 <raise+0xa8>
  if (ptr->_sig_func == NULL)
  80bc6c:	8880b717 	ldw	r2,732(r17)
  80bc70:	2021883a 	mov	r16,r4
  80bc74:	10001026 	beq	r2,zero,80bcb8 <raise+0x68>
    func = ptr->_sig_func[sig];
  80bc78:	200690ba 	slli	r3,r4,2
  80bc7c:	10c5883a 	add	r2,r2,r3
  80bc80:	10c00017 	ldw	r3,0(r2)
  if (func == SIG_DFL)
  80bc84:	18000c26 	beq	r3,zero,80bcb8 <raise+0x68>
  else if (func == SIG_IGN)
  80bc88:	19400060 	cmpeqi	r5,r3,1
  80bc8c:	2800181e 	bne	r5,zero,80bcf0 <raise+0xa0>
  else if (func == SIG_ERR)
  80bc90:	197fffd8 	cmpnei	r5,r3,-1
  80bc94:	28001226 	beq	r5,zero,80bce0 <raise+0x90>
      ptr->_sig_func[sig] = SIG_DFL;
  80bc98:	10000015 	stw	zero,0(r2)
      func (sig);
  80bc9c:	183ee83a 	callr	r3
      return 0;
  80bca0:	0005883a 	mov	r2,zero
}
  80bca4:	dfc00217 	ldw	ra,8(sp)
  80bca8:	dc400117 	ldw	r17,4(sp)
  80bcac:	dc000017 	ldw	r16,0(sp)
  80bcb0:	dec00304 	addi	sp,sp,12
  80bcb4:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80bcb8:	8809883a 	mov	r4,r17
  80bcbc:	080bf100 	call	80bf10 <_getpid_r>
  80bcc0:	800d883a 	mov	r6,r16
  80bcc4:	100b883a 	mov	r5,r2
  80bcc8:	8809883a 	mov	r4,r17
}
  80bccc:	dfc00217 	ldw	ra,8(sp)
  80bcd0:	dc400117 	ldw	r17,4(sp)
  80bcd4:	dc000017 	ldw	r16,0(sp)
  80bcd8:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80bcdc:	080beb81 	jmpi	80beb8 <_kill_r>
      ptr->_errno = EINVAL;
  80bce0:	00800584 	movi	r2,22
  80bce4:	88800015 	stw	r2,0(r17)
      return 1;
  80bce8:	00800044 	movi	r2,1
  80bcec:	003fed06 	br	80bca4 <raise+0x54>
    return 0;
  80bcf0:	0005883a 	mov	r2,zero
  return _raise_r (_REENT, sig);
  80bcf4:	003feb06 	br	80bca4 <raise+0x54>
      ptr->_errno = EINVAL;
  80bcf8:	00800584 	movi	r2,22
  80bcfc:	88800015 	stw	r2,0(r17)
      return -1;
  80bd00:	00bfffc4 	movi	r2,-1
  80bd04:	003fe706 	br	80bca4 <raise+0x54>

0080bd08 <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
  80bd08:	defffc04 	addi	sp,sp,-16
  80bd0c:	dc800215 	stw	r18,8(sp)
  80bd10:	dfc00315 	stw	ra,12(sp)
  80bd14:	dc400115 	stw	r17,4(sp)
  80bd18:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80bd1c:	20800830 	cmpltui	r2,r4,32
  return _signal_r (_REENT, sig, func);
  80bd20:	d4a00917 	ldw	r18,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80bd24:	10000e26 	beq	r2,zero,80bd60 <signal+0x58>
  80bd28:	2021883a 	mov	r16,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80bd2c:	9100b717 	ldw	r4,732(r18)
  80bd30:	2823883a 	mov	r17,r5
  80bd34:	20000e26 	beq	r4,zero,80bd70 <signal+0x68>
  old_func = ptr->_sig_func[sig];
  80bd38:	802090ba 	slli	r16,r16,2
  80bd3c:	2421883a 	add	r16,r4,r16
  80bd40:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80bd44:	84400015 	stw	r17,0(r16)
}
  80bd48:	dfc00317 	ldw	ra,12(sp)
  80bd4c:	dc800217 	ldw	r18,8(sp)
  80bd50:	dc400117 	ldw	r17,4(sp)
  80bd54:	dc000017 	ldw	r16,0(sp)
  80bd58:	dec00404 	addi	sp,sp,16
  80bd5c:	f800283a 	ret
      ptr->_errno = EINVAL;
  80bd60:	00800584 	movi	r2,22
  80bd64:	90800015 	stw	r2,0(r18)
      return SIG_ERR;
  80bd68:	00bfffc4 	movi	r2,-1
  80bd6c:	003ff606 	br	80bd48 <signal+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80bd70:	9009883a 	mov	r4,r18
  80bd74:	01402004 	movi	r5,128
  80bd78:	08075480 	call	807548 <_malloc_r>
  80bd7c:	9080b715 	stw	r2,732(r18)
  80bd80:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80bd84:	10000526 	beq	r2,zero,80bd9c <signal+0x94>
	ptr->_sig_func[i] = SIG_DFL;
  80bd88:	01802004 	movi	r6,128
  80bd8c:	000b883a 	mov	r5,zero
  80bd90:	08080540 	call	808054 <memset>
  80bd94:	1009883a 	mov	r4,r2
  80bd98:	003fe706 	br	80bd38 <signal+0x30>
    return SIG_ERR;
  80bd9c:	00bfffc4 	movi	r2,-1
  return _signal_r (_REENT, sig, func);
  80bda0:	003fe906 	br	80bd48 <signal+0x40>

0080bda4 <_init_signal>:

int 
_init_signal (void)
{
  80bda4:	defffe04 	addi	sp,sp,-8
  80bda8:	dc000015 	stw	r16,0(sp)
  return _init_signal_r (_REENT);
  80bdac:	d4200917 	ldw	r16,-32732(gp)
{
  80bdb0:	dfc00115 	stw	ra,4(sp)
  if (ptr->_sig_func == NULL)
  80bdb4:	8080b717 	ldw	r2,732(r16)
  80bdb8:	10000526 	beq	r2,zero,80bdd0 <_init_signal+0x2c>
  return 0;
  80bdbc:	0005883a 	mov	r2,zero
}
  80bdc0:	dfc00117 	ldw	ra,4(sp)
  80bdc4:	dc000017 	ldw	r16,0(sp)
  80bdc8:	dec00204 	addi	sp,sp,8
  80bdcc:	f800283a 	ret
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80bdd0:	8009883a 	mov	r4,r16
  80bdd4:	01402004 	movi	r5,128
  80bdd8:	08075480 	call	807548 <_malloc_r>
  80bddc:	8080b715 	stw	r2,732(r16)
  80bde0:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80bde4:	10000426 	beq	r2,zero,80bdf8 <_init_signal+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80bde8:	01802004 	movi	r6,128
  80bdec:	000b883a 	mov	r5,zero
  80bdf0:	08080540 	call	808054 <memset>
  80bdf4:	003ff106 	br	80bdbc <_init_signal+0x18>
	return -1;
  80bdf8:	00bfffc4 	movi	r2,-1
  return _init_signal_r (_REENT);
  80bdfc:	003ff006 	br	80bdc0 <_init_signal+0x1c>

0080be00 <__sigtramp>:

int
__sigtramp (int sig)
{
  80be00:	defffd04 	addi	sp,sp,-12
  80be04:	dc400115 	stw	r17,4(sp)
  80be08:	dfc00215 	stw	ra,8(sp)
  80be0c:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80be10:	20800830 	cmpltui	r2,r4,32
  return __sigtramp_r (_REENT, sig);
  80be14:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80be18:	10002526 	beq	r2,zero,80beb0 <__sigtramp+0xb0>
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80be1c:	88c0b717 	ldw	r3,732(r17)
  80be20:	2021883a 	mov	r16,r4
  80be24:	18001326 	beq	r3,zero,80be74 <__sigtramp+0x74>
  func = ptr->_sig_func[sig];
  80be28:	800890ba 	slli	r4,r16,2
  80be2c:	1907883a 	add	r3,r3,r4
  80be30:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80be34:	10000d26 	beq	r2,zero,80be6c <__sigtramp+0x6c>
  else if (func == SIG_ERR)
  80be38:	113fffe0 	cmpeqi	r4,r2,-1
  80be3c:	20001a1e 	bne	r4,zero,80bea8 <__sigtramp+0xa8>
  else if (func == SIG_IGN)
  80be40:	11000060 	cmpeqi	r4,r2,1
  80be44:	2000161e 	bne	r4,zero,80bea0 <__sigtramp+0xa0>
      ptr->_sig_func[sig] = SIG_DFL;
  80be48:	18000015 	stw	zero,0(r3)
      func (sig);
  80be4c:	8009883a 	mov	r4,r16
  80be50:	103ee83a 	callr	r2
      return 0;
  80be54:	0005883a 	mov	r2,zero
}
  80be58:	dfc00217 	ldw	ra,8(sp)
  80be5c:	dc400117 	ldw	r17,4(sp)
  80be60:	dc000017 	ldw	r16,0(sp)
  80be64:	dec00304 	addi	sp,sp,12
  80be68:	f800283a 	ret
    return 1;
  80be6c:	00800044 	movi	r2,1
  80be70:	003ff906 	br	80be58 <__sigtramp+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80be74:	01402004 	movi	r5,128
  80be78:	8809883a 	mov	r4,r17
  80be7c:	08075480 	call	807548 <_malloc_r>
  80be80:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80be84:	10000a26 	beq	r2,zero,80beb0 <__sigtramp+0xb0>
	ptr->_sig_func[i] = SIG_DFL;
  80be88:	01802004 	movi	r6,128
  80be8c:	000b883a 	mov	r5,zero
  80be90:	1009883a 	mov	r4,r2
  80be94:	08080540 	call	808054 <memset>
  80be98:	1007883a 	mov	r3,r2
  80be9c:	003fe206 	br	80be28 <__sigtramp+0x28>
    return 3;
  80bea0:	008000c4 	movi	r2,3
  return __sigtramp_r (_REENT, sig);
  80bea4:	003fec06 	br	80be58 <__sigtramp+0x58>
    return 2;
  80bea8:	00800084 	movi	r2,2
  80beac:	003fea06 	br	80be58 <__sigtramp+0x58>
      return -1;
  80beb0:	00bfffc4 	movi	r2,-1
  80beb4:	003fe806 	br	80be58 <__sigtramp+0x58>

0080beb8 <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
  80beb8:	2807883a 	mov	r3,r5
  80bebc:	defffe04 	addi	sp,sp,-8
  80bec0:	dc000015 	stw	r16,0(sp)
  80bec4:	300b883a 	mov	r5,r6
  80bec8:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80becc:	1809883a 	mov	r4,r3
{
  80bed0:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80bed4:	d0271815 	stw	zero,-25504(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80bed8:	080f77c0 	call	80f77c <kill>
  80bedc:	10ffffd8 	cmpnei	r3,r2,-1
  80bee0:	18000426 	beq	r3,zero,80bef4 <_kill_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80bee4:	dfc00117 	ldw	ra,4(sp)
  80bee8:	dc000017 	ldw	r16,0(sp)
  80beec:	dec00204 	addi	sp,sp,8
  80bef0:	f800283a 	ret
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80bef4:	d0e71817 	ldw	r3,-25504(gp)
  80bef8:	183ffa26 	beq	r3,zero,80bee4 <_kill_r+0x2c>
    ptr->_errno = errno;
  80befc:	80c00015 	stw	r3,0(r16)
}
  80bf00:	dfc00117 	ldw	ra,4(sp)
  80bf04:	dc000017 	ldw	r16,0(sp)
  80bf08:	dec00204 	addi	sp,sp,8
  80bf0c:	f800283a 	ret

0080bf10 <_getpid_r>:

int
_getpid_r (struct _reent *ptr)
{
  int ret;
  ret = _getpid ();
  80bf10:	080f6341 	jmpi	80f634 <getpid>

0080bf14 <__udivdi3>:
  80bf14:	defff504 	addi	sp,sp,-44
  80bf18:	dd000515 	stw	r20,20(sp)
  80bf1c:	dc800315 	stw	r18,12(sp)
  80bf20:	dfc00a15 	stw	ra,40(sp)
  80bf24:	df000915 	stw	fp,36(sp)
  80bf28:	ddc00815 	stw	r23,32(sp)
  80bf2c:	dd800715 	stw	r22,28(sp)
  80bf30:	dd400615 	stw	r21,24(sp)
  80bf34:	dcc00415 	stw	r19,16(sp)
  80bf38:	dc400215 	stw	r17,8(sp)
  80bf3c:	dc000115 	stw	r16,4(sp)
  80bf40:	2029883a 	mov	r20,r4
  80bf44:	2825883a 	mov	r18,r5
  80bf48:	3800461e 	bne	r7,zero,80c064 <__udivdi3+0x150>
  80bf4c:	3823883a 	mov	r17,r7
  80bf50:	3021883a 	mov	r16,r6
  80bf54:	2027883a 	mov	r19,r4
  80bf58:	2980622e 	bgeu	r5,r6,80c0e4 <__udivdi3+0x1d0>
  80bf5c:	00bfffd4 	movui	r2,65535
  80bf60:	282b883a 	mov	r21,r5
  80bf64:	1180aa2e 	bgeu	r2,r6,80c210 <__udivdi3+0x2fc>
  80bf68:	00804034 	movhi	r2,256
  80bf6c:	30815a36 	bltu	r6,r2,80c4d8 <__udivdi3+0x5c4>
  80bf70:	3006d63a 	srli	r3,r6,24
  80bf74:	04400604 	movi	r17,24
  80bf78:	00802074 	movhi	r2,129
  80bf7c:	1885883a 	add	r2,r3,r2
  80bf80:	10886b03 	ldbu	r2,8620(r2)
  80bf84:	00c00804 	movi	r3,32
  80bf88:	1463883a 	add	r17,r2,r17
  80bf8c:	1c45c83a 	sub	r2,r3,r17
  80bf90:	1c400526 	beq	r3,r17,80bfa8 <__udivdi3+0x94>
  80bf94:	9086983a 	sll	r3,r18,r2
  80bf98:	a462d83a 	srl	r17,r20,r17
  80bf9c:	30a0983a 	sll	r16,r6,r2
  80bfa0:	a0a6983a 	sll	r19,r20,r2
  80bfa4:	88eab03a 	or	r21,r17,r3
  80bfa8:	802cd43a 	srli	r22,r16,16
  80bfac:	a809883a 	mov	r4,r21
  80bfb0:	853fffcc 	andi	r20,r16,65535
  80bfb4:	b00b883a 	mov	r5,r22
  80bfb8:	080cc500 	call	80cc50 <__umodsi3>
  80bfbc:	a809883a 	mov	r4,r21
  80bfc0:	b00b883a 	mov	r5,r22
  80bfc4:	1025883a 	mov	r18,r2
  80bfc8:	080cbec0 	call	80cbec <__udivsi3>
  80bfcc:	a009883a 	mov	r4,r20
  80bfd0:	100b883a 	mov	r5,r2
  80bfd4:	102b883a 	mov	r21,r2
  80bfd8:	080ccac0 	call	80ccac <__mulsi3>
  80bfdc:	9024943a 	slli	r18,r18,16
  80bfe0:	9808d43a 	srli	r4,r19,16
  80bfe4:	9108b03a 	or	r4,r18,r4
  80bfe8:	2080052e 	bgeu	r4,r2,80c000 <__udivdi3+0xec>
  80bfec:	2409883a 	add	r4,r4,r16
  80bff0:	a8ffffc4 	addi	r3,r21,-1
  80bff4:	24000136 	bltu	r4,r16,80bffc <__udivdi3+0xe8>
  80bff8:	20814836 	bltu	r4,r2,80c51c <__udivdi3+0x608>
  80bffc:	182b883a 	mov	r21,r3
  80c000:	20a3c83a 	sub	r17,r4,r2
  80c004:	8809883a 	mov	r4,r17
  80c008:	b00b883a 	mov	r5,r22
  80c00c:	080cc500 	call	80cc50 <__umodsi3>
  80c010:	8809883a 	mov	r4,r17
  80c014:	1023883a 	mov	r17,r2
  80c018:	b00b883a 	mov	r5,r22
  80c01c:	8822943a 	slli	r17,r17,16
  80c020:	080cbec0 	call	80cbec <__udivsi3>
  80c024:	100b883a 	mov	r5,r2
  80c028:	a009883a 	mov	r4,r20
  80c02c:	9cffffcc 	andi	r19,r19,65535
  80c030:	1025883a 	mov	r18,r2
  80c034:	8ce6b03a 	or	r19,r17,r19
  80c038:	080ccac0 	call	80ccac <__mulsi3>
  80c03c:	9880052e 	bgeu	r19,r2,80c054 <__udivdi3+0x140>
  80c040:	84e7883a 	add	r19,r16,r19
  80c044:	90ffffc4 	addi	r3,r18,-1
  80c048:	9c000136 	bltu	r19,r16,80c050 <__udivdi3+0x13c>
  80c04c:	98813136 	bltu	r19,r2,80c514 <__udivdi3+0x600>
  80c050:	1825883a 	mov	r18,r3
  80c054:	a80c943a 	slli	r6,r21,16
  80c058:	0007883a 	mov	r3,zero
  80c05c:	3484b03a 	or	r2,r6,r18
  80c060:	00000306 	br	80c070 <__udivdi3+0x15c>
  80c064:	29c00e2e 	bgeu	r5,r7,80c0a0 <__udivdi3+0x18c>
  80c068:	0007883a 	mov	r3,zero
  80c06c:	0005883a 	mov	r2,zero
  80c070:	dfc00a17 	ldw	ra,40(sp)
  80c074:	df000917 	ldw	fp,36(sp)
  80c078:	ddc00817 	ldw	r23,32(sp)
  80c07c:	dd800717 	ldw	r22,28(sp)
  80c080:	dd400617 	ldw	r21,24(sp)
  80c084:	dd000517 	ldw	r20,20(sp)
  80c088:	dcc00417 	ldw	r19,16(sp)
  80c08c:	dc800317 	ldw	r18,12(sp)
  80c090:	dc400217 	ldw	r17,8(sp)
  80c094:	dc000117 	ldw	r16,4(sp)
  80c098:	dec00b04 	addi	sp,sp,44
  80c09c:	f800283a 	ret
  80c0a0:	00bfffd4 	movui	r2,65535
  80c0a4:	11c05f2e 	bgeu	r2,r7,80c224 <__udivdi3+0x310>
  80c0a8:	00804034 	movhi	r2,256
  80c0ac:	3880fc36 	bltu	r7,r2,80c4a0 <__udivdi3+0x58c>
  80c0b0:	3804d63a 	srli	r2,r7,24
  80c0b4:	01000604 	movi	r4,24
  80c0b8:	00c02074 	movhi	r3,129
  80c0bc:	10c7883a 	add	r3,r2,r3
  80c0c0:	18886b03 	ldbu	r2,8620(r3)
  80c0c4:	00c00804 	movi	r3,32
  80c0c8:	1105883a 	add	r2,r2,r4
  80c0cc:	18a3c83a 	sub	r17,r3,r2
  80c0d0:	1880901e 	bne	r3,r2,80c314 <__udivdi3+0x400>
  80c0d4:	3c80f736 	bltu	r7,r18,80c4b4 <__udivdi3+0x5a0>
  80c0d8:	a185403a 	cmpgeu	r2,r20,r6
  80c0dc:	0007883a 	mov	r3,zero
  80c0e0:	003fe306 	br	80c070 <__udivdi3+0x15c>
  80c0e4:	3000041e 	bne	r6,zero,80c0f8 <__udivdi3+0x1e4>
  80c0e8:	000b883a 	mov	r5,zero
  80c0ec:	01000044 	movi	r4,1
  80c0f0:	080cbec0 	call	80cbec <__udivsi3>
  80c0f4:	1021883a 	mov	r16,r2
  80c0f8:	00bfffd4 	movui	r2,65535
  80c0fc:	14003f2e 	bgeu	r2,r16,80c1fc <__udivdi3+0x2e8>
  80c100:	00804034 	movhi	r2,256
  80c104:	8080f136 	bltu	r16,r2,80c4cc <__udivdi3+0x5b8>
  80c108:	8006d63a 	srli	r3,r16,24
  80c10c:	04400604 	movi	r17,24
  80c110:	00802074 	movhi	r2,129
  80c114:	1885883a 	add	r2,r3,r2
  80c118:	10886b03 	ldbu	r2,8620(r2)
  80c11c:	00c00804 	movi	r3,32
  80c120:	1463883a 	add	r17,r2,r17
  80c124:	1c45c83a 	sub	r2,r3,r17
  80c128:	1c40431e 	bne	r3,r17,80c238 <__udivdi3+0x324>
  80c12c:	802cd43a 	srli	r22,r16,16
  80c130:	9423c83a 	sub	r17,r18,r16
  80c134:	853fffcc 	andi	r20,r16,65535
  80c138:	00c00044 	movi	r3,1
  80c13c:	b00b883a 	mov	r5,r22
  80c140:	8809883a 	mov	r4,r17
  80c144:	d8c00015 	stw	r3,0(sp)
  80c148:	080cc500 	call	80cc50 <__umodsi3>
  80c14c:	b00b883a 	mov	r5,r22
  80c150:	8809883a 	mov	r4,r17
  80c154:	1025883a 	mov	r18,r2
  80c158:	080cbec0 	call	80cbec <__udivsi3>
  80c15c:	1009883a 	mov	r4,r2
  80c160:	a00b883a 	mov	r5,r20
  80c164:	102b883a 	mov	r21,r2
  80c168:	080ccac0 	call	80ccac <__mulsi3>
  80c16c:	9024943a 	slli	r18,r18,16
  80c170:	9808d43a 	srli	r4,r19,16
  80c174:	d8c00017 	ldw	r3,0(sp)
  80c178:	9108b03a 	or	r4,r18,r4
  80c17c:	2080052e 	bgeu	r4,r2,80c194 <__udivdi3+0x280>
  80c180:	2409883a 	add	r4,r4,r16
  80c184:	a97fffc4 	addi	r5,r21,-1
  80c188:	24000136 	bltu	r4,r16,80c190 <__udivdi3+0x27c>
  80c18c:	2080e636 	bltu	r4,r2,80c528 <__udivdi3+0x614>
  80c190:	282b883a 	mov	r21,r5
  80c194:	20a3c83a 	sub	r17,r4,r2
  80c198:	8809883a 	mov	r4,r17
  80c19c:	b00b883a 	mov	r5,r22
  80c1a0:	d8c00015 	stw	r3,0(sp)
  80c1a4:	080cc500 	call	80cc50 <__umodsi3>
  80c1a8:	8809883a 	mov	r4,r17
  80c1ac:	1023883a 	mov	r17,r2
  80c1b0:	b00b883a 	mov	r5,r22
  80c1b4:	8822943a 	slli	r17,r17,16
  80c1b8:	080cbec0 	call	80cbec <__udivsi3>
  80c1bc:	a00b883a 	mov	r5,r20
  80c1c0:	1009883a 	mov	r4,r2
  80c1c4:	9cffffcc 	andi	r19,r19,65535
  80c1c8:	1025883a 	mov	r18,r2
  80c1cc:	8ce6b03a 	or	r19,r17,r19
  80c1d0:	080ccac0 	call	80ccac <__mulsi3>
  80c1d4:	d8c00017 	ldw	r3,0(sp)
  80c1d8:	9880052e 	bgeu	r19,r2,80c1f0 <__udivdi3+0x2dc>
  80c1dc:	84e7883a 	add	r19,r16,r19
  80c1e0:	913fffc4 	addi	r4,r18,-1
  80c1e4:	9c000136 	bltu	r19,r16,80c1ec <__udivdi3+0x2d8>
  80c1e8:	9880c836 	bltu	r19,r2,80c50c <__udivdi3+0x5f8>
  80c1ec:	2025883a 	mov	r18,r4
  80c1f0:	a80c943a 	slli	r6,r21,16
  80c1f4:	3484b03a 	or	r2,r6,r18
  80c1f8:	003f9d06 	br	80c070 <__udivdi3+0x15c>
  80c1fc:	80804030 	cmpltui	r2,r16,256
  80c200:	1000b81e 	bne	r2,zero,80c4e4 <__udivdi3+0x5d0>
  80c204:	8006d23a 	srli	r3,r16,8
  80c208:	04400204 	movi	r17,8
  80c20c:	003fc006 	br	80c110 <__udivdi3+0x1fc>
  80c210:	30804030 	cmpltui	r2,r6,256
  80c214:	1000a51e 	bne	r2,zero,80c4ac <__udivdi3+0x598>
  80c218:	3006d23a 	srli	r3,r6,8
  80c21c:	04400204 	movi	r17,8
  80c220:	003f5506 	br	80bf78 <__udivdi3+0x64>
  80c224:	38804030 	cmpltui	r2,r7,256
  80c228:	1000a51e 	bne	r2,zero,80c4c0 <__udivdi3+0x5ac>
  80c22c:	3804d23a 	srli	r2,r7,8
  80c230:	01000204 	movi	r4,8
  80c234:	003fa006 	br	80c0b8 <__udivdi3+0x1a4>
  80c238:	80a0983a 	sll	r16,r16,r2
  80c23c:	946ed83a 	srl	r23,r18,r17
  80c240:	9086983a 	sll	r3,r18,r2
  80c244:	802cd43a 	srli	r22,r16,16
  80c248:	a462d83a 	srl	r17,r20,r17
  80c24c:	b809883a 	mov	r4,r23
  80c250:	b00b883a 	mov	r5,r22
  80c254:	88eab03a 	or	r21,r17,r3
  80c258:	a0a6983a 	sll	r19,r20,r2
  80c25c:	080cc500 	call	80cc50 <__umodsi3>
  80c260:	b809883a 	mov	r4,r23
  80c264:	b00b883a 	mov	r5,r22
  80c268:	1025883a 	mov	r18,r2
  80c26c:	853fffcc 	andi	r20,r16,65535
  80c270:	080cbec0 	call	80cbec <__udivsi3>
  80c274:	a009883a 	mov	r4,r20
  80c278:	100b883a 	mov	r5,r2
  80c27c:	102f883a 	mov	r23,r2
  80c280:	080ccac0 	call	80ccac <__mulsi3>
  80c284:	9024943a 	slli	r18,r18,16
  80c288:	a808d43a 	srli	r4,r21,16
  80c28c:	9108b03a 	or	r4,r18,r4
  80c290:	2080062e 	bgeu	r4,r2,80c2ac <__udivdi3+0x398>
  80c294:	2409883a 	add	r4,r4,r16
  80c298:	b8ffffc4 	addi	r3,r23,-1
  80c29c:	24009936 	bltu	r4,r16,80c504 <__udivdi3+0x5f0>
  80c2a0:	2080982e 	bgeu	r4,r2,80c504 <__udivdi3+0x5f0>
  80c2a4:	bdffff84 	addi	r23,r23,-2
  80c2a8:	2409883a 	add	r4,r4,r16
  80c2ac:	20a3c83a 	sub	r17,r4,r2
  80c2b0:	8809883a 	mov	r4,r17
  80c2b4:	b00b883a 	mov	r5,r22
  80c2b8:	080cc500 	call	80cc50 <__umodsi3>
  80c2bc:	1025883a 	mov	r18,r2
  80c2c0:	8809883a 	mov	r4,r17
  80c2c4:	b00b883a 	mov	r5,r22
  80c2c8:	9024943a 	slli	r18,r18,16
  80c2cc:	080cbec0 	call	80cbec <__udivsi3>
  80c2d0:	100b883a 	mov	r5,r2
  80c2d4:	a009883a 	mov	r4,r20
  80c2d8:	ac7fffcc 	andi	r17,r21,65535
  80c2dc:	1039883a 	mov	fp,r2
  80c2e0:	9462b03a 	or	r17,r18,r17
  80c2e4:	080ccac0 	call	80ccac <__mulsi3>
  80c2e8:	8880062e 	bgeu	r17,r2,80c304 <__udivdi3+0x3f0>
  80c2ec:	8c23883a 	add	r17,r17,r16
  80c2f0:	e0ffffc4 	addi	r3,fp,-1
  80c2f4:	8c007f36 	bltu	r17,r16,80c4f4 <__udivdi3+0x5e0>
  80c2f8:	88807e2e 	bgeu	r17,r2,80c4f4 <__udivdi3+0x5e0>
  80c2fc:	e73fff84 	addi	fp,fp,-2
  80c300:	8c23883a 	add	r17,r17,r16
  80c304:	b806943a 	slli	r3,r23,16
  80c308:	88a3c83a 	sub	r17,r17,r2
  80c30c:	1f06b03a 	or	r3,r3,fp
  80c310:	003f8a06 	br	80c13c <__udivdi3+0x228>
  80c314:	30a6d83a 	srl	r19,r6,r2
  80c318:	3c4e983a 	sll	r7,r7,r17
  80c31c:	90a0d83a 	srl	r16,r18,r2
  80c320:	9446983a 	sll	r3,r18,r17
  80c324:	99e6b03a 	or	r19,r19,r7
  80c328:	a084d83a 	srl	r2,r20,r2
  80c32c:	9838d43a 	srli	fp,r19,16
  80c330:	8009883a 	mov	r4,r16
  80c334:	10eab03a 	or	r21,r2,r3
  80c338:	e00b883a 	mov	r5,fp
  80c33c:	346c983a 	sll	r22,r6,r17
  80c340:	dd400015 	stw	r21,0(sp)
  80c344:	080cc500 	call	80cc50 <__umodsi3>
  80c348:	8009883a 	mov	r4,r16
  80c34c:	e00b883a 	mov	r5,fp
  80c350:	102f883a 	mov	r23,r2
  80c354:	9cbfffcc 	andi	r18,r19,65535
  80c358:	080cbec0 	call	80cbec <__udivsi3>
  80c35c:	9009883a 	mov	r4,r18
  80c360:	100b883a 	mov	r5,r2
  80c364:	1021883a 	mov	r16,r2
  80c368:	080ccac0 	call	80ccac <__mulsi3>
  80c36c:	b82e943a 	slli	r23,r23,16
  80c370:	a808d43a 	srli	r4,r21,16
  80c374:	b908b03a 	or	r4,r23,r4
  80c378:	2080062e 	bgeu	r4,r2,80c394 <__udivdi3+0x480>
  80c37c:	24c9883a 	add	r4,r4,r19
  80c380:	817fffc4 	addi	r5,r16,-1
  80c384:	24c05d36 	bltu	r4,r19,80c4fc <__udivdi3+0x5e8>
  80c388:	20805c2e 	bgeu	r4,r2,80c4fc <__udivdi3+0x5e8>
  80c38c:	843fff84 	addi	r16,r16,-2
  80c390:	24c9883a 	add	r4,r4,r19
  80c394:	20abc83a 	sub	r21,r4,r2
  80c398:	a809883a 	mov	r4,r21
  80c39c:	e00b883a 	mov	r5,fp
  80c3a0:	080cc500 	call	80cc50 <__umodsi3>
  80c3a4:	a809883a 	mov	r4,r21
  80c3a8:	e00b883a 	mov	r5,fp
  80c3ac:	102b883a 	mov	r21,r2
  80c3b0:	080cbec0 	call	80cbec <__udivsi3>
  80c3b4:	9009883a 	mov	r4,r18
  80c3b8:	100b883a 	mov	r5,r2
  80c3bc:	102f883a 	mov	r23,r2
  80c3c0:	080ccac0 	call	80ccac <__mulsi3>
  80c3c4:	d8c00017 	ldw	r3,0(sp)
  80c3c8:	a82a943a 	slli	r21,r21,16
  80c3cc:	100d883a 	mov	r6,r2
  80c3d0:	1cbfffcc 	andi	r18,r3,65535
  80c3d4:	aca4b03a 	or	r18,r21,r18
  80c3d8:	9080062e 	bgeu	r18,r2,80c3f4 <__udivdi3+0x4e0>
  80c3dc:	94e5883a 	add	r18,r18,r19
  80c3e0:	b8bfffc4 	addi	r2,r23,-1
  80c3e4:	94c04136 	bltu	r18,r19,80c4ec <__udivdi3+0x5d8>
  80c3e8:	9180402e 	bgeu	r18,r6,80c4ec <__udivdi3+0x5d8>
  80c3ec:	bdffff84 	addi	r23,r23,-2
  80c3f0:	94e5883a 	add	r18,r18,r19
  80c3f4:	8004943a 	slli	r2,r16,16
  80c3f8:	bd7fffcc 	andi	r21,r23,65535
  80c3fc:	b73fffcc 	andi	fp,r22,65535
  80c400:	15e0b03a 	or	r16,r2,r23
  80c404:	8026d43a 	srli	r19,r16,16
  80c408:	a809883a 	mov	r4,r21
  80c40c:	e00b883a 	mov	r5,fp
  80c410:	91a5c83a 	sub	r18,r18,r6
  80c414:	b02cd43a 	srli	r22,r22,16
  80c418:	080ccac0 	call	80ccac <__mulsi3>
  80c41c:	9809883a 	mov	r4,r19
  80c420:	e00b883a 	mov	r5,fp
  80c424:	102f883a 	mov	r23,r2
  80c428:	080ccac0 	call	80ccac <__mulsi3>
  80c42c:	9809883a 	mov	r4,r19
  80c430:	b00b883a 	mov	r5,r22
  80c434:	1027883a 	mov	r19,r2
  80c438:	080ccac0 	call	80ccac <__mulsi3>
  80c43c:	a809883a 	mov	r4,r21
  80c440:	b00b883a 	mov	r5,r22
  80c444:	102b883a 	mov	r21,r2
  80c448:	080ccac0 	call	80ccac <__mulsi3>
  80c44c:	b806d43a 	srli	r3,r23,16
  80c450:	14c5883a 	add	r2,r2,r19
  80c454:	1887883a 	add	r3,r3,r2
  80c458:	1cc0022e 	bgeu	r3,r19,80c464 <__udivdi3+0x550>
  80c45c:	00800074 	movhi	r2,1
  80c460:	a8ab883a 	add	r21,r21,r2
  80c464:	1804d43a 	srli	r2,r3,16
  80c468:	156b883a 	add	r21,r2,r21
  80c46c:	95400936 	bltu	r18,r21,80c494 <__udivdi3+0x580>
  80c470:	95400326 	beq	r18,r21,80c480 <__udivdi3+0x56c>
  80c474:	8005883a 	mov	r2,r16
  80c478:	0007883a 	mov	r3,zero
  80c47c:	003efc06 	br	80c070 <__udivdi3+0x15c>
  80c480:	1806943a 	slli	r3,r3,16
  80c484:	a44c983a 	sll	r6,r20,r17
  80c488:	bdffffcc 	andi	r23,r23,65535
  80c48c:	1dc7883a 	add	r3,r3,r23
  80c490:	30fff82e 	bgeu	r6,r3,80c474 <__udivdi3+0x560>
  80c494:	80bfffc4 	addi	r2,r16,-1
  80c498:	0007883a 	mov	r3,zero
  80c49c:	003ef406 	br	80c070 <__udivdi3+0x15c>
  80c4a0:	3804d43a 	srli	r2,r7,16
  80c4a4:	01000404 	movi	r4,16
  80c4a8:	003f0306 	br	80c0b8 <__udivdi3+0x1a4>
  80c4ac:	3007883a 	mov	r3,r6
  80c4b0:	003eb106 	br	80bf78 <__udivdi3+0x64>
  80c4b4:	0007883a 	mov	r3,zero
  80c4b8:	00800044 	movi	r2,1
  80c4bc:	003eec06 	br	80c070 <__udivdi3+0x15c>
  80c4c0:	3805883a 	mov	r2,r7
  80c4c4:	0009883a 	mov	r4,zero
  80c4c8:	003efb06 	br	80c0b8 <__udivdi3+0x1a4>
  80c4cc:	8006d43a 	srli	r3,r16,16
  80c4d0:	04400404 	movi	r17,16
  80c4d4:	003f0e06 	br	80c110 <__udivdi3+0x1fc>
  80c4d8:	3006d43a 	srli	r3,r6,16
  80c4dc:	04400404 	movi	r17,16
  80c4e0:	003ea506 	br	80bf78 <__udivdi3+0x64>
  80c4e4:	8007883a 	mov	r3,r16
  80c4e8:	003f0906 	br	80c110 <__udivdi3+0x1fc>
  80c4ec:	102f883a 	mov	r23,r2
  80c4f0:	003fc006 	br	80c3f4 <__udivdi3+0x4e0>
  80c4f4:	1839883a 	mov	fp,r3
  80c4f8:	003f8206 	br	80c304 <__udivdi3+0x3f0>
  80c4fc:	2821883a 	mov	r16,r5
  80c500:	003fa406 	br	80c394 <__udivdi3+0x480>
  80c504:	182f883a 	mov	r23,r3
  80c508:	003f6806 	br	80c2ac <__udivdi3+0x398>
  80c50c:	94bfff84 	addi	r18,r18,-2
  80c510:	003f3706 	br	80c1f0 <__udivdi3+0x2dc>
  80c514:	94bfff84 	addi	r18,r18,-2
  80c518:	003ece06 	br	80c054 <__udivdi3+0x140>
  80c51c:	ad7fff84 	addi	r21,r21,-2
  80c520:	2409883a 	add	r4,r4,r16
  80c524:	003eb606 	br	80c000 <__udivdi3+0xec>
  80c528:	ad7fff84 	addi	r21,r21,-2
  80c52c:	2409883a 	add	r4,r4,r16
  80c530:	003f1806 	br	80c194 <__udivdi3+0x280>

0080c534 <__umoddi3>:
  80c534:	defff304 	addi	sp,sp,-52
  80c538:	dc400415 	stw	r17,16(sp)
  80c53c:	dc000315 	stw	r16,12(sp)
  80c540:	dfc00c15 	stw	ra,48(sp)
  80c544:	df000b15 	stw	fp,44(sp)
  80c548:	ddc00a15 	stw	r23,40(sp)
  80c54c:	dd800915 	stw	r22,36(sp)
  80c550:	dd400815 	stw	r21,32(sp)
  80c554:	dd000715 	stw	r20,28(sp)
  80c558:	dcc00615 	stw	r19,24(sp)
  80c55c:	dc800515 	stw	r18,20(sp)
  80c560:	2823883a 	mov	r17,r5
  80c564:	2021883a 	mov	r16,r4
  80c568:	38003b1e 	bne	r7,zero,80c658 <__umoddi3+0x124>
  80c56c:	3825883a 	mov	r18,r7
  80c570:	3029883a 	mov	r20,r6
  80c574:	2027883a 	mov	r19,r4
  80c578:	29805b2e 	bgeu	r5,r6,80c6e8 <__umoddi3+0x1b4>
  80c57c:	00bfffd4 	movui	r2,65535
  80c580:	282d883a 	mov	r22,r5
  80c584:	11809a2e 	bgeu	r2,r6,80c7f0 <__umoddi3+0x2bc>
  80c588:	00804034 	movhi	r2,256
  80c58c:	30814436 	bltu	r6,r2,80caa0 <__umoddi3+0x56c>
  80c590:	3006d63a 	srli	r3,r6,24
  80c594:	04800604 	movi	r18,24
  80c598:	00802074 	movhi	r2,129
  80c59c:	1885883a 	add	r2,r3,r2
  80c5a0:	10886b03 	ldbu	r2,8620(r2)
  80c5a4:	00c00804 	movi	r3,32
  80c5a8:	1485883a 	add	r2,r2,r18
  80c5ac:	18a5c83a 	sub	r18,r3,r2
  80c5b0:	18800526 	beq	r3,r2,80c5c8 <__umoddi3+0x94>
  80c5b4:	8ca2983a 	sll	r17,r17,r18
  80c5b8:	8084d83a 	srl	r2,r16,r2
  80c5bc:	34a8983a 	sll	r20,r6,r18
  80c5c0:	84a6983a 	sll	r19,r16,r18
  80c5c4:	146cb03a 	or	r22,r2,r17
  80c5c8:	a02ed43a 	srli	r23,r20,16
  80c5cc:	b009883a 	mov	r4,r22
  80c5d0:	a57fffcc 	andi	r21,r20,65535
  80c5d4:	b80b883a 	mov	r5,r23
  80c5d8:	080cc500 	call	80cc50 <__umodsi3>
  80c5dc:	b80b883a 	mov	r5,r23
  80c5e0:	b009883a 	mov	r4,r22
  80c5e4:	1023883a 	mov	r17,r2
  80c5e8:	080cbec0 	call	80cbec <__udivsi3>
  80c5ec:	a809883a 	mov	r4,r21
  80c5f0:	100b883a 	mov	r5,r2
  80c5f4:	080ccac0 	call	80ccac <__mulsi3>
  80c5f8:	8822943a 	slli	r17,r17,16
  80c5fc:	9808d43a 	srli	r4,r19,16
  80c600:	8908b03a 	or	r4,r17,r4
  80c604:	2080042e 	bgeu	r4,r2,80c618 <__umoddi3+0xe4>
  80c608:	2509883a 	add	r4,r4,r20
  80c60c:	25000236 	bltu	r4,r20,80c618 <__umoddi3+0xe4>
  80c610:	2080012e 	bgeu	r4,r2,80c618 <__umoddi3+0xe4>
  80c614:	2509883a 	add	r4,r4,r20
  80c618:	20a1c83a 	sub	r16,r4,r2
  80c61c:	b80b883a 	mov	r5,r23
  80c620:	8009883a 	mov	r4,r16
  80c624:	080cc500 	call	80cc50 <__umodsi3>
  80c628:	b80b883a 	mov	r5,r23
  80c62c:	8009883a 	mov	r4,r16
  80c630:	1023883a 	mov	r17,r2
  80c634:	080cbec0 	call	80cbec <__udivsi3>
  80c638:	8822943a 	slli	r17,r17,16
  80c63c:	100b883a 	mov	r5,r2
  80c640:	a809883a 	mov	r4,r21
  80c644:	080ccac0 	call	80ccac <__mulsi3>
  80c648:	98ffffcc 	andi	r3,r19,65535
  80c64c:	88c6b03a 	or	r3,r17,r3
  80c650:	18805e2e 	bgeu	r3,r2,80c7cc <__umoddi3+0x298>
  80c654:	00005906 	br	80c7bc <__umoddi3+0x288>
  80c658:	2005883a 	mov	r2,r4
  80c65c:	29c00d2e 	bgeu	r5,r7,80c694 <__umoddi3+0x160>
  80c660:	2807883a 	mov	r3,r5
  80c664:	dfc00c17 	ldw	ra,48(sp)
  80c668:	df000b17 	ldw	fp,44(sp)
  80c66c:	ddc00a17 	ldw	r23,40(sp)
  80c670:	dd800917 	ldw	r22,36(sp)
  80c674:	dd400817 	ldw	r21,32(sp)
  80c678:	dd000717 	ldw	r20,28(sp)
  80c67c:	dcc00617 	ldw	r19,24(sp)
  80c680:	dc800517 	ldw	r18,20(sp)
  80c684:	dc400417 	ldw	r17,16(sp)
  80c688:	dc000317 	ldw	r16,12(sp)
  80c68c:	dec00d04 	addi	sp,sp,52
  80c690:	f800283a 	ret
  80c694:	013fffd4 	movui	r4,65535
  80c698:	2807883a 	mov	r3,r5
  80c69c:	21c0592e 	bgeu	r4,r7,80c804 <__umoddi3+0x2d0>
  80c6a0:	01004034 	movhi	r4,256
  80c6a4:	39010336 	bltu	r7,r4,80cab4 <__umoddi3+0x580>
  80c6a8:	3808d63a 	srli	r4,r7,24
  80c6ac:	02000604 	movi	r8,24
  80c6b0:	01402074 	movhi	r5,129
  80c6b4:	214b883a 	add	r5,r4,r5
  80c6b8:	2d086b03 	ldbu	r20,8620(r5)
  80c6bc:	01000804 	movi	r4,32
  80c6c0:	a229883a 	add	r20,r20,r8
  80c6c4:	252bc83a 	sub	r21,r4,r20
  80c6c8:	2500531e 	bne	r4,r20,80c818 <__umoddi3+0x2e4>
  80c6cc:	3c400136 	bltu	r7,r17,80c6d4 <__umoddi3+0x1a0>
  80c6d0:	81bfe436 	bltu	r16,r6,80c664 <__umoddi3+0x130>
  80c6d4:	8185c83a 	sub	r2,r16,r6
  80c6d8:	89cfc83a 	sub	r7,r17,r7
  80c6dc:	8087803a 	cmpltu	r3,r16,r2
  80c6e0:	38c7c83a 	sub	r3,r7,r3
  80c6e4:	003fdf06 	br	80c664 <__umoddi3+0x130>
  80c6e8:	3000041e 	bne	r6,zero,80c6fc <__umoddi3+0x1c8>
  80c6ec:	000b883a 	mov	r5,zero
  80c6f0:	01000044 	movi	r4,1
  80c6f4:	080cbec0 	call	80cbec <__udivsi3>
  80c6f8:	1029883a 	mov	r20,r2
  80c6fc:	00bfffd4 	movui	r2,65535
  80c700:	1500362e 	bgeu	r2,r20,80c7dc <__umoddi3+0x2a8>
  80c704:	00804034 	movhi	r2,256
  80c708:	a080ed36 	bltu	r20,r2,80cac0 <__umoddi3+0x58c>
  80c70c:	a006d63a 	srli	r3,r20,24
  80c710:	04800604 	movi	r18,24
  80c714:	00802074 	movhi	r2,129
  80c718:	1885883a 	add	r2,r3,r2
  80c71c:	15886b03 	ldbu	r22,8620(r2)
  80c720:	00800804 	movi	r2,32
  80c724:	b4ad883a 	add	r22,r22,r18
  80c728:	15a5c83a 	sub	r18,r2,r22
  80c72c:	1580a51e 	bne	r2,r22,80c9c4 <__umoddi3+0x490>
  80c730:	a02ed43a 	srli	r23,r20,16
  80c734:	8d23c83a 	sub	r17,r17,r20
  80c738:	a57fffcc 	andi	r21,r20,65535
  80c73c:	8809883a 	mov	r4,r17
  80c740:	b80b883a 	mov	r5,r23
  80c744:	080cc500 	call	80cc50 <__umodsi3>
  80c748:	8809883a 	mov	r4,r17
  80c74c:	b80b883a 	mov	r5,r23
  80c750:	1023883a 	mov	r17,r2
  80c754:	080cbec0 	call	80cbec <__udivsi3>
  80c758:	1009883a 	mov	r4,r2
  80c75c:	a80b883a 	mov	r5,r21
  80c760:	080ccac0 	call	80ccac <__mulsi3>
  80c764:	8822943a 	slli	r17,r17,16
  80c768:	9808d43a 	srli	r4,r19,16
  80c76c:	8908b03a 	or	r4,r17,r4
  80c770:	2080032e 	bgeu	r4,r2,80c780 <__umoddi3+0x24c>
  80c774:	2509883a 	add	r4,r4,r20
  80c778:	25000136 	bltu	r4,r20,80c780 <__umoddi3+0x24c>
  80c77c:	2080dc36 	bltu	r4,r2,80caf0 <__umoddi3+0x5bc>
  80c780:	20a1c83a 	sub	r16,r4,r2
  80c784:	b80b883a 	mov	r5,r23
  80c788:	8009883a 	mov	r4,r16
  80c78c:	080cc500 	call	80cc50 <__umodsi3>
  80c790:	b80b883a 	mov	r5,r23
  80c794:	8009883a 	mov	r4,r16
  80c798:	1023883a 	mov	r17,r2
  80c79c:	8822943a 	slli	r17,r17,16
  80c7a0:	080cbec0 	call	80cbec <__udivsi3>
  80c7a4:	a80b883a 	mov	r5,r21
  80c7a8:	1009883a 	mov	r4,r2
  80c7ac:	080ccac0 	call	80ccac <__mulsi3>
  80c7b0:	9cffffcc 	andi	r19,r19,65535
  80c7b4:	8cc6b03a 	or	r3,r17,r19
  80c7b8:	1880042e 	bgeu	r3,r2,80c7cc <__umoddi3+0x298>
  80c7bc:	1d07883a 	add	r3,r3,r20
  80c7c0:	1d000236 	bltu	r3,r20,80c7cc <__umoddi3+0x298>
  80c7c4:	1880012e 	bgeu	r3,r2,80c7cc <__umoddi3+0x298>
  80c7c8:	1d07883a 	add	r3,r3,r20
  80c7cc:	1885c83a 	sub	r2,r3,r2
  80c7d0:	1484d83a 	srl	r2,r2,r18
  80c7d4:	0007883a 	mov	r3,zero
  80c7d8:	003fa206 	br	80c664 <__umoddi3+0x130>
  80c7dc:	a0804030 	cmpltui	r2,r20,256
  80c7e0:	1000ba1e 	bne	r2,zero,80cacc <__umoddi3+0x598>
  80c7e4:	a006d23a 	srli	r3,r20,8
  80c7e8:	04800204 	movi	r18,8
  80c7ec:	003fc906 	br	80c714 <__umoddi3+0x1e0>
  80c7f0:	30804030 	cmpltui	r2,r6,256
  80c7f4:	1000ad1e 	bne	r2,zero,80caac <__umoddi3+0x578>
  80c7f8:	3006d23a 	srli	r3,r6,8
  80c7fc:	04800204 	movi	r18,8
  80c800:	003f6506 	br	80c598 <__umoddi3+0x64>
  80c804:	39004030 	cmpltui	r4,r7,256
  80c808:	2000b21e 	bne	r4,zero,80cad4 <__umoddi3+0x5a0>
  80c80c:	3808d23a 	srli	r4,r7,8
  80c810:	02000204 	movi	r8,8
  80c814:	003fa606 	br	80c6b0 <__umoddi3+0x17c>
  80c818:	3d4e983a 	sll	r7,r7,r21
  80c81c:	3508d83a 	srl	r4,r6,r20
  80c820:	8d2cd83a 	srl	r22,r17,r20
  80c824:	8504d83a 	srl	r2,r16,r20
  80c828:	21e4b03a 	or	r18,r4,r7
  80c82c:	8d62983a 	sll	r17,r17,r21
  80c830:	9026d43a 	srli	r19,r18,16
  80c834:	354c983a 	sll	r6,r6,r21
  80c838:	1444b03a 	or	r2,r2,r17
  80c83c:	b009883a 	mov	r4,r22
  80c840:	980b883a 	mov	r5,r19
  80c844:	d9800115 	stw	r6,4(sp)
  80c848:	d8800015 	stw	r2,0(sp)
  80c84c:	080cc500 	call	80cc50 <__umodsi3>
  80c850:	980b883a 	mov	r5,r19
  80c854:	b009883a 	mov	r4,r22
  80c858:	102f883a 	mov	r23,r2
  80c85c:	947fffcc 	andi	r17,r18,65535
  80c860:	080cbec0 	call	80cbec <__udivsi3>
  80c864:	8809883a 	mov	r4,r17
  80c868:	100b883a 	mov	r5,r2
  80c86c:	1039883a 	mov	fp,r2
  80c870:	080ccac0 	call	80ccac <__mulsi3>
  80c874:	d8c00017 	ldw	r3,0(sp)
  80c878:	b82e943a 	slli	r23,r23,16
  80c87c:	8560983a 	sll	r16,r16,r21
  80c880:	1808d43a 	srli	r4,r3,16
  80c884:	b908b03a 	or	r4,r23,r4
  80c888:	2080062e 	bgeu	r4,r2,80c8a4 <__umoddi3+0x370>
  80c88c:	2489883a 	add	r4,r4,r18
  80c890:	e17fffc4 	addi	r5,fp,-1
  80c894:	24809436 	bltu	r4,r18,80cae8 <__umoddi3+0x5b4>
  80c898:	2080932e 	bgeu	r4,r2,80cae8 <__umoddi3+0x5b4>
  80c89c:	e73fff84 	addi	fp,fp,-2
  80c8a0:	2489883a 	add	r4,r4,r18
  80c8a4:	20adc83a 	sub	r22,r4,r2
  80c8a8:	980b883a 	mov	r5,r19
  80c8ac:	b009883a 	mov	r4,r22
  80c8b0:	080cc500 	call	80cc50 <__umodsi3>
  80c8b4:	980b883a 	mov	r5,r19
  80c8b8:	b009883a 	mov	r4,r22
  80c8bc:	102f883a 	mov	r23,r2
  80c8c0:	080cbec0 	call	80cbec <__udivsi3>
  80c8c4:	100b883a 	mov	r5,r2
  80c8c8:	8809883a 	mov	r4,r17
  80c8cc:	d8800215 	stw	r2,8(sp)
  80c8d0:	080ccac0 	call	80ccac <__mulsi3>
  80c8d4:	d8c00017 	ldw	r3,0(sp)
  80c8d8:	b82e943a 	slli	r23,r23,16
  80c8dc:	d9400217 	ldw	r5,8(sp)
  80c8e0:	1c7fffcc 	andi	r17,r3,65535
  80c8e4:	bc62b03a 	or	r17,r23,r17
  80c8e8:	8880062e 	bgeu	r17,r2,80c904 <__umoddi3+0x3d0>
  80c8ec:	8ca3883a 	add	r17,r17,r18
  80c8f0:	28ffffc4 	addi	r3,r5,-1
  80c8f4:	8c807a36 	bltu	r17,r18,80cae0 <__umoddi3+0x5ac>
  80c8f8:	8880792e 	bgeu	r17,r2,80cae0 <__umoddi3+0x5ac>
  80c8fc:	297fff84 	addi	r5,r5,-2
  80c900:	8ca3883a 	add	r17,r17,r18
  80c904:	e02c943a 	slli	r22,fp,16
  80c908:	d9c00117 	ldw	r7,4(sp)
  80c90c:	29bfffcc 	andi	r6,r5,65535
  80c910:	b16cb03a 	or	r22,r22,r5
  80c914:	38ffffcc 	andi	r3,r7,65535
  80c918:	b02cd43a 	srli	r22,r22,16
  80c91c:	180b883a 	mov	r5,r3
  80c920:	3009883a 	mov	r4,r6
  80c924:	3838d43a 	srli	fp,r7,16
  80c928:	182f883a 	mov	r23,r3
  80c92c:	d9800015 	stw	r6,0(sp)
  80c930:	88a3c83a 	sub	r17,r17,r2
  80c934:	080ccac0 	call	80ccac <__mulsi3>
  80c938:	b80b883a 	mov	r5,r23
  80c93c:	b009883a 	mov	r4,r22
  80c940:	102f883a 	mov	r23,r2
  80c944:	080ccac0 	call	80ccac <__mulsi3>
  80c948:	e00b883a 	mov	r5,fp
  80c94c:	b009883a 	mov	r4,r22
  80c950:	102d883a 	mov	r22,r2
  80c954:	080ccac0 	call	80ccac <__mulsi3>
  80c958:	d9800017 	ldw	r6,0(sp)
  80c95c:	e00b883a 	mov	r5,fp
  80c960:	1039883a 	mov	fp,r2
  80c964:	3009883a 	mov	r4,r6
  80c968:	080ccac0 	call	80ccac <__mulsi3>
  80c96c:	b808d43a 	srli	r4,r23,16
  80c970:	1585883a 	add	r2,r2,r22
  80c974:	2089883a 	add	r4,r4,r2
  80c978:	2580022e 	bgeu	r4,r22,80c984 <__umoddi3+0x450>
  80c97c:	00800074 	movhi	r2,1
  80c980:	e0b9883a 	add	fp,fp,r2
  80c984:	2006d43a 	srli	r3,r4,16
  80c988:	2008943a 	slli	r4,r4,16
  80c98c:	bdffffcc 	andi	r23,r23,65535
  80c990:	1f07883a 	add	r3,r3,fp
  80c994:	25c9883a 	add	r4,r4,r23
  80c998:	88c03a36 	bltu	r17,r3,80ca84 <__umoddi3+0x550>
  80c99c:	88c03826 	beq	r17,r3,80ca80 <__umoddi3+0x54c>
  80c9a0:	8109c83a 	sub	r4,r16,r4
  80c9a4:	8121803a 	cmpltu	r16,r16,r4
  80c9a8:	88c7c83a 	sub	r3,r17,r3
  80c9ac:	1c07c83a 	sub	r3,r3,r16
  80c9b0:	1d04983a 	sll	r2,r3,r20
  80c9b4:	2548d83a 	srl	r4,r4,r21
  80c9b8:	1d46d83a 	srl	r3,r3,r21
  80c9bc:	1104b03a 	or	r2,r2,r4
  80c9c0:	003f2806 	br	80c664 <__umoddi3+0x130>
  80c9c4:	a4a8983a 	sll	r20,r20,r18
  80c9c8:	8da6d83a 	srl	r19,r17,r22
  80c9cc:	8ca2983a 	sll	r17,r17,r18
  80c9d0:	a02ed43a 	srli	r23,r20,16
  80c9d4:	9809883a 	mov	r4,r19
  80c9d8:	85acd83a 	srl	r22,r16,r22
  80c9dc:	b80b883a 	mov	r5,r23
  80c9e0:	080cc500 	call	80cc50 <__umodsi3>
  80c9e4:	9809883a 	mov	r4,r19
  80c9e8:	b80b883a 	mov	r5,r23
  80c9ec:	b46cb03a 	or	r22,r22,r17
  80c9f0:	a57fffcc 	andi	r21,r20,65535
  80c9f4:	1023883a 	mov	r17,r2
  80c9f8:	080cbec0 	call	80cbec <__udivsi3>
  80c9fc:	a809883a 	mov	r4,r21
  80ca00:	100b883a 	mov	r5,r2
  80ca04:	080ccac0 	call	80ccac <__mulsi3>
  80ca08:	8822943a 	slli	r17,r17,16
  80ca0c:	b008d43a 	srli	r4,r22,16
  80ca10:	84a6983a 	sll	r19,r16,r18
  80ca14:	8908b03a 	or	r4,r17,r4
  80ca18:	2080042e 	bgeu	r4,r2,80ca2c <__umoddi3+0x4f8>
  80ca1c:	2509883a 	add	r4,r4,r20
  80ca20:	25000236 	bltu	r4,r20,80ca2c <__umoddi3+0x4f8>
  80ca24:	2080012e 	bgeu	r4,r2,80ca2c <__umoddi3+0x4f8>
  80ca28:	2509883a 	add	r4,r4,r20
  80ca2c:	20a1c83a 	sub	r16,r4,r2
  80ca30:	8009883a 	mov	r4,r16
  80ca34:	b80b883a 	mov	r5,r23
  80ca38:	080cc500 	call	80cc50 <__umodsi3>
  80ca3c:	8009883a 	mov	r4,r16
  80ca40:	1021883a 	mov	r16,r2
  80ca44:	b80b883a 	mov	r5,r23
  80ca48:	8020943a 	slli	r16,r16,16
  80ca4c:	080cbec0 	call	80cbec <__udivsi3>
  80ca50:	100b883a 	mov	r5,r2
  80ca54:	a809883a 	mov	r4,r21
  80ca58:	b47fffcc 	andi	r17,r22,65535
  80ca5c:	080ccac0 	call	80ccac <__mulsi3>
  80ca60:	8462b03a 	or	r17,r16,r17
  80ca64:	8880042e 	bgeu	r17,r2,80ca78 <__umoddi3+0x544>
  80ca68:	8d23883a 	add	r17,r17,r20
  80ca6c:	8d000236 	bltu	r17,r20,80ca78 <__umoddi3+0x544>
  80ca70:	8880012e 	bgeu	r17,r2,80ca78 <__umoddi3+0x544>
  80ca74:	8d23883a 	add	r17,r17,r20
  80ca78:	88a3c83a 	sub	r17,r17,r2
  80ca7c:	003f2f06 	br	80c73c <__umoddi3+0x208>
  80ca80:	813fc72e 	bgeu	r16,r4,80c9a0 <__umoddi3+0x46c>
  80ca84:	d8800117 	ldw	r2,4(sp)
  80ca88:	20a7c83a 	sub	r19,r4,r2
  80ca8c:	24c9803a 	cmpltu	r4,r4,r19
  80ca90:	2489883a 	add	r4,r4,r18
  80ca94:	1907c83a 	sub	r3,r3,r4
  80ca98:	9809883a 	mov	r4,r19
  80ca9c:	003fc006 	br	80c9a0 <__umoddi3+0x46c>
  80caa0:	3006d43a 	srli	r3,r6,16
  80caa4:	04800404 	movi	r18,16
  80caa8:	003ebb06 	br	80c598 <__umoddi3+0x64>
  80caac:	3007883a 	mov	r3,r6
  80cab0:	003eb906 	br	80c598 <__umoddi3+0x64>
  80cab4:	3808d43a 	srli	r4,r7,16
  80cab8:	02000404 	movi	r8,16
  80cabc:	003efc06 	br	80c6b0 <__umoddi3+0x17c>
  80cac0:	a006d43a 	srli	r3,r20,16
  80cac4:	04800404 	movi	r18,16
  80cac8:	003f1206 	br	80c714 <__umoddi3+0x1e0>
  80cacc:	a007883a 	mov	r3,r20
  80cad0:	003f1006 	br	80c714 <__umoddi3+0x1e0>
  80cad4:	3809883a 	mov	r4,r7
  80cad8:	0011883a 	mov	r8,zero
  80cadc:	003ef406 	br	80c6b0 <__umoddi3+0x17c>
  80cae0:	180b883a 	mov	r5,r3
  80cae4:	003f8706 	br	80c904 <__umoddi3+0x3d0>
  80cae8:	2839883a 	mov	fp,r5
  80caec:	003f6d06 	br	80c8a4 <__umoddi3+0x370>
  80caf0:	2509883a 	add	r4,r4,r20
  80caf4:	003f2206 	br	80c780 <__umoddi3+0x24c>

0080caf8 <__divsi3>:
  80caf8:	20001a16 	blt	r4,zero,80cb64 <__divsi3+0x6c>
  80cafc:	000f883a 	mov	r7,zero
  80cb00:	2800020e 	bge	r5,zero,80cb0c <__divsi3+0x14>
  80cb04:	014bc83a 	sub	r5,zero,r5
  80cb08:	39c0005c 	xori	r7,r7,1
  80cb0c:	200d883a 	mov	r6,r4
  80cb10:	00c00044 	movi	r3,1
  80cb14:	2900092e 	bgeu	r5,r4,80cb3c <__divsi3+0x44>
  80cb18:	00800804 	movi	r2,32
  80cb1c:	00c00044 	movi	r3,1
  80cb20:	00000106 	br	80cb28 <__divsi3+0x30>
  80cb24:	10001226 	beq	r2,zero,80cb70 <__divsi3+0x78>
  80cb28:	294b883a 	add	r5,r5,r5
  80cb2c:	10bfffc4 	addi	r2,r2,-1
  80cb30:	18c7883a 	add	r3,r3,r3
  80cb34:	293ffb36 	bltu	r5,r4,80cb24 <__divsi3+0x2c>
  80cb38:	18000d26 	beq	r3,zero,80cb70 <__divsi3+0x78>
  80cb3c:	0005883a 	mov	r2,zero
  80cb40:	31400236 	bltu	r6,r5,80cb4c <__divsi3+0x54>
  80cb44:	314dc83a 	sub	r6,r6,r5
  80cb48:	10c4b03a 	or	r2,r2,r3
  80cb4c:	1806d07a 	srli	r3,r3,1
  80cb50:	280ad07a 	srli	r5,r5,1
  80cb54:	183ffa1e 	bne	r3,zero,80cb40 <__divsi3+0x48>
  80cb58:	38000126 	beq	r7,zero,80cb60 <__divsi3+0x68>
  80cb5c:	0085c83a 	sub	r2,zero,r2
  80cb60:	f800283a 	ret
  80cb64:	0109c83a 	sub	r4,zero,r4
  80cb68:	01c00044 	movi	r7,1
  80cb6c:	003fe406 	br	80cb00 <__divsi3+0x8>
  80cb70:	0005883a 	mov	r2,zero
  80cb74:	003ff806 	br	80cb58 <__divsi3+0x60>

0080cb78 <__modsi3>:
  80cb78:	20001916 	blt	r4,zero,80cbe0 <__modsi3+0x68>
  80cb7c:	000f883a 	mov	r7,zero
  80cb80:	2005883a 	mov	r2,r4
  80cb84:	2800010e 	bge	r5,zero,80cb8c <__modsi3+0x14>
  80cb88:	014bc83a 	sub	r5,zero,r5
  80cb8c:	00c00044 	movi	r3,1
  80cb90:	2900092e 	bgeu	r5,r4,80cbb8 <__modsi3+0x40>
  80cb94:	01800804 	movi	r6,32
  80cb98:	00c00044 	movi	r3,1
  80cb9c:	00000106 	br	80cba4 <__modsi3+0x2c>
  80cba0:	30000d26 	beq	r6,zero,80cbd8 <__modsi3+0x60>
  80cba4:	294b883a 	add	r5,r5,r5
  80cba8:	31bfffc4 	addi	r6,r6,-1
  80cbac:	18c7883a 	add	r3,r3,r3
  80cbb0:	293ffb36 	bltu	r5,r4,80cba0 <__modsi3+0x28>
  80cbb4:	18000826 	beq	r3,zero,80cbd8 <__modsi3+0x60>
  80cbb8:	1806d07a 	srli	r3,r3,1
  80cbbc:	11400136 	bltu	r2,r5,80cbc4 <__modsi3+0x4c>
  80cbc0:	1145c83a 	sub	r2,r2,r5
  80cbc4:	280ad07a 	srli	r5,r5,1
  80cbc8:	183ffb1e 	bne	r3,zero,80cbb8 <__modsi3+0x40>
  80cbcc:	38000126 	beq	r7,zero,80cbd4 <__modsi3+0x5c>
  80cbd0:	0085c83a 	sub	r2,zero,r2
  80cbd4:	f800283a 	ret
  80cbd8:	2005883a 	mov	r2,r4
  80cbdc:	003ffb06 	br	80cbcc <__modsi3+0x54>
  80cbe0:	0109c83a 	sub	r4,zero,r4
  80cbe4:	01c00044 	movi	r7,1
  80cbe8:	003fe506 	br	80cb80 <__modsi3+0x8>

0080cbec <__udivsi3>:
  80cbec:	200d883a 	mov	r6,r4
  80cbf0:	2900152e 	bgeu	r5,r4,80cc48 <__udivsi3+0x5c>
  80cbf4:	28001416 	blt	r5,zero,80cc48 <__udivsi3+0x5c>
  80cbf8:	00800804 	movi	r2,32
  80cbfc:	00c00044 	movi	r3,1
  80cc00:	00000206 	br	80cc0c <__udivsi3+0x20>
  80cc04:	10000e26 	beq	r2,zero,80cc40 <__udivsi3+0x54>
  80cc08:	28000516 	blt	r5,zero,80cc20 <__udivsi3+0x34>
  80cc0c:	294b883a 	add	r5,r5,r5
  80cc10:	10bfffc4 	addi	r2,r2,-1
  80cc14:	18c7883a 	add	r3,r3,r3
  80cc18:	293ffa36 	bltu	r5,r4,80cc04 <__udivsi3+0x18>
  80cc1c:	18000826 	beq	r3,zero,80cc40 <__udivsi3+0x54>
  80cc20:	0005883a 	mov	r2,zero
  80cc24:	31400236 	bltu	r6,r5,80cc30 <__udivsi3+0x44>
  80cc28:	314dc83a 	sub	r6,r6,r5
  80cc2c:	10c4b03a 	or	r2,r2,r3
  80cc30:	1806d07a 	srli	r3,r3,1
  80cc34:	280ad07a 	srli	r5,r5,1
  80cc38:	183ffa1e 	bne	r3,zero,80cc24 <__udivsi3+0x38>
  80cc3c:	f800283a 	ret
  80cc40:	0005883a 	mov	r2,zero
  80cc44:	f800283a 	ret
  80cc48:	00c00044 	movi	r3,1
  80cc4c:	003ff406 	br	80cc20 <__udivsi3+0x34>

0080cc50 <__umodsi3>:
  80cc50:	2005883a 	mov	r2,r4
  80cc54:	2900132e 	bgeu	r5,r4,80cca4 <__umodsi3+0x54>
  80cc58:	28001216 	blt	r5,zero,80cca4 <__umodsi3+0x54>
  80cc5c:	01800804 	movi	r6,32
  80cc60:	00c00044 	movi	r3,1
  80cc64:	00000206 	br	80cc70 <__umodsi3+0x20>
  80cc68:	30000c26 	beq	r6,zero,80cc9c <__umodsi3+0x4c>
  80cc6c:	28000516 	blt	r5,zero,80cc84 <__umodsi3+0x34>
  80cc70:	294b883a 	add	r5,r5,r5
  80cc74:	31bfffc4 	addi	r6,r6,-1
  80cc78:	18c7883a 	add	r3,r3,r3
  80cc7c:	293ffa36 	bltu	r5,r4,80cc68 <__umodsi3+0x18>
  80cc80:	18000626 	beq	r3,zero,80cc9c <__umodsi3+0x4c>
  80cc84:	1806d07a 	srli	r3,r3,1
  80cc88:	11400136 	bltu	r2,r5,80cc90 <__umodsi3+0x40>
  80cc8c:	1145c83a 	sub	r2,r2,r5
  80cc90:	280ad07a 	srli	r5,r5,1
  80cc94:	183ffb1e 	bne	r3,zero,80cc84 <__umodsi3+0x34>
  80cc98:	f800283a 	ret
  80cc9c:	2005883a 	mov	r2,r4
  80cca0:	f800283a 	ret
  80cca4:	00c00044 	movi	r3,1
  80cca8:	003ff606 	br	80cc84 <__umodsi3+0x34>

0080ccac <__mulsi3>:
  80ccac:	0005883a 	mov	r2,zero
  80ccb0:	20000726 	beq	r4,zero,80ccd0 <__mulsi3+0x24>
  80ccb4:	20c0004c 	andi	r3,r4,1
  80ccb8:	2008d07a 	srli	r4,r4,1
  80ccbc:	18000126 	beq	r3,zero,80ccc4 <__mulsi3+0x18>
  80ccc0:	1145883a 	add	r2,r2,r5
  80ccc4:	294b883a 	add	r5,r5,r5
  80ccc8:	203ffa1e 	bne	r4,zero,80ccb4 <__mulsi3+0x8>
  80cccc:	f800283a 	ret
  80ccd0:	f800283a 	ret

0080ccd4 <__adddf3>:
  80ccd4:	02000434 	movhi	r8,16
  80ccd8:	423fffc4 	addi	r8,r8,-1
  80ccdc:	2806d53a 	srli	r3,r5,20
  80cce0:	3804d53a 	srli	r2,r7,20
  80cce4:	2a14703a 	and	r10,r5,r8
  80cce8:	3a12703a 	and	r9,r7,r8
  80ccec:	280ad7fa 	srli	r5,r5,31
  80ccf0:	501490fa 	slli	r10,r10,3
  80ccf4:	2018d77a 	srli	r12,r4,29
  80ccf8:	481290fa 	slli	r9,r9,3
  80ccfc:	3016d77a 	srli	r11,r6,29
  80cd00:	380ed7fa 	srli	r7,r7,31
  80cd04:	defffb04 	addi	sp,sp,-20
  80cd08:	dc800215 	stw	r18,8(sp)
  80cd0c:	dc000015 	stw	r16,0(sp)
  80cd10:	1c81ffcc 	andi	r18,r3,2047
  80cd14:	1081ffcc 	andi	r2,r2,2047
  80cd18:	dfc00415 	stw	ra,16(sp)
  80cd1c:	dcc00315 	stw	r19,12(sp)
  80cd20:	dc400115 	stw	r17,4(sp)
  80cd24:	201c90fa 	slli	r14,r4,3
  80cd28:	301a90fa 	slli	r13,r6,3
  80cd2c:	2821883a 	mov	r16,r5
  80cd30:	6294b03a 	or	r10,r12,r10
  80cd34:	5a52b03a 	or	r9,r11,r9
  80cd38:	9087c83a 	sub	r3,r18,r2
  80cd3c:	29c06126 	beq	r5,r7,80cec4 <__adddf3+0x1f0>
  80cd40:	00c0550e 	bge	zero,r3,80ce98 <__adddf3+0x1c4>
  80cd44:	10007326 	beq	r2,zero,80cf14 <__adddf3+0x240>
  80cd48:	9081ffd8 	cmpnei	r2,r18,2047
  80cd4c:	1000bd26 	beq	r2,zero,80d044 <__adddf3+0x370>
  80cd50:	4a402034 	orhi	r9,r9,128
  80cd54:	18800e48 	cmpgei	r2,r3,57
  80cd58:	1000ef1e 	bne	r2,zero,80d118 <__adddf3+0x444>
  80cd5c:	18800808 	cmpgei	r2,r3,32
  80cd60:	1001321e 	bne	r2,zero,80d22c <__adddf3+0x558>
  80cd64:	00800804 	movi	r2,32
  80cd68:	10c5c83a 	sub	r2,r2,r3
  80cd6c:	68c8d83a 	srl	r4,r13,r3
  80cd70:	48a2983a 	sll	r17,r9,r2
  80cd74:	689a983a 	sll	r13,r13,r2
  80cd78:	48c6d83a 	srl	r3,r9,r3
  80cd7c:	8922b03a 	or	r17,r17,r4
  80cd80:	681ac03a 	cmpne	r13,r13,zero
  80cd84:	8b62b03a 	or	r17,r17,r13
  80cd88:	50d5c83a 	sub	r10,r10,r3
  80cd8c:	7463c83a 	sub	r17,r14,r17
  80cd90:	7451803a 	cmpltu	r8,r14,r17
  80cd94:	5211c83a 	sub	r8,r10,r8
  80cd98:	4080202c 	andhi	r2,r8,128
  80cd9c:	10008d26 	beq	r2,zero,80cfd4 <__adddf3+0x300>
  80cda0:	02402034 	movhi	r9,128
  80cda4:	4a7fffc4 	addi	r9,r9,-1
  80cda8:	4266703a 	and	r19,r8,r9
  80cdac:	9800b326 	beq	r19,zero,80d07c <__adddf3+0x3a8>
  80cdb0:	9809883a 	mov	r4,r19
  80cdb4:	080226c0 	call	80226c <__clzsi2>
  80cdb8:	10fffe04 	addi	r3,r2,-8
  80cdbc:	02000804 	movi	r8,32
  80cdc0:	40d1c83a 	sub	r8,r8,r3
  80cdc4:	8a10d83a 	srl	r8,r17,r8
  80cdc8:	98d2983a 	sll	r9,r19,r3
  80cdcc:	88e2983a 	sll	r17,r17,r3
  80cdd0:	4250b03a 	or	r8,r8,r9
  80cdd4:	1c80b216 	blt	r3,r18,80d0a0 <__adddf3+0x3cc>
  80cdd8:	1c87c83a 	sub	r3,r3,r18
  80cddc:	19000044 	addi	r4,r3,1
  80cde0:	20800808 	cmpgei	r2,r4,32
  80cde4:	10006f1e 	bne	r2,zero,80cfa4 <__adddf3+0x2d0>
  80cde8:	00800804 	movi	r2,32
  80cdec:	1105c83a 	sub	r2,r2,r4
  80cdf0:	8906d83a 	srl	r3,r17,r4
  80cdf4:	88a2983a 	sll	r17,r17,r2
  80cdf8:	4084983a 	sll	r2,r8,r2
  80cdfc:	4110d83a 	srl	r8,r8,r4
  80ce00:	8822c03a 	cmpne	r17,r17,zero
  80ce04:	10c4b03a 	or	r2,r2,r3
  80ce08:	1462b03a 	or	r17,r2,r17
  80ce0c:	0025883a 	mov	r18,zero
  80ce10:	888001cc 	andi	r2,r17,7
  80ce14:	10000726 	beq	r2,zero,80ce34 <__adddf3+0x160>
  80ce18:	888003cc 	andi	r2,r17,15
  80ce1c:	10800120 	cmpeqi	r2,r2,4
  80ce20:	1000041e 	bne	r2,zero,80ce34 <__adddf3+0x160>
  80ce24:	88c00104 	addi	r3,r17,4
  80ce28:	1c63803a 	cmpltu	r17,r3,r17
  80ce2c:	4451883a 	add	r8,r8,r17
  80ce30:	1823883a 	mov	r17,r3
  80ce34:	4080202c 	andhi	r2,r8,128
  80ce38:	10006826 	beq	r2,zero,80cfdc <__adddf3+0x308>
  80ce3c:	90c00044 	addi	r3,r18,1
  80ce40:	1881ffe0 	cmpeqi	r2,r3,2047
  80ce44:	18c1ffcc 	andi	r3,r3,2047
  80ce48:	10007a1e 	bne	r2,zero,80d034 <__adddf3+0x360>
  80ce4c:	00bfe034 	movhi	r2,65408
  80ce50:	10bfffc4 	addi	r2,r2,-1
  80ce54:	4090703a 	and	r8,r8,r2
  80ce58:	4004977a 	slli	r2,r8,29
  80ce5c:	4010927a 	slli	r8,r8,9
  80ce60:	8822d0fa 	srli	r17,r17,3
  80ce64:	4010d33a 	srli	r8,r8,12
  80ce68:	1444b03a 	or	r2,r2,r17
  80ce6c:	1806953a 	slli	r3,r3,20
  80ce70:	802097fa 	slli	r16,r16,31
  80ce74:	1a06b03a 	or	r3,r3,r8
  80ce78:	1c06b03a 	or	r3,r3,r16
  80ce7c:	dfc00417 	ldw	ra,16(sp)
  80ce80:	dcc00317 	ldw	r19,12(sp)
  80ce84:	dc800217 	ldw	r18,8(sp)
  80ce88:	dc400117 	ldw	r17,4(sp)
  80ce8c:	dc000017 	ldw	r16,0(sp)
  80ce90:	dec00504 	addi	sp,sp,20
  80ce94:	f800283a 	ret
  80ce98:	18002626 	beq	r3,zero,80cf34 <__adddf3+0x260>
  80ce9c:	1487c83a 	sub	r3,r2,r18
  80cea0:	9000ba1e 	bne	r18,zero,80d18c <__adddf3+0x4b8>
  80cea4:	5388b03a 	or	r4,r10,r14
  80cea8:	20011826 	beq	r4,zero,80d30c <__adddf3+0x638>
  80ceac:	193fffc4 	addi	r4,r3,-1
  80ceb0:	20015726 	beq	r4,zero,80d410 <__adddf3+0x73c>
  80ceb4:	18c1ffd8 	cmpnei	r3,r3,2047
  80ceb8:	18013026 	beq	r3,zero,80d37c <__adddf3+0x6a8>
  80cebc:	2007883a 	mov	r3,r4
  80cec0:	0000b506 	br	80d198 <__adddf3+0x4c4>
  80cec4:	00c07b0e 	bge	zero,r3,80d0b4 <__adddf3+0x3e0>
  80cec8:	10002e26 	beq	r2,zero,80cf84 <__adddf3+0x2b0>
  80cecc:	9081ffd8 	cmpnei	r2,r18,2047
  80ced0:	10005c26 	beq	r2,zero,80d044 <__adddf3+0x370>
  80ced4:	4a402034 	orhi	r9,r9,128
  80ced8:	18800e48 	cmpgei	r2,r3,57
  80cedc:	10004b1e 	bne	r2,zero,80d00c <__adddf3+0x338>
  80cee0:	18800808 	cmpgei	r2,r3,32
  80cee4:	1000ec26 	beq	r2,zero,80d298 <__adddf3+0x5c4>
  80cee8:	1c7ff804 	addi	r17,r3,-32
  80ceec:	19000820 	cmpeqi	r4,r3,32
  80cef0:	4c44d83a 	srl	r2,r9,r17
  80cef4:	2000041e 	bne	r4,zero,80cf08 <__adddf3+0x234>
  80cef8:	01001004 	movi	r4,64
  80cefc:	20c7c83a 	sub	r3,r4,r3
  80cf00:	48d2983a 	sll	r9,r9,r3
  80cf04:	6a5ab03a 	or	r13,r13,r9
  80cf08:	6822c03a 	cmpne	r17,r13,zero
  80cf0c:	88a2b03a 	or	r17,r17,r2
  80cf10:	00004006 	br	80d014 <__adddf3+0x340>
  80cf14:	4b44b03a 	or	r2,r9,r13
  80cf18:	10008226 	beq	r2,zero,80d124 <__adddf3+0x450>
  80cf1c:	18bfffc4 	addi	r2,r3,-1
  80cf20:	10011026 	beq	r2,zero,80d364 <__adddf3+0x690>
  80cf24:	18c1ffd8 	cmpnei	r3,r3,2047
  80cf28:	18004626 	beq	r3,zero,80d044 <__adddf3+0x370>
  80cf2c:	1007883a 	mov	r3,r2
  80cf30:	003f8806 	br	80cd54 <__adddf3+0x80>
  80cf34:	90800044 	addi	r2,r18,1
  80cf38:	1081ff8c 	andi	r2,r2,2046
  80cf3c:	1000a51e 	bne	r2,zero,80d1d4 <__adddf3+0x500>
  80cf40:	538ab03a 	or	r5,r10,r14
  80cf44:	4b44b03a 	or	r2,r9,r13
  80cf48:	9000f81e 	bne	r18,zero,80d32c <__adddf3+0x658>
  80cf4c:	28013726 	beq	r5,zero,80d42c <__adddf3+0x758>
  80cf50:	10011226 	beq	r2,zero,80d39c <__adddf3+0x6c8>
  80cf54:	7363c83a 	sub	r17,r14,r13
  80cf58:	7445803a 	cmpltu	r2,r14,r17
  80cf5c:	5251c83a 	sub	r8,r10,r9
  80cf60:	4091c83a 	sub	r8,r8,r2
  80cf64:	4080202c 	andhi	r2,r8,128
  80cf68:	10018f26 	beq	r2,zero,80d5a8 <__adddf3+0x8d4>
  80cf6c:	6ba3c83a 	sub	r17,r13,r14
  80cf70:	4a95c83a 	sub	r10,r9,r10
  80cf74:	6c51803a 	cmpltu	r8,r13,r17
  80cf78:	5211c83a 	sub	r8,r10,r8
  80cf7c:	3821883a 	mov	r16,r7
  80cf80:	003fa306 	br	80ce10 <__adddf3+0x13c>
  80cf84:	4b44b03a 	or	r2,r9,r13
  80cf88:	10006626 	beq	r2,zero,80d124 <__adddf3+0x450>
  80cf8c:	18bfffc4 	addi	r2,r3,-1
  80cf90:	1000ec26 	beq	r2,zero,80d344 <__adddf3+0x670>
  80cf94:	18c1ffd8 	cmpnei	r3,r3,2047
  80cf98:	18012d26 	beq	r3,zero,80d450 <__adddf3+0x77c>
  80cf9c:	1007883a 	mov	r3,r2
  80cfa0:	003fcd06 	br	80ced8 <__adddf3+0x204>
  80cfa4:	18fff844 	addi	r3,r3,-31
  80cfa8:	20800820 	cmpeqi	r2,r4,32
  80cfac:	40c6d83a 	srl	r3,r8,r3
  80cfb0:	1000041e 	bne	r2,zero,80cfc4 <__adddf3+0x2f0>
  80cfb4:	00801004 	movi	r2,64
  80cfb8:	1109c83a 	sub	r4,r2,r4
  80cfbc:	4110983a 	sll	r8,r8,r4
  80cfc0:	8a22b03a 	or	r17,r17,r8
  80cfc4:	8822c03a 	cmpne	r17,r17,zero
  80cfc8:	88e2b03a 	or	r17,r17,r3
  80cfcc:	0011883a 	mov	r8,zero
  80cfd0:	0025883a 	mov	r18,zero
  80cfd4:	888001cc 	andi	r2,r17,7
  80cfd8:	103f8f1e 	bne	r2,zero,80ce18 <__adddf3+0x144>
  80cfdc:	8822d0fa 	srli	r17,r17,3
  80cfe0:	4004977a 	slli	r2,r8,29
  80cfe4:	4014d0fa 	srli	r10,r8,3
  80cfe8:	9007883a 	mov	r3,r18
  80cfec:	8884b03a 	or	r2,r17,r2
  80cff0:	1901ffe0 	cmpeqi	r4,r3,2047
  80cff4:	2000191e 	bne	r4,zero,80d05c <__adddf3+0x388>
  80cff8:	02000434 	movhi	r8,16
  80cffc:	423fffc4 	addi	r8,r8,-1
  80d000:	5210703a 	and	r8,r10,r8
  80d004:	18c1ffcc 	andi	r3,r3,2047
  80d008:	003f9806 	br	80ce6c <__adddf3+0x198>
  80d00c:	4b62b03a 	or	r17,r9,r13
  80d010:	8822c03a 	cmpne	r17,r17,zero
  80d014:	8ba3883a 	add	r17,r17,r14
  80d018:	8b91803a 	cmpltu	r8,r17,r14
  80d01c:	4291883a 	add	r8,r8,r10
  80d020:	4080202c 	andhi	r2,r8,128
  80d024:	103feb26 	beq	r2,zero,80cfd4 <__adddf3+0x300>
  80d028:	94800044 	addi	r18,r18,1
  80d02c:	9081ffe0 	cmpeqi	r2,r18,2047
  80d030:	10007426 	beq	r2,zero,80d204 <__adddf3+0x530>
  80d034:	00c1ffc4 	movi	r3,2047
  80d038:	0011883a 	mov	r8,zero
  80d03c:	0005883a 	mov	r2,zero
  80d040:	003f8a06 	br	80ce6c <__adddf3+0x198>
  80d044:	500a977a 	slli	r5,r10,29
  80d048:	00c80034 	movhi	r3,8192
  80d04c:	18ffffc4 	addi	r3,r3,-1
  80d050:	5014d0fa 	srli	r10,r10,3
  80d054:	20c4703a 	and	r2,r4,r3
  80d058:	1144b03a 	or	r2,r2,r5
  80d05c:	1286b03a 	or	r3,r2,r10
  80d060:	18015426 	beq	r3,zero,80d5b4 <__adddf3+0x8e0>
  80d064:	00c00434 	movhi	r3,16
  80d068:	18ffffc4 	addi	r3,r3,-1
  80d06c:	52000234 	orhi	r8,r10,8
  80d070:	40d0703a 	and	r8,r8,r3
  80d074:	00c1ffc4 	movi	r3,2047
  80d078:	003f7c06 	br	80ce6c <__adddf3+0x198>
  80d07c:	8809883a 	mov	r4,r17
  80d080:	080226c0 	call	80226c <__clzsi2>
  80d084:	10c00604 	addi	r3,r2,24
  80d088:	19000808 	cmpgei	r4,r3,32
  80d08c:	203f4b26 	beq	r4,zero,80cdbc <__adddf3+0xe8>
  80d090:	123ffe04 	addi	r8,r2,-8
  80d094:	8a10983a 	sll	r8,r17,r8
  80d098:	0023883a 	mov	r17,zero
  80d09c:	1cbf4e0e 	bge	r3,r18,80cdd8 <__adddf3+0x104>
  80d0a0:	00bfe034 	movhi	r2,65408
  80d0a4:	10bfffc4 	addi	r2,r2,-1
  80d0a8:	90e5c83a 	sub	r18,r18,r3
  80d0ac:	4090703a 	and	r8,r8,r2
  80d0b0:	003f5706 	br	80ce10 <__adddf3+0x13c>
  80d0b4:	18002226 	beq	r3,zero,80d140 <__adddf3+0x46c>
  80d0b8:	1487c83a 	sub	r3,r2,r18
  80d0bc:	90006e26 	beq	r18,zero,80d278 <__adddf3+0x5a4>
  80d0c0:	1101ffd8 	cmpnei	r4,r2,2047
  80d0c4:	2000e926 	beq	r4,zero,80d46c <__adddf3+0x798>
  80d0c8:	52802034 	orhi	r10,r10,128
  80d0cc:	19000e48 	cmpgei	r4,r3,57
  80d0d0:	2000b91e 	bne	r4,zero,80d3b8 <__adddf3+0x6e4>
  80d0d4:	19000808 	cmpgei	r4,r3,32
  80d0d8:	2001101e 	bne	r4,zero,80d51c <__adddf3+0x848>
  80d0dc:	01000804 	movi	r4,32
  80d0e0:	20c9c83a 	sub	r4,r4,r3
  80d0e4:	5122983a 	sll	r17,r10,r4
  80d0e8:	70cad83a 	srl	r5,r14,r3
  80d0ec:	7108983a 	sll	r4,r14,r4
  80d0f0:	50d4d83a 	srl	r10,r10,r3
  80d0f4:	8962b03a 	or	r17,r17,r5
  80d0f8:	2008c03a 	cmpne	r4,r4,zero
  80d0fc:	8922b03a 	or	r17,r17,r4
  80d100:	4a93883a 	add	r9,r9,r10
  80d104:	8b63883a 	add	r17,r17,r13
  80d108:	8b51803a 	cmpltu	r8,r17,r13
  80d10c:	4251883a 	add	r8,r8,r9
  80d110:	1025883a 	mov	r18,r2
  80d114:	003fc206 	br	80d020 <__adddf3+0x34c>
  80d118:	4b62b03a 	or	r17,r9,r13
  80d11c:	8822c03a 	cmpne	r17,r17,zero
  80d120:	003f1a06 	br	80cd8c <__adddf3+0xb8>
  80d124:	500c977a 	slli	r6,r10,29
  80d128:	01480034 	movhi	r5,8192
  80d12c:	297fffc4 	addi	r5,r5,-1
  80d130:	2144703a 	and	r2,r4,r5
  80d134:	5014d0fa 	srli	r10,r10,3
  80d138:	1184b03a 	or	r2,r2,r6
  80d13c:	003fac06 	br	80cff0 <__adddf3+0x31c>
  80d140:	90800044 	addi	r2,r18,1
  80d144:	1141ff8c 	andi	r5,r2,2046
  80d148:	28005e1e 	bne	r5,zero,80d2c4 <__adddf3+0x5f0>
  80d14c:	5384b03a 	or	r2,r10,r14
  80d150:	9000a71e 	bne	r18,zero,80d3f0 <__adddf3+0x71c>
  80d154:	1000e526 	beq	r2,zero,80d4ec <__adddf3+0x818>
  80d158:	4b44b03a 	or	r2,r9,r13
  80d15c:	10008f26 	beq	r2,zero,80d39c <__adddf3+0x6c8>
  80d160:	7363883a 	add	r17,r14,r13
  80d164:	5255883a 	add	r10,r10,r9
  80d168:	8b91803a 	cmpltu	r8,r17,r14
  80d16c:	5211883a 	add	r8,r10,r8
  80d170:	4080202c 	andhi	r2,r8,128
  80d174:	103f9726 	beq	r2,zero,80cfd4 <__adddf3+0x300>
  80d178:	00bfe034 	movhi	r2,65408
  80d17c:	10bfffc4 	addi	r2,r2,-1
  80d180:	4090703a 	and	r8,r8,r2
  80d184:	04800044 	movi	r18,1
  80d188:	003f9206 	br	80cfd4 <__adddf3+0x300>
  80d18c:	1101ffd8 	cmpnei	r4,r2,2047
  80d190:	20007a26 	beq	r4,zero,80d37c <__adddf3+0x6a8>
  80d194:	52802034 	orhi	r10,r10,128
  80d198:	19000e48 	cmpgei	r4,r3,57
  80d19c:	20002e1e 	bne	r4,zero,80d258 <__adddf3+0x584>
  80d1a0:	19000808 	cmpgei	r4,r3,32
  80d1a4:	2000871e 	bne	r4,zero,80d3c4 <__adddf3+0x6f0>
  80d1a8:	01000804 	movi	r4,32
  80d1ac:	20c9c83a 	sub	r4,r4,r3
  80d1b0:	5122983a 	sll	r17,r10,r4
  80d1b4:	70cad83a 	srl	r5,r14,r3
  80d1b8:	711c983a 	sll	r14,r14,r4
  80d1bc:	50d4d83a 	srl	r10,r10,r3
  80d1c0:	8962b03a 	or	r17,r17,r5
  80d1c4:	701cc03a 	cmpne	r14,r14,zero
  80d1c8:	8ba2b03a 	or	r17,r17,r14
  80d1cc:	4a93c83a 	sub	r9,r9,r10
  80d1d0:	00002306 	br	80d260 <__adddf3+0x58c>
  80d1d4:	7363c83a 	sub	r17,r14,r13
  80d1d8:	5267c83a 	sub	r19,r10,r9
  80d1dc:	7451803a 	cmpltu	r8,r14,r17
  80d1e0:	9a27c83a 	sub	r19,r19,r8
  80d1e4:	9880202c 	andhi	r2,r19,128
  80d1e8:	1000421e 	bne	r2,zero,80d2f4 <__adddf3+0x620>
  80d1ec:	8cc4b03a 	or	r2,r17,r19
  80d1f0:	103eee1e 	bne	r2,zero,80cdac <__adddf3+0xd8>
  80d1f4:	0015883a 	mov	r10,zero
  80d1f8:	0021883a 	mov	r16,zero
  80d1fc:	003f7e06 	br	80cff8 <__adddf3+0x324>
  80d200:	04800084 	movi	r18,2
  80d204:	00bfe034 	movhi	r2,65408
  80d208:	10bfffc4 	addi	r2,r2,-1
  80d20c:	8806d07a 	srli	r3,r17,1
  80d210:	4090703a 	and	r8,r8,r2
  80d214:	400497fa 	slli	r2,r8,31
  80d218:	8c40004c 	andi	r17,r17,1
  80d21c:	1c62b03a 	or	r17,r3,r17
  80d220:	4010d07a 	srli	r8,r8,1
  80d224:	1462b03a 	or	r17,r2,r17
  80d228:	003ef906 	br	80ce10 <__adddf3+0x13c>
  80d22c:	1c7ff804 	addi	r17,r3,-32
  80d230:	19000820 	cmpeqi	r4,r3,32
  80d234:	4c44d83a 	srl	r2,r9,r17
  80d238:	2000041e 	bne	r4,zero,80d24c <__adddf3+0x578>
  80d23c:	01001004 	movi	r4,64
  80d240:	20c7c83a 	sub	r3,r4,r3
  80d244:	48d2983a 	sll	r9,r9,r3
  80d248:	6a5ab03a 	or	r13,r13,r9
  80d24c:	6822c03a 	cmpne	r17,r13,zero
  80d250:	88a2b03a 	or	r17,r17,r2
  80d254:	003ecd06 	br	80cd8c <__adddf3+0xb8>
  80d258:	5394b03a 	or	r10,r10,r14
  80d25c:	5022c03a 	cmpne	r17,r10,zero
  80d260:	6c63c83a 	sub	r17,r13,r17
  80d264:	6c51803a 	cmpltu	r8,r13,r17
  80d268:	4a11c83a 	sub	r8,r9,r8
  80d26c:	3821883a 	mov	r16,r7
  80d270:	1025883a 	mov	r18,r2
  80d274:	003ec806 	br	80cd98 <__adddf3+0xc4>
  80d278:	5388b03a 	or	r4,r10,r14
  80d27c:	20008226 	beq	r4,zero,80d488 <__adddf3+0x7b4>
  80d280:	193fffc4 	addi	r4,r3,-1
  80d284:	2000b026 	beq	r4,zero,80d548 <__adddf3+0x874>
  80d288:	18c1ffd8 	cmpnei	r3,r3,2047
  80d28c:	18007726 	beq	r3,zero,80d46c <__adddf3+0x798>
  80d290:	2007883a 	mov	r3,r4
  80d294:	003f8d06 	br	80d0cc <__adddf3+0x3f8>
  80d298:	00800804 	movi	r2,32
  80d29c:	10c5c83a 	sub	r2,r2,r3
  80d2a0:	68c8d83a 	srl	r4,r13,r3
  80d2a4:	48a2983a 	sll	r17,r9,r2
  80d2a8:	689a983a 	sll	r13,r13,r2
  80d2ac:	48c6d83a 	srl	r3,r9,r3
  80d2b0:	8922b03a 	or	r17,r17,r4
  80d2b4:	681ac03a 	cmpne	r13,r13,zero
  80d2b8:	8b62b03a 	or	r17,r17,r13
  80d2bc:	50d5883a 	add	r10,r10,r3
  80d2c0:	003f5406 	br	80d014 <__adddf3+0x340>
  80d2c4:	10c1ffe0 	cmpeqi	r3,r2,2047
  80d2c8:	183f5a1e 	bne	r3,zero,80d034 <__adddf3+0x360>
  80d2cc:	7351883a 	add	r8,r14,r13
  80d2d0:	4387803a 	cmpltu	r3,r8,r14
  80d2d4:	5255883a 	add	r10,r10,r9
  80d2d8:	50c7883a 	add	r3,r10,r3
  80d2dc:	401ad07a 	srli	r13,r8,1
  80d2e0:	182297fa 	slli	r17,r3,31
  80d2e4:	1810d07a 	srli	r8,r3,1
  80d2e8:	1025883a 	mov	r18,r2
  80d2ec:	8b62b03a 	or	r17,r17,r13
  80d2f0:	003f3806 	br	80cfd4 <__adddf3+0x300>
  80d2f4:	6ba3c83a 	sub	r17,r13,r14
  80d2f8:	4a93c83a 	sub	r9,r9,r10
  80d2fc:	6c51803a 	cmpltu	r8,r13,r17
  80d300:	4a27c83a 	sub	r19,r9,r8
  80d304:	3821883a 	mov	r16,r7
  80d308:	003ea806 	br	80cdac <__adddf3+0xd8>
  80d30c:	480a977a 	slli	r5,r9,29
  80d310:	01080034 	movhi	r4,8192
  80d314:	213fffc4 	addi	r4,r4,-1
  80d318:	3104703a 	and	r2,r6,r4
  80d31c:	4814d0fa 	srli	r10,r9,3
  80d320:	1144b03a 	or	r2,r2,r5
  80d324:	3821883a 	mov	r16,r7
  80d328:	003f3106 	br	80cff0 <__adddf3+0x31c>
  80d32c:	28005d1e 	bne	r5,zero,80d4a4 <__adddf3+0x7d0>
  80d330:	1000121e 	bne	r2,zero,80d37c <__adddf3+0x6a8>
  80d334:	0021883a 	mov	r16,zero
  80d338:	4015883a 	mov	r10,r8
  80d33c:	00bfffc4 	movi	r2,-1
  80d340:	003f4806 	br	80d064 <__adddf3+0x390>
  80d344:	7363883a 	add	r17,r14,r13
  80d348:	5255883a 	add	r10,r10,r9
  80d34c:	8b91803a 	cmpltu	r8,r17,r14
  80d350:	5211883a 	add	r8,r10,r8
  80d354:	4080202c 	andhi	r2,r8,128
  80d358:	103fa91e 	bne	r2,zero,80d200 <__adddf3+0x52c>
  80d35c:	04800044 	movi	r18,1
  80d360:	003f1c06 	br	80cfd4 <__adddf3+0x300>
  80d364:	7363c83a 	sub	r17,r14,r13
  80d368:	5255c83a 	sub	r10,r10,r9
  80d36c:	7451803a 	cmpltu	r8,r14,r17
  80d370:	5211c83a 	sub	r8,r10,r8
  80d374:	04800044 	movi	r18,1
  80d378:	003e8706 	br	80cd98 <__adddf3+0xc4>
  80d37c:	4806977a 	slli	r3,r9,29
  80d380:	00880034 	movhi	r2,8192
  80d384:	10bfffc4 	addi	r2,r2,-1
  80d388:	3084703a 	and	r2,r6,r2
  80d38c:	4814d0fa 	srli	r10,r9,3
  80d390:	10c4b03a 	or	r2,r2,r3
  80d394:	3821883a 	mov	r16,r7
  80d398:	003f3006 	br	80d05c <__adddf3+0x388>
  80d39c:	500a977a 	slli	r5,r10,29
  80d3a0:	00880034 	movhi	r2,8192
  80d3a4:	10bfffc4 	addi	r2,r2,-1
  80d3a8:	2084703a 	and	r2,r4,r2
  80d3ac:	5014d0fa 	srli	r10,r10,3
  80d3b0:	1144b03a 	or	r2,r2,r5
  80d3b4:	003f1006 	br	80cff8 <__adddf3+0x324>
  80d3b8:	5394b03a 	or	r10,r10,r14
  80d3bc:	5022c03a 	cmpne	r17,r10,zero
  80d3c0:	003f5006 	br	80d104 <__adddf3+0x430>
  80d3c4:	1c7ff804 	addi	r17,r3,-32
  80d3c8:	19400820 	cmpeqi	r5,r3,32
  80d3cc:	5448d83a 	srl	r4,r10,r17
  80d3d0:	2800041e 	bne	r5,zero,80d3e4 <__adddf3+0x710>
  80d3d4:	01401004 	movi	r5,64
  80d3d8:	28c7c83a 	sub	r3,r5,r3
  80d3dc:	50d4983a 	sll	r10,r10,r3
  80d3e0:	729cb03a 	or	r14,r14,r10
  80d3e4:	7022c03a 	cmpne	r17,r14,zero
  80d3e8:	8922b03a 	or	r17,r17,r4
  80d3ec:	003f9c06 	br	80d260 <__adddf3+0x58c>
  80d3f0:	10005a1e 	bne	r2,zero,80d55c <__adddf3+0x888>
  80d3f4:	4804977a 	slli	r2,r9,29
  80d3f8:	00c80034 	movhi	r3,8192
  80d3fc:	18ffffc4 	addi	r3,r3,-1
  80d400:	30cc703a 	and	r6,r6,r3
  80d404:	4814d0fa 	srli	r10,r9,3
  80d408:	1184b03a 	or	r2,r2,r6
  80d40c:	003f1306 	br	80d05c <__adddf3+0x388>
  80d410:	6ba3c83a 	sub	r17,r13,r14
  80d414:	4a95c83a 	sub	r10,r9,r10
  80d418:	6c51803a 	cmpltu	r8,r13,r17
  80d41c:	5211c83a 	sub	r8,r10,r8
  80d420:	3821883a 	mov	r16,r7
  80d424:	04800044 	movi	r18,1
  80d428:	003e5b06 	br	80cd98 <__adddf3+0xc4>
  80d42c:	103f7126 	beq	r2,zero,80d1f4 <__adddf3+0x520>
  80d430:	4808977a 	slli	r4,r9,29
  80d434:	00880034 	movhi	r2,8192
  80d438:	10bfffc4 	addi	r2,r2,-1
  80d43c:	3084703a 	and	r2,r6,r2
  80d440:	4814d0fa 	srli	r10,r9,3
  80d444:	1104b03a 	or	r2,r2,r4
  80d448:	3821883a 	mov	r16,r7
  80d44c:	003eea06 	br	80cff8 <__adddf3+0x324>
  80d450:	5006977a 	slli	r3,r10,29
  80d454:	00880034 	movhi	r2,8192
  80d458:	10bfffc4 	addi	r2,r2,-1
  80d45c:	2084703a 	and	r2,r4,r2
  80d460:	5014d0fa 	srli	r10,r10,3
  80d464:	10c4b03a 	or	r2,r2,r3
  80d468:	003efc06 	br	80d05c <__adddf3+0x388>
  80d46c:	4806977a 	slli	r3,r9,29
  80d470:	00880034 	movhi	r2,8192
  80d474:	10bfffc4 	addi	r2,r2,-1
  80d478:	3084703a 	and	r2,r6,r2
  80d47c:	4814d0fa 	srli	r10,r9,3
  80d480:	10c4b03a 	or	r2,r2,r3
  80d484:	003ef506 	br	80d05c <__adddf3+0x388>
  80d488:	4808977a 	slli	r4,r9,29
  80d48c:	00880034 	movhi	r2,8192
  80d490:	10bfffc4 	addi	r2,r2,-1
  80d494:	3084703a 	and	r2,r6,r2
  80d498:	4814d0fa 	srli	r10,r9,3
  80d49c:	1104b03a 	or	r2,r2,r4
  80d4a0:	003ed306 	br	80cff0 <__adddf3+0x31c>
  80d4a4:	500a977a 	slli	r5,r10,29
  80d4a8:	5014d0fa 	srli	r10,r10,3
  80d4ac:	10001626 	beq	r2,zero,80d508 <__adddf3+0x834>
  80d4b0:	00c80034 	movhi	r3,8192
  80d4b4:	18ffffc4 	addi	r3,r3,-1
  80d4b8:	20c4703a 	and	r2,r4,r3
  80d4bc:	5100022c 	andhi	r4,r10,8
  80d4c0:	1144b03a 	or	r2,r2,r5
  80d4c4:	203ee526 	beq	r4,zero,80d05c <__adddf3+0x388>
  80d4c8:	4808d0fa 	srli	r4,r9,3
  80d4cc:	2140022c 	andhi	r5,r4,8
  80d4d0:	283ee21e 	bne	r5,zero,80d05c <__adddf3+0x388>
  80d4d4:	4812977a 	slli	r9,r9,29
  80d4d8:	30c4703a 	and	r2,r6,r3
  80d4dc:	3821883a 	mov	r16,r7
  80d4e0:	1244b03a 	or	r2,r2,r9
  80d4e4:	2015883a 	mov	r10,r4
  80d4e8:	003edc06 	br	80d05c <__adddf3+0x388>
  80d4ec:	4804977a 	slli	r2,r9,29
  80d4f0:	01080034 	movhi	r4,8192
  80d4f4:	213fffc4 	addi	r4,r4,-1
  80d4f8:	310c703a 	and	r6,r6,r4
  80d4fc:	4814d0fa 	srli	r10,r9,3
  80d500:	1184b03a 	or	r2,r2,r6
  80d504:	003ebc06 	br	80cff8 <__adddf3+0x324>
  80d508:	00880034 	movhi	r2,8192
  80d50c:	10bfffc4 	addi	r2,r2,-1
  80d510:	2084703a 	and	r2,r4,r2
  80d514:	1144b03a 	or	r2,r2,r5
  80d518:	003ed006 	br	80d05c <__adddf3+0x388>
  80d51c:	193ff804 	addi	r4,r3,-32
  80d520:	19400820 	cmpeqi	r5,r3,32
  80d524:	5108d83a 	srl	r4,r10,r4
  80d528:	2800041e 	bne	r5,zero,80d53c <__adddf3+0x868>
  80d52c:	01401004 	movi	r5,64
  80d530:	28c7c83a 	sub	r3,r5,r3
  80d534:	50d4983a 	sll	r10,r10,r3
  80d538:	729cb03a 	or	r14,r14,r10
  80d53c:	7022c03a 	cmpne	r17,r14,zero
  80d540:	8922b03a 	or	r17,r17,r4
  80d544:	003eef06 	br	80d104 <__adddf3+0x430>
  80d548:	7363883a 	add	r17,r14,r13
  80d54c:	5255883a 	add	r10,r10,r9
  80d550:	8b51803a 	cmpltu	r8,r17,r13
  80d554:	5211883a 	add	r8,r10,r8
  80d558:	003f7e06 	br	80d354 <__adddf3+0x680>
  80d55c:	4b50b03a 	or	r8,r9,r13
  80d560:	500a977a 	slli	r5,r10,29
  80d564:	5014d0fa 	srli	r10,r10,3
  80d568:	403fe726 	beq	r8,zero,80d508 <__adddf3+0x834>
  80d56c:	00c80034 	movhi	r3,8192
  80d570:	18ffffc4 	addi	r3,r3,-1
  80d574:	20c4703a 	and	r2,r4,r3
  80d578:	5100022c 	andhi	r4,r10,8
  80d57c:	1144b03a 	or	r2,r2,r5
  80d580:	203eb626 	beq	r4,zero,80d05c <__adddf3+0x388>
  80d584:	4808d0fa 	srli	r4,r9,3
  80d588:	2140022c 	andhi	r5,r4,8
  80d58c:	283eb31e 	bne	r5,zero,80d05c <__adddf3+0x388>
  80d590:	4804977a 	slli	r2,r9,29
  80d594:	30cc703a 	and	r6,r6,r3
  80d598:	3821883a 	mov	r16,r7
  80d59c:	3084b03a 	or	r2,r6,r2
  80d5a0:	2015883a 	mov	r10,r4
  80d5a4:	003ead06 	br	80d05c <__adddf3+0x388>
  80d5a8:	8a04b03a 	or	r2,r17,r8
  80d5ac:	103f1126 	beq	r2,zero,80d1f4 <__adddf3+0x520>
  80d5b0:	003e8806 	br	80cfd4 <__adddf3+0x300>
  80d5b4:	0005883a 	mov	r2,zero
  80d5b8:	00c1ffc4 	movi	r3,2047
  80d5bc:	0011883a 	mov	r8,zero
  80d5c0:	003e2a06 	br	80ce6c <__adddf3+0x198>

0080d5c4 <__divdf3>:
  80d5c4:	2810d53a 	srli	r8,r5,20
  80d5c8:	defff004 	addi	sp,sp,-64
  80d5cc:	dc000615 	stw	r16,24(sp)
  80d5d0:	04000434 	movhi	r16,16
  80d5d4:	df000e15 	stw	fp,56(sp)
  80d5d8:	ddc00d15 	stw	r23,52(sp)
  80d5dc:	dd800c15 	stw	r22,48(sp)
  80d5e0:	dd000a15 	stw	r20,40(sp)
  80d5e4:	843fffc4 	addi	r16,r16,-1
  80d5e8:	dfc00f15 	stw	ra,60(sp)
  80d5ec:	dd400b15 	stw	r21,44(sp)
  80d5f0:	dcc00915 	stw	r19,36(sp)
  80d5f4:	dc800815 	stw	r18,32(sp)
  80d5f8:	dc400715 	stw	r17,28(sp)
  80d5fc:	4201ffcc 	andi	r8,r8,2047
  80d600:	282ed7fa 	srli	r23,r5,31
  80d604:	3039883a 	mov	fp,r6
  80d608:	382d883a 	mov	r22,r7
  80d60c:	2029883a 	mov	r20,r4
  80d610:	2c20703a 	and	r16,r5,r16
  80d614:	40006826 	beq	r8,zero,80d7b8 <__divdf3+0x1f4>
  80d618:	4081ffe0 	cmpeqi	r2,r8,2047
  80d61c:	1000791e 	bne	r2,zero,80d804 <__divdf3+0x240>
  80d620:	2026d77a 	srli	r19,r4,29
  80d624:	800a90fa 	slli	r5,r16,3
  80d628:	202890fa 	slli	r20,r4,3
  80d62c:	44bf0044 	addi	r18,r8,-1023
  80d630:	994ab03a 	or	r5,r19,r5
  80d634:	2cc02034 	orhi	r19,r5,128
  80d638:	0021883a 	mov	r16,zero
  80d63c:	0023883a 	mov	r17,zero
  80d640:	b010d53a 	srli	r8,r22,20
  80d644:	00c00434 	movhi	r3,16
  80d648:	18ffffc4 	addi	r3,r3,-1
  80d64c:	4201ffcc 	andi	r8,r8,2047
  80d650:	b02ad7fa 	srli	r21,r22,31
  80d654:	b0ec703a 	and	r22,r22,r3
  80d658:	40004626 	beq	r8,zero,80d774 <__divdf3+0x1b0>
  80d65c:	4081ffe0 	cmpeqi	r2,r8,2047
  80d660:	10006f1e 	bne	r2,zero,80d820 <__divdf3+0x25c>
  80d664:	b00690fa 	slli	r3,r22,3
  80d668:	e004d77a 	srli	r2,fp,29
  80d66c:	e01290fa 	slli	r9,fp,3
  80d670:	423f0044 	addi	r8,r8,-1023
  80d674:	10c6b03a 	or	r3,r2,r3
  80d678:	1d802034 	orhi	r22,r3,128
  80d67c:	9225c83a 	sub	r18,r18,r8
  80d680:	0007883a 	mov	r3,zero
  80d684:	80800428 	cmpgeui	r2,r16,16
  80d688:	bd4ef03a 	xor	r7,r23,r21
  80d68c:	1000a71e 	bne	r2,zero,80d92c <__divdf3+0x368>
  80d690:	800c90ba 	slli	r6,r16,2
  80d694:	00802074 	movhi	r2,129
  80d698:	3085883a 	add	r2,r6,r2
  80d69c:	10b5a917 	ldw	r2,-10588(r2)
  80d6a0:	1000683a 	jmp	r2
  80d6a4:	0080d92c 	andhi	r2,zero,868
  80d6a8:	0080d750 	cmplti	r2,zero,861
  80d6ac:	0080d700 	call	80d70 <__alt_mem_sdram-0x77f290>
  80d6b0:	0080d760 	cmpeqi	r2,zero,861
  80d6b4:	0080d700 	call	80d70 <__alt_mem_sdram-0x77f290>
  80d6b8:	0080d8d0 	cmplti	r2,zero,867
  80d6bc:	0080d700 	call	80d70 <__alt_mem_sdram-0x77f290>
  80d6c0:	0080d760 	cmpeqi	r2,zero,861
  80d6c4:	0080d750 	cmplti	r2,zero,861
  80d6c8:	0080d750 	cmplti	r2,zero,861
  80d6cc:	0080d8d0 	cmplti	r2,zero,867
  80d6d0:	0080d760 	cmpeqi	r2,zero,861
  80d6d4:	0080d6e4 	muli	r2,zero,859
  80d6d8:	0080d6e4 	muli	r2,zero,859
  80d6dc:	0080d6e4 	muli	r2,zero,859
  80d6e0:	0080d8e8 	cmpgeui	r2,zero,867
  80d6e4:	b80f883a 	mov	r7,r23
  80d6e8:	888000a0 	cmpeqi	r2,r17,2
  80d6ec:	1000181e 	bne	r2,zero,80d750 <__divdf3+0x18c>
  80d6f0:	888000e0 	cmpeqi	r2,r17,3
  80d6f4:	1001f61e 	bne	r2,zero,80ded0 <__divdf3+0x90c>
  80d6f8:	88800060 	cmpeqi	r2,r17,1
  80d6fc:	10006126 	beq	r2,zero,80d884 <__divdf3+0x2c0>
  80d700:	0007883a 	mov	r3,zero
  80d704:	000b883a 	mov	r5,zero
  80d708:	0029883a 	mov	r20,zero
  80d70c:	1806953a 	slli	r3,r3,20
  80d710:	380e97fa 	slli	r7,r7,31
  80d714:	a005883a 	mov	r2,r20
  80d718:	1946b03a 	or	r3,r3,r5
  80d71c:	19c6b03a 	or	r3,r3,r7
  80d720:	dfc00f17 	ldw	ra,60(sp)
  80d724:	df000e17 	ldw	fp,56(sp)
  80d728:	ddc00d17 	ldw	r23,52(sp)
  80d72c:	dd800c17 	ldw	r22,48(sp)
  80d730:	dd400b17 	ldw	r21,44(sp)
  80d734:	dd000a17 	ldw	r20,40(sp)
  80d738:	dcc00917 	ldw	r19,36(sp)
  80d73c:	dc800817 	ldw	r18,32(sp)
  80d740:	dc400717 	ldw	r17,28(sp)
  80d744:	dc000617 	ldw	r16,24(sp)
  80d748:	dec01004 	addi	sp,sp,64
  80d74c:	f800283a 	ret
  80d750:	00c1ffc4 	movi	r3,2047
  80d754:	000b883a 	mov	r5,zero
  80d758:	0029883a 	mov	r20,zero
  80d75c:	003feb06 	br	80d70c <__divdf3+0x148>
  80d760:	a80f883a 	mov	r7,r21
  80d764:	b027883a 	mov	r19,r22
  80d768:	4829883a 	mov	r20,r9
  80d76c:	1823883a 	mov	r17,r3
  80d770:	003fdd06 	br	80d6e8 <__divdf3+0x124>
  80d774:	b712b03a 	or	r9,r22,fp
  80d778:	48003e26 	beq	r9,zero,80d874 <__divdf3+0x2b0>
  80d77c:	b0017726 	beq	r22,zero,80dd5c <__divdf3+0x798>
  80d780:	b009883a 	mov	r4,r22
  80d784:	080226c0 	call	80226c <__clzsi2>
  80d788:	117ffd44 	addi	r5,r2,-11
  80d78c:	01000744 	movi	r4,29
  80d790:	127ffe04 	addi	r9,r2,-8
  80d794:	2149c83a 	sub	r4,r4,r5
  80d798:	b246983a 	sll	r3,r22,r9
  80d79c:	e108d83a 	srl	r4,fp,r4
  80d7a0:	e252983a 	sll	r9,fp,r9
  80d7a4:	20ecb03a 	or	r22,r4,r3
  80d7a8:	1491883a 	add	r8,r2,r18
  80d7ac:	4480fcc4 	addi	r18,r8,1011
  80d7b0:	0007883a 	mov	r3,zero
  80d7b4:	003fb306 	br	80d684 <__divdf3+0xc0>
  80d7b8:	8126b03a 	or	r19,r16,r4
  80d7bc:	2023883a 	mov	r17,r4
  80d7c0:	98002726 	beq	r19,zero,80d860 <__divdf3+0x29c>
  80d7c4:	80017026 	beq	r16,zero,80dd88 <__divdf3+0x7c4>
  80d7c8:	8009883a 	mov	r4,r16
  80d7cc:	080226c0 	call	80226c <__clzsi2>
  80d7d0:	113ffd44 	addi	r4,r2,-11
  80d7d4:	00c00744 	movi	r3,29
  80d7d8:	14fffe04 	addi	r19,r2,-8
  80d7dc:	1907c83a 	sub	r3,r3,r4
  80d7e0:	84ca983a 	sll	r5,r16,r19
  80d7e4:	88c6d83a 	srl	r3,r17,r3
  80d7e8:	8ce8983a 	sll	r20,r17,r19
  80d7ec:	1966b03a 	or	r19,r3,r5
  80d7f0:	023f0344 	movi	r8,-1011
  80d7f4:	40a5c83a 	sub	r18,r8,r2
  80d7f8:	0021883a 	mov	r16,zero
  80d7fc:	0023883a 	mov	r17,zero
  80d800:	003f8f06 	br	80d640 <__divdf3+0x7c>
  80d804:	8126b03a 	or	r19,r16,r4
  80d808:	9800101e 	bne	r19,zero,80d84c <__divdf3+0x288>
  80d80c:	0029883a 	mov	r20,zero
  80d810:	04000204 	movi	r16,8
  80d814:	0481ffc4 	movi	r18,2047
  80d818:	04400084 	movi	r17,2
  80d81c:	003f8806 	br	80d640 <__divdf3+0x7c>
  80d820:	b712b03a 	or	r9,r22,fp
  80d824:	94be0044 	addi	r18,r18,-2047
  80d828:	4800041e 	bne	r9,zero,80d83c <__divdf3+0x278>
  80d82c:	84000094 	ori	r16,r16,2
  80d830:	002d883a 	mov	r22,zero
  80d834:	00c00084 	movi	r3,2
  80d838:	003f9206 	br	80d684 <__divdf3+0xc0>
  80d83c:	840000d4 	ori	r16,r16,3
  80d840:	e013883a 	mov	r9,fp
  80d844:	00c000c4 	movi	r3,3
  80d848:	003f8e06 	br	80d684 <__divdf3+0xc0>
  80d84c:	8027883a 	mov	r19,r16
  80d850:	0481ffc4 	movi	r18,2047
  80d854:	04000304 	movi	r16,12
  80d858:	044000c4 	movi	r17,3
  80d85c:	003f7806 	br	80d640 <__divdf3+0x7c>
  80d860:	0029883a 	mov	r20,zero
  80d864:	04000104 	movi	r16,4
  80d868:	0025883a 	mov	r18,zero
  80d86c:	04400044 	movi	r17,1
  80d870:	003f7306 	br	80d640 <__divdf3+0x7c>
  80d874:	84000054 	ori	r16,r16,1
  80d878:	002d883a 	mov	r22,zero
  80d87c:	00c00044 	movi	r3,1
  80d880:	003f8006 	br	80d684 <__divdf3+0xc0>
  80d884:	9440ffc4 	addi	r17,r18,1023
  80d888:	0441050e 	bge	zero,r17,80dca0 <__divdf3+0x6dc>
  80d88c:	a08001cc 	andi	r2,r20,7
  80d890:	10016c1e 	bne	r2,zero,80de44 <__divdf3+0x880>
  80d894:	a008d0fa 	srli	r4,r20,3
  80d898:	9880402c 	andhi	r2,r19,256
  80d89c:	10000426 	beq	r2,zero,80d8b0 <__divdf3+0x2ec>
  80d8a0:	00bfc034 	movhi	r2,65280
  80d8a4:	10bfffc4 	addi	r2,r2,-1
  80d8a8:	98a6703a 	and	r19,r19,r2
  80d8ac:	94410004 	addi	r17,r18,1024
  80d8b0:	8881ffc8 	cmpgei	r2,r17,2047
  80d8b4:	103fa61e 	bne	r2,zero,80d750 <__divdf3+0x18c>
  80d8b8:	9828977a 	slli	r20,r19,29
  80d8bc:	980a927a 	slli	r5,r19,9
  80d8c0:	88c1ffcc 	andi	r3,r17,2047
  80d8c4:	a128b03a 	or	r20,r20,r4
  80d8c8:	280ad33a 	srli	r5,r5,12
  80d8cc:	003f8f06 	br	80d70c <__divdf3+0x148>
  80d8d0:	01400434 	movhi	r5,16
  80d8d4:	000f883a 	mov	r7,zero
  80d8d8:	297fffc4 	addi	r5,r5,-1
  80d8dc:	053fffc4 	movi	r20,-1
  80d8e0:	00c1ffc4 	movi	r3,2047
  80d8e4:	003f8906 	br	80d70c <__divdf3+0x148>
  80d8e8:	9880022c 	andhi	r2,r19,8
  80d8ec:	10000926 	beq	r2,zero,80d914 <__divdf3+0x350>
  80d8f0:	b080022c 	andhi	r2,r22,8
  80d8f4:	1000071e 	bne	r2,zero,80d914 <__divdf3+0x350>
  80d8f8:	00800434 	movhi	r2,16
  80d8fc:	b1400234 	orhi	r5,r22,8
  80d900:	10bfffc4 	addi	r2,r2,-1
  80d904:	288a703a 	and	r5,r5,r2
  80d908:	a80f883a 	mov	r7,r21
  80d90c:	4829883a 	mov	r20,r9
  80d910:	003ff306 	br	80d8e0 <__divdf3+0x31c>
  80d914:	00800434 	movhi	r2,16
  80d918:	99400234 	orhi	r5,r19,8
  80d91c:	10bfffc4 	addi	r2,r2,-1
  80d920:	288a703a 	and	r5,r5,r2
  80d924:	b80f883a 	mov	r7,r23
  80d928:	003fed06 	br	80d8e0 <__divdf3+0x31c>
  80d92c:	b4c10536 	bltu	r22,r19,80dd44 <__divdf3+0x780>
  80d930:	b4c10326 	beq	r22,r19,80dd40 <__divdf3+0x77c>
  80d934:	94bfffc4 	addi	r18,r18,-1
  80d938:	a039883a 	mov	fp,r20
  80d93c:	9821883a 	mov	r16,r19
  80d940:	0023883a 	mov	r17,zero
  80d944:	b006923a 	slli	r3,r22,8
  80d948:	482cd63a 	srli	r22,r9,24
  80d94c:	8009883a 	mov	r4,r16
  80d950:	182ed43a 	srli	r23,r3,16
  80d954:	b0ecb03a 	or	r22,r22,r3
  80d958:	d9c00015 	stw	r7,0(sp)
  80d95c:	b80b883a 	mov	r5,r23
  80d960:	482a923a 	slli	r21,r9,8
  80d964:	b53fffcc 	andi	r20,r22,65535
  80d968:	080cbec0 	call	80cbec <__udivsi3>
  80d96c:	100b883a 	mov	r5,r2
  80d970:	a009883a 	mov	r4,r20
  80d974:	1027883a 	mov	r19,r2
  80d978:	080ccac0 	call	80ccac <__mulsi3>
  80d97c:	8009883a 	mov	r4,r16
  80d980:	b80b883a 	mov	r5,r23
  80d984:	1021883a 	mov	r16,r2
  80d988:	080cc500 	call	80cc50 <__umodsi3>
  80d98c:	1004943a 	slli	r2,r2,16
  80d990:	e008d43a 	srli	r4,fp,16
  80d994:	d9c00017 	ldw	r7,0(sp)
  80d998:	2088b03a 	or	r4,r4,r2
  80d99c:	2400042e 	bgeu	r4,r16,80d9b0 <__divdf3+0x3ec>
  80d9a0:	2589883a 	add	r4,r4,r22
  80d9a4:	98bfffc4 	addi	r2,r19,-1
  80d9a8:	2581082e 	bgeu	r4,r22,80ddcc <__divdf3+0x808>
  80d9ac:	1027883a 	mov	r19,r2
  80d9b0:	2421c83a 	sub	r16,r4,r16
  80d9b4:	b80b883a 	mov	r5,r23
  80d9b8:	8009883a 	mov	r4,r16
  80d9bc:	d9c00215 	stw	r7,8(sp)
  80d9c0:	080cbec0 	call	80cbec <__udivsi3>
  80d9c4:	100b883a 	mov	r5,r2
  80d9c8:	a009883a 	mov	r4,r20
  80d9cc:	d8800115 	stw	r2,4(sp)
  80d9d0:	080ccac0 	call	80ccac <__mulsi3>
  80d9d4:	b80b883a 	mov	r5,r23
  80d9d8:	8009883a 	mov	r4,r16
  80d9dc:	d8800015 	stw	r2,0(sp)
  80d9e0:	080cc500 	call	80cc50 <__umodsi3>
  80d9e4:	100c943a 	slli	r6,r2,16
  80d9e8:	d8c00017 	ldw	r3,0(sp)
  80d9ec:	e73fffcc 	andi	fp,fp,65535
  80d9f0:	e18cb03a 	or	r6,fp,r6
  80d9f4:	da000117 	ldw	r8,4(sp)
  80d9f8:	d9c00217 	ldw	r7,8(sp)
  80d9fc:	30c0042e 	bgeu	r6,r3,80da10 <__divdf3+0x44c>
  80da00:	358d883a 	add	r6,r6,r22
  80da04:	40bfffc4 	addi	r2,r8,-1
  80da08:	3580ec2e 	bgeu	r6,r22,80ddbc <__divdf3+0x7f8>
  80da0c:	1011883a 	mov	r8,r2
  80da10:	9826943a 	slli	r19,r19,16
  80da14:	af3fffcc 	andi	fp,r21,65535
  80da18:	30c7c83a 	sub	r3,r6,r3
  80da1c:	9a26b03a 	or	r19,r19,r8
  80da20:	9810d43a 	srli	r8,r19,16
  80da24:	9abfffcc 	andi	r10,r19,65535
  80da28:	5009883a 	mov	r4,r10
  80da2c:	e00b883a 	mov	r5,fp
  80da30:	d9c00515 	stw	r7,20(sp)
  80da34:	d8c00315 	stw	r3,12(sp)
  80da38:	da800415 	stw	r10,16(sp)
  80da3c:	da000015 	stw	r8,0(sp)
  80da40:	080ccac0 	call	80ccac <__mulsi3>
  80da44:	da000017 	ldw	r8,0(sp)
  80da48:	e00b883a 	mov	r5,fp
  80da4c:	d8800215 	stw	r2,8(sp)
  80da50:	4009883a 	mov	r4,r8
  80da54:	080ccac0 	call	80ccac <__mulsi3>
  80da58:	da000017 	ldw	r8,0(sp)
  80da5c:	a820d43a 	srli	r16,r21,16
  80da60:	d8800115 	stw	r2,4(sp)
  80da64:	4009883a 	mov	r4,r8
  80da68:	800b883a 	mov	r5,r16
  80da6c:	080ccac0 	call	80ccac <__mulsi3>
  80da70:	da800417 	ldw	r10,16(sp)
  80da74:	8009883a 	mov	r4,r16
  80da78:	d8800015 	stw	r2,0(sp)
  80da7c:	500b883a 	mov	r5,r10
  80da80:	080ccac0 	call	80ccac <__mulsi3>
  80da84:	d9800217 	ldw	r6,8(sp)
  80da88:	da000117 	ldw	r8,4(sp)
  80da8c:	da400017 	ldw	r9,0(sp)
  80da90:	3008d43a 	srli	r4,r6,16
  80da94:	1205883a 	add	r2,r2,r8
  80da98:	d8c00317 	ldw	r3,12(sp)
  80da9c:	2089883a 	add	r4,r4,r2
  80daa0:	d9c00517 	ldw	r7,20(sp)
  80daa4:	2200022e 	bgeu	r4,r8,80dab0 <__divdf3+0x4ec>
  80daa8:	00800074 	movhi	r2,1
  80daac:	4893883a 	add	r9,r9,r2
  80dab0:	200ad43a 	srli	r5,r4,16
  80dab4:	2008943a 	slli	r4,r4,16
  80dab8:	31bfffcc 	andi	r6,r6,65535
  80dabc:	2a4b883a 	add	r5,r5,r9
  80dac0:	218d883a 	add	r6,r4,r6
  80dac4:	19409436 	bltu	r3,r5,80dd18 <__divdf3+0x754>
  80dac8:	19409226 	beq	r3,r5,80dd14 <__divdf3+0x750>
  80dacc:	898dc83a 	sub	r6,r17,r6
  80dad0:	89a3803a 	cmpltu	r17,r17,r6
  80dad4:	1947c83a 	sub	r3,r3,r5
  80dad8:	1c47c83a 	sub	r3,r3,r17
  80dadc:	9440ffc4 	addi	r17,r18,1023
  80dae0:	b0c0d326 	beq	r22,r3,80de30 <__divdf3+0x86c>
  80dae4:	1809883a 	mov	r4,r3
  80dae8:	b80b883a 	mov	r5,r23
  80daec:	d9800315 	stw	r6,12(sp)
  80daf0:	d9c00215 	stw	r7,8(sp)
  80daf4:	d8c00015 	stw	r3,0(sp)
  80daf8:	080cbec0 	call	80cbec <__udivsi3>
  80dafc:	100b883a 	mov	r5,r2
  80db00:	a009883a 	mov	r4,r20
  80db04:	d8800115 	stw	r2,4(sp)
  80db08:	080ccac0 	call	80ccac <__mulsi3>
  80db0c:	d8c00017 	ldw	r3,0(sp)
  80db10:	b80b883a 	mov	r5,r23
  80db14:	d8800015 	stw	r2,0(sp)
  80db18:	1809883a 	mov	r4,r3
  80db1c:	080cc500 	call	80cc50 <__umodsi3>
  80db20:	d9800317 	ldw	r6,12(sp)
  80db24:	1006943a 	slli	r3,r2,16
  80db28:	da400017 	ldw	r9,0(sp)
  80db2c:	3008d43a 	srli	r4,r6,16
  80db30:	da000117 	ldw	r8,4(sp)
  80db34:	d9c00217 	ldw	r7,8(sp)
  80db38:	20c6b03a 	or	r3,r4,r3
  80db3c:	1a40062e 	bgeu	r3,r9,80db58 <__divdf3+0x594>
  80db40:	1d87883a 	add	r3,r3,r22
  80db44:	40bfffc4 	addi	r2,r8,-1
  80db48:	1d80c836 	bltu	r3,r22,80de6c <__divdf3+0x8a8>
  80db4c:	1a40c72e 	bgeu	r3,r9,80de6c <__divdf3+0x8a8>
  80db50:	423fff84 	addi	r8,r8,-2
  80db54:	1d87883a 	add	r3,r3,r22
  80db58:	1a47c83a 	sub	r3,r3,r9
  80db5c:	1809883a 	mov	r4,r3
  80db60:	b80b883a 	mov	r5,r23
  80db64:	d9800415 	stw	r6,16(sp)
  80db68:	d9c00315 	stw	r7,12(sp)
  80db6c:	da000215 	stw	r8,8(sp)
  80db70:	d8c00115 	stw	r3,4(sp)
  80db74:	080cbec0 	call	80cbec <__udivsi3>
  80db78:	100b883a 	mov	r5,r2
  80db7c:	a009883a 	mov	r4,r20
  80db80:	d8800015 	stw	r2,0(sp)
  80db84:	080ccac0 	call	80ccac <__mulsi3>
  80db88:	d8c00117 	ldw	r3,4(sp)
  80db8c:	b80b883a 	mov	r5,r23
  80db90:	102f883a 	mov	r23,r2
  80db94:	1809883a 	mov	r4,r3
  80db98:	080cc500 	call	80cc50 <__umodsi3>
  80db9c:	d9800417 	ldw	r6,16(sp)
  80dba0:	1004943a 	slli	r2,r2,16
  80dba4:	da400017 	ldw	r9,0(sp)
  80dba8:	31bfffcc 	andi	r6,r6,65535
  80dbac:	308cb03a 	or	r6,r6,r2
  80dbb0:	da000217 	ldw	r8,8(sp)
  80dbb4:	d9c00317 	ldw	r7,12(sp)
  80dbb8:	35c0062e 	bgeu	r6,r23,80dbd4 <__divdf3+0x610>
  80dbbc:	358d883a 	add	r6,r6,r22
  80dbc0:	48bfffc4 	addi	r2,r9,-1
  80dbc4:	3580a736 	bltu	r6,r22,80de64 <__divdf3+0x8a0>
  80dbc8:	35c0a62e 	bgeu	r6,r23,80de64 <__divdf3+0x8a0>
  80dbcc:	4a7fff84 	addi	r9,r9,-2
  80dbd0:	358d883a 	add	r6,r6,r22
  80dbd4:	4028943a 	slli	r20,r8,16
  80dbd8:	35d5c83a 	sub	r10,r6,r23
  80dbdc:	e009883a 	mov	r4,fp
  80dbe0:	a268b03a 	or	r20,r20,r9
  80dbe4:	a23fffcc 	andi	r8,r20,65535
  80dbe8:	a02ed43a 	srli	r23,r20,16
  80dbec:	400b883a 	mov	r5,r8
  80dbf0:	d9c00315 	stw	r7,12(sp)
  80dbf4:	da800215 	stw	r10,8(sp)
  80dbf8:	da000115 	stw	r8,4(sp)
  80dbfc:	080ccac0 	call	80ccac <__mulsi3>
  80dc00:	e00b883a 	mov	r5,fp
  80dc04:	b809883a 	mov	r4,r23
  80dc08:	1039883a 	mov	fp,r2
  80dc0c:	080ccac0 	call	80ccac <__mulsi3>
  80dc10:	8009883a 	mov	r4,r16
  80dc14:	b80b883a 	mov	r5,r23
  80dc18:	d8800015 	stw	r2,0(sp)
  80dc1c:	080ccac0 	call	80ccac <__mulsi3>
  80dc20:	da000117 	ldw	r8,4(sp)
  80dc24:	8009883a 	mov	r4,r16
  80dc28:	1021883a 	mov	r16,r2
  80dc2c:	400b883a 	mov	r5,r8
  80dc30:	080ccac0 	call	80ccac <__mulsi3>
  80dc34:	d9800017 	ldw	r6,0(sp)
  80dc38:	e006d43a 	srli	r3,fp,16
  80dc3c:	da800217 	ldw	r10,8(sp)
  80dc40:	1185883a 	add	r2,r2,r6
  80dc44:	1887883a 	add	r3,r3,r2
  80dc48:	d9c00317 	ldw	r7,12(sp)
  80dc4c:	1980022e 	bgeu	r3,r6,80dc58 <__divdf3+0x694>
  80dc50:	00800074 	movhi	r2,1
  80dc54:	80a1883a 	add	r16,r16,r2
  80dc58:	1808d43a 	srli	r4,r3,16
  80dc5c:	1806943a 	slli	r3,r3,16
  80dc60:	e73fffcc 	andi	fp,fp,65535
  80dc64:	2409883a 	add	r4,r4,r16
  80dc68:	1f07883a 	add	r3,r3,fp
  80dc6c:	51000436 	bltu	r10,r4,80dc80 <__divdf3+0x6bc>
  80dc70:	51000226 	beq	r10,r4,80dc7c <__divdf3+0x6b8>
  80dc74:	a5000054 	ori	r20,r20,1
  80dc78:	003f0306 	br	80d888 <__divdf3+0x2c4>
  80dc7c:	183f0226 	beq	r3,zero,80d888 <__divdf3+0x2c4>
  80dc80:	b28d883a 	add	r6,r22,r10
  80dc84:	a0bfffc4 	addi	r2,r20,-1
  80dc88:	35806536 	bltu	r6,r22,80de20 <__divdf3+0x85c>
  80dc8c:	31008036 	bltu	r6,r4,80de90 <__divdf3+0x8cc>
  80dc90:	31009426 	beq	r6,r4,80dee4 <__divdf3+0x920>
  80dc94:	1029883a 	mov	r20,r2
  80dc98:	003ff606 	br	80dc74 <__divdf3+0x6b0>
  80dc9c:	053fffc4 	movi	r20,-1
  80dca0:	01400044 	movi	r5,1
  80dca4:	2c4bc83a 	sub	r5,r5,r17
  80dca8:	28800e48 	cmpgei	r2,r5,57
  80dcac:	103e941e 	bne	r2,zero,80d700 <__divdf3+0x13c>
  80dcb0:	28800808 	cmpgei	r2,r5,32
  80dcb4:	1000491e 	bne	r2,zero,80dddc <__divdf3+0x818>
  80dcb8:	92010784 	addi	r8,r18,1054
  80dcbc:	9a04983a 	sll	r2,r19,r8
  80dcc0:	a146d83a 	srl	r3,r20,r5
  80dcc4:	a210983a 	sll	r8,r20,r8
  80dcc8:	994ad83a 	srl	r5,r19,r5
  80dccc:	10e8b03a 	or	r20,r2,r3
  80dcd0:	4010c03a 	cmpne	r8,r8,zero
  80dcd4:	a228b03a 	or	r20,r20,r8
  80dcd8:	a08001cc 	andi	r2,r20,7
  80dcdc:	10000726 	beq	r2,zero,80dcfc <__divdf3+0x738>
  80dce0:	a08003cc 	andi	r2,r20,15
  80dce4:	10800120 	cmpeqi	r2,r2,4
  80dce8:	1000041e 	bne	r2,zero,80dcfc <__divdf3+0x738>
  80dcec:	a0800104 	addi	r2,r20,4
  80dcf0:	1529803a 	cmpltu	r20,r2,r20
  80dcf4:	2d0b883a 	add	r5,r5,r20
  80dcf8:	1029883a 	mov	r20,r2
  80dcfc:	2880202c 	andhi	r2,r5,128
  80dd00:	10006f26 	beq	r2,zero,80dec0 <__divdf3+0x8fc>
  80dd04:	00c00044 	movi	r3,1
  80dd08:	000b883a 	mov	r5,zero
  80dd0c:	0029883a 	mov	r20,zero
  80dd10:	003e7e06 	br	80d70c <__divdf3+0x148>
  80dd14:	89bf6d2e 	bgeu	r17,r6,80dacc <__divdf3+0x508>
  80dd18:	8d63883a 	add	r17,r17,r21
  80dd1c:	8d45803a 	cmpltu	r2,r17,r21
  80dd20:	1585883a 	add	r2,r2,r22
  80dd24:	1887883a 	add	r3,r3,r2
  80dd28:	98bfffc4 	addi	r2,r19,-1
  80dd2c:	b0c0202e 	bgeu	r22,r3,80ddb0 <__divdf3+0x7ec>
  80dd30:	19405136 	bltu	r3,r5,80de78 <__divdf3+0x8b4>
  80dd34:	28c04f26 	beq	r5,r3,80de74 <__divdf3+0x8b0>
  80dd38:	1027883a 	mov	r19,r2
  80dd3c:	003f6306 	br	80dacc <__divdf3+0x508>
  80dd40:	a27efc36 	bltu	r20,r9,80d934 <__divdf3+0x370>
  80dd44:	983897fa 	slli	fp,r19,31
  80dd48:	a004d07a 	srli	r2,r20,1
  80dd4c:	9820d07a 	srli	r16,r19,1
  80dd50:	a02297fa 	slli	r17,r20,31
  80dd54:	e0b8b03a 	or	fp,fp,r2
  80dd58:	003efa06 	br	80d944 <__divdf3+0x380>
  80dd5c:	e009883a 	mov	r4,fp
  80dd60:	080226c0 	call	80226c <__clzsi2>
  80dd64:	11400544 	addi	r5,r2,21
  80dd68:	29000748 	cmpgei	r4,r5,29
  80dd6c:	1007883a 	mov	r3,r2
  80dd70:	10800804 	addi	r2,r2,32
  80dd74:	203e8526 	beq	r4,zero,80d78c <__divdf3+0x1c8>
  80dd78:	18fffe04 	addi	r3,r3,-8
  80dd7c:	e0ec983a 	sll	r22,fp,r3
  80dd80:	0013883a 	mov	r9,zero
  80dd84:	003e8806 	br	80d7a8 <__divdf3+0x1e4>
  80dd88:	080226c0 	call	80226c <__clzsi2>
  80dd8c:	11000544 	addi	r4,r2,21
  80dd90:	20c00748 	cmpgei	r3,r4,29
  80dd94:	100b883a 	mov	r5,r2
  80dd98:	10800804 	addi	r2,r2,32
  80dd9c:	183e8d26 	beq	r3,zero,80d7d4 <__divdf3+0x210>
  80dda0:	297ffe04 	addi	r5,r5,-8
  80dda4:	a166983a 	sll	r19,r20,r5
  80dda8:	0029883a 	mov	r20,zero
  80ddac:	003e9006 	br	80d7f0 <__divdf3+0x22c>
  80ddb0:	b0ffe11e 	bne	r22,r3,80dd38 <__divdf3+0x774>
  80ddb4:	8d7fe036 	bltu	r17,r21,80dd38 <__divdf3+0x774>
  80ddb8:	003fdd06 	br	80dd30 <__divdf3+0x76c>
  80ddbc:	30ff132e 	bgeu	r6,r3,80da0c <__divdf3+0x448>
  80ddc0:	423fff84 	addi	r8,r8,-2
  80ddc4:	358d883a 	add	r6,r6,r22
  80ddc8:	003f1106 	br	80da10 <__divdf3+0x44c>
  80ddcc:	243ef72e 	bgeu	r4,r16,80d9ac <__divdf3+0x3e8>
  80ddd0:	9cffff84 	addi	r19,r19,-2
  80ddd4:	2589883a 	add	r4,r4,r22
  80ddd8:	003ef506 	br	80d9b0 <__divdf3+0x3ec>
  80dddc:	00fff844 	movi	r3,-31
  80dde0:	1c47c83a 	sub	r3,r3,r17
  80dde4:	29400820 	cmpeqi	r5,r5,32
  80dde8:	98c6d83a 	srl	r3,r19,r3
  80ddec:	2800031e 	bne	r5,zero,80ddfc <__divdf3+0x838>
  80ddf0:	91410f84 	addi	r5,r18,1086
  80ddf4:	994a983a 	sll	r5,r19,r5
  80ddf8:	a168b03a 	or	r20,r20,r5
  80ddfc:	a028c03a 	cmpne	r20,r20,zero
  80de00:	a0e8b03a 	or	r20,r20,r3
  80de04:	a4c001cc 	andi	r19,r20,7
  80de08:	9800291e 	bne	r19,zero,80deb0 <__divdf3+0x8ec>
  80de0c:	000b883a 	mov	r5,zero
  80de10:	a028d0fa 	srli	r20,r20,3
  80de14:	0007883a 	mov	r3,zero
  80de18:	a4e8b03a 	or	r20,r20,r19
  80de1c:	003e3b06 	br	80d70c <__divdf3+0x148>
  80de20:	1029883a 	mov	r20,r2
  80de24:	313f931e 	bne	r6,r4,80dc74 <__divdf3+0x6b0>
  80de28:	1d7f921e 	bne	r3,r21,80dc74 <__divdf3+0x6b0>
  80de2c:	003e9606 	br	80d888 <__divdf3+0x2c4>
  80de30:	047f9a0e 	bge	zero,r17,80dc9c <__divdf3+0x6d8>
  80de34:	0009883a 	mov	r4,zero
  80de38:	05000044 	movi	r20,1
  80de3c:	9d27883a 	add	r19,r19,r20
  80de40:	003e9506 	br	80d898 <__divdf3+0x2d4>
  80de44:	a08003cc 	andi	r2,r20,15
  80de48:	10800118 	cmpnei	r2,r2,4
  80de4c:	103e9126 	beq	r2,zero,80d894 <__divdf3+0x2d0>
  80de50:	a1000104 	addi	r4,r20,4
  80de54:	00bffec4 	movi	r2,-5
  80de58:	2008d0fa 	srli	r4,r4,3
  80de5c:	1529803a 	cmpltu	r20,r2,r20
  80de60:	003ff606 	br	80de3c <__divdf3+0x878>
  80de64:	1013883a 	mov	r9,r2
  80de68:	003f5a06 	br	80dbd4 <__divdf3+0x610>
  80de6c:	1011883a 	mov	r8,r2
  80de70:	003f3906 	br	80db58 <__divdf3+0x594>
  80de74:	89bfb02e 	bgeu	r17,r6,80dd38 <__divdf3+0x774>
  80de78:	8d63883a 	add	r17,r17,r21
  80de7c:	8d45803a 	cmpltu	r2,r17,r21
  80de80:	1585883a 	add	r2,r2,r22
  80de84:	9cffff84 	addi	r19,r19,-2
  80de88:	1887883a 	add	r3,r3,r2
  80de8c:	003f0f06 	br	80dacc <__divdf3+0x508>
  80de90:	ad45883a 	add	r2,r21,r21
  80de94:	156b803a 	cmpltu	r21,r2,r21
  80de98:	adad883a 	add	r22,r21,r22
  80de9c:	358d883a 	add	r6,r6,r22
  80dea0:	a53fff84 	addi	r20,r20,-2
  80dea4:	102b883a 	mov	r21,r2
  80dea8:	313fdf26 	beq	r6,r4,80de28 <__divdf3+0x864>
  80deac:	003f7106 	br	80dc74 <__divdf3+0x6b0>
  80deb0:	a08003cc 	andi	r2,r20,15
  80deb4:	10800118 	cmpnei	r2,r2,4
  80deb8:	000b883a 	mov	r5,zero
  80debc:	103f8b1e 	bne	r2,zero,80dcec <__divdf3+0x728>
  80dec0:	2804927a 	slli	r2,r5,9
  80dec4:	2826977a 	slli	r19,r5,29
  80dec8:	100ad33a 	srli	r5,r2,12
  80decc:	003fd006 	br	80de10 <__divdf3+0x84c>
  80ded0:	00800434 	movhi	r2,16
  80ded4:	99400234 	orhi	r5,r19,8
  80ded8:	10bfffc4 	addi	r2,r2,-1
  80dedc:	288a703a 	and	r5,r5,r2
  80dee0:	003e7f06 	br	80d8e0 <__divdf3+0x31c>
  80dee4:	a8ffea36 	bltu	r21,r3,80de90 <__divdf3+0x8cc>
  80dee8:	1029883a 	mov	r20,r2
  80deec:	1d7f611e 	bne	r3,r21,80dc74 <__divdf3+0x6b0>
  80def0:	003e6506 	br	80d888 <__divdf3+0x2c4>

0080def4 <__eqdf2>:
  80def4:	2810d53a 	srli	r8,r5,20
  80def8:	3806d53a 	srli	r3,r7,20
  80defc:	00800434 	movhi	r2,16
  80df00:	4201ffcc 	andi	r8,r8,2047
  80df04:	10bfffc4 	addi	r2,r2,-1
  80df08:	4241ffd8 	cmpnei	r9,r8,2047
  80df0c:	2814d7fa 	srli	r10,r5,31
  80df10:	3816d7fa 	srli	r11,r7,31
  80df14:	288a703a 	and	r5,r5,r2
  80df18:	388e703a 	and	r7,r7,r2
  80df1c:	1881ffcc 	andi	r2,r3,2047
  80df20:	48000626 	beq	r9,zero,80df3c <__eqdf2+0x48>
  80df24:	10c1ffe0 	cmpeqi	r3,r2,2047
  80df28:	1800021e 	bne	r3,zero,80df34 <__eqdf2+0x40>
  80df2c:	4080011e 	bne	r8,r2,80df34 <__eqdf2+0x40>
  80df30:	29c00826 	beq	r5,r7,80df54 <__eqdf2+0x60>
  80df34:	00800044 	movi	r2,1
  80df38:	f800283a 	ret
  80df3c:	2906b03a 	or	r3,r5,r4
  80df40:	183ffc1e 	bne	r3,zero,80df34 <__eqdf2+0x40>
  80df44:	1081ffd8 	cmpnei	r2,r2,2047
  80df48:	103ffa1e 	bne	r2,zero,80df34 <__eqdf2+0x40>
  80df4c:	398eb03a 	or	r7,r7,r6
  80df50:	383ff81e 	bne	r7,zero,80df34 <__eqdf2+0x40>
  80df54:	21bff71e 	bne	r4,r6,80df34 <__eqdf2+0x40>
  80df58:	52c00426 	beq	r10,r11,80df6c <__eqdf2+0x78>
  80df5c:	403ff51e 	bne	r8,zero,80df34 <__eqdf2+0x40>
  80df60:	290ab03a 	or	r5,r5,r4
  80df64:	2804c03a 	cmpne	r2,r5,zero
  80df68:	f800283a 	ret
  80df6c:	0005883a 	mov	r2,zero
  80df70:	f800283a 	ret

0080df74 <__gedf2>:
  80df74:	2810d53a 	srli	r8,r5,20
  80df78:	3812d53a 	srli	r9,r7,20
  80df7c:	00c00434 	movhi	r3,16
  80df80:	4201ffcc 	andi	r8,r8,2047
  80df84:	18ffffc4 	addi	r3,r3,-1
  80df88:	4281ffd8 	cmpnei	r10,r8,2047
  80df8c:	2816d7fa 	srli	r11,r5,31
  80df90:	3804d7fa 	srli	r2,r7,31
  80df94:	28ca703a 	and	r5,r5,r3
  80df98:	38ce703a 	and	r7,r7,r3
  80df9c:	48c1ffcc 	andi	r3,r9,2047
  80dfa0:	50000a26 	beq	r10,zero,80dfcc <__gedf2+0x58>
  80dfa4:	1a41ffd8 	cmpnei	r9,r3,2047
  80dfa8:	48000c26 	beq	r9,zero,80dfdc <__gedf2+0x68>
  80dfac:	4000171e 	bne	r8,zero,80e00c <__gedf2+0x98>
  80dfb0:	2912b03a 	or	r9,r5,r4
  80dfb4:	1800121e 	bne	r3,zero,80e000 <__gedf2+0x8c>
  80dfb8:	3994b03a 	or	r10,r7,r6
  80dfbc:	5000101e 	bne	r10,zero,80e000 <__gedf2+0x8c>
  80dfc0:	48000a1e 	bne	r9,zero,80dfec <__gedf2+0x78>
  80dfc4:	0005883a 	mov	r2,zero
  80dfc8:	f800283a 	ret
  80dfcc:	2912b03a 	or	r9,r5,r4
  80dfd0:	48001d1e 	bne	r9,zero,80e048 <__gedf2+0xd4>
  80dfd4:	1a41ffe0 	cmpeqi	r9,r3,2047
  80dfd8:	48000c26 	beq	r9,zero,80e00c <__gedf2+0x98>
  80dfdc:	3992b03a 	or	r9,r7,r6
  80dfe0:	4800191e 	bne	r9,zero,80e048 <__gedf2+0xd4>
  80dfe4:	40000526 	beq	r8,zero,80dffc <__gedf2+0x88>
  80dfe8:	58800c26 	beq	r11,r2,80e01c <__gedf2+0xa8>
  80dfec:	00800044 	movi	r2,1
  80dff0:	58000526 	beq	r11,zero,80e008 <__gedf2+0x94>
  80dff4:	00bfffc4 	movi	r2,-1
  80dff8:	f800283a 	ret
  80dffc:	2912b03a 	or	r9,r5,r4
  80e000:	483ff91e 	bne	r9,zero,80dfe8 <__gedf2+0x74>
  80e004:	103ffb26 	beq	r2,zero,80dff4 <__gedf2+0x80>
  80e008:	f800283a 	ret
  80e00c:	183ff61e 	bne	r3,zero,80dfe8 <__gedf2+0x74>
  80e010:	3992b03a 	or	r9,r7,r6
  80e014:	483ff41e 	bne	r9,zero,80dfe8 <__gedf2+0x74>
  80e018:	003ff406 	br	80dfec <__gedf2+0x78>
  80e01c:	1a000716 	blt	r3,r8,80e03c <__gedf2+0xc8>
  80e020:	40fff816 	blt	r8,r3,80e004 <__gedf2+0x90>
  80e024:	397ff136 	bltu	r7,r5,80dfec <__gedf2+0x78>
  80e028:	29c00926 	beq	r5,r7,80e050 <__gedf2+0xdc>
  80e02c:	29ffe52e 	bgeu	r5,r7,80dfc4 <__gedf2+0x50>
  80e030:	583ff026 	beq	r11,zero,80dff4 <__gedf2+0x80>
  80e034:	5805883a 	mov	r2,r11
  80e038:	f800283a 	ret
  80e03c:	103fed1e 	bne	r2,zero,80dff4 <__gedf2+0x80>
  80e040:	00800044 	movi	r2,1
  80e044:	f800283a 	ret
  80e048:	00bfff84 	movi	r2,-2
  80e04c:	f800283a 	ret
  80e050:	313fe636 	bltu	r6,r4,80dfec <__gedf2+0x78>
  80e054:	21bfdb2e 	bgeu	r4,r6,80dfc4 <__gedf2+0x50>
  80e058:	003ff506 	br	80e030 <__gedf2+0xbc>

0080e05c <__ledf2>:
  80e05c:	2810d53a 	srli	r8,r5,20
  80e060:	3812d53a 	srli	r9,r7,20
  80e064:	00c00434 	movhi	r3,16
  80e068:	4201ffcc 	andi	r8,r8,2047
  80e06c:	18ffffc4 	addi	r3,r3,-1
  80e070:	4281ffd8 	cmpnei	r10,r8,2047
  80e074:	2816d7fa 	srli	r11,r5,31
  80e078:	3804d7fa 	srli	r2,r7,31
  80e07c:	28ca703a 	and	r5,r5,r3
  80e080:	38ce703a 	and	r7,r7,r3
  80e084:	48c1ffcc 	andi	r3,r9,2047
  80e088:	50000a26 	beq	r10,zero,80e0b4 <__ledf2+0x58>
  80e08c:	1a41ffd8 	cmpnei	r9,r3,2047
  80e090:	48000c26 	beq	r9,zero,80e0c4 <__ledf2+0x68>
  80e094:	4000191e 	bne	r8,zero,80e0fc <__ledf2+0xa0>
  80e098:	2912b03a 	or	r9,r5,r4
  80e09c:	18000d1e 	bne	r3,zero,80e0d4 <__ledf2+0x78>
  80e0a0:	3994b03a 	or	r10,r7,r6
  80e0a4:	50000b1e 	bne	r10,zero,80e0d4 <__ledf2+0x78>
  80e0a8:	48000c1e 	bne	r9,zero,80e0dc <__ledf2+0x80>
  80e0ac:	0005883a 	mov	r2,zero
  80e0b0:	f800283a 	ret
  80e0b4:	2912b03a 	or	r9,r5,r4
  80e0b8:	48000c1e 	bne	r9,zero,80e0ec <__ledf2+0x90>
  80e0bc:	1a41ffe0 	cmpeqi	r9,r3,2047
  80e0c0:	48000e26 	beq	r9,zero,80e0fc <__ledf2+0xa0>
  80e0c4:	3992b03a 	or	r9,r7,r6
  80e0c8:	4800081e 	bne	r9,zero,80e0ec <__ledf2+0x90>
  80e0cc:	4000021e 	bne	r8,zero,80e0d8 <__ledf2+0x7c>
  80e0d0:	2912b03a 	or	r9,r5,r4
  80e0d4:	48000726 	beq	r9,zero,80e0f4 <__ledf2+0x98>
  80e0d8:	58800c26 	beq	r11,r2,80e10c <__ledf2+0xb0>
  80e0dc:	00800044 	movi	r2,1
  80e0e0:	58000526 	beq	r11,zero,80e0f8 <__ledf2+0x9c>
  80e0e4:	00bfffc4 	movi	r2,-1
  80e0e8:	f800283a 	ret
  80e0ec:	00800084 	movi	r2,2
  80e0f0:	f800283a 	ret
  80e0f4:	103ffb26 	beq	r2,zero,80e0e4 <__ledf2+0x88>
  80e0f8:	f800283a 	ret
  80e0fc:	183ff61e 	bne	r3,zero,80e0d8 <__ledf2+0x7c>
  80e100:	3992b03a 	or	r9,r7,r6
  80e104:	483ff41e 	bne	r9,zero,80e0d8 <__ledf2+0x7c>
  80e108:	003ff406 	br	80e0dc <__ledf2+0x80>
  80e10c:	1a00030e 	bge	r3,r8,80e11c <__ledf2+0xc0>
  80e110:	103ff41e 	bne	r2,zero,80e0e4 <__ledf2+0x88>
  80e114:	00800044 	movi	r2,1
  80e118:	f800283a 	ret
  80e11c:	40fff516 	blt	r8,r3,80e0f4 <__ledf2+0x98>
  80e120:	397fee36 	bltu	r7,r5,80e0dc <__ledf2+0x80>
  80e124:	29c00426 	beq	r5,r7,80e138 <__ledf2+0xdc>
  80e128:	29ffe02e 	bgeu	r5,r7,80e0ac <__ledf2+0x50>
  80e12c:	583fed26 	beq	r11,zero,80e0e4 <__ledf2+0x88>
  80e130:	5805883a 	mov	r2,r11
  80e134:	f800283a 	ret
  80e138:	313fe836 	bltu	r6,r4,80e0dc <__ledf2+0x80>
  80e13c:	21bfdb2e 	bgeu	r4,r6,80e0ac <__ledf2+0x50>
  80e140:	003ffa06 	br	80e12c <__ledf2+0xd0>

0080e144 <__muldf3>:
  80e144:	2810d53a 	srli	r8,r5,20
  80e148:	defff004 	addi	sp,sp,-64
  80e14c:	00800434 	movhi	r2,16
  80e150:	df000e15 	stw	fp,56(sp)
  80e154:	dd000a15 	stw	r20,40(sp)
  80e158:	dcc00915 	stw	r19,36(sp)
  80e15c:	dc400715 	stw	r17,28(sp)
  80e160:	10bfffc4 	addi	r2,r2,-1
  80e164:	dfc00f15 	stw	ra,60(sp)
  80e168:	ddc00d15 	stw	r23,52(sp)
  80e16c:	dd800c15 	stw	r22,48(sp)
  80e170:	dd400b15 	stw	r21,44(sp)
  80e174:	dc800815 	stw	r18,32(sp)
  80e178:	dc000615 	stw	r16,24(sp)
  80e17c:	4201ffcc 	andi	r8,r8,2047
  80e180:	2828d7fa 	srli	r20,r5,31
  80e184:	2023883a 	mov	r17,r4
  80e188:	3039883a 	mov	fp,r6
  80e18c:	28a6703a 	and	r19,r5,r2
  80e190:	40013426 	beq	r8,zero,80e664 <__muldf3+0x520>
  80e194:	4081ffe0 	cmpeqi	r2,r8,2047
  80e198:	1001461e 	bne	r2,zero,80e6b4 <__muldf3+0x570>
  80e19c:	980a90fa 	slli	r5,r19,3
  80e1a0:	2026d77a 	srli	r19,r4,29
  80e1a4:	202490fa 	slli	r18,r4,3
  80e1a8:	423f0044 	addi	r8,r8,-1023
  80e1ac:	9966b03a 	or	r19,r19,r5
  80e1b0:	9cc02034 	orhi	r19,r19,128
  80e1b4:	002b883a 	mov	r21,zero
  80e1b8:	002d883a 	mov	r22,zero
  80e1bc:	3804d53a 	srli	r2,r7,20
  80e1c0:	00c00434 	movhi	r3,16
  80e1c4:	18ffffc4 	addi	r3,r3,-1
  80e1c8:	1081ffcc 	andi	r2,r2,2047
  80e1cc:	382ed7fa 	srli	r23,r7,31
  80e1d0:	38e0703a 	and	r16,r7,r3
  80e1d4:	10011026 	beq	r2,zero,80e618 <__muldf3+0x4d4>
  80e1d8:	10c1ffe0 	cmpeqi	r3,r2,2047
  80e1dc:	18013c1e 	bne	r3,zero,80e6d0 <__muldf3+0x58c>
  80e1e0:	e008d77a 	srli	r4,fp,29
  80e1e4:	802090fa 	slli	r16,r16,3
  80e1e8:	e02290fa 	slli	r17,fp,3
  80e1ec:	10bf0044 	addi	r2,r2,-1023
  80e1f0:	2420b03a 	or	r16,r4,r16
  80e1f4:	84002034 	orhi	r16,r16,128
  80e1f8:	4091883a 	add	r8,r8,r2
  80e1fc:	0009883a 	mov	r4,zero
  80e200:	a8800428 	cmpgeui	r2,r21,16
  80e204:	a5ccf03a 	xor	r6,r20,r23
  80e208:	41c00044 	addi	r7,r8,1
  80e20c:	1000371e 	bne	r2,zero,80e2ec <__muldf3+0x1a8>
  80e210:	a80490ba 	slli	r2,r21,2
  80e214:	00c02074 	movhi	r3,129
  80e218:	10c7883a 	add	r3,r2,r3
  80e21c:	18b88917 	ldw	r2,-7644(r3)
  80e220:	1000683a 	jmp	r2
  80e224:	0080e2ec 	andhi	r2,zero,907
  80e228:	0080e268 	cmpgeui	r2,zero,905
  80e22c:	0080e268 	cmpgeui	r2,zero,905
  80e230:	0080e264 	muli	r2,zero,905
  80e234:	0080e274 	movhi	r2,905
  80e238:	0080e274 	movhi	r2,905
  80e23c:	0080e744 	movi	r2,925
  80e240:	0080e264 	muli	r2,zero,905
  80e244:	0080e274 	movhi	r2,905
  80e248:	0080e744 	movi	r2,925
  80e24c:	0080e274 	movhi	r2,905
  80e250:	0080e264 	muli	r2,zero,905
  80e254:	0080e6ec 	andhi	r2,zero,923
  80e258:	0080e6ec 	andhi	r2,zero,923
  80e25c:	0080e6ec 	andhi	r2,zero,923
  80e260:	0080e7d0 	cmplti	r2,zero,927
  80e264:	b80d883a 	mov	r6,r23
  80e268:	8027883a 	mov	r19,r16
  80e26c:	8825883a 	mov	r18,r17
  80e270:	202d883a 	mov	r22,r4
  80e274:	b08000a0 	cmpeqi	r2,r22,2
  80e278:	1000181e 	bne	r2,zero,80e2dc <__muldf3+0x198>
  80e27c:	b08000e0 	cmpeqi	r2,r22,3
  80e280:	1001961e 	bne	r2,zero,80e8dc <__muldf3+0x798>
  80e284:	b0800060 	cmpeqi	r2,r22,1
  80e288:	1000c926 	beq	r2,zero,80e5b0 <__muldf3+0x46c>
  80e28c:	0007883a 	mov	r3,zero
  80e290:	0027883a 	mov	r19,zero
  80e294:	0025883a 	mov	r18,zero
  80e298:	1806953a 	slli	r3,r3,20
  80e29c:	300c97fa 	slli	r6,r6,31
  80e2a0:	9005883a 	mov	r2,r18
  80e2a4:	1cc6b03a 	or	r3,r3,r19
  80e2a8:	1986b03a 	or	r3,r3,r6
  80e2ac:	dfc00f17 	ldw	ra,60(sp)
  80e2b0:	df000e17 	ldw	fp,56(sp)
  80e2b4:	ddc00d17 	ldw	r23,52(sp)
  80e2b8:	dd800c17 	ldw	r22,48(sp)
  80e2bc:	dd400b17 	ldw	r21,44(sp)
  80e2c0:	dd000a17 	ldw	r20,40(sp)
  80e2c4:	dcc00917 	ldw	r19,36(sp)
  80e2c8:	dc800817 	ldw	r18,32(sp)
  80e2cc:	dc400717 	ldw	r17,28(sp)
  80e2d0:	dc000617 	ldw	r16,24(sp)
  80e2d4:	dec01004 	addi	sp,sp,64
  80e2d8:	f800283a 	ret
  80e2dc:	00c1ffc4 	movi	r3,2047
  80e2e0:	0027883a 	mov	r19,zero
  80e2e4:	0025883a 	mov	r18,zero
  80e2e8:	003feb06 	br	80e298 <__muldf3+0x154>
  80e2ec:	9028d43a 	srli	r20,r18,16
  80e2f0:	8f3fffcc 	andi	fp,r17,65535
  80e2f4:	957fffcc 	andi	r21,r18,65535
  80e2f8:	a80b883a 	mov	r5,r21
  80e2fc:	e009883a 	mov	r4,fp
  80e300:	d9800315 	stw	r6,12(sp)
  80e304:	da000215 	stw	r8,8(sp)
  80e308:	d9c00115 	stw	r7,4(sp)
  80e30c:	8822d43a 	srli	r17,r17,16
  80e310:	080ccac0 	call	80ccac <__mulsi3>
  80e314:	e00b883a 	mov	r5,fp
  80e318:	a009883a 	mov	r4,r20
  80e31c:	102d883a 	mov	r22,r2
  80e320:	080ccac0 	call	80ccac <__mulsi3>
  80e324:	880b883a 	mov	r5,r17
  80e328:	a009883a 	mov	r4,r20
  80e32c:	102f883a 	mov	r23,r2
  80e330:	080ccac0 	call	80ccac <__mulsi3>
  80e334:	a80b883a 	mov	r5,r21
  80e338:	8809883a 	mov	r4,r17
  80e33c:	d8800015 	stw	r2,0(sp)
  80e340:	080ccac0 	call	80ccac <__mulsi3>
  80e344:	b006d43a 	srli	r3,r22,16
  80e348:	15e5883a 	add	r18,r2,r23
  80e34c:	d9c00117 	ldw	r7,4(sp)
  80e350:	1c87883a 	add	r3,r3,r18
  80e354:	da000217 	ldw	r8,8(sp)
  80e358:	d9800317 	ldw	r6,12(sp)
  80e35c:	1dc0042e 	bgeu	r3,r23,80e370 <__muldf3+0x22c>
  80e360:	d9000017 	ldw	r4,0(sp)
  80e364:	00800074 	movhi	r2,1
  80e368:	2085883a 	add	r2,r4,r2
  80e36c:	d8800015 	stw	r2,0(sp)
  80e370:	1804943a 	slli	r2,r3,16
  80e374:	85ffffcc 	andi	r23,r16,65535
  80e378:	b5bfffcc 	andi	r22,r22,65535
  80e37c:	1585883a 	add	r2,r2,r22
  80e380:	a80b883a 	mov	r5,r21
  80e384:	b809883a 	mov	r4,r23
  80e388:	1824d43a 	srli	r18,r3,16
  80e38c:	d9800515 	stw	r6,20(sp)
  80e390:	da000415 	stw	r8,16(sp)
  80e394:	d9c00315 	stw	r7,12(sp)
  80e398:	8020d43a 	srli	r16,r16,16
  80e39c:	d8800115 	stw	r2,4(sp)
  80e3a0:	080ccac0 	call	80ccac <__mulsi3>
  80e3a4:	a009883a 	mov	r4,r20
  80e3a8:	b80b883a 	mov	r5,r23
  80e3ac:	d8800215 	stw	r2,8(sp)
  80e3b0:	080ccac0 	call	80ccac <__mulsi3>
  80e3b4:	a009883a 	mov	r4,r20
  80e3b8:	800b883a 	mov	r5,r16
  80e3bc:	102d883a 	mov	r22,r2
  80e3c0:	080ccac0 	call	80ccac <__mulsi3>
  80e3c4:	a80b883a 	mov	r5,r21
  80e3c8:	8009883a 	mov	r4,r16
  80e3cc:	1029883a 	mov	r20,r2
  80e3d0:	080ccac0 	call	80ccac <__mulsi3>
  80e3d4:	da800217 	ldw	r10,8(sp)
  80e3d8:	1585883a 	add	r2,r2,r22
  80e3dc:	d9c00317 	ldw	r7,12(sp)
  80e3e0:	5006d43a 	srli	r3,r10,16
  80e3e4:	da000417 	ldw	r8,16(sp)
  80e3e8:	d9800517 	ldw	r6,20(sp)
  80e3ec:	1887883a 	add	r3,r3,r2
  80e3f0:	1d80022e 	bgeu	r3,r22,80e3fc <__muldf3+0x2b8>
  80e3f4:	00800074 	movhi	r2,1
  80e3f8:	a0a9883a 	add	r20,r20,r2
  80e3fc:	1804d43a 	srli	r2,r3,16
  80e400:	1806943a 	slli	r3,r3,16
  80e404:	982cd43a 	srli	r22,r19,16
  80e408:	9d7fffcc 	andi	r21,r19,65535
  80e40c:	e009883a 	mov	r4,fp
  80e410:	54ffffcc 	andi	r19,r10,65535
  80e414:	a80b883a 	mov	r5,r21
  80e418:	1ce7883a 	add	r19,r3,r19
  80e41c:	d9800515 	stw	r6,20(sp)
  80e420:	da000415 	stw	r8,16(sp)
  80e424:	d9c00315 	stw	r7,12(sp)
  80e428:	1529883a 	add	r20,r2,r20
  80e42c:	080ccac0 	call	80ccac <__mulsi3>
  80e430:	e00b883a 	mov	r5,fp
  80e434:	b009883a 	mov	r4,r22
  80e438:	d8800215 	stw	r2,8(sp)
  80e43c:	080ccac0 	call	80ccac <__mulsi3>
  80e440:	8809883a 	mov	r4,r17
  80e444:	b00b883a 	mov	r5,r22
  80e448:	1039883a 	mov	fp,r2
  80e44c:	080ccac0 	call	80ccac <__mulsi3>
  80e450:	8809883a 	mov	r4,r17
  80e454:	a80b883a 	mov	r5,r21
  80e458:	1023883a 	mov	r17,r2
  80e45c:	080ccac0 	call	80ccac <__mulsi3>
  80e460:	d8c00217 	ldw	r3,8(sp)
  80e464:	1705883a 	add	r2,r2,fp
  80e468:	d9c00317 	ldw	r7,12(sp)
  80e46c:	1808d43a 	srli	r4,r3,16
  80e470:	da000417 	ldw	r8,16(sp)
  80e474:	d9800517 	ldw	r6,20(sp)
  80e478:	2089883a 	add	r4,r4,r2
  80e47c:	94e5883a 	add	r18,r18,r19
  80e480:	2700022e 	bgeu	r4,fp,80e48c <__muldf3+0x348>
  80e484:	00800074 	movhi	r2,1
  80e488:	88a3883a 	add	r17,r17,r2
  80e48c:	2004d43a 	srli	r2,r4,16
  80e490:	2038943a 	slli	fp,r4,16
  80e494:	18ffffcc 	andi	r3,r3,65535
  80e498:	b809883a 	mov	r4,r23
  80e49c:	a80b883a 	mov	r5,r21
  80e4a0:	d9800415 	stw	r6,16(sp)
  80e4a4:	da000315 	stw	r8,12(sp)
  80e4a8:	d9c00215 	stw	r7,8(sp)
  80e4ac:	e0f9883a 	add	fp,fp,r3
  80e4b0:	1463883a 	add	r17,r2,r17
  80e4b4:	080ccac0 	call	80ccac <__mulsi3>
  80e4b8:	b80b883a 	mov	r5,r23
  80e4bc:	b009883a 	mov	r4,r22
  80e4c0:	102f883a 	mov	r23,r2
  80e4c4:	080ccac0 	call	80ccac <__mulsi3>
  80e4c8:	b00b883a 	mov	r5,r22
  80e4cc:	8009883a 	mov	r4,r16
  80e4d0:	102d883a 	mov	r22,r2
  80e4d4:	080ccac0 	call	80ccac <__mulsi3>
  80e4d8:	a80b883a 	mov	r5,r21
  80e4dc:	8009883a 	mov	r4,r16
  80e4e0:	1021883a 	mov	r16,r2
  80e4e4:	080ccac0 	call	80ccac <__mulsi3>
  80e4e8:	b80ad43a 	srli	r5,r23,16
  80e4ec:	1585883a 	add	r2,r2,r22
  80e4f0:	d9c00217 	ldw	r7,8(sp)
  80e4f4:	288b883a 	add	r5,r5,r2
  80e4f8:	da000317 	ldw	r8,12(sp)
  80e4fc:	d9800417 	ldw	r6,16(sp)
  80e500:	2d80022e 	bgeu	r5,r22,80e50c <__muldf3+0x3c8>
  80e504:	00800074 	movhi	r2,1
  80e508:	80a1883a 	add	r16,r16,r2
  80e50c:	2806943a 	slli	r3,r5,16
  80e510:	d8800017 	ldw	r2,0(sp)
  80e514:	bdffffcc 	andi	r23,r23,65535
  80e518:	1dc7883a 	add	r3,r3,r23
  80e51c:	90ab883a 	add	r21,r18,r2
  80e520:	acd5803a 	cmpltu	r10,r21,r19
  80e524:	1d07883a 	add	r3,r3,r20
  80e528:	af2b883a 	add	r21,r21,fp
  80e52c:	1a97883a 	add	r11,r3,r10
  80e530:	af09803a 	cmpltu	r4,r21,fp
  80e534:	2826d43a 	srli	r19,r5,16
  80e538:	5c53883a 	add	r9,r11,r17
  80e53c:	4905883a 	add	r2,r9,r4
  80e540:	1d07803a 	cmpltu	r3,r3,r20
  80e544:	5a95803a 	cmpltu	r10,r11,r10
  80e548:	1a86b03a 	or	r3,r3,r10
  80e54c:	1109803a 	cmpltu	r4,r2,r4
  80e550:	4c53803a 	cmpltu	r9,r9,r17
  80e554:	1ce7883a 	add	r19,r3,r19
  80e558:	4908b03a 	or	r4,r9,r4
  80e55c:	a824927a 	slli	r18,r21,9
  80e560:	d8c00117 	ldw	r3,4(sp)
  80e564:	9927883a 	add	r19,r19,r4
  80e568:	9c27883a 	add	r19,r19,r16
  80e56c:	9826927a 	slli	r19,r19,9
  80e570:	a82ad5fa 	srli	r21,r21,23
  80e574:	100ad5fa 	srli	r5,r2,23
  80e578:	90e4b03a 	or	r18,r18,r3
  80e57c:	1004927a 	slli	r2,r2,9
  80e580:	9024c03a 	cmpne	r18,r18,zero
  80e584:	9564b03a 	or	r18,r18,r21
  80e588:	98c0402c 	andhi	r3,r19,256
  80e58c:	90a4b03a 	or	r18,r18,r2
  80e590:	9966b03a 	or	r19,r19,r5
  80e594:	1800b626 	beq	r3,zero,80e870 <__muldf3+0x72c>
  80e598:	9006d07a 	srli	r3,r18,1
  80e59c:	980497fa 	slli	r2,r19,31
  80e5a0:	9480004c 	andi	r18,r18,1
  80e5a4:	9826d07a 	srli	r19,r19,1
  80e5a8:	1c86b03a 	or	r3,r3,r18
  80e5ac:	18a4b03a 	or	r18,r3,r2
  80e5b0:	3900ffc4 	addi	r4,r7,1023
  80e5b4:	0100690e 	bge	zero,r4,80e75c <__muldf3+0x618>
  80e5b8:	908001cc 	andi	r2,r18,7
  80e5bc:	10000726 	beq	r2,zero,80e5dc <__muldf3+0x498>
  80e5c0:	908003cc 	andi	r2,r18,15
  80e5c4:	10800120 	cmpeqi	r2,r2,4
  80e5c8:	1000041e 	bne	r2,zero,80e5dc <__muldf3+0x498>
  80e5cc:	90800104 	addi	r2,r18,4
  80e5d0:	14a5803a 	cmpltu	r18,r2,r18
  80e5d4:	9ca7883a 	add	r19,r19,r18
  80e5d8:	1025883a 	mov	r18,r2
  80e5dc:	9880402c 	andhi	r2,r19,256
  80e5e0:	10000426 	beq	r2,zero,80e5f4 <__muldf3+0x4b0>
  80e5e4:	00bfc034 	movhi	r2,65280
  80e5e8:	10bfffc4 	addi	r2,r2,-1
  80e5ec:	98a6703a 	and	r19,r19,r2
  80e5f0:	39010004 	addi	r4,r7,1024
  80e5f4:	2081ffc8 	cmpgei	r2,r4,2047
  80e5f8:	103f381e 	bne	r2,zero,80e2dc <__muldf3+0x198>
  80e5fc:	9804977a 	slli	r2,r19,29
  80e600:	9024d0fa 	srli	r18,r18,3
  80e604:	9826927a 	slli	r19,r19,9
  80e608:	20c1ffcc 	andi	r3,r4,2047
  80e60c:	14a4b03a 	or	r18,r2,r18
  80e610:	9826d33a 	srli	r19,r19,12
  80e614:	003f2006 	br	80e298 <__muldf3+0x154>
  80e618:	8722b03a 	or	r17,r16,fp
  80e61c:	88004526 	beq	r17,zero,80e734 <__muldf3+0x5f0>
  80e620:	da000015 	stw	r8,0(sp)
  80e624:	80008626 	beq	r16,zero,80e840 <__muldf3+0x6fc>
  80e628:	8009883a 	mov	r4,r16
  80e62c:	080226c0 	call	80226c <__clzsi2>
  80e630:	da000017 	ldw	r8,0(sp)
  80e634:	117ffd44 	addi	r5,r2,-11
  80e638:	01000744 	movi	r4,29
  80e63c:	147ffe04 	addi	r17,r2,-8
  80e640:	2149c83a 	sub	r4,r4,r5
  80e644:	8460983a 	sll	r16,r16,r17
  80e648:	e108d83a 	srl	r4,fp,r4
  80e64c:	e462983a 	sll	r17,fp,r17
  80e650:	2420b03a 	or	r16,r4,r16
  80e654:	4091c83a 	sub	r8,r8,r2
  80e658:	423f0344 	addi	r8,r8,-1011
  80e65c:	0009883a 	mov	r4,zero
  80e660:	003ee706 	br	80e200 <__muldf3+0xbc>
  80e664:	9924b03a 	or	r18,r19,r4
  80e668:	90002d26 	beq	r18,zero,80e720 <__muldf3+0x5dc>
  80e66c:	d9c00015 	stw	r7,0(sp)
  80e670:	98006826 	beq	r19,zero,80e814 <__muldf3+0x6d0>
  80e674:	9809883a 	mov	r4,r19
  80e678:	080226c0 	call	80226c <__clzsi2>
  80e67c:	d9c00017 	ldw	r7,0(sp)
  80e680:	113ffd44 	addi	r4,r2,-11
  80e684:	00c00744 	movi	r3,29
  80e688:	14bffe04 	addi	r18,r2,-8
  80e68c:	1907c83a 	sub	r3,r3,r4
  80e690:	9ca6983a 	sll	r19,r19,r18
  80e694:	88c6d83a 	srl	r3,r17,r3
  80e698:	8ca4983a 	sll	r18,r17,r18
  80e69c:	1ce6b03a 	or	r19,r3,r19
  80e6a0:	023f0344 	movi	r8,-1011
  80e6a4:	4091c83a 	sub	r8,r8,r2
  80e6a8:	002b883a 	mov	r21,zero
  80e6ac:	002d883a 	mov	r22,zero
  80e6b0:	003ec206 	br	80e1bc <__muldf3+0x78>
  80e6b4:	9924b03a 	or	r18,r19,r4
  80e6b8:	9000141e 	bne	r18,zero,80e70c <__muldf3+0x5c8>
  80e6bc:	0027883a 	mov	r19,zero
  80e6c0:	05400204 	movi	r21,8
  80e6c4:	0201ffc4 	movi	r8,2047
  80e6c8:	05800084 	movi	r22,2
  80e6cc:	003ebb06 	br	80e1bc <__muldf3+0x78>
  80e6d0:	8722b03a 	or	r17,r16,fp
  80e6d4:	4201ffc4 	addi	r8,r8,2047
  80e6d8:	8800081e 	bne	r17,zero,80e6fc <__muldf3+0x5b8>
  80e6dc:	ad400094 	ori	r21,r21,2
  80e6e0:	0021883a 	mov	r16,zero
  80e6e4:	01000084 	movi	r4,2
  80e6e8:	003ec506 	br	80e200 <__muldf3+0xbc>
  80e6ec:	b08000a0 	cmpeqi	r2,r22,2
  80e6f0:	a00d883a 	mov	r6,r20
  80e6f4:	103ee126 	beq	r2,zero,80e27c <__muldf3+0x138>
  80e6f8:	003ef806 	br	80e2dc <__muldf3+0x198>
  80e6fc:	ad4000d4 	ori	r21,r21,3
  80e700:	e023883a 	mov	r17,fp
  80e704:	010000c4 	movi	r4,3
  80e708:	003ebd06 	br	80e200 <__muldf3+0xbc>
  80e70c:	2025883a 	mov	r18,r4
  80e710:	05400304 	movi	r21,12
  80e714:	0201ffc4 	movi	r8,2047
  80e718:	058000c4 	movi	r22,3
  80e71c:	003ea706 	br	80e1bc <__muldf3+0x78>
  80e720:	0027883a 	mov	r19,zero
  80e724:	05400104 	movi	r21,4
  80e728:	0011883a 	mov	r8,zero
  80e72c:	05800044 	movi	r22,1
  80e730:	003ea206 	br	80e1bc <__muldf3+0x78>
  80e734:	ad400054 	ori	r21,r21,1
  80e738:	0021883a 	mov	r16,zero
  80e73c:	01000044 	movi	r4,1
  80e740:	003eaf06 	br	80e200 <__muldf3+0xbc>
  80e744:	04c00434 	movhi	r19,16
  80e748:	000d883a 	mov	r6,zero
  80e74c:	9cffffc4 	addi	r19,r19,-1
  80e750:	04bfffc4 	movi	r18,-1
  80e754:	00c1ffc4 	movi	r3,2047
  80e758:	003ecf06 	br	80e298 <__muldf3+0x154>
  80e75c:	00800044 	movi	r2,1
  80e760:	1105c83a 	sub	r2,r2,r4
  80e764:	10c00e48 	cmpgei	r3,r2,57
  80e768:	183ec81e 	bne	r3,zero,80e28c <__muldf3+0x148>
  80e76c:	10c00808 	cmpgei	r3,r2,32
  80e770:	1800411e 	bne	r3,zero,80e878 <__muldf3+0x734>
  80e774:	39c10784 	addi	r7,r7,1054
  80e778:	99c6983a 	sll	r3,r19,r7
  80e77c:	9088d83a 	srl	r4,r18,r2
  80e780:	91ce983a 	sll	r7,r18,r7
  80e784:	98a6d83a 	srl	r19,r19,r2
  80e788:	1904b03a 	or	r2,r3,r4
  80e78c:	3824c03a 	cmpne	r18,r7,zero
  80e790:	1484b03a 	or	r2,r2,r18
  80e794:	10c001cc 	andi	r3,r2,7
  80e798:	18000726 	beq	r3,zero,80e7b8 <__muldf3+0x674>
  80e79c:	10c003cc 	andi	r3,r2,15
  80e7a0:	18c00120 	cmpeqi	r3,r3,4
  80e7a4:	1800041e 	bne	r3,zero,80e7b8 <__muldf3+0x674>
  80e7a8:	10c00104 	addi	r3,r2,4
  80e7ac:	1885803a 	cmpltu	r2,r3,r2
  80e7b0:	98a7883a 	add	r19,r19,r2
  80e7b4:	1805883a 	mov	r2,r3
  80e7b8:	98c0202c 	andhi	r3,r19,128
  80e7bc:	18004326 	beq	r3,zero,80e8cc <__muldf3+0x788>
  80e7c0:	00c00044 	movi	r3,1
  80e7c4:	0027883a 	mov	r19,zero
  80e7c8:	0025883a 	mov	r18,zero
  80e7cc:	003eb206 	br	80e298 <__muldf3+0x154>
  80e7d0:	9880022c 	andhi	r2,r19,8
  80e7d4:	10000926 	beq	r2,zero,80e7fc <__muldf3+0x6b8>
  80e7d8:	8080022c 	andhi	r2,r16,8
  80e7dc:	1000071e 	bne	r2,zero,80e7fc <__muldf3+0x6b8>
  80e7e0:	00800434 	movhi	r2,16
  80e7e4:	84c00234 	orhi	r19,r16,8
  80e7e8:	10bfffc4 	addi	r2,r2,-1
  80e7ec:	98a6703a 	and	r19,r19,r2
  80e7f0:	b80d883a 	mov	r6,r23
  80e7f4:	8825883a 	mov	r18,r17
  80e7f8:	003fd606 	br	80e754 <__muldf3+0x610>
  80e7fc:	00800434 	movhi	r2,16
  80e800:	9cc00234 	orhi	r19,r19,8
  80e804:	10bfffc4 	addi	r2,r2,-1
  80e808:	98a6703a 	and	r19,r19,r2
  80e80c:	a00d883a 	mov	r6,r20
  80e810:	003fd006 	br	80e754 <__muldf3+0x610>
  80e814:	080226c0 	call	80226c <__clzsi2>
  80e818:	11000544 	addi	r4,r2,21
  80e81c:	21400748 	cmpgei	r5,r4,29
  80e820:	1007883a 	mov	r3,r2
  80e824:	d9c00017 	ldw	r7,0(sp)
  80e828:	10800804 	addi	r2,r2,32
  80e82c:	283f9526 	beq	r5,zero,80e684 <__muldf3+0x540>
  80e830:	18fffe04 	addi	r3,r3,-8
  80e834:	88e6983a 	sll	r19,r17,r3
  80e838:	0025883a 	mov	r18,zero
  80e83c:	003f9806 	br	80e6a0 <__muldf3+0x55c>
  80e840:	e009883a 	mov	r4,fp
  80e844:	080226c0 	call	80226c <__clzsi2>
  80e848:	11400544 	addi	r5,r2,21
  80e84c:	29000748 	cmpgei	r4,r5,29
  80e850:	1007883a 	mov	r3,r2
  80e854:	da000017 	ldw	r8,0(sp)
  80e858:	10800804 	addi	r2,r2,32
  80e85c:	203f7626 	beq	r4,zero,80e638 <__muldf3+0x4f4>
  80e860:	1c3ffe04 	addi	r16,r3,-8
  80e864:	e420983a 	sll	r16,fp,r16
  80e868:	0023883a 	mov	r17,zero
  80e86c:	003f7906 	br	80e654 <__muldf3+0x510>
  80e870:	400f883a 	mov	r7,r8
  80e874:	003f4e06 	br	80e5b0 <__muldf3+0x46c>
  80e878:	00fff844 	movi	r3,-31
  80e87c:	1907c83a 	sub	r3,r3,r4
  80e880:	10800820 	cmpeqi	r2,r2,32
  80e884:	98c6d83a 	srl	r3,r19,r3
  80e888:	1000031e 	bne	r2,zero,80e898 <__muldf3+0x754>
  80e88c:	39c10f84 	addi	r7,r7,1086
  80e890:	99e6983a 	sll	r19,r19,r7
  80e894:	94e4b03a 	or	r18,r18,r19
  80e898:	9024c03a 	cmpne	r18,r18,zero
  80e89c:	90c4b03a 	or	r2,r18,r3
  80e8a0:	148001cc 	andi	r18,r2,7
  80e8a4:	9000051e 	bne	r18,zero,80e8bc <__muldf3+0x778>
  80e8a8:	0027883a 	mov	r19,zero
  80e8ac:	1004d0fa 	srli	r2,r2,3
  80e8b0:	0007883a 	mov	r3,zero
  80e8b4:	14a4b03a 	or	r18,r2,r18
  80e8b8:	003e7706 	br	80e298 <__muldf3+0x154>
  80e8bc:	10c003cc 	andi	r3,r2,15
  80e8c0:	18c00118 	cmpnei	r3,r3,4
  80e8c4:	0027883a 	mov	r19,zero
  80e8c8:	183fb71e 	bne	r3,zero,80e7a8 <__muldf3+0x664>
  80e8cc:	9806927a 	slli	r3,r19,9
  80e8d0:	9824977a 	slli	r18,r19,29
  80e8d4:	1826d33a 	srli	r19,r3,12
  80e8d8:	003ff406 	br	80e8ac <__muldf3+0x768>
  80e8dc:	00800434 	movhi	r2,16
  80e8e0:	9cc00234 	orhi	r19,r19,8
  80e8e4:	10bfffc4 	addi	r2,r2,-1
  80e8e8:	98a6703a 	and	r19,r19,r2
  80e8ec:	003f9906 	br	80e754 <__muldf3+0x610>

0080e8f0 <__subdf3>:
  80e8f0:	00800434 	movhi	r2,16
  80e8f4:	3810d53a 	srli	r8,r7,20
  80e8f8:	10bfffc4 	addi	r2,r2,-1
  80e8fc:	2806d53a 	srli	r3,r5,20
  80e900:	2892703a 	and	r9,r5,r2
  80e904:	3884703a 	and	r2,r7,r2
  80e908:	280ad7fa 	srli	r5,r5,31
  80e90c:	481290fa 	slli	r9,r9,3
  80e910:	2018d77a 	srli	r12,r4,29
  80e914:	100490fa 	slli	r2,r2,3
  80e918:	3016d77a 	srli	r11,r6,29
  80e91c:	defffb04 	addi	sp,sp,-20
  80e920:	4201ffcc 	andi	r8,r8,2047
  80e924:	dc800215 	stw	r18,8(sp)
  80e928:	dc400115 	stw	r17,4(sp)
  80e92c:	1c81ffcc 	andi	r18,r3,2047
  80e930:	dfc00415 	stw	ra,16(sp)
  80e934:	dcc00315 	stw	r19,12(sp)
  80e938:	dc000015 	stw	r16,0(sp)
  80e93c:	4281ffd8 	cmpnei	r10,r8,2047
  80e940:	2823883a 	mov	r17,r5
  80e944:	201c90fa 	slli	r14,r4,3
  80e948:	380ed7fa 	srli	r7,r7,31
  80e94c:	301a90fa 	slli	r13,r6,3
  80e950:	29403fcc 	andi	r5,r5,255
  80e954:	6252b03a 	or	r9,r12,r9
  80e958:	589eb03a 	or	r15,r11,r2
  80e95c:	9207c83a 	sub	r3,r18,r8
  80e960:	50006826 	beq	r10,zero,80eb04 <__subdf3+0x214>
  80e964:	3ac0005c 	xori	r11,r7,1
  80e968:	2ac07326 	beq	r5,r11,80eb38 <__subdf3+0x248>
  80e96c:	00c0590e 	bge	zero,r3,80ead4 <__subdf3+0x1e4>
  80e970:	4000691e 	bne	r8,zero,80eb18 <__subdf3+0x228>
  80e974:	7b44b03a 	or	r2,r15,r13
  80e978:	1000fb26 	beq	r2,zero,80ed68 <__subdf3+0x478>
  80e97c:	18bfffc4 	addi	r2,r3,-1
  80e980:	10019126 	beq	r2,zero,80efc8 <__subdf3+0x6d8>
  80e984:	18c1ffd8 	cmpnei	r3,r3,2047
  80e988:	1800c326 	beq	r3,zero,80ec98 <__subdf3+0x3a8>
  80e98c:	1007883a 	mov	r3,r2
  80e990:	18800e48 	cmpgei	r2,r3,57
  80e994:	1000651e 	bne	r2,zero,80eb2c <__subdf3+0x23c>
  80e998:	18800808 	cmpgei	r2,r3,32
  80e99c:	1001331e 	bne	r2,zero,80ee6c <__subdf3+0x57c>
  80e9a0:	00800804 	movi	r2,32
  80e9a4:	10c5c83a 	sub	r2,r2,r3
  80e9a8:	78a0983a 	sll	r16,r15,r2
  80e9ac:	68c8d83a 	srl	r4,r13,r3
  80e9b0:	689a983a 	sll	r13,r13,r2
  80e9b4:	78c4d83a 	srl	r2,r15,r3
  80e9b8:	8120b03a 	or	r16,r16,r4
  80e9bc:	681ac03a 	cmpne	r13,r13,zero
  80e9c0:	8360b03a 	or	r16,r16,r13
  80e9c4:	4893c83a 	sub	r9,r9,r2
  80e9c8:	7421c83a 	sub	r16,r14,r16
  80e9cc:	7409803a 	cmpltu	r4,r14,r16
  80e9d0:	4909c83a 	sub	r4,r9,r4
  80e9d4:	2080202c 	andhi	r2,r4,128
  80e9d8:	10009326 	beq	r2,zero,80ec28 <__subdf3+0x338>
  80e9dc:	04c02034 	movhi	r19,128
  80e9e0:	9cffffc4 	addi	r19,r19,-1
  80e9e4:	24e6703a 	and	r19,r4,r19
  80e9e8:	9800b926 	beq	r19,zero,80ecd0 <__subdf3+0x3e0>
  80e9ec:	9809883a 	mov	r4,r19
  80e9f0:	080226c0 	call	80226c <__clzsi2>
  80e9f4:	10fffe04 	addi	r3,r2,-8
  80e9f8:	01000804 	movi	r4,32
  80e9fc:	20c9c83a 	sub	r4,r4,r3
  80ea00:	8108d83a 	srl	r4,r16,r4
  80ea04:	98e6983a 	sll	r19,r19,r3
  80ea08:	80e0983a 	sll	r16,r16,r3
  80ea0c:	24c8b03a 	or	r4,r4,r19
  80ea10:	1c80b816 	blt	r3,r18,80ecf4 <__subdf3+0x404>
  80ea14:	1c87c83a 	sub	r3,r3,r18
  80ea18:	19400044 	addi	r5,r3,1
  80ea1c:	28800808 	cmpgei	r2,r5,32
  80ea20:	1000751e 	bne	r2,zero,80ebf8 <__subdf3+0x308>
  80ea24:	00800804 	movi	r2,32
  80ea28:	1145c83a 	sub	r2,r2,r5
  80ea2c:	8146d83a 	srl	r3,r16,r5
  80ea30:	80a0983a 	sll	r16,r16,r2
  80ea34:	2084983a 	sll	r2,r4,r2
  80ea38:	2148d83a 	srl	r4,r4,r5
  80ea3c:	8020c03a 	cmpne	r16,r16,zero
  80ea40:	10c4b03a 	or	r2,r2,r3
  80ea44:	1420b03a 	or	r16,r2,r16
  80ea48:	0025883a 	mov	r18,zero
  80ea4c:	808001cc 	andi	r2,r16,7
  80ea50:	10000726 	beq	r2,zero,80ea70 <__subdf3+0x180>
  80ea54:	808003cc 	andi	r2,r16,15
  80ea58:	10800120 	cmpeqi	r2,r2,4
  80ea5c:	1000041e 	bne	r2,zero,80ea70 <__subdf3+0x180>
  80ea60:	80800104 	addi	r2,r16,4
  80ea64:	1421803a 	cmpltu	r16,r2,r16
  80ea68:	2409883a 	add	r4,r4,r16
  80ea6c:	1021883a 	mov	r16,r2
  80ea70:	2080202c 	andhi	r2,r4,128
  80ea74:	10006e26 	beq	r2,zero,80ec30 <__subdf3+0x340>
  80ea78:	90c00044 	addi	r3,r18,1
  80ea7c:	1881ffe0 	cmpeqi	r2,r3,2047
  80ea80:	18c1ffcc 	andi	r3,r3,2047
  80ea84:	1000801e 	bne	r2,zero,80ec88 <__subdf3+0x398>
  80ea88:	00bfe034 	movhi	r2,65408
  80ea8c:	10bfffc4 	addi	r2,r2,-1
  80ea90:	2088703a 	and	r4,r4,r2
  80ea94:	2004977a 	slli	r2,r4,29
  80ea98:	2008927a 	slli	r4,r4,9
  80ea9c:	8020d0fa 	srli	r16,r16,3
  80eaa0:	2008d33a 	srli	r4,r4,12
  80eaa4:	1404b03a 	or	r2,r2,r16
  80eaa8:	1806953a 	slli	r3,r3,20
  80eaac:	882297fa 	slli	r17,r17,31
  80eab0:	1906b03a 	or	r3,r3,r4
  80eab4:	1c46b03a 	or	r3,r3,r17
  80eab8:	dfc00417 	ldw	ra,16(sp)
  80eabc:	dcc00317 	ldw	r19,12(sp)
  80eac0:	dc800217 	ldw	r18,8(sp)
  80eac4:	dc400117 	ldw	r17,4(sp)
  80eac8:	dc000017 	ldw	r16,0(sp)
  80eacc:	dec00504 	addi	sp,sp,20
  80ead0:	f800283a 	ret
  80ead4:	18002c26 	beq	r3,zero,80eb88 <__subdf3+0x298>
  80ead8:	4487c83a 	sub	r3,r8,r18
  80eadc:	5823883a 	mov	r17,r11
  80eae0:	9000bb1e 	bne	r18,zero,80edd0 <__subdf3+0x4e0>
  80eae4:	4b84b03a 	or	r2,r9,r14
  80eae8:	10011726 	beq	r2,zero,80ef48 <__subdf3+0x658>
  80eaec:	18bfffc4 	addi	r2,r3,-1
  80eaf0:	10016326 	beq	r2,zero,80f080 <__subdf3+0x790>
  80eaf4:	18c1ffd8 	cmpnei	r3,r3,2047
  80eaf8:	18012c26 	beq	r3,zero,80efac <__subdf3+0x6bc>
  80eafc:	1007883a 	mov	r3,r2
  80eb00:	0000b506 	br	80edd8 <__subdf3+0x4e8>
  80eb04:	7b44b03a 	or	r2,r15,r13
  80eb08:	103f9626 	beq	r2,zero,80e964 <__subdf3+0x74>
  80eb0c:	3ac03fcc 	andi	r11,r7,255
  80eb10:	29c07d26 	beq	r5,r7,80ed08 <__subdf3+0x418>
  80eb14:	00ffef0e 	bge	zero,r3,80ead4 <__subdf3+0x1e4>
  80eb18:	9081ffd8 	cmpnei	r2,r18,2047
  80eb1c:	10005e26 	beq	r2,zero,80ec98 <__subdf3+0x3a8>
  80eb20:	18800e48 	cmpgei	r2,r3,57
  80eb24:	7bc02034 	orhi	r15,r15,128
  80eb28:	103f9b26 	beq	r2,zero,80e998 <__subdf3+0xa8>
  80eb2c:	7b60b03a 	or	r16,r15,r13
  80eb30:	8020c03a 	cmpne	r16,r16,zero
  80eb34:	003fa406 	br	80e9c8 <__subdf3+0xd8>
  80eb38:	00c0730e 	bge	zero,r3,80ed08 <__subdf3+0x418>
  80eb3c:	40002626 	beq	r8,zero,80ebd8 <__subdf3+0x2e8>
  80eb40:	9081ffd8 	cmpnei	r2,r18,2047
  80eb44:	10005426 	beq	r2,zero,80ec98 <__subdf3+0x3a8>
  80eb48:	7bc02034 	orhi	r15,r15,128
  80eb4c:	18800e48 	cmpgei	r2,r3,57
  80eb50:	1000431e 	bne	r2,zero,80ec60 <__subdf3+0x370>
  80eb54:	18800808 	cmpgei	r2,r3,32
  80eb58:	1000de26 	beq	r2,zero,80eed4 <__subdf3+0x5e4>
  80eb5c:	1c3ff804 	addi	r16,r3,-32
  80eb60:	18800820 	cmpeqi	r2,r3,32
  80eb64:	7c0ad83a 	srl	r5,r15,r16
  80eb68:	1000041e 	bne	r2,zero,80eb7c <__subdf3+0x28c>
  80eb6c:	00801004 	movi	r2,64
  80eb70:	10c5c83a 	sub	r2,r2,r3
  80eb74:	7884983a 	sll	r2,r15,r2
  80eb78:	689ab03a 	or	r13,r13,r2
  80eb7c:	6820c03a 	cmpne	r16,r13,zero
  80eb80:	8160b03a 	or	r16,r16,r5
  80eb84:	00003806 	br	80ec68 <__subdf3+0x378>
  80eb88:	90800044 	addi	r2,r18,1
  80eb8c:	1081ff8c 	andi	r2,r2,2046
  80eb90:	1000a01e 	bne	r2,zero,80ee14 <__subdf3+0x524>
  80eb94:	4b8ab03a 	or	r5,r9,r14
  80eb98:	7b44b03a 	or	r2,r15,r13
  80eb9c:	9000f11e 	bne	r18,zero,80ef64 <__subdf3+0x674>
  80eba0:	28012e26 	beq	r5,zero,80f05c <__subdf3+0x76c>
  80eba4:	10010e26 	beq	r2,zero,80efe0 <__subdf3+0x6f0>
  80eba8:	7361c83a 	sub	r16,r14,r13
  80ebac:	7405803a 	cmpltu	r2,r14,r16
  80ebb0:	4bc9c83a 	sub	r4,r9,r15
  80ebb4:	2089c83a 	sub	r4,r4,r2
  80ebb8:	2080202c 	andhi	r2,r4,128
  80ebbc:	10016d26 	beq	r2,zero,80f174 <__subdf3+0x884>
  80ebc0:	6ba1c83a 	sub	r16,r13,r14
  80ebc4:	7a49c83a 	sub	r4,r15,r9
  80ebc8:	6c1b803a 	cmpltu	r13,r13,r16
  80ebcc:	2349c83a 	sub	r4,r4,r13
  80ebd0:	5823883a 	mov	r17,r11
  80ebd4:	003f9d06 	br	80ea4c <__subdf3+0x15c>
  80ebd8:	7b44b03a 	or	r2,r15,r13
  80ebdc:	10006226 	beq	r2,zero,80ed68 <__subdf3+0x478>
  80ebe0:	18bfffc4 	addi	r2,r3,-1
  80ebe4:	1000e926 	beq	r2,zero,80ef8c <__subdf3+0x69c>
  80ebe8:	18c1ffd8 	cmpnei	r3,r3,2047
  80ebec:	18012a26 	beq	r3,zero,80f098 <__subdf3+0x7a8>
  80ebf0:	1007883a 	mov	r3,r2
  80ebf4:	003fd506 	br	80eb4c <__subdf3+0x25c>
  80ebf8:	18fff844 	addi	r3,r3,-31
  80ebfc:	28800820 	cmpeqi	r2,r5,32
  80ec00:	20c6d83a 	srl	r3,r4,r3
  80ec04:	1000041e 	bne	r2,zero,80ec18 <__subdf3+0x328>
  80ec08:	00801004 	movi	r2,64
  80ec0c:	114bc83a 	sub	r5,r2,r5
  80ec10:	2148983a 	sll	r4,r4,r5
  80ec14:	8120b03a 	or	r16,r16,r4
  80ec18:	8020c03a 	cmpne	r16,r16,zero
  80ec1c:	80e0b03a 	or	r16,r16,r3
  80ec20:	0009883a 	mov	r4,zero
  80ec24:	0025883a 	mov	r18,zero
  80ec28:	808001cc 	andi	r2,r16,7
  80ec2c:	103f891e 	bne	r2,zero,80ea54 <__subdf3+0x164>
  80ec30:	8020d0fa 	srli	r16,r16,3
  80ec34:	2004977a 	slli	r2,r4,29
  80ec38:	2012d0fa 	srli	r9,r4,3
  80ec3c:	9007883a 	mov	r3,r18
  80ec40:	8084b03a 	or	r2,r16,r2
  80ec44:	1901ffe0 	cmpeqi	r4,r3,2047
  80ec48:	2000191e 	bne	r4,zero,80ecb0 <__subdf3+0x3c0>
  80ec4c:	01000434 	movhi	r4,16
  80ec50:	213fffc4 	addi	r4,r4,-1
  80ec54:	4908703a 	and	r4,r9,r4
  80ec58:	18c1ffcc 	andi	r3,r3,2047
  80ec5c:	003f9206 	br	80eaa8 <__subdf3+0x1b8>
  80ec60:	7b60b03a 	or	r16,r15,r13
  80ec64:	8020c03a 	cmpne	r16,r16,zero
  80ec68:	83a1883a 	add	r16,r16,r14
  80ec6c:	8389803a 	cmpltu	r4,r16,r14
  80ec70:	2249883a 	add	r4,r4,r9
  80ec74:	2080202c 	andhi	r2,r4,128
  80ec78:	103feb26 	beq	r2,zero,80ec28 <__subdf3+0x338>
  80ec7c:	94800044 	addi	r18,r18,1
  80ec80:	9081ffe0 	cmpeqi	r2,r18,2047
  80ec84:	10006f26 	beq	r2,zero,80ee44 <__subdf3+0x554>
  80ec88:	00c1ffc4 	movi	r3,2047
  80ec8c:	0009883a 	mov	r4,zero
  80ec90:	0005883a 	mov	r2,zero
  80ec94:	003f8406 	br	80eaa8 <__subdf3+0x1b8>
  80ec98:	4806977a 	slli	r3,r9,29
  80ec9c:	00880034 	movhi	r2,8192
  80eca0:	10bfffc4 	addi	r2,r2,-1
  80eca4:	4812d0fa 	srli	r9,r9,3
  80eca8:	2088703a 	and	r4,r4,r2
  80ecac:	20c4b03a 	or	r2,r4,r3
  80ecb0:	4886b03a 	or	r3,r9,r2
  80ecb4:	18013726 	beq	r3,zero,80f194 <__subdf3+0x8a4>
  80ecb8:	00c00434 	movhi	r3,16
  80ecbc:	18ffffc4 	addi	r3,r3,-1
  80ecc0:	49000234 	orhi	r4,r9,8
  80ecc4:	20c8703a 	and	r4,r4,r3
  80ecc8:	00c1ffc4 	movi	r3,2047
  80eccc:	003f7606 	br	80eaa8 <__subdf3+0x1b8>
  80ecd0:	8009883a 	mov	r4,r16
  80ecd4:	080226c0 	call	80226c <__clzsi2>
  80ecd8:	10c00604 	addi	r3,r2,24
  80ecdc:	19000808 	cmpgei	r4,r3,32
  80ece0:	203f4526 	beq	r4,zero,80e9f8 <__subdf3+0x108>
  80ece4:	113ffe04 	addi	r4,r2,-8
  80ece8:	8108983a 	sll	r4,r16,r4
  80ecec:	0021883a 	mov	r16,zero
  80ecf0:	1cbf480e 	bge	r3,r18,80ea14 <__subdf3+0x124>
  80ecf4:	00bfe034 	movhi	r2,65408
  80ecf8:	10bfffc4 	addi	r2,r2,-1
  80ecfc:	90e5c83a 	sub	r18,r18,r3
  80ed00:	2088703a 	and	r4,r4,r2
  80ed04:	003f5106 	br	80ea4c <__subdf3+0x15c>
  80ed08:	18001e26 	beq	r3,zero,80ed84 <__subdf3+0x494>
  80ed0c:	4487c83a 	sub	r3,r8,r18
  80ed10:	90006826 	beq	r18,zero,80eeb4 <__subdf3+0x5c4>
  80ed14:	5000a526 	beq	r10,zero,80efac <__subdf3+0x6bc>
  80ed18:	4a402034 	orhi	r9,r9,128
  80ed1c:	18800e48 	cmpgei	r2,r3,57
  80ed20:	1000b61e 	bne	r2,zero,80effc <__subdf3+0x70c>
  80ed24:	18800808 	cmpgei	r2,r3,32
  80ed28:	1001021e 	bne	r2,zero,80f134 <__subdf3+0x844>
  80ed2c:	00800804 	movi	r2,32
  80ed30:	10c5c83a 	sub	r2,r2,r3
  80ed34:	48a0983a 	sll	r16,r9,r2
  80ed38:	70c8d83a 	srl	r4,r14,r3
  80ed3c:	7084983a 	sll	r2,r14,r2
  80ed40:	48d2d83a 	srl	r9,r9,r3
  80ed44:	8120b03a 	or	r16,r16,r4
  80ed48:	1004c03a 	cmpne	r2,r2,zero
  80ed4c:	80a0b03a 	or	r16,r16,r2
  80ed50:	7a5f883a 	add	r15,r15,r9
  80ed54:	8361883a 	add	r16,r16,r13
  80ed58:	8349803a 	cmpltu	r4,r16,r13
  80ed5c:	23c9883a 	add	r4,r4,r15
  80ed60:	4025883a 	mov	r18,r8
  80ed64:	003fc306 	br	80ec74 <__subdf3+0x384>
  80ed68:	480a977a 	slli	r5,r9,29
  80ed6c:	00880034 	movhi	r2,8192
  80ed70:	10bfffc4 	addi	r2,r2,-1
  80ed74:	2088703a 	and	r4,r4,r2
  80ed78:	4812d0fa 	srli	r9,r9,3
  80ed7c:	2144b03a 	or	r2,r4,r5
  80ed80:	003fb006 	br	80ec44 <__subdf3+0x354>
  80ed84:	90800044 	addi	r2,r18,1
  80ed88:	1141ff8c 	andi	r5,r2,2046
  80ed8c:	28005c1e 	bne	r5,zero,80ef00 <__subdf3+0x610>
  80ed90:	4b84b03a 	or	r2,r9,r14
  80ed94:	9000a71e 	bne	r18,zero,80f034 <__subdf3+0x744>
  80ed98:	1000df26 	beq	r2,zero,80f118 <__subdf3+0x828>
  80ed9c:	7b44b03a 	or	r2,r15,r13
  80eda0:	10008f26 	beq	r2,zero,80efe0 <__subdf3+0x6f0>
  80eda4:	7361883a 	add	r16,r14,r13
  80eda8:	4bc9883a 	add	r4,r9,r15
  80edac:	839d803a 	cmpltu	r14,r16,r14
  80edb0:	2389883a 	add	r4,r4,r14
  80edb4:	2080202c 	andhi	r2,r4,128
  80edb8:	103f9b26 	beq	r2,zero,80ec28 <__subdf3+0x338>
  80edbc:	00bfe034 	movhi	r2,65408
  80edc0:	10bfffc4 	addi	r2,r2,-1
  80edc4:	2088703a 	and	r4,r4,r2
  80edc8:	04800044 	movi	r18,1
  80edcc:	003f9606 	br	80ec28 <__subdf3+0x338>
  80edd0:	50007626 	beq	r10,zero,80efac <__subdf3+0x6bc>
  80edd4:	4a402034 	orhi	r9,r9,128
  80edd8:	18800e48 	cmpgei	r2,r3,57
  80eddc:	10002e1e 	bne	r2,zero,80ee98 <__subdf3+0x5a8>
  80ede0:	18800808 	cmpgei	r2,r3,32
  80ede4:	1000881e 	bne	r2,zero,80f008 <__subdf3+0x718>
  80ede8:	00800804 	movi	r2,32
  80edec:	10c5c83a 	sub	r2,r2,r3
  80edf0:	48a0983a 	sll	r16,r9,r2
  80edf4:	70c8d83a 	srl	r4,r14,r3
  80edf8:	709c983a 	sll	r14,r14,r2
  80edfc:	48d2d83a 	srl	r9,r9,r3
  80ee00:	8120b03a 	or	r16,r16,r4
  80ee04:	701cc03a 	cmpne	r14,r14,zero
  80ee08:	83a0b03a 	or	r16,r16,r14
  80ee0c:	7a5fc83a 	sub	r15,r15,r9
  80ee10:	00002306 	br	80eea0 <__subdf3+0x5b0>
  80ee14:	7361c83a 	sub	r16,r14,r13
  80ee18:	4be7c83a 	sub	r19,r9,r15
  80ee1c:	7409803a 	cmpltu	r4,r14,r16
  80ee20:	9927c83a 	sub	r19,r19,r4
  80ee24:	9880202c 	andhi	r2,r19,128
  80ee28:	1000411e 	bne	r2,zero,80ef30 <__subdf3+0x640>
  80ee2c:	84c4b03a 	or	r2,r16,r19
  80ee30:	103eed1e 	bne	r2,zero,80e9e8 <__subdf3+0xf8>
  80ee34:	0013883a 	mov	r9,zero
  80ee38:	0023883a 	mov	r17,zero
  80ee3c:	003f8306 	br	80ec4c <__subdf3+0x35c>
  80ee40:	04800084 	movi	r18,2
  80ee44:	00bfe034 	movhi	r2,65408
  80ee48:	10bfffc4 	addi	r2,r2,-1
  80ee4c:	8006d07a 	srli	r3,r16,1
  80ee50:	2088703a 	and	r4,r4,r2
  80ee54:	200497fa 	slli	r2,r4,31
  80ee58:	8400004c 	andi	r16,r16,1
  80ee5c:	1c20b03a 	or	r16,r3,r16
  80ee60:	2008d07a 	srli	r4,r4,1
  80ee64:	1420b03a 	or	r16,r2,r16
  80ee68:	003ef806 	br	80ea4c <__subdf3+0x15c>
  80ee6c:	1c3ff804 	addi	r16,r3,-32
  80ee70:	18800820 	cmpeqi	r2,r3,32
  80ee74:	7c0ad83a 	srl	r5,r15,r16
  80ee78:	1000041e 	bne	r2,zero,80ee8c <__subdf3+0x59c>
  80ee7c:	00801004 	movi	r2,64
  80ee80:	10c5c83a 	sub	r2,r2,r3
  80ee84:	7884983a 	sll	r2,r15,r2
  80ee88:	689ab03a 	or	r13,r13,r2
  80ee8c:	6820c03a 	cmpne	r16,r13,zero
  80ee90:	8160b03a 	or	r16,r16,r5
  80ee94:	003ecc06 	br	80e9c8 <__subdf3+0xd8>
  80ee98:	4b92b03a 	or	r9,r9,r14
  80ee9c:	4820c03a 	cmpne	r16,r9,zero
  80eea0:	6c21c83a 	sub	r16,r13,r16
  80eea4:	6c09803a 	cmpltu	r4,r13,r16
  80eea8:	7909c83a 	sub	r4,r15,r4
  80eeac:	4025883a 	mov	r18,r8
  80eeb0:	003ec806 	br	80e9d4 <__subdf3+0xe4>
  80eeb4:	4b84b03a 	or	r2,r9,r14
  80eeb8:	10007e26 	beq	r2,zero,80f0b4 <__subdf3+0x7c4>
  80eebc:	18bfffc4 	addi	r2,r3,-1
  80eec0:	1000a726 	beq	r2,zero,80f160 <__subdf3+0x870>
  80eec4:	18c1ffd8 	cmpnei	r3,r3,2047
  80eec8:	18003826 	beq	r3,zero,80efac <__subdf3+0x6bc>
  80eecc:	1007883a 	mov	r3,r2
  80eed0:	003f9206 	br	80ed1c <__subdf3+0x42c>
  80eed4:	00800804 	movi	r2,32
  80eed8:	10c5c83a 	sub	r2,r2,r3
  80eedc:	78a0983a 	sll	r16,r15,r2
  80eee0:	68c8d83a 	srl	r4,r13,r3
  80eee4:	689a983a 	sll	r13,r13,r2
  80eee8:	78c4d83a 	srl	r2,r15,r3
  80eeec:	8120b03a 	or	r16,r16,r4
  80eef0:	681ac03a 	cmpne	r13,r13,zero
  80eef4:	8360b03a 	or	r16,r16,r13
  80eef8:	4893883a 	add	r9,r9,r2
  80eefc:	003f5a06 	br	80ec68 <__subdf3+0x378>
  80ef00:	10c1ffe0 	cmpeqi	r3,r2,2047
  80ef04:	183f601e 	bne	r3,zero,80ec88 <__subdf3+0x398>
  80ef08:	735b883a 	add	r13,r14,r13
  80ef0c:	6b9d803a 	cmpltu	r14,r13,r14
  80ef10:	4bc9883a 	add	r4,r9,r15
  80ef14:	2389883a 	add	r4,r4,r14
  80ef18:	202097fa 	slli	r16,r4,31
  80ef1c:	681ad07a 	srli	r13,r13,1
  80ef20:	2008d07a 	srli	r4,r4,1
  80ef24:	1025883a 	mov	r18,r2
  80ef28:	8360b03a 	or	r16,r16,r13
  80ef2c:	003f3e06 	br	80ec28 <__subdf3+0x338>
  80ef30:	6ba1c83a 	sub	r16,r13,r14
  80ef34:	7a49c83a 	sub	r4,r15,r9
  80ef38:	6c1b803a 	cmpltu	r13,r13,r16
  80ef3c:	2367c83a 	sub	r19,r4,r13
  80ef40:	5823883a 	mov	r17,r11
  80ef44:	003ea806 	br	80e9e8 <__subdf3+0xf8>
  80ef48:	7808977a 	slli	r4,r15,29
  80ef4c:	00880034 	movhi	r2,8192
  80ef50:	10bfffc4 	addi	r2,r2,-1
  80ef54:	308c703a 	and	r6,r6,r2
  80ef58:	7812d0fa 	srli	r9,r15,3
  80ef5c:	3104b03a 	or	r2,r6,r4
  80ef60:	003f3806 	br	80ec44 <__subdf3+0x354>
  80ef64:	28005a1e 	bne	r5,zero,80f0d0 <__subdf3+0x7e0>
  80ef68:	10008526 	beq	r2,zero,80f180 <__subdf3+0x890>
  80ef6c:	7806977a 	slli	r3,r15,29
  80ef70:	00880034 	movhi	r2,8192
  80ef74:	10bfffc4 	addi	r2,r2,-1
  80ef78:	3084703a 	and	r2,r6,r2
  80ef7c:	7812d0fa 	srli	r9,r15,3
  80ef80:	10c4b03a 	or	r2,r2,r3
  80ef84:	5823883a 	mov	r17,r11
  80ef88:	003f4906 	br	80ecb0 <__subdf3+0x3c0>
  80ef8c:	7361883a 	add	r16,r14,r13
  80ef90:	4bc9883a 	add	r4,r9,r15
  80ef94:	839d803a 	cmpltu	r14,r16,r14
  80ef98:	2389883a 	add	r4,r4,r14
  80ef9c:	2080202c 	andhi	r2,r4,128
  80efa0:	103fa71e 	bne	r2,zero,80ee40 <__subdf3+0x550>
  80efa4:	04800044 	movi	r18,1
  80efa8:	003f1f06 	br	80ec28 <__subdf3+0x338>
  80efac:	7806977a 	slli	r3,r15,29
  80efb0:	00880034 	movhi	r2,8192
  80efb4:	10bfffc4 	addi	r2,r2,-1
  80efb8:	3084703a 	and	r2,r6,r2
  80efbc:	7812d0fa 	srli	r9,r15,3
  80efc0:	10c4b03a 	or	r2,r2,r3
  80efc4:	003f3a06 	br	80ecb0 <__subdf3+0x3c0>
  80efc8:	7361c83a 	sub	r16,r14,r13
  80efcc:	4bc9c83a 	sub	r4,r9,r15
  80efd0:	741d803a 	cmpltu	r14,r14,r16
  80efd4:	2389c83a 	sub	r4,r4,r14
  80efd8:	04800044 	movi	r18,1
  80efdc:	003e7d06 	br	80e9d4 <__subdf3+0xe4>
  80efe0:	480a977a 	slli	r5,r9,29
  80efe4:	00880034 	movhi	r2,8192
  80efe8:	10bfffc4 	addi	r2,r2,-1
  80efec:	2084703a 	and	r2,r4,r2
  80eff0:	4812d0fa 	srli	r9,r9,3
  80eff4:	1144b03a 	or	r2,r2,r5
  80eff8:	003f1406 	br	80ec4c <__subdf3+0x35c>
  80effc:	4b92b03a 	or	r9,r9,r14
  80f000:	4820c03a 	cmpne	r16,r9,zero
  80f004:	003f5306 	br	80ed54 <__subdf3+0x464>
  80f008:	1c3ff804 	addi	r16,r3,-32
  80f00c:	19000820 	cmpeqi	r4,r3,32
  80f010:	4c04d83a 	srl	r2,r9,r16
  80f014:	2000041e 	bne	r4,zero,80f028 <__subdf3+0x738>
  80f018:	01001004 	movi	r4,64
  80f01c:	20c7c83a 	sub	r3,r4,r3
  80f020:	48d2983a 	sll	r9,r9,r3
  80f024:	725cb03a 	or	r14,r14,r9
  80f028:	7020c03a 	cmpne	r16,r14,zero
  80f02c:	80a0b03a 	or	r16,r16,r2
  80f030:	003f9b06 	br	80eea0 <__subdf3+0x5b0>
  80f034:	103fdd26 	beq	r2,zero,80efac <__subdf3+0x6bc>
  80f038:	7b5ab03a 	or	r13,r15,r13
  80f03c:	480a977a 	slli	r5,r9,29
  80f040:	4812d0fa 	srli	r9,r9,3
  80f044:	6800251e 	bne	r13,zero,80f0dc <__subdf3+0x7ec>
  80f048:	00880034 	movhi	r2,8192
  80f04c:	10bfffc4 	addi	r2,r2,-1
  80f050:	2084703a 	and	r2,r4,r2
  80f054:	1144b03a 	or	r2,r2,r5
  80f058:	003f1506 	br	80ecb0 <__subdf3+0x3c0>
  80f05c:	103f7526 	beq	r2,zero,80ee34 <__subdf3+0x544>
  80f060:	7808977a 	slli	r4,r15,29
  80f064:	00880034 	movhi	r2,8192
  80f068:	10bfffc4 	addi	r2,r2,-1
  80f06c:	3084703a 	and	r2,r6,r2
  80f070:	7812d0fa 	srli	r9,r15,3
  80f074:	1104b03a 	or	r2,r2,r4
  80f078:	5823883a 	mov	r17,r11
  80f07c:	003ef306 	br	80ec4c <__subdf3+0x35c>
  80f080:	6ba1c83a 	sub	r16,r13,r14
  80f084:	7a49c83a 	sub	r4,r15,r9
  80f088:	6c1b803a 	cmpltu	r13,r13,r16
  80f08c:	2349c83a 	sub	r4,r4,r13
  80f090:	04800044 	movi	r18,1
  80f094:	003e4f06 	br	80e9d4 <__subdf3+0xe4>
  80f098:	4806977a 	slli	r3,r9,29
  80f09c:	00880034 	movhi	r2,8192
  80f0a0:	10bfffc4 	addi	r2,r2,-1
  80f0a4:	2084703a 	and	r2,r4,r2
  80f0a8:	4812d0fa 	srli	r9,r9,3
  80f0ac:	10c4b03a 	or	r2,r2,r3
  80f0b0:	003eff06 	br	80ecb0 <__subdf3+0x3c0>
  80f0b4:	7808977a 	slli	r4,r15,29
  80f0b8:	00880034 	movhi	r2,8192
  80f0bc:	10bfffc4 	addi	r2,r2,-1
  80f0c0:	3084703a 	and	r2,r6,r2
  80f0c4:	7812d0fa 	srli	r9,r15,3
  80f0c8:	1104b03a 	or	r2,r2,r4
  80f0cc:	003edd06 	br	80ec44 <__subdf3+0x354>
  80f0d0:	480a977a 	slli	r5,r9,29
  80f0d4:	4812d0fa 	srli	r9,r9,3
  80f0d8:	103fdb26 	beq	r2,zero,80f048 <__subdf3+0x758>
  80f0dc:	00c80034 	movhi	r3,8192
  80f0e0:	18ffffc4 	addi	r3,r3,-1
  80f0e4:	20c4703a 	and	r2,r4,r3
  80f0e8:	4900022c 	andhi	r4,r9,8
  80f0ec:	1144b03a 	or	r2,r2,r5
  80f0f0:	203eef26 	beq	r4,zero,80ecb0 <__subdf3+0x3c0>
  80f0f4:	7808d0fa 	srli	r4,r15,3
  80f0f8:	2140022c 	andhi	r5,r4,8
  80f0fc:	283eec1e 	bne	r5,zero,80ecb0 <__subdf3+0x3c0>
  80f100:	7804977a 	slli	r2,r15,29
  80f104:	30cc703a 	and	r6,r6,r3
  80f108:	5823883a 	mov	r17,r11
  80f10c:	3084b03a 	or	r2,r6,r2
  80f110:	2013883a 	mov	r9,r4
  80f114:	003ee606 	br	80ecb0 <__subdf3+0x3c0>
  80f118:	7808977a 	slli	r4,r15,29
  80f11c:	00880034 	movhi	r2,8192
  80f120:	10bfffc4 	addi	r2,r2,-1
  80f124:	3084703a 	and	r2,r6,r2
  80f128:	7812d0fa 	srli	r9,r15,3
  80f12c:	1104b03a 	or	r2,r2,r4
  80f130:	003ec606 	br	80ec4c <__subdf3+0x35c>
  80f134:	18bff804 	addi	r2,r3,-32
  80f138:	19000820 	cmpeqi	r4,r3,32
  80f13c:	4884d83a 	srl	r2,r9,r2
  80f140:	2000041e 	bne	r4,zero,80f154 <__subdf3+0x864>
  80f144:	01001004 	movi	r4,64
  80f148:	20c7c83a 	sub	r3,r4,r3
  80f14c:	48d2983a 	sll	r9,r9,r3
  80f150:	725cb03a 	or	r14,r14,r9
  80f154:	7020c03a 	cmpne	r16,r14,zero
  80f158:	80a0b03a 	or	r16,r16,r2
  80f15c:	003efd06 	br	80ed54 <__subdf3+0x464>
  80f160:	7361883a 	add	r16,r14,r13
  80f164:	4bc9883a 	add	r4,r9,r15
  80f168:	835b803a 	cmpltu	r13,r16,r13
  80f16c:	2349883a 	add	r4,r4,r13
  80f170:	003f8a06 	br	80ef9c <__subdf3+0x6ac>
  80f174:	8104b03a 	or	r2,r16,r4
  80f178:	103f2e26 	beq	r2,zero,80ee34 <__subdf3+0x544>
  80f17c:	003eaa06 	br	80ec28 <__subdf3+0x338>
  80f180:	02400434 	movhi	r9,16
  80f184:	0023883a 	mov	r17,zero
  80f188:	00bfffc4 	movi	r2,-1
  80f18c:	4a7fffc4 	addi	r9,r9,-1
  80f190:	003ec906 	br	80ecb8 <__subdf3+0x3c8>
  80f194:	0005883a 	mov	r2,zero
  80f198:	00c1ffc4 	movi	r3,2047
  80f19c:	0009883a 	mov	r4,zero
  80f1a0:	003e4106 	br	80eaa8 <__subdf3+0x1b8>

0080f1a4 <__unorddf2>:
  80f1a4:	2806d53a 	srli	r3,r5,20
  80f1a8:	3810d53a 	srli	r8,r7,20
  80f1ac:	02400434 	movhi	r9,16
  80f1b0:	18c1ffcc 	andi	r3,r3,2047
  80f1b4:	4a7fffc4 	addi	r9,r9,-1
  80f1b8:	18c1ffd8 	cmpnei	r3,r3,2047
  80f1bc:	2a4a703a 	and	r5,r5,r9
  80f1c0:	3a4e703a 	and	r7,r7,r9
  80f1c4:	4201ffcc 	andi	r8,r8,2047
  80f1c8:	18000426 	beq	r3,zero,80f1dc <__unorddf2+0x38>
  80f1cc:	4201ffd8 	cmpnei	r8,r8,2047
  80f1d0:	40000626 	beq	r8,zero,80f1ec <__unorddf2+0x48>
  80f1d4:	0005883a 	mov	r2,zero
  80f1d8:	f800283a 	ret
  80f1dc:	290ab03a 	or	r5,r5,r4
  80f1e0:	283ffa26 	beq	r5,zero,80f1cc <__unorddf2+0x28>
  80f1e4:	00800044 	movi	r2,1
  80f1e8:	f800283a 	ret
  80f1ec:	398eb03a 	or	r7,r7,r6
  80f1f0:	3804c03a 	cmpne	r2,r7,zero
  80f1f4:	f800283a 	ret

0080f1f8 <__fixdfsi>:
  80f1f8:	2806d53a 	srli	r3,r5,20
  80f1fc:	01800434 	movhi	r6,16
  80f200:	31bfffc4 	addi	r6,r6,-1
  80f204:	18c1ffcc 	andi	r3,r3,2047
  80f208:	19c0ffd0 	cmplti	r7,r3,1023
  80f20c:	2810d7fa 	srli	r8,r5,31
  80f210:	298a703a 	and	r5,r5,r6
  80f214:	3800061e 	bne	r7,zero,80f230 <__fixdfsi+0x38>
  80f218:	18810790 	cmplti	r2,r3,1054
  80f21c:	1000061e 	bne	r2,zero,80f238 <__fixdfsi+0x40>
  80f220:	00a00034 	movhi	r2,32768
  80f224:	10bfffc4 	addi	r2,r2,-1
  80f228:	4085883a 	add	r2,r8,r2
  80f22c:	f800283a 	ret
  80f230:	0005883a 	mov	r2,zero
  80f234:	f800283a 	ret
  80f238:	01810cc4 	movi	r6,1075
  80f23c:	30cdc83a 	sub	r6,r6,r3
  80f240:	30800808 	cmpgei	r2,r6,32
  80f244:	29400434 	orhi	r5,r5,16
  80f248:	1000071e 	bne	r2,zero,80f268 <__fixdfsi+0x70>
  80f24c:	18befb44 	addi	r2,r3,-1043
  80f250:	2884983a 	sll	r2,r5,r2
  80f254:	2188d83a 	srl	r4,r4,r6
  80f258:	1104b03a 	or	r2,r2,r4
  80f25c:	403ff526 	beq	r8,zero,80f234 <__fixdfsi+0x3c>
  80f260:	0085c83a 	sub	r2,zero,r2
  80f264:	f800283a 	ret
  80f268:	008104c4 	movi	r2,1043
  80f26c:	10c5c83a 	sub	r2,r2,r3
  80f270:	2884d83a 	srl	r2,r5,r2
  80f274:	003ff906 	br	80f25c <__fixdfsi+0x64>

0080f278 <__floatsidf>:
  80f278:	defffd04 	addi	sp,sp,-12
  80f27c:	dfc00215 	stw	ra,8(sp)
  80f280:	dc400115 	stw	r17,4(sp)
  80f284:	dc000015 	stw	r16,0(sp)
  80f288:	20001326 	beq	r4,zero,80f2d8 <__floatsidf+0x60>
  80f28c:	2022d7fa 	srli	r17,r4,31
  80f290:	2021883a 	mov	r16,r4
  80f294:	20002416 	blt	r4,zero,80f328 <__floatsidf+0xb0>
  80f298:	8009883a 	mov	r4,r16
  80f29c:	080226c0 	call	80226c <__clzsi2>
  80f2a0:	01010784 	movi	r4,1054
  80f2a4:	2089c83a 	sub	r4,r4,r2
  80f2a8:	114002c8 	cmpgei	r5,r2,11
  80f2ac:	20c1ffcc 	andi	r3,r4,2047
  80f2b0:	2800161e 	bne	r5,zero,80f30c <__floatsidf+0x94>
  80f2b4:	010002c4 	movi	r4,11
  80f2b8:	2089c83a 	sub	r4,r4,r2
  80f2bc:	810ad83a 	srl	r5,r16,r4
  80f2c0:	01000434 	movhi	r4,16
  80f2c4:	10800544 	addi	r2,r2,21
  80f2c8:	213fffc4 	addi	r4,r4,-1
  80f2cc:	8084983a 	sll	r2,r16,r2
  80f2d0:	290a703a 	and	r5,r5,r4
  80f2d4:	00000406 	br	80f2e8 <__floatsidf+0x70>
  80f2d8:	0023883a 	mov	r17,zero
  80f2dc:	0007883a 	mov	r3,zero
  80f2e0:	000b883a 	mov	r5,zero
  80f2e4:	0005883a 	mov	r2,zero
  80f2e8:	1808953a 	slli	r4,r3,20
  80f2ec:	880697fa 	slli	r3,r17,31
  80f2f0:	2148b03a 	or	r4,r4,r5
  80f2f4:	20c6b03a 	or	r3,r4,r3
  80f2f8:	dfc00217 	ldw	ra,8(sp)
  80f2fc:	dc400117 	ldw	r17,4(sp)
  80f300:	dc000017 	ldw	r16,0(sp)
  80f304:	dec00304 	addi	sp,sp,12
  80f308:	f800283a 	ret
  80f30c:	10bffd44 	addi	r2,r2,-11
  80f310:	808a983a 	sll	r5,r16,r2
  80f314:	00800434 	movhi	r2,16
  80f318:	10bfffc4 	addi	r2,r2,-1
  80f31c:	288a703a 	and	r5,r5,r2
  80f320:	0005883a 	mov	r2,zero
  80f324:	003ff006 	br	80f2e8 <__floatsidf+0x70>
  80f328:	0121c83a 	sub	r16,zero,r4
  80f32c:	003fda06 	br	80f298 <__floatsidf+0x20>

0080f330 <__floatunsidf>:
  80f330:	defffe04 	addi	sp,sp,-8
  80f334:	dc000015 	stw	r16,0(sp)
  80f338:	dfc00115 	stw	ra,4(sp)
  80f33c:	2021883a 	mov	r16,r4
  80f340:	20000f26 	beq	r4,zero,80f380 <__floatunsidf+0x50>
  80f344:	080226c0 	call	80226c <__clzsi2>
  80f348:	00c10784 	movi	r3,1054
  80f34c:	1887c83a 	sub	r3,r3,r2
  80f350:	110002c8 	cmpgei	r4,r2,11
  80f354:	18c1ffcc 	andi	r3,r3,2047
  80f358:	2000121e 	bne	r4,zero,80f3a4 <__floatunsidf+0x74>
  80f35c:	014002c4 	movi	r5,11
  80f360:	288bc83a 	sub	r5,r5,r2
  80f364:	814ad83a 	srl	r5,r16,r5
  80f368:	01000434 	movhi	r4,16
  80f36c:	10800544 	addi	r2,r2,21
  80f370:	213fffc4 	addi	r4,r4,-1
  80f374:	80a0983a 	sll	r16,r16,r2
  80f378:	290a703a 	and	r5,r5,r4
  80f37c:	00000206 	br	80f388 <__floatunsidf+0x58>
  80f380:	0007883a 	mov	r3,zero
  80f384:	000b883a 	mov	r5,zero
  80f388:	1806953a 	slli	r3,r3,20
  80f38c:	8005883a 	mov	r2,r16
  80f390:	1946b03a 	or	r3,r3,r5
  80f394:	dfc00117 	ldw	ra,4(sp)
  80f398:	dc000017 	ldw	r16,0(sp)
  80f39c:	dec00204 	addi	sp,sp,8
  80f3a0:	f800283a 	ret
  80f3a4:	117ffd44 	addi	r5,r2,-11
  80f3a8:	814a983a 	sll	r5,r16,r5
  80f3ac:	00800434 	movhi	r2,16
  80f3b0:	10bfffc4 	addi	r2,r2,-1
  80f3b4:	288a703a 	and	r5,r5,r2
  80f3b8:	0021883a 	mov	r16,zero
  80f3bc:	003ff206 	br	80f388 <__floatunsidf+0x58>

0080f3c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f3c0:	defffe04 	addi	sp,sp,-8
  80f3c4:	dfc00115 	stw	ra,4(sp)
  80f3c8:	df000015 	stw	fp,0(sp)
  80f3cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f3d0:	d0a01117 	ldw	r2,-32700(gp)
  80f3d4:	10000326 	beq	r2,zero,80f3e4 <alt_get_errno+0x24>
  80f3d8:	d0a01117 	ldw	r2,-32700(gp)
  80f3dc:	103ee83a 	callr	r2
  80f3e0:	00000106 	br	80f3e8 <alt_get_errno+0x28>
  80f3e4:	d0a71804 	addi	r2,gp,-25504
}
  80f3e8:	e037883a 	mov	sp,fp
  80f3ec:	dfc00117 	ldw	ra,4(sp)
  80f3f0:	df000017 	ldw	fp,0(sp)
  80f3f4:	dec00204 	addi	sp,sp,8
  80f3f8:	f800283a 	ret

0080f3fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80f3fc:	defffb04 	addi	sp,sp,-20
  80f400:	dfc00415 	stw	ra,16(sp)
  80f404:	df000315 	stw	fp,12(sp)
  80f408:	df000304 	addi	fp,sp,12
  80f40c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80f410:	e0bffd17 	ldw	r2,-12(fp)
  80f414:	10000916 	blt	r2,zero,80f43c <close+0x40>
  80f418:	e0fffd17 	ldw	r3,-12(fp)
  80f41c:	1805883a 	mov	r2,r3
  80f420:	1085883a 	add	r2,r2,r2
  80f424:	10c5883a 	add	r2,r2,r3
  80f428:	100490ba 	slli	r2,r2,2
  80f42c:	00c02074 	movhi	r3,129
  80f430:	18cc8304 	addi	r3,r3,12812
  80f434:	10c5883a 	add	r2,r2,r3
  80f438:	00000106 	br	80f440 <close+0x44>
  80f43c:	0005883a 	mov	r2,zero
  80f440:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80f444:	e0bfff17 	ldw	r2,-4(fp)
  80f448:	10001926 	beq	r2,zero,80f4b0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80f44c:	e0bfff17 	ldw	r2,-4(fp)
  80f450:	10800017 	ldw	r2,0(r2)
  80f454:	10800417 	ldw	r2,16(r2)
  80f458:	10000626 	beq	r2,zero,80f474 <close+0x78>
  80f45c:	e0bfff17 	ldw	r2,-4(fp)
  80f460:	10800017 	ldw	r2,0(r2)
  80f464:	10800417 	ldw	r2,16(r2)
  80f468:	e13fff17 	ldw	r4,-4(fp)
  80f46c:	103ee83a 	callr	r2
  80f470:	00000106 	br	80f478 <close+0x7c>
  80f474:	0005883a 	mov	r2,zero
  80f478:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80f47c:	e13ffd17 	ldw	r4,-12(fp)
  80f480:	080fcb80 	call	80fcb8 <alt_release_fd>
    if (rval < 0)
  80f484:	e0bffe17 	ldw	r2,-8(fp)
  80f488:	1000070e 	bge	r2,zero,80f4a8 <close+0xac>
    {
      ALT_ERRNO = -rval;
  80f48c:	080f3c00 	call	80f3c0 <alt_get_errno>
  80f490:	1007883a 	mov	r3,r2
  80f494:	e0bffe17 	ldw	r2,-8(fp)
  80f498:	0085c83a 	sub	r2,zero,r2
  80f49c:	18800015 	stw	r2,0(r3)
      return -1;
  80f4a0:	00bfffc4 	movi	r2,-1
  80f4a4:	00000706 	br	80f4c4 <close+0xc8>
    }
    return 0;
  80f4a8:	0005883a 	mov	r2,zero
  80f4ac:	00000506 	br	80f4c4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f4b0:	080f3c00 	call	80f3c0 <alt_get_errno>
  80f4b4:	1007883a 	mov	r3,r2
  80f4b8:	00801444 	movi	r2,81
  80f4bc:	18800015 	stw	r2,0(r3)
    return -1;
  80f4c0:	00bfffc4 	movi	r2,-1
  }
}
  80f4c4:	e037883a 	mov	sp,fp
  80f4c8:	dfc00117 	ldw	ra,4(sp)
  80f4cc:	df000017 	ldw	fp,0(sp)
  80f4d0:	dec00204 	addi	sp,sp,8
  80f4d4:	f800283a 	ret

0080f4d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80f4d8:	defffc04 	addi	sp,sp,-16
  80f4dc:	df000315 	stw	fp,12(sp)
  80f4e0:	df000304 	addi	fp,sp,12
  80f4e4:	e13fff15 	stw	r4,-4(fp)
  80f4e8:	e17ffe15 	stw	r5,-8(fp)
  80f4ec:	e1bffd15 	stw	r6,-12(fp)
  return len;
  80f4f0:	e0bffd17 	ldw	r2,-12(fp)
}
  80f4f4:	e037883a 	mov	sp,fp
  80f4f8:	df000017 	ldw	fp,0(sp)
  80f4fc:	dec00104 	addi	sp,sp,4
  80f500:	f800283a 	ret

0080f504 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f504:	defffd04 	addi	sp,sp,-12
  80f508:	df000215 	stw	fp,8(sp)
  80f50c:	df000204 	addi	fp,sp,8
  80f510:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80f514:	0001883a 	nop
  80f518:	e0bffe17 	ldw	r2,-8(fp)
  80f51c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80f520:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f524:	10000226 	beq	r2,zero,80f530 <_exit+0x2c>
    ALT_SIM_FAIL();
  80f528:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  80f52c:	00000106 	br	80f534 <_exit+0x30>
    ALT_SIM_PASS();
  80f530:	002af0b0 	cmpltui	zero,zero,43970
}
  80f534:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f538:	003fff06 	br	80f538 <_exit+0x34>

0080f53c <alt_get_errno>:
{
  80f53c:	defffe04 	addi	sp,sp,-8
  80f540:	dfc00115 	stw	ra,4(sp)
  80f544:	df000015 	stw	fp,0(sp)
  80f548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f54c:	d0a01117 	ldw	r2,-32700(gp)
  80f550:	10000326 	beq	r2,zero,80f560 <alt_get_errno+0x24>
  80f554:	d0a01117 	ldw	r2,-32700(gp)
  80f558:	103ee83a 	callr	r2
  80f55c:	00000106 	br	80f564 <alt_get_errno+0x28>
  80f560:	d0a71804 	addi	r2,gp,-25504
}
  80f564:	e037883a 	mov	sp,fp
  80f568:	dfc00117 	ldw	ra,4(sp)
  80f56c:	df000017 	ldw	fp,0(sp)
  80f570:	dec00204 	addi	sp,sp,8
  80f574:	f800283a 	ret

0080f578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80f578:	defffb04 	addi	sp,sp,-20
  80f57c:	dfc00415 	stw	ra,16(sp)
  80f580:	df000315 	stw	fp,12(sp)
  80f584:	df000304 	addi	fp,sp,12
  80f588:	e13ffe15 	stw	r4,-8(fp)
  80f58c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f590:	e0bffe17 	ldw	r2,-8(fp)
  80f594:	10000916 	blt	r2,zero,80f5bc <fstat+0x44>
  80f598:	e0fffe17 	ldw	r3,-8(fp)
  80f59c:	1805883a 	mov	r2,r3
  80f5a0:	1085883a 	add	r2,r2,r2
  80f5a4:	10c5883a 	add	r2,r2,r3
  80f5a8:	100490ba 	slli	r2,r2,2
  80f5ac:	00c02074 	movhi	r3,129
  80f5b0:	18cc8304 	addi	r3,r3,12812
  80f5b4:	10c5883a 	add	r2,r2,r3
  80f5b8:	00000106 	br	80f5c0 <fstat+0x48>
  80f5bc:	0005883a 	mov	r2,zero
  80f5c0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f5c4:	e0bfff17 	ldw	r2,-4(fp)
  80f5c8:	10001026 	beq	r2,zero,80f60c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80f5cc:	e0bfff17 	ldw	r2,-4(fp)
  80f5d0:	10800017 	ldw	r2,0(r2)
  80f5d4:	10800817 	ldw	r2,32(r2)
  80f5d8:	10000726 	beq	r2,zero,80f5f8 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  80f5dc:	e0bfff17 	ldw	r2,-4(fp)
  80f5e0:	10800017 	ldw	r2,0(r2)
  80f5e4:	10800817 	ldw	r2,32(r2)
  80f5e8:	e17ffd17 	ldw	r5,-12(fp)
  80f5ec:	e13fff17 	ldw	r4,-4(fp)
  80f5f0:	103ee83a 	callr	r2
  80f5f4:	00000a06 	br	80f620 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80f5f8:	e0bffd17 	ldw	r2,-12(fp)
  80f5fc:	00c80004 	movi	r3,8192
  80f600:	10c00115 	stw	r3,4(r2)
      return 0;
  80f604:	0005883a 	mov	r2,zero
  80f608:	00000506 	br	80f620 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f60c:	080f53c0 	call	80f53c <alt_get_errno>
  80f610:	1007883a 	mov	r3,r2
  80f614:	00801444 	movi	r2,81
  80f618:	18800015 	stw	r2,0(r3)
    return -1;
  80f61c:	00bfffc4 	movi	r2,-1
  }
}
  80f620:	e037883a 	mov	sp,fp
  80f624:	dfc00117 	ldw	ra,4(sp)
  80f628:	df000017 	ldw	fp,0(sp)
  80f62c:	dec00204 	addi	sp,sp,8
  80f630:	f800283a 	ret

0080f634 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80f634:	deffff04 	addi	sp,sp,-4
  80f638:	df000015 	stw	fp,0(sp)
  80f63c:	d839883a 	mov	fp,sp
  return 0;
  80f640:	0005883a 	mov	r2,zero
}
  80f644:	e037883a 	mov	sp,fp
  80f648:	df000017 	ldw	fp,0(sp)
  80f64c:	dec00104 	addi	sp,sp,4
  80f650:	f800283a 	ret

0080f654 <alt_get_errno>:
{
  80f654:	defffe04 	addi	sp,sp,-8
  80f658:	dfc00115 	stw	ra,4(sp)
  80f65c:	df000015 	stw	fp,0(sp)
  80f660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f664:	d0a01117 	ldw	r2,-32700(gp)
  80f668:	10000326 	beq	r2,zero,80f678 <alt_get_errno+0x24>
  80f66c:	d0a01117 	ldw	r2,-32700(gp)
  80f670:	103ee83a 	callr	r2
  80f674:	00000106 	br	80f67c <alt_get_errno+0x28>
  80f678:	d0a71804 	addi	r2,gp,-25504
}
  80f67c:	e037883a 	mov	sp,fp
  80f680:	dfc00117 	ldw	ra,4(sp)
  80f684:	df000017 	ldw	fp,0(sp)
  80f688:	dec00204 	addi	sp,sp,8
  80f68c:	f800283a 	ret

0080f690 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f690:	deffea04 	addi	sp,sp,-88
  80f694:	dfc01515 	stw	ra,84(sp)
  80f698:	df001415 	stw	fp,80(sp)
  80f69c:	df001404 	addi	fp,sp,80
  80f6a0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f6a4:	e0bfec17 	ldw	r2,-80(fp)
  80f6a8:	10000916 	blt	r2,zero,80f6d0 <isatty+0x40>
  80f6ac:	e0ffec17 	ldw	r3,-80(fp)
  80f6b0:	1805883a 	mov	r2,r3
  80f6b4:	1085883a 	add	r2,r2,r2
  80f6b8:	10c5883a 	add	r2,r2,r3
  80f6bc:	100490ba 	slli	r2,r2,2
  80f6c0:	00c02074 	movhi	r3,129
  80f6c4:	18cc8304 	addi	r3,r3,12812
  80f6c8:	10c5883a 	add	r2,r2,r3
  80f6cc:	00000106 	br	80f6d4 <isatty+0x44>
  80f6d0:	0005883a 	mov	r2,zero
  80f6d4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f6d8:	e0bfff17 	ldw	r2,-4(fp)
  80f6dc:	10000e26 	beq	r2,zero,80f718 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f6e0:	e0bfff17 	ldw	r2,-4(fp)
  80f6e4:	10800017 	ldw	r2,0(r2)
  80f6e8:	10800817 	ldw	r2,32(r2)
  80f6ec:	1000021e 	bne	r2,zero,80f6f8 <isatty+0x68>
    {
      return 1;
  80f6f0:	00800044 	movi	r2,1
  80f6f4:	00000d06 	br	80f72c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f6f8:	e0bfed04 	addi	r2,fp,-76
  80f6fc:	100b883a 	mov	r5,r2
  80f700:	e13fec17 	ldw	r4,-80(fp)
  80f704:	080f5780 	call	80f578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f708:	e0bfee17 	ldw	r2,-72(fp)
  80f70c:	10880020 	cmpeqi	r2,r2,8192
  80f710:	10803fcc 	andi	r2,r2,255
  80f714:	00000506 	br	80f72c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f718:	080f6540 	call	80f654 <alt_get_errno>
  80f71c:	1007883a 	mov	r3,r2
  80f720:	00801444 	movi	r2,81
  80f724:	18800015 	stw	r2,0(r3)
    return 0;
  80f728:	0005883a 	mov	r2,zero
  }
}
  80f72c:	e037883a 	mov	sp,fp
  80f730:	dfc00117 	ldw	ra,4(sp)
  80f734:	df000017 	ldw	fp,0(sp)
  80f738:	dec00204 	addi	sp,sp,8
  80f73c:	f800283a 	ret

0080f740 <alt_get_errno>:
{
  80f740:	defffe04 	addi	sp,sp,-8
  80f744:	dfc00115 	stw	ra,4(sp)
  80f748:	df000015 	stw	fp,0(sp)
  80f74c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f750:	d0a01117 	ldw	r2,-32700(gp)
  80f754:	10000326 	beq	r2,zero,80f764 <alt_get_errno+0x24>
  80f758:	d0a01117 	ldw	r2,-32700(gp)
  80f75c:	103ee83a 	callr	r2
  80f760:	00000106 	br	80f768 <alt_get_errno+0x28>
  80f764:	d0a71804 	addi	r2,gp,-25504
}
  80f768:	e037883a 	mov	sp,fp
  80f76c:	dfc00117 	ldw	ra,4(sp)
  80f770:	df000017 	ldw	fp,0(sp)
  80f774:	dec00204 	addi	sp,sp,8
  80f778:	f800283a 	ret

0080f77c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80f77c:	defffb04 	addi	sp,sp,-20
  80f780:	dfc00415 	stw	ra,16(sp)
  80f784:	df000315 	stw	fp,12(sp)
  80f788:	df000304 	addi	fp,sp,12
  80f78c:	e13ffe15 	stw	r4,-8(fp)
  80f790:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  80f794:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  80f798:	e0bffe17 	ldw	r2,-8(fp)
  80f79c:	00802e16 	blt	zero,r2,80f858 <kill+0xdc>
  80f7a0:	e0bffd17 	ldw	r2,-12(fp)
  80f7a4:	10800828 	cmpgeui	r2,r2,32
  80f7a8:	1000281e 	bne	r2,zero,80f84c <kill+0xd0>
  80f7ac:	e0bffd17 	ldw	r2,-12(fp)
  80f7b0:	100690ba 	slli	r3,r2,2
  80f7b4:	00802074 	movhi	r2,129
  80f7b8:	1885883a 	add	r2,r3,r2
  80f7bc:	10bdf117 	ldw	r2,-2108(r2)
  80f7c0:	1000683a 	jmp	r2
  80f7c4:	0080f86c 	andhi	r2,zero,993
  80f7c8:	0080f84c 	andi	r2,zero,993
  80f7cc:	0080f84c 	andi	r2,zero,993
  80f7d0:	0080f844 	movi	r2,993
  80f7d4:	0080f844 	movi	r2,993
  80f7d8:	0080f844 	movi	r2,993
  80f7dc:	0080f844 	movi	r2,993
  80f7e0:	0080f84c 	andi	r2,zero,993
  80f7e4:	0080f844 	movi	r2,993
  80f7e8:	0080f844 	movi	r2,993
  80f7ec:	0080f844 	movi	r2,993
  80f7f0:	0080f844 	movi	r2,993
  80f7f4:	0080f844 	movi	r2,993
  80f7f8:	0080f844 	movi	r2,993
  80f7fc:	0080f844 	movi	r2,993
  80f800:	0080f844 	movi	r2,993
  80f804:	0080f86c 	andhi	r2,zero,993
  80f808:	0080f84c 	andi	r2,zero,993
  80f80c:	0080f84c 	andi	r2,zero,993
  80f810:	0080f84c 	andi	r2,zero,993
  80f814:	0080f86c 	andhi	r2,zero,993
  80f818:	0080f84c 	andi	r2,zero,993
  80f81c:	0080f84c 	andi	r2,zero,993
  80f820:	0080f844 	movi	r2,993
  80f824:	0080f844 	movi	r2,993
  80f828:	0080f844 	movi	r2,993
  80f82c:	0080f844 	movi	r2,993
  80f830:	0080f844 	movi	r2,993
  80f834:	0080f84c 	andi	r2,zero,993
  80f838:	0080f84c 	andi	r2,zero,993
  80f83c:	0080f844 	movi	r2,993
  80f840:	0080f844 	movi	r2,993
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80f844:	0009883a 	mov	r4,zero
  80f848:	080f5040 	call	80f504 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80f84c:	00800584 	movi	r2,22
  80f850:	e0bfff15 	stw	r2,-4(fp)
  80f854:	00000606 	br	80f870 <kill+0xf4>
    }
  }

  else if (pid > 0)
  80f858:	e0bffe17 	ldw	r2,-8(fp)
  80f85c:	0080040e 	bge	zero,r2,80f870 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80f860:	008000c4 	movi	r2,3
  80f864:	e0bfff15 	stw	r2,-4(fp)
  80f868:	00000106 	br	80f870 <kill+0xf4>
      break;
  80f86c:	0001883a 	nop
  }

  if (status)
  80f870:	e0bfff17 	ldw	r2,-4(fp)
  80f874:	10000626 	beq	r2,zero,80f890 <kill+0x114>
  {
    ALT_ERRNO = status;
  80f878:	080f7400 	call	80f740 <alt_get_errno>
  80f87c:	1007883a 	mov	r3,r2
  80f880:	e0bfff17 	ldw	r2,-4(fp)
  80f884:	18800015 	stw	r2,0(r3)
    return -1;
  80f888:	00bfffc4 	movi	r2,-1
  80f88c:	00000106 	br	80f894 <kill+0x118>
  }

  return 0;
  80f890:	0005883a 	mov	r2,zero
}
  80f894:	e037883a 	mov	sp,fp
  80f898:	dfc00117 	ldw	ra,4(sp)
  80f89c:	df000017 	ldw	fp,0(sp)
  80f8a0:	dec00204 	addi	sp,sp,8
  80f8a4:	f800283a 	ret

0080f8a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f8a8:	defffc04 	addi	sp,sp,-16
  80f8ac:	df000315 	stw	fp,12(sp)
  80f8b0:	df000304 	addi	fp,sp,12
  80f8b4:	e13fff15 	stw	r4,-4(fp)
  80f8b8:	e17ffe15 	stw	r5,-8(fp)
  80f8bc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  80f8c0:	e0fffe17 	ldw	r3,-8(fp)
  80f8c4:	e0bfff17 	ldw	r2,-4(fp)
  80f8c8:	18800c26 	beq	r3,r2,80f8fc <alt_load_section+0x54>
  {
    while( to != end )
  80f8cc:	00000806 	br	80f8f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f8d0:	e0ffff17 	ldw	r3,-4(fp)
  80f8d4:	18800104 	addi	r2,r3,4
  80f8d8:	e0bfff15 	stw	r2,-4(fp)
  80f8dc:	e0bffe17 	ldw	r2,-8(fp)
  80f8e0:	11000104 	addi	r4,r2,4
  80f8e4:	e13ffe15 	stw	r4,-8(fp)
  80f8e8:	18c00017 	ldw	r3,0(r3)
  80f8ec:	10c00015 	stw	r3,0(r2)
    while( to != end )
  80f8f0:	e0fffe17 	ldw	r3,-8(fp)
  80f8f4:	e0bffd17 	ldw	r2,-12(fp)
  80f8f8:	18bff51e 	bne	r3,r2,80f8d0 <alt_load_section+0x28>
    }
  }
}
  80f8fc:	0001883a 	nop
  80f900:	e037883a 	mov	sp,fp
  80f904:	df000017 	ldw	fp,0(sp)
  80f908:	dec00104 	addi	sp,sp,4
  80f90c:	f800283a 	ret

0080f910 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f910:	defffe04 	addi	sp,sp,-8
  80f914:	dfc00115 	stw	ra,4(sp)
  80f918:	df000015 	stw	fp,0(sp)
  80f91c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f920:	01802074 	movhi	r6,129
  80f924:	31911104 	addi	r6,r6,17476
  80f928:	01402074 	movhi	r5,129
  80f92c:	294a1304 	addi	r5,r5,10316
  80f930:	01002074 	movhi	r4,129
  80f934:	21111104 	addi	r4,r4,17476
  80f938:	080f8a80 	call	80f8a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f93c:	01802034 	movhi	r6,128
  80f940:	31808e04 	addi	r6,r6,568
  80f944:	01402034 	movhi	r5,128
  80f948:	29400804 	addi	r5,r5,32
  80f94c:	01002034 	movhi	r4,128
  80f950:	21000804 	addi	r4,r4,32
  80f954:	080f8a80 	call	80f8a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f958:	01802074 	movhi	r6,129
  80f95c:	318a1304 	addi	r6,r6,10316
  80f960:	01402074 	movhi	r5,129
  80f964:	29476204 	addi	r5,r5,7560
  80f968:	01002074 	movhi	r4,129
  80f96c:	21076204 	addi	r4,r4,7560
  80f970:	080f8a80 	call	80f8a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f974:	0810d500 	call	810d50 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f978:	0810f480 	call	810f48 <alt_icache_flush_all>
}
  80f97c:	0001883a 	nop
  80f980:	e037883a 	mov	sp,fp
  80f984:	dfc00117 	ldw	ra,4(sp)
  80f988:	df000017 	ldw	fp,0(sp)
  80f98c:	dec00204 	addi	sp,sp,8
  80f990:	f800283a 	ret

0080f994 <alt_get_errno>:
{
  80f994:	defffe04 	addi	sp,sp,-8
  80f998:	dfc00115 	stw	ra,4(sp)
  80f99c:	df000015 	stw	fp,0(sp)
  80f9a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f9a4:	d0a01117 	ldw	r2,-32700(gp)
  80f9a8:	10000326 	beq	r2,zero,80f9b8 <alt_get_errno+0x24>
  80f9ac:	d0a01117 	ldw	r2,-32700(gp)
  80f9b0:	103ee83a 	callr	r2
  80f9b4:	00000106 	br	80f9bc <alt_get_errno+0x28>
  80f9b8:	d0a71804 	addi	r2,gp,-25504
}
  80f9bc:	e037883a 	mov	sp,fp
  80f9c0:	dfc00117 	ldw	ra,4(sp)
  80f9c4:	df000017 	ldw	fp,0(sp)
  80f9c8:	dec00204 	addi	sp,sp,8
  80f9cc:	f800283a 	ret

0080f9d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f9d0:	defff904 	addi	sp,sp,-28
  80f9d4:	dfc00615 	stw	ra,24(sp)
  80f9d8:	df000515 	stw	fp,20(sp)
  80f9dc:	df000504 	addi	fp,sp,20
  80f9e0:	e13ffd15 	stw	r4,-12(fp)
  80f9e4:	e17ffc15 	stw	r5,-16(fp)
  80f9e8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f9ec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f9f0:	e0bffd17 	ldw	r2,-12(fp)
  80f9f4:	10000916 	blt	r2,zero,80fa1c <lseek+0x4c>
  80f9f8:	e0fffd17 	ldw	r3,-12(fp)
  80f9fc:	1805883a 	mov	r2,r3
  80fa00:	1085883a 	add	r2,r2,r2
  80fa04:	10c5883a 	add	r2,r2,r3
  80fa08:	100490ba 	slli	r2,r2,2
  80fa0c:	00c02074 	movhi	r3,129
  80fa10:	18cc8304 	addi	r3,r3,12812
  80fa14:	10c5883a 	add	r2,r2,r3
  80fa18:	00000106 	br	80fa20 <lseek+0x50>
  80fa1c:	0005883a 	mov	r2,zero
  80fa20:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  80fa24:	e0bffe17 	ldw	r2,-8(fp)
  80fa28:	10001026 	beq	r2,zero,80fa6c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80fa2c:	e0bffe17 	ldw	r2,-8(fp)
  80fa30:	10800017 	ldw	r2,0(r2)
  80fa34:	10800717 	ldw	r2,28(r2)
  80fa38:	10000926 	beq	r2,zero,80fa60 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80fa3c:	e0bffe17 	ldw	r2,-8(fp)
  80fa40:	10800017 	ldw	r2,0(r2)
  80fa44:	10800717 	ldw	r2,28(r2)
  80fa48:	e1bffb17 	ldw	r6,-20(fp)
  80fa4c:	e17ffc17 	ldw	r5,-16(fp)
  80fa50:	e13ffe17 	ldw	r4,-8(fp)
  80fa54:	103ee83a 	callr	r2
  80fa58:	e0bfff15 	stw	r2,-4(fp)
  80fa5c:	00000506 	br	80fa74 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80fa60:	00bfde84 	movi	r2,-134
  80fa64:	e0bfff15 	stw	r2,-4(fp)
  80fa68:	00000206 	br	80fa74 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80fa6c:	00bfebc4 	movi	r2,-81
  80fa70:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  80fa74:	e0bfff17 	ldw	r2,-4(fp)
  80fa78:	1000070e 	bge	r2,zero,80fa98 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  80fa7c:	080f9940 	call	80f994 <alt_get_errno>
  80fa80:	1007883a 	mov	r3,r2
  80fa84:	e0bfff17 	ldw	r2,-4(fp)
  80fa88:	0085c83a 	sub	r2,zero,r2
  80fa8c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80fa90:	00bfffc4 	movi	r2,-1
  80fa94:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  80fa98:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa9c:	e037883a 	mov	sp,fp
  80faa0:	dfc00117 	ldw	ra,4(sp)
  80faa4:	df000017 	ldw	fp,0(sp)
  80faa8:	dec00204 	addi	sp,sp,8
  80faac:	f800283a 	ret

0080fab0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80fab0:	defffd04 	addi	sp,sp,-12
  80fab4:	dfc00215 	stw	ra,8(sp)
  80fab8:	df000115 	stw	fp,4(sp)
  80fabc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80fac0:	0009883a 	mov	r4,zero
  80fac4:	08100080 	call	810008 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80fac8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80facc:	08100440 	call	810044 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80fad0:	01802074 	movhi	r6,129
  80fad4:	318a0b04 	addi	r6,r6,10284
  80fad8:	01402074 	movhi	r5,129
  80fadc:	294a0b04 	addi	r5,r5,10284
  80fae0:	01002074 	movhi	r4,129
  80fae4:	210a0b04 	addi	r4,r4,10284
  80fae8:	08112e80 	call	8112e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80faec:	0810e800 	call	810e80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80faf0:	01002074 	movhi	r4,129
  80faf4:	2103b904 	addi	r4,r4,3812
  80faf8:	0811b240 	call	811b24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80fafc:	d0a71917 	ldw	r2,-25500(gp)
  80fb00:	d0e71a17 	ldw	r3,-25496(gp)
  80fb04:	d1271b17 	ldw	r4,-25492(gp)
  80fb08:	200d883a 	mov	r6,r4
  80fb0c:	180b883a 	mov	r5,r3
  80fb10:	1009883a 	mov	r4,r2
  80fb14:	08004c00 	call	8004c0 <main>
  80fb18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80fb1c:	01000044 	movi	r4,1
  80fb20:	080f3fc0 	call	80f3fc <close>
  exit (result);
  80fb24:	e13fff17 	ldw	r4,-4(fp)
  80fb28:	0811b380 	call	811b38 <exit>

0080fb2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80fb2c:	defffe04 	addi	sp,sp,-8
  80fb30:	df000115 	stw	fp,4(sp)
  80fb34:	df000104 	addi	fp,sp,4
  80fb38:	e13fff15 	stw	r4,-4(fp)
}
  80fb3c:	0001883a 	nop
  80fb40:	e037883a 	mov	sp,fp
  80fb44:	df000017 	ldw	fp,0(sp)
  80fb48:	dec00104 	addi	sp,sp,4
  80fb4c:	f800283a 	ret

0080fb50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80fb50:	defffe04 	addi	sp,sp,-8
  80fb54:	df000115 	stw	fp,4(sp)
  80fb58:	df000104 	addi	fp,sp,4
  80fb5c:	e13fff15 	stw	r4,-4(fp)
}
  80fb60:	0001883a 	nop
  80fb64:	e037883a 	mov	sp,fp
  80fb68:	df000017 	ldw	fp,0(sp)
  80fb6c:	dec00104 	addi	sp,sp,4
  80fb70:	f800283a 	ret

0080fb74 <alt_get_errno>:
{
  80fb74:	defffe04 	addi	sp,sp,-8
  80fb78:	dfc00115 	stw	ra,4(sp)
  80fb7c:	df000015 	stw	fp,0(sp)
  80fb80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fb84:	d0a01117 	ldw	r2,-32700(gp)
  80fb88:	10000326 	beq	r2,zero,80fb98 <alt_get_errno+0x24>
  80fb8c:	d0a01117 	ldw	r2,-32700(gp)
  80fb90:	103ee83a 	callr	r2
  80fb94:	00000106 	br	80fb9c <alt_get_errno+0x28>
  80fb98:	d0a71804 	addi	r2,gp,-25504
}
  80fb9c:	e037883a 	mov	sp,fp
  80fba0:	dfc00117 	ldw	ra,4(sp)
  80fba4:	df000017 	ldw	fp,0(sp)
  80fba8:	dec00204 	addi	sp,sp,8
  80fbac:	f800283a 	ret

0080fbb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80fbb0:	defff904 	addi	sp,sp,-28
  80fbb4:	dfc00615 	stw	ra,24(sp)
  80fbb8:	df000515 	stw	fp,20(sp)
  80fbbc:	df000504 	addi	fp,sp,20
  80fbc0:	e13ffd15 	stw	r4,-12(fp)
  80fbc4:	e17ffc15 	stw	r5,-16(fp)
  80fbc8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fbcc:	e0bffd17 	ldw	r2,-12(fp)
  80fbd0:	10000916 	blt	r2,zero,80fbf8 <read+0x48>
  80fbd4:	e0fffd17 	ldw	r3,-12(fp)
  80fbd8:	1805883a 	mov	r2,r3
  80fbdc:	1085883a 	add	r2,r2,r2
  80fbe0:	10c5883a 	add	r2,r2,r3
  80fbe4:	100490ba 	slli	r2,r2,2
  80fbe8:	00c02074 	movhi	r3,129
  80fbec:	18cc8304 	addi	r3,r3,12812
  80fbf0:	10c5883a 	add	r2,r2,r3
  80fbf4:	00000106 	br	80fbfc <read+0x4c>
  80fbf8:	0005883a 	mov	r2,zero
  80fbfc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80fc00:	e0bfff17 	ldw	r2,-4(fp)
  80fc04:	10002226 	beq	r2,zero,80fc90 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80fc08:	e0bfff17 	ldw	r2,-4(fp)
  80fc0c:	10800217 	ldw	r2,8(r2)
  80fc10:	108000cc 	andi	r2,r2,3
  80fc14:	10800060 	cmpeqi	r2,r2,1
  80fc18:	1000181e 	bne	r2,zero,80fc7c <read+0xcc>
        (fd->dev->read))
  80fc1c:	e0bfff17 	ldw	r2,-4(fp)
  80fc20:	10800017 	ldw	r2,0(r2)
  80fc24:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80fc28:	10001426 	beq	r2,zero,80fc7c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80fc2c:	e0bfff17 	ldw	r2,-4(fp)
  80fc30:	10800017 	ldw	r2,0(r2)
  80fc34:	10800517 	ldw	r2,20(r2)
  80fc38:	e0fffb17 	ldw	r3,-20(fp)
  80fc3c:	180d883a 	mov	r6,r3
  80fc40:	e17ffc17 	ldw	r5,-16(fp)
  80fc44:	e13fff17 	ldw	r4,-4(fp)
  80fc48:	103ee83a 	callr	r2
  80fc4c:	e0bffe15 	stw	r2,-8(fp)
  80fc50:	e0bffe17 	ldw	r2,-8(fp)
  80fc54:	1000070e 	bge	r2,zero,80fc74 <read+0xc4>
        {
          ALT_ERRNO = -rval;
  80fc58:	080fb740 	call	80fb74 <alt_get_errno>
  80fc5c:	1007883a 	mov	r3,r2
  80fc60:	e0bffe17 	ldw	r2,-8(fp)
  80fc64:	0085c83a 	sub	r2,zero,r2
  80fc68:	18800015 	stw	r2,0(r3)
          return -1;
  80fc6c:	00bfffc4 	movi	r2,-1
  80fc70:	00000c06 	br	80fca4 <read+0xf4>
        }
        return rval;
  80fc74:	e0bffe17 	ldw	r2,-8(fp)
  80fc78:	00000a06 	br	80fca4 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80fc7c:	080fb740 	call	80fb74 <alt_get_errno>
  80fc80:	1007883a 	mov	r3,r2
  80fc84:	00800344 	movi	r2,13
  80fc88:	18800015 	stw	r2,0(r3)
  80fc8c:	00000406 	br	80fca0 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80fc90:	080fb740 	call	80fb74 <alt_get_errno>
  80fc94:	1007883a 	mov	r3,r2
  80fc98:	00801444 	movi	r2,81
  80fc9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fca0:	00bfffc4 	movi	r2,-1
}
  80fca4:	e037883a 	mov	sp,fp
  80fca8:	dfc00117 	ldw	ra,4(sp)
  80fcac:	df000017 	ldw	fp,0(sp)
  80fcb0:	dec00204 	addi	sp,sp,8
  80fcb4:	f800283a 	ret

0080fcb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80fcb8:	defffe04 	addi	sp,sp,-8
  80fcbc:	df000115 	stw	fp,4(sp)
  80fcc0:	df000104 	addi	fp,sp,4
  80fcc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80fcc8:	e0bfff17 	ldw	r2,-4(fp)
  80fccc:	108000d0 	cmplti	r2,r2,3
  80fcd0:	1000101e 	bne	r2,zero,80fd14 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  80fcd4:	e0ffff17 	ldw	r3,-4(fp)
  80fcd8:	1805883a 	mov	r2,r3
  80fcdc:	1085883a 	add	r2,r2,r2
  80fce0:	10c5883a 	add	r2,r2,r3
  80fce4:	100490ba 	slli	r2,r2,2
  80fce8:	00c02074 	movhi	r3,129
  80fcec:	10c7883a 	add	r3,r2,r3
  80fcf0:	180c8515 	stw	zero,12820(r3)
    alt_fd_list[fd].dev      = 0;
  80fcf4:	e0ffff17 	ldw	r3,-4(fp)
  80fcf8:	1805883a 	mov	r2,r3
  80fcfc:	1085883a 	add	r2,r2,r2
  80fd00:	10c5883a 	add	r2,r2,r3
  80fd04:	100490ba 	slli	r2,r2,2
  80fd08:	00c02074 	movhi	r3,129
  80fd0c:	10c7883a 	add	r3,r2,r3
  80fd10:	180c8315 	stw	zero,12812(r3)
  }
}
  80fd14:	0001883a 	nop
  80fd18:	e037883a 	mov	sp,fp
  80fd1c:	df000017 	ldw	fp,0(sp)
  80fd20:	dec00104 	addi	sp,sp,4
  80fd24:	f800283a 	ret

0080fd28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80fd28:	defff904 	addi	sp,sp,-28
  80fd2c:	df000615 	stw	fp,24(sp)
  80fd30:	df000604 	addi	fp,sp,24
  80fd34:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  80fd38:	0005303a 	rdctl	r2,status
  80fd3c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd40:	e0fffd17 	ldw	r3,-12(fp)
  80fd44:	00bfff84 	movi	r2,-2
  80fd48:	1884703a 	and	r2,r3,r2
  80fd4c:	1001703a 	wrctl	status,r2
  return context;
  80fd50:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80fd54:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80fd58:	d0a01217 	ldw	r2,-32696(gp)
  80fd5c:	10c000c4 	addi	r3,r2,3
  80fd60:	00bfff04 	movi	r2,-4
  80fd64:	1884703a 	and	r2,r3,r2
  80fd68:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80fd6c:	d0e01217 	ldw	r3,-32696(gp)
  80fd70:	e0bffa17 	ldw	r2,-24(fp)
  80fd74:	1887883a 	add	r3,r3,r2
  80fd78:	00804034 	movhi	r2,256
  80fd7c:	10800004 	addi	r2,r2,0
  80fd80:	10c0072e 	bgeu	r2,r3,80fda0 <sbrk+0x78>
  80fd84:	e0bfff17 	ldw	r2,-4(fp)
  80fd88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80fd8c:	e0bffc17 	ldw	r2,-16(fp)
  80fd90:	1001703a 	wrctl	status,r2
}
  80fd94:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80fd98:	00bfffc4 	movi	r2,-1
  80fd9c:	00000c06 	br	80fdd0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80fda0:	d0a01217 	ldw	r2,-32696(gp)
  80fda4:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  80fda8:	d0e01217 	ldw	r3,-32696(gp)
  80fdac:	e0bffa17 	ldw	r2,-24(fp)
  80fdb0:	1885883a 	add	r2,r3,r2
  80fdb4:	d0a01215 	stw	r2,-32696(gp)
  80fdb8:	e0bfff17 	ldw	r2,-4(fp)
  80fdbc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  80fdc0:	e0bffb17 	ldw	r2,-20(fp)
  80fdc4:	1001703a 	wrctl	status,r2
}
  80fdc8:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80fdcc:	e0bffe17 	ldw	r2,-8(fp)
} 
  80fdd0:	e037883a 	mov	sp,fp
  80fdd4:	df000017 	ldw	fp,0(sp)
  80fdd8:	dec00104 	addi	sp,sp,4
  80fddc:	f800283a 	ret

0080fde0 <alt_get_errno>:
{
  80fde0:	defffe04 	addi	sp,sp,-8
  80fde4:	dfc00115 	stw	ra,4(sp)
  80fde8:	df000015 	stw	fp,0(sp)
  80fdec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fdf0:	d0a01117 	ldw	r2,-32700(gp)
  80fdf4:	10000326 	beq	r2,zero,80fe04 <alt_get_errno+0x24>
  80fdf8:	d0a01117 	ldw	r2,-32700(gp)
  80fdfc:	103ee83a 	callr	r2
  80fe00:	00000106 	br	80fe08 <alt_get_errno+0x28>
  80fe04:	d0a71804 	addi	r2,gp,-25504
}
  80fe08:	e037883a 	mov	sp,fp
  80fe0c:	dfc00117 	ldw	ra,4(sp)
  80fe10:	df000017 	ldw	fp,0(sp)
  80fe14:	dec00204 	addi	sp,sp,8
  80fe18:	f800283a 	ret

0080fe1c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  80fe1c:	defffc04 	addi	sp,sp,-16
  80fe20:	dfc00315 	stw	ra,12(sp)
  80fe24:	df000215 	stw	fp,8(sp)
  80fe28:	df000204 	addi	fp,sp,8
  80fe2c:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80fe30:	d0a71e17 	ldw	r2,-25480(gp)
  clock_t ticks = alt_nticks(); 
  80fe34:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
  80fe38:	d0a71d17 	ldw	r2,-25484(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80fe3c:	1000061e 	bne	r2,zero,80fe58 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  80fe40:	080fde00 	call	80fde0 <alt_get_errno>
  80fe44:	1007883a 	mov	r3,r2
  80fe48:	00801604 	movi	r2,88
  80fe4c:	18800015 	stw	r2,0(r3)
    return 0;
  80fe50:	0005883a 	mov	r2,zero
  80fe54:	00000a06 	br	80fe80 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  80fe58:	e0bffe17 	ldw	r2,-8(fp)
  80fe5c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  80fe60:	e0bffe17 	ldw	r2,-8(fp)
  80fe64:	e0ffff17 	ldw	r3,-4(fp)
  80fe68:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  80fe6c:	e0bffe17 	ldw	r2,-8(fp)
  80fe70:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  80fe74:	e0bffe17 	ldw	r2,-8(fp)
  80fe78:	10000315 	stw	zero,12(r2)

  return ticks;
  80fe7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fe80:	e037883a 	mov	sp,fp
  80fe84:	dfc00117 	ldw	ra,4(sp)
  80fe88:	df000017 	ldw	fp,0(sp)
  80fe8c:	dec00204 	addi	sp,sp,8
  80fe90:	f800283a 	ret

0080fe94 <alt_get_errno>:
{
  80fe94:	defffe04 	addi	sp,sp,-8
  80fe98:	dfc00115 	stw	ra,4(sp)
  80fe9c:	df000015 	stw	fp,0(sp)
  80fea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fea4:	d0a01117 	ldw	r2,-32700(gp)
  80fea8:	10000326 	beq	r2,zero,80feb8 <alt_get_errno+0x24>
  80feac:	d0a01117 	ldw	r2,-32700(gp)
  80feb0:	103ee83a 	callr	r2
  80feb4:	00000106 	br	80febc <alt_get_errno+0x28>
  80feb8:	d0a71804 	addi	r2,gp,-25504
}
  80febc:	e037883a 	mov	sp,fp
  80fec0:	dfc00117 	ldw	ra,4(sp)
  80fec4:	df000017 	ldw	fp,0(sp)
  80fec8:	dec00204 	addi	sp,sp,8
  80fecc:	f800283a 	ret

0080fed0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fed0:	defff904 	addi	sp,sp,-28
  80fed4:	dfc00615 	stw	ra,24(sp)
  80fed8:	df000515 	stw	fp,20(sp)
  80fedc:	df000504 	addi	fp,sp,20
  80fee0:	e13ffd15 	stw	r4,-12(fp)
  80fee4:	e17ffc15 	stw	r5,-16(fp)
  80fee8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80feec:	e0bffd17 	ldw	r2,-12(fp)
  80fef0:	10000916 	blt	r2,zero,80ff18 <write+0x48>
  80fef4:	e0fffd17 	ldw	r3,-12(fp)
  80fef8:	1805883a 	mov	r2,r3
  80fefc:	1085883a 	add	r2,r2,r2
  80ff00:	10c5883a 	add	r2,r2,r3
  80ff04:	100490ba 	slli	r2,r2,2
  80ff08:	00c02074 	movhi	r3,129
  80ff0c:	18cc8304 	addi	r3,r3,12812
  80ff10:	10c5883a 	add	r2,r2,r3
  80ff14:	00000106 	br	80ff1c <write+0x4c>
  80ff18:	0005883a 	mov	r2,zero
  80ff1c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80ff20:	e0bfff17 	ldw	r2,-4(fp)
  80ff24:	10002126 	beq	r2,zero,80ffac <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ff28:	e0bfff17 	ldw	r2,-4(fp)
  80ff2c:	10800217 	ldw	r2,8(r2)
  80ff30:	108000cc 	andi	r2,r2,3
  80ff34:	10001826 	beq	r2,zero,80ff98 <write+0xc8>
  80ff38:	e0bfff17 	ldw	r2,-4(fp)
  80ff3c:	10800017 	ldw	r2,0(r2)
  80ff40:	10800617 	ldw	r2,24(r2)
  80ff44:	10001426 	beq	r2,zero,80ff98 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ff48:	e0bfff17 	ldw	r2,-4(fp)
  80ff4c:	10800017 	ldw	r2,0(r2)
  80ff50:	10800617 	ldw	r2,24(r2)
  80ff54:	e0fffb17 	ldw	r3,-20(fp)
  80ff58:	180d883a 	mov	r6,r3
  80ff5c:	e17ffc17 	ldw	r5,-16(fp)
  80ff60:	e13fff17 	ldw	r4,-4(fp)
  80ff64:	103ee83a 	callr	r2
  80ff68:	e0bffe15 	stw	r2,-8(fp)
  80ff6c:	e0bffe17 	ldw	r2,-8(fp)
  80ff70:	1000070e 	bge	r2,zero,80ff90 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  80ff74:	080fe940 	call	80fe94 <alt_get_errno>
  80ff78:	1007883a 	mov	r3,r2
  80ff7c:	e0bffe17 	ldw	r2,-8(fp)
  80ff80:	0085c83a 	sub	r2,zero,r2
  80ff84:	18800015 	stw	r2,0(r3)
        return -1;
  80ff88:	00bfffc4 	movi	r2,-1
  80ff8c:	00000c06 	br	80ffc0 <write+0xf0>
      }
      return rval;
  80ff90:	e0bffe17 	ldw	r2,-8(fp)
  80ff94:	00000a06 	br	80ffc0 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ff98:	080fe940 	call	80fe94 <alt_get_errno>
  80ff9c:	1007883a 	mov	r3,r2
  80ffa0:	00800344 	movi	r2,13
  80ffa4:	18800015 	stw	r2,0(r3)
  80ffa8:	00000406 	br	80ffbc <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ffac:	080fe940 	call	80fe94 <alt_get_errno>
  80ffb0:	1007883a 	mov	r3,r2
  80ffb4:	00801444 	movi	r2,81
  80ffb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ffbc:	00bfffc4 	movi	r2,-1
}
  80ffc0:	e037883a 	mov	sp,fp
  80ffc4:	dfc00117 	ldw	ra,4(sp)
  80ffc8:	df000017 	ldw	fp,0(sp)
  80ffcc:	dec00204 	addi	sp,sp,8
  80ffd0:	f800283a 	ret

0080ffd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ffd4:	defffd04 	addi	sp,sp,-12
  80ffd8:	dfc00215 	stw	ra,8(sp)
  80ffdc:	df000115 	stw	fp,4(sp)
  80ffe0:	df000104 	addi	fp,sp,4
  80ffe4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ffe8:	d1600e04 	addi	r5,gp,-32712
  80ffec:	e13fff17 	ldw	r4,-4(fp)
  80fff0:	0810dd80 	call	810dd8 <alt_dev_llist_insert>
}
  80fff4:	e037883a 	mov	sp,fp
  80fff8:	dfc00117 	ldw	ra,4(sp)
  80fffc:	df000017 	ldw	fp,0(sp)
  810000:	dec00204 	addi	sp,sp,8
  810004:	f800283a 	ret

00810008 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810008:	defffd04 	addi	sp,sp,-12
  81000c:	dfc00215 	stw	ra,8(sp)
  810010:	df000115 	stw	fp,4(sp)
  810014:	df000104 	addi	fp,sp,4
  810018:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  81001c:	08117880 	call	811788 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810020:	00800044 	movi	r2,1
  810024:	1001703a 	wrctl	status,r2
}
  810028:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  81002c:	0001883a 	nop
  810030:	e037883a 	mov	sp,fp
  810034:	dfc00117 	ldw	ra,4(sp)
  810038:	df000017 	ldw	fp,0(sp)
  81003c:	dec00204 	addi	sp,sp,8
  810040:	f800283a 	ret

00810044 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810044:	defffe04 	addi	sp,sp,-8
  810048:	dfc00115 	stw	ra,4(sp)
  81004c:	df000015 	stw	fp,0(sp)
  810050:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  810054:	01c0fa04 	movi	r7,1000
  810058:	01800044 	movi	r6,1
  81005c:	000b883a 	mov	r5,zero
  810060:	01004034 	movhi	r4,256
  810064:	21040004 	addi	r4,r4,4096
  810068:	0810b980 	call	810b98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  81006c:	01800404 	movi	r6,16
  810070:	000b883a 	mov	r5,zero
  810074:	01002074 	movhi	r4,129
  810078:	210ced04 	addi	r4,r4,13236
  81007c:	081020c0 	call	81020c <altera_avalon_jtag_uart_init>
  810080:	01002074 	movhi	r4,129
  810084:	210ce304 	addi	r4,r4,13196
  810088:	080ffd40 	call	80ffd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  81008c:	0001883a 	nop
}
  810090:	0001883a 	nop
  810094:	e037883a 	mov	sp,fp
  810098:	dfc00117 	ldw	ra,4(sp)
  81009c:	df000017 	ldw	fp,0(sp)
  8100a0:	dec00204 	addi	sp,sp,8
  8100a4:	f800283a 	ret

008100a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8100a8:	defffa04 	addi	sp,sp,-24
  8100ac:	dfc00515 	stw	ra,20(sp)
  8100b0:	df000415 	stw	fp,16(sp)
  8100b4:	df000404 	addi	fp,sp,16
  8100b8:	e13ffe15 	stw	r4,-8(fp)
  8100bc:	e17ffd15 	stw	r5,-12(fp)
  8100c0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8100c4:	e0bffe17 	ldw	r2,-8(fp)
  8100c8:	10800017 	ldw	r2,0(r2)
  8100cc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8100d0:	e0bfff17 	ldw	r2,-4(fp)
  8100d4:	10c00a04 	addi	r3,r2,40
  8100d8:	e0bffe17 	ldw	r2,-8(fp)
  8100dc:	10800217 	ldw	r2,8(r2)
  8100e0:	100f883a 	mov	r7,r2
  8100e4:	e1bffc17 	ldw	r6,-16(fp)
  8100e8:	e17ffd17 	ldw	r5,-12(fp)
  8100ec:	1809883a 	mov	r4,r3
  8100f0:	08106d40 	call	8106d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8100f4:	e037883a 	mov	sp,fp
  8100f8:	dfc00117 	ldw	ra,4(sp)
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00204 	addi	sp,sp,8
  810104:	f800283a 	ret

00810108 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810108:	defffa04 	addi	sp,sp,-24
  81010c:	dfc00515 	stw	ra,20(sp)
  810110:	df000415 	stw	fp,16(sp)
  810114:	df000404 	addi	fp,sp,16
  810118:	e13ffe15 	stw	r4,-8(fp)
  81011c:	e17ffd15 	stw	r5,-12(fp)
  810120:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810124:	e0bffe17 	ldw	r2,-8(fp)
  810128:	10800017 	ldw	r2,0(r2)
  81012c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810130:	e0bfff17 	ldw	r2,-4(fp)
  810134:	10c00a04 	addi	r3,r2,40
  810138:	e0bffe17 	ldw	r2,-8(fp)
  81013c:	10800217 	ldw	r2,8(r2)
  810140:	100f883a 	mov	r7,r2
  810144:	e1bffc17 	ldw	r6,-16(fp)
  810148:	e17ffd17 	ldw	r5,-12(fp)
  81014c:	1809883a 	mov	r4,r3
  810150:	08108f40 	call	8108f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810154:	e037883a 	mov	sp,fp
  810158:	dfc00117 	ldw	ra,4(sp)
  81015c:	df000017 	ldw	fp,0(sp)
  810160:	dec00204 	addi	sp,sp,8
  810164:	f800283a 	ret

00810168 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810168:	defffc04 	addi	sp,sp,-16
  81016c:	dfc00315 	stw	ra,12(sp)
  810170:	df000215 	stw	fp,8(sp)
  810174:	df000204 	addi	fp,sp,8
  810178:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81017c:	e0bffe17 	ldw	r2,-8(fp)
  810180:	10800017 	ldw	r2,0(r2)
  810184:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810188:	e0bfff17 	ldw	r2,-4(fp)
  81018c:	10c00a04 	addi	r3,r2,40
  810190:	e0bffe17 	ldw	r2,-8(fp)
  810194:	10800217 	ldw	r2,8(r2)
  810198:	100b883a 	mov	r5,r2
  81019c:	1809883a 	mov	r4,r3
  8101a0:	08105780 	call	810578 <altera_avalon_jtag_uart_close>
}
  8101a4:	e037883a 	mov	sp,fp
  8101a8:	dfc00117 	ldw	ra,4(sp)
  8101ac:	df000017 	ldw	fp,0(sp)
  8101b0:	dec00204 	addi	sp,sp,8
  8101b4:	f800283a 	ret

008101b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8101b8:	defffa04 	addi	sp,sp,-24
  8101bc:	dfc00515 	stw	ra,20(sp)
  8101c0:	df000415 	stw	fp,16(sp)
  8101c4:	df000404 	addi	fp,sp,16
  8101c8:	e13ffe15 	stw	r4,-8(fp)
  8101cc:	e17ffd15 	stw	r5,-12(fp)
  8101d0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8101d4:	e0bffe17 	ldw	r2,-8(fp)
  8101d8:	10800017 	ldw	r2,0(r2)
  8101dc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8101e0:	e0bfff17 	ldw	r2,-4(fp)
  8101e4:	10800a04 	addi	r2,r2,40
  8101e8:	e1bffc17 	ldw	r6,-16(fp)
  8101ec:	e17ffd17 	ldw	r5,-12(fp)
  8101f0:	1009883a 	mov	r4,r2
  8101f4:	08105e00 	call	8105e0 <altera_avalon_jtag_uart_ioctl>
}
  8101f8:	e037883a 	mov	sp,fp
  8101fc:	dfc00117 	ldw	ra,4(sp)
  810200:	df000017 	ldw	fp,0(sp)
  810204:	dec00204 	addi	sp,sp,8
  810208:	f800283a 	ret

0081020c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81020c:	defffa04 	addi	sp,sp,-24
  810210:	dfc00515 	stw	ra,20(sp)
  810214:	df000415 	stw	fp,16(sp)
  810218:	df000404 	addi	fp,sp,16
  81021c:	e13fff15 	stw	r4,-4(fp)
  810220:	e17ffe15 	stw	r5,-8(fp)
  810224:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810228:	e0bfff17 	ldw	r2,-4(fp)
  81022c:	00c00044 	movi	r3,1
  810230:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810234:	e0bfff17 	ldw	r2,-4(fp)
  810238:	10800017 	ldw	r2,0(r2)
  81023c:	10800104 	addi	r2,r2,4
  810240:	1007883a 	mov	r3,r2
  810244:	e0bfff17 	ldw	r2,-4(fp)
  810248:	10800817 	ldw	r2,32(r2)
  81024c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810250:	e0bffe17 	ldw	r2,-8(fp)
  810254:	e0fffd17 	ldw	r3,-12(fp)
  810258:	d8000015 	stw	zero,0(sp)
  81025c:	e1ffff17 	ldw	r7,-4(fp)
  810260:	01802074 	movhi	r6,129
  810264:	3180b304 	addi	r6,r6,716
  810268:	180b883a 	mov	r5,r3
  81026c:	1009883a 	mov	r4,r2
  810270:	0810f7c0 	call	810f7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810274:	e0bfff17 	ldw	r2,-4(fp)
  810278:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81027c:	e0bfff17 	ldw	r2,-4(fp)
  810280:	10800204 	addi	r2,r2,8
  810284:	d0e71d17 	ldw	r3,-25484(gp)
  810288:	e1ffff17 	ldw	r7,-4(fp)
  81028c:	01802074 	movhi	r6,129
  810290:	31813604 	addi	r6,r6,1240
  810294:	180b883a 	mov	r5,r3
  810298:	1009883a 	mov	r4,r2
  81029c:	0810c1c0 	call	810c1c <alt_alarm_start>
  8102a0:	1000040e 	bge	r2,zero,8102b4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8102a4:	e0ffff17 	ldw	r3,-4(fp)
  8102a8:	00a00034 	movhi	r2,32768
  8102ac:	10bfffc4 	addi	r2,r2,-1
  8102b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8102b4:	0001883a 	nop
  8102b8:	e037883a 	mov	sp,fp
  8102bc:	dfc00117 	ldw	ra,4(sp)
  8102c0:	df000017 	ldw	fp,0(sp)
  8102c4:	dec00204 	addi	sp,sp,8
  8102c8:	f800283a 	ret

008102cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8102cc:	defff804 	addi	sp,sp,-32
  8102d0:	df000715 	stw	fp,28(sp)
  8102d4:	df000704 	addi	fp,sp,28
  8102d8:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8102dc:	e0bff917 	ldw	r2,-28(fp)
  8102e0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  8102e4:	e0bffd17 	ldw	r2,-12(fp)
  8102e8:	10800017 	ldw	r2,0(r2)
  8102ec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8102f0:	e0bffc17 	ldw	r2,-16(fp)
  8102f4:	10800104 	addi	r2,r2,4
  8102f8:	10800037 	ldwio	r2,0(r2)
  8102fc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810300:	e0bffb17 	ldw	r2,-20(fp)
  810304:	1080c00c 	andi	r2,r2,768
  810308:	10006d26 	beq	r2,zero,8104c0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81030c:	e0bffb17 	ldw	r2,-20(fp)
  810310:	1080400c 	andi	r2,r2,256
  810314:	10003526 	beq	r2,zero,8103ec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810318:	00800074 	movhi	r2,1
  81031c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810320:	e0bffd17 	ldw	r2,-12(fp)
  810324:	10800a17 	ldw	r2,40(r2)
  810328:	10800044 	addi	r2,r2,1
  81032c:	1081ffcc 	andi	r2,r2,2047
  810330:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  810334:	e0bffd17 	ldw	r2,-12(fp)
  810338:	10800b17 	ldw	r2,44(r2)
  81033c:	e0fffa17 	ldw	r3,-24(fp)
  810340:	18801526 	beq	r3,r2,810398 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810344:	e0bffc17 	ldw	r2,-16(fp)
  810348:	10800037 	ldwio	r2,0(r2)
  81034c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810350:	e0bfff17 	ldw	r2,-4(fp)
  810354:	10a0000c 	andi	r2,r2,32768
  810358:	10001126 	beq	r2,zero,8103a0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81035c:	e0bffd17 	ldw	r2,-12(fp)
  810360:	10800a17 	ldw	r2,40(r2)
  810364:	e0ffff17 	ldw	r3,-4(fp)
  810368:	1809883a 	mov	r4,r3
  81036c:	e0fffd17 	ldw	r3,-12(fp)
  810370:	1885883a 	add	r2,r3,r2
  810374:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810378:	e0bffd17 	ldw	r2,-12(fp)
  81037c:	10800a17 	ldw	r2,40(r2)
  810380:	10800044 	addi	r2,r2,1
  810384:	10c1ffcc 	andi	r3,r2,2047
  810388:	e0bffd17 	ldw	r2,-12(fp)
  81038c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810390:	0001883a 	nop
      {
  810394:	003fe206 	br	810320 <altera_avalon_jtag_uart_irq+0x54>
          break;
  810398:	0001883a 	nop
  81039c:	00000106 	br	8103a4 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  8103a0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8103a4:	e0bfff17 	ldw	r2,-4(fp)
  8103a8:	10bfffec 	andhi	r2,r2,65535
  8103ac:	10000f26 	beq	r2,zero,8103ec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8103b0:	e0bffd17 	ldw	r2,-12(fp)
  8103b4:	10c00817 	ldw	r3,32(r2)
  8103b8:	00bfff84 	movi	r2,-2
  8103bc:	1886703a 	and	r3,r3,r2
  8103c0:	e0bffd17 	ldw	r2,-12(fp)
  8103c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8103c8:	e0bffc17 	ldw	r2,-16(fp)
  8103cc:	10800104 	addi	r2,r2,4
  8103d0:	1007883a 	mov	r3,r2
  8103d4:	e0bffd17 	ldw	r2,-12(fp)
  8103d8:	10800817 	ldw	r2,32(r2)
  8103dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8103e0:	e0bffc17 	ldw	r2,-16(fp)
  8103e4:	10800104 	addi	r2,r2,4
  8103e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8103ec:	e0bffb17 	ldw	r2,-20(fp)
  8103f0:	1080800c 	andi	r2,r2,512
  8103f4:	103fbe26 	beq	r2,zero,8102f0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8103f8:	e0bffb17 	ldw	r2,-20(fp)
  8103fc:	1004d43a 	srli	r2,r2,16
  810400:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810404:	00001406 	br	810458 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810408:	e0bffc17 	ldw	r2,-16(fp)
  81040c:	e0fffd17 	ldw	r3,-12(fp)
  810410:	18c00d17 	ldw	r3,52(r3)
  810414:	e13ffd17 	ldw	r4,-12(fp)
  810418:	20c7883a 	add	r3,r4,r3
  81041c:	18c20e03 	ldbu	r3,2104(r3)
  810420:	18c03fcc 	andi	r3,r3,255
  810424:	18c0201c 	xori	r3,r3,128
  810428:	18ffe004 	addi	r3,r3,-128
  81042c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810430:	e0bffd17 	ldw	r2,-12(fp)
  810434:	10800d17 	ldw	r2,52(r2)
  810438:	10800044 	addi	r2,r2,1
  81043c:	10c1ffcc 	andi	r3,r2,2047
  810440:	e0bffd17 	ldw	r2,-12(fp)
  810444:	10c00d15 	stw	r3,52(r2)
  810448:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  81044c:	e0bffe17 	ldw	r2,-8(fp)
  810450:	10bfffc4 	addi	r2,r2,-1
  810454:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  810458:	e0bffe17 	ldw	r2,-8(fp)
  81045c:	10000526 	beq	r2,zero,810474 <altera_avalon_jtag_uart_irq+0x1a8>
  810460:	e0bffd17 	ldw	r2,-12(fp)
  810464:	10c00d17 	ldw	r3,52(r2)
  810468:	e0bffd17 	ldw	r2,-12(fp)
  81046c:	10800c17 	ldw	r2,48(r2)
  810470:	18bfe51e 	bne	r3,r2,810408 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  810474:	e0bffe17 	ldw	r2,-8(fp)
  810478:	103f9d26 	beq	r2,zero,8102f0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81047c:	e0bffd17 	ldw	r2,-12(fp)
  810480:	10c00817 	ldw	r3,32(r2)
  810484:	00bfff44 	movi	r2,-3
  810488:	1886703a 	and	r3,r3,r2
  81048c:	e0bffd17 	ldw	r2,-12(fp)
  810490:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810494:	e0bffd17 	ldw	r2,-12(fp)
  810498:	10800017 	ldw	r2,0(r2)
  81049c:	10800104 	addi	r2,r2,4
  8104a0:	1007883a 	mov	r3,r2
  8104a4:	e0bffd17 	ldw	r2,-12(fp)
  8104a8:	10800817 	ldw	r2,32(r2)
  8104ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8104b0:	e0bffc17 	ldw	r2,-16(fp)
  8104b4:	10800104 	addi	r2,r2,4
  8104b8:	10800037 	ldwio	r2,0(r2)
  {
  8104bc:	003f8c06 	br	8102f0 <altera_avalon_jtag_uart_irq+0x24>
      break;
  8104c0:	0001883a 	nop
      }
    }
  }
}
  8104c4:	0001883a 	nop
  8104c8:	e037883a 	mov	sp,fp
  8104cc:	df000017 	ldw	fp,0(sp)
  8104d0:	dec00104 	addi	sp,sp,4
  8104d4:	f800283a 	ret

008104d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8104d8:	defffc04 	addi	sp,sp,-16
  8104dc:	df000315 	stw	fp,12(sp)
  8104e0:	df000304 	addi	fp,sp,12
  8104e4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8104e8:	e0bffd17 	ldw	r2,-12(fp)
  8104ec:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8104f0:	e0bfff17 	ldw	r2,-4(fp)
  8104f4:	10800017 	ldw	r2,0(r2)
  8104f8:	10800104 	addi	r2,r2,4
  8104fc:	10800037 	ldwio	r2,0(r2)
  810500:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810504:	e0bffe17 	ldw	r2,-8(fp)
  810508:	1081000c 	andi	r2,r2,1024
  81050c:	10000b26 	beq	r2,zero,81053c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810510:	e0bfff17 	ldw	r2,-4(fp)
  810514:	10800017 	ldw	r2,0(r2)
  810518:	10800104 	addi	r2,r2,4
  81051c:	1007883a 	mov	r3,r2
  810520:	e0bfff17 	ldw	r2,-4(fp)
  810524:	10800817 	ldw	r2,32(r2)
  810528:	10810014 	ori	r2,r2,1024
  81052c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810530:	e0bfff17 	ldw	r2,-4(fp)
  810534:	10000915 	stw	zero,36(r2)
  810538:	00000a06 	br	810564 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81053c:	e0bfff17 	ldw	r2,-4(fp)
  810540:	10c00917 	ldw	r3,36(r2)
  810544:	00a00034 	movhi	r2,32768
  810548:	10bfff04 	addi	r2,r2,-4
  81054c:	10c00536 	bltu	r2,r3,810564 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810550:	e0bfff17 	ldw	r2,-4(fp)
  810554:	10800917 	ldw	r2,36(r2)
  810558:	10c00044 	addi	r3,r2,1
  81055c:	e0bfff17 	ldw	r2,-4(fp)
  810560:	10c00915 	stw	r3,36(r2)
  810564:	d0a71d17 	ldw	r2,-25484(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810568:	e037883a 	mov	sp,fp
  81056c:	df000017 	ldw	fp,0(sp)
  810570:	dec00104 	addi	sp,sp,4
  810574:	f800283a 	ret

00810578 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810578:	defffd04 	addi	sp,sp,-12
  81057c:	df000215 	stw	fp,8(sp)
  810580:	df000204 	addi	fp,sp,8
  810584:	e13fff15 	stw	r4,-4(fp)
  810588:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81058c:	00000506 	br	8105a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810590:	e0bffe17 	ldw	r2,-8(fp)
  810594:	1090000c 	andi	r2,r2,16384
  810598:	10000226 	beq	r2,zero,8105a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81059c:	00bffd44 	movi	r2,-11
  8105a0:	00000b06 	br	8105d0 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8105a4:	e0bfff17 	ldw	r2,-4(fp)
  8105a8:	10c00d17 	ldw	r3,52(r2)
  8105ac:	e0bfff17 	ldw	r2,-4(fp)
  8105b0:	10800c17 	ldw	r2,48(r2)
  8105b4:	18800526 	beq	r3,r2,8105cc <altera_avalon_jtag_uart_close+0x54>
  8105b8:	e0bfff17 	ldw	r2,-4(fp)
  8105bc:	10c00917 	ldw	r3,36(r2)
  8105c0:	e0bfff17 	ldw	r2,-4(fp)
  8105c4:	10800117 	ldw	r2,4(r2)
  8105c8:	18bff136 	bltu	r3,r2,810590 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  8105cc:	0005883a 	mov	r2,zero
}
  8105d0:	e037883a 	mov	sp,fp
  8105d4:	df000017 	ldw	fp,0(sp)
  8105d8:	dec00104 	addi	sp,sp,4
  8105dc:	f800283a 	ret

008105e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8105e0:	defffa04 	addi	sp,sp,-24
  8105e4:	df000515 	stw	fp,20(sp)
  8105e8:	df000504 	addi	fp,sp,20
  8105ec:	e13ffd15 	stw	r4,-12(fp)
  8105f0:	e17ffc15 	stw	r5,-16(fp)
  8105f4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  8105f8:	00bff9c4 	movi	r2,-25
  8105fc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  810600:	e0bffc17 	ldw	r2,-16(fp)
  810604:	109a8060 	cmpeqi	r2,r2,27137
  810608:	1000041e 	bne	r2,zero,81061c <altera_avalon_jtag_uart_ioctl+0x3c>
  81060c:	e0bffc17 	ldw	r2,-16(fp)
  810610:	109a80a0 	cmpeqi	r2,r2,27138
  810614:	1000181e 	bne	r2,zero,810678 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  810618:	00002906 	br	8106c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  81061c:	e0bffd17 	ldw	r2,-12(fp)
  810620:	10c00117 	ldw	r3,4(r2)
  810624:	00a00034 	movhi	r2,32768
  810628:	10bfffc4 	addi	r2,r2,-1
  81062c:	18802126 	beq	r3,r2,8106b4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  810630:	e0bffb17 	ldw	r2,-20(fp)
  810634:	10800017 	ldw	r2,0(r2)
  810638:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81063c:	e0bffe17 	ldw	r2,-8(fp)
  810640:	10800090 	cmplti	r2,r2,2
  810644:	1000061e 	bne	r2,zero,810660 <altera_avalon_jtag_uart_ioctl+0x80>
  810648:	e0fffe17 	ldw	r3,-8(fp)
  81064c:	00a00034 	movhi	r2,32768
  810650:	10bfffc4 	addi	r2,r2,-1
  810654:	18800226 	beq	r3,r2,810660 <altera_avalon_jtag_uart_ioctl+0x80>
  810658:	e0bffe17 	ldw	r2,-8(fp)
  81065c:	00000206 	br	810668 <altera_avalon_jtag_uart_ioctl+0x88>
  810660:	00a00034 	movhi	r2,32768
  810664:	10bfff84 	addi	r2,r2,-2
  810668:	e0fffd17 	ldw	r3,-12(fp)
  81066c:	18800115 	stw	r2,4(r3)
      rc = 0;
  810670:	e03fff15 	stw	zero,-4(fp)
    break;
  810674:	00000f06 	br	8106b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  810678:	e0bffd17 	ldw	r2,-12(fp)
  81067c:	10c00117 	ldw	r3,4(r2)
  810680:	00a00034 	movhi	r2,32768
  810684:	10bfffc4 	addi	r2,r2,-1
  810688:	18800c26 	beq	r3,r2,8106bc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81068c:	e0bffd17 	ldw	r2,-12(fp)
  810690:	10c00917 	ldw	r3,36(r2)
  810694:	e0bffd17 	ldw	r2,-12(fp)
  810698:	10800117 	ldw	r2,4(r2)
  81069c:	1885803a 	cmpltu	r2,r3,r2
  8106a0:	10c03fcc 	andi	r3,r2,255
  8106a4:	e0bffb17 	ldw	r2,-20(fp)
  8106a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8106ac:	e03fff15 	stw	zero,-4(fp)
    break;
  8106b0:	00000206 	br	8106bc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  8106b4:	0001883a 	nop
  8106b8:	00000106 	br	8106c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  8106bc:	0001883a 	nop
  }

  return rc;
  8106c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8106c4:	e037883a 	mov	sp,fp
  8106c8:	df000017 	ldw	fp,0(sp)
  8106cc:	dec00104 	addi	sp,sp,4
  8106d0:	f800283a 	ret

008106d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8106d4:	defff304 	addi	sp,sp,-52
  8106d8:	dfc00c15 	stw	ra,48(sp)
  8106dc:	df000b15 	stw	fp,44(sp)
  8106e0:	df000b04 	addi	fp,sp,44
  8106e4:	e13ff815 	stw	r4,-32(fp)
  8106e8:	e17ff715 	stw	r5,-36(fp)
  8106ec:	e1bff615 	stw	r6,-40(fp)
  8106f0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  8106f4:	e0bff717 	ldw	r2,-36(fp)
  8106f8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8106fc:	00004706 	br	81081c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810700:	e0bff817 	ldw	r2,-32(fp)
  810704:	10800a17 	ldw	r2,40(r2)
  810708:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  81070c:	e0bff817 	ldw	r2,-32(fp)
  810710:	10800b17 	ldw	r2,44(r2)
  810714:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  810718:	e0fffd17 	ldw	r3,-12(fp)
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	18800536 	bltu	r3,r2,810738 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810724:	e0fffd17 	ldw	r3,-12(fp)
  810728:	e0bffc17 	ldw	r2,-16(fp)
  81072c:	1885c83a 	sub	r2,r3,r2
  810730:	e0bffe15 	stw	r2,-8(fp)
  810734:	00000406 	br	810748 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810738:	00c20004 	movi	r3,2048
  81073c:	e0bffc17 	ldw	r2,-16(fp)
  810740:	1885c83a 	sub	r2,r3,r2
  810744:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  810748:	e0bffe17 	ldw	r2,-8(fp)
  81074c:	10001e26 	beq	r2,zero,8107c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810750:	e0fff617 	ldw	r3,-40(fp)
  810754:	e0bffe17 	ldw	r2,-8(fp)
  810758:	1880022e 	bgeu	r3,r2,810764 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  81075c:	e0bff617 	ldw	r2,-40(fp)
  810760:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810764:	e0bff817 	ldw	r2,-32(fp)
  810768:	10c00e04 	addi	r3,r2,56
  81076c:	e0bffc17 	ldw	r2,-16(fp)
  810770:	1885883a 	add	r2,r3,r2
  810774:	e1bffe17 	ldw	r6,-8(fp)
  810778:	100b883a 	mov	r5,r2
  81077c:	e13fff17 	ldw	r4,-4(fp)
  810780:	0807e280 	call	807e28 <memcpy>
      ptr   += n;
  810784:	e0ffff17 	ldw	r3,-4(fp)
  810788:	e0bffe17 	ldw	r2,-8(fp)
  81078c:	1885883a 	add	r2,r3,r2
  810790:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  810794:	e0fff617 	ldw	r3,-40(fp)
  810798:	e0bffe17 	ldw	r2,-8(fp)
  81079c:	1885c83a 	sub	r2,r3,r2
  8107a0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8107a4:	e0fffc17 	ldw	r3,-16(fp)
  8107a8:	e0bffe17 	ldw	r2,-8(fp)
  8107ac:	1885883a 	add	r2,r3,r2
  8107b0:	10c1ffcc 	andi	r3,r2,2047
  8107b4:	e0bff817 	ldw	r2,-32(fp)
  8107b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8107bc:	e0bff617 	ldw	r2,-40(fp)
  8107c0:	00bfcf16 	blt	zero,r2,810700 <altera_avalon_jtag_uart_read+0x2c>
  8107c4:	00000106 	br	8107cc <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  8107c8:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  8107cc:	e0ffff17 	ldw	r3,-4(fp)
  8107d0:	e0bff717 	ldw	r2,-36(fp)
  8107d4:	1880141e 	bne	r3,r2,810828 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8107d8:	e0bff517 	ldw	r2,-44(fp)
  8107dc:	1090000c 	andi	r2,r2,16384
  8107e0:	1000131e 	bne	r2,zero,810830 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8107e4:	0001883a 	nop
  8107e8:	e0bff817 	ldw	r2,-32(fp)
  8107ec:	10800a17 	ldw	r2,40(r2)
  8107f0:	e0fffd17 	ldw	r3,-12(fp)
  8107f4:	1880051e 	bne	r3,r2,81080c <altera_avalon_jtag_uart_read+0x138>
  8107f8:	e0bff817 	ldw	r2,-32(fp)
  8107fc:	10c00917 	ldw	r3,36(r2)
  810800:	e0bff817 	ldw	r2,-32(fp)
  810804:	10800117 	ldw	r2,4(r2)
  810808:	18bff736 	bltu	r3,r2,8107e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81080c:	e0bff817 	ldw	r2,-32(fp)
  810810:	10800a17 	ldw	r2,40(r2)
  810814:	e0fffd17 	ldw	r3,-12(fp)
  810818:	18800726 	beq	r3,r2,810838 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  81081c:	e0bff617 	ldw	r2,-40(fp)
  810820:	00bfb716 	blt	zero,r2,810700 <altera_avalon_jtag_uart_read+0x2c>
  810824:	00000506 	br	81083c <altera_avalon_jtag_uart_read+0x168>
      break;
  810828:	0001883a 	nop
  81082c:	00000306 	br	81083c <altera_avalon_jtag_uart_read+0x168>
      break;
  810830:	0001883a 	nop
  810834:	00000106 	br	81083c <altera_avalon_jtag_uart_read+0x168>
      break;
  810838:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81083c:	e0ffff17 	ldw	r3,-4(fp)
  810840:	e0bff717 	ldw	r2,-36(fp)
  810844:	18801926 	beq	r3,r2,8108ac <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  810848:	0005303a 	rdctl	r2,status
  81084c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810850:	e0fff917 	ldw	r3,-28(fp)
  810854:	00bfff84 	movi	r2,-2
  810858:	1884703a 	and	r2,r3,r2
  81085c:	1001703a 	wrctl	status,r2
  return context;
  810860:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810864:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810868:	e0bff817 	ldw	r2,-32(fp)
  81086c:	10800817 	ldw	r2,32(r2)
  810870:	10c00054 	ori	r3,r2,1
  810874:	e0bff817 	ldw	r2,-32(fp)
  810878:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81087c:	e0bff817 	ldw	r2,-32(fp)
  810880:	10800017 	ldw	r2,0(r2)
  810884:	10800104 	addi	r2,r2,4
  810888:	1007883a 	mov	r3,r2
  81088c:	e0bff817 	ldw	r2,-32(fp)
  810890:	10800817 	ldw	r2,32(r2)
  810894:	18800035 	stwio	r2,0(r3)
  810898:	e0bffb17 	ldw	r2,-20(fp)
  81089c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  8108a0:	e0bffa17 	ldw	r2,-24(fp)
  8108a4:	1001703a 	wrctl	status,r2
}
  8108a8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8108ac:	e0ffff17 	ldw	r3,-4(fp)
  8108b0:	e0bff717 	ldw	r2,-36(fp)
  8108b4:	18800426 	beq	r3,r2,8108c8 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  8108b8:	e0ffff17 	ldw	r3,-4(fp)
  8108bc:	e0bff717 	ldw	r2,-36(fp)
  8108c0:	1885c83a 	sub	r2,r3,r2
  8108c4:	00000606 	br	8108e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8108c8:	e0bff517 	ldw	r2,-44(fp)
  8108cc:	1090000c 	andi	r2,r2,16384
  8108d0:	10000226 	beq	r2,zero,8108dc <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  8108d4:	00bffd44 	movi	r2,-11
  8108d8:	00000106 	br	8108e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8108dc:	00bffec4 	movi	r2,-5
}
  8108e0:	e037883a 	mov	sp,fp
  8108e4:	dfc00117 	ldw	ra,4(sp)
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00204 	addi	sp,sp,8
  8108f0:	f800283a 	ret

008108f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8108f4:	defff304 	addi	sp,sp,-52
  8108f8:	dfc00c15 	stw	ra,48(sp)
  8108fc:	df000b15 	stw	fp,44(sp)
  810900:	df000b04 	addi	fp,sp,44
  810904:	e13ff815 	stw	r4,-32(fp)
  810908:	e17ff715 	stw	r5,-36(fp)
  81090c:	e1bff615 	stw	r6,-40(fp)
  810910:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810914:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810918:	e0bff717 	ldw	r2,-36(fp)
  81091c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810920:	00003706 	br	810a00 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810924:	e0bff817 	ldw	r2,-32(fp)
  810928:	10800c17 	ldw	r2,48(r2)
  81092c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  810930:	e0bff817 	ldw	r2,-32(fp)
  810934:	10800d17 	ldw	r2,52(r2)
  810938:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  81093c:	e0fffc17 	ldw	r3,-16(fp)
  810940:	e0bfff17 	ldw	r2,-4(fp)
  810944:	1880062e 	bgeu	r3,r2,810960 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810948:	e0ffff17 	ldw	r3,-4(fp)
  81094c:	e0bffc17 	ldw	r2,-16(fp)
  810950:	1885c83a 	sub	r2,r3,r2
  810954:	10bfffc4 	addi	r2,r2,-1
  810958:	e0bffe15 	stw	r2,-8(fp)
  81095c:	00000b06 	br	81098c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810960:	e0bfff17 	ldw	r2,-4(fp)
  810964:	10000526 	beq	r2,zero,81097c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810968:	00c20004 	movi	r3,2048
  81096c:	e0bffc17 	ldw	r2,-16(fp)
  810970:	1885c83a 	sub	r2,r3,r2
  810974:	e0bffe15 	stw	r2,-8(fp)
  810978:	00000406 	br	81098c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81097c:	00c1ffc4 	movi	r3,2047
  810980:	e0bffc17 	ldw	r2,-16(fp)
  810984:	1885c83a 	sub	r2,r3,r2
  810988:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  81098c:	e0bffe17 	ldw	r2,-8(fp)
  810990:	10001e26 	beq	r2,zero,810a0c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  810994:	e0fff617 	ldw	r3,-40(fp)
  810998:	e0bffe17 	ldw	r2,-8(fp)
  81099c:	1880022e 	bgeu	r3,r2,8109a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8109a0:	e0bff617 	ldw	r2,-40(fp)
  8109a4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8109a8:	e0bff817 	ldw	r2,-32(fp)
  8109ac:	10c20e04 	addi	r3,r2,2104
  8109b0:	e0bffc17 	ldw	r2,-16(fp)
  8109b4:	1885883a 	add	r2,r3,r2
  8109b8:	e1bffe17 	ldw	r6,-8(fp)
  8109bc:	e17ff717 	ldw	r5,-36(fp)
  8109c0:	1009883a 	mov	r4,r2
  8109c4:	0807e280 	call	807e28 <memcpy>
      ptr   += n;
  8109c8:	e0fff717 	ldw	r3,-36(fp)
  8109cc:	e0bffe17 	ldw	r2,-8(fp)
  8109d0:	1885883a 	add	r2,r3,r2
  8109d4:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  8109d8:	e0fff617 	ldw	r3,-40(fp)
  8109dc:	e0bffe17 	ldw	r2,-8(fp)
  8109e0:	1885c83a 	sub	r2,r3,r2
  8109e4:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8109e8:	e0fffc17 	ldw	r3,-16(fp)
  8109ec:	e0bffe17 	ldw	r2,-8(fp)
  8109f0:	1885883a 	add	r2,r3,r2
  8109f4:	10c1ffcc 	andi	r3,r2,2047
  8109f8:	e0bff817 	ldw	r2,-32(fp)
  8109fc:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  810a00:	e0bff617 	ldw	r2,-40(fp)
  810a04:	00bfc716 	blt	zero,r2,810924 <altera_avalon_jtag_uart_write+0x30>
  810a08:	00000106 	br	810a10 <altera_avalon_jtag_uart_write+0x11c>
        break;
  810a0c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  810a10:	0005303a 	rdctl	r2,status
  810a14:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a18:	e0fff917 	ldw	r3,-28(fp)
  810a1c:	00bfff84 	movi	r2,-2
  810a20:	1884703a 	and	r2,r3,r2
  810a24:	1001703a 	wrctl	status,r2
  return context;
  810a28:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810a2c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810a30:	e0bff817 	ldw	r2,-32(fp)
  810a34:	10800817 	ldw	r2,32(r2)
  810a38:	10c00094 	ori	r3,r2,2
  810a3c:	e0bff817 	ldw	r2,-32(fp)
  810a40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810a44:	e0bff817 	ldw	r2,-32(fp)
  810a48:	10800017 	ldw	r2,0(r2)
  810a4c:	10800104 	addi	r2,r2,4
  810a50:	1007883a 	mov	r3,r2
  810a54:	e0bff817 	ldw	r2,-32(fp)
  810a58:	10800817 	ldw	r2,32(r2)
  810a5c:	18800035 	stwio	r2,0(r3)
  810a60:	e0bffb17 	ldw	r2,-20(fp)
  810a64:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  810a68:	e0bffa17 	ldw	r2,-24(fp)
  810a6c:	1001703a 	wrctl	status,r2
}
  810a70:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810a74:	e0bff617 	ldw	r2,-40(fp)
  810a78:	0080100e 	bge	zero,r2,810abc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  810a7c:	e0bff517 	ldw	r2,-44(fp)
  810a80:	1090000c 	andi	r2,r2,16384
  810a84:	1000101e 	bne	r2,zero,810ac8 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810a88:	0001883a 	nop
  810a8c:	e0bff817 	ldw	r2,-32(fp)
  810a90:	10800d17 	ldw	r2,52(r2)
  810a94:	e0ffff17 	ldw	r3,-4(fp)
  810a98:	1880051e 	bne	r3,r2,810ab0 <altera_avalon_jtag_uart_write+0x1bc>
  810a9c:	e0bff817 	ldw	r2,-32(fp)
  810aa0:	10c00917 	ldw	r3,36(r2)
  810aa4:	e0bff817 	ldw	r2,-32(fp)
  810aa8:	10800117 	ldw	r2,4(r2)
  810aac:	18bff736 	bltu	r3,r2,810a8c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810ab0:	e0bff817 	ldw	r2,-32(fp)
  810ab4:	10800917 	ldw	r2,36(r2)
  810ab8:	1000051e 	bne	r2,zero,810ad0 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  810abc:	e0bff617 	ldw	r2,-40(fp)
  810ac0:	00bfcf16 	blt	zero,r2,810a00 <altera_avalon_jtag_uart_write+0x10c>
  810ac4:	00000306 	br	810ad4 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  810ac8:	0001883a 	nop
  810acc:	00000106 	br	810ad4 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  810ad0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810ad4:	e0fff717 	ldw	r3,-36(fp)
  810ad8:	e0bffd17 	ldw	r2,-12(fp)
  810adc:	18800426 	beq	r3,r2,810af0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  810ae0:	e0fff717 	ldw	r3,-36(fp)
  810ae4:	e0bffd17 	ldw	r2,-12(fp)
  810ae8:	1885c83a 	sub	r2,r3,r2
  810aec:	00000606 	br	810b08 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  810af0:	e0bff517 	ldw	r2,-44(fp)
  810af4:	1090000c 	andi	r2,r2,16384
  810af8:	10000226 	beq	r2,zero,810b04 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  810afc:	00bffd44 	movi	r2,-11
  810b00:	00000106 	br	810b08 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810b04:	00bffec4 	movi	r2,-5
}
  810b08:	e037883a 	mov	sp,fp
  810b0c:	dfc00117 	ldw	ra,4(sp)
  810b10:	df000017 	ldw	fp,0(sp)
  810b14:	dec00204 	addi	sp,sp,8
  810b18:	f800283a 	ret

00810b1c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810b1c:	defffa04 	addi	sp,sp,-24
  810b20:	dfc00515 	stw	ra,20(sp)
  810b24:	df000415 	stw	fp,16(sp)
  810b28:	df000404 	addi	fp,sp,16
  810b2c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810b30:	0007883a 	mov	r3,zero
  810b34:	e0bffc17 	ldw	r2,-16(fp)
  810b38:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810b3c:	e0bffc17 	ldw	r2,-16(fp)
  810b40:	10800104 	addi	r2,r2,4
  810b44:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  810b48:	0005303a 	rdctl	r2,status
  810b4c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b50:	e0fffd17 	ldw	r3,-12(fp)
  810b54:	00bfff84 	movi	r2,-2
  810b58:	1884703a 	and	r2,r3,r2
  810b5c:	1001703a 	wrctl	status,r2
  return context;
  810b60:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  810b64:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  810b68:	08116800 	call	811680 <alt_tick>
  810b6c:	e0bfff17 	ldw	r2,-4(fp)
  810b70:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  810b74:	e0bffe17 	ldw	r2,-8(fp)
  810b78:	1001703a 	wrctl	status,r2
}
  810b7c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  810b80:	0001883a 	nop
  810b84:	e037883a 	mov	sp,fp
  810b88:	dfc00117 	ldw	ra,4(sp)
  810b8c:	df000017 	ldw	fp,0(sp)
  810b90:	dec00204 	addi	sp,sp,8
  810b94:	f800283a 	ret

00810b98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810b98:	defff804 	addi	sp,sp,-32
  810b9c:	dfc00715 	stw	ra,28(sp)
  810ba0:	df000615 	stw	fp,24(sp)
  810ba4:	df000604 	addi	fp,sp,24
  810ba8:	e13ffe15 	stw	r4,-8(fp)
  810bac:	e17ffd15 	stw	r5,-12(fp)
  810bb0:	e1bffc15 	stw	r6,-16(fp)
  810bb4:	e1fffb15 	stw	r7,-20(fp)
  810bb8:	e0bffb17 	ldw	r2,-20(fp)
  810bbc:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
  810bc0:	d0a71d17 	ldw	r2,-25484(gp)
  810bc4:	1000031e 	bne	r2,zero,810bd4 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
  810bc8:	e0bfff17 	ldw	r2,-4(fp)
  810bcc:	d0a71d15 	stw	r2,-25484(gp)
    return 0;
  810bd0:	00000106 	br	810bd8 <alt_avalon_timer_sc_init+0x40>
    return -1;
  810bd4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810bd8:	e0bffe17 	ldw	r2,-8(fp)
  810bdc:	10800104 	addi	r2,r2,4
  810be0:	00c001c4 	movi	r3,7
  810be4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810be8:	d8000015 	stw	zero,0(sp)
  810bec:	e1fffe17 	ldw	r7,-8(fp)
  810bf0:	01802074 	movhi	r6,129
  810bf4:	3182c704 	addi	r6,r6,2844
  810bf8:	e17ffc17 	ldw	r5,-16(fp)
  810bfc:	e13ffd17 	ldw	r4,-12(fp)
  810c00:	0810f7c0 	call	810f7c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810c04:	0001883a 	nop
  810c08:	e037883a 	mov	sp,fp
  810c0c:	dfc00117 	ldw	ra,4(sp)
  810c10:	df000017 	ldw	fp,0(sp)
  810c14:	dec00204 	addi	sp,sp,8
  810c18:	f800283a 	ret

00810c1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810c1c:	defff504 	addi	sp,sp,-44
  810c20:	df000a15 	stw	fp,40(sp)
  810c24:	df000a04 	addi	fp,sp,40
  810c28:	e13ff915 	stw	r4,-28(fp)
  810c2c:	e17ff815 	stw	r5,-32(fp)
  810c30:	e1bff715 	stw	r6,-36(fp)
  810c34:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810c38:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  810c3c:	d0a71d17 	ldw	r2,-25484(gp)
  
  if (alt_ticks_per_second ())
  810c40:	10003e26 	beq	r2,zero,810d3c <alt_alarm_start+0x120>
  {
    if (alarm)
  810c44:	e0bff917 	ldw	r2,-28(fp)
  810c48:	10003a26 	beq	r2,zero,810d34 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  810c4c:	e0bff917 	ldw	r2,-28(fp)
  810c50:	e0fff717 	ldw	r3,-36(fp)
  810c54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  810c58:	e0bff917 	ldw	r2,-28(fp)
  810c5c:	e0fff617 	ldw	r3,-40(fp)
  810c60:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  810c64:	0005303a 	rdctl	r2,status
  810c68:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c6c:	e0fffd17 	ldw	r3,-12(fp)
  810c70:	00bfff84 	movi	r2,-2
  810c74:	1884703a 	and	r2,r3,r2
  810c78:	1001703a 	wrctl	status,r2
  return context;
  810c7c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  810c80:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
  810c84:	d0a71e17 	ldw	r2,-25480(gp)
      
      current_nticks = alt_nticks();
  810c88:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810c8c:	e0fff817 	ldw	r3,-32(fp)
  810c90:	e0bfff17 	ldw	r2,-4(fp)
  810c94:	1885883a 	add	r2,r3,r2
  810c98:	10c00044 	addi	r3,r2,1
  810c9c:	e0bff917 	ldw	r2,-28(fp)
  810ca0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810ca4:	e0bff917 	ldw	r2,-28(fp)
  810ca8:	10c00217 	ldw	r3,8(r2)
  810cac:	e0bfff17 	ldw	r2,-4(fp)
  810cb0:	1880042e 	bgeu	r3,r2,810cc4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  810cb4:	e0bff917 	ldw	r2,-28(fp)
  810cb8:	00c00044 	movi	r3,1
  810cbc:	10c00405 	stb	r3,16(r2)
  810cc0:	00000206 	br	810ccc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  810cc4:	e0bff917 	ldw	r2,-28(fp)
  810cc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810ccc:	e0bff917 	ldw	r2,-28(fp)
  810cd0:	d0e01404 	addi	r3,gp,-32688
  810cd4:	e0fffb15 	stw	r3,-20(fp)
  810cd8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810cdc:	e0bffa17 	ldw	r2,-24(fp)
  810ce0:	e0fffb17 	ldw	r3,-20(fp)
  810ce4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810ce8:	e0bffb17 	ldw	r2,-20(fp)
  810cec:	10c00017 	ldw	r3,0(r2)
  810cf0:	e0bffa17 	ldw	r2,-24(fp)
  810cf4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810cf8:	e0bffb17 	ldw	r2,-20(fp)
  810cfc:	10800017 	ldw	r2,0(r2)
  810d00:	e0fffa17 	ldw	r3,-24(fp)
  810d04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  810d08:	e0bffb17 	ldw	r2,-20(fp)
  810d0c:	e0fffa17 	ldw	r3,-24(fp)
  810d10:	10c00015 	stw	r3,0(r2)
}
  810d14:	0001883a 	nop
  810d18:	e0bffe17 	ldw	r2,-8(fp)
  810d1c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  810d20:	e0bffc17 	ldw	r2,-16(fp)
  810d24:	1001703a 	wrctl	status,r2
}
  810d28:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  810d2c:	0005883a 	mov	r2,zero
  810d30:	00000306 	br	810d40 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  810d34:	00bffa84 	movi	r2,-22
  810d38:	00000106 	br	810d40 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  810d3c:	00bfde84 	movi	r2,-134
  }
}
  810d40:	e037883a 	mov	sp,fp
  810d44:	df000017 	ldw	fp,0(sp)
  810d48:	dec00104 	addi	sp,sp,4
  810d4c:	f800283a 	ret

00810d50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810d50:	defffe04 	addi	sp,sp,-8
  810d54:	df000115 	stw	fp,4(sp)
  810d58:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810d5c:	e03fff15 	stw	zero,-4(fp)
  810d60:	00000506 	br	810d78 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810d64:	e0bfff17 	ldw	r2,-4(fp)
  810d68:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810d6c:	e0bfff17 	ldw	r2,-4(fp)
  810d70:	10800804 	addi	r2,r2,32
  810d74:	e0bfff15 	stw	r2,-4(fp)
  810d78:	e0bfff17 	ldw	r2,-4(fp)
  810d7c:	10820030 	cmpltui	r2,r2,2048
  810d80:	103ff81e 	bne	r2,zero,810d64 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810d84:	0001883a 	nop
  810d88:	0001883a 	nop
  810d8c:	e037883a 	mov	sp,fp
  810d90:	df000017 	ldw	fp,0(sp)
  810d94:	dec00104 	addi	sp,sp,4
  810d98:	f800283a 	ret

00810d9c <alt_get_errno>:
{
  810d9c:	defffe04 	addi	sp,sp,-8
  810da0:	dfc00115 	stw	ra,4(sp)
  810da4:	df000015 	stw	fp,0(sp)
  810da8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810dac:	d0a01117 	ldw	r2,-32700(gp)
  810db0:	10000326 	beq	r2,zero,810dc0 <alt_get_errno+0x24>
  810db4:	d0a01117 	ldw	r2,-32700(gp)
  810db8:	103ee83a 	callr	r2
  810dbc:	00000106 	br	810dc4 <alt_get_errno+0x28>
  810dc0:	d0a71804 	addi	r2,gp,-25504
}
  810dc4:	e037883a 	mov	sp,fp
  810dc8:	dfc00117 	ldw	ra,4(sp)
  810dcc:	df000017 	ldw	fp,0(sp)
  810dd0:	dec00204 	addi	sp,sp,8
  810dd4:	f800283a 	ret

00810dd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810dd8:	defffa04 	addi	sp,sp,-24
  810ddc:	dfc00515 	stw	ra,20(sp)
  810de0:	df000415 	stw	fp,16(sp)
  810de4:	df000404 	addi	fp,sp,16
  810de8:	e13ffd15 	stw	r4,-12(fp)
  810dec:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810df0:	e0bffd17 	ldw	r2,-12(fp)
  810df4:	10000326 	beq	r2,zero,810e04 <alt_dev_llist_insert+0x2c>
  810df8:	e0bffd17 	ldw	r2,-12(fp)
  810dfc:	10800217 	ldw	r2,8(r2)
  810e00:	1000061e 	bne	r2,zero,810e1c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  810e04:	0810d9c0 	call	810d9c <alt_get_errno>
  810e08:	1007883a 	mov	r3,r2
  810e0c:	00800584 	movi	r2,22
  810e10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810e14:	00bffa84 	movi	r2,-22
  810e18:	00001406 	br	810e6c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810e1c:	e0bffd17 	ldw	r2,-12(fp)
  810e20:	e0fffc17 	ldw	r3,-16(fp)
  810e24:	e0ffff15 	stw	r3,-4(fp)
  810e28:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  810e2c:	e0bffe17 	ldw	r2,-8(fp)
  810e30:	e0ffff17 	ldw	r3,-4(fp)
  810e34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810e38:	e0bfff17 	ldw	r2,-4(fp)
  810e3c:	10c00017 	ldw	r3,0(r2)
  810e40:	e0bffe17 	ldw	r2,-8(fp)
  810e44:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  810e48:	e0bfff17 	ldw	r2,-4(fp)
  810e4c:	10800017 	ldw	r2,0(r2)
  810e50:	e0fffe17 	ldw	r3,-8(fp)
  810e54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  810e58:	e0bfff17 	ldw	r2,-4(fp)
  810e5c:	e0fffe17 	ldw	r3,-8(fp)
  810e60:	10c00015 	stw	r3,0(r2)
}
  810e64:	0001883a 	nop

  return 0;  
  810e68:	0005883a 	mov	r2,zero
}
  810e6c:	e037883a 	mov	sp,fp
  810e70:	dfc00117 	ldw	ra,4(sp)
  810e74:	df000017 	ldw	fp,0(sp)
  810e78:	dec00204 	addi	sp,sp,8
  810e7c:	f800283a 	ret

00810e80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810e80:	defffd04 	addi	sp,sp,-12
  810e84:	dfc00215 	stw	ra,8(sp)
  810e88:	df000115 	stw	fp,4(sp)
  810e8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810e90:	00802074 	movhi	r2,129
  810e94:	10876104 	addi	r2,r2,7556
  810e98:	e0bfff15 	stw	r2,-4(fp)
  810e9c:	00000606 	br	810eb8 <_do_ctors+0x38>
        (*ctor) (); 
  810ea0:	e0bfff17 	ldw	r2,-4(fp)
  810ea4:	10800017 	ldw	r2,0(r2)
  810ea8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810eac:	e0bfff17 	ldw	r2,-4(fp)
  810eb0:	10bfff04 	addi	r2,r2,-4
  810eb4:	e0bfff15 	stw	r2,-4(fp)
  810eb8:	e0ffff17 	ldw	r3,-4(fp)
  810ebc:	00802074 	movhi	r2,129
  810ec0:	10876204 	addi	r2,r2,7560
  810ec4:	18bff62e 	bgeu	r3,r2,810ea0 <_do_ctors+0x20>
}
  810ec8:	0001883a 	nop
  810ecc:	0001883a 	nop
  810ed0:	e037883a 	mov	sp,fp
  810ed4:	dfc00117 	ldw	ra,4(sp)
  810ed8:	df000017 	ldw	fp,0(sp)
  810edc:	dec00204 	addi	sp,sp,8
  810ee0:	f800283a 	ret

00810ee4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810ee4:	defffd04 	addi	sp,sp,-12
  810ee8:	dfc00215 	stw	ra,8(sp)
  810eec:	df000115 	stw	fp,4(sp)
  810ef0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810ef4:	00802074 	movhi	r2,129
  810ef8:	10876104 	addi	r2,r2,7556
  810efc:	e0bfff15 	stw	r2,-4(fp)
  810f00:	00000606 	br	810f1c <_do_dtors+0x38>
        (*dtor) (); 
  810f04:	e0bfff17 	ldw	r2,-4(fp)
  810f08:	10800017 	ldw	r2,0(r2)
  810f0c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810f10:	e0bfff17 	ldw	r2,-4(fp)
  810f14:	10bfff04 	addi	r2,r2,-4
  810f18:	e0bfff15 	stw	r2,-4(fp)
  810f1c:	e0ffff17 	ldw	r3,-4(fp)
  810f20:	00802074 	movhi	r2,129
  810f24:	10876204 	addi	r2,r2,7560
  810f28:	18bff62e 	bgeu	r3,r2,810f04 <_do_dtors+0x20>
}
  810f2c:	0001883a 	nop
  810f30:	0001883a 	nop
  810f34:	e037883a 	mov	sp,fp
  810f38:	dfc00117 	ldw	ra,4(sp)
  810f3c:	df000017 	ldw	fp,0(sp)
  810f40:	dec00204 	addi	sp,sp,8
  810f44:	f800283a 	ret

00810f48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810f48:	defffe04 	addi	sp,sp,-8
  810f4c:	dfc00115 	stw	ra,4(sp)
  810f50:	df000015 	stw	fp,0(sp)
  810f54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810f58:	01420004 	movi	r5,2048
  810f5c:	0009883a 	mov	r4,zero
  810f60:	08119fc0 	call	8119fc <alt_icache_flush>
#endif
}
  810f64:	0001883a 	nop
  810f68:	e037883a 	mov	sp,fp
  810f6c:	dfc00117 	ldw	ra,4(sp)
  810f70:	df000017 	ldw	fp,0(sp)
  810f74:	dec00204 	addi	sp,sp,8
  810f78:	f800283a 	ret

00810f7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810f7c:	defff904 	addi	sp,sp,-28
  810f80:	dfc00615 	stw	ra,24(sp)
  810f84:	df000515 	stw	fp,20(sp)
  810f88:	df000504 	addi	fp,sp,20
  810f8c:	e13fff15 	stw	r4,-4(fp)
  810f90:	e17ffe15 	stw	r5,-8(fp)
  810f94:	e1bffd15 	stw	r6,-12(fp)
  810f98:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810f9c:	e0800217 	ldw	r2,8(fp)
  810fa0:	d8800015 	stw	r2,0(sp)
  810fa4:	e1fffc17 	ldw	r7,-16(fp)
  810fa8:	e1bffd17 	ldw	r6,-12(fp)
  810fac:	e17ffe17 	ldw	r5,-8(fp)
  810fb0:	e13fff17 	ldw	r4,-4(fp)
  810fb4:	081112c0 	call	81112c <alt_iic_isr_register>
}  
  810fb8:	e037883a 	mov	sp,fp
  810fbc:	dfc00117 	ldw	ra,4(sp)
  810fc0:	df000017 	ldw	fp,0(sp)
  810fc4:	dec00204 	addi	sp,sp,8
  810fc8:	f800283a 	ret

00810fcc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810fcc:	defff904 	addi	sp,sp,-28
  810fd0:	df000615 	stw	fp,24(sp)
  810fd4:	df000604 	addi	fp,sp,24
  810fd8:	e13ffb15 	stw	r4,-20(fp)
  810fdc:	e17ffa15 	stw	r5,-24(fp)
  810fe0:	e0bffa17 	ldw	r2,-24(fp)
  810fe4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  810fe8:	0005303a 	rdctl	r2,status
  810fec:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ff0:	e0fffe17 	ldw	r3,-8(fp)
  810ff4:	00bfff84 	movi	r2,-2
  810ff8:	1884703a 	and	r2,r3,r2
  810ffc:	1001703a 	wrctl	status,r2
  return context;
  811000:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811004:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  811008:	00c00044 	movi	r3,1
  81100c:	e0bfff17 	ldw	r2,-4(fp)
  811010:	1884983a 	sll	r2,r3,r2
  811014:	1007883a 	mov	r3,r2
  811018:	d0a71c17 	ldw	r2,-25488(gp)
  81101c:	1884b03a 	or	r2,r3,r2
  811020:	d0a71c15 	stw	r2,-25488(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811024:	d0a71c17 	ldw	r2,-25488(gp)
  811028:	100170fa 	wrctl	ienable,r2
  81102c:	e0bffd17 	ldw	r2,-12(fp)
  811030:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811034:	e0bffc17 	ldw	r2,-16(fp)
  811038:	1001703a 	wrctl	status,r2
}
  81103c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  811040:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811044:	e037883a 	mov	sp,fp
  811048:	df000017 	ldw	fp,0(sp)
  81104c:	dec00104 	addi	sp,sp,4
  811050:	f800283a 	ret

00811054 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811054:	defff904 	addi	sp,sp,-28
  811058:	df000615 	stw	fp,24(sp)
  81105c:	df000604 	addi	fp,sp,24
  811060:	e13ffb15 	stw	r4,-20(fp)
  811064:	e17ffa15 	stw	r5,-24(fp)
  811068:	e0bffa17 	ldw	r2,-24(fp)
  81106c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  811070:	0005303a 	rdctl	r2,status
  811074:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811078:	e0fffe17 	ldw	r3,-8(fp)
  81107c:	00bfff84 	movi	r2,-2
  811080:	1884703a 	and	r2,r3,r2
  811084:	1001703a 	wrctl	status,r2
  return context;
  811088:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  81108c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  811090:	00c00044 	movi	r3,1
  811094:	e0bfff17 	ldw	r2,-4(fp)
  811098:	1884983a 	sll	r2,r3,r2
  81109c:	0084303a 	nor	r2,zero,r2
  8110a0:	1007883a 	mov	r3,r2
  8110a4:	d0a71c17 	ldw	r2,-25488(gp)
  8110a8:	1884703a 	and	r2,r3,r2
  8110ac:	d0a71c15 	stw	r2,-25488(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8110b0:	d0a71c17 	ldw	r2,-25488(gp)
  8110b4:	100170fa 	wrctl	ienable,r2
  8110b8:	e0bffd17 	ldw	r2,-12(fp)
  8110bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  8110c0:	e0bffc17 	ldw	r2,-16(fp)
  8110c4:	1001703a 	wrctl	status,r2
}
  8110c8:	0001883a 	nop
  return 0;
  8110cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8110d0:	e037883a 	mov	sp,fp
  8110d4:	df000017 	ldw	fp,0(sp)
  8110d8:	dec00104 	addi	sp,sp,4
  8110dc:	f800283a 	ret

008110e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8110e0:	defffc04 	addi	sp,sp,-16
  8110e4:	df000315 	stw	fp,12(sp)
  8110e8:	df000304 	addi	fp,sp,12
  8110ec:	e13ffe15 	stw	r4,-8(fp)
  8110f0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8110f4:	000530fa 	rdctl	r2,ienable
  8110f8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8110fc:	00c00044 	movi	r3,1
  811100:	e0bffd17 	ldw	r2,-12(fp)
  811104:	1884983a 	sll	r2,r3,r2
  811108:	1007883a 	mov	r3,r2
  81110c:	e0bfff17 	ldw	r2,-4(fp)
  811110:	1884703a 	and	r2,r3,r2
  811114:	1004c03a 	cmpne	r2,r2,zero
  811118:	10803fcc 	andi	r2,r2,255
}
  81111c:	e037883a 	mov	sp,fp
  811120:	df000017 	ldw	fp,0(sp)
  811124:	dec00104 	addi	sp,sp,4
  811128:	f800283a 	ret

0081112c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81112c:	defff504 	addi	sp,sp,-44
  811130:	dfc00a15 	stw	ra,40(sp)
  811134:	df000915 	stw	fp,36(sp)
  811138:	df000904 	addi	fp,sp,36
  81113c:	e13ffa15 	stw	r4,-24(fp)
  811140:	e17ff915 	stw	r5,-28(fp)
  811144:	e1bff815 	stw	r6,-32(fp)
  811148:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  81114c:	00bffa84 	movi	r2,-22
  811150:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811154:	e0bff917 	ldw	r2,-28(fp)
  811158:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81115c:	e0bffe17 	ldw	r2,-8(fp)
  811160:	10800808 	cmpgei	r2,r2,32
  811164:	1000251e 	bne	r2,zero,8111fc <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  811168:	0005303a 	rdctl	r2,status
  81116c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811170:	e0fffc17 	ldw	r3,-16(fp)
  811174:	00bfff84 	movi	r2,-2
  811178:	1884703a 	and	r2,r3,r2
  81117c:	1001703a 	wrctl	status,r2
  return context;
  811180:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811184:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  811188:	e0bffe17 	ldw	r2,-8(fp)
  81118c:	100890fa 	slli	r4,r2,3
  811190:	e0fff817 	ldw	r3,-32(fp)
  811194:	00802074 	movhi	r2,129
  811198:	2085883a 	add	r2,r4,r2
  81119c:	10d82515 	stw	r3,24724(r2)
    alt_irq[id].context = isr_context;
  8111a0:	e0bffe17 	ldw	r2,-8(fp)
  8111a4:	100890fa 	slli	r4,r2,3
  8111a8:	e0fff717 	ldw	r3,-36(fp)
  8111ac:	00802074 	movhi	r2,129
  8111b0:	2085883a 	add	r2,r4,r2
  8111b4:	10d82615 	stw	r3,24728(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8111b8:	e0bff817 	ldw	r2,-32(fp)
  8111bc:	10000526 	beq	r2,zero,8111d4 <alt_iic_isr_register+0xa8>
  8111c0:	e0bffe17 	ldw	r2,-8(fp)
  8111c4:	100b883a 	mov	r5,r2
  8111c8:	e13ffa17 	ldw	r4,-24(fp)
  8111cc:	0810fcc0 	call	810fcc <alt_ic_irq_enable>
  8111d0:	00000406 	br	8111e4 <alt_iic_isr_register+0xb8>
  8111d4:	e0bffe17 	ldw	r2,-8(fp)
  8111d8:	100b883a 	mov	r5,r2
  8111dc:	e13ffa17 	ldw	r4,-24(fp)
  8111e0:	08110540 	call	811054 <alt_ic_irq_disable>
  8111e4:	e0bfff15 	stw	r2,-4(fp)
  8111e8:	e0bffd17 	ldw	r2,-12(fp)
  8111ec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  8111f0:	e0bffb17 	ldw	r2,-20(fp)
  8111f4:	1001703a 	wrctl	status,r2
}
  8111f8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  8111fc:	e0bfff17 	ldw	r2,-4(fp)
}
  811200:	e037883a 	mov	sp,fp
  811204:	dfc00117 	ldw	ra,4(sp)
  811208:	df000017 	ldw	fp,0(sp)
  81120c:	dec00204 	addi	sp,sp,8
  811210:	f800283a 	ret

00811214 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811214:	defff904 	addi	sp,sp,-28
  811218:	dfc00615 	stw	ra,24(sp)
  81121c:	df000515 	stw	fp,20(sp)
  811220:	df000504 	addi	fp,sp,20
  811224:	e13ffe15 	stw	r4,-8(fp)
  811228:	e17ffd15 	stw	r5,-12(fp)
  81122c:	e1bffc15 	stw	r6,-16(fp)
  811230:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  811234:	e1bffb17 	ldw	r6,-20(fp)
  811238:	e17ffc17 	ldw	r5,-16(fp)
  81123c:	e13ffd17 	ldw	r4,-12(fp)
  811240:	081147c0 	call	81147c <open>
  811244:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  811248:	e0bfff17 	ldw	r2,-4(fp)
  81124c:	10002016 	blt	r2,zero,8112d0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  811250:	e0ffff17 	ldw	r3,-4(fp)
  811254:	1805883a 	mov	r2,r3
  811258:	1085883a 	add	r2,r2,r2
  81125c:	10c5883a 	add	r2,r2,r3
  811260:	100490ba 	slli	r2,r2,2
  811264:	00c02074 	movhi	r3,129
  811268:	10c7883a 	add	r3,r2,r3
  81126c:	18cc8317 	ldw	r3,12812(r3)
  811270:	e0bffe17 	ldw	r2,-8(fp)
  811274:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811278:	e0ffff17 	ldw	r3,-4(fp)
  81127c:	1805883a 	mov	r2,r3
  811280:	1085883a 	add	r2,r2,r2
  811284:	10c5883a 	add	r2,r2,r3
  811288:	100490ba 	slli	r2,r2,2
  81128c:	00c02074 	movhi	r3,129
  811290:	10c7883a 	add	r3,r2,r3
  811294:	18cc8417 	ldw	r3,12816(r3)
  811298:	e0bffe17 	ldw	r2,-8(fp)
  81129c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8112a0:	e0ffff17 	ldw	r3,-4(fp)
  8112a4:	1805883a 	mov	r2,r3
  8112a8:	1085883a 	add	r2,r2,r2
  8112ac:	10c5883a 	add	r2,r2,r3
  8112b0:	100490ba 	slli	r2,r2,2
  8112b4:	00c02074 	movhi	r3,129
  8112b8:	10c7883a 	add	r3,r2,r3
  8112bc:	18cc8517 	ldw	r3,12820(r3)
  8112c0:	e0bffe17 	ldw	r2,-8(fp)
  8112c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8112c8:	e13fff17 	ldw	r4,-4(fp)
  8112cc:	080fcb80 	call	80fcb8 <alt_release_fd>
  }
} 
  8112d0:	0001883a 	nop
  8112d4:	e037883a 	mov	sp,fp
  8112d8:	dfc00117 	ldw	ra,4(sp)
  8112dc:	df000017 	ldw	fp,0(sp)
  8112e0:	dec00204 	addi	sp,sp,8
  8112e4:	f800283a 	ret

008112e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8112e8:	defffb04 	addi	sp,sp,-20
  8112ec:	dfc00415 	stw	ra,16(sp)
  8112f0:	df000315 	stw	fp,12(sp)
  8112f4:	df000304 	addi	fp,sp,12
  8112f8:	e13fff15 	stw	r4,-4(fp)
  8112fc:	e17ffe15 	stw	r5,-8(fp)
  811300:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811304:	01c07fc4 	movi	r7,511
  811308:	01800044 	movi	r6,1
  81130c:	e17fff17 	ldw	r5,-4(fp)
  811310:	01002074 	movhi	r4,129
  811314:	210c8604 	addi	r4,r4,12824
  811318:	08112140 	call	811214 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81131c:	01c07fc4 	movi	r7,511
  811320:	000d883a 	mov	r6,zero
  811324:	e17ffe17 	ldw	r5,-8(fp)
  811328:	01002074 	movhi	r4,129
  81132c:	210c8304 	addi	r4,r4,12812
  811330:	08112140 	call	811214 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811334:	01c07fc4 	movi	r7,511
  811338:	01800044 	movi	r6,1
  81133c:	e17ffd17 	ldw	r5,-12(fp)
  811340:	01002074 	movhi	r4,129
  811344:	210c8904 	addi	r4,r4,12836
  811348:	08112140 	call	811214 <alt_open_fd>
}  
  81134c:	0001883a 	nop
  811350:	e037883a 	mov	sp,fp
  811354:	dfc00117 	ldw	ra,4(sp)
  811358:	df000017 	ldw	fp,0(sp)
  81135c:	dec00204 	addi	sp,sp,8
  811360:	f800283a 	ret

00811364 <alt_get_errno>:
{
  811364:	defffe04 	addi	sp,sp,-8
  811368:	dfc00115 	stw	ra,4(sp)
  81136c:	df000015 	stw	fp,0(sp)
  811370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811374:	d0a01117 	ldw	r2,-32700(gp)
  811378:	10000326 	beq	r2,zero,811388 <alt_get_errno+0x24>
  81137c:	d0a01117 	ldw	r2,-32700(gp)
  811380:	103ee83a 	callr	r2
  811384:	00000106 	br	81138c <alt_get_errno+0x28>
  811388:	d0a71804 	addi	r2,gp,-25504
}
  81138c:	e037883a 	mov	sp,fp
  811390:	dfc00117 	ldw	ra,4(sp)
  811394:	df000017 	ldw	fp,0(sp)
  811398:	dec00204 	addi	sp,sp,8
  81139c:	f800283a 	ret

008113a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8113a0:	defffd04 	addi	sp,sp,-12
  8113a4:	df000215 	stw	fp,8(sp)
  8113a8:	df000204 	addi	fp,sp,8
  8113ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8113b0:	e0bffe17 	ldw	r2,-8(fp)
  8113b4:	10800217 	ldw	r2,8(r2)
  8113b8:	10d00034 	orhi	r3,r2,16384
  8113bc:	e0bffe17 	ldw	r2,-8(fp)
  8113c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8113c4:	e03fff15 	stw	zero,-4(fp)
  8113c8:	00002306 	br	811458 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8113cc:	e0ffff17 	ldw	r3,-4(fp)
  8113d0:	1805883a 	mov	r2,r3
  8113d4:	1085883a 	add	r2,r2,r2
  8113d8:	10c5883a 	add	r2,r2,r3
  8113dc:	100490ba 	slli	r2,r2,2
  8113e0:	00c02074 	movhi	r3,129
  8113e4:	10c7883a 	add	r3,r2,r3
  8113e8:	18cc8317 	ldw	r3,12812(r3)
  8113ec:	e0bffe17 	ldw	r2,-8(fp)
  8113f0:	10800017 	ldw	r2,0(r2)
  8113f4:	1880151e 	bne	r3,r2,81144c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8113f8:	e0ffff17 	ldw	r3,-4(fp)
  8113fc:	1805883a 	mov	r2,r3
  811400:	1085883a 	add	r2,r2,r2
  811404:	10c5883a 	add	r2,r2,r3
  811408:	100490ba 	slli	r2,r2,2
  81140c:	00c02074 	movhi	r3,129
  811410:	10c7883a 	add	r3,r2,r3
  811414:	188c8517 	ldw	r2,12820(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  811418:	10000c0e 	bge	r2,zero,81144c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  81141c:	e0ffff17 	ldw	r3,-4(fp)
  811420:	1805883a 	mov	r2,r3
  811424:	1085883a 	add	r2,r2,r2
  811428:	10c5883a 	add	r2,r2,r3
  81142c:	100490ba 	slli	r2,r2,2
  811430:	00c02074 	movhi	r3,129
  811434:	18cc8304 	addi	r3,r3,12812
  811438:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81143c:	e0fffe17 	ldw	r3,-8(fp)
  811440:	18800226 	beq	r3,r2,81144c <alt_file_locked+0xac>
    {
      return -EACCES;
  811444:	00bffcc4 	movi	r2,-13
  811448:	00000806 	br	81146c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  81144c:	e0bfff17 	ldw	r2,-4(fp)
  811450:	10800044 	addi	r2,r2,1
  811454:	e0bfff15 	stw	r2,-4(fp)
  811458:	d0a01017 	ldw	r2,-32704(gp)
  81145c:	1007883a 	mov	r3,r2
  811460:	e0bfff17 	ldw	r2,-4(fp)
  811464:	18bfd92e 	bgeu	r3,r2,8113cc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811468:	0005883a 	mov	r2,zero
}
  81146c:	e037883a 	mov	sp,fp
  811470:	df000017 	ldw	fp,0(sp)
  811474:	dec00104 	addi	sp,sp,4
  811478:	f800283a 	ret

0081147c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81147c:	defff604 	addi	sp,sp,-40
  811480:	dfc00915 	stw	ra,36(sp)
  811484:	df000815 	stw	fp,32(sp)
  811488:	df000804 	addi	fp,sp,32
  81148c:	e13ffa15 	stw	r4,-24(fp)
  811490:	e17ff915 	stw	r5,-28(fp)
  811494:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811498:	00bfffc4 	movi	r2,-1
  81149c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  8114a0:	00bffb44 	movi	r2,-19
  8114a4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  8114a8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8114ac:	d1600e04 	addi	r5,gp,-32712
  8114b0:	e13ffa17 	ldw	r4,-24(fp)
  8114b4:	08117ac0 	call	8117ac <alt_find_dev>
  8114b8:	e0bfff15 	stw	r2,-4(fp)
  8114bc:	e0bfff17 	ldw	r2,-4(fp)
  8114c0:	1000051e 	bne	r2,zero,8114d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8114c4:	e13ffa17 	ldw	r4,-24(fp)
  8114c8:	081183c0 	call	81183c <alt_find_file>
  8114cc:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  8114d0:	00800044 	movi	r2,1
  8114d4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8114d8:	e0bfff17 	ldw	r2,-4(fp)
  8114dc:	10002c26 	beq	r2,zero,811590 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8114e0:	e13fff17 	ldw	r4,-4(fp)
  8114e4:	08119440 	call	811944 <alt_get_fd>
  8114e8:	e0bffe15 	stw	r2,-8(fp)
  8114ec:	e0bffe17 	ldw	r2,-8(fp)
  8114f0:	1000030e 	bge	r2,zero,811500 <open+0x84>
    {
      status = index;
  8114f4:	e0bffe17 	ldw	r2,-8(fp)
  8114f8:	e0bffd15 	stw	r2,-12(fp)
  8114fc:	00002606 	br	811598 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811500:	e0fffe17 	ldw	r3,-8(fp)
  811504:	1805883a 	mov	r2,r3
  811508:	1085883a 	add	r2,r2,r2
  81150c:	10c5883a 	add	r2,r2,r3
  811510:	100490ba 	slli	r2,r2,2
  811514:	00c02074 	movhi	r3,129
  811518:	18cc8304 	addi	r3,r3,12812
  81151c:	10c5883a 	add	r2,r2,r3
  811520:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811524:	e0fff917 	ldw	r3,-28(fp)
  811528:	00900034 	movhi	r2,16384
  81152c:	10bfffc4 	addi	r2,r2,-1
  811530:	1886703a 	and	r3,r3,r2
  811534:	e0bffb17 	ldw	r2,-20(fp)
  811538:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81153c:	e0bffc17 	ldw	r2,-16(fp)
  811540:	1000051e 	bne	r2,zero,811558 <open+0xdc>
  811544:	e13ffb17 	ldw	r4,-20(fp)
  811548:	08113a00 	call	8113a0 <alt_file_locked>
  81154c:	e0bffd15 	stw	r2,-12(fp)
  811550:	e0bffd17 	ldw	r2,-12(fp)
  811554:	10001016 	blt	r2,zero,811598 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811558:	e0bfff17 	ldw	r2,-4(fp)
  81155c:	10800317 	ldw	r2,12(r2)
  811560:	10000826 	beq	r2,zero,811584 <open+0x108>
  811564:	e0bfff17 	ldw	r2,-4(fp)
  811568:	10800317 	ldw	r2,12(r2)
  81156c:	e1fff817 	ldw	r7,-32(fp)
  811570:	e1bff917 	ldw	r6,-28(fp)
  811574:	e17ffa17 	ldw	r5,-24(fp)
  811578:	e13ffb17 	ldw	r4,-20(fp)
  81157c:	103ee83a 	callr	r2
  811580:	00000106 	br	811588 <open+0x10c>
  811584:	0005883a 	mov	r2,zero
  811588:	e0bffd15 	stw	r2,-12(fp)
  81158c:	00000206 	br	811598 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811590:	00bffb44 	movi	r2,-19
  811594:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811598:	e0bffd17 	ldw	r2,-12(fp)
  81159c:	1000090e 	bge	r2,zero,8115c4 <open+0x148>
  {
    alt_release_fd (index);  
  8115a0:	e13ffe17 	ldw	r4,-8(fp)
  8115a4:	080fcb80 	call	80fcb8 <alt_release_fd>
    ALT_ERRNO = -status;
  8115a8:	08113640 	call	811364 <alt_get_errno>
  8115ac:	1007883a 	mov	r3,r2
  8115b0:	e0bffd17 	ldw	r2,-12(fp)
  8115b4:	0085c83a 	sub	r2,zero,r2
  8115b8:	18800015 	stw	r2,0(r3)
    return -1;
  8115bc:	00bfffc4 	movi	r2,-1
  8115c0:	00000106 	br	8115c8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  8115c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8115c8:	e037883a 	mov	sp,fp
  8115cc:	dfc00117 	ldw	ra,4(sp)
  8115d0:	df000017 	ldw	fp,0(sp)
  8115d4:	dec00204 	addi	sp,sp,8
  8115d8:	f800283a 	ret

008115dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8115dc:	defffa04 	addi	sp,sp,-24
  8115e0:	df000515 	stw	fp,20(sp)
  8115e4:	df000504 	addi	fp,sp,20
  8115e8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  8115ec:	0005303a 	rdctl	r2,status
  8115f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115f4:	e0fffc17 	ldw	r3,-16(fp)
  8115f8:	00bfff84 	movi	r2,-2
  8115fc:	1884703a 	and	r2,r3,r2
  811600:	1001703a 	wrctl	status,r2
  return context;
  811604:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811608:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  81160c:	e0bffb17 	ldw	r2,-20(fp)
  811610:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811614:	e0bffd17 	ldw	r2,-12(fp)
  811618:	10800017 	ldw	r2,0(r2)
  81161c:	e0fffd17 	ldw	r3,-12(fp)
  811620:	18c00117 	ldw	r3,4(r3)
  811624:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  811628:	e0bffd17 	ldw	r2,-12(fp)
  81162c:	10800117 	ldw	r2,4(r2)
  811630:	e0fffd17 	ldw	r3,-12(fp)
  811634:	18c00017 	ldw	r3,0(r3)
  811638:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81163c:	e0bffd17 	ldw	r2,-12(fp)
  811640:	e0fffd17 	ldw	r3,-12(fp)
  811644:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  811648:	e0bffd17 	ldw	r2,-12(fp)
  81164c:	e0fffd17 	ldw	r3,-12(fp)
  811650:	10c00015 	stw	r3,0(r2)
} 
  811654:	0001883a 	nop
  811658:	e0bfff17 	ldw	r2,-4(fp)
  81165c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  811660:	e0bffe17 	ldw	r2,-8(fp)
  811664:	1001703a 	wrctl	status,r2
}
  811668:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  81166c:	0001883a 	nop
  811670:	e037883a 	mov	sp,fp
  811674:	df000017 	ldw	fp,0(sp)
  811678:	dec00104 	addi	sp,sp,4
  81167c:	f800283a 	ret

00811680 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811680:	defffb04 	addi	sp,sp,-20
  811684:	dfc00415 	stw	ra,16(sp)
  811688:	df000315 	stw	fp,12(sp)
  81168c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811690:	d0a01417 	ldw	r2,-32688(gp)
  811694:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811698:	d0a71e17 	ldw	r2,-25480(gp)
  81169c:	10800044 	addi	r2,r2,1
  8116a0:	d0a71e15 	stw	r2,-25480(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8116a4:	00002e06 	br	811760 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8116a8:	e0bfff17 	ldw	r2,-4(fp)
  8116ac:	10800017 	ldw	r2,0(r2)
  8116b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8116b4:	e0bfff17 	ldw	r2,-4(fp)
  8116b8:	10800403 	ldbu	r2,16(r2)
  8116bc:	10803fcc 	andi	r2,r2,255
  8116c0:	10000426 	beq	r2,zero,8116d4 <alt_tick+0x54>
  8116c4:	d0a71e17 	ldw	r2,-25480(gp)
  8116c8:	1000021e 	bne	r2,zero,8116d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8116cc:	e0bfff17 	ldw	r2,-4(fp)
  8116d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8116d4:	e0bfff17 	ldw	r2,-4(fp)
  8116d8:	10800217 	ldw	r2,8(r2)
  8116dc:	d0e71e17 	ldw	r3,-25480(gp)
  8116e0:	18801d36 	bltu	r3,r2,811758 <alt_tick+0xd8>
  8116e4:	e0bfff17 	ldw	r2,-4(fp)
  8116e8:	10800403 	ldbu	r2,16(r2)
  8116ec:	10803fcc 	andi	r2,r2,255
  8116f0:	1000191e 	bne	r2,zero,811758 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8116f4:	e0bfff17 	ldw	r2,-4(fp)
  8116f8:	10800317 	ldw	r2,12(r2)
  8116fc:	e0ffff17 	ldw	r3,-4(fp)
  811700:	18c00517 	ldw	r3,20(r3)
  811704:	1809883a 	mov	r4,r3
  811708:	103ee83a 	callr	r2
  81170c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811710:	e0bffd17 	ldw	r2,-12(fp)
  811714:	1000031e 	bne	r2,zero,811724 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  811718:	e13fff17 	ldw	r4,-4(fp)
  81171c:	08115dc0 	call	8115dc <alt_alarm_stop>
  811720:	00000d06 	br	811758 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  811724:	e0bfff17 	ldw	r2,-4(fp)
  811728:	10c00217 	ldw	r3,8(r2)
  81172c:	e0bffd17 	ldw	r2,-12(fp)
  811730:	1887883a 	add	r3,r3,r2
  811734:	e0bfff17 	ldw	r2,-4(fp)
  811738:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81173c:	e0bfff17 	ldw	r2,-4(fp)
  811740:	10c00217 	ldw	r3,8(r2)
  811744:	d0a71e17 	ldw	r2,-25480(gp)
  811748:	1880032e 	bgeu	r3,r2,811758 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81174c:	e0bfff17 	ldw	r2,-4(fp)
  811750:	00c00044 	movi	r3,1
  811754:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  811758:	e0bffe17 	ldw	r2,-8(fp)
  81175c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  811760:	e0ffff17 	ldw	r3,-4(fp)
  811764:	d0a01404 	addi	r2,gp,-32688
  811768:	18bfcf1e 	bne	r3,r2,8116a8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81176c:	0001883a 	nop
}
  811770:	0001883a 	nop
  811774:	e037883a 	mov	sp,fp
  811778:	dfc00117 	ldw	ra,4(sp)
  81177c:	df000017 	ldw	fp,0(sp)
  811780:	dec00204 	addi	sp,sp,8
  811784:	f800283a 	ret

00811788 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811788:	deffff04 	addi	sp,sp,-4
  81178c:	df000015 	stw	fp,0(sp)
  811790:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811794:	000170fa 	wrctl	ienable,zero
}
  811798:	0001883a 	nop
  81179c:	e037883a 	mov	sp,fp
  8117a0:	df000017 	ldw	fp,0(sp)
  8117a4:	dec00104 	addi	sp,sp,4
  8117a8:	f800283a 	ret

008117ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8117ac:	defffa04 	addi	sp,sp,-24
  8117b0:	dfc00515 	stw	ra,20(sp)
  8117b4:	df000415 	stw	fp,16(sp)
  8117b8:	df000404 	addi	fp,sp,16
  8117bc:	e13ffd15 	stw	r4,-12(fp)
  8117c0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8117c4:	e0bffc17 	ldw	r2,-16(fp)
  8117c8:	10800017 	ldw	r2,0(r2)
  8117cc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8117d0:	e13ffd17 	ldw	r4,-12(fp)
  8117d4:	08023fc0 	call	8023fc <strlen>
  8117d8:	10800044 	addi	r2,r2,1
  8117dc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8117e0:	00000d06 	br	811818 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8117e4:	e0bfff17 	ldw	r2,-4(fp)
  8117e8:	10800217 	ldw	r2,8(r2)
  8117ec:	e0fffe17 	ldw	r3,-8(fp)
  8117f0:	180d883a 	mov	r6,r3
  8117f4:	e17ffd17 	ldw	r5,-12(fp)
  8117f8:	1009883a 	mov	r4,r2
  8117fc:	0811b680 	call	811b68 <memcmp>
  811800:	1000021e 	bne	r2,zero,81180c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811804:	e0bfff17 	ldw	r2,-4(fp)
  811808:	00000706 	br	811828 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81180c:	e0bfff17 	ldw	r2,-4(fp)
  811810:	10800017 	ldw	r2,0(r2)
  811814:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  811818:	e0ffff17 	ldw	r3,-4(fp)
  81181c:	e0bffc17 	ldw	r2,-16(fp)
  811820:	18bff01e 	bne	r3,r2,8117e4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  811824:	0005883a 	mov	r2,zero
}
  811828:	e037883a 	mov	sp,fp
  81182c:	dfc00117 	ldw	ra,4(sp)
  811830:	df000017 	ldw	fp,0(sp)
  811834:	dec00204 	addi	sp,sp,8
  811838:	f800283a 	ret

0081183c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81183c:	defffb04 	addi	sp,sp,-20
  811840:	dfc00415 	stw	ra,16(sp)
  811844:	df000315 	stw	fp,12(sp)
  811848:	df000304 	addi	fp,sp,12
  81184c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811850:	d0a00c17 	ldw	r2,-32720(gp)
  811854:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811858:	00003106 	br	811920 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81185c:	e0bfff17 	ldw	r2,-4(fp)
  811860:	10800217 	ldw	r2,8(r2)
  811864:	1009883a 	mov	r4,r2
  811868:	08023fc0 	call	8023fc <strlen>
  81186c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  811870:	e0bfff17 	ldw	r2,-4(fp)
  811874:	10c00217 	ldw	r3,8(r2)
  811878:	e0bffe17 	ldw	r2,-8(fp)
  81187c:	10bfffc4 	addi	r2,r2,-1
  811880:	1885883a 	add	r2,r3,r2
  811884:	10800003 	ldbu	r2,0(r2)
  811888:	10803fcc 	andi	r2,r2,255
  81188c:	1080201c 	xori	r2,r2,128
  811890:	10bfe004 	addi	r2,r2,-128
  811894:	10800bd8 	cmpnei	r2,r2,47
  811898:	1000031e 	bne	r2,zero,8118a8 <alt_find_file+0x6c>
    {
      len -= 1;
  81189c:	e0bffe17 	ldw	r2,-8(fp)
  8118a0:	10bfffc4 	addi	r2,r2,-1
  8118a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8118a8:	e0bffe17 	ldw	r2,-8(fp)
  8118ac:	e0fffd17 	ldw	r3,-12(fp)
  8118b0:	1885883a 	add	r2,r3,r2
  8118b4:	10800003 	ldbu	r2,0(r2)
  8118b8:	10803fcc 	andi	r2,r2,255
  8118bc:	1080201c 	xori	r2,r2,128
  8118c0:	10bfe004 	addi	r2,r2,-128
  8118c4:	10800be0 	cmpeqi	r2,r2,47
  8118c8:	1000081e 	bne	r2,zero,8118ec <alt_find_file+0xb0>
  8118cc:	e0bffe17 	ldw	r2,-8(fp)
  8118d0:	e0fffd17 	ldw	r3,-12(fp)
  8118d4:	1885883a 	add	r2,r3,r2
  8118d8:	10800003 	ldbu	r2,0(r2)
  8118dc:	10803fcc 	andi	r2,r2,255
  8118e0:	1080201c 	xori	r2,r2,128
  8118e4:	10bfe004 	addi	r2,r2,-128
  8118e8:	10000a1e 	bne	r2,zero,811914 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8118ec:	e0bfff17 	ldw	r2,-4(fp)
  8118f0:	10800217 	ldw	r2,8(r2)
  8118f4:	e0fffe17 	ldw	r3,-8(fp)
  8118f8:	180d883a 	mov	r6,r3
  8118fc:	e17ffd17 	ldw	r5,-12(fp)
  811900:	1009883a 	mov	r4,r2
  811904:	0811b680 	call	811b68 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  811908:	1000021e 	bne	r2,zero,811914 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  81190c:	e0bfff17 	ldw	r2,-4(fp)
  811910:	00000706 	br	811930 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  811914:	e0bfff17 	ldw	r2,-4(fp)
  811918:	10800017 	ldw	r2,0(r2)
  81191c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  811920:	e0ffff17 	ldw	r3,-4(fp)
  811924:	d0a00c04 	addi	r2,gp,-32720
  811928:	18bfcc1e 	bne	r3,r2,81185c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  81192c:	0005883a 	mov	r2,zero
}
  811930:	e037883a 	mov	sp,fp
  811934:	dfc00117 	ldw	ra,4(sp)
  811938:	df000017 	ldw	fp,0(sp)
  81193c:	dec00204 	addi	sp,sp,8
  811940:	f800283a 	ret

00811944 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811944:	defffc04 	addi	sp,sp,-16
  811948:	df000315 	stw	fp,12(sp)
  81194c:	df000304 	addi	fp,sp,12
  811950:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  811954:	00bffa04 	movi	r2,-24
  811958:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81195c:	e03fff15 	stw	zero,-4(fp)
  811960:	00001d06 	br	8119d8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  811964:	e0ffff17 	ldw	r3,-4(fp)
  811968:	1805883a 	mov	r2,r3
  81196c:	1085883a 	add	r2,r2,r2
  811970:	10c5883a 	add	r2,r2,r3
  811974:	100490ba 	slli	r2,r2,2
  811978:	00c02074 	movhi	r3,129
  81197c:	10c7883a 	add	r3,r2,r3
  811980:	188c8317 	ldw	r2,12812(r3)
  811984:	1000111e 	bne	r2,zero,8119cc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  811988:	e0ffff17 	ldw	r3,-4(fp)
  81198c:	1805883a 	mov	r2,r3
  811990:	1085883a 	add	r2,r2,r2
  811994:	10c5883a 	add	r2,r2,r3
  811998:	100490ba 	slli	r2,r2,2
  81199c:	e13ffd17 	ldw	r4,-12(fp)
  8119a0:	00c02074 	movhi	r3,129
  8119a4:	10c7883a 	add	r3,r2,r3
  8119a8:	190c8315 	stw	r4,12812(r3)
      if (i > alt_max_fd)
  8119ac:	d0e01017 	ldw	r3,-32704(gp)
  8119b0:	e0bfff17 	ldw	r2,-4(fp)
  8119b4:	1880020e 	bge	r3,r2,8119c0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8119b8:	e0bfff17 	ldw	r2,-4(fp)
  8119bc:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  8119c0:	e0bfff17 	ldw	r2,-4(fp)
  8119c4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8119c8:	00000706 	br	8119e8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  8119cc:	e0bfff17 	ldw	r2,-4(fp)
  8119d0:	10800044 	addi	r2,r2,1
  8119d4:	e0bfff15 	stw	r2,-4(fp)
  8119d8:	e0bfff17 	ldw	r2,-4(fp)
  8119dc:	10800810 	cmplti	r2,r2,32
  8119e0:	103fe01e 	bne	r2,zero,811964 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  8119e4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8119e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8119ec:	e037883a 	mov	sp,fp
  8119f0:	df000017 	ldw	fp,0(sp)
  8119f4:	dec00104 	addi	sp,sp,4
  8119f8:	f800283a 	ret

008119fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8119fc:	defffb04 	addi	sp,sp,-20
  811a00:	df000415 	stw	fp,16(sp)
  811a04:	df000404 	addi	fp,sp,16
  811a08:	e13ffd15 	stw	r4,-12(fp)
  811a0c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811a10:	e0bffc17 	ldw	r2,-16(fp)
  811a14:	10820070 	cmpltui	r2,r2,2049
  811a18:	1000021e 	bne	r2,zero,811a24 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811a1c:	00820004 	movi	r2,2048
  811a20:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  811a24:	e0fffd17 	ldw	r3,-12(fp)
  811a28:	e0bffc17 	ldw	r2,-16(fp)
  811a2c:	1885883a 	add	r2,r3,r2
  811a30:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811a34:	e0bffd17 	ldw	r2,-12(fp)
  811a38:	e0bfff15 	stw	r2,-4(fp)
  811a3c:	00000506 	br	811a54 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811a40:	e0bfff17 	ldw	r2,-4(fp)
  811a44:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811a48:	e0bfff17 	ldw	r2,-4(fp)
  811a4c:	10800804 	addi	r2,r2,32
  811a50:	e0bfff15 	stw	r2,-4(fp)
  811a54:	e0ffff17 	ldw	r3,-4(fp)
  811a58:	e0bffe17 	ldw	r2,-8(fp)
  811a5c:	18bff836 	bltu	r3,r2,811a40 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811a60:	e0bffd17 	ldw	r2,-12(fp)
  811a64:	108007cc 	andi	r2,r2,31
  811a68:	10000226 	beq	r2,zero,811a74 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811a6c:	e0bfff17 	ldw	r2,-4(fp)
  811a70:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811a74:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811a78:	0001883a 	nop
  811a7c:	e037883a 	mov	sp,fp
  811a80:	df000017 	ldw	fp,0(sp)
  811a84:	dec00104 	addi	sp,sp,4
  811a88:	f800283a 	ret

00811a8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811a8c:	defffe04 	addi	sp,sp,-8
  811a90:	df000115 	stw	fp,4(sp)
  811a94:	df000104 	addi	fp,sp,4
  811a98:	e13fff15 	stw	r4,-4(fp)
  811a9c:	e0bfff17 	ldw	r2,-4(fp)
  811aa0:	10bffe84 	addi	r2,r2,-6
  811aa4:	10c00428 	cmpgeui	r3,r2,16
  811aa8:	1800191e 	bne	r3,zero,811b10 <alt_exception_cause_generated_bad_addr+0x84>
  811aac:	100690ba 	slli	r3,r2,2
  811ab0:	00802074 	movhi	r2,129
  811ab4:	1885883a 	add	r2,r3,r2
  811ab8:	1086b017 	ldw	r2,6848(r2)
  811abc:	1000683a 	jmp	r2
  811ac0:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811ac4:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811ac8:	00811b10 	cmplti	r2,zero,1132
  811acc:	00811b10 	cmplti	r2,zero,1132
  811ad0:	00811b10 	cmplti	r2,zero,1132
  811ad4:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811ad8:	00811b08 	cmpgei	r2,zero,1132
  811adc:	00811b10 	cmplti	r2,zero,1132
  811ae0:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811ae4:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811ae8:	00811b10 	cmplti	r2,zero,1132
  811aec:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  811af0:	00811b08 	cmpgei	r2,zero,1132
  811af4:	00811b10 	cmplti	r2,zero,1132
  811af8:	00811b10 	cmplti	r2,zero,1132
  811afc:	00811b00 	call	811b0 <__alt_mem_sdram-0x77ee50>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  811b00:	00800044 	movi	r2,1
  811b04:	00000306 	br	811b14 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811b08:	0005883a 	mov	r2,zero
  811b0c:	00000106 	br	811b14 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  811b10:	0005883a 	mov	r2,zero
  }
}
  811b14:	e037883a 	mov	sp,fp
  811b18:	df000017 	ldw	fp,0(sp)
  811b1c:	dec00104 	addi	sp,sp,4
  811b20:	f800283a 	ret

00811b24 <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
  811b24:	200b883a 	mov	r5,r4
  811b28:	000f883a 	mov	r7,zero
  811b2c:	000d883a 	mov	r6,zero
  811b30:	0009883a 	mov	r4,zero
  811b34:	0811be01 	jmpi	811be0 <__register_exitproc>

00811b38 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
  811b38:	defffe04 	addi	sp,sp,-8
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
  811b3c:	000b883a 	mov	r5,zero
{
  811b40:	dc000015 	stw	r16,0(sp)
  811b44:	dfc00115 	stw	ra,4(sp)
  811b48:	2021883a 	mov	r16,r4
    __call_exitprocs (code, NULL);
  811b4c:	0811c6c0 	call	811c6c <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
  811b50:	d1200817 	ldw	r4,-32736(gp)
  811b54:	20800f17 	ldw	r2,60(r4)
  811b58:	10000126 	beq	r2,zero,811b60 <exit+0x28>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
  811b5c:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
  811b60:	8009883a 	mov	r4,r16
  811b64:	080f5040 	call	80f504 <_exit>

00811b68 <memcmp>:
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
  811b68:	30800130 	cmpltui	r2,r6,4
  811b6c:	10000b1e 	bne	r2,zero,811b9c <memcmp+0x34>
  811b70:	2144b03a 	or	r2,r4,r5
  811b74:	108000cc 	andi	r2,r2,3
  811b78:	1000171e 	bne	r2,zero,811bd8 <memcmp+0x70>
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
        {
          if (*a1 != *a2) 
  811b7c:	20c00017 	ldw	r3,0(r4)
  811b80:	28800017 	ldw	r2,0(r5)
  811b84:	1880141e 	bne	r3,r2,811bd8 <memcmp+0x70>
   	    break;
          a1++;
          a2++;
          n -= LBLOCKSIZE;
  811b88:	31bfff04 	addi	r6,r6,-4
      while (n >= LBLOCKSIZE)
  811b8c:	30800128 	cmpgeui	r2,r6,4
          a1++;
  811b90:	21000104 	addi	r4,r4,4
          a2++;
  811b94:	29400104 	addi	r5,r5,4
      while (n >= LBLOCKSIZE)
  811b98:	103ff81e 	bne	r2,zero,811b7c <memcmp+0x14>

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
  811b9c:	30bfffc4 	addi	r2,r6,-1
  811ba0:	30000b26 	beq	r6,zero,811bd0 <memcmp+0x68>
  811ba4:	11800044 	addi	r6,r2,1
  811ba8:	218d883a 	add	r6,r4,r6
  811bac:	00000106 	br	811bb4 <memcmp+0x4c>
  811bb0:	21800726 	beq	r4,r6,811bd0 <memcmp+0x68>
    {
      if (*s1 != *s2)
  811bb4:	20800003 	ldbu	r2,0(r4)
  811bb8:	28c00003 	ldbu	r3,0(r5)
	return *s1 - *s2;
      s1++;
  811bbc:	21000044 	addi	r4,r4,1
      s2++;
  811bc0:	29400044 	addi	r5,r5,1
      if (*s1 != *s2)
  811bc4:	10fffa26 	beq	r2,r3,811bb0 <memcmp+0x48>
	return *s1 - *s2;
  811bc8:	10c5c83a 	sub	r2,r2,r3
  811bcc:	f800283a 	ret
    }

  return 0;
  811bd0:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  811bd4:	f800283a 	ret
  while (n--)
  811bd8:	30bfffc4 	addi	r2,r6,-1
  811bdc:	003ff106 	br	811ba4 <memcmp+0x3c>

00811be0 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
  811be0:	d0e00817 	ldw	r3,-32736(gp)
  811be4:	18805217 	ldw	r2,328(r3)
  if (p == NULL)
  811be8:	10001726 	beq	r2,zero,811c48 <__register_exitproc+0x68>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
  811bec:	10c00117 	ldw	r3,4(r2)
  811bf0:	1a000808 	cmpgei	r8,r3,32
  811bf4:	40001b1e 	bne	r8,zero,811c64 <__register_exitproc+0x84>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
  811bf8:	20000b26 	beq	r4,zero,811c28 <__register_exitproc+0x48>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
  811bfc:	181090ba 	slli	r8,r3,2
      args->_fntypes |= (1 << p->_ind);
  811c00:	02400044 	movi	r9,1
  811c04:	48d2983a 	sll	r9,r9,r3
  811c08:	1211883a 	add	r8,r2,r8
      args->_fnargs[p->_ind] = arg;
  811c0c:	41802215 	stw	r6,136(r8)
      args->_fntypes |= (1 << p->_ind);
  811c10:	11806217 	ldw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
  811c14:	21000098 	cmpnei	r4,r4,2
      args->_fntypes |= (1 << p->_ind);
  811c18:	324cb03a 	or	r6,r6,r9
  811c1c:	11806215 	stw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
  811c20:	41c04215 	stw	r7,264(r8)
      if (type == __et_cxa)
  811c24:	20000b26 	beq	r4,zero,811c54 <__register_exitproc+0x74>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
  811c28:	19000084 	addi	r4,r3,2
  811c2c:	200890ba 	slli	r4,r4,2
  811c30:	18c00044 	addi	r3,r3,1
  811c34:	10c00115 	stw	r3,4(r2)
  811c38:	1105883a 	add	r2,r2,r4
  811c3c:	11400015 	stw	r5,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
  811c40:	0005883a 	mov	r2,zero
  811c44:	f800283a 	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  811c48:	18805304 	addi	r2,r3,332
  811c4c:	18805215 	stw	r2,328(r3)
  811c50:	003fe606 	br	811bec <__register_exitproc+0xc>
	args->_is_cxa |= (1 << p->_ind);
  811c54:	11006317 	ldw	r4,396(r2)
  811c58:	2252b03a 	or	r9,r4,r9
  811c5c:	12406315 	stw	r9,396(r2)
  811c60:	003ff106 	br	811c28 <__register_exitproc+0x48>
      return -1;
  811c64:	00bfffc4 	movi	r2,-1
}
  811c68:	f800283a 	ret

00811c6c <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
  811c6c:	defff704 	addi	sp,sp,-36
  811c70:	dcc00315 	stw	r19,12(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
  811c74:	d4e00817 	ldw	r19,-32736(gp)
{
  811c78:	dc800215 	stw	r18,8(sp)
  811c7c:	dfc00815 	stw	ra,32(sp)
  p = _GLOBAL_ATEXIT;
  811c80:	9c805217 	ldw	r18,328(r19)
{
  811c84:	ddc00715 	stw	r23,28(sp)
  811c88:	dd800615 	stw	r22,24(sp)
  811c8c:	dd400515 	stw	r21,20(sp)
  811c90:	dd000415 	stw	r20,16(sp)
  811c94:	dc400115 	stw	r17,4(sp)
  811c98:	dc000015 	stw	r16,0(sp)
  lastp = &_GLOBAL_ATEXIT;
  while (p)
  811c9c:	90001026 	beq	r18,zero,811ce0 <__call_exitprocs+0x74>
  811ca0:	202b883a 	mov	r21,r4
  811ca4:	282d883a 	mov	r22,r5
  811ca8:	05000044 	movi	r20,1
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
  811cac:	94000117 	ldw	r16,4(r18)
  811cb0:	847fffc4 	addi	r17,r16,-1
  811cb4:	88000a16 	blt	r17,zero,811ce0 <__call_exitprocs+0x74>
  811cb8:	84000044 	addi	r16,r16,1
  811cbc:	802090ba 	slli	r16,r16,2
  811cc0:	9421883a 	add	r16,r18,r16
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
  811cc4:	b0001126 	beq	r22,zero,811d0c <__call_exitprocs+0xa0>
  811cc8:	80804017 	ldw	r2,256(r16)
  811ccc:	15800f26 	beq	r2,r22,811d0c <__call_exitprocs+0xa0>
      for (n = p->_ind - 1; n >= 0; n--)
  811cd0:	8c7fffc4 	addi	r17,r17,-1
  811cd4:	88bfffd8 	cmpnei	r2,r17,-1
  811cd8:	843fff04 	addi	r16,r16,-4
  811cdc:	103ff91e 	bne	r2,zero,811cc4 <__call_exitprocs+0x58>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
  811ce0:	dfc00817 	ldw	ra,32(sp)
  811ce4:	ddc00717 	ldw	r23,28(sp)
  811ce8:	dd800617 	ldw	r22,24(sp)
  811cec:	dd400517 	ldw	r21,20(sp)
  811cf0:	dd000417 	ldw	r20,16(sp)
  811cf4:	dcc00317 	ldw	r19,12(sp)
  811cf8:	dc800217 	ldw	r18,8(sp)
  811cfc:	dc400117 	ldw	r17,4(sp)
  811d00:	dc000017 	ldw	r16,0(sp)
  811d04:	dec00904 	addi	sp,sp,36
  811d08:	f800283a 	ret
	  if (n == p->_ind - 1)
  811d0c:	90800117 	ldw	r2,4(r18)
	  fn = p->_fns[n];
  811d10:	81800017 	ldw	r6,0(r16)
	  if (n == p->_ind - 1)
  811d14:	10bfffc4 	addi	r2,r2,-1
  811d18:	14401726 	beq	r2,r17,811d78 <__call_exitprocs+0x10c>
	    p->_fns[n] = NULL;
  811d1c:	80000015 	stw	zero,0(r16)
	  if (!fn)
  811d20:	303feb26 	beq	r6,zero,811cd0 <__call_exitprocs+0x64>
	  i = 1 << n;
  811d24:	a446983a 	sll	r3,r20,r17
	  if (!args || (args->_fntypes & i) == 0)
  811d28:	90806217 	ldw	r2,392(r18)
	  ind = p->_ind;
  811d2c:	95c00117 	ldw	r23,4(r18)
	  if (!args || (args->_fntypes & i) == 0)
  811d30:	1884703a 	and	r2,r3,r2
  811d34:	1000081e 	bne	r2,zero,811d58 <__call_exitprocs+0xec>
	    fn ();
  811d38:	303ee83a 	callr	r6
	  if (ind != p->_ind || *lastp != p)
  811d3c:	90c00117 	ldw	r3,4(r18)
  p = _GLOBAL_ATEXIT;
  811d40:	98805217 	ldw	r2,328(r19)
	  if (ind != p->_ind || *lastp != p)
  811d44:	1dc0011e 	bne	r3,r23,811d4c <__call_exitprocs+0xe0>
  811d48:	90bfe126 	beq	r18,r2,811cd0 <__call_exitprocs+0x64>
  while (p)
  811d4c:	103fe426 	beq	r2,zero,811ce0 <__call_exitprocs+0x74>
  811d50:	1025883a 	mov	r18,r2
  811d54:	003fd506 	br	811cac <__call_exitprocs+0x40>
	  else if ((args->_is_cxa & i) == 0)
  811d58:	90806317 	ldw	r2,396(r18)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  811d5c:	81002017 	ldw	r4,128(r16)
	  else if ((args->_is_cxa & i) == 0)
  811d60:	1886703a 	and	r3,r3,r2
  811d64:	1800061e 	bne	r3,zero,811d80 <__call_exitprocs+0x114>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  811d68:	200b883a 	mov	r5,r4
  811d6c:	a809883a 	mov	r4,r21
  811d70:	303ee83a 	callr	r6
  811d74:	003ff106 	br	811d3c <__call_exitprocs+0xd0>
	    p->_ind--;
  811d78:	94400115 	stw	r17,4(r18)
  811d7c:	003fe806 	br	811d20 <__call_exitprocs+0xb4>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  811d80:	303ee83a 	callr	r6
  811d84:	003fed06 	br	811d3c <__call_exitprocs+0xd0>
