
task6_fp_mult.elf:     file format elf32-littlenios2
task6_fp_mult.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00011bb4 memsz 0x00011bb4 flags r-x
    LOAD off    0x00012bd4 vaddr 0x00811bd4 paddr 0x008138cc align 2**12
         filesz 0x00001cf8 memsz 0x00001cf8 flags rw-
    LOAD off    0x000155c4 vaddr 0x008155c4 paddr 0x008155c4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000112bc  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006e0  008114f4  008114f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf8  00811bd4  008138cc  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  008155c4  008155c4  000155c4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081571c  0081571c  000148cc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000148cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010a8  00000000  00000000  00014900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002f99c  00000000  00000000  000159a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b8fd  00000000  00000000  00045344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001928d  00000000  00000000  00050c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000024f4  00000000  00000000  00069ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004887  00000000  00000000  0006c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00021a23  00000000  00000000  00070c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  00092670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d18  00000000  00000000  000926a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00098896  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00098899  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009889c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009889d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009889e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000988a2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000988a6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000988aa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000988b3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000988bc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000988c5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000988d7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  0009890f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00040645  00000000  00000000  0009d9a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
008114f4 l    d  .rodata	00000000 .rodata
00811bd4 l    d  .rwdata	00000000 .rwdata
008155c4 l    d  .bss	00000000 .bss
0081571c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_fp_mult_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00800284 l     F .text	00000064 theFunction.constprop.0
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008028d0 l     F .text	000000c0 __sbprintf
0081168c l     O .rodata	00000010 blanks.1
0081167c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802af0 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008047f0 l     F .text	00000008 __fp_lock
00804804 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00811bd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008117a0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a140 l     F .text	000000c0 __sbprintf
008118c4 l     O .rodata	00000010 zeroes.0
008118d4 l     O .rodata	00000010 blanks.1
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080eaa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ebc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ec24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ed3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080ee28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ef90 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f07c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f25c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008138bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0080f4c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0080f57c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080f6bc l     F .text	00000034 alt_dev_reg
00812814 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f9b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080fbc0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810204 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008108fc l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00810a4c l     F .text	0000003c alt_get_errno
00810a88 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008155f0 g     O .bss	00000004 alt_instruction_exception_handler
00807e78 g     F .text	00000070 _mprec_log10
00807f64 g     F .text	00000060 __any_on
0080ac70 g     F .text	00000050 _isatty_r
008117ac g     O .rodata	00000028 __mprec_tinytens
0080f198 g     F .text	0000007c alt_main
008006fc g     F .text	000000cc _puts_r
0081561c g     O .bss	00000100 alt_irq
0080acc0 g     F .text	0000005c _lseek_r
008138cc g       *ABS*	00000000 __flash_rwdata_start
0080d630 g     F .text	00000080 .hidden __eqdf2
0081571c g       *ABS*	00000000 __alt_heap_start
00813884 g     O .rwdata	00000004 c_term1
0080b5f4 g     F .text	00000058 _kill_r
008006c8 g     F .text	00000034 printf
0080b010 g     F .text	0000006c _wcrtomb_r
0080b174 g     F .text	00000098 _signal_r
00808654 g     F .text	0000005c __sseek
00804b40 g     F .text	00000170 __sinit
0080ad7c g     F .text	00000148 __swbuf_r
0080573c g     F .text	00000074 _setlocale_r
0080480c g     F .text	00000078 __sfmoreglue
0080f238 g     F .text	00000024 __malloc_unlock
008064e0 g     F .text	000001c4 memmove
00804b30 g     F .text	00000010 _cleanup
008067a4 g     F .text	000000a4 _Balloc
00813888 g     O .rwdata	00000004 coeff3
0080d6b0 g     F .text	000000e8 .hidden __gtdf2
00810e70 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0080f504 g     F .text	00000078 times
0080571c g     F .text	00000008 __localeconv_l
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080ac18 g     F .text	00000058 _fstat_r
008155d4 g     O .bss	00000004 errno
008085cc g     F .text	00000008 __seofread
008155dc g     O .bss	00000004 alt_argv
0081b874 g       *ABS*	00000000 _gp
0080ed1c g     F .text	00000020 getpid
00812694 g     O .rwdata	00000180 alt_fd_list
00810e94 g     F .text	00000090 alt_find_dev
00806354 g     F .text	0000018c memcpy
008047f8 g     F .text	0000000c _cleanup_r
0080e960 g     F .text	000000b8 .hidden __floatsidf
008109d0 g     F .text	0000007c alt_io_redirect
0080d798 g     F .text	000000e8 .hidden __ltdf2
008114f4 g       *ABS*	00000000 __DTOR_END__
008007c8 g     F .text	000000c0 puts
00811174 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00807cc4 g     F .text	000001b4 __ratio
00813874 g     O .rwdata	00000004 c_term5
0080a128 g     F .text	00000018 __vfiprintf_internal
0080fdbc g     F .text	00000220 altera_avalon_jtag_uart_read
00800698 g     F .text	00000030 _printf_r
0080c328 g     F .text	00000064 .hidden __udivsi3
0080ed78 g     F .text	000000b0 isatty
0080b20c g     F .text	000000c4 _raise_r
0080a2e8 g     F .text	00000060 __assert_func
008117fc g     O .rodata	000000c8 __mprec_tens
008110e4 g     F .text	00000090 alt_icache_flush
008155d0 g     O .bss	00000004 __malloc_top_pad
0080b64c g     F .text	00000004 _getpid_r
00805724 g     F .text	0000000c _localeconv_r
00806d08 g     F .text	000000b0 __i2b
008050ec g     F .text	000004f0 __sfvwrite_r
0080b2d0 g     F .text	000000bc __sigtramp_r
00808528 g     F .text	00000050 _sbrk_r
0080ad1c g     F .text	0000005c _read_r
008138b4 g     O .rwdata	00000004 alt_max_fd
0080a420 g     F .text	000000f8 _fclose_r
00804774 g     F .text	0000007c fflush
008155cc g     O .bss	00000004 __malloc_max_sbrked_mem
00800548 g     F .text	000000fc .hidden __extendsfdf2
0080c410 g     F .text	000008f0 .hidden __adddf3
00807814 g     F .text	0000015c __b2d
0080bc70 g     F .text	000005c4 .hidden __umoddi3
0080f0b8 g     F .text	000000e0 lseek
00813894 g     O .rwdata	00000004 _global_impure_ptr
00807fc4 g     F .text	00000564 _realloc_r
0081571c g       *ABS*	00000000 __bss_end
00810814 g     F .text	000000e8 alt_iic_isr_register
00810d68 g     F .text	00000108 alt_tick
0080b650 g     F .text	00000620 .hidden __udivdi3
0080a830 g     F .text	000001e8 _fputwc_r
008117d4 g     O .rodata	00000028 __mprec_bigtens
00806a20 g     F .text	000001c4 __s2b
0080b100 g     F .text	00000018 abort
0080ea18 g     F .text	00000090 .hidden __floatunsidf
0080746c g     F .text	00000058 __mcmp
00804cc0 g     F .text	00000010 __fp_lock_all
008107c8 g     F .text	0000004c alt_ic_irq_enabled
00810cc4 g     F .text	000000a4 alt_alarm_stop
008155e4 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
0081266c g     O .rwdata	00000028 alt_dev_null
00810438 g     F .text	0000004c alt_dcache_flush_all
00806be4 g     F .text	0000006c __hi0bits
0080e8e0 g     F .text	00000080 .hidden __fixdfsi
008138cc g       *ABS*	00000000 __ram_rwdata_end
008138ac g     O .rwdata	00000008 alt_dev_list
0080f5b8 g     F .text	00000104 write
00811bd4 g       *ABS*	00000000 __ram_rodata_end
0080ec60 g     F .text	000000bc fstat
0080ee64 g     F .text	0000012c kill
00813878 g     O .rwdata	00000004 c_term4
0080d798 g     F .text	000000e8 .hidden __ledf2
0080034c g     F .text	00000070 theFunction
008070e0 g     F .text	00000194 __pow5mult
00808860 g     F .text	000018c8 ___vfiprintf_internal_r
0080c38c g     F .text	0000005c .hidden __umodsi3
0081571c g       *ABS*	00000000 end
0080f8f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
008114f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810280 g     F .text	00000084 alt_avalon_timer_sc_init
00800644 g     F .text	00000054 .hidden __clzsi2
0080ffdc g     F .text	00000228 altera_avalon_jtag_uart_write
00804cb0 g     F .text	00000004 __sfp_lock_acquire
00806284 g     F .text	000000d0 memchr
00800920 g     F .text	00001f98 ___vfprintf_internal_r
00804df8 g     F .text	000002f4 _free_r
00811a28 g     O .rodata	00000180 _ctype_b
008057b0 g     F .text	0000000c __locale_mb_cur_max
00811354 g     F .text	000001a0 __call_exitprocs
0081389c g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
008155e8 g     O .bss	00000004 _alt_tick_rate
00807274 g     F .text	000001f8 __lshift
008155ec g     O .bss	00000004 _alt_nticks
0080b444 g     F .text	0000009c signal
0080f298 g     F .text	00000108 read
0080f72c g     F .text	00000064 alt_sys_init
008112c8 g     F .text	0000008c __register_exitproc
00806db8 g     F .text	00000328 __multiply
0080fc60 g     F .text	00000068 altera_avalon_jtag_uart_close
0080c3e8 g     F .text	00000028 .hidden __mulsi3
00811bd4 g       *ABS*	00000000 __ram_rwdata_start
008114f4 g       *ABS*	00000000 __ram_rodata_start
008155f4 g     O .bss	00000028 __malloc_current_mallinfo
00807970 g     F .text	00000354 __d2b
00813880 g     O .rwdata	00000004 c_term2
0080f790 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081102c g     F .text	000000b8 alt_get_fd
0080a298 g     F .text	00000050 _close_r
008002e8 g     F .text	00000030 generateVector
00811250 g     F .text	00000078 memcmp
0080f850 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081571c g       *ABS*	00000000 __alt_stack_base
0080f8a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802990 g     F .text	00000160 __swsetup_r
0080cd00 g     F .text	00000930 .hidden __divdf3
00804884 g     F .text	000002ac __sfp
00807ee8 g     F .text	0000007c __copybits
00812164 g     O .rwdata	00000408 __malloc_av_
00804cbc g     F .text	00000004 __sinit_lock_release
0080d880 g     F .text	000007ac .hidden __muldf3
00808578 g     F .text	00000054 __sread
00810f24 g     F .text	00000108 alt_find_file
008104c0 g     F .text	000000a8 alt_dev_llist_insert
0080f214 g     F .text	00000024 __malloc_lock
0080f410 g     F .text	000000b8 sbrk
00804714 g     F .text	00000060 _fflush_r
0080a35c g     F .text	000000c4 _calloc_r
0081256c g     O .rwdata	00000100 .hidden __divsi3_table
008155c4 g       *ABS*	00000000 __bss_start
008066a4 g     F .text	00000100 memset
008003bc g     F .text	0000018c main
008155e0 g     O .bss	00000004 alt_envp
008155c8 g     O .bss	00000004 __malloc_max_total_mem
0080f7f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080aec4 g     F .text	0000014c __swbuf
008086b0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080a518 g     F .text	000000fc fclose
00802d10 g     F .text	000017dc _dtoa_r
00805a74 g     F .text	000007c0 _malloc_r
0080a20c g     F .text	00000030 __ascii_wctomb
008138b8 g     O .rwdata	00000004 alt_errno
0080a614 g     F .text	00000020 _fiprintf_r
0080b4e0 g     F .text	0000005c _init_signal
008055dc g     F .text	00000098 _fwalk
00806234 g     F .text	0000000c _mbtowc_r
0080c234 g     F .text	00000080 .hidden __divsi3
00804ce0 g     F .text	00000118 _malloc_trim_r
008114f4 g       *ABS*	00000000 __CTOR_END__
008086b8 g     F .text	000000b8 strcmp
008114f4 g       *ABS*	00000000 __flash_rodata_start
008114f4 g       *ABS*	00000000 __DTOR_LIST__
0080d630 g     F .text	00000080 .hidden __nedf2
0080f6f0 g     F .text	0000003c alt_irq_init
0080f3a0 g     F .text	00000070 alt_release_fd
00811548 g     O .rodata	00000100 .hidden __clz_tab
008155c4 g     O .bss	00000004 _PathLocale
0081120c g     F .text	00000014 atexit
00800318 g     F .text	00000034 sumVector
0080a23c g     F .text	0000005c _write_r
0081388c g     O .rwdata	00000004 coeff2
008057bc g     F .text	00000074 setlocale
00813898 g     O .rwdata	00000004 _impure_ptr
008155d8 g     O .bss	00000004 alt_argc
008044ec g     F .text	00000228 __sflush_r
008105cc g     F .text	00000064 _do_dtors
0081387c g     O .rwdata	00000004 c_term3
00800020 g       .exceptions	00000000 alt_irq_entry
00806240 g     F .text	00000044 __ascii_mbtowc
008077b8 g     F .text	0000005c __ulp
00804cd0 g     F .text	00000010 __fp_unlock_all
008138a4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805730 g     F .text	0000000c localeconv
008059dc g     F .text	00000098 __swhatbuf_r
00810664 g     F .text	00000050 alt_ic_isr_register
008138cc g       *ABS*	00000000 _edata
0081571c g       *ABS*	00000000 _end
0080a668 g     F .text	000001c8 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
0080fcc8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0081073c g     F .text	0000008c alt_ic_irq_disable
008085d4 g     F .text	00000080 __swrite
008138a0 g     O .rwdata	00000004 __malloc_trim_threshold
00811220 g     F .text	00000030 exit
0080a634 g     F .text	00000034 fiprintf
0080ad78 g     F .text	00000004 _vfiprintf_r
00805674 g     F .text	000000a8 _fwalk_reent
008074c4 g     F .text	000002f4 __mdiff
0080c2b4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804cb4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00811924 g     O .rodata	00000101 _ctype_
0080ebec g     F .text	00000038 _exit
00810304 g     F .text	00000134 alt_alarm_start
00805830 g     F .text	000001ac __smakebuf_r
00800888 g     F .text	00000098 strlen
0080b118 g     F .text	0000005c _init_signal_r
00810b64 g     F .text	00000160 open
0080d6b0 g     F .text	000000e8 .hidden __gedf2
0080a348 g     F .text	00000014 __assert
00808770 g     F .text	000000f0 __sprint_r
00810630 g     F .text	00000034 alt_icache_flush_all
008138c0 g     O .rwdata	00000004 alt_priority_mask
008106b4 g     F .text	00000088 alt_ic_irq_enable
008028b8 g     F .text	00000018 __vfprintf_internal
0080a200 g     F .text	0000000c _wctomb_r
0080e02c g     F .text	000008b4 .hidden __subdf3
00806c50 g     F .text	000000b8 __lo0bits
008138c4 g     O .rwdata	00000008 alt_alarm_list
00810568 g     F .text	00000064 _do_ctors
0080b53c g     F .text	000000b8 __sigtramp
0080b07c g     F .text	00000084 wcrtomb
00813890 g     O .rwdata	00000004 coeff1
0080eae4 g     F .text	000000dc close
00811ff8 g     O .rwdata	0000016c __global_locale
0080eff8 g     F .text	00000084 alt_load
0080aa18 g     F .text	00000200 fputwc
0080b38c g     F .text	000000b8 raise
00804cb8 g     F .text	00000004 __sinit_lock_acquire
0080686c g     F .text	000001b4 __multadd
00806848 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10d58717 	ldw	r3,22044(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	10958817 	ldw	r2,22048(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a75f17 	ldw	r2,-25220(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a75f17 	ldw	r2,-25220(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6ae1d14 	ori	gp,gp,47220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	10957114 	ori	r2,r2,21956

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18d5c714 	ori	r3,r3,22300

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	080eff80 	call	80eff8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	080f1980 	call	80f198 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <theFunction.constprop.0>:
      c_term5 = - 1 / 3628800.0f;

float theFunction(float x[0], int M) {
  float sum = 0;
  int i = 0;
  for (; i < M; i++) 
  800284:	02000434 	movhi	r8,16
  800288:	423c0104 	addi	r8,r8,-4092

    const float cos_term = (x[i] - 128.0f) * coeff2;
    const float cos_2 = cos_term * cos_term;
    const float cos_4 = cos_2 * cos_2;

    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  80028c:	024f4af4 	movhi	r9,15659
  800290:	2211883a 	add	r8,r4,r8
  float sum = 0;
  800294:	0005883a 	mov	r2,zero
    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  800298:	4a6aaac4 	addi	r9,r9,-21845
    const float cos_term = (x[i] - 128.0f) * coeff2;
  80029c:	21800017 	ldw	r6,0(r4)
  8002a0:	00d0c034 	movhi	r3,17152
  8002a4:	014f0034 	movhi	r5,15360
  8002a8:	30c7c0b2 	custom	2,r3,r6,r3
  8002ac:	1947c032 	custom	0,r3,r3,r5
    const float cos_2 = cos_term * cos_term;
  8002b0:	18cbc032 	custom	0,r5,r3,r3
    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  8002b4:	2a47c032 	custom	0,r3,r5,r9
  8002b8:	01cfc034 	movhi	r7,16128
  8002bc:	19c7c0b2 	custom	2,r3,r3,r7
  8002c0:	1947c032 	custom	0,r3,r3,r5
  8002c4:	1987c032 	custom	0,r3,r3,r6
    sum += x[i] * coeff1 + x[i] * x[i] * cosine;
  8002c8:	1987c072 	custom	1,r3,r3,r6
  8002cc:	014fc034 	movhi	r5,16128
  8002d0:	1947c072 	custom	1,r3,r3,r5
  8002d4:	1987c032 	custom	0,r3,r3,r6
  for (; i < M; i++) 
  8002d8:	21000104 	addi	r4,r4,4
    sum += x[i] * coeff1 + x[i] * x[i] * cosine;
  8002dc:	10c5c072 	custom	1,r2,r2,r3
  for (; i < M; i++) 
  8002e0:	413fee1e 	bne	r8,r4,80029c <theFunction.constprop.0+0x18>

    // sum += (coeff1 * x[i] + x[i] * x[i] * cosf((x[i] - 128.0f) * coeff2));
  }

  return sum;
}
  8002e4:	f800283a 	ret

008002e8 <generateVector>:
  x[0] = 0;
  8002e8:	01400434 	movhi	r5,16
  8002ec:	297c0104 	addi	r5,r5,-4092
  8002f0:	20000015 	stw	zero,0(r4)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  8002f4:	20800104 	addi	r2,r4,4
  8002f8:	214b883a 	add	r5,r4,r5
  x[0] = 0;
  8002fc:	0007883a 	mov	r3,zero
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
  800300:	010ea034 	movhi	r4,14976
  800304:	1907c072 	custom	1,r3,r3,r4
  800308:	10c00015 	stw	r3,0(r2)
  80030c:	10800104 	addi	r2,r2,4
  800310:	117ffb1e 	bne	r2,r5,800300 <generateVector+0x18>
}
  800314:	f800283a 	ret

00800318 <sumVector>:
  for (; i < M; i++) 
  800318:	01400a0e 	bge	zero,r5,800344 <sumVector+0x2c>
  80031c:	280a90ba 	slli	r5,r5,2
  float sum = 0;
  800320:	0005883a 	mov	r2,zero
  800324:	214d883a 	add	r6,r4,r5
    sum += (x[i] + x[i] * x[i]);
  800328:	21400017 	ldw	r5,0(r4)
  for (; i < M; i++) 
  80032c:	21000104 	addi	r4,r4,4
    sum += (x[i] + x[i] * x[i]);
  800330:	2947c032 	custom	0,r3,r5,r5
  800334:	1947c072 	custom	1,r3,r3,r5
  800338:	10c5c072 	custom	1,r2,r2,r3
  for (; i < M; i++) 
  80033c:	313ffa1e 	bne	r6,r4,800328 <sumVector+0x10>
  800340:	f800283a 	ret
  float sum = 0;
  800344:	0005883a 	mov	r2,zero
}
  800348:	f800283a 	ret

0080034c <theFunction>:
  for (; i < M; i++) 
  80034c:	0140190e 	bge	zero,r5,8003b4 <theFunction+0x68>
  800350:	280a90ba 	slli	r5,r5,2
    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  800354:	024f4af4 	movhi	r9,15659
  800358:	200d883a 	mov	r6,r4
  80035c:	2151883a 	add	r8,r4,r5
  float sum = 0;
  800360:	0005883a 	mov	r2,zero
    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  800364:	4a6aaac4 	addi	r9,r9,-21845
    const float cos_term = (x[i] - 128.0f) * coeff2;
  800368:	31400017 	ldw	r5,0(r6)
  80036c:	00d0c034 	movhi	r3,17152
  800370:	010f0034 	movhi	r4,15360
  800374:	28c7c0b2 	custom	2,r3,r5,r3
  800378:	1907c032 	custom	0,r3,r3,r4
    const float cos_2 = cos_term * cos_term;
  80037c:	18c9c032 	custom	0,r4,r3,r3
    const float cosine = 1 + cos_2 * c_term1 + cos_4 * c_term2;
  800380:	2247c032 	custom	0,r3,r4,r9
  800384:	01cfc034 	movhi	r7,16128
  800388:	19c7c0b2 	custom	2,r3,r3,r7
  80038c:	1907c032 	custom	0,r3,r3,r4
  800390:	1947c032 	custom	0,r3,r3,r5
    sum += x[i] * coeff1 + x[i] * x[i] * cosine;
  800394:	1947c072 	custom	1,r3,r3,r5
  800398:	010fc034 	movhi	r4,16128
  80039c:	1907c072 	custom	1,r3,r3,r4
  8003a0:	1947c032 	custom	0,r3,r3,r5
  for (; i < M; i++) 
  8003a4:	31800104 	addi	r6,r6,4
    sum += x[i] * coeff1 + x[i] * x[i] * cosine;
  8003a8:	10c5c072 	custom	1,r2,r2,r3
  for (; i < M; i++) 
  8003ac:	41bfee1e 	bne	r8,r6,800368 <theFunction+0x1c>
  8003b0:	f800283a 	ret
  float sum = 0;
  8003b4:	0005883a 	mov	r2,zero
}
  8003b8:	f800283a 	ret

008003bc <main>:

int main(int argc, char* argv[])
{
  8003bc:	023ffc34 	movhi	r8,65520
  8003c0:	4203f804 	addi	r8,r8,4064
  8003c4:	defffd04 	addi	sp,sp,-12
  const int numIterations = NUM_CASES;
  printf("Task 3!\n");
  8003c8:	01002074 	movhi	r4,129
{
  8003cc:	dfc00215 	stw	ra,8(sp)
  8003d0:	dc400115 	stw	r17,4(sp)
  8003d4:	dc000015 	stw	r16,0(sp)
  printf("Task 3!\n");
  8003d8:	21053d04 	addi	r4,r4,5364
{
  8003dc:	da37883a 	add	sp,sp,r8
  printf("Task 3!\n");
  8003e0:	08007c80 	call	8007c8 <puts>
  // printf("Ticks per second: %ld\n", alt_ticks_per_second());
  printf("Running %d tests\n", numIterations);
  8003e4:	01002074 	movhi	r4,129
  8003e8:	01400284 	movi	r5,10
  8003ec:	21053f04 	addi	r4,r4,5372
  8003f0:	08006c80 	call	8006c8 <printf>


  // Returned result
  volatile float y;

  generateVector(x);
  8003f4:	00800434 	movhi	r2,16
  8003f8:	d8c00304 	addi	r3,sp,12
  8003fc:	047ffc34 	movhi	r17,65520
  800400:	10bc0504 	addi	r2,r2,-4076
  800404:	10c5883a 	add	r2,r2,r3
  800408:	8c43ff04 	addi	r17,r17,4092
  80040c:	1463883a 	add	r17,r2,r17
  800410:	8809883a 	mov	r4,r17
  800414:	08002e80 	call	8002e8 <generateVector>

  volatile clock_t exec_t1, exec_t2;

  // const int numIterations = 1 << TEST_REPEAT;

  exec_t1 = times(NULL);
  800418:	0009883a 	mov	r4,zero
  80041c:	080f5040 	call	80f504 <times>
  800420:	01400434 	movhi	r5,16
  800424:	013ffc34 	movhi	r4,65520
  800428:	297c0504 	addi	r5,r5,-4076
  80042c:	d9800304 	addi	r6,sp,12
  800430:	298b883a 	add	r5,r5,r6
  800434:	2103fc04 	addi	r4,r4,4080

  int y1 = 0;

  for (int i = 0; i < numIterations; i++) {
    y = theFunction(x, N);
  800438:	00fffc34 	movhi	r3,65520
  exec_t1 = times(NULL);
  80043c:	2909883a 	add	r4,r5,r4
    y = theFunction(x, N);
  800440:	18c3fb04 	addi	r3,r3,4076
  exec_t1 = times(NULL);
  800444:	20800015 	stw	r2,0(r4)
    y = theFunction(x, N);
  800448:	28c5883a 	add	r2,r5,r3
  exec_t1 = times(NULL);
  80044c:	04000284 	movi	r16,10
    y = theFunction(x, N);
  800450:	d8800015 	stw	r2,0(sp)
  800454:	8809883a 	mov	r4,r17
  800458:	08002840 	call	800284 <theFunction.constprop.0>
  80045c:	d8c00017 	ldw	r3,0(sp)
  for (int i = 0; i < numIterations; i++) {
  800460:	843fffc4 	addi	r16,r16,-1
    y = theFunction(x, N);
  800464:	18800015 	stw	r2,0(r3)
  for (int i = 0; i < numIterations; i++) {
  800468:	803ffa1e 	bne	r16,zero,800454 <main+0x98>
  }

  // till here
  exec_t2 = times(NULL);
  80046c:	0009883a 	mov	r4,zero
  800470:	080f5040 	call	80f504 <times>
  800474:	01400434 	movhi	r5,16
  800478:	d9800304 	addi	r6,sp,12
  80047c:	013ffc34 	movhi	r4,65520
  800480:	297c0504 	addi	r5,r5,-4076
  800484:	298b883a 	add	r5,r5,r6
  800488:	2103fd04 	addi	r4,r4,4084

  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  80048c:	00fffc34 	movhi	r3,65520
  exec_t2 = times(NULL);
  800490:	2909883a 	add	r4,r5,r4
  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  800494:	18c3fc04 	addi	r3,r3,4080
  exec_t2 = times(NULL);
  800498:	20800015 	stw	r2,0(r4)
  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  80049c:	28c5883a 	add	r2,r5,r3
  exec_t2 = times(NULL);
  8004a0:	d9000115 	stw	r4,4(sp)
  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  8004a4:	d8800215 	stw	r2,8(sp)
  8004a8:	d8c00217 	ldw	r3,8(sp)
  8004ac:	d8800117 	ldw	r2,4(sp)
  8004b0:	01400434 	movhi	r5,16
  8004b4:	297c0504 	addi	r5,r5,-4076
  8004b8:	10800017 	ldw	r2,0(r2)
  8004bc:	19000017 	ldw	r4,0(r3)
  8004c0:	00fffc34 	movhi	r3,65520
  8004c4:	298b883a 	add	r5,r5,r6
  8004c8:	18c3fe04 	addi	r3,r3,4088
  8004cc:	28c7883a 	add	r3,r5,r3
  8004d0:	1105c83a 	sub	r2,r2,r4
  8004d4:	18800015 	stw	r2,0(r3)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  8004d8:	19400017 	ldw	r5,0(r3)
  8004dc:	01002074 	movhi	r4,129
  8004e0:	21054404 	addi	r4,r4,5392
  volatile int elapsedTicks = (int)(exec_t2 - exec_t1);
  8004e4:	d8c00115 	stw	r3,4(sp)
  printf("ElpasedTicks: %d\n", elapsedTicks);
  8004e8:	08006c80 	call	8006c8 <printf>
  printf("RESULT: %f, %x\n", y, *(int*)(&y));
  8004ec:	d8800017 	ldw	r2,0(sp)
  8004f0:	11000017 	ldw	r4,0(r2)
  8004f4:	08005480 	call	800548 <__extendsfdf2>
  8004f8:	d9000017 	ldw	r4,0(sp)
  8004fc:	180d883a 	mov	r6,r3
  800500:	100b883a 	mov	r5,r2
  800504:	21c00017 	ldw	r7,0(r4)
  800508:	01002074 	movhi	r4,129
  80050c:	21054904 	addi	r4,r4,5412
  800510:	08006c80 	call	8006c8 <printf>
  printf("Num Iterations: %d\n", y1);
  800514:	01002074 	movhi	r4,129
  800518:	000b883a 	mov	r5,zero
  80051c:	21054d04 	addi	r4,r4,5428
  800520:	08006c80 	call	8006c8 <printf>
  // printf("Total ticks %d for %d iters\n", elapsedTicks , numIterations);
  // printf("Time Taken: %f\n",(float) elapsedTicks/numIterations);


  return 0;
}
  800524:	0005883a 	mov	r2,zero
  800528:	02000434 	movhi	r8,16
  80052c:	423c0804 	addi	r8,r8,-4064
  800530:	da37883a 	add	sp,sp,r8
  800534:	dfc00217 	ldw	ra,8(sp)
  800538:	dc400117 	ldw	r17,4(sp)
  80053c:	dc000017 	ldw	r16,0(sp)
  800540:	dec00304 	addi	sp,sp,12
  800544:	f800283a 	ret

00800548 <__extendsfdf2>:
  800548:	200ad5fa 	srli	r5,r4,23
  80054c:	defffd04 	addi	sp,sp,-12
  800550:	dc000015 	stw	r16,0(sp)
  800554:	29403fcc 	andi	r5,r5,255
  800558:	04002034 	movhi	r16,128
  80055c:	28800044 	addi	r2,r5,1
  800560:	dc400115 	stw	r17,4(sp)
  800564:	843fffc4 	addi	r16,r16,-1
  800568:	dfc00215 	stw	ra,8(sp)
  80056c:	10803f8c 	andi	r2,r2,254
  800570:	2022d7fa 	srli	r17,r4,31
  800574:	8120703a 	and	r16,r16,r4
  800578:	10000d26 	beq	r2,zero,8005b0 <__extendsfdf2+0x68>
  80057c:	8008d0fa 	srli	r4,r16,3
  800580:	8020977a 	slli	r16,r16,29
  800584:	28c0e004 	addi	r3,r5,896
  800588:	180a953a 	slli	r5,r3,20
  80058c:	880697fa 	slli	r3,r17,31
  800590:	8005883a 	mov	r2,r16
  800594:	290ab03a 	or	r5,r5,r4
  800598:	28c6b03a 	or	r3,r5,r3
  80059c:	dfc00217 	ldw	ra,8(sp)
  8005a0:	dc400117 	ldw	r17,4(sp)
  8005a4:	dc000017 	ldw	r16,0(sp)
  8005a8:	dec00304 	addi	sp,sp,12
  8005ac:	f800283a 	ret
  8005b0:	2800111e 	bne	r5,zero,8005f8 <__extendsfdf2+0xb0>
  8005b4:	80001926 	beq	r16,zero,80061c <__extendsfdf2+0xd4>
  8005b8:	8009883a 	mov	r4,r16
  8005bc:	08006440 	call	800644 <__clzsi2>
  8005c0:	10c002c8 	cmpgei	r3,r2,11
  8005c4:	18001b1e 	bne	r3,zero,800634 <__extendsfdf2+0xec>
  8005c8:	010002c4 	movi	r4,11
  8005cc:	2089c83a 	sub	r4,r4,r2
  8005d0:	10c00544 	addi	r3,r2,21
  8005d4:	810ad83a 	srl	r5,r16,r4
  8005d8:	80e0983a 	sll	r16,r16,r3
  8005dc:	01000434 	movhi	r4,16
  8005e0:	00c0e244 	movi	r3,905
  8005e4:	213fffc4 	addi	r4,r4,-1
  8005e8:	1887c83a 	sub	r3,r3,r2
  8005ec:	2908703a 	and	r4,r5,r4
  8005f0:	18c1ffcc 	andi	r3,r3,2047
  8005f4:	003fe406 	br	800588 <__extendsfdf2+0x40>
  8005f8:	80000b26 	beq	r16,zero,800628 <__extendsfdf2+0xe0>
  8005fc:	800ad0fa 	srli	r5,r16,3
  800600:	00800434 	movhi	r2,16
  800604:	10bfffc4 	addi	r2,r2,-1
  800608:	29000234 	orhi	r4,r5,8
  80060c:	8020977a 	slli	r16,r16,29
  800610:	2088703a 	and	r4,r4,r2
  800614:	00c1ffc4 	movi	r3,2047
  800618:	003fdb06 	br	800588 <__extendsfdf2+0x40>
  80061c:	0007883a 	mov	r3,zero
  800620:	0009883a 	mov	r4,zero
  800624:	003fd806 	br	800588 <__extendsfdf2+0x40>
  800628:	00c1ffc4 	movi	r3,2047
  80062c:	0009883a 	mov	r4,zero
  800630:	003fd506 	br	800588 <__extendsfdf2+0x40>
  800634:	113ffd44 	addi	r4,r2,-11
  800638:	810a983a 	sll	r5,r16,r4
  80063c:	0021883a 	mov	r16,zero
  800640:	003fe606 	br	8005dc <__extendsfdf2+0x94>

00800644 <__clzsi2>:
  800644:	00bfffd4 	movui	r2,65535
  800648:	11000436 	bltu	r2,r4,80065c <__clzsi2+0x18>
  80064c:	20804030 	cmpltui	r2,r4,256
  800650:	10000e26 	beq	r2,zero,80068c <__clzsi2+0x48>
  800654:	01400804 	movi	r5,32
  800658:	00000406 	br	80066c <__clzsi2+0x28>
  80065c:	00804034 	movhi	r2,256
  800660:	20800736 	bltu	r4,r2,800680 <__clzsi2+0x3c>
  800664:	2008d63a 	srli	r4,r4,24
  800668:	01400204 	movi	r5,8
  80066c:	00c02074 	movhi	r3,129
  800670:	20c7883a 	add	r3,r4,r3
  800674:	18855203 	ldbu	r2,5448(r3)
  800678:	2885c83a 	sub	r2,r5,r2
  80067c:	f800283a 	ret
  800680:	2008d43a 	srli	r4,r4,16
  800684:	01400404 	movi	r5,16
  800688:	003ff806 	br	80066c <__clzsi2+0x28>
  80068c:	2008d23a 	srli	r4,r4,8
  800690:	01400604 	movi	r5,24
  800694:	003ff506 	br	80066c <__clzsi2+0x28>

00800698 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
  800698:	defffd04 	addi	sp,sp,-12
  80069c:	2805883a 	mov	r2,r5
  8006a0:	dfc00015 	stw	ra,0(sp)
  8006a4:	d9800115 	stw	r6,4(sp)
  8006a8:	d9c00215 	stw	r7,8(sp)
  va_start (ap, fmt);
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
  8006ac:	21400217 	ldw	r5,8(r4)
  8006b0:	d9c00104 	addi	r7,sp,4
  8006b4:	100d883a 	mov	r6,r2
  8006b8:	08009200 	call	800920 <___vfprintf_internal_r>
  va_end (ap);
  return ret;
}
  8006bc:	dfc00017 	ldw	ra,0(sp)
  8006c0:	dec00304 	addi	sp,sp,12
  8006c4:	f800283a 	ret

008006c8 <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
  8006c8:	defffc04 	addi	sp,sp,-16
  8006cc:	dfc00015 	stw	ra,0(sp)
  8006d0:	d9400115 	stw	r5,4(sp)
  8006d4:	d9800215 	stw	r6,8(sp)
  8006d8:	d9c00315 	stw	r7,12(sp)
  va_start (ap, fmt);
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
  8006dc:	d0a00917 	ldw	r2,-32732(gp)
  8006e0:	200b883a 	mov	r5,r4
  8006e4:	d9800104 	addi	r6,sp,4
  8006e8:	11000217 	ldw	r4,8(r2)
  8006ec:	08028b80 	call	8028b8 <__vfprintf_internal>
  va_end (ap);
  return ret;
}
  8006f0:	dfc00017 	ldw	ra,0(sp)
  8006f4:	dec00404 	addi	sp,sp,16
  8006f8:	f800283a 	ret

008006fc <_puts_r>:
 */

int
_puts_r (struct _reent *ptr,
       const char * s)
{
  8006fc:	defff504 	addi	sp,sp,-44
  800700:	dc000815 	stw	r16,32(sp)
  800704:	2021883a 	mov	r16,r4
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
  800708:	2809883a 	mov	r4,r5
{
  80070c:	dc400915 	stw	r17,36(sp)
  800710:	dfc00a15 	stw	ra,40(sp)
  800714:	2823883a 	mov	r17,r5
  size_t c = strlen (s);
  800718:	08008880 	call	800888 <strlen>

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  80071c:	11000044 	addi	r4,r2,1
  iov[0].iov_len = c;
  800720:	d8800515 	stw	r2,20(sp)
  iov[1].iov_len = 1;
  800724:	00800044 	movi	r2,1
  iov[1].iov_base = "\n";
  800728:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  80072c:	d8800715 	stw	r2,28(sp)
  uio.uio_iov = &iov[0];
  800730:	d8800404 	addi	r2,sp,16
  iov[1].iov_base = "\n";
  800734:	18c54804 	addi	r3,r3,5408
  uio.uio_iov = &iov[0];
  800738:	d8800115 	stw	r2,4(sp)
  uio.uio_iovcnt = 2;
  80073c:	00800084 	movi	r2,2
  iov[0].iov_base = s;
  800740:	dc400415 	stw	r17,16(sp)
  iov[1].iov_base = "\n";
  800744:	d8c00615 	stw	r3,24(sp)
  uio.uio_resid = c + 1;
  800748:	d9000315 	stw	r4,12(sp)
  uio.uio_iovcnt = 2;
  80074c:	d8800215 	stw	r2,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  800750:	81400217 	ldw	r5,8(r16)
  CHECK_INIT (ptr, fp);
  800754:	80000226 	beq	r16,zero,800760 <_puts_r+0x64>
  800758:	80800e17 	ldw	r2,56(r16)
  80075c:	10001326 	beq	r2,zero,8007ac <_puts_r+0xb0>
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  800760:	2880030b 	ldhu	r2,12(r5)
  800764:	10c8000c 	andi	r3,r2,8192
  800768:	1800061e 	bne	r3,zero,800784 <_puts_r+0x88>
  _newlib_flockfile_start (fp);
  80076c:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  800770:	0137ffc4 	movi	r4,-8193
  800774:	10880014 	ori	r2,r2,8192
  800778:	1906703a 	and	r3,r3,r4
  80077c:	2880030d 	sth	r2,12(r5)
  800780:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  800784:	d9800104 	addi	r6,sp,4
  800788:	8009883a 	mov	r4,r16
  80078c:	08050ec0 	call	8050ec <__sfvwrite_r>
  800790:	10000b1e 	bne	r2,zero,8007c0 <_puts_r+0xc4>
  800794:	00800284 	movi	r2,10

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
  800798:	dfc00a17 	ldw	ra,40(sp)
  80079c:	dc400917 	ldw	r17,36(sp)
  8007a0:	dc000817 	ldw	r16,32(sp)
  8007a4:	dec00b04 	addi	sp,sp,44
  8007a8:	f800283a 	ret
  CHECK_INIT (ptr, fp);
  8007ac:	8009883a 	mov	r4,r16
  8007b0:	d9400015 	stw	r5,0(sp)
  8007b4:	0804b400 	call	804b40 <__sinit>
  8007b8:	d9400017 	ldw	r5,0(sp)
  8007bc:	003fe806 	br	800760 <_puts_r+0x64>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  8007c0:	00bfffc4 	movi	r2,-1
  return result;
  8007c4:	003ff406 	br	800798 <_puts_r+0x9c>

008007c8 <puts>:

#ifndef _REENT_ONLY

int
puts (char const * s)
{
  8007c8:	defff504 	addi	sp,sp,-44
  8007cc:	dc000915 	stw	r16,36(sp)
  8007d0:	dfc00a15 	stw	ra,40(sp)
  8007d4:	2021883a 	mov	r16,r4
  size_t c = strlen (s);
  8007d8:	08008880 	call	800888 <strlen>
  uio.uio_resid = c + 1;
  8007dc:	11400044 	addi	r5,r2,1
  iov[0].iov_len = c;
  8007e0:	d8800615 	stw	r2,24(sp)
  iov[1].iov_len = 1;
  8007e4:	00800044 	movi	r2,1
  return _puts_r (_REENT, s);
  8007e8:	d1200917 	ldw	r4,-32732(gp)
  iov[1].iov_base = "\n";
  8007ec:	00c02074 	movhi	r3,129
  iov[1].iov_len = 1;
  8007f0:	d8800815 	stw	r2,32(sp)
  uio.uio_iov = &iov[0];
  8007f4:	d8800504 	addi	r2,sp,20
  iov[1].iov_base = "\n";
  8007f8:	18c54804 	addi	r3,r3,5408
  uio.uio_iov = &iov[0];
  8007fc:	d8800215 	stw	r2,8(sp)
  uio.uio_iovcnt = 2;
  800800:	00800084 	movi	r2,2
  uio.uio_resid = c + 1;
  800804:	d9400415 	stw	r5,16(sp)
  iov[0].iov_base = s;
  800808:	dc000515 	stw	r16,20(sp)
  iov[1].iov_base = "\n";
  80080c:	d8c00715 	stw	r3,28(sp)
  uio.uio_iovcnt = 2;
  800810:	d8800315 	stw	r2,12(sp)
  fp = _stdout_r (ptr);
  800814:	21400217 	ldw	r5,8(r4)
  CHECK_INIT (ptr, fp);
  800818:	20000226 	beq	r4,zero,800824 <puts+0x5c>
  80081c:	20800e17 	ldw	r2,56(r4)
  800820:	10001126 	beq	r2,zero,800868 <puts+0xa0>
  ORIENT (fp, -1);
  800824:	2880030b 	ldhu	r2,12(r5)
  800828:	10c8000c 	andi	r3,r2,8192
  80082c:	1800061e 	bne	r3,zero,800848 <puts+0x80>
  _newlib_flockfile_start (fp);
  800830:	28c01917 	ldw	r3,100(r5)
  ORIENT (fp, -1);
  800834:	01b7ffc4 	movi	r6,-8193
  800838:	10880014 	ori	r2,r2,8192
  80083c:	1986703a 	and	r3,r3,r6
  800840:	2880030d 	sth	r2,12(r5)
  800844:	28c01915 	stw	r3,100(r5)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  800848:	d9800204 	addi	r6,sp,8
  80084c:	08050ec0 	call	8050ec <__sfvwrite_r>
  800850:	10000b1e 	bne	r2,zero,800880 <puts+0xb8>
  800854:	00800284 	movi	r2,10
}
  800858:	dfc00a17 	ldw	ra,40(sp)
  80085c:	dc000917 	ldw	r16,36(sp)
  800860:	dec00b04 	addi	sp,sp,44
  800864:	f800283a 	ret
  800868:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  80086c:	d9000015 	stw	r4,0(sp)
  800870:	0804b400 	call	804b40 <__sinit>
  800874:	d9400117 	ldw	r5,4(sp)
  800878:	d9000017 	ldw	r4,0(sp)
  80087c:	003fe906 	br	800824 <puts+0x5c>
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
  800880:	00bfffc4 	movi	r2,-1
  return _puts_r (_REENT, s);
  800884:	003ff406 	br	800858 <puts+0x90>

00800888 <strlen>:

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
  800888:	208000cc 	andi	r2,r4,3
  80088c:	10000926 	beq	r2,zero,8008b4 <strlen+0x2c>
  800890:	2005883a 	mov	r2,r4
  800894:	00000306 	br	8008a4 <strlen+0x1c>
    {
      if (!*str)
	return str - start;
      str++;
  800898:	10800044 	addi	r2,r2,1
  while (UNALIGNED (str))
  80089c:	10c000cc 	andi	r3,r2,3
  8008a0:	18000526 	beq	r3,zero,8008b8 <strlen+0x30>
      if (!*str)
  8008a4:	10c00007 	ldb	r3,0(r2)
  8008a8:	183ffb1e 	bne	r3,zero,800898 <strlen+0x10>

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
    str++;
  return str - start;
  8008ac:	1105c83a 	sub	r2,r2,r4
}
  8008b0:	f800283a 	ret
  while (UNALIGNED (str))
  8008b4:	2005883a 	mov	r2,r4
  while (!DETECTNULL (*aligned_addr))
  8008b8:	11400017 	ldw	r5,0(r2)
  8008bc:	01ffbff4 	movhi	r7,65279
  8008c0:	39ffbfc4 	addi	r7,r7,-257
  8008c4:	29c7883a 	add	r3,r5,r7
  8008c8:	01a02074 	movhi	r6,32897
  8008cc:	014a303a 	nor	r5,zero,r5
  8008d0:	1946703a 	and	r3,r3,r5
  8008d4:	31a02004 	addi	r6,r6,-32640
  8008d8:	1986703a 	and	r3,r3,r6
  8008dc:	1800071e 	bne	r3,zero,8008fc <strlen+0x74>
  8008e0:	11400117 	ldw	r5,4(r2)
    aligned_addr++;
  8008e4:	10800104 	addi	r2,r2,4
  while (!DETECTNULL (*aligned_addr))
  8008e8:	29c7883a 	add	r3,r5,r7
  8008ec:	014a303a 	nor	r5,zero,r5
  8008f0:	1946703a 	and	r3,r3,r5
  8008f4:	1986703a 	and	r3,r3,r6
  8008f8:	183ff926 	beq	r3,zero,8008e0 <strlen+0x58>
  while (*str)
  8008fc:	10c00007 	ldb	r3,0(r2)
  800900:	183fea26 	beq	r3,zero,8008ac <strlen+0x24>
  800904:	10c00047 	ldb	r3,1(r2)
    str++;
  800908:	10800044 	addi	r2,r2,1
  while (*str)
  80090c:	183fe726 	beq	r3,zero,8008ac <strlen+0x24>
  800910:	10c00047 	ldb	r3,1(r2)
    str++;
  800914:	10800044 	addi	r2,r2,1
  while (*str)
  800918:	183ffa1e 	bne	r3,zero,800904 <strlen+0x7c>
  80091c:	003fe306 	br	8008ac <strlen+0x24>

00800920 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
  800920:	deffbf04 	addi	sp,sp,-260
  800924:	dfc04015 	stw	ra,256(sp)
  800928:	dd803d15 	stw	r22,244(sp)
  80092c:	dcc03a15 	stw	r19,232(sp)
  800930:	dc803915 	stw	r18,228(sp)
  800934:	2027883a 	mov	r19,r4
  800938:	2825883a 	mov	r18,r5
  80093c:	302d883a 	mov	r22,r6
  800940:	d9c00615 	stw	r7,24(sp)
  800944:	df003f15 	stw	fp,252(sp)
  800948:	ddc03e15 	stw	r23,248(sp)
  80094c:	dd403c15 	stw	r21,240(sp)
  800950:	dd003b15 	stw	r20,236(sp)
  800954:	dc403815 	stw	r17,224(sp)
  800958:	dc003715 	stw	r16,220(sp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
  80095c:	08057240 	call	805724 <_localeconv_r>
  800960:	10800017 	ldw	r2,0(r2)
	size_t decp_len = strlen (decimal_point);
  800964:	1009883a 	mov	r4,r2
	char *decimal_point = _localeconv_r (data)->decimal_point;
  800968:	d8800d15 	stw	r2,52(sp)
	size_t decp_len = strlen (decimal_point);
  80096c:	08008880 	call	800888 <strlen>
  800970:	d8800b15 	stw	r2,44(sp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
  800974:	98000226 	beq	r19,zero,800980 <___vfprintf_internal_r+0x60>
  800978:	98800e17 	ldw	r2,56(r19)
  80097c:	10020f26 	beq	r2,zero,8011bc <___vfprintf_internal_r+0x89c>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
  800980:	9080030b 	ldhu	r2,12(r18)
  800984:	10c8000c 	andi	r3,r2,8192
  800988:	1800061e 	bne	r3,zero,8009a4 <___vfprintf_internal_r+0x84>
	_newlib_flockfile_start (fp);
  80098c:	90c01917 	ldw	r3,100(r18)
	ORIENT(fp, -1);
  800990:	0137ffc4 	movi	r4,-8193
  800994:	10880014 	ori	r2,r2,8192
  800998:	1906703a 	and	r3,r3,r4
  80099c:	9080030d 	sth	r2,12(r18)
  8009a0:	90c01915 	stw	r3,100(r18)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
  8009a4:	10c0020c 	andi	r3,r2,8
  8009a8:	1800f426 	beq	r3,zero,800d7c <___vfprintf_internal_r+0x45c>
  8009ac:	90c00417 	ldw	r3,16(r18)
  8009b0:	1800f226 	beq	r3,zero,800d7c <___vfprintf_internal_r+0x45c>
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  8009b4:	1080068c 	andi	r2,r2,26
  8009b8:	10800298 	cmpnei	r2,r2,10
  8009bc:	1000f726 	beq	r2,zero,800d9c <___vfprintf_internal_r+0x47c>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
  8009c0:	d8802704 	addi	r2,sp,156
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
  8009c4:	b02f883a 	mov	r23,r22
	uio.uio_iov = iovp = iov;
  8009c8:	d8801a15 	stw	r2,104(sp)
	uio.uio_resid = 0;
  8009cc:	d8001c15 	stw	zero,112(sp)
	uio.uio_iovcnt = 0;
  8009d0:	d8001b15 	stw	zero,108(sp)
	int ndig = 0;		/* actual number of digits returned by cvt */
  8009d4:	d8000815 	stw	zero,32(sp)
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
  8009d8:	d8000915 	stw	zero,36(sp)
  8009dc:	d8000a15 	stw	zero,40(sp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
  8009e0:	d8000c15 	stw	zero,48(sp)
	int expsize = 0;	/* character count for expstr */
  8009e4:	d8001015 	stw	zero,64(sp)
	ret = 0;
  8009e8:	d8000515 	stw	zero,20(sp)
			PRINT (cp, m);
  8009ec:	102d883a 	mov	r22,r2
                while (*fmt != '\0' && *fmt != '%')
  8009f0:	b8800007 	ldb	r2,0(r23)
  8009f4:	1000cf26 	beq	r2,zero,800d34 <___vfprintf_internal_r+0x414>
  8009f8:	b821883a 	mov	r16,r23
  8009fc:	00000306 	br	800a0c <___vfprintf_internal_r+0xec>
  800a00:	80800047 	ldb	r2,1(r16)
                    fmt += 1;
  800a04:	84000044 	addi	r16,r16,1
                while (*fmt != '\0' && *fmt != '%')
  800a08:	10011a26 	beq	r2,zero,800e74 <___vfprintf_internal_r+0x554>
  800a0c:	10c00958 	cmpnei	r3,r2,37
  800a10:	183ffb1e 	bne	r3,zero,800a00 <___vfprintf_internal_r+0xe0>
		if ((m = fmt - cp) != 0) {
  800a14:	85e3c83a 	sub	r17,r16,r23
  800a18:	85c1181e 	bne	r16,r23,800e7c <___vfprintf_internal_r+0x55c>
#else
                if (*fmt == '\0')
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
  800a1c:	82c00047 	ldb	r11,1(r16)
  800a20:	85c00044 	addi	r23,r16,1
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
  800a24:	0009883a 	mov	r4,zero
		prec = -1;
  800a28:	023fffc4 	movi	r8,-1
		width = 0;
  800a2c:	0021883a 	mov	r16,zero
		flags = 0;
  800a30:	0019883a 	mov	r12,zero
rflag:		ch = *fmt++;
  800a34:	bdc00044 	addi	r23,r23,1
  800a38:	5839883a 	mov	fp,r11
reswitch:	switch (ch) {
  800a3c:	e0bff804 	addi	r2,fp,-32
  800a40:	10c01668 	cmpgeui	r3,r2,89
  800a44:	18006c1e 	bne	r3,zero,800bf8 <___vfprintf_internal_r+0x2d8>
  800a48:	100490ba 	slli	r2,r2,2
  800a4c:	00c02034 	movhi	r3,128
  800a50:	10c7883a 	add	r3,r2,r3
  800a54:	18829717 	ldw	r2,2652(r3)
  800a58:	1000683a 	jmp	r2
  800a5c:	00801578 	rdprs	r2,zero,85
  800a60:	00800bf8 	rdprs	r2,zero,47
  800a64:	00800bf8 	rdprs	r2,zero,47
  800a68:	0080156c 	andhi	r2,zero,85
  800a6c:	00800bf8 	rdprs	r2,zero,47
  800a70:	00800bf8 	rdprs	r2,zero,47
  800a74:	00800bf8 	rdprs	r2,zero,47
  800a78:	00800bf8 	rdprs	r2,zero,47
  800a7c:	00800bf8 	rdprs	r2,zero,47
  800a80:	00800bf8 	rdprs	r2,zero,47
  800a84:	00801544 	movi	r2,85
  800a88:	00801538 	rdprs	r2,zero,84
  800a8c:	00800bf8 	rdprs	r2,zero,47
  800a90:	00801520 	cmpeqi	r2,zero,84
  800a94:	008014d4 	movui	r2,83
  800a98:	00800bf8 	rdprs	r2,zero,47
  800a9c:	008014c8 	cmpgei	r2,zero,83
  800aa0:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800aa4:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800aa8:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800aac:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800ab0:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800ab4:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800ab8:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800abc:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800ac0:	00800bc0 	call	800bc <__alt_mem_sdram-0x77ff44>
  800ac4:	00800bf8 	rdprs	r2,zero,47
  800ac8:	00800bf8 	rdprs	r2,zero,47
  800acc:	00800bf8 	rdprs	r2,zero,47
  800ad0:	00800bf8 	rdprs	r2,zero,47
  800ad4:	00800bf8 	rdprs	r2,zero,47
  800ad8:	00800bf8 	rdprs	r2,zero,47
  800adc:	00800bf8 	rdprs	r2,zero,47
  800ae0:	00800bf8 	rdprs	r2,zero,47
  800ae4:	00800bf8 	rdprs	r2,zero,47
  800ae8:	00800bf8 	rdprs	r2,zero,47
  800aec:	00801410 	cmplti	r2,zero,80
  800af0:	00800f98 	cmpnei	r2,zero,62
  800af4:	00800bf8 	rdprs	r2,zero,47
  800af8:	00800f98 	cmpnei	r2,zero,62
  800afc:	00800bf8 	rdprs	r2,zero,47
  800b00:	00800bf8 	rdprs	r2,zero,47
  800b04:	00800bf8 	rdprs	r2,zero,47
  800b08:	00800bf8 	rdprs	r2,zero,47
  800b0c:	008012d8 	cmpnei	r2,zero,75
  800b10:	00800bf8 	rdprs	r2,zero,47
  800b14:	00800bf8 	rdprs	r2,zero,47
  800b18:	00800e4c 	andi	r2,zero,57
  800b1c:	00800bf8 	rdprs	r2,zero,47
  800b20:	00800bf8 	rdprs	r2,zero,47
  800b24:	00800bf8 	rdprs	r2,zero,47
  800b28:	00800bf8 	rdprs	r2,zero,47
  800b2c:	00800bf8 	rdprs	r2,zero,47
  800b30:	00800de4 	muli	r2,zero,55
  800b34:	00800bf8 	rdprs	r2,zero,47
  800b38:	00800bf8 	rdprs	r2,zero,47
  800b3c:	00801290 	cmplti	r2,zero,74
  800b40:	00800bf8 	rdprs	r2,zero,47
  800b44:	00800bf8 	rdprs	r2,zero,47
  800b48:	00800bf8 	rdprs	r2,zero,47
  800b4c:	00800bf8 	rdprs	r2,zero,47
  800b50:	00800bf8 	rdprs	r2,zero,47
  800b54:	00800bf8 	rdprs	r2,zero,47
  800b58:	00800bf8 	rdprs	r2,zero,47
  800b5c:	00800bf8 	rdprs	r2,zero,47
  800b60:	00800bf8 	rdprs	r2,zero,47
  800b64:	00800bf8 	rdprs	r2,zero,47
  800b68:	00801268 	cmpgeui	r2,zero,73
  800b6c:	008011c8 	cmpgei	r2,zero,71
  800b70:	00800f98 	cmpnei	r2,zero,62
  800b74:	00800f98 	cmpnei	r2,zero,62
  800b78:	00800f98 	cmpnei	r2,zero,62
  800b7c:	0080125c 	xori	r2,zero,73
  800b80:	008011c8 	cmpgei	r2,zero,71
  800b84:	00800bf8 	rdprs	r2,zero,47
  800b88:	00800bf8 	rdprs	r2,zero,47
  800b8c:	008013fc 	xorhi	r2,zero,79
  800b90:	00800bf8 	rdprs	r2,zero,47
  800b94:	008013c4 	movi	r2,79
  800b98:	00800e50 	cmplti	r2,zero,57
  800b9c:	0080138c 	andi	r2,zero,78
  800ba0:	00801380 	call	80138 <__alt_mem_sdram-0x77fec8>
  800ba4:	00800bf8 	rdprs	r2,zero,47
  800ba8:	00801328 	cmpgeui	r2,zero,76
  800bac:	00800bf8 	rdprs	r2,zero,47
  800bb0:	00800de8 	cmpgeui	r2,zero,55
  800bb4:	00800bf8 	rdprs	r2,zero,47
  800bb8:	00800bf8 	rdprs	r2,zero,47
  800bbc:	008012e4 	muli	r2,zero,75
#endif
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
  800bc0:	0021883a 	mov	r16,zero
  800bc4:	e0fff404 	addi	r3,fp,-48
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
  800bc8:	800490ba 	slli	r2,r16,2
				ch = *fmt++;
  800bcc:	bf000007 	ldb	fp,0(r23)
  800bd0:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  800bd4:	1421883a 	add	r16,r2,r16
  800bd8:	8421883a 	add	r16,r16,r16
  800bdc:	1c21883a 	add	r16,r3,r16
			} while (is_digit (ch));
  800be0:	e0fff404 	addi	r3,fp,-48
  800be4:	188002b0 	cmpltui	r2,r3,10
  800be8:	103ff71e 	bne	r2,zero,800bc8 <___vfprintf_internal_r+0x2a8>
reswitch:	switch (ch) {
  800bec:	e0bff804 	addi	r2,fp,-32
  800bf0:	10c01668 	cmpgeui	r3,r2,89
  800bf4:	183f9426 	beq	r3,zero,800a48 <___vfprintf_internal_r+0x128>
  800bf8:	d9001345 	stb	r4,77(sp)

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
  800bfc:	e0004d26 	beq	fp,zero,800d34 <___vfprintf_internal_r+0x414>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
  800c00:	df001d05 	stb	fp,116(sp)
			size = 1;
			sign = '\0';
  800c04:	d8001345 	stb	zero,77(sp)
			break;
  800c08:	05000044 	movi	r20,1
			size = 1;
  800c0c:	05400044 	movi	r21,1
			cp = buf;
  800c10:	dc401d04 	addi	r17,sp,116
		dprec = 0;
  800c14:	db000415 	stw	r12,16(sp)
  800c18:	0011883a 	mov	r8,zero
  800c1c:	d8000715 	stw	zero,28(sp)
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
  800c20:	d8800417 	ldw	r2,16(sp)
  800c24:	1380008c 	andi	r14,r2,2
  800c28:	70000126 	beq	r14,zero,800c30 <___vfprintf_internal_r+0x310>
			realsz+= 2;
  800c2c:	a5000084 	addi	r20,r20,2

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  800c30:	d8800417 	ldw	r2,16(sp)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
  800c34:	d8c01c17 	ldw	r3,112(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  800c38:	1340210c 	andi	r13,r2,132
  800c3c:	6800021e 	bne	r13,zero,800c48 <___vfprintf_internal_r+0x328>
			PAD (width - realsz, blanks);
  800c40:	850fc83a 	sub	r7,r16,r20
  800c44:	01c36d16 	blt	zero,r7,8019fc <___vfprintf_internal_r+0x10dc>
		if (sign)
  800c48:	d8801347 	ldb	r2,77(sp)
  800c4c:	10000c26 	beq	r2,zero,800c80 <___vfprintf_internal_r+0x360>
			PRINT (&sign, 1);
  800c50:	d8801b17 	ldw	r2,108(sp)
  800c54:	d9001344 	addi	r4,sp,77
  800c58:	18c00044 	addi	r3,r3,1
  800c5c:	10800044 	addi	r2,r2,1
  800c60:	b1000015 	stw	r4,0(r22)
  800c64:	01000044 	movi	r4,1
  800c68:	d8801b15 	stw	r2,108(sp)
  800c6c:	b1000115 	stw	r4,4(r22)
  800c70:	d8c01c15 	stw	r3,112(sp)
  800c74:	10800208 	cmpgei	r2,r2,8
  800c78:	1003a11e 	bne	r2,zero,801b00 <___vfprintf_internal_r+0x11e0>
  800c7c:	b5800204 	addi	r22,r22,8
		if (flags & HEXPREFIX)
  800c80:	70000c26 	beq	r14,zero,800cb4 <___vfprintf_internal_r+0x394>
			PRINT (ox, 2);
  800c84:	d8801b17 	ldw	r2,108(sp)
  800c88:	d9001384 	addi	r4,sp,78
  800c8c:	18c00084 	addi	r3,r3,2
  800c90:	10800044 	addi	r2,r2,1
  800c94:	b1000015 	stw	r4,0(r22)
  800c98:	01000084 	movi	r4,2
  800c9c:	d8801b15 	stw	r2,108(sp)
  800ca0:	b1000115 	stw	r4,4(r22)
  800ca4:	d8c01c15 	stw	r3,112(sp)
  800ca8:	10800208 	cmpgei	r2,r2,8
  800cac:	1003a21e 	bne	r2,zero,801b38 <___vfprintf_internal_r+0x1218>
  800cb0:	b5800204 	addi	r22,r22,8

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  800cb4:	6b402018 	cmpnei	r13,r13,128
  800cb8:	68029926 	beq	r13,zero,801720 <___vfprintf_internal_r+0xe00>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
  800cbc:	4551c83a 	sub	r8,r8,r21
  800cc0:	0202d116 	blt	zero,r8,801808 <___vfprintf_internal_r+0xee8>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
  800cc4:	d8800417 	ldw	r2,16(sp)
  800cc8:	1080400c 	andi	r2,r2,256
  800ccc:	10024e1e 	bne	r2,zero,801608 <___vfprintf_internal_r+0xce8>
			PRINT (cp, size);
  800cd0:	d8801b17 	ldw	r2,108(sp)
  800cd4:	1d47883a 	add	r3,r3,r21
  800cd8:	b4400015 	stw	r17,0(r22)
  800cdc:	10800044 	addi	r2,r2,1
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
  800ce0:	b5400115 	stw	r21,4(r22)
  800ce4:	d8801b15 	stw	r2,108(sp)
  800ce8:	d8c01c15 	stw	r3,112(sp)
  800cec:	10800208 	cmpgei	r2,r2,8
  800cf0:	1003381e 	bne	r2,zero,8019d4 <___vfprintf_internal_r+0x10b4>
  800cf4:	b5800204 	addi	r22,r22,8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
  800cf8:	d8800417 	ldw	r2,16(sp)
  800cfc:	1440010c 	andi	r17,r2,4
  800d00:	88000226 	beq	r17,zero,800d0c <___vfprintf_internal_r+0x3ec>
			PAD (width - realsz, blanks);
  800d04:	8523c83a 	sub	r17,r16,r20
  800d08:	04407416 	blt	zero,r17,800edc <___vfprintf_internal_r+0x5bc>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
  800d0c:	8500010e 	bge	r16,r20,800d14 <___vfprintf_internal_r+0x3f4>
  800d10:	a021883a 	mov	r16,r20
  800d14:	d8800517 	ldw	r2,20(sp)
  800d18:	1405883a 	add	r2,r2,r16
  800d1c:	d8800515 	stw	r2,20(sp)

		FLUSH ();	/* copy out the I/O vectors */
  800d20:	1802ea1e 	bne	r3,zero,8018cc <___vfprintf_internal_r+0xfac>
                while (*fmt != '\0' && *fmt != '%')
  800d24:	b8800007 	ldb	r2,0(r23)
		FLUSH ();	/* copy out the I/O vectors */
  800d28:	d8001b15 	stw	zero,108(sp)
  800d2c:	dd802704 	addi	r22,sp,156
                while (*fmt != '\0' && *fmt != '%')
  800d30:	103f311e 	bne	r2,zero,8009f8 <___vfprintf_internal_r+0xd8>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
  800d34:	d8801c17 	ldw	r2,112(sp)
  800d38:	1006241e 	bne	r2,zero,8025cc <___vfprintf_internal_r+0x1cac>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
  800d3c:	9080030b 	ldhu	r2,12(r18)
  800d40:	1080100c 	andi	r2,r2,64
  800d44:	1006c41e 	bne	r2,zero,802858 <___vfprintf_internal_r+0x1f38>
	/* NOTREACHED */
}
  800d48:	d8800517 	ldw	r2,20(sp)
  800d4c:	dfc04017 	ldw	ra,256(sp)
  800d50:	df003f17 	ldw	fp,252(sp)
  800d54:	ddc03e17 	ldw	r23,248(sp)
  800d58:	dd803d17 	ldw	r22,244(sp)
  800d5c:	dd403c17 	ldw	r21,240(sp)
  800d60:	dd003b17 	ldw	r20,236(sp)
  800d64:	dcc03a17 	ldw	r19,232(sp)
  800d68:	dc803917 	ldw	r18,228(sp)
  800d6c:	dc403817 	ldw	r17,224(sp)
  800d70:	dc003717 	ldw	r16,220(sp)
  800d74:	dec04104 	addi	sp,sp,260
  800d78:	f800283a 	ret
	if (cantwrite (data, fp)) {
  800d7c:	900b883a 	mov	r5,r18
  800d80:	9809883a 	mov	r4,r19
  800d84:	08029900 	call	802990 <__swsetup_r>
  800d88:	1006b31e 	bne	r2,zero,802858 <___vfprintf_internal_r+0x1f38>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  800d8c:	9080030b 	ldhu	r2,12(r18)
  800d90:	1080068c 	andi	r2,r2,26
  800d94:	10800298 	cmpnei	r2,r2,10
  800d98:	103f091e 	bne	r2,zero,8009c0 <___vfprintf_internal_r+0xa0>
  800d9c:	9080038f 	ldh	r2,14(r18)
  800da0:	103f0716 	blt	r2,zero,8009c0 <___vfprintf_internal_r+0xa0>
		return (__sbprintf (data, fp, fmt0, ap));
  800da4:	d9c00617 	ldw	r7,24(sp)
  800da8:	b00d883a 	mov	r6,r22
  800dac:	900b883a 	mov	r5,r18
  800db0:	9809883a 	mov	r4,r19
}
  800db4:	dfc04017 	ldw	ra,256(sp)
  800db8:	df003f17 	ldw	fp,252(sp)
  800dbc:	ddc03e17 	ldw	r23,248(sp)
  800dc0:	dd803d17 	ldw	r22,244(sp)
  800dc4:	dd403c17 	ldw	r21,240(sp)
  800dc8:	dd003b17 	ldw	r20,236(sp)
  800dcc:	dcc03a17 	ldw	r19,232(sp)
  800dd0:	dc803917 	ldw	r18,228(sp)
  800dd4:	dc403817 	ldw	r17,224(sp)
  800dd8:	dc003717 	ldw	r16,220(sp)
  800ddc:	dec04104 	addi	sp,sp,260
		return (__sbprintf (data, fp, fmt0, ap));
  800de0:	08028d01 	jmpi	8028d0 <__sbprintf>
			flags |= LONGINT;
  800de4:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  800de8:	6080080c 	andi	r2,r12,32
  800dec:	1000e826 	beq	r2,zero,801190 <___vfprintf_internal_r+0x870>
  800df0:	d8c00617 	ldw	r3,24(sp)
			base = DEC;
  800df4:	00800044 	movi	r2,1
			_uquad = UARG ();
  800df8:	1d000017 	ldw	r20,0(r3)
  800dfc:	1d400117 	ldw	r21,4(r3)
  800e00:	18c00204 	addi	r3,r3,8
  800e04:	d8c00615 	stw	r3,24(sp)
nosign:			sign = '\0';
  800e08:	d8001345 	stb	zero,77(sp)
number:			if ((dprec = prec) >= 0)
  800e0c:	40ffffe0 	cmpeqi	r3,r8,-1
nosign:			sign = '\0';
  800e10:	001b883a 	mov	r13,zero
number:			if ((dprec = prec) >= 0)
  800e14:	1801971e 	bne	r3,zero,801474 <___vfprintf_internal_r+0xb54>
				flags &= ~ZEROPAD;
  800e18:	047fdfc4 	movi	r17,-129
  800e1c:	6448703a 	and	r4,r12,r17
			if (_uquad != 0 || prec != 0) {
  800e20:	a546b03a 	or	r3,r20,r21
				flags &= ~ZEROPAD;
  800e24:	d9000415 	stw	r4,16(sp)
			if (_uquad != 0 || prec != 0) {
  800e28:	1802f21e 	bne	r3,zero,8019f4 <___vfprintf_internal_r+0x10d4>
  800e2c:	4005391e 	bne	r8,zero,802314 <___vfprintf_internal_r+0x19f4>
                       else if (base == OCT && (flags & ALT))
  800e30:	1003b41e 	bne	r2,zero,801d04 <___vfprintf_internal_r+0x13e4>
  800e34:	6540004c 	andi	r21,r12,1
  800e38:	a803e226 	beq	r21,zero,801dc4 <___vfprintf_internal_r+0x14a4>
                         *--cp = '0';
  800e3c:	00800c04 	movi	r2,48
  800e40:	d88026c5 	stb	r2,155(sp)
  800e44:	dc4026c4 	addi	r17,sp,155
  800e48:	0000fa06 	br	801234 <___vfprintf_internal_r+0x914>
			flags |= LONGINT;
  800e4c:	63000414 	ori	r12,r12,16
			_uquad = UARG ();
  800e50:	6080080c 	andi	r2,r12,32
  800e54:	1000c326 	beq	r2,zero,801164 <___vfprintf_internal_r+0x844>
  800e58:	d8c00617 	ldw	r3,24(sp)
			base = OCT;
  800e5c:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  800e60:	1d000017 	ldw	r20,0(r3)
  800e64:	1d400117 	ldw	r21,4(r3)
  800e68:	18c00204 	addi	r3,r3,8
  800e6c:	d8c00615 	stw	r3,24(sp)
  800e70:	003fe506 	br	800e08 <___vfprintf_internal_r+0x4e8>
		if ((m = fmt - cp) != 0) {
  800e74:	85e3c83a 	sub	r17,r16,r23
  800e78:	85ffae26 	beq	r16,r23,800d34 <___vfprintf_internal_r+0x414>
			PRINT (cp, m);
  800e7c:	d9001c17 	ldw	r4,112(sp)
  800e80:	d8c01b17 	ldw	r3,108(sp)
  800e84:	b5c00015 	stw	r23,0(r22)
  800e88:	2449883a 	add	r4,r4,r17
  800e8c:	18c00044 	addi	r3,r3,1
  800e90:	d8c01b15 	stw	r3,108(sp)
  800e94:	b4400115 	stw	r17,4(r22)
  800e98:	d9001c15 	stw	r4,112(sp)
  800e9c:	18c00208 	cmpgei	r3,r3,8
  800ea0:	1800061e 	bne	r3,zero,800ebc <___vfprintf_internal_r+0x59c>
  800ea4:	b5800204 	addi	r22,r22,8
			ret += m;
  800ea8:	d8c00517 	ldw	r3,20(sp)
  800eac:	1c47883a 	add	r3,r3,r17
  800eb0:	d8c00515 	stw	r3,20(sp)
                if (*fmt == '\0')
  800eb4:	103ed91e 	bne	r2,zero,800a1c <___vfprintf_internal_r+0xfc>
  800eb8:	003f9e06 	br	800d34 <___vfprintf_internal_r+0x414>
			PRINT (cp, m);
  800ebc:	d9801a04 	addi	r6,sp,104
  800ec0:	900b883a 	mov	r5,r18
  800ec4:	9809883a 	mov	r4,r19
  800ec8:	08087700 	call	808770 <__sprint_r>
  800ecc:	103f9b1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  800ed0:	80800007 	ldb	r2,0(r16)
  800ed4:	dd802704 	addi	r22,sp,156
  800ed8:	003ff306 	br	800ea8 <___vfprintf_internal_r+0x588>
			PAD (width - realsz, blanks);
  800edc:	03002074 	movhi	r12,129
  800ee0:	89000450 	cmplti	r4,r17,17
  800ee4:	d8801b17 	ldw	r2,108(sp)
  800ee8:	6305a304 	addi	r12,r12,5772
  800eec:	20001b1e 	bne	r4,zero,800f5c <___vfprintf_internal_r+0x63c>
  800ef0:	05400404 	movi	r21,16
  800ef4:	6039883a 	mov	fp,r12
  800ef8:	00000406 	br	800f0c <___vfprintf_internal_r+0x5ec>
  800efc:	8c7ffc04 	addi	r17,r17,-16
  800f00:	89000448 	cmpgei	r4,r17,17
  800f04:	b5800204 	addi	r22,r22,8
  800f08:	20001326 	beq	r4,zero,800f58 <___vfprintf_internal_r+0x638>
  800f0c:	10800044 	addi	r2,r2,1
  800f10:	18c00404 	addi	r3,r3,16
  800f14:	b7000015 	stw	fp,0(r22)
  800f18:	b5400115 	stw	r21,4(r22)
  800f1c:	d8c01c15 	stw	r3,112(sp)
  800f20:	d8801b15 	stw	r2,108(sp)
  800f24:	11000208 	cmpgei	r4,r2,8
  800f28:	203ff426 	beq	r4,zero,800efc <___vfprintf_internal_r+0x5dc>
  800f2c:	d9801a04 	addi	r6,sp,104
  800f30:	900b883a 	mov	r5,r18
  800f34:	9809883a 	mov	r4,r19
  800f38:	08087700 	call	808770 <__sprint_r>
  800f3c:	103f7f1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  800f40:	8c7ffc04 	addi	r17,r17,-16
  800f44:	89000448 	cmpgei	r4,r17,17
  800f48:	d8c01c17 	ldw	r3,112(sp)
  800f4c:	d8801b17 	ldw	r2,108(sp)
  800f50:	dd802704 	addi	r22,sp,156
  800f54:	203fed1e 	bne	r4,zero,800f0c <___vfprintf_internal_r+0x5ec>
  800f58:	e019883a 	mov	r12,fp
  800f5c:	10800044 	addi	r2,r2,1
  800f60:	1c47883a 	add	r3,r3,r17
  800f64:	d8801b15 	stw	r2,108(sp)
  800f68:	b3000015 	stw	r12,0(r22)
  800f6c:	b4400115 	stw	r17,4(r22)
  800f70:	d8c01c15 	stw	r3,112(sp)
  800f74:	10800210 	cmplti	r2,r2,8
  800f78:	103f641e 	bne	r2,zero,800d0c <___vfprintf_internal_r+0x3ec>
  800f7c:	d9801a04 	addi	r6,sp,104
  800f80:	900b883a 	mov	r5,r18
  800f84:	9809883a 	mov	r4,r19
  800f88:	08087700 	call	808770 <__sprint_r>
  800f8c:	103f6b1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  800f90:	d8c01c17 	ldw	r3,112(sp)
  800f94:	003f5d06 	br	800d0c <___vfprintf_internal_r+0x3ec>
			_uquad = SARG ();
  800f98:	d8c00617 	ldw	r3,24(sp)
  800f9c:	d9001345 	stb	r4,77(sp)
			if (flags & LONGDBL) {
  800fa0:	6080020c 	andi	r2,r12,8
			_uquad = SARG ();
  800fa4:	19000204 	addi	r4,r3,8
  800fa8:	d9000e15 	stw	r4,56(sp)
			if (flags & LONGDBL) {
  800fac:	10038c1e 	bne	r2,zero,801de0 <___vfprintf_internal_r+0x14c0>
  800fb0:	1805883a 	mov	r2,r3
				_fpvalue = GET_ARG (N, ap, double);
  800fb4:	10800117 	ldw	r2,4(r2)
  800fb8:	18c00017 	ldw	r3,0(r3)
  800fbc:	d8800a15 	stw	r2,40(sp)
  800fc0:	d8c00915 	stw	r3,36(sp)
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  800fc4:	057ff7c4 	movi	r21,-33
			if (prec == -1) {
  800fc8:	40bfffe0 	cmpeqi	r2,r8,-1
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  800fcc:	e56a703a 	and	r21,fp,r21
			if (prec == -1) {
  800fd0:	1004d41e 	bne	r2,zero,802324 <___vfprintf_internal_r+0x1a04>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  800fd4:	a88011d8 	cmpnei	r2,r21,71
  800fd8:	1004c126 	beq	r2,zero,8022e0 <___vfprintf_internal_r+0x19c0>
			flags |= FPT;
  800fdc:	60804014 	ori	r2,r12,256
  800fe0:	d8800415 	stw	r2,16(sp)
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
  800fe4:	d8800a17 	ldw	r2,40(sp)
  800fe8:	1004b916 	blt	r2,zero,8022d0 <___vfprintf_internal_r+0x19b0>
  800fec:	1007883a 	mov	r3,r2
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
  800ff0:	d8000605 	stb	zero,24(sp)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
  800ff4:	e50019a0 	cmpeqi	r20,fp,102
  800ff8:	a004321e 	bne	r20,zero,8020c4 <___vfprintf_internal_r+0x17a4>
  800ffc:	e08011a0 	cmpeqi	r2,fp,70
  801000:	1004301e 	bne	r2,zero,8020c4 <___vfprintf_internal_r+0x17a4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
  801004:	a8801158 	cmpnei	r2,r21,69
  801008:	1004c826 	beq	r2,zero,80232c <___vfprintf_internal_r+0x1a0c>
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  80100c:	d8801804 	addi	r2,sp,96
  801010:	d8800315 	stw	r2,12(sp)
  801014:	d9400917 	ldw	r5,36(sp)
  801018:	d8801504 	addi	r2,sp,84
  80101c:	d8800215 	stw	r2,8(sp)
  801020:	d8801404 	addi	r2,sp,80
  801024:	da000015 	stw	r8,0(sp)
  801028:	180d883a 	mov	r6,r3
  80102c:	9809883a 	mov	r4,r19
  801030:	d8800115 	stw	r2,4(sp)
  801034:	01c00084 	movi	r7,2
  801038:	db000f15 	stw	r12,60(sp)
  80103c:	da000815 	stw	r8,32(sp)
  801040:	d8c00715 	stw	r3,28(sp)
  801044:	0802d100 	call	802d10 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  801048:	da000817 	ldw	r8,32(sp)
  80104c:	e10019d8 	cmpnei	r4,fp,103
  801050:	d8c00717 	ldw	r3,28(sp)
  801054:	db000f17 	ldw	r12,60(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  801058:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  80105c:	4013883a 	mov	r9,r8
  801060:	2004c81e 	bne	r4,zero,802384 <___vfprintf_internal_r+0x1a64>
  801064:	6080004c 	andi	r2,r12,1
  801068:	1004c81e 	bne	r2,zero,80238c <___vfprintf_internal_r+0x1a6c>
				if (expt <= -4 || expt > prec)
  80106c:	d8801417 	ldw	r2,80(sp)
			if (ch == 'g' || ch == 'G') {
  801070:	ad4011e0 	cmpeqi	r21,r21,71
				if (expt <= -4 || expt > prec)
  801074:	d8800715 	stw	r2,28(sp)
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
  801078:	d8801817 	ldw	r2,96(sp)
  80107c:	1445c83a 	sub	r2,r2,r17
  801080:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  801084:	a8000526 	beq	r21,zero,80109c <___vfprintf_internal_r+0x77c>
				if (expt <= -4 || expt > prec)
  801088:	d8c00717 	ldw	r3,28(sp)
  80108c:	18bfff50 	cmplti	r2,r3,-3
  801090:	1000011e 	bne	r2,zero,801098 <___vfprintf_internal_r+0x778>
  801094:	40c3c30e 	bge	r8,r3,801fa4 <___vfprintf_internal_r+0x1684>
					ch -= 2; /* 'e' or 'E' */
  801098:	e73fff84 	addi	fp,fp,-2
				--expt;
  80109c:	d8800717 	ldw	r2,28(sp)
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
  8010a0:	df001645 	stb	fp,89(sp)
				--expt;
  8010a4:	10ffffc4 	addi	r3,r2,-1
  8010a8:	d8c01415 	stw	r3,80(sp)
	if (exp < 0) {
  8010ac:	18053c16 	blt	r3,zero,8025a0 <___vfprintf_internal_r+0x1c80>
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
  8010b0:	00800ac4 	movi	r2,43
  8010b4:	d8801685 	stb	r2,90(sp)
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
  8010b8:	18800290 	cmplti	r2,r3,10
  8010bc:	1005a51e 	bne	r2,zero,802754 <___vfprintf_internal_r+0x1e34>
	t = expbuf + MAXEXPLEN;
  8010c0:	dd4019c4 	addi	r21,sp,103
  8010c4:	dc400715 	stw	r17,28(sp)
  8010c8:	dc001015 	stw	r16,64(sp)
  8010cc:	a823883a 	mov	r17,r21
  8010d0:	db000f15 	stw	r12,60(sp)
  8010d4:	1821883a 	mov	r16,r3
  8010d8:	902b883a 	mov	r21,r18
  8010dc:	00001306 	br	80112c <___vfprintf_internal_r+0x80c>
		do {
			*--t = to_char (exp % 10);
  8010e0:	41095b03 	ldbu	r4,9580(r8)
  8010e4:	200490ba 	slli	r2,r4,2
		} while ((exp /= 10) > 9);
  8010e8:	91c00428 	cmpgeui	r7,r18,16
  8010ec:	02002074 	movhi	r8,129
			*--t = to_char (exp % 10);
  8010f0:	1105883a 	add	r2,r2,r4
  8010f4:	1085883a 	add	r2,r2,r2
  8010f8:	8085c83a 	sub	r2,r16,r2
  8010fc:	10800c04 	addi	r2,r2,48
  801100:	88800005 	stb	r2,0(r17)
		} while ((exp /= 10) > 9);
  801104:	01400284 	movi	r5,10
  801108:	8004913a 	slli	r2,r16,4
  80110c:	8009883a 	mov	r4,r16
  801110:	38054f1e 	bne	r7,zero,802650 <___vfprintf_internal_r+0x1d30>
  801114:	10800294 	ori	r2,r2,10
  801118:	1211883a 	add	r8,r2,r8
  80111c:	40895b03 	ldbu	r2,9580(r8)
  801120:	81001908 	cmpgei	r4,r16,100
  801124:	1021883a 	mov	r16,r2
  801128:	20055d26 	beq	r4,zero,8026a0 <___vfprintf_internal_r+0x1d80>
			*--t = to_char (exp % 10);
  80112c:	8004913a 	slli	r2,r16,4
  801130:	84800294 	ori	r18,r16,10
  801134:	02002074 	movhi	r8,129
  801138:	10800294 	ori	r2,r2,10
  80113c:	92400428 	cmpgeui	r9,r18,16
  801140:	8829883a 	mov	r20,r17
  801144:	8009883a 	mov	r4,r16
  801148:	01400284 	movi	r5,10
  80114c:	1211883a 	add	r8,r2,r8
  801150:	8c7fffc4 	addi	r17,r17,-1
  801154:	483fe226 	beq	r9,zero,8010e0 <___vfprintf_internal_r+0x7c0>
  801158:	080c2340 	call	80c234 <__divsi3>
  80115c:	1009883a 	mov	r4,r2
  801160:	003fe006 	br	8010e4 <___vfprintf_internal_r+0x7c4>
			width = GET_ARG (n, ap, int);
  801164:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  801168:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  80116c:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  801170:	10032b1e 	bne	r2,zero,801e20 <___vfprintf_internal_r+0x1500>
  801174:	6080100c 	andi	r2,r12,64
  801178:	1004cf26 	beq	r2,zero,8024b8 <___vfprintf_internal_r+0x1b98>
  80117c:	2500000b 	ldhu	r20,0(r4)
  801180:	002b883a 	mov	r21,zero
  801184:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  801188:	0005883a 	mov	r2,zero
  80118c:	003f1e06 	br	800e08 <___vfprintf_internal_r+0x4e8>
			width = GET_ARG (n, ap, int);
  801190:	d9000617 	ldw	r4,24(sp)
			_uquad = UARG ();
  801194:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  801198:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  80119c:	1003151e 	bne	r2,zero,801df4 <___vfprintf_internal_r+0x14d4>
  8011a0:	6080100c 	andi	r2,r12,64
  8011a4:	1004bf26 	beq	r2,zero,8024a4 <___vfprintf_internal_r+0x1b84>
  8011a8:	2500000b 	ldhu	r20,0(r4)
  8011ac:	002b883a 	mov	r21,zero
  8011b0:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  8011b4:	00800044 	movi	r2,1
  8011b8:	003f1306 	br	800e08 <___vfprintf_internal_r+0x4e8>
	CHECK_INIT (data, fp);
  8011bc:	9809883a 	mov	r4,r19
  8011c0:	0804b400 	call	804b40 <__sinit>
  8011c4:	003dee06 	br	800980 <___vfprintf_internal_r+0x60>
  8011c8:	d9001345 	stb	r4,77(sp)
			_uquad = SARG ();
  8011cc:	6080080c 	andi	r2,r12,32
  8011d0:	10009326 	beq	r2,zero,801420 <___vfprintf_internal_r+0xb00>
  8011d4:	d8c00617 	ldw	r3,24(sp)
  8011d8:	18800117 	ldw	r2,4(r3)
  8011dc:	1d000017 	ldw	r20,0(r3)
  8011e0:	18c00204 	addi	r3,r3,8
  8011e4:	d8c00615 	stw	r3,24(sp)
  8011e8:	102b883a 	mov	r21,r2
			if ((quad_t)_uquad < 0)
  8011ec:	10009716 	blt	r2,zero,80144c <___vfprintf_internal_r+0xb2c>
number:			if ((dprec = prec) >= 0)
  8011f0:	40bfffd8 	cmpnei	r2,r8,-1
			if (!sign)
  8011f4:	db401343 	ldbu	r13,77(sp)
number:			if ((dprec = prec) >= 0)
  8011f8:	10000626 	beq	r2,zero,801214 <___vfprintf_internal_r+0x8f4>
				flags &= ~ZEROPAD;
  8011fc:	047fdfc4 	movi	r17,-129
  801200:	6446703a 	and	r3,r12,r17
			if (_uquad != 0 || prec != 0) {
  801204:	a544b03a 	or	r2,r20,r21
				flags &= ~ZEROPAD;
  801208:	d8c00415 	stw	r3,16(sp)
			if (_uquad != 0 || prec != 0) {
  80120c:	1002bc26 	beq	r2,zero,801d00 <___vfprintf_internal_r+0x13e0>
  801210:	1819883a 	mov	r12,r3
					if (_uquad < 10) {
  801214:	a8036e1e 	bne	r21,zero,801fd0 <___vfprintf_internal_r+0x16b0>
  801218:	a08002a8 	cmpgeui	r2,r20,10
  80121c:	10036c1e 	bne	r2,zero,801fd0 <___vfprintf_internal_r+0x16b0>
						*--cp = to_char(_uquad);
  801220:	a5000c04 	addi	r20,r20,48
  801224:	dd0026c5 	stb	r20,155(sp)
						break;
  801228:	db000415 	stw	r12,16(sp)
  80122c:	05400044 	movi	r21,1
						*--cp = to_char(_uquad);
  801230:	dc4026c4 	addi	r17,sp,155
		realsz = dprec > size ? dprec : size;
  801234:	a829883a 	mov	r20,r21
  801238:	aa00010e 	bge	r21,r8,801240 <___vfprintf_internal_r+0x920>
  80123c:	4029883a 	mov	r20,r8
		lead = 0;
  801240:	d8000715 	stw	zero,28(sp)
		if (sign)
  801244:	6b403fcc 	andi	r13,r13,255
  801248:	6b40201c 	xori	r13,r13,128
  80124c:	6b7fe004 	addi	r13,r13,-128
  801250:	683e7326 	beq	r13,zero,800c20 <___vfprintf_internal_r+0x300>
			realsz++;
  801254:	a5000044 	addi	r20,r20,1
  801258:	003e7106 	br	800c20 <___vfprintf_internal_r+0x300>
				flags |= SHORTINT;
  80125c:	bac00007 	ldb	r11,0(r23)
  801260:	63001014 	ori	r12,r12,64
			goto rflag;
  801264:	003df306 	br	800a34 <___vfprintf_internal_r+0x114>
				*cp = GET_ARG (N, ap, int);
  801268:	d8c00617 	ldw	r3,24(sp)
			sign = '\0';
  80126c:	d8001345 	stb	zero,77(sp)
			break;
  801270:	05000044 	movi	r20,1
				*cp = GET_ARG (N, ap, int);
  801274:	18800017 	ldw	r2,0(r3)
  801278:	18c00104 	addi	r3,r3,4
  80127c:	d8c00615 	stw	r3,24(sp)
  801280:	d8801d05 	stb	r2,116(sp)
				size = 1;
  801284:	05400044 	movi	r21,1
			cp = buf;
  801288:	dc401d04 	addi	r17,sp,116
			break;
  80128c:	003e6106 	br	800c14 <___vfprintf_internal_r+0x2f4>
			xdigs = "0123456789ABCDEF";
  801290:	00802074 	movhi	r2,129
  801294:	10859704 	addi	r2,r2,5724
  801298:	d8800c15 	stw	r2,48(sp)
  80129c:	d9001345 	stb	r4,77(sp)
hex:			_uquad = UARG ();
  8012a0:	6080080c 	andi	r2,r12,32
			xdigs = "0123456789abcdef";
  8012a4:	00c01604 	movi	r3,88
hex:			_uquad = UARG ();
  8012a8:	10001526 	beq	r2,zero,801300 <___vfprintf_internal_r+0x9e0>
  8012ac:	d8800617 	ldw	r2,24(sp)
  8012b0:	15000017 	ldw	r20,0(r2)
  8012b4:	15400117 	ldw	r21,4(r2)
  8012b8:	10800204 	addi	r2,r2,8
  8012bc:	d8800615 	stw	r2,24(sp)
			if (flags & ALT && _uquad != 0) {
  8012c0:	6080004c 	andi	r2,r12,1
  8012c4:	10000226 	beq	r2,zero,8012d0 <___vfprintf_internal_r+0x9b0>
  8012c8:	a544b03a 	or	r2,r20,r21
  8012cc:	1002ce1e 	bne	r2,zero,801e08 <___vfprintf_internal_r+0x14e8>
			base = HEX;
  8012d0:	00800084 	movi	r2,2
  8012d4:	003ecc06 	br	800e08 <___vfprintf_internal_r+0x4e8>
			flags |= LONGDBL;
  8012d8:	bac00007 	ldb	r11,0(r23)
  8012dc:	63000214 	ori	r12,r12,8
			goto rflag;
  8012e0:	003dd406 	br	800a34 <___vfprintf_internal_r+0x114>
			xdigs = "0123456789abcdef";
  8012e4:	00802074 	movhi	r2,129
  8012e8:	10859204 	addi	r2,r2,5704
  8012ec:	d8800c15 	stw	r2,48(sp)
hex:			_uquad = UARG ();
  8012f0:	d9001345 	stb	r4,77(sp)
  8012f4:	6080080c 	andi	r2,r12,32
		lead = 0;
  8012f8:	00c01e04 	movi	r3,120
hex:			_uquad = UARG ();
  8012fc:	103feb1e 	bne	r2,zero,8012ac <___vfprintf_internal_r+0x98c>
			width = GET_ARG (n, ap, int);
  801300:	d9400617 	ldw	r5,24(sp)
hex:			_uquad = UARG ();
  801304:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  801308:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  80130c:	1002c91e 	bne	r2,zero,801e34 <___vfprintf_internal_r+0x1514>
  801310:	6080100c 	andi	r2,r12,64
  801314:	10046d26 	beq	r2,zero,8024cc <___vfprintf_internal_r+0x1bac>
  801318:	2d00000b 	ldhu	r20,0(r5)
  80131c:	002b883a 	mov	r21,zero
  801320:	d9000615 	stw	r4,24(sp)
  801324:	003fe606 	br	8012c0 <___vfprintf_internal_r+0x9a0>
			cp = GET_ARG (N, ap, char_ptr_t);
  801328:	d8800617 	ldw	r2,24(sp)
			sign = '\0';
  80132c:	d8001345 	stb	zero,77(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  801330:	14400017 	ldw	r17,0(r2)
  801334:	10c00104 	addi	r3,r2,4
			if (cp == NULL) {
  801338:	8802f426 	beq	r17,zero,801f0c <___vfprintf_internal_r+0x15ec>
			if (prec >= 0) {
  80133c:	40bfffe0 	cmpeqi	r2,r8,-1
  801340:	1004141e 	bne	r2,zero,802394 <___vfprintf_internal_r+0x1a74>
				char *p = memchr (cp, 0, prec);
  801344:	400d883a 	mov	r6,r8
  801348:	000b883a 	mov	r5,zero
  80134c:	8809883a 	mov	r4,r17
  801350:	d8c00715 	stw	r3,28(sp)
  801354:	db000615 	stw	r12,24(sp)
  801358:	da000415 	stw	r8,16(sp)
  80135c:	08062840 	call	806284 <memchr>
				if (p != NULL)
  801360:	da000417 	ldw	r8,16(sp)
  801364:	db000617 	ldw	r12,24(sp)
  801368:	d8c00717 	ldw	r3,28(sp)
  80136c:	10051a26 	beq	r2,zero,8027d8 <___vfprintf_internal_r+0x1eb8>
					size = p - cp;
  801370:	146bc83a 	sub	r21,r2,r17
  801374:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  801378:	d8c00615 	stw	r3,24(sp)
  80137c:	003e2506 	br	800c14 <___vfprintf_internal_r+0x2f4>
			flags |= QUADINT;
  801380:	bac00007 	ldb	r11,0(r23)
  801384:	63000814 	ori	r12,r12,32
			goto rflag;
  801388:	003daa06 	br	800a34 <___vfprintf_internal_r+0x114>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80138c:	d8c00617 	ldw	r3,24(sp)
			ox[0] = '0';
  801390:	009e0c04 	movi	r2,30768
			xdigs = "0123456789abcdef";
  801394:	01002074 	movhi	r4,129
			ox[0] = '0';
  801398:	d880138d 	sth	r2,78(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  80139c:	18800104 	addi	r2,r3,4
  8013a0:	d8800615 	stw	r2,24(sp)
			xdigs = "0123456789abcdef";
  8013a4:	20859204 	addi	r2,r4,5704
  8013a8:	d8800c15 	stw	r2,48(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  8013ac:	1d000017 	ldw	r20,0(r3)
  8013b0:	002b883a 	mov	r21,zero
			flags |= HEXPREFIX;
  8013b4:	63000094 	ori	r12,r12,2
			base = HEX;
  8013b8:	00800084 	movi	r2,2
			ox[1] = ch = 'x';
  8013bc:	07001e04 	movi	fp,120
			goto nosign;
  8013c0:	003e9106 	br	800e08 <___vfprintf_internal_r+0x4e8>
  8013c4:	d9001345 	stb	r4,77(sp)
			width = GET_ARG (n, ap, int);
  8013c8:	d9000617 	ldw	r4,24(sp)
			if (flags & QUADINT)
  8013cc:	6080080c 	andi	r2,r12,32
			width = GET_ARG (n, ap, int);
  8013d0:	20c00017 	ldw	r3,0(r4)
  8013d4:	21000104 	addi	r4,r4,4
  8013d8:	d9000615 	stw	r4,24(sp)
			if (flags & QUADINT)
  8013dc:	10027b1e 	bne	r2,zero,801dcc <___vfprintf_internal_r+0x14ac>
			if (flags & LONGINT)
  8013e0:	6080040c 	andi	r2,r12,16
  8013e4:	1003221e 	bne	r2,zero,802070 <___vfprintf_internal_r+0x1750>
			else if (flags & SHORTINT)
  8013e8:	6300100c 	andi	r12,r12,64
  8013ec:	60032026 	beq	r12,zero,802070 <___vfprintf_internal_r+0x1750>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  8013f0:	d8800517 	ldw	r2,20(sp)
  8013f4:	1880000d 	sth	r2,0(r3)
  8013f8:	003d7d06 	br	8009f0 <___vfprintf_internal_r+0xd0>
			if (*fmt == 'l') {
  8013fc:	bac00007 	ldb	r11,0(r23)
  801400:	58801b18 	cmpnei	r2,r11,108
  801404:	1002b026 	beq	r2,zero,801ec8 <___vfprintf_internal_r+0x15a8>
				flags |= LONGINT;
  801408:	63000414 	ori	r12,r12,16
  80140c:	003d8906 	br	800a34 <___vfprintf_internal_r+0x114>
			flags |= LONGINT;
  801410:	63000414 	ori	r12,r12,16
  801414:	d9001345 	stb	r4,77(sp)
			_uquad = SARG ();
  801418:	6080080c 	andi	r2,r12,32
  80141c:	103f6d1e 	bne	r2,zero,8011d4 <___vfprintf_internal_r+0x8b4>
			width = GET_ARG (n, ap, int);
  801420:	d9000617 	ldw	r4,24(sp)
			_uquad = SARG ();
  801424:	6080040c 	andi	r2,r12,16
			width = GET_ARG (n, ap, int);
  801428:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  80142c:	1002851e 	bne	r2,zero,801e44 <___vfprintf_internal_r+0x1524>
  801430:	6080100c 	andi	r2,r12,64
  801434:	10042926 	beq	r2,zero,8024dc <___vfprintf_internal_r+0x1bbc>
  801438:	2500000f 	ldh	r20,0(r4)
  80143c:	d8c00615 	stw	r3,24(sp)
  801440:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  801444:	a805883a 	mov	r2,r21
  801448:	103f690e 	bge	r2,zero,8011f0 <___vfprintf_internal_r+0x8d0>
				_uquad = -_uquad;
  80144c:	a004c03a 	cmpne	r2,r20,zero
  801450:	056bc83a 	sub	r21,zero,r21
  801454:	a8abc83a 	sub	r21,r21,r2
				sign = '-';
  801458:	00800b44 	movi	r2,45
  80145c:	d8801345 	stb	r2,77(sp)
number:			if ((dprec = prec) >= 0)
  801460:	40ffffe0 	cmpeqi	r3,r8,-1
				_uquad = -_uquad;
  801464:	0529c83a 	sub	r20,zero,r20
				sign = '-';
  801468:	03400b44 	movi	r13,45
			base = DEC;
  80146c:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  801470:	183e6926 	beq	r3,zero,800e18 <___vfprintf_internal_r+0x4f8>
				switch (base) {
  801474:	10c00060 	cmpeqi	r3,r2,1
  801478:	183f661e 	bne	r3,zero,801214 <___vfprintf_internal_r+0x8f4>
  80147c:	108000a0 	cmpeqi	r2,r2,2
			cp = buf + BUF;
  801480:	dc402704 	addi	r17,sp,156
  801484:	10004626 	beq	r2,zero,8015a0 <___vfprintf_internal_r+0xc80>
  801488:	d9000c17 	ldw	r4,48(sp)
						*--cp = xdigs[_uquad & 15];
  80148c:	a08003cc 	andi	r2,r20,15
						_uquad >>= 4;
  801490:	a806973a 	slli	r3,r21,28
  801494:	a028d13a 	srli	r20,r20,4
						*--cp = xdigs[_uquad & 15];
  801498:	2085883a 	add	r2,r4,r2
  80149c:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  8014a0:	a82ad13a 	srli	r21,r21,4
  8014a4:	1d28b03a 	or	r20,r3,r20
						*--cp = xdigs[_uquad & 15];
  8014a8:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  8014ac:	a544b03a 	or	r2,r20,r21
						*--cp = xdigs[_uquad & 15];
  8014b0:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  8014b4:	103ff51e 	bne	r2,zero,80148c <___vfprintf_internal_r+0xb6c>
			size = buf + BUF - cp;
  8014b8:	d8802704 	addi	r2,sp,156
  8014bc:	146bc83a 	sub	r21,r2,r17
  8014c0:	db000415 	stw	r12,16(sp)
  8014c4:	003f5b06 	br	801234 <___vfprintf_internal_r+0x914>
			flags |= ZEROPAD;
  8014c8:	bac00007 	ldb	r11,0(r23)
  8014cc:	63002014 	ori	r12,r12,128
			goto rflag;
  8014d0:	003d5806 	br	800a34 <___vfprintf_internal_r+0x114>
			if ((ch = *fmt++) == '*') {
  8014d4:	bf000007 	ldb	fp,0(r23)
  8014d8:	b8800044 	addi	r2,r23,1
  8014dc:	e0c00aa0 	cmpeqi	r3,fp,42
  8014e0:	1804e91e 	bne	r3,zero,802888 <___vfprintf_internal_r+0x1f68>
			while (is_digit (ch)) {
  8014e4:	e0fff404 	addi	r3,fp,-48
  8014e8:	194002b0 	cmpltui	r5,r3,10
			if ((ch = *fmt++) == '*') {
  8014ec:	102f883a 	mov	r23,r2
			n = 0;
  8014f0:	0011883a 	mov	r8,zero
			while (is_digit (ch)) {
  8014f4:	283d5126 	beq	r5,zero,800a3c <___vfprintf_internal_r+0x11c>
				n = 10 * n + to_digit (ch);
  8014f8:	400490ba 	slli	r2,r8,2
				ch = *fmt++;
  8014fc:	bf000007 	ldb	fp,0(r23)
  801500:	bdc00044 	addi	r23,r23,1
				n = 10 * n + to_digit (ch);
  801504:	1211883a 	add	r8,r2,r8
  801508:	4211883a 	add	r8,r8,r8
  80150c:	40d1883a 	add	r8,r8,r3
			while (is_digit (ch)) {
  801510:	e0fff404 	addi	r3,fp,-48
  801514:	188002b0 	cmpltui	r2,r3,10
  801518:	103ff71e 	bne	r2,zero,8014f8 <___vfprintf_internal_r+0xbd8>
  80151c:	003d4706 	br	800a3c <___vfprintf_internal_r+0x11c>
			if ((ch = *fmt++) == '*') {
  801520:	bf000003 	ldbu	fp,0(r23)
			flags |= LADJUST;
  801524:	e2c03fcc 	andi	r11,fp,255
  801528:	5ac0201c 	xori	r11,r11,128
  80152c:	63000114 	ori	r12,r12,4
			goto rflag;
  801530:	5affe004 	addi	r11,r11,-128
  801534:	003d3f06 	br	800a34 <___vfprintf_internal_r+0x114>
			goto rflag;
  801538:	bac00007 	ldb	r11,0(r23)
			sign = '+';
  80153c:	01000ac4 	movi	r4,43
			goto rflag;
  801540:	003d3c06 	br	800a34 <___vfprintf_internal_r+0x114>
			width = GET_ARG (n, ap, int);
  801544:	d8800617 	ldw	r2,24(sp)
			if ((ch = *fmt++) == '*') {
  801548:	bf000003 	ldbu	fp,0(r23)
			width = GET_ARG (n, ap, int);
  80154c:	14000017 	ldw	r16,0(r2)
  801550:	10800104 	addi	r2,r2,4
			if (width >= 0)
  801554:	80024016 	blt	r16,zero,801e58 <___vfprintf_internal_r+0x1538>
			width = GET_ARG (n, ap, int);
  801558:	d8800615 	stw	r2,24(sp)
  80155c:	e2c03fcc 	andi	r11,fp,255
  801560:	5ac0201c 	xori	r11,r11,128
  801564:	5affe004 	addi	r11,r11,-128
  801568:	003d3206 	br	800a34 <___vfprintf_internal_r+0x114>
			flags |= ALT;
  80156c:	bac00007 	ldb	r11,0(r23)
  801570:	63000054 	ori	r12,r12,1
			goto rflag;
  801574:	003d2f06 	br	800a34 <___vfprintf_internal_r+0x114>
			if (!sign)
  801578:	20803fcc 	andi	r2,r4,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
			if ((ch = *fmt++) == '*') {
  801584:	bf000003 	ldbu	fp,0(r23)
			if (!sign)
  801588:	103ff41e 	bne	r2,zero,80155c <___vfprintf_internal_r+0xc3c>
  80158c:	e2c03fcc 	andi	r11,fp,255
  801590:	5ac0201c 	xori	r11,r11,128
				sign = ' ';
  801594:	01000804 	movi	r4,32
  801598:	5affe004 	addi	r11,r11,-128
  80159c:	003d2506 	br	800a34 <___vfprintf_internal_r+0x114>
						_uquad >>= 3;
  8015a0:	a006d0fa 	srli	r3,r20,3
  8015a4:	a808977a 	slli	r4,r21,29
  8015a8:	a82ad0fa 	srli	r21,r21,3
						*--cp = to_char (_uquad & 7);
  8015ac:	a50001cc 	andi	r20,r20,7
  8015b0:	a0800c04 	addi	r2,r20,48
						_uquad >>= 3;
  8015b4:	20e8b03a 	or	r20,r4,r3
						*--cp = to_char (_uquad & 7);
  8015b8:	88bfffc5 	stb	r2,-1(r17)
					} while (_uquad);
  8015bc:	a546b03a 	or	r3,r20,r21
  8015c0:	880b883a 	mov	r5,r17
						*--cp = to_char (_uquad & 7);
  8015c4:	8c7fffc4 	addi	r17,r17,-1
					} while (_uquad);
  8015c8:	183ff51e 	bne	r3,zero,8015a0 <___vfprintf_internal_r+0xc80>
					if (flags & ALT && *cp != '0')
  8015cc:	60c0004c 	andi	r3,r12,1
  8015d0:	183fb926 	beq	r3,zero,8014b8 <___vfprintf_internal_r+0xb98>
  8015d4:	10803fcc 	andi	r2,r2,255
  8015d8:	1080201c 	xori	r2,r2,128
  8015dc:	10bfe004 	addi	r2,r2,-128
  8015e0:	10800c18 	cmpnei	r2,r2,48
  8015e4:	103fb426 	beq	r2,zero,8014b8 <___vfprintf_internal_r+0xb98>
						*--cp = '0';
  8015e8:	00800c04 	movi	r2,48
  8015ec:	297fff84 	addi	r5,r5,-2
  8015f0:	88bfffc5 	stb	r2,-1(r17)
			size = buf + BUF - cp;
  8015f4:	d8802704 	addi	r2,sp,156
  8015f8:	116bc83a 	sub	r21,r2,r5
  8015fc:	db000415 	stw	r12,16(sp)
						*--cp = '0';
  801600:	2823883a 	mov	r17,r5
  801604:	003f0b06 	br	801234 <___vfprintf_internal_r+0x914>
			if (ch >= 'f') {	/* 'f' or 'g' */
  801608:	e2c01990 	cmplti	r11,fp,102
  80160c:	5800b51e 	bne	r11,zero,8018e4 <___vfprintf_internal_r+0xfc4>
				if (_fpvalue == 0) {
  801610:	d9000917 	ldw	r4,36(sp)
  801614:	d9400a17 	ldw	r5,40(sp)
  801618:	000d883a 	mov	r6,zero
  80161c:	000f883a 	mov	r7,zero
  801620:	d8c00e15 	stw	r3,56(sp)
  801624:	080d6300 	call	80d630 <__eqdf2>
  801628:	d8c00e17 	ldw	r3,56(sp)
  80162c:	10014e1e 	bne	r2,zero,801b68 <___vfprintf_internal_r+0x1248>
					PRINT ("0", 1);
  801630:	d8801b17 	ldw	r2,108(sp)
  801634:	01002074 	movhi	r4,129
  801638:	21059e04 	addi	r4,r4,5752
  80163c:	10800044 	addi	r2,r2,1
  801640:	18c00044 	addi	r3,r3,1
  801644:	b1000015 	stw	r4,0(r22)
  801648:	01000044 	movi	r4,1
  80164c:	d8801b15 	stw	r2,108(sp)
  801650:	b1000115 	stw	r4,4(r22)
  801654:	d8c01c15 	stw	r3,112(sp)
  801658:	10800208 	cmpgei	r2,r2,8
  80165c:	1003141e 	bne	r2,zero,8022b0 <___vfprintf_internal_r+0x1990>
  801660:	b5800204 	addi	r22,r22,8
					if (expt < ndig || flags & ALT) {
  801664:	d8801417 	ldw	r2,80(sp)
  801668:	d9000817 	ldw	r4,32(sp)
  80166c:	1101d10e 	bge	r2,r4,801db4 <___vfprintf_internal_r+0x1494>
						PRINT (decimal_point, decp_len);
  801670:	d8800d17 	ldw	r2,52(sp)
  801674:	d9000b17 	ldw	r4,44(sp)
  801678:	b0800015 	stw	r2,0(r22)
  80167c:	d8801b17 	ldw	r2,108(sp)
  801680:	1907883a 	add	r3,r3,r4
  801684:	b1000115 	stw	r4,4(r22)
  801688:	10800044 	addi	r2,r2,1
  80168c:	d8801b15 	stw	r2,108(sp)
  801690:	d8c01c15 	stw	r3,112(sp)
  801694:	10800208 	cmpgei	r2,r2,8
  801698:	1002141e 	bne	r2,zero,801eec <___vfprintf_internal_r+0x15cc>
  80169c:	b5800204 	addi	r22,r22,8
						PAD (ndig - 1, zeroes);
  8016a0:	d8800817 	ldw	r2,32(sp)
  8016a4:	157fffc4 	addi	r21,r2,-1
  8016a8:	057d930e 	bge	zero,r21,800cf8 <___vfprintf_internal_r+0x3d8>
  8016ac:	01c02074 	movhi	r7,129
  8016b0:	a9000450 	cmplti	r4,r21,17
  8016b4:	d8801b17 	ldw	r2,108(sp)
  8016b8:	39c59f04 	addi	r7,r7,5756
  8016bc:	2002f81e 	bne	r4,zero,8022a0 <___vfprintf_internal_r+0x1980>
  8016c0:	07000404 	movi	fp,16
  8016c4:	3823883a 	mov	r17,r7
  8016c8:	00000406 	br	8016dc <___vfprintf_internal_r+0xdbc>
  8016cc:	b5800204 	addi	r22,r22,8
  8016d0:	ad7ffc04 	addi	r21,r21,-16
  8016d4:	a9000448 	cmpgei	r4,r21,17
  8016d8:	2002f026 	beq	r4,zero,80229c <___vfprintf_internal_r+0x197c>
  8016dc:	10800044 	addi	r2,r2,1
  8016e0:	18c00404 	addi	r3,r3,16
  8016e4:	b4400015 	stw	r17,0(r22)
  8016e8:	b7000115 	stw	fp,4(r22)
  8016ec:	d8c01c15 	stw	r3,112(sp)
  8016f0:	d8801b15 	stw	r2,108(sp)
  8016f4:	11000208 	cmpgei	r4,r2,8
  8016f8:	203ff426 	beq	r4,zero,8016cc <___vfprintf_internal_r+0xdac>
  8016fc:	d9801a04 	addi	r6,sp,104
  801700:	900b883a 	mov	r5,r18
  801704:	9809883a 	mov	r4,r19
  801708:	08087700 	call	808770 <__sprint_r>
  80170c:	103d8b1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  801710:	d8c01c17 	ldw	r3,112(sp)
  801714:	d8801b17 	ldw	r2,108(sp)
  801718:	dd802704 	addi	r22,sp,156
  80171c:	003fec06 	br	8016d0 <___vfprintf_internal_r+0xdb0>
			PAD (width - realsz, zeroes);
  801720:	8519c83a 	sub	r12,r16,r20
  801724:	033d650e 	bge	zero,r12,800cbc <___vfprintf_internal_r+0x39c>
  801728:	01c02074 	movhi	r7,129
  80172c:	61000450 	cmplti	r4,r12,17
  801730:	d8801b17 	ldw	r2,108(sp)
  801734:	39c59f04 	addi	r7,r7,5756
  801738:	2000281e 	bne	r4,zero,8017dc <___vfprintf_internal_r+0xebc>
  80173c:	dc400e15 	stw	r17,56(sp)
  801740:	dc000f15 	stw	r16,60(sp)
  801744:	b009883a 	mov	r4,r22
  801748:	03400404 	movi	r13,16
  80174c:	a02d883a 	mov	r22,r20
  801750:	6021883a 	mov	r16,r12
  801754:	4029883a 	mov	r20,r8
  801758:	3823883a 	mov	r17,r7
  80175c:	00000406 	br	801770 <___vfprintf_internal_r+0xe50>
  801760:	843ffc04 	addi	r16,r16,-16
  801764:	81400448 	cmpgei	r5,r16,17
  801768:	21000204 	addi	r4,r4,8
  80176c:	28001426 	beq	r5,zero,8017c0 <___vfprintf_internal_r+0xea0>
  801770:	10800044 	addi	r2,r2,1
  801774:	18c00404 	addi	r3,r3,16
  801778:	24400015 	stw	r17,0(r4)
  80177c:	23400115 	stw	r13,4(r4)
  801780:	d8c01c15 	stw	r3,112(sp)
  801784:	d8801b15 	stw	r2,108(sp)
  801788:	11400208 	cmpgei	r5,r2,8
  80178c:	283ff426 	beq	r5,zero,801760 <___vfprintf_internal_r+0xe40>
  801790:	d9801a04 	addi	r6,sp,104
  801794:	900b883a 	mov	r5,r18
  801798:	9809883a 	mov	r4,r19
  80179c:	08087700 	call	808770 <__sprint_r>
  8017a0:	103d661e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  8017a4:	843ffc04 	addi	r16,r16,-16
  8017a8:	81400448 	cmpgei	r5,r16,17
  8017ac:	d8c01c17 	ldw	r3,112(sp)
  8017b0:	d8801b17 	ldw	r2,108(sp)
  8017b4:	d9002704 	addi	r4,sp,156
  8017b8:	03400404 	movi	r13,16
  8017bc:	283fec1e 	bne	r5,zero,801770 <___vfprintf_internal_r+0xe50>
  8017c0:	8019883a 	mov	r12,r16
  8017c4:	880f883a 	mov	r7,r17
  8017c8:	dc000f17 	ldw	r16,60(sp)
  8017cc:	dc400e17 	ldw	r17,56(sp)
  8017d0:	a011883a 	mov	r8,r20
  8017d4:	b029883a 	mov	r20,r22
  8017d8:	202d883a 	mov	r22,r4
  8017dc:	10800044 	addi	r2,r2,1
  8017e0:	1b07883a 	add	r3,r3,r12
  8017e4:	d8801b15 	stw	r2,108(sp)
  8017e8:	b1c00015 	stw	r7,0(r22)
  8017ec:	b3000115 	stw	r12,4(r22)
  8017f0:	d8c01c15 	stw	r3,112(sp)
  8017f4:	10800208 	cmpgei	r2,r2,8
  8017f8:	1002bc1e 	bne	r2,zero,8022ec <___vfprintf_internal_r+0x19cc>
		PAD (dprec - size, zeroes);
  8017fc:	4551c83a 	sub	r8,r8,r21
			PAD (width - realsz, zeroes);
  801800:	b5800204 	addi	r22,r22,8
		PAD (dprec - size, zeroes);
  801804:	023d2f0e 	bge	zero,r8,800cc4 <___vfprintf_internal_r+0x3a4>
  801808:	01c02074 	movhi	r7,129
  80180c:	41000450 	cmplti	r4,r8,17
  801810:	d8801b17 	ldw	r2,108(sp)
  801814:	39c59f04 	addi	r7,r7,5756
  801818:	2000221e 	bne	r4,zero,8018a4 <___vfprintf_internal_r+0xf84>
  80181c:	dc400e15 	stw	r17,56(sp)
  801820:	dc000f15 	stw	r16,60(sp)
  801824:	03000404 	movi	r12,16
  801828:	4021883a 	mov	r16,r8
  80182c:	3823883a 	mov	r17,r7
  801830:	00000406 	br	801844 <___vfprintf_internal_r+0xf24>
  801834:	843ffc04 	addi	r16,r16,-16
  801838:	81000448 	cmpgei	r4,r16,17
  80183c:	b5800204 	addi	r22,r22,8
  801840:	20001426 	beq	r4,zero,801894 <___vfprintf_internal_r+0xf74>
  801844:	10800044 	addi	r2,r2,1
  801848:	18c00404 	addi	r3,r3,16
  80184c:	b4400015 	stw	r17,0(r22)
  801850:	b3000115 	stw	r12,4(r22)
  801854:	d8c01c15 	stw	r3,112(sp)
  801858:	d8801b15 	stw	r2,108(sp)
  80185c:	11000208 	cmpgei	r4,r2,8
  801860:	203ff426 	beq	r4,zero,801834 <___vfprintf_internal_r+0xf14>
  801864:	d9801a04 	addi	r6,sp,104
  801868:	900b883a 	mov	r5,r18
  80186c:	9809883a 	mov	r4,r19
  801870:	08087700 	call	808770 <__sprint_r>
  801874:	103d311e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  801878:	843ffc04 	addi	r16,r16,-16
  80187c:	81000448 	cmpgei	r4,r16,17
  801880:	d8c01c17 	ldw	r3,112(sp)
  801884:	d8801b17 	ldw	r2,108(sp)
  801888:	dd802704 	addi	r22,sp,156
  80188c:	03000404 	movi	r12,16
  801890:	203fec1e 	bne	r4,zero,801844 <___vfprintf_internal_r+0xf24>
  801894:	8011883a 	mov	r8,r16
  801898:	880f883a 	mov	r7,r17
  80189c:	dc000f17 	ldw	r16,60(sp)
  8018a0:	dc400e17 	ldw	r17,56(sp)
  8018a4:	10800044 	addi	r2,r2,1
  8018a8:	1a07883a 	add	r3,r3,r8
  8018ac:	d8801b15 	stw	r2,108(sp)
  8018b0:	b1c00015 	stw	r7,0(r22)
  8018b4:	b2000115 	stw	r8,4(r22)
  8018b8:	d8c01c15 	stw	r3,112(sp)
  8018bc:	10800208 	cmpgei	r2,r2,8
  8018c0:	1001341e 	bne	r2,zero,801d94 <___vfprintf_internal_r+0x1474>
  8018c4:	b5800204 	addi	r22,r22,8
  8018c8:	003cfe06 	br	800cc4 <___vfprintf_internal_r+0x3a4>
		FLUSH ();	/* copy out the I/O vectors */
  8018cc:	d9801a04 	addi	r6,sp,104
  8018d0:	900b883a 	mov	r5,r18
  8018d4:	9809883a 	mov	r4,r19
  8018d8:	08087700 	call	808770 <__sprint_r>
  8018dc:	103d1126 	beq	r2,zero,800d24 <___vfprintf_internal_r+0x404>
  8018e0:	003d1606 	br	800d3c <___vfprintf_internal_r+0x41c>
				if (ndig > 1 || flags & ALT) {
  8018e4:	d8800817 	ldw	r2,32(sp)
			PRINT (cp, size);
  8018e8:	da001b17 	ldw	r8,108(sp)
					PRINT ("0", 1);
  8018ec:	18c00044 	addi	r3,r3,1
				if (ndig > 1 || flags & ALT) {
  8018f0:	10800088 	cmpgei	r2,r2,2
			PRINT (cp, size);
  8018f4:	45400044 	addi	r21,r8,1
  8018f8:	b7000204 	addi	fp,r22,8
				if (ndig > 1 || flags & ALT) {
  8018fc:	1000f326 	beq	r2,zero,801ccc <___vfprintf_internal_r+0x13ac>
					PRINT (cp, 1);
  801900:	00800044 	movi	r2,1
  801904:	b0800115 	stw	r2,4(r22)
  801908:	b4400015 	stw	r17,0(r22)
  80190c:	d8c01c15 	stw	r3,112(sp)
  801910:	dd401b15 	stw	r21,108(sp)
  801914:	a8800210 	cmplti	r2,r21,8
  801918:	1001d826 	beq	r2,zero,80207c <___vfprintf_internal_r+0x175c>
					PRINT (decimal_point, decp_len);
  80191c:	d8800b17 	ldw	r2,44(sp)
  801920:	d9000d17 	ldw	r4,52(sp)
  801924:	ad400044 	addi	r21,r21,1
  801928:	1887883a 	add	r3,r3,r2
  80192c:	e0800115 	stw	r2,4(fp)
  801930:	e1000015 	stw	r4,0(fp)
  801934:	d8c01c15 	stw	r3,112(sp)
  801938:	dd401b15 	stw	r21,108(sp)
  80193c:	a8800208 	cmpgei	r2,r21,8
  801940:	1001d71e 	bne	r2,zero,8020a0 <___vfprintf_internal_r+0x1780>
  801944:	e7000204 	addi	fp,fp,8
					if (_fpvalue) {
  801948:	d9000917 	ldw	r4,36(sp)
  80194c:	d9400a17 	ldw	r5,40(sp)
						PRINT (cp, ndig - 1);
  801950:	aa000044 	addi	r8,r21,1
					if (_fpvalue) {
  801954:	000d883a 	mov	r6,zero
  801958:	000f883a 	mov	r7,zero
  80195c:	d8c00e15 	stw	r3,56(sp)
						PRINT (cp, ndig - 1);
  801960:	da000715 	stw	r8,28(sp)
					if (_fpvalue) {
  801964:	080d6300 	call	80d630 <__eqdf2>
						PAD (ndig - 1, zeroes);
  801968:	d8c00817 	ldw	r3,32(sp)
						PRINT (cp, ndig - 1);
  80196c:	da000717 	ldw	r8,28(sp)
  801970:	e5800204 	addi	r22,fp,8
						PAD (ndig - 1, zeroes);
  801974:	1affffc4 	addi	r11,r3,-1
					if (_fpvalue) {
  801978:	d8c00e17 	ldw	r3,56(sp)
  80197c:	1000e526 	beq	r2,zero,801d14 <___vfprintf_internal_r+0x13f4>
					cp++;
  801980:	8a400044 	addi	r9,r17,1
						PRINT (cp, ndig - 1);
  801984:	1ac7883a 	add	r3,r3,r11
  801988:	da001b15 	stw	r8,108(sp)
  80198c:	e2400015 	stw	r9,0(fp)
  801990:	e2c00115 	stw	r11,4(fp)
  801994:	d8c01c15 	stw	r3,112(sp)
  801998:	42000208 	cmpgei	r8,r8,8
  80199c:	40013f1e 	bne	r8,zero,801e9c <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  8019a0:	e0800404 	addi	r2,fp,16
  8019a4:	aa000084 	addi	r8,r21,2
						PRINT (cp, ndig - 1);
  8019a8:	b039883a 	mov	fp,r22
				PRINT (expstr, expsize);
  8019ac:	102d883a 	mov	r22,r2
  8019b0:	d9001017 	ldw	r4,64(sp)
  8019b4:	d8801644 	addi	r2,sp,89
  8019b8:	da001b15 	stw	r8,108(sp)
  8019bc:	20c7883a 	add	r3,r4,r3
  8019c0:	e0800015 	stw	r2,0(fp)
  8019c4:	e1000115 	stw	r4,4(fp)
  8019c8:	d8c01c15 	stw	r3,112(sp)
  8019cc:	42000210 	cmplti	r8,r8,8
  8019d0:	403cc91e 	bne	r8,zero,800cf8 <___vfprintf_internal_r+0x3d8>
  8019d4:	d9801a04 	addi	r6,sp,104
  8019d8:	900b883a 	mov	r5,r18
  8019dc:	9809883a 	mov	r4,r19
  8019e0:	08087700 	call	808770 <__sprint_r>
  8019e4:	103cd51e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  8019e8:	d8c01c17 	ldw	r3,112(sp)
				PRINT (expstr, expsize);
  8019ec:	dd802704 	addi	r22,sp,156
  8019f0:	003cc106 	br	800cf8 <___vfprintf_internal_r+0x3d8>
  8019f4:	2019883a 	mov	r12,r4
  8019f8:	003e9e06 	br	801474 <___vfprintf_internal_r+0xb54>
			PAD (width - realsz, blanks);
  8019fc:	03002074 	movhi	r12,129
  801a00:	39000450 	cmplti	r4,r7,17
  801a04:	d8801b17 	ldw	r2,108(sp)
  801a08:	6305a304 	addi	r12,r12,5772
  801a0c:	2000321e 	bne	r4,zero,801ad8 <___vfprintf_internal_r+0x11b8>
  801a10:	dc401115 	stw	r17,68(sp)
  801a14:	b009883a 	mov	r4,r22
  801a18:	9023883a 	mov	r17,r18
  801a1c:	a82d883a 	mov	r22,r21
  801a20:	ddc01215 	stw	r23,72(sp)
  801a24:	03c00404 	movi	r15,16
  801a28:	a02f883a 	mov	r23,r20
  801a2c:	db800e15 	stw	r14,56(sp)
  801a30:	8029883a 	mov	r20,r16
  801a34:	db400f15 	stw	r13,60(sp)
  801a38:	402b883a 	mov	r21,r8
  801a3c:	3821883a 	mov	r16,r7
  801a40:	6025883a 	mov	r18,r12
  801a44:	00000406 	br	801a58 <___vfprintf_internal_r+0x1138>
  801a48:	843ffc04 	addi	r16,r16,-16
  801a4c:	81800448 	cmpgei	r6,r16,17
  801a50:	21000204 	addi	r4,r4,8
  801a54:	30001426 	beq	r6,zero,801aa8 <___vfprintf_internal_r+0x1188>
  801a58:	10800044 	addi	r2,r2,1
  801a5c:	18c00404 	addi	r3,r3,16
  801a60:	24800015 	stw	r18,0(r4)
  801a64:	23c00115 	stw	r15,4(r4)
  801a68:	d8c01c15 	stw	r3,112(sp)
  801a6c:	d8801b15 	stw	r2,108(sp)
  801a70:	11800208 	cmpgei	r6,r2,8
  801a74:	303ff426 	beq	r6,zero,801a48 <___vfprintf_internal_r+0x1128>
  801a78:	d9801a04 	addi	r6,sp,104
  801a7c:	880b883a 	mov	r5,r17
  801a80:	9809883a 	mov	r4,r19
  801a84:	08087700 	call	808770 <__sprint_r>
  801a88:	1002021e 	bne	r2,zero,802294 <___vfprintf_internal_r+0x1974>
  801a8c:	843ffc04 	addi	r16,r16,-16
  801a90:	81800448 	cmpgei	r6,r16,17
  801a94:	d8c01c17 	ldw	r3,112(sp)
  801a98:	d8801b17 	ldw	r2,108(sp)
  801a9c:	d9002704 	addi	r4,sp,156
  801aa0:	03c00404 	movi	r15,16
  801aa4:	303fec1e 	bne	r6,zero,801a58 <___vfprintf_internal_r+0x1138>
  801aa8:	800f883a 	mov	r7,r16
  801aac:	9019883a 	mov	r12,r18
  801ab0:	a021883a 	mov	r16,r20
  801ab4:	8825883a 	mov	r18,r17
  801ab8:	b829883a 	mov	r20,r23
  801abc:	db800e17 	ldw	r14,56(sp)
  801ac0:	db400f17 	ldw	r13,60(sp)
  801ac4:	ddc01217 	ldw	r23,72(sp)
  801ac8:	dc401117 	ldw	r17,68(sp)
  801acc:	a811883a 	mov	r8,r21
  801ad0:	b02b883a 	mov	r21,r22
  801ad4:	202d883a 	mov	r22,r4
  801ad8:	10800044 	addi	r2,r2,1
  801adc:	19c7883a 	add	r3,r3,r7
  801ae0:	d8801b15 	stw	r2,108(sp)
  801ae4:	b3000015 	stw	r12,0(r22)
  801ae8:	b1c00115 	stw	r7,4(r22)
  801aec:	d8c01c15 	stw	r3,112(sp)
  801af0:	10800208 	cmpgei	r2,r2,8
  801af4:	1001b01e 	bne	r2,zero,8021b8 <___vfprintf_internal_r+0x1898>
  801af8:	b5800204 	addi	r22,r22,8
  801afc:	003c5206 	br	800c48 <___vfprintf_internal_r+0x328>
			PRINT (&sign, 1);
  801b00:	d9801a04 	addi	r6,sp,104
  801b04:	900b883a 	mov	r5,r18
  801b08:	9809883a 	mov	r4,r19
  801b0c:	da001115 	stw	r8,68(sp)
  801b10:	db400f15 	stw	r13,60(sp)
  801b14:	db800e15 	stw	r14,56(sp)
  801b18:	08087700 	call	808770 <__sprint_r>
  801b1c:	103c871e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
			PRINT (ox, 2);
  801b20:	d8c01c17 	ldw	r3,112(sp)
			PRINT (&sign, 1);
  801b24:	da001117 	ldw	r8,68(sp)
  801b28:	db400f17 	ldw	r13,60(sp)
  801b2c:	db800e17 	ldw	r14,56(sp)
  801b30:	dd802704 	addi	r22,sp,156
  801b34:	003c5206 	br	800c80 <___vfprintf_internal_r+0x360>
			PRINT (ox, 2);
  801b38:	d9801a04 	addi	r6,sp,104
  801b3c:	900b883a 	mov	r5,r18
  801b40:	9809883a 	mov	r4,r19
  801b44:	da000f15 	stw	r8,60(sp)
  801b48:	db400e15 	stw	r13,56(sp)
  801b4c:	08087700 	call	808770 <__sprint_r>
  801b50:	103c7a1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  801b54:	d8c01c17 	ldw	r3,112(sp)
			PRINT (ox, 2);
  801b58:	da000f17 	ldw	r8,60(sp)
  801b5c:	db400e17 	ldw	r13,56(sp)
  801b60:	dd802704 	addi	r22,sp,156
  801b64:	003c5306 	br	800cb4 <___vfprintf_internal_r+0x394>
				} else if (expt <= 0) {
  801b68:	dd401417 	ldw	r21,80(sp)
  801b6c:	0541a00e 	bge	zero,r21,8021f0 <___vfprintf_internal_r+0x18d0>
					PRINTANDPAD(cp, convbuf + ndig,
  801b70:	d8800717 	ldw	r2,28(sp)
  801b74:	d9000817 	ldw	r4,32(sp)
  801b78:	102b883a 	mov	r21,r2
  801b7c:	2080b916 	blt	r4,r2,801e64 <___vfprintf_internal_r+0x1544>
  801b80:	05400a0e 	bge	zero,r21,801bac <___vfprintf_internal_r+0x128c>
  801b84:	d8801b17 	ldw	r2,108(sp)
  801b88:	1d47883a 	add	r3,r3,r21
  801b8c:	b4400015 	stw	r17,0(r22)
  801b90:	10800044 	addi	r2,r2,1
  801b94:	d8801b15 	stw	r2,108(sp)
  801b98:	b5400115 	stw	r21,4(r22)
  801b9c:	d8c01c15 	stw	r3,112(sp)
  801ba0:	10800208 	cmpgei	r2,r2,8
  801ba4:	1002b51e 	bne	r2,zero,80267c <___vfprintf_internal_r+0x1d5c>
  801ba8:	b5800204 	addi	r22,r22,8
  801bac:	a800cd16 	blt	r21,zero,801ee4 <___vfprintf_internal_r+0x15c4>
  801bb0:	d8800717 	ldw	r2,28(sp)
  801bb4:	156bc83a 	sub	r21,r2,r21
  801bb8:	0540dc16 	blt	zero,r21,801f2c <___vfprintf_internal_r+0x160c>
					if (expt < ndig || flags & ALT)
  801bbc:	dd401417 	ldw	r21,80(sp)
  801bc0:	d8800817 	ldw	r2,32(sp)
  801bc4:	a880aa0e 	bge	r21,r2,801e70 <___vfprintf_internal_r+0x1550>
					    PRINT (decimal_point, decp_len);
  801bc8:	d8800d17 	ldw	r2,52(sp)
  801bcc:	d9000b17 	ldw	r4,44(sp)
  801bd0:	b0800015 	stw	r2,0(r22)
  801bd4:	d8801b17 	ldw	r2,108(sp)
  801bd8:	1907883a 	add	r3,r3,r4
  801bdc:	b1000115 	stw	r4,4(r22)
  801be0:	10800044 	addi	r2,r2,1
  801be4:	d8801b15 	stw	r2,108(sp)
  801be8:	d8c01c15 	stw	r3,112(sp)
  801bec:	10800208 	cmpgei	r2,r2,8
  801bf0:	1002991e 	bne	r2,zero,802658 <___vfprintf_internal_r+0x1d38>
  801bf4:	b5800204 	addi	r22,r22,8
					PRINTANDPAD (cp, convbuf + ndig,
  801bf8:	d9000817 	ldw	r4,32(sp)
  801bfc:	d9400717 	ldw	r5,28(sp)
  801c00:	2545c83a 	sub	r2,r4,r21
  801c04:	2149c83a 	sub	r4,r4,r5
  801c08:	102b883a 	mov	r21,r2
  801c0c:	2080010e 	bge	r4,r2,801c14 <___vfprintf_internal_r+0x12f4>
  801c10:	202b883a 	mov	r21,r4
  801c14:	05400c0e 	bge	zero,r21,801c48 <___vfprintf_internal_r+0x1328>
					cp += lead;
  801c18:	d9000717 	ldw	r4,28(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  801c1c:	1d47883a 	add	r3,r3,r21
  801c20:	b5400115 	stw	r21,4(r22)
					cp += lead;
  801c24:	8913883a 	add	r9,r17,r4
					PRINTANDPAD (cp, convbuf + ndig,
  801c28:	d9001b17 	ldw	r4,108(sp)
  801c2c:	b2400015 	stw	r9,0(r22)
  801c30:	d8c01c15 	stw	r3,112(sp)
  801c34:	21000044 	addi	r4,r4,1
  801c38:	d9001b15 	stw	r4,108(sp)
  801c3c:	21000208 	cmpgei	r4,r4,8
  801c40:	2002b91e 	bne	r4,zero,802728 <___vfprintf_internal_r+0x1e08>
  801c44:	b5800204 	addi	r22,r22,8
  801c48:	a800010e 	bge	r21,zero,801c50 <___vfprintf_internal_r+0x1330>
  801c4c:	002b883a 	mov	r21,zero
  801c50:	156bc83a 	sub	r21,r2,r21
  801c54:	057c280e 	bge	zero,r21,800cf8 <___vfprintf_internal_r+0x3d8>
  801c58:	01c02074 	movhi	r7,129
  801c5c:	a9000450 	cmplti	r4,r21,17
  801c60:	d8801b17 	ldw	r2,108(sp)
  801c64:	39c59f04 	addi	r7,r7,5756
  801c68:	20018d1e 	bne	r4,zero,8022a0 <___vfprintf_internal_r+0x1980>
  801c6c:	07000404 	movi	fp,16
  801c70:	3823883a 	mov	r17,r7
  801c74:	00000406 	br	801c88 <___vfprintf_internal_r+0x1368>
  801c78:	b5800204 	addi	r22,r22,8
  801c7c:	ad7ffc04 	addi	r21,r21,-16
  801c80:	a9000448 	cmpgei	r4,r21,17
  801c84:	20018526 	beq	r4,zero,80229c <___vfprintf_internal_r+0x197c>
  801c88:	10800044 	addi	r2,r2,1
  801c8c:	18c00404 	addi	r3,r3,16
  801c90:	b4400015 	stw	r17,0(r22)
  801c94:	b7000115 	stw	fp,4(r22)
  801c98:	d8c01c15 	stw	r3,112(sp)
  801c9c:	d8801b15 	stw	r2,108(sp)
  801ca0:	11000208 	cmpgei	r4,r2,8
  801ca4:	203ff426 	beq	r4,zero,801c78 <___vfprintf_internal_r+0x1358>
  801ca8:	d9801a04 	addi	r6,sp,104
  801cac:	900b883a 	mov	r5,r18
  801cb0:	9809883a 	mov	r4,r19
  801cb4:	08087700 	call	808770 <__sprint_r>
  801cb8:	103c201e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  801cbc:	d8c01c17 	ldw	r3,112(sp)
  801cc0:	d8801b17 	ldw	r2,108(sp)
  801cc4:	dd802704 	addi	r22,sp,156
  801cc8:	003fec06 	br	801c7c <___vfprintf_internal_r+0x135c>
				if (ndig > 1 || flags & ALT) {
  801ccc:	d8800417 	ldw	r2,16(sp)
  801cd0:	1080004c 	andi	r2,r2,1
  801cd4:	103f0a1e 	bne	r2,zero,801900 <___vfprintf_internal_r+0xfe0>
					PRINT (cp, 1);
  801cd8:	00800044 	movi	r2,1
  801cdc:	dd401b15 	stw	r21,108(sp)
  801ce0:	b4400015 	stw	r17,0(r22)
  801ce4:	b0800115 	stw	r2,4(r22)
  801ce8:	d8c01c15 	stw	r3,112(sp)
  801cec:	ad400208 	cmpgei	r21,r21,8
  801cf0:	a8006a1e 	bne	r21,zero,801e9c <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  801cf4:	42000084 	addi	r8,r8,2
  801cf8:	b5800404 	addi	r22,r22,16
  801cfc:	003f2c06 	br	8019b0 <___vfprintf_internal_r+0x1090>
			if (_uquad != 0 || prec != 0) {
  801d00:	4002511e 	bne	r8,zero,802648 <___vfprintf_internal_r+0x1d28>
  801d04:	0011883a 	mov	r8,zero
  801d08:	002b883a 	mov	r21,zero
			cp = buf + BUF;
  801d0c:	dc402704 	addi	r17,sp,156
  801d10:	003d4806 	br	801234 <___vfprintf_internal_r+0x914>
						PAD (ndig - 1, zeroes);
  801d14:	02ff260e 	bge	zero,r11,8019b0 <___vfprintf_internal_r+0x1090>
  801d18:	58800450 	cmplti	r2,r11,17
  801d1c:	01c02074 	movhi	r7,129
  801d20:	1002d01e 	bne	r2,zero,802864 <___vfprintf_internal_r+0x1f44>
  801d24:	39c59f04 	addi	r7,r7,5756
  801d28:	dc000715 	stw	r16,28(sp)
  801d2c:	05800404 	movi	r22,16
  801d30:	5823883a 	mov	r17,r11
  801d34:	402b883a 	mov	r21,r8
  801d38:	3821883a 	mov	r16,r7
  801d3c:	00000506 	br	801d54 <___vfprintf_internal_r+0x1434>
  801d40:	e7000204 	addi	fp,fp,8
  801d44:	8c7ffc04 	addi	r17,r17,-16
  801d48:	88800448 	cmpgei	r2,r17,17
  801d4c:	1001c526 	beq	r2,zero,802464 <___vfprintf_internal_r+0x1b44>
  801d50:	ad400044 	addi	r21,r21,1
  801d54:	18c00404 	addi	r3,r3,16
  801d58:	e4000015 	stw	r16,0(fp)
  801d5c:	e5800115 	stw	r22,4(fp)
  801d60:	d8c01c15 	stw	r3,112(sp)
  801d64:	dd401b15 	stw	r21,108(sp)
  801d68:	a8800208 	cmpgei	r2,r21,8
  801d6c:	103ff426 	beq	r2,zero,801d40 <___vfprintf_internal_r+0x1420>
  801d70:	d9801a04 	addi	r6,sp,104
  801d74:	900b883a 	mov	r5,r18
  801d78:	9809883a 	mov	r4,r19
  801d7c:	08087700 	call	808770 <__sprint_r>
  801d80:	103bee1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  801d84:	dd401b17 	ldw	r21,108(sp)
  801d88:	d8c01c17 	ldw	r3,112(sp)
  801d8c:	df002704 	addi	fp,sp,156
  801d90:	003fec06 	br	801d44 <___vfprintf_internal_r+0x1424>
		PAD (dprec - size, zeroes);
  801d94:	d9801a04 	addi	r6,sp,104
  801d98:	900b883a 	mov	r5,r18
  801d9c:	9809883a 	mov	r4,r19
  801da0:	08087700 	call	808770 <__sprint_r>
  801da4:	103be51e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  801da8:	d8c01c17 	ldw	r3,112(sp)
		PAD (dprec - size, zeroes);
  801dac:	dd802704 	addi	r22,sp,156
  801db0:	003bc406 	br	800cc4 <___vfprintf_internal_r+0x3a4>
					if (expt < ndig || flags & ALT) {
  801db4:	d8800417 	ldw	r2,16(sp)
  801db8:	1080004c 	andi	r2,r2,1
  801dbc:	103bce26 	beq	r2,zero,800cf8 <___vfprintf_internal_r+0x3d8>
  801dc0:	003e2b06 	br	801670 <___vfprintf_internal_r+0xd50>
			cp = buf + BUF;
  801dc4:	dc402704 	addi	r17,sp,156
  801dc8:	003d1a06 	br	801234 <___vfprintf_internal_r+0x914>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  801dcc:	d9000517 	ldw	r4,20(sp)
  801dd0:	2005d7fa 	srai	r2,r4,31
  801dd4:	19000015 	stw	r4,0(r3)
  801dd8:	18800115 	stw	r2,4(r3)
  801ddc:	003b0406 	br	8009f0 <___vfprintf_internal_r+0xd0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
  801de0:	18800017 	ldw	r2,0(r3)
  801de4:	d8800915 	stw	r2,36(sp)
  801de8:	18800117 	ldw	r2,4(r3)
  801dec:	d8800a15 	stw	r2,40(sp)
  801df0:	003c7406 	br	800fc4 <___vfprintf_internal_r+0x6a4>
			_uquad = UARG ();
  801df4:	25000017 	ldw	r20,0(r4)
  801df8:	002b883a 	mov	r21,zero
  801dfc:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  801e00:	00800044 	movi	r2,1
  801e04:	003c0006 	br	800e08 <___vfprintf_internal_r+0x4e8>
				ox[0] = '0';
  801e08:	00800c04 	movi	r2,48
  801e0c:	d8801385 	stb	r2,78(sp)
				ox[1] = ch;
  801e10:	d8c013c5 	stb	r3,79(sp)
				flags |= HEXPREFIX;
  801e14:	63000094 	ori	r12,r12,2
			base = HEX;
  801e18:	00800084 	movi	r2,2
  801e1c:	003bfa06 	br	800e08 <___vfprintf_internal_r+0x4e8>
			_uquad = UARG ();
  801e20:	25000017 	ldw	r20,0(r4)
  801e24:	002b883a 	mov	r21,zero
  801e28:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  801e2c:	0005883a 	mov	r2,zero
  801e30:	003bf506 	br	800e08 <___vfprintf_internal_r+0x4e8>
hex:			_uquad = UARG ();
  801e34:	2d000017 	ldw	r20,0(r5)
  801e38:	002b883a 	mov	r21,zero
  801e3c:	d9000615 	stw	r4,24(sp)
  801e40:	003d1f06 	br	8012c0 <___vfprintf_internal_r+0x9a0>
			_uquad = SARG ();
  801e44:	25000017 	ldw	r20,0(r4)
  801e48:	d8c00615 	stw	r3,24(sp)
  801e4c:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  801e50:	a805883a 	mov	r2,r21
  801e54:	003ce506 	br	8011ec <___vfprintf_internal_r+0x8cc>
			width = -width;
  801e58:	0421c83a 	sub	r16,zero,r16
			width = GET_ARG (n, ap, int);
  801e5c:	d8800615 	stw	r2,24(sp)
  801e60:	003db006 	br	801524 <___vfprintf_internal_r+0xc04>
  801e64:	202b883a 	mov	r21,r4
					PRINTANDPAD(cp, convbuf + ndig,
  801e68:	057f4616 	blt	zero,r21,801b84 <___vfprintf_internal_r+0x1264>
  801e6c:	003f4f06 	br	801bac <___vfprintf_internal_r+0x128c>
					if (expt < ndig || flags & ALT)
  801e70:	d8800417 	ldw	r2,16(sp)
  801e74:	1080004c 	andi	r2,r2,1
  801e78:	103f531e 	bne	r2,zero,801bc8 <___vfprintf_internal_r+0x12a8>
					PRINTANDPAD (cp, convbuf + ndig,
  801e7c:	d9000817 	ldw	r4,32(sp)
  801e80:	d9400717 	ldw	r5,28(sp)
  801e84:	2545c83a 	sub	r2,r4,r21
  801e88:	2179c83a 	sub	fp,r4,r5
  801e8c:	102b883a 	mov	r21,r2
  801e90:	e0bf6d0e 	bge	fp,r2,801c48 <___vfprintf_internal_r+0x1328>
  801e94:	e02b883a 	mov	r21,fp
  801e98:	003f6b06 	br	801c48 <___vfprintf_internal_r+0x1328>
					PRINT (cp, 1);
  801e9c:	d9801a04 	addi	r6,sp,104
  801ea0:	900b883a 	mov	r5,r18
  801ea4:	9809883a 	mov	r4,r19
  801ea8:	08087700 	call	808770 <__sprint_r>
  801eac:	103ba31e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
				PRINT (expstr, expsize);
  801eb0:	da001b17 	ldw	r8,108(sp)
  801eb4:	d8c01c17 	ldw	r3,112(sp)
  801eb8:	dd802904 	addi	r22,sp,164
  801ebc:	42000044 	addi	r8,r8,1
					PRINT (cp, 1);
  801ec0:	df002704 	addi	fp,sp,156
  801ec4:	003eba06 	br	8019b0 <___vfprintf_internal_r+0x1090>
rflag:		ch = *fmt++;
  801ec8:	bf000043 	ldbu	fp,1(r23)
				flags |= QUADINT;
  801ecc:	63000814 	ori	r12,r12,32
				fmt++;
  801ed0:	bdc00044 	addi	r23,r23,1
  801ed4:	e2c03fcc 	andi	r11,fp,255
  801ed8:	5ac0201c 	xori	r11,r11,128
  801edc:	5affe004 	addi	r11,r11,-128
  801ee0:	003ad406 	br	800a34 <___vfprintf_internal_r+0x114>
					PRINTANDPAD(cp, convbuf + ndig,
  801ee4:	002b883a 	mov	r21,zero
  801ee8:	003f3106 	br	801bb0 <___vfprintf_internal_r+0x1290>
						PRINT (decimal_point, decp_len);
  801eec:	d9801a04 	addi	r6,sp,104
  801ef0:	900b883a 	mov	r5,r18
  801ef4:	9809883a 	mov	r4,r19
  801ef8:	08087700 	call	808770 <__sprint_r>
  801efc:	103b8f1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
		FLUSH ();	/* copy out the I/O vectors */
  801f00:	d8c01c17 	ldw	r3,112(sp)
						PRINT (decimal_point, decp_len);
  801f04:	dd802704 	addi	r22,sp,156
  801f08:	003de506 	br	8016a0 <___vfprintf_internal_r+0xd80>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  801f0c:	408001f0 	cmpltui	r2,r8,7
  801f10:	402b883a 	mov	r21,r8
  801f14:	1001a026 	beq	r2,zero,802598 <___vfprintf_internal_r+0x1c78>
				cp = "(null)";
  801f18:	04402074 	movhi	r17,129
  801f1c:	a829883a 	mov	r20,r21
			cp = GET_ARG (N, ap, char_ptr_t);
  801f20:	d8c00615 	stw	r3,24(sp)
				cp = "(null)";
  801f24:	8c459c04 	addi	r17,r17,5744
  801f28:	003b3a06 	br	800c14 <___vfprintf_internal_r+0x2f4>
					PRINTANDPAD(cp, convbuf + ndig,
  801f2c:	01c02074 	movhi	r7,129
  801f30:	a9000450 	cmplti	r4,r21,17
  801f34:	d8801b17 	ldw	r2,108(sp)
  801f38:	39c59f04 	addi	r7,r7,5756
  801f3c:	2001831e 	bne	r4,zero,80254c <___vfprintf_internal_r+0x1c2c>
  801f40:	dc000e15 	stw	r16,56(sp)
  801f44:	07000404 	movi	fp,16
  801f48:	3821883a 	mov	r16,r7
  801f4c:	00000406 	br	801f60 <___vfprintf_internal_r+0x1640>
  801f50:	b5800204 	addi	r22,r22,8
  801f54:	ad7ffc04 	addi	r21,r21,-16
  801f58:	a9000448 	cmpgei	r4,r21,17
  801f5c:	20017926 	beq	r4,zero,802544 <___vfprintf_internal_r+0x1c24>
  801f60:	10800044 	addi	r2,r2,1
  801f64:	18c00404 	addi	r3,r3,16
  801f68:	b4000015 	stw	r16,0(r22)
  801f6c:	b7000115 	stw	fp,4(r22)
  801f70:	d8c01c15 	stw	r3,112(sp)
  801f74:	d8801b15 	stw	r2,108(sp)
  801f78:	11000208 	cmpgei	r4,r2,8
  801f7c:	203ff426 	beq	r4,zero,801f50 <___vfprintf_internal_r+0x1630>
  801f80:	d9801a04 	addi	r6,sp,104
  801f84:	900b883a 	mov	r5,r18
  801f88:	9809883a 	mov	r4,r19
  801f8c:	08087700 	call	808770 <__sprint_r>
  801f90:	103b6a1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  801f94:	d8c01c17 	ldw	r3,112(sp)
  801f98:	d8801b17 	ldw	r2,108(sp)
  801f9c:	dd802704 	addi	r22,sp,156
  801fa0:	003fec06 	br	801f54 <___vfprintf_internal_r+0x1634>
  801fa4:	1805883a 	mov	r2,r3
				} else if (expt >= ndig) { /* fixed g fmt */
  801fa8:	d8c00817 	ldw	r3,32(sp)
  801fac:	10c15016 	blt	r2,r3,8024f0 <___vfprintf_internal_r+0x1bd0>
					if (flags & ALT)
  801fb0:	6300004c 	andi	r12,r12,1
  801fb4:	60017f1e 	bne	r12,zero,8025b4 <___vfprintf_internal_r+0x1c94>
		realsz = dprec > size ? dprec : size;
  801fb8:	1029883a 	mov	r20,r2
  801fbc:	1000010e 	bge	r2,zero,801fc4 <___vfprintf_internal_r+0x16a4>
  801fc0:	0029883a 	mov	r20,zero
  801fc4:	dd400717 	ldw	r21,28(sp)
  801fc8:	070019c4 	movi	fp,103
  801fcc:	00015006 	br	802510 <___vfprintf_internal_r+0x1bf0>
			cp = buf + BUF;
  801fd0:	dc402704 	addi	r17,sp,156
  801fd4:	a805883a 	mov	r2,r21
  801fd8:	dc000715 	stw	r16,28(sp)
  801fdc:	902b883a 	mov	r21,r18
  801fe0:	8821883a 	mov	r16,r17
  801fe4:	db000415 	stw	r12,16(sp)
  801fe8:	a023883a 	mov	r17,r20
  801fec:	da000e15 	stw	r8,56(sp)
  801ff0:	9829883a 	mov	r20,r19
  801ff4:	1025883a 	mov	r18,r2
  801ff8:	6827883a 	mov	r19,r13
					  *--cp = to_char (_uquad % 10);
  801ffc:	8809883a 	mov	r4,r17
  802000:	900b883a 	mov	r5,r18
  802004:	01800284 	movi	r6,10
  802008:	000f883a 	mov	r7,zero
  80200c:	080bc700 	call	80bc70 <__umoddi3>
  802010:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  802014:	8809883a 	mov	r4,r17
  802018:	900b883a 	mov	r5,r18
  80201c:	01800284 	movi	r6,10
  802020:	000f883a 	mov	r7,zero
					  *--cp = to_char (_uquad % 10);
  802024:	80bfffc5 	stb	r2,-1(r16)
					  _uquad /= 10;
  802028:	080b6500 	call	80b650 <__udivdi3>
  80202c:	900d883a 	mov	r6,r18
  802030:	880f883a 	mov	r7,r17
					  *--cp = to_char (_uquad % 10);
  802034:	843fffc4 	addi	r16,r16,-1
					  _uquad /= 10;
  802038:	1023883a 	mov	r17,r2
  80203c:	1825883a 	mov	r18,r3
					} while (_uquad != 0);
  802040:	303fee1e 	bne	r6,zero,801ffc <___vfprintf_internal_r+0x16dc>
  802044:	39c002a8 	cmpgeui	r7,r7,10
  802048:	383fec1e 	bne	r7,zero,801ffc <___vfprintf_internal_r+0x16dc>
			size = buf + BUF - cp;
  80204c:	8023883a 	mov	r17,r16
  802050:	d8802704 	addi	r2,sp,156
  802054:	981b883a 	mov	r13,r19
  802058:	a825883a 	mov	r18,r21
  80205c:	dc000717 	ldw	r16,28(sp)
  802060:	da000e17 	ldw	r8,56(sp)
  802064:	a027883a 	mov	r19,r20
  802068:	146bc83a 	sub	r21,r2,r17
  80206c:	003c7106 	br	801234 <___vfprintf_internal_r+0x914>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  802070:	d8800517 	ldw	r2,20(sp)
  802074:	18800015 	stw	r2,0(r3)
  802078:	003a5d06 	br	8009f0 <___vfprintf_internal_r+0xd0>
					PRINT (cp, 1);
  80207c:	d9801a04 	addi	r6,sp,104
  802080:	900b883a 	mov	r5,r18
  802084:	9809883a 	mov	r4,r19
  802088:	08087700 	call	808770 <__sprint_r>
  80208c:	103b2b1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
					PRINT (decimal_point, decp_len);
  802090:	d8c01c17 	ldw	r3,112(sp)
  802094:	dd401b17 	ldw	r21,108(sp)
					PRINT (cp, 1);
  802098:	df002704 	addi	fp,sp,156
  80209c:	003e1f06 	br	80191c <___vfprintf_internal_r+0xffc>
					PRINT (decimal_point, decp_len);
  8020a0:	d9801a04 	addi	r6,sp,104
  8020a4:	900b883a 	mov	r5,r18
  8020a8:	9809883a 	mov	r4,r19
  8020ac:	08087700 	call	808770 <__sprint_r>
  8020b0:	103b221e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
						PRINT (cp, ndig - 1);
  8020b4:	d8c01c17 	ldw	r3,112(sp)
  8020b8:	dd401b17 	ldw	r21,108(sp)
					PRINT (decimal_point, decp_len);
  8020bc:	df002704 	addi	fp,sp,156
  8020c0:	003e2106 	br	801948 <___vfprintf_internal_r+0x1028>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  8020c4:	d8801804 	addi	r2,sp,96
  8020c8:	d8800315 	stw	r2,12(sp)
  8020cc:	d9400917 	ldw	r5,36(sp)
  8020d0:	d8801504 	addi	r2,sp,84
  8020d4:	d8800215 	stw	r2,8(sp)
  8020d8:	d8801404 	addi	r2,sp,80
  8020dc:	da000015 	stw	r8,0(sp)
  8020e0:	180d883a 	mov	r6,r3
  8020e4:	d8800115 	stw	r2,4(sp)
  8020e8:	01c000c4 	movi	r7,3
  8020ec:	9809883a 	mov	r4,r19
  8020f0:	db000f15 	stw	r12,60(sp)
  8020f4:	da000815 	stw	r8,32(sp)
  8020f8:	d8c00715 	stw	r3,28(sp)
  8020fc:	0802d100 	call	802d10 <_dtoa_r>
		bp = digits + ndigits;
  802100:	da000817 	ldw	r8,32(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  802104:	1023883a 	mov	r17,r2
		bp = digits + ndigits;
  802108:	d8c00717 	ldw	r3,28(sp)
  80210c:	1213883a 	add	r9,r2,r8
			if (*digits == '0' && value)
  802110:	88800007 	ldb	r2,0(r17)
  802114:	db000f17 	ldw	r12,60(sp)
  802118:	10800c20 	cmpeqi	r2,r2,48
  80211c:	1001951e 	bne	r2,zero,802774 <___vfprintf_internal_r+0x1e54>
			bp += *decpt;
  802120:	d8801417 	ldw	r2,80(sp)
  802124:	4893883a 	add	r9,r9,r2
		if (value == 0)	/* kludge for __dtoa irregularity */
  802128:	d9000917 	ldw	r4,36(sp)
  80212c:	000d883a 	mov	r6,zero
  802130:	000f883a 	mov	r7,zero
  802134:	180b883a 	mov	r5,r3
  802138:	da400f15 	stw	r9,60(sp)
  80213c:	da000815 	stw	r8,32(sp)
  802140:	db000715 	stw	r12,28(sp)
  802144:	080d6300 	call	80d630 <__eqdf2>
  802148:	db000717 	ldw	r12,28(sp)
  80214c:	da000817 	ldw	r8,32(sp)
  802150:	da400f17 	ldw	r9,60(sp)
  802154:	10000f1e 	bne	r2,zero,802194 <___vfprintf_internal_r+0x1874>
  802158:	4805883a 	mov	r2,r9
				if (expt <= -4 || expt > prec)
  80215c:	d8c01417 	ldw	r3,80(sp)
	*length = rve - digits;
  802160:	1445c83a 	sub	r2,r2,r17
			if (ch == 'g' || ch == 'G') {
  802164:	ad4011d8 	cmpnei	r21,r21,71
				if (expt <= -4 || expt > prec)
  802168:	d8c00715 	stw	r3,28(sp)
	*length = rve - digits;
  80216c:	d8800815 	stw	r2,32(sp)
			if (ch == 'g' || ch == 'G') {
  802170:	a83bc526 	beq	r21,zero,801088 <___vfprintf_internal_r+0x768>
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
  802174:	a03bc926 	beq	r20,zero,80109c <___vfprintf_internal_r+0x77c>
					if (expt > 0) {
  802178:	6080004c 	andi	r2,r12,1
  80217c:	1204b03a 	or	r2,r2,r8
  802180:	00c11a0e 	bge	zero,r3,8025ec <___vfprintf_internal_r+0x1ccc>
						if (prec || flags & ALT)
  802184:	1001981e 	bne	r2,zero,8027e8 <___vfprintf_internal_r+0x1ec8>
  802188:	182b883a 	mov	r21,r3
  80218c:	1829883a 	mov	r20,r3
  802190:	0000df06 	br	802510 <___vfprintf_internal_r+0x1bf0>
		while (rve < bp)
  802194:	d8801817 	ldw	r2,96(sp)
  802198:	127ff02e 	bgeu	r2,r9,80215c <___vfprintf_internal_r+0x183c>
			*rve++ = '0';
  80219c:	01000c04 	movi	r4,48
  8021a0:	10c00044 	addi	r3,r2,1
  8021a4:	d8c01815 	stw	r3,96(sp)
  8021a8:	11000005 	stb	r4,0(r2)
		while (rve < bp)
  8021ac:	d8801817 	ldw	r2,96(sp)
  8021b0:	127ffb36 	bltu	r2,r9,8021a0 <___vfprintf_internal_r+0x1880>
  8021b4:	003fe906 	br	80215c <___vfprintf_internal_r+0x183c>
			PAD (width - realsz, blanks);
  8021b8:	d9801a04 	addi	r6,sp,104
  8021bc:	900b883a 	mov	r5,r18
  8021c0:	9809883a 	mov	r4,r19
  8021c4:	da001115 	stw	r8,68(sp)
  8021c8:	db400f15 	stw	r13,60(sp)
  8021cc:	db800e15 	stw	r14,56(sp)
  8021d0:	08087700 	call	808770 <__sprint_r>
  8021d4:	103ad91e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
			PRINT (&sign, 1);
  8021d8:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, blanks);
  8021dc:	da001117 	ldw	r8,68(sp)
  8021e0:	db400f17 	ldw	r13,60(sp)
  8021e4:	db800e17 	ldw	r14,56(sp)
  8021e8:	dd802704 	addi	r22,sp,156
  8021ec:	003a9606 	br	800c48 <___vfprintf_internal_r+0x328>
					PRINT ("0", 1);
  8021f0:	d8801b17 	ldw	r2,108(sp)
  8021f4:	01002074 	movhi	r4,129
  8021f8:	21059e04 	addi	r4,r4,5752
  8021fc:	10800044 	addi	r2,r2,1
  802200:	18c00044 	addi	r3,r3,1
  802204:	b1000015 	stw	r4,0(r22)
  802208:	01000044 	movi	r4,1
  80220c:	d8801b15 	stw	r2,108(sp)
  802210:	b1000115 	stw	r4,4(r22)
  802214:	d8c01c15 	stw	r3,112(sp)
  802218:	10800208 	cmpgei	r2,r2,8
  80221c:	1000d51e 	bne	r2,zero,802574 <___vfprintf_internal_r+0x1c54>
  802220:	b5800204 	addi	r22,r22,8
					if (expt || ndig || flags & ALT) {
  802224:	a800631e 	bne	r21,zero,8023b4 <___vfprintf_internal_r+0x1a94>
  802228:	d8800417 	ldw	r2,16(sp)
  80222c:	d9000817 	ldw	r4,32(sp)
  802230:	1080004c 	andi	r2,r2,1
  802234:	1104b03a 	or	r2,r2,r4
  802238:	103aaf26 	beq	r2,zero,800cf8 <___vfprintf_internal_r+0x3d8>
						PRINT (decimal_point, decp_len);
  80223c:	d8800d17 	ldw	r2,52(sp)
  802240:	d9000b17 	ldw	r4,44(sp)
  802244:	b0800015 	stw	r2,0(r22)
  802248:	d8801b17 	ldw	r2,108(sp)
  80224c:	20c7883a 	add	r3,r4,r3
  802250:	b1000115 	stw	r4,4(r22)
  802254:	10800044 	addi	r2,r2,1
  802258:	d8c01c15 	stw	r3,112(sp)
  80225c:	d8801b15 	stw	r2,108(sp)
  802260:	11000208 	cmpgei	r4,r2,8
  802264:	2000e51e 	bne	r4,zero,8025fc <___vfprintf_internal_r+0x1cdc>
  802268:	b5800204 	addi	r22,r22,8
						PRINT (cp, ndig);
  80226c:	d9000817 	ldw	r4,32(sp)
  802270:	10800044 	addi	r2,r2,1
  802274:	d8801b15 	stw	r2,108(sp)
  802278:	20c7883a 	add	r3,r4,r3
  80227c:	b4400015 	stw	r17,0(r22)
  802280:	b1000115 	stw	r4,4(r22)
  802284:	d8c01c15 	stw	r3,112(sp)
  802288:	10800208 	cmpgei	r2,r2,8
  80228c:	103a9926 	beq	r2,zero,800cf4 <___vfprintf_internal_r+0x3d4>
  802290:	003dd006 	br	8019d4 <___vfprintf_internal_r+0x10b4>
  802294:	8825883a 	mov	r18,r17
  802298:	003aa806 	br	800d3c <___vfprintf_internal_r+0x41c>
  80229c:	880f883a 	mov	r7,r17
					PRINTANDPAD (cp, convbuf + ndig,
  8022a0:	10800044 	addi	r2,r2,1
  8022a4:	1d47883a 	add	r3,r3,r21
  8022a8:	b1c00015 	stw	r7,0(r22)
  8022ac:	003a8c06 	br	800ce0 <___vfprintf_internal_r+0x3c0>
					PRINT ("0", 1);
  8022b0:	d9801a04 	addi	r6,sp,104
  8022b4:	900b883a 	mov	r5,r18
  8022b8:	9809883a 	mov	r4,r19
  8022bc:	08087700 	call	808770 <__sprint_r>
  8022c0:	103a9e1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
						PRINT (decimal_point, decp_len);
  8022c4:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  8022c8:	dd802704 	addi	r22,sp,156
  8022cc:	003ce506 	br	801664 <___vfprintf_internal_r+0xd44>
		value = -value;
  8022d0:	10e0003c 	xorhi	r3,r2,32768
		*sign = '-';
  8022d4:	00800b44 	movi	r2,45
  8022d8:	d8800605 	stb	r2,24(sp)
  8022dc:	003b4506 	br	800ff4 <___vfprintf_internal_r+0x6d4>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
  8022e0:	403b3e1e 	bne	r8,zero,800fdc <___vfprintf_internal_r+0x6bc>
				prec = 1;
  8022e4:	02000044 	movi	r8,1
  8022e8:	003b3c06 	br	800fdc <___vfprintf_internal_r+0x6bc>
			PAD (width - realsz, zeroes);
  8022ec:	d9801a04 	addi	r6,sp,104
  8022f0:	900b883a 	mov	r5,r18
  8022f4:	9809883a 	mov	r4,r19
  8022f8:	da000e15 	stw	r8,56(sp)
  8022fc:	08087700 	call	808770 <__sprint_r>
  802300:	103a8e1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
			PRINT (cp, size);
  802304:	d8c01c17 	ldw	r3,112(sp)
			PAD (width - realsz, zeroes);
  802308:	da000e17 	ldw	r8,56(sp)
  80230c:	dd802704 	addi	r22,sp,156
  802310:	003a6a06 	br	800cbc <___vfprintf_internal_r+0x39c>
				switch (base) {
  802314:	10c00060 	cmpeqi	r3,r2,1
  802318:	2019883a 	mov	r12,r4
  80231c:	183c5726 	beq	r3,zero,80147c <___vfprintf_internal_r+0xb5c>
  802320:	003bbf06 	br	801220 <___vfprintf_internal_r+0x900>
				prec = DEFPREC;
  802324:	02000184 	movi	r8,6
  802328:	003b2c06 	br	800fdc <___vfprintf_internal_r+0x6bc>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  80232c:	d8801804 	addi	r2,sp,96
  802330:	d8800315 	stw	r2,12(sp)
  802334:	d9400917 	ldw	r5,36(sp)
  802338:	d8801504 	addi	r2,sp,84
			ndigits++;
  80233c:	42400044 	addi	r9,r8,1
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  802340:	d8800215 	stw	r2,8(sp)
  802344:	d8801404 	addi	r2,sp,80
  802348:	da400015 	stw	r9,0(sp)
  80234c:	180d883a 	mov	r6,r3
  802350:	d8800115 	stw	r2,4(sp)
  802354:	01c00084 	movi	r7,2
  802358:	9809883a 	mov	r4,r19
  80235c:	db001115 	stw	r12,68(sp)
			ndigits++;
  802360:	da000f15 	stw	r8,60(sp)
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
  802364:	da400815 	stw	r9,32(sp)
  802368:	d8c00715 	stw	r3,28(sp)
  80236c:	0802d100 	call	802d10 <_dtoa_r>
  802370:	d8c00717 	ldw	r3,28(sp)
  802374:	da400817 	ldw	r9,32(sp)
  802378:	da000f17 	ldw	r8,60(sp)
  80237c:	db001117 	ldw	r12,68(sp)
  802380:	1023883a 	mov	r17,r2
	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
  802384:	e08011d8 	cmpnei	r2,fp,71
  802388:	103b3626 	beq	r2,zero,801064 <___vfprintf_internal_r+0x744>
		bp = digits + ndigits;
  80238c:	8a53883a 	add	r9,r17,r9
		if (ch == 'f' || ch == 'F') {
  802390:	003f6506 	br	802128 <___vfprintf_internal_r+0x1808>
				size = strlen (cp);
  802394:	8809883a 	mov	r4,r17
  802398:	db000415 	stw	r12,16(sp)
  80239c:	d8c00615 	stw	r3,24(sp)
  8023a0:	08008880 	call	800888 <strlen>
  8023a4:	db000417 	ldw	r12,16(sp)
  8023a8:	102b883a 	mov	r21,r2
  8023ac:	1029883a 	mov	r20,r2
  8023b0:	003a1806 	br	800c14 <___vfprintf_internal_r+0x2f4>
						PRINT (decimal_point, decp_len);
  8023b4:	d8800d17 	ldw	r2,52(sp)
  8023b8:	d9000b17 	ldw	r4,44(sp)
  8023bc:	b0800015 	stw	r2,0(r22)
  8023c0:	d8801b17 	ldw	r2,108(sp)
  8023c4:	20c7883a 	add	r3,r4,r3
  8023c8:	b1000115 	stw	r4,4(r22)
  8023cc:	10800044 	addi	r2,r2,1
  8023d0:	d8c01c15 	stw	r3,112(sp)
  8023d4:	d8801b15 	stw	r2,108(sp)
  8023d8:	11000208 	cmpgei	r4,r2,8
  8023dc:	2000871e 	bne	r4,zero,8025fc <___vfprintf_internal_r+0x1cdc>
  8023e0:	b5800204 	addi	r22,r22,8
						PAD (-expt, zeroes);
  8023e4:	a83fa10e 	bge	r21,zero,80226c <___vfprintf_internal_r+0x194c>
  8023e8:	01c02074 	movhi	r7,129
  8023ec:	a93ffc08 	cmpgei	r4,r21,-16
  8023f0:	39c59f04 	addi	r7,r7,5756
  8023f4:	056bc83a 	sub	r21,zero,r21
  8023f8:	2001021e 	bne	r4,zero,802804 <___vfprintf_internal_r+0x1ee4>
  8023fc:	dc000715 	stw	r16,28(sp)
  802400:	07000404 	movi	fp,16
  802404:	9021883a 	mov	r16,r18
  802408:	3825883a 	mov	r18,r7
  80240c:	00000406 	br	802420 <___vfprintf_internal_r+0x1b00>
  802410:	b5800204 	addi	r22,r22,8
  802414:	ad7ffc04 	addi	r21,r21,-16
  802418:	a9800448 	cmpgei	r6,r21,17
  80241c:	3000f626 	beq	r6,zero,8027f8 <___vfprintf_internal_r+0x1ed8>
  802420:	10800044 	addi	r2,r2,1
  802424:	18c00404 	addi	r3,r3,16
  802428:	b4800015 	stw	r18,0(r22)
  80242c:	b7000115 	stw	fp,4(r22)
  802430:	d8c01c15 	stw	r3,112(sp)
  802434:	d8801b15 	stw	r2,108(sp)
  802438:	11800208 	cmpgei	r6,r2,8
  80243c:	303ff426 	beq	r6,zero,802410 <___vfprintf_internal_r+0x1af0>
  802440:	d9801a04 	addi	r6,sp,104
  802444:	800b883a 	mov	r5,r16
  802448:	9809883a 	mov	r4,r19
  80244c:	08087700 	call	808770 <__sprint_r>
  802450:	1001071e 	bne	r2,zero,802870 <___vfprintf_internal_r+0x1f50>
  802454:	d8c01c17 	ldw	r3,112(sp)
  802458:	d8801b17 	ldw	r2,108(sp)
  80245c:	dd802704 	addi	r22,sp,156
  802460:	003fec06 	br	802414 <___vfprintf_internal_r+0x1af4>
						PAD (ndig - 1, zeroes);
  802464:	800f883a 	mov	r7,r16
  802468:	dc000717 	ldw	r16,28(sp)
  80246c:	8817883a 	mov	r11,r17
  802470:	aa000044 	addi	r8,r21,1
  802474:	e0800204 	addi	r2,fp,8
  802478:	1ac7883a 	add	r3,r3,r11
  80247c:	e1c00015 	stw	r7,0(fp)
  802480:	e2c00115 	stw	r11,4(fp)
  802484:	d8c01c15 	stw	r3,112(sp)
  802488:	da001b15 	stw	r8,108(sp)
  80248c:	41000208 	cmpgei	r4,r8,8
  802490:	203e821e 	bne	r4,zero,801e9c <___vfprintf_internal_r+0x157c>
				PRINT (expstr, expsize);
  802494:	42000044 	addi	r8,r8,1
  802498:	15800204 	addi	r22,r2,8
						PAD (ndig - 1, zeroes);
  80249c:	1039883a 	mov	fp,r2
  8024a0:	003d4306 	br	8019b0 <___vfprintf_internal_r+0x1090>
			_uquad = UARG ();
  8024a4:	25000017 	ldw	r20,0(r4)
  8024a8:	002b883a 	mov	r21,zero
  8024ac:	d8c00615 	stw	r3,24(sp)
			base = DEC;
  8024b0:	00800044 	movi	r2,1
  8024b4:	003a5406 	br	800e08 <___vfprintf_internal_r+0x4e8>
			_uquad = UARG ();
  8024b8:	25000017 	ldw	r20,0(r4)
  8024bc:	002b883a 	mov	r21,zero
  8024c0:	d8c00615 	stw	r3,24(sp)
			base = OCT;
  8024c4:	0005883a 	mov	r2,zero
  8024c8:	003a4f06 	br	800e08 <___vfprintf_internal_r+0x4e8>
hex:			_uquad = UARG ();
  8024cc:	2d000017 	ldw	r20,0(r5)
  8024d0:	002b883a 	mov	r21,zero
  8024d4:	d9000615 	stw	r4,24(sp)
  8024d8:	003b7906 	br	8012c0 <___vfprintf_internal_r+0x9a0>
			_uquad = SARG ();
  8024dc:	25000017 	ldw	r20,0(r4)
  8024e0:	d8c00615 	stw	r3,24(sp)
  8024e4:	a02bd7fa 	srai	r21,r20,31
			if ((quad_t)_uquad < 0)
  8024e8:	a805883a 	mov	r2,r21
  8024ec:	003b3f06 	br	8011ec <___vfprintf_internal_r+0x8cc>
  8024f0:	1805883a 	mov	r2,r3
					size = ndig + decp_len;
  8024f4:	d8c00b17 	ldw	r3,44(sp)
  8024f8:	10eb883a 	add	r21,r2,r3
					if (expt <= 0)
  8024fc:	d8800717 	ldw	r2,28(sp)
  802500:	0080370e 	bge	zero,r2,8025e0 <___vfprintf_internal_r+0x1cc0>
		realsz = dprec > size ? dprec : size;
  802504:	a829883a 	mov	r20,r21
  802508:	a8002e16 	blt	r21,zero,8025c4 <___vfprintf_internal_r+0x1ca4>
  80250c:	070019c4 	movi	fp,103
			if (softsign)
  802510:	d8800607 	ldb	r2,24(sp)
  802514:	10000626 	beq	r2,zero,802530 <___vfprintf_internal_r+0x1c10>
				sign = '-';
  802518:	00800b44 	movi	r2,45
  80251c:	d8801345 	stb	r2,77(sp)
  802520:	d8800e17 	ldw	r2,56(sp)
		dprec = 0;
  802524:	0011883a 	mov	r8,zero
				sign = '-';
  802528:	d8800615 	stw	r2,24(sp)
  80252c:	003b4906 	br	801254 <___vfprintf_internal_r+0x934>
		if (sign)
  802530:	d8800e17 	ldw	r2,56(sp)
  802534:	db401343 	ldbu	r13,77(sp)
		dprec = 0;
  802538:	0011883a 	mov	r8,zero
		if (sign)
  80253c:	d8800615 	stw	r2,24(sp)
  802540:	003b4006 	br	801244 <___vfprintf_internal_r+0x924>
  802544:	800f883a 	mov	r7,r16
  802548:	dc000e17 	ldw	r16,56(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  80254c:	10800044 	addi	r2,r2,1
  802550:	1d47883a 	add	r3,r3,r21
  802554:	d8801b15 	stw	r2,108(sp)
  802558:	b1c00015 	stw	r7,0(r22)
  80255c:	b5400115 	stw	r21,4(r22)
  802560:	d8c01c15 	stw	r3,112(sp)
  802564:	10800208 	cmpgei	r2,r2,8
  802568:	10002f1e 	bne	r2,zero,802628 <___vfprintf_internal_r+0x1d08>
  80256c:	b5800204 	addi	r22,r22,8
  802570:	003d9206 	br	801bbc <___vfprintf_internal_r+0x129c>
					PRINT ("0", 1);
  802574:	d9801a04 	addi	r6,sp,104
  802578:	900b883a 	mov	r5,r18
  80257c:	9809883a 	mov	r4,r19
  802580:	08087700 	call	808770 <__sprint_r>
  802584:	1039ed1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
					if (expt || ndig || flags & ALT) {
  802588:	dd401417 	ldw	r21,80(sp)
						PRINT (decimal_point, decp_len);
  80258c:	d8c01c17 	ldw	r3,112(sp)
					PRINT ("0", 1);
  802590:	dd802704 	addi	r22,sp,156
  802594:	003f2306 	br	802224 <___vfprintf_internal_r+0x1904>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  802598:	05400184 	movi	r21,6
  80259c:	003e5e06 	br	801f18 <___vfprintf_internal_r+0x15f8>
		exp = -exp;
  8025a0:	00c00044 	movi	r3,1
  8025a4:	1887c83a 	sub	r3,r3,r2
		*p++ = '-';
  8025a8:	00800b44 	movi	r2,45
  8025ac:	d8801685 	stb	r2,90(sp)
  8025b0:	003ac106 	br	8010b8 <___vfprintf_internal_r+0x798>
						size += decp_len;
  8025b4:	d8c00b17 	ldw	r3,44(sp)
  8025b8:	10eb883a 	add	r21,r2,r3
		realsz = dprec > size ? dprec : size;
  8025bc:	a829883a 	mov	r20,r21
  8025c0:	a83fd20e 	bge	r21,zero,80250c <___vfprintf_internal_r+0x1bec>
  8025c4:	0029883a 	mov	r20,zero
  8025c8:	003fd006 	br	80250c <___vfprintf_internal_r+0x1bec>
	FLUSH ();
  8025cc:	d9801a04 	addi	r6,sp,104
  8025d0:	900b883a 	mov	r5,r18
  8025d4:	9809883a 	mov	r4,r19
  8025d8:	08087700 	call	808770 <__sprint_r>
  8025dc:	0039d706 	br	800d3c <___vfprintf_internal_r+0x41c>
						size += 1 - expt;
  8025e0:	a8abc83a 	sub	r21,r21,r2
  8025e4:	ad400044 	addi	r21,r21,1
  8025e8:	003fc606 	br	802504 <___vfprintf_internal_r+0x1be4>
						size = (prec || flags & ALT)
  8025ec:	1000961e 	bne	r2,zero,802848 <___vfprintf_internal_r+0x1f28>
  8025f0:	05000044 	movi	r20,1
							  : 1;
  8025f4:	05400044 	movi	r21,1
					lead = expt;
  8025f8:	003fc506 	br	802510 <___vfprintf_internal_r+0x1bf0>
						PRINT (decimal_point, decp_len);
  8025fc:	d9801a04 	addi	r6,sp,104
  802600:	900b883a 	mov	r5,r18
  802604:	9809883a 	mov	r4,r19
  802608:	08087700 	call	808770 <__sprint_r>
  80260c:	1039cb1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
						PAD (-expt, zeroes);
  802610:	dd401417 	ldw	r21,80(sp)
						PRINT (cp, ndig);
  802614:	d8c01c17 	ldw	r3,112(sp)
  802618:	d8801b17 	ldw	r2,108(sp)
						PRINT (decimal_point, decp_len);
  80261c:	dd802704 	addi	r22,sp,156
						PAD (-expt, zeroes);
  802620:	a83f120e 	bge	r21,zero,80226c <___vfprintf_internal_r+0x194c>
  802624:	003f7006 	br	8023e8 <___vfprintf_internal_r+0x1ac8>
					PRINTANDPAD(cp, convbuf + ndig,
  802628:	d9801a04 	addi	r6,sp,104
  80262c:	900b883a 	mov	r5,r18
  802630:	9809883a 	mov	r4,r19
  802634:	08087700 	call	808770 <__sprint_r>
  802638:	1039c01e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
					    PRINT (decimal_point, decp_len);
  80263c:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  802640:	dd802704 	addi	r22,sp,156
  802644:	003d5d06 	br	801bbc <___vfprintf_internal_r+0x129c>
  802648:	1819883a 	mov	r12,r3
  80264c:	003af406 	br	801220 <___vfprintf_internal_r+0x900>
		} while ((exp /= 10) > 9);
  802650:	080c2340 	call	80c234 <__divsi3>
  802654:	003ab206 	br	801120 <___vfprintf_internal_r+0x800>
					    PRINT (decimal_point, decp_len);
  802658:	d9801a04 	addi	r6,sp,104
  80265c:	900b883a 	mov	r5,r18
  802660:	9809883a 	mov	r4,r19
  802664:	08087700 	call	808770 <__sprint_r>
  802668:	1039b41e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
					PRINTANDPAD (cp, convbuf + ndig,
  80266c:	dd401417 	ldw	r21,80(sp)
  802670:	d8c01c17 	ldw	r3,112(sp)
					    PRINT (decimal_point, decp_len);
  802674:	dd802704 	addi	r22,sp,156
  802678:	003d5f06 	br	801bf8 <___vfprintf_internal_r+0x12d8>
					PRINTANDPAD(cp, convbuf + ndig,
  80267c:	d9801a04 	addi	r6,sp,104
  802680:	900b883a 	mov	r5,r18
  802684:	9809883a 	mov	r4,r19
  802688:	08087700 	call	808770 <__sprint_r>
  80268c:	1039ab1e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
					    PRINT (decimal_point, decp_len);
  802690:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD(cp, convbuf + ndig,
  802694:	dd802704 	addi	r22,sp,156
  802698:	a83d450e 	bge	r21,zero,801bb0 <___vfprintf_internal_r+0x1290>
  80269c:	003e1106 	br	801ee4 <___vfprintf_internal_r+0x15c4>
		*--t = to_char (exp);
  8026a0:	10800c04 	addi	r2,r2,48
  8026a4:	a825883a 	mov	r18,r21
  8026a8:	882b883a 	mov	r21,r17
  8026ac:	a8bfffc5 	stb	r2,-1(r21)
  8026b0:	a17fff84 	addi	r5,r20,-2
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  8026b4:	d88019c4 	addi	r2,sp,103
		*--t = to_char (exp);
  8026b8:	db000f17 	ldw	r12,60(sp)
  8026bc:	dc001017 	ldw	r16,64(sp)
  8026c0:	dc400717 	ldw	r17,28(sp)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  8026c4:	28806c2e 	bgeu	r5,r2,802878 <___vfprintf_internal_r+0x1f58>
  8026c8:	d8801a44 	addi	r2,sp,105
  8026cc:	1529c83a 	sub	r20,r2,r20
  8026d0:	d90016c4 	addi	r4,sp,91
  8026d4:	a00d883a 	mov	r6,r20
  8026d8:	db000715 	stw	r12,28(sp)
  8026dc:	08063540 	call	806354 <memcpy>
  8026e0:	d88016c4 	addi	r2,sp,91
  8026e4:	1505883a 	add	r2,r2,r20
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
  8026e8:	d8c01644 	addi	r3,sp,89
  8026ec:	db000717 	ldw	r12,28(sp)
  8026f0:	10c5c83a 	sub	r2,r2,r3
  8026f4:	d8801015 	stw	r2,64(sp)
  8026f8:	1009883a 	mov	r4,r2
				if (ndig > 1 || flags & ALT)
  8026fc:	d8c00817 	ldw	r3,32(sp)
  802700:	18800088 	cmpgei	r2,r3,2
				size = expsize + ndig;
  802704:	192b883a 	add	r21,r3,r4
				if (ndig > 1 || flags & ALT)
  802708:	10002c26 	beq	r2,zero,8027bc <___vfprintf_internal_r+0x1e9c>
					size += decp_len;
  80270c:	d8800b17 	ldw	r2,44(sp)
  802710:	a8ab883a 	add	r21,r21,r2
		realsz = dprec > size ? dprec : size;
  802714:	a829883a 	mov	r20,r21
  802718:	a800010e 	bge	r21,zero,802720 <___vfprintf_internal_r+0x1e00>
  80271c:	0029883a 	mov	r20,zero
		lead = 0;
  802720:	d8000715 	stw	zero,28(sp)
  802724:	003f7a06 	br	802510 <___vfprintf_internal_r+0x1bf0>
					PRINTANDPAD (cp, convbuf + ndig,
  802728:	d9801a04 	addi	r6,sp,104
  80272c:	900b883a 	mov	r5,r18
  802730:	9809883a 	mov	r4,r19
  802734:	08087700 	call	808770 <__sprint_r>
  802738:	1039801e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
  80273c:	d8801417 	ldw	r2,80(sp)
  802740:	d9000817 	ldw	r4,32(sp)
		FLUSH ();	/* copy out the I/O vectors */
  802744:	d8c01c17 	ldw	r3,112(sp)
					PRINTANDPAD (cp, convbuf + ndig,
  802748:	dd802704 	addi	r22,sp,156
  80274c:	2085c83a 	sub	r2,r4,r2
  802750:	003d3d06 	br	801c48 <___vfprintf_internal_r+0x1328>
			*p++ = '0';
  802754:	00800c04 	movi	r2,48
		*p++ = to_char (exp);
  802758:	18c00c04 	addi	r3,r3,48
			*p++ = '0';
  80275c:	d88016c5 	stb	r2,91(sp)
		*p++ = to_char (exp);
  802760:	00800104 	movi	r2,4
  802764:	d8c01705 	stb	r3,92(sp)
  802768:	d8801015 	stw	r2,64(sp)
  80276c:	1009883a 	mov	r4,r2
  802770:	003fe206 	br	8026fc <___vfprintf_internal_r+0x1ddc>
			if (*digits == '0' && value)
  802774:	d9000917 	ldw	r4,36(sp)
  802778:	180b883a 	mov	r5,r3
  80277c:	000d883a 	mov	r6,zero
  802780:	000f883a 	mov	r7,zero
  802784:	da401115 	stw	r9,68(sp)
  802788:	da000f15 	stw	r8,60(sp)
  80278c:	db000815 	stw	r12,32(sp)
  802790:	d8c00715 	stw	r3,28(sp)
  802794:	080d6300 	call	80d630 <__eqdf2>
  802798:	d8c00717 	ldw	r3,28(sp)
  80279c:	db000817 	ldw	r12,32(sp)
  8027a0:	da000f17 	ldw	r8,60(sp)
  8027a4:	da401117 	ldw	r9,68(sp)
  8027a8:	103e5d26 	beq	r2,zero,802120 <___vfprintf_internal_r+0x1800>
				*decpt = -ndigits + 1;
  8027ac:	00800044 	movi	r2,1
  8027b0:	1205c83a 	sub	r2,r2,r8
  8027b4:	d8801415 	stw	r2,80(sp)
  8027b8:	003e5a06 	br	802124 <___vfprintf_internal_r+0x1804>
  8027bc:	6080004c 	andi	r2,r12,1
  8027c0:	d8800715 	stw	r2,28(sp)
				if (ndig > 1 || flags & ALT)
  8027c4:	103fd11e 	bne	r2,zero,80270c <___vfprintf_internal_r+0x1dec>
		realsz = dprec > size ? dprec : size;
  8027c8:	a829883a 	mov	r20,r21
  8027cc:	a83f500e 	bge	r21,zero,802510 <___vfprintf_internal_r+0x1bf0>
  8027d0:	0029883a 	mov	r20,zero
							  : 1;
  8027d4:	003f4e06 	br	802510 <___vfprintf_internal_r+0x1bf0>
  8027d8:	4029883a 	mov	r20,r8
			cp = GET_ARG (N, ap, char_ptr_t);
  8027dc:	d8c00615 	stw	r3,24(sp)
  8027e0:	402b883a 	mov	r21,r8
  8027e4:	00390b06 	br	800c14 <___vfprintf_internal_r+0x2f4>
							size += prec + decp_len;
  8027e8:	d8800b17 	ldw	r2,44(sp)
  8027ec:	18ab883a 	add	r21,r3,r2
  8027f0:	aa2b883a 	add	r21,r21,r8
  8027f4:	003ff406 	br	8027c8 <___vfprintf_internal_r+0x1ea8>
  8027f8:	900f883a 	mov	r7,r18
  8027fc:	8025883a 	mov	r18,r16
  802800:	dc000717 	ldw	r16,28(sp)
						PAD (-expt, zeroes);
  802804:	10800044 	addi	r2,r2,1
  802808:	1d47883a 	add	r3,r3,r21
  80280c:	b1c00015 	stw	r7,0(r22)
  802810:	b5400115 	stw	r21,4(r22)
  802814:	d8c01c15 	stw	r3,112(sp)
  802818:	d8801b15 	stw	r2,108(sp)
  80281c:	11000208 	cmpgei	r4,r2,8
  802820:	203e9126 	beq	r4,zero,802268 <___vfprintf_internal_r+0x1948>
  802824:	d9801a04 	addi	r6,sp,104
  802828:	900b883a 	mov	r5,r18
  80282c:	9809883a 	mov	r4,r19
  802830:	08087700 	call	808770 <__sprint_r>
  802834:	1039411e 	bne	r2,zero,800d3c <___vfprintf_internal_r+0x41c>
						PRINT (cp, ndig);
  802838:	d8c01c17 	ldw	r3,112(sp)
  80283c:	d8801b17 	ldw	r2,108(sp)
						PAD (-expt, zeroes);
  802840:	dd802704 	addi	r22,sp,156
  802844:	003e8906 	br	80226c <___vfprintf_internal_r+0x194c>
							  ? prec + 1 + decp_len
  802848:	d8800b17 	ldw	r2,44(sp)
  80284c:	15400044 	addi	r21,r2,1
  802850:	aa2b883a 	add	r21,r21,r8
  802854:	003fdc06 	br	8027c8 <___vfprintf_internal_r+0x1ea8>
		return (EOF);
  802858:	00bfffc4 	movi	r2,-1
  80285c:	d8800515 	stw	r2,20(sp)
  802860:	00393906 	br	800d48 <___vfprintf_internal_r+0x428>
						PAD (ndig - 1, zeroes);
  802864:	b005883a 	mov	r2,r22
  802868:	39c59f04 	addi	r7,r7,5756
  80286c:	003f0206 	br	802478 <___vfprintf_internal_r+0x1b58>
  802870:	8025883a 	mov	r18,r16
  802874:	00393106 	br	800d3c <___vfprintf_internal_r+0x41c>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
  802878:	00800084 	movi	r2,2
  80287c:	d8801015 	stw	r2,64(sp)
  802880:	1009883a 	mov	r4,r2
  802884:	003f9d06 	br	8026fc <___vfprintf_internal_r+0x1ddc>
				prec = GET_ARG (n, ap, int);
  802888:	d8c00617 	ldw	r3,24(sp)
  80288c:	1a000017 	ldw	r8,0(r3)
  802890:	18c00104 	addi	r3,r3,4
				if (prec < 0)
  802894:	4000010e 	bge	r8,zero,80289c <___vfprintf_internal_r+0x1f7c>
  802898:	023fffc4 	movi	r8,-1
rflag:		ch = *fmt++;
  80289c:	bf000043 	ldbu	fp,1(r23)
				prec = GET_ARG (n, ap, int);
  8028a0:	d8c00615 	stw	r3,24(sp)
			if ((ch = *fmt++) == '*') {
  8028a4:	102f883a 	mov	r23,r2
  8028a8:	e2c03fcc 	andi	r11,fp,255
  8028ac:	5ac0201c 	xori	r11,r11,128
  8028b0:	5affe004 	addi	r11,r11,-128
				goto rflag;
  8028b4:	00385f06 	br	800a34 <___vfprintf_internal_r+0x114>

008028b8 <__vfprintf_internal>:
{
  8028b8:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  8028bc:	d1200917 	ldw	r4,-32732(gp)
  8028c0:	300f883a 	mov	r7,r6
  8028c4:	280d883a 	mov	r6,r5
  8028c8:	100b883a 	mov	r5,r2
  8028cc:	08009201 	jmpi	800920 <___vfprintf_internal_r>

008028d0 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  8028d0:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  8028d4:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  8028d8:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  8028dc:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  8028e0:	2a400917 	ldw	r9,36(r5)
{
  8028e4:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  8028e8:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  8028ec:	00c10004 	movi	r3,1024
{
  8028f0:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  8028f4:	10bfff4c 	andi	r2,r2,65533
{
  8028f8:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  8028fc:	d80b883a 	mov	r5,sp
{
  802900:	dc811c15 	stw	r18,1136(sp)
  802904:	dc411b15 	stw	r17,1132(sp)
  802908:	dfc11d15 	stw	ra,1140(sp)
  80290c:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  802910:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  802914:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  802918:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80291c:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  802920:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  802924:	da000015 	stw	r8,0(sp)
  802928:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80292c:	d8c00215 	stw	r3,8(sp)
  802930:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  802934:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  802938:	08009200 	call	800920 <___vfprintf_internal_r>
  80293c:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  802940:	10000d0e 	bge	r2,zero,802978 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  802944:	d880030b 	ldhu	r2,12(sp)
  802948:	1080100c 	andi	r2,r2,64
  80294c:	10000326 	beq	r2,zero,80295c <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  802950:	8080030b 	ldhu	r2,12(r16)
  802954:	10801014 	ori	r2,r2,64
  802958:	8080030d 	sth	r2,12(r16)
}
  80295c:	8805883a 	mov	r2,r17
  802960:	dfc11d17 	ldw	ra,1140(sp)
  802964:	dc811c17 	ldw	r18,1136(sp)
  802968:	dc411b17 	ldw	r17,1132(sp)
  80296c:	dc011a17 	ldw	r16,1128(sp)
  802970:	dec11e04 	addi	sp,sp,1144
  802974:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  802978:	d80b883a 	mov	r5,sp
  80297c:	9009883a 	mov	r4,r18
  802980:	08047140 	call	804714 <_fflush_r>
  802984:	103fef26 	beq	r2,zero,802944 <__sbprintf+0x74>
		ret = EOF;
  802988:	047fffc4 	movi	r17,-1
  80298c:	003fed06 	br	802944 <__sbprintf+0x74>

00802990 <__swsetup_r>:
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
  802990:	d0a00917 	ldw	r2,-32732(gp)
{
  802994:	defffd04 	addi	sp,sp,-12
  802998:	dc400115 	stw	r17,4(sp)
  80299c:	dc000015 	stw	r16,0(sp)
  8029a0:	dfc00215 	stw	ra,8(sp)
  8029a4:	2023883a 	mov	r17,r4
  8029a8:	2821883a 	mov	r16,r5
  CHECK_INIT (_REENT, fp);
  8029ac:	10000226 	beq	r2,zero,8029b8 <__swsetup_r+0x28>
  8029b0:	10c00e17 	ldw	r3,56(r2)
  8029b4:	18001f26 	beq	r3,zero,802a34 <__swsetup_r+0xa4>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
  8029b8:	8180030b 	ldhu	r6,12(r16)
  8029bc:	30c0020c 	andi	r3,r6,8
  8029c0:	3005883a 	mov	r2,r6
  8029c4:	18002126 	beq	r3,zero,802a4c <__swsetup_r+0xbc>
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
  8029c8:	80c00417 	ldw	r3,16(r16)
  8029cc:	18002826 	beq	r3,zero,802a70 <__swsetup_r+0xe0>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
  8029d0:	1100004c 	andi	r4,r2,1
  8029d4:	20000b1e 	bne	r4,zero,802a04 <__swsetup_r+0x74>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  8029d8:	1100008c 	andi	r4,r2,2
  8029dc:	20002e1e 	bne	r4,zero,802a98 <__swsetup_r+0x108>
  8029e0:	81000517 	ldw	r4,20(r16)
  8029e4:	81000215 	stw	r4,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
  8029e8:	18000b26 	beq	r3,zero,802a18 <__swsetup_r+0x88>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
  8029ec:	0005883a 	mov	r2,zero
}
  8029f0:	dfc00217 	ldw	ra,8(sp)
  8029f4:	dc400117 	ldw	r17,4(sp)
  8029f8:	dc000017 	ldw	r16,0(sp)
  8029fc:	dec00304 	addi	sp,sp,12
  802a00:	f800283a 	ret
      fp->_lbfsize = -fp->_bf._size;
  802a04:	81000517 	ldw	r4,20(r16)
      fp->_w = 0;
  802a08:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
  802a0c:	0109c83a 	sub	r4,zero,r4
  802a10:	81000615 	stw	r4,24(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  802a14:	183ff51e 	bne	r3,zero,8029ec <__swsetup_r+0x5c>
  802a18:	10c0200c 	andi	r3,r2,128
  return 0;
  802a1c:	0005883a 	mov	r2,zero
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  802a20:	183ff326 	beq	r3,zero,8029f0 <__swsetup_r+0x60>
      fp->_flags |= __SERR;
  802a24:	31801014 	ori	r6,r6,64
  802a28:	8180030d 	sth	r6,12(r16)
      return EOF;
  802a2c:	00bfffc4 	movi	r2,-1
  802a30:	003fef06 	br	8029f0 <__swsetup_r+0x60>
  CHECK_INIT (_REENT, fp);
  802a34:	1009883a 	mov	r4,r2
  802a38:	0804b400 	call	804b40 <__sinit>
  if ((fp->_flags & __SWR) == 0)
  802a3c:	8180030b 	ldhu	r6,12(r16)
  802a40:	30c0020c 	andi	r3,r6,8
  802a44:	3005883a 	mov	r2,r6
  802a48:	183fdf1e 	bne	r3,zero,8029c8 <__swsetup_r+0x38>
      if ((fp->_flags & __SRW) == 0)
  802a4c:	3080040c 	andi	r2,r6,16
  802a50:	10002126 	beq	r2,zero,802ad8 <__swsetup_r+0x148>
      if (fp->_flags & __SRD)
  802a54:	3080010c 	andi	r2,r6,4
  802a58:	1000111e 	bne	r2,zero,802aa0 <__swsetup_r+0x110>
  if (fp->_bf._base == NULL
  802a5c:	80c00417 	ldw	r3,16(r16)
      fp->_flags |= __SWR;
  802a60:	30800214 	ori	r2,r6,8
  802a64:	8080030d 	sth	r2,12(r16)
  802a68:	100d883a 	mov	r6,r2
  if (fp->_bf._base == NULL
  802a6c:	183fd81e 	bne	r3,zero,8029d0 <__swsetup_r+0x40>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
  802a70:	1100a00c 	andi	r4,r2,640
  802a74:	21008020 	cmpeqi	r4,r4,512
  802a78:	203fd51e 	bne	r4,zero,8029d0 <__swsetup_r+0x40>
    __smakebuf_r (ptr, fp);
  802a7c:	800b883a 	mov	r5,r16
  802a80:	8809883a 	mov	r4,r17
  802a84:	08058300 	call	805830 <__smakebuf_r>
  if (fp->_flags & __SLBF)
  802a88:	8180030b 	ldhu	r6,12(r16)
  if (!fp->_bf._base && (fp->_flags & __SMBF))
  802a8c:	80c00417 	ldw	r3,16(r16)
  if (fp->_flags & __SLBF)
  802a90:	3005883a 	mov	r2,r6
  802a94:	003fce06 	br	8029d0 <__swsetup_r+0x40>
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
  802a98:	0009883a 	mov	r4,zero
  802a9c:	003fd106 	br	8029e4 <__swsetup_r+0x54>
	  if (HASUB (fp))
  802aa0:	81400c17 	ldw	r5,48(r16)
  802aa4:	28000626 	beq	r5,zero,802ac0 <__swsetup_r+0x130>
	    FREEUB (ptr, fp);
  802aa8:	80801004 	addi	r2,r16,64
  802aac:	28800326 	beq	r5,r2,802abc <__swsetup_r+0x12c>
  802ab0:	8809883a 	mov	r4,r17
  802ab4:	0804df80 	call	804df8 <_free_r>
	  fp->_flags &= ~(__SRD | __SEOF);
  802ab8:	8180030b 	ldhu	r6,12(r16)
	    FREEUB (ptr, fp);
  802abc:	80000c15 	stw	zero,48(r16)
	  fp->_p = fp->_bf._base;
  802ac0:	80c00417 	ldw	r3,16(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
  802ac4:	00bff6c4 	movi	r2,-37
  802ac8:	118c703a 	and	r6,r2,r6
	  fp->_r = 0;
  802acc:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
  802ad0:	80c00015 	stw	r3,0(r16)
  802ad4:	003fe206 	br	802a60 <__swsetup_r+0xd0>
	  ptr->_errno = EBADF;
  802ad8:	00800244 	movi	r2,9
  802adc:	88800015 	stw	r2,0(r17)
	  fp->_flags |= __SERR;
  802ae0:	31801014 	ori	r6,r6,64
  802ae4:	8180030d 	sth	r6,12(r16)
	  return EOF;
  802ae8:	00bfffc4 	movi	r2,-1
  802aec:	003fc006 	br	8029f0 <__swsetup_r+0x60>

00802af0 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
  802af0:	defff204 	addi	sp,sp,-56
  802af4:	dc400515 	stw	r17,20(sp)
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
  802af8:	20800417 	ldw	r2,16(r4)
  n = S->_wds;
  802afc:	2c400417 	ldw	r17,16(r5)
{
  802b00:	dfc00d15 	stw	ra,52(sp)
  802b04:	df000c15 	stw	fp,48(sp)
  802b08:	ddc00b15 	stw	r23,44(sp)
  802b0c:	dd800a15 	stw	r22,40(sp)
  802b10:	dd400915 	stw	r21,36(sp)
  802b14:	dd000815 	stw	r20,32(sp)
  802b18:	dcc00715 	stw	r19,28(sp)
  802b1c:	dc800615 	stw	r18,24(sp)
  802b20:	dc000415 	stw	r16,16(sp)
  802b24:	d9000115 	stw	r4,4(sp)
  802b28:	d9400215 	stw	r5,8(sp)
  if (b->_wds < n)
  802b2c:	14407616 	blt	r2,r17,802d08 <quorem+0x218>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  802b30:	8c7fffc4 	addi	r17,r17,-1
  802b34:	882a90ba 	slli	r21,r17,2
  sx = S->_x;
  802b38:	2f000504 	addi	fp,r5,20
  bx = b->_x;
  802b3c:	25800504 	addi	r22,r4,20
  sxe = sx + --n;
  802b40:	e565883a 	add	r18,fp,r21
  bxe = bx + n;
  802b44:	b545883a 	add	r2,r22,r21
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  802b48:	95c00017 	ldw	r23,0(r18)
  802b4c:	15000017 	ldw	r20,0(r2)
  bx = b->_x;
  802b50:	dd800015 	stw	r22,0(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  802b54:	bdc00044 	addi	r23,r23,1
  802b58:	b80b883a 	mov	r5,r23
  802b5c:	a009883a 	mov	r4,r20
  bxe = bx + n;
  802b60:	d8800315 	stw	r2,12(sp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
  802b64:	080c3280 	call	80c328 <__udivsi3>
  802b68:	1021883a 	mov	r16,r2
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
  802b6c:	a5c02f36 	bltu	r20,r23,802c2c <quorem+0x13c>
  sx = S->_x;
  802b70:	e029883a 	mov	r20,fp
    {
      borrow = 0;
      carry = 0;
  802b74:	002b883a 	mov	r21,zero
      borrow = 0;
  802b78:	002f883a 	mov	r23,zero
      do
	{
#ifdef Pack_32
	  si = *sx++;
  802b7c:	a4c00017 	ldw	r19,0(r20)
	  ys = (si & 0xffff) * q + carry;
  802b80:	800b883a 	mov	r5,r16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  802b84:	b5800104 	addi	r22,r22,4
	  ys = (si & 0xffff) * q + carry;
  802b88:	993fffcc 	andi	r4,r19,65535
  802b8c:	080c3e80 	call	80c3e8 <__mulsi3>
	  zs = (si >> 16) * q + (ys >> 16);
  802b90:	9808d43a 	srli	r4,r19,16
  802b94:	800b883a 	mov	r5,r16
	  ys = (si & 0xffff) * q + carry;
  802b98:	156b883a 	add	r21,r2,r21
	  zs = (si >> 16) * q + (ys >> 16);
  802b9c:	080c3e80 	call	80c3e8 <__mulsi3>
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  802ba0:	b0ffff17 	ldw	r3,-4(r22)
	  zs = (si >> 16) * q + (ys >> 16);
  802ba4:	a80ad43a 	srli	r5,r21,16
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  802ba8:	a93fffcc 	andi	r4,r21,65535
  802bac:	19bfffcc 	andi	r6,r3,65535
  802bb0:	b909c83a 	sub	r4,r23,r4
  802bb4:	2189883a 	add	r4,r4,r6
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  802bb8:	1806d43a 	srli	r3,r3,16
	  zs = (si >> 16) * q + (ys >> 16);
  802bbc:	1145883a 	add	r2,r2,r5
	  borrow = y >> 16;
  802bc0:	200bd43a 	srai	r5,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  802bc4:	11bfffcc 	andi	r6,r2,65535
  802bc8:	1987c83a 	sub	r3,r3,r6
  802bcc:	1947883a 	add	r3,r3,r5
	  Storeinc (bx, z, y);
  802bd0:	180a943a 	slli	r5,r3,16
  802bd4:	213fffcc 	andi	r4,r4,65535
	  si = *sx++;
  802bd8:	a5000104 	addi	r20,r20,4
	  Storeinc (bx, z, y);
  802bdc:	2908b03a 	or	r4,r5,r4
  802be0:	b13fff15 	stw	r4,-4(r22)
	  carry = zs >> 16;
  802be4:	102ad43a 	srli	r21,r2,16
	  borrow = z >> 16;
  802be8:	182fd43a 	srai	r23,r3,16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  802bec:	953fe32e 	bgeu	r18,r20,802b7c <quorem+0x8c>
      if (!*bxe)
  802bf0:	d8c00317 	ldw	r3,12(sp)
  802bf4:	18800017 	ldw	r2,0(r3)
  802bf8:	10000c1e 	bne	r2,zero,802c2c <quorem+0x13c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
  802bfc:	d8800017 	ldw	r2,0(sp)
  802c00:	1d7fff04 	addi	r21,r3,-4
  802c04:	15400436 	bltu	r2,r21,802c18 <quorem+0x128>
  802c08:	00000606 	br	802c24 <quorem+0x134>
  802c0c:	d8800017 	ldw	r2,0(sp)
	    --n;
  802c10:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  802c14:	1540032e 	bgeu	r2,r21,802c24 <quorem+0x134>
  802c18:	a8800017 	ldw	r2,0(r21)
  802c1c:	ad7fff04 	addi	r21,r21,-4
  802c20:	103ffa26 	beq	r2,zero,802c0c <quorem+0x11c>
	  b->_wds = n;
  802c24:	d8800117 	ldw	r2,4(sp)
  802c28:	14400415 	stw	r17,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
  802c2c:	d9400217 	ldw	r5,8(sp)
  802c30:	d9000117 	ldw	r4,4(sp)
  802c34:	080746c0 	call	80746c <__mcmp>
  802c38:	10002616 	blt	r2,zero,802cd4 <quorem+0x1e4>
  bx = b->_x;
  802c3c:	d9400017 	ldw	r5,0(sp)
    {
      q++;
  802c40:	84000044 	addi	r16,r16,1
      borrow = 0;
  802c44:	0007883a 	mov	r3,zero
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
  802c48:	e1000017 	ldw	r4,0(fp)
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  802c4c:	29800017 	ldw	r6,0(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
  802c50:	29400104 	addi	r5,r5,4
	  ys = (si & 0xffff) + carry;
  802c54:	20bfffcc 	andi	r2,r4,65535
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
  802c58:	1887c83a 	sub	r3,r3,r2
  802c5c:	30bfffcc 	andi	r2,r6,65535
  802c60:	1885883a 	add	r2,r3,r2
	  zs = (si >> 16) + (ys >> 16);
  802c64:	2008d43a 	srli	r4,r4,16
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  802c68:	3006d43a 	srli	r3,r6,16
	  borrow = y >> 16;
  802c6c:	100fd43a 	srai	r7,r2,16
	  Storeinc (bx, z, y);
  802c70:	11bfffcc 	andi	r6,r2,65535
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
  802c74:	1907c83a 	sub	r3,r3,r4
  802c78:	19c7883a 	add	r3,r3,r7
	  Storeinc (bx, z, y);
  802c7c:	1804943a 	slli	r2,r3,16
	  si = *sx++;
  802c80:	e7000104 	addi	fp,fp,4
	  borrow = z >> 16;
  802c84:	1807d43a 	srai	r3,r3,16
	  Storeinc (bx, z, y);
  802c88:	1184b03a 	or	r2,r2,r6
  802c8c:	28bfff15 	stw	r2,-4(r5)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
  802c90:	973fed2e 	bgeu	r18,fp,802c48 <quorem+0x158>
      bx = b->_x;
      bxe = bx + n;
  802c94:	880490ba 	slli	r2,r17,2
  802c98:	d9000017 	ldw	r4,0(sp)
  802c9c:	2085883a 	add	r2,r4,r2
      if (!*bxe)
  802ca0:	10c00017 	ldw	r3,0(r2)
  802ca4:	18000b1e 	bne	r3,zero,802cd4 <quorem+0x1e4>
	{
	  while (--bxe > bx && !*bxe)
  802ca8:	10bfff04 	addi	r2,r2,-4
  802cac:	20800436 	bltu	r4,r2,802cc0 <quorem+0x1d0>
  802cb0:	00000606 	br	802ccc <quorem+0x1dc>
  802cb4:	d8c00017 	ldw	r3,0(sp)
	    --n;
  802cb8:	8c7fffc4 	addi	r17,r17,-1
	  while (--bxe > bx && !*bxe)
  802cbc:	1880032e 	bgeu	r3,r2,802ccc <quorem+0x1dc>
  802cc0:	10c00017 	ldw	r3,0(r2)
  802cc4:	10bfff04 	addi	r2,r2,-4
  802cc8:	183ffa26 	beq	r3,zero,802cb4 <quorem+0x1c4>
	  b->_wds = n;
  802ccc:	d8800117 	ldw	r2,4(sp)
  802cd0:	14400415 	stw	r17,16(r2)
	}
    }
  return q;
  802cd4:	8005883a 	mov	r2,r16
}
  802cd8:	dfc00d17 	ldw	ra,52(sp)
  802cdc:	df000c17 	ldw	fp,48(sp)
  802ce0:	ddc00b17 	ldw	r23,44(sp)
  802ce4:	dd800a17 	ldw	r22,40(sp)
  802ce8:	dd400917 	ldw	r21,36(sp)
  802cec:	dd000817 	ldw	r20,32(sp)
  802cf0:	dcc00717 	ldw	r19,28(sp)
  802cf4:	dc800617 	ldw	r18,24(sp)
  802cf8:	dc400517 	ldw	r17,20(sp)
  802cfc:	dc000417 	ldw	r16,16(sp)
  802d00:	dec00e04 	addi	sp,sp,56
  802d04:	f800283a 	ret
    return 0;
  802d08:	0005883a 	mov	r2,zero
  802d0c:	003ff206 	br	802cd8 <quorem+0x1e8>

00802d10 <_dtoa_r>:
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
  802d10:	20801017 	ldw	r2,64(r4)
{
  802d14:	deffdc04 	addi	sp,sp,-144
  802d18:	df002215 	stw	fp,136(sp)
  802d1c:	dc801c15 	stw	r18,112(sp)
  802d20:	dc401b15 	stw	r17,108(sp)
  802d24:	dc001a15 	stw	r16,104(sp)
  802d28:	dfc02315 	stw	ra,140(sp)
  802d2c:	ddc02115 	stw	r23,132(sp)
  802d30:	dd802015 	stw	r22,128(sp)
  802d34:	dd401f15 	stw	r21,124(sp)
  802d38:	dd001e15 	stw	r20,120(sp)
  802d3c:	dcc01d15 	stw	r19,116(sp)
  802d40:	d9400115 	stw	r5,4(sp)
  802d44:	d9c00315 	stw	r7,12(sp)
  802d48:	dc002617 	ldw	r16,152(sp)
  802d4c:	2039883a 	mov	fp,r4
  802d50:	3025883a 	mov	r18,r6
  d.d = _d;
  802d54:	3023883a 	mov	r17,r6
  if (_REENT_MP_RESULT(ptr))
  802d58:	10000826 	beq	r2,zero,802d7c <_dtoa_r+0x6c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  802d5c:	21801117 	ldw	r6,68(r4)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  802d60:	00c00044 	movi	r3,1
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  802d64:	100b883a 	mov	r5,r2
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  802d68:	1986983a 	sll	r3,r3,r6
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
  802d6c:	11800115 	stw	r6,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
  802d70:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
  802d74:	08068480 	call	806848 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
  802d78:	e0001015 	stw	zero,64(fp)
    }

  if (word0 (d) & Sign_bit)
  802d7c:	9001aa16 	blt	r18,zero,803428 <_dtoa_r+0x718>
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
  802d80:	80000015 	stw	zero,0(r16)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
  802d84:	909ffc2c 	andhi	r2,r18,32752
  802d88:	00dffc34 	movhi	r3,32752
  802d8c:	10c1af26 	beq	r2,r3,80344c <_dtoa_r+0x73c>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
  802d90:	d9000117 	ldw	r4,4(sp)
  802d94:	000d883a 	mov	r6,zero
  802d98:	000f883a 	mov	r7,zero
  802d9c:	880b883a 	mov	r5,r17
  802da0:	080d6300 	call	80d630 <__eqdf2>
  802da4:	1000191e 	bne	r2,zero,802e0c <_dtoa_r+0xfc>
    {
      *decpt = 1;
  802da8:	d8c02517 	ldw	r3,148(sp)
  802dac:	00800044 	movi	r2,1
  802db0:	18800015 	stw	r2,0(r3)
      s = "0";
      if (rve)
  802db4:	d8802717 	ldw	r2,156(sp)
  802db8:	10031b26 	beq	r2,zero,803a28 <_dtoa_r+0xd18>
  802dbc:	1009883a 	mov	r4,r2
	*rve = s + 1;
  802dc0:	00802074 	movhi	r2,129
  802dc4:	10859e44 	addi	r2,r2,5753
      return s;
  802dc8:	00c02074 	movhi	r3,129
	*rve = s + 1;
  802dcc:	20800015 	stw	r2,0(r4)
      return s;
  802dd0:	18859e04 	addi	r2,r3,5752
  802dd4:	d8800215 	stw	r2,8(sp)
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
  802dd8:	d8800217 	ldw	r2,8(sp)
  802ddc:	dfc02317 	ldw	ra,140(sp)
  802de0:	df002217 	ldw	fp,136(sp)
  802de4:	ddc02117 	ldw	r23,132(sp)
  802de8:	dd802017 	ldw	r22,128(sp)
  802dec:	dd401f17 	ldw	r21,124(sp)
  802df0:	dd001e17 	ldw	r20,120(sp)
  802df4:	dcc01d17 	ldw	r19,116(sp)
  802df8:	dc801c17 	ldw	r18,112(sp)
  802dfc:	dc401b17 	ldw	r17,108(sp)
  802e00:	dc001a17 	ldw	r16,104(sp)
  802e04:	dec02404 	addi	sp,sp,144
  802e08:	f800283a 	ret
  b = d2b (ptr, d.d, &be, &bbits);
  802e0c:	dd000117 	ldw	r20,4(sp)
  802e10:	d8801804 	addi	r2,sp,96
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  802e14:	9020d53a 	srli	r16,r18,20
  b = d2b (ptr, d.d, &be, &bbits);
  802e18:	d8800015 	stw	r2,0(sp)
  802e1c:	d9c01904 	addi	r7,sp,100
  802e20:	a00b883a 	mov	r5,r20
  802e24:	880d883a 	mov	r6,r17
  802e28:	e009883a 	mov	r4,fp
  802e2c:	08079700 	call	807970 <__d2b>
  802e30:	1027883a 	mov	r19,r2
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
  802e34:	8001991e 	bne	r16,zero,80349c <_dtoa_r+0x78c>
      i = bbits + be + (Bias + (P - 1) - 1);
  802e38:	d8801817 	ldw	r2,96(sp)
  802e3c:	dc001917 	ldw	r16,100(sp)
  802e40:	d8800215 	stw	r2,8(sp)
  802e44:	1421883a 	add	r16,r2,r16
  802e48:	80810c84 	addi	r2,r16,1074
       : (word1 (d) << (32 - i));
  802e4c:	10c00850 	cmplti	r3,r2,33
  802e50:	1803071e 	bne	r3,zero,803a70 <_dtoa_r+0xd60>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
  802e54:	01001004 	movi	r4,64
  802e58:	2085c83a 	sub	r2,r4,r2
  802e5c:	90a4983a 	sll	r18,r18,r2
  802e60:	d8800117 	ldw	r2,4(sp)
  802e64:	81010484 	addi	r4,r16,1042
  802e68:	1108d83a 	srl	r4,r2,r4
       : (word1 (d) << (32 - i));
  802e6c:	9108b03a 	or	r4,r18,r4
      d2.d = x;
  802e70:	080ea180 	call	80ea18 <__floatunsidf>
  802e74:	1009883a 	mov	r4,r2
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  802e78:	017f8434 	movhi	r5,65040
      denorm = 1;
  802e7c:	00800044 	movi	r2,1
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
  802e80:	194b883a 	add	r5,r3,r5
      i -= (Bias + (P - 1) - 1) + 1;
  802e84:	843fffc4 	addi	r16,r16,-1
      denorm = 1;
  802e88:	d8800c15 	stw	r2,48(sp)
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  802e8c:	000d883a 	mov	r6,zero
  802e90:	01cffe34 	movhi	r7,16376
  802e94:	080e02c0 	call	80e02c <__subdf3>
  802e98:	0198dbf4 	movhi	r6,25455
  802e9c:	01cff4f4 	movhi	r7,16339
  802ea0:	3190d844 	addi	r6,r6,17249
  802ea4:	39e1e9c4 	addi	r7,r7,-30809
  802ea8:	180b883a 	mov	r5,r3
  802eac:	1009883a 	mov	r4,r2
  802eb0:	080d8800 	call	80d880 <__muldf3>
  802eb4:	8009883a 	mov	r4,r16
  802eb8:	102b883a 	mov	r21,r2
  802ebc:	1825883a 	mov	r18,r3
  802ec0:	080e9600 	call	80e960 <__floatsidf>
  802ec4:	019427f4 	movhi	r6,20639
  802ec8:	01cff4f4 	movhi	r7,16339
  802ecc:	319e7ec4 	addi	r6,r6,31227
  802ed0:	39d104c4 	addi	r7,r7,17427
  802ed4:	1009883a 	mov	r4,r2
  802ed8:	180b883a 	mov	r5,r3
  802edc:	080d8800 	call	80d880 <__muldf3>
  802ee0:	a809883a 	mov	r4,r21
  802ee4:	900b883a 	mov	r5,r18
  802ee8:	100d883a 	mov	r6,r2
  802eec:	180f883a 	mov	r7,r3
  802ef0:	080c4100 	call	80c410 <__adddf3>
  802ef4:	01a2d874 	movhi	r6,35681
  802ef8:	01cff1f4 	movhi	r7,16327
  802efc:	31b22cc4 	addi	r6,r6,-14157
  802f00:	39e28a04 	addi	r7,r7,-30168
  802f04:	1009883a 	mov	r4,r2
  802f08:	180b883a 	mov	r5,r3
  802f0c:	102d883a 	mov	r22,r2
  802f10:	182b883a 	mov	r21,r3
  802f14:	080c4100 	call	80c410 <__adddf3>
  k = (int) ds;
  802f18:	1009883a 	mov	r4,r2
  802f1c:	180b883a 	mov	r5,r3
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  802f20:	1029883a 	mov	r20,r2
  802f24:	182f883a 	mov	r23,r3
  k = (int) ds;
  802f28:	080e8e00 	call	80e8e0 <__fixdfsi>
  if (ds < 0. && ds != k)
  802f2c:	01a2d874 	movhi	r6,35681
  802f30:	01eff1f4 	movhi	r7,49095
  802f34:	31b22cc4 	addi	r6,r6,-14157
  802f38:	39e28a04 	addi	r7,r7,-30168
  802f3c:	b009883a 	mov	r4,r22
  802f40:	a80b883a 	mov	r5,r21
  k = (int) ds;
  802f44:	1025883a 	mov	r18,r2
  if (ds < 0. && ds != k)
  802f48:	080d7980 	call	80d798 <__ledf2>
  802f4c:	1000090e 	bge	r2,zero,802f74 <_dtoa_r+0x264>
  802f50:	9009883a 	mov	r4,r18
  802f54:	080e9600 	call	80e960 <__floatsidf>
  802f58:	a00d883a 	mov	r6,r20
  802f5c:	b80f883a 	mov	r7,r23
  802f60:	1009883a 	mov	r4,r2
  802f64:	180b883a 	mov	r5,r3
  802f68:	080d6300 	call	80d630 <__eqdf2>
  802f6c:	10000126 	beq	r2,zero,802f74 <_dtoa_r+0x264>
    k--;			/* want k = floor(ds) */
  802f70:	94bfffc4 	addi	r18,r18,-1
  j = bbits - i - 1;
  802f74:	d8800217 	ldw	r2,8(sp)
  802f78:	1421c83a 	sub	r16,r2,r16
  if (k >= 0 && k <= Ten_pmax)
  802f7c:	908005e8 	cmpgeui	r2,r18,23
  j = bbits - i - 1;
  802f80:	85ffffc4 	addi	r23,r16,-1
  if (k >= 0 && k <= Ten_pmax)
  802f84:	1002a01e 	bne	r2,zero,803a08 <_dtoa_r+0xcf8>
      if (d.d < tens[k])
  802f88:	900690fa 	slli	r3,r18,3
  802f8c:	00802074 	movhi	r2,129
  802f90:	1085ff04 	addi	r2,r2,6140
  802f94:	10c5883a 	add	r2,r2,r3
  802f98:	11800017 	ldw	r6,0(r2)
  802f9c:	11c00117 	ldw	r7,4(r2)
  802fa0:	d9000117 	ldw	r4,4(sp)
  802fa4:	880b883a 	mov	r5,r17
  802fa8:	080d7980 	call	80d798 <__ledf2>
  802fac:	1002750e 	bge	r2,zero,803984 <_dtoa_r+0xc74>
      k_check = 0;
  802fb0:	d8000915 	stw	zero,36(sp)
	k--;
  802fb4:	94bfffc4 	addi	r18,r18,-1
  if (j >= 0)
  802fb8:	b8029616 	blt	r23,zero,803a14 <_dtoa_r+0xd04>
      b2 = 0;
  802fbc:	d8000615 	stw	zero,24(sp)
  if (k >= 0)
  802fc0:	9002730e 	bge	r18,zero,803990 <_dtoa_r+0xc80>
      b2 -= k;
  802fc4:	d8800617 	ldw	r2,24(sp)
  if (mode < 0 || mode > 9)
  802fc8:	d8c00317 	ldw	r3,12(sp)
      b5 = -k;
  802fcc:	dc800515 	stw	r18,20(sp)
      b2 -= k;
  802fd0:	1485c83a 	sub	r2,r2,r18
  802fd4:	d8800615 	stw	r2,24(sp)
      b5 = -k;
  802fd8:	0485c83a 	sub	r2,zero,r18
  802fdc:	d8800715 	stw	r2,28(sp)
  if (mode < 0 || mode > 9)
  802fe0:	188002a8 	cmpgeui	r2,r3,10
      s5 = 0;
  802fe4:	0025883a 	mov	r18,zero
  if (mode < 0 || mode > 9)
  802fe8:	10026f1e 	bne	r2,zero,8039a8 <_dtoa_r+0xc98>
  if (mode > 5)
  802fec:	18800190 	cmplti	r2,r3,6
  802ff0:	10029d1e 	bne	r2,zero,803a68 <_dtoa_r+0xd58>
      mode -= 4;
  802ff4:	18bfff04 	addi	r2,r3,-4
  802ff8:	d8800315 	stw	r2,12(sp)
      try_quick = 0;
  802ffc:	0021883a 	mov	r16,zero
  803000:	1007883a 	mov	r3,r2
  switch (mode)
  803004:	18800120 	cmpeqi	r2,r3,4
  803008:	1003791e 	bne	r2,zero,803df0 <_dtoa_r+0x10e0>
  80300c:	18800160 	cmpeqi	r2,r3,5
  803010:	1003361e 	bne	r2,zero,803cec <_dtoa_r+0xfdc>
  803014:	188000a0 	cmpeqi	r2,r3,2
  803018:	10026e26 	beq	r2,zero,8039d4 <_dtoa_r+0xcc4>
      leftright = 0;
  80301c:	d8000815 	stw	zero,32(sp)
      if (ndigits <= 0)
  803020:	d8802417 	ldw	r2,144(sp)
  803024:	0083420e 	bge	zero,r2,803d30 <_dtoa_r+0x1020>
  803028:	d8800b15 	stw	r2,44(sp)
  80302c:	d8800415 	stw	r2,16(sp)
  803030:	100d883a 	mov	r6,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  803034:	e0001115 	stw	zero,68(fp)
  803038:	30800610 	cmplti	r2,r6,24
  80303c:	1005291e 	bne	r2,zero,8044e4 <_dtoa_r+0x17d4>
  803040:	00c00044 	movi	r3,1
  j = sizeof (__ULong);
  803044:	00800104 	movi	r2,4
       j <<= 1)
  803048:	1085883a 	add	r2,r2,r2
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  80304c:	11000504 	addi	r4,r2,20
    _REENT_MP_RESULT_K(ptr)++;
  803050:	180b883a 	mov	r5,r3
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  803054:	18c00044 	addi	r3,r3,1
  803058:	313ffb2e 	bgeu	r6,r4,803048 <_dtoa_r+0x338>
  80305c:	e1401115 	stw	r5,68(fp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  803060:	e009883a 	mov	r4,fp
  803064:	08067a40 	call	8067a4 <_Balloc>
  803068:	d8800215 	stw	r2,8(sp)
  80306c:	10051626 	beq	r2,zero,8044c8 <_dtoa_r+0x17b8>
  803070:	e0801015 	stw	r2,64(fp)
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
  803074:	d8800417 	ldw	r2,16(sp)
  803078:	108003e8 	cmpgeui	r2,r2,15
  80307c:	10011c1e 	bne	r2,zero,8034f0 <_dtoa_r+0x7e0>
  803080:	80011b26 	beq	r16,zero,8034f0 <_dtoa_r+0x7e0>
      if (k > 0)
  803084:	d9000517 	ldw	r4,20(sp)
  803088:	0103a40e 	bge	zero,r4,803f1c <_dtoa_r+0x120c>
	  ds = tens[k & 0xf];
  80308c:	208003cc 	andi	r2,r4,15
  803090:	100690fa 	slli	r3,r2,3
	  j = k >> 4;
  803094:	202dd13a 	srai	r22,r4,4
	  ds = tens[k & 0xf];
  803098:	00802074 	movhi	r2,129
  80309c:	1085ff04 	addi	r2,r2,6140
  8030a0:	10c5883a 	add	r2,r2,r3
	  if (j & Bletch)
  8030a4:	b0c0040c 	andi	r3,r22,16
	  ds = tens[k & 0xf];
  8030a8:	12400017 	ldw	r9,0(r2)
  8030ac:	12000117 	ldw	r8,4(r2)
	  if (j & Bletch)
  8030b0:	18034926 	beq	r3,zero,803dd8 <_dtoa_r+0x10c8>
	      d.d /= bigtens[n_bigtens - 1];
  8030b4:	00802074 	movhi	r2,129
  8030b8:	1085f504 	addi	r2,r2,6100
  8030bc:	11800817 	ldw	r6,32(r2)
  8030c0:	11c00917 	ldw	r7,36(r2)
  8030c4:	d9000117 	ldw	r4,4(sp)
  8030c8:	880b883a 	mov	r5,r17
  8030cc:	da000e15 	stw	r8,56(sp)
  8030d0:	da400d15 	stw	r9,52(sp)
  8030d4:	080cd000 	call	80cd00 <__divdf3>
  8030d8:	da400d17 	ldw	r9,52(sp)
  8030dc:	da000e17 	ldw	r8,56(sp)
	      j &= Bletch - 1;
  8030e0:	b58003cc 	andi	r22,r22,15
	      d.d /= bigtens[n_bigtens - 1];
  8030e4:	1021883a 	mov	r16,r2
  8030e8:	d8c00a15 	stw	r3,40(sp)
	      ieps++;
  8030ec:	050000c4 	movi	r20,3
	  for (; j; j >>= 1, i++)
  8030f0:	b0001126 	beq	r22,zero,803138 <_dtoa_r+0x428>
  8030f4:	05402074 	movhi	r21,129
  8030f8:	ad45f504 	addi	r21,r21,6100
  8030fc:	4809883a 	mov	r4,r9
  803100:	400b883a 	mov	r5,r8
	    if (j & 1)
  803104:	b180004c 	andi	r6,r22,1
  803108:	30000626 	beq	r6,zero,803124 <_dtoa_r+0x414>
		ds *= bigtens[i];
  80310c:	a9800017 	ldw	r6,0(r21)
  803110:	a9c00117 	ldw	r7,4(r21)
		ieps++;
  803114:	a5000044 	addi	r20,r20,1
		ds *= bigtens[i];
  803118:	080d8800 	call	80d880 <__muldf3>
  80311c:	1009883a 	mov	r4,r2
  803120:	180b883a 	mov	r5,r3
	  for (; j; j >>= 1, i++)
  803124:	b02dd07a 	srai	r22,r22,1
  803128:	ad400204 	addi	r21,r21,8
  80312c:	b03ff51e 	bne	r22,zero,803104 <_dtoa_r+0x3f4>
  803130:	2013883a 	mov	r9,r4
  803134:	2811883a 	mov	r8,r5
	  d.d /= ds;
  803138:	d9400a17 	ldw	r5,40(sp)
  80313c:	480d883a 	mov	r6,r9
  803140:	400f883a 	mov	r7,r8
  803144:	8009883a 	mov	r4,r16
  803148:	080cd000 	call	80cd00 <__divdf3>
  80314c:	102d883a 	mov	r22,r2
  803150:	182b883a 	mov	r21,r3
      if (k_check && d.d < 1. && ilim > 0)
  803154:	d8800917 	ldw	r2,36(sp)
  803158:	10000626 	beq	r2,zero,803174 <_dtoa_r+0x464>
  80315c:	000d883a 	mov	r6,zero
  803160:	01cffc34 	movhi	r7,16368
  803164:	b009883a 	mov	r4,r22
  803168:	a80b883a 	mov	r5,r21
  80316c:	080d7980 	call	80d798 <__ledf2>
  803170:	10045716 	blt	r2,zero,8042d0 <_dtoa_r+0x15c0>
      eps.d = ieps * d.d + 7.;
  803174:	a009883a 	mov	r4,r20
  803178:	080e9600 	call	80e960 <__floatsidf>
  80317c:	b00d883a 	mov	r6,r22
  803180:	a80f883a 	mov	r7,r21
  803184:	1009883a 	mov	r4,r2
  803188:	180b883a 	mov	r5,r3
  80318c:	080d8800 	call	80d880 <__muldf3>
  803190:	000d883a 	mov	r6,zero
  803194:	01d00734 	movhi	r7,16412
  803198:	1009883a 	mov	r4,r2
  80319c:	180b883a 	mov	r5,r3
  8031a0:	080c4100 	call	80c410 <__adddf3>
  8031a4:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  8031a8:	00bf3034 	movhi	r2,64704
  8031ac:	1885883a 	add	r2,r3,r2
  8031b0:	d8800f15 	stw	r2,60(sp)
      if (ilim == 0)
  8031b4:	d8800417 	ldw	r2,16(sp)
  8031b8:	10033a26 	beq	r2,zero,803ea4 <_dtoa_r+0x1194>
  8031bc:	d8800517 	ldw	r2,20(sp)
  8031c0:	d8801415 	stw	r2,80(sp)
  8031c4:	d8800417 	ldw	r2,16(sp)
  8031c8:	d8800e15 	stw	r2,56(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8031cc:	10bfffc4 	addi	r2,r2,-1
  8031d0:	100690fa 	slli	r3,r2,3
  8031d4:	00802074 	movhi	r2,129
  8031d8:	1085ff04 	addi	r2,r2,6140
  8031dc:	10c5883a 	add	r2,r2,r3
  8031e0:	12c00017 	ldw	r11,0(r2)
  8031e4:	13000117 	ldw	r12,4(r2)
	      L = d.d;
  8031e8:	a80b883a 	mov	r5,r21
  8031ec:	b009883a 	mov	r4,r22
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  8031f0:	dac01215 	stw	r11,72(sp)
  8031f4:	db001115 	stw	r12,68(sp)
	      L = d.d;
  8031f8:	080e8e00 	call	80e8e0 <__fixdfsi>
  8031fc:	1009883a 	mov	r4,r2
	      *s++ = '0' + (int) L;
  803200:	14000c04 	addi	r16,r2,48
	      d.d -= L;
  803204:	080e9600 	call	80e960 <__floatsidf>
  803208:	100d883a 	mov	r6,r2
  80320c:	180f883a 	mov	r7,r3
  803210:	b009883a 	mov	r4,r22
  803214:	a80b883a 	mov	r5,r21
  803218:	d8801515 	stw	r2,84(sp)
  80321c:	d8c01615 	stw	r3,88(sp)
  803220:	080e02c0 	call	80e02c <__subdf3>
	      *s++ = '0' + (int) L;
  803224:	d9c00217 	ldw	r7,8(sp)
      if (leftright)
  803228:	db001117 	ldw	r12,68(sp)
	      *s++ = '0' + (int) L;
  80322c:	8011883a 	mov	r8,r16
      if (leftright)
  803230:	dac01217 	ldw	r11,72(sp)
	      *s++ = '0' + (int) L;
  803234:	dc001315 	stw	r16,76(sp)
	      d.d -= L;
  803238:	1821883a 	mov	r16,r3
      if (leftright)
  80323c:	d8c00817 	ldw	r3,32(sp)
	      *s++ = '0' + (int) L;
  803240:	39000044 	addi	r4,r7,1
  803244:	d9000a15 	stw	r4,40(sp)
	      d.d -= L;
  803248:	d8801015 	stw	r2,64(sp)
  80324c:	da001115 	stw	r8,68(sp)
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  803250:	580d883a 	mov	r6,r11
  803254:	600f883a 	mov	r7,r12
      if (leftright)
  803258:	1803c226 	beq	r3,zero,804164 <_dtoa_r+0x1454>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  80325c:	0009883a 	mov	r4,zero
  803260:	014ff834 	movhi	r5,16352
  803264:	080cd000 	call	80cd00 <__divdf3>
  803268:	d9c00f17 	ldw	r7,60(sp)
  80326c:	d9800d17 	ldw	r6,52(sp)
  803270:	1009883a 	mov	r4,r2
  803274:	180b883a 	mov	r5,r3
  803278:	080e02c0 	call	80e02c <__subdf3>
	      *s++ = '0' + (int) L;
  80327c:	d9c00217 	ldw	r7,8(sp)
  803280:	d9001317 	ldw	r4,76(sp)
	      if (d.d < eps.d)
  803284:	d9801017 	ldw	r6,64(sp)
  803288:	180b883a 	mov	r5,r3
	      *s++ = '0' + (int) L;
  80328c:	39000005 	stb	r4,0(r7)
	      if (d.d < eps.d)
  803290:	800f883a 	mov	r7,r16
  803294:	1009883a 	mov	r4,r2
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
  803298:	1029883a 	mov	r20,r2
  80329c:	d8c00f15 	stw	r3,60(sp)
	      if (d.d < eps.d)
  8032a0:	080d6b00 	call	80d6b0 <__gedf2>
  8032a4:	da001117 	ldw	r8,68(sp)
  8032a8:	00846216 	blt	zero,r2,804434 <_dtoa_r+0x1724>
	  for (i = 0;;)
  8032ac:	dc801315 	stw	r18,76(sp)
  8032b0:	ddc01715 	stw	r23,92(sp)
  8032b4:	dc800f17 	ldw	r18,60(sp)
  8032b8:	dcc01115 	stw	r19,68(sp)
  8032bc:	df001215 	stw	fp,72(sp)
  8032c0:	dc400f15 	stw	r17,60(sp)
  8032c4:	dcc01517 	ldw	r19,84(sp)
  8032c8:	ddc01617 	ldw	r23,88(sp)
  8032cc:	df001017 	ldw	fp,64(sp)
  8032d0:	d8000d15 	stw	zero,52(sp)
  8032d4:	4023883a 	mov	r17,r8
  8032d8:	00002e06 	br	803394 <_dtoa_r+0x684>
	      if (++i >= ilim)
  8032dc:	d8800d17 	ldw	r2,52(sp)
  8032e0:	d8c00e17 	ldw	r3,56(sp)
  8032e4:	10800044 	addi	r2,r2,1
  8032e8:	d8800d15 	stw	r2,52(sp)
  8032ec:	10c07b0e 	bge	r2,r3,8034dc <_dtoa_r+0x7cc>
	      eps.d *= 10.;
  8032f0:	a009883a 	mov	r4,r20
  8032f4:	900b883a 	mov	r5,r18
  8032f8:	000d883a 	mov	r6,zero
  8032fc:	01d00934 	movhi	r7,16420
  803300:	080d8800 	call	80d880 <__muldf3>
	      d.d *= 10.;
  803304:	000d883a 	mov	r6,zero
  803308:	01d00934 	movhi	r7,16420
  80330c:	e009883a 	mov	r4,fp
  803310:	800b883a 	mov	r5,r16
	      eps.d *= 10.;
  803314:	1029883a 	mov	r20,r2
  803318:	1825883a 	mov	r18,r3
	      d.d *= 10.;
  80331c:	080d8800 	call	80d880 <__muldf3>
	      L = d.d;
  803320:	180b883a 	mov	r5,r3
  803324:	1009883a 	mov	r4,r2
	      d.d *= 10.;
  803328:	182b883a 	mov	r21,r3
  80332c:	102d883a 	mov	r22,r2
	      L = d.d;
  803330:	080e8e00 	call	80e8e0 <__fixdfsi>
	      d.d -= L;
  803334:	1009883a 	mov	r4,r2
	      L = d.d;
  803338:	1023883a 	mov	r17,r2
	      d.d -= L;
  80333c:	080e9600 	call	80e960 <__floatsidf>
  803340:	100d883a 	mov	r6,r2
  803344:	180f883a 	mov	r7,r3
  803348:	b009883a 	mov	r4,r22
  80334c:	a80b883a 	mov	r5,r21
  803350:	1027883a 	mov	r19,r2
  803354:	182f883a 	mov	r23,r3
  803358:	080e02c0 	call	80e02c <__subdf3>
	      if (d.d < eps.d)
  80335c:	1009883a 	mov	r4,r2
	      d.d -= L;
  803360:	1039883a 	mov	fp,r2
	      *s++ = '0' + (int) L;
  803364:	d8800a17 	ldw	r2,40(sp)
  803368:	8c400c04 	addi	r17,r17,48
	      if (d.d < eps.d)
  80336c:	180b883a 	mov	r5,r3
  803370:	a00d883a 	mov	r6,r20
  803374:	900f883a 	mov	r7,r18
	      *s++ = '0' + (int) L;
  803378:	14400005 	stb	r17,0(r2)
	      d.d -= L;
  80337c:	1821883a 	mov	r16,r3
	      if (d.d < eps.d)
  803380:	080d7980 	call	80d798 <__ledf2>
	      *s++ = '0' + (int) L;
  803384:	d8c00a17 	ldw	r3,40(sp)
  803388:	18c00044 	addi	r3,r3,1
  80338c:	d8c00a15 	stw	r3,40(sp)
	      if (d.d < eps.d)
  803390:	10040816 	blt	r2,zero,8043b4 <_dtoa_r+0x16a4>
	      if (1. - d.d < eps.d)
  803394:	b00d883a 	mov	r6,r22
  803398:	a80f883a 	mov	r7,r21
  80339c:	0009883a 	mov	r4,zero
  8033a0:	014ffc34 	movhi	r5,16368
  8033a4:	080e02c0 	call	80e02c <__subdf3>
  8033a8:	980d883a 	mov	r6,r19
  8033ac:	b80f883a 	mov	r7,r23
  8033b0:	1009883a 	mov	r4,r2
  8033b4:	180b883a 	mov	r5,r3
  8033b8:	080c4100 	call	80c410 <__adddf3>
  8033bc:	a00d883a 	mov	r6,r20
  8033c0:	900f883a 	mov	r7,r18
  8033c4:	1009883a 	mov	r4,r2
  8033c8:	180b883a 	mov	r5,r3
  8033cc:	080d7980 	call	80d798 <__ledf2>
  8033d0:	103fc20e 	bge	r2,zero,8032dc <_dtoa_r+0x5cc>
			k++;
  8033d4:	d8801417 	ldw	r2,80(sp)
  8033d8:	dcc01117 	ldw	r19,68(sp)
  8033dc:	df001217 	ldw	fp,72(sp)
  8033e0:	10800044 	addi	r2,r2,1
  8033e4:	dd000a17 	ldw	r20,40(sp)
  8033e8:	d9000217 	ldw	r4,8(sp)
  8033ec:	8811883a 	mov	r8,r17
  8033f0:	d8800515 	stw	r2,20(sp)
  8033f4:	00000306 	br	803404 <_dtoa_r+0x6f4>
		    if (s == s0)
  8033f8:	1903d626 	beq	r3,r4,804354 <_dtoa_r+0x1644>
		  while (*--s == '9')
  8033fc:	1a3fffc3 	ldbu	r8,-1(r3)
  803400:	1829883a 	mov	r20,r3
  803404:	40803fcc 	andi	r2,r8,255
  803408:	1080201c 	xori	r2,r2,128
  80340c:	10bfe004 	addi	r2,r2,-128
  803410:	10800e60 	cmpeqi	r2,r2,57
  803414:	a0ffffc4 	addi	r3,r20,-1
  803418:	103ff71e 	bne	r2,zero,8033f8 <_dtoa_r+0x6e8>
		  ++*s++;
  80341c:	42000044 	addi	r8,r8,1
  803420:	1a000005 	stb	r8,0(r3)
  803424:	00014c06 	br	803958 <_dtoa_r+0xc48>
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  803428:	04600034 	movhi	r17,32768
  80342c:	8c7fffc4 	addi	r17,r17,-1
  803430:	9462703a 	and	r17,r18,r17
      *sign = 1;
  803434:	00800044 	movi	r2,1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
  803438:	8825883a 	mov	r18,r17
      *sign = 1;
  80343c:	80800015 	stw	r2,0(r16)
  if ((word0 (d) & Exp_mask) == Exp_mask)
  803440:	00dffc34 	movhi	r3,32752
  803444:	909ffc2c 	andhi	r2,r18,32752
  803448:	10fe511e 	bne	r2,r3,802d90 <_dtoa_r+0x80>
      *decpt = 9999;
  80344c:	d9002517 	ldw	r4,148(sp)
  803450:	00c9c3c4 	movi	r3,9999
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  803454:	00800434 	movhi	r2,16
      *decpt = 9999;
  803458:	20c00015 	stw	r3,0(r4)
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  80345c:	d8c00117 	ldw	r3,4(sp)
  803460:	10bfffc4 	addi	r2,r2,-1
  803464:	9084703a 	and	r2,r18,r2
  803468:	10e6b03a 	or	r19,r2,r3
  80346c:	9800151e 	bne	r19,zero,8034c4 <_dtoa_r+0x7b4>
      if (rve)
  803470:	d8802717 	ldw	r2,156(sp)
  803474:	10041026 	beq	r2,zero,8044b8 <_dtoa_r+0x17a8>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  803478:	00802074 	movhi	r2,129
  80347c:	1007883a 	mov	r3,r2
  803480:	18c5a804 	addi	r3,r3,5792
	  s[3] ? s + 8 :
  803484:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  803488:	d8c00215 	stw	r3,8(sp)
	  s[3] ? s + 8 :
  80348c:	1085aa04 	addi	r2,r2,5800
	*rve =
  803490:	d8c02717 	ldw	r3,156(sp)
  803494:	18800015 	stw	r2,0(r3)
  803498:	003e4f06 	br	802dd8 <_dtoa_r+0xc8>
      i = bbits + be + (Bias + (P - 1) - 1);
  80349c:	d8801817 	ldw	r2,96(sp)
      word0 (d2) &= Frac_mask1;
  8034a0:	01400434 	movhi	r5,16
  8034a4:	297fffc4 	addi	r5,r5,-1
  8034a8:	894a703a 	and	r5,r17,r5
      i = bbits + be + (Bias + (P - 1) - 1);
  8034ac:	d8800215 	stw	r2,8(sp)
      d2.d = d.d;
  8034b0:	a009883a 	mov	r4,r20
      word0 (d2) |= Exp_11;
  8034b4:	294ffc34 	orhi	r5,r5,16368
      i -= Bias;
  8034b8:	843f0044 	addi	r16,r16,-1023
      denorm = 0;
  8034bc:	d8000c15 	stw	zero,48(sp)
  8034c0:	003e7206 	br	802e8c <_dtoa_r+0x17c>
      if (rve)
  8034c4:	d8802717 	ldw	r2,156(sp)
  8034c8:	1002011e 	bne	r2,zero,803cd0 <_dtoa_r+0xfc0>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8034cc:	00802074 	movhi	r2,129
  8034d0:	1085a704 	addi	r2,r2,5788
  8034d4:	d8800215 	stw	r2,8(sp)
  8034d8:	003e3f06 	br	802dd8 <_dtoa_r+0xc8>
  8034dc:	dc801317 	ldw	r18,76(sp)
  8034e0:	ddc01717 	ldw	r23,92(sp)
  8034e4:	dcc01117 	ldw	r19,68(sp)
  8034e8:	df001217 	ldw	fp,72(sp)
  8034ec:	dc400f17 	ldw	r17,60(sp)
  if (be >= 0 && k <= Int_max)
  8034f0:	d8801917 	ldw	r2,100(sp)
  8034f4:	10007d16 	blt	r2,zero,8036ec <_dtoa_r+0x9dc>
  8034f8:	d9000517 	ldw	r4,20(sp)
  8034fc:	20c003c8 	cmpgei	r3,r4,15
  803500:	18007a1e 	bne	r3,zero,8036ec <_dtoa_r+0x9dc>
      ds = tens[k];
  803504:	200690fa 	slli	r3,r4,3
  803508:	00802074 	movhi	r2,129
  80350c:	1085ff04 	addi	r2,r2,6140
  803510:	10c5883a 	add	r2,r2,r3
  803514:	14800017 	ldw	r18,0(r2)
  803518:	10800117 	ldw	r2,4(r2)
  80351c:	d8800315 	stw	r2,12(sp)
      if (ndigits < 0 && ilim <= 0)
  803520:	d8802417 	ldw	r2,144(sp)
  803524:	1000140e 	bge	r2,zero,803578 <_dtoa_r+0x868>
  803528:	d8800417 	ldw	r2,16(sp)
  80352c:	00801216 	blt	zero,r2,803578 <_dtoa_r+0x868>
	  if (ilim < 0 || d.d <= 5 * ds)
  803530:	1002711e 	bne	r2,zero,803ef8 <_dtoa_r+0x11e8>
  803534:	d9400317 	ldw	r5,12(sp)
  803538:	000d883a 	mov	r6,zero
  80353c:	01d00534 	movhi	r7,16404
  803540:	9009883a 	mov	r4,r18
  803544:	080d8800 	call	80d880 <__muldf3>
  803548:	d9000117 	ldw	r4,4(sp)
  80354c:	100d883a 	mov	r6,r2
  803550:	180f883a 	mov	r7,r3
  803554:	880b883a 	mov	r5,r17
  803558:	080d7980 	call	80d798 <__ledf2>
	  S = mhi = 0;
  80355c:	d8000715 	stw	zero,28(sp)
  803560:	0021883a 	mov	r16,zero
	  if (ilim < 0 || d.d <= 5 * ds)
  803564:	00820516 	blt	zero,r2,803d7c <_dtoa_r+0x106c>
	  k = -1 - ndigits;
  803568:	d8802417 	ldw	r2,144(sp)
	  goto ret;
  80356c:	dd000217 	ldw	r20,8(sp)
	  k = -1 - ndigits;
  803570:	00a2303a 	nor	r17,zero,r2
	  goto ret;
  803574:	00020706 	br	803d94 <_dtoa_r+0x1084>
	  L = d.d / ds;
  803578:	dd000317 	ldw	r20,12(sp)
  80357c:	dc000117 	ldw	r16,4(sp)
  803580:	900d883a 	mov	r6,r18
  803584:	a00f883a 	mov	r7,r20
  803588:	8009883a 	mov	r4,r16
  80358c:	880b883a 	mov	r5,r17
  803590:	080cd000 	call	80cd00 <__divdf3>
  803594:	180b883a 	mov	r5,r3
  803598:	1009883a 	mov	r4,r2
  80359c:	080e8e00 	call	80e8e0 <__fixdfsi>
	  d.d -= L * ds;
  8035a0:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  8035a4:	102f883a 	mov	r23,r2
	  d.d -= L * ds;
  8035a8:	080e9600 	call	80e960 <__floatsidf>
  8035ac:	a00f883a 	mov	r7,r20
  8035b0:	900d883a 	mov	r6,r18
  8035b4:	1009883a 	mov	r4,r2
  8035b8:	180b883a 	mov	r5,r3
  8035bc:	080d8800 	call	80d880 <__muldf3>
  8035c0:	8009883a 	mov	r4,r16
  8035c4:	880b883a 	mov	r5,r17
  8035c8:	100d883a 	mov	r6,r2
  8035cc:	180f883a 	mov	r7,r3
  8035d0:	080e02c0 	call	80e02c <__subdf3>
	  *s++ = '0' + (int) L;
  8035d4:	d9400217 	ldw	r5,8(sp)
	  if (i == ilim)
  8035d8:	d9000417 	ldw	r4,16(sp)
	  *s++ = '0' + (int) L;
  8035dc:	ba000c04 	addi	r8,r23,48
  8035e0:	2a000005 	stb	r8,0(r5)
	  if (i == ilim)
  8035e4:	21000060 	cmpeqi	r4,r4,1
	  d.d -= L * ds;
  8035e8:	102b883a 	mov	r21,r2
  8035ec:	182d883a 	mov	r22,r3
	  *s++ = '0' + (int) L;
  8035f0:	2d000044 	addi	r20,r5,1
	  if (i == ilim)
  8035f4:	2002901e 	bne	r4,zero,804038 <_dtoa_r+0x1328>
  8035f8:	ddc00317 	ldw	r23,12(sp)
  8035fc:	0009883a 	mov	r4,zero
  803600:	014ffc34 	movhi	r5,16368
  803604:	900d883a 	mov	r6,r18
  803608:	b80f883a 	mov	r7,r23
  80360c:	080cd000 	call	80cd00 <__divdf3>
  803610:	a809883a 	mov	r4,r21
  803614:	b00b883a 	mov	r5,r22
  803618:	04000044 	movi	r16,1
  80361c:	dcc00115 	stw	r19,4(sp)
  803620:	df000615 	stw	fp,24(sp)
  803624:	102b883a 	mov	r21,r2
  803628:	182d883a 	mov	r22,r3
  80362c:	b823883a 	mov	r17,r23
  803630:	00001d06 	br	8036a8 <_dtoa_r+0x998>
	  L = d.d / ds;
  803634:	a80d883a 	mov	r6,r21
  803638:	b00f883a 	mov	r7,r22
  80363c:	b809883a 	mov	r4,r23
  803640:	e00b883a 	mov	r5,fp
  803644:	080d8800 	call	80d880 <__muldf3>
  803648:	180b883a 	mov	r5,r3
  80364c:	1009883a 	mov	r4,r2
  803650:	080e8e00 	call	80e8e0 <__fixdfsi>
	  d.d -= L * ds;
  803654:	1009883a 	mov	r4,r2
	  L = d.d / ds;
  803658:	1027883a 	mov	r19,r2
	  d.d -= L * ds;
  80365c:	080e9600 	call	80e960 <__floatsidf>
  803660:	900d883a 	mov	r6,r18
  803664:	880f883a 	mov	r7,r17
  803668:	1009883a 	mov	r4,r2
  80366c:	180b883a 	mov	r5,r3
  803670:	080d8800 	call	80d880 <__muldf3>
  803674:	b809883a 	mov	r4,r23
  803678:	e00b883a 	mov	r5,fp
  80367c:	100d883a 	mov	r6,r2
  803680:	180f883a 	mov	r7,r3
  803684:	080e02c0 	call	80e02c <__subdf3>
  803688:	1009883a 	mov	r4,r2
	  if (i == ilim)
  80368c:	d8800417 	ldw	r2,16(sp)
	  *s++ = '0' + (int) L;
  803690:	9a000c04 	addi	r8,r19,48
  803694:	a2000005 	stb	r8,0(r20)
      for (i = 1;; i++)
  803698:	84000044 	addi	r16,r16,1
	  *s++ = '0' + (int) L;
  80369c:	a5000044 	addi	r20,r20,1
	  d.d -= L * ds;
  8036a0:	180b883a 	mov	r5,r3
	  if (i == ilim)
  8036a4:	80825f26 	beq	r16,r2,804024 <_dtoa_r+0x1314>
	  if (!(d.d *= 10.))
  8036a8:	000d883a 	mov	r6,zero
  8036ac:	01d00934 	movhi	r7,16420
  8036b0:	080d8800 	call	80d880 <__muldf3>
  8036b4:	000d883a 	mov	r6,zero
  8036b8:	000f883a 	mov	r7,zero
  8036bc:	1009883a 	mov	r4,r2
  8036c0:	180b883a 	mov	r5,r3
  8036c4:	102f883a 	mov	r23,r2
  8036c8:	1839883a 	mov	fp,r3
  8036cc:	080d6300 	call	80d630 <__eqdf2>
  8036d0:	103fd81e 	bne	r2,zero,803634 <_dtoa_r+0x924>
  *decpt = k + 1;
  8036d4:	d8800517 	ldw	r2,20(sp)
  8036d8:	dcc00117 	ldw	r19,4(sp)
  8036dc:	df000617 	ldw	fp,24(sp)
  8036e0:	10800044 	addi	r2,r2,1
  8036e4:	d8800515 	stw	r2,20(sp)
  8036e8:	00009b06 	br	803958 <_dtoa_r+0xc48>
  if (leftright)
  8036ec:	d8c00817 	ldw	r3,32(sp)
  8036f0:	1800d126 	beq	r3,zero,803a38 <_dtoa_r+0xd28>
      if (mode < 2)
  8036f4:	d8c00317 	ldw	r3,12(sp)
  8036f8:	18c00088 	cmpgei	r3,r3,2
  8036fc:	1801cf26 	beq	r3,zero,803e3c <_dtoa_r+0x112c>
	  j = ilim - 1;
  803700:	d8800417 	ldw	r2,16(sp)
  803704:	153fffc4 	addi	r20,r2,-1
	  if (m5 >= j)
  803708:	d8800717 	ldw	r2,28(sp)
  80370c:	1501b00e 	bge	r2,r20,803dd0 <_dtoa_r+0x10c0>
	      s5 += j -= m5;
  803710:	a085c83a 	sub	r2,r20,r2
  803714:	dd000715 	stw	r20,28(sp)
  803718:	90a5883a 	add	r18,r18,r2
	      m5 = 0;
  80371c:	0029883a 	mov	r20,zero
	  if ((i = ilim) < 0)
  803720:	d8800417 	ldw	r2,16(sp)
  803724:	10027816 	blt	r2,zero,804108 <_dtoa_r+0x13f8>
  m2 = b2;
  803728:	d8c00617 	ldw	r3,24(sp)
      s2 += i;
  80372c:	b8af883a 	add	r23,r23,r2
  803730:	1885883a 	add	r2,r3,r2
  m2 = b2;
  803734:	182b883a 	mov	r21,r3
      s2 += i;
  803738:	d8800615 	stw	r2,24(sp)
      mhi = i2b (ptr, 1);
  80373c:	01400044 	movi	r5,1
  803740:	e009883a 	mov	r4,fp
  803744:	0806d080 	call	806d08 <__i2b>
  803748:	1021883a 	mov	r16,r2
  if (m2 > 0 && s2 > 0)
  80374c:	0540080e 	bge	zero,r21,803770 <_dtoa_r+0xa60>
  803750:	05c0070e 	bge	zero,r23,803770 <_dtoa_r+0xa60>
      i = m2 < s2 ? m2 : s2;
  803754:	a805883a 	mov	r2,r21
  803758:	bd419516 	blt	r23,r21,803db0 <_dtoa_r+0x10a0>
      b2 -= i;
  80375c:	d8c00617 	ldw	r3,24(sp)
      m2 -= i;
  803760:	a8abc83a 	sub	r21,r21,r2
      s2 -= i;
  803764:	b8afc83a 	sub	r23,r23,r2
      b2 -= i;
  803768:	1887c83a 	sub	r3,r3,r2
  80376c:	d8c00615 	stw	r3,24(sp)
  if (b5 > 0)
  803770:	d8800717 	ldw	r2,28(sp)
  803774:	10001426 	beq	r2,zero,8037c8 <_dtoa_r+0xab8>
      if (leftright)
  803778:	d8800817 	ldw	r2,32(sp)
  80377c:	1001e126 	beq	r2,zero,803f04 <_dtoa_r+0x11f4>
	  if (m5 > 0)
  803780:	05000e0e 	bge	zero,r20,8037bc <_dtoa_r+0xaac>
	      mhi = pow5mult (ptr, mhi, m5);
  803784:	800b883a 	mov	r5,r16
  803788:	a00d883a 	mov	r6,r20
  80378c:	e009883a 	mov	r4,fp
  803790:	08070e00 	call	8070e0 <__pow5mult>
	      b1 = mult (ptr, mhi, b);
  803794:	980d883a 	mov	r6,r19
  803798:	100b883a 	mov	r5,r2
  80379c:	e009883a 	mov	r4,fp
	      mhi = pow5mult (ptr, mhi, m5);
  8037a0:	1021883a 	mov	r16,r2
	      b1 = mult (ptr, mhi, b);
  8037a4:	0806db80 	call	806db8 <__multiply>
  8037a8:	102d883a 	mov	r22,r2
	      Bfree (ptr, b);
  8037ac:	980b883a 	mov	r5,r19
  8037b0:	e009883a 	mov	r4,fp
  8037b4:	08068480 	call	806848 <_Bfree>
	      b = b1;
  8037b8:	b027883a 	mov	r19,r22
         if ((j = b5 - m5) != 0)
  8037bc:	d8800717 	ldw	r2,28(sp)
  8037c0:	150dc83a 	sub	r6,r2,r20
  8037c4:	15024b1e 	bne	r2,r20,8040f4 <_dtoa_r+0x13e4>
  S = i2b (ptr, 1);
  8037c8:	01400044 	movi	r5,1
  8037cc:	e009883a 	mov	r4,fp
  8037d0:	0806d080 	call	806d08 <__i2b>
  8037d4:	d8800715 	stw	r2,28(sp)
  if (s5 > 0)
  8037d8:	0480aa16 	blt	zero,r18,803a84 <_dtoa_r+0xd74>
  if (mode < 2)
  8037dc:	d8800317 	ldw	r2,12(sp)
  8037e0:	10800088 	cmpgei	r2,r2,2
  8037e4:	10014426 	beq	r2,zero,803cf8 <_dtoa_r+0xfe8>
  spec_case = 0;
  8037e8:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  8037ec:	00800044 	movi	r2,1
  8037f0:	9000ad1e 	bne	r18,zero,803aa8 <_dtoa_r+0xd98>
  8037f4:	15c5883a 	add	r2,r2,r23
  8037f8:	108007cc 	andi	r2,r2,31
  8037fc:	10009826 	beq	r2,zero,803a60 <_dtoa_r+0xd50>
    i = 32 - i;
  803800:	00c00804 	movi	r3,32
  803804:	1887c83a 	sub	r3,r3,r2
  if (i > 4)
  803808:	19000150 	cmplti	r4,r3,5
  80380c:	2003151e 	bne	r4,zero,804464 <_dtoa_r+0x1754>
      i -= 4;
  803810:	00c00704 	movi	r3,28
  803814:	1885c83a 	sub	r2,r3,r2
      b2 += i;
  803818:	d8c00617 	ldw	r3,24(sp)
      m2 += i;
  80381c:	a8ab883a 	add	r21,r21,r2
      s2 += i;
  803820:	b8af883a 	add	r23,r23,r2
      b2 += i;
  803824:	1887883a 	add	r3,r3,r2
  803828:	d8c00615 	stw	r3,24(sp)
  if (b2 > 0)
  80382c:	d8800617 	ldw	r2,24(sp)
  803830:	00808516 	blt	zero,r2,803a48 <_dtoa_r+0xd38>
  if (s2 > 0)
  803834:	05c0050e 	bge	zero,r23,80384c <_dtoa_r+0xb3c>
    S = lshift (ptr, S, s2);
  803838:	d9400717 	ldw	r5,28(sp)
  80383c:	b80d883a 	mov	r6,r23
  803840:	e009883a 	mov	r4,fp
  803844:	08072740 	call	807274 <__lshift>
  803848:	d8800715 	stw	r2,28(sp)
  if (k_check)
  80384c:	d8800917 	ldw	r2,36(sp)
  803850:	10010d1e 	bne	r2,zero,803c88 <_dtoa_r+0xf78>
  if (ilim <= 0 && mode > 2)
  803854:	d8800417 	ldw	r2,16(sp)
  803858:	0080fa0e 	bge	zero,r2,803c44 <_dtoa_r+0xf34>
  if (leftright)
  80385c:	d8800817 	ldw	r2,32(sp)
  803860:	1000a51e 	bne	r2,zero,803af8 <_dtoa_r+0xde8>
  *decpt = k + 1;
  803864:	d8800517 	ldw	r2,20(sp)
  803868:	10800044 	addi	r2,r2,1
  80386c:	d8800515 	stw	r2,20(sp)
  if (ilim <= 0 && mode > 2)
  803870:	dc800717 	ldw	r18,28(sp)
  803874:	dd000417 	ldw	r20,16(sp)
  803878:	dd800217 	ldw	r22,8(sp)
  80387c:	04400044 	movi	r17,1
  803880:	00000706 	br	8038a0 <_dtoa_r+0xb90>
	b = multadd (ptr, b, 10, 0);
  803884:	980b883a 	mov	r5,r19
  803888:	000f883a 	mov	r7,zero
  80388c:	01800284 	movi	r6,10
  803890:	e009883a 	mov	r4,fp
  803894:	080686c0 	call	80686c <__multadd>
  803898:	1027883a 	mov	r19,r2
    for (i = 1;; i++)
  80389c:	8c400044 	addi	r17,r17,1
	*s++ = dig = quorem (b, S) + '0';
  8038a0:	900b883a 	mov	r5,r18
  8038a4:	9809883a 	mov	r4,r19
  8038a8:	0802af00 	call	802af0 <quorem>
  8038ac:	15400c04 	addi	r21,r2,48
  8038b0:	b445883a 	add	r2,r22,r17
  8038b4:	157fffc5 	stb	r21,-1(r2)
	if (i >= ilim)
  8038b8:	8d3ff216 	blt	r17,r20,803884 <_dtoa_r+0xb74>
	*s++ = dig = quorem (b, S) + '0';
  8038bc:	ddc00417 	ldw	r23,16(sp)
  8038c0:	05c1490e 	bge	zero,r23,803de8 <_dtoa_r+0x10d8>
  8038c4:	d8800217 	ldw	r2,8(sp)
  mhi = mlo = 0;
  8038c8:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  8038cc:	15ef883a 	add	r23,r2,r23
  b = lshift (ptr, b, 1);
  8038d0:	980b883a 	mov	r5,r19
  8038d4:	e009883a 	mov	r4,fp
  8038d8:	01800044 	movi	r6,1
  8038dc:	08072740 	call	807274 <__lshift>
  j = cmp (b, S);
  8038e0:	d9400717 	ldw	r5,28(sp)
  8038e4:	1009883a 	mov	r4,r2
  b = lshift (ptr, b, 1);
  8038e8:	1027883a 	mov	r19,r2
  j = cmp (b, S);
  8038ec:	080746c0 	call	80746c <__mcmp>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  8038f0:	0081420e 	bge	zero,r2,803dfc <_dtoa_r+0x10ec>
  8038f4:	d9000217 	ldw	r4,8(sp)
  8038f8:	00000106 	br	803900 <_dtoa_r+0xbf0>
	if (s == s0)
  8038fc:	b9014826 	beq	r23,r4,803e20 <_dtoa_r+0x1110>
      while (*--s == '9')
  803900:	b8ffffc3 	ldbu	r3,-1(r23)
  803904:	b829883a 	mov	r20,r23
  803908:	bdffffc4 	addi	r23,r23,-1
  80390c:	18803fcc 	andi	r2,r3,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	10800e60 	cmpeqi	r2,r2,57
  80391c:	103ff71e 	bne	r2,zero,8038fc <_dtoa_r+0xbec>
      ++*s++;
  803920:	18c00044 	addi	r3,r3,1
  803924:	b8c00005 	stb	r3,0(r23)
  Bfree (ptr, S);
  803928:	d9400717 	ldw	r5,28(sp)
  80392c:	e009883a 	mov	r4,fp
  803930:	08068480 	call	806848 <_Bfree>
  if (mhi)
  803934:	80000826 	beq	r16,zero,803958 <_dtoa_r+0xc48>
      if (mlo && mlo != mhi)
  803938:	88000426 	beq	r17,zero,80394c <_dtoa_r+0xc3c>
  80393c:	8c000326 	beq	r17,r16,80394c <_dtoa_r+0xc3c>
	Bfree (ptr, mlo);
  803940:	880b883a 	mov	r5,r17
  803944:	e009883a 	mov	r4,fp
  803948:	08068480 	call	806848 <_Bfree>
      Bfree (ptr, mhi);
  80394c:	800b883a 	mov	r5,r16
  803950:	e009883a 	mov	r4,fp
  803954:	08068480 	call	806848 <_Bfree>
  Bfree (ptr, b);
  803958:	980b883a 	mov	r5,r19
  80395c:	e009883a 	mov	r4,fp
  803960:	08068480 	call	806848 <_Bfree>
  *decpt = k + 1;
  803964:	d8802517 	ldw	r2,148(sp)
  803968:	d8c00517 	ldw	r3,20(sp)
  *s = 0;
  80396c:	a0000005 	stb	zero,0(r20)
  *decpt = k + 1;
  803970:	10c00015 	stw	r3,0(r2)
  if (rve)
  803974:	d8802717 	ldw	r2,156(sp)
  803978:	103d1726 	beq	r2,zero,802dd8 <_dtoa_r+0xc8>
    *rve = s;
  80397c:	15000015 	stw	r20,0(r2)
  803980:	003d1506 	br	802dd8 <_dtoa_r+0xc8>
      k_check = 0;
  803984:	d8000915 	stw	zero,36(sp)
  if (j >= 0)
  803988:	b8002216 	blt	r23,zero,803a14 <_dtoa_r+0xd04>
      b2 = 0;
  80398c:	d8000615 	stw	zero,24(sp)
  if (mode < 0 || mode > 9)
  803990:	d8c00317 	ldw	r3,12(sp)
  803994:	dc800515 	stw	r18,20(sp)
      b5 = 0;
  803998:	d8000715 	stw	zero,28(sp)
  if (mode < 0 || mode > 9)
  80399c:	188002a8 	cmpgeui	r2,r3,10
      s2 += k;
  8039a0:	bcaf883a 	add	r23,r23,r18
  if (mode < 0 || mode > 9)
  8039a4:	103d9126 	beq	r2,zero,802fec <_dtoa_r+0x2dc>
  leftright = 1;
  8039a8:	00800044 	movi	r2,1
  8039ac:	d8800815 	stw	r2,32(sp)
  ilim = ilim1 = -1;
  8039b0:	00bfffc4 	movi	r2,-1
  try_quick = 1;
  8039b4:	04000044 	movi	r16,1
    mode = 0;
  8039b8:	d8000315 	stw	zero,12(sp)
  ilim = ilim1 = -1;
  8039bc:	d8800b15 	stw	r2,44(sp)
      ndigits = 0;
  8039c0:	d8002415 	stw	zero,144(sp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8039c4:	e0001115 	stw	zero,68(fp)
  8039c8:	d8800415 	stw	r2,16(sp)
  8039cc:	000b883a 	mov	r5,zero
  8039d0:	003da306 	br	803060 <_dtoa_r+0x350>
  switch (mode)
  8039d4:	188000e0 	cmpeqi	r2,r3,3
      leftright = 0;
  8039d8:	d8000815 	stw	zero,32(sp)
  switch (mode)
  8039dc:	1002a626 	beq	r2,zero,804478 <_dtoa_r+0x1768>
      i = ndigits + k + 1;
  8039e0:	d8802417 	ldw	r2,144(sp)
  8039e4:	d8c00517 	ldw	r3,20(sp)
  8039e8:	10c5883a 	add	r2,r2,r3
  8039ec:	d8800b15 	stw	r2,44(sp)
  8039f0:	10800044 	addi	r2,r2,1
  8039f4:	d8800415 	stw	r2,16(sp)
      if (i <= 0)
  8039f8:	100d883a 	mov	r6,r2
  8039fc:	00bd8d16 	blt	zero,r2,803034 <_dtoa_r+0x324>
  803a00:	01800044 	movi	r6,1
  803a04:	003d8b06 	br	803034 <_dtoa_r+0x324>
  k_check = 1;
  803a08:	00800044 	movi	r2,1
  803a0c:	d8800915 	stw	r2,36(sp)
  if (j >= 0)
  803a10:	b83d6a0e 	bge	r23,zero,802fbc <_dtoa_r+0x2ac>
      b2 = -j;
  803a14:	00800044 	movi	r2,1
  803a18:	1405c83a 	sub	r2,r2,r16
  803a1c:	d8800615 	stw	r2,24(sp)
      s2 = 0;
  803a20:	002f883a 	mov	r23,zero
  803a24:	003d6606 	br	802fc0 <_dtoa_r+0x2b0>
      return s;
  803a28:	00802074 	movhi	r2,129
  803a2c:	10859e04 	addi	r2,r2,5752
  803a30:	d8800215 	stw	r2,8(sp)
  803a34:	003ce806 	br	802dd8 <_dtoa_r+0xc8>
  803a38:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  803a3c:	dd400617 	ldw	r21,24(sp)
  mhi = mlo = 0;
  803a40:	0021883a 	mov	r16,zero
  803a44:	003f4106 	br	80374c <_dtoa_r+0xa3c>
    b = lshift (ptr, b, b2);
  803a48:	980b883a 	mov	r5,r19
  803a4c:	100d883a 	mov	r6,r2
  803a50:	e009883a 	mov	r4,fp
  803a54:	08072740 	call	807274 <__lshift>
  803a58:	1027883a 	mov	r19,r2
  803a5c:	003f7506 	br	803834 <_dtoa_r+0xb24>
  803a60:	00800704 	movi	r2,28
  803a64:	003f6c06 	br	803818 <_dtoa_r+0xb08>
  try_quick = 1;
  803a68:	04000044 	movi	r16,1
  803a6c:	003d6506 	br	803004 <_dtoa_r+0x2f4>
       : (word1 (d) << (32 - i));
  803a70:	01000804 	movi	r4,32
  803a74:	2089c83a 	sub	r4,r4,r2
  803a78:	d8800117 	ldw	r2,4(sp)
  803a7c:	1108983a 	sll	r4,r2,r4
  803a80:	003cfb06 	br	802e70 <_dtoa_r+0x160>
    S = pow5mult (ptr, S, s5);
  803a84:	100b883a 	mov	r5,r2
  803a88:	900d883a 	mov	r6,r18
  803a8c:	e009883a 	mov	r4,fp
  803a90:	08070e00 	call	8070e0 <__pow5mult>
  if (mode < 2)
  803a94:	d8c00317 	ldw	r3,12(sp)
    S = pow5mult (ptr, S, s5);
  803a98:	d8800715 	stw	r2,28(sp)
  if (mode < 2)
  803a9c:	18c00090 	cmplti	r3,r3,2
  803aa0:	1801441e 	bne	r3,zero,803fb4 <_dtoa_r+0x12a4>
  spec_case = 0;
  803aa4:	0023883a 	mov	r17,zero
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
  803aa8:	d8c00717 	ldw	r3,28(sp)
  803aac:	18800417 	ldw	r2,16(r3)
  803ab0:	10800104 	addi	r2,r2,4
  803ab4:	100490ba 	slli	r2,r2,2
  803ab8:	1885883a 	add	r2,r3,r2
  803abc:	11000017 	ldw	r4,0(r2)
  803ac0:	0806be40 	call	806be4 <__hi0bits>
  803ac4:	00c00804 	movi	r3,32
  803ac8:	1885c83a 	sub	r2,r3,r2
  803acc:	003f4906 	br	8037f4 <_dtoa_r+0xae4>
	    mhi = multadd (ptr, mhi, 10, 0);
  803ad0:	800b883a 	mov	r5,r16
  803ad4:	000f883a 	mov	r7,zero
  803ad8:	01800284 	movi	r6,10
  803adc:	e009883a 	mov	r4,fp
  803ae0:	080686c0 	call	80686c <__multadd>
  803ae4:	1021883a 	mov	r16,r2
  if (ilim <= 0 && mode > 2)
  803ae8:	d8800b17 	ldw	r2,44(sp)
  803aec:	0082470e 	bge	zero,r2,80440c <_dtoa_r+0x16fc>
	  k--;
  803af0:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  803af4:	d8800415 	stw	r2,16(sp)
      if (m2 > 0)
  803af8:	0540af16 	blt	zero,r21,803db8 <_dtoa_r+0x10a8>
      if (spec_case)
  803afc:	88016c1e 	bne	r17,zero,8040b0 <_dtoa_r+0x13a0>
  803b00:	8025883a 	mov	r18,r16
  803b04:	dd800217 	ldw	r22,8(sp)
  803b08:	d8c00417 	ldw	r3,16(sp)
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  803b0c:	d8800117 	ldw	r2,4(sp)
  803b10:	b5ffffc4 	addi	r23,r22,-1
  803b14:	b8c7883a 	add	r3,r23,r3
  803b18:	d8c00615 	stw	r3,24(sp)
  803b1c:	d8c00317 	ldw	r3,12(sp)
  803b20:	1080004c 	andi	r2,r2,1
  803b24:	d8800915 	stw	r2,36(sp)
  803b28:	10c4b03a 	or	r2,r2,r3
  803b2c:	dd000717 	ldw	r20,28(sp)
  803b30:	d8800815 	stw	r2,32(sp)
  803b34:	00002b06 	br	803be4 <_dtoa_r+0xed4>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  803b38:	9809883a 	mov	r4,r19
  803b3c:	d9400415 	stw	r5,16(sp)
  803b40:	080746c0 	call	80746c <__mcmp>
	  Bfree (ptr, delta);
  803b44:	d9400417 	ldw	r5,16(sp)
  803b48:	e009883a 	mov	r4,fp
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  803b4c:	d8800115 	stw	r2,4(sp)
	  Bfree (ptr, delta);
  803b50:	08068480 	call	806848 <_Bfree>
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
  803b54:	d8800117 	ldw	r2,4(sp)
  803b58:	1000021e 	bne	r2,zero,803b64 <_dtoa_r+0xe54>
  803b5c:	d8c00817 	ldw	r3,32(sp)
  803b60:	18021b26 	beq	r3,zero,8043d0 <_dtoa_r+0x16c0>
         if ((j < 0) || ((j == 0) && !mode
  803b64:	b0c00044 	addi	r3,r22,1
  803b68:	d8c00115 	stw	r3,4(sp)
  803b6c:	88011816 	blt	r17,zero,803fd0 <_dtoa_r+0x12c0>
	      && !(word1 (d) & 1)
  803b70:	d8c00317 	ldw	r3,12(sp)
  803b74:	88e2b03a 	or	r17,r17,r3
  803b78:	d8c00917 	ldw	r3,36(sp)
  803b7c:	1c62b03a 	or	r17,r3,r17
  803b80:	88011326 	beq	r17,zero,803fd0 <_dtoa_r+0x12c0>
	  if (j1 > 0)
  803b84:	00816416 	blt	zero,r2,804118 <_dtoa_r+0x1408>
	  if (i == ilim)
  803b88:	d8800617 	ldw	r2,24(sp)
	  *s++ = dig;
  803b8c:	b5400005 	stb	r21,0(r22)
	  if (i == ilim)
  803b90:	15816c26 	beq	r2,r22,804144 <_dtoa_r+0x1434>
	  b = multadd (ptr, b, 10, 0);
  803b94:	980b883a 	mov	r5,r19
  803b98:	000f883a 	mov	r7,zero
  803b9c:	01800284 	movi	r6,10
  803ba0:	e009883a 	mov	r4,fp
  803ba4:	080686c0 	call	80686c <__multadd>
  803ba8:	1027883a 	mov	r19,r2
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  803bac:	800b883a 	mov	r5,r16
  803bb0:	000f883a 	mov	r7,zero
  803bb4:	01800284 	movi	r6,10
  803bb8:	e009883a 	mov	r4,fp
	  if (mlo == mhi)
  803bbc:	84801d26 	beq	r16,r18,803c34 <_dtoa_r+0xf24>
	      mlo = multadd (ptr, mlo, 10, 0);
  803bc0:	080686c0 	call	80686c <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
  803bc4:	900b883a 	mov	r5,r18
  803bc8:	000f883a 	mov	r7,zero
  803bcc:	01800284 	movi	r6,10
  803bd0:	e009883a 	mov	r4,fp
	      mlo = multadd (ptr, mlo, 10, 0);
  803bd4:	1021883a 	mov	r16,r2
	      mhi = multadd (ptr, mhi, 10, 0);
  803bd8:	080686c0 	call	80686c <__multadd>
  803bdc:	1025883a 	mov	r18,r2
	  dig = quorem (b, S) + '0';
  803be0:	dd800117 	ldw	r22,4(sp)
  803be4:	a00b883a 	mov	r5,r20
  803be8:	9809883a 	mov	r4,r19
  803bec:	0802af00 	call	802af0 <quorem>
	  j = cmp (b, mlo);
  803bf0:	800b883a 	mov	r5,r16
  803bf4:	9809883a 	mov	r4,r19
	  dig = quorem (b, S) + '0';
  803bf8:	102f883a 	mov	r23,r2
	  j = cmp (b, mlo);
  803bfc:	080746c0 	call	80746c <__mcmp>
	  delta = diff (ptr, S, mhi);
  803c00:	a00b883a 	mov	r5,r20
  803c04:	900d883a 	mov	r6,r18
  803c08:	e009883a 	mov	r4,fp
	  j = cmp (b, mlo);
  803c0c:	1023883a 	mov	r17,r2
	  delta = diff (ptr, S, mhi);
  803c10:	08074c40 	call	8074c4 <__mdiff>
  803c14:	100b883a 	mov	r5,r2
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  803c18:	10800317 	ldw	r2,12(r2)
	  dig = quorem (b, S) + '0';
  803c1c:	bd400c04 	addi	r21,r23,48
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  803c20:	103fc526 	beq	r2,zero,803b38 <_dtoa_r+0xe28>
	  Bfree (ptr, delta);
  803c24:	e009883a 	mov	r4,fp
  803c28:	08068480 	call	806848 <_Bfree>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
  803c2c:	00800044 	movi	r2,1
  803c30:	003fcc06 	br	803b64 <_dtoa_r+0xe54>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
  803c34:	080686c0 	call	80686c <__multadd>
  803c38:	1021883a 	mov	r16,r2
  803c3c:	1025883a 	mov	r18,r2
  803c40:	003fe706 	br	803be0 <_dtoa_r+0xed0>
  if (ilim <= 0 && mode > 2)
  803c44:	d8800317 	ldw	r2,12(sp)
  803c48:	108000d0 	cmplti	r2,r2,3
  803c4c:	10003f26 	beq	r2,zero,803d4c <_dtoa_r+0x103c>
  if (leftright)
  803c50:	d8800817 	ldw	r2,32(sp)
  803c54:	103fa81e 	bne	r2,zero,803af8 <_dtoa_r+0xde8>
	*s++ = dig = quorem (b, S) + '0';
  803c58:	d9400717 	ldw	r5,28(sp)
  803c5c:	9809883a 	mov	r4,r19
  mhi = mlo = 0;
  803c60:	0023883a 	mov	r17,zero
	*s++ = dig = quorem (b, S) + '0';
  803c64:	0802af00 	call	802af0 <quorem>
  803c68:	15400c04 	addi	r21,r2,48
  803c6c:	d8800217 	ldw	r2,8(sp)
  803c70:	15c00044 	addi	r23,r2,1
  803c74:	15400005 	stb	r21,0(r2)
  *decpt = k + 1;
  803c78:	d8800517 	ldw	r2,20(sp)
  803c7c:	10800044 	addi	r2,r2,1
  803c80:	d8800515 	stw	r2,20(sp)
  803c84:	003f1206 	br	8038d0 <_dtoa_r+0xbc0>
      if (cmp (b, S) < 0)
  803c88:	d9400717 	ldw	r5,28(sp)
  803c8c:	9809883a 	mov	r4,r19
  803c90:	080746c0 	call	80746c <__mcmp>
  803c94:	103eef0e 	bge	r2,zero,803854 <_dtoa_r+0xb44>
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  803c98:	980b883a 	mov	r5,r19
  803c9c:	000f883a 	mov	r7,zero
  803ca0:	01800284 	movi	r6,10
  803ca4:	e009883a 	mov	r4,fp
  803ca8:	080686c0 	call	80686c <__multadd>
	  k--;
  803cac:	d8c00517 	ldw	r3,20(sp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
  803cb0:	1027883a 	mov	r19,r2
	  if (leftright)
  803cb4:	d8800817 	ldw	r2,32(sp)
	  k--;
  803cb8:	1cbfffc4 	addi	r18,r3,-1
	  if (leftright)
  803cbc:	103f841e 	bne	r2,zero,803ad0 <_dtoa_r+0xdc0>
  if (ilim <= 0 && mode > 2)
  803cc0:	d8800b17 	ldw	r2,44(sp)
  803cc4:	0081ca0e 	bge	zero,r2,8043f0 <_dtoa_r+0x16e0>
  803cc8:	d8800415 	stw	r2,16(sp)
  803ccc:	003ee806 	br	803870 <_dtoa_r+0xb60>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  803cd0:	00802074 	movhi	r2,129
  803cd4:	1007883a 	mov	r3,r2
  803cd8:	18c5a704 	addi	r3,r3,5788
	  s[3] ? s + 8 :
  803cdc:	00802074 	movhi	r2,129
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  803ce0:	d8c00215 	stw	r3,8(sp)
	  s[3] ? s + 8 :
  803ce4:	1085a7c4 	addi	r2,r2,5791
  803ce8:	003de906 	br	803490 <_dtoa_r+0x780>
  switch (mode)
  803cec:	00800044 	movi	r2,1
  803cf0:	d8800815 	stw	r2,32(sp)
  803cf4:	003f3a06 	br	8039e0 <_dtoa_r+0xcd0>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  803cf8:	d8800117 	ldw	r2,4(sp)
  803cfc:	103eba1e 	bne	r2,zero,8037e8 <_dtoa_r+0xad8>
  803d00:	00800434 	movhi	r2,16
  803d04:	10bfffc4 	addi	r2,r2,-1
  803d08:	8884703a 	and	r2,r17,r2
  803d0c:	103eb61e 	bne	r2,zero,8037e8 <_dtoa_r+0xad8>
	  && word0 (d) & Exp_mask
  803d10:	8c5ffc2c 	andhi	r17,r17,32752
  803d14:	883eb426 	beq	r17,zero,8037e8 <_dtoa_r+0xad8>
	  b2 += Log2P;
  803d18:	d8800617 	ldw	r2,24(sp)
	  s2 += Log2P;
  803d1c:	bdc00044 	addi	r23,r23,1
	  spec_case = 1;
  803d20:	04400044 	movi	r17,1
	  b2 += Log2P;
  803d24:	10800044 	addi	r2,r2,1
  803d28:	d8800615 	stw	r2,24(sp)
	  spec_case = 1;
  803d2c:	003eaf06 	br	8037ec <_dtoa_r+0xadc>
	ndigits = 1;
  803d30:	00800044 	movi	r2,1
  803d34:	d8800b15 	stw	r2,44(sp)
  803d38:	d8802415 	stw	r2,144(sp)
  803d3c:	003f2106 	br	8039c4 <_dtoa_r+0xcb4>
  if (ilim <= 0 && mode > 2)
  803d40:	d8800b17 	ldw	r2,44(sp)
	  k--;
  803d44:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  803d48:	d8800415 	stw	r2,16(sp)
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
  803d4c:	d8800417 	ldw	r2,16(sp)
  803d50:	103e051e 	bne	r2,zero,803568 <_dtoa_r+0x858>
  803d54:	d9400717 	ldw	r5,28(sp)
  803d58:	e009883a 	mov	r4,fp
  803d5c:	000f883a 	mov	r7,zero
  803d60:	01800144 	movi	r6,5
  803d64:	080686c0 	call	80686c <__multadd>
  803d68:	100b883a 	mov	r5,r2
  803d6c:	9809883a 	mov	r4,r19
  803d70:	d8800715 	stw	r2,28(sp)
  803d74:	080746c0 	call	80746c <__mcmp>
  803d78:	00bdfb0e 	bge	zero,r2,803568 <_dtoa_r+0x858>
      *s++ = '1';
  803d7c:	d8c00217 	ldw	r3,8(sp)
  803d80:	00800c44 	movi	r2,49
  803d84:	18800005 	stb	r2,0(r3)
      k++;
  803d88:	d8800517 	ldw	r2,20(sp)
      *s++ = '1';
  803d8c:	1d000044 	addi	r20,r3,1
      k++;
  803d90:	14400044 	addi	r17,r2,1
  Bfree (ptr, S);
  803d94:	d9400717 	ldw	r5,28(sp)
  803d98:	e009883a 	mov	r4,fp
  803d9c:	08068480 	call	806848 <_Bfree>
  *decpt = k + 1;
  803da0:	88800044 	addi	r2,r17,1
  803da4:	d8800515 	stw	r2,20(sp)
  if (mhi)
  803da8:	803ee81e 	bne	r16,zero,80394c <_dtoa_r+0xc3c>
  803dac:	003eea06 	br	803958 <_dtoa_r+0xc48>
      i = m2 < s2 ? m2 : s2;
  803db0:	b805883a 	mov	r2,r23
  803db4:	003e6906 	br	80375c <_dtoa_r+0xa4c>
	mhi = lshift (ptr, mhi, m2);
  803db8:	800b883a 	mov	r5,r16
  803dbc:	a80d883a 	mov	r6,r21
  803dc0:	e009883a 	mov	r4,fp
  803dc4:	08072740 	call	807274 <__lshift>
  803dc8:	1021883a 	mov	r16,r2
  803dcc:	003f4b06 	br	803afc <_dtoa_r+0xdec>
	    m5 -= j;
  803dd0:	1529c83a 	sub	r20,r2,r20
  803dd4:	003e5206 	br	803720 <_dtoa_r+0xa10>
  803dd8:	dc000117 	ldw	r16,4(sp)
  803ddc:	dc400a15 	stw	r17,40(sp)
      ieps = 2;			/* conservative */
  803de0:	05000084 	movi	r20,2
  803de4:	003cc206 	br	8030f0 <_dtoa_r+0x3e0>
	*s++ = dig = quorem (b, S) + '0';
  803de8:	05c00044 	movi	r23,1
  803dec:	003eb506 	br	8038c4 <_dtoa_r+0xbb4>
  switch (mode)
  803df0:	00800044 	movi	r2,1
  803df4:	d8800815 	stw	r2,32(sp)
  803df8:	003c8906 	br	803020 <_dtoa_r+0x310>
  if ((j > 0) || ((j == 0) && (dig & 1)))
  803dfc:	1000021e 	bne	r2,zero,803e08 <_dtoa_r+0x10f8>
  803e00:	a8c0004c 	andi	r3,r21,1
  803e04:	183ebb1e 	bne	r3,zero,8038f4 <_dtoa_r+0xbe4>
      while (*--s == '0');
  803e08:	b8bfffc7 	ldb	r2,-1(r23)
  803e0c:	b829883a 	mov	r20,r23
  803e10:	bdffffc4 	addi	r23,r23,-1
  803e14:	10800c20 	cmpeqi	r2,r2,48
  803e18:	103ffb1e 	bne	r2,zero,803e08 <_dtoa_r+0x10f8>
  803e1c:	003ec206 	br	803928 <_dtoa_r+0xc18>
	    *s++ = '1';
  803e20:	d8c00217 	ldw	r3,8(sp)
  803e24:	00800c44 	movi	r2,49
  803e28:	18800005 	stb	r2,0(r3)
  *decpt = k + 1;
  803e2c:	d8800517 	ldw	r2,20(sp)
  803e30:	10800044 	addi	r2,r2,1
  803e34:	d8800515 	stw	r2,20(sp)
	    goto ret;
  803e38:	003ebb06 	br	803928 <_dtoa_r+0xc18>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  803e3c:	d8c00c17 	ldw	r3,48(sp)
  803e40:	18011526 	beq	r3,zero,804298 <_dtoa_r+0x1588>
  m2 = b2;
  803e44:	d8c00617 	ldw	r3,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  803e48:	10810cc4 	addi	r2,r2,1075
      s2 += i;
  803e4c:	b8af883a 	add	r23,r23,r2
  803e50:	1885883a 	add	r2,r3,r2
  803e54:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  803e58:	182b883a 	mov	r21,r3
  803e5c:	d8800615 	stw	r2,24(sp)
  803e60:	003e3606 	br	80373c <_dtoa_r+0xa2c>
      eps.d = ieps * d.d + 7.;
  803e64:	a009883a 	mov	r4,r20
  803e68:	080e9600 	call	80e960 <__floatsidf>
  803e6c:	b00d883a 	mov	r6,r22
  803e70:	a80f883a 	mov	r7,r21
  803e74:	1009883a 	mov	r4,r2
  803e78:	180b883a 	mov	r5,r3
  803e7c:	080d8800 	call	80d880 <__muldf3>
  803e80:	000d883a 	mov	r6,zero
  803e84:	01d00734 	movhi	r7,16412
  803e88:	1009883a 	mov	r4,r2
  803e8c:	180b883a 	mov	r5,r3
  803e90:	080c4100 	call	80c410 <__adddf3>
  803e94:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  803e98:	00bf3034 	movhi	r2,64704
  803e9c:	1885883a 	add	r2,r3,r2
  803ea0:	d8800f15 	stw	r2,60(sp)
	  d.d -= 5.;
  803ea4:	b009883a 	mov	r4,r22
  803ea8:	a80b883a 	mov	r5,r21
  803eac:	000d883a 	mov	r6,zero
  803eb0:	01d00534 	movhi	r7,16404
  803eb4:	080e02c0 	call	80e02c <__subdf3>
	  if (d.d > eps.d)
  803eb8:	dd800d17 	ldw	r22,52(sp)
  803ebc:	dd400f17 	ldw	r21,60(sp)
  803ec0:	1009883a 	mov	r4,r2
  803ec4:	b00d883a 	mov	r6,r22
  803ec8:	a80f883a 	mov	r7,r21
  803ecc:	180b883a 	mov	r5,r3
	  d.d -= 5.;
  803ed0:	1029883a 	mov	r20,r2
  803ed4:	1821883a 	mov	r16,r3
	  if (d.d > eps.d)
  803ed8:	080d6b00 	call	80d6b0 <__gedf2>
  803edc:	00812916 	blt	zero,r2,804384 <_dtoa_r+0x1674>
	  if (d.d < -eps.d)
  803ee0:	a9e0003c 	xorhi	r7,r21,32768
  803ee4:	b00d883a 	mov	r6,r22
  803ee8:	a009883a 	mov	r4,r20
  803eec:	800b883a 	mov	r5,r16
  803ef0:	080d7980 	call	80d798 <__ledf2>
  803ef4:	103d7e0e 	bge	r2,zero,8034f0 <_dtoa_r+0x7e0>
	  S = mhi = 0;
  803ef8:	d8000715 	stw	zero,28(sp)
  803efc:	0021883a 	mov	r16,zero
  803f00:	003d9906 	br	803568 <_dtoa_r+0x858>
	b = pow5mult (ptr, b, b5);
  803f04:	d9800717 	ldw	r6,28(sp)
  803f08:	980b883a 	mov	r5,r19
  803f0c:	e009883a 	mov	r4,fp
  803f10:	08070e00 	call	8070e0 <__pow5mult>
  803f14:	1027883a 	mov	r19,r2
  803f18:	003e2b06 	br	8037c8 <_dtoa_r+0xab8>
      else if ((j1 = -k) != 0)
  803f1c:	2000e826 	beq	r4,zero,8042c0 <_dtoa_r+0x15b0>
  803f20:	0121c83a 	sub	r16,zero,r4
	  d.d *= tens[j1 & 0xf];
  803f24:	808003cc 	andi	r2,r16,15
  803f28:	100690fa 	slli	r3,r2,3
  803f2c:	00802074 	movhi	r2,129
  803f30:	1085ff04 	addi	r2,r2,6140
  803f34:	10c5883a 	add	r2,r2,r3
  803f38:	11800017 	ldw	r6,0(r2)
  803f3c:	11c00117 	ldw	r7,4(r2)
  803f40:	d9000117 	ldw	r4,4(sp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
  803f44:	8021d13a 	srai	r16,r16,4
	  d.d *= tens[j1 & 0xf];
  803f48:	880b883a 	mov	r5,r17
  803f4c:	080d8800 	call	80d880 <__muldf3>
  803f50:	102d883a 	mov	r22,r2
  803f54:	182b883a 	mov	r21,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  803f58:	80013426 	beq	r16,zero,80442c <_dtoa_r+0x171c>
  803f5c:	02002074 	movhi	r8,129
  803f60:	4205f504 	addi	r8,r8,6100
      ieps = 2;			/* conservative */
  803f64:	882d883a 	mov	r22,r17
  803f68:	05000084 	movi	r20,2
  803f6c:	1009883a 	mov	r4,r2
  803f70:	180b883a 	mov	r5,r3
  803f74:	4023883a 	mov	r17,r8
	    if (j & 1)
  803f78:	8180004c 	andi	r6,r16,1
  803f7c:	30000626 	beq	r6,zero,803f98 <_dtoa_r+0x1288>
		d.d *= bigtens[i];
  803f80:	89800017 	ldw	r6,0(r17)
  803f84:	89c00117 	ldw	r7,4(r17)
		ieps++;
  803f88:	a5000044 	addi	r20,r20,1
		d.d *= bigtens[i];
  803f8c:	080d8800 	call	80d880 <__muldf3>
  803f90:	1009883a 	mov	r4,r2
  803f94:	180b883a 	mov	r5,r3
	  for (j = j1 >> 4; j; j >>= 1, i++)
  803f98:	8021d07a 	srai	r16,r16,1
  803f9c:	8c400204 	addi	r17,r17,8
  803fa0:	803ff51e 	bne	r16,zero,803f78 <_dtoa_r+0x1268>
  803fa4:	b023883a 	mov	r17,r22
  803fa8:	282b883a 	mov	r21,r5
  803fac:	202d883a 	mov	r22,r4
  803fb0:	003c6806 	br	803154 <_dtoa_r+0x444>
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
  803fb4:	d8800117 	ldw	r2,4(sp)
  803fb8:	103eba1e 	bne	r2,zero,803aa4 <_dtoa_r+0xd94>
  803fbc:	00800434 	movhi	r2,16
  803fc0:	10bfffc4 	addi	r2,r2,-1
  803fc4:	8884703a 	and	r2,r17,r2
  803fc8:	103f5126 	beq	r2,zero,803d10 <_dtoa_r+0x1000>
  803fcc:	003eb506 	br	803aa4 <_dtoa_r+0xd94>
  *decpt = k + 1;
  803fd0:	d8c00517 	ldw	r3,20(sp)
  803fd4:	b5000044 	addi	r20,r22,1
  803fd8:	18c00044 	addi	r3,r3,1
  803fdc:	d8c00515 	stw	r3,20(sp)
	      if (j1 > 0)
  803fe0:	00800c0e 	bge	zero,r2,804014 <_dtoa_r+0x1304>
		  b = lshift (ptr, b, 1);
  803fe4:	980b883a 	mov	r5,r19
  803fe8:	e009883a 	mov	r4,fp
  803fec:	01800044 	movi	r6,1
  803ff0:	08072740 	call	807274 <__lshift>
		  j1 = cmp (b, S);
  803ff4:	d9400717 	ldw	r5,28(sp)
  803ff8:	1009883a 	mov	r4,r2
		  b = lshift (ptr, b, 1);
  803ffc:	1027883a 	mov	r19,r2
		  j1 = cmp (b, S);
  804000:	080746c0 	call	80746c <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  804004:	0080e70e 	bge	zero,r2,8043a4 <_dtoa_r+0x1694>
		      && dig++ == '9')
  804008:	a8c00e60 	cmpeqi	r3,r21,57
  80400c:	1800d61e 	bne	r3,zero,804368 <_dtoa_r+0x1658>
  804010:	bd400c44 	addi	r21,r23,49
	      goto ret;
  804014:	8023883a 	mov	r17,r16
	      *s++ = dig;
  804018:	b5400005 	stb	r21,0(r22)
	      goto ret;
  80401c:	9021883a 	mov	r16,r18
  804020:	003e4106 	br	803928 <_dtoa_r+0xc18>
  804024:	982f883a 	mov	r23,r19
  804028:	df000617 	ldw	fp,24(sp)
  80402c:	dcc00117 	ldw	r19,4(sp)
  804030:	202b883a 	mov	r21,r4
  804034:	182d883a 	mov	r22,r3
	      d.d += d.d;
  804038:	a80d883a 	mov	r6,r21
  80403c:	a809883a 	mov	r4,r21
  804040:	b00f883a 	mov	r7,r22
  804044:	b00b883a 	mov	r5,r22
  804048:	da000115 	stw	r8,4(sp)
  80404c:	080c4100 	call	80c410 <__adddf3>
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  804050:	dd400317 	ldw	r21,12(sp)
  804054:	180b883a 	mov	r5,r3
  804058:	900d883a 	mov	r6,r18
  80405c:	a80f883a 	mov	r7,r21
  804060:	1009883a 	mov	r4,r2
	      d.d += d.d;
  804064:	1821883a 	mov	r16,r3
  804068:	1023883a 	mov	r17,r2
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  80406c:	080d6b00 	call	80d6b0 <__gedf2>
			k++;
  804070:	d8c00517 	ldw	r3,20(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  804074:	da000117 	ldw	r8,4(sp)
			k++;
  804078:	18c00044 	addi	r3,r3,1
  80407c:	d8c00515 	stw	r3,20(sp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
  804080:	00800916 	blt	zero,r2,8040a8 <_dtoa_r+0x1398>
  804084:	900d883a 	mov	r6,r18
  804088:	a80f883a 	mov	r7,r21
  80408c:	8809883a 	mov	r4,r17
  804090:	800b883a 	mov	r5,r16
  804094:	080d6300 	call	80d630 <__eqdf2>
  804098:	103e2f1e 	bne	r2,zero,803958 <_dtoa_r+0xc48>
  80409c:	bdc0004c 	andi	r23,r23,1
  8040a0:	da000117 	ldw	r8,4(sp)
  8040a4:	b83e2c26 	beq	r23,zero,803958 <_dtoa_r+0xc48>
  8040a8:	d9000217 	ldw	r4,8(sp)
  8040ac:	003cd506 	br	803404 <_dtoa_r+0x6f4>
	  mhi = eBalloc (ptr, mhi->_k);
  8040b0:	81400117 	ldw	r5,4(r16)
  8040b4:	e009883a 	mov	r4,fp
  8040b8:	08067a40 	call	8067a4 <_Balloc>
  8040bc:	1023883a 	mov	r17,r2
  8040c0:	1000e126 	beq	r2,zero,804448 <_dtoa_r+0x1738>
	  Bcopy (mhi, mlo);
  8040c4:	81800417 	ldw	r6,16(r16)
  8040c8:	81400304 	addi	r5,r16,12
  8040cc:	11000304 	addi	r4,r2,12
  8040d0:	31800084 	addi	r6,r6,2
  8040d4:	300c90ba 	slli	r6,r6,2
  8040d8:	08063540 	call	806354 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
  8040dc:	01800044 	movi	r6,1
  8040e0:	880b883a 	mov	r5,r17
  8040e4:	e009883a 	mov	r4,fp
  8040e8:	08072740 	call	807274 <__lshift>
  8040ec:	1025883a 	mov	r18,r2
  8040f0:	003e8406 	br	803b04 <_dtoa_r+0xdf4>
	    b = pow5mult (ptr, b, j);
  8040f4:	980b883a 	mov	r5,r19
  8040f8:	e009883a 	mov	r4,fp
  8040fc:	08070e00 	call	8070e0 <__pow5mult>
  804100:	1027883a 	mov	r19,r2
  804104:	003db006 	br	8037c8 <_dtoa_r+0xab8>
  804108:	1007883a 	mov	r3,r2
	      m2 -= i;
  80410c:	d8800617 	ldw	r2,24(sp)
  804110:	10ebc83a 	sub	r21,r2,r3
	      i = 0;
  804114:	003d8906 	br	80373c <_dtoa_r+0xa2c>
  *decpt = k + 1;
  804118:	d8c00517 	ldw	r3,20(sp)
	      if (dig == '9')
  80411c:	a8800e58 	cmpnei	r2,r21,57
  804120:	b5000044 	addi	r20,r22,1
  *decpt = k + 1;
  804124:	18c00044 	addi	r3,r3,1
  804128:	d8c00515 	stw	r3,20(sp)
	      if (dig == '9')
  80412c:	10008e26 	beq	r2,zero,804368 <_dtoa_r+0x1658>
	      *s++ = dig + 1;
  804130:	a8c00044 	addi	r3,r21,1
	      goto ret;
  804134:	8023883a 	mov	r17,r16
	      *s++ = dig + 1;
  804138:	b0c00005 	stb	r3,0(r22)
	      goto ret;
  80413c:	9021883a 	mov	r16,r18
  804140:	003df906 	br	803928 <_dtoa_r+0xc18>
  *decpt = k + 1;
  804144:	d8800517 	ldw	r2,20(sp)
  804148:	dd000117 	ldw	r20,4(sp)
  80414c:	8023883a 	mov	r17,r16
  804150:	10800044 	addi	r2,r2,1
  804154:	d8800515 	stw	r2,20(sp)
  804158:	a02f883a 	mov	r23,r20
  80415c:	9021883a 	mov	r16,r18
  804160:	003ddb06 	br	8038d0 <_dtoa_r+0xbc0>
	  eps.d *= tens[ilim - 1];
  804164:	d9000d17 	ldw	r4,52(sp)
  804168:	d9400f17 	ldw	r5,60(sp)
  80416c:	080d8800 	call	80d880 <__muldf3>
	      if (i == ilim)
  804170:	d9800e17 	ldw	r6,56(sp)
	      *s++ = '0' + (int) L;
  804174:	d9400217 	ldw	r5,8(sp)
  804178:	d9001317 	ldw	r4,76(sp)
	  eps.d *= tens[ilim - 1];
  80417c:	d8800d15 	stw	r2,52(sp)
  804180:	d8c00e15 	stw	r3,56(sp)
	      *s++ = '0' + (int) L;
  804184:	29000005 	stb	r4,0(r5)
	      if (i == ilim)
  804188:	31000058 	cmpnei	r4,r6,1
  80418c:	da001117 	ldw	r8,68(sp)
  804190:	29a9883a 	add	r20,r5,r6
  804194:	20009b26 	beq	r4,zero,804404 <_dtoa_r+0x16f4>
  804198:	dc400f15 	stw	r17,60(sp)
  80419c:	d9001017 	ldw	r4,64(sp)
  8041a0:	dc400a17 	ldw	r17,40(sp)
  8041a4:	800b883a 	mov	r5,r16
	  for (i = 1;; i++, d.d *= 10.)
  8041a8:	000d883a 	mov	r6,zero
  8041ac:	01d00934 	movhi	r7,16420
  8041b0:	080d8800 	call	80d880 <__muldf3>
	      L = d.d;
  8041b4:	180b883a 	mov	r5,r3
  8041b8:	1009883a 	mov	r4,r2
	  for (i = 1;; i++, d.d *= 10.)
  8041bc:	1821883a 	mov	r16,r3
  8041c0:	102d883a 	mov	r22,r2
	      L = d.d;
  8041c4:	080e8e00 	call	80e8e0 <__fixdfsi>
	      d.d -= L;
  8041c8:	1009883a 	mov	r4,r2
	      L = d.d;
  8041cc:	102b883a 	mov	r21,r2
	      d.d -= L;
  8041d0:	080e9600 	call	80e960 <__floatsidf>
  8041d4:	b009883a 	mov	r4,r22
  8041d8:	800b883a 	mov	r5,r16
  8041dc:	100d883a 	mov	r6,r2
  8041e0:	180f883a 	mov	r7,r3
	      *s++ = '0' + (int) L;
  8041e4:	ad400c04 	addi	r21,r21,48
  8041e8:	8c400044 	addi	r17,r17,1
	      d.d -= L;
  8041ec:	080e02c0 	call	80e02c <__subdf3>
	      *s++ = '0' + (int) L;
  8041f0:	8d7fffc5 	stb	r21,-1(r17)
	      d.d -= L;
  8041f4:	1009883a 	mov	r4,r2
  8041f8:	180b883a 	mov	r5,r3
	      if (i == ilim)
  8041fc:	8d3fea1e 	bne	r17,r20,8041a8 <_dtoa_r+0x1498>
  804200:	dc400f17 	ldw	r17,60(sp)
  804204:	a811883a 	mov	r8,r21
  804208:	d8801015 	stw	r2,64(sp)
  80420c:	1821883a 	mov	r16,r3
		  if (d.d > 0.5 + eps.d)
  804210:	d9000d17 	ldw	r4,52(sp)
  804214:	d9400e17 	ldw	r5,56(sp)
  804218:	000d883a 	mov	r6,zero
  80421c:	01cff834 	movhi	r7,16352
  804220:	da000a15 	stw	r8,40(sp)
  804224:	080c4100 	call	80c410 <__adddf3>
  804228:	d9801017 	ldw	r6,64(sp)
  80422c:	800f883a 	mov	r7,r16
  804230:	1009883a 	mov	r4,r2
  804234:	180b883a 	mov	r5,r3
  804238:	080d7980 	call	80d798 <__ledf2>
  80423c:	da000a17 	ldw	r8,40(sp)
  804240:	10005316 	blt	r2,zero,804390 <_dtoa_r+0x1680>
		  else if (d.d < 0.5 - eps.d)
  804244:	d9800d17 	ldw	r6,52(sp)
  804248:	d9c00e17 	ldw	r7,56(sp)
  80424c:	0009883a 	mov	r4,zero
  804250:	014ff834 	movhi	r5,16352
  804254:	080e02c0 	call	80e02c <__subdf3>
  804258:	d9801017 	ldw	r6,64(sp)
  80425c:	800f883a 	mov	r7,r16
  804260:	1009883a 	mov	r4,r2
  804264:	180b883a 	mov	r5,r3
  804268:	080d6b00 	call	80d6b0 <__gedf2>
  80426c:	00bca00e 	bge	zero,r2,8034f0 <_dtoa_r+0x7e0>
		      while (*--s == '0');
  804270:	a0bfffc7 	ldb	r2,-1(r20)
  804274:	a007883a 	mov	r3,r20
  804278:	a53fffc4 	addi	r20,r20,-1
  80427c:	10800c20 	cmpeqi	r2,r2,48
  804280:	103ffb1e 	bne	r2,zero,804270 <_dtoa_r+0x1560>
  *decpt = k + 1;
  804284:	d8801417 	ldw	r2,80(sp)
  804288:	1829883a 	mov	r20,r3
  80428c:	10800044 	addi	r2,r2,1
  804290:	d8800515 	stw	r2,20(sp)
  804294:	003db006 	br	803958 <_dtoa_r+0xc48>
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  804298:	d8c01817 	ldw	r3,96(sp)
  m2 = b2;
  80429c:	d9000617 	ldw	r4,24(sp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
  8042a0:	00800d84 	movi	r2,54
  8042a4:	10c5c83a 	sub	r2,r2,r3
      s2 += i;
  8042a8:	b8af883a 	add	r23,r23,r2
  8042ac:	2085883a 	add	r2,r4,r2
  8042b0:	dd000717 	ldw	r20,28(sp)
  m2 = b2;
  8042b4:	202b883a 	mov	r21,r4
      s2 += i;
  8042b8:	d8800615 	stw	r2,24(sp)
  8042bc:	003d1f06 	br	80373c <_dtoa_r+0xa2c>
  8042c0:	dd800117 	ldw	r22,4(sp)
  8042c4:	882b883a 	mov	r21,r17
      ieps = 2;			/* conservative */
  8042c8:	05000084 	movi	r20,2
  8042cc:	003ba106 	br	803154 <_dtoa_r+0x444>
      if (k_check && d.d < 1. && ilim > 0)
  8042d0:	d8800417 	ldw	r2,16(sp)
  8042d4:	103ee326 	beq	r2,zero,803e64 <_dtoa_r+0x1154>
	  if (ilim1 <= 0)
  8042d8:	dc000b17 	ldw	r16,44(sp)
  8042dc:	043c840e 	bge	zero,r16,8034f0 <_dtoa_r+0x7e0>
	  d.d *= 10.;
  8042e0:	a80b883a 	mov	r5,r21
  8042e4:	b009883a 	mov	r4,r22
  8042e8:	000d883a 	mov	r6,zero
  8042ec:	01d00934 	movhi	r7,16420
  8042f0:	080d8800 	call	80d880 <__muldf3>
      eps.d = ieps * d.d + 7.;
  8042f4:	a1000044 	addi	r4,r20,1
	  d.d *= 10.;
  8042f8:	102d883a 	mov	r22,r2
  8042fc:	182b883a 	mov	r21,r3
      eps.d = ieps * d.d + 7.;
  804300:	080e9600 	call	80e960 <__floatsidf>
  804304:	b00d883a 	mov	r6,r22
  804308:	a80f883a 	mov	r7,r21
  80430c:	1009883a 	mov	r4,r2
  804310:	180b883a 	mov	r5,r3
  804314:	080d8800 	call	80d880 <__muldf3>
  804318:	1009883a 	mov	r4,r2
  80431c:	000d883a 	mov	r6,zero
  804320:	01d00734 	movhi	r7,16412
  804324:	180b883a 	mov	r5,r3
  804328:	080c4100 	call	80c410 <__adddf3>
	  k--;
  80432c:	d9000517 	ldw	r4,20(sp)
      eps.d = ieps * d.d + 7.;
  804330:	d8800d15 	stw	r2,52(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  804334:	00bf3034 	movhi	r2,64704
  804338:	1885883a 	add	r2,r3,r2
	  k--;
  80433c:	213fffc4 	addi	r4,r4,-1
      word0 (eps) -= (P - 1) * Exp_msk1;
  804340:	d8800f15 	stw	r2,60(sp)
	  k--;
  804344:	d9001415 	stw	r4,80(sp)
      word0 (eps) -= (P - 1) * Exp_msk1;
  804348:	dc000e15 	stw	r16,56(sp)
  80434c:	8005883a 	mov	r2,r16
  804350:	003b9e06 	br	8031cc <_dtoa_r+0x4bc>
  *decpt = k + 1;
  804354:	d8800517 	ldw	r2,20(sp)
			break;
  804358:	02000c44 	movi	r8,49
  *decpt = k + 1;
  80435c:	10800044 	addi	r2,r2,1
  804360:	d8800515 	stw	r2,20(sp)
			break;
  804364:	003c2e06 	br	803420 <_dtoa_r+0x710>
		  *s++ = '9';
  804368:	00800e44 	movi	r2,57
		  goto roundoff;
  80436c:	8023883a 	mov	r17,r16
  804370:	d9000217 	ldw	r4,8(sp)
		  *s++ = '9';
  804374:	b0800005 	stb	r2,0(r22)
  804378:	a02f883a 	mov	r23,r20
		  goto roundoff;
  80437c:	9021883a 	mov	r16,r18
  804380:	003d5f06 	br	803900 <_dtoa_r+0xbf0>
	  S = mhi = 0;
  804384:	d8000715 	stw	zero,28(sp)
  804388:	0021883a 	mov	r16,zero
  80438c:	003e7b06 	br	803d7c <_dtoa_r+0x106c>
			k++;
  804390:	d8801417 	ldw	r2,80(sp)
  804394:	d9000217 	ldw	r4,8(sp)
  804398:	10800044 	addi	r2,r2,1
  80439c:	d8800515 	stw	r2,20(sp)
  8043a0:	003c1806 	br	803404 <_dtoa_r+0x6f4>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
  8043a4:	103f1b1e 	bne	r2,zero,804014 <_dtoa_r+0x1304>
  8043a8:	a880004c 	andi	r2,r21,1
  8043ac:	103f161e 	bne	r2,zero,804008 <_dtoa_r+0x12f8>
  8043b0:	003f1806 	br	804014 <_dtoa_r+0x1304>
  *decpt = k + 1;
  8043b4:	d8801417 	ldw	r2,80(sp)
  8043b8:	dcc01117 	ldw	r19,68(sp)
  8043bc:	df001217 	ldw	fp,72(sp)
  8043c0:	10800044 	addi	r2,r2,1
  8043c4:	d8800515 	stw	r2,20(sp)
	      *s++ = '0' + (int) L;
  8043c8:	1829883a 	mov	r20,r3
  8043cc:	003d6206 	br	803958 <_dtoa_r+0xc48>
  *decpt = k + 1;
  8043d0:	d8c00517 	ldw	r3,20(sp)
	      if (dig == '9')
  8043d4:	a8800e60 	cmpeqi	r2,r21,57
	      *s++ = dig;
  8043d8:	b5000044 	addi	r20,r22,1
  *decpt = k + 1;
  8043dc:	18c00044 	addi	r3,r3,1
  8043e0:	d8c00515 	stw	r3,20(sp)
	      if (dig == '9')
  8043e4:	103fe01e 	bne	r2,zero,804368 <_dtoa_r+0x1658>
	      if (j > 0)
  8043e8:	047f0916 	blt	zero,r17,804010 <_dtoa_r+0x1300>
  8043ec:	003f0906 	br	804014 <_dtoa_r+0x1304>
  if (ilim <= 0 && mode > 2)
  8043f0:	d8800317 	ldw	r2,12(sp)
  8043f4:	108000c8 	cmpgei	r2,r2,3
  8043f8:	103e511e 	bne	r2,zero,803d40 <_dtoa_r+0x1030>
	  k--;
  8043fc:	dc800515 	stw	r18,20(sp)
  804400:	003e1506 	br	803c58 <_dtoa_r+0xf48>
	      *s++ = '0' + (int) L;
  804404:	dd000a17 	ldw	r20,40(sp)
  804408:	003f8106 	br	804210 <_dtoa_r+0x1500>
  if (ilim <= 0 && mode > 2)
  80440c:	d8800317 	ldw	r2,12(sp)
  804410:	108000c8 	cmpgei	r2,r2,3
  804414:	103e4a1e 	bne	r2,zero,803d40 <_dtoa_r+0x1030>
  804418:	d8800b17 	ldw	r2,44(sp)
	  k--;
  80441c:	dc800515 	stw	r18,20(sp)
  if (ilim <= 0 && mode > 2)
  804420:	d8800415 	stw	r2,16(sp)
      if (m2 > 0)
  804424:	057db50e 	bge	zero,r21,803afc <_dtoa_r+0xdec>
  804428:	003e6306 	br	803db8 <_dtoa_r+0x10a8>
      ieps = 2;			/* conservative */
  80442c:	05000084 	movi	r20,2
  804430:	003b4806 	br	803154 <_dtoa_r+0x444>
  *decpt = k + 1;
  804434:	d8801417 	ldw	r2,80(sp)
	      *s++ = '0' + (int) L;
  804438:	dd000a17 	ldw	r20,40(sp)
  *decpt = k + 1;
  80443c:	10800044 	addi	r2,r2,1
  804440:	d8800515 	stw	r2,20(sp)
  804444:	003d4406 	br	803958 <_dtoa_r+0xc48>
	  mhi = eBalloc (ptr, mhi->_k);
  804448:	01c02074 	movhi	r7,129
  80444c:	01002074 	movhi	r4,129
  804450:	39c5ab04 	addi	r7,r7,5804
  804454:	000d883a 	mov	r6,zero
  804458:	0140ba84 	movi	r5,746
  80445c:	2105b004 	addi	r4,r4,5824
  804460:	080a2e80 	call	80a2e8 <__assert_func>
  else if (i < 4)
  804464:	18c00120 	cmpeqi	r3,r3,4
  804468:	183cf01e 	bne	r3,zero,80382c <_dtoa_r+0xb1c>
      i += 28;
  80446c:	00c00f04 	movi	r3,60
  804470:	1885c83a 	sub	r2,r3,r2
  804474:	003ce806 	br	803818 <_dtoa_r+0xb08>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  804478:	e0001115 	stw	zero,68(fp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  80447c:	000b883a 	mov	r5,zero
  804480:	e009883a 	mov	r4,fp
  804484:	08067a40 	call	8067a4 <_Balloc>
  804488:	d8800215 	stw	r2,8(sp)
  80448c:	10000e26 	beq	r2,zero,8044c8 <_dtoa_r+0x17b8>
  804490:	d8800217 	ldw	r2,8(sp)
      ndigits = 0;
  804494:	d8002415 	stw	zero,144(sp)
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  804498:	e0801015 	stw	r2,64(fp)
  ilim = ilim1 = -1;
  80449c:	00bfffc4 	movi	r2,-1
  8044a0:	d8800415 	stw	r2,16(sp)
  leftright = 1;
  8044a4:	00800044 	movi	r2,1
  8044a8:	d8800815 	stw	r2,32(sp)
  ilim = ilim1 = -1;
  8044ac:	00bfffc4 	movi	r2,-1
  8044b0:	d8800b15 	stw	r2,44(sp)
  8044b4:	003c0e06 	br	8034f0 <_dtoa_r+0x7e0>
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
  8044b8:	00802074 	movhi	r2,129
  8044bc:	1085a804 	addi	r2,r2,5792
  8044c0:	d8800215 	stw	r2,8(sp)
  8044c4:	003a4406 	br	802dd8 <_dtoa_r+0xc8>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
  8044c8:	01c02074 	movhi	r7,129
  8044cc:	01002074 	movhi	r4,129
  8044d0:	39c5ab04 	addi	r7,r7,5804
  8044d4:	000d883a 	mov	r6,zero
  8044d8:	01406a84 	movi	r5,426
  8044dc:	2105b004 	addi	r4,r4,5824
  8044e0:	080a2e80 	call	80a2e8 <__assert_func>
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
  8044e4:	000b883a 	mov	r5,zero
  8044e8:	003add06 	br	803060 <_dtoa_r+0x350>

008044ec <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  8044ec:	2880030b 	ldhu	r2,12(r5)
{
  8044f0:	defffb04 	addi	sp,sp,-20
  8044f4:	dcc00315 	stw	r19,12(sp)
  8044f8:	dc000015 	stw	r16,0(sp)
  8044fc:	dfc00415 	stw	ra,16(sp)
  804500:	dc800215 	stw	r18,8(sp)
  804504:	dc400115 	stw	r17,4(sp)
  if ((flags & __SWR) == 0)
  804508:	10c0020c 	andi	r3,r2,8
{
  80450c:	2821883a 	mov	r16,r5
  804510:	2027883a 	mov	r19,r4
  if ((flags & __SWR) == 0)
  804514:	18003f1e 	bne	r3,zero,804614 <__sflush_r+0x128>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  804518:	28c00117 	ldw	r3,4(r5)
      fp->_flags |= __SNPT;
  80451c:	10820014 	ori	r2,r2,2048
  804520:	2880030d 	sth	r2,12(r5)
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  804524:	00c0550e 	bge	zero,r3,80467c <__sflush_r+0x190>
  804528:	82000a17 	ldw	r8,40(r16)
  80452c:	40003126 	beq	r8,zero,8045f4 <__sflush_r+0x108>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
  804530:	9c400017 	ldw	r17,0(r19)
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
  804534:	1104000c 	andi	r4,r2,4096
	  ptr->_errno = 0;
  804538:	98000015 	stw	zero,0(r19)
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  80453c:	81400717 	ldw	r5,28(r16)
	  if (fp->_flags & __SOFF)
  804540:	1007883a 	mov	r3,r2
  804544:	2000521e 	bne	r4,zero,804690 <__sflush_r+0x1a4>
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
  804548:	01c00044 	movi	r7,1
  80454c:	000d883a 	mov	r6,zero
  804550:	9809883a 	mov	r4,r19
  804554:	403ee83a 	callr	r8
	      if (curoff == -1L && ptr->_errno != 0)
  804558:	10ffffd8 	cmpnei	r3,r2,-1
  80455c:	18005826 	beq	r3,zero,8046c0 <__sflush_r+0x1d4>
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
  804560:	80c0030b 	ldhu	r3,12(r16)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  804564:	82000a17 	ldw	r8,40(r16)
  804568:	81400717 	ldw	r5,28(r16)
          if (fp->_flags & __SRD)
  80456c:	18c0010c 	andi	r3,r3,4
  804570:	18000626 	beq	r3,zero,80458c <__sflush_r+0xa0>
              curoff -= fp->_r;
  804574:	81000117 	ldw	r4,4(r16)
              if (HASUB (fp))
  804578:	80c00c17 	ldw	r3,48(r16)
              curoff -= fp->_r;
  80457c:	1105c83a 	sub	r2,r2,r4
              if (HASUB (fp))
  804580:	18000226 	beq	r3,zero,80458c <__sflush_r+0xa0>
                curoff -= fp->_ur;
  804584:	80c00f17 	ldw	r3,60(r16)
  804588:	10c5c83a 	sub	r2,r2,r3
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
  80458c:	100d883a 	mov	r6,r2
  804590:	000f883a 	mov	r7,zero
  804594:	9809883a 	mov	r4,r19
  804598:	403ee83a 	callr	r8
	  if (curoff != -1 || ptr->_errno == 0
  80459c:	10ffffd8 	cmpnei	r3,r2,-1
  8045a0:	18003d1e 	bne	r3,zero,804698 <__sflush_r+0x1ac>
  8045a4:	99000017 	ldw	r4,0(r19)
	      if (HASUB (fp))
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
  8045a8:	80c0030b 	ldhu	r3,12(r16)
	  if (curoff != -1 || ptr->_errno == 0
  8045ac:	20004e26 	beq	r4,zero,8046e8 <__sflush_r+0x1fc>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  8045b0:	21400760 	cmpeqi	r5,r4,29
  8045b4:	2800021e 	bne	r5,zero,8045c0 <__sflush_r+0xd4>
  8045b8:	210005a0 	cmpeqi	r4,r4,22
  8045bc:	20002c26 	beq	r4,zero,804670 <__sflush_r+0x184>
	      fp->_p = fp->_bf._base;
  8045c0:	80800417 	ldw	r2,16(r16)
	      fp->_flags &= ~__SNPT;
  8045c4:	18fdffcc 	andi	r3,r3,63487
  8045c8:	80c0030d 	sth	r3,12(r16)
	      fp->_r = 0;
  8045cc:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  8045d0:	80800015 	stw	r2,0(r16)
	      if (HASUB (fp))
  8045d4:	81400c17 	ldw	r5,48(r16)
	      ptr->_errno = tmp_errno;
  8045d8:	9c400015 	stw	r17,0(r19)
	      if (HASUB (fp))
  8045dc:	28000526 	beq	r5,zero,8045f4 <__sflush_r+0x108>
		FREEUB (ptr, fp);
  8045e0:	80801004 	addi	r2,r16,64
  8045e4:	28800226 	beq	r5,r2,8045f0 <__sflush_r+0x104>
  8045e8:	9809883a 	mov	r4,r19
  8045ec:	0804df80 	call	804df8 <_free_r>
  8045f0:	80000c15 	stw	zero,48(r16)
	      return EOF;
	    }
	}
      return 0;
  8045f4:	0005883a 	mov	r2,zero
	}
      p += t;
      n -= t;
    }
  return 0;
}
  8045f8:	dfc00417 	ldw	ra,16(sp)
  8045fc:	dcc00317 	ldw	r19,12(sp)
  804600:	dc800217 	ldw	r18,8(sp)
  804604:	dc400117 	ldw	r17,4(sp)
  804608:	dc000017 	ldw	r16,0(sp)
  80460c:	dec00504 	addi	sp,sp,20
  804610:	f800283a 	ret
  if ((p = fp->_bf._base) == NULL)
  804614:	2c800417 	ldw	r18,16(r5)
  804618:	903ff626 	beq	r18,zero,8045f4 <__sflush_r+0x108>
  n = fp->_p - p;		/* write this much */
  80461c:	2c400017 	ldw	r17,0(r5)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  804620:	108000cc 	andi	r2,r2,3
  fp->_p = p;
  804624:	2c800015 	stw	r18,0(r5)
  n = fp->_p - p;		/* write this much */
  804628:	8ca3c83a 	sub	r17,r17,r18
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  80462c:	1000161e 	bne	r2,zero,804688 <__sflush_r+0x19c>
  804630:	28800517 	ldw	r2,20(r5)
  804634:	80800215 	stw	r2,8(r16)
  while (n > 0)
  804638:	04400316 	blt	zero,r17,804648 <__sflush_r+0x15c>
  80463c:	003fed06 	br	8045f4 <__sflush_r+0x108>
      p += t;
  804640:	90a5883a 	add	r18,r18,r2
  while (n > 0)
  804644:	047feb0e 	bge	zero,r17,8045f4 <__sflush_r+0x108>
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
  804648:	80800917 	ldw	r2,36(r16)
  80464c:	81400717 	ldw	r5,28(r16)
  804650:	880f883a 	mov	r7,r17
  804654:	900d883a 	mov	r6,r18
  804658:	9809883a 	mov	r4,r19
  80465c:	103ee83a 	callr	r2
      n -= t;
  804660:	88a3c83a 	sub	r17,r17,r2
      if (t <= 0)
  804664:	00bff616 	blt	zero,r2,804640 <__sflush_r+0x154>
          fp->_flags |= __SERR;
  804668:	80c0030b 	ldhu	r3,12(r16)
          return EOF;
  80466c:	00bfffc4 	movi	r2,-1
          fp->_flags |= __SERR;
  804670:	18c01014 	ori	r3,r3,64
  804674:	80c0030d 	sth	r3,12(r16)
          return EOF;
  804678:	003fdf06 	br	8045f8 <__sflush_r+0x10c>
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
  80467c:	28c00f17 	ldw	r3,60(r5)
  804680:	00ffa916 	blt	zero,r3,804528 <__sflush_r+0x3c>
  804684:	003fdb06 	br	8045f4 <__sflush_r+0x108>
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
  804688:	0005883a 	mov	r2,zero
  80468c:	003fe906 	br	804634 <__sflush_r+0x148>
	    curoff = fp->_offset;
  804690:	80801417 	ldw	r2,80(r16)
  804694:	003fb506 	br	80456c <__sflush_r+0x80>
	      fp->_flags &= ~__SNPT;
  804698:	80c0030b 	ldhu	r3,12(r16)
	      fp->_p = fp->_bf._base;
  80469c:	81000417 	ldw	r4,16(r16)
	      fp->_r = 0;
  8046a0:	80000115 	stw	zero,4(r16)
	      fp->_flags &= ~__SNPT;
  8046a4:	197dffcc 	andi	r5,r3,63487
  8046a8:	8140030d 	sth	r5,12(r16)
	      fp->_p = fp->_bf._base;
  8046ac:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  8046b0:	18c4000c 	andi	r3,r3,4096
  8046b4:	183fc726 	beq	r3,zero,8045d4 <__sflush_r+0xe8>
		fp->_offset = curoff;
  8046b8:	80801415 	stw	r2,80(r16)
  8046bc:	003fc506 	br	8045d4 <__sflush_r+0xe8>
	      if (curoff == -1L && ptr->_errno != 0)
  8046c0:	98c00017 	ldw	r3,0(r19)
  8046c4:	183fa626 	beq	r3,zero,804560 <__sflush_r+0x74>
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
  8046c8:	19000760 	cmpeqi	r4,r3,29
  8046cc:	20000e1e 	bne	r4,zero,804708 <__sflush_r+0x21c>
  8046d0:	18c00598 	cmpnei	r3,r3,22
  8046d4:	18000c26 	beq	r3,zero,804708 <__sflush_r+0x21c>
		    fp->_flags |= __SERR;
  8046d8:	80c0030b 	ldhu	r3,12(r16)
  8046dc:	18c01014 	ori	r3,r3,64
  8046e0:	80c0030d 	sth	r3,12(r16)
  8046e4:	003fc406 	br	8045f8 <__sflush_r+0x10c>
	      fp->_p = fp->_bf._base;
  8046e8:	81000417 	ldw	r4,16(r16)
	      fp->_flags &= ~__SNPT;
  8046ec:	197dffcc 	andi	r5,r3,63487
  8046f0:	8140030d 	sth	r5,12(r16)
	      fp->_r = 0;
  8046f4:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
  8046f8:	81000015 	stw	r4,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
  8046fc:	18c4000c 	andi	r3,r3,4096
  804700:	183fb426 	beq	r3,zero,8045d4 <__sflush_r+0xe8>
  804704:	003fec06 	br	8046b8 <__sflush_r+0x1cc>
		      ptr->_errno = tmp_errno;
  804708:	9c400015 	stw	r17,0(r19)
		      result = 0;
  80470c:	0005883a 	mov	r2,zero
		      ptr->_errno = tmp_errno;
  804710:	003fb906 	br	8045f8 <__sflush_r+0x10c>

00804714 <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
  804714:	defffd04 	addi	sp,sp,-12
  804718:	dc000115 	stw	r16,4(sp)
  80471c:	dfc00215 	stw	ra,8(sp)
  804720:	2021883a 	mov	r16,r4
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
  804724:	20000226 	beq	r4,zero,804730 <_fflush_r+0x1c>
  804728:	20800e17 	ldw	r2,56(r4)
  80472c:	10000726 	beq	r2,zero,80474c <_fflush_r+0x38>

  if (!fp->_flags)
  804730:	2880030f 	ldh	r2,12(r5)
  804734:	10000a1e 	bne	r2,zero,804760 <_fflush_r+0x4c>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
  804738:	0005883a 	mov	r2,zero
  80473c:	dfc00217 	ldw	ra,8(sp)
  804740:	dc000117 	ldw	r16,4(sp)
  804744:	dec00304 	addi	sp,sp,12
  804748:	f800283a 	ret
  80474c:	d9400015 	stw	r5,0(sp)
  CHECK_INIT (ptr, fp);
  804750:	0804b400 	call	804b40 <__sinit>
  804754:	d9400017 	ldw	r5,0(sp)
  if (!fp->_flags)
  804758:	2880030f 	ldh	r2,12(r5)
  80475c:	103ff626 	beq	r2,zero,804738 <_fflush_r+0x24>
  ret = __sflush_r (ptr, fp);
  804760:	8009883a 	mov	r4,r16
}
  804764:	dfc00217 	ldw	ra,8(sp)
  804768:	dc000117 	ldw	r16,4(sp)
  80476c:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  804770:	08044ec1 	jmpi	8044ec <__sflush_r>

00804774 <fflush>:
#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
  if (fp == NULL)
  804774:	20001626 	beq	r4,zero,8047d0 <fflush+0x5c>
  804778:	200b883a 	mov	r5,r4
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
  80477c:	d1200917 	ldw	r4,-32732(gp)
  CHECK_INIT (ptr, fp);
  804780:	20000226 	beq	r4,zero,80478c <fflush+0x18>
  804784:	20800e17 	ldw	r2,56(r4)
  804788:	10000526 	beq	r2,zero,8047a0 <fflush+0x2c>
  if (!fp->_flags)
  80478c:	2880030f 	ldh	r2,12(r5)
  804790:	1000021e 	bne	r2,zero,80479c <fflush+0x28>
}
  804794:	0005883a 	mov	r2,zero
  804798:	f800283a 	ret
  ret = __sflush_r (ptr, fp);
  80479c:	08044ec1 	jmpi	8044ec <__sflush_r>
{
  8047a0:	defffd04 	addi	sp,sp,-12
  8047a4:	d9400115 	stw	r5,4(sp)
  CHECK_INIT (ptr, fp);
  8047a8:	d9000015 	stw	r4,0(sp)
{
  8047ac:	dfc00215 	stw	ra,8(sp)
  CHECK_INIT (ptr, fp);
  8047b0:	0804b400 	call	804b40 <__sinit>
  8047b4:	d9400117 	ldw	r5,4(sp)
  8047b8:	d9000017 	ldw	r4,0(sp)
  if (!fp->_flags)
  8047bc:	2880030f 	ldh	r2,12(r5)
  8047c0:	10000726 	beq	r2,zero,8047e0 <fflush+0x6c>
}
  8047c4:	dfc00217 	ldw	ra,8(sp)
  8047c8:	dec00304 	addi	sp,sp,12
  ret = __sflush_r (ptr, fp);
  8047cc:	08044ec1 	jmpi	8044ec <__sflush_r>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
  8047d0:	d1200817 	ldw	r4,-32736(gp)
  8047d4:	01402034 	movhi	r5,128
  8047d8:	2951c504 	addi	r5,r5,18196
  8047dc:	08056741 	jmpi	805674 <_fwalk_reent>
}
  8047e0:	0005883a 	mov	r2,zero
  8047e4:	dfc00217 	ldw	ra,8(sp)
  8047e8:	dec00304 	addi	sp,sp,12
  8047ec:	f800283a 	ret

008047f0 <__fp_lock>:
{
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
}
  8047f0:	0005883a 	mov	r2,zero
  8047f4:	f800283a 	ret

008047f8 <_cleanup_r>:
  (void) _fwalk_reent (ptr, cleanup_func);
  8047f8:	01402074 	movhi	r5,129
  8047fc:	29690804 	addi	r5,r5,-23520
  804800:	08056741 	jmpi	805674 <_fwalk_reent>

00804804 <__fp_unlock>:
  804804:	0005883a 	mov	r2,zero
  804808:	f800283a 	ret

0080480c <__sfmoreglue>:
{
  80480c:	defffc04 	addi	sp,sp,-16
  804810:	dc800215 	stw	r18,8(sp)
  804814:	2825883a 	mov	r18,r5
  804818:	dc000015 	stw	r16,0(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  80481c:	01401a04 	movi	r5,104
{
  804820:	2021883a 	mov	r16,r4
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  804824:	913fffc4 	addi	r4,r18,-1
{
  804828:	dfc00315 	stw	ra,12(sp)
  80482c:	dc400115 	stw	r17,4(sp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  804830:	080c3e80 	call	80c3e8 <__mulsi3>
  804834:	8009883a 	mov	r4,r16
  804838:	11401d04 	addi	r5,r2,116
  80483c:	1023883a 	mov	r17,r2
  804840:	0805a740 	call	805a74 <_malloc_r>
  804844:	1021883a 	mov	r16,r2
  if (g == NULL)
  804848:	10000726 	beq	r2,zero,804868 <__sfmoreglue+0x5c>
  g->glue._iobs = &g->file;
  80484c:	11000304 	addi	r4,r2,12
  g->glue._next = NULL;
  804850:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  804854:	14800115 	stw	r18,4(r2)
  g->glue._iobs = &g->file;
  804858:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  80485c:	89801a04 	addi	r6,r17,104
  804860:	000b883a 	mov	r5,zero
  804864:	08066a40 	call	8066a4 <memset>
}
  804868:	8005883a 	mov	r2,r16
  80486c:	dfc00317 	ldw	ra,12(sp)
  804870:	dc800217 	ldw	r18,8(sp)
  804874:	dc400117 	ldw	r17,4(sp)
  804878:	dc000017 	ldw	r16,0(sp)
  80487c:	dec00404 	addi	sp,sp,16
  804880:	f800283a 	ret

00804884 <__sfp>:
  if (!_GLOBAL_REENT->__sdidinit)
  804884:	d0a00817 	ldw	r2,-32736(gp)
{
  804888:	defffb04 	addi	sp,sp,-20
  80488c:	dc400115 	stw	r17,4(sp)
  if (!_GLOBAL_REENT->__sdidinit)
  804890:	10c00e17 	ldw	r3,56(r2)
{
  804894:	dfc00415 	stw	ra,16(sp)
  804898:	dcc00315 	stw	r19,12(sp)
  80489c:	dc800215 	stw	r18,8(sp)
  8048a0:	dc000015 	stw	r16,0(sp)
  8048a4:	2023883a 	mov	r17,r4
  if (!_GLOBAL_REENT->__sdidinit)
  8048a8:	18003126 	beq	r3,zero,804970 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8048ac:	1100ba17 	ldw	r4,744(r2)
  8048b0:	1140b917 	ldw	r5,740(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
  8048b4:	1400b804 	addi	r16,r2,736
  g->glue._niobs = n;
  8048b8:	04c00104 	movi	r19,4
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8048bc:	297fffc4 	addi	r5,r5,-1
  8048c0:	2800050e 	bge	r5,zero,8048d8 <__sfp+0x54>
  8048c4:	00002406 	br	804958 <__sfp+0xd4>
  8048c8:	297fffc4 	addi	r5,r5,-1
  8048cc:	28bfffd8 	cmpnei	r2,r5,-1
  8048d0:	21001a04 	addi	r4,r4,104
  8048d4:	10002026 	beq	r2,zero,804958 <__sfp+0xd4>
	if (fp->_flags == 0)
  8048d8:	2080030f 	ldh	r2,12(r4)
  8048dc:	103ffa1e 	bne	r2,zero,8048c8 <__sfp+0x44>
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  8048e0:	00bffff4 	movhi	r2,65535
  8048e4:	10800044 	addi	r2,r2,1
  fp->_flags2 = 0;
  8048e8:	20001915 	stw	zero,100(r4)
  fp->_p = NULL;		/* no current pointer */
  8048ec:	20000015 	stw	zero,0(r4)
  fp->_r = 0;
  8048f0:	20000115 	stw	zero,4(r4)
  fp->_w = 0;			/* nothing to read or write */
  8048f4:	20000215 	stw	zero,8(r4)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
  8048f8:	20800315 	stw	r2,12(r4)
  fp->_bf._base = NULL;		/* no buffer */
  8048fc:	20000415 	stw	zero,16(r4)
  fp->_bf._size = 0;
  804900:	20000515 	stw	zero,20(r4)
  fp->_lbfsize = 0;		/* not line buffered */
  804904:	20000615 	stw	zero,24(r4)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
  804908:	20001705 	stb	zero,92(r4)
  80490c:	20001745 	stb	zero,93(r4)
  804910:	20001785 	stb	zero,94(r4)
  804914:	200017c5 	stb	zero,95(r4)
  804918:	20001805 	stb	zero,96(r4)
  80491c:	20001845 	stb	zero,97(r4)
  804920:	20001885 	stb	zero,98(r4)
  804924:	200018c5 	stb	zero,99(r4)
  fp->_ub._base = NULL;		/* no ungetc buffer */
  804928:	20000c15 	stw	zero,48(r4)
  fp->_ub._size = 0;
  80492c:	20000d15 	stw	zero,52(r4)
  fp->_lb._base = NULL;		/* no line buffer */
  804930:	20001115 	stw	zero,68(r4)
  fp->_lb._size = 0;
  804934:	20001215 	stw	zero,72(r4)
}
  804938:	2005883a 	mov	r2,r4
  80493c:	dfc00417 	ldw	ra,16(sp)
  804940:	dcc00317 	ldw	r19,12(sp)
  804944:	dc800217 	ldw	r18,8(sp)
  804948:	dc400117 	ldw	r17,4(sp)
  80494c:	dc000017 	ldw	r16,0(sp)
  804950:	dec00504 	addi	sp,sp,20
  804954:	f800283a 	ret
      if (g->_next == NULL &&
  804958:	80800017 	ldw	r2,0(r16)
  80495c:	10005e26 	beq	r2,zero,804ad8 <__sfp+0x254>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  804960:	11000217 	ldw	r4,8(r2)
  804964:	11400117 	ldw	r5,4(r2)
  804968:	1021883a 	mov	r16,r2
  80496c:	003fd306 	br	8048bc <__sfp+0x38>
  s->__cleanup = _cleanup_r;	/* conservative */
  804970:	01402034 	movhi	r5,128
  stdin_init (s->_stdin);
  804974:	10c00117 	ldw	r3,4(r2)
  s->__cleanup = _cleanup_r;	/* conservative */
  804978:	2951fe04 	addi	r5,r5,18424
  80497c:	11400f15 	stw	r5,60(r2)
  s->__sglue._iobs = &s->__sf[0];
  804980:	1100bb04 	addi	r4,r2,748
  s->__sglue._niobs = 3;
  804984:	014000c4 	movi	r5,3
  804988:	1140b915 	stw	r5,740(r2)
  s->__sglue._iobs = &s->__sf[0];
  80498c:	1100ba15 	stw	r4,744(r2)
  s->__sglue._next = NULL;
  804990:	1000b815 	stw	zero,736(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804994:	18001705 	stb	zero,92(r3)
  804998:	18001745 	stb	zero,93(r3)
  80499c:	18001785 	stb	zero,94(r3)
  8049a0:	180017c5 	stb	zero,95(r3)
  8049a4:	18001805 	stb	zero,96(r3)
  8049a8:	18001845 	stb	zero,97(r3)
  8049ac:	18001885 	stb	zero,98(r3)
  8049b0:	180018c5 	stb	zero,99(r3)
  ptr->_flags = flags;
  8049b4:	01000104 	movi	r4,4
  stdout_init (s->_stdout);
  8049b8:	11400217 	ldw	r5,8(r2)
  ptr->_flags = flags;
  8049bc:	19000315 	stw	r4,12(r3)
  ptr->_read = __sread;
  8049c0:	02002074 	movhi	r8,129
  ptr->_write = __swrite;
  8049c4:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  8049c8:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  8049cc:	01002074 	movhi	r4,129
  ptr->_read = __sread;
  8049d0:	42215e04 	addi	r8,r8,-31368
  ptr->_write = __swrite;
  8049d4:	39e17504 	addi	r7,r7,-31276
  ptr->_seek = __sseek;
  8049d8:	31a19504 	addi	r6,r6,-31148
  ptr->_close = __sclose;
  8049dc:	2121ac04 	addi	r4,r4,-31056
  ptr->_flags = flags;
  8049e0:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  8049e4:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  8049e8:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  8049ec:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  8049f0:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  8049f4:	18000415 	stw	zero,16(r3)
  ptr->_bf._size = 0;
  8049f8:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  8049fc:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  804a00:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  804a04:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  804a08:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  804a0c:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  804a10:	19000b15 	stw	r4,44(r3)
  ptr->_flags = flags;
  804a14:	4a400284 	addi	r9,r9,10
  804a18:	2a400315 	stw	r9,12(r5)
  ptr->_flags2 = 0;
  804a1c:	28001915 	stw	zero,100(r5)
  ptr->_p = 0;
  804a20:	28000015 	stw	zero,0(r5)
  ptr->_r = 0;
  804a24:	28000115 	stw	zero,4(r5)
  ptr->_w = 0;
  804a28:	28000215 	stw	zero,8(r5)
  ptr->_bf._base = 0;
  804a2c:	28000415 	stw	zero,16(r5)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804a30:	28001705 	stb	zero,92(r5)
  804a34:	28001745 	stb	zero,93(r5)
  804a38:	28001785 	stb	zero,94(r5)
  804a3c:	280017c5 	stb	zero,95(r5)
  804a40:	28001805 	stb	zero,96(r5)
  804a44:	28001845 	stb	zero,97(r5)
  804a48:	28001885 	stb	zero,98(r5)
  804a4c:	280018c5 	stb	zero,99(r5)
  stderr_init (s->_stderr);
  804a50:	10c00317 	ldw	r3,12(r2)
  ptr->_flags = flags;
  804a54:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  804a58:	28000515 	stw	zero,20(r5)
  ptr->_lbfsize = 0;
  804a5c:	28000615 	stw	zero,24(r5)
  ptr->_cookie = ptr;
  804a60:	29400715 	stw	r5,28(r5)
  ptr->_read = __sread;
  804a64:	2a000815 	stw	r8,32(r5)
  ptr->_write = __swrite;
  804a68:	29c00915 	stw	r7,36(r5)
  ptr->_seek = __sseek;
  804a6c:	29800a15 	stw	r6,40(r5)
  ptr->_close = __sclose;
  804a70:	29000b15 	stw	r4,44(r5)
  ptr->_flags = flags;
  804a74:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  804a78:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  804a7c:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  804a80:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  804a84:	18000215 	stw	zero,8(r3)
  ptr->_flags = flags;
  804a88:	1a400315 	stw	r9,12(r3)
  ptr->_bf._base = 0;
  804a8c:	18000415 	stw	zero,16(r3)
  ptr->_bf._size = 0;
  804a90:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  804a94:	18000615 	stw	zero,24(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804a98:	18001705 	stb	zero,92(r3)
  804a9c:	18001745 	stb	zero,93(r3)
  804aa0:	18001785 	stb	zero,94(r3)
  804aa4:	180017c5 	stb	zero,95(r3)
  804aa8:	18001805 	stb	zero,96(r3)
  804aac:	18001845 	stb	zero,97(r3)
  804ab0:	18001885 	stb	zero,98(r3)
  804ab4:	180018c5 	stb	zero,99(r3)
  ptr->_cookie = ptr;
  804ab8:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  804abc:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  804ac0:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  804ac4:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  804ac8:	19000b15 	stw	r4,44(r3)
  s->__sdidinit = 1;
  804acc:	00c00044 	movi	r3,1
  804ad0:	10c00e15 	stw	r3,56(r2)
}
  804ad4:	003f7506 	br	8048ac <__sfp+0x28>
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  804ad8:	01406b04 	movi	r5,428
  804adc:	8809883a 	mov	r4,r17
  804ae0:	0805a740 	call	805a74 <_malloc_r>
  804ae4:	1025883a 	mov	r18,r2
  if (g == NULL)
  804ae8:	10000c26 	beq	r2,zero,804b1c <__sfp+0x298>
  g->glue._iobs = &g->file;
  804aec:	11000304 	addi	r4,r2,12
  804af0:	11000215 	stw	r4,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  804af4:	000b883a 	mov	r5,zero
  g->glue._next = NULL;
  804af8:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
  804afc:	14c00115 	stw	r19,4(r2)
  memset (&g->file, 0, n * sizeof (FILE));
  804b00:	01806804 	movi	r6,416
  804b04:	08066a40 	call	8066a4 <memset>
  804b08:	1009883a 	mov	r4,r2
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  804b0c:	84800015 	stw	r18,0(r16)
  804b10:	014000c4 	movi	r5,3
  804b14:	9021883a 	mov	r16,r18
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  804b18:	003f6f06 	br	8048d8 <__sfp+0x54>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
  804b1c:	80000015 	stw	zero,0(r16)
  d->_errno = ENOMEM;
  804b20:	00800304 	movi	r2,12
  804b24:	88800015 	stw	r2,0(r17)
  return NULL;
  804b28:	0009883a 	mov	r4,zero
  804b2c:	003f8206 	br	804938 <__sfp+0xb4>

00804b30 <_cleanup>:
  (void) _fwalk_reent (ptr, cleanup_func);
  804b30:	d1200817 	ldw	r4,-32736(gp)
  804b34:	01402074 	movhi	r5,129
  804b38:	29690804 	addi	r5,r5,-23520
  804b3c:	08056741 	jmpi	805674 <_fwalk_reent>

00804b40 <__sinit>:
  if (s->__sdidinit)
  804b40:	20800e17 	ldw	r2,56(r4)
  804b44:	1000591e 	bne	r2,zero,804cac <__sinit+0x16c>
  s->__cleanup = _cleanup_r;	/* conservative */
  804b48:	00c02034 	movhi	r3,128
  stdin_init (s->_stdin);
  804b4c:	20800117 	ldw	r2,4(r4)
  s->__cleanup = _cleanup_r;	/* conservative */
  804b50:	18d1fe04 	addi	r3,r3,18424
  804b54:	20c00f15 	stw	r3,60(r4)
  s->__sglue._iobs = &s->__sf[0];
  804b58:	2140bb04 	addi	r5,r4,748
  s->__sglue._niobs = 3;
  804b5c:	00c000c4 	movi	r3,3
  804b60:	20c0b915 	stw	r3,740(r4)
  s->__sglue._iobs = &s->__sf[0];
  804b64:	2140ba15 	stw	r5,744(r4)
  s->__sglue._next = NULL;
  804b68:	2000b815 	stw	zero,736(r4)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804b6c:	10001705 	stb	zero,92(r2)
  804b70:	10001745 	stb	zero,93(r2)
  804b74:	10001785 	stb	zero,94(r2)
  804b78:	100017c5 	stb	zero,95(r2)
  804b7c:	10001805 	stb	zero,96(r2)
  804b80:	10001845 	stb	zero,97(r2)
  804b84:	10001885 	stb	zero,98(r2)
  804b88:	100018c5 	stb	zero,99(r2)
  ptr->_flags = flags;
  804b8c:	00c00104 	movi	r3,4
  804b90:	10c00315 	stw	r3,12(r2)
  ptr->_read = __sread;
  804b94:	02002074 	movhi	r8,129
  stdout_init (s->_stdout);
  804b98:	20c00217 	ldw	r3,8(r4)
  ptr->_write = __swrite;
  804b9c:	01c02074 	movhi	r7,129
  ptr->_seek = __sseek;
  804ba0:	01802074 	movhi	r6,129
  ptr->_close = __sclose;
  804ba4:	01402074 	movhi	r5,129
  ptr->_read = __sread;
  804ba8:	42215e04 	addi	r8,r8,-31368
  ptr->_write = __swrite;
  804bac:	39e17504 	addi	r7,r7,-31276
  ptr->_seek = __sseek;
  804bb0:	31a19504 	addi	r6,r6,-31148
  ptr->_close = __sclose;
  804bb4:	2961ac04 	addi	r5,r5,-31056
  ptr->_flags = flags;
  804bb8:	02400074 	movhi	r9,1
  ptr->_flags2 = 0;
  804bbc:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  804bc0:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  804bc4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  804bc8:	10000215 	stw	zero,8(r2)
  ptr->_bf._base = 0;
  804bcc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  804bd0:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  804bd4:	10000615 	stw	zero,24(r2)
  ptr->_cookie = ptr;
  804bd8:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  804bdc:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  804be0:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  804be4:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  804be8:	11400b15 	stw	r5,44(r2)
  ptr->_flags = flags;
  804bec:	4a400284 	addi	r9,r9,10
  804bf0:	1a400315 	stw	r9,12(r3)
  ptr->_flags2 = 0;
  804bf4:	18001915 	stw	zero,100(r3)
  ptr->_p = 0;
  804bf8:	18000015 	stw	zero,0(r3)
  ptr->_r = 0;
  804bfc:	18000115 	stw	zero,4(r3)
  ptr->_w = 0;
  804c00:	18000215 	stw	zero,8(r3)
  ptr->_bf._base = 0;
  804c04:	18000415 	stw	zero,16(r3)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804c08:	18001705 	stb	zero,92(r3)
  804c0c:	18001745 	stb	zero,93(r3)
  804c10:	18001785 	stb	zero,94(r3)
  804c14:	180017c5 	stb	zero,95(r3)
  804c18:	18001805 	stb	zero,96(r3)
  804c1c:	18001845 	stb	zero,97(r3)
  804c20:	18001885 	stb	zero,98(r3)
  804c24:	180018c5 	stb	zero,99(r3)
  stderr_init (s->_stderr);
  804c28:	20800317 	ldw	r2,12(r4)
  ptr->_flags = flags;
  804c2c:	024000b4 	movhi	r9,2
  ptr->_bf._size = 0;
  804c30:	18000515 	stw	zero,20(r3)
  ptr->_lbfsize = 0;
  804c34:	18000615 	stw	zero,24(r3)
  ptr->_cookie = ptr;
  804c38:	18c00715 	stw	r3,28(r3)
  ptr->_read = __sread;
  804c3c:	1a000815 	stw	r8,32(r3)
  ptr->_write = __swrite;
  804c40:	19c00915 	stw	r7,36(r3)
  ptr->_seek = __sseek;
  804c44:	19800a15 	stw	r6,40(r3)
  ptr->_close = __sclose;
  804c48:	19400b15 	stw	r5,44(r3)
  ptr->_flags = flags;
  804c4c:	4a400484 	addi	r9,r9,18
  ptr->_flags2 = 0;
  804c50:	10001915 	stw	zero,100(r2)
  ptr->_p = 0;
  804c54:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
  804c58:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
  804c5c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
  804c60:	12400315 	stw	r9,12(r2)
  ptr->_bf._base = 0;
  804c64:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
  804c68:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
  804c6c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  804c70:	10001705 	stb	zero,92(r2)
  804c74:	10001745 	stb	zero,93(r2)
  804c78:	10001785 	stb	zero,94(r2)
  804c7c:	100017c5 	stb	zero,95(r2)
  804c80:	10001805 	stb	zero,96(r2)
  804c84:	10001845 	stb	zero,97(r2)
  804c88:	10001885 	stb	zero,98(r2)
  804c8c:	100018c5 	stb	zero,99(r2)
  ptr->_cookie = ptr;
  804c90:	10800715 	stw	r2,28(r2)
  ptr->_read = __sread;
  804c94:	12000815 	stw	r8,32(r2)
  ptr->_write = __swrite;
  804c98:	11c00915 	stw	r7,36(r2)
  ptr->_seek = __sseek;
  804c9c:	11800a15 	stw	r6,40(r2)
  ptr->_close = __sclose;
  804ca0:	11400b15 	stw	r5,44(r2)
  s->__sdidinit = 1;
  804ca4:	00800044 	movi	r2,1
  804ca8:	20800e15 	stw	r2,56(r4)
}
  804cac:	f800283a 	ret

00804cb0 <__sfp_lock_acquire>:
}
  804cb0:	f800283a 	ret

00804cb4 <__sfp_lock_release>:
  804cb4:	f800283a 	ret

00804cb8 <__sinit_lock_acquire>:
  804cb8:	f800283a 	ret

00804cbc <__sinit_lock_release>:
  804cbc:	f800283a 	ret

00804cc0 <__fp_lock_all>:
void
__fp_lock_all (void)
{
  __sfp_lock_acquire ();

  (void) _fwalk (_REENT, __fp_lock);
  804cc0:	d1200917 	ldw	r4,-32732(gp)
  804cc4:	01402034 	movhi	r5,128
  804cc8:	2951fc04 	addi	r5,r5,18416
  804ccc:	08055dc1 	jmpi	8055dc <_fwalk>

00804cd0 <__fp_unlock_all>:
}

void
__fp_unlock_all (void)
{
  (void) _fwalk (_REENT, __fp_unlock);
  804cd0:	d1200917 	ldw	r4,-32732(gp)
  804cd4:	01402034 	movhi	r5,128
  804cd8:	29520104 	addi	r5,r5,18436
  804cdc:	08055dc1 	jmpi	8055dc <_fwalk>

00804ce0 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
  804ce0:	defffb04 	addi	sp,sp,-20
  804ce4:	dcc00315 	stw	r19,12(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
  804ce8:	04c02074 	movhi	r19,129
{
  804cec:	dc800215 	stw	r18,8(sp)
  804cf0:	dc400115 	stw	r17,4(sp)
  804cf4:	dc000015 	stw	r16,0(sp)
  804cf8:	dfc00415 	stw	ra,16(sp)
  804cfc:	2821883a 	mov	r16,r5
  top_size = chunksize(top);
  804d00:	9cc85904 	addi	r19,r19,8548
{
  804d04:	2025883a 	mov	r18,r4
  MALLOC_LOCK;
  804d08:	080f2140 	call	80f214 <__malloc_lock>
  top_size = chunksize(top);
  804d0c:	98800217 	ldw	r2,8(r19)
  804d10:	14400117 	ldw	r17,4(r2)
  804d14:	00bfff04 	movi	r2,-4
  804d18:	88a2703a 	and	r17,r17,r2
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
  804d1c:	8c21c83a 	sub	r16,r17,r16
  804d20:	8403fbc4 	addi	r16,r16,4079
  804d24:	8020d33a 	srli	r16,r16,12
  804d28:	843fffc4 	addi	r16,r16,-1
  804d2c:	8020933a 	slli	r16,r16,12

  if (extra < (long)pagesz)  /* Not enough memory to release */
  804d30:	80840008 	cmpgei	r2,r16,4096
  804d34:	10000626 	beq	r2,zero,804d50 <_malloc_trim_r+0x70>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
  804d38:	000b883a 	mov	r5,zero
  804d3c:	9009883a 	mov	r4,r18
  804d40:	08085280 	call	808528 <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
  804d44:	98c00217 	ldw	r3,8(r19)
  804d48:	1c47883a 	add	r3,r3,r17
  804d4c:	10c00a26 	beq	r2,r3,804d78 <_malloc_trim_r+0x98>
    MALLOC_UNLOCK;
  804d50:	9009883a 	mov	r4,r18
  804d54:	080f2380 	call	80f238 <__malloc_unlock>
    return 0;
  804d58:	0005883a 	mov	r2,zero
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
  804d5c:	dfc00417 	ldw	ra,16(sp)
  804d60:	dcc00317 	ldw	r19,12(sp)
  804d64:	dc800217 	ldw	r18,8(sp)
  804d68:	dc400117 	ldw	r17,4(sp)
  804d6c:	dc000017 	ldw	r16,0(sp)
  804d70:	dec00504 	addi	sp,sp,20
  804d74:	f800283a 	ret
      new_brk = (char*)(MORECORE (-extra));
  804d78:	040bc83a 	sub	r5,zero,r16
  804d7c:	9009883a 	mov	r4,r18
  804d80:	08085280 	call	808528 <_sbrk_r>
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
  804d84:	10bfffd8 	cmpnei	r2,r2,-1
  804d88:	10000d26 	beq	r2,zero,804dc0 <_malloc_trim_r+0xe0>
        sbrked_mem -= extra;
  804d8c:	00802074 	movhi	r2,129
  804d90:	10957d17 	ldw	r2,22004(r2)
        set_head(top, (top_size - extra) | PREV_INUSE);
  804d94:	98c00217 	ldw	r3,8(r19)
  804d98:	8c23c83a 	sub	r17,r17,r16
  804d9c:	8c400054 	ori	r17,r17,1
        sbrked_mem -= extra;
  804da0:	1421c83a 	sub	r16,r2,r16
        set_head(top, (top_size - extra) | PREV_INUSE);
  804da4:	1c400115 	stw	r17,4(r3)
        sbrked_mem -= extra;
  804da8:	00802074 	movhi	r2,129
	MALLOC_UNLOCK;
  804dac:	9009883a 	mov	r4,r18
        sbrked_mem -= extra;
  804db0:	14157d15 	stw	r16,22004(r2)
	MALLOC_UNLOCK;
  804db4:	080f2380 	call	80f238 <__malloc_unlock>
        return 1;
  804db8:	00800044 	movi	r2,1
  804dbc:	003fe706 	br	804d5c <_malloc_trim_r+0x7c>
        current_brk = (char*)(MORECORE (0));
  804dc0:	000b883a 	mov	r5,zero
  804dc4:	9009883a 	mov	r4,r18
  804dc8:	08085280 	call	808528 <_sbrk_r>
        top_size = current_brk - (char*)top;
  804dcc:	99000217 	ldw	r4,8(r19)
  804dd0:	1107c83a 	sub	r3,r2,r4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
  804dd4:	19400410 	cmplti	r5,r3,16
  804dd8:	283fdd1e 	bne	r5,zero,804d50 <_malloc_trim_r+0x70>
          sbrked_mem = current_brk - sbrk_base;
  804ddc:	d1600a17 	ldw	r5,-32728(gp)
          set_head(top, top_size | PREV_INUSE);
  804de0:	18c00054 	ori	r3,r3,1
  804de4:	20c00115 	stw	r3,4(r4)
          sbrked_mem = current_brk - sbrk_base;
  804de8:	1145c83a 	sub	r2,r2,r5
  804dec:	01402074 	movhi	r5,129
  804df0:	28957d15 	stw	r2,22004(r5)
          set_head(top, top_size | PREV_INUSE);
  804df4:	003fd606 	br	804d50 <_malloc_trim_r+0x70>

00804df8 <_free_r>:
  if (mem == 0)                              /* free(0) has no effect */
  804df8:	28004f26 	beq	r5,zero,804f38 <_free_r+0x140>
{
  804dfc:	defffd04 	addi	sp,sp,-12
  804e00:	dc400115 	stw	r17,4(sp)
  804e04:	dc000015 	stw	r16,0(sp)
  804e08:	2023883a 	mov	r17,r4
  MALLOC_LOCK;
  804e0c:	2821883a 	mov	r16,r5
{
  804e10:	dfc00215 	stw	ra,8(sp)
  MALLOC_LOCK;
  804e14:	080f2140 	call	80f214 <__malloc_lock>
  hd = p->size;
  804e18:	81ffff17 	ldw	r7,-4(r16)
  sz = hd & ~PREV_INUSE;
  804e1c:	00bfff84 	movi	r2,-2
  p = mem2chunk(mem);
  804e20:	80fffe04 	addi	r3,r16,-8
  sz = hd & ~PREV_INUSE;
  804e24:	3884703a 	and	r2,r7,r2
  if (next == top)                            /* merge with top */
  804e28:	01002074 	movhi	r4,129
  next = chunk_at_offset(p, sz);
  804e2c:	188d883a 	add	r6,r3,r2
  if (next == top)                            /* merge with top */
  804e30:	21085904 	addi	r4,r4,8548
  nextsz = chunksize(next);
  804e34:	31400117 	ldw	r5,4(r6)
  if (next == top)                            /* merge with top */
  804e38:	22000217 	ldw	r8,8(r4)
  nextsz = chunksize(next);
  804e3c:	027fff04 	movi	r9,-4
  804e40:	2a4a703a 	and	r5,r5,r9
  if (next == top)                            /* merge with top */
  804e44:	41806426 	beq	r8,r6,804fd8 <_free_r+0x1e0>
  set_head(next, nextsz);                    /* clear inuse bit */
  804e48:	31400115 	stw	r5,4(r6)
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  804e4c:	39c0004c 	andi	r7,r7,1
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804e50:	3151883a 	add	r8,r6,r5
  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  804e54:	3800281e 	bne	r7,zero,804ef8 <_free_r+0x100>
    prevsz = p->prev_size;
  804e58:	82bffe17 	ldw	r10,-8(r16)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804e5c:	42000117 	ldw	r8,4(r8)
    if (p->fd == last_remainder)             /* keep as last_remainder */
  804e60:	01c02074 	movhi	r7,129
    p = chunk_at_offset(p, -prevsz);
  804e64:	1a87c83a 	sub	r3,r3,r10
    if (p->fd == last_remainder)             /* keep as last_remainder */
  804e68:	1a400217 	ldw	r9,8(r3)
  804e6c:	39c85b04 	addi	r7,r7,8556
    sz += prevsz;
  804e70:	1285883a 	add	r2,r2,r10
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804e74:	4200004c 	andi	r8,r8,1
    if (p->fd == last_remainder)             /* keep as last_remainder */
  804e78:	49c04c26 	beq	r9,r7,804fac <_free_r+0x1b4>
      unlink(p, bck, fwd);
  804e7c:	1a800317 	ldw	r10,12(r3)
  804e80:	4a800315 	stw	r10,12(r9)
  804e84:	52400215 	stw	r9,8(r10)
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804e88:	40006f26 	beq	r8,zero,805048 <_free_r+0x250>
  set_head(p, sz | PREV_INUSE);
  804e8c:	11400054 	ori	r5,r2,1
  804e90:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  804e94:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  804e98:	11408028 	cmpgeui	r5,r2,512
  804e9c:	28002c1e 	bne	r5,zero,804f50 <_free_r+0x158>
  804ea0:	100ad0fa 	srli	r5,r2,3
  804ea4:	100cd17a 	srli	r6,r2,5
  804ea8:	00800044 	movi	r2,1
  804eac:	29400044 	addi	r5,r5,1
  804eb0:	280a90fa 	slli	r5,r5,3
  804eb4:	21c00117 	ldw	r7,4(r4)
  804eb8:	1184983a 	sll	r2,r2,r6
  804ebc:	214b883a 	add	r5,r4,r5
  804ec0:	29800017 	ldw	r6,0(r5)
  804ec4:	11c4b03a 	or	r2,r2,r7
  804ec8:	29fffe04 	addi	r7,r5,-8
  804ecc:	19c00315 	stw	r7,12(r3)
  804ed0:	19800215 	stw	r6,8(r3)
  804ed4:	20800115 	stw	r2,4(r4)
  804ed8:	28c00015 	stw	r3,0(r5)
  804edc:	30c00315 	stw	r3,12(r6)
    MALLOC_UNLOCK;
  804ee0:	8809883a 	mov	r4,r17
}
  804ee4:	dfc00217 	ldw	ra,8(sp)
  804ee8:	dc400117 	ldw	r17,4(sp)
  804eec:	dc000017 	ldw	r16,0(sp)
  804ef0:	dec00304 	addi	sp,sp,12
    MALLOC_UNLOCK;
  804ef4:	080f2381 	jmpi	80f238 <__malloc_unlock>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804ef8:	41c00117 	ldw	r7,4(r8)
  804efc:	39c0004c 	andi	r7,r7,1
  804f00:	38000e1e 	bne	r7,zero,804f3c <_free_r+0x144>
    sz += nextsz;
  804f04:	01c02074 	movhi	r7,129
  804f08:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  804f0c:	39c85b04 	addi	r7,r7,8556
  804f10:	31400217 	ldw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  804f14:	12400054 	ori	r9,r2,1
  set_foot(p, sz);
  804f18:	1891883a 	add	r8,r3,r2
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  804f1c:	29c05026 	beq	r5,r7,805060 <_free_r+0x268>
      unlink(next, bck, fwd);
  804f20:	31800317 	ldw	r6,12(r6)
  804f24:	29800315 	stw	r6,12(r5)
  804f28:	31400215 	stw	r5,8(r6)
  set_head(p, sz | PREV_INUSE);
  804f2c:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  804f30:	40800015 	stw	r2,0(r8)
  if (!islr)
  804f34:	003fd806 	br	804e98 <_free_r+0xa0>
  804f38:	f800283a 	ret
  set_head(p, sz | PREV_INUSE);
  804f3c:	11400054 	ori	r5,r2,1
  804f40:	817fff15 	stw	r5,-4(r16)
  set_foot(p, sz);
  804f44:	30800015 	stw	r2,0(r6)
    frontlink(p, sz, idx, bck, fwd);  
  804f48:	11408028 	cmpgeui	r5,r2,512
  804f4c:	283fd426 	beq	r5,zero,804ea0 <_free_r+0xa8>
  804f50:	100ad27a 	srli	r5,r2,9
  804f54:	29800168 	cmpgeui	r6,r5,5
  804f58:	3000321e 	bne	r6,zero,805024 <_free_r+0x22c>
  804f5c:	100ad1ba 	srli	r5,r2,6
  804f60:	29800e44 	addi	r6,r5,57
  804f64:	300c90fa 	slli	r6,r6,3
  804f68:	29c00e04 	addi	r7,r5,56
  804f6c:	218d883a 	add	r6,r4,r6
  804f70:	31400017 	ldw	r5,0(r6)
  804f74:	31bffe04 	addi	r6,r6,-8
  804f78:	31404026 	beq	r6,r5,80507c <_free_r+0x284>
  804f7c:	01ffff04 	movi	r7,-4
  804f80:	29000117 	ldw	r4,4(r5)
  804f84:	21c8703a 	and	r4,r4,r7
  804f88:	1100022e 	bgeu	r2,r4,804f94 <_free_r+0x19c>
  804f8c:	29400217 	ldw	r5,8(r5)
  804f90:	317ffb1e 	bne	r6,r5,804f80 <_free_r+0x188>
  804f94:	29800317 	ldw	r6,12(r5)
  804f98:	19800315 	stw	r6,12(r3)
  804f9c:	19400215 	stw	r5,8(r3)
  804fa0:	30c00215 	stw	r3,8(r6)
  804fa4:	28c00315 	stw	r3,12(r5)
  804fa8:	003fcd06 	br	804ee0 <_free_r+0xe8>
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  804fac:	40004b1e 	bne	r8,zero,8050dc <_free_r+0x2e4>
      unlink(next, bck, fwd);
  804fb0:	31000317 	ldw	r4,12(r6)
  804fb4:	31800217 	ldw	r6,8(r6)
    sz += nextsz;
  804fb8:	2885883a 	add	r2,r5,r2
  set_head(p, sz | PREV_INUSE);
  804fbc:	11400054 	ori	r5,r2,1
      unlink(next, bck, fwd);
  804fc0:	31000315 	stw	r4,12(r6)
  804fc4:	21800215 	stw	r6,8(r4)
  set_head(p, sz | PREV_INUSE);
  804fc8:	19400115 	stw	r5,4(r3)
  set_foot(p, sz);
  804fcc:	1887883a 	add	r3,r3,r2
  804fd0:	18800015 	stw	r2,0(r3)
  if (!islr)
  804fd4:	003fc206 	br	804ee0 <_free_r+0xe8>
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  804fd8:	39c0004c 	andi	r7,r7,1
    sz += nextsz;
  804fdc:	1145883a 	add	r2,r2,r5
    if (!(hd & PREV_INUSE))                    /* consolidate backward */
  804fe0:	3800071e 	bne	r7,zero,805000 <_free_r+0x208>
      prevsz = p->prev_size;
  804fe4:	81fffe17 	ldw	r7,-8(r16)
      p = chunk_at_offset(p, -prevsz);
  804fe8:	19c7c83a 	sub	r3,r3,r7
      unlink(p, bck, fwd);
  804fec:	19400317 	ldw	r5,12(r3)
  804ff0:	19800217 	ldw	r6,8(r3)
      sz += prevsz;
  804ff4:	11c5883a 	add	r2,r2,r7
      unlink(p, bck, fwd);
  804ff8:	31400315 	stw	r5,12(r6)
  804ffc:	29800215 	stw	r6,8(r5)
    set_head(p, sz | PREV_INUSE);
  805000:	11800054 	ori	r6,r2,1
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  805004:	d1600b17 	ldw	r5,-32724(gp)
    set_head(p, sz | PREV_INUSE);
  805008:	19800115 	stw	r6,4(r3)
    top = p;
  80500c:	20c00215 	stw	r3,8(r4)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
  805010:	117fb336 	bltu	r2,r5,804ee0 <_free_r+0xe8>
      malloc_trim(RCALL top_pad); 
  805014:	d1675717 	ldw	r5,-25252(gp)
  805018:	8809883a 	mov	r4,r17
  80501c:	0804ce00 	call	804ce0 <_malloc_trim_r>
  805020:	003faf06 	br	804ee0 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  805024:	29800568 	cmpgeui	r6,r5,21
  805028:	30000926 	beq	r6,zero,805050 <_free_r+0x258>
  80502c:	29801568 	cmpgeui	r6,r5,85
  805030:	3000191e 	bne	r6,zero,805098 <_free_r+0x2a0>
  805034:	100ad33a 	srli	r5,r2,12
  805038:	29801bc4 	addi	r6,r5,111
  80503c:	300c90fa 	slli	r6,r6,3
  805040:	29c01b84 	addi	r7,r5,110
  805044:	003fc906 	br	804f6c <_free_r+0x174>
    sz += nextsz;
  805048:	1145883a 	add	r2,r2,r5
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
  80504c:	003fb006 	br	804f10 <_free_r+0x118>
    frontlink(p, sz, idx, bck, fwd);  
  805050:	29801704 	addi	r6,r5,92
  805054:	300c90fa 	slli	r6,r6,3
  805058:	29c016c4 	addi	r7,r5,91
  80505c:	003fc306 	br	804f6c <_free_r+0x174>
      link_last_remainder(p);   
  805060:	20c00515 	stw	r3,20(r4)
  805064:	20c00415 	stw	r3,16(r4)
  805068:	19c00315 	stw	r7,12(r3)
  80506c:	19c00215 	stw	r7,8(r3)
  set_head(p, sz | PREV_INUSE);
  805070:	1a400115 	stw	r9,4(r3)
  set_foot(p, sz);
  805074:	40800015 	stw	r2,0(r8)
  if (!islr)
  805078:	003f9906 	br	804ee0 <_free_r+0xe8>
    frontlink(p, sz, idx, bck, fwd);  
  80507c:	380fd0ba 	srai	r7,r7,2
  805080:	00800044 	movi	r2,1
  805084:	22000117 	ldw	r8,4(r4)
  805088:	11ce983a 	sll	r7,r2,r7
  80508c:	3a0eb03a 	or	r7,r7,r8
  805090:	21c00115 	stw	r7,4(r4)
  805094:	003fc006 	br	804f98 <_free_r+0x1a0>
  805098:	29805568 	cmpgeui	r6,r5,341
  80509c:	3000051e 	bne	r6,zero,8050b4 <_free_r+0x2bc>
  8050a0:	100ad3fa 	srli	r5,r2,15
  8050a4:	29801e04 	addi	r6,r5,120
  8050a8:	300c90fa 	slli	r6,r6,3
  8050ac:	29c01dc4 	addi	r7,r5,119
  8050b0:	003fae06 	br	804f6c <_free_r+0x174>
  8050b4:	29415568 	cmpgeui	r5,r5,1365
  8050b8:	2800051e 	bne	r5,zero,8050d0 <_free_r+0x2d8>
  8050bc:	100ad4ba 	srli	r5,r2,18
  8050c0:	29801f44 	addi	r6,r5,125
  8050c4:	300c90fa 	slli	r6,r6,3
  8050c8:	29c01f04 	addi	r7,r5,124
  8050cc:	003fa706 	br	804f6c <_free_r+0x174>
  8050d0:	0180fe04 	movi	r6,1016
  8050d4:	01c01f84 	movi	r7,126
  8050d8:	003fa406 	br	804f6c <_free_r+0x174>
  set_head(p, sz | PREV_INUSE);
  8050dc:	11000054 	ori	r4,r2,1
  8050e0:	19000115 	stw	r4,4(r3)
  set_foot(p, sz);
  8050e4:	30800015 	stw	r2,0(r6)
  if (!islr)
  8050e8:	003f7d06 	br	804ee0 <_free_r+0xe8>

008050ec <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
  8050ec:	30800217 	ldw	r2,8(r6)
  8050f0:	1000a326 	beq	r2,zero,805380 <__sfvwrite_r+0x294>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
  8050f4:	29c0030b 	ldhu	r7,12(r5)
{
  8050f8:	defff304 	addi	sp,sp,-52
  8050fc:	dd800915 	stw	r22,36(sp)
  805100:	dd400815 	stw	r21,32(sp)
  805104:	dc000315 	stw	r16,12(sp)
  805108:	dfc00c15 	stw	ra,48(sp)
  80510c:	df000b15 	stw	fp,44(sp)
  805110:	ddc00a15 	stw	r23,40(sp)
  805114:	dd000715 	stw	r20,28(sp)
  805118:	dcc00615 	stw	r19,24(sp)
  80511c:	dc800515 	stw	r18,20(sp)
  805120:	dc400415 	stw	r17,16(sp)
  if (cantwrite (ptr, fp))
  805124:	3880020c 	andi	r2,r7,8
  805128:	302d883a 	mov	r22,r6
  80512c:	202b883a 	mov	r21,r4
  805130:	2821883a 	mov	r16,r5
  805134:	10002226 	beq	r2,zero,8051c0 <__sfvwrite_r+0xd4>
  805138:	28800417 	ldw	r2,16(r5)
  80513c:	10002026 	beq	r2,zero,8051c0 <__sfvwrite_r+0xd4>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
  805140:	3880008c 	andi	r2,r7,2
  iov = uio->uio_iov;
  805144:	b4400017 	ldw	r17,0(r22)
  if (fp->_flags & __SNBF)
  805148:	10002526 	beq	r2,zero,8051e0 <__sfvwrite_r+0xf4>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
  80514c:	80800917 	ldw	r2,36(r16)
  805150:	81400717 	ldw	r5,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  805154:	05200034 	movhi	r20,32768
  register const char *p = NULL;
  805158:	0027883a 	mov	r19,zero
  len = 0;
  80515c:	0025883a 	mov	r18,zero
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  805160:	a53f0004 	addi	r20,r20,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
  805164:	980d883a 	mov	r6,r19
  805168:	a809883a 	mov	r4,r21
	  GETIOV (;);
  80516c:	90001026 	beq	r18,zero,8051b0 <__sfvwrite_r+0xc4>
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
  805170:	900f883a 	mov	r7,r18
  805174:	a480012e 	bgeu	r20,r18,80517c <__sfvwrite_r+0x90>
  805178:	a00f883a 	mov	r7,r20
	  w = fp->_write (ptr, fp->_cookie, p,
  80517c:	103ee83a 	callr	r2
	  if (w <= 0)
  805180:	00807a0e 	bge	zero,r2,80536c <__sfvwrite_r+0x280>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
  805184:	b1000217 	ldw	r4,8(r22)
	  p += w;
  805188:	98a7883a 	add	r19,r19,r2
	  len -= w;
  80518c:	90a5c83a 	sub	r18,r18,r2
      while ((uio->uio_resid -= w) != 0);
  805190:	2085c83a 	sub	r2,r4,r2
  805194:	b0800215 	stw	r2,8(r22)
  805198:	10006326 	beq	r2,zero,805328 <__sfvwrite_r+0x23c>
	  w = fp->_write (ptr, fp->_cookie, p,
  80519c:	80800917 	ldw	r2,36(r16)
  8051a0:	81400717 	ldw	r5,28(r16)
  8051a4:	980d883a 	mov	r6,r19
  8051a8:	a809883a 	mov	r4,r21
	  GETIOV (;);
  8051ac:	903ff01e 	bne	r18,zero,805170 <__sfvwrite_r+0x84>
  8051b0:	8cc00017 	ldw	r19,0(r17)
  8051b4:	8c800117 	ldw	r18,4(r17)
  8051b8:	8c400204 	addi	r17,r17,8
  8051bc:	003fe906 	br	805164 <__sfvwrite_r+0x78>
  if (cantwrite (ptr, fp))
  8051c0:	800b883a 	mov	r5,r16
  8051c4:	a809883a 	mov	r4,r21
  8051c8:	08029900 	call	802990 <__swsetup_r>
  8051cc:	1001011e 	bne	r2,zero,8055d4 <__sfvwrite_r+0x4e8>
  if (fp->_flags & __SNBF)
  8051d0:	81c0030b 	ldhu	r7,12(r16)
  iov = uio->uio_iov;
  8051d4:	b4400017 	ldw	r17,0(r22)
  if (fp->_flags & __SNBF)
  8051d8:	3880008c 	andi	r2,r7,2
  8051dc:	103fdb1e 	bne	r2,zero,80514c <__sfvwrite_r+0x60>
    }
  else if ((fp->_flags & __SLBF) == 0)
  8051e0:	3880004c 	andi	r2,r7,1
	      nl = memchr ((void *) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
  8051e4:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  8051e8:	82000017 	ldw	r8,0(r16)
  else if ((fp->_flags & __SLBF) == 0)
  8051ec:	1000661e 	bne	r2,zero,805388 <__sfvwrite_r+0x29c>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  8051f0:	00a00034 	movhi	r2,32768
  8051f4:	10bfff84 	addi	r2,r2,-2
  8051f8:	00e00034 	movhi	r3,32768
  8051fc:	d8800015 	stw	r2,0(sp)
  805200:	18bfffc4 	addi	r2,r3,-1
  register const char *p = NULL;
  805204:	0039883a 	mov	fp,zero
  len = 0;
  805208:	0027883a 	mov	r19,zero
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  80520c:	d8800215 	stw	r2,8(sp)
	  GETIOV (;);
  805210:	98004126 	beq	r19,zero,805318 <__sfvwrite_r+0x22c>
	  if (fp->_flags & __SSTR)
  805214:	3880800c 	andi	r2,r7,512
  805218:	10009826 	beq	r2,zero,80547c <__sfvwrite_r+0x390>
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
  80521c:	902f883a 	mov	r23,r18
  805220:	9c80c336 	bltu	r19,r18,805530 <__sfvwrite_r+0x444>
  805224:	3881200c 	andi	r2,r7,1152
  805228:	10002626 	beq	r2,zero,8052c4 <__sfvwrite_r+0x1d8>
		  int newsize = fp->_bf._size * 3 / 2;
  80522c:	81800517 	ldw	r6,20(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  805230:	81400417 	ldw	r5,16(r16)
		  if (newsize < curpos + len + 1)
  805234:	98800044 	addi	r2,r19,1
		  int newsize = fp->_bf._size * 3 / 2;
  805238:	3189883a 	add	r4,r6,r6
  80523c:	2189883a 	add	r4,r4,r6
  805240:	2028d7fa 	srli	r20,r4,31
		  int curpos = (fp->_p - fp->_bf._base);
  805244:	4165c83a 	sub	r18,r8,r5
		  if (newsize < curpos + len + 1)
  805248:	1485883a 	add	r2,r2,r18
		  int newsize = fp->_bf._size * 3 / 2;
  80524c:	a109883a 	add	r4,r20,r4
  805250:	2029d07a 	srai	r20,r4,1
		  if (newsize < curpos + len + 1)
  805254:	a00d883a 	mov	r6,r20
  805258:	a080022e 	bgeu	r20,r2,805264 <__sfvwrite_r+0x178>
		    newsize = curpos + len + 1;
  80525c:	1029883a 	mov	r20,r2
  805260:	100d883a 	mov	r6,r2
		  if (fp->_flags & __SOPT)
  805264:	39c1000c 	andi	r7,r7,1024
  805268:	3800ca26 	beq	r7,zero,805594 <__sfvwrite_r+0x4a8>
		      str = (unsigned char *)_malloc_r (ptr, newsize);
  80526c:	a809883a 	mov	r4,r21
  805270:	300b883a 	mov	r5,r6
  805274:	0805a740 	call	805a74 <_malloc_r>
  805278:	1009883a 	mov	r4,r2
		      if (!str)
  80527c:	1000d126 	beq	r2,zero,8055c4 <__sfvwrite_r+0x4d8>
		      memcpy (str, fp->_bf._base, curpos);
  805280:	81400417 	ldw	r5,16(r16)
  805284:	900d883a 	mov	r6,r18
  805288:	08063540 	call	806354 <memcpy>
  80528c:	1009883a 	mov	r4,r2
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
  805290:	8080030b 	ldhu	r2,12(r16)
  805294:	00fedfc4 	movi	r3,-1153
  805298:	10c4703a 	and	r2,r2,r3
  80529c:	10802014 	ori	r2,r2,128
  8052a0:	8080030d 	sth	r2,12(r16)
		  fp->_p = str + curpos;
  8052a4:	2491883a 	add	r8,r4,r18
		  fp->_w = newsize - curpos;
  8052a8:	a485c83a 	sub	r2,r20,r18
		  fp->_bf._base = str;
  8052ac:	81000415 	stw	r4,16(r16)
		  fp->_p = str + curpos;
  8052b0:	82000015 	stw	r8,0(r16)
		  fp->_bf._size = newsize;
  8052b4:	85000515 	stw	r20,20(r16)
		  w = len;
  8052b8:	9825883a 	mov	r18,r19
		  fp->_w = newsize - curpos;
  8052bc:	80800215 	stw	r2,8(r16)
	      if (len < w)
  8052c0:	982f883a 	mov	r23,r19
	      COPY (w);		/* copy MIN(fp->_w,len), */
  8052c4:	4009883a 	mov	r4,r8
  8052c8:	b80d883a 	mov	r6,r23
  8052cc:	e00b883a 	mov	r5,fp
  8052d0:	08064e00 	call	8064e0 <memmove>
	      fp->_w -= w;
  8052d4:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  8052d8:	80800017 	ldw	r2,0(r16)
  8052dc:	9829883a 	mov	r20,r19
	      fp->_w -= w;
  8052e0:	24a5c83a 	sub	r18,r4,r18
	      fp->_p += w;
  8052e4:	15c5883a 	add	r2,r2,r23
	      fp->_w -= w;
  8052e8:	84800215 	stw	r18,8(r16)
	      fp->_p += w;
  8052ec:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
  8052f0:	0027883a 	mov	r19,zero
      while ((uio->uio_resid -= w) != 0);
  8052f4:	b0800217 	ldw	r2,8(r22)
	  p += w;
  8052f8:	e539883a 	add	fp,fp,r20
      while ((uio->uio_resid -= w) != 0);
  8052fc:	1529c83a 	sub	r20,r2,r20
  805300:	b5000215 	stw	r20,8(r22)
  805304:	a0000826 	beq	r20,zero,805328 <__sfvwrite_r+0x23c>
	  if (fp->_flags & __SSTR)
  805308:	81c0030b 	ldhu	r7,12(r16)
	  w = fp->_w;
  80530c:	84800217 	ldw	r18,8(r16)
		  int curpos = (fp->_p - fp->_bf._base);
  805310:	82000017 	ldw	r8,0(r16)
	  GETIOV (;);
  805314:	983fbf1e 	bne	r19,zero,805214 <__sfvwrite_r+0x128>
  805318:	8f000017 	ldw	fp,0(r17)
  80531c:	8cc00117 	ldw	r19,4(r17)
  805320:	8c400204 	addi	r17,r17,8
  805324:	003fba06 	br	805210 <__sfvwrite_r+0x124>
    return 0;
  805328:	0005883a 	mov	r2,zero
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
  80532c:	dfc00c17 	ldw	ra,48(sp)
  805330:	df000b17 	ldw	fp,44(sp)
  805334:	ddc00a17 	ldw	r23,40(sp)
  805338:	dd800917 	ldw	r22,36(sp)
  80533c:	dd400817 	ldw	r21,32(sp)
  805340:	dd000717 	ldw	r20,28(sp)
  805344:	dcc00617 	ldw	r19,24(sp)
  805348:	dc800517 	ldw	r18,20(sp)
  80534c:	dc400417 	ldw	r17,16(sp)
  805350:	dc000317 	ldw	r16,12(sp)
  805354:	dec00d04 	addi	sp,sp,52
  805358:	f800283a 	ret
	      if (_fflush_r (ptr, fp))
  80535c:	800b883a 	mov	r5,r16
  805360:	a809883a 	mov	r4,r21
  805364:	08047140 	call	804714 <_fflush_r>
  805368:	10002126 	beq	r2,zero,8053f0 <__sfvwrite_r+0x304>
  fp->_flags |= __SERR;
  80536c:	8080030b 	ldhu	r2,12(r16)
  805370:	10801014 	ori	r2,r2,64
  805374:	8080030d 	sth	r2,12(r16)
  return EOF;
  805378:	00bfffc4 	movi	r2,-1
  80537c:	003feb06 	br	80532c <__sfvwrite_r+0x240>
    return 0;
  805380:	0005883a 	mov	r2,zero
}
  805384:	f800283a 	ret
  len = 0;
  805388:	0027883a 	mov	r19,zero
      nldist = 0;
  80538c:	0029883a 	mov	r20,zero
      nlknown = 0;
  805390:	0005883a 	mov	r2,zero
  register const char *p = NULL;
  805394:	002f883a 	mov	r23,zero
	  GETIOV (nlknown = 0);
  805398:	98001e26 	beq	r19,zero,805414 <__sfvwrite_r+0x328>
	  if (!nlknown)
  80539c:	10002126 	beq	r2,zero,805424 <__sfvwrite_r+0x338>
	  s = MIN (len, nldist);
  8053a0:	a005883a 	mov	r2,r20
  8053a4:	9839883a 	mov	fp,r19
  8053a8:	14c0012e 	bgeu	r2,r19,8053b0 <__sfvwrite_r+0x2c4>
  8053ac:	1039883a 	mov	fp,r2
	  if (fp->_p > fp->_bf._base && s > w)
  8053b0:	80800417 	ldw	r2,16(r16)
	  w = fp->_w + fp->_bf._size;
  8053b4:	81c00517 	ldw	r7,20(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  8053b8:	1200022e 	bgeu	r2,r8,8053c4 <__sfvwrite_r+0x2d8>
	  w = fp->_w + fp->_bf._size;
  8053bc:	3ca5883a 	add	r18,r7,r18
	  if (fp->_p > fp->_bf._base && s > w)
  8053c0:	97002216 	blt	r18,fp,80544c <__sfvwrite_r+0x360>
	  else if (s >= (w = fp->_bf._size))
  8053c4:	e1c05d16 	blt	fp,r7,80553c <__sfvwrite_r+0x450>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  8053c8:	80800917 	ldw	r2,36(r16)
  8053cc:	81400717 	ldw	r5,28(r16)
  8053d0:	b80d883a 	mov	r6,r23
  8053d4:	a809883a 	mov	r4,r21
  8053d8:	103ee83a 	callr	r2
  8053dc:	1025883a 	mov	r18,r2
	      if (w <= 0)
  8053e0:	00bfe20e 	bge	zero,r2,80536c <__sfvwrite_r+0x280>
	  if ((nldist -= w) == 0)
  8053e4:	a4a9c83a 	sub	r20,r20,r18
  8053e8:	a03fdc26 	beq	r20,zero,80535c <__sfvwrite_r+0x270>
  8053ec:	00800044 	movi	r2,1
      while ((uio->uio_resid -= w) != 0);
  8053f0:	b1800217 	ldw	r6,8(r22)
	  p += w;
  8053f4:	bcaf883a 	add	r23,r23,r18
	  len -= w;
  8053f8:	9ca7c83a 	sub	r19,r19,r18
      while ((uio->uio_resid -= w) != 0);
  8053fc:	34a5c83a 	sub	r18,r6,r18
  805400:	b4800215 	stw	r18,8(r22)
  805404:	903fc826 	beq	r18,zero,805328 <__sfvwrite_r+0x23c>
	  w = fp->_w + fp->_bf._size;
  805408:	84800217 	ldw	r18,8(r16)
	  if (fp->_p > fp->_bf._base && s > w)
  80540c:	82000017 	ldw	r8,0(r16)
	  GETIOV (nlknown = 0);
  805410:	983fe21e 	bne	r19,zero,80539c <__sfvwrite_r+0x2b0>
  805414:	8cc00117 	ldw	r19,4(r17)
  805418:	8dc00017 	ldw	r23,0(r17)
  80541c:	8c400204 	addi	r17,r17,8
  805420:	983ffc26 	beq	r19,zero,805414 <__sfvwrite_r+0x328>
	      nl = memchr ((void *) p, '\n', len);
  805424:	980d883a 	mov	r6,r19
  805428:	01400284 	movi	r5,10
  80542c:	b809883a 	mov	r4,r23
  805430:	da000015 	stw	r8,0(sp)
  805434:	08062840 	call	806284 <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
  805438:	da000017 	ldw	r8,0(sp)
  80543c:	10005226 	beq	r2,zero,805588 <__sfvwrite_r+0x49c>
  805440:	10800044 	addi	r2,r2,1
  805444:	15e9c83a 	sub	r20,r2,r23
  805448:	003fd506 	br	8053a0 <__sfvwrite_r+0x2b4>
	      COPY (w);
  80544c:	b80b883a 	mov	r5,r23
  805450:	4009883a 	mov	r4,r8
  805454:	900d883a 	mov	r6,r18
  805458:	08064e00 	call	8064e0 <memmove>
	      fp->_p += w;
  80545c:	80800017 	ldw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  805460:	800b883a 	mov	r5,r16
  805464:	a809883a 	mov	r4,r21
	      fp->_p += w;
  805468:	1485883a 	add	r2,r2,r18
  80546c:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
  805470:	08047140 	call	804714 <_fflush_r>
  805474:	103fdb26 	beq	r2,zero,8053e4 <__sfvwrite_r+0x2f8>
  805478:	003fbc06 	br	80536c <__sfvwrite_r+0x280>
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
  80547c:	80800417 	ldw	r2,16(r16)
  805480:	12001836 	bltu	r2,r8,8054e4 <__sfvwrite_r+0x3f8>
  805484:	81400517 	ldw	r5,20(r16)
  805488:	99401636 	bltu	r19,r5,8054e4 <__sfvwrite_r+0x3f8>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  80548c:	d8800017 	ldw	r2,0(sp)
  805490:	14c03b2e 	bgeu	r2,r19,805580 <__sfvwrite_r+0x494>
  805494:	d9000217 	ldw	r4,8(sp)
  805498:	2144b03a 	or	r2,r4,r5
  80549c:	10800428 	cmpgeui	r2,r2,16
  8054a0:	1000321e 	bne	r2,zero,80556c <__sfvwrite_r+0x480>
  8054a4:	2008913a 	slli	r4,r4,4
  8054a8:	00802074 	movhi	r2,129
  8054ac:	2148b03a 	or	r4,r4,r5
  8054b0:	2085883a 	add	r2,r4,r2
  8054b4:	11095b03 	ldbu	r4,9580(r2)
  8054b8:	080c3e80 	call	80c3e8 <__mulsi3>
	      w = fp->_write (ptr, fp->_cookie, p, w);
  8054bc:	82000917 	ldw	r8,36(r16)
  8054c0:	81400717 	ldw	r5,28(r16)
  8054c4:	100f883a 	mov	r7,r2
  8054c8:	e00d883a 	mov	r6,fp
  8054cc:	a809883a 	mov	r4,r21
  8054d0:	403ee83a 	callr	r8
  8054d4:	1029883a 	mov	r20,r2
	      if (w <= 0)
  8054d8:	00bfa40e 	bge	zero,r2,80536c <__sfvwrite_r+0x280>
	  len -= w;
  8054dc:	9d27c83a 	sub	r19,r19,r20
  8054e0:	003f8406 	br	8052f4 <__sfvwrite_r+0x208>
	      w = MIN (len, w);
  8054e4:	9029883a 	mov	r20,r18
  8054e8:	9c80012e 	bgeu	r19,r18,8054f0 <__sfvwrite_r+0x404>
  8054ec:	9829883a 	mov	r20,r19
	      COPY (w);
  8054f0:	4009883a 	mov	r4,r8
  8054f4:	a00d883a 	mov	r6,r20
  8054f8:	e00b883a 	mov	r5,fp
  8054fc:	08064e00 	call	8064e0 <memmove>
	      fp->_w -= w;
  805500:	80800217 	ldw	r2,8(r16)
	      fp->_p += w;
  805504:	81000017 	ldw	r4,0(r16)
	      fp->_w -= w;
  805508:	1505c83a 	sub	r2,r2,r20
	      fp->_p += w;
  80550c:	2509883a 	add	r4,r4,r20
	      fp->_w -= w;
  805510:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
  805514:	81000015 	stw	r4,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
  805518:	103ff01e 	bne	r2,zero,8054dc <__sfvwrite_r+0x3f0>
  80551c:	800b883a 	mov	r5,r16
  805520:	a809883a 	mov	r4,r21
  805524:	08047140 	call	804714 <_fflush_r>
  805528:	103fec26 	beq	r2,zero,8054dc <__sfvwrite_r+0x3f0>
  80552c:	003f8f06 	br	80536c <__sfvwrite_r+0x280>
		w = len;
  805530:	9825883a 	mov	r18,r19
  805534:	982f883a 	mov	r23,r19
  805538:	003f6206 	br	8052c4 <__sfvwrite_r+0x1d8>
	      COPY (w);
  80553c:	4009883a 	mov	r4,r8
  805540:	e00d883a 	mov	r6,fp
  805544:	b80b883a 	mov	r5,r23
  805548:	08064e00 	call	8064e0 <memmove>
	      fp->_w -= w;
  80554c:	81000217 	ldw	r4,8(r16)
	      fp->_p += w;
  805550:	80800017 	ldw	r2,0(r16)
  805554:	e025883a 	mov	r18,fp
	      fp->_w -= w;
  805558:	2709c83a 	sub	r4,r4,fp
	      fp->_p += w;
  80555c:	1705883a 	add	r2,r2,fp
	      fp->_w -= w;
  805560:	81000215 	stw	r4,8(r16)
	      fp->_p += w;
  805564:	80800015 	stw	r2,0(r16)
  805568:	003f9e06 	br	8053e4 <__sfvwrite_r+0x2f8>
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
  80556c:	d9400115 	stw	r5,4(sp)
  805570:	080c2340 	call	80c234 <__divsi3>
  805574:	d9400117 	ldw	r5,4(sp)
  805578:	1009883a 	mov	r4,r2
  80557c:	003fce06 	br	8054b8 <__sfvwrite_r+0x3cc>
  805580:	9809883a 	mov	r4,r19
  805584:	003fc406 	br	805498 <__sfvwrite_r+0x3ac>
	      nldist = nl ? nl + 1 - p : len + 1;
  805588:	98800044 	addi	r2,r19,1
  80558c:	1029883a 	mov	r20,r2
  805590:	003f8406 	br	8053a4 <__sfvwrite_r+0x2b8>
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
  805594:	a809883a 	mov	r4,r21
  805598:	0807fc40 	call	807fc4 <_realloc_r>
  80559c:	1009883a 	mov	r4,r2
		      if (!str)
  8055a0:	103f401e 	bne	r2,zero,8052a4 <__sfvwrite_r+0x1b8>
			  _free_r (ptr, fp->_bf._base);
  8055a4:	81400417 	ldw	r5,16(r16)
  8055a8:	a809883a 	mov	r4,r21
  8055ac:	0804df80 	call	804df8 <_free_r>
			  fp->_flags &=  ~__SMBF;
  8055b0:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  8055b4:	00c00304 	movi	r3,12
  8055b8:	a8c00015 	stw	r3,0(r21)
			  fp->_flags &=  ~__SMBF;
  8055bc:	10bfdfcc 	andi	r2,r2,65407
			  goto err;
  8055c0:	003f6b06 	br	805370 <__sfvwrite_r+0x284>
			  ptr->_errno = ENOMEM;
  8055c4:	00c00304 	movi	r3,12
  fp->_flags |= __SERR;
  8055c8:	8080030b 	ldhu	r2,12(r16)
			  ptr->_errno = ENOMEM;
  8055cc:	a8c00015 	stw	r3,0(r21)
			  goto err;
  8055d0:	003f6706 	br	805370 <__sfvwrite_r+0x284>
    return EOF;
  8055d4:	00bfffc4 	movi	r2,-1
  8055d8:	003f5406 	br	80532c <__sfvwrite_r+0x240>

008055dc <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
  8055dc:	defffa04 	addi	sp,sp,-24
  8055e0:	dd000415 	stw	r20,16(sp)
  8055e4:	dcc00315 	stw	r19,12(sp)
  8055e8:	dc800215 	stw	r18,8(sp)
  8055ec:	dfc00515 	stw	ra,20(sp)
  8055f0:	dc400115 	stw	r17,4(sp)
  8055f4:	dc000015 	stw	r16,0(sp)
  8055f8:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8055fc:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  805600:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  805604:	94400117 	ldw	r17,4(r18)
  805608:	94000217 	ldw	r16,8(r18)
  80560c:	8c7fffc4 	addi	r17,r17,-1
  805610:	88000d16 	blt	r17,zero,805648 <_fwalk+0x6c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  805614:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  805618:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  80561c:	108000b0 	cmpltui	r2,r2,2
  805620:	1000061e 	bne	r2,zero,80563c <_fwalk+0x60>
  805624:	8080038f 	ldh	r2,14(r16)
	ret |= (*function) (fp);
  805628:	8009883a 	mov	r4,r16
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  80562c:	10bfffe0 	cmpeqi	r2,r2,-1
  805630:	1000021e 	bne	r2,zero,80563c <_fwalk+0x60>
	ret |= (*function) (fp);
  805634:	983ee83a 	callr	r19
  805638:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  80563c:	88bfffd8 	cmpnei	r2,r17,-1
  805640:	84001a04 	addi	r16,r16,104
  805644:	103ff31e 	bne	r2,zero,805614 <_fwalk+0x38>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  805648:	94800017 	ldw	r18,0(r18)
  80564c:	903fed1e 	bne	r18,zero,805604 <_fwalk+0x28>

  return ret;
}
  805650:	a005883a 	mov	r2,r20
  805654:	dfc00517 	ldw	ra,20(sp)
  805658:	dd000417 	ldw	r20,16(sp)
  80565c:	dcc00317 	ldw	r19,12(sp)
  805660:	dc800217 	ldw	r18,8(sp)
  805664:	dc400117 	ldw	r17,4(sp)
  805668:	dc000017 	ldw	r16,0(sp)
  80566c:	dec00604 	addi	sp,sp,24
  805670:	f800283a 	ret

00805674 <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
  805674:	defff904 	addi	sp,sp,-28
  805678:	dd400515 	stw	r21,20(sp)
  80567c:	dd000415 	stw	r20,16(sp)
  805680:	dcc00315 	stw	r19,12(sp)
  805684:	dc800215 	stw	r18,8(sp)
  805688:	dfc00615 	stw	ra,24(sp)
  80568c:	dc400115 	stw	r17,4(sp)
  805690:	dc000015 	stw	r16,0(sp)
  805694:	202b883a 	mov	r21,r4
  805698:	2827883a 	mov	r19,r5
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  80569c:	2480b804 	addi	r18,r4,736
  register int n, ret = 0;
  8056a0:	0029883a 	mov	r20,zero
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8056a4:	94400117 	ldw	r17,4(r18)
  8056a8:	94000217 	ldw	r16,8(r18)
  8056ac:	8c7fffc4 	addi	r17,r17,-1
  8056b0:	88000e16 	blt	r17,zero,8056ec <_fwalk_reent+0x78>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8056b4:	8080030b 	ldhu	r2,12(r16)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8056b8:	8c7fffc4 	addi	r17,r17,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8056bc:	108000b0 	cmpltui	r2,r2,2
  8056c0:	1000071e 	bne	r2,zero,8056e0 <_fwalk_reent+0x6c>
  8056c4:	8080038f 	ldh	r2,14(r16)
	ret |= (*reent_function) (ptr, fp);
  8056c8:	800b883a 	mov	r5,r16
  8056cc:	a809883a 	mov	r4,r21
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
  8056d0:	10bfffe0 	cmpeqi	r2,r2,-1
  8056d4:	1000021e 	bne	r2,zero,8056e0 <_fwalk_reent+0x6c>
	ret |= (*reent_function) (ptr, fp);
  8056d8:	983ee83a 	callr	r19
  8056dc:	a0a8b03a 	or	r20,r20,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
  8056e0:	88bfffd8 	cmpnei	r2,r17,-1
  8056e4:	84001a04 	addi	r16,r16,104
  8056e8:	103ff21e 	bne	r2,zero,8056b4 <_fwalk_reent+0x40>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
  8056ec:	94800017 	ldw	r18,0(r18)
  8056f0:	903fec1e 	bne	r18,zero,8056a4 <_fwalk_reent+0x30>

  return ret;
}
  8056f4:	a005883a 	mov	r2,r20
  8056f8:	dfc00617 	ldw	ra,24(sp)
  8056fc:	dd400517 	ldw	r21,20(sp)
  805700:	dd000417 	ldw	r20,16(sp)
  805704:	dcc00317 	ldw	r19,12(sp)
  805708:	dc800217 	ldw	r18,8(sp)
  80570c:	dc400117 	ldw	r17,4(sp)
  805710:	dc000017 	ldw	r16,0(sp)
  805714:	dec00704 	addi	sp,sp,28
  805718:	f800283a 	ret

0080571c <__localeconv_l>:
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
}
  80571c:	20803c04 	addi	r2,r4,240
  805720:	f800283a 	ret

00805724 <_localeconv_r>:
{
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
}
  805724:	00802074 	movhi	r2,129
  805728:	10883a04 	addi	r2,r2,8424
  80572c:	f800283a 	ret

00805730 <localeconv>:
#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
  return __localeconv_l (__get_current_locale ());
}
  805730:	00802074 	movhi	r2,129
  805734:	10883a04 	addi	r2,r2,8424
  805738:	f800283a 	ret

0080573c <_setlocale_r>:
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
  80573c:	30001626 	beq	r6,zero,805798 <_setlocale_r+0x5c>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  805740:	01402074 	movhi	r5,129
{
  805744:	defffe04 	addi	sp,sp,-8
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  805748:	2945cb04 	addi	r5,r5,5932
  80574c:	3009883a 	mov	r4,r6
{
  805750:	dc000015 	stw	r16,0(sp)
  805754:	dfc00115 	stw	ra,4(sp)
  805758:	3021883a 	mov	r16,r6
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  80575c:	08086b80 	call	8086b8 <strcmp>
  805760:	1000061e 	bne	r2,zero,80577c <_setlocale_r+0x40>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
  805764:	00802074 	movhi	r2,129
  805768:	1085ca04 	addi	r2,r2,5928
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
  80576c:	dfc00117 	ldw	ra,4(sp)
  805770:	dc000017 	ldw	r16,0(sp)
  805774:	dec00204 	addi	sp,sp,8
  805778:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  80577c:	80800003 	ldbu	r2,0(r16)
  805780:	10bfef44 	addi	r2,r2,-67
  805784:	10000726 	beq	r2,zero,8057a4 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
  805788:	80800003 	ldbu	r2,0(r16)
  80578c:	103ff526 	beq	r2,zero,805764 <_setlocale_r+0x28>
        return NULL;
  805790:	0005883a 	mov	r2,zero
  805794:	003ff506 	br	80576c <_setlocale_r+0x30>
  return "C";
  805798:	00802074 	movhi	r2,129
  80579c:	1085ca04 	addi	r2,r2,5928
}
  8057a0:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8057a4:	80800043 	ldbu	r2,1(r16)
  8057a8:	103fee26 	beq	r2,zero,805764 <_setlocale_r+0x28>
  8057ac:	003ff606 	br	805788 <_setlocale_r+0x4c>

008057b0 <__locale_mb_cur_max>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
#endif
}
  8057b0:	00802074 	movhi	r2,129
  8057b4:	10884807 	ldb	r2,8480(r2)
  8057b8:	f800283a 	ret

008057bc <setlocale>:
  if (locale)
  8057bc:	28001626 	beq	r5,zero,805818 <setlocale+0x5c>
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
  8057c0:	defffe04 	addi	sp,sp,-8
  8057c4:	dc000015 	stw	r16,0(sp)
  8057c8:	2821883a 	mov	r16,r5
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8057cc:	01402074 	movhi	r5,129
  8057d0:	2945cb04 	addi	r5,r5,5932
  8057d4:	8009883a 	mov	r4,r16
{
  8057d8:	dfc00115 	stw	ra,4(sp)
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8057dc:	08086b80 	call	8086b8 <strcmp>
  8057e0:	1000061e 	bne	r2,zero,8057fc <setlocale+0x40>
  return "C";
  8057e4:	00802074 	movhi	r2,129
  8057e8:	1085ca04 	addi	r2,r2,5928
  return _setlocale_r (_REENT, category, locale);
}
  8057ec:	dfc00117 	ldw	ra,4(sp)
  8057f0:	dc000017 	ldw	r16,0(sp)
  8057f4:	dec00204 	addi	sp,sp,8
  8057f8:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  8057fc:	80800003 	ldbu	r2,0(r16)
  805800:	10bfef44 	addi	r2,r2,-67
  805804:	10000726 	beq	r2,zero,805824 <setlocale+0x68>
	  && strcmp (locale, ""))
  805808:	80800003 	ldbu	r2,0(r16)
  80580c:	103ff526 	beq	r2,zero,8057e4 <setlocale+0x28>
        return NULL;
  805810:	0005883a 	mov	r2,zero
  805814:	003ff506 	br	8057ec <setlocale+0x30>
  return "C";
  805818:	00802074 	movhi	r2,129
  80581c:	1085ca04 	addi	r2,r2,5928
}
  805820:	f800283a 	ret
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
  805824:	80800043 	ldbu	r2,1(r16)
  805828:	103fee26 	beq	r2,zero,8057e4 <setlocale+0x28>
  80582c:	003ff606 	br	805808 <setlocale+0x4c>

00805830 <__smakebuf_r>:
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
  805830:	2880030b 	ldhu	r2,12(r5)
{
  805834:	deffe804 	addi	sp,sp,-96
  805838:	dc001215 	stw	r16,72(sp)
  80583c:	dfc01715 	stw	ra,92(sp)
  805840:	dd001615 	stw	r20,88(sp)
  805844:	dcc01515 	stw	r19,84(sp)
  805848:	dc801415 	stw	r18,80(sp)
  80584c:	dc401315 	stw	r17,76(sp)
  if (fp->_flags & __SNBF)
  805850:	10c0008c 	andi	r3,r2,2
{
  805854:	2821883a 	mov	r16,r5
  if (fp->_flags & __SNBF)
  805858:	18000d26 	beq	r3,zero,805890 <__smakebuf_r+0x60>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
  80585c:	288010c4 	addi	r2,r5,67
  805860:	28800015 	stw	r2,0(r5)
  805864:	28800415 	stw	r2,16(r5)
      fp->_bf._size = 1;
  805868:	00800044 	movi	r2,1
  80586c:	28800515 	stw	r2,20(r5)
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
      fp->_flags |= flags;
    }
}
  805870:	dfc01717 	ldw	ra,92(sp)
  805874:	dd001617 	ldw	r20,88(sp)
  805878:	dcc01517 	ldw	r19,84(sp)
  80587c:	dc801417 	ldw	r18,80(sp)
  805880:	dc401317 	ldw	r17,76(sp)
  805884:	dc001217 	ldw	r16,72(sp)
  805888:	dec01804 	addi	sp,sp,96
  80588c:	f800283a 	ret

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  805890:	2940038f 	ldh	r5,14(r5)
  805894:	2023883a 	mov	r17,r4
  805898:	28002816 	blt	r5,zero,80593c <__smakebuf_r+0x10c>
  80589c:	d80d883a 	mov	r6,sp
  8058a0:	080ac180 	call	80ac18 <_fstat_r>
  8058a4:	10002416 	blt	r2,zero,805938 <__smakebuf_r+0x108>
        *bufsize = BUFSIZ;
      return (0);
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
  8058a8:	d8800117 	ldw	r2,4(sp)
  8058ac:	10bc000c 	andi	r2,r2,61440
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
  8058b0:	10880018 	cmpnei	r2,r2,8192
  8058b4:	1000371e 	bne	r2,zero,805994 <__smakebuf_r+0x164>
  8058b8:	8140038f 	ldh	r5,14(r16)
  8058bc:	8809883a 	mov	r4,r17
  8058c0:	080ac700 	call	80ac70 <_isatty_r>
  8058c4:	10004026 	beq	r2,zero,8059c8 <__smakebuf_r+0x198>
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  8058c8:	8080030b 	ldhu	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  8058cc:	80c010c4 	addi	r3,r16,67
  8058d0:	80c00015 	stw	r3,0(r16)
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
  8058d4:	10800054 	ori	r2,r2,1
  8058d8:	8080030d 	sth	r2,12(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  8058dc:	00800044 	movi	r2,1
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
  8058e0:	80c00415 	stw	r3,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
  8058e4:	80800515 	stw	r2,20(r16)
  8058e8:	04820004 	movi	r18,2048
  8058ec:	05010004 	movi	r20,1024
  8058f0:	04c00044 	movi	r19,1
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
  8058f4:	01410004 	movi	r5,1024
  if ((p = _malloc_r (ptr, size)) == NULL)
  8058f8:	8809883a 	mov	r4,r17
  8058fc:	0805a740 	call	805a74 <_malloc_r>
  805900:	10001726 	beq	r2,zero,805960 <__smakebuf_r+0x130>
      fp->_flags |= __SMBF;
  805904:	80c0030b 	ldhu	r3,12(r16)
      ptr->__cleanup = _cleanup_r;
  805908:	01002034 	movhi	r4,128
  80590c:	2111fe04 	addi	r4,r4,18424
  805910:	89000f15 	stw	r4,60(r17)
      fp->_flags |= __SMBF;
  805914:	18c02014 	ori	r3,r3,128
  805918:	80c0030d 	sth	r3,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
  80591c:	80800015 	stw	r2,0(r16)
  805920:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
  805924:	85000515 	stw	r20,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  805928:	98001f1e 	bne	r19,zero,8059a8 <__smakebuf_r+0x178>
      fp->_flags |= flags;
  80592c:	90c6b03a 	or	r3,r18,r3
  805930:	80c0030d 	sth	r3,12(r16)
  805934:	003fce06 	br	805870 <__smakebuf_r+0x40>
      if (fp->_flags & __SMBF)
  805938:	8080030b 	ldhu	r2,12(r16)
  80593c:	1080200c 	andi	r2,r2,128
  805940:	0025883a 	mov	r18,zero
  805944:	10001426 	beq	r2,zero,805998 <__smakebuf_r+0x168>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  805948:	01401004 	movi	r5,64
  if ((p = _malloc_r (ptr, size)) == NULL)
  80594c:	8809883a 	mov	r4,r17
  805950:	05001004 	movi	r20,64
      *couldbetty = 0;
  805954:	0027883a 	mov	r19,zero
  if ((p = _malloc_r (ptr, size)) == NULL)
  805958:	0805a740 	call	805a74 <_malloc_r>
  80595c:	103fe91e 	bne	r2,zero,805904 <__smakebuf_r+0xd4>
      if (!(fp->_flags & __SSTR))
  805960:	8080030b 	ldhu	r2,12(r16)
  805964:	10c0800c 	andi	r3,r2,512
  805968:	183fc11e 	bne	r3,zero,805870 <__smakebuf_r+0x40>
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  80596c:	00ffff04 	movi	r3,-4
  805970:	10c4703a 	and	r2,r2,r3
  805974:	10800094 	ori	r2,r2,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
  805978:	80c010c4 	addi	r3,r16,67
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
  80597c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._size = 1;
  805980:	00800044 	movi	r2,1
	  fp->_bf._base = fp->_p = fp->_nbuf;
  805984:	80c00015 	stw	r3,0(r16)
  805988:	80c00415 	stw	r3,16(r16)
	  fp->_bf._size = 1;
  80598c:	80800515 	stw	r2,20(r16)
  805990:	003fb706 	br	805870 <__smakebuf_r+0x40>
  805994:	04820004 	movi	r18,2048
  805998:	05010004 	movi	r20,1024
  80599c:	0027883a 	mov	r19,zero
  *bufsize = BUFSIZ;
  8059a0:	01410004 	movi	r5,1024
  8059a4:	003fd406 	br	8058f8 <__smakebuf_r+0xc8>
      if (couldbetty && _isatty_r (ptr, fp->_file))
  8059a8:	8140038f 	ldh	r5,14(r16)
  8059ac:	8809883a 	mov	r4,r17
  8059b0:	080ac700 	call	80ac70 <_isatty_r>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  8059b4:	80c0030b 	ldhu	r3,12(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
  8059b8:	103fdc26 	beq	r2,zero,80592c <__smakebuf_r+0xfc>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
  8059bc:	18ffff0c 	andi	r3,r3,65532
  8059c0:	18c00054 	ori	r3,r3,1
  8059c4:	003fd906 	br	80592c <__smakebuf_r+0xfc>
  8059c8:	04820004 	movi	r18,2048
  8059cc:	05010004 	movi	r20,1024
  8059d0:	04c00044 	movi	r19,1
  *bufsize = BUFSIZ;
  8059d4:	01410004 	movi	r5,1024
  8059d8:	003fc706 	br	8058f8 <__smakebuf_r+0xc8>

008059dc <__swhatbuf_r>:
{
  8059dc:	deffea04 	addi	sp,sp,-88
  8059e0:	dc001215 	stw	r16,72(sp)
  8059e4:	2821883a 	mov	r16,r5
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  8059e8:	2940038f 	ldh	r5,14(r5)
{
  8059ec:	dc801415 	stw	r18,80(sp)
  8059f0:	dc401315 	stw	r17,76(sp)
  8059f4:	dfc01515 	stw	ra,84(sp)
  8059f8:	3023883a 	mov	r17,r6
  8059fc:	3825883a 	mov	r18,r7
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
  805a00:	28001016 	blt	r5,zero,805a44 <__swhatbuf_r+0x68>
  805a04:	d80d883a 	mov	r6,sp
  805a08:	080ac180 	call	80ac18 <_fstat_r>
  805a0c:	10000d16 	blt	r2,zero,805a44 <__swhatbuf_r+0x68>
  *couldbetty = S_ISCHR(st.st_mode);
  805a10:	d8c00117 	ldw	r3,4(sp)
  return (snpt);
  805a14:	00820004 	movi	r2,2048
  *couldbetty = S_ISCHR(st.st_mode);
  805a18:	18fc000c 	andi	r3,r3,61440
  805a1c:	18c80020 	cmpeqi	r3,r3,8192
  805a20:	90c00015 	stw	r3,0(r18)
  *bufsize = BUFSIZ;
  805a24:	00c10004 	movi	r3,1024
  805a28:	88c00015 	stw	r3,0(r17)
}
  805a2c:	dfc01517 	ldw	ra,84(sp)
  805a30:	dc801417 	ldw	r18,80(sp)
  805a34:	dc401317 	ldw	r17,76(sp)
  805a38:	dc001217 	ldw	r16,72(sp)
  805a3c:	dec01604 	addi	sp,sp,88
  805a40:	f800283a 	ret
  805a44:	8080030b 	ldhu	r2,12(r16)
      *couldbetty = 0;
  805a48:	90000015 	stw	zero,0(r18)
      if (fp->_flags & __SMBF)
  805a4c:	1080200c 	andi	r2,r2,128
  805a50:	10000426 	beq	r2,zero,805a64 <__swhatbuf_r+0x88>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
  805a54:	00801004 	movi	r2,64
  805a58:	88800015 	stw	r2,0(r17)
  805a5c:	0005883a 	mov	r2,zero
  805a60:	003ff206 	br	805a2c <__swhatbuf_r+0x50>
        *bufsize = BUFSIZ;
  805a64:	00810004 	movi	r2,1024
  805a68:	88800015 	stw	r2,0(r17)
  805a6c:	0005883a 	mov	r2,zero
  805a70:	003fee06 	br	805a2c <__swhatbuf_r+0x50>

00805a74 <_malloc_r>:
{
  805a74:	defff604 	addi	sp,sp,-40
  805a78:	dc400115 	stw	r17,4(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  805a7c:	2c4002c4 	addi	r17,r5,11
{
  805a80:	dc800215 	stw	r18,8(sp)
  805a84:	dfc00915 	stw	ra,36(sp)
  805a88:	df000815 	stw	fp,32(sp)
  805a8c:	ddc00715 	stw	r23,28(sp)
  805a90:	dd800615 	stw	r22,24(sp)
  805a94:	dd400515 	stw	r21,20(sp)
  805a98:	dd000415 	stw	r20,16(sp)
  805a9c:	dcc00315 	stw	r19,12(sp)
  805aa0:	dc000015 	stw	r16,0(sp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  805aa4:	888005e8 	cmpgeui	r2,r17,23
{
  805aa8:	2025883a 	mov	r18,r4
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  805aac:	10001b1e 	bne	r2,zero,805b1c <_malloc_r+0xa8>
  if (nb > INT_MAX || nb < bytes)
  805ab0:	29400468 	cmpgeui	r5,r5,17
  805ab4:	2800821e 	bne	r5,zero,805cc0 <_malloc_r+0x24c>
  MALLOC_LOCK;
  805ab8:	080f2140 	call	80f214 <__malloc_lock>
  805abc:	04400404 	movi	r17,16
  805ac0:	00800604 	movi	r2,24
  805ac4:	01c00084 	movi	r7,2
    q = bin_at(idx);
  805ac8:	04c02074 	movhi	r19,129
  805acc:	9cc85904 	addi	r19,r19,8548
  805ad0:	9885883a 	add	r2,r19,r2
    victim = last(q);
  805ad4:	14000117 	ldw	r16,4(r2)
    q = bin_at(idx);
  805ad8:	10fffe04 	addi	r3,r2,-8
    if (victim == q)
  805adc:	80c08b26 	beq	r16,r3,805d0c <_malloc_r+0x298>
      victim_size = chunksize(victim);
  805ae0:	80800117 	ldw	r2,4(r16)
      unlink(victim, bck, fwd);
  805ae4:	81000317 	ldw	r4,12(r16)
      victim_size = chunksize(victim);
  805ae8:	00ffff04 	movi	r3,-4
  805aec:	10c4703a 	and	r2,r2,r3
        unlink(victim, bck, fwd);
  805af0:	81400217 	ldw	r5,8(r16)
        set_inuse_bit_at_offset(victim, victim_size);
  805af4:	8085883a 	add	r2,r16,r2
  805af8:	10c00117 	ldw	r3,4(r2)
        unlink(victim, bck, fwd);
  805afc:	29000315 	stw	r4,12(r5)
  805b00:	21400215 	stw	r5,8(r4)
        set_inuse_bit_at_offset(victim, victim_size);
  805b04:	18c00054 	ori	r3,r3,1
  805b08:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
  805b0c:	9009883a 	mov	r4,r18
  805b10:	080f2380 	call	80f238 <__malloc_unlock>
        return chunk2mem(victim);
  805b14:	80800204 	addi	r2,r16,8
  805b18:	00006c06 	br	805ccc <_malloc_r+0x258>
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
  805b1c:	00bffe04 	movi	r2,-8
  805b20:	88a2703a 	and	r17,r17,r2
  if (nb > INT_MAX || nb < bytes)
  805b24:	88006616 	blt	r17,zero,805cc0 <_malloc_r+0x24c>
  805b28:	89406536 	bltu	r17,r5,805cc0 <_malloc_r+0x24c>
  MALLOC_LOCK;
  805b2c:	080f2140 	call	80f214 <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
  805b30:	88807e28 	cmpgeui	r2,r17,504
  805b34:	10011b26 	beq	r2,zero,805fa4 <_malloc_r+0x530>
    idx = bin_index(nb);
  805b38:	8804d27a 	srli	r2,r17,9
  805b3c:	10006f26 	beq	r2,zero,805cfc <_malloc_r+0x288>
  805b40:	10c00168 	cmpgeui	r3,r2,5
  805b44:	1800f71e 	bne	r3,zero,805f24 <_malloc_r+0x4b0>
  805b48:	8804d1ba 	srli	r2,r17,6
    bin = bin_at(idx);
  805b4c:	11c00e44 	addi	r7,r2,57
  805b50:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  805b54:	12000e04 	addi	r8,r2,56
    bin = bin_at(idx);
  805b58:	04c02074 	movhi	r19,129
  805b5c:	9cc85904 	addi	r19,r19,8548
  805b60:	9909883a 	add	r4,r19,r4
    for (victim = last(bin); victim != bin; victim = victim->bk)
  805b64:	24000117 	ldw	r16,4(r4)
    bin = bin_at(idx);
  805b68:	213ffe04 	addi	r4,r4,-8
    for (victim = last(bin); victim != bin; victim = victim->bk)
  805b6c:	24000b26 	beq	r4,r16,805b9c <_malloc_r+0x128>
      victim_size = chunksize(victim);
  805b70:	01bfff04 	movi	r6,-4
  805b74:	00000306 	br	805b84 <_malloc_r+0x110>
      else if (remainder_size >= 0) /* exact fit */
  805b78:	1800cf0e 	bge	r3,zero,805eb8 <_malloc_r+0x444>
    for (victim = last(bin); victim != bin; victim = victim->bk)
  805b7c:	84000317 	ldw	r16,12(r16)
  805b80:	24000626 	beq	r4,r16,805b9c <_malloc_r+0x128>
      victim_size = chunksize(victim);
  805b84:	80800117 	ldw	r2,4(r16)
  805b88:	1184703a 	and	r2,r2,r6
      remainder_size = long_sub_size_t(victim_size, nb);
  805b8c:	1447c83a 	sub	r3,r2,r17
      if (remainder_size >= (long)MINSIZE) /* too big */
  805b90:	19400408 	cmpgei	r5,r3,16
  805b94:	283ff826 	beq	r5,zero,805b78 <_malloc_r+0x104>
  805b98:	400f883a 	mov	r7,r8
  if ( (victim = last_remainder->fd) != last_remainder)
  805b9c:	9c000417 	ldw	r16,16(r19)
  805ba0:	02402074 	movhi	r9,129
  805ba4:	4a485b04 	addi	r9,r9,8556
  805ba8:	82405f26 	beq	r16,r9,805d28 <_malloc_r+0x2b4>
    victim_size = chunksize(victim);
  805bac:	80c00117 	ldw	r3,4(r16)
  805bb0:	00bfff04 	movi	r2,-4
  805bb4:	1884703a 	and	r2,r3,r2
    remainder_size = long_sub_size_t(victim_size, nb);
  805bb8:	1447c83a 	sub	r3,r2,r17
    if (remainder_size >= (long)MINSIZE) /* re-split */
  805bbc:	19000410 	cmplti	r4,r3,16
  805bc0:	20010326 	beq	r4,zero,805fd0 <_malloc_r+0x55c>
    clear_last_remainder;
  805bc4:	9a400515 	stw	r9,20(r19)
  805bc8:	9a400415 	stw	r9,16(r19)
    if (remainder_size >= 0)  /* exhaust */
  805bcc:	1800f80e 	bge	r3,zero,805fb0 <_malloc_r+0x53c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  805bd0:	10c08028 	cmpgeui	r3,r2,512
  805bd4:	1800ba1e 	bne	r3,zero,805ec0 <_malloc_r+0x44c>
  805bd8:	1006d0fa 	srli	r3,r2,3
  805bdc:	1008d17a 	srli	r4,r2,5
  805be0:	00800044 	movi	r2,1
  805be4:	18c00044 	addi	r3,r3,1
  805be8:	180690fa 	slli	r3,r3,3
  805bec:	99400117 	ldw	r5,4(r19)
  805bf0:	1104983a 	sll	r2,r2,r4
  805bf4:	98c7883a 	add	r3,r19,r3
  805bf8:	19000017 	ldw	r4,0(r3)
  805bfc:	1144b03a 	or	r2,r2,r5
  805c00:	197ffe04 	addi	r5,r3,-8
  805c04:	81400315 	stw	r5,12(r16)
  805c08:	81000215 	stw	r4,8(r16)
  805c0c:	98800115 	stw	r2,4(r19)
  805c10:	1c000015 	stw	r16,0(r3)
  805c14:	24000315 	stw	r16,12(r4)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  805c18:	3807d0ba 	srai	r3,r7,2
  805c1c:	01000044 	movi	r4,1
  805c20:	20c8983a 	sll	r4,r4,r3
  805c24:	11004536 	bltu	r2,r4,805d3c <_malloc_r+0x2c8>
    if ( (block & binblocks) == 0) 
  805c28:	2086703a 	and	r3,r4,r2
  805c2c:	18000a1e 	bne	r3,zero,805c58 <_malloc_r+0x1e4>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  805c30:	00ffff04 	movi	r3,-4
      block <<= 1;
  805c34:	2109883a 	add	r4,r4,r4
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  805c38:	38ce703a 	and	r7,r7,r3
      while ((block & binblocks) == 0)
  805c3c:	2086703a 	and	r3,r4,r2
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
  805c40:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  805c44:	1800041e 	bne	r3,zero,805c58 <_malloc_r+0x1e4>
        block <<= 1;
  805c48:	2109883a 	add	r4,r4,r4
      while ((block & binblocks) == 0)
  805c4c:	2086703a 	and	r3,r4,r2
        idx += BINBLOCKWIDTH;
  805c50:	39c00104 	addi	r7,r7,4
      while ((block & binblocks) == 0)
  805c54:	183ffc26 	beq	r3,zero,805c48 <_malloc_r+0x1d4>
          victim_size = chunksize(victim);
  805c58:	02bfff04 	movi	r10,-4
      q = bin = bin_at(idx);
  805c5c:	381690fa 	slli	r11,r7,3
  805c60:	3819883a 	mov	r12,r7
  805c64:	9ad7883a 	add	r11,r19,r11
  805c68:	5811883a 	mov	r8,r11
        for (victim = last(bin); victim != bin; victim = victim->bk)
  805c6c:	40800317 	ldw	r2,12(r8)
  805c70:	4080b526 	beq	r8,r2,805f48 <_malloc_r+0x4d4>
          victim_size = chunksize(victim);
  805c74:	10c00117 	ldw	r3,4(r2)
  805c78:	1021883a 	mov	r16,r2
            unlink(victim, bck, fwd);
  805c7c:	10800317 	ldw	r2,12(r2)
          victim_size = chunksize(victim);
  805c80:	1a86703a 	and	r3,r3,r10
          remainder_size = long_sub_size_t(victim_size, nb);
  805c84:	1c4bc83a 	sub	r5,r3,r17
          if (remainder_size >= (long)MINSIZE) /* split */
  805c88:	29800410 	cmplti	r6,r5,16
  805c8c:	3000b326 	beq	r6,zero,805f5c <_malloc_r+0x4e8>
          else if (remainder_size >= 0)  /* take */
  805c90:	283ff716 	blt	r5,zero,805c70 <_malloc_r+0x1fc>
            set_inuse_bit_at_offset(victim, victim_size);
  805c94:	80c7883a 	add	r3,r16,r3
  805c98:	19400117 	ldw	r5,4(r3)
            unlink(victim, bck, fwd);
  805c9c:	81800217 	ldw	r6,8(r16)
	    MALLOC_UNLOCK;
  805ca0:	9009883a 	mov	r4,r18
            set_inuse_bit_at_offset(victim, victim_size);
  805ca4:	29400054 	ori	r5,r5,1
  805ca8:	19400115 	stw	r5,4(r3)
            unlink(victim, bck, fwd);
  805cac:	30800315 	stw	r2,12(r6)
  805cb0:	11800215 	stw	r6,8(r2)
	    MALLOC_UNLOCK;
  805cb4:	080f2380 	call	80f238 <__malloc_unlock>
            return chunk2mem(victim);
  805cb8:	80800204 	addi	r2,r16,8
  805cbc:	00000306 	br	805ccc <_malloc_r+0x258>
    RERRNO = ENOMEM;
  805cc0:	00800304 	movi	r2,12
  805cc4:	90800015 	stw	r2,0(r18)
    return 0;
  805cc8:	0005883a 	mov	r2,zero
}
  805ccc:	dfc00917 	ldw	ra,36(sp)
  805cd0:	df000817 	ldw	fp,32(sp)
  805cd4:	ddc00717 	ldw	r23,28(sp)
  805cd8:	dd800617 	ldw	r22,24(sp)
  805cdc:	dd400517 	ldw	r21,20(sp)
  805ce0:	dd000417 	ldw	r20,16(sp)
  805ce4:	dcc00317 	ldw	r19,12(sp)
  805ce8:	dc800217 	ldw	r18,8(sp)
  805cec:	dc400117 	ldw	r17,4(sp)
  805cf0:	dc000017 	ldw	r16,0(sp)
  805cf4:	dec00a04 	addi	sp,sp,40
  805cf8:	f800283a 	ret
  805cfc:	01008004 	movi	r4,512
  805d00:	01c01004 	movi	r7,64
    idx = bin_index(nb);
  805d04:	02000fc4 	movi	r8,63
  805d08:	003f9306 	br	805b58 <_malloc_r+0xe4>
      victim = last(q);
  805d0c:	14000317 	ldw	r16,12(r2)
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
  805d10:	39c00084 	addi	r7,r7,2
    if (victim != q)
  805d14:	143f721e 	bne	r2,r16,805ae0 <_malloc_r+0x6c>
  if ( (victim = last_remainder->fd) != last_remainder)
  805d18:	9c000417 	ldw	r16,16(r19)
  805d1c:	02402074 	movhi	r9,129
  805d20:	4a485b04 	addi	r9,r9,8556
  805d24:	827fa11e 	bne	r16,r9,805bac <_malloc_r+0x138>
  if ( (block = idx2binblock(idx)) <= binblocks)  
  805d28:	3807d0ba 	srai	r3,r7,2
  805d2c:	01000044 	movi	r4,1
  805d30:	98800117 	ldw	r2,4(r19)
  805d34:	20c8983a 	sll	r4,r4,r3
  805d38:	113fbb2e 	bgeu	r2,r4,805c28 <_malloc_r+0x1b4>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  805d3c:	9c000217 	ldw	r16,8(r19)
  805d40:	00bfff04 	movi	r2,-4
  805d44:	85400117 	ldw	r21,4(r16)
  805d48:	a8ac703a 	and	r22,r21,r2
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  805d4c:	b4400336 	bltu	r22,r17,805d5c <_malloc_r+0x2e8>
  remainder_size = long_sub_size_t(chunksize(top), nb);
  805d50:	b445c83a 	sub	r2,r22,r17
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  805d54:	10c00408 	cmpgei	r3,r2,16
  805d58:	18004d1e 	bne	r3,zero,805e90 <_malloc_r+0x41c>
  if (sbrk_base != (char*)(-1))
  805d5c:	d0a00a17 	ldw	r2,-32728(gp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  805d60:	d5675717 	ldw	r21,-25252(gp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
  805d64:	85b9883a 	add	fp,r16,r22
  if (sbrk_base != (char*)(-1))
  805d68:	10bfffd8 	cmpnei	r2,r2,-1
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  805d6c:	8d6b883a 	add	r21,r17,r21
  if (sbrk_base != (char*)(-1))
  805d70:	1000d126 	beq	r2,zero,8060b8 <_malloc_r+0x644>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
  805d74:	ad4403c4 	addi	r21,r21,4111
  805d78:	00bc0004 	movi	r2,-4096
  805d7c:	a8aa703a 	and	r21,r21,r2
  brk = (char*)(MORECORE (sbrk_size));
  805d80:	a80b883a 	mov	r5,r21
  805d84:	9009883a 	mov	r4,r18
  805d88:	08085280 	call	808528 <_sbrk_r>
  805d8c:	102f883a 	mov	r23,r2
  if (brk == (char*)(MORECORE_FAILURE) || 
  805d90:	10bfffd8 	cmpnei	r2,r2,-1
  805d94:	1000a326 	beq	r2,zero,806024 <_malloc_r+0x5b0>
  805d98:	bf00a136 	bltu	r23,fp,806020 <_malloc_r+0x5ac>
  sbrked_mem += sbrk_size;
  805d9c:	00802074 	movhi	r2,129
  805da0:	15157d17 	ldw	r20,22004(r2)
  805da4:	ad29883a 	add	r20,r21,r20
  805da8:	15157d15 	stw	r20,22004(r2)
  805dac:	a007883a 	mov	r3,r20
  if (brk == old_end /* can just add bytes to current top, unless
  805db0:	e5c0e726 	beq	fp,r23,806150 <_malloc_r+0x6dc>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
  805db4:	d0a00a17 	ldw	r2,-32728(gp)
  805db8:	10bfffd8 	cmpnei	r2,r2,-1
  805dbc:	1000eb26 	beq	r2,zero,80616c <_malloc_r+0x6f8>
      sbrked_mem += brk - (char*)old_end;
  805dc0:	bf39c83a 	sub	fp,r23,fp
  805dc4:	e0c7883a 	add	r3,fp,r3
  805dc8:	00802074 	movhi	r2,129
  805dcc:	10d57d15 	stw	r3,22004(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
  805dd0:	bf0001cc 	andi	fp,r23,7
    if (front_misalign > 0) 
  805dd4:	e000c126 	beq	fp,zero,8060dc <_malloc_r+0x668>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
  805dd8:	bf2fc83a 	sub	r23,r23,fp
      brk += correction;
  805ddc:	bdc00204 	addi	r23,r23,8
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  805de0:	05040204 	movi	r20,4104
  805de4:	a729c83a 	sub	r20,r20,fp
  805de8:	bd6b883a 	add	r21,r23,r21
    correction &= (pagesz - 1);
  805dec:	a569c83a 	sub	r20,r20,r21
  805df0:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  805df4:	a00b883a 	mov	r5,r20
  805df8:	9009883a 	mov	r4,r18
  805dfc:	08085280 	call	808528 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  805e00:	10ffffe0 	cmpeqi	r3,r2,-1
  805e04:	1800ee1e 	bne	r3,zero,8061c0 <_malloc_r+0x74c>
    top_size = new_brk - brk + correction;
  805e08:	15c5c83a 	sub	r2,r2,r23
  805e0c:	152b883a 	add	r21,r2,r20
    sbrked_mem += correction;
  805e10:	00802074 	movhi	r2,129
  805e14:	11557d17 	ldw	r5,22004(r2)
    top = (mchunkptr)brk;
  805e18:	9dc00215 	stw	r23,8(r19)
    set_head(top, top_size | PREV_INUSE);
  805e1c:	ad400054 	ori	r21,r21,1
    sbrked_mem += correction;
  805e20:	a169883a 	add	r20,r20,r5
  805e24:	15157d15 	stw	r20,22004(r2)
    set_head(top, top_size | PREV_INUSE);
  805e28:	bd400115 	stw	r21,4(r23)
    if (old_top != initial_top)
  805e2c:	84c0d126 	beq	r16,r19,806174 <_malloc_r+0x700>
      if (old_top_size < MINSIZE) 
  805e30:	b0800428 	cmpgeui	r2,r22,16
  805e34:	1000d126 	beq	r2,zero,80617c <_malloc_r+0x708>
      set_head_size(old_top, old_top_size);
  805e38:	80c00117 	ldw	r3,4(r16)
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
  805e3c:	013ffe04 	movi	r4,-8
  805e40:	b0bffd04 	addi	r2,r22,-12
  805e44:	1104703a 	and	r2,r2,r4
      set_head_size(old_top, old_top_size);
  805e48:	18c0004c 	andi	r3,r3,1
  805e4c:	1886b03a 	or	r3,r3,r2
  805e50:	80c00115 	stw	r3,4(r16)
      chunk_at_offset(old_top, old_top_size          )->size =
  805e54:	01000144 	movi	r4,5
  805e58:	8087883a 	add	r3,r16,r2
  805e5c:	19000115 	stw	r4,4(r3)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
  805e60:	19000215 	stw	r4,8(r3)
      if (old_top_size >= MINSIZE) 
  805e64:	10800428 	cmpgeui	r2,r2,16
  805e68:	1000da1e 	bne	r2,zero,8061d4 <_malloc_r+0x760>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  805e6c:	bd400117 	ldw	r21,4(r23)
  805e70:	b821883a 	mov	r16,r23
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  805e74:	d0a75617 	ldw	r2,-25256(gp)
  805e78:	1500012e 	bgeu	r2,r20,805e80 <_malloc_r+0x40c>
    max_sbrked_mem = sbrked_mem;
  805e7c:	d5275615 	stw	r20,-25256(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
  805e80:	d0a75517 	ldw	r2,-25260(gp)
  805e84:	1500692e 	bgeu	r2,r20,80602c <_malloc_r+0x5b8>
    max_total_mem = sbrked_mem;
  805e88:	d5275515 	stw	r20,-25260(gp)
  805e8c:	00006706 	br	80602c <_malloc_r+0x5b8>
  set_head(victim, nb | PREV_INUSE);
  805e90:	88c00054 	ori	r3,r17,1
  805e94:	80c00115 	stw	r3,4(r16)
  top = chunk_at_offset(victim, nb);
  805e98:	8463883a 	add	r17,r16,r17
  set_head(top, remainder_size | PREV_INUSE);
  805e9c:	10800054 	ori	r2,r2,1
  top = chunk_at_offset(victim, nb);
  805ea0:	9c400215 	stw	r17,8(r19)
  set_head(top, remainder_size | PREV_INUSE);
  805ea4:	88800115 	stw	r2,4(r17)
  MALLOC_UNLOCK;
  805ea8:	9009883a 	mov	r4,r18
  805eac:	080f2380 	call	80f238 <__malloc_unlock>
  return chunk2mem(victim);
  805eb0:	80800204 	addi	r2,r16,8
  805eb4:	003f8506 	br	805ccc <_malloc_r+0x258>
        unlink(victim, bck, fwd);
  805eb8:	81000317 	ldw	r4,12(r16)
  805ebc:	003f0c06 	br	805af0 <_malloc_r+0x7c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  805ec0:	1006d27a 	srli	r3,r2,9
  805ec4:	19000168 	cmpgeui	r4,r3,5
  805ec8:	20005026 	beq	r4,zero,80600c <_malloc_r+0x598>
  805ecc:	19000568 	cmpgeui	r4,r3,21
  805ed0:	20008c1e 	bne	r4,zero,806104 <_malloc_r+0x690>
  805ed4:	19401704 	addi	r5,r3,92
  805ed8:	280a90fa 	slli	r5,r5,3
  805edc:	190016c4 	addi	r4,r3,91
  805ee0:	994b883a 	add	r5,r19,r5
  805ee4:	28c00017 	ldw	r3,0(r5)
  805ee8:	297ffe04 	addi	r5,r5,-8
  805eec:	28c07426 	beq	r5,r3,8060c0 <_malloc_r+0x64c>
  805ef0:	01bfff04 	movi	r6,-4
  805ef4:	19000117 	ldw	r4,4(r3)
  805ef8:	2188703a 	and	r4,r4,r6
  805efc:	1100022e 	bgeu	r2,r4,805f08 <_malloc_r+0x494>
  805f00:	18c00217 	ldw	r3,8(r3)
  805f04:	28fffb1e 	bne	r5,r3,805ef4 <_malloc_r+0x480>
  805f08:	19400317 	ldw	r5,12(r3)
  if ( (block = idx2binblock(idx)) <= binblocks)  
  805f0c:	98800117 	ldw	r2,4(r19)
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  805f10:	81400315 	stw	r5,12(r16)
  805f14:	80c00215 	stw	r3,8(r16)
  805f18:	2c000215 	stw	r16,8(r5)
  805f1c:	1c000315 	stw	r16,12(r3)
  805f20:	003f3d06 	br	805c18 <_malloc_r+0x1a4>
    idx = bin_index(nb);
  805f24:	10c00568 	cmpgeui	r3,r2,21
  805f28:	18004a26 	beq	r3,zero,806054 <_malloc_r+0x5e0>
  805f2c:	10c01568 	cmpgeui	r3,r2,85
  805f30:	18007b1e 	bne	r3,zero,806120 <_malloc_r+0x6ac>
  805f34:	8804d33a 	srli	r2,r17,12
    bin = bin_at(idx);
  805f38:	11c01bc4 	addi	r7,r2,111
  805f3c:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  805f40:	12001b84 	addi	r8,r2,110
  805f44:	003f0406 	br	805b58 <_malloc_r+0xe4>
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  805f48:	63000044 	addi	r12,r12,1
  805f4c:	608000cc 	andi	r2,r12,3
       bin = next_bin(bin);
  805f50:	42000204 	addi	r8,r8,8
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
  805f54:	103f451e 	bne	r2,zero,805c6c <_malloc_r+0x1f8>
  805f58:	00004506 	br	806070 <_malloc_r+0x5fc>
            unlink(victim, bck, fwd);
  805f5c:	81000217 	ldw	r4,8(r16)
            set_head(victim, nb | PREV_INUSE);
  805f60:	89800054 	ori	r6,r17,1
  805f64:	81800115 	stw	r6,4(r16)
            unlink(victim, bck, fwd);
  805f68:	20800315 	stw	r2,12(r4)
  805f6c:	11000215 	stw	r4,8(r2)
            remainder = chunk_at_offset(victim, nb);
  805f70:	8463883a 	add	r17,r16,r17
            link_last_remainder(remainder);
  805f74:	9c400515 	stw	r17,20(r19)
  805f78:	9c400415 	stw	r17,16(r19)
            set_head(remainder, remainder_size | PREV_INUSE);
  805f7c:	28800054 	ori	r2,r5,1
  805f80:	88800115 	stw	r2,4(r17)
            link_last_remainder(remainder);
  805f84:	8a400315 	stw	r9,12(r17)
  805f88:	8a400215 	stw	r9,8(r17)
            set_foot(remainder, remainder_size);
  805f8c:	80c7883a 	add	r3,r16,r3
  805f90:	19400015 	stw	r5,0(r3)
	    MALLOC_UNLOCK;
  805f94:	9009883a 	mov	r4,r18
  805f98:	080f2380 	call	80f238 <__malloc_unlock>
            return chunk2mem(victim);
  805f9c:	80800204 	addi	r2,r16,8
  805fa0:	003f4a06 	br	805ccc <_malloc_r+0x258>
    q = bin_at(idx);
  805fa4:	880ed0fa 	srli	r7,r17,3
  805fa8:	88800204 	addi	r2,r17,8
  805fac:	003ec606 	br	805ac8 <_malloc_r+0x54>
      set_inuse_bit_at_offset(victim, victim_size);
  805fb0:	8085883a 	add	r2,r16,r2
  805fb4:	10c00117 	ldw	r3,4(r2)
      MALLOC_UNLOCK;
  805fb8:	9009883a 	mov	r4,r18
      set_inuse_bit_at_offset(victim, victim_size);
  805fbc:	18c00054 	ori	r3,r3,1
  805fc0:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
  805fc4:	080f2380 	call	80f238 <__malloc_unlock>
      return chunk2mem(victim);
  805fc8:	80800204 	addi	r2,r16,8
  805fcc:	003f3f06 	br	805ccc <_malloc_r+0x258>
      set_head(victim, nb | PREV_INUSE);
  805fd0:	89000054 	ori	r4,r17,1
  805fd4:	81000115 	stw	r4,4(r16)
      remainder = chunk_at_offset(victim, nb);
  805fd8:	8463883a 	add	r17,r16,r17
      link_last_remainder(remainder);
  805fdc:	9c400515 	stw	r17,20(r19)
  805fe0:	9c400415 	stw	r17,16(r19)
      set_head(remainder, remainder_size | PREV_INUSE);
  805fe4:	19000054 	ori	r4,r3,1
  805fe8:	89000115 	stw	r4,4(r17)
      set_foot(remainder, remainder_size);
  805fec:	8085883a 	add	r2,r16,r2
      link_last_remainder(remainder);
  805ff0:	8a400315 	stw	r9,12(r17)
  805ff4:	8a400215 	stw	r9,8(r17)
      set_foot(remainder, remainder_size);
  805ff8:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
  805ffc:	9009883a 	mov	r4,r18
  806000:	080f2380 	call	80f238 <__malloc_unlock>
      return chunk2mem(victim);
  806004:	80800204 	addi	r2,r16,8
  806008:	003f3006 	br	805ccc <_malloc_r+0x258>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  80600c:	1006d1ba 	srli	r3,r2,6
  806010:	19400e44 	addi	r5,r3,57
  806014:	280a90fa 	slli	r5,r5,3
  806018:	19000e04 	addi	r4,r3,56
  80601c:	003fb006 	br	805ee0 <_malloc_r+0x46c>
      (brk < old_end && old_top != initial_top))
  806020:	84c04626 	beq	r16,r19,80613c <_malloc_r+0x6c8>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  806024:	9c000217 	ldw	r16,8(r19)
  806028:	85400117 	ldw	r21,4(r16)
  80602c:	00bfff04 	movi	r2,-4
  806030:	a8aa703a 	and	r21,r21,r2
  806034:	ac45c83a 	sub	r2,r21,r17
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  806038:	ac400236 	bltu	r21,r17,806044 <_malloc_r+0x5d0>
  80603c:	10c00408 	cmpgei	r3,r2,16
  806040:	183f931e 	bne	r3,zero,805e90 <_malloc_r+0x41c>
      MALLOC_UNLOCK;
  806044:	9009883a 	mov	r4,r18
  806048:	080f2380 	call	80f238 <__malloc_unlock>
      return 0; /* propagate failure */
  80604c:	0005883a 	mov	r2,zero
  806050:	003f1e06 	br	805ccc <_malloc_r+0x258>
    bin = bin_at(idx);
  806054:	11c01704 	addi	r7,r2,92
  806058:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  80605c:	120016c4 	addi	r8,r2,91
  806060:	003ebd06 	br	805b58 <_malloc_r+0xe4>
      } while (first(q) == q);
  806064:	58800217 	ldw	r2,8(r11)
        --startidx;
  806068:	39ffffc4 	addi	r7,r7,-1
      } while (first(q) == q);
  80606c:	12c06f1e 	bne	r2,r11,80622c <_malloc_r+0x7b8>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  806070:	388000cc 	andi	r2,r7,3
       q = prev_bin(q);
  806074:	5afffe04 	addi	r11,r11,-8
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
  806078:	103ffa1e 	bne	r2,zero,806064 <_malloc_r+0x5f0>
          binblocks &= ~block;
  80607c:	98c00117 	ldw	r3,4(r19)
  806080:	0104303a 	nor	r2,zero,r4
  806084:	10c4703a 	and	r2,r2,r3
  806088:	98800115 	stw	r2,4(r19)
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  80608c:	2109883a 	add	r4,r4,r4
  806090:	113f2a36 	bltu	r2,r4,805d3c <_malloc_r+0x2c8>
  806094:	203f2926 	beq	r4,zero,805d3c <_malloc_r+0x2c8>
        while ((block & binblocks) == 0)
  806098:	2086703a 	and	r3,r4,r2
  80609c:	1800041e 	bne	r3,zero,8060b0 <_malloc_r+0x63c>
          block <<= 1;
  8060a0:	2109883a 	add	r4,r4,r4
        while ((block & binblocks) == 0)
  8060a4:	2086703a 	and	r3,r4,r2
          idx += BINBLOCKWIDTH;
  8060a8:	63000104 	addi	r12,r12,4
        while ((block & binblocks) == 0)
  8060ac:	183ffc26 	beq	r3,zero,8060a0 <_malloc_r+0x62c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8060b0:	600f883a 	mov	r7,r12
  8060b4:	003ee906 	br	805c5c <_malloc_r+0x1e8>
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
  8060b8:	ad400404 	addi	r21,r21,16
  8060bc:	003f3006 	br	805d80 <_malloc_r+0x30c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8060c0:	2009d0ba 	srai	r4,r4,2
  8060c4:	00800044 	movi	r2,1
  8060c8:	99800117 	ldw	r6,4(r19)
  8060cc:	1104983a 	sll	r2,r2,r4
  8060d0:	1184b03a 	or	r2,r2,r6
  8060d4:	98800115 	stw	r2,4(r19)
  8060d8:	003f8d06 	br	805f10 <_malloc_r+0x49c>
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
  8060dc:	bd69883a 	add	r20,r23,r21
  8060e0:	0529c83a 	sub	r20,zero,r20
  8060e4:	a503ffcc 	andi	r20,r20,4095
    new_brk = (char*)(MORECORE (correction));
  8060e8:	a00b883a 	mov	r5,r20
  8060ec:	9009883a 	mov	r4,r18
  8060f0:	08085280 	call	808528 <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
  8060f4:	10ffffe0 	cmpeqi	r3,r2,-1
  8060f8:	183f4326 	beq	r3,zero,805e08 <_malloc_r+0x394>
	correction = 0;
  8060fc:	0029883a 	mov	r20,zero
  806100:	003f4306 	br	805e10 <_malloc_r+0x39c>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  806104:	19001568 	cmpgeui	r4,r3,85
  806108:	20001f1e 	bne	r4,zero,806188 <_malloc_r+0x714>
  80610c:	1006d33a 	srli	r3,r2,12
  806110:	19401bc4 	addi	r5,r3,111
  806114:	280a90fa 	slli	r5,r5,3
  806118:	19001b84 	addi	r4,r3,110
  80611c:	003f7006 	br	805ee0 <_malloc_r+0x46c>
    idx = bin_index(nb);
  806120:	10c05568 	cmpgeui	r3,r2,341
  806124:	18001f1e 	bne	r3,zero,8061a4 <_malloc_r+0x730>
  806128:	8804d3fa 	srli	r2,r17,15
    bin = bin_at(idx);
  80612c:	11c01e04 	addi	r7,r2,120
  806130:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  806134:	12001dc4 	addi	r8,r2,119
  806138:	003e8706 	br	805b58 <_malloc_r+0xe4>
  sbrked_mem += sbrk_size;
  80613c:	00802074 	movhi	r2,129
  806140:	10d57d17 	ldw	r3,22004(r2)
  806144:	a8c7883a 	add	r3,r21,r3
  806148:	10d57d15 	stw	r3,22004(r2)
  if (brk == old_end /* can just add bytes to current top, unless
  80614c:	003f1906 	br	805db4 <_malloc_r+0x340>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  806150:	e083ffcc 	andi	r2,fp,4095
  806154:	103f171e 	bne	r2,zero,805db4 <_malloc_r+0x340>
    set_head(top, top_size | PREV_INUSE);
  806158:	9c000217 	ldw	r16,8(r19)
    top_size = sbrk_size + old_top_size;
  80615c:	b56b883a 	add	r21,r22,r21
    set_head(top, top_size | PREV_INUSE);
  806160:	ad400054 	ori	r21,r21,1
  806164:	85400115 	stw	r21,4(r16)
  806168:	003f4206 	br	805e74 <_malloc_r+0x400>
      sbrk_base = brk;
  80616c:	d5e00a15 	stw	r23,-32728(gp)
  806170:	003f1706 	br	805dd0 <_malloc_r+0x35c>
  806174:	b821883a 	mov	r16,r23
  806178:	003f3e06 	br	805e74 <_malloc_r+0x400>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
  80617c:	00800044 	movi	r2,1
  806180:	b8800115 	stw	r2,4(r23)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
  806184:	003faf06 	br	806044 <_malloc_r+0x5d0>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  806188:	19005568 	cmpgeui	r4,r3,341
  80618c:	2000191e 	bne	r4,zero,8061f4 <_malloc_r+0x780>
  806190:	1006d3fa 	srli	r3,r2,15
  806194:	19401e04 	addi	r5,r3,120
  806198:	280a90fa 	slli	r5,r5,3
  80619c:	19001dc4 	addi	r4,r3,119
  8061a0:	003f4f06 	br	805ee0 <_malloc_r+0x46c>
    idx = bin_index(nb);
  8061a4:	10815568 	cmpgeui	r2,r2,1365
  8061a8:	1000191e 	bne	r2,zero,806210 <_malloc_r+0x79c>
  8061ac:	8804d4ba 	srli	r2,r17,18
    bin = bin_at(idx);
  8061b0:	11c01f44 	addi	r7,r2,125
  8061b4:	380890fa 	slli	r4,r7,3
    idx = bin_index(nb);
  8061b8:	12001f04 	addi	r8,r2,124
  8061bc:	003e6606 	br	805b58 <_malloc_r+0xe4>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
  8061c0:	e73ffe04 	addi	fp,fp,-8
  8061c4:	af2b883a 	add	r21,r21,fp
    top_size = new_brk - brk + correction;
  8061c8:	adebc83a 	sub	r21,r21,r23
	correction = 0;
  8061cc:	0029883a 	mov	r20,zero
  8061d0:	003f0f06 	br	805e10 <_malloc_r+0x39c>
        fREe(RCALL chunk2mem(old_top));
  8061d4:	81400204 	addi	r5,r16,8
  8061d8:	9009883a 	mov	r4,r18
  8061dc:	0804df80 	call	804df8 <_free_r>
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8061e0:	9c000217 	ldw	r16,8(r19)
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
  8061e4:	00802074 	movhi	r2,129
  8061e8:	15157d17 	ldw	r20,22004(r2)
    remainder_size = long_sub_size_t(chunksize(top), nb);
  8061ec:	85400117 	ldw	r21,4(r16)
  8061f0:	003f2006 	br	805e74 <_malloc_r+0x400>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  8061f4:	18c15568 	cmpgeui	r3,r3,1365
  8061f8:	1800091e 	bne	r3,zero,806220 <_malloc_r+0x7ac>
  8061fc:	1006d4ba 	srli	r3,r2,18
  806200:	19401f44 	addi	r5,r3,125
  806204:	280a90fa 	slli	r5,r5,3
  806208:	19001f04 	addi	r4,r3,124
  80620c:	003f3406 	br	805ee0 <_malloc_r+0x46c>
  806210:	0100fe04 	movi	r4,1016
  806214:	01c01fc4 	movi	r7,127
    idx = bin_index(nb);
  806218:	02001f84 	movi	r8,126
  80621c:	003e4e06 	br	805b58 <_malloc_r+0xe4>
  806220:	0140fe04 	movi	r5,1016
    frontlink(victim, victim_size, remainder_index, bck, fwd);
  806224:	01001f84 	movi	r4,126
  806228:	003f2d06 	br	805ee0 <_malloc_r+0x46c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
  80622c:	98800117 	ldw	r2,4(r19)
  806230:	003f9606 	br	80608c <_malloc_r+0x618>

00806234 <_mbtowc_r>:
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
  return __MBTOWC (r, pwc, s, n, state);
  806234:	00802074 	movhi	r2,129
  806238:	10883717 	ldw	r2,8412(r2)
  80623c:	1000683a 	jmp	r2

00806240 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
  806240:	deffff04 	addi	sp,sp,-4
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;

  if (pwc == NULL)
  806244:	28000826 	beq	r5,zero,806268 <__ascii_mbtowc+0x28>
    pwc = &dummy;

  if (s == NULL)
  806248:	30000926 	beq	r6,zero,806270 <__ascii_mbtowc+0x30>
    return 0;

  if (n == 0)
  80624c:	38000b26 	beq	r7,zero,80627c <__ascii_mbtowc+0x3c>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
  806250:	30800003 	ldbu	r2,0(r6)
  806254:	28800015 	stw	r2,0(r5)
  
  if (*t == '\0')
  806258:	30800003 	ldbu	r2,0(r6)
  80625c:	1004c03a 	cmpne	r2,r2,zero
    return 0;

  return 1;
}
  806260:	dec00104 	addi	sp,sp,4
  806264:	f800283a 	ret
    pwc = &dummy;
  806268:	d80b883a 	mov	r5,sp
  if (s == NULL)
  80626c:	303ff71e 	bne	r6,zero,80624c <__ascii_mbtowc+0xc>
    return 0;
  806270:	0005883a 	mov	r2,zero
}
  806274:	dec00104 	addi	sp,sp,4
  806278:	f800283a 	ret
    return -2;
  80627c:	00bfff84 	movi	r2,-2
  806280:	003ff706 	br	806260 <__ascii_mbtowc+0x20>

00806284 <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
  806284:	208000cc 	andi	r2,r4,3
  unsigned char d = c;
  806288:	280f883a 	mov	r7,r5
  while (UNALIGNED (src))
  80628c:	10000e26 	beq	r2,zero,8062c8 <memchr+0x44>
    {
      if (!length--)
  806290:	30bfffc4 	addi	r2,r6,-1
  806294:	30001726 	beq	r6,zero,8062f4 <memchr+0x70>
  806298:	29803fcc 	andi	r6,r5,255
  80629c:	00000606 	br	8062b8 <memchr+0x34>
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
  8062a0:	21000044 	addi	r4,r4,1
  while (UNALIGNED (src))
  8062a4:	20c000cc 	andi	r3,r4,3
  8062a8:	18000826 	beq	r3,zero,8062cc <memchr+0x48>
      if (!length--)
  8062ac:	10bfffc4 	addi	r2,r2,-1
  8062b0:	10ffffe0 	cmpeqi	r3,r2,-1
  8062b4:	18000f1e 	bne	r3,zero,8062f4 <memchr+0x70>
      if (*src == d)
  8062b8:	20c00003 	ldbu	r3,0(r4)
  8062bc:	19bff81e 	bne	r3,r6,8062a0 <memchr+0x1c>
  8062c0:	2005883a 	mov	r2,r4
        return (void *) src;
      src++;
    }

  return NULL;
}
  8062c4:	f800283a 	ret
  while (UNALIGNED (src))
  8062c8:	3005883a 	mov	r2,r6
  if (!TOO_SMALL (length))
  8062cc:	10c00128 	cmpgeui	r3,r2,4
  8062d0:	18000a1e 	bne	r3,zero,8062fc <memchr+0x78>
  while (length--)
  8062d4:	10001e26 	beq	r2,zero,806350 <memchr+0xcc>
  8062d8:	2087883a 	add	r3,r4,r2
  8062dc:	39803fcc 	andi	r6,r7,255
  while (UNALIGNED (src))
  8062e0:	2005883a 	mov	r2,r4
      if (*src == d)
  8062e4:	11000003 	ldbu	r4,0(r2)
  8062e8:	21bff626 	beq	r4,r6,8062c4 <memchr+0x40>
      src++;
  8062ec:	10800044 	addi	r2,r2,1
  while (length--)
  8062f0:	10fffc1e 	bne	r2,r3,8062e4 <memchr+0x60>
        return NULL;
  8062f4:	0005883a 	mov	r2,zero
  8062f8:	f800283a 	ret
      mask = d << 8 | d;
  8062fc:	29403fcc 	andi	r5,r5,255
  806300:	280c923a 	slli	r6,r5,8
          if (DETECTCHAR (*asrc, mask))
  806304:	027fbff4 	movhi	r9,65279
  806308:	02202074 	movhi	r8,32897
      mask = d << 8 | d;
  80630c:	314ab03a 	or	r5,r6,r5
      mask = mask << 16 | mask;
  806310:	280c943a 	slli	r6,r5,16
          if (DETECTCHAR (*asrc, mask))
  806314:	4a7fbfc4 	addi	r9,r9,-257
  806318:	42202004 	addi	r8,r8,-32640
      mask = mask << 16 | mask;
  80631c:	314cb03a 	or	r6,r6,r5
          if (DETECTCHAR (*asrc, mask))
  806320:	20c00017 	ldw	r3,0(r4)
  806324:	30c6f03a 	xor	r3,r6,r3
  806328:	1a4b883a 	add	r5,r3,r9
  80632c:	00c6303a 	nor	r3,zero,r3
  806330:	28c6703a 	and	r3,r5,r3
  806334:	1a06703a 	and	r3,r3,r8
  806338:	183fe71e 	bne	r3,zero,8062d8 <memchr+0x54>
          length -= LBLOCKSIZE;
  80633c:	10bfff04 	addi	r2,r2,-4
      while (length >= LBLOCKSIZE)
  806340:	10c00128 	cmpgeui	r3,r2,4
          asrc++;
  806344:	21000104 	addi	r4,r4,4
      while (length >= LBLOCKSIZE)
  806348:	183ff51e 	bne	r3,zero,806320 <memchr+0x9c>
  80634c:	003fe106 	br	8062d4 <memchr+0x50>
  806350:	f800283a 	ret

00806354 <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  806354:	30c00430 	cmpltui	r3,r6,16
{
  806358:	2005883a 	mov	r2,r4
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
  80635c:	18002e1e 	bne	r3,zero,806418 <memcpy+0xc4>
  806360:	2906b03a 	or	r3,r5,r4
  806364:	18c000cc 	andi	r3,r3,3
  806368:	1800501e 	bne	r3,zero,8064ac <memcpy+0x158>
  80636c:	333ffc04 	addi	r12,r6,-16
  806370:	6018d13a 	srli	r12,r12,4
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;
  806374:	280f883a 	mov	r7,r5
      aligned_dst = (long*)dst;
  806378:	2007883a 	mov	r3,r4
  80637c:	63000044 	addi	r12,r12,1
  806380:	6018913a 	slli	r12,r12,4
  806384:	2317883a 	add	r11,r4,r12

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
  806388:	3a800117 	ldw	r10,4(r7)
  80638c:	3a000217 	ldw	r8,8(r7)
  806390:	39000317 	ldw	r4,12(r7)
  806394:	3a400017 	ldw	r9,0(r7)
  806398:	18c00404 	addi	r3,r3,16
  80639c:	1abffd15 	stw	r10,-12(r3)
  8063a0:	1a7ffc15 	stw	r9,-16(r3)
  8063a4:	1a3ffe15 	stw	r8,-8(r3)
  8063a8:	193fff15 	stw	r4,-4(r3)
  8063ac:	39c00404 	addi	r7,r7,16
      while (len0 >= BIGBLOCKSIZE)
  8063b0:	58fff51e 	bne	r11,r3,806388 <memcpy+0x34>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
  8063b4:	3100030c 	andi	r4,r6,12
          *aligned_dst++ = *aligned_src++;
  8063b8:	2b0b883a 	add	r5,r5,r12
          len0 -= BIGBLOCKSIZE;
  8063bc:	31c003cc 	andi	r7,r6,15
      while (len0 >= LITTLEBLOCKSIZE)
  8063c0:	20003d26 	beq	r4,zero,8064b8 <memcpy+0x164>
        {
          *aligned_dst++ = *aligned_src++;
  8063c4:	2a400017 	ldw	r9,0(r5)
          len0 -= LITTLEBLOCKSIZE;
  8063c8:	393fff04 	addi	r4,r7,-4
      while (len0 >= LITTLEBLOCKSIZE)
  8063cc:	22000130 	cmpltui	r8,r4,4
          *aligned_dst++ = *aligned_src++;
  8063d0:	1a400015 	stw	r9,0(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  8063d4:	4000071e 	bne	r8,zero,8063f4 <memcpy+0xa0>
          *aligned_dst++ = *aligned_src++;
  8063d8:	2a000117 	ldw	r8,4(r5)
          len0 -= LITTLEBLOCKSIZE;
  8063dc:	39fffe04 	addi	r7,r7,-8
      while (len0 >= LITTLEBLOCKSIZE)
  8063e0:	39c00130 	cmpltui	r7,r7,4
          *aligned_dst++ = *aligned_src++;
  8063e4:	1a000115 	stw	r8,4(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  8063e8:	3800021e 	bne	r7,zero,8063f4 <memcpy+0xa0>
          *aligned_dst++ = *aligned_src++;
  8063ec:	29c00217 	ldw	r7,8(r5)
  8063f0:	19c00215 	stw	r7,8(r3)
      while (len0 >= LITTLEBLOCKSIZE)
  8063f4:	2008d0ba 	srli	r4,r4,2
          len0 -= LITTLEBLOCKSIZE;
  8063f8:	318000cc 	andi	r6,r6,3
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
  8063fc:	32bfffc4 	addi	r10,r6,-1
  806400:	21000044 	addi	r4,r4,1
  806404:	200890ba 	slli	r4,r4,2
          *aligned_dst++ = *aligned_src++;
  806408:	1907883a 	add	r3,r3,r4
  80640c:	290b883a 	add	r5,r5,r4
  while (len0--)
  806410:	3000041e 	bne	r6,zero,806424 <memcpy+0xd0>
  806414:	f800283a 	ret
  char *dst = dst0;
  806418:	2007883a 	mov	r3,r4
  while (len0--)
  80641c:	32bfffc4 	addi	r10,r6,-1
  806420:	303ffc26 	beq	r6,zero,806414 <memcpy+0xc0>
  806424:	28c8b03a 	or	r4,r5,r3
  806428:	210000cc 	andi	r4,r4,3
  80642c:	2000241e 	bne	r4,zero,8064c0 <memcpy+0x16c>
  806430:	51000228 	cmpgeui	r4,r10,8
  806434:	20002226 	beq	r4,zero,8064c0 <memcpy+0x16c>
  806438:	527fff44 	addi	r9,r10,-3
  80643c:	4812d0ba 	srli	r9,r9,2
  806440:	51000044 	addi	r4,r10,1
  806444:	2811883a 	mov	r8,r5
  806448:	4a400044 	addi	r9,r9,1
  80644c:	180f883a 	mov	r7,r3
  char *dst = dst0;
  806450:	000d883a 	mov	r6,zero
    *dst++ = *src++;
  806454:	42c00017 	ldw	r11,0(r8)
  806458:	31800044 	addi	r6,r6,1
  80645c:	42000104 	addi	r8,r8,4
  806460:	3ac00015 	stw	r11,0(r7)
  while (len0--)
  806464:	39c00104 	addi	r7,r7,4
  806468:	327ffa36 	bltu	r6,r9,806454 <memcpy+0x100>
  80646c:	481290ba 	slli	r9,r9,2
  806470:	1a47883a 	add	r3,r3,r9
  806474:	2a4b883a 	add	r5,r5,r9
  806478:	5255c83a 	sub	r10,r10,r9
  80647c:	22400a26 	beq	r4,r9,8064a8 <memcpy+0x154>
    *dst++ = *src++;
  806480:	29000003 	ldbu	r4,0(r5)
  806484:	19000005 	stb	r4,0(r3)
  while (len0--)
  806488:	50000726 	beq	r10,zero,8064a8 <memcpy+0x154>
    *dst++ = *src++;
  80648c:	29000043 	ldbu	r4,1(r5)
  while (len0--)
  806490:	52800060 	cmpeqi	r10,r10,1
    *dst++ = *src++;
  806494:	19000045 	stb	r4,1(r3)
  while (len0--)
  806498:	5000031e 	bne	r10,zero,8064a8 <memcpy+0x154>
    *dst++ = *src++;
  80649c:	29000083 	ldbu	r4,2(r5)
  8064a0:	19000085 	stb	r4,2(r3)
  while (len0--)
  8064a4:	f800283a 	ret

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  8064a8:	f800283a 	ret
  while (len0--)
  8064ac:	32bfffc4 	addi	r10,r6,-1
  char *dst = dst0;
  8064b0:	2007883a 	mov	r3,r4
  8064b4:	003fdb06 	br	806424 <memcpy+0xd0>
      while (len0 >= LITTLEBLOCKSIZE)
  8064b8:	380d883a 	mov	r6,r7
  8064bc:	003fd706 	br	80641c <memcpy+0xc8>
  8064c0:	52800044 	addi	r10,r10,1
  8064c4:	1a95883a 	add	r10,r3,r10
    *dst++ = *src++;
  8064c8:	29000003 	ldbu	r4,0(r5)
  8064cc:	18c00044 	addi	r3,r3,1
  8064d0:	29400044 	addi	r5,r5,1
  8064d4:	193fffc5 	stb	r4,-1(r3)
  while (len0--)
  8064d8:	50fffb1e 	bne	r10,r3,8064c8 <memcpy+0x174>
  8064dc:	f800283a 	ret

008064e0 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
  8064e0:	2005883a 	mov	r2,r4
  char *dst = dst_void;
  const char *src = src_void;
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
  8064e4:	29000a2e 	bgeu	r5,r4,806510 <memmove+0x30>
  8064e8:	2989883a 	add	r4,r5,r6
  8064ec:	1100082e 	bgeu	r2,r4,806510 <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
  8064f0:	1187883a 	add	r3,r2,r6
      while (length--)
  8064f4:	30006426 	beq	r6,zero,806688 <memmove+0x1a8>
	{
	  *--dst = *--src;
  8064f8:	217fffc3 	ldbu	r5,-1(r4)
  8064fc:	18ffffc4 	addi	r3,r3,-1
  806500:	213fffc4 	addi	r4,r4,-1
  806504:	19400005 	stb	r5,0(r3)
      while (length--)
  806508:	10fffb1e 	bne	r2,r3,8064f8 <memmove+0x18>
  80650c:	f800283a 	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  806510:	30c00430 	cmpltui	r3,r6,16
  806514:	18002926 	beq	r3,zero,8065bc <memmove+0xdc>
  806518:	1007883a 	mov	r3,r2
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
  80651c:	32bfffc4 	addi	r10,r6,-1
  806520:	30005d26 	beq	r6,zero,806698 <memmove+0x1b8>
  806524:	1948b03a 	or	r4,r3,r5
  806528:	29800044 	addi	r6,r5,1
  80652c:	210000cc 	andi	r4,r4,3
  806530:	198fc83a 	sub	r7,r3,r6
  806534:	2009003a 	cmpeq	r4,r4,zero
  806538:	39c000e8 	cmpgeui	r7,r7,3
  80653c:	21c8703a 	and	r4,r4,r7
  806540:	20004a26 	beq	r4,zero,80666c <memmove+0x18c>
  806544:	51000268 	cmpgeui	r4,r10,9
  806548:	20004826 	beq	r4,zero,80666c <memmove+0x18c>
  80654c:	527fff44 	addi	r9,r10,-3
  806550:	4812d0ba 	srli	r9,r9,2
  806554:	52c00044 	addi	r11,r10,1
  806558:	2811883a 	mov	r8,r5
  80655c:	4a400044 	addi	r9,r9,1
  806560:	180f883a 	mov	r7,r3
  806564:	000d883a 	mov	r6,zero
        {
          *dst++ = *src++;
  806568:	41000017 	ldw	r4,0(r8)
  80656c:	31800044 	addi	r6,r6,1
  806570:	42000104 	addi	r8,r8,4
  806574:	39000015 	stw	r4,0(r7)
      while (length--)
  806578:	39c00104 	addi	r7,r7,4
  80657c:	327ffa36 	bltu	r6,r9,806568 <memmove+0x88>
  806580:	481290ba 	slli	r9,r9,2
  806584:	1a47883a 	add	r3,r3,r9
  806588:	2a4b883a 	add	r5,r5,r9
  80658c:	5249c83a 	sub	r4,r10,r9
  806590:	5a403d26 	beq	r11,r9,806688 <memmove+0x1a8>
          *dst++ = *src++;
  806594:	29800003 	ldbu	r6,0(r5)
  806598:	19800005 	stb	r6,0(r3)
      while (length--)
  80659c:	20003a26 	beq	r4,zero,806688 <memmove+0x1a8>
          *dst++ = *src++;
  8065a0:	29800043 	ldbu	r6,1(r5)
      while (length--)
  8065a4:	21000060 	cmpeqi	r4,r4,1
          *dst++ = *src++;
  8065a8:	19800045 	stb	r6,1(r3)
      while (length--)
  8065ac:	2000361e 	bne	r4,zero,806688 <memmove+0x1a8>
          *dst++ = *src++;
  8065b0:	29000083 	ldbu	r4,2(r5)
  8065b4:	19000085 	stb	r4,2(r3)
      while (length--)
  8065b8:	f800283a 	ret
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
  8065bc:	2886b03a 	or	r3,r5,r2
  8065c0:	18c000cc 	andi	r3,r3,3
  8065c4:	1800311e 	bne	r3,zero,80668c <memmove+0x1ac>
  8065c8:	327ffc04 	addi	r9,r6,-16
  8065cc:	4812d13a 	srli	r9,r9,4
  8065d0:	280f883a 	mov	r7,r5
  8065d4:	1007883a 	mov	r3,r2
  8065d8:	4a400044 	addi	r9,r9,1
  8065dc:	4812913a 	slli	r9,r9,4
  8065e0:	1251883a 	add	r8,r2,r9
              *aligned_dst++ = *aligned_src++;
  8065e4:	39000017 	ldw	r4,0(r7)
  8065e8:	39c00404 	addi	r7,r7,16
  8065ec:	18c00404 	addi	r3,r3,16
  8065f0:	193ffc15 	stw	r4,-16(r3)
              *aligned_dst++ = *aligned_src++;
  8065f4:	393ffd17 	ldw	r4,-12(r7)
  8065f8:	193ffd15 	stw	r4,-12(r3)
              *aligned_dst++ = *aligned_src++;
  8065fc:	393ffe17 	ldw	r4,-8(r7)
  806600:	193ffe15 	stw	r4,-8(r3)
              *aligned_dst++ = *aligned_src++;
  806604:	393fff17 	ldw	r4,-4(r7)
  806608:	193fff15 	stw	r4,-4(r3)
          while (length >= BIGBLOCKSIZE)
  80660c:	40fff51e 	bne	r8,r3,8065e4 <memmove+0x104>
          while (length >= LITTLEBLOCKSIZE)
  806610:	3100030c 	andi	r4,r6,12
              *aligned_dst++ = *aligned_src++;
  806614:	2a4b883a 	add	r5,r5,r9
              length -= BIGBLOCKSIZE;
  806618:	31c003cc 	andi	r7,r6,15
          while (length >= LITTLEBLOCKSIZE)
  80661c:	20001f26 	beq	r4,zero,80669c <memmove+0x1bc>
              *aligned_dst++ = *aligned_src++;
  806620:	2a400017 	ldw	r9,0(r5)
              length -= LITTLEBLOCKSIZE;
  806624:	393fff04 	addi	r4,r7,-4
          while (length >= LITTLEBLOCKSIZE)
  806628:	22000130 	cmpltui	r8,r4,4
              *aligned_dst++ = *aligned_src++;
  80662c:	1a400015 	stw	r9,0(r3)
          while (length >= LITTLEBLOCKSIZE)
  806630:	4000071e 	bne	r8,zero,806650 <memmove+0x170>
              *aligned_dst++ = *aligned_src++;
  806634:	2a000117 	ldw	r8,4(r5)
              length -= LITTLEBLOCKSIZE;
  806638:	39fffe04 	addi	r7,r7,-8
          while (length >= LITTLEBLOCKSIZE)
  80663c:	39c00130 	cmpltui	r7,r7,4
              *aligned_dst++ = *aligned_src++;
  806640:	1a000115 	stw	r8,4(r3)
          while (length >= LITTLEBLOCKSIZE)
  806644:	3800021e 	bne	r7,zero,806650 <memmove+0x170>
              *aligned_dst++ = *aligned_src++;
  806648:	29c00217 	ldw	r7,8(r5)
  80664c:	19c00215 	stw	r7,8(r3)
          while (length >= LITTLEBLOCKSIZE)
  806650:	2008d0ba 	srli	r4,r4,2
              length -= LITTLEBLOCKSIZE;
  806654:	318000cc 	andi	r6,r6,3
  806658:	21000044 	addi	r4,r4,1
  80665c:	200890ba 	slli	r4,r4,2
              *aligned_dst++ = *aligned_src++;
  806660:	1907883a 	add	r3,r3,r4
  806664:	290b883a 	add	r5,r5,r4
  806668:	003fac06 	br	80651c <memmove+0x3c>
  80666c:	52800044 	addi	r10,r10,1
  806670:	1a95883a 	add	r10,r3,r10
          *dst++ = *src++;
  806674:	313fffc3 	ldbu	r4,-1(r6)
  806678:	18c00044 	addi	r3,r3,1
  80667c:	31800044 	addi	r6,r6,1
  806680:	193fffc5 	stb	r4,-1(r3)
      while (length--)
  806684:	1abffb1e 	bne	r3,r10,806674 <memmove+0x194>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  806688:	f800283a 	ret
      while (length--)
  80668c:	32bfffc4 	addi	r10,r6,-1
  806690:	1007883a 	mov	r3,r2
  806694:	003fa306 	br	806524 <memmove+0x44>
  806698:	f800283a 	ret
          while (length >= LITTLEBLOCKSIZE)
  80669c:	380d883a 	mov	r6,r7
  8066a0:	003f9e06 	br	80651c <memmove+0x3c>

008066a4 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
  8066a4:	20c000cc 	andi	r3,r4,3
{
  8066a8:	2005883a 	mov	r2,r4
  while (UNALIGNED (s))
  8066ac:	18003a26 	beq	r3,zero,806798 <memset+0xf4>
    {
      if (n--)
  8066b0:	31ffffc4 	addi	r7,r6,-1
  8066b4:	30003726 	beq	r6,zero,806794 <memset+0xf0>
        *s++ = (char) c;
  8066b8:	2811883a 	mov	r8,r5
  char *s = (char *) m;
  8066bc:	2007883a 	mov	r3,r4
  8066c0:	00000306 	br	8066d0 <memset+0x2c>
      if (n--)
  8066c4:	39ffffc4 	addi	r7,r7,-1
  8066c8:	39bfffe0 	cmpeqi	r6,r7,-1
  8066cc:	3000311e 	bne	r6,zero,806794 <memset+0xf0>
        *s++ = (char) c;
  8066d0:	18c00044 	addi	r3,r3,1
  while (UNALIGNED (s))
  8066d4:	198000cc 	andi	r6,r3,3
        *s++ = (char) c;
  8066d8:	1a3fffc5 	stb	r8,-1(r3)
  while (UNALIGNED (s))
  8066dc:	303ff91e 	bne	r6,zero,8066c4 <memset+0x20>
      else
        return m;
    }

  if (!TOO_SMALL (n))
  8066e0:	39000130 	cmpltui	r4,r7,4
  8066e4:	2000231e 	bne	r4,zero,806774 <memset+0xd0>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
  8066e8:	29003fcc 	andi	r4,r5,255
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
  8066ec:	200c923a 	slli	r6,r4,8
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
  8066f0:	3a000430 	cmpltui	r8,r7,16
      buffer = (d << 8) | d;
  8066f4:	3108b03a 	or	r4,r6,r4
      buffer |= (buffer << 16);
  8066f8:	200c943a 	slli	r6,r4,16
  8066fc:	310cb03a 	or	r6,r6,r4
      while (n >= LBLOCKSIZE*4)
  806700:	40000e1e 	bne	r8,zero,80673c <memset+0x98>
  806704:	393ffc04 	addi	r4,r7,-16
  806708:	2008d13a 	srli	r4,r4,4
  80670c:	21000044 	addi	r4,r4,1
  806710:	2008913a 	slli	r4,r4,4
  806714:	1909883a 	add	r4,r3,r4
        {
          *aligned_addr++ = buffer;
  806718:	19800015 	stw	r6,0(r3)
          *aligned_addr++ = buffer;
  80671c:	19800115 	stw	r6,4(r3)
          *aligned_addr++ = buffer;
  806720:	19800215 	stw	r6,8(r3)
          *aligned_addr++ = buffer;
  806724:	19800315 	stw	r6,12(r3)
  806728:	18c00404 	addi	r3,r3,16
      while (n >= LBLOCKSIZE*4)
  80672c:	20fffa1e 	bne	r4,r3,806718 <memset+0x74>
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
  806730:	3900030c 	andi	r4,r7,12
          n -= 4*LBLOCKSIZE;
  806734:	39c003cc 	andi	r7,r7,15
      while (n >= LBLOCKSIZE)
  806738:	20000e26 	beq	r4,zero,806774 <memset+0xd0>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
  80673c:	393fff04 	addi	r4,r7,-4
          *aligned_addr++ = buffer;
  806740:	19800015 	stw	r6,0(r3)
      while (n >= LBLOCKSIZE)
  806744:	22000130 	cmpltui	r8,r4,4
  806748:	4000051e 	bne	r8,zero,806760 <memset+0xbc>
          n -= LBLOCKSIZE;
  80674c:	3a3ffe04 	addi	r8,r7,-8
          *aligned_addr++ = buffer;
  806750:	19800115 	stw	r6,4(r3)
      while (n >= LBLOCKSIZE)
  806754:	42000130 	cmpltui	r8,r8,4
  806758:	4000011e 	bne	r8,zero,806760 <memset+0xbc>
          *aligned_addr++ = buffer;
  80675c:	19800215 	stw	r6,8(r3)
  806760:	2008d0ba 	srli	r4,r4,2
          n -= LBLOCKSIZE;
  806764:	39c000cc 	andi	r7,r7,3
          *aligned_addr++ = buffer;
  806768:	21000044 	addi	r4,r4,1
  80676c:	200890ba 	slli	r4,r4,2
  806770:	1907883a 	add	r3,r3,r4
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
  806774:	38000726 	beq	r7,zero,806794 <memset+0xf0>
    *s++ = (char) c;
  806778:	19400005 	stb	r5,0(r3)
  while (n--)
  80677c:	39000058 	cmpnei	r4,r7,1
  806780:	20000426 	beq	r4,zero,806794 <memset+0xf0>
    *s++ = (char) c;
  806784:	19400045 	stb	r5,1(r3)
  while (n--)
  806788:	39c000a0 	cmpeqi	r7,r7,2
  80678c:	3800011e 	bne	r7,zero,806794 <memset+0xf0>
    *s++ = (char) c;
  806790:	19400085 	stb	r5,2(r3)

  return m;
}
  806794:	f800283a 	ret
  char *s = (char *) m;
  806798:	2007883a 	mov	r3,r4
  while (UNALIGNED (s))
  80679c:	300f883a 	mov	r7,r6
  8067a0:	003fcf06 	br	8066e0 <memset+0x3c>

008067a4 <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8067a4:	20801317 	ldw	r2,76(r4)
{
  8067a8:	defffc04 	addi	sp,sp,-16
  8067ac:	dc400115 	stw	r17,4(sp)
  8067b0:	dc000015 	stw	r16,0(sp)
  8067b4:	dfc00315 	stw	ra,12(sp)
  8067b8:	dc800215 	stw	r18,8(sp)
  8067bc:	2021883a 	mov	r16,r4
  8067c0:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8067c4:	10000e26 	beq	r2,zero,806800 <_Balloc+0x5c>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8067c8:	880690ba 	slli	r3,r17,2
  8067cc:	10c7883a 	add	r3,r2,r3
  8067d0:	18800017 	ldw	r2,0(r3)
  8067d4:	10001126 	beq	r2,zero,80681c <_Balloc+0x78>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8067d8:	11000017 	ldw	r4,0(r2)
  8067dc:	19000015 	stw	r4,0(r3)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
  8067e0:	10000415 	stw	zero,16(r2)
  8067e4:	10000315 	stw	zero,12(r2)
  return rv;
}
  8067e8:	dfc00317 	ldw	ra,12(sp)
  8067ec:	dc800217 	ldw	r18,8(sp)
  8067f0:	dc400117 	ldw	r17,4(sp)
  8067f4:	dc000017 	ldw	r16,0(sp)
  8067f8:	dec00404 	addi	sp,sp,16
  8067fc:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  806800:	01800844 	movi	r6,33
  806804:	01400104 	movi	r5,4
  806808:	080a35c0 	call	80a35c <_calloc_r>
  80680c:	80801315 	stw	r2,76(r16)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  806810:	103fed1e 	bne	r2,zero,8067c8 <_Balloc+0x24>
	  return NULL;
  806814:	0005883a 	mov	r2,zero
  806818:	003ff306 	br	8067e8 <_Balloc+0x44>
      x = 1 << k;
  80681c:	04800044 	movi	r18,1
  806820:	9464983a 	sll	r18,r18,r17
      rv = (_Bigint *) _calloc_r (ptr,
  806824:	01400044 	movi	r5,1
  806828:	8009883a 	mov	r4,r16
				  sizeof (_Bigint) +
  80682c:	91800144 	addi	r6,r18,5
      rv = (_Bigint *) _calloc_r (ptr,
  806830:	300c90ba 	slli	r6,r6,2
  806834:	080a35c0 	call	80a35c <_calloc_r>
      if (rv == NULL) return NULL;
  806838:	103ff626 	beq	r2,zero,806814 <_Balloc+0x70>
      rv->_k = k;
  80683c:	14400115 	stw	r17,4(r2)
      rv->_maxwds = x;
  806840:	14800215 	stw	r18,8(r2)
  806844:	003fe606 	br	8067e0 <_Balloc+0x3c>

00806848 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
  806848:	28000726 	beq	r5,zero,806868 <_Bfree+0x20>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  80684c:	28c00117 	ldw	r3,4(r5)
  806850:	20801317 	ldw	r2,76(r4)
  806854:	180690ba 	slli	r3,r3,2
  806858:	10c5883a 	add	r2,r2,r3
  80685c:	10c00017 	ldw	r3,0(r2)
  806860:	28c00015 	stw	r3,0(r5)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  806864:	11400015 	stw	r5,0(r2)
    }
}
  806868:	f800283a 	ret

0080686c <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
  80686c:	defff704 	addi	sp,sp,-36
  806870:	dc800215 	stw	r18,8(sp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  806874:	2c800417 	ldw	r18,16(r5)
{
  806878:	ddc00715 	stw	r23,28(sp)
  80687c:	dd800615 	stw	r22,24(sp)
  806880:	dd400515 	stw	r21,20(sp)
  806884:	dd000415 	stw	r20,16(sp)
  806888:	dcc00315 	stw	r19,12(sp)
  80688c:	dc400115 	stw	r17,4(sp)
  806890:	dfc00815 	stw	ra,32(sp)
  806894:	dc000015 	stw	r16,0(sp)
  806898:	2827883a 	mov	r19,r5
  80689c:	2029883a 	mov	r20,r4
  8068a0:	302b883a 	mov	r21,r6
  8068a4:	3823883a 	mov	r17,r7
  x = b->_x;
  8068a8:	2d800504 	addi	r22,r5,20
  i = 0;
  8068ac:	002f883a 	mov	r23,zero
  do
    {
#ifdef Pack_32
      xi = *x;
  8068b0:	b4000017 	ldw	r16,0(r22)
      y = (xi & 0xffff) * m + a;
  8068b4:	a80b883a 	mov	r5,r21
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
  8068b8:	b5800104 	addi	r22,r22,4
      y = (xi & 0xffff) * m + a;
  8068bc:	813fffcc 	andi	r4,r16,65535
  8068c0:	080c3e80 	call	80c3e8 <__mulsi3>
      z = (xi >> 16) * m + (y >> 16);
  8068c4:	8008d43a 	srli	r4,r16,16
  8068c8:	a80b883a 	mov	r5,r21
      y = (xi & 0xffff) * m + a;
  8068cc:	1461883a 	add	r16,r2,r17
      z = (xi >> 16) * m + (y >> 16);
  8068d0:	080c3e80 	call	80c3e8 <__mulsi3>
  8068d4:	800ed43a 	srli	r7,r16,16
      *x++ = (z << 16) + (y & 0xffff);
  8068d8:	843fffcc 	andi	r16,r16,65535
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
  8068dc:	bdc00044 	addi	r23,r23,1
      z = (xi >> 16) * m + (y >> 16);
  8068e0:	11c5883a 	add	r2,r2,r7
      *x++ = (z << 16) + (y & 0xffff);
  8068e4:	1006943a 	slli	r3,r2,16
      a = (int) (z >> 16);
  8068e8:	1022d43a 	srli	r17,r2,16
      *x++ = (z << 16) + (y & 0xffff);
  8068ec:	1c21883a 	add	r16,r3,r16
  8068f0:	b43fff15 	stw	r16,-4(r22)
  while (++i < wds);
  8068f4:	bcbfee16 	blt	r23,r18,8068b0 <__multadd+0x44>
  if (a)
  8068f8:	88000826 	beq	r17,zero,80691c <__multadd+0xb0>
    {
      if (wds >= b->_maxwds)
  8068fc:	98800217 	ldw	r2,8(r19)
  806900:	9080120e 	bge	r18,r2,80694c <__multadd+0xe0>
	  b1 = eBalloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
  806904:	90800144 	addi	r2,r18,5
  806908:	100490ba 	slli	r2,r2,2
  80690c:	94800044 	addi	r18,r18,1
  806910:	9885883a 	add	r2,r19,r2
  806914:	14400015 	stw	r17,0(r2)
      b->_wds = wds;
  806918:	9c800415 	stw	r18,16(r19)
    }
  return b;
}
  80691c:	9805883a 	mov	r2,r19
  806920:	dfc00817 	ldw	ra,32(sp)
  806924:	ddc00717 	ldw	r23,28(sp)
  806928:	dd800617 	ldw	r22,24(sp)
  80692c:	dd400517 	ldw	r21,20(sp)
  806930:	dd000417 	ldw	r20,16(sp)
  806934:	dcc00317 	ldw	r19,12(sp)
  806938:	dc800217 	ldw	r18,8(sp)
  80693c:	dc400117 	ldw	r17,4(sp)
  806940:	dc000017 	ldw	r16,0(sp)
  806944:	dec00904 	addi	sp,sp,36
  806948:	f800283a 	ret
	  b1 = eBalloc (ptr, b->_k + 1);
  80694c:	9d400117 	ldw	r21,4(r19)
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806950:	a0801317 	ldw	r2,76(r20)
	  b1 = eBalloc (ptr, b->_k + 1);
  806954:	ad400044 	addi	r21,r21,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806958:	10001826 	beq	r2,zero,8069bc <__multadd+0x150>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  80695c:	a80690ba 	slli	r3,r21,2
  806960:	10c5883a 	add	r2,r2,r3
  806964:	14000017 	ldw	r16,0(r2)
  806968:	80002126 	beq	r16,zero,8069f0 <__multadd+0x184>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  80696c:	80c00017 	ldw	r3,0(r16)
  806970:	10c00015 	stw	r3,0(r2)
  rv->_sign = rv->_wds = 0;
  806974:	80000415 	stw	zero,16(r16)
	  Bcopy (b1, b);
  806978:	99800417 	ldw	r6,16(r19)
  80697c:	99400304 	addi	r5,r19,12
  rv->_sign = rv->_wds = 0;
  806980:	80000315 	stw	zero,12(r16)
	  Bcopy (b1, b);
  806984:	31800084 	addi	r6,r6,2
  806988:	300c90ba 	slli	r6,r6,2
  80698c:	81000304 	addi	r4,r16,12
  806990:	08063540 	call	806354 <memcpy>
  if (v)
  806994:	98000726 	beq	r19,zero,8069b4 <__multadd+0x148>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  806998:	98c00117 	ldw	r3,4(r19)
  80699c:	a0801317 	ldw	r2,76(r20)
  8069a0:	180690ba 	slli	r3,r3,2
  8069a4:	10c5883a 	add	r2,r2,r3
  8069a8:	10c00017 	ldw	r3,0(r2)
  8069ac:	98c00015 	stw	r3,0(r19)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  8069b0:	14c00015 	stw	r19,0(r2)
  8069b4:	8027883a 	mov	r19,r16
  8069b8:	003fd206 	br	806904 <__multadd+0x98>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8069bc:	01800844 	movi	r6,33
  8069c0:	01400104 	movi	r5,4
  8069c4:	a009883a 	mov	r4,r20
  8069c8:	080a35c0 	call	80a35c <_calloc_r>
  8069cc:	a0801315 	stw	r2,76(r20)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8069d0:	103fe21e 	bne	r2,zero,80695c <__multadd+0xf0>
	  b1 = eBalloc (ptr, b->_k + 1);
  8069d4:	01c02074 	movhi	r7,129
  8069d8:	01002074 	movhi	r4,129
  8069dc:	39c5ab04 	addi	r7,r7,5804
  8069e0:	000d883a 	mov	r6,zero
  8069e4:	01402d44 	movi	r5,181
  8069e8:	2105ce04 	addi	r4,r4,5944
  8069ec:	080a2e80 	call	80a2e8 <__assert_func>
      x = 1 << k;
  8069f0:	05800044 	movi	r22,1
  8069f4:	b56c983a 	sll	r22,r22,r21
      rv = (_Bigint *) _calloc_r (ptr,
  8069f8:	01400044 	movi	r5,1
  8069fc:	a009883a 	mov	r4,r20
				  sizeof (_Bigint) +
  806a00:	b1800144 	addi	r6,r22,5
      rv = (_Bigint *) _calloc_r (ptr,
  806a04:	300c90ba 	slli	r6,r6,2
  806a08:	080a35c0 	call	80a35c <_calloc_r>
  806a0c:	1021883a 	mov	r16,r2
      if (rv == NULL) return NULL;
  806a10:	103ff026 	beq	r2,zero,8069d4 <__multadd+0x168>
      rv->_k = k;
  806a14:	15400115 	stw	r21,4(r2)
      rv->_maxwds = x;
  806a18:	15800215 	stw	r22,8(r2)
  806a1c:	003fd506 	br	806974 <__multadd+0x108>

00806a20 <__s2b>:
{
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  806a20:	38800204 	addi	r2,r7,8
{
  806a24:	defff904 	addi	sp,sp,-28
  x = (nd + 8) / 9;
  806a28:	10c00254 	ori	r3,r2,9
{
  806a2c:	dd400515 	stw	r21,20(sp)
  806a30:	dcc00315 	stw	r19,12(sp)
  806a34:	dc800215 	stw	r18,8(sp)
  806a38:	dc400115 	stw	r17,4(sp)
  806a3c:	dfc00615 	stw	ra,24(sp)
  806a40:	dd000415 	stw	r20,16(sp)
  806a44:	dc000015 	stw	r16,0(sp)
  x = (nd + 8) / 9;
  806a48:	18c00428 	cmpgeui	r3,r3,16
{
  806a4c:	3823883a 	mov	r17,r7
  806a50:	2025883a 	mov	r18,r4
  806a54:	282b883a 	mov	r21,r5
  806a58:	3027883a 	mov	r19,r6
  x = (nd + 8) / 9;
  806a5c:	18003d1e 	bne	r3,zero,806b54 <__s2b+0x134>
  806a60:	1004913a 	slli	r2,r2,4
  806a64:	00c02074 	movhi	r3,129
  806a68:	10800254 	ori	r2,r2,9
  806a6c:	10c7883a 	add	r3,r2,r3
  806a70:	18895b03 	ldbu	r2,9580(r3)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  806a74:	88c00290 	cmplti	r3,r17,10
  806a78:	18003b1e 	bne	r3,zero,806b68 <__s2b+0x148>
  806a7c:	00c00044 	movi	r3,1
  806a80:	0029883a 	mov	r20,zero
  806a84:	18c7883a 	add	r3,r3,r3
  806a88:	a5000044 	addi	r20,r20,1
  806a8c:	18bffd16 	blt	r3,r2,806a84 <__s2b+0x64>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806a90:	90801317 	ldw	r2,76(r18)
  806a94:	10003726 	beq	r2,zero,806b74 <__s2b+0x154>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  806a98:	a00690ba 	slli	r3,r20,2
  806a9c:	10c5883a 	add	r2,r2,r3
  806aa0:	11400017 	ldw	r5,0(r2)
  806aa4:	28004326 	beq	r5,zero,806bb4 <__s2b+0x194>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  806aa8:	28c00017 	ldw	r3,0(r5)
  806aac:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  b = eBalloc (ptr, k);
  b->_x[0] = y9;
  806ab0:	d8800717 	ldw	r2,28(sp)
  rv->_sign = rv->_wds = 0;
  806ab4:	28000315 	stw	zero,12(r5)
  b->_x[0] = y9;
  806ab8:	28800515 	stw	r2,20(r5)
  b->_wds = 1;
  806abc:	00800044 	movi	r2,1
  806ac0:	28800415 	stw	r2,16(r5)
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
  806ac4:	98800288 	cmpgei	r2,r19,10
  806ac8:	10003726 	beq	r2,zero,806ba8 <__s2b+0x188>
    {
      s += 9;
  806acc:	ac000244 	addi	r16,r21,9
  806ad0:	8029883a 	mov	r20,r16
  806ad4:	aceb883a 	add	r21,r21,r19
      do
	b = multadd (ptr, b, 10, *s++ - '0');
  806ad8:	a1c00007 	ldb	r7,0(r20)
  806adc:	01800284 	movi	r6,10
  806ae0:	9009883a 	mov	r4,r18
  806ae4:	39fff404 	addi	r7,r7,-48
  806ae8:	080686c0 	call	80686c <__multadd>
  806aec:	a5000044 	addi	r20,r20,1
  806af0:	100b883a 	mov	r5,r2
      while (++i < nd0);
  806af4:	ad3ff81e 	bne	r21,r20,806ad8 <__s2b+0xb8>
      s++;
  806af8:	98bffe04 	addi	r2,r19,-8
  806afc:	80a1883a 	add	r16,r16,r2
    }
  else
    s += 10;
  for (; i < nd; i++)
  806b00:	9c400a0e 	bge	r19,r17,806b2c <__s2b+0x10c>
  806b04:	8ce3c83a 	sub	r17,r17,r19
  806b08:	8463883a 	add	r17,r16,r17
    b = multadd (ptr, b, 10, *s++ - '0');
  806b0c:	81c00007 	ldb	r7,0(r16)
  806b10:	01800284 	movi	r6,10
  806b14:	9009883a 	mov	r4,r18
  806b18:	39fff404 	addi	r7,r7,-48
  806b1c:	080686c0 	call	80686c <__multadd>
  806b20:	84000044 	addi	r16,r16,1
  806b24:	100b883a 	mov	r5,r2
  for (; i < nd; i++)
  806b28:	847ff81e 	bne	r16,r17,806b0c <__s2b+0xec>
  return b;
}
  806b2c:	2805883a 	mov	r2,r5
  806b30:	dfc00617 	ldw	ra,24(sp)
  806b34:	dd400517 	ldw	r21,20(sp)
  806b38:	dd000417 	ldw	r20,16(sp)
  806b3c:	dcc00317 	ldw	r19,12(sp)
  806b40:	dc800217 	ldw	r18,8(sp)
  806b44:	dc400117 	ldw	r17,4(sp)
  806b48:	dc000017 	ldw	r16,0(sp)
  806b4c:	dec00704 	addi	sp,sp,28
  806b50:	f800283a 	ret
  x = (nd + 8) / 9;
  806b54:	01400244 	movi	r5,9
  806b58:	1009883a 	mov	r4,r2
  806b5c:	080c2340 	call	80c234 <__divsi3>
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  806b60:	88c00290 	cmplti	r3,r17,10
  806b64:	183fc526 	beq	r3,zero,806a7c <__s2b+0x5c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806b68:	90801317 	ldw	r2,76(r18)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
  806b6c:	0029883a 	mov	r20,zero
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806b70:	103fc91e 	bne	r2,zero,806a98 <__s2b+0x78>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  806b74:	01800844 	movi	r6,33
  806b78:	01400104 	movi	r5,4
  806b7c:	9009883a 	mov	r4,r18
  806b80:	080a35c0 	call	80a35c <_calloc_r>
  806b84:	90801315 	stw	r2,76(r18)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  806b88:	103fc31e 	bne	r2,zero,806a98 <__s2b+0x78>
  b = eBalloc (ptr, k);
  806b8c:	01c02074 	movhi	r7,129
  806b90:	01002074 	movhi	r4,129
  806b94:	39c5ab04 	addi	r7,r7,5804
  806b98:	000d883a 	mov	r6,zero
  806b9c:	01403384 	movi	r5,206
  806ba0:	2105ce04 	addi	r4,r4,5944
  806ba4:	080a2e80 	call	80a2e8 <__assert_func>
    s += 10;
  806ba8:	ac000284 	addi	r16,r21,10
  i = 9;
  806bac:	04c00244 	movi	r19,9
  806bb0:	003fd306 	br	806b00 <__s2b+0xe0>
      x = 1 << k;
  806bb4:	04000044 	movi	r16,1
  806bb8:	8520983a 	sll	r16,r16,r20
      rv = (_Bigint *) _calloc_r (ptr,
  806bbc:	01400044 	movi	r5,1
  806bc0:	9009883a 	mov	r4,r18
				  sizeof (_Bigint) +
  806bc4:	81800144 	addi	r6,r16,5
      rv = (_Bigint *) _calloc_r (ptr,
  806bc8:	300c90ba 	slli	r6,r6,2
  806bcc:	080a35c0 	call	80a35c <_calloc_r>
  806bd0:	100b883a 	mov	r5,r2
      if (rv == NULL) return NULL;
  806bd4:	103fed26 	beq	r2,zero,806b8c <__s2b+0x16c>
      rv->_k = k;
  806bd8:	15000115 	stw	r20,4(r2)
      rv->_maxwds = x;
  806bdc:	14000215 	stw	r16,8(r2)
  806be0:	003fb306 	br	806ab0 <__s2b+0x90>

00806be4 <__hi0bits>:
int
hi0bits (register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
  806be4:	20bfffec 	andhi	r2,r4,65535
  806be8:	1000141e 	bne	r2,zero,806c3c <__hi0bits+0x58>
    {
      k = 16;
      x <<= 16;
  806bec:	2008943a 	slli	r4,r4,16
  806bf0:	01400604 	movi	r5,24
      k = 16;
  806bf4:	00800404 	movi	r2,16
    }
  if (!(x & 0xff000000))
  806bf8:	20ffc02c 	andhi	r3,r4,65280
  806bfc:	1800021e 	bne	r3,zero,806c08 <__hi0bits+0x24>
    {
      k += 8;
      x <<= 8;
  806c00:	2008923a 	slli	r4,r4,8
      k += 8;
  806c04:	2805883a 	mov	r2,r5
    }
  if (!(x & 0xf0000000))
  806c08:	20fc002c 	andhi	r3,r4,61440
  806c0c:	1800021e 	bne	r3,zero,806c18 <__hi0bits+0x34>
    {
      k += 4;
      x <<= 4;
  806c10:	2008913a 	slli	r4,r4,4
      k += 4;
  806c14:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0xc0000000))
  806c18:	20f0002c 	andhi	r3,r4,49152
  806c1c:	1800021e 	bne	r3,zero,806c28 <__hi0bits+0x44>
    {
      k += 2;
      x <<= 2;
  806c20:	200890ba 	slli	r4,r4,2
      k += 2;
  806c24:	10800084 	addi	r2,r2,2
    }
  if (!(x & 0x80000000))
  806c28:	20000316 	blt	r4,zero,806c38 <__hi0bits+0x54>
    {
      k++;
      if (!(x & 0x40000000))
  806c2c:	2110002c 	andhi	r4,r4,16384
      k++;
  806c30:	10800044 	addi	r2,r2,1
      if (!(x & 0x40000000))
  806c34:	20000426 	beq	r4,zero,806c48 <__hi0bits+0x64>
	return 32;
    }
  return k;
}
  806c38:	f800283a 	ret
  806c3c:	01400204 	movi	r5,8
  register int k = 0;
  806c40:	0005883a 	mov	r2,zero
  806c44:	003fec06 	br	806bf8 <__hi0bits+0x14>
	return 32;
  806c48:	00800804 	movi	r2,32
}
  806c4c:	f800283a 	ret

00806c50 <__lo0bits>:

int
lo0bits (__ULong *y)
{
  register int k;
  register __ULong x = *y;
  806c50:	20c00017 	ldw	r3,0(r4)

  if (x & 7)
  806c54:	188001cc 	andi	r2,r3,7
  806c58:	10000826 	beq	r2,zero,806c7c <__lo0bits+0x2c>
    {
      if (x & 1)
  806c5c:	1880004c 	andi	r2,r3,1
  806c60:	1000211e 	bne	r2,zero,806ce8 <__lo0bits+0x98>
	return 0;
      if (x & 2)
  806c64:	1880008c 	andi	r2,r3,2
  806c68:	10002326 	beq	r2,zero,806cf8 <__lo0bits+0xa8>
	{
	  *y = x >> 1;
  806c6c:	1806d07a 	srli	r3,r3,1
	  return 1;
  806c70:	00800044 	movi	r2,1
	  *y = x >> 1;
  806c74:	20c00015 	stw	r3,0(r4)
	  return 1;
  806c78:	f800283a 	ret
	}
      *y = x >> 2;
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
  806c7c:	18bfffcc 	andi	r2,r3,65535
  806c80:	10001526 	beq	r2,zero,806cd8 <__lo0bits+0x88>
  806c84:	01800204 	movi	r6,8
  k = 0;
  806c88:	0005883a 	mov	r2,zero
    {
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
  806c8c:	19403fcc 	andi	r5,r3,255
  806c90:	2800021e 	bne	r5,zero,806c9c <__lo0bits+0x4c>
    {
      k += 8;
      x >>= 8;
  806c94:	1806d23a 	srli	r3,r3,8
      k += 8;
  806c98:	3005883a 	mov	r2,r6
    }
  if (!(x & 0xf))
  806c9c:	194003cc 	andi	r5,r3,15
  806ca0:	2800021e 	bne	r5,zero,806cac <__lo0bits+0x5c>
    {
      k += 4;
      x >>= 4;
  806ca4:	1806d13a 	srli	r3,r3,4
      k += 4;
  806ca8:	10800104 	addi	r2,r2,4
    }
  if (!(x & 0x3))
  806cac:	194000cc 	andi	r5,r3,3
  806cb0:	2800021e 	bne	r5,zero,806cbc <__lo0bits+0x6c>
    {
      k += 2;
      x >>= 2;
  806cb4:	1806d0ba 	srli	r3,r3,2
      k += 2;
  806cb8:	10800084 	addi	r2,r2,2
    }
  if (!(x & 1))
  806cbc:	1940004c 	andi	r5,r3,1
  806cc0:	2800031e 	bne	r5,zero,806cd0 <__lo0bits+0x80>
    {
      k++;
      x >>= 1;
  806cc4:	1806d07a 	srli	r3,r3,1
      k++;
  806cc8:	10800044 	addi	r2,r2,1
      if (!x & 1)
  806ccc:	18000826 	beq	r3,zero,806cf0 <__lo0bits+0xa0>
	return 32;
    }
  *y = x;
  806cd0:	20c00015 	stw	r3,0(r4)
  return k;
  806cd4:	f800283a 	ret
      x >>= 16;
  806cd8:	1806d43a 	srli	r3,r3,16
  806cdc:	01800604 	movi	r6,24
      k = 16;
  806ce0:	00800404 	movi	r2,16
  806ce4:	003fe906 	br	806c8c <__lo0bits+0x3c>
	return 0;
  806ce8:	0005883a 	mov	r2,zero
  806cec:	f800283a 	ret
	return 32;
  806cf0:	00800804 	movi	r2,32
}
  806cf4:	f800283a 	ret
      *y = x >> 2;
  806cf8:	1806d0ba 	srli	r3,r3,2
      return 2;
  806cfc:	00800084 	movi	r2,2
      *y = x >> 2;
  806d00:	20c00015 	stw	r3,0(r4)
      return 2;
  806d04:	f800283a 	ret

00806d08 <__i2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806d08:	20c01317 	ldw	r3,76(r4)

_Bigint *
i2b (struct _reent * ptr, int i)
{
  806d0c:	defffd04 	addi	sp,sp,-12
  806d10:	dc400115 	stw	r17,4(sp)
  806d14:	dc000015 	stw	r16,0(sp)
  806d18:	dfc00215 	stw	ra,8(sp)
  806d1c:	2021883a 	mov	r16,r4
  806d20:	2823883a 	mov	r17,r5
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806d24:	18000d26 	beq	r3,zero,806d5c <__i2b+0x54>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  806d28:	18800117 	ldw	r2,4(r3)
  806d2c:	10001826 	beq	r2,zero,806d90 <__i2b+0x88>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  806d30:	11000017 	ldw	r4,0(r2)
  806d34:	19000115 	stw	r4,4(r3)
  _Bigint *b;

  b = eBalloc (ptr, 1);
  b->_x[0] = i;
  b->_wds = 1;
  806d38:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  806d3c:	10000315 	stw	zero,12(r2)
  b->_x[0] = i;
  806d40:	14400515 	stw	r17,20(r2)
  b->_wds = 1;
  806d44:	10c00415 	stw	r3,16(r2)
  return b;
}
  806d48:	dfc00217 	ldw	ra,8(sp)
  806d4c:	dc400117 	ldw	r17,4(sp)
  806d50:	dc000017 	ldw	r16,0(sp)
  806d54:	dec00304 	addi	sp,sp,12
  806d58:	f800283a 	ret
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  806d5c:	01800844 	movi	r6,33
  806d60:	01400104 	movi	r5,4
  806d64:	080a35c0 	call	80a35c <_calloc_r>
  806d68:	80801315 	stw	r2,76(r16)
  806d6c:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  806d70:	103fed1e 	bne	r2,zero,806d28 <__i2b+0x20>
  b = eBalloc (ptr, 1);
  806d74:	01c02074 	movhi	r7,129
  806d78:	01002074 	movhi	r4,129
  806d7c:	39c5ab04 	addi	r7,r7,5804
  806d80:	000d883a 	mov	r6,zero
  806d84:	01405004 	movi	r5,320
  806d88:	2105ce04 	addi	r4,r4,5944
  806d8c:	080a2e80 	call	80a2e8 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  806d90:	01800704 	movi	r6,28
  806d94:	01400044 	movi	r5,1
  806d98:	8009883a 	mov	r4,r16
  806d9c:	080a35c0 	call	80a35c <_calloc_r>
      if (rv == NULL) return NULL;
  806da0:	103ff426 	beq	r2,zero,806d74 <__i2b+0x6c>
      rv->_k = k;
  806da4:	00c00044 	movi	r3,1
  806da8:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  806dac:	00c00084 	movi	r3,2
  806db0:	10c00215 	stw	r3,8(r2)
  806db4:	003fe006 	br	806d38 <__i2b+0x30>

00806db8 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
  806db8:	defff004 	addi	sp,sp,-64
  806dbc:	dd800c15 	stw	r22,48(sp)
  806dc0:	dc400715 	stw	r17,28(sp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
  806dc4:	2d800417 	ldw	r22,16(r5)
  806dc8:	34400417 	ldw	r17,16(r6)
{
  806dcc:	dc800815 	stw	r18,32(sp)
  806dd0:	dc000615 	stw	r16,24(sp)
  806dd4:	dfc00f15 	stw	ra,60(sp)
  806dd8:	df000e15 	stw	fp,56(sp)
  806ddc:	ddc00d15 	stw	r23,52(sp)
  806de0:	dd400b15 	stw	r21,44(sp)
  806de4:	dd000a15 	stw	r20,40(sp)
  806de8:	dcc00915 	stw	r19,36(sp)
  806dec:	2825883a 	mov	r18,r5
  806df0:	3021883a 	mov	r16,r6
  if (a->_wds < b->_wds)
  806df4:	b4400516 	blt	r22,r17,806e0c <__multiply+0x54>
  806df8:	8807883a 	mov	r3,r17
  806dfc:	2821883a 	mov	r16,r5
  806e00:	b023883a 	mov	r17,r22
  806e04:	3025883a 	mov	r18,r6
  806e08:	182d883a 	mov	r22,r3
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
  806e0c:	80800217 	ldw	r2,8(r16)
  wc = wa + wb;
  806e10:	8d87883a 	add	r3,r17,r22
  806e14:	d8c00015 	stw	r3,0(sp)
  k = a->_k;
  806e18:	84c00117 	ldw	r19,4(r16)
  if (wc > a->_maxwds)
  806e1c:	10c0010e 	bge	r2,r3,806e24 <__multiply+0x6c>
    k++;
  806e20:	9cc00044 	addi	r19,r19,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  806e24:	20801317 	ldw	r2,76(r4)
  806e28:	10009426 	beq	r2,zero,80707c <__multiply+0x2c4>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  806e2c:	980690ba 	slli	r3,r19,2
  806e30:	10c5883a 	add	r2,r2,r3
  806e34:	10c00017 	ldw	r3,0(r2)
  806e38:	d8c00515 	stw	r3,20(sp)
  806e3c:	18009d26 	beq	r3,zero,8070b4 <__multiply+0x2fc>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  806e40:	18c00017 	ldw	r3,0(r3)
  806e44:	10c00015 	stw	r3,0(r2)
  c = eBalloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
  806e48:	d8800017 	ldw	r2,0(sp)
  806e4c:	102690ba 	slli	r19,r2,2
  806e50:	d8800517 	ldw	r2,20(sp)
  806e54:	15000504 	addi	r20,r2,20
  rv->_sign = rv->_wds = 0;
  806e58:	10000415 	stw	zero,16(r2)
  806e5c:	10000315 	stw	zero,12(r2)
  for (x = c->_x, xa = x + wc; x < xa; x++)
  806e60:	a4c5883a 	add	r2,r20,r19
  806e64:	d8800115 	stw	r2,4(sp)
  806e68:	a080092e 	bgeu	r20,r2,806e90 <__multiply+0xd8>
    *x = 0;
  806e6c:	d8c00517 	ldw	r3,20(sp)
  806e70:	000b883a 	mov	r5,zero
  806e74:	a009883a 	mov	r4,r20
  806e78:	10cdc83a 	sub	r6,r2,r3
  806e7c:	31bffac4 	addi	r6,r6,-21
  806e80:	300cd0ba 	srli	r6,r6,2
  806e84:	31800044 	addi	r6,r6,1
  806e88:	300c90ba 	slli	r6,r6,2
  806e8c:	08066a40 	call	8066a4 <memset>
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  806e90:	b02c90ba 	slli	r22,r22,2
  xae = xa + wa;
  806e94:	882290ba 	slli	r17,r17,2
  xb = b->_x;
  806e98:	94800504 	addi	r18,r18,20
  xa = a->_x;
  806e9c:	80800504 	addi	r2,r16,20
  xbe = xb + wb;
  806ea0:	9587883a 	add	r3,r18,r22
  xa = a->_x;
  806ea4:	d8800315 	stw	r2,12(sp)
  xbe = xb + wb;
  806ea8:	d8c00215 	stw	r3,8(sp)
  xae = xa + wa;
  806eac:	1463883a 	add	r17,r2,r17
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
  806eb0:	90c0542e 	bgeu	r18,r3,807004 <__multiply+0x24c>
  806eb4:	80800544 	addi	r2,r16,21
  806eb8:	88806d36 	bltu	r17,r2,807070 <__multiply+0x2b8>
  806ebc:	8c05c83a 	sub	r2,r17,r16
  806ec0:	10bffac4 	addi	r2,r2,-21
  806ec4:	1004d0ba 	srli	r2,r2,2
  806ec8:	10800044 	addi	r2,r2,1
  806ecc:	100490ba 	slli	r2,r2,2
  806ed0:	d8800415 	stw	r2,16(sp)
  806ed4:	00000606 	br	806ef0 <__multiply+0x138>
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
	  *xc = carry;
	}
      if ((y = *xb >> 16) != 0)
  806ed8:	102ad43a 	srli	r21,r2,16
  806edc:	a800271e 	bne	r21,zero,806f7c <__multiply+0x1c4>
  for (; xb < xbe; xb++, xc0++)
  806ee0:	d8800217 	ldw	r2,8(sp)
  806ee4:	94800104 	addi	r18,r18,4
  806ee8:	a5000104 	addi	r20,r20,4
  806eec:	9080452e 	bgeu	r18,r2,807004 <__multiply+0x24c>
      if ((y = *xb & 0xffff) != 0)
  806ef0:	90800017 	ldw	r2,0(r18)
  806ef4:	15ffffcc 	andi	r23,r2,65535
  806ef8:	b83ff726 	beq	r23,zero,806ed8 <__multiply+0x120>
	  x = xa;
  806efc:	dd400317 	ldw	r21,12(sp)
  806f00:	a02d883a 	mov	r22,r20
	  carry = 0;
  806f04:	0027883a 	mov	r19,zero
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  806f08:	af000017 	ldw	fp,0(r21)
  806f0c:	b4000017 	ldw	r16,0(r22)
  806f10:	b80b883a 	mov	r5,r23
  806f14:	e13fffcc 	andi	r4,fp,65535
  806f18:	080c3e80 	call	80c3e8 <__mulsi3>
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f1c:	e008d43a 	srli	r4,fp,16
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  806f20:	823fffcc 	andi	r8,r16,65535
  806f24:	1205883a 	add	r2,r2,r8
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f28:	b80b883a 	mov	r5,r23
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
  806f2c:	14e7883a 	add	r19,r2,r19
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f30:	8020d43a 	srli	r16,r16,16
  806f34:	080c3e80 	call	80c3e8 <__mulsi3>
	      carry = z >> 16;
  806f38:	9808d43a 	srli	r4,r19,16
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f3c:	1405883a 	add	r2,r2,r16
	      Storeinc (xc, z2, z);
  806f40:	98ffffcc 	andi	r3,r19,65535
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f44:	1105883a 	add	r2,r2,r4
	      Storeinc (xc, z2, z);
  806f48:	1008943a 	slli	r4,r2,16
  806f4c:	b5800104 	addi	r22,r22,4
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
  806f50:	ad400104 	addi	r21,r21,4
	      Storeinc (xc, z2, z);
  806f54:	20c6b03a 	or	r3,r4,r3
  806f58:	b0ffff15 	stw	r3,-4(r22)
	      carry = z2 >> 16;
  806f5c:	1026d43a 	srli	r19,r2,16
	  while (x < xae);
  806f60:	ac7fe936 	bltu	r21,r17,806f08 <__multiply+0x150>
	  *xc = carry;
  806f64:	d8800417 	ldw	r2,16(sp)
  806f68:	a085883a 	add	r2,r20,r2
  806f6c:	14c00015 	stw	r19,0(r2)
      if ((y = *xb >> 16) != 0)
  806f70:	90800017 	ldw	r2,0(r18)
  806f74:	102ad43a 	srli	r21,r2,16
  806f78:	a83fd926 	beq	r21,zero,806ee0 <__multiply+0x128>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
  806f7c:	a7000017 	ldw	fp,0(r20)
	  x = xa;
  806f80:	ddc00317 	ldw	r23,12(sp)
	  z2 = *xc;
  806f84:	a027883a 	mov	r19,r20
  806f88:	e021883a 	mov	r16,fp
	  carry = 0;
  806f8c:	002d883a 	mov	r22,zero
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  806f90:	b900000b 	ldhu	r4,0(r23)
  806f94:	a80b883a 	mov	r5,r21
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
  806f98:	9cc00104 	addi	r19,r19,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  806f9c:	080c3e80 	call	80c3e8 <__mulsi3>
  806fa0:	800cd43a 	srli	r6,r16,16
	      Storeinc (xc, z, z2);
  806fa4:	e0ffffcc 	andi	r3,fp,65535
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  806fa8:	bdc00104 	addi	r23,r23,4
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
  806fac:	118d883a 	add	r6,r2,r6
  806fb0:	35ad883a 	add	r22,r6,r22
	      Storeinc (xc, z, z2);
  806fb4:	b004943a 	slli	r2,r22,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  806fb8:	9c000017 	ldw	r16,0(r19)
  806fbc:	a80b883a 	mov	r5,r21
	      Storeinc (xc, z, z2);
  806fc0:	10c6b03a 	or	r3,r2,r3
  806fc4:	98ffff15 	stw	r3,-4(r19)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  806fc8:	b93fff8b 	ldhu	r4,-2(r23)
  806fcc:	080c3e80 	call	80c3e8 <__mulsi3>
	      carry = z >> 16;
  806fd0:	b00cd43a 	srli	r6,r22,16
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
  806fd4:	80ffffcc 	andi	r3,r16,65535
  806fd8:	10c7883a 	add	r3,r2,r3
  806fdc:	19b9883a 	add	fp,r3,r6
	      carry = z2 >> 16;
  806fe0:	e02cd43a 	srli	r22,fp,16
	    }
	  while (x < xae);
  806fe4:	bc7fea36 	bltu	r23,r17,806f90 <__multiply+0x1d8>
	  *xc = z2;
  806fe8:	d8800417 	ldw	r2,16(sp)
  for (; xb < xbe; xb++, xc0++)
  806fec:	94800104 	addi	r18,r18,4
	  *xc = z2;
  806ff0:	a085883a 	add	r2,r20,r2
  806ff4:	17000015 	stw	fp,0(r2)
  for (; xb < xbe; xb++, xc0++)
  806ff8:	d8800217 	ldw	r2,8(sp)
  806ffc:	a5000104 	addi	r20,r20,4
  807000:	90bfbb36 	bltu	r18,r2,806ef0 <__multiply+0x138>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
  807004:	d8800017 	ldw	r2,0(sp)
  807008:	00800516 	blt	zero,r2,807020 <__multiply+0x268>
  80700c:	00000906 	br	807034 <__multiply+0x27c>
  807010:	d8800017 	ldw	r2,0(sp)
  807014:	10bfffc4 	addi	r2,r2,-1
  807018:	d8800015 	stw	r2,0(sp)
  80701c:	10000526 	beq	r2,zero,807034 <__multiply+0x27c>
  807020:	d8c00117 	ldw	r3,4(sp)
  807024:	18bfff17 	ldw	r2,-4(r3)
  807028:	18ffff04 	addi	r3,r3,-4
  80702c:	d8c00115 	stw	r3,4(sp)
  807030:	103ff726 	beq	r2,zero,807010 <__multiply+0x258>
  c->_wds = wc;
  807034:	d8800517 	ldw	r2,20(sp)
  807038:	d8c00017 	ldw	r3,0(sp)
  80703c:	10c00415 	stw	r3,16(r2)
  return c;
}
  807040:	dfc00f17 	ldw	ra,60(sp)
  807044:	df000e17 	ldw	fp,56(sp)
  807048:	ddc00d17 	ldw	r23,52(sp)
  80704c:	dd800c17 	ldw	r22,48(sp)
  807050:	dd400b17 	ldw	r21,44(sp)
  807054:	dd000a17 	ldw	r20,40(sp)
  807058:	dcc00917 	ldw	r19,36(sp)
  80705c:	dc800817 	ldw	r18,32(sp)
  807060:	dc400717 	ldw	r17,28(sp)
  807064:	dc000617 	ldw	r16,24(sp)
  807068:	dec01004 	addi	sp,sp,64
  80706c:	f800283a 	ret
  807070:	00800104 	movi	r2,4
  807074:	d8800415 	stw	r2,16(sp)
  807078:	003f9d06 	br	806ef0 <__multiply+0x138>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  80707c:	01800844 	movi	r6,33
  807080:	01400104 	movi	r5,4
  807084:	d9000115 	stw	r4,4(sp)
  807088:	080a35c0 	call	80a35c <_calloc_r>
  80708c:	d9000117 	ldw	r4,4(sp)
  807090:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807094:	103f651e 	bne	r2,zero,806e2c <__multiply+0x74>
  c = eBalloc (ptr, k);
  807098:	01c02074 	movhi	r7,129
  80709c:	01002074 	movhi	r4,129
  8070a0:	39c5ab04 	addi	r7,r7,5804
  8070a4:	000d883a 	mov	r6,zero
  8070a8:	01405744 	movi	r5,349
  8070ac:	2105ce04 	addi	r4,r4,5944
  8070b0:	080a2e80 	call	80a2e8 <__assert_func>
      x = 1 << k;
  8070b4:	05000044 	movi	r20,1
  8070b8:	a4e8983a 	sll	r20,r20,r19
      rv = (_Bigint *) _calloc_r (ptr,
  8070bc:	01400044 	movi	r5,1
				  sizeof (_Bigint) +
  8070c0:	a1800144 	addi	r6,r20,5
      rv = (_Bigint *) _calloc_r (ptr,
  8070c4:	300c90ba 	slli	r6,r6,2
  8070c8:	080a35c0 	call	80a35c <_calloc_r>
  8070cc:	d8800515 	stw	r2,20(sp)
      if (rv == NULL) return NULL;
  8070d0:	103ff126 	beq	r2,zero,807098 <__multiply+0x2e0>
      rv->_k = k;
  8070d4:	14c00115 	stw	r19,4(r2)
      rv->_maxwds = x;
  8070d8:	15000215 	stw	r20,8(r2)
  8070dc:	003f5a06 	br	806e48 <__multiply+0x90>

008070e0 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
  8070e0:	defffb04 	addi	sp,sp,-20
  8070e4:	dcc00315 	stw	r19,12(sp)
  8070e8:	dc000015 	stw	r16,0(sp)
  8070ec:	dfc00415 	stw	ra,16(sp)
  8070f0:	dc800215 	stw	r18,8(sp)
  8070f4:	dc400115 	stw	r17,4(sp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
  8070f8:	308000cc 	andi	r2,r6,3
{
  8070fc:	3021883a 	mov	r16,r6
  807100:	2027883a 	mov	r19,r4
  if ((i = k & 3) != 0)
  807104:	10002d1e 	bne	r2,zero,8071bc <__pow5mult+0xdc>
  807108:	2825883a 	mov	r18,r5
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
  80710c:	8021d0ba 	srai	r16,r16,2
  807110:	80001926 	beq	r16,zero,807178 <__pow5mult+0x98>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
  807114:	9c401217 	ldw	r17,72(r19)
  807118:	8800061e 	bne	r17,zero,807134 <__pow5mult+0x54>
  80711c:	00002f06 	br	8071dc <__pow5mult+0xfc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
  807120:	8021d07a 	srai	r16,r16,1
  807124:	80001426 	beq	r16,zero,807178 <__pow5mult+0x98>
	break;
      if (!(p51 = p5->_next))
  807128:	88800017 	ldw	r2,0(r17)
  80712c:	10001a26 	beq	r2,zero,807198 <__pow5mult+0xb8>
{
  807130:	1023883a 	mov	r17,r2
      if (k & 1)
  807134:	8080004c 	andi	r2,r16,1
  807138:	103ff926 	beq	r2,zero,807120 <__pow5mult+0x40>
	  b1 = mult (ptr, b, p5);
  80713c:	880d883a 	mov	r6,r17
  807140:	900b883a 	mov	r5,r18
  807144:	9809883a 	mov	r4,r19
  807148:	0806db80 	call	806db8 <__multiply>
  if (v)
  80714c:	90001926 	beq	r18,zero,8071b4 <__pow5mult+0xd4>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  807150:	91400117 	ldw	r5,4(r18)
  807154:	98c01317 	ldw	r3,76(r19)
      if (!(k >>= 1))
  807158:	8021d07a 	srai	r16,r16,1
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  80715c:	280a90ba 	slli	r5,r5,2
  807160:	1947883a 	add	r3,r3,r5
  807164:	19000017 	ldw	r4,0(r3)
  807168:	91000015 	stw	r4,0(r18)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  80716c:	1c800015 	stw	r18,0(r3)
	  b = b1;
  807170:	1025883a 	mov	r18,r2
      if (!(k >>= 1))
  807174:	803fec1e 	bne	r16,zero,807128 <__pow5mult+0x48>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
  807178:	9005883a 	mov	r2,r18
  80717c:	dfc00417 	ldw	ra,16(sp)
  807180:	dcc00317 	ldw	r19,12(sp)
  807184:	dc800217 	ldw	r18,8(sp)
  807188:	dc400117 	ldw	r17,4(sp)
  80718c:	dc000017 	ldw	r16,0(sp)
  807190:	dec00504 	addi	sp,sp,20
  807194:	f800283a 	ret
	  p51 = p5->_next = mult (ptr, p5, p5);
  807198:	880d883a 	mov	r6,r17
  80719c:	880b883a 	mov	r5,r17
  8071a0:	9809883a 	mov	r4,r19
  8071a4:	0806db80 	call	806db8 <__multiply>
  8071a8:	88800015 	stw	r2,0(r17)
	  p51->_next = 0;
  8071ac:	10000015 	stw	zero,0(r2)
  8071b0:	003fdf06 	br	807130 <__pow5mult+0x50>
	  b = b1;
  8071b4:	1025883a 	mov	r18,r2
  8071b8:	003fd906 	br	807120 <__pow5mult+0x40>
    b = multadd (ptr, b, p05[i - 1], 0);
  8071bc:	100490ba 	slli	r2,r2,2
  8071c0:	00c02074 	movhi	r3,129
  8071c4:	000f883a 	mov	r7,zero
  8071c8:	10c7883a 	add	r3,r2,r3
  8071cc:	1985e717 	ldw	r6,6044(r3)
  8071d0:	080686c0 	call	80686c <__multadd>
  8071d4:	1025883a 	mov	r18,r2
  8071d8:	003fcc06 	br	80710c <__pow5mult+0x2c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8071dc:	98801317 	ldw	r2,76(r19)
  8071e0:	10000c26 	beq	r2,zero,807214 <__pow5mult+0x134>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8071e4:	14400117 	ldw	r17,4(r2)
  8071e8:	88001726 	beq	r17,zero,807248 <__pow5mult+0x168>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8071ec:	88c00017 	ldw	r3,0(r17)
  8071f0:	10c00115 	stw	r3,4(r2)
  b->_x[0] = i;
  8071f4:	00809c44 	movi	r2,625
  8071f8:	88800515 	stw	r2,20(r17)
  b->_wds = 1;
  8071fc:	00800044 	movi	r2,1
  rv->_sign = rv->_wds = 0;
  807200:	88000315 	stw	zero,12(r17)
  b->_wds = 1;
  807204:	88800415 	stw	r2,16(r17)
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
  807208:	9c401215 	stw	r17,72(r19)
      p5->_next = 0;
  80720c:	88000015 	stw	zero,0(r17)
  807210:	003fc806 	br	807134 <__pow5mult+0x54>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  807214:	01800844 	movi	r6,33
  807218:	01400104 	movi	r5,4
  80721c:	9809883a 	mov	r4,r19
  807220:	080a35c0 	call	80a35c <_calloc_r>
  807224:	98801315 	stw	r2,76(r19)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807228:	103fee1e 	bne	r2,zero,8071e4 <__pow5mult+0x104>
  b = eBalloc (ptr, 1);
  80722c:	01c02074 	movhi	r7,129
  807230:	01002074 	movhi	r4,129
  807234:	39c5ab04 	addi	r7,r7,5804
  807238:	000d883a 	mov	r6,zero
  80723c:	01405004 	movi	r5,320
  807240:	2105ce04 	addi	r4,r4,5944
  807244:	080a2e80 	call	80a2e8 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  807248:	01800704 	movi	r6,28
  80724c:	01400044 	movi	r5,1
  807250:	9809883a 	mov	r4,r19
  807254:	080a35c0 	call	80a35c <_calloc_r>
  807258:	1023883a 	mov	r17,r2
      if (rv == NULL) return NULL;
  80725c:	103ff326 	beq	r2,zero,80722c <__pow5mult+0x14c>
      rv->_k = k;
  807260:	00800044 	movi	r2,1
  807264:	88800115 	stw	r2,4(r17)
      rv->_maxwds = x;
  807268:	00800084 	movi	r2,2
  80726c:	88800215 	stw	r2,8(r17)
  807270:	003fe006 	br	8071f4 <__pow5mult+0x114>

00807274 <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
  807274:	defff604 	addi	sp,sp,-40
  807278:	ddc00715 	stw	r23,28(sp)
  80727c:	dc800215 	stw	r18,8(sp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
  807280:	302fd17a 	srai	r23,r6,5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  807284:	2c800417 	ldw	r18,16(r5)
  for (i = b->_maxwds; n1 > i; i <<= 1)
  807288:	28800217 	ldw	r2,8(r5)
{
  80728c:	dd800615 	stw	r22,24(sp)
  n1 = n + b->_wds + 1;
  807290:	bca5883a 	add	r18,r23,r18
{
  807294:	dd400515 	stw	r21,20(sp)
  807298:	dcc00315 	stw	r19,12(sp)
  80729c:	dc400115 	stw	r17,4(sp)
  8072a0:	dc000015 	stw	r16,0(sp)
  8072a4:	dfc00915 	stw	ra,36(sp)
  8072a8:	df000815 	stw	fp,32(sp)
  8072ac:	dd000415 	stw	r20,16(sp)
  n1 = n + b->_wds + 1;
  8072b0:	94400044 	addi	r17,r18,1
  k1 = b->_k;
  8072b4:	2d400117 	ldw	r21,4(r5)
{
  8072b8:	2821883a 	mov	r16,r5
  8072bc:	302d883a 	mov	r22,r6
  8072c0:	2027883a 	mov	r19,r4
  for (i = b->_maxwds; n1 > i; i <<= 1)
  8072c4:	1440030e 	bge	r2,r17,8072d4 <__lshift+0x60>
  8072c8:	1085883a 	add	r2,r2,r2
    k1++;
  8072cc:	ad400044 	addi	r21,r21,1
  for (i = b->_maxwds; n1 > i; i <<= 1)
  8072d0:	147ffd16 	blt	r2,r17,8072c8 <__lshift+0x54>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8072d4:	98801317 	ldw	r2,76(r19)
  8072d8:	10004b26 	beq	r2,zero,807408 <__lshift+0x194>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8072dc:	a80690ba 	slli	r3,r21,2
  8072e0:	10c5883a 	add	r2,r2,r3
  8072e4:	15000017 	ldw	r20,0(r2)
  8072e8:	a0005426 	beq	r20,zero,80743c <__lshift+0x1c8>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8072ec:	a0c00017 	ldw	r3,0(r20)
  8072f0:	10c00015 	stw	r3,0(r2)
  rv->_sign = rv->_wds = 0;
  8072f4:	a0000415 	stw	zero,16(r20)
  8072f8:	a0000315 	stw	zero,12(r20)
  b1 = eBalloc (ptr, k1);
  x1 = b1->_x;
  8072fc:	a1000504 	addi	r4,r20,20
  for (i = 0; i < n; i++)
  807300:	05c0050e 	bge	zero,r23,807318 <__lshift+0xa4>
    *x1++ = 0;
  807304:	b82e90ba 	slli	r23,r23,2
  807308:	000b883a 	mov	r5,zero
  80730c:	b80d883a 	mov	r6,r23
  807310:	08066a40 	call	8066a4 <memset>
  807314:	15c9883a 	add	r4,r2,r23
  x = b->_x;
  xe = x + b->_wds;
  807318:	82000417 	ldw	r8,16(r16)
  x = b->_x;
  80731c:	80c00504 	addi	r3,r16,20
#ifdef Pack_32
  if (k &= 0x1f)
  807320:	b14007cc 	andi	r5,r22,31
  xe = x + b->_wds;
  807324:	401090ba 	slli	r8,r8,2
  807328:	1a11883a 	add	r8,r3,r8
  if (k &= 0x1f)
  80732c:	28002e26 	beq	r5,zero,8073e8 <__lshift+0x174>
    {
      k1 = 32 - k;
  807330:	02400804 	movi	r9,32
  807334:	4953c83a 	sub	r9,r9,r5
  807338:	2005883a 	mov	r2,r4
      z = 0;
  80733c:	000f883a 	mov	r7,zero
      do
	{
	  *x1++ = *x << k | z;
  807340:	19800017 	ldw	r6,0(r3)
  807344:	10800104 	addi	r2,r2,4
	  z = *x++ >> k1;
  807348:	18c00104 	addi	r3,r3,4
	  *x1++ = *x << k | z;
  80734c:	314c983a 	sll	r6,r6,r5
  807350:	31ccb03a 	or	r6,r6,r7
  807354:	11bfff15 	stw	r6,-4(r2)
	  z = *x++ >> k1;
  807358:	19bfff17 	ldw	r6,-4(r3)
  80735c:	324ed83a 	srl	r7,r6,r9
	}
      while (x < xe);
  807360:	1a3ff736 	bltu	r3,r8,807340 <__lshift+0xcc>
	  *x1++ = *x << k | z;
  807364:	80800544 	addi	r2,r16,21
  807368:	40802536 	bltu	r8,r2,807400 <__lshift+0x18c>
  80736c:	4407c83a 	sub	r3,r8,r16
  807370:	18fffac4 	addi	r3,r3,-21
  807374:	1806d0ba 	srli	r3,r3,2
  807378:	18c00044 	addi	r3,r3,1
  80737c:	180690ba 	slli	r3,r3,2
      if ((*x1 = z) != 0)
  807380:	20c7883a 	add	r3,r4,r3
  807384:	19c00015 	stw	r7,0(r3)
  807388:	38000126 	beq	r7,zero,807390 <__lshift+0x11c>
  n1 = n + b->_wds + 1;
  80738c:	8825883a 	mov	r18,r17
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  807390:	a4800415 	stw	r18,16(r20)
  if (v)
  807394:	80000726 	beq	r16,zero,8073b4 <__lshift+0x140>
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
  807398:	80c00117 	ldw	r3,4(r16)
  80739c:	98801317 	ldw	r2,76(r19)
  8073a0:	180690ba 	slli	r3,r3,2
  8073a4:	10c5883a 	add	r2,r2,r3
  8073a8:	10c00017 	ldw	r3,0(r2)
  8073ac:	80c00015 	stw	r3,0(r16)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
  8073b0:	14000015 	stw	r16,0(r2)
  Bfree (ptr, b);
  return b1;
}
  8073b4:	a005883a 	mov	r2,r20
  8073b8:	dfc00917 	ldw	ra,36(sp)
  8073bc:	df000817 	ldw	fp,32(sp)
  8073c0:	ddc00717 	ldw	r23,28(sp)
  8073c4:	dd800617 	ldw	r22,24(sp)
  8073c8:	dd400517 	ldw	r21,20(sp)
  8073cc:	dd000417 	ldw	r20,16(sp)
  8073d0:	dcc00317 	ldw	r19,12(sp)
  8073d4:	dc800217 	ldw	r18,8(sp)
  8073d8:	dc400117 	ldw	r17,4(sp)
  8073dc:	dc000017 	ldw	r16,0(sp)
  8073e0:	dec00a04 	addi	sp,sp,40
  8073e4:	f800283a 	ret
      *x1++ = *x++;
  8073e8:	18800017 	ldw	r2,0(r3)
  8073ec:	18c00104 	addi	r3,r3,4
  8073f0:	21000104 	addi	r4,r4,4
  8073f4:	20bfff15 	stw	r2,-4(r4)
    while (x < xe);
  8073f8:	1a3ffb36 	bltu	r3,r8,8073e8 <__lshift+0x174>
  8073fc:	003fe406 	br	807390 <__lshift+0x11c>
	  *x1++ = *x << k | z;
  807400:	00c00104 	movi	r3,4
  807404:	003fde06 	br	807380 <__lshift+0x10c>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  807408:	01800844 	movi	r6,33
  80740c:	01400104 	movi	r5,4
  807410:	9809883a 	mov	r4,r19
  807414:	080a35c0 	call	80a35c <_calloc_r>
  807418:	98801315 	stw	r2,76(r19)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  80741c:	103faf1e 	bne	r2,zero,8072dc <__lshift+0x68>
  b1 = eBalloc (ptr, k1);
  807420:	01c02074 	movhi	r7,129
  807424:	01002074 	movhi	r4,129
  807428:	39c5ab04 	addi	r7,r7,5804
  80742c:	000d883a 	mov	r6,zero
  807430:	01407644 	movi	r5,473
  807434:	2105ce04 	addi	r4,r4,5944
  807438:	080a2e80 	call	80a2e8 <__assert_func>
      x = 1 << k;
  80743c:	07000044 	movi	fp,1
  807440:	e578983a 	sll	fp,fp,r21
      rv = (_Bigint *) _calloc_r (ptr,
  807444:	01400044 	movi	r5,1
  807448:	9809883a 	mov	r4,r19
				  sizeof (_Bigint) +
  80744c:	e1800144 	addi	r6,fp,5
      rv = (_Bigint *) _calloc_r (ptr,
  807450:	300c90ba 	slli	r6,r6,2
  807454:	080a35c0 	call	80a35c <_calloc_r>
  807458:	1029883a 	mov	r20,r2
      if (rv == NULL) return NULL;
  80745c:	103ff026 	beq	r2,zero,807420 <__lshift+0x1ac>
      rv->_k = k;
  807460:	15400115 	stw	r21,4(r2)
      rv->_maxwds = x;
  807464:	17000215 	stw	fp,8(r2)
  807468:	003fa206 	br	8072f4 <__lshift+0x80>

0080746c <__mcmp>:
cmp (_Bigint * a, _Bigint * b)
{
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  80746c:	21800417 	ldw	r6,16(r4)
  j = b->_wds;
  807470:	28c00417 	ldw	r3,16(r5)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
  807474:	30c5c83a 	sub	r2,r6,r3
  807478:	30c00e1e 	bne	r6,r3,8074b4 <__mcmp+0x48>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
  80747c:	180690ba 	slli	r3,r3,2
  xa0 = a->_x;
  807480:	21c00504 	addi	r7,r4,20
  xb0 = b->_x;
  807484:	29400504 	addi	r5,r5,20
  xa = xa0 + j;
  807488:	38c9883a 	add	r4,r7,r3
  xb = xb0 + j;
  80748c:	28c7883a 	add	r3,r5,r3
  807490:	00000106 	br	807498 <__mcmp+0x2c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
  807494:	3900082e 	bgeu	r7,r4,8074b8 <__mcmp+0x4c>
      if (*--xa != *--xb)
  807498:	21bfff17 	ldw	r6,-4(r4)
  80749c:	197fff17 	ldw	r5,-4(r3)
  8074a0:	213fff04 	addi	r4,r4,-4
  8074a4:	18ffff04 	addi	r3,r3,-4
  8074a8:	317ffa26 	beq	r6,r5,807494 <__mcmp+0x28>
	return *xa < *xb ? -1 : 1;
  8074ac:	3140032e 	bgeu	r6,r5,8074bc <__mcmp+0x50>
  8074b0:	00bfffc4 	movi	r2,-1
	break;
    }
  return 0;
}
  8074b4:	f800283a 	ret
  8074b8:	f800283a 	ret
	return *xa < *xb ? -1 : 1;
  8074bc:	00800044 	movi	r2,1
  8074c0:	f800283a 	ret

008074c4 <__mdiff>:
  i = a->_wds;
  8074c4:	28800417 	ldw	r2,16(r5)
  j = b->_wds;
  8074c8:	30c00417 	ldw	r3,16(r6)

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
  8074cc:	defff904 	addi	sp,sp,-28
  8074d0:	dc800315 	stw	r18,12(sp)
  8074d4:	dc400215 	stw	r17,8(sp)
  8074d8:	dc000115 	stw	r16,4(sp)
  8074dc:	dfc00615 	stw	ra,24(sp)
  8074e0:	dd000515 	stw	r20,20(sp)
  8074e4:	dcc00415 	stw	r19,16(sp)
  8074e8:	2823883a 	mov	r17,r5
  8074ec:	3021883a 	mov	r16,r6
  if (i -= j)
  8074f0:	10e5c83a 	sub	r18,r2,r3
  8074f4:	10c07d1e 	bne	r2,r3,8076ec <__mdiff+0x228>
  xa = xa0 + j;
  8074f8:	180c90ba 	slli	r6,r3,2
  xa0 = a->_x;
  8074fc:	29400504 	addi	r5,r5,20
  xb0 = b->_x;
  807500:	80c00504 	addi	r3,r16,20
  xa = xa0 + j;
  807504:	2985883a 	add	r2,r5,r6
  xb = xb0 + j;
  807508:	1987883a 	add	r3,r3,r6
  80750c:	00000106 	br	807514 <__mdiff+0x50>
      if (xa <= xa0)
  807510:	28807d2e 	bgeu	r5,r2,807708 <__mdiff+0x244>
      if (*--xa != *--xb)
  807514:	11ffff17 	ldw	r7,-4(r2)
  807518:	19bfff17 	ldw	r6,-4(r3)
  80751c:	10bfff04 	addi	r2,r2,-4
  807520:	18ffff04 	addi	r3,r3,-4
  807524:	39bffa26 	beq	r7,r6,807510 <__mdiff+0x4c>
	return *xa < *xb ? -1 : 1;
  807528:	39805b36 	bltu	r7,r6,807698 <__mdiff+0x1d4>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  80752c:	20801317 	ldw	r2,76(r4)
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = eBalloc (ptr, a->_k);
  807530:	8cc00117 	ldw	r19,4(r17)
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807534:	10005f26 	beq	r2,zero,8076b4 <__mdiff+0x1f0>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  807538:	980690ba 	slli	r3,r19,2
  80753c:	10c7883a 	add	r3,r2,r3
  807540:	18800017 	ldw	r2,0(r3)
  807544:	10007b26 	beq	r2,zero,807734 <__mdiff+0x270>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  807548:	11000017 	ldw	r4,0(r2)
  80754c:	19000015 	stw	r4,0(r3)
  rv->_sign = rv->_wds = 0;
  807550:	10000415 	stw	zero,16(r2)
  c->_sign = i;
  wa = a->_wds;
  807554:	8a000417 	ldw	r8,16(r17)
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
  807558:	83400417 	ldw	r13,16(r16)
  xa = a->_x;
  80755c:	8b000504 	addi	r12,r17,20
  xae = xa + wa;
  807560:	400890ba 	slli	r4,r8,2
  xbe = xb + wb;
  807564:	681a90ba 	slli	r13,r13,2
  xb = b->_x;
  807568:	82800504 	addi	r10,r16,20
  xc = c->_x;
  80756c:	13800504 	addi	r14,r2,20
  c->_sign = i;
  807570:	14800315 	stw	r18,12(r2)
  xae = xa + wa;
  807574:	6113883a 	add	r9,r12,r4
  xbe = xb + wb;
  807578:	535b883a 	add	r13,r10,r13
  xc = c->_x;
  80757c:	701f883a 	mov	r15,r14
  xa = a->_x;
  807580:	6017883a 	mov	r11,r12
  borrow = 0;
  807584:	0007883a 	mov	r3,zero
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  807588:	59000017 	ldw	r4,0(r11)
  80758c:	51c00017 	ldw	r7,0(r10)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  807590:	7bc00104 	addi	r15,r15,4
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
  807594:	217fffcc 	andi	r5,r4,65535
  807598:	28cb883a 	add	r5,r5,r3
  80759c:	38ffffcc 	andi	r3,r7,65535
  8075a0:	28cbc83a 	sub	r5,r5,r3
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  8075a4:	380ed43a 	srli	r7,r7,16
  8075a8:	2006d43a 	srli	r3,r4,16
      borrow = y >> 16;
  8075ac:	2809d43a 	srai	r4,r5,16
      Storeinc (xc, z, y);
  8075b0:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  8075b4:	19c7c83a 	sub	r3,r3,r7
  8075b8:	1907883a 	add	r3,r3,r4
      Storeinc (xc, z, y);
  8075bc:	180c943a 	slli	r6,r3,16
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  8075c0:	52800104 	addi	r10,r10,4
      borrow = z >> 16;
  8075c4:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  8075c8:	314ab03a 	or	r5,r6,r5
  8075cc:	797fff15 	stw	r5,-4(r15)
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  8075d0:	5ac00104 	addi	r11,r11,4
    }
  while (xb < xbe);
  8075d4:	537fec36 	bltu	r10,r13,807588 <__mdiff+0xc4>
  8075d8:	6c0fc83a 	sub	r7,r13,r16
  8075dc:	39fffac4 	addi	r7,r7,-21
  8075e0:	84000544 	addi	r16,r16,21
  8075e4:	380ed0ba 	srli	r7,r7,2
  8075e8:	6c004536 	bltu	r13,r16,807700 <__mdiff+0x23c>
  8075ec:	380890ba 	slli	r4,r7,2
  8075f0:	7109883a 	add	r4,r14,r4
  8075f4:	6c004036 	bltu	r13,r16,8076f8 <__mdiff+0x234>
  8075f8:	39800044 	addi	r6,r7,1
  8075fc:	300c90ba 	slli	r6,r6,2
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
  807600:	6199883a 	add	r12,r12,r6
      Storeinc (xc, z, y);
  807604:	719d883a 	add	r14,r14,r6
  while (xa < xae)
  807608:	6240152e 	bgeu	r12,r9,807660 <__mdiff+0x19c>
      Storeinc (xc, z, y);
  80760c:	700f883a 	mov	r7,r14
  while (xa < xae)
  807610:	600d883a 	mov	r6,r12
    {
      y = (*xa & 0xffff) + borrow;
  807614:	31000017 	ldw	r4,0(r6)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
  807618:	39c00104 	addi	r7,r7,4
      z = (*xa++ >> 16) + borrow;
  80761c:	31800104 	addi	r6,r6,4
      y = (*xa & 0xffff) + borrow;
  807620:	217fffcc 	andi	r5,r4,65535
  807624:	28cb883a 	add	r5,r5,r3
      borrow = y >> 16;
  807628:	2815d43a 	srai	r10,r5,16
      z = (*xa++ >> 16) + borrow;
  80762c:	2006d43a 	srli	r3,r4,16
      Storeinc (xc, z, y);
  807630:	297fffcc 	andi	r5,r5,65535
      z = (*xa++ >> 16) + borrow;
  807634:	1a87883a 	add	r3,r3,r10
      Storeinc (xc, z, y);
  807638:	1814943a 	slli	r10,r3,16
      borrow = z >> 16;
  80763c:	1807d43a 	srai	r3,r3,16
      Storeinc (xc, z, y);
  807640:	514ab03a 	or	r5,r10,r5
  807644:	397fff15 	stw	r5,-4(r7)
  while (xa < xae)
  807648:	327ff236 	bltu	r6,r9,807614 <__mdiff+0x150>
  80764c:	493fffc4 	addi	r4,r9,-1
  807650:	2309c83a 	sub	r4,r4,r12
  807654:	2008d0ba 	srli	r4,r4,2
  807658:	200890ba 	slli	r4,r4,2
  80765c:	7109883a 	add	r4,r14,r4
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
  807660:	2800041e 	bne	r5,zero,807674 <__mdiff+0x1b0>
  807664:	20ffff17 	ldw	r3,-4(r4)
    wa--;
  807668:	423fffc4 	addi	r8,r8,-1
  while (!*--xc)
  80766c:	213fff04 	addi	r4,r4,-4
  807670:	183ffc26 	beq	r3,zero,807664 <__mdiff+0x1a0>
  c->_wds = wa;
  807674:	12000415 	stw	r8,16(r2)
  return c;
}
  807678:	dfc00617 	ldw	ra,24(sp)
  80767c:	dd000517 	ldw	r20,20(sp)
  807680:	dcc00417 	ldw	r19,16(sp)
  807684:	dc800317 	ldw	r18,12(sp)
  807688:	dc400217 	ldw	r17,8(sp)
  80768c:	dc000117 	ldw	r16,4(sp)
  807690:	dec00704 	addi	sp,sp,28
  807694:	f800283a 	ret
  if (i < 0)
  807698:	8805883a 	mov	r2,r17
      a = b;
  80769c:	8023883a 	mov	r17,r16
      b = c;
  8076a0:	1021883a 	mov	r16,r2
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8076a4:	20801317 	ldw	r2,76(r4)
  c = eBalloc (ptr, a->_k);
  8076a8:	8cc00117 	ldw	r19,4(r17)
      i = 1;
  8076ac:	04800044 	movi	r18,1
  if (_REENT_MP_FREELIST(ptr) == NULL)
  8076b0:	103fa11e 	bne	r2,zero,807538 <__mdiff+0x74>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  8076b4:	01800844 	movi	r6,33
  8076b8:	01400104 	movi	r5,4
  8076bc:	d9000015 	stw	r4,0(sp)
  8076c0:	080a35c0 	call	80a35c <_calloc_r>
  8076c4:	d9000017 	ldw	r4,0(sp)
  8076c8:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  8076cc:	103f9a1e 	bne	r2,zero,807538 <__mdiff+0x74>
  c = eBalloc (ptr, a->_k);
  8076d0:	01c02074 	movhi	r7,129
  8076d4:	01002074 	movhi	r4,129
  8076d8:	39c5ab04 	addi	r7,r7,5804
  8076dc:	000d883a 	mov	r6,zero
  8076e0:	01409004 	movi	r5,576
  8076e4:	2105ce04 	addi	r4,r4,5944
  8076e8:	080a2e80 	call	80a2e8 <__assert_func>
  if (i < 0)
  8076ec:	903fea16 	blt	r18,zero,807698 <__mdiff+0x1d4>
    i = 0;
  8076f0:	0025883a 	mov	r18,zero
  8076f4:	003f8d06 	br	80752c <__mdiff+0x68>
  8076f8:	01800104 	movi	r6,4
  8076fc:	003fc006 	br	807600 <__mdiff+0x13c>
  807700:	0009883a 	mov	r4,zero
  807704:	003fba06 	br	8075f0 <__mdiff+0x12c>
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807708:	20c01317 	ldw	r3,76(r4)
  80770c:	18001326 	beq	r3,zero,80775c <__mdiff+0x298>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  807710:	18800017 	ldw	r2,0(r3)
  807714:	10002026 	beq	r2,zero,807798 <__mdiff+0x2d4>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  807718:	11000017 	ldw	r4,0(r2)
  80771c:	19000015 	stw	r4,0(r3)
      c->_wds = 1;
  807720:	00c00044 	movi	r3,1
  rv->_sign = rv->_wds = 0;
  807724:	10000315 	stw	zero,12(r2)
      c->_wds = 1;
  807728:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
  80772c:	10000515 	stw	zero,20(r2)
      return c;
  807730:	003fd106 	br	807678 <__mdiff+0x1b4>
      x = 1 << k;
  807734:	05000044 	movi	r20,1
  807738:	a4e8983a 	sll	r20,r20,r19
      rv = (_Bigint *) _calloc_r (ptr,
  80773c:	01400044 	movi	r5,1
				  sizeof (_Bigint) +
  807740:	a1800144 	addi	r6,r20,5
      rv = (_Bigint *) _calloc_r (ptr,
  807744:	300c90ba 	slli	r6,r6,2
  807748:	080a35c0 	call	80a35c <_calloc_r>
      if (rv == NULL) return NULL;
  80774c:	103fe026 	beq	r2,zero,8076d0 <__mdiff+0x20c>
      rv->_k = k;
  807750:	14c00115 	stw	r19,4(r2)
      rv->_maxwds = x;
  807754:	15000215 	stw	r20,8(r2)
  807758:	003f7d06 	br	807550 <__mdiff+0x8c>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  80775c:	01800844 	movi	r6,33
  807760:	01400104 	movi	r5,4
  807764:	d9000015 	stw	r4,0(sp)
  807768:	080a35c0 	call	80a35c <_calloc_r>
  80776c:	d9000017 	ldw	r4,0(sp)
  807770:	1007883a 	mov	r3,r2
  807774:	20801315 	stw	r2,76(r4)
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807778:	103fe51e 	bne	r2,zero,807710 <__mdiff+0x24c>
      c = eBalloc (ptr, 0);
  80777c:	01c02074 	movhi	r7,129
  807780:	01002074 	movhi	r4,129
  807784:	39c5ab04 	addi	r7,r7,5804
  807788:	000d883a 	mov	r6,zero
  80778c:	01408c84 	movi	r5,562
  807790:	2105ce04 	addi	r4,r4,5944
  807794:	080a2e80 	call	80a2e8 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  807798:	01800604 	movi	r6,24
  80779c:	01400044 	movi	r5,1
  8077a0:	080a35c0 	call	80a35c <_calloc_r>
      if (rv == NULL) return NULL;
  8077a4:	103ff526 	beq	r2,zero,80777c <__mdiff+0x2b8>
      rv->_maxwds = x;
  8077a8:	00c00044 	movi	r3,1
      rv->_k = k;
  8077ac:	10000115 	stw	zero,4(r2)
      rv->_maxwds = x;
  8077b0:	10c00215 	stw	r3,8(r2)
  8077b4:	003fda06 	br	807720 <__mdiff+0x25c>

008077b8 <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
  8077b8:	28dffc2c 	andhi	r3,r5,32752
  8077bc:	017f3034 	movhi	r5,64704
  8077c0:	1947883a 	add	r3,r3,r5
#ifndef Sudden_Underflow
  if (L > 0)
  8077c4:	00c0020e 	bge	zero,r3,8077d0 <__ulp+0x18>
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
  8077c8:	0005883a 	mov	r2,zero
  8077cc:	f800283a 	ret
      L = -L >> Exp_shift;
  8077d0:	00c7c83a 	sub	r3,zero,r3
  8077d4:	1807d53a 	srai	r3,r3,20
      if (L < Exp_shift)
  8077d8:	18800508 	cmpgei	r2,r3,20
  8077dc:	1000041e 	bne	r2,zero,8077f0 <__ulp+0x38>
	  word0 (a) = 0x80000 >> L;
  8077e0:	00800234 	movhi	r2,8
  8077e4:	10c7d83a 	sra	r3,r2,r3
	  word1 (a) = 0;
  8077e8:	0005883a 	mov	r2,zero
  8077ec:	f800283a 	ret
#endif
	}
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
  8077f0:	193ffb04 	addi	r4,r3,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  8077f4:	208007c8 	cmpgei	r2,r4,31
	  word0 (a) = 0;
  8077f8:	0007883a 	mov	r3,zero
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
  8077fc:	1000031e 	bne	r2,zero,80780c <__ulp+0x54>
  807800:	00a00034 	movhi	r2,32768
  807804:	1104d83a 	srl	r2,r2,r4
  807808:	f800283a 	ret
  80780c:	00800044 	movi	r2,1
#endif
	}
    }
#endif
  return a.d;
}
  807810:	f800283a 	ret

00807814 <__b2d>:
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  807814:	22000417 	ldw	r8,16(r4)
  xa0 = a->_x;
  807818:	21c00504 	addi	r7,r4,20
  xa = xa0 + a->_wds;
  80781c:	401090ba 	slli	r8,r8,2
  807820:	3a11883a 	add	r8,r7,r8
  y = *--xa;
  807824:	427fff17 	ldw	r9,-4(r8)
  807828:	42bfff04 	addi	r10,r8,-4
  if (!(x & 0xffff0000))
  80782c:	48bfffec 	andhi	r2,r9,65535
  807830:	10001e1e 	bne	r2,zero,8078ac <__b2d+0x98>
      x <<= 16;
  807834:	480c943a 	slli	r6,r9,16
  807838:	00c00604 	movi	r3,24
      k = 16;
  80783c:	01000404 	movi	r4,16
  if (!(x & 0xff000000))
  807840:	30bfc02c 	andhi	r2,r6,65280
  807844:	1000021e 	bne	r2,zero,807850 <__b2d+0x3c>
      x <<= 8;
  807848:	300c923a 	slli	r6,r6,8
      k += 8;
  80784c:	1809883a 	mov	r4,r3
  if (!(x & 0xf0000000))
  807850:	30bc002c 	andhi	r2,r6,61440
  807854:	1000021e 	bne	r2,zero,807860 <__b2d+0x4c>
      x <<= 4;
  807858:	300c913a 	slli	r6,r6,4
      k += 4;
  80785c:	21000104 	addi	r4,r4,4
  if (!(x & 0xc0000000))
  807860:	30b0002c 	andhi	r2,r6,49152
  807864:	1000021e 	bne	r2,zero,807870 <__b2d+0x5c>
      x <<= 2;
  807868:	300c90ba 	slli	r6,r6,2
      k += 2;
  80786c:	21000084 	addi	r4,r4,2
  if (!(x & 0x80000000))
  807870:	30000316 	blt	r6,zero,807880 <__b2d+0x6c>
      if (!(x & 0x40000000))
  807874:	3190002c 	andhi	r6,r6,16384
      k++;
  807878:	21000044 	addi	r4,r4,1
      if (!(x & 0x40000000))
  80787c:	30002326 	beq	r6,zero,80790c <__b2d+0xf8>
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  *e = 32 - k;
  807880:	00c00804 	movi	r3,32
  807884:	1905c83a 	sub	r2,r3,r4
  807888:	28800015 	stw	r2,0(r5)
#ifdef Pack_32
  if (k < Ebits)
  80788c:	208002c8 	cmpgei	r2,r4,11
  807890:	10000e26 	beq	r2,zero,8078cc <__b2d+0xb8>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
  807894:	213ffd44 	addi	r4,r4,-11
  z = xa > xa0 ? *--xa : 0;
  807898:	3a80082e 	bgeu	r7,r10,8078bc <__b2d+0xa8>
  80789c:	40bffe17 	ldw	r2,-8(r8)
  if (k -= Ebits)
  8078a0:	2000211e 	bne	r4,zero,807928 <__b2d+0x114>
      d1 = z << k | y >> (32 - k);
#endif
    }
  else
    {
      d0 = Exp_1 | y;
  8078a4:	48cffc34 	orhi	r3,r9,16368
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
  8078a8:	f800283a 	ret
  8078ac:	480d883a 	mov	r6,r9
  8078b0:	00c00204 	movi	r3,8
  register int k = 0;
  8078b4:	0009883a 	mov	r4,zero
  8078b8:	003fe106 	br	807840 <__b2d+0x2c>
  if (k -= Ebits)
  8078bc:	2000161e 	bne	r4,zero,807918 <__b2d+0x104>
  z = xa > xa0 ? *--xa : 0;
  8078c0:	0005883a 	mov	r2,zero
      d0 = Exp_1 | y;
  8078c4:	48cffc34 	orhi	r3,r9,16368
  return d.d;
  8078c8:	f800283a 	ret
      d0 = Exp_1 | y >> (Ebits - k);
  8078cc:	008002c4 	movi	r2,11
  8078d0:	1105c83a 	sub	r2,r2,r4
  8078d4:	4886d83a 	srl	r3,r9,r2
  8078d8:	18cffc34 	orhi	r3,r3,16368
      w = xa > xa0 ? *--xa : 0;
  8078dc:	3a800536 	bltu	r7,r10,8078f4 <__b2d+0xe0>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8078e0:	21000544 	addi	r4,r4,21
  8078e4:	4904983a 	sll	r2,r9,r4
  8078e8:	000b883a 	mov	r5,zero
  8078ec:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  8078f0:	f800283a 	ret
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  8078f4:	417ffe17 	ldw	r5,-8(r8)
  8078f8:	21000544 	addi	r4,r4,21
  8078fc:	288ad83a 	srl	r5,r5,r2
  807900:	4904983a 	sll	r2,r9,r4
  807904:	1144b03a 	or	r2,r2,r5
      goto ret_d;
  807908:	f800283a 	ret
  *e = 32 - k;
  80790c:	28000015 	stw	zero,0(r5)
  z = xa > xa0 ? *--xa : 0;
  807910:	3a801236 	bltu	r7,r10,80795c <__b2d+0x148>
  807914:	01000544 	movi	r4,21
      d0 = Exp_1 | y << k | z >> (32 - k);
  807918:	4908983a 	sll	r4,r9,r4
  80791c:	0005883a 	mov	r2,zero
  807920:	20cffc34 	orhi	r3,r4,16368
      y = xa > xa0 ? *--xa : 0;
  807924:	f800283a 	ret
  z = xa > xa0 ? *--xa : 0;
  807928:	423ffe04 	addi	r8,r8,-8
      d0 = Exp_1 | y << k | z >> (32 - k);
  80792c:	190bc83a 	sub	r5,r3,r4
  807930:	4906983a 	sll	r3,r9,r4
  807934:	1152d83a 	srl	r9,r2,r5
      d1 = z << k | y >> (32 - k);
  807938:	1104983a 	sll	r2,r2,r4
      d0 = Exp_1 | y << k | z >> (32 - k);
  80793c:	1a48b03a 	or	r4,r3,r9
  807940:	20cffc34 	orhi	r3,r4,16368
      y = xa > xa0 ? *--xa : 0;
  807944:	3a00042e 	bgeu	r7,r8,807958 <__b2d+0x144>
      d1 = z << k | y >> (32 - k);
  807948:	413fff17 	ldw	r4,-4(r8)
  80794c:	214ad83a 	srl	r5,r4,r5
  807950:	1144b03a 	or	r2,r2,r5
  807954:	f800283a 	ret
}
  807958:	f800283a 	ret
  z = xa > xa0 ? *--xa : 0;
  80795c:	40bffe17 	ldw	r2,-8(r8)
  807960:	014002c4 	movi	r5,11
  807964:	423ffe04 	addi	r8,r8,-8
  if (k -= Ebits)
  807968:	01000544 	movi	r4,21
  80796c:	003ff006 	br	807930 <__b2d+0x11c>

00807970 <__d2b>:
  if (_REENT_MP_FREELIST(ptr) == NULL)
  807970:	20c01317 	ldw	r3,76(r4)
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
  807974:	defffb04 	addi	sp,sp,-20
  807978:	dcc00315 	stw	r19,12(sp)
  80797c:	dc800215 	stw	r18,8(sp)
  807980:	dc400115 	stw	r17,4(sp)
  807984:	dc000015 	stw	r16,0(sp)
  807988:	dfc00415 	stw	ra,16(sp)
  80798c:	2023883a 	mov	r17,r4
  807990:	2827883a 	mov	r19,r5
  807994:	3021883a 	mov	r16,r6
  807998:	3825883a 	mov	r18,r7
  if (_REENT_MP_FREELIST(ptr) == NULL)
  80799c:	18009a26 	beq	r3,zero,807c08 <__d2b+0x298>
  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
  8079a0:	18800117 	ldw	r2,4(r3)
  8079a4:	1000a526 	beq	r2,zero,807c3c <__d2b+0x2cc>
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
  8079a8:	11000017 	ldw	r4,0(r2)
  8079ac:	19000115 	stw	r4,4(r3)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  8079b0:	8008d53a 	srli	r4,r16,20
  z = d0 & Frac_mask;
  8079b4:	01800434 	movhi	r6,16
  8079b8:	31bfffc4 	addi	r6,r6,-1
  rv->_sign = rv->_wds = 0;
  8079bc:	10000415 	stw	zero,16(r2)
  8079c0:	10000315 	stw	zero,12(r2)
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  8079c4:	2101ffcc 	andi	r4,r4,2047
  z = d0 & Frac_mask;
  8079c8:	818c703a 	and	r6,r16,r6
  if ((de = (int) (d0 >> Exp_shift)) != 0)
  8079cc:	20000126 	beq	r4,zero,8079d4 <__d2b+0x64>
    z |= Exp_msk1;
  8079d0:	31800434 	orhi	r6,r6,16
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
  8079d4:	98001f26 	beq	r19,zero,807a54 <__d2b+0xe4>
  if (x & 7)
  8079d8:	98c001cc 	andi	r3,r19,7
  8079dc:	18005e26 	beq	r3,zero,807b58 <__d2b+0x1e8>
      if (x & 1)
  8079e0:	98c0004c 	andi	r3,r19,1
  8079e4:	1800811e 	bne	r3,zero,807bec <__d2b+0x27c>
      if (x & 2)
  8079e8:	98c0008c 	andi	r3,r19,2
  8079ec:	1800ab26 	beq	r3,zero,807c9c <__d2b+0x32c>
	  *y = x >> 1;
  8079f0:	9810d07a 	srli	r8,r19,1
    {
      y = d1;
      k = lo0bits (&y);
      if (k)
	{
         x[0] = y | z << (32 - k);
  8079f4:	300a97fa 	slli	r5,r6,31
	  return 1;
  8079f8:	00c00044 	movi	r3,1
	  z >>= k;
  8079fc:	30ccd83a 	srl	r6,r6,r3
         x[0] = y | z << (32 - k);
  807a00:	4150b03a 	or	r8,r8,r5
  807a04:	12000515 	stw	r8,20(r2)
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
  807a08:	11800615 	stw	r6,24(r2)
  807a0c:	30001a26 	beq	r6,zero,807a78 <__d2b+0x108>
  807a10:	01400084 	movi	r5,2
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
      x[0] = z;
      i = b->_wds = 1;
  807a14:	11400415 	stw	r5,16(r2)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
  807a18:	20001a26 	beq	r4,zero,807a84 <__d2b+0x114>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
  807a1c:	213ef344 	addi	r4,r4,-1075
  807a20:	20c9883a 	add	r4,r4,r3
  807a24:	91000015 	stw	r4,0(r18)
      *bits = P - k;
  807a28:	01000d44 	movi	r4,53
  807a2c:	20c7c83a 	sub	r3,r4,r3
  807a30:	d9000517 	ldw	r4,20(sp)
  807a34:	20c00015 	stw	r3,0(r4)
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
  807a38:	dfc00417 	ldw	ra,16(sp)
  807a3c:	dcc00317 	ldw	r19,12(sp)
  807a40:	dc800217 	ldw	r18,8(sp)
  807a44:	dc400117 	ldw	r17,4(sp)
  807a48:	dc000017 	ldw	r16,0(sp)
  807a4c:	dec00504 	addi	sp,sp,20
  807a50:	f800283a 	ret
  if (x & 7)
  807a54:	30c001cc 	andi	r3,r6,7
  807a58:	18002926 	beq	r3,zero,807b00 <__d2b+0x190>
      if (x & 1)
  807a5c:	30c0004c 	andi	r3,r6,1
  807a60:	1800601e 	bne	r3,zero,807be4 <__d2b+0x274>
      if (x & 2)
  807a64:	30c0008c 	andi	r3,r6,2
  807a68:	18008926 	beq	r3,zero,807c90 <__d2b+0x320>
	  *y = x >> 1;
  807a6c:	300cd07a 	srli	r6,r6,1
	  return 1;
  807a70:	00c00844 	movi	r3,33
      x[0] = z;
  807a74:	11800515 	stw	r6,20(r2)
      i = b->_wds = 1;
  807a78:	01400044 	movi	r5,1
  807a7c:	11400415 	stw	r5,16(r2)
  if (de)
  807a80:	203fe61e 	bne	r4,zero,807a1c <__d2b+0xac>
      *bits = 32 * i - hi0bits (x[i - 1]);
  807a84:	280890ba 	slli	r4,r5,2
      *e = de - Bias - (P - 1) + 1 + k;
  807a88:	18fef384 	addi	r3,r3,-1074
  807a8c:	90c00015 	stw	r3,0(r18)
      *bits = 32 * i - hi0bits (x[i - 1]);
  807a90:	1107883a 	add	r3,r2,r4
  807a94:	18c00417 	ldw	r3,16(r3)
  807a98:	280a917a 	slli	r5,r5,5
  if (!(x & 0xffff0000))
  807a9c:	193fffec 	andhi	r4,r3,65535
  807aa0:	2000561e 	bne	r4,zero,807bfc <__d2b+0x28c>
      x <<= 16;
  807aa4:	1806943a 	slli	r3,r3,16
  807aa8:	01c00604 	movi	r7,24
      k = 16;
  807aac:	01000404 	movi	r4,16
  if (!(x & 0xff000000))
  807ab0:	19bfc02c 	andhi	r6,r3,65280
  807ab4:	3000021e 	bne	r6,zero,807ac0 <__d2b+0x150>
      x <<= 8;
  807ab8:	1806923a 	slli	r3,r3,8
      k += 8;
  807abc:	3809883a 	mov	r4,r7
  if (!(x & 0xf0000000))
  807ac0:	19bc002c 	andhi	r6,r3,61440
  807ac4:	3000021e 	bne	r6,zero,807ad0 <__d2b+0x160>
      x <<= 4;
  807ac8:	1806913a 	slli	r3,r3,4
      k += 4;
  807acc:	21000104 	addi	r4,r4,4
  if (!(x & 0xc0000000))
  807ad0:	19b0002c 	andhi	r6,r3,49152
  807ad4:	3000021e 	bne	r6,zero,807ae0 <__d2b+0x170>
      x <<= 2;
  807ad8:	180690ba 	slli	r3,r3,2
      k += 2;
  807adc:	21000084 	addi	r4,r4,2
  if (!(x & 0x80000000))
  807ae0:	18000316 	blt	r3,zero,807af0 <__d2b+0x180>
      if (!(x & 0x40000000))
  807ae4:	18d0002c 	andhi	r3,r3,16384
      k++;
  807ae8:	21000044 	addi	r4,r4,1
      if (!(x & 0x40000000))
  807aec:	18006626 	beq	r3,zero,807c88 <__d2b+0x318>
      *bits = 32 * i - hi0bits (x[i - 1]);
  807af0:	d8c00517 	ldw	r3,20(sp)
  807af4:	290bc83a 	sub	r5,r5,r4
  807af8:	19400015 	stw	r5,0(r3)
  return b;
  807afc:	003fce06 	br	807a38 <__d2b+0xc8>
  if (!(x & 0xffff))
  807b00:	30ffffcc 	andi	r3,r6,65535
  807b04:	1800321e 	bne	r3,zero,807bd0 <__d2b+0x260>
      x >>= 16;
  807b08:	300ad43a 	srli	r5,r6,16
  807b0c:	02000604 	movi	r8,24
      k = 16;
  807b10:	00c00404 	movi	r3,16
      x >>= 16;
  807b14:	280f883a 	mov	r7,r5
  if (!(x & 0xff))
  807b18:	3800021e 	bne	r7,zero,807b24 <__d2b+0x1b4>
      x >>= 8;
  807b1c:	280ad23a 	srli	r5,r5,8
      k += 8;
  807b20:	4007883a 	mov	r3,r8
  if (!(x & 0xf))
  807b24:	29c003cc 	andi	r7,r5,15
  807b28:	3800021e 	bne	r7,zero,807b34 <__d2b+0x1c4>
      x >>= 4;
  807b2c:	280ad13a 	srli	r5,r5,4
      k += 4;
  807b30:	18c00104 	addi	r3,r3,4
  if (!(x & 0x3))
  807b34:	29c000cc 	andi	r7,r5,3
  807b38:	3800021e 	bne	r7,zero,807b44 <__d2b+0x1d4>
      x >>= 2;
  807b3c:	280ad0ba 	srli	r5,r5,2
      k += 2;
  807b40:	18c00084 	addi	r3,r3,2
  if (!(x & 1))
  807b44:	29c0004c 	andi	r7,r5,1
  807b48:	38004626 	beq	r7,zero,807c64 <__d2b+0x2f4>
      k += 32;
  807b4c:	18c00804 	addi	r3,r3,32
  807b50:	280d883a 	mov	r6,r5
  807b54:	003fc706 	br	807a74 <__d2b+0x104>
  if (!(x & 0xffff))
  807b58:	98ffffcc 	andi	r3,r19,65535
  807b5c:	18001826 	beq	r3,zero,807bc0 <__d2b+0x250>
  807b60:	9811883a 	mov	r8,r19
  807b64:	01c00204 	movi	r7,8
  k = 0;
  807b68:	0007883a 	mov	r3,zero
  if (!(x & 0xff))
  807b6c:	41403fcc 	andi	r5,r8,255
  807b70:	2800021e 	bne	r5,zero,807b7c <__d2b+0x20c>
      x >>= 8;
  807b74:	4010d23a 	srli	r8,r8,8
      k += 8;
  807b78:	3807883a 	mov	r3,r7
  if (!(x & 0xf))
  807b7c:	414003cc 	andi	r5,r8,15
  807b80:	2800021e 	bne	r5,zero,807b8c <__d2b+0x21c>
      x >>= 4;
  807b84:	4010d13a 	srli	r8,r8,4
      k += 4;
  807b88:	18c00104 	addi	r3,r3,4
  if (!(x & 0x3))
  807b8c:	414000cc 	andi	r5,r8,3
  807b90:	2800391e 	bne	r5,zero,807c78 <__d2b+0x308>
      x >>= 2;
  807b94:	4010d0ba 	srli	r8,r8,2
      k += 2;
  807b98:	18c00084 	addi	r3,r3,2
  if (!(x & 1))
  807b9c:	4140004c 	andi	r5,r8,1
  807ba0:	2800031e 	bne	r5,zero,807bb0 <__d2b+0x240>
      x >>= 1;
  807ba4:	4010d07a 	srli	r8,r8,1
      k++;
  807ba8:	18c00044 	addi	r3,r3,1
      if (!x & 1)
  807bac:	40003f26 	beq	r8,zero,807cac <__d2b+0x33c>
         x[0] = y | z << (32 - k);
  807bb0:	01400804 	movi	r5,32
  807bb4:	28cbc83a 	sub	r5,r5,r3
  807bb8:	314a983a 	sll	r5,r6,r5
  807bbc:	003f8f06 	br	8079fc <__d2b+0x8c>
      x >>= 16;
  807bc0:	9810d43a 	srli	r8,r19,16
  807bc4:	01c00604 	movi	r7,24
      k = 16;
  807bc8:	00c00404 	movi	r3,16
  807bcc:	003fe706 	br	807b6c <__d2b+0x1fc>
  if (!(x & 0xff))
  807bd0:	31c03fcc 	andi	r7,r6,255
  807bd4:	300b883a 	mov	r5,r6
  807bd8:	02000204 	movi	r8,8
  k = 0;
  807bdc:	0007883a 	mov	r3,zero
  807be0:	003fcd06 	br	807b18 <__d2b+0x1a8>
  807be4:	00c00804 	movi	r3,32
  807be8:	003fa206 	br	807a74 <__d2b+0x104>
  807bec:	9811883a 	mov	r8,r19
	x[0] = y;
  807bf0:	12000515 	stw	r8,20(r2)
  807bf4:	0007883a 	mov	r3,zero
  807bf8:	003f8306 	br	807a08 <__d2b+0x98>
  807bfc:	01c00204 	movi	r7,8
  register int k = 0;
  807c00:	0009883a 	mov	r4,zero
  807c04:	003faa06 	br	807ab0 <__d2b+0x140>
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
  807c08:	01800844 	movi	r6,33
  807c0c:	01400104 	movi	r5,4
  807c10:	080a35c0 	call	80a35c <_calloc_r>
  807c14:	88801315 	stw	r2,76(r17)
  807c18:	1007883a 	mov	r3,r2
      if (_REENT_MP_FREELIST(ptr) == NULL)
  807c1c:	103f601e 	bne	r2,zero,8079a0 <__d2b+0x30>
  b = eBalloc (ptr, 1);
  807c20:	01c02074 	movhi	r7,129
  807c24:	01002074 	movhi	r4,129
  807c28:	39c5ab04 	addi	r7,r7,5804
  807c2c:	000d883a 	mov	r6,zero
  807c30:	0140c284 	movi	r5,778
  807c34:	2105ce04 	addi	r4,r4,5944
  807c38:	080a2e80 	call	80a2e8 <__assert_func>
      rv = (_Bigint *) _calloc_r (ptr,
  807c3c:	01800704 	movi	r6,28
  807c40:	01400044 	movi	r5,1
  807c44:	8809883a 	mov	r4,r17
  807c48:	080a35c0 	call	80a35c <_calloc_r>
      if (rv == NULL) return NULL;
  807c4c:	103ff426 	beq	r2,zero,807c20 <__d2b+0x2b0>
      rv->_k = k;
  807c50:	00c00044 	movi	r3,1
  807c54:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
  807c58:	00c00084 	movi	r3,2
  807c5c:	10c00215 	stw	r3,8(r2)
  807c60:	003f5306 	br	8079b0 <__d2b+0x40>
      x >>= 1;
  807c64:	280ad07a 	srli	r5,r5,1
      if (!x & 1)
  807c68:	28001426 	beq	r5,zero,807cbc <__d2b+0x34c>
      k += 32;
  807c6c:	18c00844 	addi	r3,r3,33
  807c70:	280d883a 	mov	r6,r5
  807c74:	003f7f06 	br	807a74 <__d2b+0x104>
  if (!(x & 1))
  807c78:	4140004c 	andi	r5,r8,1
  807c7c:	283fc926 	beq	r5,zero,807ba4 <__d2b+0x234>
      if (k)
  807c80:	183fdb26 	beq	r3,zero,807bf0 <__d2b+0x280>
  807c84:	003fca06 	br	807bb0 <__d2b+0x240>
	return 32;
  807c88:	01000804 	movi	r4,32
  807c8c:	003f9806 	br	807af0 <__d2b+0x180>
      *y = x >> 2;
  807c90:	300cd0ba 	srli	r6,r6,2
      return 2;
  807c94:	00c00884 	movi	r3,34
  807c98:	003f7606 	br	807a74 <__d2b+0x104>
      *y = x >> 2;
  807c9c:	9810d0ba 	srli	r8,r19,2
         x[0] = y | z << (32 - k);
  807ca0:	300a97ba 	slli	r5,r6,30
      return 2;
  807ca4:	00c00084 	movi	r3,2
  807ca8:	003f5406 	br	8079fc <__d2b+0x8c>
  807cac:	300b883a 	mov	r5,r6
  807cb0:	9811883a 	mov	r8,r19
	return 32;
  807cb4:	00c00804 	movi	r3,32
  807cb8:	003f5006 	br	8079fc <__d2b+0x8c>
  807cbc:	00c01004 	movi	r3,64
  807cc0:	003f6c06 	br	807a74 <__d2b+0x104>

00807cc4 <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
  807cc4:	defffc04 	addi	sp,sp,-16
  807cc8:	dc400215 	stw	r17,8(sp)
  807ccc:	2823883a 	mov	r17,r5
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  807cd0:	d80b883a 	mov	r5,sp
{
  807cd4:	dc000115 	stw	r16,4(sp)
  807cd8:	dfc00315 	stw	ra,12(sp)
  807cdc:	2021883a 	mov	r16,r4
  da.d = b2d (a, &ka);
  807ce0:	08078140 	call	807814 <__b2d>
  xa = xa0 + a->_wds;
  807ce4:	8b000417 	ldw	r12,16(r17)
  xa0 = a->_x;
  807ce8:	8a800504 	addi	r10,r17,20
  da.d = b2d (a, &ka);
  807cec:	1009883a 	mov	r4,r2
  xa = xa0 + a->_wds;
  807cf0:	601690ba 	slli	r11,r12,2
  da.d = b2d (a, &ka);
  807cf4:	180b883a 	mov	r5,r3
  xa = xa0 + a->_wds;
  807cf8:	52d7883a 	add	r11,r10,r11
  y = *--xa;
  807cfc:	5b7fff17 	ldw	r13,-4(r11)
  807d00:	5bbfff04 	addi	r14,r11,-4
  if (!(x & 0xffff0000))
  807d04:	68bfffec 	andhi	r2,r13,65535
  807d08:	10002b1e 	bne	r2,zero,807db8 <__ratio+0xf4>
      x <<= 16;
  807d0c:	680c943a 	slli	r6,r13,16
  807d10:	00c00604 	movi	r3,24
      k = 16;
  807d14:	02400404 	movi	r9,16
  if (!(x & 0xff000000))
  807d18:	30bfc02c 	andhi	r2,r6,65280
  807d1c:	1000021e 	bne	r2,zero,807d28 <__ratio+0x64>
      x <<= 8;
  807d20:	300c923a 	slli	r6,r6,8
      k += 8;
  807d24:	1813883a 	mov	r9,r3
  if (!(x & 0xf0000000))
  807d28:	30bc002c 	andhi	r2,r6,61440
  807d2c:	1000021e 	bne	r2,zero,807d38 <__ratio+0x74>
      x <<= 4;
  807d30:	300c913a 	slli	r6,r6,4
      k += 4;
  807d34:	4a400104 	addi	r9,r9,4
  if (!(x & 0xc0000000))
  807d38:	30b0002c 	andhi	r2,r6,49152
  807d3c:	1000021e 	bne	r2,zero,807d48 <__ratio+0x84>
      x <<= 2;
  807d40:	300c90ba 	slli	r6,r6,2
      k += 2;
  807d44:	4a400084 	addi	r9,r9,2
  if (!(x & 0x80000000))
  807d48:	30000316 	blt	r6,zero,807d58 <__ratio+0x94>
      if (!(x & 0x40000000))
  807d4c:	3190002c 	andhi	r6,r6,16384
      k++;
  807d50:	4a400044 	addi	r9,r9,1
      if (!(x & 0x40000000))
  807d54:	30002f26 	beq	r6,zero,807e14 <__ratio+0x150>
  *e = 32 - k;
  807d58:	02000804 	movi	r8,32
  if (k < Ebits)
  807d5c:	488002c8 	cmpgei	r2,r9,11
  *e = 32 - k;
  807d60:	4247c83a 	sub	r3,r8,r9
  if (k < Ebits)
  807d64:	10001e26 	beq	r2,zero,807de0 <__ratio+0x11c>
  if (k -= Ebits)
  807d68:	4a7ffd44 	addi	r9,r9,-11
  z = xa > xa0 ? *--xa : 0;
  807d6c:	5380162e 	bgeu	r10,r14,807dc8 <__ratio+0x104>
  807d70:	59bffe17 	ldw	r6,-8(r11)
  if (k -= Ebits)
  807d74:	48002e1e 	bne	r9,zero,807e30 <__ratio+0x16c>
      d0 = Exp_1 | y;
  807d78:	69cffc34 	orhi	r7,r13,16368
  db.d = b2d (b, &kb);
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
  807d7c:	82000417 	ldw	r8,16(r16)
  807d80:	d8800017 	ldw	r2,0(sp)
  807d84:	4311c83a 	sub	r8,r8,r12
  807d88:	4010917a 	slli	r8,r8,5
  807d8c:	10c5c83a 	sub	r2,r2,r3
  807d90:	4091883a 	add	r8,r8,r2
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
  807d94:	02000f0e 	bge	zero,r8,807dd4 <__ratio+0x110>
    word0 (da) += k * Exp_msk1;
  807d98:	4010953a 	slli	r8,r8,20
  807d9c:	414b883a 	add	r5,r8,r5
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
  807da0:	080cd000 	call	80cd00 <__divdf3>
}
  807da4:	dfc00317 	ldw	ra,12(sp)
  807da8:	dc400217 	ldw	r17,8(sp)
  807dac:	dc000117 	ldw	r16,4(sp)
  807db0:	dec00404 	addi	sp,sp,16
  807db4:	f800283a 	ret
  807db8:	680d883a 	mov	r6,r13
  807dbc:	00c00204 	movi	r3,8
  register int k = 0;
  807dc0:	0013883a 	mov	r9,zero
  807dc4:	003fd406 	br	807d18 <__ratio+0x54>
  if (k -= Ebits)
  807dc8:	4800151e 	bne	r9,zero,807e20 <__ratio+0x15c>
  z = xa > xa0 ? *--xa : 0;
  807dcc:	000d883a 	mov	r6,zero
  807dd0:	003fe906 	br	807d78 <__ratio+0xb4>
      word0 (db) += k * Exp_msk1;
  807dd4:	4010953a 	slli	r8,r8,20
  807dd8:	3a0fc83a 	sub	r7,r7,r8
  807ddc:	003ff006 	br	807da0 <__ratio+0xdc>
      d0 = Exp_1 | y >> (Ebits - k);
  807de0:	018002c4 	movi	r6,11
  807de4:	324dc83a 	sub	r6,r6,r9
  807de8:	698ed83a 	srl	r7,r13,r6
  807dec:	39cffc34 	orhi	r7,r7,16368
      w = xa > xa0 ? *--xa : 0;
  807df0:	53800536 	bltu	r10,r14,807e08 <__ratio+0x144>
  807df4:	000d883a 	mov	r6,zero
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  807df8:	4a400544 	addi	r9,r9,21
  807dfc:	6a52983a 	sll	r9,r13,r9
  807e00:	498cb03a 	or	r6,r9,r6
      goto ret_d;
  807e04:	003fdd06 	br	807d7c <__ratio+0xb8>
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
  807e08:	58bffe17 	ldw	r2,-8(r11)
  807e0c:	118cd83a 	srl	r6,r2,r6
  807e10:	003ff906 	br	807df8 <__ratio+0x134>
  z = xa > xa0 ? *--xa : 0;
  807e14:	53801236 	bltu	r10,r14,807e60 <__ratio+0x19c>
  807e18:	02400544 	movi	r9,21
  *e = 32 - k;
  807e1c:	0007883a 	mov	r3,zero
      d0 = Exp_1 | y << k | z >> (32 - k);
  807e20:	6a52983a 	sll	r9,r13,r9
  807e24:	000d883a 	mov	r6,zero
  807e28:	49cffc34 	orhi	r7,r9,16368
      y = xa > xa0 ? *--xa : 0;
  807e2c:	003fd306 	br	807d7c <__ratio+0xb8>
  z = xa > xa0 ? *--xa : 0;
  807e30:	5afffe04 	addi	r11,r11,-8
      d0 = Exp_1 | y << k | z >> (32 - k);
  807e34:	4251c83a 	sub	r8,r8,r9
  807e38:	3204d83a 	srl	r2,r6,r8
  807e3c:	6a4e983a 	sll	r7,r13,r9
      d1 = z << k | y >> (32 - k);
  807e40:	324c983a 	sll	r6,r6,r9
      d0 = Exp_1 | y << k | z >> (32 - k);
  807e44:	388eb03a 	or	r7,r7,r2
  807e48:	39cffc34 	orhi	r7,r7,16368
      y = xa > xa0 ? *--xa : 0;
  807e4c:	52ffcb2e 	bgeu	r10,r11,807d7c <__ratio+0xb8>
      d1 = z << k | y >> (32 - k);
  807e50:	58bfff17 	ldw	r2,-4(r11)
  807e54:	1210d83a 	srl	r8,r2,r8
  807e58:	320cb03a 	or	r6,r6,r8
  807e5c:	003fc706 	br	807d7c <__ratio+0xb8>
  z = xa > xa0 ? *--xa : 0;
  807e60:	59bffe17 	ldw	r6,-8(r11)
  807e64:	020002c4 	movi	r8,11
  807e68:	5afffe04 	addi	r11,r11,-8
  if (k -= Ebits)
  807e6c:	02400544 	movi	r9,21
  *e = 32 - k;
  807e70:	0007883a 	mov	r3,zero
  807e74:	003ff006 	br	807e38 <__ratio+0x174>

00807e78 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
  807e78:	defffe04 	addi	sp,sp,-8
  807e7c:	dc000015 	stw	r16,0(sp)
  807e80:	dfc00115 	stw	ra,4(sp)
  double v = 1.0;
  if (dig < 24)
  807e84:	20800608 	cmpgei	r2,r4,24
{
  807e88:	2021883a 	mov	r16,r4
  if (dig < 24)
  807e8c:	10000f26 	beq	r2,zero,807ecc <_mprec_log10+0x54>
  double v = 1.0;
  807e90:	0009883a 	mov	r4,zero
  807e94:	014ffc34 	movhi	r5,16368
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
  807e98:	000d883a 	mov	r6,zero
  807e9c:	01d00934 	movhi	r7,16420
  807ea0:	080d8800 	call	80d880 <__muldf3>
      dig--;
  807ea4:	843fffc4 	addi	r16,r16,-1
      v *= 10;
  807ea8:	1009883a 	mov	r4,r2
  807eac:	180b883a 	mov	r5,r3
  while (dig > 0)
  807eb0:	803ff91e 	bne	r16,zero,807e98 <_mprec_log10+0x20>
    }
  return v;
}
  807eb4:	2005883a 	mov	r2,r4
  807eb8:	2807883a 	mov	r3,r5
  807ebc:	dfc00117 	ldw	ra,4(sp)
  807ec0:	dc000017 	ldw	r16,0(sp)
  807ec4:	dec00204 	addi	sp,sp,8
  807ec8:	f800283a 	ret
    return tens[dig];
  807ecc:	202090fa 	slli	r16,r4,3
  807ed0:	00802074 	movhi	r2,129
  807ed4:	1085ff04 	addi	r2,r2,6140
  807ed8:	1421883a 	add	r16,r2,r16
  807edc:	81000017 	ldw	r4,0(r16)
  807ee0:	81400117 	ldw	r5,4(r16)
  807ee4:	003ff306 	br	807eb4 <_mprec_log10+0x3c>

00807ee8 <__copybits>:
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
  807ee8:	297fffc4 	addi	r5,r5,-1
  807eec:	280fd17a 	srai	r7,r5,5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
  807ef0:	31400417 	ldw	r5,16(r6)
	x = b->_x;
  807ef4:	30800504 	addi	r2,r6,20
	ce = c + ((n-1) >> kshift) + 1;
  807ef8:	39c00044 	addi	r7,r7,1
	xe = x + b->_wds;
  807efc:	280a90ba 	slli	r5,r5,2
	ce = c + ((n-1) >> kshift) + 1;
  807f00:	380e90ba 	slli	r7,r7,2
	xe = x + b->_wds;
  807f04:	114b883a 	add	r5,r2,r5
	ce = c + ((n-1) >> kshift) + 1;
  807f08:	21cf883a 	add	r7,r4,r7
	while(x < xe)
  807f0c:	11400c2e 	bgeu	r2,r5,807f40 <__copybits+0x58>
  807f10:	2007883a 	mov	r3,r4
		*c++ = *x++;
  807f14:	12000017 	ldw	r8,0(r2)
  807f18:	10800104 	addi	r2,r2,4
  807f1c:	18c00104 	addi	r3,r3,4
  807f20:	1a3fff15 	stw	r8,-4(r3)
	while(x < xe)
  807f24:	117ffb36 	bltu	r2,r5,807f14 <__copybits+0x2c>
		*c++ = *x++;
  807f28:	2985c83a 	sub	r2,r5,r6
  807f2c:	10bffac4 	addi	r2,r2,-21
  807f30:	1004d0ba 	srli	r2,r2,2
  807f34:	10800044 	addi	r2,r2,1
  807f38:	100490ba 	slli	r2,r2,2
  807f3c:	2089883a 	add	r4,r4,r2
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
  807f40:	21c0072e 	bgeu	r4,r7,807f60 <__copybits+0x78>
		*c++ = 0;
  807f44:	39bfffc4 	addi	r6,r7,-1
  807f48:	310dc83a 	sub	r6,r6,r4
  807f4c:	300cd0ba 	srli	r6,r6,2
  807f50:	000b883a 	mov	r5,zero
  807f54:	31800044 	addi	r6,r6,1
  807f58:	300c90ba 	slli	r6,r6,2
  807f5c:	08066a41 	jmpi	8066a4 <memset>
}
  807f60:	f800283a 	ret

00807f64 <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
  807f64:	20c00417 	ldw	r3,16(r4)
	n = k >> kshift;
  807f68:	280dd17a 	srai	r6,r5,5
	x = b->_x;
  807f6c:	21000504 	addi	r4,r4,20
	if (n > nwds)
  807f70:	1980080e 	bge	r3,r6,807f94 <__any_on+0x30>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
  807f74:	180490ba 	slli	r2,r3,2
  807f78:	2085883a 	add	r2,r4,r2
	while(x > x0)
  807f7c:	20800f2e 	bgeu	r4,r2,807fbc <__any_on+0x58>
		if (*--x)
  807f80:	10ffff17 	ldw	r3,-4(r2)
  807f84:	10bfff04 	addi	r2,r2,-4
  807f88:	183ffc26 	beq	r3,zero,807f7c <__any_on+0x18>
			return 1;
  807f8c:	00800044 	movi	r2,1
			return 1;
	return 0;
}
  807f90:	f800283a 	ret
		x1 = x2 = x[n];
  807f94:	300490ba 	slli	r2,r6,2
  807f98:	2085883a 	add	r2,r4,r2
	else if (n < nwds && (k &= kmask)) {
  807f9c:	30fff70e 	bge	r6,r3,807f7c <__any_on+0x18>
  807fa0:	294007cc 	andi	r5,r5,31
  807fa4:	283ff526 	beq	r5,zero,807f7c <__any_on+0x18>
		x1 = x2 = x[n];
  807fa8:	11800017 	ldw	r6,0(r2)
		x1 >>= k;
  807fac:	3146d83a 	srl	r3,r6,r5
		x1 <<= k;
  807fb0:	194a983a 	sll	r5,r3,r5
		if (x1 != x2)
  807fb4:	317ff51e 	bne	r6,r5,807f8c <__any_on+0x28>
  807fb8:	003ff006 	br	807f7c <__any_on+0x18>
	return 0;
  807fbc:	0005883a 	mov	r2,zero
  807fc0:	f800283a 	ret

00807fc4 <_realloc_r>:
{
  807fc4:	defff504 	addi	sp,sp,-44
  807fc8:	dc800315 	stw	r18,12(sp)
  807fcc:	dfc00a15 	stw	ra,40(sp)
  807fd0:	df000915 	stw	fp,36(sp)
  807fd4:	ddc00815 	stw	r23,32(sp)
  807fd8:	dd800715 	stw	r22,28(sp)
  807fdc:	dd400615 	stw	r21,24(sp)
  807fe0:	dd000515 	stw	r20,20(sp)
  807fe4:	dcc00415 	stw	r19,16(sp)
  807fe8:	dc400215 	stw	r17,8(sp)
  807fec:	dc000115 	stw	r16,4(sp)
  807ff0:	3025883a 	mov	r18,r6
  if (oldmem == 0) return mALLOc(RCALL bytes);
  807ff4:	28008b26 	beq	r5,zero,808224 <_realloc_r+0x260>
  807ff8:	2821883a 	mov	r16,r5
  807ffc:	2027883a 	mov	r19,r4
  nb = request2size(bytes);
  808000:	944002c4 	addi	r17,r18,11
  MALLOC_LOCK;
  808004:	080f2140 	call	80f214 <__malloc_lock>
  nb = request2size(bytes);
  808008:	888005f0 	cmpltui	r2,r17,23
  80800c:	1000521e 	bne	r2,zero,808158 <_realloc_r+0x194>
  808010:	017ffe04 	movi	r5,-8
  808014:	8962703a 	and	r17,r17,r5
  if (nb > INT_MAX || nb < bytes)
  808018:	8807883a 	mov	r3,r17
  80801c:	88005116 	blt	r17,zero,808164 <_realloc_r+0x1a0>
  808020:	8c805036 	bltu	r17,r18,808164 <_realloc_r+0x1a0>
  newsize = oldsize = chunksize(oldp);
  808024:	80bfff17 	ldw	r2,-4(r16)
  808028:	017fff04 	movi	r5,-4
  newp    = oldp    = mem2chunk(oldmem);
  80802c:	857ffe04 	addi	r21,r16,-8
  newsize = oldsize = chunksize(oldp);
  808030:	1168703a 	and	r20,r2,r5
    next = chunk_at_offset(oldp, oldsize);
  808034:	ad2d883a 	add	r22,r21,r20
  if ((long)(oldsize) < (long)(nb))  
  808038:	a0c0390e 	bge	r20,r3,808120 <_realloc_r+0x15c>
    if (next == top || !inuse(next)) 
  80803c:	07002074 	movhi	fp,129
  808040:	e7085904 	addi	fp,fp,8548
  808044:	e2000217 	ldw	r8,8(fp)
  808048:	b1000117 	ldw	r4,4(r22)
  80804c:	45808e26 	beq	r8,r22,808288 <_realloc_r+0x2c4>
  808050:	01bfff84 	movi	r6,-2
  808054:	218c703a 	and	r6,r4,r6
  808058:	b18d883a 	add	r6,r22,r6
  80805c:	31800117 	ldw	r6,4(r6)
  808060:	3180004c 	andi	r6,r6,1
  808064:	30004f1e 	bne	r6,zero,8081a4 <_realloc_r+0x1e0>
      nextsize = chunksize(next);
  808068:	2148703a 	and	r4,r4,r5
      else if (((long)(nextsize + newsize) >= (long)(nb)))
  80806c:	a10b883a 	add	r5,r20,r4
  808070:	28c0bf0e 	bge	r5,r3,808370 <_realloc_r+0x3ac>
    if (!prev_inuse(oldp))
  808074:	1080004c 	andi	r2,r2,1
  808078:	10004c1e 	bne	r2,zero,8081ac <_realloc_r+0x1e8>
      prev = prev_chunk(oldp);
  80807c:	81fffe17 	ldw	r7,-8(r16)
      prevsize = chunksize(prev);
  808080:	00bfff04 	movi	r2,-4
      prev = prev_chunk(oldp);
  808084:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  808088:	39400117 	ldw	r5,4(r7)
  80808c:	288a703a 	and	r5,r5,r2
      if (next != 0)
  808090:	b0000426 	beq	r22,zero,8080a4 <_realloc_r+0xe0>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  808094:	a16f883a 	add	r23,r20,r5
  808098:	b92f883a 	add	r23,r23,r4
        if (next == top)
  80809c:	4580bf26 	beq	r8,r22,80839c <_realloc_r+0x3d8>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
  8080a0:	b8c0930e 	bge	r23,r3,8082f0 <_realloc_r+0x32c>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
  8080a4:	38004126 	beq	r7,zero,8081ac <_realloc_r+0x1e8>
  8080a8:	a16f883a 	add	r23,r20,r5
  8080ac:	b8c03f16 	blt	r23,r3,8081ac <_realloc_r+0x1e8>
        unlink(prev, bck, fwd);
  8080b0:	38800317 	ldw	r2,12(r7)
  8080b4:	38c00217 	ldw	r3,8(r7)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8080b8:	a1bfff04 	addi	r6,r20,-4
  8080bc:	31400968 	cmpgeui	r5,r6,37
        unlink(prev, bck, fwd);
  8080c0:	18800315 	stw	r2,12(r3)
  8080c4:	10c00215 	stw	r3,8(r2)
        newmem = chunk2mem(newp);
  8080c8:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  8080cc:	3ded883a 	add	r22,r7,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8080d0:	2800941e 	bne	r5,zero,808324 <_realloc_r+0x360>
  8080d4:	30800530 	cmpltui	r2,r6,20
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8080d8:	80c00017 	ldw	r3,0(r16)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8080dc:	1000df1e 	bne	r2,zero,80845c <_realloc_r+0x498>
  8080e0:	38c00215 	stw	r3,8(r7)
  8080e4:	80c00117 	ldw	r3,4(r16)
  8080e8:	30800728 	cmpgeui	r2,r6,28
  8080ec:	38c00315 	stw	r3,12(r7)
  8080f0:	1000dc1e 	bne	r2,zero,808464 <_realloc_r+0x4a0>
  8080f4:	80c00217 	ldw	r3,8(r16)
  8080f8:	38800404 	addi	r2,r7,16
  8080fc:	84000204 	addi	r16,r16,8
  808100:	10c00015 	stw	r3,0(r2)
  808104:	80c00117 	ldw	r3,4(r16)
        newsize += prevsize;
  808108:	b829883a 	mov	r20,r23
  80810c:	382b883a 	mov	r21,r7
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  808110:	10c00115 	stw	r3,4(r2)
  808114:	80c00217 	ldw	r3,8(r16)
  808118:	2021883a 	mov	r16,r4
  80811c:	10c00215 	stw	r3,8(r2)
    set_head_size(newp, nb);
  808120:	a9800117 	ldw	r6,4(r21)
  remainder_size = long_sub_size_t(newsize, nb);
  808124:	a445c83a 	sub	r2,r20,r17
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  808128:	10c00430 	cmpltui	r3,r2,16
    set_head_size(newp, nb);
  80812c:	3180004c 	andi	r6,r6,1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  808130:	18004926 	beq	r3,zero,808258 <_realloc_r+0x294>
    set_head_size(newp, newsize);
  808134:	a18cb03a 	or	r6,r20,r6
  808138:	a9800115 	stw	r6,4(r21)
    set_inuse_bit_at_offset(newp, newsize);
  80813c:	b0800117 	ldw	r2,4(r22)
  808140:	10800054 	ori	r2,r2,1
  808144:	b0800115 	stw	r2,4(r22)
  MALLOC_UNLOCK;
  808148:	9809883a 	mov	r4,r19
  80814c:	080f2380 	call	80f238 <__malloc_unlock>
  return chunk2mem(newp);
  808150:	8025883a 	mov	r18,r16
  808154:	00000606 	br	808170 <_realloc_r+0x1ac>
  nb = request2size(bytes);
  808158:	04400404 	movi	r17,16
  if (nb > INT_MAX || nb < bytes)
  80815c:	00c00404 	movi	r3,16
  808160:	8cbfb02e 	bgeu	r17,r18,808024 <_realloc_r+0x60>
    RERRNO = ENOMEM;
  808164:	00800304 	movi	r2,12
  808168:	98800015 	stw	r2,0(r19)
    return 0;
  80816c:	0025883a 	mov	r18,zero
}
  808170:	9005883a 	mov	r2,r18
  808174:	dfc00a17 	ldw	ra,40(sp)
  808178:	df000917 	ldw	fp,36(sp)
  80817c:	ddc00817 	ldw	r23,32(sp)
  808180:	dd800717 	ldw	r22,28(sp)
  808184:	dd400617 	ldw	r21,24(sp)
  808188:	dd000517 	ldw	r20,20(sp)
  80818c:	dcc00417 	ldw	r19,16(sp)
  808190:	dc800317 	ldw	r18,12(sp)
  808194:	dc400217 	ldw	r17,8(sp)
  808198:	dc000117 	ldw	r16,4(sp)
  80819c:	dec00b04 	addi	sp,sp,44
  8081a0:	f800283a 	ret
    if (!prev_inuse(oldp))
  8081a4:	1080004c 	andi	r2,r2,1
  8081a8:	10006c26 	beq	r2,zero,80835c <_realloc_r+0x398>
    newmem = mALLOc (RCALL bytes);
  8081ac:	900b883a 	mov	r5,r18
  8081b0:	9809883a 	mov	r4,r19
  8081b4:	0805a740 	call	805a74 <_malloc_r>
  8081b8:	1025883a 	mov	r18,r2
    if (newmem == 0)  /* propagate failure */
  8081bc:	10001626 	beq	r2,zero,808218 <_realloc_r+0x254>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
  8081c0:	80bfff17 	ldw	r2,-4(r16)
  8081c4:	013fff84 	movi	r4,-2
  8081c8:	90fffe04 	addi	r3,r18,-8
  8081cc:	1104703a 	and	r2,r2,r4
  8081d0:	a885883a 	add	r2,r21,r2
  8081d4:	10c05b26 	beq	r2,r3,808344 <_realloc_r+0x380>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8081d8:	a1bfff04 	addi	r6,r20,-4
  8081dc:	30800968 	cmpgeui	r2,r6,37
  8081e0:	10006a1e 	bne	r2,zero,80838c <_realloc_r+0x3c8>
  8081e4:	30800530 	cmpltui	r2,r6,20
  8081e8:	81000017 	ldw	r4,0(r16)
  8081ec:	10003726 	beq	r2,zero,8082cc <_realloc_r+0x308>
  8081f0:	9005883a 	mov	r2,r18
  8081f4:	8007883a 	mov	r3,r16
  8081f8:	11000015 	stw	r4,0(r2)
  8081fc:	19000117 	ldw	r4,4(r3)
  808200:	11000115 	stw	r4,4(r2)
  808204:	18c00217 	ldw	r3,8(r3)
  808208:	10c00215 	stw	r3,8(r2)
    fREe(RCALL oldmem);
  80820c:	800b883a 	mov	r5,r16
  808210:	9809883a 	mov	r4,r19
  808214:	0804df80 	call	804df8 <_free_r>
    MALLOC_UNLOCK;
  808218:	9809883a 	mov	r4,r19
  80821c:	080f2380 	call	80f238 <__malloc_unlock>
    return newmem;
  808220:	003fd306 	br	808170 <_realloc_r+0x1ac>
  if (oldmem == 0) return mALLOc(RCALL bytes);
  808224:	300b883a 	mov	r5,r6
}
  808228:	dfc00a17 	ldw	ra,40(sp)
  80822c:	df000917 	ldw	fp,36(sp)
  808230:	ddc00817 	ldw	r23,32(sp)
  808234:	dd800717 	ldw	r22,28(sp)
  808238:	dd400617 	ldw	r21,24(sp)
  80823c:	dd000517 	ldw	r20,20(sp)
  808240:	dcc00417 	ldw	r19,16(sp)
  808244:	dc800317 	ldw	r18,12(sp)
  808248:	dc400217 	ldw	r17,8(sp)
  80824c:	dc000117 	ldw	r16,4(sp)
  808250:	dec00b04 	addi	sp,sp,44
  if (oldmem == 0) return mALLOc(RCALL bytes);
  808254:	0805a741 	jmpi	805a74 <_malloc_r>
    set_head_size(newp, nb);
  808258:	344cb03a 	or	r6,r6,r17
  80825c:	a9800115 	stw	r6,4(r21)
    remainder = chunk_at_offset(newp, nb);
  808260:	ac4b883a 	add	r5,r21,r17
    set_head(remainder, remainder_size | PREV_INUSE);
  808264:	10800054 	ori	r2,r2,1
  808268:	28800115 	stw	r2,4(r5)
    set_inuse_bit_at_offset(remainder, remainder_size);
  80826c:	b0800117 	ldw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  808270:	29400204 	addi	r5,r5,8
  808274:	9809883a 	mov	r4,r19
    set_inuse_bit_at_offset(remainder, remainder_size);
  808278:	10800054 	ori	r2,r2,1
  80827c:	b0800115 	stw	r2,4(r22)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  808280:	0804df80 	call	804df8 <_free_r>
  808284:	003fb006 	br	808148 <_realloc_r+0x184>
      nextsize = chunksize(next);
  808288:	2148703a 	and	r4,r4,r5
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
  80828c:	a10b883a 	add	r5,r20,r4
  808290:	89800404 	addi	r6,r17,16
  808294:	29bf7716 	blt	r5,r6,808074 <_realloc_r+0xb0>
          top = chunk_at_offset(oldp, nb);
  808298:	ac6b883a 	add	r21,r21,r17
          set_head(top, (newsize - nb) | PREV_INUSE);
  80829c:	2c45c83a 	sub	r2,r5,r17
          top = chunk_at_offset(oldp, nb);
  8082a0:	e5400215 	stw	r21,8(fp)
          set_head(top, (newsize - nb) | PREV_INUSE);
  8082a4:	10800054 	ori	r2,r2,1
  8082a8:	a8800115 	stw	r2,4(r21)
          set_head_size(oldp, nb);
  8082ac:	80bfff17 	ldw	r2,-4(r16)
	  MALLOC_UNLOCK;
  8082b0:	9809883a 	mov	r4,r19
          return chunk2mem(oldp);
  8082b4:	8025883a 	mov	r18,r16
          set_head_size(oldp, nb);
  8082b8:	1080004c 	andi	r2,r2,1
  8082bc:	1462b03a 	or	r17,r2,r17
  8082c0:	847fff15 	stw	r17,-4(r16)
	  MALLOC_UNLOCK;
  8082c4:	080f2380 	call	80f238 <__malloc_unlock>
          return chunk2mem(oldp);
  8082c8:	003fa906 	br	808170 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8082cc:	91000015 	stw	r4,0(r18)
  8082d0:	80c00117 	ldw	r3,4(r16)
  8082d4:	30800728 	cmpgeui	r2,r6,28
  8082d8:	90c00115 	stw	r3,4(r18)
  8082dc:	1000551e 	bne	r2,zero,808434 <_realloc_r+0x470>
  8082e0:	81000217 	ldw	r4,8(r16)
  8082e4:	80c00204 	addi	r3,r16,8
  8082e8:	90800204 	addi	r2,r18,8
  8082ec:	003fc206 	br	8081f8 <_realloc_r+0x234>
          unlink(next, bck, fwd);
  8082f0:	b0800317 	ldw	r2,12(r22)
  8082f4:	b0c00217 	ldw	r3,8(r22)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8082f8:	a1bfff04 	addi	r6,r20,-4
  8082fc:	31400968 	cmpgeui	r5,r6,37
          unlink(next, bck, fwd);
  808300:	18800315 	stw	r2,12(r3)
  808304:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
  808308:	38c00217 	ldw	r3,8(r7)
  80830c:	38800317 	ldw	r2,12(r7)
          newmem = chunk2mem(newp);
  808310:	39000204 	addi	r4,r7,8
    set_inuse_bit_at_offset(remainder, remainder_size);
  808314:	3ded883a 	add	r22,r7,r23
          unlink(prev, bck, fwd);
  808318:	18800315 	stw	r2,12(r3)
  80831c:	10c00215 	stw	r3,8(r2)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  808320:	283f6c26 	beq	r5,zero,8080d4 <_realloc_r+0x110>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  808324:	800b883a 	mov	r5,r16
  808328:	d9c00015 	stw	r7,0(sp)
  80832c:	08064e00 	call	8064e0 <memmove>
  808330:	d9c00017 	ldw	r7,0(sp)
  808334:	1021883a 	mov	r16,r2
        newsize += prevsize;
  808338:	b829883a 	mov	r20,r23
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80833c:	382b883a 	mov	r21,r7
  808340:	003f7706 	br	808120 <_realloc_r+0x15c>
      newsize += chunksize(newp);
  808344:	90bfff17 	ldw	r2,-4(r18)
  808348:	00ffff04 	movi	r3,-4
  80834c:	10c4703a 	and	r2,r2,r3
  808350:	a0a9883a 	add	r20,r20,r2
    set_inuse_bit_at_offset(remainder, remainder_size);
  808354:	ad2d883a 	add	r22,r21,r20
      goto split;
  808358:	003f7106 	br	808120 <_realloc_r+0x15c>
      prev = prev_chunk(oldp);
  80835c:	81fffe17 	ldw	r7,-8(r16)
  808360:	a9cfc83a 	sub	r7,r21,r7
      prevsize = chunksize(prev);
  808364:	38800117 	ldw	r2,4(r7)
  808368:	114a703a 	and	r5,r2,r5
      if (next != 0)
  80836c:	003f4d06 	br	8080a4 <_realloc_r+0xe0>
        unlink(next, bck, fwd);
  808370:	b0800317 	ldw	r2,12(r22)
  808374:	b0c00217 	ldw	r3,8(r22)
        newsize  += nextsize;
  808378:	2829883a 	mov	r20,r5
    set_inuse_bit_at_offset(remainder, remainder_size);
  80837c:	a96d883a 	add	r22,r21,r5
        unlink(next, bck, fwd);
  808380:	18800315 	stw	r2,12(r3)
  808384:	10c00215 	stw	r3,8(r2)
        goto split;
  808388:	003f6506 	br	808120 <_realloc_r+0x15c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80838c:	800b883a 	mov	r5,r16
  808390:	9009883a 	mov	r4,r18
  808394:	08064e00 	call	8064e0 <memmove>
  808398:	003f9c06 	br	80820c <_realloc_r+0x248>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
  80839c:	88800404 	addi	r2,r17,16
  8083a0:	b8bf4016 	blt	r23,r2,8080a4 <_realloc_r+0xe0>
            unlink(prev, bck, fwd);
  8083a4:	38800317 	ldw	r2,12(r7)
  8083a8:	38c00217 	ldw	r3,8(r7)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8083ac:	a1bfff04 	addi	r6,r20,-4
  8083b0:	31000968 	cmpgeui	r4,r6,37
            unlink(prev, bck, fwd);
  8083b4:	18800315 	stw	r2,12(r3)
  8083b8:	10c00215 	stw	r3,8(r2)
            newmem = chunk2mem(newp);
  8083bc:	3c800204 	addi	r18,r7,8
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8083c0:	20003b1e 	bne	r4,zero,8084b0 <_realloc_r+0x4ec>
  8083c4:	30800530 	cmpltui	r2,r6,20
  8083c8:	80c00017 	ldw	r3,0(r16)
  8083cc:	1000361e 	bne	r2,zero,8084a8 <_realloc_r+0x4e4>
  8083d0:	38c00215 	stw	r3,8(r7)
  8083d4:	80c00117 	ldw	r3,4(r16)
  8083d8:	30800728 	cmpgeui	r2,r6,28
  8083dc:	38c00315 	stw	r3,12(r7)
  8083e0:	1000401e 	bne	r2,zero,8084e4 <_realloc_r+0x520>
  8083e4:	80c00217 	ldw	r3,8(r16)
  8083e8:	38800404 	addi	r2,r7,16
  8083ec:	84000204 	addi	r16,r16,8
  8083f0:	10c00015 	stw	r3,0(r2)
  8083f4:	80c00117 	ldw	r3,4(r16)
  8083f8:	10c00115 	stw	r3,4(r2)
  8083fc:	80c00217 	ldw	r3,8(r16)
  808400:	10c00215 	stw	r3,8(r2)
            top = chunk_at_offset(newp, nb);
  808404:	3c47883a 	add	r3,r7,r17
            set_head(top, (newsize - nb) | PREV_INUSE);
  808408:	bc45c83a 	sub	r2,r23,r17
            top = chunk_at_offset(newp, nb);
  80840c:	e0c00215 	stw	r3,8(fp)
            set_head(top, (newsize - nb) | PREV_INUSE);
  808410:	10800054 	ori	r2,r2,1
  808414:	18800115 	stw	r2,4(r3)
            set_head_size(newp, nb);
  808418:	38800117 	ldw	r2,4(r7)
	    MALLOC_UNLOCK;
  80841c:	9809883a 	mov	r4,r19
            set_head_size(newp, nb);
  808420:	1080004c 	andi	r2,r2,1
  808424:	1462b03a 	or	r17,r2,r17
  808428:	3c400115 	stw	r17,4(r7)
	    MALLOC_UNLOCK;
  80842c:	080f2380 	call	80f238 <__malloc_unlock>
            return newmem;
  808430:	003f4f06 	br	808170 <_realloc_r+0x1ac>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  808434:	80800217 	ldw	r2,8(r16)
  808438:	31800920 	cmpeqi	r6,r6,36
  80843c:	90800215 	stw	r2,8(r18)
  808440:	80800317 	ldw	r2,12(r16)
  808444:	90800315 	stw	r2,12(r18)
  808448:	81000417 	ldw	r4,16(r16)
  80844c:	30000f1e 	bne	r6,zero,80848c <_realloc_r+0x4c8>
  808450:	80c00404 	addi	r3,r16,16
  808454:	90800404 	addi	r2,r18,16
  808458:	003f6706 	br	8081f8 <_realloc_r+0x234>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80845c:	2005883a 	mov	r2,r4
  808460:	003f2706 	br	808100 <_realloc_r+0x13c>
  808464:	80800217 	ldw	r2,8(r16)
  808468:	31800920 	cmpeqi	r6,r6,36
  80846c:	38800415 	stw	r2,16(r7)
  808470:	80800317 	ldw	r2,12(r16)
  808474:	38800515 	stw	r2,20(r7)
  808478:	80c00417 	ldw	r3,16(r16)
  80847c:	3000121e 	bne	r6,zero,8084c8 <_realloc_r+0x504>
  808480:	38800604 	addi	r2,r7,24
  808484:	84000404 	addi	r16,r16,16
  808488:	003f1d06 	br	808100 <_realloc_r+0x13c>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  80848c:	91000415 	stw	r4,16(r18)
  808490:	81000517 	ldw	r4,20(r16)
  808494:	80c00604 	addi	r3,r16,24
  808498:	90800604 	addi	r2,r18,24
  80849c:	91000515 	stw	r4,20(r18)
  8084a0:	81000617 	ldw	r4,24(r16)
  8084a4:	003f5406 	br	8081f8 <_realloc_r+0x234>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8084a8:	9005883a 	mov	r2,r18
  8084ac:	003fd006 	br	8083f0 <_realloc_r+0x42c>
  8084b0:	800b883a 	mov	r5,r16
  8084b4:	9009883a 	mov	r4,r18
  8084b8:	d9c00015 	stw	r7,0(sp)
  8084bc:	08064e00 	call	8064e0 <memmove>
  8084c0:	d9c00017 	ldw	r7,0(sp)
  8084c4:	003fcf06 	br	808404 <_realloc_r+0x440>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8084c8:	84000604 	addi	r16,r16,24
  8084cc:	38c00615 	stw	r3,24(r7)
  8084d0:	80ffff17 	ldw	r3,-4(r16)
  8084d4:	38800804 	addi	r2,r7,32
  8084d8:	38c00715 	stw	r3,28(r7)
  8084dc:	80c00017 	ldw	r3,0(r16)
  8084e0:	003f0706 	br	808100 <_realloc_r+0x13c>
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
  8084e4:	80800217 	ldw	r2,8(r16)
  8084e8:	31800920 	cmpeqi	r6,r6,36
  8084ec:	38800415 	stw	r2,16(r7)
  8084f0:	80800317 	ldw	r2,12(r16)
  8084f4:	38800515 	stw	r2,20(r7)
  8084f8:	80c00417 	ldw	r3,16(r16)
  8084fc:	3000031e 	bne	r6,zero,80850c <_realloc_r+0x548>
  808500:	38800604 	addi	r2,r7,24
  808504:	84000404 	addi	r16,r16,16
  808508:	003fb906 	br	8083f0 <_realloc_r+0x42c>
  80850c:	84000604 	addi	r16,r16,24
  808510:	38c00615 	stw	r3,24(r7)
  808514:	80ffff17 	ldw	r3,-4(r16)
  808518:	38800804 	addi	r2,r7,32
  80851c:	38c00715 	stw	r3,28(r7)
  808520:	80c00017 	ldw	r3,0(r16)
  808524:	003fb206 	br	8083f0 <_realloc_r+0x42c>

00808528 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
  808528:	defffe04 	addi	sp,sp,-8
  80852c:	dc000015 	stw	r16,0(sp)
  808530:	2021883a 	mov	r16,r4
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  808534:	2809883a 	mov	r4,r5
{
  808538:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80853c:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  808540:	080f4100 	call	80f410 <sbrk>
  808544:	10ffffd8 	cmpnei	r3,r2,-1
  808548:	18000426 	beq	r3,zero,80855c <_sbrk_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80854c:	dfc00117 	ldw	ra,4(sp)
  808550:	dc000017 	ldw	r16,0(sp)
  808554:	dec00204 	addi	sp,sp,8
  808558:	f800283a 	ret
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
  80855c:	d0e75817 	ldw	r3,-25248(gp)
  808560:	183ffa26 	beq	r3,zero,80854c <_sbrk_r+0x24>
    ptr->_errno = errno;
  808564:	80c00015 	stw	r3,0(r16)
}
  808568:	dfc00117 	ldw	ra,4(sp)
  80856c:	dc000017 	ldw	r16,0(sp)
  808570:	dec00204 	addi	sp,sp,8
  808574:	f800283a 	ret

00808578 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
  808578:	defffe04 	addi	sp,sp,-8
  80857c:	dc000015 	stw	r16,0(sp)
  808580:	2821883a 	mov	r16,r5
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
  808584:	2940038f 	ldh	r5,14(r5)
{
  808588:	dfc00115 	stw	ra,4(sp)
  ret = _read_r (ptr, fp->_file, buf, n);
  80858c:	080ad1c0 	call	80ad1c <_read_r>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
  808590:	10000716 	blt	r2,zero,8085b0 <__sread+0x38>
    fp->_offset += ret;
  808594:	80c01417 	ldw	r3,80(r16)
  808598:	1887883a 	add	r3,r3,r2
  80859c:	80c01415 	stw	r3,80(r16)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
  8085a0:	dfc00117 	ldw	ra,4(sp)
  8085a4:	dc000017 	ldw	r16,0(sp)
  8085a8:	dec00204 	addi	sp,sp,8
  8085ac:	f800283a 	ret
    fp->_flags &= ~__SOFF;	/* paranoia */
  8085b0:	80c0030b 	ldhu	r3,12(r16)
  8085b4:	18fbffcc 	andi	r3,r3,61439
  8085b8:	80c0030d 	sth	r3,12(r16)
}
  8085bc:	dfc00117 	ldw	ra,4(sp)
  8085c0:	dc000017 	ldw	r16,0(sp)
  8085c4:	dec00204 	addi	sp,sp,8
  8085c8:	f800283a 	ret

008085cc <__seofread>:
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
  8085cc:	0005883a 	mov	r2,zero
  8085d0:	f800283a 	ret

008085d4 <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
  8085d4:	2880030b 	ldhu	r2,12(r5)
{
  8085d8:	defffb04 	addi	sp,sp,-20
  8085dc:	dcc00315 	stw	r19,12(sp)
  8085e0:	dc800215 	stw	r18,8(sp)
  8085e4:	dc400115 	stw	r17,4(sp)
  8085e8:	dc000015 	stw	r16,0(sp)
  8085ec:	dfc00415 	stw	ra,16(sp)
  if (fp->_flags & __SAPP)
  8085f0:	10c0400c 	andi	r3,r2,256
{
  8085f4:	2821883a 	mov	r16,r5
  8085f8:	2023883a 	mov	r17,r4
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  8085fc:	2940038f 	ldh	r5,14(r5)
{
  808600:	3025883a 	mov	r18,r6
  808604:	3827883a 	mov	r19,r7
  if (fp->_flags & __SAPP)
  808608:	18000c1e 	bne	r3,zero,80863c <__swrite+0x68>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80860c:	10bbffcc 	andi	r2,r2,61439
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
  808610:	980f883a 	mov	r7,r19
  808614:	900d883a 	mov	r6,r18
  808618:	8809883a 	mov	r4,r17
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  80861c:	8080030d 	sth	r2,12(r16)
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
  808620:	dfc00417 	ldw	ra,16(sp)
  808624:	dcc00317 	ldw	r19,12(sp)
  808628:	dc800217 	ldw	r18,8(sp)
  80862c:	dc400117 	ldw	r17,4(sp)
  808630:	dc000017 	ldw	r16,0(sp)
  808634:	dec00504 	addi	sp,sp,20
  w = _write_r (ptr, fp->_file, buf, n);
  808638:	080a23c1 	jmpi	80a23c <_write_r>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  80863c:	01c00084 	movi	r7,2
  808640:	000d883a 	mov	r6,zero
  808644:	080acc00 	call	80acc0 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
  808648:	8080030b 	ldhu	r2,12(r16)
  w = _write_r (ptr, fp->_file, buf, n);
  80864c:	8140038f 	ldh	r5,14(r16)
  808650:	003fee06 	br	80860c <__swrite+0x38>

00808654 <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
  808654:	defffe04 	addi	sp,sp,-8
  808658:	dc000015 	stw	r16,0(sp)
  80865c:	2821883a 	mov	r16,r5
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  808660:	2940038f 	ldh	r5,14(r5)
{
  808664:	dfc00115 	stw	ra,4(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  808668:	080acc00 	call	80acc0 <_lseek_r>
  if (ret == -1L)
  80866c:	10ffffd8 	cmpnei	r3,r2,-1
  808670:	18000826 	beq	r3,zero,808694 <__sseek+0x40>
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
  808674:	80c0030b 	ldhu	r3,12(r16)
      fp->_offset = ret;
  808678:	80801415 	stw	r2,80(r16)
      fp->_flags |= __SOFF;
  80867c:	18c40014 	ori	r3,r3,4096
  808680:	80c0030d 	sth	r3,12(r16)
    }
  return ret;
}
  808684:	dfc00117 	ldw	ra,4(sp)
  808688:	dc000017 	ldw	r16,0(sp)
  80868c:	dec00204 	addi	sp,sp,8
  808690:	f800283a 	ret
    fp->_flags &= ~__SOFF;
  808694:	80c0030b 	ldhu	r3,12(r16)
  808698:	18fbffcc 	andi	r3,r3,61439
  80869c:	80c0030d 	sth	r3,12(r16)
}
  8086a0:	dfc00117 	ldw	ra,4(sp)
  8086a4:	dc000017 	ldw	r16,0(sp)
  8086a8:	dec00204 	addi	sp,sp,8
  8086ac:	f800283a 	ret

008086b0 <__sclose>:
__sclose (struct _reent *ptr,
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
  8086b0:	2940038f 	ldh	r5,14(r5)
  8086b4:	080a2981 	jmpi	80a298 <_close_r>

008086b8 <strcmp>:
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
  8086b8:	2144b03a 	or	r2,r4,r5
  8086bc:	108000cc 	andi	r2,r2,3
  8086c0:	1000141e 	bne	r2,zero,808714 <strcmp+0x5c>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
  8086c4:	20800017 	ldw	r2,0(r4)
  8086c8:	28c00017 	ldw	r3,0(r5)
  8086cc:	10c0111e 	bne	r2,r3,808714 <strcmp+0x5c>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
  8086d0:	01ffbff4 	movhi	r7,65279
  8086d4:	01a02074 	movhi	r6,32897
  8086d8:	39ffbfc4 	addi	r7,r7,-257
  8086dc:	31a02004 	addi	r6,r6,-32640
  8086e0:	00000306 	br	8086f0 <strcmp+0x38>
      while (*a1 == *a2)
  8086e4:	20800017 	ldw	r2,0(r4)
  8086e8:	28c00017 	ldw	r3,0(r5)
  8086ec:	10c0091e 	bne	r2,r3,808714 <strcmp+0x5c>
          if (DETECTNULL (*a1))
  8086f0:	11c7883a 	add	r3,r2,r7
  8086f4:	0084303a 	nor	r2,zero,r2
  8086f8:	1884703a 	and	r2,r3,r2
  8086fc:	1184703a 	and	r2,r2,r6
	    return 0;

          a1++;
  808700:	21000104 	addi	r4,r4,4
          a2++;
  808704:	29400104 	addi	r5,r5,4
          if (DETECTNULL (*a1))
  808708:	103ff626 	beq	r2,zero,8086e4 <strcmp+0x2c>
	    return 0;
  80870c:	0005883a 	mov	r2,zero
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  808710:	f800283a 	ret
  while (*s1 != '\0' && *s1 == *s2)
  808714:	20c00003 	ldbu	r3,0(r4)
  808718:	18803fcc 	andi	r2,r3,255
  80871c:	1080201c 	xori	r2,r2,128
  808720:	10bfe004 	addi	r2,r2,-128
  808724:	1000071e 	bne	r2,zero,808744 <strcmp+0x8c>
  808728:	00000a06 	br	808754 <strcmp+0x9c>
  80872c:	20c00003 	ldbu	r3,0(r4)
      s2++;
  808730:	29400044 	addi	r5,r5,1
  while (*s1 != '\0' && *s1 == *s2)
  808734:	18803fcc 	andi	r2,r3,255
  808738:	1080201c 	xori	r2,r2,128
  80873c:	10bfe004 	addi	r2,r2,-128
  808740:	10000726 	beq	r2,zero,808760 <strcmp+0xa8>
  808744:	29800007 	ldb	r6,0(r5)
      s1++;
  808748:	21000044 	addi	r4,r4,1
  while (*s1 != '\0' && *s1 == *s2)
  80874c:	30bff726 	beq	r6,r2,80872c <strcmp+0x74>
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
  808750:	18803fcc 	andi	r2,r3,255
  808754:	28c00003 	ldbu	r3,0(r5)
  808758:	10c5c83a 	sub	r2,r2,r3
  80875c:	f800283a 	ret
  808760:	28c00003 	ldbu	r3,0(r5)
  808764:	0005883a 	mov	r2,zero
  808768:	10c5c83a 	sub	r2,r2,r3
  80876c:	f800283a 	ret

00808770 <__sprint_r>:
	if (uio->uio_resid == 0) {
  808770:	30800217 	ldw	r2,8(r6)
{
  808774:	defff604 	addi	sp,sp,-40
  808778:	dcc00315 	stw	r19,12(sp)
  80877c:	dfc00915 	stw	ra,36(sp)
  808780:	df000815 	stw	fp,32(sp)
  808784:	ddc00715 	stw	r23,28(sp)
  808788:	dd800615 	stw	r22,24(sp)
  80878c:	dd400515 	stw	r21,20(sp)
  808790:	dd000415 	stw	r20,16(sp)
  808794:	dc800215 	stw	r18,8(sp)
  808798:	dc400115 	stw	r17,4(sp)
  80879c:	dc000015 	stw	r16,0(sp)
  8087a0:	3027883a 	mov	r19,r6
	if (uio->uio_resid == 0) {
  8087a4:	10001826 	beq	r2,zero,808808 <__sprint_r+0x98>
	if (fp->_flags2 & __SWID) {
  8087a8:	28c01917 	ldw	r3,100(r5)
  8087ac:	2821883a 	mov	r16,r5
  8087b0:	18c8000c 	andi	r3,r3,8192
  8087b4:	18002126 	beq	r3,zero,80883c <__sprint_r+0xcc>
		iov = uio->uio_iov;
  8087b8:	35000017 	ldw	r20,0(r6)
  8087bc:	2023883a 	mov	r17,r4
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  8087c0:	05bfff04 	movi	r22,-4
			len = iov->iov_len / sizeof (wchar_t);
  8087c4:	a5400117 	ldw	r21,4(r20)
			p = (wchar_t *) iov->iov_base;
  8087c8:	a5c00017 	ldw	r23,0(r20)
			len = iov->iov_len / sizeof (wchar_t);
  8087cc:	a824d0ba 	srli	r18,r21,2
			for (i = 0; i < len; i++) {
  8087d0:	90001d26 	beq	r18,zero,808848 <__sprint_r+0xd8>
  8087d4:	0039883a 	mov	fp,zero
  8087d8:	00000206 	br	8087e4 <__sprint_r+0x74>
  8087dc:	bdc00104 	addi	r23,r23,4
  8087e0:	97001826 	beq	r18,fp,808844 <__sprint_r+0xd4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8087e4:	b9400017 	ldw	r5,0(r23)
  8087e8:	800d883a 	mov	r6,r16
  8087ec:	8809883a 	mov	r4,r17
  8087f0:	080a8300 	call	80a830 <_fputwc_r>
  8087f4:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  8087f8:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8087fc:	103ff726 	beq	r2,zero,8087dc <__sprint_r+0x6c>
					err = -1;
  808800:	00bfffc4 	movi	r2,-1
	uio->uio_resid = 0;
  808804:	98000215 	stw	zero,8(r19)
	uio->uio_iovcnt = 0;
  808808:	98000115 	stw	zero,4(r19)
}
  80880c:	dfc00917 	ldw	ra,36(sp)
  808810:	df000817 	ldw	fp,32(sp)
  808814:	ddc00717 	ldw	r23,28(sp)
  808818:	dd800617 	ldw	r22,24(sp)
  80881c:	dd400517 	ldw	r21,20(sp)
  808820:	dd000417 	ldw	r20,16(sp)
  808824:	dcc00317 	ldw	r19,12(sp)
  808828:	dc800217 	ldw	r18,8(sp)
  80882c:	dc400117 	ldw	r17,4(sp)
  808830:	dc000017 	ldw	r16,0(sp)
  808834:	dec00a04 	addi	sp,sp,40
  808838:	f800283a 	ret
		err = __sfvwrite_r(ptr, fp, uio);
  80883c:	08050ec0 	call	8050ec <__sfvwrite_r>
  808840:	003ff006 	br	808804 <__sprint_r+0x94>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  808844:	98800217 	ldw	r2,8(r19)
  808848:	adaa703a 	and	r21,r21,r22
  80884c:	1545c83a 	sub	r2,r2,r21
  808850:	98800215 	stw	r2,8(r19)
  808854:	a5000204 	addi	r20,r20,8
		for (; uio->uio_resid != 0;
  808858:	103fda1e 	bne	r2,zero,8087c4 <__sprint_r+0x54>
  80885c:	003fe906 	br	808804 <__sprint_r+0x94>

00808860 <___vfiprintf_internal_r>:
{
  808860:	deffcc04 	addi	sp,sp,-208
  808864:	dd002e15 	stw	r20,184(sp)
  808868:	dc002a15 	stw	r16,168(sp)
  80886c:	dfc03315 	stw	ra,204(sp)
  808870:	df003215 	stw	fp,200(sp)
  808874:	ddc03115 	stw	r23,196(sp)
  808878:	dd803015 	stw	r22,192(sp)
  80887c:	dd402f15 	stw	r21,188(sp)
  808880:	dcc02d15 	stw	r19,180(sp)
  808884:	dc802c15 	stw	r18,176(sp)
  808888:	dc402b15 	stw	r17,172(sp)
  80888c:	d9800215 	stw	r6,8(sp)
  808890:	d9c00715 	stw	r7,28(sp)
  808894:	2021883a 	mov	r16,r4
  808898:	2829883a 	mov	r20,r5
	CHECK_INIT (data, fp);
  80889c:	20000226 	beq	r4,zero,8088a8 <___vfiprintf_internal_r+0x48>
  8088a0:	20800e17 	ldw	r2,56(r4)
  8088a4:	10014f26 	beq	r2,zero,808de4 <___vfiprintf_internal_r+0x584>
	ORIENT(fp, -1);
  8088a8:	a080030b 	ldhu	r2,12(r20)
  8088ac:	10c8000c 	andi	r3,r2,8192
  8088b0:	1800061e 	bne	r3,zero,8088cc <___vfiprintf_internal_r+0x6c>
	_newlib_flockfile_start (fp);
  8088b4:	a0c01917 	ldw	r3,100(r20)
	ORIENT(fp, -1);
  8088b8:	0137ffc4 	movi	r4,-8193
  8088bc:	10880014 	ori	r2,r2,8192
  8088c0:	1906703a 	and	r3,r3,r4
  8088c4:	a080030d 	sth	r2,12(r20)
  8088c8:	a0c01915 	stw	r3,100(r20)
	if (cantwrite (data, fp)) {
  8088cc:	10c0020c 	andi	r3,r2,8
  8088d0:	1800e126 	beq	r3,zero,808c58 <___vfiprintf_internal_r+0x3f8>
  8088d4:	a0c00417 	ldw	r3,16(r20)
  8088d8:	1800df26 	beq	r3,zero,808c58 <___vfiprintf_internal_r+0x3f8>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  8088dc:	1080068c 	andi	r2,r2,26
  8088e0:	10800298 	cmpnei	r2,r2,10
  8088e4:	1000e426 	beq	r2,zero,808c78 <___vfiprintf_internal_r+0x418>
	uio.uio_iov = iovp = iov;
  8088e8:	d8801a04 	addi	r2,sp,104
  8088ec:	d8800d15 	stw	r2,52(sp)
	uio.uio_resid = 0;
  8088f0:	d8000f15 	stw	zero,60(sp)
	uio.uio_iovcnt = 0;
  8088f4:	d8000e15 	stw	zero,56(sp)
	uio.uio_iov = iovp = iov;
  8088f8:	1025883a 	mov	r18,r2
	char *xdigs = NULL;	/* digits for [xX] conversion */
  8088fc:	d8000a15 	stw	zero,40(sp)
	ret = 0;
  808900:	d8000615 	stw	zero,24(sp)
                while (*fmt != '\0' && *fmt != '%')
  808904:	d8800217 	ldw	r2,8(sp)
  808908:	10800007 	ldb	r2,0(r2)
  80890c:	1000ff26 	beq	r2,zero,808d0c <___vfiprintf_internal_r+0x4ac>
  808910:	ddc00217 	ldw	r23,8(sp)
  808914:	00000306 	br	808924 <___vfiprintf_internal_r+0xc4>
  808918:	b8800047 	ldb	r2,1(r23)
                    fmt += 1;
  80891c:	bdc00044 	addi	r23,r23,1
                while (*fmt != '\0' && *fmt != '%')
  808920:	1000e726 	beq	r2,zero,808cc0 <___vfiprintf_internal_r+0x460>
  808924:	10c00958 	cmpnei	r3,r2,37
  808928:	183ffb1e 	bne	r3,zero,808918 <___vfiprintf_internal_r+0xb8>
		if ((m = fmt - cp) != 0) {
  80892c:	d8c00217 	ldw	r3,8(sp)
  808930:	b8e3c83a 	sub	r17,r23,r3
  808934:	b8c0e51e 	bne	r23,r3,808ccc <___vfiprintf_internal_r+0x46c>
		fmt++;		/* skip over '%' */
  808938:	b8800047 	ldb	r2,1(r23)
  80893c:	b8c00044 	addi	r3,r23,1
rflag:		ch = *fmt++;
  808940:	000b883a 	mov	r5,zero
		prec = -1;
  808944:	01ffffc4 	movi	r7,-1
		width = 0;
  808948:	d8000115 	stw	zero,4(sp)
		flags = 0;
  80894c:	002d883a 	mov	r22,zero
rflag:		ch = *fmt++;
  808950:	18c00044 	addi	r3,r3,1
reswitch:	switch (ch) {
  808954:	113ff804 	addi	r4,r2,-32
  808958:	21801668 	cmpgeui	r6,r4,89
  80895c:	30006e1e 	bne	r6,zero,808b18 <___vfiprintf_internal_r+0x2b8>
  808960:	200890ba 	slli	r4,r4,2
  808964:	01802074 	movhi	r6,129
  808968:	218d883a 	add	r6,r4,r6
  80896c:	31a25d17 	ldw	r6,-30348(r6)
  808970:	3000683a 	jmp	r6
  808974:	00809144 	movi	r2,581
  808978:	00808b18 	cmpnei	r2,zero,556
  80897c:	00808b18 	cmpnei	r2,zero,556
  808980:	00809138 	rdprs	r2,zero,580
  808984:	00808b18 	cmpnei	r2,zero,556
  808988:	00808b18 	cmpnei	r2,zero,556
  80898c:	00808b18 	cmpnei	r2,zero,556
  808990:	00808b18 	cmpnei	r2,zero,556
  808994:	00808b18 	cmpnei	r2,zero,556
  808998:	00808b18 	cmpnei	r2,zero,556
  80899c:	0080910c 	andi	r2,zero,580
  8089a0:	00809100 	call	80910 <__alt_mem_sdram-0x77f6f0>
  8089a4:	00808b18 	cmpnei	r2,zero,556
  8089a8:	008090e8 	cmpgeui	r2,zero,579
  8089ac:	0080909c 	xori	r2,zero,578
  8089b0:	00808b18 	cmpnei	r2,zero,556
  8089b4:	00809090 	cmplti	r2,zero,578
  8089b8:	00808ad8 	cmpnei	r2,zero,555
  8089bc:	00808ad8 	cmpnei	r2,zero,555
  8089c0:	00808ad8 	cmpnei	r2,zero,555
  8089c4:	00808ad8 	cmpnei	r2,zero,555
  8089c8:	00808ad8 	cmpnei	r2,zero,555
  8089cc:	00808ad8 	cmpnei	r2,zero,555
  8089d0:	00808ad8 	cmpnei	r2,zero,555
  8089d4:	00808ad8 	cmpnei	r2,zero,555
  8089d8:	00808ad8 	cmpnei	r2,zero,555
  8089dc:	00808b18 	cmpnei	r2,zero,556
  8089e0:	00808b18 	cmpnei	r2,zero,556
  8089e4:	00808b18 	cmpnei	r2,zero,556
  8089e8:	00808b18 	cmpnei	r2,zero,556
  8089ec:	00808b18 	cmpnei	r2,zero,556
  8089f0:	00808b18 	cmpnei	r2,zero,556
  8089f4:	00808b18 	cmpnei	r2,zero,556
  8089f8:	00808b18 	cmpnei	r2,zero,556
  8089fc:	00808b18 	cmpnei	r2,zero,556
  808a00:	00808b18 	cmpnei	r2,zero,556
  808a04:	00808f9c 	xori	r2,zero,574
  808a08:	00808b18 	cmpnei	r2,zero,556
  808a0c:	00808b18 	cmpnei	r2,zero,556
  808a10:	00808b18 	cmpnei	r2,zero,556
  808a14:	00808b18 	cmpnei	r2,zero,556
  808a18:	00808b18 	cmpnei	r2,zero,556
  808a1c:	00808b18 	cmpnei	r2,zero,556
  808a20:	00808b18 	cmpnei	r2,zero,556
  808a24:	00808b18 	cmpnei	r2,zero,556
  808a28:	00808b18 	cmpnei	r2,zero,556
  808a2c:	00808b18 	cmpnei	r2,zero,556
  808a30:	00809218 	cmpnei	r2,zero,584
  808a34:	00808b18 	cmpnei	r2,zero,556
  808a38:	00808b18 	cmpnei	r2,zero,556
  808a3c:	00808b18 	cmpnei	r2,zero,556
  808a40:	00808b18 	cmpnei	r2,zero,556
  808a44:	00808b18 	cmpnei	r2,zero,556
  808a48:	008091e8 	cmpgeui	r2,zero,583
  808a4c:	00808b18 	cmpnei	r2,zero,556
  808a50:	00808b18 	cmpnei	r2,zero,556
  808a54:	0080919c 	xori	r2,zero,582
  808a58:	00808b18 	cmpnei	r2,zero,556
  808a5c:	00808b18 	cmpnei	r2,zero,556
  808a60:	00808b18 	cmpnei	r2,zero,556
  808a64:	00808b18 	cmpnei	r2,zero,556
  808a68:	00808b18 	cmpnei	r2,zero,556
  808a6c:	00808b18 	cmpnei	r2,zero,556
  808a70:	00808b18 	cmpnei	r2,zero,556
  808a74:	00808b18 	cmpnei	r2,zero,556
  808a78:	00808b18 	cmpnei	r2,zero,556
  808a7c:	00808b18 	cmpnei	r2,zero,556
  808a80:	0080916c 	andhi	r2,zero,581
  808a84:	00808dec 	andhi	r2,zero,567
  808a88:	00808b18 	cmpnei	r2,zero,556
  808a8c:	00808b18 	cmpnei	r2,zero,556
  808a90:	00808b18 	cmpnei	r2,zero,556
  808a94:	00808e6c 	andhi	r2,zero,569
  808a98:	00808dec 	andhi	r2,zero,567
  808a9c:	00808b18 	cmpnei	r2,zero,556
  808aa0:	00808b18 	cmpnei	r2,zero,556
  808aa4:	00809284 	movi	r2,586
  808aa8:	00808b18 	cmpnei	r2,zero,556
  808aac:	00809248 	cmpgei	r2,zero,585
  808ab0:	00809efc 	xorhi	r2,zero,635
  808ab4:	00808f60 	cmpeqi	r2,zero,573
  808ab8:	00809298 	cmpnei	r2,zero,586
  808abc:	00808b18 	cmpnei	r2,zero,556
  808ac0:	00808f14 	movui	r2,572
  808ac4:	00808b18 	cmpnei	r2,zero,556
  808ac8:	00809f08 	cmpgei	r2,zero,636
  808acc:	00808b18 	cmpnei	r2,zero,556
  808ad0:	00808b18 	cmpnei	r2,zero,556
  808ad4:	00808e78 	rdprs	r2,zero,569
			n = 0;
  808ad8:	d8000115 	stw	zero,4(sp)
  808adc:	11bff404 	addi	r6,r2,-48
				n = 10 * n + to_digit (ch);
  808ae0:	da000117 	ldw	r8,4(sp)
				ch = *fmt++;
  808ae4:	18800007 	ldb	r2,0(r3)
  808ae8:	18c00044 	addi	r3,r3,1
				n = 10 * n + to_digit (ch);
  808aec:	400890ba 	slli	r4,r8,2
  808af0:	2209883a 	add	r4,r4,r8
  808af4:	2109883a 	add	r4,r4,r4
  808af8:	3109883a 	add	r4,r6,r4
			} while (is_digit (ch));
  808afc:	11bff404 	addi	r6,r2,-48
				n = 10 * n + to_digit (ch);
  808b00:	d9000115 	stw	r4,4(sp)
			} while (is_digit (ch));
  808b04:	310002b0 	cmpltui	r4,r6,10
  808b08:	203ff51e 	bne	r4,zero,808ae0 <___vfiprintf_internal_r+0x280>
reswitch:	switch (ch) {
  808b0c:	113ff804 	addi	r4,r2,-32
  808b10:	21801668 	cmpgeui	r6,r4,89
  808b14:	303f9226 	beq	r6,zero,808960 <___vfiprintf_internal_r+0x100>
  808b18:	d8c00215 	stw	r3,8(sp)
  808b1c:	d9400c45 	stb	r5,49(sp)
			if (ch == '\0')
  808b20:	10007a26 	beq	r2,zero,808d0c <___vfiprintf_internal_r+0x4ac>
			*cp = ch;
  808b24:	d8801005 	stb	r2,64(sp)
			break;
  808b28:	00800044 	movi	r2,1
			sign = '\0';
  808b2c:	d8000c45 	stb	zero,49(sp)
			break;
  808b30:	d8800015 	stw	r2,0(sp)
			size = 1;
  808b34:	d8800515 	stw	r2,20(sp)
			cp = buf;
  808b38:	dcc01004 	addi	r19,sp,64
			cp = buf + BUF;
  808b3c:	dd800315 	stw	r22,12(sp)
  808b40:	d8000415 	stw	zero,16(sp)
		if (flags & HEXPREFIX)
  808b44:	d8800317 	ldw	r2,12(sp)
  808b48:	1080008c 	andi	r2,r2,2
  808b4c:	d8800915 	stw	r2,36(sp)
  808b50:	10000326 	beq	r2,zero,808b60 <___vfiprintf_internal_r+0x300>
			realsz+= 2;
  808b54:	d8800017 	ldw	r2,0(sp)
  808b58:	10800084 	addi	r2,r2,2
  808b5c:	d8800015 	stw	r2,0(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  808b60:	d8c00317 	ldw	r3,12(sp)
			PRINT (&sign, 1);
  808b64:	d8800e17 	ldw	r2,56(sp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  808b68:	18c0210c 	andi	r3,r3,132
  808b6c:	180d883a 	mov	r6,r3
  808b70:	d8c00815 	stw	r3,32(sp)
			PRINT (&sign, 1);
  808b74:	11400044 	addi	r5,r2,1
  808b78:	d8c00f17 	ldw	r3,60(sp)
  808b7c:	2809883a 	mov	r4,r5
		if ((flags & (LADJUST|ZEROPAD)) == 0)
  808b80:	3000041e 	bne	r6,zero,808b94 <___vfiprintf_internal_r+0x334>
			PAD (width - realsz, blanks);
  808b84:	d9800117 	ldw	r6,4(sp)
  808b88:	d9c00017 	ldw	r7,0(sp)
  808b8c:	31ebc83a 	sub	r21,r6,r7
  808b90:	05437816 	blt	zero,r21,809974 <___vfiprintf_internal_r+0x1114>
		if (sign)
  808b94:	d9800c47 	ldb	r6,49(sp)
			PRINT (&sign, 1);
  808b98:	91400204 	addi	r5,r18,8
		if (sign)
  808b9c:	3001d326 	beq	r6,zero,8092ec <___vfiprintf_internal_r+0xa8c>
			PRINT (&sign, 1);
  808ba0:	d8800c44 	addi	r2,sp,49
  808ba4:	18c00044 	addi	r3,r3,1
  808ba8:	90800015 	stw	r2,0(r18)
  808bac:	00800044 	movi	r2,1
  808bb0:	90800115 	stw	r2,4(r18)
  808bb4:	d8c00f15 	stw	r3,60(sp)
  808bb8:	d9000e15 	stw	r4,56(sp)
  808bbc:	20800208 	cmpgei	r2,r4,8
  808bc0:	1001c626 	beq	r2,zero,8092dc <___vfiprintf_internal_r+0xa7c>
	if (uio->uio_resid == 0) {
  808bc4:	18034026 	beq	r3,zero,8098c8 <___vfiprintf_internal_r+0x1068>
	if (fp->_flags2 & __SWID) {
  808bc8:	a0801917 	ldw	r2,100(r20)
  808bcc:	1088000c 	andi	r2,r2,8192
  808bd0:	10033826 	beq	r2,zero,8098b4 <___vfiprintf_internal_r+0x1054>
		iov = uio->uio_iov;
  808bd4:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  808bd8:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  808bdc:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  808be0:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  808be4:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  808be8:	a8044326 	beq	r21,zero,809cf8 <___vfiprintf_internal_r+0x1498>
  808bec:	0039883a 	mov	fp,zero
  808bf0:	00000206 	br	808bfc <___vfiprintf_internal_r+0x39c>
  808bf4:	8c400104 	addi	r17,r17,4
  808bf8:	af043e26 	beq	r21,fp,809cf4 <___vfiprintf_internal_r+0x1494>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808bfc:	89400017 	ldw	r5,0(r17)
  808c00:	a00d883a 	mov	r6,r20
  808c04:	8009883a 	mov	r4,r16
  808c08:	080a8300 	call	80a830 <_fputwc_r>
  808c0c:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  808c10:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808c14:	103ff726 	beq	r2,zero,808bf4 <___vfiprintf_internal_r+0x394>
	return (__sferror (fp) ? EOF : ret);
  808c18:	a080030b 	ldhu	r2,12(r20)
  808c1c:	1080100c 	andi	r2,r2,64
  808c20:	1005261e 	bne	r2,zero,80a0bc <___vfiprintf_internal_r+0x185c>
}
  808c24:	d8800617 	ldw	r2,24(sp)
  808c28:	dfc03317 	ldw	ra,204(sp)
  808c2c:	df003217 	ldw	fp,200(sp)
  808c30:	ddc03117 	ldw	r23,196(sp)
  808c34:	dd803017 	ldw	r22,192(sp)
  808c38:	dd402f17 	ldw	r21,188(sp)
  808c3c:	dd002e17 	ldw	r20,184(sp)
  808c40:	dcc02d17 	ldw	r19,180(sp)
  808c44:	dc802c17 	ldw	r18,176(sp)
  808c48:	dc402b17 	ldw	r17,172(sp)
  808c4c:	dc002a17 	ldw	r16,168(sp)
  808c50:	dec03404 	addi	sp,sp,208
  808c54:	f800283a 	ret
	if (cantwrite (data, fp)) {
  808c58:	a00b883a 	mov	r5,r20
  808c5c:	8009883a 	mov	r4,r16
  808c60:	08029900 	call	802990 <__swsetup_r>
  808c64:	1005151e 	bne	r2,zero,80a0bc <___vfiprintf_internal_r+0x185c>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
  808c68:	a080030b 	ldhu	r2,12(r20)
  808c6c:	1080068c 	andi	r2,r2,26
  808c70:	10800298 	cmpnei	r2,r2,10
  808c74:	103f1c1e 	bne	r2,zero,8088e8 <___vfiprintf_internal_r+0x88>
  808c78:	a080038f 	ldh	r2,14(r20)
  808c7c:	103f1a16 	blt	r2,zero,8088e8 <___vfiprintf_internal_r+0x88>
		return (__sbprintf (data, fp, fmt0, ap));
  808c80:	d9c00717 	ldw	r7,28(sp)
  808c84:	d9800217 	ldw	r6,8(sp)
  808c88:	a00b883a 	mov	r5,r20
  808c8c:	8009883a 	mov	r4,r16
}
  808c90:	dfc03317 	ldw	ra,204(sp)
  808c94:	df003217 	ldw	fp,200(sp)
  808c98:	ddc03117 	ldw	r23,196(sp)
  808c9c:	dd803017 	ldw	r22,192(sp)
  808ca0:	dd402f17 	ldw	r21,188(sp)
  808ca4:	dd002e17 	ldw	r20,184(sp)
  808ca8:	dcc02d17 	ldw	r19,180(sp)
  808cac:	dc802c17 	ldw	r18,176(sp)
  808cb0:	dc402b17 	ldw	r17,172(sp)
  808cb4:	dc002a17 	ldw	r16,168(sp)
  808cb8:	dec03404 	addi	sp,sp,208
		return (__sbprintf (data, fp, fmt0, ap));
  808cbc:	080a1401 	jmpi	80a140 <__sbprintf>
		if ((m = fmt - cp) != 0) {
  808cc0:	d8c00217 	ldw	r3,8(sp)
  808cc4:	b8e3c83a 	sub	r17,r23,r3
  808cc8:	b8c01026 	beq	r23,r3,808d0c <___vfiprintf_internal_r+0x4ac>
			PRINT (cp, m);
  808ccc:	d8c00217 	ldw	r3,8(sp)
  808cd0:	d9000f17 	ldw	r4,60(sp)
  808cd4:	94400115 	stw	r17,4(r18)
  808cd8:	90c00015 	stw	r3,0(r18)
  808cdc:	d8c00e17 	ldw	r3,56(sp)
  808ce0:	8909883a 	add	r4,r17,r4
  808ce4:	d9000f15 	stw	r4,60(sp)
  808ce8:	18c00044 	addi	r3,r3,1
  808cec:	d8c00e15 	stw	r3,56(sp)
  808cf0:	18c00208 	cmpgei	r3,r3,8
  808cf4:	18001c1e 	bne	r3,zero,808d68 <___vfiprintf_internal_r+0x508>
  808cf8:	94800204 	addi	r18,r18,8
			ret += m;
  808cfc:	d8c00617 	ldw	r3,24(sp)
  808d00:	1c47883a 	add	r3,r3,r17
  808d04:	d8c00615 	stw	r3,24(sp)
                if (*fmt == '\0')
  808d08:	103f0b1e 	bne	r2,zero,808938 <___vfiprintf_internal_r+0xd8>
	FLUSH ();
  808d0c:	d8800f17 	ldw	r2,60(sp)
  808d10:	103fc126 	beq	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
	if (fp->_flags2 & __SWID) {
  808d14:	a0c01917 	ldw	r3,100(r20)
  808d18:	18c8000c 	andi	r3,r3,8192
  808d1c:	1804f126 	beq	r3,zero,80a0e4 <___vfiprintf_internal_r+0x1884>
		iov = uio->uio_iov;
  808d20:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  808d24:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  808d28:	95400117 	ldw	r21,4(r18)
			p = (wchar_t *) iov->iov_base;
  808d2c:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  808d30:	a826d0ba 	srli	r19,r21,2
			for (i = 0; i < len; i++) {
  808d34:	9804e526 	beq	r19,zero,80a0cc <___vfiprintf_internal_r+0x186c>
  808d38:	002d883a 	mov	r22,zero
  808d3c:	00000206 	br	808d48 <___vfiprintf_internal_r+0x4e8>
  808d40:	8c400104 	addi	r17,r17,4
  808d44:	9d84e026 	beq	r19,r22,80a0c8 <___vfiprintf_internal_r+0x1868>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808d48:	89400017 	ldw	r5,0(r17)
  808d4c:	a00d883a 	mov	r6,r20
  808d50:	8009883a 	mov	r4,r16
  808d54:	080a8300 	call	80a830 <_fputwc_r>
  808d58:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  808d5c:	b5800044 	addi	r22,r22,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808d60:	103ff726 	beq	r2,zero,808d40 <___vfiprintf_internal_r+0x4e0>
  808d64:	003fac06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
	if (uio->uio_resid == 0) {
  808d68:	2003de26 	beq	r4,zero,809ce4 <___vfiprintf_internal_r+0x1484>
	if (fp->_flags2 & __SWID) {
  808d6c:	a0801917 	ldw	r2,100(r20)
  808d70:	1088000c 	andi	r2,r2,8192
  808d74:	10001126 	beq	r2,zero,808dbc <___vfiprintf_internal_r+0x55c>
		iov = uio->uio_iov;
  808d78:	dcc00d17 	ldw	r19,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  808d7c:	9d800117 	ldw	r22,4(r19)
			p = (wchar_t *) iov->iov_base;
  808d80:	9c800017 	ldw	r18,0(r19)
			len = iov->iov_len / sizeof (wchar_t);
  808d84:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  808d88:	a803d026 	beq	r21,zero,809ccc <___vfiprintf_internal_r+0x146c>
  808d8c:	0039883a 	mov	fp,zero
  808d90:	00000206 	br	808d9c <___vfiprintf_internal_r+0x53c>
  808d94:	94800104 	addi	r18,r18,4
  808d98:	af03cb26 	beq	r21,fp,809cc8 <___vfiprintf_internal_r+0x1468>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808d9c:	91400017 	ldw	r5,0(r18)
  808da0:	a00d883a 	mov	r6,r20
  808da4:	8009883a 	mov	r4,r16
  808da8:	080a8300 	call	80a830 <_fputwc_r>
  808dac:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  808db0:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  808db4:	103ff726 	beq	r2,zero,808d94 <___vfiprintf_internal_r+0x534>
  808db8:	003f9706 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  808dbc:	d9800d04 	addi	r6,sp,52
  808dc0:	a00b883a 	mov	r5,r20
  808dc4:	8009883a 	mov	r4,r16
  808dc8:	08050ec0 	call	8050ec <__sfvwrite_r>
	uio->uio_resid = 0;
  808dcc:	d8000f15 	stw	zero,60(sp)
	uio->uio_iovcnt = 0;
  808dd0:	d8000e15 	stw	zero,56(sp)
			PRINT (cp, m);
  808dd4:	103f901e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  808dd8:	b8800007 	ldb	r2,0(r23)
  808ddc:	dc801a04 	addi	r18,sp,104
  808de0:	003fc606 	br	808cfc <___vfiprintf_internal_r+0x49c>
	CHECK_INIT (data, fp);
  808de4:	0804b400 	call	804b40 <__sinit>
  808de8:	003eaf06 	br	8088a8 <___vfiprintf_internal_r+0x48>
  808dec:	d9c00415 	stw	r7,16(sp)
  808df0:	d8c00215 	stw	r3,8(sp)
  808df4:	d9400c45 	stb	r5,49(sp)
			_uquad = SARG ();
  808df8:	b080080c 	andi	r2,r22,32
  808dfc:	10006d26 	beq	r2,zero,808fb4 <___vfiprintf_internal_r+0x754>
  808e00:	d8c00717 	ldw	r3,28(sp)
  808e04:	18800117 	ldw	r2,4(r3)
  808e08:	1c400017 	ldw	r17,0(r3)
  808e0c:	18c00204 	addi	r3,r3,8
  808e10:	d8c00715 	stw	r3,28(sp)
  808e14:	102f883a 	mov	r23,r2
			if ((quad_t)_uquad < 0)
  808e18:	10007116 	blt	r2,zero,808fe0 <___vfiprintf_internal_r+0x780>
number:			if ((dprec = prec) >= 0)
  808e1c:	d8800417 	ldw	r2,16(sp)
			if (!sign)
  808e20:	dd400c43 	ldbu	r21,49(sp)
number:			if ((dprec = prec) >= 0)
  808e24:	10bfffd8 	cmpnei	r2,r2,-1
  808e28:	10000626 	beq	r2,zero,808e44 <___vfiprintf_internal_r+0x5e4>
				flags &= ~ZEROPAD;
  808e2c:	00ffdfc4 	movi	r3,-129
  808e30:	b0c6703a 	and	r3,r22,r3
			if (_uquad != 0 || prec != 0) {
  808e34:	8dc4b03a 	or	r2,r17,r23
				flags &= ~ZEROPAD;
  808e38:	d8c00315 	stw	r3,12(sp)
			if (_uquad != 0 || prec != 0) {
  808e3c:	1003bf26 	beq	r2,zero,809d3c <___vfiprintf_internal_r+0x14dc>
  808e40:	182d883a 	mov	r22,r3
					if (_uquad < 10) {
  808e44:	b802b51e 	bne	r23,zero,80991c <___vfiprintf_internal_r+0x10bc>
  808e48:	888002a8 	cmpgeui	r2,r17,10
  808e4c:	1002b31e 	bne	r2,zero,80991c <___vfiprintf_internal_r+0x10bc>
						*--cp = to_char(_uquad);
  808e50:	8c400c04 	addi	r17,r17,48
						break;
  808e54:	00800044 	movi	r2,1
						*--cp = to_char(_uquad);
  808e58:	dc4019c5 	stb	r17,103(sp)
						break;
  808e5c:	dd800315 	stw	r22,12(sp)
  808e60:	d8800515 	stw	r2,20(sp)
						*--cp = to_char(_uquad);
  808e64:	dcc019c4 	addi	r19,sp,103
						break;
  808e68:	00007d06 	br	809060 <___vfiprintf_internal_r+0x800>
				flags |= SHORTINT;
  808e6c:	18800007 	ldb	r2,0(r3)
  808e70:	b5801014 	ori	r22,r22,64
			goto rflag;
  808e74:	003eb606 	br	808950 <___vfiprintf_internal_r+0xf0>
			xdigs = "0123456789abcdef";
  808e78:	00802074 	movhi	r2,129
  808e7c:	10859204 	addi	r2,r2,5704
  808e80:	d8c00215 	stw	r3,8(sp)
  808e84:	d8800a15 	stw	r2,40(sp)
  808e88:	d9c00415 	stw	r7,16(sp)
  808e8c:	d9400c45 	stb	r5,49(sp)
hex:			_uquad = UARG ();
  808e90:	b080080c 	andi	r2,r22,32
			_uquad = SARG ();
  808e94:	00c01e04 	movi	r3,120
hex:			_uquad = UARG ();
  808e98:	1000c926 	beq	r2,zero,8091c0 <___vfiprintf_internal_r+0x960>
  808e9c:	d8800717 	ldw	r2,28(sp)
  808ea0:	14400017 	ldw	r17,0(r2)
  808ea4:	15c00117 	ldw	r23,4(r2)
  808ea8:	10800204 	addi	r2,r2,8
  808eac:	d8800715 	stw	r2,28(sp)
			if (flags & ALT && _uquad != 0) {
  808eb0:	b080004c 	andi	r2,r22,1
  808eb4:	10000226 	beq	r2,zero,808ec0 <___vfiprintf_internal_r+0x660>
  808eb8:	8dc4b03a 	or	r2,r17,r23
  808ebc:	1003e01e 	bne	r2,zero,809e40 <___vfiprintf_internal_r+0x15e0>
			base = HEX;
  808ec0:	00800084 	movi	r2,2
number:			if ((dprec = prec) >= 0)
  808ec4:	d9400417 	ldw	r5,16(sp)
nosign:			sign = '\0';
  808ec8:	d8000c45 	stb	zero,49(sp)
  808ecc:	002b883a 	mov	r21,zero
number:			if ((dprec = prec) >= 0)
  808ed0:	28ffffe0 	cmpeqi	r3,r5,-1
  808ed4:	18004d1e 	bne	r3,zero,80900c <___vfiprintf_internal_r+0x7ac>
				flags &= ~ZEROPAD;
  808ed8:	013fdfc4 	movi	r4,-129
  808edc:	b108703a 	and	r4,r22,r4
			if (_uquad != 0 || prec != 0) {
  808ee0:	8dc6b03a 	or	r3,r17,r23
				flags &= ~ZEROPAD;
  808ee4:	d9000315 	stw	r4,12(sp)
			if (_uquad != 0 || prec != 0) {
  808ee8:	1802831e 	bne	r3,zero,8098f8 <___vfiprintf_internal_r+0x1098>
  808eec:	28041e1e 	bne	r5,zero,809f68 <___vfiprintf_internal_r+0x1708>
                       else if (base == OCT && (flags & ALT))
  808ef0:	1003941e 	bne	r2,zero,809d44 <___vfiprintf_internal_r+0x14e4>
  808ef4:	b080004c 	andi	r2,r22,1
  808ef8:	d8800515 	stw	r2,20(sp)
  808efc:	1003c926 	beq	r2,zero,809e24 <___vfiprintf_internal_r+0x15c4>
                         *--cp = '0';
  808f00:	00800c04 	movi	r2,48
  808f04:	d88019c5 	stb	r2,103(sp)
  808f08:	dcc019c4 	addi	r19,sp,103
  808f0c:	d8800517 	ldw	r2,20(sp)
  808f10:	00005306 	br	809060 <___vfiprintf_internal_r+0x800>
			cp = GET_ARG (N, ap, char_ptr_t);
  808f14:	d8800717 	ldw	r2,28(sp)
  808f18:	d9c00415 	stw	r7,16(sp)
  808f1c:	d8c00215 	stw	r3,8(sp)
  808f20:	14c00017 	ldw	r19,0(r2)
			sign = '\0';
  808f24:	d8000c45 	stb	zero,49(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  808f28:	14400104 	addi	r17,r2,4
			if (cp == NULL) {
  808f2c:	98041926 	beq	r19,zero,809f94 <___vfiprintf_internal_r+0x1734>
			if (prec >= 0) {
  808f30:	38bfffe0 	cmpeqi	r2,r7,-1
  808f34:	380d883a 	mov	r6,r7
  808f38:	1003ea1e 	bne	r2,zero,809ee4 <___vfiprintf_internal_r+0x1684>
				char *p = memchr (cp, 0, prec);
  808f3c:	000b883a 	mov	r5,zero
  808f40:	9809883a 	mov	r4,r19
  808f44:	08062840 	call	806284 <memchr>
				if (p != NULL)
  808f48:	10045026 	beq	r2,zero,80a08c <___vfiprintf_internal_r+0x182c>
					size = p - cp;
  808f4c:	14c5c83a 	sub	r2,r2,r19
  808f50:	d8800515 	stw	r2,20(sp)
  808f54:	d8800015 	stw	r2,0(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  808f58:	dc400715 	stw	r17,28(sp)
  808f5c:	003ef706 	br	808b3c <___vfiprintf_internal_r+0x2dc>
			xdigs = "0123456789abcdef";
  808f60:	d8c00215 	stw	r3,8(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  808f64:	d8c00717 	ldw	r3,28(sp)
			ox[0] = '0';
  808f68:	009e0c04 	movi	r2,30768
			xdigs = "0123456789abcdef";
  808f6c:	01002074 	movhi	r4,129
			ox[0] = '0';
  808f70:	d8800c8d 	sth	r2,50(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  808f74:	18800104 	addi	r2,r3,4
  808f78:	d8800715 	stw	r2,28(sp)
			xdigs = "0123456789abcdef";
  808f7c:	20859204 	addi	r2,r4,5704
  808f80:	d8800a15 	stw	r2,40(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  808f84:	1c400017 	ldw	r17,0(r3)
			xdigs = "0123456789abcdef";
  808f88:	d9c00415 	stw	r7,16(sp)
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
  808f8c:	002f883a 	mov	r23,zero
			flags |= HEXPREFIX;
  808f90:	b5800094 	ori	r22,r22,2
			base = HEX;
  808f94:	00800084 	movi	r2,2
			goto nosign;
  808f98:	003fca06 	br	808ec4 <___vfiprintf_internal_r+0x664>
			flags |= LONGINT;
  808f9c:	b5800414 	ori	r22,r22,16
  808fa0:	d9c00415 	stw	r7,16(sp)
  808fa4:	d8c00215 	stw	r3,8(sp)
  808fa8:	d9400c45 	stb	r5,49(sp)
			_uquad = SARG ();
  808fac:	b080080c 	andi	r2,r22,32
  808fb0:	103f931e 	bne	r2,zero,808e00 <___vfiprintf_internal_r+0x5a0>
			width = GET_ARG (n, ap, int);
  808fb4:	d9000717 	ldw	r4,28(sp)
			_uquad = SARG ();
  808fb8:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  808fbc:	20c00104 	addi	r3,r4,4
			_uquad = SARG ();
  808fc0:	1003ae1e 	bne	r2,zero,809e7c <___vfiprintf_internal_r+0x161c>
  808fc4:	b080100c 	andi	r2,r22,64
  808fc8:	10040626 	beq	r2,zero,809fe4 <___vfiprintf_internal_r+0x1784>
  808fcc:	2440000f 	ldh	r17,0(r4)
  808fd0:	d8c00715 	stw	r3,28(sp)
  808fd4:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  808fd8:	b805883a 	mov	r2,r23
  808fdc:	103f8f0e 	bge	r2,zero,808e1c <___vfiprintf_internal_r+0x5bc>
number:			if ((dprec = prec) >= 0)
  808fe0:	d9400417 	ldw	r5,16(sp)
				_uquad = -_uquad;
  808fe4:	8804c03a 	cmpne	r2,r17,zero
  808fe8:	05efc83a 	sub	r23,zero,r23
  808fec:	b8afc83a 	sub	r23,r23,r2
				sign = '-';
  808ff0:	00800b44 	movi	r2,45
  808ff4:	d8800c45 	stb	r2,49(sp)
number:			if ((dprec = prec) >= 0)
  808ff8:	28ffffe0 	cmpeqi	r3,r5,-1
				_uquad = -_uquad;
  808ffc:	0463c83a 	sub	r17,zero,r17
				sign = '-';
  809000:	05400b44 	movi	r21,45
			base = DEC;
  809004:	00800044 	movi	r2,1
number:			if ((dprec = prec) >= 0)
  809008:	183fb326 	beq	r3,zero,808ed8 <___vfiprintf_internal_r+0x678>
				switch (base) {
  80900c:	10c00060 	cmpeqi	r3,r2,1
  809010:	183f8c1e 	bne	r3,zero,808e44 <___vfiprintf_internal_r+0x5e4>
  809014:	108000a0 	cmpeqi	r2,r2,2
			cp = buf + BUF;
  809018:	dcc01a04 	addi	r19,sp,104
  80901c:	10010226 	beq	r2,zero,809428 <___vfiprintf_internal_r+0xbc8>
  809020:	d9000a17 	ldw	r4,40(sp)
						*--cp = xdigs[_uquad & 15];
  809024:	888003cc 	andi	r2,r17,15
						_uquad >>= 4;
  809028:	b806973a 	slli	r3,r23,28
  80902c:	8822d13a 	srli	r17,r17,4
						*--cp = xdigs[_uquad & 15];
  809030:	2085883a 	add	r2,r4,r2
  809034:	10800003 	ldbu	r2,0(r2)
						_uquad >>= 4;
  809038:	b82ed13a 	srli	r23,r23,4
  80903c:	1c62b03a 	or	r17,r3,r17
						*--cp = xdigs[_uquad & 15];
  809040:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  809044:	8dc4b03a 	or	r2,r17,r23
						*--cp = xdigs[_uquad & 15];
  809048:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  80904c:	103ff51e 	bne	r2,zero,809024 <___vfiprintf_internal_r+0x7c4>
			size = buf + BUF - cp;
  809050:	d8801a04 	addi	r2,sp,104
  809054:	14c5c83a 	sub	r2,r2,r19
  809058:	d8800515 	stw	r2,20(sp)
  80905c:	dd800315 	stw	r22,12(sp)
		realsz = dprec > size ? dprec : size;
  809060:	d8c00417 	ldw	r3,16(sp)
  809064:	d8800015 	stw	r2,0(sp)
  809068:	10c0010e 	bge	r2,r3,809070 <___vfiprintf_internal_r+0x810>
  80906c:	d8c00015 	stw	r3,0(sp)
		if (sign)
  809070:	ad403fcc 	andi	r21,r21,255
  809074:	ad40201c 	xori	r21,r21,128
  809078:	ad7fe004 	addi	r21,r21,-128
  80907c:	a83eb126 	beq	r21,zero,808b44 <___vfiprintf_internal_r+0x2e4>
			realsz++;
  809080:	d8800017 	ldw	r2,0(sp)
  809084:	10800044 	addi	r2,r2,1
  809088:	d8800015 	stw	r2,0(sp)
  80908c:	003ead06 	br	808b44 <___vfiprintf_internal_r+0x2e4>
			flags |= ZEROPAD;
  809090:	18800007 	ldb	r2,0(r3)
  809094:	b5802014 	ori	r22,r22,128
			goto rflag;
  809098:	003e2d06 	br	808950 <___vfiprintf_internal_r+0xf0>
			if ((ch = *fmt++) == '*') {
  80909c:	18800007 	ldb	r2,0(r3)
  8090a0:	19000044 	addi	r4,r3,1
  8090a4:	11800aa0 	cmpeqi	r6,r2,42
  8090a8:	3004131e 	bne	r6,zero,80a0f8 <___vfiprintf_internal_r+0x1898>
			while (is_digit (ch)) {
  8090ac:	11bff404 	addi	r6,r2,-48
  8090b0:	30c002b0 	cmpltui	r3,r6,10
  8090b4:	1803ef26 	beq	r3,zero,80a074 <___vfiprintf_internal_r+0x1814>
			if ((ch = *fmt++) == '*') {
  8090b8:	2007883a 	mov	r3,r4
			n = 0;
  8090bc:	000f883a 	mov	r7,zero
				n = 10 * n + to_digit (ch);
  8090c0:	380890ba 	slli	r4,r7,2
				ch = *fmt++;
  8090c4:	18800007 	ldb	r2,0(r3)
  8090c8:	18c00044 	addi	r3,r3,1
				n = 10 * n + to_digit (ch);
  8090cc:	21c9883a 	add	r4,r4,r7
  8090d0:	2109883a 	add	r4,r4,r4
  8090d4:	218f883a 	add	r7,r4,r6
			while (is_digit (ch)) {
  8090d8:	11bff404 	addi	r6,r2,-48
  8090dc:	310002b0 	cmpltui	r4,r6,10
  8090e0:	203ff71e 	bne	r4,zero,8090c0 <___vfiprintf_internal_r+0x860>
  8090e4:	003e1b06 	br	808954 <___vfiprintf_internal_r+0xf4>
			if ((ch = *fmt++) == '*') {
  8090e8:	18800003 	ldbu	r2,0(r3)
			flags |= LADJUST;
  8090ec:	10803fcc 	andi	r2,r2,255
  8090f0:	1080201c 	xori	r2,r2,128
  8090f4:	b5800114 	ori	r22,r22,4
			goto rflag;
  8090f8:	10bfe004 	addi	r2,r2,-128
  8090fc:	003e1406 	br	808950 <___vfiprintf_internal_r+0xf0>
			goto rflag;
  809100:	18800007 	ldb	r2,0(r3)
			sign = '+';
  809104:	01400ac4 	movi	r5,43
			goto rflag;
  809108:	003e1106 	br	808950 <___vfiprintf_internal_r+0xf0>
			width = GET_ARG (n, ap, int);
  80910c:	d9000717 	ldw	r4,28(sp)
			if ((ch = *fmt++) == '*') {
  809110:	18800003 	ldbu	r2,0(r3)
			width = GET_ARG (n, ap, int);
  809114:	21800017 	ldw	r6,0(r4)
  809118:	21000104 	addi	r4,r4,4
  80911c:	d9800115 	stw	r6,4(sp)
			if (width >= 0)
  809120:	30036516 	blt	r6,zero,809eb8 <___vfiprintf_internal_r+0x1658>
			width = GET_ARG (n, ap, int);
  809124:	d9000715 	stw	r4,28(sp)
  809128:	10803fcc 	andi	r2,r2,255
  80912c:	1080201c 	xori	r2,r2,128
  809130:	10bfe004 	addi	r2,r2,-128
  809134:	003e0606 	br	808950 <___vfiprintf_internal_r+0xf0>
			flags |= ALT;
  809138:	18800007 	ldb	r2,0(r3)
  80913c:	b5800054 	ori	r22,r22,1
			goto rflag;
  809140:	003e0306 	br	808950 <___vfiprintf_internal_r+0xf0>
			if (!sign)
  809144:	29003fcc 	andi	r4,r5,255
  809148:	2100201c 	xori	r4,r4,128
  80914c:	213fe004 	addi	r4,r4,-128
			if ((ch = *fmt++) == '*') {
  809150:	18800003 	ldbu	r2,0(r3)
			if (!sign)
  809154:	203ff41e 	bne	r4,zero,809128 <___vfiprintf_internal_r+0x8c8>
  809158:	10803fcc 	andi	r2,r2,255
  80915c:	1080201c 	xori	r2,r2,128
				sign = ' ';
  809160:	01400804 	movi	r5,32
  809164:	10bfe004 	addi	r2,r2,-128
  809168:	003df906 	br	808950 <___vfiprintf_internal_r+0xf0>
				*cp = GET_ARG (N, ap, int);
  80916c:	d8c00215 	stw	r3,8(sp)
  809170:	d8c00717 	ldw	r3,28(sp)
			sign = '\0';
  809174:	d8000c45 	stb	zero,49(sp)
			cp = buf;
  809178:	dcc01004 	addi	r19,sp,64
				*cp = GET_ARG (N, ap, int);
  80917c:	18800017 	ldw	r2,0(r3)
  809180:	18c00104 	addi	r3,r3,4
  809184:	d8c00715 	stw	r3,28(sp)
  809188:	d8801005 	stb	r2,64(sp)
			break;
  80918c:	00800044 	movi	r2,1
  809190:	d8800015 	stw	r2,0(sp)
				size = 1;
  809194:	d8800515 	stw	r2,20(sp)
			break;
  809198:	003e6806 	br	808b3c <___vfiprintf_internal_r+0x2dc>
			xdigs = "0123456789ABCDEF";
  80919c:	00802074 	movhi	r2,129
  8091a0:	10859704 	addi	r2,r2,5724
  8091a4:	d8c00215 	stw	r3,8(sp)
  8091a8:	d8800a15 	stw	r2,40(sp)
  8091ac:	d9c00415 	stw	r7,16(sp)
  8091b0:	d9400c45 	stb	r5,49(sp)
hex:			_uquad = UARG ();
  8091b4:	b080080c 	andi	r2,r22,32
			xdigs = "0123456789abcdef";
  8091b8:	00c01604 	movi	r3,88
hex:			_uquad = UARG ();
  8091bc:	103f371e 	bne	r2,zero,808e9c <___vfiprintf_internal_r+0x63c>
			width = GET_ARG (n, ap, int);
  8091c0:	d9400717 	ldw	r5,28(sp)
hex:			_uquad = UARG ();
  8091c4:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  8091c8:	29000104 	addi	r4,r5,4
hex:			_uquad = UARG ();
  8091cc:	1003221e 	bne	r2,zero,809e58 <___vfiprintf_internal_r+0x15f8>
  8091d0:	b080100c 	andi	r2,r22,64
  8091d4:	10037f26 	beq	r2,zero,809fd4 <___vfiprintf_internal_r+0x1774>
  8091d8:	2c40000b 	ldhu	r17,0(r5)
  8091dc:	002f883a 	mov	r23,zero
  8091e0:	d9000715 	stw	r4,28(sp)
  8091e4:	003f3206 	br	808eb0 <___vfiprintf_internal_r+0x650>
			flags |= LONGINT;
  8091e8:	d9c00415 	stw	r7,16(sp)
  8091ec:	d8c00215 	stw	r3,8(sp)
  8091f0:	b5800414 	ori	r22,r22,16
			_uquad = UARG ();
  8091f4:	b080080c 	andi	r2,r22,32
  8091f8:	1002d726 	beq	r2,zero,809d58 <___vfiprintf_internal_r+0x14f8>
  8091fc:	d8c00717 	ldw	r3,28(sp)
			base = DEC;
  809200:	00800044 	movi	r2,1
			_uquad = UARG ();
  809204:	1c400017 	ldw	r17,0(r3)
  809208:	1dc00117 	ldw	r23,4(r3)
  80920c:	18c00204 	addi	r3,r3,8
  809210:	d8c00715 	stw	r3,28(sp)
  809214:	003f2b06 	br	808ec4 <___vfiprintf_internal_r+0x664>
			flags |= LONGINT;
  809218:	d9c00415 	stw	r7,16(sp)
  80921c:	d8c00215 	stw	r3,8(sp)
  809220:	b5800414 	ori	r22,r22,16
			_uquad = UARG ();
  809224:	b080080c 	andi	r2,r22,32
  809228:	1002d626 	beq	r2,zero,809d84 <___vfiprintf_internal_r+0x1524>
  80922c:	d8c00717 	ldw	r3,28(sp)
			base = OCT;
  809230:	0005883a 	mov	r2,zero
			_uquad = UARG ();
  809234:	1c400017 	ldw	r17,0(r3)
  809238:	1dc00117 	ldw	r23,4(r3)
  80923c:	18c00204 	addi	r3,r3,8
  809240:	d8c00715 	stw	r3,28(sp)
  809244:	003f1f06 	br	808ec4 <___vfiprintf_internal_r+0x664>
			width = GET_ARG (n, ap, int);
  809248:	d9000717 	ldw	r4,28(sp)
  80924c:	d8c00215 	stw	r3,8(sp)
  809250:	d9400c45 	stb	r5,49(sp)
  809254:	20c00017 	ldw	r3,0(r4)
  809258:	21000104 	addi	r4,r4,4
			if (flags & QUADINT)
  80925c:	b080080c 	andi	r2,r22,32
			width = GET_ARG (n, ap, int);
  809260:	d9000715 	stw	r4,28(sp)
			if (flags & QUADINT)
  809264:	10030f1e 	bne	r2,zero,809ea4 <___vfiprintf_internal_r+0x1644>
			if (flags & LONGINT)
  809268:	b080040c 	andi	r2,r22,16
  80926c:	1003291e 	bne	r2,zero,809f14 <___vfiprintf_internal_r+0x16b4>
			else if (flags & SHORTINT)
  809270:	b580100c 	andi	r22,r22,64
  809274:	b0032726 	beq	r22,zero,809f14 <___vfiprintf_internal_r+0x16b4>
				*GET_ARG (N, ap, short_ptr_t) = ret;
  809278:	d8800617 	ldw	r2,24(sp)
  80927c:	1880000d 	sth	r2,0(r3)
  809280:	003da006 	br	808904 <___vfiprintf_internal_r+0xa4>
			if (*fmt == 'l') {
  809284:	18800007 	ldb	r2,0(r3)
  809288:	11001b18 	cmpnei	r4,r2,108
  80928c:	20032f26 	beq	r4,zero,809f4c <___vfiprintf_internal_r+0x16ec>
				flags |= LONGINT;
  809290:	b5800414 	ori	r22,r22,16
  809294:	003dae06 	br	808950 <___vfiprintf_internal_r+0xf0>
			flags |= QUADINT;
  809298:	18800007 	ldb	r2,0(r3)
  80929c:	b5800814 	ori	r22,r22,32
			goto rflag;
  8092a0:	003dab06 	br	808950 <___vfiprintf_internal_r+0xf0>
		err = __sfvwrite_r(ptr, fp, uio);
  8092a4:	d9800d04 	addi	r6,sp,52
  8092a8:	a00b883a 	mov	r5,r20
  8092ac:	8009883a 	mov	r4,r16
  8092b0:	08050ec0 	call	8050ec <__sfvwrite_r>
			PAD (width - realsz, blanks);
  8092b4:	103e581e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		if (sign)
  8092b8:	d8800c47 	ldb	r2,49(sp)
  8092bc:	10030226 	beq	r2,zero,809ec8 <___vfiprintf_internal_r+0x1668>
			PRINT (&sign, 1);
  8092c0:	d8800c44 	addi	r2,sp,49
  8092c4:	d8801a15 	stw	r2,104(sp)
  8092c8:	00800044 	movi	r2,1
  8092cc:	d8801b15 	stw	r2,108(sp)
  8092d0:	d9401c04 	addi	r5,sp,112
  8092d4:	01000044 	movi	r4,1
  8092d8:	00c00044 	movi	r3,1
			PRINT (ox, 2);
  8092dc:	2005883a 	mov	r2,r4
  8092e0:	2825883a 	mov	r18,r5
  8092e4:	21000044 	addi	r4,r4,1
  8092e8:	29400204 	addi	r5,r5,8
		if (flags & HEXPREFIX)
  8092ec:	d9800917 	ldw	r6,36(sp)
  8092f0:	30002826 	beq	r6,zero,809394 <___vfiprintf_internal_r+0xb34>
			PRINT (ox, 2);
  8092f4:	d8800c84 	addi	r2,sp,50
  8092f8:	18c00084 	addi	r3,r3,2
  8092fc:	90800015 	stw	r2,0(r18)
  809300:	00800084 	movi	r2,2
  809304:	90800115 	stw	r2,4(r18)
  809308:	d8c00f15 	stw	r3,60(sp)
  80930c:	d9000e15 	stw	r4,56(sp)
  809310:	20800208 	cmpgei	r2,r4,8
  809314:	10026926 	beq	r2,zero,809cbc <___vfiprintf_internal_r+0x145c>
	if (uio->uio_resid == 0) {
  809318:	18028326 	beq	r3,zero,809d28 <___vfiprintf_internal_r+0x14c8>
	if (fp->_flags2 & __SWID) {
  80931c:	a0801917 	ldw	r2,100(r20)
  809320:	1088000c 	andi	r2,r2,8192
  809324:	10001226 	beq	r2,zero,809370 <___vfiprintf_internal_r+0xb10>
		iov = uio->uio_iov;
  809328:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80932c:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  809330:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  809334:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  809338:	b02ad0ba 	srli	r21,r22,2
			for (i = 0; i < len; i++) {
  80933c:	a8027526 	beq	r21,zero,809d14 <___vfiprintf_internal_r+0x14b4>
  809340:	0039883a 	mov	fp,zero
  809344:	00000206 	br	809350 <___vfiprintf_internal_r+0xaf0>
  809348:	8c400104 	addi	r17,r17,4
  80934c:	af027026 	beq	r21,fp,809d10 <___vfiprintf_internal_r+0x14b0>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809350:	89400017 	ldw	r5,0(r17)
  809354:	a00d883a 	mov	r6,r20
  809358:	8009883a 	mov	r4,r16
  80935c:	080a8300 	call	80a830 <_fputwc_r>
  809360:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809364:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809368:	103ff726 	beq	r2,zero,809348 <___vfiprintf_internal_r+0xae8>
  80936c:	003e2a06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  809370:	d9800d04 	addi	r6,sp,52
  809374:	a00b883a 	mov	r5,r20
  809378:	8009883a 	mov	r4,r16
  80937c:	08050ec0 	call	8050ec <__sfvwrite_r>
			PRINT (ox, 2);
  809380:	103e251e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  809384:	d9401c04 	addi	r5,sp,112
  809388:	01000044 	movi	r4,1
  80938c:	0007883a 	mov	r3,zero
  809390:	dc801a04 	addi	r18,sp,104
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
  809394:	d9800817 	ldw	r6,32(sp)
  809398:	35c02018 	cmpnei	r23,r6,128
  80939c:	b8008326 	beq	r23,zero,8095ac <___vfiprintf_internal_r+0xd4c>
		PAD (dprec - size, zeroes);
  8093a0:	d9800417 	ldw	r6,16(sp)
  8093a4:	d9c00517 	ldw	r7,20(sp)
  8093a8:	31ebc83a 	sub	r21,r6,r7
  8093ac:	0540e116 	blt	zero,r21,809734 <___vfiprintf_internal_r+0xed4>
		PRINT (cp, size);
  8093b0:	d9800517 	ldw	r6,20(sp)
  8093b4:	94c00015 	stw	r19,0(r18)
  8093b8:	d9000e15 	stw	r4,56(sp)
  8093bc:	30c5883a 	add	r2,r6,r3
  8093c0:	91800115 	stw	r6,4(r18)
  8093c4:	d8800f15 	stw	r2,60(sp)
  8093c8:	20c00210 	cmplti	r3,r4,8
  8093cc:	18003e1e 	bne	r3,zero,8094c8 <___vfiprintf_internal_r+0xc68>
	if (uio->uio_resid == 0) {
  8093d0:	10006726 	beq	r2,zero,809570 <___vfiprintf_internal_r+0xd10>
	if (fp->_flags2 & __SWID) {
  8093d4:	a0c01917 	ldw	r3,100(r20)
  8093d8:	18c8000c 	andi	r3,r3,8192
  8093dc:	18005e26 	beq	r3,zero,809558 <___vfiprintf_internal_r+0xcf8>
		iov = uio->uio_iov;
  8093e0:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  8093e4:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  8093e8:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  8093ec:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  8093f0:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  8093f4:	98014326 	beq	r19,zero,809904 <___vfiprintf_internal_r+0x10a4>
  8093f8:	002f883a 	mov	r23,zero
  8093fc:	00000206 	br	809408 <___vfiprintf_internal_r+0xba8>
  809400:	8c400104 	addi	r17,r17,4
  809404:	9dc13e26 	beq	r19,r23,809900 <___vfiprintf_internal_r+0x10a0>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809408:	89400017 	ldw	r5,0(r17)
  80940c:	a00d883a 	mov	r6,r20
  809410:	8009883a 	mov	r4,r16
  809414:	080a8300 	call	80a830 <_fputwc_r>
  809418:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80941c:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809420:	103ff726 	beq	r2,zero,809400 <___vfiprintf_internal_r+0xba0>
  809424:	003dfc06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
						_uquad >>= 3;
  809428:	8806d0fa 	srli	r3,r17,3
  80942c:	b808977a 	slli	r4,r23,29
  809430:	b82ed0fa 	srli	r23,r23,3
						*--cp = to_char (_uquad & 7);
  809434:	8c4001cc 	andi	r17,r17,7
  809438:	88800c04 	addi	r2,r17,48
						_uquad >>= 3;
  80943c:	20e2b03a 	or	r17,r4,r3
						*--cp = to_char (_uquad & 7);
  809440:	98bfffc5 	stb	r2,-1(r19)
					} while (_uquad);
  809444:	8dc6b03a 	or	r3,r17,r23
  809448:	980b883a 	mov	r5,r19
						*--cp = to_char (_uquad & 7);
  80944c:	9cffffc4 	addi	r19,r19,-1
					} while (_uquad);
  809450:	183ff51e 	bne	r3,zero,809428 <___vfiprintf_internal_r+0xbc8>
					if (flags & ALT && *cp != '0')
  809454:	b0c0004c 	andi	r3,r22,1
  809458:	183efd26 	beq	r3,zero,809050 <___vfiprintf_internal_r+0x7f0>
  80945c:	10803fcc 	andi	r2,r2,255
  809460:	1080201c 	xori	r2,r2,128
  809464:	10bfe004 	addi	r2,r2,-128
  809468:	10800c18 	cmpnei	r2,r2,48
  80946c:	103ef826 	beq	r2,zero,809050 <___vfiprintf_internal_r+0x7f0>
						*--cp = '0';
  809470:	00800c04 	movi	r2,48
  809474:	297fff84 	addi	r5,r5,-2
  809478:	98bfffc5 	stb	r2,-1(r19)
			size = buf + BUF - cp;
  80947c:	d8801a04 	addi	r2,sp,104
  809480:	1145c83a 	sub	r2,r2,r5
  809484:	d8800515 	stw	r2,20(sp)
  809488:	dd800315 	stw	r22,12(sp)
						*--cp = '0';
  80948c:	2827883a 	mov	r19,r5
  809490:	003ef306 	br	809060 <___vfiprintf_internal_r+0x800>
		err = __sfvwrite_r(ptr, fp, uio);
  809494:	d9800d04 	addi	r6,sp,52
  809498:	a00b883a 	mov	r5,r20
  80949c:	8009883a 	mov	r4,r16
  8094a0:	08050ec0 	call	8050ec <__sfvwrite_r>
		PAD (dprec - size, zeroes);
  8094a4:	103ddc1e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		PRINT (cp, size);
  8094a8:	d8800517 	ldw	r2,20(sp)
  8094ac:	00c00044 	movi	r3,1
  8094b0:	dcc01a15 	stw	r19,104(sp)
  8094b4:	d8801b15 	stw	r2,108(sp)
  8094b8:	d8800f15 	stw	r2,60(sp)
  8094bc:	d8c00e15 	stw	r3,56(sp)
  8094c0:	d9401c04 	addi	r5,sp,112
  8094c4:	01000044 	movi	r4,1
		if (flags & LADJUST)
  8094c8:	d8c00317 	ldw	r3,12(sp)
  8094cc:	18c0010c 	andi	r3,r3,4
  8094d0:	18000426 	beq	r3,zero,8094e4 <___vfiprintf_internal_r+0xc84>
			PAD (width - realsz, blanks);
  8094d4:	d8c00117 	ldw	r3,4(sp)
  8094d8:	d9800017 	ldw	r6,0(sp)
  8094dc:	19a5c83a 	sub	r18,r3,r6
  8094e0:	04817a16 	blt	zero,r18,809acc <___vfiprintf_internal_r+0x126c>
		ret += width > realsz ? width : realsz;
  8094e4:	d8c00117 	ldw	r3,4(sp)
  8094e8:	d9000017 	ldw	r4,0(sp)
  8094ec:	1900010e 	bge	r3,r4,8094f4 <___vfiprintf_internal_r+0xc94>
  8094f0:	2007883a 	mov	r3,r4
  8094f4:	d9000617 	ldw	r4,24(sp)
  8094f8:	20c7883a 	add	r3,r4,r3
  8094fc:	d8c00615 	stw	r3,24(sp)
		FLUSH ();	/* copy out the I/O vectors */
  809500:	10002726 	beq	r2,zero,8095a0 <___vfiprintf_internal_r+0xd40>
	if (fp->_flags2 & __SWID) {
  809504:	a0c01917 	ldw	r3,100(r20)
  809508:	18c8000c 	andi	r3,r3,8192
  80950c:	1800e026 	beq	r3,zero,809890 <___vfiprintf_internal_r+0x1030>
		iov = uio->uio_iov;
  809510:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809514:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  809518:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  80951c:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  809520:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  809524:	98016026 	beq	r19,zero,809aa8 <___vfiprintf_internal_r+0x1248>
  809528:	002f883a 	mov	r23,zero
  80952c:	00000206 	br	809538 <___vfiprintf_internal_r+0xcd8>
  809530:	8c400104 	addi	r17,r17,4
  809534:	9dc15b26 	beq	r19,r23,809aa4 <___vfiprintf_internal_r+0x1244>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809538:	89400017 	ldw	r5,0(r17)
  80953c:	a00d883a 	mov	r6,r20
  809540:	8009883a 	mov	r4,r16
  809544:	080a8300 	call	80a830 <_fputwc_r>
  809548:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  80954c:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809550:	103ff726 	beq	r2,zero,809530 <___vfiprintf_internal_r+0xcd0>
  809554:	003db006 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  809558:	d9800d04 	addi	r6,sp,52
  80955c:	a00b883a 	mov	r5,r20
  809560:	8009883a 	mov	r4,r16
  809564:	08050ec0 	call	8050ec <__sfvwrite_r>
	uio->uio_resid = 0;
  809568:	d8000f15 	stw	zero,60(sp)
		PRINT (cp, size);
  80956c:	103daa1e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		if (flags & LADJUST)
  809570:	d8800317 	ldw	r2,12(sp)
  809574:	1080010c 	andi	r2,r2,4
  809578:	1000c126 	beq	r2,zero,809880 <___vfiprintf_internal_r+0x1020>
			PAD (width - realsz, blanks);
  80957c:	d8800117 	ldw	r2,4(sp)
  809580:	d8c00017 	ldw	r3,0(sp)
  809584:	10e5c83a 	sub	r18,r2,r3
  809588:	04814d16 	blt	zero,r18,809ac0 <___vfiprintf_internal_r+0x1260>
		ret += width > realsz ? width : realsz;
  80958c:	10c0010e 	bge	r2,r3,809594 <___vfiprintf_internal_r+0xd34>
  809590:	1805883a 	mov	r2,r3
  809594:	d8c00617 	ldw	r3,24(sp)
  809598:	1885883a 	add	r2,r3,r2
  80959c:	d8800615 	stw	r2,24(sp)
		FLUSH ();	/* copy out the I/O vectors */
  8095a0:	d8000e15 	stw	zero,56(sp)
  8095a4:	dc801a04 	addi	r18,sp,104
  8095a8:	003cd606 	br	808904 <___vfiprintf_internal_r+0xa4>
			PAD (width - realsz, zeroes);
  8095ac:	d9800117 	ldw	r6,4(sp)
  8095b0:	d9c00017 	ldw	r7,0(sp)
  8095b4:	31ebc83a 	sub	r21,r6,r7
  8095b8:	057f790e 	bge	zero,r21,8093a0 <___vfiprintf_internal_r+0xb40>
  8095bc:	a9800450 	cmplti	r6,r21,17
  8095c0:	05802074 	movhi	r22,129
  8095c4:	3002b91e 	bne	r6,zero,80a0ac <___vfiprintf_internal_r+0x184c>
  8095c8:	b5863104 	addi	r22,r22,6340
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  8095cc:	dcc00815 	stw	r19,32(sp)
  8095d0:	00000606 	br	8095ec <___vfiprintf_internal_r+0xd8c>
			PAD (width - realsz, zeroes);
  8095d4:	11800084 	addi	r6,r2,2
  8095d8:	94800204 	addi	r18,r18,8
  8095dc:	2005883a 	mov	r2,r4
  8095e0:	ad7ffc04 	addi	r21,r21,-16
  8095e4:	a9000448 	cmpgei	r4,r21,17
  8095e8:	20002926 	beq	r4,zero,809690 <___vfiprintf_internal_r+0xe30>
  8095ec:	11000044 	addi	r4,r2,1
  8095f0:	01400404 	movi	r5,16
  8095f4:	18c00404 	addi	r3,r3,16
  8095f8:	91400115 	stw	r5,4(r18)
  8095fc:	95800015 	stw	r22,0(r18)
  809600:	d8c00f15 	stw	r3,60(sp)
  809604:	d9000e15 	stw	r4,56(sp)
  809608:	21400208 	cmpgei	r5,r4,8
  80960c:	283ff126 	beq	r5,zero,8095d4 <___vfiprintf_internal_r+0xd74>
	if (uio->uio_resid == 0) {
  809610:	18004426 	beq	r3,zero,809724 <___vfiprintf_internal_r+0xec4>
	if (fp->_flags2 & __SWID) {
  809614:	a0801917 	ldw	r2,100(r20)
  809618:	1088000c 	andi	r2,r2,8192
  80961c:	10001126 	beq	r2,zero,809664 <___vfiprintf_internal_r+0xe04>
		iov = uio->uio_iov;
  809620:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  809624:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  809628:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  80962c:	b826d0ba 	srli	r19,r23,2
			for (i = 0; i < len; i++) {
  809630:	98003626 	beq	r19,zero,80970c <___vfiprintf_internal_r+0xeac>
  809634:	0039883a 	mov	fp,zero
  809638:	00000206 	br	809644 <___vfiprintf_internal_r+0xde4>
  80963c:	8c400104 	addi	r17,r17,4
  809640:	9f003126 	beq	r19,fp,809708 <___vfiprintf_internal_r+0xea8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809644:	89400017 	ldw	r5,0(r17)
  809648:	a00d883a 	mov	r6,r20
  80964c:	8009883a 	mov	r4,r16
  809650:	080a8300 	call	80a830 <_fputwc_r>
  809654:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809658:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  80965c:	103ff726 	beq	r2,zero,80963c <___vfiprintf_internal_r+0xddc>
  809660:	003d6d06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  809664:	d9800d04 	addi	r6,sp,52
  809668:	a00b883a 	mov	r5,r20
  80966c:	8009883a 	mov	r4,r16
  809670:	08050ec0 	call	8050ec <__sfvwrite_r>
			PAD (width - realsz, zeroes);
  809674:	103d681e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  809678:	ad7ffc04 	addi	r21,r21,-16
  80967c:	a9000448 	cmpgei	r4,r21,17
  809680:	01800044 	movi	r6,1
  809684:	0007883a 	mov	r3,zero
  809688:	dc801a04 	addi	r18,sp,104
  80968c:	203fd71e 	bne	r4,zero,8095ec <___vfiprintf_internal_r+0xd8c>
  809690:	dcc00817 	ldw	r19,32(sp)
  809694:	91c00204 	addi	r7,r18,8
  809698:	1d47883a 	add	r3,r3,r21
  80969c:	95800015 	stw	r22,0(r18)
  8096a0:	95400115 	stw	r21,4(r18)
  8096a4:	d8c00f15 	stw	r3,60(sp)
  8096a8:	d9800e15 	stw	r6,56(sp)
  8096ac:	30800208 	cmpgei	r2,r6,8
  8096b0:	1001de26 	beq	r2,zero,809e2c <___vfiprintf_internal_r+0x15cc>
	if (uio->uio_resid == 0) {
  8096b4:	18021f26 	beq	r3,zero,809f34 <___vfiprintf_internal_r+0x16d4>
	if (fp->_flags2 & __SWID) {
  8096b8:	a0801917 	ldw	r2,100(r20)
  8096bc:	1088000c 	andi	r2,r2,8192
  8096c0:	10021726 	beq	r2,zero,809f20 <___vfiprintf_internal_r+0x16c0>
		iov = uio->uio_iov;
  8096c4:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  8096c8:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  8096cc:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  8096d0:	b82ad0ba 	srli	r21,r23,2
			for (i = 0; i < len; i++) {
  8096d4:	a8025526 	beq	r21,zero,80a02c <___vfiprintf_internal_r+0x17cc>
  8096d8:	0039883a 	mov	fp,zero
  8096dc:	00000206 	br	8096e8 <___vfiprintf_internal_r+0xe88>
  8096e0:	8c400104 	addi	r17,r17,4
  8096e4:	af025026 	beq	r21,fp,80a028 <___vfiprintf_internal_r+0x17c8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8096e8:	89400017 	ldw	r5,0(r17)
  8096ec:	a00d883a 	mov	r6,r20
  8096f0:	8009883a 	mov	r4,r16
  8096f4:	080a8300 	call	80a830 <_fputwc_r>
  8096f8:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  8096fc:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809700:	103ff726 	beq	r2,zero,8096e0 <___vfiprintf_internal_r+0xe80>
  809704:	003d4406 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809708:	d8c00f17 	ldw	r3,60(sp)
  80970c:	00bfff04 	movi	r2,-4
  809710:	b8ae703a 	and	r23,r23,r2
  809714:	1dc7c83a 	sub	r3,r3,r23
  809718:	d8c00f15 	stw	r3,60(sp)
  80971c:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809720:	183fc01e 	bne	r3,zero,809624 <___vfiprintf_internal_r+0xdc4>
	uio->uio_iovcnt = 0;
  809724:	01800044 	movi	r6,1
  809728:	0005883a 	mov	r2,zero
			PAD (width - realsz, zeroes);
  80972c:	dc801a04 	addi	r18,sp,104
  809730:	003fab06 	br	8095e0 <___vfiprintf_internal_r+0xd80>
  809734:	05802074 	movhi	r22,129
  809738:	b5863104 	addi	r22,r22,6340
		PAD (dprec - size, zeroes);
  80973c:	a9800450 	cmplti	r6,r21,17
  809740:	3002371e 	bne	r6,zero,80a020 <___vfiprintf_internal_r+0x17c0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809744:	dcc00415 	stw	r19,16(sp)
  809748:	00000606 	br	809764 <___vfiprintf_internal_r+0xf04>
		PAD (dprec - size, zeroes);
  80974c:	11000084 	addi	r4,r2,2
  809750:	94800204 	addi	r18,r18,8
  809754:	2805883a 	mov	r2,r5
  809758:	ad7ffc04 	addi	r21,r21,-16
  80975c:	a9400448 	cmpgei	r5,r21,17
  809760:	28002926 	beq	r5,zero,809808 <___vfiprintf_internal_r+0xfa8>
  809764:	11400044 	addi	r5,r2,1
  809768:	01000404 	movi	r4,16
  80976c:	18c00404 	addi	r3,r3,16
  809770:	91000115 	stw	r4,4(r18)
  809774:	95800015 	stw	r22,0(r18)
  809778:	d8c00f15 	stw	r3,60(sp)
  80977c:	d9400e15 	stw	r5,56(sp)
  809780:	29000208 	cmpgei	r4,r5,8
  809784:	203ff126 	beq	r4,zero,80974c <___vfiprintf_internal_r+0xeec>
	if (uio->uio_resid == 0) {
  809788:	18003326 	beq	r3,zero,809858 <___vfiprintf_internal_r+0xff8>
	if (fp->_flags2 & __SWID) {
  80978c:	a0801917 	ldw	r2,100(r20)
  809790:	1088000c 	andi	r2,r2,8192
  809794:	10001126 	beq	r2,zero,8097dc <___vfiprintf_internal_r+0xf7c>
		iov = uio->uio_iov;
  809798:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  80979c:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  8097a0:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  8097a4:	b826d0ba 	srli	r19,r23,2
			for (i = 0; i < len; i++) {
  8097a8:	98002526 	beq	r19,zero,809840 <___vfiprintf_internal_r+0xfe0>
  8097ac:	0039883a 	mov	fp,zero
  8097b0:	00000206 	br	8097bc <___vfiprintf_internal_r+0xf5c>
  8097b4:	8c400104 	addi	r17,r17,4
  8097b8:	9f002026 	beq	r19,fp,80983c <___vfiprintf_internal_r+0xfdc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8097bc:	89400017 	ldw	r5,0(r17)
  8097c0:	a00d883a 	mov	r6,r20
  8097c4:	8009883a 	mov	r4,r16
  8097c8:	080a8300 	call	80a830 <_fputwc_r>
  8097cc:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  8097d0:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8097d4:	103ff726 	beq	r2,zero,8097b4 <___vfiprintf_internal_r+0xf54>
  8097d8:	003d0f06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  8097dc:	d9800d04 	addi	r6,sp,52
  8097e0:	a00b883a 	mov	r5,r20
  8097e4:	8009883a 	mov	r4,r16
  8097e8:	08050ec0 	call	8050ec <__sfvwrite_r>
		PAD (dprec - size, zeroes);
  8097ec:	103d0a1e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  8097f0:	ad7ffc04 	addi	r21,r21,-16
  8097f4:	a9400448 	cmpgei	r5,r21,17
  8097f8:	01000044 	movi	r4,1
  8097fc:	0007883a 	mov	r3,zero
  809800:	dc801a04 	addi	r18,sp,104
  809804:	283fd71e 	bne	r5,zero,809764 <___vfiprintf_internal_r+0xf04>
  809808:	dcc00417 	ldw	r19,16(sp)
  80980c:	91800204 	addi	r6,r18,8
  809810:	1d47883a 	add	r3,r3,r21
  809814:	95800015 	stw	r22,0(r18)
  809818:	95400115 	stw	r21,4(r18)
  80981c:	d8c00f15 	stw	r3,60(sp)
  809820:	d9000e15 	stw	r4,56(sp)
  809824:	20800208 	cmpgei	r2,r4,8
  809828:	1001071e 	bne	r2,zero,809c48 <___vfiprintf_internal_r+0x13e8>
		PRINT (cp, size);
  80982c:	21000044 	addi	r4,r4,1
  809830:	31400204 	addi	r5,r6,8
		PAD (dprec - size, zeroes);
  809834:	3025883a 	mov	r18,r6
  809838:	003edd06 	br	8093b0 <___vfiprintf_internal_r+0xb50>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80983c:	d8c00f17 	ldw	r3,60(sp)
  809840:	00bfff04 	movi	r2,-4
  809844:	b8ae703a 	and	r23,r23,r2
  809848:	1dc7c83a 	sub	r3,r3,r23
  80984c:	d8c00f15 	stw	r3,60(sp)
  809850:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809854:	183fd11e 	bne	r3,zero,80979c <___vfiprintf_internal_r+0xf3c>
	uio->uio_iovcnt = 0;
  809858:	01000044 	movi	r4,1
  80985c:	0005883a 	mov	r2,zero
		PAD (dprec - size, zeroes);
  809860:	dc801a04 	addi	r18,sp,104
  809864:	003fbc06 	br	809758 <___vfiprintf_internal_r+0xef8>
		err = __sfvwrite_r(ptr, fp, uio);
  809868:	d9800d04 	addi	r6,sp,52
  80986c:	a00b883a 	mov	r5,r20
  809870:	8009883a 	mov	r4,r16
  809874:	08050ec0 	call	8050ec <__sfvwrite_r>
	uio->uio_resid = 0;
  809878:	d8000f15 	stw	zero,60(sp)
			PAD (width - realsz, blanks);
  80987c:	103ce61e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		ret += width > realsz ? width : realsz;
  809880:	d8800117 	ldw	r2,4(sp)
  809884:	d8c00017 	ldw	r3,0(sp)
  809888:	10ff420e 	bge	r2,r3,809594 <___vfiprintf_internal_r+0xd34>
  80988c:	003f4006 	br	809590 <___vfiprintf_internal_r+0xd30>
		err = __sfvwrite_r(ptr, fp, uio);
  809890:	d9800d04 	addi	r6,sp,52
  809894:	a00b883a 	mov	r5,r20
  809898:	8009883a 	mov	r4,r16
  80989c:	08050ec0 	call	8050ec <__sfvwrite_r>
	uio->uio_resid = 0;
  8098a0:	d8000f15 	stw	zero,60(sp)
		FLUSH ();	/* copy out the I/O vectors */
  8098a4:	103cdc1e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  8098a8:	d8000e15 	stw	zero,56(sp)
  8098ac:	dc801a04 	addi	r18,sp,104
  8098b0:	003c1406 	br	808904 <___vfiprintf_internal_r+0xa4>
		err = __sfvwrite_r(ptr, fp, uio);
  8098b4:	d9800d04 	addi	r6,sp,52
  8098b8:	a00b883a 	mov	r5,r20
  8098bc:	8009883a 	mov	r4,r16
  8098c0:	08050ec0 	call	8050ec <__sfvwrite_r>
			PRINT (&sign, 1);
  8098c4:	103cd41e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		if (flags & HEXPREFIX)
  8098c8:	d8800917 	ldw	r2,36(sp)
  8098cc:	103ead26 	beq	r2,zero,809384 <___vfiprintf_internal_r+0xb24>
			PRINT (ox, 2);
  8098d0:	d8800c84 	addi	r2,sp,50
  8098d4:	d8801a15 	stw	r2,104(sp)
  8098d8:	00800084 	movi	r2,2
  8098dc:	d8801b15 	stw	r2,108(sp)
  8098e0:	dc801c04 	addi	r18,sp,112
  8098e4:	00800044 	movi	r2,1
  8098e8:	00c00084 	movi	r3,2
		PRINT (cp, size);
  8098ec:	11000044 	addi	r4,r2,1
  8098f0:	91400204 	addi	r5,r18,8
  8098f4:	003ea706 	br	809394 <___vfiprintf_internal_r+0xb34>
  8098f8:	202d883a 	mov	r22,r4
  8098fc:	003dc306 	br	80900c <___vfiprintf_internal_r+0x7ac>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809900:	d8800f17 	ldw	r2,60(sp)
  809904:	b56c703a 	and	r22,r22,r21
  809908:	1585c83a 	sub	r2,r2,r22
  80990c:	d8800f15 	stw	r2,60(sp)
  809910:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809914:	103eb41e 	bne	r2,zero,8093e8 <___vfiprintf_internal_r+0xb88>
  809918:	003f1506 	br	809570 <___vfiprintf_internal_r+0xd10>
			cp = buf + BUF;
  80991c:	dcc01a04 	addi	r19,sp,104
					  *--cp = to_char (_uquad % 10);
  809920:	8809883a 	mov	r4,r17
  809924:	b80b883a 	mov	r5,r23
  809928:	01800284 	movi	r6,10
  80992c:	000f883a 	mov	r7,zero
  809930:	080bc700 	call	80bc70 <__umoddi3>
  809934:	10800c04 	addi	r2,r2,48
					  _uquad /= 10;
  809938:	8809883a 	mov	r4,r17
  80993c:	b80b883a 	mov	r5,r23
					  *--cp = to_char (_uquad % 10);
  809940:	98bfffc5 	stb	r2,-1(r19)
					  _uquad /= 10;
  809944:	01800284 	movi	r6,10
  809948:	000f883a 	mov	r7,zero
  80994c:	080b6500 	call	80b650 <__udivdi3>
  809950:	b809883a 	mov	r4,r23
  809954:	880b883a 	mov	r5,r17
					  *--cp = to_char (_uquad % 10);
  809958:	9cffffc4 	addi	r19,r19,-1
					  _uquad /= 10;
  80995c:	1023883a 	mov	r17,r2
  809960:	182f883a 	mov	r23,r3
					} while (_uquad != 0);
  809964:	203fee1e 	bne	r4,zero,809920 <___vfiprintf_internal_r+0x10c0>
  809968:	294002a8 	cmpgeui	r5,r5,10
  80996c:	283fec1e 	bne	r5,zero,809920 <___vfiprintf_internal_r+0x10c0>
  809970:	003db706 	br	809050 <___vfiprintf_internal_r+0x7f0>
			PAD (width - realsz, blanks);
  809974:	a9000450 	cmplti	r4,r21,17
  809978:	07002074 	movhi	fp,129
  80997c:	2001c01e 	bne	r4,zero,80a080 <___vfiprintf_internal_r+0x1820>
  809980:	e7063504 	addi	fp,fp,6356
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809984:	dcc00b15 	stw	r19,44(sp)
  809988:	00000706 	br	8099a8 <___vfiprintf_internal_r+0x1148>
			PAD (width - realsz, blanks);
  80998c:	11800084 	addi	r6,r2,2
  809990:	94800204 	addi	r18,r18,8
  809994:	2805883a 	mov	r2,r5
  809998:	ad7ffc04 	addi	r21,r21,-16
  80999c:	a9000448 	cmpgei	r4,r21,17
  8099a0:	20002926 	beq	r4,zero,809a48 <___vfiprintf_internal_r+0x11e8>
  8099a4:	11400044 	addi	r5,r2,1
  8099a8:	01000404 	movi	r4,16
  8099ac:	18c00404 	addi	r3,r3,16
  8099b0:	91000115 	stw	r4,4(r18)
  8099b4:	97000015 	stw	fp,0(r18)
  8099b8:	d8c00f15 	stw	r3,60(sp)
  8099bc:	d9400e15 	stw	r5,56(sp)
  8099c0:	29000208 	cmpgei	r4,r5,8
  8099c4:	203ff126 	beq	r4,zero,80998c <___vfiprintf_internal_r+0x112c>
	if (uio->uio_resid == 0) {
  8099c8:	18003226 	beq	r3,zero,809a94 <___vfiprintf_internal_r+0x1234>
	if (fp->_flags2 & __SWID) {
  8099cc:	a0801917 	ldw	r2,100(r20)
  8099d0:	1088000c 	andi	r2,r2,8192
  8099d4:	10001126 	beq	r2,zero,809a1c <___vfiprintf_internal_r+0x11bc>
		iov = uio->uio_iov;
  8099d8:	dc800d17 	ldw	r18,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  8099dc:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  8099e0:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  8099e4:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  8099e8:	98002426 	beq	r19,zero,809a7c <___vfiprintf_internal_r+0x121c>
  8099ec:	002f883a 	mov	r23,zero
  8099f0:	00000206 	br	8099fc <___vfiprintf_internal_r+0x119c>
  8099f4:	8c400104 	addi	r17,r17,4
  8099f8:	9dc01f26 	beq	r19,r23,809a78 <___vfiprintf_internal_r+0x1218>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  8099fc:	89400017 	ldw	r5,0(r17)
  809a00:	a00d883a 	mov	r6,r20
  809a04:	8009883a 	mov	r4,r16
  809a08:	080a8300 	call	80a830 <_fputwc_r>
  809a0c:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809a10:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809a14:	103ff726 	beq	r2,zero,8099f4 <___vfiprintf_internal_r+0x1194>
  809a18:	003c7f06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  809a1c:	d9800d04 	addi	r6,sp,52
  809a20:	a00b883a 	mov	r5,r20
  809a24:	8009883a 	mov	r4,r16
  809a28:	08050ec0 	call	8050ec <__sfvwrite_r>
			PAD (width - realsz, blanks);
  809a2c:	103c7a1e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  809a30:	ad7ffc04 	addi	r21,r21,-16
  809a34:	a9000448 	cmpgei	r4,r21,17
  809a38:	01800044 	movi	r6,1
  809a3c:	0007883a 	mov	r3,zero
  809a40:	dc801a04 	addi	r18,sp,104
  809a44:	203fd71e 	bne	r4,zero,8099a4 <___vfiprintf_internal_r+0x1144>
  809a48:	dcc00b17 	ldw	r19,44(sp)
  809a4c:	1d47883a 	add	r3,r3,r21
  809a50:	97000015 	stw	fp,0(r18)
  809a54:	95400115 	stw	r21,4(r18)
  809a58:	d8c00f15 	stw	r3,60(sp)
  809a5c:	d9800e15 	stw	r6,56(sp)
  809a60:	30800208 	cmpgei	r2,r6,8
  809a64:	1000d21e 	bne	r2,zero,809db0 <___vfiprintf_internal_r+0x1550>
  809a68:	94800204 	addi	r18,r18,8
			PRINT (&sign, 1);
  809a6c:	31000044 	addi	r4,r6,1
  809a70:	3005883a 	mov	r2,r6
  809a74:	003c4706 	br	808b94 <___vfiprintf_internal_r+0x334>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809a78:	d8c00f17 	ldw	r3,60(sp)
  809a7c:	00bfff04 	movi	r2,-4
  809a80:	b0ac703a 	and	r22,r22,r2
  809a84:	1d87c83a 	sub	r3,r3,r22
  809a88:	d8c00f15 	stw	r3,60(sp)
  809a8c:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809a90:	183fd21e 	bne	r3,zero,8099dc <___vfiprintf_internal_r+0x117c>
	uio->uio_iovcnt = 0;
  809a94:	0005883a 	mov	r2,zero
  809a98:	01800044 	movi	r6,1
			PAD (width - realsz, blanks);
  809a9c:	dc801a04 	addi	r18,sp,104
  809aa0:	003fbd06 	br	809998 <___vfiprintf_internal_r+0x1138>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809aa4:	d8800f17 	ldw	r2,60(sp)
  809aa8:	b56c703a 	and	r22,r22,r21
  809aac:	1585c83a 	sub	r2,r2,r22
  809ab0:	d8800f15 	stw	r2,60(sp)
  809ab4:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809ab8:	103e971e 	bne	r2,zero,809518 <___vfiprintf_internal_r+0xcb8>
  809abc:	003eb806 	br	8095a0 <___vfiprintf_internal_r+0xd40>
			PAD (width - realsz, blanks);
  809ac0:	0009883a 	mov	r4,zero
  809ac4:	0005883a 	mov	r2,zero
  809ac8:	d9401a04 	addi	r5,sp,104
  809acc:	90c00450 	cmplti	r3,r18,17
  809ad0:	07002074 	movhi	fp,129
  809ad4:	1801721e 	bne	r3,zero,80a0a0 <___vfiprintf_internal_r+0x1840>
  809ad8:	e7063504 	addi	fp,fp,6356
  809adc:	05800404 	movi	r22,16
  809ae0:	00000606 	br	809afc <___vfiprintf_internal_r+0x129c>
  809ae4:	21800084 	addi	r6,r4,2
  809ae8:	29400204 	addi	r5,r5,8
  809aec:	1809883a 	mov	r4,r3
  809af0:	94bffc04 	addi	r18,r18,-16
  809af4:	90c00448 	cmpgei	r3,r18,17
  809af8:	18002a26 	beq	r3,zero,809ba4 <___vfiprintf_internal_r+0x1344>
  809afc:	20c00044 	addi	r3,r4,1
  809b00:	10800404 	addi	r2,r2,16
  809b04:	2f000015 	stw	fp,0(r5)
  809b08:	2d800115 	stw	r22,4(r5)
  809b0c:	d8800f15 	stw	r2,60(sp)
  809b10:	d8c00e15 	stw	r3,56(sp)
  809b14:	19800220 	cmpeqi	r6,r3,8
  809b18:	303ff226 	beq	r6,zero,809ae4 <___vfiprintf_internal_r+0x1284>
	if (uio->uio_resid == 0) {
  809b1c:	10004626 	beq	r2,zero,809c38 <___vfiprintf_internal_r+0x13d8>
	if (fp->_flags2 & __SWID) {
  809b20:	a0c01917 	ldw	r3,100(r20)
  809b24:	18c8000c 	andi	r3,r3,8192
  809b28:	18001226 	beq	r3,zero,809b74 <___vfiprintf_internal_r+0x1314>
		iov = uio->uio_iov;
  809b2c:	dcc00d17 	ldw	r19,52(sp)
			len = iov->iov_len / sizeof (wchar_t);
  809b30:	98c00117 	ldw	r3,4(r19)
			p = (wchar_t *) iov->iov_base;
  809b34:	9dc00017 	ldw	r23,0(r19)
			len = iov->iov_len / sizeof (wchar_t);
  809b38:	1822d0ba 	srli	r17,r3,2
  809b3c:	d8c00315 	stw	r3,12(sp)
			for (i = 0; i < len; i++) {
  809b40:	88003626 	beq	r17,zero,809c1c <___vfiprintf_internal_r+0x13bc>
  809b44:	002b883a 	mov	r21,zero
  809b48:	00000206 	br	809b54 <___vfiprintf_internal_r+0x12f4>
  809b4c:	bdc00104 	addi	r23,r23,4
  809b50:	8d403126 	beq	r17,r21,809c18 <___vfiprintf_internal_r+0x13b8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809b54:	b9400017 	ldw	r5,0(r23)
  809b58:	a00d883a 	mov	r6,r20
  809b5c:	8009883a 	mov	r4,r16
  809b60:	080a8300 	call	80a830 <_fputwc_r>
  809b64:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809b68:	ad400044 	addi	r21,r21,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809b6c:	103ff726 	beq	r2,zero,809b4c <___vfiprintf_internal_r+0x12ec>
  809b70:	003c2906 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  809b74:	8009883a 	mov	r4,r16
  809b78:	d9800d04 	addi	r6,sp,52
  809b7c:	a00b883a 	mov	r5,r20
  809b80:	08050ec0 	call	8050ec <__sfvwrite_r>
  809b84:	1009883a 	mov	r4,r2
			PAD (width - realsz, blanks);
  809b88:	103c231e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
  809b8c:	94bffc04 	addi	r18,r18,-16
  809b90:	90c00448 	cmpgei	r3,r18,17
  809b94:	01800044 	movi	r6,1
  809b98:	0005883a 	mov	r2,zero
  809b9c:	d9401a04 	addi	r5,sp,104
  809ba0:	183fd61e 	bne	r3,zero,809afc <___vfiprintf_internal_r+0x129c>
  809ba4:	1485883a 	add	r2,r2,r18
  809ba8:	d9800e15 	stw	r6,56(sp)
  809bac:	2f000015 	stw	fp,0(r5)
  809bb0:	2c800115 	stw	r18,4(r5)
  809bb4:	d8800f15 	stw	r2,60(sp)
  809bb8:	31800218 	cmpnei	r6,r6,8
  809bbc:	303e491e 	bne	r6,zero,8094e4 <___vfiprintf_internal_r+0xc84>
	if (uio->uio_resid == 0) {
  809bc0:	103f2f26 	beq	r2,zero,809880 <___vfiprintf_internal_r+0x1020>
	if (fp->_flags2 & __SWID) {
  809bc4:	a0c01917 	ldw	r3,100(r20)
  809bc8:	18c8000c 	andi	r3,r3,8192
  809bcc:	183f2626 	beq	r3,zero,809868 <___vfiprintf_internal_r+0x1008>
		iov = uio->uio_iov;
  809bd0:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809bd4:	057fff04 	movi	r21,-4
			len = iov->iov_len / sizeof (wchar_t);
  809bd8:	95800117 	ldw	r22,4(r18)
			p = (wchar_t *) iov->iov_base;
  809bdc:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  809be0:	b026d0ba 	srli	r19,r22,2
			for (i = 0; i < len; i++) {
  809be4:	9800f526 	beq	r19,zero,809fbc <___vfiprintf_internal_r+0x175c>
  809be8:	002f883a 	mov	r23,zero
  809bec:	00000206 	br	809bf8 <___vfiprintf_internal_r+0x1398>
  809bf0:	8c400104 	addi	r17,r17,4
  809bf4:	9dc0f026 	beq	r19,r23,809fb8 <___vfiprintf_internal_r+0x1758>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809bf8:	89400017 	ldw	r5,0(r17)
  809bfc:	a00d883a 	mov	r6,r20
  809c00:	8009883a 	mov	r4,r16
  809c04:	080a8300 	call	80a830 <_fputwc_r>
  809c08:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809c0c:	bdc00044 	addi	r23,r23,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809c10:	103ff726 	beq	r2,zero,809bf0 <___vfiprintf_internal_r+0x1390>
  809c14:	003c0006 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809c18:	d8800f17 	ldw	r2,60(sp)
  809c1c:	d8c00317 	ldw	r3,12(sp)
  809c20:	013fff04 	movi	r4,-4
  809c24:	9cc00204 	addi	r19,r19,8
  809c28:	192a703a 	and	r21,r3,r4
  809c2c:	1545c83a 	sub	r2,r2,r21
  809c30:	d8800f15 	stw	r2,60(sp)
		for (; uio->uio_resid != 0;
  809c34:	103fbe1e 	bne	r2,zero,809b30 <___vfiprintf_internal_r+0x12d0>
	uio->uio_iovcnt = 0;
  809c38:	01800044 	movi	r6,1
  809c3c:	0009883a 	mov	r4,zero
			PAD (width - realsz, blanks);
  809c40:	d9401a04 	addi	r5,sp,104
  809c44:	003faa06 	br	809af0 <___vfiprintf_internal_r+0x1290>
	if (uio->uio_resid == 0) {
  809c48:	183e1726 	beq	r3,zero,8094a8 <___vfiprintf_internal_r+0xc48>
	if (fp->_flags2 & __SWID) {
  809c4c:	a0801917 	ldw	r2,100(r20)
  809c50:	1088000c 	andi	r2,r2,8192
  809c54:	103e0f26 	beq	r2,zero,809494 <___vfiprintf_internal_r+0xc34>
		iov = uio->uio_iov;
  809c58:	dc800d17 	ldw	r18,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809c5c:	05bfff04 	movi	r22,-4
			len = iov->iov_len / sizeof (wchar_t);
  809c60:	95c00117 	ldw	r23,4(r18)
			p = (wchar_t *) iov->iov_base;
  809c64:	94400017 	ldw	r17,0(r18)
			len = iov->iov_len / sizeof (wchar_t);
  809c68:	b82ad0ba 	srli	r21,r23,2
			for (i = 0; i < len; i++) {
  809c6c:	a8006726 	beq	r21,zero,809e0c <___vfiprintf_internal_r+0x15ac>
  809c70:	0039883a 	mov	fp,zero
  809c74:	00000206 	br	809c80 <___vfiprintf_internal_r+0x1420>
  809c78:	8c400104 	addi	r17,r17,4
  809c7c:	af006226 	beq	r21,fp,809e08 <___vfiprintf_internal_r+0x15a8>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809c80:	89400017 	ldw	r5,0(r17)
  809c84:	a00d883a 	mov	r6,r20
  809c88:	8009883a 	mov	r4,r16
  809c8c:	080a8300 	call	80a830 <_fputwc_r>
  809c90:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809c94:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809c98:	103ff726 	beq	r2,zero,809c78 <___vfiprintf_internal_r+0x1418>
  809c9c:	003bde06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
			PRINT (ox, 2);
  809ca0:	d8800c84 	addi	r2,sp,50
  809ca4:	d8801a15 	stw	r2,104(sp)
  809ca8:	00800084 	movi	r2,2
  809cac:	d8801b15 	stw	r2,108(sp)
			PRINT (&sign, 1);
  809cb0:	d9401c04 	addi	r5,sp,112
			PRINT (ox, 2);
  809cb4:	01000044 	movi	r4,1
  809cb8:	00c00084 	movi	r3,2
  809cbc:	2825883a 	mov	r18,r5
  809cc0:	2005883a 	mov	r2,r4
  809cc4:	003f0906 	br	8098ec <___vfiprintf_internal_r+0x108c>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809cc8:	d9000f17 	ldw	r4,60(sp)
  809ccc:	00bfff04 	movi	r2,-4
  809cd0:	b0ac703a 	and	r22,r22,r2
  809cd4:	2589c83a 	sub	r4,r4,r22
  809cd8:	d9000f15 	stw	r4,60(sp)
  809cdc:	9cc00204 	addi	r19,r19,8
		for (; uio->uio_resid != 0;
  809ce0:	203c261e 	bne	r4,zero,808d7c <___vfiprintf_internal_r+0x51c>
	uio->uio_iovcnt = 0;
  809ce4:	b8800007 	ldb	r2,0(r23)
  809ce8:	d8000e15 	stw	zero,56(sp)
			PRINT (cp, m);
  809cec:	dc801a04 	addi	r18,sp,104
  809cf0:	003c0206 	br	808cfc <___vfiprintf_internal_r+0x49c>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809cf4:	d8c00f17 	ldw	r3,60(sp)
  809cf8:	b5ec703a 	and	r22,r22,r23
  809cfc:	1d87c83a 	sub	r3,r3,r22
  809d00:	d8c00f15 	stw	r3,60(sp)
  809d04:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809d08:	183bb41e 	bne	r3,zero,808bdc <___vfiprintf_internal_r+0x37c>
  809d0c:	003eee06 	br	8098c8 <___vfiprintf_internal_r+0x1068>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809d10:	d8c00f17 	ldw	r3,60(sp)
  809d14:	b5ec703a 	and	r22,r22,r23
  809d18:	1d87c83a 	sub	r3,r3,r22
  809d1c:	d8c00f15 	stw	r3,60(sp)
  809d20:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809d24:	183d821e 	bne	r3,zero,809330 <___vfiprintf_internal_r+0xad0>
	uio->uio_iovcnt = 0;
  809d28:	d9401c04 	addi	r5,sp,112
  809d2c:	01000044 	movi	r4,1
  809d30:	0005883a 	mov	r2,zero
			PRINT (ox, 2);
  809d34:	dc801a04 	addi	r18,sp,104
  809d38:	003d9606 	br	809394 <___vfiprintf_internal_r+0xb34>
			if (_uquad != 0 || prec != 0) {
  809d3c:	d8800417 	ldw	r2,16(sp)
  809d40:	1000ca1e 	bne	r2,zero,80a06c <___vfiprintf_internal_r+0x180c>
  809d44:	d8000515 	stw	zero,20(sp)
  809d48:	d8800517 	ldw	r2,20(sp)
  809d4c:	d8000415 	stw	zero,16(sp)
			cp = buf + BUF;
  809d50:	dcc01a04 	addi	r19,sp,104
  809d54:	003cc206 	br	809060 <___vfiprintf_internal_r+0x800>
			width = GET_ARG (n, ap, int);
  809d58:	d9000717 	ldw	r4,28(sp)
			_uquad = UARG ();
  809d5c:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  809d60:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  809d64:	1000401e 	bne	r2,zero,809e68 <___vfiprintf_internal_r+0x1608>
  809d68:	b080100c 	andi	r2,r22,64
  809d6c:	1000a726 	beq	r2,zero,80a00c <___vfiprintf_internal_r+0x17ac>
  809d70:	2440000b 	ldhu	r17,0(r4)
  809d74:	002f883a 	mov	r23,zero
  809d78:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  809d7c:	00800044 	movi	r2,1
  809d80:	003c5006 	br	808ec4 <___vfiprintf_internal_r+0x664>
			width = GET_ARG (n, ap, int);
  809d84:	d9000717 	ldw	r4,28(sp)
			_uquad = UARG ();
  809d88:	b080040c 	andi	r2,r22,16
			width = GET_ARG (n, ap, int);
  809d8c:	20c00104 	addi	r3,r4,4
			_uquad = UARG ();
  809d90:	10003f1e 	bne	r2,zero,809e90 <___vfiprintf_internal_r+0x1630>
  809d94:	b080100c 	andi	r2,r22,64
  809d98:	10009726 	beq	r2,zero,809ff8 <___vfiprintf_internal_r+0x1798>
  809d9c:	2440000b 	ldhu	r17,0(r4)
  809da0:	002f883a 	mov	r23,zero
  809da4:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  809da8:	0005883a 	mov	r2,zero
  809dac:	003c4506 	br	808ec4 <___vfiprintf_internal_r+0x664>
	if (uio->uio_resid == 0) {
  809db0:	183d4126 	beq	r3,zero,8092b8 <___vfiprintf_internal_r+0xa58>
	if (fp->_flags2 & __SWID) {
  809db4:	a0801917 	ldw	r2,100(r20)
  809db8:	1088000c 	andi	r2,r2,8192
  809dbc:	103d3926 	beq	r2,zero,8092a4 <___vfiprintf_internal_r+0xa44>
		iov = uio->uio_iov;
  809dc0:	dd400d17 	ldw	r21,52(sp)
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809dc4:	05ffff04 	movi	r23,-4
			len = iov->iov_len / sizeof (wchar_t);
  809dc8:	ad800117 	ldw	r22,4(r21)
			p = (wchar_t *) iov->iov_base;
  809dcc:	ac400017 	ldw	r17,0(r21)
			len = iov->iov_len / sizeof (wchar_t);
  809dd0:	b024d0ba 	srli	r18,r22,2
			for (i = 0; i < len; i++) {
  809dd4:	90006926 	beq	r18,zero,809f7c <___vfiprintf_internal_r+0x171c>
  809dd8:	0039883a 	mov	fp,zero
  809ddc:	00000206 	br	809de8 <___vfiprintf_internal_r+0x1588>
  809de0:	8c400104 	addi	r17,r17,4
  809de4:	97006426 	beq	r18,fp,809f78 <___vfiprintf_internal_r+0x1718>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809de8:	89400017 	ldw	r5,0(r17)
  809dec:	a00d883a 	mov	r6,r20
  809df0:	8009883a 	mov	r4,r16
  809df4:	080a8300 	call	80a830 <_fputwc_r>
  809df8:	10bfffe0 	cmpeqi	r2,r2,-1
			for (i = 0; i < len; i++) {
  809dfc:	e7000044 	addi	fp,fp,1
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
  809e00:	103ff726 	beq	r2,zero,809de0 <___vfiprintf_internal_r+0x1580>
  809e04:	003b8406 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809e08:	d8c00f17 	ldw	r3,60(sp)
  809e0c:	bdae703a 	and	r23,r23,r22
  809e10:	1dc7c83a 	sub	r3,r3,r23
  809e14:	d8c00f15 	stw	r3,60(sp)
  809e18:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809e1c:	183f901e 	bne	r3,zero,809c60 <___vfiprintf_internal_r+0x1400>
  809e20:	003da106 	br	8094a8 <___vfiprintf_internal_r+0xc48>
			cp = buf + BUF;
  809e24:	dcc01a04 	addi	r19,sp,104
  809e28:	003c8d06 	br	809060 <___vfiprintf_internal_r+0x800>
		PRINT (cp, size);
  809e2c:	31000044 	addi	r4,r6,1
  809e30:	39400204 	addi	r5,r7,8
  809e34:	3005883a 	mov	r2,r6
			PAD (width - realsz, zeroes);
  809e38:	3825883a 	mov	r18,r7
  809e3c:	003d5806 	br	8093a0 <___vfiprintf_internal_r+0xb40>
				ox[0] = '0';
  809e40:	00800c04 	movi	r2,48
  809e44:	d8800c85 	stb	r2,50(sp)
				ox[1] = ch;
  809e48:	d8c00cc5 	stb	r3,51(sp)
				flags |= HEXPREFIX;
  809e4c:	b5800094 	ori	r22,r22,2
			base = HEX;
  809e50:	00800084 	movi	r2,2
  809e54:	003c1b06 	br	808ec4 <___vfiprintf_internal_r+0x664>
hex:			_uquad = UARG ();
  809e58:	2c400017 	ldw	r17,0(r5)
  809e5c:	002f883a 	mov	r23,zero
  809e60:	d9000715 	stw	r4,28(sp)
  809e64:	003c1206 	br	808eb0 <___vfiprintf_internal_r+0x650>
			_uquad = UARG ();
  809e68:	24400017 	ldw	r17,0(r4)
  809e6c:	002f883a 	mov	r23,zero
  809e70:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  809e74:	00800044 	movi	r2,1
  809e78:	003c1206 	br	808ec4 <___vfiprintf_internal_r+0x664>
			_uquad = SARG ();
  809e7c:	24400017 	ldw	r17,0(r4)
  809e80:	d8c00715 	stw	r3,28(sp)
  809e84:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  809e88:	b805883a 	mov	r2,r23
  809e8c:	003be206 	br	808e18 <___vfiprintf_internal_r+0x5b8>
			_uquad = UARG ();
  809e90:	24400017 	ldw	r17,0(r4)
  809e94:	002f883a 	mov	r23,zero
  809e98:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  809e9c:	0005883a 	mov	r2,zero
  809ea0:	003c0806 	br	808ec4 <___vfiprintf_internal_r+0x664>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
  809ea4:	d9000617 	ldw	r4,24(sp)
  809ea8:	2005d7fa 	srai	r2,r4,31
  809eac:	19000015 	stw	r4,0(r3)
  809eb0:	18800115 	stw	r2,4(r3)
  809eb4:	003a9306 	br	808904 <___vfiprintf_internal_r+0xa4>
			width = -width;
  809eb8:	018dc83a 	sub	r6,zero,r6
  809ebc:	d9800115 	stw	r6,4(sp)
			width = GET_ARG (n, ap, int);
  809ec0:	d9000715 	stw	r4,28(sp)
  809ec4:	003c8906 	br	8090ec <___vfiprintf_internal_r+0x88c>
		if (flags & HEXPREFIX)
  809ec8:	d8800917 	ldw	r2,36(sp)
  809ecc:	103f741e 	bne	r2,zero,809ca0 <___vfiprintf_internal_r+0x1440>
			PRINT (&sign, 1);
  809ed0:	d9401c04 	addi	r5,sp,112
		if (flags & HEXPREFIX)
  809ed4:	01000044 	movi	r4,1
  809ed8:	0007883a 	mov	r3,zero
  809edc:	dc801a04 	addi	r18,sp,104
  809ee0:	003d2f06 	br	8093a0 <___vfiprintf_internal_r+0xb40>
				size = strlen (cp);
  809ee4:	9809883a 	mov	r4,r19
  809ee8:	08008880 	call	800888 <strlen>
  809eec:	d8800515 	stw	r2,20(sp)
  809ef0:	d8800015 	stw	r2,0(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  809ef4:	dc400715 	stw	r17,28(sp)
  809ef8:	003b1006 	br	808b3c <___vfiprintf_internal_r+0x2dc>
  809efc:	d9c00415 	stw	r7,16(sp)
  809f00:	d8c00215 	stw	r3,8(sp)
  809f04:	003cc706 	br	809224 <___vfiprintf_internal_r+0x9c4>
  809f08:	d9c00415 	stw	r7,16(sp)
  809f0c:	d8c00215 	stw	r3,8(sp)
  809f10:	003cb806 	br	8091f4 <___vfiprintf_internal_r+0x994>
				*GET_ARG (N, ap, int_ptr_t) = ret;
  809f14:	d8800617 	ldw	r2,24(sp)
  809f18:	18800015 	stw	r2,0(r3)
  809f1c:	003a7906 	br	808904 <___vfiprintf_internal_r+0xa4>
		err = __sfvwrite_r(ptr, fp, uio);
  809f20:	d9800d04 	addi	r6,sp,52
  809f24:	a00b883a 	mov	r5,r20
  809f28:	8009883a 	mov	r4,r16
  809f2c:	08050ec0 	call	8050ec <__sfvwrite_r>
			PAD (width - realsz, zeroes);
  809f30:	103b391e 	bne	r2,zero,808c18 <___vfiprintf_internal_r+0x3b8>
		PAD (dprec - size, zeroes);
  809f34:	d8800417 	ldw	r2,16(sp)
  809f38:	d8c00517 	ldw	r3,20(sp)
  809f3c:	10ebc83a 	sub	r21,r2,r3
  809f40:	05404116 	blt	zero,r21,80a048 <___vfiprintf_internal_r+0x17e8>
  809f44:	1805883a 	mov	r2,r3
  809f48:	003d5806 	br	8094ac <___vfiprintf_internal_r+0xc4c>
rflag:		ch = *fmt++;
  809f4c:	18800043 	ldbu	r2,1(r3)
				flags |= QUADINT;
  809f50:	b5800814 	ori	r22,r22,32
				fmt++;
  809f54:	18c00044 	addi	r3,r3,1
  809f58:	10803fcc 	andi	r2,r2,255
  809f5c:	1080201c 	xori	r2,r2,128
  809f60:	10bfe004 	addi	r2,r2,-128
  809f64:	003a7a06 	br	808950 <___vfiprintf_internal_r+0xf0>
				switch (base) {
  809f68:	10c00060 	cmpeqi	r3,r2,1
  809f6c:	202d883a 	mov	r22,r4
  809f70:	183c2826 	beq	r3,zero,809014 <___vfiprintf_internal_r+0x7b4>
  809f74:	003bb606 	br	808e50 <___vfiprintf_internal_r+0x5f0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809f78:	d8c00f17 	ldw	r3,60(sp)
  809f7c:	b5ec703a 	and	r22,r22,r23
  809f80:	1d87c83a 	sub	r3,r3,r22
  809f84:	d8c00f15 	stw	r3,60(sp)
  809f88:	ad400204 	addi	r21,r21,8
		for (; uio->uio_resid != 0;
  809f8c:	183f8e1e 	bne	r3,zero,809dc8 <___vfiprintf_internal_r+0x1568>
  809f90:	003cc906 	br	8092b8 <___vfiprintf_internal_r+0xa58>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  809f94:	d9c00515 	stw	r7,20(sp)
  809f98:	388001f0 	cmpltui	r2,r7,7
  809f9c:	10003026 	beq	r2,zero,80a060 <___vfiprintf_internal_r+0x1800>
  809fa0:	d8800517 	ldw	r2,20(sp)
				cp = "(null)";
  809fa4:	04c02074 	movhi	r19,129
			cp = GET_ARG (N, ap, char_ptr_t);
  809fa8:	dc400715 	stw	r17,28(sp)
  809fac:	d8800015 	stw	r2,0(sp)
				cp = "(null)";
  809fb0:	9cc59c04 	addi	r19,r19,5744
  809fb4:	003ae106 	br	808b3c <___vfiprintf_internal_r+0x2dc>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  809fb8:	d8800f17 	ldw	r2,60(sp)
  809fbc:	b56c703a 	and	r22,r22,r21
  809fc0:	1585c83a 	sub	r2,r2,r22
  809fc4:	d8800f15 	stw	r2,60(sp)
  809fc8:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  809fcc:	103f021e 	bne	r2,zero,809bd8 <___vfiprintf_internal_r+0x1378>
  809fd0:	003e2b06 	br	809880 <___vfiprintf_internal_r+0x1020>
hex:			_uquad = UARG ();
  809fd4:	2c400017 	ldw	r17,0(r5)
  809fd8:	002f883a 	mov	r23,zero
  809fdc:	d9000715 	stw	r4,28(sp)
  809fe0:	003bb306 	br	808eb0 <___vfiprintf_internal_r+0x650>
			_uquad = SARG ();
  809fe4:	24400017 	ldw	r17,0(r4)
  809fe8:	d8c00715 	stw	r3,28(sp)
  809fec:	882fd7fa 	srai	r23,r17,31
			if ((quad_t)_uquad < 0)
  809ff0:	b805883a 	mov	r2,r23
  809ff4:	003b8806 	br	808e18 <___vfiprintf_internal_r+0x5b8>
			_uquad = UARG ();
  809ff8:	24400017 	ldw	r17,0(r4)
  809ffc:	002f883a 	mov	r23,zero
  80a000:	d8c00715 	stw	r3,28(sp)
			base = OCT;
  80a004:	0005883a 	mov	r2,zero
  80a008:	003bae06 	br	808ec4 <___vfiprintf_internal_r+0x664>
			_uquad = UARG ();
  80a00c:	24400017 	ldw	r17,0(r4)
  80a010:	002f883a 	mov	r23,zero
  80a014:	d8c00715 	stw	r3,28(sp)
			base = DEC;
  80a018:	00800044 	movi	r2,1
  80a01c:	003ba906 	br	808ec4 <___vfiprintf_internal_r+0x664>
		PAD (dprec - size, zeroes);
  80a020:	280d883a 	mov	r6,r5
  80a024:	003dfa06 	br	809810 <___vfiprintf_internal_r+0xfb0>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a028:	d8c00f17 	ldw	r3,60(sp)
  80a02c:	00bfff04 	movi	r2,-4
  80a030:	b8ae703a 	and	r23,r23,r2
  80a034:	1dc7c83a 	sub	r3,r3,r23
  80a038:	d8c00f15 	stw	r3,60(sp)
  80a03c:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80a040:	183da11e 	bne	r3,zero,8096c8 <___vfiprintf_internal_r+0xe68>
  80a044:	003fbb06 	br	809f34 <___vfiprintf_internal_r+0x16d4>
		PAD (dprec - size, zeroes);
  80a048:	d9401c04 	addi	r5,sp,112
  80a04c:	01000044 	movi	r4,1
  80a050:	0005883a 	mov	r2,zero
  80a054:	0007883a 	mov	r3,zero
  80a058:	dc801a04 	addi	r18,sp,104
  80a05c:	003db706 	br	80973c <___vfiprintf_internal_r+0xedc>
				size = ((unsigned) prec > 6U) ? 6 : prec;
  80a060:	00800184 	movi	r2,6
  80a064:	d8800515 	stw	r2,20(sp)
  80a068:	003fcd06 	br	809fa0 <___vfiprintf_internal_r+0x1740>
  80a06c:	182d883a 	mov	r22,r3
  80a070:	003b7706 	br	808e50 <___vfiprintf_internal_r+0x5f0>
			if ((ch = *fmt++) == '*') {
  80a074:	2007883a 	mov	r3,r4
			n = 0;
  80a078:	000f883a 	mov	r7,zero
  80a07c:	003a3506 	br	808954 <___vfiprintf_internal_r+0xf4>
			PAD (width - realsz, blanks);
  80a080:	280d883a 	mov	r6,r5
  80a084:	e7063504 	addi	fp,fp,6356
  80a088:	003e7006 	br	809a4c <___vfiprintf_internal_r+0x11ec>
  80a08c:	d8800417 	ldw	r2,16(sp)
			cp = GET_ARG (N, ap, char_ptr_t);
  80a090:	dc400715 	stw	r17,28(sp)
  80a094:	d8800015 	stw	r2,0(sp)
  80a098:	d8800515 	stw	r2,20(sp)
  80a09c:	003aa706 	br	808b3c <___vfiprintf_internal_r+0x2dc>
			PAD (width - realsz, blanks);
  80a0a0:	21800044 	addi	r6,r4,1
  80a0a4:	e7063504 	addi	fp,fp,6356
  80a0a8:	003ebe06 	br	809ba4 <___vfiprintf_internal_r+0x1344>
			PAD (width - realsz, zeroes);
  80a0ac:	280f883a 	mov	r7,r5
  80a0b0:	200d883a 	mov	r6,r4
  80a0b4:	b5863104 	addi	r22,r22,6340
  80a0b8:	003d7706 	br	809698 <___vfiprintf_internal_r+0xe38>
		return (EOF);
  80a0bc:	00bfffc4 	movi	r2,-1
  80a0c0:	d8800615 	stw	r2,24(sp)
  80a0c4:	003ad706 	br	808c24 <___vfiprintf_internal_r+0x3c4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
  80a0c8:	d8800f17 	ldw	r2,60(sp)
  80a0cc:	adea703a 	and	r21,r21,r23
  80a0d0:	1545c83a 	sub	r2,r2,r21
  80a0d4:	d8800f15 	stw	r2,60(sp)
  80a0d8:	94800204 	addi	r18,r18,8
		for (; uio->uio_resid != 0;
  80a0dc:	103b121e 	bne	r2,zero,808d28 <___vfiprintf_internal_r+0x4c8>
  80a0e0:	003acd06 	br	808c18 <___vfiprintf_internal_r+0x3b8>
		err = __sfvwrite_r(ptr, fp, uio);
  80a0e4:	d9800d04 	addi	r6,sp,52
  80a0e8:	a00b883a 	mov	r5,r20
  80a0ec:	8009883a 	mov	r4,r16
  80a0f0:	08050ec0 	call	8050ec <__sfvwrite_r>
	return (err);
  80a0f4:	003ac806 	br	808c18 <___vfiprintf_internal_r+0x3b8>
				prec = GET_ARG (n, ap, int);
  80a0f8:	d8800717 	ldw	r2,28(sp)
  80a0fc:	11c00017 	ldw	r7,0(r2)
  80a100:	11800104 	addi	r6,r2,4
				if (prec < 0)
  80a104:	3800010e 	bge	r7,zero,80a10c <___vfiprintf_internal_r+0x18ac>
  80a108:	01ffffc4 	movi	r7,-1
rflag:		ch = *fmt++;
  80a10c:	18800043 	ldbu	r2,1(r3)
				prec = GET_ARG (n, ap, int);
  80a110:	d9800715 	stw	r6,28(sp)
			if ((ch = *fmt++) == '*') {
  80a114:	2007883a 	mov	r3,r4
  80a118:	10803fcc 	andi	r2,r2,255
  80a11c:	1080201c 	xori	r2,r2,128
  80a120:	10bfe004 	addi	r2,r2,-128
				goto rflag;
  80a124:	003a0a06 	br	808950 <___vfiprintf_internal_r+0xf0>

0080a128 <__vfiprintf_internal>:
{
  80a128:	2005883a 	mov	r2,r4
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
  80a12c:	d1200917 	ldw	r4,-32732(gp)
  80a130:	300f883a 	mov	r7,r6
  80a134:	280d883a 	mov	r6,r5
  80a138:	100b883a 	mov	r5,r2
  80a13c:	08088601 	jmpi	808860 <___vfiprintf_internal_r>

0080a140 <__sbprintf>:
	fake._flags = fp->_flags & ~__SNBF;
  80a140:	2880030b 	ldhu	r2,12(r5)
	fake._flags2 = fp->_flags2;
  80a144:	2b001917 	ldw	r12,100(r5)
	fake._file = fp->_file;
  80a148:	2ac0038b 	ldhu	r11,14(r5)
	fake._cookie = fp->_cookie;
  80a14c:	2a800717 	ldw	r10,28(r5)
	fake._write = fp->_write;
  80a150:	2a400917 	ldw	r9,36(r5)
{
  80a154:	defee204 	addi	sp,sp,-1144
	fake._bf._base = fake._p = buf;
  80a158:	da001a04 	addi	r8,sp,104
	fake._bf._size = fake._w = sizeof (buf);
  80a15c:	00c10004 	movi	r3,1024
{
  80a160:	dc011a15 	stw	r16,1128(sp)
	fake._flags = fp->_flags & ~__SNBF;
  80a164:	10bfff4c 	andi	r2,r2,65533
{
  80a168:	2821883a 	mov	r16,r5
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80a16c:	d80b883a 	mov	r5,sp
{
  80a170:	dc811c15 	stw	r18,1136(sp)
  80a174:	dc411b15 	stw	r17,1132(sp)
  80a178:	dfc11d15 	stw	ra,1140(sp)
  80a17c:	2025883a 	mov	r18,r4
	fake._flags = fp->_flags & ~__SNBF;
  80a180:	d880030d 	sth	r2,12(sp)
	fake._flags2 = fp->_flags2;
  80a184:	db001915 	stw	r12,100(sp)
	fake._file = fp->_file;
  80a188:	dac0038d 	sth	r11,14(sp)
	fake._cookie = fp->_cookie;
  80a18c:	da800715 	stw	r10,28(sp)
	fake._write = fp->_write;
  80a190:	da400915 	stw	r9,36(sp)
	fake._bf._base = fake._p = buf;
  80a194:	da000015 	stw	r8,0(sp)
  80a198:	da000415 	stw	r8,16(sp)
	fake._bf._size = fake._w = sizeof (buf);
  80a19c:	d8c00215 	stw	r3,8(sp)
  80a1a0:	d8c00515 	stw	r3,20(sp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
  80a1a4:	d8000615 	stw	zero,24(sp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
  80a1a8:	08088600 	call	808860 <___vfiprintf_internal_r>
  80a1ac:	1023883a 	mov	r17,r2
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80a1b0:	10000d0e 	bge	r2,zero,80a1e8 <__sbprintf+0xa8>
	if (fake._flags & __SERR)
  80a1b4:	d880030b 	ldhu	r2,12(sp)
  80a1b8:	1080100c 	andi	r2,r2,64
  80a1bc:	10000326 	beq	r2,zero,80a1cc <__sbprintf+0x8c>
		fp->_flags |= __SERR;
  80a1c0:	8080030b 	ldhu	r2,12(r16)
  80a1c4:	10801014 	ori	r2,r2,64
  80a1c8:	8080030d 	sth	r2,12(r16)
}
  80a1cc:	8805883a 	mov	r2,r17
  80a1d0:	dfc11d17 	ldw	ra,1140(sp)
  80a1d4:	dc811c17 	ldw	r18,1136(sp)
  80a1d8:	dc411b17 	ldw	r17,1132(sp)
  80a1dc:	dc011a17 	ldw	r16,1128(sp)
  80a1e0:	dec11e04 	addi	sp,sp,1144
  80a1e4:	f800283a 	ret
	if (ret >= 0 && _fflush_r (rptr, &fake))
  80a1e8:	d80b883a 	mov	r5,sp
  80a1ec:	9009883a 	mov	r4,r18
  80a1f0:	08047140 	call	804714 <_fflush_r>
  80a1f4:	103fef26 	beq	r2,zero,80a1b4 <__sbprintf+0x74>
		ret = EOF;
  80a1f8:	047fffc4 	movi	r17,-1
  80a1fc:	003fed06 	br	80a1b4 <__sbprintf+0x74>

0080a200 <_wctomb_r>:
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
  return __WCTOMB (r, s, _wchar, state);
  80a200:	00802074 	movhi	r2,129
  80a204:	10883617 	ldw	r2,8408(r2)
  80a208:	1000683a 	jmp	r2

0080a20c <__ascii_wctomb>:
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;

  if (s == NULL)
  80a20c:	28000926 	beq	r5,zero,80a234 <__ascii_wctomb+0x28>
    return 0;
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
  80a210:	30804030 	cmpltui	r2,r6,256
  80a214:	10000326 	beq	r2,zero,80a224 <__ascii_wctomb+0x18>
    {
      r->_errno = EILSEQ;
      return -1;
    }

  *s = (char) wchar;
  80a218:	29800005 	stb	r6,0(r5)
  return 1;
  80a21c:	00800044 	movi	r2,1
  80a220:	f800283a 	ret
      r->_errno = EILSEQ;
  80a224:	00802284 	movi	r2,138
  80a228:	20800015 	stw	r2,0(r4)
      return -1;
  80a22c:	00bfffc4 	movi	r2,-1
  80a230:	f800283a 	ret
    return 0;
  80a234:	0005883a 	mov	r2,zero
}
  80a238:	f800283a 	ret

0080a23c <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
  80a23c:	2807883a 	mov	r3,r5
  80a240:	defffe04 	addi	sp,sp,-8
  80a244:	dc000015 	stw	r16,0(sp)
  80a248:	300b883a 	mov	r5,r6
  80a24c:	2021883a 	mov	r16,r4
  80a250:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80a254:	1809883a 	mov	r4,r3
{
  80a258:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80a25c:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80a260:	080f5b80 	call	80f5b8 <write>
  80a264:	10ffffd8 	cmpnei	r3,r2,-1
  80a268:	18000426 	beq	r3,zero,80a27c <_write_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80a26c:	dfc00117 	ldw	ra,4(sp)
  80a270:	dc000017 	ldw	r16,0(sp)
  80a274:	dec00204 	addi	sp,sp,8
  80a278:	f800283a 	ret
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
  80a27c:	d0e75817 	ldw	r3,-25248(gp)
  80a280:	183ffa26 	beq	r3,zero,80a26c <_write_r+0x30>
    ptr->_errno = errno;
  80a284:	80c00015 	stw	r3,0(r16)
}
  80a288:	dfc00117 	ldw	ra,4(sp)
  80a28c:	dc000017 	ldw	r16,0(sp)
  80a290:	dec00204 	addi	sp,sp,8
  80a294:	f800283a 	ret

0080a298 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80a298:	defffe04 	addi	sp,sp,-8
  80a29c:	dc000015 	stw	r16,0(sp)
  80a2a0:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _close (fd)) == -1 && errno != 0)
  80a2a4:	2809883a 	mov	r4,r5
{
  80a2a8:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80a2ac:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
  80a2b0:	080eae40 	call	80eae4 <close>
  80a2b4:	10ffffd8 	cmpnei	r3,r2,-1
  80a2b8:	18000426 	beq	r3,zero,80a2cc <_close_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80a2bc:	dfc00117 	ldw	ra,4(sp)
  80a2c0:	dc000017 	ldw	r16,0(sp)
  80a2c4:	dec00204 	addi	sp,sp,8
  80a2c8:	f800283a 	ret
  if ((ret = _close (fd)) == -1 && errno != 0)
  80a2cc:	d0e75817 	ldw	r3,-25248(gp)
  80a2d0:	183ffa26 	beq	r3,zero,80a2bc <_close_r+0x24>
    ptr->_errno = errno;
  80a2d4:	80c00015 	stw	r3,0(r16)
}
  80a2d8:	dfc00117 	ldw	ra,4(sp)
  80a2dc:	dc000017 	ldw	r16,0(sp)
  80a2e0:	dec00204 	addi	sp,sp,8
  80a2e4:	f800283a 	ret

0080a2e8 <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
  80a2e8:	3005883a 	mov	r2,r6
  fiprintf(stderr,
  80a2ec:	d1a00917 	ldw	r6,-32732(gp)
{
  80a2f0:	defffc04 	addi	sp,sp,-16
  80a2f4:	3807883a 	mov	r3,r7
  80a2f8:	dfc00315 	stw	ra,12(sp)
  fiprintf(stderr,
  80a2fc:	32400317 	ldw	r9,12(r6)
{
  80a300:	200f883a 	mov	r7,r4
  80a304:	2811883a 	mov	r8,r5
  80a308:	180d883a 	mov	r6,r3
  fiprintf(stderr,
  80a30c:	10000a26 	beq	r2,zero,80a338 <__assert_func+0x50>
  80a310:	00c02074 	movhi	r3,129
  80a314:	18c63904 	addi	r3,r3,6372
  80a318:	01402074 	movhi	r5,129
  80a31c:	29463d04 	addi	r5,r5,6388
  80a320:	4809883a 	mov	r4,r9
  80a324:	d8c00115 	stw	r3,4(sp)
  80a328:	da000015 	stw	r8,0(sp)
  80a32c:	d8800215 	stw	r2,8(sp)
  80a330:	080a6340 	call	80a634 <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
  80a334:	080b1000 	call	80b100 <abort>
  fiprintf(stderr,
  80a338:	00c02074 	movhi	r3,129
  80a33c:	18c63c04 	addi	r3,r3,6384
  80a340:	1805883a 	mov	r2,r3
  80a344:	003ff406 	br	80a318 <__assert_func+0x30>

0080a348 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
  80a348:	deffff04 	addi	sp,sp,-4
   __assert_func (file, line, NULL, failedexpr);
  80a34c:	300f883a 	mov	r7,r6
  80a350:	000d883a 	mov	r6,zero
{
  80a354:	dfc00015 	stw	ra,0(sp)
   __assert_func (file, line, NULL, failedexpr);
  80a358:	080a2e80 	call	80a2e8 <__assert_func>

0080a35c <_calloc_r>:
{
  80a35c:	defffe04 	addi	sp,sp,-8
  80a360:	dc000015 	stw	r16,0(sp)
  80a364:	2021883a 	mov	r16,r4
  80a368:	2809883a 	mov	r4,r5
  INTERNAL_SIZE_T sz = n * elem_size;
  80a36c:	300b883a 	mov	r5,r6
{
  80a370:	dfc00115 	stw	ra,4(sp)
  INTERNAL_SIZE_T sz = n * elem_size;
  80a374:	080c3e80 	call	80c3e8 <__mulsi3>
  mem = mALLOc (RCALL sz);
  80a378:	8009883a 	mov	r4,r16
  80a37c:	100b883a 	mov	r5,r2
  80a380:	0805a740 	call	805a74 <_malloc_r>
  80a384:	1009883a 	mov	r4,r2
  if (mem == 0) 
  80a388:	10000c26 	beq	r2,zero,80a3bc <_calloc_r+0x60>
    csz = chunksize(p);
  80a38c:	11bfff17 	ldw	r6,-4(r2)
  80a390:	00bfff04 	movi	r2,-4
  80a394:	308c703a 	and	r6,r6,r2
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80a398:	31bfff04 	addi	r6,r6,-4
  80a39c:	30800968 	cmpgeui	r2,r6,37
  80a3a0:	1000151e 	bne	r2,zero,80a3f8 <_calloc_r+0x9c>
  80a3a4:	30800530 	cmpltui	r2,r6,20
  80a3a8:	10000926 	beq	r2,zero,80a3d0 <_calloc_r+0x74>
  80a3ac:	2005883a 	mov	r2,r4
  80a3b0:	10000015 	stw	zero,0(r2)
  80a3b4:	10000115 	stw	zero,4(r2)
  80a3b8:	10000215 	stw	zero,8(r2)
}
  80a3bc:	2005883a 	mov	r2,r4
  80a3c0:	dfc00117 	ldw	ra,4(sp)
  80a3c4:	dc000017 	ldw	r16,0(sp)
  80a3c8:	dec00204 	addi	sp,sp,8
  80a3cc:	f800283a 	ret
    MALLOC_ZERO(mem, csz - SIZE_SZ);
  80a3d0:	20000015 	stw	zero,0(r4)
  80a3d4:	20000115 	stw	zero,4(r4)
  80a3d8:	30800728 	cmpgeui	r2,r6,28
  80a3dc:	10000a26 	beq	r2,zero,80a408 <_calloc_r+0xac>
  80a3e0:	20000215 	stw	zero,8(r4)
  80a3e4:	20000315 	stw	zero,12(r4)
  80a3e8:	31800920 	cmpeqi	r6,r6,36
  80a3ec:	3000081e 	bne	r6,zero,80a410 <_calloc_r+0xb4>
  80a3f0:	20800404 	addi	r2,r4,16
  80a3f4:	003fee06 	br	80a3b0 <_calloc_r+0x54>
  80a3f8:	000b883a 	mov	r5,zero
  80a3fc:	08066a40 	call	8066a4 <memset>
  80a400:	1009883a 	mov	r4,r2
  80a404:	003fed06 	br	80a3bc <_calloc_r+0x60>
  80a408:	20800204 	addi	r2,r4,8
  80a40c:	003fe806 	br	80a3b0 <_calloc_r+0x54>
  80a410:	20000415 	stw	zero,16(r4)
  80a414:	20800604 	addi	r2,r4,24
  80a418:	20000515 	stw	zero,20(r4)
  80a41c:	003fe406 	br	80a3b0 <_calloc_r+0x54>

0080a420 <_fclose_r>:
#include "local.h"

int
_fclose_r (struct _reent *rptr,
      register FILE * fp)
{
  80a420:	defffc04 	addi	sp,sp,-16
  80a424:	dfc00315 	stw	ra,12(sp)
  80a428:	dc800215 	stw	r18,8(sp)
  80a42c:	dc400115 	stw	r17,4(sp)
  80a430:	dc000015 	stw	r16,0(sp)
  int r;

  if (fp == NULL)
  80a434:	28000726 	beq	r5,zero,80a454 <_fclose_r+0x34>
  80a438:	2821883a 	mov	r16,r5
  80a43c:	2023883a 	mov	r17,r4
    return (0);			/* on NULL */

  CHECK_INIT (rptr, fp);
  80a440:	20000226 	beq	r4,zero,80a44c <_fclose_r+0x2c>
  80a444:	20800e17 	ldw	r2,56(r4)
  80a448:	10002726 	beq	r2,zero,80a4e8 <_fclose_r+0xc8>
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  if (!(fp->_flags2 & __SNLK))
    _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
  80a44c:	8080030f 	ldh	r2,12(r16)
  80a450:	1000081e 	bne	r2,zero,80a474 <_fclose_r+0x54>
    return (0);			/* on NULL */
  80a454:	0025883a 	mov	r18,zero
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
  80a458:	9005883a 	mov	r2,r18
  80a45c:	dfc00317 	ldw	ra,12(sp)
  80a460:	dc800217 	ldw	r18,8(sp)
  80a464:	dc400117 	ldw	r17,4(sp)
  80a468:	dc000017 	ldw	r16,0(sp)
  80a46c:	dec00404 	addi	sp,sp,16
  80a470:	f800283a 	ret
  r = __sflush_r (rptr, fp);
  80a474:	800b883a 	mov	r5,r16
  80a478:	8809883a 	mov	r4,r17
  80a47c:	08044ec0 	call	8044ec <__sflush_r>
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80a480:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80a484:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80a488:	18000426 	beq	r3,zero,80a49c <_fclose_r+0x7c>
  80a48c:	81400717 	ldw	r5,28(r16)
  80a490:	8809883a 	mov	r4,r17
  80a494:	183ee83a 	callr	r3
  80a498:	10001716 	blt	r2,zero,80a4f8 <_fclose_r+0xd8>
  if (fp->_flags & __SMBF)
  80a49c:	8080030b 	ldhu	r2,12(r16)
  80a4a0:	1080200c 	andi	r2,r2,128
  80a4a4:	1000181e 	bne	r2,zero,80a508 <_fclose_r+0xe8>
  if (HASUB (fp))
  80a4a8:	81400c17 	ldw	r5,48(r16)
  80a4ac:	28000526 	beq	r5,zero,80a4c4 <_fclose_r+0xa4>
    FREEUB (rptr, fp);
  80a4b0:	80801004 	addi	r2,r16,64
  80a4b4:	28800226 	beq	r5,r2,80a4c0 <_fclose_r+0xa0>
  80a4b8:	8809883a 	mov	r4,r17
  80a4bc:	0804df80 	call	804df8 <_free_r>
  80a4c0:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80a4c4:	81401117 	ldw	r5,68(r16)
  80a4c8:	28000326 	beq	r5,zero,80a4d8 <_fclose_r+0xb8>
    FREELB (rptr, fp);
  80a4cc:	8809883a 	mov	r4,r17
  80a4d0:	0804df80 	call	804df8 <_free_r>
  80a4d4:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80a4d8:	0804cb00 	call	804cb0 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80a4dc:	8000030d 	sth	zero,12(r16)
  __sfp_lock_release ();
  80a4e0:	0804cb40 	call	804cb4 <__sfp_lock_release>
  return (r);
  80a4e4:	003fdc06 	br	80a458 <_fclose_r+0x38>
  CHECK_INIT (rptr, fp);
  80a4e8:	0804b400 	call	804b40 <__sinit>
  if (fp->_flags == 0)		/* not open! */
  80a4ec:	8080030f 	ldh	r2,12(r16)
  80a4f0:	103fd826 	beq	r2,zero,80a454 <_fclose_r+0x34>
  80a4f4:	003fdf06 	br	80a474 <_fclose_r+0x54>
  if (fp->_flags & __SMBF)
  80a4f8:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80a4fc:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80a500:	1080200c 	andi	r2,r2,128
  80a504:	103fe826 	beq	r2,zero,80a4a8 <_fclose_r+0x88>
    _free_r (rptr, (char *) fp->_bf._base);
  80a508:	81400417 	ldw	r5,16(r16)
  80a50c:	8809883a 	mov	r4,r17
  80a510:	0804df80 	call	804df8 <_free_r>
  80a514:	003fe406 	br	80a4a8 <_fclose_r+0x88>

0080a518 <fclose>:

#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
  80a518:	defffc04 	addi	sp,sp,-16
  80a51c:	dfc00315 	stw	ra,12(sp)
  80a520:	dc800215 	stw	r18,8(sp)
  80a524:	dc400115 	stw	r17,4(sp)
  80a528:	dc000015 	stw	r16,0(sp)
  if (fp == NULL)
  80a52c:	20000726 	beq	r4,zero,80a54c <fclose+0x34>
  return _fclose_r(_REENT, fp);
  80a530:	d4600917 	ldw	r17,-32732(gp)
  CHECK_INIT (rptr, fp);
  80a534:	2021883a 	mov	r16,r4
  80a538:	88000226 	beq	r17,zero,80a544 <fclose+0x2c>
  80a53c:	88800e17 	ldw	r2,56(r17)
  80a540:	10002726 	beq	r2,zero,80a5e0 <fclose+0xc8>
  if (fp->_flags == 0)		/* not open! */
  80a544:	8080030f 	ldh	r2,12(r16)
  80a548:	1000081e 	bne	r2,zero,80a56c <fclose+0x54>
    return (0);			/* on NULL */
  80a54c:	0025883a 	mov	r18,zero
}
  80a550:	9005883a 	mov	r2,r18
  80a554:	dfc00317 	ldw	ra,12(sp)
  80a558:	dc800217 	ldw	r18,8(sp)
  80a55c:	dc400117 	ldw	r17,4(sp)
  80a560:	dc000017 	ldw	r16,0(sp)
  80a564:	dec00404 	addi	sp,sp,16
  80a568:	f800283a 	ret
  r = __sflush_r (rptr, fp);
  80a56c:	800b883a 	mov	r5,r16
  80a570:	8809883a 	mov	r4,r17
  80a574:	08044ec0 	call	8044ec <__sflush_r>
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80a578:	80c00b17 	ldw	r3,44(r16)
  r = __sflush_r (rptr, fp);
  80a57c:	1025883a 	mov	r18,r2
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
  80a580:	18000426 	beq	r3,zero,80a594 <fclose+0x7c>
  80a584:	81400717 	ldw	r5,28(r16)
  80a588:	8809883a 	mov	r4,r17
  80a58c:	183ee83a 	callr	r3
  80a590:	10001816 	blt	r2,zero,80a5f4 <fclose+0xdc>
  if (fp->_flags & __SMBF)
  80a594:	8080030b 	ldhu	r2,12(r16)
  80a598:	1080200c 	andi	r2,r2,128
  80a59c:	1000191e 	bne	r2,zero,80a604 <fclose+0xec>
  if (HASUB (fp))
  80a5a0:	81400c17 	ldw	r5,48(r16)
  80a5a4:	28000526 	beq	r5,zero,80a5bc <fclose+0xa4>
    FREEUB (rptr, fp);
  80a5a8:	80801004 	addi	r2,r16,64
  80a5ac:	28800226 	beq	r5,r2,80a5b8 <fclose+0xa0>
  80a5b0:	8809883a 	mov	r4,r17
  80a5b4:	0804df80 	call	804df8 <_free_r>
  80a5b8:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
  80a5bc:	81401117 	ldw	r5,68(r16)
  80a5c0:	28000326 	beq	r5,zero,80a5d0 <fclose+0xb8>
    FREELB (rptr, fp);
  80a5c4:	8809883a 	mov	r4,r17
  80a5c8:	0804df80 	call	804df8 <_free_r>
  80a5cc:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
  80a5d0:	0804cb00 	call	804cb0 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
  80a5d4:	8000030d 	sth	zero,12(r16)
  __sfp_lock_release ();
  80a5d8:	0804cb40 	call	804cb4 <__sfp_lock_release>
  return _fclose_r(_REENT, fp);
  80a5dc:	003fdc06 	br	80a550 <fclose+0x38>
  CHECK_INIT (rptr, fp);
  80a5e0:	8809883a 	mov	r4,r17
  80a5e4:	0804b400 	call	804b40 <__sinit>
  if (fp->_flags == 0)		/* not open! */
  80a5e8:	8080030f 	ldh	r2,12(r16)
  80a5ec:	103fd726 	beq	r2,zero,80a54c <fclose+0x34>
  80a5f0:	003fde06 	br	80a56c <fclose+0x54>
  if (fp->_flags & __SMBF)
  80a5f4:	8080030b 	ldhu	r2,12(r16)
    r = EOF;
  80a5f8:	04bfffc4 	movi	r18,-1
  if (fp->_flags & __SMBF)
  80a5fc:	1080200c 	andi	r2,r2,128
  80a600:	103fe726 	beq	r2,zero,80a5a0 <fclose+0x88>
    _free_r (rptr, (char *) fp->_bf._base);
  80a604:	81400417 	ldw	r5,16(r16)
  80a608:	8809883a 	mov	r4,r17
  80a60c:	0804df80 	call	804df8 <_free_r>
  80a610:	003fe306 	br	80a5a0 <fclose+0x88>

0080a614 <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
  80a614:	defffe04 	addi	sp,sp,-8
  80a618:	dfc00015 	stw	ra,0(sp)
  80a61c:	d9c00115 	stw	r7,4(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
  80a620:	d9c00104 	addi	r7,sp,4
  80a624:	080ad780 	call	80ad78 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80a628:	dfc00017 	ldw	ra,0(sp)
  80a62c:	dec00204 	addi	sp,sp,8
  80a630:	f800283a 	ret

0080a634 <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
  80a634:	defffd04 	addi	sp,sp,-12
  80a638:	2005883a 	mov	r2,r4
  80a63c:	dfc00015 	stw	ra,0(sp)
  80a640:	d9800115 	stw	r6,4(sp)
  80a644:	d9c00215 	stw	r7,8(sp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
  80a648:	d1200917 	ldw	r4,-32732(gp)
  80a64c:	280d883a 	mov	r6,r5
  80a650:	d9c00104 	addi	r7,sp,4
  80a654:	100b883a 	mov	r5,r2
  80a658:	080ad780 	call	80ad78 <_vfiprintf_r>
  va_end (ap);
  return ret;
}
  80a65c:	dfc00017 	ldw	ra,0(sp)
  80a660:	dec00304 	addi	sp,sp,12
  80a664:	f800283a 	ret

0080a668 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
  80a668:	defffa04 	addi	sp,sp,-24
  80a66c:	dcc00415 	stw	r19,16(sp)
  80a670:	dc800315 	stw	r18,12(sp)
  80a674:	dc000115 	stw	r16,4(sp)
  80a678:	dfc00515 	stw	ra,20(sp)
  80a67c:	dc400215 	stw	r17,8(sp)
  80a680:	2027883a 	mov	r19,r4
  80a684:	2825883a 	mov	r18,r5
  80a688:	3021883a 	mov	r16,r6
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80a68c:	08057b00 	call	8057b0 <__locale_mb_cur_max>
  80a690:	10800058 	cmpnei	r2,r2,1
  80a694:	1000241e 	bne	r2,zero,80a728 <__fputwc+0xc0>
  80a698:	90bfffc4 	addi	r2,r18,-1
  80a69c:	10803fe8 	cmpgeui	r2,r2,255
  80a6a0:	1000211e 	bne	r2,zero,80a728 <__fputwc+0xc0>
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a6a4:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80a6a8:	dc8000c5 	stb	r18,3(sp)
  80a6ac:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a6b0:	10bfffc4 	addi	r2,r2,-1
  80a6b4:	80800215 	stw	r2,8(r16)
      len = 1;
  80a6b8:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a6bc:	10002816 	blt	r2,zero,80a760 <__fputwc+0xf8>
  80a6c0:	80800017 	ldw	r2,0(r16)
  80a6c4:	11400005 	stb	r5,0(r2)
  80a6c8:	80800017 	ldw	r2,0(r16)
  80a6cc:	10800044 	addi	r2,r2,1
  80a6d0:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80a6d4:	8c400060 	cmpeqi	r17,r17,1
  80a6d8:	88000a1e 	bne	r17,zero,80a704 <__fputwc+0x9c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a6dc:	80800217 	ldw	r2,8(r16)
  80a6e0:	d9400103 	ldbu	r5,4(sp)
  80a6e4:	10bfffc4 	addi	r2,r2,-1
  80a6e8:	80800215 	stw	r2,8(r16)
  80a6ec:	10002716 	blt	r2,zero,80a78c <__fputwc+0x124>
  80a6f0:	80800017 	ldw	r2,0(r16)
  80a6f4:	11400005 	stb	r5,0(r2)
  80a6f8:	80800017 	ldw	r2,0(r16)
  80a6fc:	10800044 	addi	r2,r2,1
  80a700:	80800015 	stw	r2,0(r16)
      return WEOF;

  return (wint_t) wc;
  80a704:	9023883a 	mov	r17,r18
}
  80a708:	8805883a 	mov	r2,r17
  80a70c:	dfc00517 	ldw	ra,20(sp)
  80a710:	dcc00417 	ldw	r19,16(sp)
  80a714:	dc800317 	ldw	r18,12(sp)
  80a718:	dc400217 	ldw	r17,8(sp)
  80a71c:	dc000117 	ldw	r16,4(sp)
  80a720:	dec00604 	addi	sp,sp,24
  80a724:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80a728:	81c01704 	addi	r7,r16,92
  80a72c:	900d883a 	mov	r6,r18
  80a730:	d94000c4 	addi	r5,sp,3
  80a734:	9809883a 	mov	r4,r19
  80a738:	080b0100 	call	80b010 <_wcrtomb_r>
  80a73c:	1023883a 	mov	r17,r2
  80a740:	10bfffd8 	cmpnei	r2,r2,-1
  80a744:	10002f26 	beq	r2,zero,80a804 <__fputwc+0x19c>
  for (i = 0; i < len; i++)
  80a748:	883fee26 	beq	r17,zero,80a704 <__fputwc+0x9c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a74c:	80800217 	ldw	r2,8(r16)
  80a750:	d94000c3 	ldbu	r5,3(sp)
  80a754:	10bfffc4 	addi	r2,r2,-1
  80a758:	80800215 	stw	r2,8(r16)
  80a75c:	103fd80e 	bge	r2,zero,80a6c0 <__fputwc+0x58>
  80a760:	80c00617 	ldw	r3,24(r16)
  80a764:	10c01916 	blt	r2,r3,80a7cc <__fputwc+0x164>
  80a768:	80800017 	ldw	r2,0(r16)
  80a76c:	11400005 	stb	r5,0(r2)
  80a770:	80800017 	ldw	r2,0(r16)
  80a774:	10c00003 	ldbu	r3,0(r2)
  80a778:	18c00298 	cmpnei	r3,r3,10
  80a77c:	18002526 	beq	r3,zero,80a814 <__fputwc+0x1ac>
  80a780:	10800044 	addi	r2,r2,1
  80a784:	80800015 	stw	r2,0(r16)
  80a788:	003fd206 	br	80a6d4 <__fputwc+0x6c>
  80a78c:	80c00617 	ldw	r3,24(r16)
  80a790:	10c01516 	blt	r2,r3,80a7e8 <__fputwc+0x180>
  80a794:	80800017 	ldw	r2,0(r16)
  80a798:	11400005 	stb	r5,0(r2)
  80a79c:	80800017 	ldw	r2,0(r16)
  80a7a0:	10c00003 	ldbu	r3,0(r2)
  80a7a4:	18c002a0 	cmpeqi	r3,r3,10
  80a7a8:	183fd426 	beq	r3,zero,80a6fc <__fputwc+0x94>
  80a7ac:	800d883a 	mov	r6,r16
  80a7b0:	01400284 	movi	r5,10
  80a7b4:	9809883a 	mov	r4,r19
  80a7b8:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a7bc:	10bfffe0 	cmpeqi	r2,r2,-1
  80a7c0:	103fd026 	beq	r2,zero,80a704 <__fputwc+0x9c>
      return WEOF;
  80a7c4:	047fffc4 	movi	r17,-1
  80a7c8:	003fcf06 	br	80a708 <__fputwc+0xa0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a7cc:	800d883a 	mov	r6,r16
  80a7d0:	29403fcc 	andi	r5,r5,255
  80a7d4:	9809883a 	mov	r4,r19
  80a7d8:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a7dc:	10bfffe0 	cmpeqi	r2,r2,-1
  80a7e0:	103fbc26 	beq	r2,zero,80a6d4 <__fputwc+0x6c>
  80a7e4:	003ff706 	br	80a7c4 <__fputwc+0x15c>
  80a7e8:	800d883a 	mov	r6,r16
  80a7ec:	29403fcc 	andi	r5,r5,255
  80a7f0:	9809883a 	mov	r4,r19
  80a7f4:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a7f8:	10bfffd8 	cmpnei	r2,r2,-1
  80a7fc:	103fc11e 	bne	r2,zero,80a704 <__fputwc+0x9c>
  80a800:	003ff006 	br	80a7c4 <__fputwc+0x15c>
	  fp->_flags |= __SERR;
  80a804:	8080030b 	ldhu	r2,12(r16)
  80a808:	10801014 	ori	r2,r2,64
  80a80c:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80a810:	003fbd06 	br	80a708 <__fputwc+0xa0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a814:	800d883a 	mov	r6,r16
  80a818:	01400284 	movi	r5,10
  80a81c:	9809883a 	mov	r4,r19
  80a820:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a824:	10bfffe0 	cmpeqi	r2,r2,-1
  80a828:	103faa26 	beq	r2,zero,80a6d4 <__fputwc+0x6c>
  80a82c:	003fe506 	br	80a7c4 <__fputwc+0x15c>

0080a830 <_fputwc_r>:
	FILE *fp)
{
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
  80a830:	3080030b 	ldhu	r2,12(r6)
{
  80a834:	defffa04 	addi	sp,sp,-24
  80a838:	dcc00415 	stw	r19,16(sp)
  80a83c:	dc800315 	stw	r18,12(sp)
  80a840:	dc000115 	stw	r16,4(sp)
  80a844:	dfc00515 	stw	ra,20(sp)
  80a848:	dc400215 	stw	r17,8(sp)
  ORIENT(fp, 1);
  80a84c:	10c8000c 	andi	r3,r2,8192
{
  80a850:	3021883a 	mov	r16,r6
  80a854:	2027883a 	mov	r19,r4
  80a858:	2825883a 	mov	r18,r5
  ORIENT(fp, 1);
  80a85c:	1800051e 	bne	r3,zero,80a874 <_fputwc_r+0x44>
  _newlib_flockfile_start (fp);
  80a860:	30c01917 	ldw	r3,100(r6)
  ORIENT(fp, 1);
  80a864:	10880014 	ori	r2,r2,8192
  80a868:	3080030d 	sth	r2,12(r6)
  80a86c:	18880014 	ori	r2,r3,8192
  80a870:	30801915 	stw	r2,100(r6)
  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80a874:	08057b00 	call	8057b0 <__locale_mb_cur_max>
  80a878:	10800058 	cmpnei	r2,r2,1
  80a87c:	1000241e 	bne	r2,zero,80a910 <_fputwc_r+0xe0>
  80a880:	90bfffc4 	addi	r2,r18,-1
  80a884:	10803fe8 	cmpgeui	r2,r2,255
  80a888:	1000211e 	bne	r2,zero,80a910 <_fputwc_r+0xe0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a88c:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80a890:	dc8000c5 	stb	r18,3(sp)
  80a894:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a898:	10bfffc4 	addi	r2,r2,-1
  80a89c:	80800215 	stw	r2,8(r16)
      len = 1;
  80a8a0:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a8a4:	10002816 	blt	r2,zero,80a948 <_fputwc_r+0x118>
  80a8a8:	80800017 	ldw	r2,0(r16)
  80a8ac:	11400005 	stb	r5,0(r2)
  80a8b0:	80800017 	ldw	r2,0(r16)
  80a8b4:	10800044 	addi	r2,r2,1
  80a8b8:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80a8bc:	8c400060 	cmpeqi	r17,r17,1
  80a8c0:	88000a1e 	bne	r17,zero,80a8ec <_fputwc_r+0xbc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a8c4:	80800217 	ldw	r2,8(r16)
  80a8c8:	d9400103 	ldbu	r5,4(sp)
  80a8cc:	10bfffc4 	addi	r2,r2,-1
  80a8d0:	80800215 	stw	r2,8(r16)
  80a8d4:	10002716 	blt	r2,zero,80a974 <_fputwc_r+0x144>
  80a8d8:	80800017 	ldw	r2,0(r16)
  80a8dc:	11400005 	stb	r5,0(r2)
  80a8e0:	80800017 	ldw	r2,0(r16)
  80a8e4:	10800044 	addi	r2,r2,1
  80a8e8:	80800015 	stw	r2,0(r16)
  return (wint_t) wc;
  80a8ec:	9023883a 	mov	r17,r18
  r = __fputwc(ptr, wc, fp);
  _newlib_flockfile_end (fp);
  return r;
}
  80a8f0:	8805883a 	mov	r2,r17
  80a8f4:	dfc00517 	ldw	ra,20(sp)
  80a8f8:	dcc00417 	ldw	r19,16(sp)
  80a8fc:	dc800317 	ldw	r18,12(sp)
  80a900:	dc400217 	ldw	r17,8(sp)
  80a904:	dc000117 	ldw	r16,4(sp)
  80a908:	dec00604 	addi	sp,sp,24
  80a90c:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80a910:	81c01704 	addi	r7,r16,92
  80a914:	900d883a 	mov	r6,r18
  80a918:	d94000c4 	addi	r5,sp,3
  80a91c:	9809883a 	mov	r4,r19
  80a920:	080b0100 	call	80b010 <_wcrtomb_r>
  80a924:	1023883a 	mov	r17,r2
  80a928:	10bfffd8 	cmpnei	r2,r2,-1
  80a92c:	10002f26 	beq	r2,zero,80a9ec <_fputwc_r+0x1bc>
  for (i = 0; i < len; i++)
  80a930:	883fee26 	beq	r17,zero,80a8ec <_fputwc_r+0xbc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a934:	80800217 	ldw	r2,8(r16)
  80a938:	d94000c3 	ldbu	r5,3(sp)
  80a93c:	10bfffc4 	addi	r2,r2,-1
  80a940:	80800215 	stw	r2,8(r16)
  80a944:	103fd80e 	bge	r2,zero,80a8a8 <_fputwc_r+0x78>
  80a948:	80c00617 	ldw	r3,24(r16)
  80a94c:	10c01916 	blt	r2,r3,80a9b4 <_fputwc_r+0x184>
  80a950:	80800017 	ldw	r2,0(r16)
  80a954:	11400005 	stb	r5,0(r2)
  80a958:	80800017 	ldw	r2,0(r16)
  80a95c:	10c00003 	ldbu	r3,0(r2)
  80a960:	18c00298 	cmpnei	r3,r3,10
  80a964:	18002526 	beq	r3,zero,80a9fc <_fputwc_r+0x1cc>
  80a968:	10800044 	addi	r2,r2,1
  80a96c:	80800015 	stw	r2,0(r16)
  80a970:	003fd206 	br	80a8bc <_fputwc_r+0x8c>
  80a974:	80c00617 	ldw	r3,24(r16)
  80a978:	10c01516 	blt	r2,r3,80a9d0 <_fputwc_r+0x1a0>
  80a97c:	80800017 	ldw	r2,0(r16)
  80a980:	11400005 	stb	r5,0(r2)
  80a984:	80800017 	ldw	r2,0(r16)
  80a988:	10c00003 	ldbu	r3,0(r2)
  80a98c:	18c002a0 	cmpeqi	r3,r3,10
  80a990:	183fd426 	beq	r3,zero,80a8e4 <_fputwc_r+0xb4>
  80a994:	800d883a 	mov	r6,r16
  80a998:	01400284 	movi	r5,10
  80a99c:	9809883a 	mov	r4,r19
  80a9a0:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a9a4:	10bfffe0 	cmpeqi	r2,r2,-1
  80a9a8:	103fd026 	beq	r2,zero,80a8ec <_fputwc_r+0xbc>
      return WEOF;
  80a9ac:	047fffc4 	movi	r17,-1
  80a9b0:	003fcf06 	br	80a8f0 <_fputwc_r+0xc0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a9b4:	800d883a 	mov	r6,r16
  80a9b8:	29403fcc 	andi	r5,r5,255
  80a9bc:	9809883a 	mov	r4,r19
  80a9c0:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a9c4:	10bfffe0 	cmpeqi	r2,r2,-1
  80a9c8:	103fbc26 	beq	r2,zero,80a8bc <_fputwc_r+0x8c>
  80a9cc:	003ff706 	br	80a9ac <_fputwc_r+0x17c>
  80a9d0:	800d883a 	mov	r6,r16
  80a9d4:	29403fcc 	andi	r5,r5,255
  80a9d8:	9809883a 	mov	r4,r19
  80a9dc:	080ad7c0 	call	80ad7c <__swbuf_r>
  80a9e0:	10bfffd8 	cmpnei	r2,r2,-1
  80a9e4:	103fc11e 	bne	r2,zero,80a8ec <_fputwc_r+0xbc>
  80a9e8:	003ff006 	br	80a9ac <_fputwc_r+0x17c>
	  fp->_flags |= __SERR;
  80a9ec:	8080030b 	ldhu	r2,12(r16)
  80a9f0:	10801014 	ori	r2,r2,64
  80a9f4:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80a9f8:	003fbd06 	br	80a8f0 <_fputwc_r+0xc0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80a9fc:	800d883a 	mov	r6,r16
  80aa00:	01400284 	movi	r5,10
  80aa04:	9809883a 	mov	r4,r19
  80aa08:	080ad7c0 	call	80ad7c <__swbuf_r>
  80aa0c:	10bfffe0 	cmpeqi	r2,r2,-1
  80aa10:	103faa26 	beq	r2,zero,80a8bc <_fputwc_r+0x8c>
  80aa14:	003fe506 	br	80a9ac <_fputwc_r+0x17c>

0080aa18 <fputwc>:

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
  80aa18:	defffa04 	addi	sp,sp,-24
  80aa1c:	dcc00415 	stw	r19,16(sp)
  struct _reent *reent = _REENT;
  80aa20:	d4e00917 	ldw	r19,-32732(gp)
{
  80aa24:	dc800315 	stw	r18,12(sp)
  80aa28:	dc000115 	stw	r16,4(sp)
  80aa2c:	dfc00515 	stw	ra,20(sp)
  80aa30:	dc400215 	stw	r17,8(sp)
  80aa34:	2025883a 	mov	r18,r4
  80aa38:	2821883a 	mov	r16,r5

  CHECK_INIT(reent, fp);
  80aa3c:	98000226 	beq	r19,zero,80aa48 <fputwc+0x30>
  80aa40:	98800e17 	ldw	r2,56(r19)
  80aa44:	10004826 	beq	r2,zero,80ab68 <fputwc+0x150>
  ORIENT(fp, 1);
  80aa48:	8080030b 	ldhu	r2,12(r16)
  80aa4c:	10c8000c 	andi	r3,r2,8192
  80aa50:	1800051e 	bne	r3,zero,80aa68 <fputwc+0x50>
  _newlib_flockfile_start (fp);
  80aa54:	80c01917 	ldw	r3,100(r16)
  ORIENT(fp, 1);
  80aa58:	10880014 	ori	r2,r2,8192
  80aa5c:	8080030d 	sth	r2,12(r16)
  80aa60:	18880014 	ori	r2,r3,8192
  80aa64:	80801915 	stw	r2,100(r16)
  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
  80aa68:	08057b00 	call	8057b0 <__locale_mb_cur_max>
  80aa6c:	10800058 	cmpnei	r2,r2,1
  80aa70:	1000241e 	bne	r2,zero,80ab04 <fputwc+0xec>
  80aa74:	90bfffc4 	addi	r2,r18,-1
  80aa78:	10803fe8 	cmpgeui	r2,r2,255
  80aa7c:	1000211e 	bne	r2,zero,80ab04 <fputwc+0xec>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80aa80:	80800217 	ldw	r2,8(r16)
      *buf = (unsigned char)wc;
  80aa84:	dc8000c5 	stb	r18,3(sp)
  80aa88:	900b883a 	mov	r5,r18
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80aa8c:	10bfffc4 	addi	r2,r2,-1
  80aa90:	80800215 	stw	r2,8(r16)
      len = 1;
  80aa94:	04400044 	movi	r17,1
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80aa98:	10002816 	blt	r2,zero,80ab3c <fputwc+0x124>
  80aa9c:	80800017 	ldw	r2,0(r16)
  80aaa0:	11400005 	stb	r5,0(r2)
  80aaa4:	80800017 	ldw	r2,0(r16)
  80aaa8:	10800044 	addi	r2,r2,1
  80aaac:	80800015 	stw	r2,0(r16)
  for (i = 0; i < len; i++)
  80aab0:	8c400060 	cmpeqi	r17,r17,1
  80aab4:	88000a1e 	bne	r17,zero,80aae0 <fputwc+0xc8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80aab8:	80800217 	ldw	r2,8(r16)
  80aabc:	d9400103 	ldbu	r5,4(sp)
  80aac0:	10bfffc4 	addi	r2,r2,-1
  80aac4:	80800215 	stw	r2,8(r16)
  80aac8:	10002a16 	blt	r2,zero,80ab74 <fputwc+0x15c>
  80aacc:	80800017 	ldw	r2,0(r16)
  80aad0:	11400005 	stb	r5,0(r2)
  80aad4:	80800017 	ldw	r2,0(r16)
  80aad8:	10800044 	addi	r2,r2,1
  80aadc:	80800015 	stw	r2,0(r16)
  return (wint_t) wc;
  80aae0:	9023883a 	mov	r17,r18
  return _fputwc_r (reent, wc, fp);
}
  80aae4:	8805883a 	mov	r2,r17
  80aae8:	dfc00517 	ldw	ra,20(sp)
  80aaec:	dcc00417 	ldw	r19,16(sp)
  80aaf0:	dc800317 	ldw	r18,12(sp)
  80aaf4:	dc400217 	ldw	r17,8(sp)
  80aaf8:	dc000117 	ldw	r16,4(sp)
  80aafc:	dec00604 	addi	sp,sp,24
  80ab00:	f800283a 	ret
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
  80ab04:	81c01704 	addi	r7,r16,92
  80ab08:	900d883a 	mov	r6,r18
  80ab0c:	d94000c4 	addi	r5,sp,3
  80ab10:	9809883a 	mov	r4,r19
  80ab14:	080b0100 	call	80b010 <_wcrtomb_r>
  80ab18:	1023883a 	mov	r17,r2
  80ab1c:	10bfffd8 	cmpnei	r2,r2,-1
  80ab20:	10003226 	beq	r2,zero,80abec <fputwc+0x1d4>
  for (i = 0; i < len; i++)
  80ab24:	883fee26 	beq	r17,zero,80aae0 <fputwc+0xc8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80ab28:	80800217 	ldw	r2,8(r16)
  80ab2c:	d94000c3 	ldbu	r5,3(sp)
  80ab30:	10bfffc4 	addi	r2,r2,-1
  80ab34:	80800215 	stw	r2,8(r16)
  80ab38:	103fd80e 	bge	r2,zero,80aa9c <fputwc+0x84>
  80ab3c:	80c00617 	ldw	r3,24(r16)
  80ab40:	10c01c16 	blt	r2,r3,80abb4 <fputwc+0x19c>
  80ab44:	80800017 	ldw	r2,0(r16)
  80ab48:	11400005 	stb	r5,0(r2)
  80ab4c:	80800017 	ldw	r2,0(r16)
  80ab50:	10c00003 	ldbu	r3,0(r2)
  80ab54:	18c00298 	cmpnei	r3,r3,10
  80ab58:	18002826 	beq	r3,zero,80abfc <fputwc+0x1e4>
  80ab5c:	10800044 	addi	r2,r2,1
  80ab60:	80800015 	stw	r2,0(r16)
  80ab64:	003fd206 	br	80aab0 <fputwc+0x98>
  CHECK_INIT(reent, fp);
  80ab68:	9809883a 	mov	r4,r19
  80ab6c:	0804b400 	call	804b40 <__sinit>
  80ab70:	003fb506 	br	80aa48 <fputwc+0x30>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80ab74:	80c00617 	ldw	r3,24(r16)
  80ab78:	10c01516 	blt	r2,r3,80abd0 <fputwc+0x1b8>
  80ab7c:	80800017 	ldw	r2,0(r16)
  80ab80:	11400005 	stb	r5,0(r2)
  80ab84:	80800017 	ldw	r2,0(r16)
  80ab88:	10c00003 	ldbu	r3,0(r2)
  80ab8c:	18c002a0 	cmpeqi	r3,r3,10
  80ab90:	183fd126 	beq	r3,zero,80aad8 <fputwc+0xc0>
  80ab94:	800d883a 	mov	r6,r16
  80ab98:	01400284 	movi	r5,10
  80ab9c:	9809883a 	mov	r4,r19
  80aba0:	080ad7c0 	call	80ad7c <__swbuf_r>
  80aba4:	10bfffe0 	cmpeqi	r2,r2,-1
  80aba8:	103fcd26 	beq	r2,zero,80aae0 <fputwc+0xc8>
      return WEOF;
  80abac:	047fffc4 	movi	r17,-1
  80abb0:	003fcc06 	br	80aae4 <fputwc+0xcc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80abb4:	800d883a 	mov	r6,r16
  80abb8:	29403fcc 	andi	r5,r5,255
  80abbc:	9809883a 	mov	r4,r19
  80abc0:	080ad7c0 	call	80ad7c <__swbuf_r>
  80abc4:	10bfffe0 	cmpeqi	r2,r2,-1
  80abc8:	103fb926 	beq	r2,zero,80aab0 <fputwc+0x98>
  80abcc:	003ff706 	br	80abac <fputwc+0x194>
  80abd0:	800d883a 	mov	r6,r16
  80abd4:	29403fcc 	andi	r5,r5,255
  80abd8:	9809883a 	mov	r4,r19
  80abdc:	080ad7c0 	call	80ad7c <__swbuf_r>
  80abe0:	10bfffd8 	cmpnei	r2,r2,-1
  80abe4:	103fbe1e 	bne	r2,zero,80aae0 <fputwc+0xc8>
  80abe8:	003ff006 	br	80abac <fputwc+0x194>
	  fp->_flags |= __SERR;
  80abec:	8080030b 	ldhu	r2,12(r16)
  80abf0:	10801014 	ori	r2,r2,64
  80abf4:	8080030d 	sth	r2,12(r16)
	  return WEOF;
  80abf8:	003fba06 	br	80aae4 <fputwc+0xcc>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
  80abfc:	800d883a 	mov	r6,r16
  80ac00:	01400284 	movi	r5,10
  80ac04:	9809883a 	mov	r4,r19
  80ac08:	080ad7c0 	call	80ad7c <__swbuf_r>
  80ac0c:	10bfffe0 	cmpeqi	r2,r2,-1
  80ac10:	103fa726 	beq	r2,zero,80aab0 <fputwc+0x98>
  80ac14:	003fe506 	br	80abac <fputwc+0x194>

0080ac18 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
  80ac18:	2807883a 	mov	r3,r5
  80ac1c:	defffe04 	addi	sp,sp,-8
  80ac20:	dc000015 	stw	r16,0(sp)
  80ac24:	300b883a 	mov	r5,r6
  80ac28:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80ac2c:	1809883a 	mov	r4,r3
{
  80ac30:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80ac34:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80ac38:	080ec600 	call	80ec60 <fstat>
  80ac3c:	10ffffd8 	cmpnei	r3,r2,-1
  80ac40:	18000426 	beq	r3,zero,80ac54 <_fstat_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80ac44:	dfc00117 	ldw	ra,4(sp)
  80ac48:	dc000017 	ldw	r16,0(sp)
  80ac4c:	dec00204 	addi	sp,sp,8
  80ac50:	f800283a 	ret
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
  80ac54:	d0e75817 	ldw	r3,-25248(gp)
  80ac58:	183ffa26 	beq	r3,zero,80ac44 <_fstat_r+0x2c>
    ptr->_errno = errno;
  80ac5c:	80c00015 	stw	r3,0(r16)
}
  80ac60:	dfc00117 	ldw	ra,4(sp)
  80ac64:	dc000017 	ldw	r16,0(sp)
  80ac68:	dec00204 	addi	sp,sp,8
  80ac6c:	f800283a 	ret

0080ac70 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
  80ac70:	defffe04 	addi	sp,sp,-8
  80ac74:	dc000015 	stw	r16,0(sp)
  80ac78:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80ac7c:	2809883a 	mov	r4,r5
{
  80ac80:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80ac84:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80ac88:	080ed780 	call	80ed78 <isatty>
  80ac8c:	10ffffd8 	cmpnei	r3,r2,-1
  80ac90:	18000426 	beq	r3,zero,80aca4 <_isatty_r+0x34>
    ptr->_errno = errno;
  return ret;
}
  80ac94:	dfc00117 	ldw	ra,4(sp)
  80ac98:	dc000017 	ldw	r16,0(sp)
  80ac9c:	dec00204 	addi	sp,sp,8
  80aca0:	f800283a 	ret
  if ((ret = _isatty (fd)) == -1 && errno != 0)
  80aca4:	d0e75817 	ldw	r3,-25248(gp)
  80aca8:	183ffa26 	beq	r3,zero,80ac94 <_isatty_r+0x24>
    ptr->_errno = errno;
  80acac:	80c00015 	stw	r3,0(r16)
}
  80acb0:	dfc00117 	ldw	ra,4(sp)
  80acb4:	dc000017 	ldw	r16,0(sp)
  80acb8:	dec00204 	addi	sp,sp,8
  80acbc:	f800283a 	ret

0080acc0 <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
  80acc0:	2807883a 	mov	r3,r5
  80acc4:	defffe04 	addi	sp,sp,-8
  80acc8:	dc000015 	stw	r16,0(sp)
  80accc:	300b883a 	mov	r5,r6
  80acd0:	2021883a 	mov	r16,r4
  80acd4:	380d883a 	mov	r6,r7
  _off_t ret;

  errno = 0;
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80acd8:	1809883a 	mov	r4,r3
{
  80acdc:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80ace0:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80ace4:	080f0b80 	call	80f0b8 <lseek>
  80ace8:	10ffffd8 	cmpnei	r3,r2,-1
  80acec:	18000426 	beq	r3,zero,80ad00 <_lseek_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80acf0:	dfc00117 	ldw	ra,4(sp)
  80acf4:	dc000017 	ldw	r16,0(sp)
  80acf8:	dec00204 	addi	sp,sp,8
  80acfc:	f800283a 	ret
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
  80ad00:	d0e75817 	ldw	r3,-25248(gp)
  80ad04:	183ffa26 	beq	r3,zero,80acf0 <_lseek_r+0x30>
    ptr->_errno = errno;
  80ad08:	80c00015 	stw	r3,0(r16)
}
  80ad0c:	dfc00117 	ldw	ra,4(sp)
  80ad10:	dc000017 	ldw	r16,0(sp)
  80ad14:	dec00204 	addi	sp,sp,8
  80ad18:	f800283a 	ret

0080ad1c <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
  80ad1c:	2807883a 	mov	r3,r5
  80ad20:	defffe04 	addi	sp,sp,-8
  80ad24:	dc000015 	stw	r16,0(sp)
  80ad28:	300b883a 	mov	r5,r6
  80ad2c:	2021883a 	mov	r16,r4
  80ad30:	380d883a 	mov	r6,r7
  _ssize_t ret;

  errno = 0;
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80ad34:	1809883a 	mov	r4,r3
{
  80ad38:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80ad3c:	d0275815 	stw	zero,-25248(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80ad40:	080f2980 	call	80f298 <read>
  80ad44:	10ffffd8 	cmpnei	r3,r2,-1
  80ad48:	18000426 	beq	r3,zero,80ad5c <_read_r+0x40>
    ptr->_errno = errno;
  return ret;
}
  80ad4c:	dfc00117 	ldw	ra,4(sp)
  80ad50:	dc000017 	ldw	r16,0(sp)
  80ad54:	dec00204 	addi	sp,sp,8
  80ad58:	f800283a 	ret
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
  80ad5c:	d0e75817 	ldw	r3,-25248(gp)
  80ad60:	183ffa26 	beq	r3,zero,80ad4c <_read_r+0x30>
    ptr->_errno = errno;
  80ad64:	80c00015 	stw	r3,0(r16)
}
  80ad68:	dfc00117 	ldw	ra,4(sp)
  80ad6c:	dc000017 	ldw	r16,0(sp)
  80ad70:	dec00204 	addi	sp,sp,8
  80ad74:	f800283a 	ret

0080ad78 <_vfiprintf_r>:
{
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
  80ad78:	08088601 	jmpi	808860 <___vfiprintf_internal_r>

0080ad7c <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
  80ad7c:	defffb04 	addi	sp,sp,-20
  80ad80:	dcc00315 	stw	r19,12(sp)
  80ad84:	dc400115 	stw	r17,4(sp)
  80ad88:	dc000015 	stw	r16,0(sp)
  80ad8c:	dfc00415 	stw	ra,16(sp)
  80ad90:	dc800215 	stw	r18,8(sp)
  80ad94:	2027883a 	mov	r19,r4
  80ad98:	2823883a 	mov	r17,r5
  80ad9c:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
  80ada0:	20000226 	beq	r4,zero,80adac <__swbuf_r+0x30>
  80ada4:	20800e17 	ldw	r2,56(r4)
  80ada8:	10003e26 	beq	r2,zero,80aea4 <__swbuf_r+0x128>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
  80adac:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80adb0:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80adb4:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80adb8:	1880020c 	andi	r2,r3,8
  80adbc:	10001f26 	beq	r2,zero,80ae3c <__swbuf_r+0xc0>
  80adc0:	80800417 	ldw	r2,16(r16)
  80adc4:	10001d26 	beq	r2,zero,80ae3c <__swbuf_r+0xc0>
    return EOF;
  c = (unsigned char) c;

  ORIENT (fp, -1);
  80adc8:	1948000c 	andi	r5,r3,8192
  80adcc:	8c803fcc 	andi	r18,r17,255
  80add0:	28002326 	beq	r5,zero,80ae60 <__swbuf_r+0xe4>
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
  80add4:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80add8:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80addc:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80ade0:	1100290e 	bge	r2,r4,80ae88 <__swbuf_r+0x10c>
	return EOF;
      n = 0;
    }
  fp->_w--;
  *fp->_p++ = c;
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80ade4:	10800044 	addi	r2,r2,1
  fp->_w--;
  80ade8:	81400217 	ldw	r5,8(r16)
  *fp->_p++ = c;
  80adec:	19000044 	addi	r4,r3,1
  80adf0:	81000015 	stw	r4,0(r16)
  fp->_w--;
  80adf4:	297fffc4 	addi	r5,r5,-1
  80adf8:	81400215 	stw	r5,8(r16)
  *fp->_p++ = c;
  80adfc:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80ae00:	80c00517 	ldw	r3,20(r16)
  80ae04:	18802926 	beq	r3,r2,80aeac <__swbuf_r+0x130>
  80ae08:	8080030b 	ldhu	r2,12(r16)
  80ae0c:	1080004c 	andi	r2,r2,1
  80ae10:	10000226 	beq	r2,zero,80ae1c <__swbuf_r+0xa0>
  80ae14:	90800298 	cmpnei	r2,r18,10
  80ae18:	10002426 	beq	r2,zero,80aeac <__swbuf_r+0x130>
    if (_fflush_r (ptr, fp))
      return EOF;
  return c;
}
  80ae1c:	9005883a 	mov	r2,r18
  80ae20:	dfc00417 	ldw	ra,16(sp)
  80ae24:	dcc00317 	ldw	r19,12(sp)
  80ae28:	dc800217 	ldw	r18,8(sp)
  80ae2c:	dc400117 	ldw	r17,4(sp)
  80ae30:	dc000017 	ldw	r16,0(sp)
  80ae34:	dec00504 	addi	sp,sp,20
  80ae38:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80ae3c:	800b883a 	mov	r5,r16
  80ae40:	9809883a 	mov	r4,r19
  80ae44:	08029900 	call	802990 <__swsetup_r>
  80ae48:	10001c1e 	bne	r2,zero,80aebc <__swbuf_r+0x140>
  ORIENT (fp, -1);
  80ae4c:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80ae50:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80ae54:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80ae58:	1948000c 	andi	r5,r3,8192
  80ae5c:	283fdd1e 	bne	r5,zero,80add4 <__swbuf_r+0x58>
  80ae60:	81001917 	ldw	r4,100(r16)
  80ae64:	18c80014 	ori	r3,r3,8192
  80ae68:	0177ffc4 	movi	r5,-8193
  80ae6c:	2148703a 	and	r4,r4,r5
  80ae70:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80ae74:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80ae78:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80ae7c:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80ae80:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80ae84:	113fd716 	blt	r2,r4,80ade4 <__swbuf_r+0x68>
      if (_fflush_r (ptr, fp))
  80ae88:	800b883a 	mov	r5,r16
  80ae8c:	9809883a 	mov	r4,r19
  80ae90:	08047140 	call	804714 <_fflush_r>
  80ae94:	1000091e 	bne	r2,zero,80aebc <__swbuf_r+0x140>
  *fp->_p++ = c;
  80ae98:	80c00017 	ldw	r3,0(r16)
  80ae9c:	00800044 	movi	r2,1
  80aea0:	003fd106 	br	80ade8 <__swbuf_r+0x6c>
  CHECK_INIT (ptr, fp);
  80aea4:	0804b400 	call	804b40 <__sinit>
  80aea8:	003fc006 	br	80adac <__swbuf_r+0x30>
    if (_fflush_r (ptr, fp))
  80aeac:	800b883a 	mov	r5,r16
  80aeb0:	9809883a 	mov	r4,r19
  80aeb4:	08047140 	call	804714 <_fflush_r>
  80aeb8:	103fd826 	beq	r2,zero,80ae1c <__swbuf_r+0xa0>
    return EOF;
  80aebc:	04bfffc4 	movi	r18,-1
  80aec0:	003fd606 	br	80ae1c <__swbuf_r+0xa0>

0080aec4 <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
  80aec4:	defffb04 	addi	sp,sp,-20
  80aec8:	dcc00315 	stw	r19,12(sp)
  return __swbuf_r (_REENT, c, fp);
  80aecc:	d4e00917 	ldw	r19,-32732(gp)
{
  80aed0:	dc400115 	stw	r17,4(sp)
  80aed4:	dc000015 	stw	r16,0(sp)
  80aed8:	dfc00415 	stw	ra,16(sp)
  80aedc:	dc800215 	stw	r18,8(sp)
  80aee0:	2023883a 	mov	r17,r4
  80aee4:	2821883a 	mov	r16,r5
  CHECK_INIT (ptr, fp);
  80aee8:	98000226 	beq	r19,zero,80aef4 <__swbuf+0x30>
  80aeec:	98800e17 	ldw	r2,56(r19)
  80aef0:	10003e26 	beq	r2,zero,80afec <__swbuf+0x128>
  fp->_w = fp->_lbfsize;
  80aef4:	80800617 	ldw	r2,24(r16)
  if (cantwrite (ptr, fp))
  80aef8:	80c0030b 	ldhu	r3,12(r16)
  fp->_w = fp->_lbfsize;
  80aefc:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
  80af00:	1880020c 	andi	r2,r3,8
  80af04:	10001f26 	beq	r2,zero,80af84 <__swbuf+0xc0>
  80af08:	80800417 	ldw	r2,16(r16)
  80af0c:	10001d26 	beq	r2,zero,80af84 <__swbuf+0xc0>
  ORIENT (fp, -1);
  80af10:	1908000c 	andi	r4,r3,8192
  80af14:	8c803fcc 	andi	r18,r17,255
  80af18:	20002326 	beq	r4,zero,80afa8 <__swbuf+0xe4>
  n = fp->_p - fp->_bf._base;
  80af1c:	80c00017 	ldw	r3,0(r16)
  if (n >= fp->_bf._size)
  80af20:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80af24:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80af28:	1100290e 	bge	r2,r4,80afd0 <__swbuf+0x10c>
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80af2c:	10800044 	addi	r2,r2,1
  fp->_w--;
  80af30:	81000217 	ldw	r4,8(r16)
  *fp->_p++ = c;
  80af34:	19400044 	addi	r5,r3,1
  80af38:	81400015 	stw	r5,0(r16)
  fp->_w--;
  80af3c:	213fffc4 	addi	r4,r4,-1
  80af40:	81000215 	stw	r4,8(r16)
  *fp->_p++ = c;
  80af44:	1c400005 	stb	r17,0(r3)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
  80af48:	80c00517 	ldw	r3,20(r16)
  80af4c:	18802a26 	beq	r3,r2,80aff8 <__swbuf+0x134>
  80af50:	8080030b 	ldhu	r2,12(r16)
  80af54:	1080004c 	andi	r2,r2,1
  80af58:	10000226 	beq	r2,zero,80af64 <__swbuf+0xa0>
  80af5c:	90800298 	cmpnei	r2,r18,10
  80af60:	10002526 	beq	r2,zero,80aff8 <__swbuf+0x134>
}
  80af64:	9005883a 	mov	r2,r18
  80af68:	dfc00417 	ldw	ra,16(sp)
  80af6c:	dcc00317 	ldw	r19,12(sp)
  80af70:	dc800217 	ldw	r18,8(sp)
  80af74:	dc400117 	ldw	r17,4(sp)
  80af78:	dc000017 	ldw	r16,0(sp)
  80af7c:	dec00504 	addi	sp,sp,20
  80af80:	f800283a 	ret
  if (cantwrite (ptr, fp))
  80af84:	800b883a 	mov	r5,r16
  80af88:	9809883a 	mov	r4,r19
  80af8c:	08029900 	call	802990 <__swsetup_r>
  80af90:	10001d1e 	bne	r2,zero,80b008 <__swbuf+0x144>
  ORIENT (fp, -1);
  80af94:	80c0030b 	ldhu	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80af98:	80800417 	ldw	r2,16(r16)
  c = (unsigned char) c;
  80af9c:	8c803fcc 	andi	r18,r17,255
  ORIENT (fp, -1);
  80afa0:	1908000c 	andi	r4,r3,8192
  80afa4:	203fdd1e 	bne	r4,zero,80af1c <__swbuf+0x58>
  80afa8:	81001917 	ldw	r4,100(r16)
  80afac:	18c80014 	ori	r3,r3,8192
  80afb0:	0177ffc4 	movi	r5,-8193
  80afb4:	2148703a 	and	r4,r4,r5
  80afb8:	80c0030d 	sth	r3,12(r16)
  n = fp->_p - fp->_bf._base;
  80afbc:	80c00017 	ldw	r3,0(r16)
  ORIENT (fp, -1);
  80afc0:	81001915 	stw	r4,100(r16)
  if (n >= fp->_bf._size)
  80afc4:	81000517 	ldw	r4,20(r16)
  n = fp->_p - fp->_bf._base;
  80afc8:	1885c83a 	sub	r2,r3,r2
  if (n >= fp->_bf._size)
  80afcc:	113fd716 	blt	r2,r4,80af2c <__swbuf+0x68>
      if (_fflush_r (ptr, fp))
  80afd0:	800b883a 	mov	r5,r16
  80afd4:	9809883a 	mov	r4,r19
  80afd8:	08047140 	call	804714 <_fflush_r>
  80afdc:	10000a1e 	bne	r2,zero,80b008 <__swbuf+0x144>
  *fp->_p++ = c;
  80afe0:	80c00017 	ldw	r3,0(r16)
  80afe4:	00800044 	movi	r2,1
  80afe8:	003fd106 	br	80af30 <__swbuf+0x6c>
  CHECK_INIT (ptr, fp);
  80afec:	9809883a 	mov	r4,r19
  80aff0:	0804b400 	call	804b40 <__sinit>
  80aff4:	003fbf06 	br	80aef4 <__swbuf+0x30>
    if (_fflush_r (ptr, fp))
  80aff8:	800b883a 	mov	r5,r16
  80affc:	9809883a 	mov	r4,r19
  80b000:	08047140 	call	804714 <_fflush_r>
  80b004:	103fd726 	beq	r2,zero,80af64 <__swbuf+0xa0>
    return EOF;
  80b008:	04bfffc4 	movi	r18,-1
  80b00c:	003fd506 	br	80af64 <__swbuf+0xa0>

0080b010 <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
  80b010:	defffa04 	addi	sp,sp,-24
  80b014:	dc400415 	stw	r17,16(sp)
  80b018:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b01c:	00802074 	movhi	r2,129
{
  80b020:	dfc00515 	stw	ra,20(sp)
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b024:	10883617 	ldw	r2,8408(r2)
{
  80b028:	2023883a 	mov	r17,r4
  80b02c:	3821883a 	mov	r16,r7
  if (s == NULL)
  80b030:	28000826 	beq	r5,zero,80b054 <_wcrtomb_r+0x44>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
  80b034:	103ee83a 	callr	r2

  if (retval == -1)
  80b038:	10ffffd8 	cmpnei	r3,r2,-1
  80b03c:	18000a26 	beq	r3,zero,80b068 <_wcrtomb_r+0x58>
      ptr->_errno = EILSEQ;
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
}
  80b040:	dfc00517 	ldw	ra,20(sp)
  80b044:	dc400417 	ldw	r17,16(sp)
  80b048:	dc000317 	ldw	r16,12(sp)
  80b04c:	dec00604 	addi	sp,sp,24
  80b050:	f800283a 	ret
    retval = __WCTOMB (ptr, buf, L'\0', ps);
  80b054:	000d883a 	mov	r6,zero
  80b058:	d9400084 	addi	r5,sp,2
  80b05c:	103ee83a 	callr	r2
  if (retval == -1)
  80b060:	10ffffd8 	cmpnei	r3,r2,-1
  80b064:	183ff61e 	bne	r3,zero,80b040 <_wcrtomb_r+0x30>
      ptr->_errno = EILSEQ;
  80b068:	00802284 	movi	r2,138
      ps->__count = 0;
  80b06c:	80000015 	stw	zero,0(r16)
      ptr->_errno = EILSEQ;
  80b070:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80b074:	00bfffc4 	movi	r2,-1
  80b078:	003ff106 	br	80b040 <_wcrtomb_r+0x30>

0080b07c <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
  80b07c:	defffa04 	addi	sp,sp,-24
  80b080:	dc400415 	stw	r17,16(sp)
  80b084:	dc000315 	stw	r16,12(sp)
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b088:	00c02074 	movhi	r3,129
{
  80b08c:	dfc00515 	stw	ra,20(sp)
  struct _reent *reent = _REENT;
  80b090:	d4600917 	ldw	r17,-32732(gp)
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b094:	18c83617 	ldw	r3,8408(r3)
{
  80b098:	3021883a 	mov	r16,r6
  if (s == NULL)
  80b09c:	20000c26 	beq	r4,zero,80b0d0 <wcrtomb+0x54>
  80b0a0:	280d883a 	mov	r6,r5
  else
    retval = __WCTOMB (reent, s, wc, ps);
  80b0a4:	800f883a 	mov	r7,r16
  80b0a8:	200b883a 	mov	r5,r4
  80b0ac:	8809883a 	mov	r4,r17
  80b0b0:	183ee83a 	callr	r3

  if (retval == -1)
  80b0b4:	10ffffd8 	cmpnei	r3,r2,-1
  80b0b8:	18000c26 	beq	r3,zero,80b0ec <wcrtomb+0x70>
      return (size_t)(-1);
    }
  else
    return (size_t)retval;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  80b0bc:	dfc00517 	ldw	ra,20(sp)
  80b0c0:	dc400417 	ldw	r17,16(sp)
  80b0c4:	dc000317 	ldw	r16,12(sp)
  80b0c8:	dec00604 	addi	sp,sp,24
  80b0cc:	f800283a 	ret
    retval = __WCTOMB (reent, buf, L'\0', ps);
  80b0d0:	300f883a 	mov	r7,r6
  80b0d4:	d9400084 	addi	r5,sp,2
  80b0d8:	000d883a 	mov	r6,zero
  80b0dc:	8809883a 	mov	r4,r17
  80b0e0:	183ee83a 	callr	r3
  if (retval == -1)
  80b0e4:	10ffffd8 	cmpnei	r3,r2,-1
  80b0e8:	183ff41e 	bne	r3,zero,80b0bc <wcrtomb+0x40>
      reent->_errno = EILSEQ;
  80b0ec:	00802284 	movi	r2,138
      ps->__count = 0;
  80b0f0:	80000015 	stw	zero,0(r16)
      reent->_errno = EILSEQ;
  80b0f4:	88800015 	stw	r2,0(r17)
      return (size_t)(-1);
  80b0f8:	00bfffc4 	movi	r2,-1
  80b0fc:	003fef06 	br	80b0bc <wcrtomb+0x40>

0080b100 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
  80b100:	deffff04 	addi	sp,sp,-4
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
  80b104:	01000184 	movi	r4,6
{
  80b108:	dfc00015 	stw	ra,0(sp)
      raise (SIGABRT);
  80b10c:	080b38c0 	call	80b38c <raise>
      _exit (1);
  80b110:	01000044 	movi	r4,1
  80b114:	080ebec0 	call	80ebec <_exit>

0080b118 <_init_signal_r>:
int
_init_signal_r (struct _reent *ptr)
{
  int i;

  if (ptr->_sig_func == NULL)
  80b118:	2080b717 	ldw	r2,732(r4)
  80b11c:	10000226 	beq	r2,zero,80b128 <_init_signal_r+0x10>

      for (i = 0; i < NSIG; i++)
	ptr->_sig_func[i] = SIG_DFL;
    }

  return 0;
  80b120:	0005883a 	mov	r2,zero
}
  80b124:	f800283a 	ret
{
  80b128:	defffe04 	addi	sp,sp,-8
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b12c:	01402004 	movi	r5,128
{
  80b130:	dc000015 	stw	r16,0(sp)
  80b134:	dfc00115 	stw	ra,4(sp)
  80b138:	2021883a 	mov	r16,r4
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b13c:	0805a740 	call	805a74 <_malloc_r>
  80b140:	8080b715 	stw	r2,732(r16)
  80b144:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80b148:	10000826 	beq	r2,zero,80b16c <_init_signal_r+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80b14c:	01802004 	movi	r6,128
  80b150:	000b883a 	mov	r5,zero
  80b154:	08066a40 	call	8066a4 <memset>
  return 0;
  80b158:	0005883a 	mov	r2,zero
}
  80b15c:	dfc00117 	ldw	ra,4(sp)
  80b160:	dc000017 	ldw	r16,0(sp)
  80b164:	dec00204 	addi	sp,sp,8
  80b168:	f800283a 	ret
	return -1;
  80b16c:	00bfffc4 	movi	r2,-1
  80b170:	003ffa06 	br	80b15c <_init_signal_r+0x44>

0080b174 <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
  80b174:	defffc04 	addi	sp,sp,-16
  80b178:	dc400115 	stw	r17,4(sp)
  80b17c:	dfc00315 	stw	ra,12(sp)
  80b180:	dc800215 	stw	r18,8(sp)
  80b184:	dc000015 	stw	r16,0(sp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
  80b188:	28800830 	cmpltui	r2,r5,32
{
  80b18c:	2023883a 	mov	r17,r4
  if (sig < 0 || sig >= NSIG)
  80b190:	10000e26 	beq	r2,zero,80b1cc <_signal_r+0x58>
    {
      ptr->_errno = EINVAL;
      return SIG_ERR;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80b194:	20c0b717 	ldw	r3,732(r4)
  80b198:	2821883a 	mov	r16,r5
  80b19c:	3025883a 	mov	r18,r6
  80b1a0:	18000e26 	beq	r3,zero,80b1dc <_signal_r+0x68>
    return SIG_ERR;
  
  old_func = ptr->_sig_func[sig];
  80b1a4:	802090ba 	slli	r16,r16,2
  80b1a8:	1c21883a 	add	r16,r3,r16
  80b1ac:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80b1b0:	84800015 	stw	r18,0(r16)

  return old_func;
}
  80b1b4:	dfc00317 	ldw	ra,12(sp)
  80b1b8:	dc800217 	ldw	r18,8(sp)
  80b1bc:	dc400117 	ldw	r17,4(sp)
  80b1c0:	dc000017 	ldw	r16,0(sp)
  80b1c4:	dec00404 	addi	sp,sp,16
  80b1c8:	f800283a 	ret
      ptr->_errno = EINVAL;
  80b1cc:	00800584 	movi	r2,22
  80b1d0:	20800015 	stw	r2,0(r4)
      return SIG_ERR;
  80b1d4:	00bfffc4 	movi	r2,-1
  80b1d8:	003ff606 	br	80b1b4 <_signal_r+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b1dc:	01402004 	movi	r5,128
  80b1e0:	0805a740 	call	805a74 <_malloc_r>
  80b1e4:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80b1e8:	10000626 	beq	r2,zero,80b204 <_signal_r+0x90>
	ptr->_sig_func[i] = SIG_DFL;
  80b1ec:	01802004 	movi	r6,128
  80b1f0:	000b883a 	mov	r5,zero
  80b1f4:	1009883a 	mov	r4,r2
  80b1f8:	08066a40 	call	8066a4 <memset>
  80b1fc:	1007883a 	mov	r3,r2
  80b200:	003fe806 	br	80b1a4 <_signal_r+0x30>
    return SIG_ERR;
  80b204:	00bfffc4 	movi	r2,-1
  80b208:	003fea06 	br	80b1b4 <_signal_r+0x40>

0080b20c <_raise_r>:
_raise_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80b20c:	28800830 	cmpltui	r2,r5,32
  80b210:	10002b26 	beq	r2,zero,80b2c0 <_raise_r+0xb4>
    {
      ptr->_errno = EINVAL;
      return -1;
    }

  if (ptr->_sig_func == NULL)
  80b214:	2080b717 	ldw	r2,732(r4)
{
  80b218:	defffd04 	addi	sp,sp,-12
  80b21c:	dc000115 	stw	r16,4(sp)
  80b220:	dfc00215 	stw	ra,8(sp)
  80b224:	2821883a 	mov	r16,r5
  if (ptr->_sig_func == NULL)
  80b228:	10001026 	beq	r2,zero,80b26c <_raise_r+0x60>
    func = SIG_DFL;
  else
    func = ptr->_sig_func[sig];
  80b22c:	280690ba 	slli	r3,r5,2
  80b230:	10c5883a 	add	r2,r2,r3
  80b234:	10c00017 	ldw	r3,0(r2)

  if (func == SIG_DFL)
  80b238:	18000c26 	beq	r3,zero,80b26c <_raise_r+0x60>
    return _kill_r (ptr, _getpid_r (ptr), sig);
  else if (func == SIG_IGN)
  80b23c:	19400060 	cmpeqi	r5,r3,1
  80b240:	28001a1e 	bne	r5,zero,80b2ac <_raise_r+0xa0>
    return 0;
  else if (func == SIG_ERR)
  80b244:	197fffd8 	cmpnei	r5,r3,-1
  80b248:	28001126 	beq	r5,zero,80b290 <_raise_r+0x84>
      ptr->_errno = EINVAL;
      return 1;
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80b24c:	10000015 	stw	zero,0(r2)
      func (sig);
  80b250:	8009883a 	mov	r4,r16
  80b254:	183ee83a 	callr	r3
      return 0;
  80b258:	0005883a 	mov	r2,zero
    }
}
  80b25c:	dfc00217 	ldw	ra,8(sp)
  80b260:	dc000117 	ldw	r16,4(sp)
  80b264:	dec00304 	addi	sp,sp,12
  80b268:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80b26c:	d9000015 	stw	r4,0(sp)
  80b270:	080b64c0 	call	80b64c <_getpid_r>
  80b274:	d9000017 	ldw	r4,0(sp)
  80b278:	800d883a 	mov	r6,r16
  80b27c:	100b883a 	mov	r5,r2
}
  80b280:	dfc00217 	ldw	ra,8(sp)
  80b284:	dc000117 	ldw	r16,4(sp)
  80b288:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80b28c:	080b5f41 	jmpi	80b5f4 <_kill_r>
      ptr->_errno = EINVAL;
  80b290:	00800584 	movi	r2,22
  80b294:	20800015 	stw	r2,0(r4)
      return 1;
  80b298:	00800044 	movi	r2,1
}
  80b29c:	dfc00217 	ldw	ra,8(sp)
  80b2a0:	dc000117 	ldw	r16,4(sp)
  80b2a4:	dec00304 	addi	sp,sp,12
  80b2a8:	f800283a 	ret
    return 0;
  80b2ac:	0005883a 	mov	r2,zero
}
  80b2b0:	dfc00217 	ldw	ra,8(sp)
  80b2b4:	dc000117 	ldw	r16,4(sp)
  80b2b8:	dec00304 	addi	sp,sp,12
  80b2bc:	f800283a 	ret
      ptr->_errno = EINVAL;
  80b2c0:	00800584 	movi	r2,22
  80b2c4:	20800015 	stw	r2,0(r4)
      return -1;
  80b2c8:	00bfffc4 	movi	r2,-1
}
  80b2cc:	f800283a 	ret

0080b2d0 <__sigtramp_r>:
__sigtramp_r (struct _reent *ptr,
     int sig)
{
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
  80b2d0:	28800830 	cmpltui	r2,r5,32
  80b2d4:	10002b26 	beq	r2,zero,80b384 <__sigtramp_r+0xb4>
    {
      return -1;
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80b2d8:	20c0b717 	ldw	r3,732(r4)
{
  80b2dc:	defffd04 	addi	sp,sp,-12
  80b2e0:	dc400115 	stw	r17,4(sp)
  80b2e4:	dc000015 	stw	r16,0(sp)
  80b2e8:	dfc00215 	stw	ra,8(sp)
  80b2ec:	2821883a 	mov	r16,r5
  80b2f0:	2023883a 	mov	r17,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80b2f4:	18001326 	beq	r3,zero,80b344 <__sigtramp_r+0x74>
    return -1;

  func = ptr->_sig_func[sig];
  80b2f8:	800490ba 	slli	r2,r16,2
  80b2fc:	1887883a 	add	r3,r3,r2
  80b300:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80b304:	10000d26 	beq	r2,zero,80b33c <__sigtramp_r+0x6c>
    return 1;
  else if (func == SIG_ERR)
  80b308:	113fffe0 	cmpeqi	r4,r2,-1
  80b30c:	2000191e 	bne	r4,zero,80b374 <__sigtramp_r+0xa4>
    return 2;
  else if (func == SIG_IGN)
  80b310:	11000060 	cmpeqi	r4,r2,1
  80b314:	2000151e 	bne	r4,zero,80b36c <__sigtramp_r+0x9c>
    return 3;
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
  80b318:	18000015 	stw	zero,0(r3)
      func (sig);
  80b31c:	8009883a 	mov	r4,r16
  80b320:	103ee83a 	callr	r2
      return 0;
  80b324:	0005883a 	mov	r2,zero
    }
}
  80b328:	dfc00217 	ldw	ra,8(sp)
  80b32c:	dc400117 	ldw	r17,4(sp)
  80b330:	dc000017 	ldw	r16,0(sp)
  80b334:	dec00304 	addi	sp,sp,12
  80b338:	f800283a 	ret
    return 1;
  80b33c:	00800044 	movi	r2,1
  80b340:	003ff906 	br	80b328 <__sigtramp_r+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b344:	01402004 	movi	r5,128
  80b348:	0805a740 	call	805a74 <_malloc_r>
  80b34c:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80b350:	10000a26 	beq	r2,zero,80b37c <__sigtramp_r+0xac>
	ptr->_sig_func[i] = SIG_DFL;
  80b354:	01802004 	movi	r6,128
  80b358:	000b883a 	mov	r5,zero
  80b35c:	1009883a 	mov	r4,r2
  80b360:	08066a40 	call	8066a4 <memset>
  80b364:	1007883a 	mov	r3,r2
  80b368:	003fe306 	br	80b2f8 <__sigtramp_r+0x28>
    return 3;
  80b36c:	008000c4 	movi	r2,3
  80b370:	003fed06 	br	80b328 <__sigtramp_r+0x58>
    return 2;
  80b374:	00800084 	movi	r2,2
  80b378:	003feb06 	br	80b328 <__sigtramp_r+0x58>
      return -1;
  80b37c:	00bfffc4 	movi	r2,-1
  80b380:	003fe906 	br	80b328 <__sigtramp_r+0x58>
  80b384:	00bfffc4 	movi	r2,-1
}
  80b388:	f800283a 	ret

0080b38c <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
  80b38c:	defffd04 	addi	sp,sp,-12
  80b390:	dc400115 	stw	r17,4(sp)
  80b394:	dfc00215 	stw	ra,8(sp)
  80b398:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80b39c:	20800830 	cmpltui	r2,r4,32
  return _raise_r (_REENT, sig);
  80b3a0:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80b3a4:	10002326 	beq	r2,zero,80b434 <raise+0xa8>
  if (ptr->_sig_func == NULL)
  80b3a8:	8880b717 	ldw	r2,732(r17)
  80b3ac:	2021883a 	mov	r16,r4
  80b3b0:	10001026 	beq	r2,zero,80b3f4 <raise+0x68>
    func = ptr->_sig_func[sig];
  80b3b4:	200690ba 	slli	r3,r4,2
  80b3b8:	10c5883a 	add	r2,r2,r3
  80b3bc:	10c00017 	ldw	r3,0(r2)
  if (func == SIG_DFL)
  80b3c0:	18000c26 	beq	r3,zero,80b3f4 <raise+0x68>
  else if (func == SIG_IGN)
  80b3c4:	19400060 	cmpeqi	r5,r3,1
  80b3c8:	2800181e 	bne	r5,zero,80b42c <raise+0xa0>
  else if (func == SIG_ERR)
  80b3cc:	197fffd8 	cmpnei	r5,r3,-1
  80b3d0:	28001226 	beq	r5,zero,80b41c <raise+0x90>
      ptr->_sig_func[sig] = SIG_DFL;
  80b3d4:	10000015 	stw	zero,0(r2)
      func (sig);
  80b3d8:	183ee83a 	callr	r3
      return 0;
  80b3dc:	0005883a 	mov	r2,zero
}
  80b3e0:	dfc00217 	ldw	ra,8(sp)
  80b3e4:	dc400117 	ldw	r17,4(sp)
  80b3e8:	dc000017 	ldw	r16,0(sp)
  80b3ec:	dec00304 	addi	sp,sp,12
  80b3f0:	f800283a 	ret
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80b3f4:	8809883a 	mov	r4,r17
  80b3f8:	080b64c0 	call	80b64c <_getpid_r>
  80b3fc:	800d883a 	mov	r6,r16
  80b400:	100b883a 	mov	r5,r2
  80b404:	8809883a 	mov	r4,r17
}
  80b408:	dfc00217 	ldw	ra,8(sp)
  80b40c:	dc400117 	ldw	r17,4(sp)
  80b410:	dc000017 	ldw	r16,0(sp)
  80b414:	dec00304 	addi	sp,sp,12
    return _kill_r (ptr, _getpid_r (ptr), sig);
  80b418:	080b5f41 	jmpi	80b5f4 <_kill_r>
      ptr->_errno = EINVAL;
  80b41c:	00800584 	movi	r2,22
  80b420:	88800015 	stw	r2,0(r17)
      return 1;
  80b424:	00800044 	movi	r2,1
  80b428:	003fed06 	br	80b3e0 <raise+0x54>
    return 0;
  80b42c:	0005883a 	mov	r2,zero
  return _raise_r (_REENT, sig);
  80b430:	003feb06 	br	80b3e0 <raise+0x54>
      ptr->_errno = EINVAL;
  80b434:	00800584 	movi	r2,22
  80b438:	88800015 	stw	r2,0(r17)
      return -1;
  80b43c:	00bfffc4 	movi	r2,-1
  80b440:	003fe706 	br	80b3e0 <raise+0x54>

0080b444 <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
  80b444:	defffc04 	addi	sp,sp,-16
  80b448:	dc800215 	stw	r18,8(sp)
  80b44c:	dfc00315 	stw	ra,12(sp)
  80b450:	dc400115 	stw	r17,4(sp)
  80b454:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80b458:	20800830 	cmpltui	r2,r4,32
  return _signal_r (_REENT, sig, func);
  80b45c:	d4a00917 	ldw	r18,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80b460:	10000e26 	beq	r2,zero,80b49c <signal+0x58>
  80b464:	2021883a 	mov	r16,r4
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80b468:	9100b717 	ldw	r4,732(r18)
  80b46c:	2823883a 	mov	r17,r5
  80b470:	20000e26 	beq	r4,zero,80b4ac <signal+0x68>
  old_func = ptr->_sig_func[sig];
  80b474:	802090ba 	slli	r16,r16,2
  80b478:	2421883a 	add	r16,r4,r16
  80b47c:	80800017 	ldw	r2,0(r16)
  ptr->_sig_func[sig] = func;
  80b480:	84400015 	stw	r17,0(r16)
}
  80b484:	dfc00317 	ldw	ra,12(sp)
  80b488:	dc800217 	ldw	r18,8(sp)
  80b48c:	dc400117 	ldw	r17,4(sp)
  80b490:	dc000017 	ldw	r16,0(sp)
  80b494:	dec00404 	addi	sp,sp,16
  80b498:	f800283a 	ret
      ptr->_errno = EINVAL;
  80b49c:	00800584 	movi	r2,22
  80b4a0:	90800015 	stw	r2,0(r18)
      return SIG_ERR;
  80b4a4:	00bfffc4 	movi	r2,-1
  80b4a8:	003ff606 	br	80b484 <signal+0x40>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b4ac:	9009883a 	mov	r4,r18
  80b4b0:	01402004 	movi	r5,128
  80b4b4:	0805a740 	call	805a74 <_malloc_r>
  80b4b8:	9080b715 	stw	r2,732(r18)
  80b4bc:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80b4c0:	10000526 	beq	r2,zero,80b4d8 <signal+0x94>
	ptr->_sig_func[i] = SIG_DFL;
  80b4c4:	01802004 	movi	r6,128
  80b4c8:	000b883a 	mov	r5,zero
  80b4cc:	08066a40 	call	8066a4 <memset>
  80b4d0:	1009883a 	mov	r4,r2
  80b4d4:	003fe706 	br	80b474 <signal+0x30>
    return SIG_ERR;
  80b4d8:	00bfffc4 	movi	r2,-1
  return _signal_r (_REENT, sig, func);
  80b4dc:	003fe906 	br	80b484 <signal+0x40>

0080b4e0 <_init_signal>:

int 
_init_signal (void)
{
  80b4e0:	defffe04 	addi	sp,sp,-8
  80b4e4:	dc000015 	stw	r16,0(sp)
  return _init_signal_r (_REENT);
  80b4e8:	d4200917 	ldw	r16,-32732(gp)
{
  80b4ec:	dfc00115 	stw	ra,4(sp)
  if (ptr->_sig_func == NULL)
  80b4f0:	8080b717 	ldw	r2,732(r16)
  80b4f4:	10000526 	beq	r2,zero,80b50c <_init_signal+0x2c>
  return 0;
  80b4f8:	0005883a 	mov	r2,zero
}
  80b4fc:	dfc00117 	ldw	ra,4(sp)
  80b500:	dc000017 	ldw	r16,0(sp)
  80b504:	dec00204 	addi	sp,sp,8
  80b508:	f800283a 	ret
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b50c:	8009883a 	mov	r4,r16
  80b510:	01402004 	movi	r5,128
  80b514:	0805a740 	call	805a74 <_malloc_r>
  80b518:	8080b715 	stw	r2,732(r16)
  80b51c:	1009883a 	mov	r4,r2
      if (ptr->_sig_func == NULL)
  80b520:	10000426 	beq	r2,zero,80b534 <_init_signal+0x54>
	ptr->_sig_func[i] = SIG_DFL;
  80b524:	01802004 	movi	r6,128
  80b528:	000b883a 	mov	r5,zero
  80b52c:	08066a40 	call	8066a4 <memset>
  80b530:	003ff106 	br	80b4f8 <_init_signal+0x18>
	return -1;
  80b534:	00bfffc4 	movi	r2,-1
  return _init_signal_r (_REENT);
  80b538:	003ff006 	br	80b4fc <_init_signal+0x1c>

0080b53c <__sigtramp>:

int
__sigtramp (int sig)
{
  80b53c:	defffd04 	addi	sp,sp,-12
  80b540:	dc400115 	stw	r17,4(sp)
  80b544:	dfc00215 	stw	ra,8(sp)
  80b548:	dc000015 	stw	r16,0(sp)
  if (sig < 0 || sig >= NSIG)
  80b54c:	20800830 	cmpltui	r2,r4,32
  return __sigtramp_r (_REENT, sig);
  80b550:	d4600917 	ldw	r17,-32732(gp)
  if (sig < 0 || sig >= NSIG)
  80b554:	10002526 	beq	r2,zero,80b5ec <__sigtramp+0xb0>
  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
  80b558:	88c0b717 	ldw	r3,732(r17)
  80b55c:	2021883a 	mov	r16,r4
  80b560:	18001326 	beq	r3,zero,80b5b0 <__sigtramp+0x74>
  func = ptr->_sig_func[sig];
  80b564:	800890ba 	slli	r4,r16,2
  80b568:	1907883a 	add	r3,r3,r4
  80b56c:	18800017 	ldw	r2,0(r3)
  if (func == SIG_DFL)
  80b570:	10000d26 	beq	r2,zero,80b5a8 <__sigtramp+0x6c>
  else if (func == SIG_ERR)
  80b574:	113fffe0 	cmpeqi	r4,r2,-1
  80b578:	20001a1e 	bne	r4,zero,80b5e4 <__sigtramp+0xa8>
  else if (func == SIG_IGN)
  80b57c:	11000060 	cmpeqi	r4,r2,1
  80b580:	2000161e 	bne	r4,zero,80b5dc <__sigtramp+0xa0>
      ptr->_sig_func[sig] = SIG_DFL;
  80b584:	18000015 	stw	zero,0(r3)
      func (sig);
  80b588:	8009883a 	mov	r4,r16
  80b58c:	103ee83a 	callr	r2
      return 0;
  80b590:	0005883a 	mov	r2,zero
}
  80b594:	dfc00217 	ldw	ra,8(sp)
  80b598:	dc400117 	ldw	r17,4(sp)
  80b59c:	dc000017 	ldw	r16,0(sp)
  80b5a0:	dec00304 	addi	sp,sp,12
  80b5a4:	f800283a 	ret
    return 1;
  80b5a8:	00800044 	movi	r2,1
  80b5ac:	003ff906 	br	80b594 <__sigtramp+0x58>
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
  80b5b0:	01402004 	movi	r5,128
  80b5b4:	8809883a 	mov	r4,r17
  80b5b8:	0805a740 	call	805a74 <_malloc_r>
  80b5bc:	8880b715 	stw	r2,732(r17)
      if (ptr->_sig_func == NULL)
  80b5c0:	10000a26 	beq	r2,zero,80b5ec <__sigtramp+0xb0>
	ptr->_sig_func[i] = SIG_DFL;
  80b5c4:	01802004 	movi	r6,128
  80b5c8:	000b883a 	mov	r5,zero
  80b5cc:	1009883a 	mov	r4,r2
  80b5d0:	08066a40 	call	8066a4 <memset>
  80b5d4:	1007883a 	mov	r3,r2
  80b5d8:	003fe206 	br	80b564 <__sigtramp+0x28>
    return 3;
  80b5dc:	008000c4 	movi	r2,3
  return __sigtramp_r (_REENT, sig);
  80b5e0:	003fec06 	br	80b594 <__sigtramp+0x58>
    return 2;
  80b5e4:	00800084 	movi	r2,2
  80b5e8:	003fea06 	br	80b594 <__sigtramp+0x58>
      return -1;
  80b5ec:	00bfffc4 	movi	r2,-1
  80b5f0:	003fe806 	br	80b594 <__sigtramp+0x58>

0080b5f4 <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
  80b5f4:	2807883a 	mov	r3,r5
  80b5f8:	defffe04 	addi	sp,sp,-8
  80b5fc:	dc000015 	stw	r16,0(sp)
  80b600:	300b883a 	mov	r5,r6
  80b604:	2021883a 	mov	r16,r4
  int ret;

  errno = 0;
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80b608:	1809883a 	mov	r4,r3
{
  80b60c:	dfc00115 	stw	ra,4(sp)
  errno = 0;
  80b610:	d0275815 	stw	zero,-25248(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80b614:	080ee640 	call	80ee64 <kill>
  80b618:	10ffffd8 	cmpnei	r3,r2,-1
  80b61c:	18000426 	beq	r3,zero,80b630 <_kill_r+0x3c>
    ptr->_errno = errno;
  return ret;
}
  80b620:	dfc00117 	ldw	ra,4(sp)
  80b624:	dc000017 	ldw	r16,0(sp)
  80b628:	dec00204 	addi	sp,sp,8
  80b62c:	f800283a 	ret
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
  80b630:	d0e75817 	ldw	r3,-25248(gp)
  80b634:	183ffa26 	beq	r3,zero,80b620 <_kill_r+0x2c>
    ptr->_errno = errno;
  80b638:	80c00015 	stw	r3,0(r16)
}
  80b63c:	dfc00117 	ldw	ra,4(sp)
  80b640:	dc000017 	ldw	r16,0(sp)
  80b644:	dec00204 	addi	sp,sp,8
  80b648:	f800283a 	ret

0080b64c <_getpid_r>:

int
_getpid_r (struct _reent *ptr)
{
  int ret;
  ret = _getpid ();
  80b64c:	080ed1c1 	jmpi	80ed1c <getpid>

0080b650 <__udivdi3>:
  80b650:	defff504 	addi	sp,sp,-44
  80b654:	dd000515 	stw	r20,20(sp)
  80b658:	dc800315 	stw	r18,12(sp)
  80b65c:	dfc00a15 	stw	ra,40(sp)
  80b660:	df000915 	stw	fp,36(sp)
  80b664:	ddc00815 	stw	r23,32(sp)
  80b668:	dd800715 	stw	r22,28(sp)
  80b66c:	dd400615 	stw	r21,24(sp)
  80b670:	dcc00415 	stw	r19,16(sp)
  80b674:	dc400215 	stw	r17,8(sp)
  80b678:	dc000115 	stw	r16,4(sp)
  80b67c:	2029883a 	mov	r20,r4
  80b680:	2825883a 	mov	r18,r5
  80b684:	3800461e 	bne	r7,zero,80b7a0 <__udivdi3+0x150>
  80b688:	3823883a 	mov	r17,r7
  80b68c:	3021883a 	mov	r16,r6
  80b690:	2027883a 	mov	r19,r4
  80b694:	2980622e 	bgeu	r5,r6,80b820 <__udivdi3+0x1d0>
  80b698:	00bfffd4 	movui	r2,65535
  80b69c:	282b883a 	mov	r21,r5
  80b6a0:	1180aa2e 	bgeu	r2,r6,80b94c <__udivdi3+0x2fc>
  80b6a4:	00804034 	movhi	r2,256
  80b6a8:	30815a36 	bltu	r6,r2,80bc14 <__udivdi3+0x5c4>
  80b6ac:	3006d63a 	srli	r3,r6,24
  80b6b0:	04400604 	movi	r17,24
  80b6b4:	00802074 	movhi	r2,129
  80b6b8:	1885883a 	add	r2,r3,r2
  80b6bc:	10855203 	ldbu	r2,5448(r2)
  80b6c0:	00c00804 	movi	r3,32
  80b6c4:	1463883a 	add	r17,r2,r17
  80b6c8:	1c45c83a 	sub	r2,r3,r17
  80b6cc:	1c400526 	beq	r3,r17,80b6e4 <__udivdi3+0x94>
  80b6d0:	9086983a 	sll	r3,r18,r2
  80b6d4:	a462d83a 	srl	r17,r20,r17
  80b6d8:	30a0983a 	sll	r16,r6,r2
  80b6dc:	a0a6983a 	sll	r19,r20,r2
  80b6e0:	88eab03a 	or	r21,r17,r3
  80b6e4:	802cd43a 	srli	r22,r16,16
  80b6e8:	a809883a 	mov	r4,r21
  80b6ec:	853fffcc 	andi	r20,r16,65535
  80b6f0:	b00b883a 	mov	r5,r22
  80b6f4:	080c38c0 	call	80c38c <__umodsi3>
  80b6f8:	a809883a 	mov	r4,r21
  80b6fc:	b00b883a 	mov	r5,r22
  80b700:	1025883a 	mov	r18,r2
  80b704:	080c3280 	call	80c328 <__udivsi3>
  80b708:	a009883a 	mov	r4,r20
  80b70c:	100b883a 	mov	r5,r2
  80b710:	102b883a 	mov	r21,r2
  80b714:	080c3e80 	call	80c3e8 <__mulsi3>
  80b718:	9024943a 	slli	r18,r18,16
  80b71c:	9808d43a 	srli	r4,r19,16
  80b720:	9108b03a 	or	r4,r18,r4
  80b724:	2080052e 	bgeu	r4,r2,80b73c <__udivdi3+0xec>
  80b728:	2409883a 	add	r4,r4,r16
  80b72c:	a8ffffc4 	addi	r3,r21,-1
  80b730:	24000136 	bltu	r4,r16,80b738 <__udivdi3+0xe8>
  80b734:	20814836 	bltu	r4,r2,80bc58 <__udivdi3+0x608>
  80b738:	182b883a 	mov	r21,r3
  80b73c:	20a3c83a 	sub	r17,r4,r2
  80b740:	8809883a 	mov	r4,r17
  80b744:	b00b883a 	mov	r5,r22
  80b748:	080c38c0 	call	80c38c <__umodsi3>
  80b74c:	8809883a 	mov	r4,r17
  80b750:	1023883a 	mov	r17,r2
  80b754:	b00b883a 	mov	r5,r22
  80b758:	8822943a 	slli	r17,r17,16
  80b75c:	080c3280 	call	80c328 <__udivsi3>
  80b760:	100b883a 	mov	r5,r2
  80b764:	a009883a 	mov	r4,r20
  80b768:	9cffffcc 	andi	r19,r19,65535
  80b76c:	1025883a 	mov	r18,r2
  80b770:	8ce6b03a 	or	r19,r17,r19
  80b774:	080c3e80 	call	80c3e8 <__mulsi3>
  80b778:	9880052e 	bgeu	r19,r2,80b790 <__udivdi3+0x140>
  80b77c:	84e7883a 	add	r19,r16,r19
  80b780:	90ffffc4 	addi	r3,r18,-1
  80b784:	9c000136 	bltu	r19,r16,80b78c <__udivdi3+0x13c>
  80b788:	98813136 	bltu	r19,r2,80bc50 <__udivdi3+0x600>
  80b78c:	1825883a 	mov	r18,r3
  80b790:	a80c943a 	slli	r6,r21,16
  80b794:	0007883a 	mov	r3,zero
  80b798:	3484b03a 	or	r2,r6,r18
  80b79c:	00000306 	br	80b7ac <__udivdi3+0x15c>
  80b7a0:	29c00e2e 	bgeu	r5,r7,80b7dc <__udivdi3+0x18c>
  80b7a4:	0007883a 	mov	r3,zero
  80b7a8:	0005883a 	mov	r2,zero
  80b7ac:	dfc00a17 	ldw	ra,40(sp)
  80b7b0:	df000917 	ldw	fp,36(sp)
  80b7b4:	ddc00817 	ldw	r23,32(sp)
  80b7b8:	dd800717 	ldw	r22,28(sp)
  80b7bc:	dd400617 	ldw	r21,24(sp)
  80b7c0:	dd000517 	ldw	r20,20(sp)
  80b7c4:	dcc00417 	ldw	r19,16(sp)
  80b7c8:	dc800317 	ldw	r18,12(sp)
  80b7cc:	dc400217 	ldw	r17,8(sp)
  80b7d0:	dc000117 	ldw	r16,4(sp)
  80b7d4:	dec00b04 	addi	sp,sp,44
  80b7d8:	f800283a 	ret
  80b7dc:	00bfffd4 	movui	r2,65535
  80b7e0:	11c05f2e 	bgeu	r2,r7,80b960 <__udivdi3+0x310>
  80b7e4:	00804034 	movhi	r2,256
  80b7e8:	3880fc36 	bltu	r7,r2,80bbdc <__udivdi3+0x58c>
  80b7ec:	3804d63a 	srli	r2,r7,24
  80b7f0:	01000604 	movi	r4,24
  80b7f4:	00c02074 	movhi	r3,129
  80b7f8:	10c7883a 	add	r3,r2,r3
  80b7fc:	18855203 	ldbu	r2,5448(r3)
  80b800:	00c00804 	movi	r3,32
  80b804:	1105883a 	add	r2,r2,r4
  80b808:	18a3c83a 	sub	r17,r3,r2
  80b80c:	1880901e 	bne	r3,r2,80ba50 <__udivdi3+0x400>
  80b810:	3c80f736 	bltu	r7,r18,80bbf0 <__udivdi3+0x5a0>
  80b814:	a185403a 	cmpgeu	r2,r20,r6
  80b818:	0007883a 	mov	r3,zero
  80b81c:	003fe306 	br	80b7ac <__udivdi3+0x15c>
  80b820:	3000041e 	bne	r6,zero,80b834 <__udivdi3+0x1e4>
  80b824:	000b883a 	mov	r5,zero
  80b828:	01000044 	movi	r4,1
  80b82c:	080c3280 	call	80c328 <__udivsi3>
  80b830:	1021883a 	mov	r16,r2
  80b834:	00bfffd4 	movui	r2,65535
  80b838:	14003f2e 	bgeu	r2,r16,80b938 <__udivdi3+0x2e8>
  80b83c:	00804034 	movhi	r2,256
  80b840:	8080f136 	bltu	r16,r2,80bc08 <__udivdi3+0x5b8>
  80b844:	8006d63a 	srli	r3,r16,24
  80b848:	04400604 	movi	r17,24
  80b84c:	00802074 	movhi	r2,129
  80b850:	1885883a 	add	r2,r3,r2
  80b854:	10855203 	ldbu	r2,5448(r2)
  80b858:	00c00804 	movi	r3,32
  80b85c:	1463883a 	add	r17,r2,r17
  80b860:	1c45c83a 	sub	r2,r3,r17
  80b864:	1c40431e 	bne	r3,r17,80b974 <__udivdi3+0x324>
  80b868:	802cd43a 	srli	r22,r16,16
  80b86c:	9423c83a 	sub	r17,r18,r16
  80b870:	853fffcc 	andi	r20,r16,65535
  80b874:	00c00044 	movi	r3,1
  80b878:	b00b883a 	mov	r5,r22
  80b87c:	8809883a 	mov	r4,r17
  80b880:	d8c00015 	stw	r3,0(sp)
  80b884:	080c38c0 	call	80c38c <__umodsi3>
  80b888:	b00b883a 	mov	r5,r22
  80b88c:	8809883a 	mov	r4,r17
  80b890:	1025883a 	mov	r18,r2
  80b894:	080c3280 	call	80c328 <__udivsi3>
  80b898:	1009883a 	mov	r4,r2
  80b89c:	a00b883a 	mov	r5,r20
  80b8a0:	102b883a 	mov	r21,r2
  80b8a4:	080c3e80 	call	80c3e8 <__mulsi3>
  80b8a8:	9024943a 	slli	r18,r18,16
  80b8ac:	9808d43a 	srli	r4,r19,16
  80b8b0:	d8c00017 	ldw	r3,0(sp)
  80b8b4:	9108b03a 	or	r4,r18,r4
  80b8b8:	2080052e 	bgeu	r4,r2,80b8d0 <__udivdi3+0x280>
  80b8bc:	2409883a 	add	r4,r4,r16
  80b8c0:	a97fffc4 	addi	r5,r21,-1
  80b8c4:	24000136 	bltu	r4,r16,80b8cc <__udivdi3+0x27c>
  80b8c8:	2080e636 	bltu	r4,r2,80bc64 <__udivdi3+0x614>
  80b8cc:	282b883a 	mov	r21,r5
  80b8d0:	20a3c83a 	sub	r17,r4,r2
  80b8d4:	8809883a 	mov	r4,r17
  80b8d8:	b00b883a 	mov	r5,r22
  80b8dc:	d8c00015 	stw	r3,0(sp)
  80b8e0:	080c38c0 	call	80c38c <__umodsi3>
  80b8e4:	8809883a 	mov	r4,r17
  80b8e8:	1023883a 	mov	r17,r2
  80b8ec:	b00b883a 	mov	r5,r22
  80b8f0:	8822943a 	slli	r17,r17,16
  80b8f4:	080c3280 	call	80c328 <__udivsi3>
  80b8f8:	a00b883a 	mov	r5,r20
  80b8fc:	1009883a 	mov	r4,r2
  80b900:	9cffffcc 	andi	r19,r19,65535
  80b904:	1025883a 	mov	r18,r2
  80b908:	8ce6b03a 	or	r19,r17,r19
  80b90c:	080c3e80 	call	80c3e8 <__mulsi3>
  80b910:	d8c00017 	ldw	r3,0(sp)
  80b914:	9880052e 	bgeu	r19,r2,80b92c <__udivdi3+0x2dc>
  80b918:	84e7883a 	add	r19,r16,r19
  80b91c:	913fffc4 	addi	r4,r18,-1
  80b920:	9c000136 	bltu	r19,r16,80b928 <__udivdi3+0x2d8>
  80b924:	9880c836 	bltu	r19,r2,80bc48 <__udivdi3+0x5f8>
  80b928:	2025883a 	mov	r18,r4
  80b92c:	a80c943a 	slli	r6,r21,16
  80b930:	3484b03a 	or	r2,r6,r18
  80b934:	003f9d06 	br	80b7ac <__udivdi3+0x15c>
  80b938:	80804030 	cmpltui	r2,r16,256
  80b93c:	1000b81e 	bne	r2,zero,80bc20 <__udivdi3+0x5d0>
  80b940:	8006d23a 	srli	r3,r16,8
  80b944:	04400204 	movi	r17,8
  80b948:	003fc006 	br	80b84c <__udivdi3+0x1fc>
  80b94c:	30804030 	cmpltui	r2,r6,256
  80b950:	1000a51e 	bne	r2,zero,80bbe8 <__udivdi3+0x598>
  80b954:	3006d23a 	srli	r3,r6,8
  80b958:	04400204 	movi	r17,8
  80b95c:	003f5506 	br	80b6b4 <__udivdi3+0x64>
  80b960:	38804030 	cmpltui	r2,r7,256
  80b964:	1000a51e 	bne	r2,zero,80bbfc <__udivdi3+0x5ac>
  80b968:	3804d23a 	srli	r2,r7,8
  80b96c:	01000204 	movi	r4,8
  80b970:	003fa006 	br	80b7f4 <__udivdi3+0x1a4>
  80b974:	80a0983a 	sll	r16,r16,r2
  80b978:	946ed83a 	srl	r23,r18,r17
  80b97c:	9086983a 	sll	r3,r18,r2
  80b980:	802cd43a 	srli	r22,r16,16
  80b984:	a462d83a 	srl	r17,r20,r17
  80b988:	b809883a 	mov	r4,r23
  80b98c:	b00b883a 	mov	r5,r22
  80b990:	88eab03a 	or	r21,r17,r3
  80b994:	a0a6983a 	sll	r19,r20,r2
  80b998:	080c38c0 	call	80c38c <__umodsi3>
  80b99c:	b809883a 	mov	r4,r23
  80b9a0:	b00b883a 	mov	r5,r22
  80b9a4:	1025883a 	mov	r18,r2
  80b9a8:	853fffcc 	andi	r20,r16,65535
  80b9ac:	080c3280 	call	80c328 <__udivsi3>
  80b9b0:	a009883a 	mov	r4,r20
  80b9b4:	100b883a 	mov	r5,r2
  80b9b8:	102f883a 	mov	r23,r2
  80b9bc:	080c3e80 	call	80c3e8 <__mulsi3>
  80b9c0:	9024943a 	slli	r18,r18,16
  80b9c4:	a808d43a 	srli	r4,r21,16
  80b9c8:	9108b03a 	or	r4,r18,r4
  80b9cc:	2080062e 	bgeu	r4,r2,80b9e8 <__udivdi3+0x398>
  80b9d0:	2409883a 	add	r4,r4,r16
  80b9d4:	b8ffffc4 	addi	r3,r23,-1
  80b9d8:	24009936 	bltu	r4,r16,80bc40 <__udivdi3+0x5f0>
  80b9dc:	2080982e 	bgeu	r4,r2,80bc40 <__udivdi3+0x5f0>
  80b9e0:	bdffff84 	addi	r23,r23,-2
  80b9e4:	2409883a 	add	r4,r4,r16
  80b9e8:	20a3c83a 	sub	r17,r4,r2
  80b9ec:	8809883a 	mov	r4,r17
  80b9f0:	b00b883a 	mov	r5,r22
  80b9f4:	080c38c0 	call	80c38c <__umodsi3>
  80b9f8:	1025883a 	mov	r18,r2
  80b9fc:	8809883a 	mov	r4,r17
  80ba00:	b00b883a 	mov	r5,r22
  80ba04:	9024943a 	slli	r18,r18,16
  80ba08:	080c3280 	call	80c328 <__udivsi3>
  80ba0c:	100b883a 	mov	r5,r2
  80ba10:	a009883a 	mov	r4,r20
  80ba14:	ac7fffcc 	andi	r17,r21,65535
  80ba18:	1039883a 	mov	fp,r2
  80ba1c:	9462b03a 	or	r17,r18,r17
  80ba20:	080c3e80 	call	80c3e8 <__mulsi3>
  80ba24:	8880062e 	bgeu	r17,r2,80ba40 <__udivdi3+0x3f0>
  80ba28:	8c23883a 	add	r17,r17,r16
  80ba2c:	e0ffffc4 	addi	r3,fp,-1
  80ba30:	8c007f36 	bltu	r17,r16,80bc30 <__udivdi3+0x5e0>
  80ba34:	88807e2e 	bgeu	r17,r2,80bc30 <__udivdi3+0x5e0>
  80ba38:	e73fff84 	addi	fp,fp,-2
  80ba3c:	8c23883a 	add	r17,r17,r16
  80ba40:	b806943a 	slli	r3,r23,16
  80ba44:	88a3c83a 	sub	r17,r17,r2
  80ba48:	1f06b03a 	or	r3,r3,fp
  80ba4c:	003f8a06 	br	80b878 <__udivdi3+0x228>
  80ba50:	30a6d83a 	srl	r19,r6,r2
  80ba54:	3c4e983a 	sll	r7,r7,r17
  80ba58:	90a0d83a 	srl	r16,r18,r2
  80ba5c:	9446983a 	sll	r3,r18,r17
  80ba60:	99e6b03a 	or	r19,r19,r7
  80ba64:	a084d83a 	srl	r2,r20,r2
  80ba68:	9838d43a 	srli	fp,r19,16
  80ba6c:	8009883a 	mov	r4,r16
  80ba70:	10eab03a 	or	r21,r2,r3
  80ba74:	e00b883a 	mov	r5,fp
  80ba78:	346c983a 	sll	r22,r6,r17
  80ba7c:	dd400015 	stw	r21,0(sp)
  80ba80:	080c38c0 	call	80c38c <__umodsi3>
  80ba84:	8009883a 	mov	r4,r16
  80ba88:	e00b883a 	mov	r5,fp
  80ba8c:	102f883a 	mov	r23,r2
  80ba90:	9cbfffcc 	andi	r18,r19,65535
  80ba94:	080c3280 	call	80c328 <__udivsi3>
  80ba98:	9009883a 	mov	r4,r18
  80ba9c:	100b883a 	mov	r5,r2
  80baa0:	1021883a 	mov	r16,r2
  80baa4:	080c3e80 	call	80c3e8 <__mulsi3>
  80baa8:	b82e943a 	slli	r23,r23,16
  80baac:	a808d43a 	srli	r4,r21,16
  80bab0:	b908b03a 	or	r4,r23,r4
  80bab4:	2080062e 	bgeu	r4,r2,80bad0 <__udivdi3+0x480>
  80bab8:	24c9883a 	add	r4,r4,r19
  80babc:	817fffc4 	addi	r5,r16,-1
  80bac0:	24c05d36 	bltu	r4,r19,80bc38 <__udivdi3+0x5e8>
  80bac4:	20805c2e 	bgeu	r4,r2,80bc38 <__udivdi3+0x5e8>
  80bac8:	843fff84 	addi	r16,r16,-2
  80bacc:	24c9883a 	add	r4,r4,r19
  80bad0:	20abc83a 	sub	r21,r4,r2
  80bad4:	a809883a 	mov	r4,r21
  80bad8:	e00b883a 	mov	r5,fp
  80badc:	080c38c0 	call	80c38c <__umodsi3>
  80bae0:	a809883a 	mov	r4,r21
  80bae4:	e00b883a 	mov	r5,fp
  80bae8:	102b883a 	mov	r21,r2
  80baec:	080c3280 	call	80c328 <__udivsi3>
  80baf0:	9009883a 	mov	r4,r18
  80baf4:	100b883a 	mov	r5,r2
  80baf8:	102f883a 	mov	r23,r2
  80bafc:	080c3e80 	call	80c3e8 <__mulsi3>
  80bb00:	d8c00017 	ldw	r3,0(sp)
  80bb04:	a82a943a 	slli	r21,r21,16
  80bb08:	100d883a 	mov	r6,r2
  80bb0c:	1cbfffcc 	andi	r18,r3,65535
  80bb10:	aca4b03a 	or	r18,r21,r18
  80bb14:	9080062e 	bgeu	r18,r2,80bb30 <__udivdi3+0x4e0>
  80bb18:	94e5883a 	add	r18,r18,r19
  80bb1c:	b8bfffc4 	addi	r2,r23,-1
  80bb20:	94c04136 	bltu	r18,r19,80bc28 <__udivdi3+0x5d8>
  80bb24:	9180402e 	bgeu	r18,r6,80bc28 <__udivdi3+0x5d8>
  80bb28:	bdffff84 	addi	r23,r23,-2
  80bb2c:	94e5883a 	add	r18,r18,r19
  80bb30:	8004943a 	slli	r2,r16,16
  80bb34:	bd7fffcc 	andi	r21,r23,65535
  80bb38:	b73fffcc 	andi	fp,r22,65535
  80bb3c:	15e0b03a 	or	r16,r2,r23
  80bb40:	8026d43a 	srli	r19,r16,16
  80bb44:	a809883a 	mov	r4,r21
  80bb48:	e00b883a 	mov	r5,fp
  80bb4c:	91a5c83a 	sub	r18,r18,r6
  80bb50:	b02cd43a 	srli	r22,r22,16
  80bb54:	080c3e80 	call	80c3e8 <__mulsi3>
  80bb58:	9809883a 	mov	r4,r19
  80bb5c:	e00b883a 	mov	r5,fp
  80bb60:	102f883a 	mov	r23,r2
  80bb64:	080c3e80 	call	80c3e8 <__mulsi3>
  80bb68:	9809883a 	mov	r4,r19
  80bb6c:	b00b883a 	mov	r5,r22
  80bb70:	1027883a 	mov	r19,r2
  80bb74:	080c3e80 	call	80c3e8 <__mulsi3>
  80bb78:	a809883a 	mov	r4,r21
  80bb7c:	b00b883a 	mov	r5,r22
  80bb80:	102b883a 	mov	r21,r2
  80bb84:	080c3e80 	call	80c3e8 <__mulsi3>
  80bb88:	b806d43a 	srli	r3,r23,16
  80bb8c:	14c5883a 	add	r2,r2,r19
  80bb90:	1887883a 	add	r3,r3,r2
  80bb94:	1cc0022e 	bgeu	r3,r19,80bba0 <__udivdi3+0x550>
  80bb98:	00800074 	movhi	r2,1
  80bb9c:	a8ab883a 	add	r21,r21,r2
  80bba0:	1804d43a 	srli	r2,r3,16
  80bba4:	156b883a 	add	r21,r2,r21
  80bba8:	95400936 	bltu	r18,r21,80bbd0 <__udivdi3+0x580>
  80bbac:	95400326 	beq	r18,r21,80bbbc <__udivdi3+0x56c>
  80bbb0:	8005883a 	mov	r2,r16
  80bbb4:	0007883a 	mov	r3,zero
  80bbb8:	003efc06 	br	80b7ac <__udivdi3+0x15c>
  80bbbc:	1806943a 	slli	r3,r3,16
  80bbc0:	a44c983a 	sll	r6,r20,r17
  80bbc4:	bdffffcc 	andi	r23,r23,65535
  80bbc8:	1dc7883a 	add	r3,r3,r23
  80bbcc:	30fff82e 	bgeu	r6,r3,80bbb0 <__udivdi3+0x560>
  80bbd0:	80bfffc4 	addi	r2,r16,-1
  80bbd4:	0007883a 	mov	r3,zero
  80bbd8:	003ef406 	br	80b7ac <__udivdi3+0x15c>
  80bbdc:	3804d43a 	srli	r2,r7,16
  80bbe0:	01000404 	movi	r4,16
  80bbe4:	003f0306 	br	80b7f4 <__udivdi3+0x1a4>
  80bbe8:	3007883a 	mov	r3,r6
  80bbec:	003eb106 	br	80b6b4 <__udivdi3+0x64>
  80bbf0:	0007883a 	mov	r3,zero
  80bbf4:	00800044 	movi	r2,1
  80bbf8:	003eec06 	br	80b7ac <__udivdi3+0x15c>
  80bbfc:	3805883a 	mov	r2,r7
  80bc00:	0009883a 	mov	r4,zero
  80bc04:	003efb06 	br	80b7f4 <__udivdi3+0x1a4>
  80bc08:	8006d43a 	srli	r3,r16,16
  80bc0c:	04400404 	movi	r17,16
  80bc10:	003f0e06 	br	80b84c <__udivdi3+0x1fc>
  80bc14:	3006d43a 	srli	r3,r6,16
  80bc18:	04400404 	movi	r17,16
  80bc1c:	003ea506 	br	80b6b4 <__udivdi3+0x64>
  80bc20:	8007883a 	mov	r3,r16
  80bc24:	003f0906 	br	80b84c <__udivdi3+0x1fc>
  80bc28:	102f883a 	mov	r23,r2
  80bc2c:	003fc006 	br	80bb30 <__udivdi3+0x4e0>
  80bc30:	1839883a 	mov	fp,r3
  80bc34:	003f8206 	br	80ba40 <__udivdi3+0x3f0>
  80bc38:	2821883a 	mov	r16,r5
  80bc3c:	003fa406 	br	80bad0 <__udivdi3+0x480>
  80bc40:	182f883a 	mov	r23,r3
  80bc44:	003f6806 	br	80b9e8 <__udivdi3+0x398>
  80bc48:	94bfff84 	addi	r18,r18,-2
  80bc4c:	003f3706 	br	80b92c <__udivdi3+0x2dc>
  80bc50:	94bfff84 	addi	r18,r18,-2
  80bc54:	003ece06 	br	80b790 <__udivdi3+0x140>
  80bc58:	ad7fff84 	addi	r21,r21,-2
  80bc5c:	2409883a 	add	r4,r4,r16
  80bc60:	003eb606 	br	80b73c <__udivdi3+0xec>
  80bc64:	ad7fff84 	addi	r21,r21,-2
  80bc68:	2409883a 	add	r4,r4,r16
  80bc6c:	003f1806 	br	80b8d0 <__udivdi3+0x280>

0080bc70 <__umoddi3>:
  80bc70:	defff304 	addi	sp,sp,-52
  80bc74:	dc400415 	stw	r17,16(sp)
  80bc78:	dc000315 	stw	r16,12(sp)
  80bc7c:	dfc00c15 	stw	ra,48(sp)
  80bc80:	df000b15 	stw	fp,44(sp)
  80bc84:	ddc00a15 	stw	r23,40(sp)
  80bc88:	dd800915 	stw	r22,36(sp)
  80bc8c:	dd400815 	stw	r21,32(sp)
  80bc90:	dd000715 	stw	r20,28(sp)
  80bc94:	dcc00615 	stw	r19,24(sp)
  80bc98:	dc800515 	stw	r18,20(sp)
  80bc9c:	2823883a 	mov	r17,r5
  80bca0:	2021883a 	mov	r16,r4
  80bca4:	38003b1e 	bne	r7,zero,80bd94 <__umoddi3+0x124>
  80bca8:	3825883a 	mov	r18,r7
  80bcac:	3029883a 	mov	r20,r6
  80bcb0:	2027883a 	mov	r19,r4
  80bcb4:	29805b2e 	bgeu	r5,r6,80be24 <__umoddi3+0x1b4>
  80bcb8:	00bfffd4 	movui	r2,65535
  80bcbc:	282d883a 	mov	r22,r5
  80bcc0:	11809a2e 	bgeu	r2,r6,80bf2c <__umoddi3+0x2bc>
  80bcc4:	00804034 	movhi	r2,256
  80bcc8:	30814436 	bltu	r6,r2,80c1dc <__umoddi3+0x56c>
  80bccc:	3006d63a 	srli	r3,r6,24
  80bcd0:	04800604 	movi	r18,24
  80bcd4:	00802074 	movhi	r2,129
  80bcd8:	1885883a 	add	r2,r3,r2
  80bcdc:	10855203 	ldbu	r2,5448(r2)
  80bce0:	00c00804 	movi	r3,32
  80bce4:	1485883a 	add	r2,r2,r18
  80bce8:	18a5c83a 	sub	r18,r3,r2
  80bcec:	18800526 	beq	r3,r2,80bd04 <__umoddi3+0x94>
  80bcf0:	8ca2983a 	sll	r17,r17,r18
  80bcf4:	8084d83a 	srl	r2,r16,r2
  80bcf8:	34a8983a 	sll	r20,r6,r18
  80bcfc:	84a6983a 	sll	r19,r16,r18
  80bd00:	146cb03a 	or	r22,r2,r17
  80bd04:	a02ed43a 	srli	r23,r20,16
  80bd08:	b009883a 	mov	r4,r22
  80bd0c:	a57fffcc 	andi	r21,r20,65535
  80bd10:	b80b883a 	mov	r5,r23
  80bd14:	080c38c0 	call	80c38c <__umodsi3>
  80bd18:	b80b883a 	mov	r5,r23
  80bd1c:	b009883a 	mov	r4,r22
  80bd20:	1023883a 	mov	r17,r2
  80bd24:	080c3280 	call	80c328 <__udivsi3>
  80bd28:	a809883a 	mov	r4,r21
  80bd2c:	100b883a 	mov	r5,r2
  80bd30:	080c3e80 	call	80c3e8 <__mulsi3>
  80bd34:	8822943a 	slli	r17,r17,16
  80bd38:	9808d43a 	srli	r4,r19,16
  80bd3c:	8908b03a 	or	r4,r17,r4
  80bd40:	2080042e 	bgeu	r4,r2,80bd54 <__umoddi3+0xe4>
  80bd44:	2509883a 	add	r4,r4,r20
  80bd48:	25000236 	bltu	r4,r20,80bd54 <__umoddi3+0xe4>
  80bd4c:	2080012e 	bgeu	r4,r2,80bd54 <__umoddi3+0xe4>
  80bd50:	2509883a 	add	r4,r4,r20
  80bd54:	20a1c83a 	sub	r16,r4,r2
  80bd58:	b80b883a 	mov	r5,r23
  80bd5c:	8009883a 	mov	r4,r16
  80bd60:	080c38c0 	call	80c38c <__umodsi3>
  80bd64:	b80b883a 	mov	r5,r23
  80bd68:	8009883a 	mov	r4,r16
  80bd6c:	1023883a 	mov	r17,r2
  80bd70:	080c3280 	call	80c328 <__udivsi3>
  80bd74:	8822943a 	slli	r17,r17,16
  80bd78:	100b883a 	mov	r5,r2
  80bd7c:	a809883a 	mov	r4,r21
  80bd80:	080c3e80 	call	80c3e8 <__mulsi3>
  80bd84:	98ffffcc 	andi	r3,r19,65535
  80bd88:	88c6b03a 	or	r3,r17,r3
  80bd8c:	18805e2e 	bgeu	r3,r2,80bf08 <__umoddi3+0x298>
  80bd90:	00005906 	br	80bef8 <__umoddi3+0x288>
  80bd94:	2005883a 	mov	r2,r4
  80bd98:	29c00d2e 	bgeu	r5,r7,80bdd0 <__umoddi3+0x160>
  80bd9c:	2807883a 	mov	r3,r5
  80bda0:	dfc00c17 	ldw	ra,48(sp)
  80bda4:	df000b17 	ldw	fp,44(sp)
  80bda8:	ddc00a17 	ldw	r23,40(sp)
  80bdac:	dd800917 	ldw	r22,36(sp)
  80bdb0:	dd400817 	ldw	r21,32(sp)
  80bdb4:	dd000717 	ldw	r20,28(sp)
  80bdb8:	dcc00617 	ldw	r19,24(sp)
  80bdbc:	dc800517 	ldw	r18,20(sp)
  80bdc0:	dc400417 	ldw	r17,16(sp)
  80bdc4:	dc000317 	ldw	r16,12(sp)
  80bdc8:	dec00d04 	addi	sp,sp,52
  80bdcc:	f800283a 	ret
  80bdd0:	013fffd4 	movui	r4,65535
  80bdd4:	2807883a 	mov	r3,r5
  80bdd8:	21c0592e 	bgeu	r4,r7,80bf40 <__umoddi3+0x2d0>
  80bddc:	01004034 	movhi	r4,256
  80bde0:	39010336 	bltu	r7,r4,80c1f0 <__umoddi3+0x580>
  80bde4:	3808d63a 	srli	r4,r7,24
  80bde8:	02000604 	movi	r8,24
  80bdec:	01402074 	movhi	r5,129
  80bdf0:	214b883a 	add	r5,r4,r5
  80bdf4:	2d055203 	ldbu	r20,5448(r5)
  80bdf8:	01000804 	movi	r4,32
  80bdfc:	a229883a 	add	r20,r20,r8
  80be00:	252bc83a 	sub	r21,r4,r20
  80be04:	2500531e 	bne	r4,r20,80bf54 <__umoddi3+0x2e4>
  80be08:	3c400136 	bltu	r7,r17,80be10 <__umoddi3+0x1a0>
  80be0c:	81bfe436 	bltu	r16,r6,80bda0 <__umoddi3+0x130>
  80be10:	8185c83a 	sub	r2,r16,r6
  80be14:	89cfc83a 	sub	r7,r17,r7
  80be18:	8087803a 	cmpltu	r3,r16,r2
  80be1c:	38c7c83a 	sub	r3,r7,r3
  80be20:	003fdf06 	br	80bda0 <__umoddi3+0x130>
  80be24:	3000041e 	bne	r6,zero,80be38 <__umoddi3+0x1c8>
  80be28:	000b883a 	mov	r5,zero
  80be2c:	01000044 	movi	r4,1
  80be30:	080c3280 	call	80c328 <__udivsi3>
  80be34:	1029883a 	mov	r20,r2
  80be38:	00bfffd4 	movui	r2,65535
  80be3c:	1500362e 	bgeu	r2,r20,80bf18 <__umoddi3+0x2a8>
  80be40:	00804034 	movhi	r2,256
  80be44:	a080ed36 	bltu	r20,r2,80c1fc <__umoddi3+0x58c>
  80be48:	a006d63a 	srli	r3,r20,24
  80be4c:	04800604 	movi	r18,24
  80be50:	00802074 	movhi	r2,129
  80be54:	1885883a 	add	r2,r3,r2
  80be58:	15855203 	ldbu	r22,5448(r2)
  80be5c:	00800804 	movi	r2,32
  80be60:	b4ad883a 	add	r22,r22,r18
  80be64:	15a5c83a 	sub	r18,r2,r22
  80be68:	1580a51e 	bne	r2,r22,80c100 <__umoddi3+0x490>
  80be6c:	a02ed43a 	srli	r23,r20,16
  80be70:	8d23c83a 	sub	r17,r17,r20
  80be74:	a57fffcc 	andi	r21,r20,65535
  80be78:	8809883a 	mov	r4,r17
  80be7c:	b80b883a 	mov	r5,r23
  80be80:	080c38c0 	call	80c38c <__umodsi3>
  80be84:	8809883a 	mov	r4,r17
  80be88:	b80b883a 	mov	r5,r23
  80be8c:	1023883a 	mov	r17,r2
  80be90:	080c3280 	call	80c328 <__udivsi3>
  80be94:	1009883a 	mov	r4,r2
  80be98:	a80b883a 	mov	r5,r21
  80be9c:	080c3e80 	call	80c3e8 <__mulsi3>
  80bea0:	8822943a 	slli	r17,r17,16
  80bea4:	9808d43a 	srli	r4,r19,16
  80bea8:	8908b03a 	or	r4,r17,r4
  80beac:	2080032e 	bgeu	r4,r2,80bebc <__umoddi3+0x24c>
  80beb0:	2509883a 	add	r4,r4,r20
  80beb4:	25000136 	bltu	r4,r20,80bebc <__umoddi3+0x24c>
  80beb8:	2080dc36 	bltu	r4,r2,80c22c <__umoddi3+0x5bc>
  80bebc:	20a1c83a 	sub	r16,r4,r2
  80bec0:	b80b883a 	mov	r5,r23
  80bec4:	8009883a 	mov	r4,r16
  80bec8:	080c38c0 	call	80c38c <__umodsi3>
  80becc:	b80b883a 	mov	r5,r23
  80bed0:	8009883a 	mov	r4,r16
  80bed4:	1023883a 	mov	r17,r2
  80bed8:	8822943a 	slli	r17,r17,16
  80bedc:	080c3280 	call	80c328 <__udivsi3>
  80bee0:	a80b883a 	mov	r5,r21
  80bee4:	1009883a 	mov	r4,r2
  80bee8:	080c3e80 	call	80c3e8 <__mulsi3>
  80beec:	9cffffcc 	andi	r19,r19,65535
  80bef0:	8cc6b03a 	or	r3,r17,r19
  80bef4:	1880042e 	bgeu	r3,r2,80bf08 <__umoddi3+0x298>
  80bef8:	1d07883a 	add	r3,r3,r20
  80befc:	1d000236 	bltu	r3,r20,80bf08 <__umoddi3+0x298>
  80bf00:	1880012e 	bgeu	r3,r2,80bf08 <__umoddi3+0x298>
  80bf04:	1d07883a 	add	r3,r3,r20
  80bf08:	1885c83a 	sub	r2,r3,r2
  80bf0c:	1484d83a 	srl	r2,r2,r18
  80bf10:	0007883a 	mov	r3,zero
  80bf14:	003fa206 	br	80bda0 <__umoddi3+0x130>
  80bf18:	a0804030 	cmpltui	r2,r20,256
  80bf1c:	1000ba1e 	bne	r2,zero,80c208 <__umoddi3+0x598>
  80bf20:	a006d23a 	srli	r3,r20,8
  80bf24:	04800204 	movi	r18,8
  80bf28:	003fc906 	br	80be50 <__umoddi3+0x1e0>
  80bf2c:	30804030 	cmpltui	r2,r6,256
  80bf30:	1000ad1e 	bne	r2,zero,80c1e8 <__umoddi3+0x578>
  80bf34:	3006d23a 	srli	r3,r6,8
  80bf38:	04800204 	movi	r18,8
  80bf3c:	003f6506 	br	80bcd4 <__umoddi3+0x64>
  80bf40:	39004030 	cmpltui	r4,r7,256
  80bf44:	2000b21e 	bne	r4,zero,80c210 <__umoddi3+0x5a0>
  80bf48:	3808d23a 	srli	r4,r7,8
  80bf4c:	02000204 	movi	r8,8
  80bf50:	003fa606 	br	80bdec <__umoddi3+0x17c>
  80bf54:	3d4e983a 	sll	r7,r7,r21
  80bf58:	3508d83a 	srl	r4,r6,r20
  80bf5c:	8d2cd83a 	srl	r22,r17,r20
  80bf60:	8504d83a 	srl	r2,r16,r20
  80bf64:	21e4b03a 	or	r18,r4,r7
  80bf68:	8d62983a 	sll	r17,r17,r21
  80bf6c:	9026d43a 	srli	r19,r18,16
  80bf70:	354c983a 	sll	r6,r6,r21
  80bf74:	1444b03a 	or	r2,r2,r17
  80bf78:	b009883a 	mov	r4,r22
  80bf7c:	980b883a 	mov	r5,r19
  80bf80:	d9800115 	stw	r6,4(sp)
  80bf84:	d8800015 	stw	r2,0(sp)
  80bf88:	080c38c0 	call	80c38c <__umodsi3>
  80bf8c:	980b883a 	mov	r5,r19
  80bf90:	b009883a 	mov	r4,r22
  80bf94:	102f883a 	mov	r23,r2
  80bf98:	947fffcc 	andi	r17,r18,65535
  80bf9c:	080c3280 	call	80c328 <__udivsi3>
  80bfa0:	8809883a 	mov	r4,r17
  80bfa4:	100b883a 	mov	r5,r2
  80bfa8:	1039883a 	mov	fp,r2
  80bfac:	080c3e80 	call	80c3e8 <__mulsi3>
  80bfb0:	d8c00017 	ldw	r3,0(sp)
  80bfb4:	b82e943a 	slli	r23,r23,16
  80bfb8:	8560983a 	sll	r16,r16,r21
  80bfbc:	1808d43a 	srli	r4,r3,16
  80bfc0:	b908b03a 	or	r4,r23,r4
  80bfc4:	2080062e 	bgeu	r4,r2,80bfe0 <__umoddi3+0x370>
  80bfc8:	2489883a 	add	r4,r4,r18
  80bfcc:	e17fffc4 	addi	r5,fp,-1
  80bfd0:	24809436 	bltu	r4,r18,80c224 <__umoddi3+0x5b4>
  80bfd4:	2080932e 	bgeu	r4,r2,80c224 <__umoddi3+0x5b4>
  80bfd8:	e73fff84 	addi	fp,fp,-2
  80bfdc:	2489883a 	add	r4,r4,r18
  80bfe0:	20adc83a 	sub	r22,r4,r2
  80bfe4:	980b883a 	mov	r5,r19
  80bfe8:	b009883a 	mov	r4,r22
  80bfec:	080c38c0 	call	80c38c <__umodsi3>
  80bff0:	980b883a 	mov	r5,r19
  80bff4:	b009883a 	mov	r4,r22
  80bff8:	102f883a 	mov	r23,r2
  80bffc:	080c3280 	call	80c328 <__udivsi3>
  80c000:	100b883a 	mov	r5,r2
  80c004:	8809883a 	mov	r4,r17
  80c008:	d8800215 	stw	r2,8(sp)
  80c00c:	080c3e80 	call	80c3e8 <__mulsi3>
  80c010:	d8c00017 	ldw	r3,0(sp)
  80c014:	b82e943a 	slli	r23,r23,16
  80c018:	d9400217 	ldw	r5,8(sp)
  80c01c:	1c7fffcc 	andi	r17,r3,65535
  80c020:	bc62b03a 	or	r17,r23,r17
  80c024:	8880062e 	bgeu	r17,r2,80c040 <__umoddi3+0x3d0>
  80c028:	8ca3883a 	add	r17,r17,r18
  80c02c:	28ffffc4 	addi	r3,r5,-1
  80c030:	8c807a36 	bltu	r17,r18,80c21c <__umoddi3+0x5ac>
  80c034:	8880792e 	bgeu	r17,r2,80c21c <__umoddi3+0x5ac>
  80c038:	297fff84 	addi	r5,r5,-2
  80c03c:	8ca3883a 	add	r17,r17,r18
  80c040:	e02c943a 	slli	r22,fp,16
  80c044:	d9c00117 	ldw	r7,4(sp)
  80c048:	29bfffcc 	andi	r6,r5,65535
  80c04c:	b16cb03a 	or	r22,r22,r5
  80c050:	38ffffcc 	andi	r3,r7,65535
  80c054:	b02cd43a 	srli	r22,r22,16
  80c058:	180b883a 	mov	r5,r3
  80c05c:	3009883a 	mov	r4,r6
  80c060:	3838d43a 	srli	fp,r7,16
  80c064:	182f883a 	mov	r23,r3
  80c068:	d9800015 	stw	r6,0(sp)
  80c06c:	88a3c83a 	sub	r17,r17,r2
  80c070:	080c3e80 	call	80c3e8 <__mulsi3>
  80c074:	b80b883a 	mov	r5,r23
  80c078:	b009883a 	mov	r4,r22
  80c07c:	102f883a 	mov	r23,r2
  80c080:	080c3e80 	call	80c3e8 <__mulsi3>
  80c084:	e00b883a 	mov	r5,fp
  80c088:	b009883a 	mov	r4,r22
  80c08c:	102d883a 	mov	r22,r2
  80c090:	080c3e80 	call	80c3e8 <__mulsi3>
  80c094:	d9800017 	ldw	r6,0(sp)
  80c098:	e00b883a 	mov	r5,fp
  80c09c:	1039883a 	mov	fp,r2
  80c0a0:	3009883a 	mov	r4,r6
  80c0a4:	080c3e80 	call	80c3e8 <__mulsi3>
  80c0a8:	b808d43a 	srli	r4,r23,16
  80c0ac:	1585883a 	add	r2,r2,r22
  80c0b0:	2089883a 	add	r4,r4,r2
  80c0b4:	2580022e 	bgeu	r4,r22,80c0c0 <__umoddi3+0x450>
  80c0b8:	00800074 	movhi	r2,1
  80c0bc:	e0b9883a 	add	fp,fp,r2
  80c0c0:	2006d43a 	srli	r3,r4,16
  80c0c4:	2008943a 	slli	r4,r4,16
  80c0c8:	bdffffcc 	andi	r23,r23,65535
  80c0cc:	1f07883a 	add	r3,r3,fp
  80c0d0:	25c9883a 	add	r4,r4,r23
  80c0d4:	88c03a36 	bltu	r17,r3,80c1c0 <__umoddi3+0x550>
  80c0d8:	88c03826 	beq	r17,r3,80c1bc <__umoddi3+0x54c>
  80c0dc:	8109c83a 	sub	r4,r16,r4
  80c0e0:	8121803a 	cmpltu	r16,r16,r4
  80c0e4:	88c7c83a 	sub	r3,r17,r3
  80c0e8:	1c07c83a 	sub	r3,r3,r16
  80c0ec:	1d04983a 	sll	r2,r3,r20
  80c0f0:	2548d83a 	srl	r4,r4,r21
  80c0f4:	1d46d83a 	srl	r3,r3,r21
  80c0f8:	1104b03a 	or	r2,r2,r4
  80c0fc:	003f2806 	br	80bda0 <__umoddi3+0x130>
  80c100:	a4a8983a 	sll	r20,r20,r18
  80c104:	8da6d83a 	srl	r19,r17,r22
  80c108:	8ca2983a 	sll	r17,r17,r18
  80c10c:	a02ed43a 	srli	r23,r20,16
  80c110:	9809883a 	mov	r4,r19
  80c114:	85acd83a 	srl	r22,r16,r22
  80c118:	b80b883a 	mov	r5,r23
  80c11c:	080c38c0 	call	80c38c <__umodsi3>
  80c120:	9809883a 	mov	r4,r19
  80c124:	b80b883a 	mov	r5,r23
  80c128:	b46cb03a 	or	r22,r22,r17
  80c12c:	a57fffcc 	andi	r21,r20,65535
  80c130:	1023883a 	mov	r17,r2
  80c134:	080c3280 	call	80c328 <__udivsi3>
  80c138:	a809883a 	mov	r4,r21
  80c13c:	100b883a 	mov	r5,r2
  80c140:	080c3e80 	call	80c3e8 <__mulsi3>
  80c144:	8822943a 	slli	r17,r17,16
  80c148:	b008d43a 	srli	r4,r22,16
  80c14c:	84a6983a 	sll	r19,r16,r18
  80c150:	8908b03a 	or	r4,r17,r4
  80c154:	2080042e 	bgeu	r4,r2,80c168 <__umoddi3+0x4f8>
  80c158:	2509883a 	add	r4,r4,r20
  80c15c:	25000236 	bltu	r4,r20,80c168 <__umoddi3+0x4f8>
  80c160:	2080012e 	bgeu	r4,r2,80c168 <__umoddi3+0x4f8>
  80c164:	2509883a 	add	r4,r4,r20
  80c168:	20a1c83a 	sub	r16,r4,r2
  80c16c:	8009883a 	mov	r4,r16
  80c170:	b80b883a 	mov	r5,r23
  80c174:	080c38c0 	call	80c38c <__umodsi3>
  80c178:	8009883a 	mov	r4,r16
  80c17c:	1021883a 	mov	r16,r2
  80c180:	b80b883a 	mov	r5,r23
  80c184:	8020943a 	slli	r16,r16,16
  80c188:	080c3280 	call	80c328 <__udivsi3>
  80c18c:	100b883a 	mov	r5,r2
  80c190:	a809883a 	mov	r4,r21
  80c194:	b47fffcc 	andi	r17,r22,65535
  80c198:	080c3e80 	call	80c3e8 <__mulsi3>
  80c19c:	8462b03a 	or	r17,r16,r17
  80c1a0:	8880042e 	bgeu	r17,r2,80c1b4 <__umoddi3+0x544>
  80c1a4:	8d23883a 	add	r17,r17,r20
  80c1a8:	8d000236 	bltu	r17,r20,80c1b4 <__umoddi3+0x544>
  80c1ac:	8880012e 	bgeu	r17,r2,80c1b4 <__umoddi3+0x544>
  80c1b0:	8d23883a 	add	r17,r17,r20
  80c1b4:	88a3c83a 	sub	r17,r17,r2
  80c1b8:	003f2f06 	br	80be78 <__umoddi3+0x208>
  80c1bc:	813fc72e 	bgeu	r16,r4,80c0dc <__umoddi3+0x46c>
  80c1c0:	d8800117 	ldw	r2,4(sp)
  80c1c4:	20a7c83a 	sub	r19,r4,r2
  80c1c8:	24c9803a 	cmpltu	r4,r4,r19
  80c1cc:	2489883a 	add	r4,r4,r18
  80c1d0:	1907c83a 	sub	r3,r3,r4
  80c1d4:	9809883a 	mov	r4,r19
  80c1d8:	003fc006 	br	80c0dc <__umoddi3+0x46c>
  80c1dc:	3006d43a 	srli	r3,r6,16
  80c1e0:	04800404 	movi	r18,16
  80c1e4:	003ebb06 	br	80bcd4 <__umoddi3+0x64>
  80c1e8:	3007883a 	mov	r3,r6
  80c1ec:	003eb906 	br	80bcd4 <__umoddi3+0x64>
  80c1f0:	3808d43a 	srli	r4,r7,16
  80c1f4:	02000404 	movi	r8,16
  80c1f8:	003efc06 	br	80bdec <__umoddi3+0x17c>
  80c1fc:	a006d43a 	srli	r3,r20,16
  80c200:	04800404 	movi	r18,16
  80c204:	003f1206 	br	80be50 <__umoddi3+0x1e0>
  80c208:	a007883a 	mov	r3,r20
  80c20c:	003f1006 	br	80be50 <__umoddi3+0x1e0>
  80c210:	3809883a 	mov	r4,r7
  80c214:	0011883a 	mov	r8,zero
  80c218:	003ef406 	br	80bdec <__umoddi3+0x17c>
  80c21c:	180b883a 	mov	r5,r3
  80c220:	003f8706 	br	80c040 <__umoddi3+0x3d0>
  80c224:	2839883a 	mov	fp,r5
  80c228:	003f6d06 	br	80bfe0 <__umoddi3+0x370>
  80c22c:	2509883a 	add	r4,r4,r20
  80c230:	003f2206 	br	80bebc <__umoddi3+0x24c>

0080c234 <__divsi3>:
  80c234:	20001a16 	blt	r4,zero,80c2a0 <__divsi3+0x6c>
  80c238:	000f883a 	mov	r7,zero
  80c23c:	2800020e 	bge	r5,zero,80c248 <__divsi3+0x14>
  80c240:	014bc83a 	sub	r5,zero,r5
  80c244:	39c0005c 	xori	r7,r7,1
  80c248:	200d883a 	mov	r6,r4
  80c24c:	00c00044 	movi	r3,1
  80c250:	2900092e 	bgeu	r5,r4,80c278 <__divsi3+0x44>
  80c254:	00800804 	movi	r2,32
  80c258:	00c00044 	movi	r3,1
  80c25c:	00000106 	br	80c264 <__divsi3+0x30>
  80c260:	10001226 	beq	r2,zero,80c2ac <__divsi3+0x78>
  80c264:	294b883a 	add	r5,r5,r5
  80c268:	10bfffc4 	addi	r2,r2,-1
  80c26c:	18c7883a 	add	r3,r3,r3
  80c270:	293ffb36 	bltu	r5,r4,80c260 <__divsi3+0x2c>
  80c274:	18000d26 	beq	r3,zero,80c2ac <__divsi3+0x78>
  80c278:	0005883a 	mov	r2,zero
  80c27c:	31400236 	bltu	r6,r5,80c288 <__divsi3+0x54>
  80c280:	314dc83a 	sub	r6,r6,r5
  80c284:	10c4b03a 	or	r2,r2,r3
  80c288:	1806d07a 	srli	r3,r3,1
  80c28c:	280ad07a 	srli	r5,r5,1
  80c290:	183ffa1e 	bne	r3,zero,80c27c <__divsi3+0x48>
  80c294:	38000126 	beq	r7,zero,80c29c <__divsi3+0x68>
  80c298:	0085c83a 	sub	r2,zero,r2
  80c29c:	f800283a 	ret
  80c2a0:	0109c83a 	sub	r4,zero,r4
  80c2a4:	01c00044 	movi	r7,1
  80c2a8:	003fe406 	br	80c23c <__divsi3+0x8>
  80c2ac:	0005883a 	mov	r2,zero
  80c2b0:	003ff806 	br	80c294 <__divsi3+0x60>

0080c2b4 <__modsi3>:
  80c2b4:	20001916 	blt	r4,zero,80c31c <__modsi3+0x68>
  80c2b8:	000f883a 	mov	r7,zero
  80c2bc:	2005883a 	mov	r2,r4
  80c2c0:	2800010e 	bge	r5,zero,80c2c8 <__modsi3+0x14>
  80c2c4:	014bc83a 	sub	r5,zero,r5
  80c2c8:	00c00044 	movi	r3,1
  80c2cc:	2900092e 	bgeu	r5,r4,80c2f4 <__modsi3+0x40>
  80c2d0:	01800804 	movi	r6,32
  80c2d4:	00c00044 	movi	r3,1
  80c2d8:	00000106 	br	80c2e0 <__modsi3+0x2c>
  80c2dc:	30000d26 	beq	r6,zero,80c314 <__modsi3+0x60>
  80c2e0:	294b883a 	add	r5,r5,r5
  80c2e4:	31bfffc4 	addi	r6,r6,-1
  80c2e8:	18c7883a 	add	r3,r3,r3
  80c2ec:	293ffb36 	bltu	r5,r4,80c2dc <__modsi3+0x28>
  80c2f0:	18000826 	beq	r3,zero,80c314 <__modsi3+0x60>
  80c2f4:	1806d07a 	srli	r3,r3,1
  80c2f8:	11400136 	bltu	r2,r5,80c300 <__modsi3+0x4c>
  80c2fc:	1145c83a 	sub	r2,r2,r5
  80c300:	280ad07a 	srli	r5,r5,1
  80c304:	183ffb1e 	bne	r3,zero,80c2f4 <__modsi3+0x40>
  80c308:	38000126 	beq	r7,zero,80c310 <__modsi3+0x5c>
  80c30c:	0085c83a 	sub	r2,zero,r2
  80c310:	f800283a 	ret
  80c314:	2005883a 	mov	r2,r4
  80c318:	003ffb06 	br	80c308 <__modsi3+0x54>
  80c31c:	0109c83a 	sub	r4,zero,r4
  80c320:	01c00044 	movi	r7,1
  80c324:	003fe506 	br	80c2bc <__modsi3+0x8>

0080c328 <__udivsi3>:
  80c328:	200d883a 	mov	r6,r4
  80c32c:	2900152e 	bgeu	r5,r4,80c384 <__udivsi3+0x5c>
  80c330:	28001416 	blt	r5,zero,80c384 <__udivsi3+0x5c>
  80c334:	00800804 	movi	r2,32
  80c338:	00c00044 	movi	r3,1
  80c33c:	00000206 	br	80c348 <__udivsi3+0x20>
  80c340:	10000e26 	beq	r2,zero,80c37c <__udivsi3+0x54>
  80c344:	28000516 	blt	r5,zero,80c35c <__udivsi3+0x34>
  80c348:	294b883a 	add	r5,r5,r5
  80c34c:	10bfffc4 	addi	r2,r2,-1
  80c350:	18c7883a 	add	r3,r3,r3
  80c354:	293ffa36 	bltu	r5,r4,80c340 <__udivsi3+0x18>
  80c358:	18000826 	beq	r3,zero,80c37c <__udivsi3+0x54>
  80c35c:	0005883a 	mov	r2,zero
  80c360:	31400236 	bltu	r6,r5,80c36c <__udivsi3+0x44>
  80c364:	314dc83a 	sub	r6,r6,r5
  80c368:	10c4b03a 	or	r2,r2,r3
  80c36c:	1806d07a 	srli	r3,r3,1
  80c370:	280ad07a 	srli	r5,r5,1
  80c374:	183ffa1e 	bne	r3,zero,80c360 <__udivsi3+0x38>
  80c378:	f800283a 	ret
  80c37c:	0005883a 	mov	r2,zero
  80c380:	f800283a 	ret
  80c384:	00c00044 	movi	r3,1
  80c388:	003ff406 	br	80c35c <__udivsi3+0x34>

0080c38c <__umodsi3>:
  80c38c:	2005883a 	mov	r2,r4
  80c390:	2900132e 	bgeu	r5,r4,80c3e0 <__umodsi3+0x54>
  80c394:	28001216 	blt	r5,zero,80c3e0 <__umodsi3+0x54>
  80c398:	01800804 	movi	r6,32
  80c39c:	00c00044 	movi	r3,1
  80c3a0:	00000206 	br	80c3ac <__umodsi3+0x20>
  80c3a4:	30000c26 	beq	r6,zero,80c3d8 <__umodsi3+0x4c>
  80c3a8:	28000516 	blt	r5,zero,80c3c0 <__umodsi3+0x34>
  80c3ac:	294b883a 	add	r5,r5,r5
  80c3b0:	31bfffc4 	addi	r6,r6,-1
  80c3b4:	18c7883a 	add	r3,r3,r3
  80c3b8:	293ffa36 	bltu	r5,r4,80c3a4 <__umodsi3+0x18>
  80c3bc:	18000626 	beq	r3,zero,80c3d8 <__umodsi3+0x4c>
  80c3c0:	1806d07a 	srli	r3,r3,1
  80c3c4:	11400136 	bltu	r2,r5,80c3cc <__umodsi3+0x40>
  80c3c8:	1145c83a 	sub	r2,r2,r5
  80c3cc:	280ad07a 	srli	r5,r5,1
  80c3d0:	183ffb1e 	bne	r3,zero,80c3c0 <__umodsi3+0x34>
  80c3d4:	f800283a 	ret
  80c3d8:	2005883a 	mov	r2,r4
  80c3dc:	f800283a 	ret
  80c3e0:	00c00044 	movi	r3,1
  80c3e4:	003ff606 	br	80c3c0 <__umodsi3+0x34>

0080c3e8 <__mulsi3>:
  80c3e8:	0005883a 	mov	r2,zero
  80c3ec:	20000726 	beq	r4,zero,80c40c <__mulsi3+0x24>
  80c3f0:	20c0004c 	andi	r3,r4,1
  80c3f4:	2008d07a 	srli	r4,r4,1
  80c3f8:	18000126 	beq	r3,zero,80c400 <__mulsi3+0x18>
  80c3fc:	1145883a 	add	r2,r2,r5
  80c400:	294b883a 	add	r5,r5,r5
  80c404:	203ffa1e 	bne	r4,zero,80c3f0 <__mulsi3+0x8>
  80c408:	f800283a 	ret
  80c40c:	f800283a 	ret

0080c410 <__adddf3>:
  80c410:	02000434 	movhi	r8,16
  80c414:	423fffc4 	addi	r8,r8,-1
  80c418:	2806d53a 	srli	r3,r5,20
  80c41c:	3804d53a 	srli	r2,r7,20
  80c420:	2a14703a 	and	r10,r5,r8
  80c424:	3a12703a 	and	r9,r7,r8
  80c428:	280ad7fa 	srli	r5,r5,31
  80c42c:	501490fa 	slli	r10,r10,3
  80c430:	2018d77a 	srli	r12,r4,29
  80c434:	481290fa 	slli	r9,r9,3
  80c438:	3016d77a 	srli	r11,r6,29
  80c43c:	380ed7fa 	srli	r7,r7,31
  80c440:	defffb04 	addi	sp,sp,-20
  80c444:	dc800215 	stw	r18,8(sp)
  80c448:	dc000015 	stw	r16,0(sp)
  80c44c:	1c81ffcc 	andi	r18,r3,2047
  80c450:	1081ffcc 	andi	r2,r2,2047
  80c454:	dfc00415 	stw	ra,16(sp)
  80c458:	dcc00315 	stw	r19,12(sp)
  80c45c:	dc400115 	stw	r17,4(sp)
  80c460:	201c90fa 	slli	r14,r4,3
  80c464:	301a90fa 	slli	r13,r6,3
  80c468:	2821883a 	mov	r16,r5
  80c46c:	6294b03a 	or	r10,r12,r10
  80c470:	5a52b03a 	or	r9,r11,r9
  80c474:	9087c83a 	sub	r3,r18,r2
  80c478:	29c06126 	beq	r5,r7,80c600 <__adddf3+0x1f0>
  80c47c:	00c0550e 	bge	zero,r3,80c5d4 <__adddf3+0x1c4>
  80c480:	10007326 	beq	r2,zero,80c650 <__adddf3+0x240>
  80c484:	9081ffd8 	cmpnei	r2,r18,2047
  80c488:	1000bd26 	beq	r2,zero,80c780 <__adddf3+0x370>
  80c48c:	4a402034 	orhi	r9,r9,128
  80c490:	18800e48 	cmpgei	r2,r3,57
  80c494:	1000ef1e 	bne	r2,zero,80c854 <__adddf3+0x444>
  80c498:	18800808 	cmpgei	r2,r3,32
  80c49c:	1001321e 	bne	r2,zero,80c968 <__adddf3+0x558>
  80c4a0:	00800804 	movi	r2,32
  80c4a4:	10c5c83a 	sub	r2,r2,r3
  80c4a8:	68c8d83a 	srl	r4,r13,r3
  80c4ac:	48a2983a 	sll	r17,r9,r2
  80c4b0:	689a983a 	sll	r13,r13,r2
  80c4b4:	48c6d83a 	srl	r3,r9,r3
  80c4b8:	8922b03a 	or	r17,r17,r4
  80c4bc:	681ac03a 	cmpne	r13,r13,zero
  80c4c0:	8b62b03a 	or	r17,r17,r13
  80c4c4:	50d5c83a 	sub	r10,r10,r3
  80c4c8:	7463c83a 	sub	r17,r14,r17
  80c4cc:	7451803a 	cmpltu	r8,r14,r17
  80c4d0:	5211c83a 	sub	r8,r10,r8
  80c4d4:	4080202c 	andhi	r2,r8,128
  80c4d8:	10008d26 	beq	r2,zero,80c710 <__adddf3+0x300>
  80c4dc:	02402034 	movhi	r9,128
  80c4e0:	4a7fffc4 	addi	r9,r9,-1
  80c4e4:	4266703a 	and	r19,r8,r9
  80c4e8:	9800b326 	beq	r19,zero,80c7b8 <__adddf3+0x3a8>
  80c4ec:	9809883a 	mov	r4,r19
  80c4f0:	08006440 	call	800644 <__clzsi2>
  80c4f4:	10fffe04 	addi	r3,r2,-8
  80c4f8:	02000804 	movi	r8,32
  80c4fc:	40d1c83a 	sub	r8,r8,r3
  80c500:	8a10d83a 	srl	r8,r17,r8
  80c504:	98d2983a 	sll	r9,r19,r3
  80c508:	88e2983a 	sll	r17,r17,r3
  80c50c:	4250b03a 	or	r8,r8,r9
  80c510:	1c80b216 	blt	r3,r18,80c7dc <__adddf3+0x3cc>
  80c514:	1c87c83a 	sub	r3,r3,r18
  80c518:	19000044 	addi	r4,r3,1
  80c51c:	20800808 	cmpgei	r2,r4,32
  80c520:	10006f1e 	bne	r2,zero,80c6e0 <__adddf3+0x2d0>
  80c524:	00800804 	movi	r2,32
  80c528:	1105c83a 	sub	r2,r2,r4
  80c52c:	8906d83a 	srl	r3,r17,r4
  80c530:	88a2983a 	sll	r17,r17,r2
  80c534:	4084983a 	sll	r2,r8,r2
  80c538:	4110d83a 	srl	r8,r8,r4
  80c53c:	8822c03a 	cmpne	r17,r17,zero
  80c540:	10c4b03a 	or	r2,r2,r3
  80c544:	1462b03a 	or	r17,r2,r17
  80c548:	0025883a 	mov	r18,zero
  80c54c:	888001cc 	andi	r2,r17,7
  80c550:	10000726 	beq	r2,zero,80c570 <__adddf3+0x160>
  80c554:	888003cc 	andi	r2,r17,15
  80c558:	10800120 	cmpeqi	r2,r2,4
  80c55c:	1000041e 	bne	r2,zero,80c570 <__adddf3+0x160>
  80c560:	88c00104 	addi	r3,r17,4
  80c564:	1c63803a 	cmpltu	r17,r3,r17
  80c568:	4451883a 	add	r8,r8,r17
  80c56c:	1823883a 	mov	r17,r3
  80c570:	4080202c 	andhi	r2,r8,128
  80c574:	10006826 	beq	r2,zero,80c718 <__adddf3+0x308>
  80c578:	90c00044 	addi	r3,r18,1
  80c57c:	1881ffe0 	cmpeqi	r2,r3,2047
  80c580:	18c1ffcc 	andi	r3,r3,2047
  80c584:	10007a1e 	bne	r2,zero,80c770 <__adddf3+0x360>
  80c588:	00bfe034 	movhi	r2,65408
  80c58c:	10bfffc4 	addi	r2,r2,-1
  80c590:	4090703a 	and	r8,r8,r2
  80c594:	4004977a 	slli	r2,r8,29
  80c598:	4010927a 	slli	r8,r8,9
  80c59c:	8822d0fa 	srli	r17,r17,3
  80c5a0:	4010d33a 	srli	r8,r8,12
  80c5a4:	1444b03a 	or	r2,r2,r17
  80c5a8:	1806953a 	slli	r3,r3,20
  80c5ac:	802097fa 	slli	r16,r16,31
  80c5b0:	1a06b03a 	or	r3,r3,r8
  80c5b4:	1c06b03a 	or	r3,r3,r16
  80c5b8:	dfc00417 	ldw	ra,16(sp)
  80c5bc:	dcc00317 	ldw	r19,12(sp)
  80c5c0:	dc800217 	ldw	r18,8(sp)
  80c5c4:	dc400117 	ldw	r17,4(sp)
  80c5c8:	dc000017 	ldw	r16,0(sp)
  80c5cc:	dec00504 	addi	sp,sp,20
  80c5d0:	f800283a 	ret
  80c5d4:	18002626 	beq	r3,zero,80c670 <__adddf3+0x260>
  80c5d8:	1487c83a 	sub	r3,r2,r18
  80c5dc:	9000ba1e 	bne	r18,zero,80c8c8 <__adddf3+0x4b8>
  80c5e0:	5388b03a 	or	r4,r10,r14
  80c5e4:	20011826 	beq	r4,zero,80ca48 <__adddf3+0x638>
  80c5e8:	193fffc4 	addi	r4,r3,-1
  80c5ec:	20015726 	beq	r4,zero,80cb4c <__adddf3+0x73c>
  80c5f0:	18c1ffd8 	cmpnei	r3,r3,2047
  80c5f4:	18013026 	beq	r3,zero,80cab8 <__adddf3+0x6a8>
  80c5f8:	2007883a 	mov	r3,r4
  80c5fc:	0000b506 	br	80c8d4 <__adddf3+0x4c4>
  80c600:	00c07b0e 	bge	zero,r3,80c7f0 <__adddf3+0x3e0>
  80c604:	10002e26 	beq	r2,zero,80c6c0 <__adddf3+0x2b0>
  80c608:	9081ffd8 	cmpnei	r2,r18,2047
  80c60c:	10005c26 	beq	r2,zero,80c780 <__adddf3+0x370>
  80c610:	4a402034 	orhi	r9,r9,128
  80c614:	18800e48 	cmpgei	r2,r3,57
  80c618:	10004b1e 	bne	r2,zero,80c748 <__adddf3+0x338>
  80c61c:	18800808 	cmpgei	r2,r3,32
  80c620:	1000ec26 	beq	r2,zero,80c9d4 <__adddf3+0x5c4>
  80c624:	1c7ff804 	addi	r17,r3,-32
  80c628:	19000820 	cmpeqi	r4,r3,32
  80c62c:	4c44d83a 	srl	r2,r9,r17
  80c630:	2000041e 	bne	r4,zero,80c644 <__adddf3+0x234>
  80c634:	01001004 	movi	r4,64
  80c638:	20c7c83a 	sub	r3,r4,r3
  80c63c:	48d2983a 	sll	r9,r9,r3
  80c640:	6a5ab03a 	or	r13,r13,r9
  80c644:	6822c03a 	cmpne	r17,r13,zero
  80c648:	88a2b03a 	or	r17,r17,r2
  80c64c:	00004006 	br	80c750 <__adddf3+0x340>
  80c650:	4b44b03a 	or	r2,r9,r13
  80c654:	10008226 	beq	r2,zero,80c860 <__adddf3+0x450>
  80c658:	18bfffc4 	addi	r2,r3,-1
  80c65c:	10011026 	beq	r2,zero,80caa0 <__adddf3+0x690>
  80c660:	18c1ffd8 	cmpnei	r3,r3,2047
  80c664:	18004626 	beq	r3,zero,80c780 <__adddf3+0x370>
  80c668:	1007883a 	mov	r3,r2
  80c66c:	003f8806 	br	80c490 <__adddf3+0x80>
  80c670:	90800044 	addi	r2,r18,1
  80c674:	1081ff8c 	andi	r2,r2,2046
  80c678:	1000a51e 	bne	r2,zero,80c910 <__adddf3+0x500>
  80c67c:	538ab03a 	or	r5,r10,r14
  80c680:	4b44b03a 	or	r2,r9,r13
  80c684:	9000f81e 	bne	r18,zero,80ca68 <__adddf3+0x658>
  80c688:	28013726 	beq	r5,zero,80cb68 <__adddf3+0x758>
  80c68c:	10011226 	beq	r2,zero,80cad8 <__adddf3+0x6c8>
  80c690:	7363c83a 	sub	r17,r14,r13
  80c694:	7445803a 	cmpltu	r2,r14,r17
  80c698:	5251c83a 	sub	r8,r10,r9
  80c69c:	4091c83a 	sub	r8,r8,r2
  80c6a0:	4080202c 	andhi	r2,r8,128
  80c6a4:	10018f26 	beq	r2,zero,80cce4 <__adddf3+0x8d4>
  80c6a8:	6ba3c83a 	sub	r17,r13,r14
  80c6ac:	4a95c83a 	sub	r10,r9,r10
  80c6b0:	6c51803a 	cmpltu	r8,r13,r17
  80c6b4:	5211c83a 	sub	r8,r10,r8
  80c6b8:	3821883a 	mov	r16,r7
  80c6bc:	003fa306 	br	80c54c <__adddf3+0x13c>
  80c6c0:	4b44b03a 	or	r2,r9,r13
  80c6c4:	10006626 	beq	r2,zero,80c860 <__adddf3+0x450>
  80c6c8:	18bfffc4 	addi	r2,r3,-1
  80c6cc:	1000ec26 	beq	r2,zero,80ca80 <__adddf3+0x670>
  80c6d0:	18c1ffd8 	cmpnei	r3,r3,2047
  80c6d4:	18012d26 	beq	r3,zero,80cb8c <__adddf3+0x77c>
  80c6d8:	1007883a 	mov	r3,r2
  80c6dc:	003fcd06 	br	80c614 <__adddf3+0x204>
  80c6e0:	18fff844 	addi	r3,r3,-31
  80c6e4:	20800820 	cmpeqi	r2,r4,32
  80c6e8:	40c6d83a 	srl	r3,r8,r3
  80c6ec:	1000041e 	bne	r2,zero,80c700 <__adddf3+0x2f0>
  80c6f0:	00801004 	movi	r2,64
  80c6f4:	1109c83a 	sub	r4,r2,r4
  80c6f8:	4110983a 	sll	r8,r8,r4
  80c6fc:	8a22b03a 	or	r17,r17,r8
  80c700:	8822c03a 	cmpne	r17,r17,zero
  80c704:	88e2b03a 	or	r17,r17,r3
  80c708:	0011883a 	mov	r8,zero
  80c70c:	0025883a 	mov	r18,zero
  80c710:	888001cc 	andi	r2,r17,7
  80c714:	103f8f1e 	bne	r2,zero,80c554 <__adddf3+0x144>
  80c718:	8822d0fa 	srli	r17,r17,3
  80c71c:	4004977a 	slli	r2,r8,29
  80c720:	4014d0fa 	srli	r10,r8,3
  80c724:	9007883a 	mov	r3,r18
  80c728:	8884b03a 	or	r2,r17,r2
  80c72c:	1901ffe0 	cmpeqi	r4,r3,2047
  80c730:	2000191e 	bne	r4,zero,80c798 <__adddf3+0x388>
  80c734:	02000434 	movhi	r8,16
  80c738:	423fffc4 	addi	r8,r8,-1
  80c73c:	5210703a 	and	r8,r10,r8
  80c740:	18c1ffcc 	andi	r3,r3,2047
  80c744:	003f9806 	br	80c5a8 <__adddf3+0x198>
  80c748:	4b62b03a 	or	r17,r9,r13
  80c74c:	8822c03a 	cmpne	r17,r17,zero
  80c750:	8ba3883a 	add	r17,r17,r14
  80c754:	8b91803a 	cmpltu	r8,r17,r14
  80c758:	4291883a 	add	r8,r8,r10
  80c75c:	4080202c 	andhi	r2,r8,128
  80c760:	103feb26 	beq	r2,zero,80c710 <__adddf3+0x300>
  80c764:	94800044 	addi	r18,r18,1
  80c768:	9081ffe0 	cmpeqi	r2,r18,2047
  80c76c:	10007426 	beq	r2,zero,80c940 <__adddf3+0x530>
  80c770:	00c1ffc4 	movi	r3,2047
  80c774:	0011883a 	mov	r8,zero
  80c778:	0005883a 	mov	r2,zero
  80c77c:	003f8a06 	br	80c5a8 <__adddf3+0x198>
  80c780:	500a977a 	slli	r5,r10,29
  80c784:	00c80034 	movhi	r3,8192
  80c788:	18ffffc4 	addi	r3,r3,-1
  80c78c:	5014d0fa 	srli	r10,r10,3
  80c790:	20c4703a 	and	r2,r4,r3
  80c794:	1144b03a 	or	r2,r2,r5
  80c798:	1286b03a 	or	r3,r2,r10
  80c79c:	18015426 	beq	r3,zero,80ccf0 <__adddf3+0x8e0>
  80c7a0:	00c00434 	movhi	r3,16
  80c7a4:	18ffffc4 	addi	r3,r3,-1
  80c7a8:	52000234 	orhi	r8,r10,8
  80c7ac:	40d0703a 	and	r8,r8,r3
  80c7b0:	00c1ffc4 	movi	r3,2047
  80c7b4:	003f7c06 	br	80c5a8 <__adddf3+0x198>
  80c7b8:	8809883a 	mov	r4,r17
  80c7bc:	08006440 	call	800644 <__clzsi2>
  80c7c0:	10c00604 	addi	r3,r2,24
  80c7c4:	19000808 	cmpgei	r4,r3,32
  80c7c8:	203f4b26 	beq	r4,zero,80c4f8 <__adddf3+0xe8>
  80c7cc:	123ffe04 	addi	r8,r2,-8
  80c7d0:	8a10983a 	sll	r8,r17,r8
  80c7d4:	0023883a 	mov	r17,zero
  80c7d8:	1cbf4e0e 	bge	r3,r18,80c514 <__adddf3+0x104>
  80c7dc:	00bfe034 	movhi	r2,65408
  80c7e0:	10bfffc4 	addi	r2,r2,-1
  80c7e4:	90e5c83a 	sub	r18,r18,r3
  80c7e8:	4090703a 	and	r8,r8,r2
  80c7ec:	003f5706 	br	80c54c <__adddf3+0x13c>
  80c7f0:	18002226 	beq	r3,zero,80c87c <__adddf3+0x46c>
  80c7f4:	1487c83a 	sub	r3,r2,r18
  80c7f8:	90006e26 	beq	r18,zero,80c9b4 <__adddf3+0x5a4>
  80c7fc:	1101ffd8 	cmpnei	r4,r2,2047
  80c800:	2000e926 	beq	r4,zero,80cba8 <__adddf3+0x798>
  80c804:	52802034 	orhi	r10,r10,128
  80c808:	19000e48 	cmpgei	r4,r3,57
  80c80c:	2000b91e 	bne	r4,zero,80caf4 <__adddf3+0x6e4>
  80c810:	19000808 	cmpgei	r4,r3,32
  80c814:	2001101e 	bne	r4,zero,80cc58 <__adddf3+0x848>
  80c818:	01000804 	movi	r4,32
  80c81c:	20c9c83a 	sub	r4,r4,r3
  80c820:	5122983a 	sll	r17,r10,r4
  80c824:	70cad83a 	srl	r5,r14,r3
  80c828:	7108983a 	sll	r4,r14,r4
  80c82c:	50d4d83a 	srl	r10,r10,r3
  80c830:	8962b03a 	or	r17,r17,r5
  80c834:	2008c03a 	cmpne	r4,r4,zero
  80c838:	8922b03a 	or	r17,r17,r4
  80c83c:	4a93883a 	add	r9,r9,r10
  80c840:	8b63883a 	add	r17,r17,r13
  80c844:	8b51803a 	cmpltu	r8,r17,r13
  80c848:	4251883a 	add	r8,r8,r9
  80c84c:	1025883a 	mov	r18,r2
  80c850:	003fc206 	br	80c75c <__adddf3+0x34c>
  80c854:	4b62b03a 	or	r17,r9,r13
  80c858:	8822c03a 	cmpne	r17,r17,zero
  80c85c:	003f1a06 	br	80c4c8 <__adddf3+0xb8>
  80c860:	500c977a 	slli	r6,r10,29
  80c864:	01480034 	movhi	r5,8192
  80c868:	297fffc4 	addi	r5,r5,-1
  80c86c:	2144703a 	and	r2,r4,r5
  80c870:	5014d0fa 	srli	r10,r10,3
  80c874:	1184b03a 	or	r2,r2,r6
  80c878:	003fac06 	br	80c72c <__adddf3+0x31c>
  80c87c:	90800044 	addi	r2,r18,1
  80c880:	1141ff8c 	andi	r5,r2,2046
  80c884:	28005e1e 	bne	r5,zero,80ca00 <__adddf3+0x5f0>
  80c888:	5384b03a 	or	r2,r10,r14
  80c88c:	9000a71e 	bne	r18,zero,80cb2c <__adddf3+0x71c>
  80c890:	1000e526 	beq	r2,zero,80cc28 <__adddf3+0x818>
  80c894:	4b44b03a 	or	r2,r9,r13
  80c898:	10008f26 	beq	r2,zero,80cad8 <__adddf3+0x6c8>
  80c89c:	7363883a 	add	r17,r14,r13
  80c8a0:	5255883a 	add	r10,r10,r9
  80c8a4:	8b91803a 	cmpltu	r8,r17,r14
  80c8a8:	5211883a 	add	r8,r10,r8
  80c8ac:	4080202c 	andhi	r2,r8,128
  80c8b0:	103f9726 	beq	r2,zero,80c710 <__adddf3+0x300>
  80c8b4:	00bfe034 	movhi	r2,65408
  80c8b8:	10bfffc4 	addi	r2,r2,-1
  80c8bc:	4090703a 	and	r8,r8,r2
  80c8c0:	04800044 	movi	r18,1
  80c8c4:	003f9206 	br	80c710 <__adddf3+0x300>
  80c8c8:	1101ffd8 	cmpnei	r4,r2,2047
  80c8cc:	20007a26 	beq	r4,zero,80cab8 <__adddf3+0x6a8>
  80c8d0:	52802034 	orhi	r10,r10,128
  80c8d4:	19000e48 	cmpgei	r4,r3,57
  80c8d8:	20002e1e 	bne	r4,zero,80c994 <__adddf3+0x584>
  80c8dc:	19000808 	cmpgei	r4,r3,32
  80c8e0:	2000871e 	bne	r4,zero,80cb00 <__adddf3+0x6f0>
  80c8e4:	01000804 	movi	r4,32
  80c8e8:	20c9c83a 	sub	r4,r4,r3
  80c8ec:	5122983a 	sll	r17,r10,r4
  80c8f0:	70cad83a 	srl	r5,r14,r3
  80c8f4:	711c983a 	sll	r14,r14,r4
  80c8f8:	50d4d83a 	srl	r10,r10,r3
  80c8fc:	8962b03a 	or	r17,r17,r5
  80c900:	701cc03a 	cmpne	r14,r14,zero
  80c904:	8ba2b03a 	or	r17,r17,r14
  80c908:	4a93c83a 	sub	r9,r9,r10
  80c90c:	00002306 	br	80c99c <__adddf3+0x58c>
  80c910:	7363c83a 	sub	r17,r14,r13
  80c914:	5267c83a 	sub	r19,r10,r9
  80c918:	7451803a 	cmpltu	r8,r14,r17
  80c91c:	9a27c83a 	sub	r19,r19,r8
  80c920:	9880202c 	andhi	r2,r19,128
  80c924:	1000421e 	bne	r2,zero,80ca30 <__adddf3+0x620>
  80c928:	8cc4b03a 	or	r2,r17,r19
  80c92c:	103eee1e 	bne	r2,zero,80c4e8 <__adddf3+0xd8>
  80c930:	0015883a 	mov	r10,zero
  80c934:	0021883a 	mov	r16,zero
  80c938:	003f7e06 	br	80c734 <__adddf3+0x324>
  80c93c:	04800084 	movi	r18,2
  80c940:	00bfe034 	movhi	r2,65408
  80c944:	10bfffc4 	addi	r2,r2,-1
  80c948:	8806d07a 	srli	r3,r17,1
  80c94c:	4090703a 	and	r8,r8,r2
  80c950:	400497fa 	slli	r2,r8,31
  80c954:	8c40004c 	andi	r17,r17,1
  80c958:	1c62b03a 	or	r17,r3,r17
  80c95c:	4010d07a 	srli	r8,r8,1
  80c960:	1462b03a 	or	r17,r2,r17
  80c964:	003ef906 	br	80c54c <__adddf3+0x13c>
  80c968:	1c7ff804 	addi	r17,r3,-32
  80c96c:	19000820 	cmpeqi	r4,r3,32
  80c970:	4c44d83a 	srl	r2,r9,r17
  80c974:	2000041e 	bne	r4,zero,80c988 <__adddf3+0x578>
  80c978:	01001004 	movi	r4,64
  80c97c:	20c7c83a 	sub	r3,r4,r3
  80c980:	48d2983a 	sll	r9,r9,r3
  80c984:	6a5ab03a 	or	r13,r13,r9
  80c988:	6822c03a 	cmpne	r17,r13,zero
  80c98c:	88a2b03a 	or	r17,r17,r2
  80c990:	003ecd06 	br	80c4c8 <__adddf3+0xb8>
  80c994:	5394b03a 	or	r10,r10,r14
  80c998:	5022c03a 	cmpne	r17,r10,zero
  80c99c:	6c63c83a 	sub	r17,r13,r17
  80c9a0:	6c51803a 	cmpltu	r8,r13,r17
  80c9a4:	4a11c83a 	sub	r8,r9,r8
  80c9a8:	3821883a 	mov	r16,r7
  80c9ac:	1025883a 	mov	r18,r2
  80c9b0:	003ec806 	br	80c4d4 <__adddf3+0xc4>
  80c9b4:	5388b03a 	or	r4,r10,r14
  80c9b8:	20008226 	beq	r4,zero,80cbc4 <__adddf3+0x7b4>
  80c9bc:	193fffc4 	addi	r4,r3,-1
  80c9c0:	2000b026 	beq	r4,zero,80cc84 <__adddf3+0x874>
  80c9c4:	18c1ffd8 	cmpnei	r3,r3,2047
  80c9c8:	18007726 	beq	r3,zero,80cba8 <__adddf3+0x798>
  80c9cc:	2007883a 	mov	r3,r4
  80c9d0:	003f8d06 	br	80c808 <__adddf3+0x3f8>
  80c9d4:	00800804 	movi	r2,32
  80c9d8:	10c5c83a 	sub	r2,r2,r3
  80c9dc:	68c8d83a 	srl	r4,r13,r3
  80c9e0:	48a2983a 	sll	r17,r9,r2
  80c9e4:	689a983a 	sll	r13,r13,r2
  80c9e8:	48c6d83a 	srl	r3,r9,r3
  80c9ec:	8922b03a 	or	r17,r17,r4
  80c9f0:	681ac03a 	cmpne	r13,r13,zero
  80c9f4:	8b62b03a 	or	r17,r17,r13
  80c9f8:	50d5883a 	add	r10,r10,r3
  80c9fc:	003f5406 	br	80c750 <__adddf3+0x340>
  80ca00:	10c1ffe0 	cmpeqi	r3,r2,2047
  80ca04:	183f5a1e 	bne	r3,zero,80c770 <__adddf3+0x360>
  80ca08:	7351883a 	add	r8,r14,r13
  80ca0c:	4387803a 	cmpltu	r3,r8,r14
  80ca10:	5255883a 	add	r10,r10,r9
  80ca14:	50c7883a 	add	r3,r10,r3
  80ca18:	401ad07a 	srli	r13,r8,1
  80ca1c:	182297fa 	slli	r17,r3,31
  80ca20:	1810d07a 	srli	r8,r3,1
  80ca24:	1025883a 	mov	r18,r2
  80ca28:	8b62b03a 	or	r17,r17,r13
  80ca2c:	003f3806 	br	80c710 <__adddf3+0x300>
  80ca30:	6ba3c83a 	sub	r17,r13,r14
  80ca34:	4a93c83a 	sub	r9,r9,r10
  80ca38:	6c51803a 	cmpltu	r8,r13,r17
  80ca3c:	4a27c83a 	sub	r19,r9,r8
  80ca40:	3821883a 	mov	r16,r7
  80ca44:	003ea806 	br	80c4e8 <__adddf3+0xd8>
  80ca48:	480a977a 	slli	r5,r9,29
  80ca4c:	01080034 	movhi	r4,8192
  80ca50:	213fffc4 	addi	r4,r4,-1
  80ca54:	3104703a 	and	r2,r6,r4
  80ca58:	4814d0fa 	srli	r10,r9,3
  80ca5c:	1144b03a 	or	r2,r2,r5
  80ca60:	3821883a 	mov	r16,r7
  80ca64:	003f3106 	br	80c72c <__adddf3+0x31c>
  80ca68:	28005d1e 	bne	r5,zero,80cbe0 <__adddf3+0x7d0>
  80ca6c:	1000121e 	bne	r2,zero,80cab8 <__adddf3+0x6a8>
  80ca70:	0021883a 	mov	r16,zero
  80ca74:	4015883a 	mov	r10,r8
  80ca78:	00bfffc4 	movi	r2,-1
  80ca7c:	003f4806 	br	80c7a0 <__adddf3+0x390>
  80ca80:	7363883a 	add	r17,r14,r13
  80ca84:	5255883a 	add	r10,r10,r9
  80ca88:	8b91803a 	cmpltu	r8,r17,r14
  80ca8c:	5211883a 	add	r8,r10,r8
  80ca90:	4080202c 	andhi	r2,r8,128
  80ca94:	103fa91e 	bne	r2,zero,80c93c <__adddf3+0x52c>
  80ca98:	04800044 	movi	r18,1
  80ca9c:	003f1c06 	br	80c710 <__adddf3+0x300>
  80caa0:	7363c83a 	sub	r17,r14,r13
  80caa4:	5255c83a 	sub	r10,r10,r9
  80caa8:	7451803a 	cmpltu	r8,r14,r17
  80caac:	5211c83a 	sub	r8,r10,r8
  80cab0:	04800044 	movi	r18,1
  80cab4:	003e8706 	br	80c4d4 <__adddf3+0xc4>
  80cab8:	4806977a 	slli	r3,r9,29
  80cabc:	00880034 	movhi	r2,8192
  80cac0:	10bfffc4 	addi	r2,r2,-1
  80cac4:	3084703a 	and	r2,r6,r2
  80cac8:	4814d0fa 	srli	r10,r9,3
  80cacc:	10c4b03a 	or	r2,r2,r3
  80cad0:	3821883a 	mov	r16,r7
  80cad4:	003f3006 	br	80c798 <__adddf3+0x388>
  80cad8:	500a977a 	slli	r5,r10,29
  80cadc:	00880034 	movhi	r2,8192
  80cae0:	10bfffc4 	addi	r2,r2,-1
  80cae4:	2084703a 	and	r2,r4,r2
  80cae8:	5014d0fa 	srli	r10,r10,3
  80caec:	1144b03a 	or	r2,r2,r5
  80caf0:	003f1006 	br	80c734 <__adddf3+0x324>
  80caf4:	5394b03a 	or	r10,r10,r14
  80caf8:	5022c03a 	cmpne	r17,r10,zero
  80cafc:	003f5006 	br	80c840 <__adddf3+0x430>
  80cb00:	1c7ff804 	addi	r17,r3,-32
  80cb04:	19400820 	cmpeqi	r5,r3,32
  80cb08:	5448d83a 	srl	r4,r10,r17
  80cb0c:	2800041e 	bne	r5,zero,80cb20 <__adddf3+0x710>
  80cb10:	01401004 	movi	r5,64
  80cb14:	28c7c83a 	sub	r3,r5,r3
  80cb18:	50d4983a 	sll	r10,r10,r3
  80cb1c:	729cb03a 	or	r14,r14,r10
  80cb20:	7022c03a 	cmpne	r17,r14,zero
  80cb24:	8922b03a 	or	r17,r17,r4
  80cb28:	003f9c06 	br	80c99c <__adddf3+0x58c>
  80cb2c:	10005a1e 	bne	r2,zero,80cc98 <__adddf3+0x888>
  80cb30:	4804977a 	slli	r2,r9,29
  80cb34:	00c80034 	movhi	r3,8192
  80cb38:	18ffffc4 	addi	r3,r3,-1
  80cb3c:	30cc703a 	and	r6,r6,r3
  80cb40:	4814d0fa 	srli	r10,r9,3
  80cb44:	1184b03a 	or	r2,r2,r6
  80cb48:	003f1306 	br	80c798 <__adddf3+0x388>
  80cb4c:	6ba3c83a 	sub	r17,r13,r14
  80cb50:	4a95c83a 	sub	r10,r9,r10
  80cb54:	6c51803a 	cmpltu	r8,r13,r17
  80cb58:	5211c83a 	sub	r8,r10,r8
  80cb5c:	3821883a 	mov	r16,r7
  80cb60:	04800044 	movi	r18,1
  80cb64:	003e5b06 	br	80c4d4 <__adddf3+0xc4>
  80cb68:	103f7126 	beq	r2,zero,80c930 <__adddf3+0x520>
  80cb6c:	4808977a 	slli	r4,r9,29
  80cb70:	00880034 	movhi	r2,8192
  80cb74:	10bfffc4 	addi	r2,r2,-1
  80cb78:	3084703a 	and	r2,r6,r2
  80cb7c:	4814d0fa 	srli	r10,r9,3
  80cb80:	1104b03a 	or	r2,r2,r4
  80cb84:	3821883a 	mov	r16,r7
  80cb88:	003eea06 	br	80c734 <__adddf3+0x324>
  80cb8c:	5006977a 	slli	r3,r10,29
  80cb90:	00880034 	movhi	r2,8192
  80cb94:	10bfffc4 	addi	r2,r2,-1
  80cb98:	2084703a 	and	r2,r4,r2
  80cb9c:	5014d0fa 	srli	r10,r10,3
  80cba0:	10c4b03a 	or	r2,r2,r3
  80cba4:	003efc06 	br	80c798 <__adddf3+0x388>
  80cba8:	4806977a 	slli	r3,r9,29
  80cbac:	00880034 	movhi	r2,8192
  80cbb0:	10bfffc4 	addi	r2,r2,-1
  80cbb4:	3084703a 	and	r2,r6,r2
  80cbb8:	4814d0fa 	srli	r10,r9,3
  80cbbc:	10c4b03a 	or	r2,r2,r3
  80cbc0:	003ef506 	br	80c798 <__adddf3+0x388>
  80cbc4:	4808977a 	slli	r4,r9,29
  80cbc8:	00880034 	movhi	r2,8192
  80cbcc:	10bfffc4 	addi	r2,r2,-1
  80cbd0:	3084703a 	and	r2,r6,r2
  80cbd4:	4814d0fa 	srli	r10,r9,3
  80cbd8:	1104b03a 	or	r2,r2,r4
  80cbdc:	003ed306 	br	80c72c <__adddf3+0x31c>
  80cbe0:	500a977a 	slli	r5,r10,29
  80cbe4:	5014d0fa 	srli	r10,r10,3
  80cbe8:	10001626 	beq	r2,zero,80cc44 <__adddf3+0x834>
  80cbec:	00c80034 	movhi	r3,8192
  80cbf0:	18ffffc4 	addi	r3,r3,-1
  80cbf4:	20c4703a 	and	r2,r4,r3
  80cbf8:	5100022c 	andhi	r4,r10,8
  80cbfc:	1144b03a 	or	r2,r2,r5
  80cc00:	203ee526 	beq	r4,zero,80c798 <__adddf3+0x388>
  80cc04:	4808d0fa 	srli	r4,r9,3
  80cc08:	2140022c 	andhi	r5,r4,8
  80cc0c:	283ee21e 	bne	r5,zero,80c798 <__adddf3+0x388>
  80cc10:	4812977a 	slli	r9,r9,29
  80cc14:	30c4703a 	and	r2,r6,r3
  80cc18:	3821883a 	mov	r16,r7
  80cc1c:	1244b03a 	or	r2,r2,r9
  80cc20:	2015883a 	mov	r10,r4
  80cc24:	003edc06 	br	80c798 <__adddf3+0x388>
  80cc28:	4804977a 	slli	r2,r9,29
  80cc2c:	01080034 	movhi	r4,8192
  80cc30:	213fffc4 	addi	r4,r4,-1
  80cc34:	310c703a 	and	r6,r6,r4
  80cc38:	4814d0fa 	srli	r10,r9,3
  80cc3c:	1184b03a 	or	r2,r2,r6
  80cc40:	003ebc06 	br	80c734 <__adddf3+0x324>
  80cc44:	00880034 	movhi	r2,8192
  80cc48:	10bfffc4 	addi	r2,r2,-1
  80cc4c:	2084703a 	and	r2,r4,r2
  80cc50:	1144b03a 	or	r2,r2,r5
  80cc54:	003ed006 	br	80c798 <__adddf3+0x388>
  80cc58:	193ff804 	addi	r4,r3,-32
  80cc5c:	19400820 	cmpeqi	r5,r3,32
  80cc60:	5108d83a 	srl	r4,r10,r4
  80cc64:	2800041e 	bne	r5,zero,80cc78 <__adddf3+0x868>
  80cc68:	01401004 	movi	r5,64
  80cc6c:	28c7c83a 	sub	r3,r5,r3
  80cc70:	50d4983a 	sll	r10,r10,r3
  80cc74:	729cb03a 	or	r14,r14,r10
  80cc78:	7022c03a 	cmpne	r17,r14,zero
  80cc7c:	8922b03a 	or	r17,r17,r4
  80cc80:	003eef06 	br	80c840 <__adddf3+0x430>
  80cc84:	7363883a 	add	r17,r14,r13
  80cc88:	5255883a 	add	r10,r10,r9
  80cc8c:	8b51803a 	cmpltu	r8,r17,r13
  80cc90:	5211883a 	add	r8,r10,r8
  80cc94:	003f7e06 	br	80ca90 <__adddf3+0x680>
  80cc98:	4b50b03a 	or	r8,r9,r13
  80cc9c:	500a977a 	slli	r5,r10,29
  80cca0:	5014d0fa 	srli	r10,r10,3
  80cca4:	403fe726 	beq	r8,zero,80cc44 <__adddf3+0x834>
  80cca8:	00c80034 	movhi	r3,8192
  80ccac:	18ffffc4 	addi	r3,r3,-1
  80ccb0:	20c4703a 	and	r2,r4,r3
  80ccb4:	5100022c 	andhi	r4,r10,8
  80ccb8:	1144b03a 	or	r2,r2,r5
  80ccbc:	203eb626 	beq	r4,zero,80c798 <__adddf3+0x388>
  80ccc0:	4808d0fa 	srli	r4,r9,3
  80ccc4:	2140022c 	andhi	r5,r4,8
  80ccc8:	283eb31e 	bne	r5,zero,80c798 <__adddf3+0x388>
  80cccc:	4804977a 	slli	r2,r9,29
  80ccd0:	30cc703a 	and	r6,r6,r3
  80ccd4:	3821883a 	mov	r16,r7
  80ccd8:	3084b03a 	or	r2,r6,r2
  80ccdc:	2015883a 	mov	r10,r4
  80cce0:	003ead06 	br	80c798 <__adddf3+0x388>
  80cce4:	8a04b03a 	or	r2,r17,r8
  80cce8:	103f1126 	beq	r2,zero,80c930 <__adddf3+0x520>
  80ccec:	003e8806 	br	80c710 <__adddf3+0x300>
  80ccf0:	0005883a 	mov	r2,zero
  80ccf4:	00c1ffc4 	movi	r3,2047
  80ccf8:	0011883a 	mov	r8,zero
  80ccfc:	003e2a06 	br	80c5a8 <__adddf3+0x198>

0080cd00 <__divdf3>:
  80cd00:	2810d53a 	srli	r8,r5,20
  80cd04:	defff004 	addi	sp,sp,-64
  80cd08:	dc000615 	stw	r16,24(sp)
  80cd0c:	04000434 	movhi	r16,16
  80cd10:	df000e15 	stw	fp,56(sp)
  80cd14:	ddc00d15 	stw	r23,52(sp)
  80cd18:	dd800c15 	stw	r22,48(sp)
  80cd1c:	dd000a15 	stw	r20,40(sp)
  80cd20:	843fffc4 	addi	r16,r16,-1
  80cd24:	dfc00f15 	stw	ra,60(sp)
  80cd28:	dd400b15 	stw	r21,44(sp)
  80cd2c:	dcc00915 	stw	r19,36(sp)
  80cd30:	dc800815 	stw	r18,32(sp)
  80cd34:	dc400715 	stw	r17,28(sp)
  80cd38:	4201ffcc 	andi	r8,r8,2047
  80cd3c:	282ed7fa 	srli	r23,r5,31
  80cd40:	3039883a 	mov	fp,r6
  80cd44:	382d883a 	mov	r22,r7
  80cd48:	2029883a 	mov	r20,r4
  80cd4c:	2c20703a 	and	r16,r5,r16
  80cd50:	40006826 	beq	r8,zero,80cef4 <__divdf3+0x1f4>
  80cd54:	4081ffe0 	cmpeqi	r2,r8,2047
  80cd58:	1000791e 	bne	r2,zero,80cf40 <__divdf3+0x240>
  80cd5c:	2026d77a 	srli	r19,r4,29
  80cd60:	800a90fa 	slli	r5,r16,3
  80cd64:	202890fa 	slli	r20,r4,3
  80cd68:	44bf0044 	addi	r18,r8,-1023
  80cd6c:	994ab03a 	or	r5,r19,r5
  80cd70:	2cc02034 	orhi	r19,r5,128
  80cd74:	0021883a 	mov	r16,zero
  80cd78:	0023883a 	mov	r17,zero
  80cd7c:	b010d53a 	srli	r8,r22,20
  80cd80:	00c00434 	movhi	r3,16
  80cd84:	18ffffc4 	addi	r3,r3,-1
  80cd88:	4201ffcc 	andi	r8,r8,2047
  80cd8c:	b02ad7fa 	srli	r21,r22,31
  80cd90:	b0ec703a 	and	r22,r22,r3
  80cd94:	40004626 	beq	r8,zero,80ceb0 <__divdf3+0x1b0>
  80cd98:	4081ffe0 	cmpeqi	r2,r8,2047
  80cd9c:	10006f1e 	bne	r2,zero,80cf5c <__divdf3+0x25c>
  80cda0:	b00690fa 	slli	r3,r22,3
  80cda4:	e004d77a 	srli	r2,fp,29
  80cda8:	e01290fa 	slli	r9,fp,3
  80cdac:	423f0044 	addi	r8,r8,-1023
  80cdb0:	10c6b03a 	or	r3,r2,r3
  80cdb4:	1d802034 	orhi	r22,r3,128
  80cdb8:	9225c83a 	sub	r18,r18,r8
  80cdbc:	0007883a 	mov	r3,zero
  80cdc0:	80800428 	cmpgeui	r2,r16,16
  80cdc4:	bd4ef03a 	xor	r7,r23,r21
  80cdc8:	1000a71e 	bne	r2,zero,80d068 <__divdf3+0x368>
  80cdcc:	800c90ba 	slli	r6,r16,2
  80cdd0:	00802074 	movhi	r2,129
  80cdd4:	3085883a 	add	r2,r6,r2
  80cdd8:	10b37817 	ldw	r2,-12832(r2)
  80cddc:	1000683a 	jmp	r2
  80cde0:	0080d068 	cmpgeui	r2,zero,833
  80cde4:	0080ce8c 	andi	r2,zero,826
  80cde8:	0080ce3c 	xorhi	r2,zero,824
  80cdec:	0080ce9c 	xori	r2,zero,826
  80cdf0:	0080ce3c 	xorhi	r2,zero,824
  80cdf4:	0080d00c 	andi	r2,zero,832
  80cdf8:	0080ce3c 	xorhi	r2,zero,824
  80cdfc:	0080ce9c 	xori	r2,zero,826
  80ce00:	0080ce8c 	andi	r2,zero,826
  80ce04:	0080ce8c 	andi	r2,zero,826
  80ce08:	0080d00c 	andi	r2,zero,832
  80ce0c:	0080ce9c 	xori	r2,zero,826
  80ce10:	0080ce20 	cmpeqi	r2,zero,824
  80ce14:	0080ce20 	cmpeqi	r2,zero,824
  80ce18:	0080ce20 	cmpeqi	r2,zero,824
  80ce1c:	0080d024 	muli	r2,zero,832
  80ce20:	b80f883a 	mov	r7,r23
  80ce24:	888000a0 	cmpeqi	r2,r17,2
  80ce28:	1000181e 	bne	r2,zero,80ce8c <__divdf3+0x18c>
  80ce2c:	888000e0 	cmpeqi	r2,r17,3
  80ce30:	1001f61e 	bne	r2,zero,80d60c <__divdf3+0x90c>
  80ce34:	88800060 	cmpeqi	r2,r17,1
  80ce38:	10006126 	beq	r2,zero,80cfc0 <__divdf3+0x2c0>
  80ce3c:	0007883a 	mov	r3,zero
  80ce40:	000b883a 	mov	r5,zero
  80ce44:	0029883a 	mov	r20,zero
  80ce48:	1806953a 	slli	r3,r3,20
  80ce4c:	380e97fa 	slli	r7,r7,31
  80ce50:	a005883a 	mov	r2,r20
  80ce54:	1946b03a 	or	r3,r3,r5
  80ce58:	19c6b03a 	or	r3,r3,r7
  80ce5c:	dfc00f17 	ldw	ra,60(sp)
  80ce60:	df000e17 	ldw	fp,56(sp)
  80ce64:	ddc00d17 	ldw	r23,52(sp)
  80ce68:	dd800c17 	ldw	r22,48(sp)
  80ce6c:	dd400b17 	ldw	r21,44(sp)
  80ce70:	dd000a17 	ldw	r20,40(sp)
  80ce74:	dcc00917 	ldw	r19,36(sp)
  80ce78:	dc800817 	ldw	r18,32(sp)
  80ce7c:	dc400717 	ldw	r17,28(sp)
  80ce80:	dc000617 	ldw	r16,24(sp)
  80ce84:	dec01004 	addi	sp,sp,64
  80ce88:	f800283a 	ret
  80ce8c:	00c1ffc4 	movi	r3,2047
  80ce90:	000b883a 	mov	r5,zero
  80ce94:	0029883a 	mov	r20,zero
  80ce98:	003feb06 	br	80ce48 <__divdf3+0x148>
  80ce9c:	a80f883a 	mov	r7,r21
  80cea0:	b027883a 	mov	r19,r22
  80cea4:	4829883a 	mov	r20,r9
  80cea8:	1823883a 	mov	r17,r3
  80ceac:	003fdd06 	br	80ce24 <__divdf3+0x124>
  80ceb0:	b712b03a 	or	r9,r22,fp
  80ceb4:	48003e26 	beq	r9,zero,80cfb0 <__divdf3+0x2b0>
  80ceb8:	b0017726 	beq	r22,zero,80d498 <__divdf3+0x798>
  80cebc:	b009883a 	mov	r4,r22
  80cec0:	08006440 	call	800644 <__clzsi2>
  80cec4:	117ffd44 	addi	r5,r2,-11
  80cec8:	01000744 	movi	r4,29
  80cecc:	127ffe04 	addi	r9,r2,-8
  80ced0:	2149c83a 	sub	r4,r4,r5
  80ced4:	b246983a 	sll	r3,r22,r9
  80ced8:	e108d83a 	srl	r4,fp,r4
  80cedc:	e252983a 	sll	r9,fp,r9
  80cee0:	20ecb03a 	or	r22,r4,r3
  80cee4:	1491883a 	add	r8,r2,r18
  80cee8:	4480fcc4 	addi	r18,r8,1011
  80ceec:	0007883a 	mov	r3,zero
  80cef0:	003fb306 	br	80cdc0 <__divdf3+0xc0>
  80cef4:	8126b03a 	or	r19,r16,r4
  80cef8:	2023883a 	mov	r17,r4
  80cefc:	98002726 	beq	r19,zero,80cf9c <__divdf3+0x29c>
  80cf00:	80017026 	beq	r16,zero,80d4c4 <__divdf3+0x7c4>
  80cf04:	8009883a 	mov	r4,r16
  80cf08:	08006440 	call	800644 <__clzsi2>
  80cf0c:	113ffd44 	addi	r4,r2,-11
  80cf10:	00c00744 	movi	r3,29
  80cf14:	14fffe04 	addi	r19,r2,-8
  80cf18:	1907c83a 	sub	r3,r3,r4
  80cf1c:	84ca983a 	sll	r5,r16,r19
  80cf20:	88c6d83a 	srl	r3,r17,r3
  80cf24:	8ce8983a 	sll	r20,r17,r19
  80cf28:	1966b03a 	or	r19,r3,r5
  80cf2c:	023f0344 	movi	r8,-1011
  80cf30:	40a5c83a 	sub	r18,r8,r2
  80cf34:	0021883a 	mov	r16,zero
  80cf38:	0023883a 	mov	r17,zero
  80cf3c:	003f8f06 	br	80cd7c <__divdf3+0x7c>
  80cf40:	8126b03a 	or	r19,r16,r4
  80cf44:	9800101e 	bne	r19,zero,80cf88 <__divdf3+0x288>
  80cf48:	0029883a 	mov	r20,zero
  80cf4c:	04000204 	movi	r16,8
  80cf50:	0481ffc4 	movi	r18,2047
  80cf54:	04400084 	movi	r17,2
  80cf58:	003f8806 	br	80cd7c <__divdf3+0x7c>
  80cf5c:	b712b03a 	or	r9,r22,fp
  80cf60:	94be0044 	addi	r18,r18,-2047
  80cf64:	4800041e 	bne	r9,zero,80cf78 <__divdf3+0x278>
  80cf68:	84000094 	ori	r16,r16,2
  80cf6c:	002d883a 	mov	r22,zero
  80cf70:	00c00084 	movi	r3,2
  80cf74:	003f9206 	br	80cdc0 <__divdf3+0xc0>
  80cf78:	840000d4 	ori	r16,r16,3
  80cf7c:	e013883a 	mov	r9,fp
  80cf80:	00c000c4 	movi	r3,3
  80cf84:	003f8e06 	br	80cdc0 <__divdf3+0xc0>
  80cf88:	8027883a 	mov	r19,r16
  80cf8c:	0481ffc4 	movi	r18,2047
  80cf90:	04000304 	movi	r16,12
  80cf94:	044000c4 	movi	r17,3
  80cf98:	003f7806 	br	80cd7c <__divdf3+0x7c>
  80cf9c:	0029883a 	mov	r20,zero
  80cfa0:	04000104 	movi	r16,4
  80cfa4:	0025883a 	mov	r18,zero
  80cfa8:	04400044 	movi	r17,1
  80cfac:	003f7306 	br	80cd7c <__divdf3+0x7c>
  80cfb0:	84000054 	ori	r16,r16,1
  80cfb4:	002d883a 	mov	r22,zero
  80cfb8:	00c00044 	movi	r3,1
  80cfbc:	003f8006 	br	80cdc0 <__divdf3+0xc0>
  80cfc0:	9440ffc4 	addi	r17,r18,1023
  80cfc4:	0441050e 	bge	zero,r17,80d3dc <__divdf3+0x6dc>
  80cfc8:	a08001cc 	andi	r2,r20,7
  80cfcc:	10016c1e 	bne	r2,zero,80d580 <__divdf3+0x880>
  80cfd0:	a008d0fa 	srli	r4,r20,3
  80cfd4:	9880402c 	andhi	r2,r19,256
  80cfd8:	10000426 	beq	r2,zero,80cfec <__divdf3+0x2ec>
  80cfdc:	00bfc034 	movhi	r2,65280
  80cfe0:	10bfffc4 	addi	r2,r2,-1
  80cfe4:	98a6703a 	and	r19,r19,r2
  80cfe8:	94410004 	addi	r17,r18,1024
  80cfec:	8881ffc8 	cmpgei	r2,r17,2047
  80cff0:	103fa61e 	bne	r2,zero,80ce8c <__divdf3+0x18c>
  80cff4:	9828977a 	slli	r20,r19,29
  80cff8:	980a927a 	slli	r5,r19,9
  80cffc:	88c1ffcc 	andi	r3,r17,2047
  80d000:	a128b03a 	or	r20,r20,r4
  80d004:	280ad33a 	srli	r5,r5,12
  80d008:	003f8f06 	br	80ce48 <__divdf3+0x148>
  80d00c:	01400434 	movhi	r5,16
  80d010:	000f883a 	mov	r7,zero
  80d014:	297fffc4 	addi	r5,r5,-1
  80d018:	053fffc4 	movi	r20,-1
  80d01c:	00c1ffc4 	movi	r3,2047
  80d020:	003f8906 	br	80ce48 <__divdf3+0x148>
  80d024:	9880022c 	andhi	r2,r19,8
  80d028:	10000926 	beq	r2,zero,80d050 <__divdf3+0x350>
  80d02c:	b080022c 	andhi	r2,r22,8
  80d030:	1000071e 	bne	r2,zero,80d050 <__divdf3+0x350>
  80d034:	00800434 	movhi	r2,16
  80d038:	b1400234 	orhi	r5,r22,8
  80d03c:	10bfffc4 	addi	r2,r2,-1
  80d040:	288a703a 	and	r5,r5,r2
  80d044:	a80f883a 	mov	r7,r21
  80d048:	4829883a 	mov	r20,r9
  80d04c:	003ff306 	br	80d01c <__divdf3+0x31c>
  80d050:	00800434 	movhi	r2,16
  80d054:	99400234 	orhi	r5,r19,8
  80d058:	10bfffc4 	addi	r2,r2,-1
  80d05c:	288a703a 	and	r5,r5,r2
  80d060:	b80f883a 	mov	r7,r23
  80d064:	003fed06 	br	80d01c <__divdf3+0x31c>
  80d068:	b4c10536 	bltu	r22,r19,80d480 <__divdf3+0x780>
  80d06c:	b4c10326 	beq	r22,r19,80d47c <__divdf3+0x77c>
  80d070:	94bfffc4 	addi	r18,r18,-1
  80d074:	a039883a 	mov	fp,r20
  80d078:	9821883a 	mov	r16,r19
  80d07c:	0023883a 	mov	r17,zero
  80d080:	b006923a 	slli	r3,r22,8
  80d084:	482cd63a 	srli	r22,r9,24
  80d088:	8009883a 	mov	r4,r16
  80d08c:	182ed43a 	srli	r23,r3,16
  80d090:	b0ecb03a 	or	r22,r22,r3
  80d094:	d9c00015 	stw	r7,0(sp)
  80d098:	b80b883a 	mov	r5,r23
  80d09c:	482a923a 	slli	r21,r9,8
  80d0a0:	b53fffcc 	andi	r20,r22,65535
  80d0a4:	080c3280 	call	80c328 <__udivsi3>
  80d0a8:	100b883a 	mov	r5,r2
  80d0ac:	a009883a 	mov	r4,r20
  80d0b0:	1027883a 	mov	r19,r2
  80d0b4:	080c3e80 	call	80c3e8 <__mulsi3>
  80d0b8:	8009883a 	mov	r4,r16
  80d0bc:	b80b883a 	mov	r5,r23
  80d0c0:	1021883a 	mov	r16,r2
  80d0c4:	080c38c0 	call	80c38c <__umodsi3>
  80d0c8:	1004943a 	slli	r2,r2,16
  80d0cc:	e008d43a 	srli	r4,fp,16
  80d0d0:	d9c00017 	ldw	r7,0(sp)
  80d0d4:	2088b03a 	or	r4,r4,r2
  80d0d8:	2400042e 	bgeu	r4,r16,80d0ec <__divdf3+0x3ec>
  80d0dc:	2589883a 	add	r4,r4,r22
  80d0e0:	98bfffc4 	addi	r2,r19,-1
  80d0e4:	2581082e 	bgeu	r4,r22,80d508 <__divdf3+0x808>
  80d0e8:	1027883a 	mov	r19,r2
  80d0ec:	2421c83a 	sub	r16,r4,r16
  80d0f0:	b80b883a 	mov	r5,r23
  80d0f4:	8009883a 	mov	r4,r16
  80d0f8:	d9c00215 	stw	r7,8(sp)
  80d0fc:	080c3280 	call	80c328 <__udivsi3>
  80d100:	100b883a 	mov	r5,r2
  80d104:	a009883a 	mov	r4,r20
  80d108:	d8800115 	stw	r2,4(sp)
  80d10c:	080c3e80 	call	80c3e8 <__mulsi3>
  80d110:	b80b883a 	mov	r5,r23
  80d114:	8009883a 	mov	r4,r16
  80d118:	d8800015 	stw	r2,0(sp)
  80d11c:	080c38c0 	call	80c38c <__umodsi3>
  80d120:	100c943a 	slli	r6,r2,16
  80d124:	d8c00017 	ldw	r3,0(sp)
  80d128:	e73fffcc 	andi	fp,fp,65535
  80d12c:	e18cb03a 	or	r6,fp,r6
  80d130:	da000117 	ldw	r8,4(sp)
  80d134:	d9c00217 	ldw	r7,8(sp)
  80d138:	30c0042e 	bgeu	r6,r3,80d14c <__divdf3+0x44c>
  80d13c:	358d883a 	add	r6,r6,r22
  80d140:	40bfffc4 	addi	r2,r8,-1
  80d144:	3580ec2e 	bgeu	r6,r22,80d4f8 <__divdf3+0x7f8>
  80d148:	1011883a 	mov	r8,r2
  80d14c:	9826943a 	slli	r19,r19,16
  80d150:	af3fffcc 	andi	fp,r21,65535
  80d154:	30c7c83a 	sub	r3,r6,r3
  80d158:	9a26b03a 	or	r19,r19,r8
  80d15c:	9810d43a 	srli	r8,r19,16
  80d160:	9abfffcc 	andi	r10,r19,65535
  80d164:	5009883a 	mov	r4,r10
  80d168:	e00b883a 	mov	r5,fp
  80d16c:	d9c00515 	stw	r7,20(sp)
  80d170:	d8c00315 	stw	r3,12(sp)
  80d174:	da800415 	stw	r10,16(sp)
  80d178:	da000015 	stw	r8,0(sp)
  80d17c:	080c3e80 	call	80c3e8 <__mulsi3>
  80d180:	da000017 	ldw	r8,0(sp)
  80d184:	e00b883a 	mov	r5,fp
  80d188:	d8800215 	stw	r2,8(sp)
  80d18c:	4009883a 	mov	r4,r8
  80d190:	080c3e80 	call	80c3e8 <__mulsi3>
  80d194:	da000017 	ldw	r8,0(sp)
  80d198:	a820d43a 	srli	r16,r21,16
  80d19c:	d8800115 	stw	r2,4(sp)
  80d1a0:	4009883a 	mov	r4,r8
  80d1a4:	800b883a 	mov	r5,r16
  80d1a8:	080c3e80 	call	80c3e8 <__mulsi3>
  80d1ac:	da800417 	ldw	r10,16(sp)
  80d1b0:	8009883a 	mov	r4,r16
  80d1b4:	d8800015 	stw	r2,0(sp)
  80d1b8:	500b883a 	mov	r5,r10
  80d1bc:	080c3e80 	call	80c3e8 <__mulsi3>
  80d1c0:	d9800217 	ldw	r6,8(sp)
  80d1c4:	da000117 	ldw	r8,4(sp)
  80d1c8:	da400017 	ldw	r9,0(sp)
  80d1cc:	3008d43a 	srli	r4,r6,16
  80d1d0:	1205883a 	add	r2,r2,r8
  80d1d4:	d8c00317 	ldw	r3,12(sp)
  80d1d8:	2089883a 	add	r4,r4,r2
  80d1dc:	d9c00517 	ldw	r7,20(sp)
  80d1e0:	2200022e 	bgeu	r4,r8,80d1ec <__divdf3+0x4ec>
  80d1e4:	00800074 	movhi	r2,1
  80d1e8:	4893883a 	add	r9,r9,r2
  80d1ec:	200ad43a 	srli	r5,r4,16
  80d1f0:	2008943a 	slli	r4,r4,16
  80d1f4:	31bfffcc 	andi	r6,r6,65535
  80d1f8:	2a4b883a 	add	r5,r5,r9
  80d1fc:	218d883a 	add	r6,r4,r6
  80d200:	19409436 	bltu	r3,r5,80d454 <__divdf3+0x754>
  80d204:	19409226 	beq	r3,r5,80d450 <__divdf3+0x750>
  80d208:	898dc83a 	sub	r6,r17,r6
  80d20c:	89a3803a 	cmpltu	r17,r17,r6
  80d210:	1947c83a 	sub	r3,r3,r5
  80d214:	1c47c83a 	sub	r3,r3,r17
  80d218:	9440ffc4 	addi	r17,r18,1023
  80d21c:	b0c0d326 	beq	r22,r3,80d56c <__divdf3+0x86c>
  80d220:	1809883a 	mov	r4,r3
  80d224:	b80b883a 	mov	r5,r23
  80d228:	d9800315 	stw	r6,12(sp)
  80d22c:	d9c00215 	stw	r7,8(sp)
  80d230:	d8c00015 	stw	r3,0(sp)
  80d234:	080c3280 	call	80c328 <__udivsi3>
  80d238:	100b883a 	mov	r5,r2
  80d23c:	a009883a 	mov	r4,r20
  80d240:	d8800115 	stw	r2,4(sp)
  80d244:	080c3e80 	call	80c3e8 <__mulsi3>
  80d248:	d8c00017 	ldw	r3,0(sp)
  80d24c:	b80b883a 	mov	r5,r23
  80d250:	d8800015 	stw	r2,0(sp)
  80d254:	1809883a 	mov	r4,r3
  80d258:	080c38c0 	call	80c38c <__umodsi3>
  80d25c:	d9800317 	ldw	r6,12(sp)
  80d260:	1006943a 	slli	r3,r2,16
  80d264:	da400017 	ldw	r9,0(sp)
  80d268:	3008d43a 	srli	r4,r6,16
  80d26c:	da000117 	ldw	r8,4(sp)
  80d270:	d9c00217 	ldw	r7,8(sp)
  80d274:	20c6b03a 	or	r3,r4,r3
  80d278:	1a40062e 	bgeu	r3,r9,80d294 <__divdf3+0x594>
  80d27c:	1d87883a 	add	r3,r3,r22
  80d280:	40bfffc4 	addi	r2,r8,-1
  80d284:	1d80c836 	bltu	r3,r22,80d5a8 <__divdf3+0x8a8>
  80d288:	1a40c72e 	bgeu	r3,r9,80d5a8 <__divdf3+0x8a8>
  80d28c:	423fff84 	addi	r8,r8,-2
  80d290:	1d87883a 	add	r3,r3,r22
  80d294:	1a47c83a 	sub	r3,r3,r9
  80d298:	1809883a 	mov	r4,r3
  80d29c:	b80b883a 	mov	r5,r23
  80d2a0:	d9800415 	stw	r6,16(sp)
  80d2a4:	d9c00315 	stw	r7,12(sp)
  80d2a8:	da000215 	stw	r8,8(sp)
  80d2ac:	d8c00115 	stw	r3,4(sp)
  80d2b0:	080c3280 	call	80c328 <__udivsi3>
  80d2b4:	100b883a 	mov	r5,r2
  80d2b8:	a009883a 	mov	r4,r20
  80d2bc:	d8800015 	stw	r2,0(sp)
  80d2c0:	080c3e80 	call	80c3e8 <__mulsi3>
  80d2c4:	d8c00117 	ldw	r3,4(sp)
  80d2c8:	b80b883a 	mov	r5,r23
  80d2cc:	102f883a 	mov	r23,r2
  80d2d0:	1809883a 	mov	r4,r3
  80d2d4:	080c38c0 	call	80c38c <__umodsi3>
  80d2d8:	d9800417 	ldw	r6,16(sp)
  80d2dc:	1004943a 	slli	r2,r2,16
  80d2e0:	da400017 	ldw	r9,0(sp)
  80d2e4:	31bfffcc 	andi	r6,r6,65535
  80d2e8:	308cb03a 	or	r6,r6,r2
  80d2ec:	da000217 	ldw	r8,8(sp)
  80d2f0:	d9c00317 	ldw	r7,12(sp)
  80d2f4:	35c0062e 	bgeu	r6,r23,80d310 <__divdf3+0x610>
  80d2f8:	358d883a 	add	r6,r6,r22
  80d2fc:	48bfffc4 	addi	r2,r9,-1
  80d300:	3580a736 	bltu	r6,r22,80d5a0 <__divdf3+0x8a0>
  80d304:	35c0a62e 	bgeu	r6,r23,80d5a0 <__divdf3+0x8a0>
  80d308:	4a7fff84 	addi	r9,r9,-2
  80d30c:	358d883a 	add	r6,r6,r22
  80d310:	4028943a 	slli	r20,r8,16
  80d314:	35d5c83a 	sub	r10,r6,r23
  80d318:	e009883a 	mov	r4,fp
  80d31c:	a268b03a 	or	r20,r20,r9
  80d320:	a23fffcc 	andi	r8,r20,65535
  80d324:	a02ed43a 	srli	r23,r20,16
  80d328:	400b883a 	mov	r5,r8
  80d32c:	d9c00315 	stw	r7,12(sp)
  80d330:	da800215 	stw	r10,8(sp)
  80d334:	da000115 	stw	r8,4(sp)
  80d338:	080c3e80 	call	80c3e8 <__mulsi3>
  80d33c:	e00b883a 	mov	r5,fp
  80d340:	b809883a 	mov	r4,r23
  80d344:	1039883a 	mov	fp,r2
  80d348:	080c3e80 	call	80c3e8 <__mulsi3>
  80d34c:	8009883a 	mov	r4,r16
  80d350:	b80b883a 	mov	r5,r23
  80d354:	d8800015 	stw	r2,0(sp)
  80d358:	080c3e80 	call	80c3e8 <__mulsi3>
  80d35c:	da000117 	ldw	r8,4(sp)
  80d360:	8009883a 	mov	r4,r16
  80d364:	1021883a 	mov	r16,r2
  80d368:	400b883a 	mov	r5,r8
  80d36c:	080c3e80 	call	80c3e8 <__mulsi3>
  80d370:	d9800017 	ldw	r6,0(sp)
  80d374:	e006d43a 	srli	r3,fp,16
  80d378:	da800217 	ldw	r10,8(sp)
  80d37c:	1185883a 	add	r2,r2,r6
  80d380:	1887883a 	add	r3,r3,r2
  80d384:	d9c00317 	ldw	r7,12(sp)
  80d388:	1980022e 	bgeu	r3,r6,80d394 <__divdf3+0x694>
  80d38c:	00800074 	movhi	r2,1
  80d390:	80a1883a 	add	r16,r16,r2
  80d394:	1808d43a 	srli	r4,r3,16
  80d398:	1806943a 	slli	r3,r3,16
  80d39c:	e73fffcc 	andi	fp,fp,65535
  80d3a0:	2409883a 	add	r4,r4,r16
  80d3a4:	1f07883a 	add	r3,r3,fp
  80d3a8:	51000436 	bltu	r10,r4,80d3bc <__divdf3+0x6bc>
  80d3ac:	51000226 	beq	r10,r4,80d3b8 <__divdf3+0x6b8>
  80d3b0:	a5000054 	ori	r20,r20,1
  80d3b4:	003f0306 	br	80cfc4 <__divdf3+0x2c4>
  80d3b8:	183f0226 	beq	r3,zero,80cfc4 <__divdf3+0x2c4>
  80d3bc:	b28d883a 	add	r6,r22,r10
  80d3c0:	a0bfffc4 	addi	r2,r20,-1
  80d3c4:	35806536 	bltu	r6,r22,80d55c <__divdf3+0x85c>
  80d3c8:	31008036 	bltu	r6,r4,80d5cc <__divdf3+0x8cc>
  80d3cc:	31009426 	beq	r6,r4,80d620 <__divdf3+0x920>
  80d3d0:	1029883a 	mov	r20,r2
  80d3d4:	003ff606 	br	80d3b0 <__divdf3+0x6b0>
  80d3d8:	053fffc4 	movi	r20,-1
  80d3dc:	01400044 	movi	r5,1
  80d3e0:	2c4bc83a 	sub	r5,r5,r17
  80d3e4:	28800e48 	cmpgei	r2,r5,57
  80d3e8:	103e941e 	bne	r2,zero,80ce3c <__divdf3+0x13c>
  80d3ec:	28800808 	cmpgei	r2,r5,32
  80d3f0:	1000491e 	bne	r2,zero,80d518 <__divdf3+0x818>
  80d3f4:	92010784 	addi	r8,r18,1054
  80d3f8:	9a04983a 	sll	r2,r19,r8
  80d3fc:	a146d83a 	srl	r3,r20,r5
  80d400:	a210983a 	sll	r8,r20,r8
  80d404:	994ad83a 	srl	r5,r19,r5
  80d408:	10e8b03a 	or	r20,r2,r3
  80d40c:	4010c03a 	cmpne	r8,r8,zero
  80d410:	a228b03a 	or	r20,r20,r8
  80d414:	a08001cc 	andi	r2,r20,7
  80d418:	10000726 	beq	r2,zero,80d438 <__divdf3+0x738>
  80d41c:	a08003cc 	andi	r2,r20,15
  80d420:	10800120 	cmpeqi	r2,r2,4
  80d424:	1000041e 	bne	r2,zero,80d438 <__divdf3+0x738>
  80d428:	a0800104 	addi	r2,r20,4
  80d42c:	1529803a 	cmpltu	r20,r2,r20
  80d430:	2d0b883a 	add	r5,r5,r20
  80d434:	1029883a 	mov	r20,r2
  80d438:	2880202c 	andhi	r2,r5,128
  80d43c:	10006f26 	beq	r2,zero,80d5fc <__divdf3+0x8fc>
  80d440:	00c00044 	movi	r3,1
  80d444:	000b883a 	mov	r5,zero
  80d448:	0029883a 	mov	r20,zero
  80d44c:	003e7e06 	br	80ce48 <__divdf3+0x148>
  80d450:	89bf6d2e 	bgeu	r17,r6,80d208 <__divdf3+0x508>
  80d454:	8d63883a 	add	r17,r17,r21
  80d458:	8d45803a 	cmpltu	r2,r17,r21
  80d45c:	1585883a 	add	r2,r2,r22
  80d460:	1887883a 	add	r3,r3,r2
  80d464:	98bfffc4 	addi	r2,r19,-1
  80d468:	b0c0202e 	bgeu	r22,r3,80d4ec <__divdf3+0x7ec>
  80d46c:	19405136 	bltu	r3,r5,80d5b4 <__divdf3+0x8b4>
  80d470:	28c04f26 	beq	r5,r3,80d5b0 <__divdf3+0x8b0>
  80d474:	1027883a 	mov	r19,r2
  80d478:	003f6306 	br	80d208 <__divdf3+0x508>
  80d47c:	a27efc36 	bltu	r20,r9,80d070 <__divdf3+0x370>
  80d480:	983897fa 	slli	fp,r19,31
  80d484:	a004d07a 	srli	r2,r20,1
  80d488:	9820d07a 	srli	r16,r19,1
  80d48c:	a02297fa 	slli	r17,r20,31
  80d490:	e0b8b03a 	or	fp,fp,r2
  80d494:	003efa06 	br	80d080 <__divdf3+0x380>
  80d498:	e009883a 	mov	r4,fp
  80d49c:	08006440 	call	800644 <__clzsi2>
  80d4a0:	11400544 	addi	r5,r2,21
  80d4a4:	29000748 	cmpgei	r4,r5,29
  80d4a8:	1007883a 	mov	r3,r2
  80d4ac:	10800804 	addi	r2,r2,32
  80d4b0:	203e8526 	beq	r4,zero,80cec8 <__divdf3+0x1c8>
  80d4b4:	18fffe04 	addi	r3,r3,-8
  80d4b8:	e0ec983a 	sll	r22,fp,r3
  80d4bc:	0013883a 	mov	r9,zero
  80d4c0:	003e8806 	br	80cee4 <__divdf3+0x1e4>
  80d4c4:	08006440 	call	800644 <__clzsi2>
  80d4c8:	11000544 	addi	r4,r2,21
  80d4cc:	20c00748 	cmpgei	r3,r4,29
  80d4d0:	100b883a 	mov	r5,r2
  80d4d4:	10800804 	addi	r2,r2,32
  80d4d8:	183e8d26 	beq	r3,zero,80cf10 <__divdf3+0x210>
  80d4dc:	297ffe04 	addi	r5,r5,-8
  80d4e0:	a166983a 	sll	r19,r20,r5
  80d4e4:	0029883a 	mov	r20,zero
  80d4e8:	003e9006 	br	80cf2c <__divdf3+0x22c>
  80d4ec:	b0ffe11e 	bne	r22,r3,80d474 <__divdf3+0x774>
  80d4f0:	8d7fe036 	bltu	r17,r21,80d474 <__divdf3+0x774>
  80d4f4:	003fdd06 	br	80d46c <__divdf3+0x76c>
  80d4f8:	30ff132e 	bgeu	r6,r3,80d148 <__divdf3+0x448>
  80d4fc:	423fff84 	addi	r8,r8,-2
  80d500:	358d883a 	add	r6,r6,r22
  80d504:	003f1106 	br	80d14c <__divdf3+0x44c>
  80d508:	243ef72e 	bgeu	r4,r16,80d0e8 <__divdf3+0x3e8>
  80d50c:	9cffff84 	addi	r19,r19,-2
  80d510:	2589883a 	add	r4,r4,r22
  80d514:	003ef506 	br	80d0ec <__divdf3+0x3ec>
  80d518:	00fff844 	movi	r3,-31
  80d51c:	1c47c83a 	sub	r3,r3,r17
  80d520:	29400820 	cmpeqi	r5,r5,32
  80d524:	98c6d83a 	srl	r3,r19,r3
  80d528:	2800031e 	bne	r5,zero,80d538 <__divdf3+0x838>
  80d52c:	91410f84 	addi	r5,r18,1086
  80d530:	994a983a 	sll	r5,r19,r5
  80d534:	a168b03a 	or	r20,r20,r5
  80d538:	a028c03a 	cmpne	r20,r20,zero
  80d53c:	a0e8b03a 	or	r20,r20,r3
  80d540:	a4c001cc 	andi	r19,r20,7
  80d544:	9800291e 	bne	r19,zero,80d5ec <__divdf3+0x8ec>
  80d548:	000b883a 	mov	r5,zero
  80d54c:	a028d0fa 	srli	r20,r20,3
  80d550:	0007883a 	mov	r3,zero
  80d554:	a4e8b03a 	or	r20,r20,r19
  80d558:	003e3b06 	br	80ce48 <__divdf3+0x148>
  80d55c:	1029883a 	mov	r20,r2
  80d560:	313f931e 	bne	r6,r4,80d3b0 <__divdf3+0x6b0>
  80d564:	1d7f921e 	bne	r3,r21,80d3b0 <__divdf3+0x6b0>
  80d568:	003e9606 	br	80cfc4 <__divdf3+0x2c4>
  80d56c:	047f9a0e 	bge	zero,r17,80d3d8 <__divdf3+0x6d8>
  80d570:	0009883a 	mov	r4,zero
  80d574:	05000044 	movi	r20,1
  80d578:	9d27883a 	add	r19,r19,r20
  80d57c:	003e9506 	br	80cfd4 <__divdf3+0x2d4>
  80d580:	a08003cc 	andi	r2,r20,15
  80d584:	10800118 	cmpnei	r2,r2,4
  80d588:	103e9126 	beq	r2,zero,80cfd0 <__divdf3+0x2d0>
  80d58c:	a1000104 	addi	r4,r20,4
  80d590:	00bffec4 	movi	r2,-5
  80d594:	2008d0fa 	srli	r4,r4,3
  80d598:	1529803a 	cmpltu	r20,r2,r20
  80d59c:	003ff606 	br	80d578 <__divdf3+0x878>
  80d5a0:	1013883a 	mov	r9,r2
  80d5a4:	003f5a06 	br	80d310 <__divdf3+0x610>
  80d5a8:	1011883a 	mov	r8,r2
  80d5ac:	003f3906 	br	80d294 <__divdf3+0x594>
  80d5b0:	89bfb02e 	bgeu	r17,r6,80d474 <__divdf3+0x774>
  80d5b4:	8d63883a 	add	r17,r17,r21
  80d5b8:	8d45803a 	cmpltu	r2,r17,r21
  80d5bc:	1585883a 	add	r2,r2,r22
  80d5c0:	9cffff84 	addi	r19,r19,-2
  80d5c4:	1887883a 	add	r3,r3,r2
  80d5c8:	003f0f06 	br	80d208 <__divdf3+0x508>
  80d5cc:	ad45883a 	add	r2,r21,r21
  80d5d0:	156b803a 	cmpltu	r21,r2,r21
  80d5d4:	adad883a 	add	r22,r21,r22
  80d5d8:	358d883a 	add	r6,r6,r22
  80d5dc:	a53fff84 	addi	r20,r20,-2
  80d5e0:	102b883a 	mov	r21,r2
  80d5e4:	313fdf26 	beq	r6,r4,80d564 <__divdf3+0x864>
  80d5e8:	003f7106 	br	80d3b0 <__divdf3+0x6b0>
  80d5ec:	a08003cc 	andi	r2,r20,15
  80d5f0:	10800118 	cmpnei	r2,r2,4
  80d5f4:	000b883a 	mov	r5,zero
  80d5f8:	103f8b1e 	bne	r2,zero,80d428 <__divdf3+0x728>
  80d5fc:	2804927a 	slli	r2,r5,9
  80d600:	2826977a 	slli	r19,r5,29
  80d604:	100ad33a 	srli	r5,r2,12
  80d608:	003fd006 	br	80d54c <__divdf3+0x84c>
  80d60c:	00800434 	movhi	r2,16
  80d610:	99400234 	orhi	r5,r19,8
  80d614:	10bfffc4 	addi	r2,r2,-1
  80d618:	288a703a 	and	r5,r5,r2
  80d61c:	003e7f06 	br	80d01c <__divdf3+0x31c>
  80d620:	a8ffea36 	bltu	r21,r3,80d5cc <__divdf3+0x8cc>
  80d624:	1029883a 	mov	r20,r2
  80d628:	1d7f611e 	bne	r3,r21,80d3b0 <__divdf3+0x6b0>
  80d62c:	003e6506 	br	80cfc4 <__divdf3+0x2c4>

0080d630 <__eqdf2>:
  80d630:	2810d53a 	srli	r8,r5,20
  80d634:	3806d53a 	srli	r3,r7,20
  80d638:	00800434 	movhi	r2,16
  80d63c:	4201ffcc 	andi	r8,r8,2047
  80d640:	10bfffc4 	addi	r2,r2,-1
  80d644:	4241ffd8 	cmpnei	r9,r8,2047
  80d648:	2814d7fa 	srli	r10,r5,31
  80d64c:	3816d7fa 	srli	r11,r7,31
  80d650:	288a703a 	and	r5,r5,r2
  80d654:	388e703a 	and	r7,r7,r2
  80d658:	1881ffcc 	andi	r2,r3,2047
  80d65c:	48000626 	beq	r9,zero,80d678 <__eqdf2+0x48>
  80d660:	10c1ffe0 	cmpeqi	r3,r2,2047
  80d664:	1800021e 	bne	r3,zero,80d670 <__eqdf2+0x40>
  80d668:	4080011e 	bne	r8,r2,80d670 <__eqdf2+0x40>
  80d66c:	29c00826 	beq	r5,r7,80d690 <__eqdf2+0x60>
  80d670:	00800044 	movi	r2,1
  80d674:	f800283a 	ret
  80d678:	2906b03a 	or	r3,r5,r4
  80d67c:	183ffc1e 	bne	r3,zero,80d670 <__eqdf2+0x40>
  80d680:	1081ffd8 	cmpnei	r2,r2,2047
  80d684:	103ffa1e 	bne	r2,zero,80d670 <__eqdf2+0x40>
  80d688:	398eb03a 	or	r7,r7,r6
  80d68c:	383ff81e 	bne	r7,zero,80d670 <__eqdf2+0x40>
  80d690:	21bff71e 	bne	r4,r6,80d670 <__eqdf2+0x40>
  80d694:	52c00426 	beq	r10,r11,80d6a8 <__eqdf2+0x78>
  80d698:	403ff51e 	bne	r8,zero,80d670 <__eqdf2+0x40>
  80d69c:	290ab03a 	or	r5,r5,r4
  80d6a0:	2804c03a 	cmpne	r2,r5,zero
  80d6a4:	f800283a 	ret
  80d6a8:	0005883a 	mov	r2,zero
  80d6ac:	f800283a 	ret

0080d6b0 <__gedf2>:
  80d6b0:	2810d53a 	srli	r8,r5,20
  80d6b4:	3812d53a 	srli	r9,r7,20
  80d6b8:	00c00434 	movhi	r3,16
  80d6bc:	4201ffcc 	andi	r8,r8,2047
  80d6c0:	18ffffc4 	addi	r3,r3,-1
  80d6c4:	4281ffd8 	cmpnei	r10,r8,2047
  80d6c8:	2816d7fa 	srli	r11,r5,31
  80d6cc:	3804d7fa 	srli	r2,r7,31
  80d6d0:	28ca703a 	and	r5,r5,r3
  80d6d4:	38ce703a 	and	r7,r7,r3
  80d6d8:	48c1ffcc 	andi	r3,r9,2047
  80d6dc:	50000a26 	beq	r10,zero,80d708 <__gedf2+0x58>
  80d6e0:	1a41ffd8 	cmpnei	r9,r3,2047
  80d6e4:	48000c26 	beq	r9,zero,80d718 <__gedf2+0x68>
  80d6e8:	4000171e 	bne	r8,zero,80d748 <__gedf2+0x98>
  80d6ec:	2912b03a 	or	r9,r5,r4
  80d6f0:	1800121e 	bne	r3,zero,80d73c <__gedf2+0x8c>
  80d6f4:	3994b03a 	or	r10,r7,r6
  80d6f8:	5000101e 	bne	r10,zero,80d73c <__gedf2+0x8c>
  80d6fc:	48000a1e 	bne	r9,zero,80d728 <__gedf2+0x78>
  80d700:	0005883a 	mov	r2,zero
  80d704:	f800283a 	ret
  80d708:	2912b03a 	or	r9,r5,r4
  80d70c:	48001d1e 	bne	r9,zero,80d784 <__gedf2+0xd4>
  80d710:	1a41ffe0 	cmpeqi	r9,r3,2047
  80d714:	48000c26 	beq	r9,zero,80d748 <__gedf2+0x98>
  80d718:	3992b03a 	or	r9,r7,r6
  80d71c:	4800191e 	bne	r9,zero,80d784 <__gedf2+0xd4>
  80d720:	40000526 	beq	r8,zero,80d738 <__gedf2+0x88>
  80d724:	58800c26 	beq	r11,r2,80d758 <__gedf2+0xa8>
  80d728:	00800044 	movi	r2,1
  80d72c:	58000526 	beq	r11,zero,80d744 <__gedf2+0x94>
  80d730:	00bfffc4 	movi	r2,-1
  80d734:	f800283a 	ret
  80d738:	2912b03a 	or	r9,r5,r4
  80d73c:	483ff91e 	bne	r9,zero,80d724 <__gedf2+0x74>
  80d740:	103ffb26 	beq	r2,zero,80d730 <__gedf2+0x80>
  80d744:	f800283a 	ret
  80d748:	183ff61e 	bne	r3,zero,80d724 <__gedf2+0x74>
  80d74c:	3992b03a 	or	r9,r7,r6
  80d750:	483ff41e 	bne	r9,zero,80d724 <__gedf2+0x74>
  80d754:	003ff406 	br	80d728 <__gedf2+0x78>
  80d758:	1a000716 	blt	r3,r8,80d778 <__gedf2+0xc8>
  80d75c:	40fff816 	blt	r8,r3,80d740 <__gedf2+0x90>
  80d760:	397ff136 	bltu	r7,r5,80d728 <__gedf2+0x78>
  80d764:	29c00926 	beq	r5,r7,80d78c <__gedf2+0xdc>
  80d768:	29ffe52e 	bgeu	r5,r7,80d700 <__gedf2+0x50>
  80d76c:	583ff026 	beq	r11,zero,80d730 <__gedf2+0x80>
  80d770:	5805883a 	mov	r2,r11
  80d774:	f800283a 	ret
  80d778:	103fed1e 	bne	r2,zero,80d730 <__gedf2+0x80>
  80d77c:	00800044 	movi	r2,1
  80d780:	f800283a 	ret
  80d784:	00bfff84 	movi	r2,-2
  80d788:	f800283a 	ret
  80d78c:	313fe636 	bltu	r6,r4,80d728 <__gedf2+0x78>
  80d790:	21bfdb2e 	bgeu	r4,r6,80d700 <__gedf2+0x50>
  80d794:	003ff506 	br	80d76c <__gedf2+0xbc>

0080d798 <__ledf2>:
  80d798:	2810d53a 	srli	r8,r5,20
  80d79c:	3812d53a 	srli	r9,r7,20
  80d7a0:	00c00434 	movhi	r3,16
  80d7a4:	4201ffcc 	andi	r8,r8,2047
  80d7a8:	18ffffc4 	addi	r3,r3,-1
  80d7ac:	4281ffd8 	cmpnei	r10,r8,2047
  80d7b0:	2816d7fa 	srli	r11,r5,31
  80d7b4:	3804d7fa 	srli	r2,r7,31
  80d7b8:	28ca703a 	and	r5,r5,r3
  80d7bc:	38ce703a 	and	r7,r7,r3
  80d7c0:	48c1ffcc 	andi	r3,r9,2047
  80d7c4:	50000a26 	beq	r10,zero,80d7f0 <__ledf2+0x58>
  80d7c8:	1a41ffd8 	cmpnei	r9,r3,2047
  80d7cc:	48000c26 	beq	r9,zero,80d800 <__ledf2+0x68>
  80d7d0:	4000191e 	bne	r8,zero,80d838 <__ledf2+0xa0>
  80d7d4:	2912b03a 	or	r9,r5,r4
  80d7d8:	18000d1e 	bne	r3,zero,80d810 <__ledf2+0x78>
  80d7dc:	3994b03a 	or	r10,r7,r6
  80d7e0:	50000b1e 	bne	r10,zero,80d810 <__ledf2+0x78>
  80d7e4:	48000c1e 	bne	r9,zero,80d818 <__ledf2+0x80>
  80d7e8:	0005883a 	mov	r2,zero
  80d7ec:	f800283a 	ret
  80d7f0:	2912b03a 	or	r9,r5,r4
  80d7f4:	48000c1e 	bne	r9,zero,80d828 <__ledf2+0x90>
  80d7f8:	1a41ffe0 	cmpeqi	r9,r3,2047
  80d7fc:	48000e26 	beq	r9,zero,80d838 <__ledf2+0xa0>
  80d800:	3992b03a 	or	r9,r7,r6
  80d804:	4800081e 	bne	r9,zero,80d828 <__ledf2+0x90>
  80d808:	4000021e 	bne	r8,zero,80d814 <__ledf2+0x7c>
  80d80c:	2912b03a 	or	r9,r5,r4
  80d810:	48000726 	beq	r9,zero,80d830 <__ledf2+0x98>
  80d814:	58800c26 	beq	r11,r2,80d848 <__ledf2+0xb0>
  80d818:	00800044 	movi	r2,1
  80d81c:	58000526 	beq	r11,zero,80d834 <__ledf2+0x9c>
  80d820:	00bfffc4 	movi	r2,-1
  80d824:	f800283a 	ret
  80d828:	00800084 	movi	r2,2
  80d82c:	f800283a 	ret
  80d830:	103ffb26 	beq	r2,zero,80d820 <__ledf2+0x88>
  80d834:	f800283a 	ret
  80d838:	183ff61e 	bne	r3,zero,80d814 <__ledf2+0x7c>
  80d83c:	3992b03a 	or	r9,r7,r6
  80d840:	483ff41e 	bne	r9,zero,80d814 <__ledf2+0x7c>
  80d844:	003ff406 	br	80d818 <__ledf2+0x80>
  80d848:	1a00030e 	bge	r3,r8,80d858 <__ledf2+0xc0>
  80d84c:	103ff41e 	bne	r2,zero,80d820 <__ledf2+0x88>
  80d850:	00800044 	movi	r2,1
  80d854:	f800283a 	ret
  80d858:	40fff516 	blt	r8,r3,80d830 <__ledf2+0x98>
  80d85c:	397fee36 	bltu	r7,r5,80d818 <__ledf2+0x80>
  80d860:	29c00426 	beq	r5,r7,80d874 <__ledf2+0xdc>
  80d864:	29ffe02e 	bgeu	r5,r7,80d7e8 <__ledf2+0x50>
  80d868:	583fed26 	beq	r11,zero,80d820 <__ledf2+0x88>
  80d86c:	5805883a 	mov	r2,r11
  80d870:	f800283a 	ret
  80d874:	313fe836 	bltu	r6,r4,80d818 <__ledf2+0x80>
  80d878:	21bfdb2e 	bgeu	r4,r6,80d7e8 <__ledf2+0x50>
  80d87c:	003ffa06 	br	80d868 <__ledf2+0xd0>

0080d880 <__muldf3>:
  80d880:	2810d53a 	srli	r8,r5,20
  80d884:	defff004 	addi	sp,sp,-64
  80d888:	00800434 	movhi	r2,16
  80d88c:	df000e15 	stw	fp,56(sp)
  80d890:	dd000a15 	stw	r20,40(sp)
  80d894:	dcc00915 	stw	r19,36(sp)
  80d898:	dc400715 	stw	r17,28(sp)
  80d89c:	10bfffc4 	addi	r2,r2,-1
  80d8a0:	dfc00f15 	stw	ra,60(sp)
  80d8a4:	ddc00d15 	stw	r23,52(sp)
  80d8a8:	dd800c15 	stw	r22,48(sp)
  80d8ac:	dd400b15 	stw	r21,44(sp)
  80d8b0:	dc800815 	stw	r18,32(sp)
  80d8b4:	dc000615 	stw	r16,24(sp)
  80d8b8:	4201ffcc 	andi	r8,r8,2047
  80d8bc:	2828d7fa 	srli	r20,r5,31
  80d8c0:	2023883a 	mov	r17,r4
  80d8c4:	3039883a 	mov	fp,r6
  80d8c8:	28a6703a 	and	r19,r5,r2
  80d8cc:	40013426 	beq	r8,zero,80dda0 <__muldf3+0x520>
  80d8d0:	4081ffe0 	cmpeqi	r2,r8,2047
  80d8d4:	1001461e 	bne	r2,zero,80ddf0 <__muldf3+0x570>
  80d8d8:	980a90fa 	slli	r5,r19,3
  80d8dc:	2026d77a 	srli	r19,r4,29
  80d8e0:	202490fa 	slli	r18,r4,3
  80d8e4:	423f0044 	addi	r8,r8,-1023
  80d8e8:	9966b03a 	or	r19,r19,r5
  80d8ec:	9cc02034 	orhi	r19,r19,128
  80d8f0:	002b883a 	mov	r21,zero
  80d8f4:	002d883a 	mov	r22,zero
  80d8f8:	3804d53a 	srli	r2,r7,20
  80d8fc:	00c00434 	movhi	r3,16
  80d900:	18ffffc4 	addi	r3,r3,-1
  80d904:	1081ffcc 	andi	r2,r2,2047
  80d908:	382ed7fa 	srli	r23,r7,31
  80d90c:	38e0703a 	and	r16,r7,r3
  80d910:	10011026 	beq	r2,zero,80dd54 <__muldf3+0x4d4>
  80d914:	10c1ffe0 	cmpeqi	r3,r2,2047
  80d918:	18013c1e 	bne	r3,zero,80de0c <__muldf3+0x58c>
  80d91c:	e008d77a 	srli	r4,fp,29
  80d920:	802090fa 	slli	r16,r16,3
  80d924:	e02290fa 	slli	r17,fp,3
  80d928:	10bf0044 	addi	r2,r2,-1023
  80d92c:	2420b03a 	or	r16,r4,r16
  80d930:	84002034 	orhi	r16,r16,128
  80d934:	4091883a 	add	r8,r8,r2
  80d938:	0009883a 	mov	r4,zero
  80d93c:	a8800428 	cmpgeui	r2,r21,16
  80d940:	a5ccf03a 	xor	r6,r20,r23
  80d944:	41c00044 	addi	r7,r8,1
  80d948:	1000371e 	bne	r2,zero,80da28 <__muldf3+0x1a8>
  80d94c:	a80490ba 	slli	r2,r21,2
  80d950:	00c02074 	movhi	r3,129
  80d954:	10c7883a 	add	r3,r2,r3
  80d958:	18b65817 	ldw	r2,-9888(r3)
  80d95c:	1000683a 	jmp	r2
  80d960:	0080da28 	cmpgeui	r2,zero,872
  80d964:	0080d9a4 	muli	r2,zero,870
  80d968:	0080d9a4 	muli	r2,zero,870
  80d96c:	0080d9a0 	cmpeqi	r2,zero,870
  80d970:	0080d9b0 	cmpltui	r2,zero,870
  80d974:	0080d9b0 	cmpltui	r2,zero,870
  80d978:	0080de80 	call	80de8 <__alt_mem_sdram-0x77f218>
  80d97c:	0080d9a0 	cmpeqi	r2,zero,870
  80d980:	0080d9b0 	cmpltui	r2,zero,870
  80d984:	0080de80 	call	80de8 <__alt_mem_sdram-0x77f218>
  80d988:	0080d9b0 	cmpltui	r2,zero,870
  80d98c:	0080d9a0 	cmpeqi	r2,zero,870
  80d990:	0080de28 	cmpgeui	r2,zero,888
  80d994:	0080de28 	cmpgeui	r2,zero,888
  80d998:	0080de28 	cmpgeui	r2,zero,888
  80d99c:	0080df0c 	andi	r2,zero,892
  80d9a0:	b80d883a 	mov	r6,r23
  80d9a4:	8027883a 	mov	r19,r16
  80d9a8:	8825883a 	mov	r18,r17
  80d9ac:	202d883a 	mov	r22,r4
  80d9b0:	b08000a0 	cmpeqi	r2,r22,2
  80d9b4:	1000181e 	bne	r2,zero,80da18 <__muldf3+0x198>
  80d9b8:	b08000e0 	cmpeqi	r2,r22,3
  80d9bc:	1001961e 	bne	r2,zero,80e018 <__muldf3+0x798>
  80d9c0:	b0800060 	cmpeqi	r2,r22,1
  80d9c4:	1000c926 	beq	r2,zero,80dcec <__muldf3+0x46c>
  80d9c8:	0007883a 	mov	r3,zero
  80d9cc:	0027883a 	mov	r19,zero
  80d9d0:	0025883a 	mov	r18,zero
  80d9d4:	1806953a 	slli	r3,r3,20
  80d9d8:	300c97fa 	slli	r6,r6,31
  80d9dc:	9005883a 	mov	r2,r18
  80d9e0:	1cc6b03a 	or	r3,r3,r19
  80d9e4:	1986b03a 	or	r3,r3,r6
  80d9e8:	dfc00f17 	ldw	ra,60(sp)
  80d9ec:	df000e17 	ldw	fp,56(sp)
  80d9f0:	ddc00d17 	ldw	r23,52(sp)
  80d9f4:	dd800c17 	ldw	r22,48(sp)
  80d9f8:	dd400b17 	ldw	r21,44(sp)
  80d9fc:	dd000a17 	ldw	r20,40(sp)
  80da00:	dcc00917 	ldw	r19,36(sp)
  80da04:	dc800817 	ldw	r18,32(sp)
  80da08:	dc400717 	ldw	r17,28(sp)
  80da0c:	dc000617 	ldw	r16,24(sp)
  80da10:	dec01004 	addi	sp,sp,64
  80da14:	f800283a 	ret
  80da18:	00c1ffc4 	movi	r3,2047
  80da1c:	0027883a 	mov	r19,zero
  80da20:	0025883a 	mov	r18,zero
  80da24:	003feb06 	br	80d9d4 <__muldf3+0x154>
  80da28:	9028d43a 	srli	r20,r18,16
  80da2c:	8f3fffcc 	andi	fp,r17,65535
  80da30:	957fffcc 	andi	r21,r18,65535
  80da34:	a80b883a 	mov	r5,r21
  80da38:	e009883a 	mov	r4,fp
  80da3c:	d9800315 	stw	r6,12(sp)
  80da40:	da000215 	stw	r8,8(sp)
  80da44:	d9c00115 	stw	r7,4(sp)
  80da48:	8822d43a 	srli	r17,r17,16
  80da4c:	080c3e80 	call	80c3e8 <__mulsi3>
  80da50:	e00b883a 	mov	r5,fp
  80da54:	a009883a 	mov	r4,r20
  80da58:	102d883a 	mov	r22,r2
  80da5c:	080c3e80 	call	80c3e8 <__mulsi3>
  80da60:	880b883a 	mov	r5,r17
  80da64:	a009883a 	mov	r4,r20
  80da68:	102f883a 	mov	r23,r2
  80da6c:	080c3e80 	call	80c3e8 <__mulsi3>
  80da70:	a80b883a 	mov	r5,r21
  80da74:	8809883a 	mov	r4,r17
  80da78:	d8800015 	stw	r2,0(sp)
  80da7c:	080c3e80 	call	80c3e8 <__mulsi3>
  80da80:	b006d43a 	srli	r3,r22,16
  80da84:	15e5883a 	add	r18,r2,r23
  80da88:	d9c00117 	ldw	r7,4(sp)
  80da8c:	1c87883a 	add	r3,r3,r18
  80da90:	da000217 	ldw	r8,8(sp)
  80da94:	d9800317 	ldw	r6,12(sp)
  80da98:	1dc0042e 	bgeu	r3,r23,80daac <__muldf3+0x22c>
  80da9c:	d9000017 	ldw	r4,0(sp)
  80daa0:	00800074 	movhi	r2,1
  80daa4:	2085883a 	add	r2,r4,r2
  80daa8:	d8800015 	stw	r2,0(sp)
  80daac:	1804943a 	slli	r2,r3,16
  80dab0:	85ffffcc 	andi	r23,r16,65535
  80dab4:	b5bfffcc 	andi	r22,r22,65535
  80dab8:	1585883a 	add	r2,r2,r22
  80dabc:	a80b883a 	mov	r5,r21
  80dac0:	b809883a 	mov	r4,r23
  80dac4:	1824d43a 	srli	r18,r3,16
  80dac8:	d9800515 	stw	r6,20(sp)
  80dacc:	da000415 	stw	r8,16(sp)
  80dad0:	d9c00315 	stw	r7,12(sp)
  80dad4:	8020d43a 	srli	r16,r16,16
  80dad8:	d8800115 	stw	r2,4(sp)
  80dadc:	080c3e80 	call	80c3e8 <__mulsi3>
  80dae0:	a009883a 	mov	r4,r20
  80dae4:	b80b883a 	mov	r5,r23
  80dae8:	d8800215 	stw	r2,8(sp)
  80daec:	080c3e80 	call	80c3e8 <__mulsi3>
  80daf0:	a009883a 	mov	r4,r20
  80daf4:	800b883a 	mov	r5,r16
  80daf8:	102d883a 	mov	r22,r2
  80dafc:	080c3e80 	call	80c3e8 <__mulsi3>
  80db00:	a80b883a 	mov	r5,r21
  80db04:	8009883a 	mov	r4,r16
  80db08:	1029883a 	mov	r20,r2
  80db0c:	080c3e80 	call	80c3e8 <__mulsi3>
  80db10:	da800217 	ldw	r10,8(sp)
  80db14:	1585883a 	add	r2,r2,r22
  80db18:	d9c00317 	ldw	r7,12(sp)
  80db1c:	5006d43a 	srli	r3,r10,16
  80db20:	da000417 	ldw	r8,16(sp)
  80db24:	d9800517 	ldw	r6,20(sp)
  80db28:	1887883a 	add	r3,r3,r2
  80db2c:	1d80022e 	bgeu	r3,r22,80db38 <__muldf3+0x2b8>
  80db30:	00800074 	movhi	r2,1
  80db34:	a0a9883a 	add	r20,r20,r2
  80db38:	1804d43a 	srli	r2,r3,16
  80db3c:	1806943a 	slli	r3,r3,16
  80db40:	982cd43a 	srli	r22,r19,16
  80db44:	9d7fffcc 	andi	r21,r19,65535
  80db48:	e009883a 	mov	r4,fp
  80db4c:	54ffffcc 	andi	r19,r10,65535
  80db50:	a80b883a 	mov	r5,r21
  80db54:	1ce7883a 	add	r19,r3,r19
  80db58:	d9800515 	stw	r6,20(sp)
  80db5c:	da000415 	stw	r8,16(sp)
  80db60:	d9c00315 	stw	r7,12(sp)
  80db64:	1529883a 	add	r20,r2,r20
  80db68:	080c3e80 	call	80c3e8 <__mulsi3>
  80db6c:	e00b883a 	mov	r5,fp
  80db70:	b009883a 	mov	r4,r22
  80db74:	d8800215 	stw	r2,8(sp)
  80db78:	080c3e80 	call	80c3e8 <__mulsi3>
  80db7c:	8809883a 	mov	r4,r17
  80db80:	b00b883a 	mov	r5,r22
  80db84:	1039883a 	mov	fp,r2
  80db88:	080c3e80 	call	80c3e8 <__mulsi3>
  80db8c:	8809883a 	mov	r4,r17
  80db90:	a80b883a 	mov	r5,r21
  80db94:	1023883a 	mov	r17,r2
  80db98:	080c3e80 	call	80c3e8 <__mulsi3>
  80db9c:	d8c00217 	ldw	r3,8(sp)
  80dba0:	1705883a 	add	r2,r2,fp
  80dba4:	d9c00317 	ldw	r7,12(sp)
  80dba8:	1808d43a 	srli	r4,r3,16
  80dbac:	da000417 	ldw	r8,16(sp)
  80dbb0:	d9800517 	ldw	r6,20(sp)
  80dbb4:	2089883a 	add	r4,r4,r2
  80dbb8:	94e5883a 	add	r18,r18,r19
  80dbbc:	2700022e 	bgeu	r4,fp,80dbc8 <__muldf3+0x348>
  80dbc0:	00800074 	movhi	r2,1
  80dbc4:	88a3883a 	add	r17,r17,r2
  80dbc8:	2004d43a 	srli	r2,r4,16
  80dbcc:	2038943a 	slli	fp,r4,16
  80dbd0:	18ffffcc 	andi	r3,r3,65535
  80dbd4:	b809883a 	mov	r4,r23
  80dbd8:	a80b883a 	mov	r5,r21
  80dbdc:	d9800415 	stw	r6,16(sp)
  80dbe0:	da000315 	stw	r8,12(sp)
  80dbe4:	d9c00215 	stw	r7,8(sp)
  80dbe8:	e0f9883a 	add	fp,fp,r3
  80dbec:	1463883a 	add	r17,r2,r17
  80dbf0:	080c3e80 	call	80c3e8 <__mulsi3>
  80dbf4:	b80b883a 	mov	r5,r23
  80dbf8:	b009883a 	mov	r4,r22
  80dbfc:	102f883a 	mov	r23,r2
  80dc00:	080c3e80 	call	80c3e8 <__mulsi3>
  80dc04:	b00b883a 	mov	r5,r22
  80dc08:	8009883a 	mov	r4,r16
  80dc0c:	102d883a 	mov	r22,r2
  80dc10:	080c3e80 	call	80c3e8 <__mulsi3>
  80dc14:	a80b883a 	mov	r5,r21
  80dc18:	8009883a 	mov	r4,r16
  80dc1c:	1021883a 	mov	r16,r2
  80dc20:	080c3e80 	call	80c3e8 <__mulsi3>
  80dc24:	b80ad43a 	srli	r5,r23,16
  80dc28:	1585883a 	add	r2,r2,r22
  80dc2c:	d9c00217 	ldw	r7,8(sp)
  80dc30:	288b883a 	add	r5,r5,r2
  80dc34:	da000317 	ldw	r8,12(sp)
  80dc38:	d9800417 	ldw	r6,16(sp)
  80dc3c:	2d80022e 	bgeu	r5,r22,80dc48 <__muldf3+0x3c8>
  80dc40:	00800074 	movhi	r2,1
  80dc44:	80a1883a 	add	r16,r16,r2
  80dc48:	2806943a 	slli	r3,r5,16
  80dc4c:	d8800017 	ldw	r2,0(sp)
  80dc50:	bdffffcc 	andi	r23,r23,65535
  80dc54:	1dc7883a 	add	r3,r3,r23
  80dc58:	90ab883a 	add	r21,r18,r2
  80dc5c:	acd5803a 	cmpltu	r10,r21,r19
  80dc60:	1d07883a 	add	r3,r3,r20
  80dc64:	af2b883a 	add	r21,r21,fp
  80dc68:	1a97883a 	add	r11,r3,r10
  80dc6c:	af09803a 	cmpltu	r4,r21,fp
  80dc70:	2826d43a 	srli	r19,r5,16
  80dc74:	5c53883a 	add	r9,r11,r17
  80dc78:	4905883a 	add	r2,r9,r4
  80dc7c:	1d07803a 	cmpltu	r3,r3,r20
  80dc80:	5a95803a 	cmpltu	r10,r11,r10
  80dc84:	1a86b03a 	or	r3,r3,r10
  80dc88:	1109803a 	cmpltu	r4,r2,r4
  80dc8c:	4c53803a 	cmpltu	r9,r9,r17
  80dc90:	1ce7883a 	add	r19,r3,r19
  80dc94:	4908b03a 	or	r4,r9,r4
  80dc98:	a824927a 	slli	r18,r21,9
  80dc9c:	d8c00117 	ldw	r3,4(sp)
  80dca0:	9927883a 	add	r19,r19,r4
  80dca4:	9c27883a 	add	r19,r19,r16
  80dca8:	9826927a 	slli	r19,r19,9
  80dcac:	a82ad5fa 	srli	r21,r21,23
  80dcb0:	100ad5fa 	srli	r5,r2,23
  80dcb4:	90e4b03a 	or	r18,r18,r3
  80dcb8:	1004927a 	slli	r2,r2,9
  80dcbc:	9024c03a 	cmpne	r18,r18,zero
  80dcc0:	9564b03a 	or	r18,r18,r21
  80dcc4:	98c0402c 	andhi	r3,r19,256
  80dcc8:	90a4b03a 	or	r18,r18,r2
  80dccc:	9966b03a 	or	r19,r19,r5
  80dcd0:	1800b626 	beq	r3,zero,80dfac <__muldf3+0x72c>
  80dcd4:	9006d07a 	srli	r3,r18,1
  80dcd8:	980497fa 	slli	r2,r19,31
  80dcdc:	9480004c 	andi	r18,r18,1
  80dce0:	9826d07a 	srli	r19,r19,1
  80dce4:	1c86b03a 	or	r3,r3,r18
  80dce8:	18a4b03a 	or	r18,r3,r2
  80dcec:	3900ffc4 	addi	r4,r7,1023
  80dcf0:	0100690e 	bge	zero,r4,80de98 <__muldf3+0x618>
  80dcf4:	908001cc 	andi	r2,r18,7
  80dcf8:	10000726 	beq	r2,zero,80dd18 <__muldf3+0x498>
  80dcfc:	908003cc 	andi	r2,r18,15
  80dd00:	10800120 	cmpeqi	r2,r2,4
  80dd04:	1000041e 	bne	r2,zero,80dd18 <__muldf3+0x498>
  80dd08:	90800104 	addi	r2,r18,4
  80dd0c:	14a5803a 	cmpltu	r18,r2,r18
  80dd10:	9ca7883a 	add	r19,r19,r18
  80dd14:	1025883a 	mov	r18,r2
  80dd18:	9880402c 	andhi	r2,r19,256
  80dd1c:	10000426 	beq	r2,zero,80dd30 <__muldf3+0x4b0>
  80dd20:	00bfc034 	movhi	r2,65280
  80dd24:	10bfffc4 	addi	r2,r2,-1
  80dd28:	98a6703a 	and	r19,r19,r2
  80dd2c:	39010004 	addi	r4,r7,1024
  80dd30:	2081ffc8 	cmpgei	r2,r4,2047
  80dd34:	103f381e 	bne	r2,zero,80da18 <__muldf3+0x198>
  80dd38:	9804977a 	slli	r2,r19,29
  80dd3c:	9024d0fa 	srli	r18,r18,3
  80dd40:	9826927a 	slli	r19,r19,9
  80dd44:	20c1ffcc 	andi	r3,r4,2047
  80dd48:	14a4b03a 	or	r18,r2,r18
  80dd4c:	9826d33a 	srli	r19,r19,12
  80dd50:	003f2006 	br	80d9d4 <__muldf3+0x154>
  80dd54:	8722b03a 	or	r17,r16,fp
  80dd58:	88004526 	beq	r17,zero,80de70 <__muldf3+0x5f0>
  80dd5c:	da000015 	stw	r8,0(sp)
  80dd60:	80008626 	beq	r16,zero,80df7c <__muldf3+0x6fc>
  80dd64:	8009883a 	mov	r4,r16
  80dd68:	08006440 	call	800644 <__clzsi2>
  80dd6c:	da000017 	ldw	r8,0(sp)
  80dd70:	117ffd44 	addi	r5,r2,-11
  80dd74:	01000744 	movi	r4,29
  80dd78:	147ffe04 	addi	r17,r2,-8
  80dd7c:	2149c83a 	sub	r4,r4,r5
  80dd80:	8460983a 	sll	r16,r16,r17
  80dd84:	e108d83a 	srl	r4,fp,r4
  80dd88:	e462983a 	sll	r17,fp,r17
  80dd8c:	2420b03a 	or	r16,r4,r16
  80dd90:	4091c83a 	sub	r8,r8,r2
  80dd94:	423f0344 	addi	r8,r8,-1011
  80dd98:	0009883a 	mov	r4,zero
  80dd9c:	003ee706 	br	80d93c <__muldf3+0xbc>
  80dda0:	9924b03a 	or	r18,r19,r4
  80dda4:	90002d26 	beq	r18,zero,80de5c <__muldf3+0x5dc>
  80dda8:	d9c00015 	stw	r7,0(sp)
  80ddac:	98006826 	beq	r19,zero,80df50 <__muldf3+0x6d0>
  80ddb0:	9809883a 	mov	r4,r19
  80ddb4:	08006440 	call	800644 <__clzsi2>
  80ddb8:	d9c00017 	ldw	r7,0(sp)
  80ddbc:	113ffd44 	addi	r4,r2,-11
  80ddc0:	00c00744 	movi	r3,29
  80ddc4:	14bffe04 	addi	r18,r2,-8
  80ddc8:	1907c83a 	sub	r3,r3,r4
  80ddcc:	9ca6983a 	sll	r19,r19,r18
  80ddd0:	88c6d83a 	srl	r3,r17,r3
  80ddd4:	8ca4983a 	sll	r18,r17,r18
  80ddd8:	1ce6b03a 	or	r19,r3,r19
  80dddc:	023f0344 	movi	r8,-1011
  80dde0:	4091c83a 	sub	r8,r8,r2
  80dde4:	002b883a 	mov	r21,zero
  80dde8:	002d883a 	mov	r22,zero
  80ddec:	003ec206 	br	80d8f8 <__muldf3+0x78>
  80ddf0:	9924b03a 	or	r18,r19,r4
  80ddf4:	9000141e 	bne	r18,zero,80de48 <__muldf3+0x5c8>
  80ddf8:	0027883a 	mov	r19,zero
  80ddfc:	05400204 	movi	r21,8
  80de00:	0201ffc4 	movi	r8,2047
  80de04:	05800084 	movi	r22,2
  80de08:	003ebb06 	br	80d8f8 <__muldf3+0x78>
  80de0c:	8722b03a 	or	r17,r16,fp
  80de10:	4201ffc4 	addi	r8,r8,2047
  80de14:	8800081e 	bne	r17,zero,80de38 <__muldf3+0x5b8>
  80de18:	ad400094 	ori	r21,r21,2
  80de1c:	0021883a 	mov	r16,zero
  80de20:	01000084 	movi	r4,2
  80de24:	003ec506 	br	80d93c <__muldf3+0xbc>
  80de28:	b08000a0 	cmpeqi	r2,r22,2
  80de2c:	a00d883a 	mov	r6,r20
  80de30:	103ee126 	beq	r2,zero,80d9b8 <__muldf3+0x138>
  80de34:	003ef806 	br	80da18 <__muldf3+0x198>
  80de38:	ad4000d4 	ori	r21,r21,3
  80de3c:	e023883a 	mov	r17,fp
  80de40:	010000c4 	movi	r4,3
  80de44:	003ebd06 	br	80d93c <__muldf3+0xbc>
  80de48:	2025883a 	mov	r18,r4
  80de4c:	05400304 	movi	r21,12
  80de50:	0201ffc4 	movi	r8,2047
  80de54:	058000c4 	movi	r22,3
  80de58:	003ea706 	br	80d8f8 <__muldf3+0x78>
  80de5c:	0027883a 	mov	r19,zero
  80de60:	05400104 	movi	r21,4
  80de64:	0011883a 	mov	r8,zero
  80de68:	05800044 	movi	r22,1
  80de6c:	003ea206 	br	80d8f8 <__muldf3+0x78>
  80de70:	ad400054 	ori	r21,r21,1
  80de74:	0021883a 	mov	r16,zero
  80de78:	01000044 	movi	r4,1
  80de7c:	003eaf06 	br	80d93c <__muldf3+0xbc>
  80de80:	04c00434 	movhi	r19,16
  80de84:	000d883a 	mov	r6,zero
  80de88:	9cffffc4 	addi	r19,r19,-1
  80de8c:	04bfffc4 	movi	r18,-1
  80de90:	00c1ffc4 	movi	r3,2047
  80de94:	003ecf06 	br	80d9d4 <__muldf3+0x154>
  80de98:	00800044 	movi	r2,1
  80de9c:	1105c83a 	sub	r2,r2,r4
  80dea0:	10c00e48 	cmpgei	r3,r2,57
  80dea4:	183ec81e 	bne	r3,zero,80d9c8 <__muldf3+0x148>
  80dea8:	10c00808 	cmpgei	r3,r2,32
  80deac:	1800411e 	bne	r3,zero,80dfb4 <__muldf3+0x734>
  80deb0:	39c10784 	addi	r7,r7,1054
  80deb4:	99c6983a 	sll	r3,r19,r7
  80deb8:	9088d83a 	srl	r4,r18,r2
  80debc:	91ce983a 	sll	r7,r18,r7
  80dec0:	98a6d83a 	srl	r19,r19,r2
  80dec4:	1904b03a 	or	r2,r3,r4
  80dec8:	3824c03a 	cmpne	r18,r7,zero
  80decc:	1484b03a 	or	r2,r2,r18
  80ded0:	10c001cc 	andi	r3,r2,7
  80ded4:	18000726 	beq	r3,zero,80def4 <__muldf3+0x674>
  80ded8:	10c003cc 	andi	r3,r2,15
  80dedc:	18c00120 	cmpeqi	r3,r3,4
  80dee0:	1800041e 	bne	r3,zero,80def4 <__muldf3+0x674>
  80dee4:	10c00104 	addi	r3,r2,4
  80dee8:	1885803a 	cmpltu	r2,r3,r2
  80deec:	98a7883a 	add	r19,r19,r2
  80def0:	1805883a 	mov	r2,r3
  80def4:	98c0202c 	andhi	r3,r19,128
  80def8:	18004326 	beq	r3,zero,80e008 <__muldf3+0x788>
  80defc:	00c00044 	movi	r3,1
  80df00:	0027883a 	mov	r19,zero
  80df04:	0025883a 	mov	r18,zero
  80df08:	003eb206 	br	80d9d4 <__muldf3+0x154>
  80df0c:	9880022c 	andhi	r2,r19,8
  80df10:	10000926 	beq	r2,zero,80df38 <__muldf3+0x6b8>
  80df14:	8080022c 	andhi	r2,r16,8
  80df18:	1000071e 	bne	r2,zero,80df38 <__muldf3+0x6b8>
  80df1c:	00800434 	movhi	r2,16
  80df20:	84c00234 	orhi	r19,r16,8
  80df24:	10bfffc4 	addi	r2,r2,-1
  80df28:	98a6703a 	and	r19,r19,r2
  80df2c:	b80d883a 	mov	r6,r23
  80df30:	8825883a 	mov	r18,r17
  80df34:	003fd606 	br	80de90 <__muldf3+0x610>
  80df38:	00800434 	movhi	r2,16
  80df3c:	9cc00234 	orhi	r19,r19,8
  80df40:	10bfffc4 	addi	r2,r2,-1
  80df44:	98a6703a 	and	r19,r19,r2
  80df48:	a00d883a 	mov	r6,r20
  80df4c:	003fd006 	br	80de90 <__muldf3+0x610>
  80df50:	08006440 	call	800644 <__clzsi2>
  80df54:	11000544 	addi	r4,r2,21
  80df58:	21400748 	cmpgei	r5,r4,29
  80df5c:	1007883a 	mov	r3,r2
  80df60:	d9c00017 	ldw	r7,0(sp)
  80df64:	10800804 	addi	r2,r2,32
  80df68:	283f9526 	beq	r5,zero,80ddc0 <__muldf3+0x540>
  80df6c:	18fffe04 	addi	r3,r3,-8
  80df70:	88e6983a 	sll	r19,r17,r3
  80df74:	0025883a 	mov	r18,zero
  80df78:	003f9806 	br	80dddc <__muldf3+0x55c>
  80df7c:	e009883a 	mov	r4,fp
  80df80:	08006440 	call	800644 <__clzsi2>
  80df84:	11400544 	addi	r5,r2,21
  80df88:	29000748 	cmpgei	r4,r5,29
  80df8c:	1007883a 	mov	r3,r2
  80df90:	da000017 	ldw	r8,0(sp)
  80df94:	10800804 	addi	r2,r2,32
  80df98:	203f7626 	beq	r4,zero,80dd74 <__muldf3+0x4f4>
  80df9c:	1c3ffe04 	addi	r16,r3,-8
  80dfa0:	e420983a 	sll	r16,fp,r16
  80dfa4:	0023883a 	mov	r17,zero
  80dfa8:	003f7906 	br	80dd90 <__muldf3+0x510>
  80dfac:	400f883a 	mov	r7,r8
  80dfb0:	003f4e06 	br	80dcec <__muldf3+0x46c>
  80dfb4:	00fff844 	movi	r3,-31
  80dfb8:	1907c83a 	sub	r3,r3,r4
  80dfbc:	10800820 	cmpeqi	r2,r2,32
  80dfc0:	98c6d83a 	srl	r3,r19,r3
  80dfc4:	1000031e 	bne	r2,zero,80dfd4 <__muldf3+0x754>
  80dfc8:	39c10f84 	addi	r7,r7,1086
  80dfcc:	99e6983a 	sll	r19,r19,r7
  80dfd0:	94e4b03a 	or	r18,r18,r19
  80dfd4:	9024c03a 	cmpne	r18,r18,zero
  80dfd8:	90c4b03a 	or	r2,r18,r3
  80dfdc:	148001cc 	andi	r18,r2,7
  80dfe0:	9000051e 	bne	r18,zero,80dff8 <__muldf3+0x778>
  80dfe4:	0027883a 	mov	r19,zero
  80dfe8:	1004d0fa 	srli	r2,r2,3
  80dfec:	0007883a 	mov	r3,zero
  80dff0:	14a4b03a 	or	r18,r2,r18
  80dff4:	003e7706 	br	80d9d4 <__muldf3+0x154>
  80dff8:	10c003cc 	andi	r3,r2,15
  80dffc:	18c00118 	cmpnei	r3,r3,4
  80e000:	0027883a 	mov	r19,zero
  80e004:	183fb71e 	bne	r3,zero,80dee4 <__muldf3+0x664>
  80e008:	9806927a 	slli	r3,r19,9
  80e00c:	9824977a 	slli	r18,r19,29
  80e010:	1826d33a 	srli	r19,r3,12
  80e014:	003ff406 	br	80dfe8 <__muldf3+0x768>
  80e018:	00800434 	movhi	r2,16
  80e01c:	9cc00234 	orhi	r19,r19,8
  80e020:	10bfffc4 	addi	r2,r2,-1
  80e024:	98a6703a 	and	r19,r19,r2
  80e028:	003f9906 	br	80de90 <__muldf3+0x610>

0080e02c <__subdf3>:
  80e02c:	00800434 	movhi	r2,16
  80e030:	3810d53a 	srli	r8,r7,20
  80e034:	10bfffc4 	addi	r2,r2,-1
  80e038:	2806d53a 	srli	r3,r5,20
  80e03c:	2892703a 	and	r9,r5,r2
  80e040:	3884703a 	and	r2,r7,r2
  80e044:	280ad7fa 	srli	r5,r5,31
  80e048:	481290fa 	slli	r9,r9,3
  80e04c:	2018d77a 	srli	r12,r4,29
  80e050:	100490fa 	slli	r2,r2,3
  80e054:	3016d77a 	srli	r11,r6,29
  80e058:	defffb04 	addi	sp,sp,-20
  80e05c:	4201ffcc 	andi	r8,r8,2047
  80e060:	dc800215 	stw	r18,8(sp)
  80e064:	dc400115 	stw	r17,4(sp)
  80e068:	1c81ffcc 	andi	r18,r3,2047
  80e06c:	dfc00415 	stw	ra,16(sp)
  80e070:	dcc00315 	stw	r19,12(sp)
  80e074:	dc000015 	stw	r16,0(sp)
  80e078:	4281ffd8 	cmpnei	r10,r8,2047
  80e07c:	2823883a 	mov	r17,r5
  80e080:	201c90fa 	slli	r14,r4,3
  80e084:	380ed7fa 	srli	r7,r7,31
  80e088:	301a90fa 	slli	r13,r6,3
  80e08c:	29403fcc 	andi	r5,r5,255
  80e090:	6252b03a 	or	r9,r12,r9
  80e094:	589eb03a 	or	r15,r11,r2
  80e098:	9207c83a 	sub	r3,r18,r8
  80e09c:	50006826 	beq	r10,zero,80e240 <__subdf3+0x214>
  80e0a0:	3ac0005c 	xori	r11,r7,1
  80e0a4:	2ac07326 	beq	r5,r11,80e274 <__subdf3+0x248>
  80e0a8:	00c0590e 	bge	zero,r3,80e210 <__subdf3+0x1e4>
  80e0ac:	4000691e 	bne	r8,zero,80e254 <__subdf3+0x228>
  80e0b0:	7b44b03a 	or	r2,r15,r13
  80e0b4:	1000fb26 	beq	r2,zero,80e4a4 <__subdf3+0x478>
  80e0b8:	18bfffc4 	addi	r2,r3,-1
  80e0bc:	10019126 	beq	r2,zero,80e704 <__subdf3+0x6d8>
  80e0c0:	18c1ffd8 	cmpnei	r3,r3,2047
  80e0c4:	1800c326 	beq	r3,zero,80e3d4 <__subdf3+0x3a8>
  80e0c8:	1007883a 	mov	r3,r2
  80e0cc:	18800e48 	cmpgei	r2,r3,57
  80e0d0:	1000651e 	bne	r2,zero,80e268 <__subdf3+0x23c>
  80e0d4:	18800808 	cmpgei	r2,r3,32
  80e0d8:	1001331e 	bne	r2,zero,80e5a8 <__subdf3+0x57c>
  80e0dc:	00800804 	movi	r2,32
  80e0e0:	10c5c83a 	sub	r2,r2,r3
  80e0e4:	78a0983a 	sll	r16,r15,r2
  80e0e8:	68c8d83a 	srl	r4,r13,r3
  80e0ec:	689a983a 	sll	r13,r13,r2
  80e0f0:	78c4d83a 	srl	r2,r15,r3
  80e0f4:	8120b03a 	or	r16,r16,r4
  80e0f8:	681ac03a 	cmpne	r13,r13,zero
  80e0fc:	8360b03a 	or	r16,r16,r13
  80e100:	4893c83a 	sub	r9,r9,r2
  80e104:	7421c83a 	sub	r16,r14,r16
  80e108:	7409803a 	cmpltu	r4,r14,r16
  80e10c:	4909c83a 	sub	r4,r9,r4
  80e110:	2080202c 	andhi	r2,r4,128
  80e114:	10009326 	beq	r2,zero,80e364 <__subdf3+0x338>
  80e118:	04c02034 	movhi	r19,128
  80e11c:	9cffffc4 	addi	r19,r19,-1
  80e120:	24e6703a 	and	r19,r4,r19
  80e124:	9800b926 	beq	r19,zero,80e40c <__subdf3+0x3e0>
  80e128:	9809883a 	mov	r4,r19
  80e12c:	08006440 	call	800644 <__clzsi2>
  80e130:	10fffe04 	addi	r3,r2,-8
  80e134:	01000804 	movi	r4,32
  80e138:	20c9c83a 	sub	r4,r4,r3
  80e13c:	8108d83a 	srl	r4,r16,r4
  80e140:	98e6983a 	sll	r19,r19,r3
  80e144:	80e0983a 	sll	r16,r16,r3
  80e148:	24c8b03a 	or	r4,r4,r19
  80e14c:	1c80b816 	blt	r3,r18,80e430 <__subdf3+0x404>
  80e150:	1c87c83a 	sub	r3,r3,r18
  80e154:	19400044 	addi	r5,r3,1
  80e158:	28800808 	cmpgei	r2,r5,32
  80e15c:	1000751e 	bne	r2,zero,80e334 <__subdf3+0x308>
  80e160:	00800804 	movi	r2,32
  80e164:	1145c83a 	sub	r2,r2,r5
  80e168:	8146d83a 	srl	r3,r16,r5
  80e16c:	80a0983a 	sll	r16,r16,r2
  80e170:	2084983a 	sll	r2,r4,r2
  80e174:	2148d83a 	srl	r4,r4,r5
  80e178:	8020c03a 	cmpne	r16,r16,zero
  80e17c:	10c4b03a 	or	r2,r2,r3
  80e180:	1420b03a 	or	r16,r2,r16
  80e184:	0025883a 	mov	r18,zero
  80e188:	808001cc 	andi	r2,r16,7
  80e18c:	10000726 	beq	r2,zero,80e1ac <__subdf3+0x180>
  80e190:	808003cc 	andi	r2,r16,15
  80e194:	10800120 	cmpeqi	r2,r2,4
  80e198:	1000041e 	bne	r2,zero,80e1ac <__subdf3+0x180>
  80e19c:	80800104 	addi	r2,r16,4
  80e1a0:	1421803a 	cmpltu	r16,r2,r16
  80e1a4:	2409883a 	add	r4,r4,r16
  80e1a8:	1021883a 	mov	r16,r2
  80e1ac:	2080202c 	andhi	r2,r4,128
  80e1b0:	10006e26 	beq	r2,zero,80e36c <__subdf3+0x340>
  80e1b4:	90c00044 	addi	r3,r18,1
  80e1b8:	1881ffe0 	cmpeqi	r2,r3,2047
  80e1bc:	18c1ffcc 	andi	r3,r3,2047
  80e1c0:	1000801e 	bne	r2,zero,80e3c4 <__subdf3+0x398>
  80e1c4:	00bfe034 	movhi	r2,65408
  80e1c8:	10bfffc4 	addi	r2,r2,-1
  80e1cc:	2088703a 	and	r4,r4,r2
  80e1d0:	2004977a 	slli	r2,r4,29
  80e1d4:	2008927a 	slli	r4,r4,9
  80e1d8:	8020d0fa 	srli	r16,r16,3
  80e1dc:	2008d33a 	srli	r4,r4,12
  80e1e0:	1404b03a 	or	r2,r2,r16
  80e1e4:	1806953a 	slli	r3,r3,20
  80e1e8:	882297fa 	slli	r17,r17,31
  80e1ec:	1906b03a 	or	r3,r3,r4
  80e1f0:	1c46b03a 	or	r3,r3,r17
  80e1f4:	dfc00417 	ldw	ra,16(sp)
  80e1f8:	dcc00317 	ldw	r19,12(sp)
  80e1fc:	dc800217 	ldw	r18,8(sp)
  80e200:	dc400117 	ldw	r17,4(sp)
  80e204:	dc000017 	ldw	r16,0(sp)
  80e208:	dec00504 	addi	sp,sp,20
  80e20c:	f800283a 	ret
  80e210:	18002c26 	beq	r3,zero,80e2c4 <__subdf3+0x298>
  80e214:	4487c83a 	sub	r3,r8,r18
  80e218:	5823883a 	mov	r17,r11
  80e21c:	9000bb1e 	bne	r18,zero,80e50c <__subdf3+0x4e0>
  80e220:	4b84b03a 	or	r2,r9,r14
  80e224:	10011726 	beq	r2,zero,80e684 <__subdf3+0x658>
  80e228:	18bfffc4 	addi	r2,r3,-1
  80e22c:	10016326 	beq	r2,zero,80e7bc <__subdf3+0x790>
  80e230:	18c1ffd8 	cmpnei	r3,r3,2047
  80e234:	18012c26 	beq	r3,zero,80e6e8 <__subdf3+0x6bc>
  80e238:	1007883a 	mov	r3,r2
  80e23c:	0000b506 	br	80e514 <__subdf3+0x4e8>
  80e240:	7b44b03a 	or	r2,r15,r13
  80e244:	103f9626 	beq	r2,zero,80e0a0 <__subdf3+0x74>
  80e248:	3ac03fcc 	andi	r11,r7,255
  80e24c:	29c07d26 	beq	r5,r7,80e444 <__subdf3+0x418>
  80e250:	00ffef0e 	bge	zero,r3,80e210 <__subdf3+0x1e4>
  80e254:	9081ffd8 	cmpnei	r2,r18,2047
  80e258:	10005e26 	beq	r2,zero,80e3d4 <__subdf3+0x3a8>
  80e25c:	18800e48 	cmpgei	r2,r3,57
  80e260:	7bc02034 	orhi	r15,r15,128
  80e264:	103f9b26 	beq	r2,zero,80e0d4 <__subdf3+0xa8>
  80e268:	7b60b03a 	or	r16,r15,r13
  80e26c:	8020c03a 	cmpne	r16,r16,zero
  80e270:	003fa406 	br	80e104 <__subdf3+0xd8>
  80e274:	00c0730e 	bge	zero,r3,80e444 <__subdf3+0x418>
  80e278:	40002626 	beq	r8,zero,80e314 <__subdf3+0x2e8>
  80e27c:	9081ffd8 	cmpnei	r2,r18,2047
  80e280:	10005426 	beq	r2,zero,80e3d4 <__subdf3+0x3a8>
  80e284:	7bc02034 	orhi	r15,r15,128
  80e288:	18800e48 	cmpgei	r2,r3,57
  80e28c:	1000431e 	bne	r2,zero,80e39c <__subdf3+0x370>
  80e290:	18800808 	cmpgei	r2,r3,32
  80e294:	1000de26 	beq	r2,zero,80e610 <__subdf3+0x5e4>
  80e298:	1c3ff804 	addi	r16,r3,-32
  80e29c:	18800820 	cmpeqi	r2,r3,32
  80e2a0:	7c0ad83a 	srl	r5,r15,r16
  80e2a4:	1000041e 	bne	r2,zero,80e2b8 <__subdf3+0x28c>
  80e2a8:	00801004 	movi	r2,64
  80e2ac:	10c5c83a 	sub	r2,r2,r3
  80e2b0:	7884983a 	sll	r2,r15,r2
  80e2b4:	689ab03a 	or	r13,r13,r2
  80e2b8:	6820c03a 	cmpne	r16,r13,zero
  80e2bc:	8160b03a 	or	r16,r16,r5
  80e2c0:	00003806 	br	80e3a4 <__subdf3+0x378>
  80e2c4:	90800044 	addi	r2,r18,1
  80e2c8:	1081ff8c 	andi	r2,r2,2046
  80e2cc:	1000a01e 	bne	r2,zero,80e550 <__subdf3+0x524>
  80e2d0:	4b8ab03a 	or	r5,r9,r14
  80e2d4:	7b44b03a 	or	r2,r15,r13
  80e2d8:	9000f11e 	bne	r18,zero,80e6a0 <__subdf3+0x674>
  80e2dc:	28012e26 	beq	r5,zero,80e798 <__subdf3+0x76c>
  80e2e0:	10010e26 	beq	r2,zero,80e71c <__subdf3+0x6f0>
  80e2e4:	7361c83a 	sub	r16,r14,r13
  80e2e8:	7405803a 	cmpltu	r2,r14,r16
  80e2ec:	4bc9c83a 	sub	r4,r9,r15
  80e2f0:	2089c83a 	sub	r4,r4,r2
  80e2f4:	2080202c 	andhi	r2,r4,128
  80e2f8:	10016d26 	beq	r2,zero,80e8b0 <__subdf3+0x884>
  80e2fc:	6ba1c83a 	sub	r16,r13,r14
  80e300:	7a49c83a 	sub	r4,r15,r9
  80e304:	6c1b803a 	cmpltu	r13,r13,r16
  80e308:	2349c83a 	sub	r4,r4,r13
  80e30c:	5823883a 	mov	r17,r11
  80e310:	003f9d06 	br	80e188 <__subdf3+0x15c>
  80e314:	7b44b03a 	or	r2,r15,r13
  80e318:	10006226 	beq	r2,zero,80e4a4 <__subdf3+0x478>
  80e31c:	18bfffc4 	addi	r2,r3,-1
  80e320:	1000e926 	beq	r2,zero,80e6c8 <__subdf3+0x69c>
  80e324:	18c1ffd8 	cmpnei	r3,r3,2047
  80e328:	18012a26 	beq	r3,zero,80e7d4 <__subdf3+0x7a8>
  80e32c:	1007883a 	mov	r3,r2
  80e330:	003fd506 	br	80e288 <__subdf3+0x25c>
  80e334:	18fff844 	addi	r3,r3,-31
  80e338:	28800820 	cmpeqi	r2,r5,32
  80e33c:	20c6d83a 	srl	r3,r4,r3
  80e340:	1000041e 	bne	r2,zero,80e354 <__subdf3+0x328>
  80e344:	00801004 	movi	r2,64
  80e348:	114bc83a 	sub	r5,r2,r5
  80e34c:	2148983a 	sll	r4,r4,r5
  80e350:	8120b03a 	or	r16,r16,r4
  80e354:	8020c03a 	cmpne	r16,r16,zero
  80e358:	80e0b03a 	or	r16,r16,r3
  80e35c:	0009883a 	mov	r4,zero
  80e360:	0025883a 	mov	r18,zero
  80e364:	808001cc 	andi	r2,r16,7
  80e368:	103f891e 	bne	r2,zero,80e190 <__subdf3+0x164>
  80e36c:	8020d0fa 	srli	r16,r16,3
  80e370:	2004977a 	slli	r2,r4,29
  80e374:	2012d0fa 	srli	r9,r4,3
  80e378:	9007883a 	mov	r3,r18
  80e37c:	8084b03a 	or	r2,r16,r2
  80e380:	1901ffe0 	cmpeqi	r4,r3,2047
  80e384:	2000191e 	bne	r4,zero,80e3ec <__subdf3+0x3c0>
  80e388:	01000434 	movhi	r4,16
  80e38c:	213fffc4 	addi	r4,r4,-1
  80e390:	4908703a 	and	r4,r9,r4
  80e394:	18c1ffcc 	andi	r3,r3,2047
  80e398:	003f9206 	br	80e1e4 <__subdf3+0x1b8>
  80e39c:	7b60b03a 	or	r16,r15,r13
  80e3a0:	8020c03a 	cmpne	r16,r16,zero
  80e3a4:	83a1883a 	add	r16,r16,r14
  80e3a8:	8389803a 	cmpltu	r4,r16,r14
  80e3ac:	2249883a 	add	r4,r4,r9
  80e3b0:	2080202c 	andhi	r2,r4,128
  80e3b4:	103feb26 	beq	r2,zero,80e364 <__subdf3+0x338>
  80e3b8:	94800044 	addi	r18,r18,1
  80e3bc:	9081ffe0 	cmpeqi	r2,r18,2047
  80e3c0:	10006f26 	beq	r2,zero,80e580 <__subdf3+0x554>
  80e3c4:	00c1ffc4 	movi	r3,2047
  80e3c8:	0009883a 	mov	r4,zero
  80e3cc:	0005883a 	mov	r2,zero
  80e3d0:	003f8406 	br	80e1e4 <__subdf3+0x1b8>
  80e3d4:	4806977a 	slli	r3,r9,29
  80e3d8:	00880034 	movhi	r2,8192
  80e3dc:	10bfffc4 	addi	r2,r2,-1
  80e3e0:	4812d0fa 	srli	r9,r9,3
  80e3e4:	2088703a 	and	r4,r4,r2
  80e3e8:	20c4b03a 	or	r2,r4,r3
  80e3ec:	4886b03a 	or	r3,r9,r2
  80e3f0:	18013726 	beq	r3,zero,80e8d0 <__subdf3+0x8a4>
  80e3f4:	00c00434 	movhi	r3,16
  80e3f8:	18ffffc4 	addi	r3,r3,-1
  80e3fc:	49000234 	orhi	r4,r9,8
  80e400:	20c8703a 	and	r4,r4,r3
  80e404:	00c1ffc4 	movi	r3,2047
  80e408:	003f7606 	br	80e1e4 <__subdf3+0x1b8>
  80e40c:	8009883a 	mov	r4,r16
  80e410:	08006440 	call	800644 <__clzsi2>
  80e414:	10c00604 	addi	r3,r2,24
  80e418:	19000808 	cmpgei	r4,r3,32
  80e41c:	203f4526 	beq	r4,zero,80e134 <__subdf3+0x108>
  80e420:	113ffe04 	addi	r4,r2,-8
  80e424:	8108983a 	sll	r4,r16,r4
  80e428:	0021883a 	mov	r16,zero
  80e42c:	1cbf480e 	bge	r3,r18,80e150 <__subdf3+0x124>
  80e430:	00bfe034 	movhi	r2,65408
  80e434:	10bfffc4 	addi	r2,r2,-1
  80e438:	90e5c83a 	sub	r18,r18,r3
  80e43c:	2088703a 	and	r4,r4,r2
  80e440:	003f5106 	br	80e188 <__subdf3+0x15c>
  80e444:	18001e26 	beq	r3,zero,80e4c0 <__subdf3+0x494>
  80e448:	4487c83a 	sub	r3,r8,r18
  80e44c:	90006826 	beq	r18,zero,80e5f0 <__subdf3+0x5c4>
  80e450:	5000a526 	beq	r10,zero,80e6e8 <__subdf3+0x6bc>
  80e454:	4a402034 	orhi	r9,r9,128
  80e458:	18800e48 	cmpgei	r2,r3,57
  80e45c:	1000b61e 	bne	r2,zero,80e738 <__subdf3+0x70c>
  80e460:	18800808 	cmpgei	r2,r3,32
  80e464:	1001021e 	bne	r2,zero,80e870 <__subdf3+0x844>
  80e468:	00800804 	movi	r2,32
  80e46c:	10c5c83a 	sub	r2,r2,r3
  80e470:	48a0983a 	sll	r16,r9,r2
  80e474:	70c8d83a 	srl	r4,r14,r3
  80e478:	7084983a 	sll	r2,r14,r2
  80e47c:	48d2d83a 	srl	r9,r9,r3
  80e480:	8120b03a 	or	r16,r16,r4
  80e484:	1004c03a 	cmpne	r2,r2,zero
  80e488:	80a0b03a 	or	r16,r16,r2
  80e48c:	7a5f883a 	add	r15,r15,r9
  80e490:	8361883a 	add	r16,r16,r13
  80e494:	8349803a 	cmpltu	r4,r16,r13
  80e498:	23c9883a 	add	r4,r4,r15
  80e49c:	4025883a 	mov	r18,r8
  80e4a0:	003fc306 	br	80e3b0 <__subdf3+0x384>
  80e4a4:	480a977a 	slli	r5,r9,29
  80e4a8:	00880034 	movhi	r2,8192
  80e4ac:	10bfffc4 	addi	r2,r2,-1
  80e4b0:	2088703a 	and	r4,r4,r2
  80e4b4:	4812d0fa 	srli	r9,r9,3
  80e4b8:	2144b03a 	or	r2,r4,r5
  80e4bc:	003fb006 	br	80e380 <__subdf3+0x354>
  80e4c0:	90800044 	addi	r2,r18,1
  80e4c4:	1141ff8c 	andi	r5,r2,2046
  80e4c8:	28005c1e 	bne	r5,zero,80e63c <__subdf3+0x610>
  80e4cc:	4b84b03a 	or	r2,r9,r14
  80e4d0:	9000a71e 	bne	r18,zero,80e770 <__subdf3+0x744>
  80e4d4:	1000df26 	beq	r2,zero,80e854 <__subdf3+0x828>
  80e4d8:	7b44b03a 	or	r2,r15,r13
  80e4dc:	10008f26 	beq	r2,zero,80e71c <__subdf3+0x6f0>
  80e4e0:	7361883a 	add	r16,r14,r13
  80e4e4:	4bc9883a 	add	r4,r9,r15
  80e4e8:	839d803a 	cmpltu	r14,r16,r14
  80e4ec:	2389883a 	add	r4,r4,r14
  80e4f0:	2080202c 	andhi	r2,r4,128
  80e4f4:	103f9b26 	beq	r2,zero,80e364 <__subdf3+0x338>
  80e4f8:	00bfe034 	movhi	r2,65408
  80e4fc:	10bfffc4 	addi	r2,r2,-1
  80e500:	2088703a 	and	r4,r4,r2
  80e504:	04800044 	movi	r18,1
  80e508:	003f9606 	br	80e364 <__subdf3+0x338>
  80e50c:	50007626 	beq	r10,zero,80e6e8 <__subdf3+0x6bc>
  80e510:	4a402034 	orhi	r9,r9,128
  80e514:	18800e48 	cmpgei	r2,r3,57
  80e518:	10002e1e 	bne	r2,zero,80e5d4 <__subdf3+0x5a8>
  80e51c:	18800808 	cmpgei	r2,r3,32
  80e520:	1000881e 	bne	r2,zero,80e744 <__subdf3+0x718>
  80e524:	00800804 	movi	r2,32
  80e528:	10c5c83a 	sub	r2,r2,r3
  80e52c:	48a0983a 	sll	r16,r9,r2
  80e530:	70c8d83a 	srl	r4,r14,r3
  80e534:	709c983a 	sll	r14,r14,r2
  80e538:	48d2d83a 	srl	r9,r9,r3
  80e53c:	8120b03a 	or	r16,r16,r4
  80e540:	701cc03a 	cmpne	r14,r14,zero
  80e544:	83a0b03a 	or	r16,r16,r14
  80e548:	7a5fc83a 	sub	r15,r15,r9
  80e54c:	00002306 	br	80e5dc <__subdf3+0x5b0>
  80e550:	7361c83a 	sub	r16,r14,r13
  80e554:	4be7c83a 	sub	r19,r9,r15
  80e558:	7409803a 	cmpltu	r4,r14,r16
  80e55c:	9927c83a 	sub	r19,r19,r4
  80e560:	9880202c 	andhi	r2,r19,128
  80e564:	1000411e 	bne	r2,zero,80e66c <__subdf3+0x640>
  80e568:	84c4b03a 	or	r2,r16,r19
  80e56c:	103eed1e 	bne	r2,zero,80e124 <__subdf3+0xf8>
  80e570:	0013883a 	mov	r9,zero
  80e574:	0023883a 	mov	r17,zero
  80e578:	003f8306 	br	80e388 <__subdf3+0x35c>
  80e57c:	04800084 	movi	r18,2
  80e580:	00bfe034 	movhi	r2,65408
  80e584:	10bfffc4 	addi	r2,r2,-1
  80e588:	8006d07a 	srli	r3,r16,1
  80e58c:	2088703a 	and	r4,r4,r2
  80e590:	200497fa 	slli	r2,r4,31
  80e594:	8400004c 	andi	r16,r16,1
  80e598:	1c20b03a 	or	r16,r3,r16
  80e59c:	2008d07a 	srli	r4,r4,1
  80e5a0:	1420b03a 	or	r16,r2,r16
  80e5a4:	003ef806 	br	80e188 <__subdf3+0x15c>
  80e5a8:	1c3ff804 	addi	r16,r3,-32
  80e5ac:	18800820 	cmpeqi	r2,r3,32
  80e5b0:	7c0ad83a 	srl	r5,r15,r16
  80e5b4:	1000041e 	bne	r2,zero,80e5c8 <__subdf3+0x59c>
  80e5b8:	00801004 	movi	r2,64
  80e5bc:	10c5c83a 	sub	r2,r2,r3
  80e5c0:	7884983a 	sll	r2,r15,r2
  80e5c4:	689ab03a 	or	r13,r13,r2
  80e5c8:	6820c03a 	cmpne	r16,r13,zero
  80e5cc:	8160b03a 	or	r16,r16,r5
  80e5d0:	003ecc06 	br	80e104 <__subdf3+0xd8>
  80e5d4:	4b92b03a 	or	r9,r9,r14
  80e5d8:	4820c03a 	cmpne	r16,r9,zero
  80e5dc:	6c21c83a 	sub	r16,r13,r16
  80e5e0:	6c09803a 	cmpltu	r4,r13,r16
  80e5e4:	7909c83a 	sub	r4,r15,r4
  80e5e8:	4025883a 	mov	r18,r8
  80e5ec:	003ec806 	br	80e110 <__subdf3+0xe4>
  80e5f0:	4b84b03a 	or	r2,r9,r14
  80e5f4:	10007e26 	beq	r2,zero,80e7f0 <__subdf3+0x7c4>
  80e5f8:	18bfffc4 	addi	r2,r3,-1
  80e5fc:	1000a726 	beq	r2,zero,80e89c <__subdf3+0x870>
  80e600:	18c1ffd8 	cmpnei	r3,r3,2047
  80e604:	18003826 	beq	r3,zero,80e6e8 <__subdf3+0x6bc>
  80e608:	1007883a 	mov	r3,r2
  80e60c:	003f9206 	br	80e458 <__subdf3+0x42c>
  80e610:	00800804 	movi	r2,32
  80e614:	10c5c83a 	sub	r2,r2,r3
  80e618:	78a0983a 	sll	r16,r15,r2
  80e61c:	68c8d83a 	srl	r4,r13,r3
  80e620:	689a983a 	sll	r13,r13,r2
  80e624:	78c4d83a 	srl	r2,r15,r3
  80e628:	8120b03a 	or	r16,r16,r4
  80e62c:	681ac03a 	cmpne	r13,r13,zero
  80e630:	8360b03a 	or	r16,r16,r13
  80e634:	4893883a 	add	r9,r9,r2
  80e638:	003f5a06 	br	80e3a4 <__subdf3+0x378>
  80e63c:	10c1ffe0 	cmpeqi	r3,r2,2047
  80e640:	183f601e 	bne	r3,zero,80e3c4 <__subdf3+0x398>
  80e644:	735b883a 	add	r13,r14,r13
  80e648:	6b9d803a 	cmpltu	r14,r13,r14
  80e64c:	4bc9883a 	add	r4,r9,r15
  80e650:	2389883a 	add	r4,r4,r14
  80e654:	202097fa 	slli	r16,r4,31
  80e658:	681ad07a 	srli	r13,r13,1
  80e65c:	2008d07a 	srli	r4,r4,1
  80e660:	1025883a 	mov	r18,r2
  80e664:	8360b03a 	or	r16,r16,r13
  80e668:	003f3e06 	br	80e364 <__subdf3+0x338>
  80e66c:	6ba1c83a 	sub	r16,r13,r14
  80e670:	7a49c83a 	sub	r4,r15,r9
  80e674:	6c1b803a 	cmpltu	r13,r13,r16
  80e678:	2367c83a 	sub	r19,r4,r13
  80e67c:	5823883a 	mov	r17,r11
  80e680:	003ea806 	br	80e124 <__subdf3+0xf8>
  80e684:	7808977a 	slli	r4,r15,29
  80e688:	00880034 	movhi	r2,8192
  80e68c:	10bfffc4 	addi	r2,r2,-1
  80e690:	308c703a 	and	r6,r6,r2
  80e694:	7812d0fa 	srli	r9,r15,3
  80e698:	3104b03a 	or	r2,r6,r4
  80e69c:	003f3806 	br	80e380 <__subdf3+0x354>
  80e6a0:	28005a1e 	bne	r5,zero,80e80c <__subdf3+0x7e0>
  80e6a4:	10008526 	beq	r2,zero,80e8bc <__subdf3+0x890>
  80e6a8:	7806977a 	slli	r3,r15,29
  80e6ac:	00880034 	movhi	r2,8192
  80e6b0:	10bfffc4 	addi	r2,r2,-1
  80e6b4:	3084703a 	and	r2,r6,r2
  80e6b8:	7812d0fa 	srli	r9,r15,3
  80e6bc:	10c4b03a 	or	r2,r2,r3
  80e6c0:	5823883a 	mov	r17,r11
  80e6c4:	003f4906 	br	80e3ec <__subdf3+0x3c0>
  80e6c8:	7361883a 	add	r16,r14,r13
  80e6cc:	4bc9883a 	add	r4,r9,r15
  80e6d0:	839d803a 	cmpltu	r14,r16,r14
  80e6d4:	2389883a 	add	r4,r4,r14
  80e6d8:	2080202c 	andhi	r2,r4,128
  80e6dc:	103fa71e 	bne	r2,zero,80e57c <__subdf3+0x550>
  80e6e0:	04800044 	movi	r18,1
  80e6e4:	003f1f06 	br	80e364 <__subdf3+0x338>
  80e6e8:	7806977a 	slli	r3,r15,29
  80e6ec:	00880034 	movhi	r2,8192
  80e6f0:	10bfffc4 	addi	r2,r2,-1
  80e6f4:	3084703a 	and	r2,r6,r2
  80e6f8:	7812d0fa 	srli	r9,r15,3
  80e6fc:	10c4b03a 	or	r2,r2,r3
  80e700:	003f3a06 	br	80e3ec <__subdf3+0x3c0>
  80e704:	7361c83a 	sub	r16,r14,r13
  80e708:	4bc9c83a 	sub	r4,r9,r15
  80e70c:	741d803a 	cmpltu	r14,r14,r16
  80e710:	2389c83a 	sub	r4,r4,r14
  80e714:	04800044 	movi	r18,1
  80e718:	003e7d06 	br	80e110 <__subdf3+0xe4>
  80e71c:	480a977a 	slli	r5,r9,29
  80e720:	00880034 	movhi	r2,8192
  80e724:	10bfffc4 	addi	r2,r2,-1
  80e728:	2084703a 	and	r2,r4,r2
  80e72c:	4812d0fa 	srli	r9,r9,3
  80e730:	1144b03a 	or	r2,r2,r5
  80e734:	003f1406 	br	80e388 <__subdf3+0x35c>
  80e738:	4b92b03a 	or	r9,r9,r14
  80e73c:	4820c03a 	cmpne	r16,r9,zero
  80e740:	003f5306 	br	80e490 <__subdf3+0x464>
  80e744:	1c3ff804 	addi	r16,r3,-32
  80e748:	19000820 	cmpeqi	r4,r3,32
  80e74c:	4c04d83a 	srl	r2,r9,r16
  80e750:	2000041e 	bne	r4,zero,80e764 <__subdf3+0x738>
  80e754:	01001004 	movi	r4,64
  80e758:	20c7c83a 	sub	r3,r4,r3
  80e75c:	48d2983a 	sll	r9,r9,r3
  80e760:	725cb03a 	or	r14,r14,r9
  80e764:	7020c03a 	cmpne	r16,r14,zero
  80e768:	80a0b03a 	or	r16,r16,r2
  80e76c:	003f9b06 	br	80e5dc <__subdf3+0x5b0>
  80e770:	103fdd26 	beq	r2,zero,80e6e8 <__subdf3+0x6bc>
  80e774:	7b5ab03a 	or	r13,r15,r13
  80e778:	480a977a 	slli	r5,r9,29
  80e77c:	4812d0fa 	srli	r9,r9,3
  80e780:	6800251e 	bne	r13,zero,80e818 <__subdf3+0x7ec>
  80e784:	00880034 	movhi	r2,8192
  80e788:	10bfffc4 	addi	r2,r2,-1
  80e78c:	2084703a 	and	r2,r4,r2
  80e790:	1144b03a 	or	r2,r2,r5
  80e794:	003f1506 	br	80e3ec <__subdf3+0x3c0>
  80e798:	103f7526 	beq	r2,zero,80e570 <__subdf3+0x544>
  80e79c:	7808977a 	slli	r4,r15,29
  80e7a0:	00880034 	movhi	r2,8192
  80e7a4:	10bfffc4 	addi	r2,r2,-1
  80e7a8:	3084703a 	and	r2,r6,r2
  80e7ac:	7812d0fa 	srli	r9,r15,3
  80e7b0:	1104b03a 	or	r2,r2,r4
  80e7b4:	5823883a 	mov	r17,r11
  80e7b8:	003ef306 	br	80e388 <__subdf3+0x35c>
  80e7bc:	6ba1c83a 	sub	r16,r13,r14
  80e7c0:	7a49c83a 	sub	r4,r15,r9
  80e7c4:	6c1b803a 	cmpltu	r13,r13,r16
  80e7c8:	2349c83a 	sub	r4,r4,r13
  80e7cc:	04800044 	movi	r18,1
  80e7d0:	003e4f06 	br	80e110 <__subdf3+0xe4>
  80e7d4:	4806977a 	slli	r3,r9,29
  80e7d8:	00880034 	movhi	r2,8192
  80e7dc:	10bfffc4 	addi	r2,r2,-1
  80e7e0:	2084703a 	and	r2,r4,r2
  80e7e4:	4812d0fa 	srli	r9,r9,3
  80e7e8:	10c4b03a 	or	r2,r2,r3
  80e7ec:	003eff06 	br	80e3ec <__subdf3+0x3c0>
  80e7f0:	7808977a 	slli	r4,r15,29
  80e7f4:	00880034 	movhi	r2,8192
  80e7f8:	10bfffc4 	addi	r2,r2,-1
  80e7fc:	3084703a 	and	r2,r6,r2
  80e800:	7812d0fa 	srli	r9,r15,3
  80e804:	1104b03a 	or	r2,r2,r4
  80e808:	003edd06 	br	80e380 <__subdf3+0x354>
  80e80c:	480a977a 	slli	r5,r9,29
  80e810:	4812d0fa 	srli	r9,r9,3
  80e814:	103fdb26 	beq	r2,zero,80e784 <__subdf3+0x758>
  80e818:	00c80034 	movhi	r3,8192
  80e81c:	18ffffc4 	addi	r3,r3,-1
  80e820:	20c4703a 	and	r2,r4,r3
  80e824:	4900022c 	andhi	r4,r9,8
  80e828:	1144b03a 	or	r2,r2,r5
  80e82c:	203eef26 	beq	r4,zero,80e3ec <__subdf3+0x3c0>
  80e830:	7808d0fa 	srli	r4,r15,3
  80e834:	2140022c 	andhi	r5,r4,8
  80e838:	283eec1e 	bne	r5,zero,80e3ec <__subdf3+0x3c0>
  80e83c:	7804977a 	slli	r2,r15,29
  80e840:	30cc703a 	and	r6,r6,r3
  80e844:	5823883a 	mov	r17,r11
  80e848:	3084b03a 	or	r2,r6,r2
  80e84c:	2013883a 	mov	r9,r4
  80e850:	003ee606 	br	80e3ec <__subdf3+0x3c0>
  80e854:	7808977a 	slli	r4,r15,29
  80e858:	00880034 	movhi	r2,8192
  80e85c:	10bfffc4 	addi	r2,r2,-1
  80e860:	3084703a 	and	r2,r6,r2
  80e864:	7812d0fa 	srli	r9,r15,3
  80e868:	1104b03a 	or	r2,r2,r4
  80e86c:	003ec606 	br	80e388 <__subdf3+0x35c>
  80e870:	18bff804 	addi	r2,r3,-32
  80e874:	19000820 	cmpeqi	r4,r3,32
  80e878:	4884d83a 	srl	r2,r9,r2
  80e87c:	2000041e 	bne	r4,zero,80e890 <__subdf3+0x864>
  80e880:	01001004 	movi	r4,64
  80e884:	20c7c83a 	sub	r3,r4,r3
  80e888:	48d2983a 	sll	r9,r9,r3
  80e88c:	725cb03a 	or	r14,r14,r9
  80e890:	7020c03a 	cmpne	r16,r14,zero
  80e894:	80a0b03a 	or	r16,r16,r2
  80e898:	003efd06 	br	80e490 <__subdf3+0x464>
  80e89c:	7361883a 	add	r16,r14,r13
  80e8a0:	4bc9883a 	add	r4,r9,r15
  80e8a4:	835b803a 	cmpltu	r13,r16,r13
  80e8a8:	2349883a 	add	r4,r4,r13
  80e8ac:	003f8a06 	br	80e6d8 <__subdf3+0x6ac>
  80e8b0:	8104b03a 	or	r2,r16,r4
  80e8b4:	103f2e26 	beq	r2,zero,80e570 <__subdf3+0x544>
  80e8b8:	003eaa06 	br	80e364 <__subdf3+0x338>
  80e8bc:	02400434 	movhi	r9,16
  80e8c0:	0023883a 	mov	r17,zero
  80e8c4:	00bfffc4 	movi	r2,-1
  80e8c8:	4a7fffc4 	addi	r9,r9,-1
  80e8cc:	003ec906 	br	80e3f4 <__subdf3+0x3c8>
  80e8d0:	0005883a 	mov	r2,zero
  80e8d4:	00c1ffc4 	movi	r3,2047
  80e8d8:	0009883a 	mov	r4,zero
  80e8dc:	003e4106 	br	80e1e4 <__subdf3+0x1b8>

0080e8e0 <__fixdfsi>:
  80e8e0:	2806d53a 	srli	r3,r5,20
  80e8e4:	01800434 	movhi	r6,16
  80e8e8:	31bfffc4 	addi	r6,r6,-1
  80e8ec:	18c1ffcc 	andi	r3,r3,2047
  80e8f0:	19c0ffd0 	cmplti	r7,r3,1023
  80e8f4:	2810d7fa 	srli	r8,r5,31
  80e8f8:	298a703a 	and	r5,r5,r6
  80e8fc:	3800061e 	bne	r7,zero,80e918 <__fixdfsi+0x38>
  80e900:	18810790 	cmplti	r2,r3,1054
  80e904:	1000061e 	bne	r2,zero,80e920 <__fixdfsi+0x40>
  80e908:	00a00034 	movhi	r2,32768
  80e90c:	10bfffc4 	addi	r2,r2,-1
  80e910:	4085883a 	add	r2,r8,r2
  80e914:	f800283a 	ret
  80e918:	0005883a 	mov	r2,zero
  80e91c:	f800283a 	ret
  80e920:	01810cc4 	movi	r6,1075
  80e924:	30cdc83a 	sub	r6,r6,r3
  80e928:	30800808 	cmpgei	r2,r6,32
  80e92c:	29400434 	orhi	r5,r5,16
  80e930:	1000071e 	bne	r2,zero,80e950 <__fixdfsi+0x70>
  80e934:	18befb44 	addi	r2,r3,-1043
  80e938:	2884983a 	sll	r2,r5,r2
  80e93c:	2188d83a 	srl	r4,r4,r6
  80e940:	1104b03a 	or	r2,r2,r4
  80e944:	403ff526 	beq	r8,zero,80e91c <__fixdfsi+0x3c>
  80e948:	0085c83a 	sub	r2,zero,r2
  80e94c:	f800283a 	ret
  80e950:	008104c4 	movi	r2,1043
  80e954:	10c5c83a 	sub	r2,r2,r3
  80e958:	2884d83a 	srl	r2,r5,r2
  80e95c:	003ff906 	br	80e944 <__fixdfsi+0x64>

0080e960 <__floatsidf>:
  80e960:	defffd04 	addi	sp,sp,-12
  80e964:	dfc00215 	stw	ra,8(sp)
  80e968:	dc400115 	stw	r17,4(sp)
  80e96c:	dc000015 	stw	r16,0(sp)
  80e970:	20001326 	beq	r4,zero,80e9c0 <__floatsidf+0x60>
  80e974:	2022d7fa 	srli	r17,r4,31
  80e978:	2021883a 	mov	r16,r4
  80e97c:	20002416 	blt	r4,zero,80ea10 <__floatsidf+0xb0>
  80e980:	8009883a 	mov	r4,r16
  80e984:	08006440 	call	800644 <__clzsi2>
  80e988:	01010784 	movi	r4,1054
  80e98c:	2089c83a 	sub	r4,r4,r2
  80e990:	114002c8 	cmpgei	r5,r2,11
  80e994:	20c1ffcc 	andi	r3,r4,2047
  80e998:	2800161e 	bne	r5,zero,80e9f4 <__floatsidf+0x94>
  80e99c:	010002c4 	movi	r4,11
  80e9a0:	2089c83a 	sub	r4,r4,r2
  80e9a4:	810ad83a 	srl	r5,r16,r4
  80e9a8:	01000434 	movhi	r4,16
  80e9ac:	10800544 	addi	r2,r2,21
  80e9b0:	213fffc4 	addi	r4,r4,-1
  80e9b4:	8084983a 	sll	r2,r16,r2
  80e9b8:	290a703a 	and	r5,r5,r4
  80e9bc:	00000406 	br	80e9d0 <__floatsidf+0x70>
  80e9c0:	0023883a 	mov	r17,zero
  80e9c4:	0007883a 	mov	r3,zero
  80e9c8:	000b883a 	mov	r5,zero
  80e9cc:	0005883a 	mov	r2,zero
  80e9d0:	1808953a 	slli	r4,r3,20
  80e9d4:	880697fa 	slli	r3,r17,31
  80e9d8:	2148b03a 	or	r4,r4,r5
  80e9dc:	20c6b03a 	or	r3,r4,r3
  80e9e0:	dfc00217 	ldw	ra,8(sp)
  80e9e4:	dc400117 	ldw	r17,4(sp)
  80e9e8:	dc000017 	ldw	r16,0(sp)
  80e9ec:	dec00304 	addi	sp,sp,12
  80e9f0:	f800283a 	ret
  80e9f4:	10bffd44 	addi	r2,r2,-11
  80e9f8:	808a983a 	sll	r5,r16,r2
  80e9fc:	00800434 	movhi	r2,16
  80ea00:	10bfffc4 	addi	r2,r2,-1
  80ea04:	288a703a 	and	r5,r5,r2
  80ea08:	0005883a 	mov	r2,zero
  80ea0c:	003ff006 	br	80e9d0 <__floatsidf+0x70>
  80ea10:	0121c83a 	sub	r16,zero,r4
  80ea14:	003fda06 	br	80e980 <__floatsidf+0x20>

0080ea18 <__floatunsidf>:
  80ea18:	defffe04 	addi	sp,sp,-8
  80ea1c:	dc000015 	stw	r16,0(sp)
  80ea20:	dfc00115 	stw	ra,4(sp)
  80ea24:	2021883a 	mov	r16,r4
  80ea28:	20000f26 	beq	r4,zero,80ea68 <__floatunsidf+0x50>
  80ea2c:	08006440 	call	800644 <__clzsi2>
  80ea30:	00c10784 	movi	r3,1054
  80ea34:	1887c83a 	sub	r3,r3,r2
  80ea38:	110002c8 	cmpgei	r4,r2,11
  80ea3c:	18c1ffcc 	andi	r3,r3,2047
  80ea40:	2000121e 	bne	r4,zero,80ea8c <__floatunsidf+0x74>
  80ea44:	014002c4 	movi	r5,11
  80ea48:	288bc83a 	sub	r5,r5,r2
  80ea4c:	814ad83a 	srl	r5,r16,r5
  80ea50:	01000434 	movhi	r4,16
  80ea54:	10800544 	addi	r2,r2,21
  80ea58:	213fffc4 	addi	r4,r4,-1
  80ea5c:	80a0983a 	sll	r16,r16,r2
  80ea60:	290a703a 	and	r5,r5,r4
  80ea64:	00000206 	br	80ea70 <__floatunsidf+0x58>
  80ea68:	0007883a 	mov	r3,zero
  80ea6c:	000b883a 	mov	r5,zero
  80ea70:	1806953a 	slli	r3,r3,20
  80ea74:	8005883a 	mov	r2,r16
  80ea78:	1946b03a 	or	r3,r3,r5
  80ea7c:	dfc00117 	ldw	ra,4(sp)
  80ea80:	dc000017 	ldw	r16,0(sp)
  80ea84:	dec00204 	addi	sp,sp,8
  80ea88:	f800283a 	ret
  80ea8c:	117ffd44 	addi	r5,r2,-11
  80ea90:	814a983a 	sll	r5,r16,r5
  80ea94:	00800434 	movhi	r2,16
  80ea98:	10bfffc4 	addi	r2,r2,-1
  80ea9c:	288a703a 	and	r5,r5,r2
  80eaa0:	0021883a 	mov	r16,zero
  80eaa4:	003ff206 	br	80ea70 <__floatunsidf+0x58>

0080eaa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eaa8:	defffe04 	addi	sp,sp,-8
  80eaac:	dfc00115 	stw	ra,4(sp)
  80eab0:	df000015 	stw	fp,0(sp)
  80eab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80eab8:	d0a01117 	ldw	r2,-32700(gp)
  80eabc:	10000326 	beq	r2,zero,80eacc <alt_get_errno+0x24>
  80eac0:	d0a01117 	ldw	r2,-32700(gp)
  80eac4:	103ee83a 	callr	r2
  80eac8:	00000106 	br	80ead0 <alt_get_errno+0x28>
  80eacc:	d0a75804 	addi	r2,gp,-25248
}
  80ead0:	e037883a 	mov	sp,fp
  80ead4:	dfc00117 	ldw	ra,4(sp)
  80ead8:	df000017 	ldw	fp,0(sp)
  80eadc:	dec00204 	addi	sp,sp,8
  80eae0:	f800283a 	ret

0080eae4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80eae4:	defffb04 	addi	sp,sp,-20
  80eae8:	dfc00415 	stw	ra,16(sp)
  80eaec:	df000315 	stw	fp,12(sp)
  80eaf0:	df000304 	addi	fp,sp,12
  80eaf4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80eaf8:	e0bffd17 	ldw	r2,-12(fp)
  80eafc:	10000916 	blt	r2,zero,80eb24 <close+0x40>
  80eb00:	e0fffd17 	ldw	r3,-12(fp)
  80eb04:	1805883a 	mov	r2,r3
  80eb08:	1085883a 	add	r2,r2,r2
  80eb0c:	10c5883a 	add	r2,r2,r3
  80eb10:	100490ba 	slli	r2,r2,2
  80eb14:	00c02074 	movhi	r3,129
  80eb18:	18c9a504 	addi	r3,r3,9876
  80eb1c:	10c5883a 	add	r2,r2,r3
  80eb20:	00000106 	br	80eb28 <close+0x44>
  80eb24:	0005883a 	mov	r2,zero
  80eb28:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80eb2c:	e0bfff17 	ldw	r2,-4(fp)
  80eb30:	10001926 	beq	r2,zero,80eb98 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80eb34:	e0bfff17 	ldw	r2,-4(fp)
  80eb38:	10800017 	ldw	r2,0(r2)
  80eb3c:	10800417 	ldw	r2,16(r2)
  80eb40:	10000626 	beq	r2,zero,80eb5c <close+0x78>
  80eb44:	e0bfff17 	ldw	r2,-4(fp)
  80eb48:	10800017 	ldw	r2,0(r2)
  80eb4c:	10800417 	ldw	r2,16(r2)
  80eb50:	e13fff17 	ldw	r4,-4(fp)
  80eb54:	103ee83a 	callr	r2
  80eb58:	00000106 	br	80eb60 <close+0x7c>
  80eb5c:	0005883a 	mov	r2,zero
  80eb60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80eb64:	e13ffd17 	ldw	r4,-12(fp)
  80eb68:	080f3a00 	call	80f3a0 <alt_release_fd>
    if (rval < 0)
  80eb6c:	e0bffe17 	ldw	r2,-8(fp)
  80eb70:	1000070e 	bge	r2,zero,80eb90 <close+0xac>
    {
      ALT_ERRNO = -rval;
  80eb74:	080eaa80 	call	80eaa8 <alt_get_errno>
  80eb78:	1007883a 	mov	r3,r2
  80eb7c:	e0bffe17 	ldw	r2,-8(fp)
  80eb80:	0085c83a 	sub	r2,zero,r2
  80eb84:	18800015 	stw	r2,0(r3)
      return -1;
  80eb88:	00bfffc4 	movi	r2,-1
  80eb8c:	00000706 	br	80ebac <close+0xc8>
    }
    return 0;
  80eb90:	0005883a 	mov	r2,zero
  80eb94:	00000506 	br	80ebac <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80eb98:	080eaa80 	call	80eaa8 <alt_get_errno>
  80eb9c:	1007883a 	mov	r3,r2
  80eba0:	00801444 	movi	r2,81
  80eba4:	18800015 	stw	r2,0(r3)
    return -1;
  80eba8:	00bfffc4 	movi	r2,-1
  }
}
  80ebac:	e037883a 	mov	sp,fp
  80ebb0:	dfc00117 	ldw	ra,4(sp)
  80ebb4:	df000017 	ldw	fp,0(sp)
  80ebb8:	dec00204 	addi	sp,sp,8
  80ebbc:	f800283a 	ret

0080ebc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ebc0:	defffc04 	addi	sp,sp,-16
  80ebc4:	df000315 	stw	fp,12(sp)
  80ebc8:	df000304 	addi	fp,sp,12
  80ebcc:	e13fff15 	stw	r4,-4(fp)
  80ebd0:	e17ffe15 	stw	r5,-8(fp)
  80ebd4:	e1bffd15 	stw	r6,-12(fp)
  return len;
  80ebd8:	e0bffd17 	ldw	r2,-12(fp)
}
  80ebdc:	e037883a 	mov	sp,fp
  80ebe0:	df000017 	ldw	fp,0(sp)
  80ebe4:	dec00104 	addi	sp,sp,4
  80ebe8:	f800283a 	ret

0080ebec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80ebec:	defffd04 	addi	sp,sp,-12
  80ebf0:	df000215 	stw	fp,8(sp)
  80ebf4:	df000204 	addi	fp,sp,8
  80ebf8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80ebfc:	0001883a 	nop
  80ec00:	e0bffe17 	ldw	r2,-8(fp)
  80ec04:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80ec08:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ec0c:	10000226 	beq	r2,zero,80ec18 <_exit+0x2c>
    ALT_SIM_FAIL();
  80ec10:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  80ec14:	00000106 	br	80ec1c <_exit+0x30>
    ALT_SIM_PASS();
  80ec18:	002af0b0 	cmpltui	zero,zero,43970
}
  80ec1c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ec20:	003fff06 	br	80ec20 <_exit+0x34>

0080ec24 <alt_get_errno>:
{
  80ec24:	defffe04 	addi	sp,sp,-8
  80ec28:	dfc00115 	stw	ra,4(sp)
  80ec2c:	df000015 	stw	fp,0(sp)
  80ec30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ec34:	d0a01117 	ldw	r2,-32700(gp)
  80ec38:	10000326 	beq	r2,zero,80ec48 <alt_get_errno+0x24>
  80ec3c:	d0a01117 	ldw	r2,-32700(gp)
  80ec40:	103ee83a 	callr	r2
  80ec44:	00000106 	br	80ec4c <alt_get_errno+0x28>
  80ec48:	d0a75804 	addi	r2,gp,-25248
}
  80ec4c:	e037883a 	mov	sp,fp
  80ec50:	dfc00117 	ldw	ra,4(sp)
  80ec54:	df000017 	ldw	fp,0(sp)
  80ec58:	dec00204 	addi	sp,sp,8
  80ec5c:	f800283a 	ret

0080ec60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ec60:	defffb04 	addi	sp,sp,-20
  80ec64:	dfc00415 	stw	ra,16(sp)
  80ec68:	df000315 	stw	fp,12(sp)
  80ec6c:	df000304 	addi	fp,sp,12
  80ec70:	e13ffe15 	stw	r4,-8(fp)
  80ec74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ec78:	e0bffe17 	ldw	r2,-8(fp)
  80ec7c:	10000916 	blt	r2,zero,80eca4 <fstat+0x44>
  80ec80:	e0fffe17 	ldw	r3,-8(fp)
  80ec84:	1805883a 	mov	r2,r3
  80ec88:	1085883a 	add	r2,r2,r2
  80ec8c:	10c5883a 	add	r2,r2,r3
  80ec90:	100490ba 	slli	r2,r2,2
  80ec94:	00c02074 	movhi	r3,129
  80ec98:	18c9a504 	addi	r3,r3,9876
  80ec9c:	10c5883a 	add	r2,r2,r3
  80eca0:	00000106 	br	80eca8 <fstat+0x48>
  80eca4:	0005883a 	mov	r2,zero
  80eca8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80ecac:	e0bfff17 	ldw	r2,-4(fp)
  80ecb0:	10001026 	beq	r2,zero,80ecf4 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ecb4:	e0bfff17 	ldw	r2,-4(fp)
  80ecb8:	10800017 	ldw	r2,0(r2)
  80ecbc:	10800817 	ldw	r2,32(r2)
  80ecc0:	10000726 	beq	r2,zero,80ece0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  80ecc4:	e0bfff17 	ldw	r2,-4(fp)
  80ecc8:	10800017 	ldw	r2,0(r2)
  80eccc:	10800817 	ldw	r2,32(r2)
  80ecd0:	e17ffd17 	ldw	r5,-12(fp)
  80ecd4:	e13fff17 	ldw	r4,-4(fp)
  80ecd8:	103ee83a 	callr	r2
  80ecdc:	00000a06 	br	80ed08 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ece0:	e0bffd17 	ldw	r2,-12(fp)
  80ece4:	00c80004 	movi	r3,8192
  80ece8:	10c00115 	stw	r3,4(r2)
      return 0;
  80ecec:	0005883a 	mov	r2,zero
  80ecf0:	00000506 	br	80ed08 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ecf4:	080ec240 	call	80ec24 <alt_get_errno>
  80ecf8:	1007883a 	mov	r3,r2
  80ecfc:	00801444 	movi	r2,81
  80ed00:	18800015 	stw	r2,0(r3)
    return -1;
  80ed04:	00bfffc4 	movi	r2,-1
  }
}
  80ed08:	e037883a 	mov	sp,fp
  80ed0c:	dfc00117 	ldw	ra,4(sp)
  80ed10:	df000017 	ldw	fp,0(sp)
  80ed14:	dec00204 	addi	sp,sp,8
  80ed18:	f800283a 	ret

0080ed1c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80ed1c:	deffff04 	addi	sp,sp,-4
  80ed20:	df000015 	stw	fp,0(sp)
  80ed24:	d839883a 	mov	fp,sp
  return 0;
  80ed28:	0005883a 	mov	r2,zero
}
  80ed2c:	e037883a 	mov	sp,fp
  80ed30:	df000017 	ldw	fp,0(sp)
  80ed34:	dec00104 	addi	sp,sp,4
  80ed38:	f800283a 	ret

0080ed3c <alt_get_errno>:
{
  80ed3c:	defffe04 	addi	sp,sp,-8
  80ed40:	dfc00115 	stw	ra,4(sp)
  80ed44:	df000015 	stw	fp,0(sp)
  80ed48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ed4c:	d0a01117 	ldw	r2,-32700(gp)
  80ed50:	10000326 	beq	r2,zero,80ed60 <alt_get_errno+0x24>
  80ed54:	d0a01117 	ldw	r2,-32700(gp)
  80ed58:	103ee83a 	callr	r2
  80ed5c:	00000106 	br	80ed64 <alt_get_errno+0x28>
  80ed60:	d0a75804 	addi	r2,gp,-25248
}
  80ed64:	e037883a 	mov	sp,fp
  80ed68:	dfc00117 	ldw	ra,4(sp)
  80ed6c:	df000017 	ldw	fp,0(sp)
  80ed70:	dec00204 	addi	sp,sp,8
  80ed74:	f800283a 	ret

0080ed78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ed78:	deffea04 	addi	sp,sp,-88
  80ed7c:	dfc01515 	stw	ra,84(sp)
  80ed80:	df001415 	stw	fp,80(sp)
  80ed84:	df001404 	addi	fp,sp,80
  80ed88:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ed8c:	e0bfec17 	ldw	r2,-80(fp)
  80ed90:	10000916 	blt	r2,zero,80edb8 <isatty+0x40>
  80ed94:	e0ffec17 	ldw	r3,-80(fp)
  80ed98:	1805883a 	mov	r2,r3
  80ed9c:	1085883a 	add	r2,r2,r2
  80eda0:	10c5883a 	add	r2,r2,r3
  80eda4:	100490ba 	slli	r2,r2,2
  80eda8:	00c02074 	movhi	r3,129
  80edac:	18c9a504 	addi	r3,r3,9876
  80edb0:	10c5883a 	add	r2,r2,r3
  80edb4:	00000106 	br	80edbc <isatty+0x44>
  80edb8:	0005883a 	mov	r2,zero
  80edbc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80edc0:	e0bfff17 	ldw	r2,-4(fp)
  80edc4:	10000e26 	beq	r2,zero,80ee00 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80edc8:	e0bfff17 	ldw	r2,-4(fp)
  80edcc:	10800017 	ldw	r2,0(r2)
  80edd0:	10800817 	ldw	r2,32(r2)
  80edd4:	1000021e 	bne	r2,zero,80ede0 <isatty+0x68>
    {
      return 1;
  80edd8:	00800044 	movi	r2,1
  80eddc:	00000d06 	br	80ee14 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ede0:	e0bfed04 	addi	r2,fp,-76
  80ede4:	100b883a 	mov	r5,r2
  80ede8:	e13fec17 	ldw	r4,-80(fp)
  80edec:	080ec600 	call	80ec60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80edf0:	e0bfee17 	ldw	r2,-72(fp)
  80edf4:	10880020 	cmpeqi	r2,r2,8192
  80edf8:	10803fcc 	andi	r2,r2,255
  80edfc:	00000506 	br	80ee14 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ee00:	080ed3c0 	call	80ed3c <alt_get_errno>
  80ee04:	1007883a 	mov	r3,r2
  80ee08:	00801444 	movi	r2,81
  80ee0c:	18800015 	stw	r2,0(r3)
    return 0;
  80ee10:	0005883a 	mov	r2,zero
  }
}
  80ee14:	e037883a 	mov	sp,fp
  80ee18:	dfc00117 	ldw	ra,4(sp)
  80ee1c:	df000017 	ldw	fp,0(sp)
  80ee20:	dec00204 	addi	sp,sp,8
  80ee24:	f800283a 	ret

0080ee28 <alt_get_errno>:
{
  80ee28:	defffe04 	addi	sp,sp,-8
  80ee2c:	dfc00115 	stw	ra,4(sp)
  80ee30:	df000015 	stw	fp,0(sp)
  80ee34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee38:	d0a01117 	ldw	r2,-32700(gp)
  80ee3c:	10000326 	beq	r2,zero,80ee4c <alt_get_errno+0x24>
  80ee40:	d0a01117 	ldw	r2,-32700(gp)
  80ee44:	103ee83a 	callr	r2
  80ee48:	00000106 	br	80ee50 <alt_get_errno+0x28>
  80ee4c:	d0a75804 	addi	r2,gp,-25248
}
  80ee50:	e037883a 	mov	sp,fp
  80ee54:	dfc00117 	ldw	ra,4(sp)
  80ee58:	df000017 	ldw	fp,0(sp)
  80ee5c:	dec00204 	addi	sp,sp,8
  80ee60:	f800283a 	ret

0080ee64 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80ee64:	defffb04 	addi	sp,sp,-20
  80ee68:	dfc00415 	stw	ra,16(sp)
  80ee6c:	df000315 	stw	fp,12(sp)
  80ee70:	df000304 	addi	fp,sp,12
  80ee74:	e13ffe15 	stw	r4,-8(fp)
  80ee78:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  80ee7c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  80ee80:	e0bffe17 	ldw	r2,-8(fp)
  80ee84:	00802e16 	blt	zero,r2,80ef40 <kill+0xdc>
  80ee88:	e0bffd17 	ldw	r2,-12(fp)
  80ee8c:	10800828 	cmpgeui	r2,r2,32
  80ee90:	1000281e 	bne	r2,zero,80ef34 <kill+0xd0>
  80ee94:	e0bffd17 	ldw	r2,-12(fp)
  80ee98:	100690ba 	slli	r3,r2,2
  80ee9c:	00802074 	movhi	r2,129
  80eea0:	1885883a 	add	r2,r3,r2
  80eea4:	10bbab17 	ldw	r2,-4436(r2)
  80eea8:	1000683a 	jmp	r2
  80eeac:	0080ef54 	movui	r2,957
  80eeb0:	0080ef34 	movhi	r2,956
  80eeb4:	0080ef34 	movhi	r2,956
  80eeb8:	0080ef2c 	andhi	r2,zero,956
  80eebc:	0080ef2c 	andhi	r2,zero,956
  80eec0:	0080ef2c 	andhi	r2,zero,956
  80eec4:	0080ef2c 	andhi	r2,zero,956
  80eec8:	0080ef34 	movhi	r2,956
  80eecc:	0080ef2c 	andhi	r2,zero,956
  80eed0:	0080ef2c 	andhi	r2,zero,956
  80eed4:	0080ef2c 	andhi	r2,zero,956
  80eed8:	0080ef2c 	andhi	r2,zero,956
  80eedc:	0080ef2c 	andhi	r2,zero,956
  80eee0:	0080ef2c 	andhi	r2,zero,956
  80eee4:	0080ef2c 	andhi	r2,zero,956
  80eee8:	0080ef2c 	andhi	r2,zero,956
  80eeec:	0080ef54 	movui	r2,957
  80eef0:	0080ef34 	movhi	r2,956
  80eef4:	0080ef34 	movhi	r2,956
  80eef8:	0080ef34 	movhi	r2,956
  80eefc:	0080ef54 	movui	r2,957
  80ef00:	0080ef34 	movhi	r2,956
  80ef04:	0080ef34 	movhi	r2,956
  80ef08:	0080ef2c 	andhi	r2,zero,956
  80ef0c:	0080ef2c 	andhi	r2,zero,956
  80ef10:	0080ef2c 	andhi	r2,zero,956
  80ef14:	0080ef2c 	andhi	r2,zero,956
  80ef18:	0080ef2c 	andhi	r2,zero,956
  80ef1c:	0080ef34 	movhi	r2,956
  80ef20:	0080ef34 	movhi	r2,956
  80ef24:	0080ef2c 	andhi	r2,zero,956
  80ef28:	0080ef2c 	andhi	r2,zero,956
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80ef2c:	0009883a 	mov	r4,zero
  80ef30:	080ebec0 	call	80ebec <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80ef34:	00800584 	movi	r2,22
  80ef38:	e0bfff15 	stw	r2,-4(fp)
  80ef3c:	00000606 	br	80ef58 <kill+0xf4>
    }
  }

  else if (pid > 0)
  80ef40:	e0bffe17 	ldw	r2,-8(fp)
  80ef44:	0080040e 	bge	zero,r2,80ef58 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80ef48:	008000c4 	movi	r2,3
  80ef4c:	e0bfff15 	stw	r2,-4(fp)
  80ef50:	00000106 	br	80ef58 <kill+0xf4>
      break;
  80ef54:	0001883a 	nop
  }

  if (status)
  80ef58:	e0bfff17 	ldw	r2,-4(fp)
  80ef5c:	10000626 	beq	r2,zero,80ef78 <kill+0x114>
  {
    ALT_ERRNO = status;
  80ef60:	080ee280 	call	80ee28 <alt_get_errno>
  80ef64:	1007883a 	mov	r3,r2
  80ef68:	e0bfff17 	ldw	r2,-4(fp)
  80ef6c:	18800015 	stw	r2,0(r3)
    return -1;
  80ef70:	00bfffc4 	movi	r2,-1
  80ef74:	00000106 	br	80ef7c <kill+0x118>
  }

  return 0;
  80ef78:	0005883a 	mov	r2,zero
}
  80ef7c:	e037883a 	mov	sp,fp
  80ef80:	dfc00117 	ldw	ra,4(sp)
  80ef84:	df000017 	ldw	fp,0(sp)
  80ef88:	dec00204 	addi	sp,sp,8
  80ef8c:	f800283a 	ret

0080ef90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ef90:	defffc04 	addi	sp,sp,-16
  80ef94:	df000315 	stw	fp,12(sp)
  80ef98:	df000304 	addi	fp,sp,12
  80ef9c:	e13fff15 	stw	r4,-4(fp)
  80efa0:	e17ffe15 	stw	r5,-8(fp)
  80efa4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  80efa8:	e0fffe17 	ldw	r3,-8(fp)
  80efac:	e0bfff17 	ldw	r2,-4(fp)
  80efb0:	18800c26 	beq	r3,r2,80efe4 <alt_load_section+0x54>
  {
    while( to != end )
  80efb4:	00000806 	br	80efd8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80efb8:	e0ffff17 	ldw	r3,-4(fp)
  80efbc:	18800104 	addi	r2,r3,4
  80efc0:	e0bfff15 	stw	r2,-4(fp)
  80efc4:	e0bffe17 	ldw	r2,-8(fp)
  80efc8:	11000104 	addi	r4,r2,4
  80efcc:	e13ffe15 	stw	r4,-8(fp)
  80efd0:	18c00017 	ldw	r3,0(r3)
  80efd4:	10c00015 	stw	r3,0(r2)
    while( to != end )
  80efd8:	e0fffe17 	ldw	r3,-8(fp)
  80efdc:	e0bffd17 	ldw	r2,-12(fp)
  80efe0:	18bff51e 	bne	r3,r2,80efb8 <alt_load_section+0x28>
    }
  }
}
  80efe4:	0001883a 	nop
  80efe8:	e037883a 	mov	sp,fp
  80efec:	df000017 	ldw	fp,0(sp)
  80eff0:	dec00104 	addi	sp,sp,4
  80eff4:	f800283a 	ret

0080eff8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80eff8:	defffe04 	addi	sp,sp,-8
  80effc:	dfc00115 	stw	ra,4(sp)
  80f000:	df000015 	stw	fp,0(sp)
  80f004:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f008:	01802074 	movhi	r6,129
  80f00c:	318e3304 	addi	r6,r6,14540
  80f010:	01402074 	movhi	r5,129
  80f014:	2946f504 	addi	r5,r5,7124
  80f018:	01002074 	movhi	r4,129
  80f01c:	210e3304 	addi	r4,r4,14540
  80f020:	080ef900 	call	80ef90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f024:	01802034 	movhi	r6,128
  80f028:	31808e04 	addi	r6,r6,568
  80f02c:	01402034 	movhi	r5,128
  80f030:	29400804 	addi	r5,r5,32
  80f034:	01002034 	movhi	r4,128
  80f038:	21000804 	addi	r4,r4,32
  80f03c:	080ef900 	call	80ef90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f040:	01802074 	movhi	r6,129
  80f044:	3186f504 	addi	r6,r6,7124
  80f048:	01402074 	movhi	r5,129
  80f04c:	29453d04 	addi	r5,r5,5364
  80f050:	01002074 	movhi	r4,129
  80f054:	21053d04 	addi	r4,r4,5364
  80f058:	080ef900 	call	80ef90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f05c:	08104380 	call	810438 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f060:	08106300 	call	810630 <alt_icache_flush_all>
}
  80f064:	0001883a 	nop
  80f068:	e037883a 	mov	sp,fp
  80f06c:	dfc00117 	ldw	ra,4(sp)
  80f070:	df000017 	ldw	fp,0(sp)
  80f074:	dec00204 	addi	sp,sp,8
  80f078:	f800283a 	ret

0080f07c <alt_get_errno>:
{
  80f07c:	defffe04 	addi	sp,sp,-8
  80f080:	dfc00115 	stw	ra,4(sp)
  80f084:	df000015 	stw	fp,0(sp)
  80f088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f08c:	d0a01117 	ldw	r2,-32700(gp)
  80f090:	10000326 	beq	r2,zero,80f0a0 <alt_get_errno+0x24>
  80f094:	d0a01117 	ldw	r2,-32700(gp)
  80f098:	103ee83a 	callr	r2
  80f09c:	00000106 	br	80f0a4 <alt_get_errno+0x28>
  80f0a0:	d0a75804 	addi	r2,gp,-25248
}
  80f0a4:	e037883a 	mov	sp,fp
  80f0a8:	dfc00117 	ldw	ra,4(sp)
  80f0ac:	df000017 	ldw	fp,0(sp)
  80f0b0:	dec00204 	addi	sp,sp,8
  80f0b4:	f800283a 	ret

0080f0b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f0b8:	defff904 	addi	sp,sp,-28
  80f0bc:	dfc00615 	stw	ra,24(sp)
  80f0c0:	df000515 	stw	fp,20(sp)
  80f0c4:	df000504 	addi	fp,sp,20
  80f0c8:	e13ffd15 	stw	r4,-12(fp)
  80f0cc:	e17ffc15 	stw	r5,-16(fp)
  80f0d0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f0d4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f0d8:	e0bffd17 	ldw	r2,-12(fp)
  80f0dc:	10000916 	blt	r2,zero,80f104 <lseek+0x4c>
  80f0e0:	e0fffd17 	ldw	r3,-12(fp)
  80f0e4:	1805883a 	mov	r2,r3
  80f0e8:	1085883a 	add	r2,r2,r2
  80f0ec:	10c5883a 	add	r2,r2,r3
  80f0f0:	100490ba 	slli	r2,r2,2
  80f0f4:	00c02074 	movhi	r3,129
  80f0f8:	18c9a504 	addi	r3,r3,9876
  80f0fc:	10c5883a 	add	r2,r2,r3
  80f100:	00000106 	br	80f108 <lseek+0x50>
  80f104:	0005883a 	mov	r2,zero
  80f108:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  80f10c:	e0bffe17 	ldw	r2,-8(fp)
  80f110:	10001026 	beq	r2,zero,80f154 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f114:	e0bffe17 	ldw	r2,-8(fp)
  80f118:	10800017 	ldw	r2,0(r2)
  80f11c:	10800717 	ldw	r2,28(r2)
  80f120:	10000926 	beq	r2,zero,80f148 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f124:	e0bffe17 	ldw	r2,-8(fp)
  80f128:	10800017 	ldw	r2,0(r2)
  80f12c:	10800717 	ldw	r2,28(r2)
  80f130:	e1bffb17 	ldw	r6,-20(fp)
  80f134:	e17ffc17 	ldw	r5,-16(fp)
  80f138:	e13ffe17 	ldw	r4,-8(fp)
  80f13c:	103ee83a 	callr	r2
  80f140:	e0bfff15 	stw	r2,-4(fp)
  80f144:	00000506 	br	80f15c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f148:	00bfde84 	movi	r2,-134
  80f14c:	e0bfff15 	stw	r2,-4(fp)
  80f150:	00000206 	br	80f15c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f154:	00bfebc4 	movi	r2,-81
  80f158:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  80f15c:	e0bfff17 	ldw	r2,-4(fp)
  80f160:	1000070e 	bge	r2,zero,80f180 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  80f164:	080f07c0 	call	80f07c <alt_get_errno>
  80f168:	1007883a 	mov	r3,r2
  80f16c:	e0bfff17 	ldw	r2,-4(fp)
  80f170:	0085c83a 	sub	r2,zero,r2
  80f174:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f178:	00bfffc4 	movi	r2,-1
  80f17c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  80f180:	e0bfff17 	ldw	r2,-4(fp)
}
  80f184:	e037883a 	mov	sp,fp
  80f188:	dfc00117 	ldw	ra,4(sp)
  80f18c:	df000017 	ldw	fp,0(sp)
  80f190:	dec00204 	addi	sp,sp,8
  80f194:	f800283a 	ret

0080f198 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f198:	defffd04 	addi	sp,sp,-12
  80f19c:	dfc00215 	stw	ra,8(sp)
  80f1a0:	df000115 	stw	fp,4(sp)
  80f1a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f1a8:	0009883a 	mov	r4,zero
  80f1ac:	080f6f00 	call	80f6f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f1b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f1b4:	080f72c0 	call	80f72c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f1b8:	01802074 	movhi	r6,129
  80f1bc:	3186ed04 	addi	r6,r6,7092
  80f1c0:	01402074 	movhi	r5,129
  80f1c4:	2946ed04 	addi	r5,r5,7092
  80f1c8:	01002074 	movhi	r4,129
  80f1cc:	2106ed04 	addi	r4,r4,7092
  80f1d0:	08109d00 	call	8109d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f1d4:	08105680 	call	810568 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f1d8:	01002074 	movhi	r4,129
  80f1dc:	21017304 	addi	r4,r4,1484
  80f1e0:	081120c0 	call	81120c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f1e4:	d0a75917 	ldw	r2,-25244(gp)
  80f1e8:	d0e75a17 	ldw	r3,-25240(gp)
  80f1ec:	d1275b17 	ldw	r4,-25236(gp)
  80f1f0:	200d883a 	mov	r6,r4
  80f1f4:	180b883a 	mov	r5,r3
  80f1f8:	1009883a 	mov	r4,r2
  80f1fc:	08003bc0 	call	8003bc <main>
  80f200:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f204:	01000044 	movi	r4,1
  80f208:	080eae40 	call	80eae4 <close>
  exit (result);
  80f20c:	e13fff17 	ldw	r4,-4(fp)
  80f210:	08112200 	call	811220 <exit>

0080f214 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f214:	defffe04 	addi	sp,sp,-8
  80f218:	df000115 	stw	fp,4(sp)
  80f21c:	df000104 	addi	fp,sp,4
  80f220:	e13fff15 	stw	r4,-4(fp)
}
  80f224:	0001883a 	nop
  80f228:	e037883a 	mov	sp,fp
  80f22c:	df000017 	ldw	fp,0(sp)
  80f230:	dec00104 	addi	sp,sp,4
  80f234:	f800283a 	ret

0080f238 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f238:	defffe04 	addi	sp,sp,-8
  80f23c:	df000115 	stw	fp,4(sp)
  80f240:	df000104 	addi	fp,sp,4
  80f244:	e13fff15 	stw	r4,-4(fp)
}
  80f248:	0001883a 	nop
  80f24c:	e037883a 	mov	sp,fp
  80f250:	df000017 	ldw	fp,0(sp)
  80f254:	dec00104 	addi	sp,sp,4
  80f258:	f800283a 	ret

0080f25c <alt_get_errno>:
{
  80f25c:	defffe04 	addi	sp,sp,-8
  80f260:	dfc00115 	stw	ra,4(sp)
  80f264:	df000015 	stw	fp,0(sp)
  80f268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f26c:	d0a01117 	ldw	r2,-32700(gp)
  80f270:	10000326 	beq	r2,zero,80f280 <alt_get_errno+0x24>
  80f274:	d0a01117 	ldw	r2,-32700(gp)
  80f278:	103ee83a 	callr	r2
  80f27c:	00000106 	br	80f284 <alt_get_errno+0x28>
  80f280:	d0a75804 	addi	r2,gp,-25248
}
  80f284:	e037883a 	mov	sp,fp
  80f288:	dfc00117 	ldw	ra,4(sp)
  80f28c:	df000017 	ldw	fp,0(sp)
  80f290:	dec00204 	addi	sp,sp,8
  80f294:	f800283a 	ret

0080f298 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f298:	defff904 	addi	sp,sp,-28
  80f29c:	dfc00615 	stw	ra,24(sp)
  80f2a0:	df000515 	stw	fp,20(sp)
  80f2a4:	df000504 	addi	fp,sp,20
  80f2a8:	e13ffd15 	stw	r4,-12(fp)
  80f2ac:	e17ffc15 	stw	r5,-16(fp)
  80f2b0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f2b4:	e0bffd17 	ldw	r2,-12(fp)
  80f2b8:	10000916 	blt	r2,zero,80f2e0 <read+0x48>
  80f2bc:	e0fffd17 	ldw	r3,-12(fp)
  80f2c0:	1805883a 	mov	r2,r3
  80f2c4:	1085883a 	add	r2,r2,r2
  80f2c8:	10c5883a 	add	r2,r2,r3
  80f2cc:	100490ba 	slli	r2,r2,2
  80f2d0:	00c02074 	movhi	r3,129
  80f2d4:	18c9a504 	addi	r3,r3,9876
  80f2d8:	10c5883a 	add	r2,r2,r3
  80f2dc:	00000106 	br	80f2e4 <read+0x4c>
  80f2e0:	0005883a 	mov	r2,zero
  80f2e4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f2e8:	e0bfff17 	ldw	r2,-4(fp)
  80f2ec:	10002226 	beq	r2,zero,80f378 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f2f0:	e0bfff17 	ldw	r2,-4(fp)
  80f2f4:	10800217 	ldw	r2,8(r2)
  80f2f8:	108000cc 	andi	r2,r2,3
  80f2fc:	10800060 	cmpeqi	r2,r2,1
  80f300:	1000181e 	bne	r2,zero,80f364 <read+0xcc>
        (fd->dev->read))
  80f304:	e0bfff17 	ldw	r2,-4(fp)
  80f308:	10800017 	ldw	r2,0(r2)
  80f30c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f310:	10001426 	beq	r2,zero,80f364 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f314:	e0bfff17 	ldw	r2,-4(fp)
  80f318:	10800017 	ldw	r2,0(r2)
  80f31c:	10800517 	ldw	r2,20(r2)
  80f320:	e0fffb17 	ldw	r3,-20(fp)
  80f324:	180d883a 	mov	r6,r3
  80f328:	e17ffc17 	ldw	r5,-16(fp)
  80f32c:	e13fff17 	ldw	r4,-4(fp)
  80f330:	103ee83a 	callr	r2
  80f334:	e0bffe15 	stw	r2,-8(fp)
  80f338:	e0bffe17 	ldw	r2,-8(fp)
  80f33c:	1000070e 	bge	r2,zero,80f35c <read+0xc4>
        {
          ALT_ERRNO = -rval;
  80f340:	080f25c0 	call	80f25c <alt_get_errno>
  80f344:	1007883a 	mov	r3,r2
  80f348:	e0bffe17 	ldw	r2,-8(fp)
  80f34c:	0085c83a 	sub	r2,zero,r2
  80f350:	18800015 	stw	r2,0(r3)
          return -1;
  80f354:	00bfffc4 	movi	r2,-1
  80f358:	00000c06 	br	80f38c <read+0xf4>
        }
        return rval;
  80f35c:	e0bffe17 	ldw	r2,-8(fp)
  80f360:	00000a06 	br	80f38c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f364:	080f25c0 	call	80f25c <alt_get_errno>
  80f368:	1007883a 	mov	r3,r2
  80f36c:	00800344 	movi	r2,13
  80f370:	18800015 	stw	r2,0(r3)
  80f374:	00000406 	br	80f388 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f378:	080f25c0 	call	80f25c <alt_get_errno>
  80f37c:	1007883a 	mov	r3,r2
  80f380:	00801444 	movi	r2,81
  80f384:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f388:	00bfffc4 	movi	r2,-1
}
  80f38c:	e037883a 	mov	sp,fp
  80f390:	dfc00117 	ldw	ra,4(sp)
  80f394:	df000017 	ldw	fp,0(sp)
  80f398:	dec00204 	addi	sp,sp,8
  80f39c:	f800283a 	ret

0080f3a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f3a0:	defffe04 	addi	sp,sp,-8
  80f3a4:	df000115 	stw	fp,4(sp)
  80f3a8:	df000104 	addi	fp,sp,4
  80f3ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f3b0:	e0bfff17 	ldw	r2,-4(fp)
  80f3b4:	108000d0 	cmplti	r2,r2,3
  80f3b8:	1000101e 	bne	r2,zero,80f3fc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f3bc:	e0ffff17 	ldw	r3,-4(fp)
  80f3c0:	1805883a 	mov	r2,r3
  80f3c4:	1085883a 	add	r2,r2,r2
  80f3c8:	10c5883a 	add	r2,r2,r3
  80f3cc:	100490ba 	slli	r2,r2,2
  80f3d0:	00c02074 	movhi	r3,129
  80f3d4:	10c7883a 	add	r3,r2,r3
  80f3d8:	1809a715 	stw	zero,9884(r3)
    alt_fd_list[fd].dev      = 0;
  80f3dc:	e0ffff17 	ldw	r3,-4(fp)
  80f3e0:	1805883a 	mov	r2,r3
  80f3e4:	1085883a 	add	r2,r2,r2
  80f3e8:	10c5883a 	add	r2,r2,r3
  80f3ec:	100490ba 	slli	r2,r2,2
  80f3f0:	00c02074 	movhi	r3,129
  80f3f4:	10c7883a 	add	r3,r2,r3
  80f3f8:	1809a515 	stw	zero,9876(r3)
  }
}
  80f3fc:	0001883a 	nop
  80f400:	e037883a 	mov	sp,fp
  80f404:	df000017 	ldw	fp,0(sp)
  80f408:	dec00104 	addi	sp,sp,4
  80f40c:	f800283a 	ret

0080f410 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f410:	defff904 	addi	sp,sp,-28
  80f414:	df000615 	stw	fp,24(sp)
  80f418:	df000604 	addi	fp,sp,24
  80f41c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  80f420:	0005303a 	rdctl	r2,status
  80f424:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f428:	e0fffd17 	ldw	r3,-12(fp)
  80f42c:	00bfff84 	movi	r2,-2
  80f430:	1884703a 	and	r2,r3,r2
  80f434:	1001703a 	wrctl	status,r2
  return context;
  80f438:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f43c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f440:	d0a01217 	ldw	r2,-32696(gp)
  80f444:	10c000c4 	addi	r3,r2,3
  80f448:	00bfff04 	movi	r2,-4
  80f44c:	1884703a 	and	r2,r3,r2
  80f450:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f454:	d0e01217 	ldw	r3,-32696(gp)
  80f458:	e0bffa17 	ldw	r2,-24(fp)
  80f45c:	1887883a 	add	r3,r3,r2
  80f460:	00804034 	movhi	r2,256
  80f464:	10800004 	addi	r2,r2,0
  80f468:	10c0072e 	bgeu	r2,r3,80f488 <sbrk+0x78>
  80f46c:	e0bfff17 	ldw	r2,-4(fp)
  80f470:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80f474:	e0bffc17 	ldw	r2,-16(fp)
  80f478:	1001703a 	wrctl	status,r2
}
  80f47c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f480:	00bfffc4 	movi	r2,-1
  80f484:	00000c06 	br	80f4b8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80f488:	d0a01217 	ldw	r2,-32696(gp)
  80f48c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  80f490:	d0e01217 	ldw	r3,-32696(gp)
  80f494:	e0bffa17 	ldw	r2,-24(fp)
  80f498:	1885883a 	add	r2,r3,r2
  80f49c:	d0a01215 	stw	r2,-32696(gp)
  80f4a0:	e0bfff17 	ldw	r2,-4(fp)
  80f4a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  80f4a8:	e0bffb17 	ldw	r2,-20(fp)
  80f4ac:	1001703a 	wrctl	status,r2
}
  80f4b0:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f4b4:	e0bffe17 	ldw	r2,-8(fp)
} 
  80f4b8:	e037883a 	mov	sp,fp
  80f4bc:	df000017 	ldw	fp,0(sp)
  80f4c0:	dec00104 	addi	sp,sp,4
  80f4c4:	f800283a 	ret

0080f4c8 <alt_get_errno>:
{
  80f4c8:	defffe04 	addi	sp,sp,-8
  80f4cc:	dfc00115 	stw	ra,4(sp)
  80f4d0:	df000015 	stw	fp,0(sp)
  80f4d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f4d8:	d0a01117 	ldw	r2,-32700(gp)
  80f4dc:	10000326 	beq	r2,zero,80f4ec <alt_get_errno+0x24>
  80f4e0:	d0a01117 	ldw	r2,-32700(gp)
  80f4e4:	103ee83a 	callr	r2
  80f4e8:	00000106 	br	80f4f0 <alt_get_errno+0x28>
  80f4ec:	d0a75804 	addi	r2,gp,-25248
}
  80f4f0:	e037883a 	mov	sp,fp
  80f4f4:	dfc00117 	ldw	ra,4(sp)
  80f4f8:	df000017 	ldw	fp,0(sp)
  80f4fc:	dec00204 	addi	sp,sp,8
  80f500:	f800283a 	ret

0080f504 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  80f504:	defffc04 	addi	sp,sp,-16
  80f508:	dfc00315 	stw	ra,12(sp)
  80f50c:	df000215 	stw	fp,8(sp)
  80f510:	df000204 	addi	fp,sp,8
  80f514:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f518:	d0a75e17 	ldw	r2,-25224(gp)
  clock_t ticks = alt_nticks(); 
  80f51c:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
  80f520:	d0a75d17 	ldw	r2,-25228(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80f524:	1000061e 	bne	r2,zero,80f540 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  80f528:	080f4c80 	call	80f4c8 <alt_get_errno>
  80f52c:	1007883a 	mov	r3,r2
  80f530:	00801604 	movi	r2,88
  80f534:	18800015 	stw	r2,0(r3)
    return 0;
  80f538:	0005883a 	mov	r2,zero
  80f53c:	00000a06 	br	80f568 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  80f540:	e0bffe17 	ldw	r2,-8(fp)
  80f544:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  80f548:	e0bffe17 	ldw	r2,-8(fp)
  80f54c:	e0ffff17 	ldw	r3,-4(fp)
  80f550:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  80f554:	e0bffe17 	ldw	r2,-8(fp)
  80f558:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  80f55c:	e0bffe17 	ldw	r2,-8(fp)
  80f560:	10000315 	stw	zero,12(r2)

  return ticks;
  80f564:	e0bfff17 	ldw	r2,-4(fp)
}
  80f568:	e037883a 	mov	sp,fp
  80f56c:	dfc00117 	ldw	ra,4(sp)
  80f570:	df000017 	ldw	fp,0(sp)
  80f574:	dec00204 	addi	sp,sp,8
  80f578:	f800283a 	ret

0080f57c <alt_get_errno>:
{
  80f57c:	defffe04 	addi	sp,sp,-8
  80f580:	dfc00115 	stw	ra,4(sp)
  80f584:	df000015 	stw	fp,0(sp)
  80f588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f58c:	d0a01117 	ldw	r2,-32700(gp)
  80f590:	10000326 	beq	r2,zero,80f5a0 <alt_get_errno+0x24>
  80f594:	d0a01117 	ldw	r2,-32700(gp)
  80f598:	103ee83a 	callr	r2
  80f59c:	00000106 	br	80f5a4 <alt_get_errno+0x28>
  80f5a0:	d0a75804 	addi	r2,gp,-25248
}
  80f5a4:	e037883a 	mov	sp,fp
  80f5a8:	dfc00117 	ldw	ra,4(sp)
  80f5ac:	df000017 	ldw	fp,0(sp)
  80f5b0:	dec00204 	addi	sp,sp,8
  80f5b4:	f800283a 	ret

0080f5b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f5b8:	defff904 	addi	sp,sp,-28
  80f5bc:	dfc00615 	stw	ra,24(sp)
  80f5c0:	df000515 	stw	fp,20(sp)
  80f5c4:	df000504 	addi	fp,sp,20
  80f5c8:	e13ffd15 	stw	r4,-12(fp)
  80f5cc:	e17ffc15 	stw	r5,-16(fp)
  80f5d0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f5d4:	e0bffd17 	ldw	r2,-12(fp)
  80f5d8:	10000916 	blt	r2,zero,80f600 <write+0x48>
  80f5dc:	e0fffd17 	ldw	r3,-12(fp)
  80f5e0:	1805883a 	mov	r2,r3
  80f5e4:	1085883a 	add	r2,r2,r2
  80f5e8:	10c5883a 	add	r2,r2,r3
  80f5ec:	100490ba 	slli	r2,r2,2
  80f5f0:	00c02074 	movhi	r3,129
  80f5f4:	18c9a504 	addi	r3,r3,9876
  80f5f8:	10c5883a 	add	r2,r2,r3
  80f5fc:	00000106 	br	80f604 <write+0x4c>
  80f600:	0005883a 	mov	r2,zero
  80f604:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f608:	e0bfff17 	ldw	r2,-4(fp)
  80f60c:	10002126 	beq	r2,zero,80f694 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f610:	e0bfff17 	ldw	r2,-4(fp)
  80f614:	10800217 	ldw	r2,8(r2)
  80f618:	108000cc 	andi	r2,r2,3
  80f61c:	10001826 	beq	r2,zero,80f680 <write+0xc8>
  80f620:	e0bfff17 	ldw	r2,-4(fp)
  80f624:	10800017 	ldw	r2,0(r2)
  80f628:	10800617 	ldw	r2,24(r2)
  80f62c:	10001426 	beq	r2,zero,80f680 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f630:	e0bfff17 	ldw	r2,-4(fp)
  80f634:	10800017 	ldw	r2,0(r2)
  80f638:	10800617 	ldw	r2,24(r2)
  80f63c:	e0fffb17 	ldw	r3,-20(fp)
  80f640:	180d883a 	mov	r6,r3
  80f644:	e17ffc17 	ldw	r5,-16(fp)
  80f648:	e13fff17 	ldw	r4,-4(fp)
  80f64c:	103ee83a 	callr	r2
  80f650:	e0bffe15 	stw	r2,-8(fp)
  80f654:	e0bffe17 	ldw	r2,-8(fp)
  80f658:	1000070e 	bge	r2,zero,80f678 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  80f65c:	080f57c0 	call	80f57c <alt_get_errno>
  80f660:	1007883a 	mov	r3,r2
  80f664:	e0bffe17 	ldw	r2,-8(fp)
  80f668:	0085c83a 	sub	r2,zero,r2
  80f66c:	18800015 	stw	r2,0(r3)
        return -1;
  80f670:	00bfffc4 	movi	r2,-1
  80f674:	00000c06 	br	80f6a8 <write+0xf0>
      }
      return rval;
  80f678:	e0bffe17 	ldw	r2,-8(fp)
  80f67c:	00000a06 	br	80f6a8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f680:	080f57c0 	call	80f57c <alt_get_errno>
  80f684:	1007883a 	mov	r3,r2
  80f688:	00800344 	movi	r2,13
  80f68c:	18800015 	stw	r2,0(r3)
  80f690:	00000406 	br	80f6a4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f694:	080f57c0 	call	80f57c <alt_get_errno>
  80f698:	1007883a 	mov	r3,r2
  80f69c:	00801444 	movi	r2,81
  80f6a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f6a4:	00bfffc4 	movi	r2,-1
}
  80f6a8:	e037883a 	mov	sp,fp
  80f6ac:	dfc00117 	ldw	ra,4(sp)
  80f6b0:	df000017 	ldw	fp,0(sp)
  80f6b4:	dec00204 	addi	sp,sp,8
  80f6b8:	f800283a 	ret

0080f6bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f6bc:	defffd04 	addi	sp,sp,-12
  80f6c0:	dfc00215 	stw	ra,8(sp)
  80f6c4:	df000115 	stw	fp,4(sp)
  80f6c8:	df000104 	addi	fp,sp,4
  80f6cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f6d0:	d1600e04 	addi	r5,gp,-32712
  80f6d4:	e13fff17 	ldw	r4,-4(fp)
  80f6d8:	08104c00 	call	8104c0 <alt_dev_llist_insert>
}
  80f6dc:	e037883a 	mov	sp,fp
  80f6e0:	dfc00117 	ldw	ra,4(sp)
  80f6e4:	df000017 	ldw	fp,0(sp)
  80f6e8:	dec00204 	addi	sp,sp,8
  80f6ec:	f800283a 	ret

0080f6f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f6f0:	defffd04 	addi	sp,sp,-12
  80f6f4:	dfc00215 	stw	ra,8(sp)
  80f6f8:	df000115 	stw	fp,4(sp)
  80f6fc:	df000104 	addi	fp,sp,4
  80f700:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80f704:	0810e700 	call	810e70 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80f708:	00800044 	movi	r2,1
  80f70c:	1001703a 	wrctl	status,r2
}
  80f710:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  80f714:	0001883a 	nop
  80f718:	e037883a 	mov	sp,fp
  80f71c:	dfc00117 	ldw	ra,4(sp)
  80f720:	df000017 	ldw	fp,0(sp)
  80f724:	dec00204 	addi	sp,sp,8
  80f728:	f800283a 	ret

0080f72c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80f72c:	defffe04 	addi	sp,sp,-8
  80f730:	dfc00115 	stw	ra,4(sp)
  80f734:	df000015 	stw	fp,0(sp)
  80f738:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80f73c:	01c0fa04 	movi	r7,1000
  80f740:	01800044 	movi	r6,1
  80f744:	000b883a 	mov	r5,zero
  80f748:	01004034 	movhi	r4,256
  80f74c:	21040004 	addi	r4,r4,4096
  80f750:	08102800 	call	810280 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80f754:	01800404 	movi	r6,16
  80f758:	000b883a 	mov	r5,zero
  80f75c:	01002074 	movhi	r4,129
  80f760:	210a0f04 	addi	r4,r4,10300
  80f764:	080f8f40 	call	80f8f4 <altera_avalon_jtag_uart_init>
  80f768:	01002074 	movhi	r4,129
  80f76c:	210a0504 	addi	r4,r4,10260
  80f770:	080f6bc0 	call	80f6bc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80f774:	0001883a 	nop
}
  80f778:	0001883a 	nop
  80f77c:	e037883a 	mov	sp,fp
  80f780:	dfc00117 	ldw	ra,4(sp)
  80f784:	df000017 	ldw	fp,0(sp)
  80f788:	dec00204 	addi	sp,sp,8
  80f78c:	f800283a 	ret

0080f790 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f790:	defffa04 	addi	sp,sp,-24
  80f794:	dfc00515 	stw	ra,20(sp)
  80f798:	df000415 	stw	fp,16(sp)
  80f79c:	df000404 	addi	fp,sp,16
  80f7a0:	e13ffe15 	stw	r4,-8(fp)
  80f7a4:	e17ffd15 	stw	r5,-12(fp)
  80f7a8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f7ac:	e0bffe17 	ldw	r2,-8(fp)
  80f7b0:	10800017 	ldw	r2,0(r2)
  80f7b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80f7b8:	e0bfff17 	ldw	r2,-4(fp)
  80f7bc:	10c00a04 	addi	r3,r2,40
  80f7c0:	e0bffe17 	ldw	r2,-8(fp)
  80f7c4:	10800217 	ldw	r2,8(r2)
  80f7c8:	100f883a 	mov	r7,r2
  80f7cc:	e1bffc17 	ldw	r6,-16(fp)
  80f7d0:	e17ffd17 	ldw	r5,-12(fp)
  80f7d4:	1809883a 	mov	r4,r3
  80f7d8:	080fdbc0 	call	80fdbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80f7dc:	e037883a 	mov	sp,fp
  80f7e0:	dfc00117 	ldw	ra,4(sp)
  80f7e4:	df000017 	ldw	fp,0(sp)
  80f7e8:	dec00204 	addi	sp,sp,8
  80f7ec:	f800283a 	ret

0080f7f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f7f0:	defffa04 	addi	sp,sp,-24
  80f7f4:	dfc00515 	stw	ra,20(sp)
  80f7f8:	df000415 	stw	fp,16(sp)
  80f7fc:	df000404 	addi	fp,sp,16
  80f800:	e13ffe15 	stw	r4,-8(fp)
  80f804:	e17ffd15 	stw	r5,-12(fp)
  80f808:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f80c:	e0bffe17 	ldw	r2,-8(fp)
  80f810:	10800017 	ldw	r2,0(r2)
  80f814:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80f818:	e0bfff17 	ldw	r2,-4(fp)
  80f81c:	10c00a04 	addi	r3,r2,40
  80f820:	e0bffe17 	ldw	r2,-8(fp)
  80f824:	10800217 	ldw	r2,8(r2)
  80f828:	100f883a 	mov	r7,r2
  80f82c:	e1bffc17 	ldw	r6,-16(fp)
  80f830:	e17ffd17 	ldw	r5,-12(fp)
  80f834:	1809883a 	mov	r4,r3
  80f838:	080ffdc0 	call	80ffdc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80f83c:	e037883a 	mov	sp,fp
  80f840:	dfc00117 	ldw	ra,4(sp)
  80f844:	df000017 	ldw	fp,0(sp)
  80f848:	dec00204 	addi	sp,sp,8
  80f84c:	f800283a 	ret

0080f850 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80f850:	defffc04 	addi	sp,sp,-16
  80f854:	dfc00315 	stw	ra,12(sp)
  80f858:	df000215 	stw	fp,8(sp)
  80f85c:	df000204 	addi	fp,sp,8
  80f860:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f864:	e0bffe17 	ldw	r2,-8(fp)
  80f868:	10800017 	ldw	r2,0(r2)
  80f86c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80f870:	e0bfff17 	ldw	r2,-4(fp)
  80f874:	10c00a04 	addi	r3,r2,40
  80f878:	e0bffe17 	ldw	r2,-8(fp)
  80f87c:	10800217 	ldw	r2,8(r2)
  80f880:	100b883a 	mov	r5,r2
  80f884:	1809883a 	mov	r4,r3
  80f888:	080fc600 	call	80fc60 <altera_avalon_jtag_uart_close>
}
  80f88c:	e037883a 	mov	sp,fp
  80f890:	dfc00117 	ldw	ra,4(sp)
  80f894:	df000017 	ldw	fp,0(sp)
  80f898:	dec00204 	addi	sp,sp,8
  80f89c:	f800283a 	ret

0080f8a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f8a0:	defffa04 	addi	sp,sp,-24
  80f8a4:	dfc00515 	stw	ra,20(sp)
  80f8a8:	df000415 	stw	fp,16(sp)
  80f8ac:	df000404 	addi	fp,sp,16
  80f8b0:	e13ffe15 	stw	r4,-8(fp)
  80f8b4:	e17ffd15 	stw	r5,-12(fp)
  80f8b8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f8bc:	e0bffe17 	ldw	r2,-8(fp)
  80f8c0:	10800017 	ldw	r2,0(r2)
  80f8c4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f8c8:	e0bfff17 	ldw	r2,-4(fp)
  80f8cc:	10800a04 	addi	r2,r2,40
  80f8d0:	e1bffc17 	ldw	r6,-16(fp)
  80f8d4:	e17ffd17 	ldw	r5,-12(fp)
  80f8d8:	1009883a 	mov	r4,r2
  80f8dc:	080fcc80 	call	80fcc8 <altera_avalon_jtag_uart_ioctl>
}
  80f8e0:	e037883a 	mov	sp,fp
  80f8e4:	dfc00117 	ldw	ra,4(sp)
  80f8e8:	df000017 	ldw	fp,0(sp)
  80f8ec:	dec00204 	addi	sp,sp,8
  80f8f0:	f800283a 	ret

0080f8f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f8f4:	defffa04 	addi	sp,sp,-24
  80f8f8:	dfc00515 	stw	ra,20(sp)
  80f8fc:	df000415 	stw	fp,16(sp)
  80f900:	df000404 	addi	fp,sp,16
  80f904:	e13fff15 	stw	r4,-4(fp)
  80f908:	e17ffe15 	stw	r5,-8(fp)
  80f90c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f910:	e0bfff17 	ldw	r2,-4(fp)
  80f914:	00c00044 	movi	r3,1
  80f918:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f91c:	e0bfff17 	ldw	r2,-4(fp)
  80f920:	10800017 	ldw	r2,0(r2)
  80f924:	10800104 	addi	r2,r2,4
  80f928:	1007883a 	mov	r3,r2
  80f92c:	e0bfff17 	ldw	r2,-4(fp)
  80f930:	10800817 	ldw	r2,32(r2)
  80f934:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f938:	e0bffe17 	ldw	r2,-8(fp)
  80f93c:	e0fffd17 	ldw	r3,-12(fp)
  80f940:	d8000015 	stw	zero,0(sp)
  80f944:	e1ffff17 	ldw	r7,-4(fp)
  80f948:	01802074 	movhi	r6,129
  80f94c:	31be6d04 	addi	r6,r6,-1612
  80f950:	180b883a 	mov	r5,r3
  80f954:	1009883a 	mov	r4,r2
  80f958:	08106640 	call	810664 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f95c:	e0bfff17 	ldw	r2,-4(fp)
  80f960:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f964:	e0bfff17 	ldw	r2,-4(fp)
  80f968:	10800204 	addi	r2,r2,8
  80f96c:	d0e75d17 	ldw	r3,-25228(gp)
  80f970:	e1ffff17 	ldw	r7,-4(fp)
  80f974:	01802074 	movhi	r6,129
  80f978:	31bef004 	addi	r6,r6,-1088
  80f97c:	180b883a 	mov	r5,r3
  80f980:	1009883a 	mov	r4,r2
  80f984:	08103040 	call	810304 <alt_alarm_start>
  80f988:	1000040e 	bge	r2,zero,80f99c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f98c:	e0ffff17 	ldw	r3,-4(fp)
  80f990:	00a00034 	movhi	r2,32768
  80f994:	10bfffc4 	addi	r2,r2,-1
  80f998:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f99c:	0001883a 	nop
  80f9a0:	e037883a 	mov	sp,fp
  80f9a4:	dfc00117 	ldw	ra,4(sp)
  80f9a8:	df000017 	ldw	fp,0(sp)
  80f9ac:	dec00204 	addi	sp,sp,8
  80f9b0:	f800283a 	ret

0080f9b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f9b4:	defff804 	addi	sp,sp,-32
  80f9b8:	df000715 	stw	fp,28(sp)
  80f9bc:	df000704 	addi	fp,sp,28
  80f9c0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f9c4:	e0bff917 	ldw	r2,-28(fp)
  80f9c8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  80f9cc:	e0bffd17 	ldw	r2,-12(fp)
  80f9d0:	10800017 	ldw	r2,0(r2)
  80f9d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f9d8:	e0bffc17 	ldw	r2,-16(fp)
  80f9dc:	10800104 	addi	r2,r2,4
  80f9e0:	10800037 	ldwio	r2,0(r2)
  80f9e4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f9e8:	e0bffb17 	ldw	r2,-20(fp)
  80f9ec:	1080c00c 	andi	r2,r2,768
  80f9f0:	10006d26 	beq	r2,zero,80fba8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f9f4:	e0bffb17 	ldw	r2,-20(fp)
  80f9f8:	1080400c 	andi	r2,r2,256
  80f9fc:	10003526 	beq	r2,zero,80fad4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80fa00:	00800074 	movhi	r2,1
  80fa04:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fa08:	e0bffd17 	ldw	r2,-12(fp)
  80fa0c:	10800a17 	ldw	r2,40(r2)
  80fa10:	10800044 	addi	r2,r2,1
  80fa14:	1081ffcc 	andi	r2,r2,2047
  80fa18:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80fa1c:	e0bffd17 	ldw	r2,-12(fp)
  80fa20:	10800b17 	ldw	r2,44(r2)
  80fa24:	e0fffa17 	ldw	r3,-24(fp)
  80fa28:	18801526 	beq	r3,r2,80fa80 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80fa2c:	e0bffc17 	ldw	r2,-16(fp)
  80fa30:	10800037 	ldwio	r2,0(r2)
  80fa34:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80fa38:	e0bfff17 	ldw	r2,-4(fp)
  80fa3c:	10a0000c 	andi	r2,r2,32768
  80fa40:	10001126 	beq	r2,zero,80fa88 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80fa44:	e0bffd17 	ldw	r2,-12(fp)
  80fa48:	10800a17 	ldw	r2,40(r2)
  80fa4c:	e0ffff17 	ldw	r3,-4(fp)
  80fa50:	1809883a 	mov	r4,r3
  80fa54:	e0fffd17 	ldw	r3,-12(fp)
  80fa58:	1885883a 	add	r2,r3,r2
  80fa5c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fa60:	e0bffd17 	ldw	r2,-12(fp)
  80fa64:	10800a17 	ldw	r2,40(r2)
  80fa68:	10800044 	addi	r2,r2,1
  80fa6c:	10c1ffcc 	andi	r3,r2,2047
  80fa70:	e0bffd17 	ldw	r2,-12(fp)
  80fa74:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80fa78:	0001883a 	nop
      {
  80fa7c:	003fe206 	br	80fa08 <altera_avalon_jtag_uart_irq+0x54>
          break;
  80fa80:	0001883a 	nop
  80fa84:	00000106 	br	80fa8c <altera_avalon_jtag_uart_irq+0xd8>
          break;
  80fa88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80fa8c:	e0bfff17 	ldw	r2,-4(fp)
  80fa90:	10bfffec 	andhi	r2,r2,65535
  80fa94:	10000f26 	beq	r2,zero,80fad4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fa98:	e0bffd17 	ldw	r2,-12(fp)
  80fa9c:	10c00817 	ldw	r3,32(r2)
  80faa0:	00bfff84 	movi	r2,-2
  80faa4:	1886703a 	and	r3,r3,r2
  80faa8:	e0bffd17 	ldw	r2,-12(fp)
  80faac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80fab0:	e0bffc17 	ldw	r2,-16(fp)
  80fab4:	10800104 	addi	r2,r2,4
  80fab8:	1007883a 	mov	r3,r2
  80fabc:	e0bffd17 	ldw	r2,-12(fp)
  80fac0:	10800817 	ldw	r2,32(r2)
  80fac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fac8:	e0bffc17 	ldw	r2,-16(fp)
  80facc:	10800104 	addi	r2,r2,4
  80fad0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80fad4:	e0bffb17 	ldw	r2,-20(fp)
  80fad8:	1080800c 	andi	r2,r2,512
  80fadc:	103fbe26 	beq	r2,zero,80f9d8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80fae0:	e0bffb17 	ldw	r2,-20(fp)
  80fae4:	1004d43a 	srli	r2,r2,16
  80fae8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80faec:	00001406 	br	80fb40 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80faf0:	e0bffc17 	ldw	r2,-16(fp)
  80faf4:	e0fffd17 	ldw	r3,-12(fp)
  80faf8:	18c00d17 	ldw	r3,52(r3)
  80fafc:	e13ffd17 	ldw	r4,-12(fp)
  80fb00:	20c7883a 	add	r3,r4,r3
  80fb04:	18c20e03 	ldbu	r3,2104(r3)
  80fb08:	18c03fcc 	andi	r3,r3,255
  80fb0c:	18c0201c 	xori	r3,r3,128
  80fb10:	18ffe004 	addi	r3,r3,-128
  80fb14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fb18:	e0bffd17 	ldw	r2,-12(fp)
  80fb1c:	10800d17 	ldw	r2,52(r2)
  80fb20:	10800044 	addi	r2,r2,1
  80fb24:	10c1ffcc 	andi	r3,r2,2047
  80fb28:	e0bffd17 	ldw	r2,-12(fp)
  80fb2c:	10c00d15 	stw	r3,52(r2)
  80fb30:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80fb34:	e0bffe17 	ldw	r2,-8(fp)
  80fb38:	10bfffc4 	addi	r2,r2,-1
  80fb3c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  80fb40:	e0bffe17 	ldw	r2,-8(fp)
  80fb44:	10000526 	beq	r2,zero,80fb5c <altera_avalon_jtag_uart_irq+0x1a8>
  80fb48:	e0bffd17 	ldw	r2,-12(fp)
  80fb4c:	10c00d17 	ldw	r3,52(r2)
  80fb50:	e0bffd17 	ldw	r2,-12(fp)
  80fb54:	10800c17 	ldw	r2,48(r2)
  80fb58:	18bfe51e 	bne	r3,r2,80faf0 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  80fb5c:	e0bffe17 	ldw	r2,-8(fp)
  80fb60:	103f9d26 	beq	r2,zero,80f9d8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80fb64:	e0bffd17 	ldw	r2,-12(fp)
  80fb68:	10c00817 	ldw	r3,32(r2)
  80fb6c:	00bfff44 	movi	r2,-3
  80fb70:	1886703a 	and	r3,r3,r2
  80fb74:	e0bffd17 	ldw	r2,-12(fp)
  80fb78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80fb7c:	e0bffd17 	ldw	r2,-12(fp)
  80fb80:	10800017 	ldw	r2,0(r2)
  80fb84:	10800104 	addi	r2,r2,4
  80fb88:	1007883a 	mov	r3,r2
  80fb8c:	e0bffd17 	ldw	r2,-12(fp)
  80fb90:	10800817 	ldw	r2,32(r2)
  80fb94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fb98:	e0bffc17 	ldw	r2,-16(fp)
  80fb9c:	10800104 	addi	r2,r2,4
  80fba0:	10800037 	ldwio	r2,0(r2)
  {
  80fba4:	003f8c06 	br	80f9d8 <altera_avalon_jtag_uart_irq+0x24>
      break;
  80fba8:	0001883a 	nop
      }
    }
  }
}
  80fbac:	0001883a 	nop
  80fbb0:	e037883a 	mov	sp,fp
  80fbb4:	df000017 	ldw	fp,0(sp)
  80fbb8:	dec00104 	addi	sp,sp,4
  80fbbc:	f800283a 	ret

0080fbc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80fbc0:	defffc04 	addi	sp,sp,-16
  80fbc4:	df000315 	stw	fp,12(sp)
  80fbc8:	df000304 	addi	fp,sp,12
  80fbcc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80fbd0:	e0bffd17 	ldw	r2,-12(fp)
  80fbd4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80fbd8:	e0bfff17 	ldw	r2,-4(fp)
  80fbdc:	10800017 	ldw	r2,0(r2)
  80fbe0:	10800104 	addi	r2,r2,4
  80fbe4:	10800037 	ldwio	r2,0(r2)
  80fbe8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80fbec:	e0bffe17 	ldw	r2,-8(fp)
  80fbf0:	1081000c 	andi	r2,r2,1024
  80fbf4:	10000b26 	beq	r2,zero,80fc24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80fbf8:	e0bfff17 	ldw	r2,-4(fp)
  80fbfc:	10800017 	ldw	r2,0(r2)
  80fc00:	10800104 	addi	r2,r2,4
  80fc04:	1007883a 	mov	r3,r2
  80fc08:	e0bfff17 	ldw	r2,-4(fp)
  80fc0c:	10800817 	ldw	r2,32(r2)
  80fc10:	10810014 	ori	r2,r2,1024
  80fc14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80fc18:	e0bfff17 	ldw	r2,-4(fp)
  80fc1c:	10000915 	stw	zero,36(r2)
  80fc20:	00000a06 	br	80fc4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80fc24:	e0bfff17 	ldw	r2,-4(fp)
  80fc28:	10c00917 	ldw	r3,36(r2)
  80fc2c:	00a00034 	movhi	r2,32768
  80fc30:	10bfff04 	addi	r2,r2,-4
  80fc34:	10c00536 	bltu	r2,r3,80fc4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80fc38:	e0bfff17 	ldw	r2,-4(fp)
  80fc3c:	10800917 	ldw	r2,36(r2)
  80fc40:	10c00044 	addi	r3,r2,1
  80fc44:	e0bfff17 	ldw	r2,-4(fp)
  80fc48:	10c00915 	stw	r3,36(r2)
  80fc4c:	d0a75d17 	ldw	r2,-25228(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80fc50:	e037883a 	mov	sp,fp
  80fc54:	df000017 	ldw	fp,0(sp)
  80fc58:	dec00104 	addi	sp,sp,4
  80fc5c:	f800283a 	ret

0080fc60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80fc60:	defffd04 	addi	sp,sp,-12
  80fc64:	df000215 	stw	fp,8(sp)
  80fc68:	df000204 	addi	fp,sp,8
  80fc6c:	e13fff15 	stw	r4,-4(fp)
  80fc70:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80fc74:	00000506 	br	80fc8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80fc78:	e0bffe17 	ldw	r2,-8(fp)
  80fc7c:	1090000c 	andi	r2,r2,16384
  80fc80:	10000226 	beq	r2,zero,80fc8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80fc84:	00bffd44 	movi	r2,-11
  80fc88:	00000b06 	br	80fcb8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80fc8c:	e0bfff17 	ldw	r2,-4(fp)
  80fc90:	10c00d17 	ldw	r3,52(r2)
  80fc94:	e0bfff17 	ldw	r2,-4(fp)
  80fc98:	10800c17 	ldw	r2,48(r2)
  80fc9c:	18800526 	beq	r3,r2,80fcb4 <altera_avalon_jtag_uart_close+0x54>
  80fca0:	e0bfff17 	ldw	r2,-4(fp)
  80fca4:	10c00917 	ldw	r3,36(r2)
  80fca8:	e0bfff17 	ldw	r2,-4(fp)
  80fcac:	10800117 	ldw	r2,4(r2)
  80fcb0:	18bff136 	bltu	r3,r2,80fc78 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  80fcb4:	0005883a 	mov	r2,zero
}
  80fcb8:	e037883a 	mov	sp,fp
  80fcbc:	df000017 	ldw	fp,0(sp)
  80fcc0:	dec00104 	addi	sp,sp,4
  80fcc4:	f800283a 	ret

0080fcc8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80fcc8:	defffa04 	addi	sp,sp,-24
  80fccc:	df000515 	stw	fp,20(sp)
  80fcd0:	df000504 	addi	fp,sp,20
  80fcd4:	e13ffd15 	stw	r4,-12(fp)
  80fcd8:	e17ffc15 	stw	r5,-16(fp)
  80fcdc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  80fce0:	00bff9c4 	movi	r2,-25
  80fce4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  80fce8:	e0bffc17 	ldw	r2,-16(fp)
  80fcec:	109a8060 	cmpeqi	r2,r2,27137
  80fcf0:	1000041e 	bne	r2,zero,80fd04 <altera_avalon_jtag_uart_ioctl+0x3c>
  80fcf4:	e0bffc17 	ldw	r2,-16(fp)
  80fcf8:	109a80a0 	cmpeqi	r2,r2,27138
  80fcfc:	1000181e 	bne	r2,zero,80fd60 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  80fd00:	00002906 	br	80fda8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  80fd04:	e0bffd17 	ldw	r2,-12(fp)
  80fd08:	10c00117 	ldw	r3,4(r2)
  80fd0c:	00a00034 	movhi	r2,32768
  80fd10:	10bfffc4 	addi	r2,r2,-1
  80fd14:	18802126 	beq	r3,r2,80fd9c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  80fd18:	e0bffb17 	ldw	r2,-20(fp)
  80fd1c:	10800017 	ldw	r2,0(r2)
  80fd20:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80fd24:	e0bffe17 	ldw	r2,-8(fp)
  80fd28:	10800090 	cmplti	r2,r2,2
  80fd2c:	1000061e 	bne	r2,zero,80fd48 <altera_avalon_jtag_uart_ioctl+0x80>
  80fd30:	e0fffe17 	ldw	r3,-8(fp)
  80fd34:	00a00034 	movhi	r2,32768
  80fd38:	10bfffc4 	addi	r2,r2,-1
  80fd3c:	18800226 	beq	r3,r2,80fd48 <altera_avalon_jtag_uart_ioctl+0x80>
  80fd40:	e0bffe17 	ldw	r2,-8(fp)
  80fd44:	00000206 	br	80fd50 <altera_avalon_jtag_uart_ioctl+0x88>
  80fd48:	00a00034 	movhi	r2,32768
  80fd4c:	10bfff84 	addi	r2,r2,-2
  80fd50:	e0fffd17 	ldw	r3,-12(fp)
  80fd54:	18800115 	stw	r2,4(r3)
      rc = 0;
  80fd58:	e03fff15 	stw	zero,-4(fp)
    break;
  80fd5c:	00000f06 	br	80fd9c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  80fd60:	e0bffd17 	ldw	r2,-12(fp)
  80fd64:	10c00117 	ldw	r3,4(r2)
  80fd68:	00a00034 	movhi	r2,32768
  80fd6c:	10bfffc4 	addi	r2,r2,-1
  80fd70:	18800c26 	beq	r3,r2,80fda4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80fd74:	e0bffd17 	ldw	r2,-12(fp)
  80fd78:	10c00917 	ldw	r3,36(r2)
  80fd7c:	e0bffd17 	ldw	r2,-12(fp)
  80fd80:	10800117 	ldw	r2,4(r2)
  80fd84:	1885803a 	cmpltu	r2,r3,r2
  80fd88:	10c03fcc 	andi	r3,r2,255
  80fd8c:	e0bffb17 	ldw	r2,-20(fp)
  80fd90:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80fd94:	e03fff15 	stw	zero,-4(fp)
    break;
  80fd98:	00000206 	br	80fda4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  80fd9c:	0001883a 	nop
  80fda0:	00000106 	br	80fda8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  80fda4:	0001883a 	nop
  }

  return rc;
  80fda8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fdac:	e037883a 	mov	sp,fp
  80fdb0:	df000017 	ldw	fp,0(sp)
  80fdb4:	dec00104 	addi	sp,sp,4
  80fdb8:	f800283a 	ret

0080fdbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80fdbc:	defff304 	addi	sp,sp,-52
  80fdc0:	dfc00c15 	stw	ra,48(sp)
  80fdc4:	df000b15 	stw	fp,44(sp)
  80fdc8:	df000b04 	addi	fp,sp,44
  80fdcc:	e13ff815 	stw	r4,-32(fp)
  80fdd0:	e17ff715 	stw	r5,-36(fp)
  80fdd4:	e1bff615 	stw	r6,-40(fp)
  80fdd8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  80fddc:	e0bff717 	ldw	r2,-36(fp)
  80fde0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80fde4:	00004706 	br	80ff04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80fde8:	e0bff817 	ldw	r2,-32(fp)
  80fdec:	10800a17 	ldw	r2,40(r2)
  80fdf0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  80fdf4:	e0bff817 	ldw	r2,-32(fp)
  80fdf8:	10800b17 	ldw	r2,44(r2)
  80fdfc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  80fe00:	e0fffd17 	ldw	r3,-12(fp)
  80fe04:	e0bffc17 	ldw	r2,-16(fp)
  80fe08:	18800536 	bltu	r3,r2,80fe20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80fe0c:	e0fffd17 	ldw	r3,-12(fp)
  80fe10:	e0bffc17 	ldw	r2,-16(fp)
  80fe14:	1885c83a 	sub	r2,r3,r2
  80fe18:	e0bffe15 	stw	r2,-8(fp)
  80fe1c:	00000406 	br	80fe30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80fe20:	00c20004 	movi	r3,2048
  80fe24:	e0bffc17 	ldw	r2,-16(fp)
  80fe28:	1885c83a 	sub	r2,r3,r2
  80fe2c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  80fe30:	e0bffe17 	ldw	r2,-8(fp)
  80fe34:	10001e26 	beq	r2,zero,80feb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80fe38:	e0fff617 	ldw	r3,-40(fp)
  80fe3c:	e0bffe17 	ldw	r2,-8(fp)
  80fe40:	1880022e 	bgeu	r3,r2,80fe4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80fe44:	e0bff617 	ldw	r2,-40(fp)
  80fe48:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80fe4c:	e0bff817 	ldw	r2,-32(fp)
  80fe50:	10c00e04 	addi	r3,r2,56
  80fe54:	e0bffc17 	ldw	r2,-16(fp)
  80fe58:	1885883a 	add	r2,r3,r2
  80fe5c:	e1bffe17 	ldw	r6,-8(fp)
  80fe60:	100b883a 	mov	r5,r2
  80fe64:	e13fff17 	ldw	r4,-4(fp)
  80fe68:	08063540 	call	806354 <memcpy>
      ptr   += n;
  80fe6c:	e0ffff17 	ldw	r3,-4(fp)
  80fe70:	e0bffe17 	ldw	r2,-8(fp)
  80fe74:	1885883a 	add	r2,r3,r2
  80fe78:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  80fe7c:	e0fff617 	ldw	r3,-40(fp)
  80fe80:	e0bffe17 	ldw	r2,-8(fp)
  80fe84:	1885c83a 	sub	r2,r3,r2
  80fe88:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fe8c:	e0fffc17 	ldw	r3,-16(fp)
  80fe90:	e0bffe17 	ldw	r2,-8(fp)
  80fe94:	1885883a 	add	r2,r3,r2
  80fe98:	10c1ffcc 	andi	r3,r2,2047
  80fe9c:	e0bff817 	ldw	r2,-32(fp)
  80fea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80fea4:	e0bff617 	ldw	r2,-40(fp)
  80fea8:	00bfcf16 	blt	zero,r2,80fde8 <altera_avalon_jtag_uart_read+0x2c>
  80feac:	00000106 	br	80feb4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  80feb0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  80feb4:	e0ffff17 	ldw	r3,-4(fp)
  80feb8:	e0bff717 	ldw	r2,-36(fp)
  80febc:	1880141e 	bne	r3,r2,80ff10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80fec0:	e0bff517 	ldw	r2,-44(fp)
  80fec4:	1090000c 	andi	r2,r2,16384
  80fec8:	1000131e 	bne	r2,zero,80ff18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80fecc:	0001883a 	nop
  80fed0:	e0bff817 	ldw	r2,-32(fp)
  80fed4:	10800a17 	ldw	r2,40(r2)
  80fed8:	e0fffd17 	ldw	r3,-12(fp)
  80fedc:	1880051e 	bne	r3,r2,80fef4 <altera_avalon_jtag_uart_read+0x138>
  80fee0:	e0bff817 	ldw	r2,-32(fp)
  80fee4:	10c00917 	ldw	r3,36(r2)
  80fee8:	e0bff817 	ldw	r2,-32(fp)
  80feec:	10800117 	ldw	r2,4(r2)
  80fef0:	18bff736 	bltu	r3,r2,80fed0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80fef4:	e0bff817 	ldw	r2,-32(fp)
  80fef8:	10800a17 	ldw	r2,40(r2)
  80fefc:	e0fffd17 	ldw	r3,-12(fp)
  80ff00:	18800726 	beq	r3,r2,80ff20 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  80ff04:	e0bff617 	ldw	r2,-40(fp)
  80ff08:	00bfb716 	blt	zero,r2,80fde8 <altera_avalon_jtag_uart_read+0x2c>
  80ff0c:	00000506 	br	80ff24 <altera_avalon_jtag_uart_read+0x168>
      break;
  80ff10:	0001883a 	nop
  80ff14:	00000306 	br	80ff24 <altera_avalon_jtag_uart_read+0x168>
      break;
  80ff18:	0001883a 	nop
  80ff1c:	00000106 	br	80ff24 <altera_avalon_jtag_uart_read+0x168>
      break;
  80ff20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80ff24:	e0ffff17 	ldw	r3,-4(fp)
  80ff28:	e0bff717 	ldw	r2,-36(fp)
  80ff2c:	18801926 	beq	r3,r2,80ff94 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  80ff30:	0005303a 	rdctl	r2,status
  80ff34:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff38:	e0fff917 	ldw	r3,-28(fp)
  80ff3c:	00bfff84 	movi	r2,-2
  80ff40:	1884703a 	and	r2,r3,r2
  80ff44:	1001703a 	wrctl	status,r2
  return context;
  80ff48:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80ff4c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ff50:	e0bff817 	ldw	r2,-32(fp)
  80ff54:	10800817 	ldw	r2,32(r2)
  80ff58:	10c00054 	ori	r3,r2,1
  80ff5c:	e0bff817 	ldw	r2,-32(fp)
  80ff60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ff64:	e0bff817 	ldw	r2,-32(fp)
  80ff68:	10800017 	ldw	r2,0(r2)
  80ff6c:	10800104 	addi	r2,r2,4
  80ff70:	1007883a 	mov	r3,r2
  80ff74:	e0bff817 	ldw	r2,-32(fp)
  80ff78:	10800817 	ldw	r2,32(r2)
  80ff7c:	18800035 	stwio	r2,0(r3)
  80ff80:	e0bffb17 	ldw	r2,-20(fp)
  80ff84:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  80ff88:	e0bffa17 	ldw	r2,-24(fp)
  80ff8c:	1001703a 	wrctl	status,r2
}
  80ff90:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80ff94:	e0ffff17 	ldw	r3,-4(fp)
  80ff98:	e0bff717 	ldw	r2,-36(fp)
  80ff9c:	18800426 	beq	r3,r2,80ffb0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  80ffa0:	e0ffff17 	ldw	r3,-4(fp)
  80ffa4:	e0bff717 	ldw	r2,-36(fp)
  80ffa8:	1885c83a 	sub	r2,r3,r2
  80ffac:	00000606 	br	80ffc8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80ffb0:	e0bff517 	ldw	r2,-44(fp)
  80ffb4:	1090000c 	andi	r2,r2,16384
  80ffb8:	10000226 	beq	r2,zero,80ffc4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  80ffbc:	00bffd44 	movi	r2,-11
  80ffc0:	00000106 	br	80ffc8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80ffc4:	00bffec4 	movi	r2,-5
}
  80ffc8:	e037883a 	mov	sp,fp
  80ffcc:	dfc00117 	ldw	ra,4(sp)
  80ffd0:	df000017 	ldw	fp,0(sp)
  80ffd4:	dec00204 	addi	sp,sp,8
  80ffd8:	f800283a 	ret

0080ffdc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80ffdc:	defff304 	addi	sp,sp,-52
  80ffe0:	dfc00c15 	stw	ra,48(sp)
  80ffe4:	df000b15 	stw	fp,44(sp)
  80ffe8:	df000b04 	addi	fp,sp,44
  80ffec:	e13ff815 	stw	r4,-32(fp)
  80fff0:	e17ff715 	stw	r5,-36(fp)
  80fff4:	e1bff615 	stw	r6,-40(fp)
  80fff8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80fffc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810000:	e0bff717 	ldw	r2,-36(fp)
  810004:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810008:	00003706 	br	8100e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81000c:	e0bff817 	ldw	r2,-32(fp)
  810010:	10800c17 	ldw	r2,48(r2)
  810014:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  810018:	e0bff817 	ldw	r2,-32(fp)
  81001c:	10800d17 	ldw	r2,52(r2)
  810020:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  810024:	e0fffc17 	ldw	r3,-16(fp)
  810028:	e0bfff17 	ldw	r2,-4(fp)
  81002c:	1880062e 	bgeu	r3,r2,810048 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810030:	e0ffff17 	ldw	r3,-4(fp)
  810034:	e0bffc17 	ldw	r2,-16(fp)
  810038:	1885c83a 	sub	r2,r3,r2
  81003c:	10bfffc4 	addi	r2,r2,-1
  810040:	e0bffe15 	stw	r2,-8(fp)
  810044:	00000b06 	br	810074 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810048:	e0bfff17 	ldw	r2,-4(fp)
  81004c:	10000526 	beq	r2,zero,810064 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810050:	00c20004 	movi	r3,2048
  810054:	e0bffc17 	ldw	r2,-16(fp)
  810058:	1885c83a 	sub	r2,r3,r2
  81005c:	e0bffe15 	stw	r2,-8(fp)
  810060:	00000406 	br	810074 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  810064:	00c1ffc4 	movi	r3,2047
  810068:	e0bffc17 	ldw	r2,-16(fp)
  81006c:	1885c83a 	sub	r2,r3,r2
  810070:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  810074:	e0bffe17 	ldw	r2,-8(fp)
  810078:	10001e26 	beq	r2,zero,8100f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  81007c:	e0fff617 	ldw	r3,-40(fp)
  810080:	e0bffe17 	ldw	r2,-8(fp)
  810084:	1880022e 	bgeu	r3,r2,810090 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  810088:	e0bff617 	ldw	r2,-40(fp)
  81008c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810090:	e0bff817 	ldw	r2,-32(fp)
  810094:	10c20e04 	addi	r3,r2,2104
  810098:	e0bffc17 	ldw	r2,-16(fp)
  81009c:	1885883a 	add	r2,r3,r2
  8100a0:	e1bffe17 	ldw	r6,-8(fp)
  8100a4:	e17ff717 	ldw	r5,-36(fp)
  8100a8:	1009883a 	mov	r4,r2
  8100ac:	08063540 	call	806354 <memcpy>
      ptr   += n;
  8100b0:	e0fff717 	ldw	r3,-36(fp)
  8100b4:	e0bffe17 	ldw	r2,-8(fp)
  8100b8:	1885883a 	add	r2,r3,r2
  8100bc:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  8100c0:	e0fff617 	ldw	r3,-40(fp)
  8100c4:	e0bffe17 	ldw	r2,-8(fp)
  8100c8:	1885c83a 	sub	r2,r3,r2
  8100cc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8100d0:	e0fffc17 	ldw	r3,-16(fp)
  8100d4:	e0bffe17 	ldw	r2,-8(fp)
  8100d8:	1885883a 	add	r2,r3,r2
  8100dc:	10c1ffcc 	andi	r3,r2,2047
  8100e0:	e0bff817 	ldw	r2,-32(fp)
  8100e4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  8100e8:	e0bff617 	ldw	r2,-40(fp)
  8100ec:	00bfc716 	blt	zero,r2,81000c <altera_avalon_jtag_uart_write+0x30>
  8100f0:	00000106 	br	8100f8 <altera_avalon_jtag_uart_write+0x11c>
        break;
  8100f4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  8100f8:	0005303a 	rdctl	r2,status
  8100fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810100:	e0fff917 	ldw	r3,-28(fp)
  810104:	00bfff84 	movi	r2,-2
  810108:	1884703a 	and	r2,r3,r2
  81010c:	1001703a 	wrctl	status,r2
  return context;
  810110:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810114:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810118:	e0bff817 	ldw	r2,-32(fp)
  81011c:	10800817 	ldw	r2,32(r2)
  810120:	10c00094 	ori	r3,r2,2
  810124:	e0bff817 	ldw	r2,-32(fp)
  810128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81012c:	e0bff817 	ldw	r2,-32(fp)
  810130:	10800017 	ldw	r2,0(r2)
  810134:	10800104 	addi	r2,r2,4
  810138:	1007883a 	mov	r3,r2
  81013c:	e0bff817 	ldw	r2,-32(fp)
  810140:	10800817 	ldw	r2,32(r2)
  810144:	18800035 	stwio	r2,0(r3)
  810148:	e0bffb17 	ldw	r2,-20(fp)
  81014c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  810150:	e0bffa17 	ldw	r2,-24(fp)
  810154:	1001703a 	wrctl	status,r2
}
  810158:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81015c:	e0bff617 	ldw	r2,-40(fp)
  810160:	0080100e 	bge	zero,r2,8101a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  810164:	e0bff517 	ldw	r2,-44(fp)
  810168:	1090000c 	andi	r2,r2,16384
  81016c:	1000101e 	bne	r2,zero,8101b0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810170:	0001883a 	nop
  810174:	e0bff817 	ldw	r2,-32(fp)
  810178:	10800d17 	ldw	r2,52(r2)
  81017c:	e0ffff17 	ldw	r3,-4(fp)
  810180:	1880051e 	bne	r3,r2,810198 <altera_avalon_jtag_uart_write+0x1bc>
  810184:	e0bff817 	ldw	r2,-32(fp)
  810188:	10c00917 	ldw	r3,36(r2)
  81018c:	e0bff817 	ldw	r2,-32(fp)
  810190:	10800117 	ldw	r2,4(r2)
  810194:	18bff736 	bltu	r3,r2,810174 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810198:	e0bff817 	ldw	r2,-32(fp)
  81019c:	10800917 	ldw	r2,36(r2)
  8101a0:	1000051e 	bne	r2,zero,8101b8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  8101a4:	e0bff617 	ldw	r2,-40(fp)
  8101a8:	00bfcf16 	blt	zero,r2,8100e8 <altera_avalon_jtag_uart_write+0x10c>
  8101ac:	00000306 	br	8101bc <altera_avalon_jtag_uart_write+0x1e0>
        break;
  8101b0:	0001883a 	nop
  8101b4:	00000106 	br	8101bc <altera_avalon_jtag_uart_write+0x1e0>
         break;
  8101b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8101bc:	e0fff717 	ldw	r3,-36(fp)
  8101c0:	e0bffd17 	ldw	r2,-12(fp)
  8101c4:	18800426 	beq	r3,r2,8101d8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  8101c8:	e0fff717 	ldw	r3,-36(fp)
  8101cc:	e0bffd17 	ldw	r2,-12(fp)
  8101d0:	1885c83a 	sub	r2,r3,r2
  8101d4:	00000606 	br	8101f0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  8101d8:	e0bff517 	ldw	r2,-44(fp)
  8101dc:	1090000c 	andi	r2,r2,16384
  8101e0:	10000226 	beq	r2,zero,8101ec <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  8101e4:	00bffd44 	movi	r2,-11
  8101e8:	00000106 	br	8101f0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8101ec:	00bffec4 	movi	r2,-5
}
  8101f0:	e037883a 	mov	sp,fp
  8101f4:	dfc00117 	ldw	ra,4(sp)
  8101f8:	df000017 	ldw	fp,0(sp)
  8101fc:	dec00204 	addi	sp,sp,8
  810200:	f800283a 	ret

00810204 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810204:	defffa04 	addi	sp,sp,-24
  810208:	dfc00515 	stw	ra,20(sp)
  81020c:	df000415 	stw	fp,16(sp)
  810210:	df000404 	addi	fp,sp,16
  810214:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810218:	0007883a 	mov	r3,zero
  81021c:	e0bffc17 	ldw	r2,-16(fp)
  810220:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810224:	e0bffc17 	ldw	r2,-16(fp)
  810228:	10800104 	addi	r2,r2,4
  81022c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  810230:	0005303a 	rdctl	r2,status
  810234:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810238:	e0fffd17 	ldw	r3,-12(fp)
  81023c:	00bfff84 	movi	r2,-2
  810240:	1884703a 	and	r2,r3,r2
  810244:	1001703a 	wrctl	status,r2
  return context;
  810248:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81024c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  810250:	0810d680 	call	810d68 <alt_tick>
  810254:	e0bfff17 	ldw	r2,-4(fp)
  810258:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  81025c:	e0bffe17 	ldw	r2,-8(fp)
  810260:	1001703a 	wrctl	status,r2
}
  810264:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  810268:	0001883a 	nop
  81026c:	e037883a 	mov	sp,fp
  810270:	dfc00117 	ldw	ra,4(sp)
  810274:	df000017 	ldw	fp,0(sp)
  810278:	dec00204 	addi	sp,sp,8
  81027c:	f800283a 	ret

00810280 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810280:	defff804 	addi	sp,sp,-32
  810284:	dfc00715 	stw	ra,28(sp)
  810288:	df000615 	stw	fp,24(sp)
  81028c:	df000604 	addi	fp,sp,24
  810290:	e13ffe15 	stw	r4,-8(fp)
  810294:	e17ffd15 	stw	r5,-12(fp)
  810298:	e1bffc15 	stw	r6,-16(fp)
  81029c:	e1fffb15 	stw	r7,-20(fp)
  8102a0:	e0bffb17 	ldw	r2,-20(fp)
  8102a4:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
  8102a8:	d0a75d17 	ldw	r2,-25228(gp)
  8102ac:	1000031e 	bne	r2,zero,8102bc <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
  8102b0:	e0bfff17 	ldw	r2,-4(fp)
  8102b4:	d0a75d15 	stw	r2,-25228(gp)
    return 0;
  8102b8:	00000106 	br	8102c0 <alt_avalon_timer_sc_init+0x40>
    return -1;
  8102bc:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8102c0:	e0bffe17 	ldw	r2,-8(fp)
  8102c4:	10800104 	addi	r2,r2,4
  8102c8:	00c001c4 	movi	r3,7
  8102cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8102d0:	d8000015 	stw	zero,0(sp)
  8102d4:	e1fffe17 	ldw	r7,-8(fp)
  8102d8:	01802074 	movhi	r6,129
  8102dc:	31808104 	addi	r6,r6,516
  8102e0:	e17ffc17 	ldw	r5,-16(fp)
  8102e4:	e13ffd17 	ldw	r4,-12(fp)
  8102e8:	08106640 	call	810664 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8102ec:	0001883a 	nop
  8102f0:	e037883a 	mov	sp,fp
  8102f4:	dfc00117 	ldw	ra,4(sp)
  8102f8:	df000017 	ldw	fp,0(sp)
  8102fc:	dec00204 	addi	sp,sp,8
  810300:	f800283a 	ret

00810304 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810304:	defff504 	addi	sp,sp,-44
  810308:	df000a15 	stw	fp,40(sp)
  81030c:	df000a04 	addi	fp,sp,40
  810310:	e13ff915 	stw	r4,-28(fp)
  810314:	e17ff815 	stw	r5,-32(fp)
  810318:	e1bff715 	stw	r6,-36(fp)
  81031c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810320:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  810324:	d0a75d17 	ldw	r2,-25228(gp)
  
  if (alt_ticks_per_second ())
  810328:	10003e26 	beq	r2,zero,810424 <alt_alarm_start+0x120>
  {
    if (alarm)
  81032c:	e0bff917 	ldw	r2,-28(fp)
  810330:	10003a26 	beq	r2,zero,81041c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  810334:	e0bff917 	ldw	r2,-28(fp)
  810338:	e0fff717 	ldw	r3,-36(fp)
  81033c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  810340:	e0bff917 	ldw	r2,-28(fp)
  810344:	e0fff617 	ldw	r3,-40(fp)
  810348:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  81034c:	0005303a 	rdctl	r2,status
  810350:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810354:	e0fffd17 	ldw	r3,-12(fp)
  810358:	00bfff84 	movi	r2,-2
  81035c:	1884703a 	and	r2,r3,r2
  810360:	1001703a 	wrctl	status,r2
  return context;
  810364:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  810368:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
  81036c:	d0a75e17 	ldw	r2,-25224(gp)
      
      current_nticks = alt_nticks();
  810370:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810374:	e0fff817 	ldw	r3,-32(fp)
  810378:	e0bfff17 	ldw	r2,-4(fp)
  81037c:	1885883a 	add	r2,r3,r2
  810380:	10c00044 	addi	r3,r2,1
  810384:	e0bff917 	ldw	r2,-28(fp)
  810388:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81038c:	e0bff917 	ldw	r2,-28(fp)
  810390:	10c00217 	ldw	r3,8(r2)
  810394:	e0bfff17 	ldw	r2,-4(fp)
  810398:	1880042e 	bgeu	r3,r2,8103ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  81039c:	e0bff917 	ldw	r2,-28(fp)
  8103a0:	00c00044 	movi	r3,1
  8103a4:	10c00405 	stb	r3,16(r2)
  8103a8:	00000206 	br	8103b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8103ac:	e0bff917 	ldw	r2,-28(fp)
  8103b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8103b4:	e0bff917 	ldw	r2,-28(fp)
  8103b8:	d0e01404 	addi	r3,gp,-32688
  8103bc:	e0fffb15 	stw	r3,-20(fp)
  8103c0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8103c4:	e0bffa17 	ldw	r2,-24(fp)
  8103c8:	e0fffb17 	ldw	r3,-20(fp)
  8103cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8103d0:	e0bffb17 	ldw	r2,-20(fp)
  8103d4:	10c00017 	ldw	r3,0(r2)
  8103d8:	e0bffa17 	ldw	r2,-24(fp)
  8103dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8103e0:	e0bffb17 	ldw	r2,-20(fp)
  8103e4:	10800017 	ldw	r2,0(r2)
  8103e8:	e0fffa17 	ldw	r3,-24(fp)
  8103ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8103f0:	e0bffb17 	ldw	r2,-20(fp)
  8103f4:	e0fffa17 	ldw	r3,-24(fp)
  8103f8:	10c00015 	stw	r3,0(r2)
}
  8103fc:	0001883a 	nop
  810400:	e0bffe17 	ldw	r2,-8(fp)
  810404:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  810408:	e0bffc17 	ldw	r2,-16(fp)
  81040c:	1001703a 	wrctl	status,r2
}
  810410:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  810414:	0005883a 	mov	r2,zero
  810418:	00000306 	br	810428 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  81041c:	00bffa84 	movi	r2,-22
  810420:	00000106 	br	810428 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  810424:	00bfde84 	movi	r2,-134
  }
}
  810428:	e037883a 	mov	sp,fp
  81042c:	df000017 	ldw	fp,0(sp)
  810430:	dec00104 	addi	sp,sp,4
  810434:	f800283a 	ret

00810438 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810438:	defffe04 	addi	sp,sp,-8
  81043c:	df000115 	stw	fp,4(sp)
  810440:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810444:	e03fff15 	stw	zero,-4(fp)
  810448:	00000506 	br	810460 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81044c:	e0bfff17 	ldw	r2,-4(fp)
  810450:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810454:	e0bfff17 	ldw	r2,-4(fp)
  810458:	10800804 	addi	r2,r2,32
  81045c:	e0bfff15 	stw	r2,-4(fp)
  810460:	e0bfff17 	ldw	r2,-4(fp)
  810464:	10820030 	cmpltui	r2,r2,2048
  810468:	103ff81e 	bne	r2,zero,81044c <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81046c:	0001883a 	nop
  810470:	0001883a 	nop
  810474:	e037883a 	mov	sp,fp
  810478:	df000017 	ldw	fp,0(sp)
  81047c:	dec00104 	addi	sp,sp,4
  810480:	f800283a 	ret

00810484 <alt_get_errno>:
{
  810484:	defffe04 	addi	sp,sp,-8
  810488:	dfc00115 	stw	ra,4(sp)
  81048c:	df000015 	stw	fp,0(sp)
  810490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810494:	d0a01117 	ldw	r2,-32700(gp)
  810498:	10000326 	beq	r2,zero,8104a8 <alt_get_errno+0x24>
  81049c:	d0a01117 	ldw	r2,-32700(gp)
  8104a0:	103ee83a 	callr	r2
  8104a4:	00000106 	br	8104ac <alt_get_errno+0x28>
  8104a8:	d0a75804 	addi	r2,gp,-25248
}
  8104ac:	e037883a 	mov	sp,fp
  8104b0:	dfc00117 	ldw	ra,4(sp)
  8104b4:	df000017 	ldw	fp,0(sp)
  8104b8:	dec00204 	addi	sp,sp,8
  8104bc:	f800283a 	ret

008104c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8104c0:	defffa04 	addi	sp,sp,-24
  8104c4:	dfc00515 	stw	ra,20(sp)
  8104c8:	df000415 	stw	fp,16(sp)
  8104cc:	df000404 	addi	fp,sp,16
  8104d0:	e13ffd15 	stw	r4,-12(fp)
  8104d4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8104d8:	e0bffd17 	ldw	r2,-12(fp)
  8104dc:	10000326 	beq	r2,zero,8104ec <alt_dev_llist_insert+0x2c>
  8104e0:	e0bffd17 	ldw	r2,-12(fp)
  8104e4:	10800217 	ldw	r2,8(r2)
  8104e8:	1000061e 	bne	r2,zero,810504 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8104ec:	08104840 	call	810484 <alt_get_errno>
  8104f0:	1007883a 	mov	r3,r2
  8104f4:	00800584 	movi	r2,22
  8104f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8104fc:	00bffa84 	movi	r2,-22
  810500:	00001406 	br	810554 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810504:	e0bffd17 	ldw	r2,-12(fp)
  810508:	e0fffc17 	ldw	r3,-16(fp)
  81050c:	e0ffff15 	stw	r3,-4(fp)
  810510:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  810514:	e0bffe17 	ldw	r2,-8(fp)
  810518:	e0ffff17 	ldw	r3,-4(fp)
  81051c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810520:	e0bfff17 	ldw	r2,-4(fp)
  810524:	10c00017 	ldw	r3,0(r2)
  810528:	e0bffe17 	ldw	r2,-8(fp)
  81052c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  810530:	e0bfff17 	ldw	r2,-4(fp)
  810534:	10800017 	ldw	r2,0(r2)
  810538:	e0fffe17 	ldw	r3,-8(fp)
  81053c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  810540:	e0bfff17 	ldw	r2,-4(fp)
  810544:	e0fffe17 	ldw	r3,-8(fp)
  810548:	10c00015 	stw	r3,0(r2)
}
  81054c:	0001883a 	nop

  return 0;  
  810550:	0005883a 	mov	r2,zero
}
  810554:	e037883a 	mov	sp,fp
  810558:	dfc00117 	ldw	ra,4(sp)
  81055c:	df000017 	ldw	fp,0(sp)
  810560:	dec00204 	addi	sp,sp,8
  810564:	f800283a 	ret

00810568 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810568:	defffd04 	addi	sp,sp,-12
  81056c:	dfc00215 	stw	ra,8(sp)
  810570:	df000115 	stw	fp,4(sp)
  810574:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810578:	00802074 	movhi	r2,129
  81057c:	10853c04 	addi	r2,r2,5360
  810580:	e0bfff15 	stw	r2,-4(fp)
  810584:	00000606 	br	8105a0 <_do_ctors+0x38>
        (*ctor) (); 
  810588:	e0bfff17 	ldw	r2,-4(fp)
  81058c:	10800017 	ldw	r2,0(r2)
  810590:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810594:	e0bfff17 	ldw	r2,-4(fp)
  810598:	10bfff04 	addi	r2,r2,-4
  81059c:	e0bfff15 	stw	r2,-4(fp)
  8105a0:	e0ffff17 	ldw	r3,-4(fp)
  8105a4:	00802074 	movhi	r2,129
  8105a8:	10853d04 	addi	r2,r2,5364
  8105ac:	18bff62e 	bgeu	r3,r2,810588 <_do_ctors+0x20>
}
  8105b0:	0001883a 	nop
  8105b4:	0001883a 	nop
  8105b8:	e037883a 	mov	sp,fp
  8105bc:	dfc00117 	ldw	ra,4(sp)
  8105c0:	df000017 	ldw	fp,0(sp)
  8105c4:	dec00204 	addi	sp,sp,8
  8105c8:	f800283a 	ret

008105cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8105cc:	defffd04 	addi	sp,sp,-12
  8105d0:	dfc00215 	stw	ra,8(sp)
  8105d4:	df000115 	stw	fp,4(sp)
  8105d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8105dc:	00802074 	movhi	r2,129
  8105e0:	10853c04 	addi	r2,r2,5360
  8105e4:	e0bfff15 	stw	r2,-4(fp)
  8105e8:	00000606 	br	810604 <_do_dtors+0x38>
        (*dtor) (); 
  8105ec:	e0bfff17 	ldw	r2,-4(fp)
  8105f0:	10800017 	ldw	r2,0(r2)
  8105f4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8105f8:	e0bfff17 	ldw	r2,-4(fp)
  8105fc:	10bfff04 	addi	r2,r2,-4
  810600:	e0bfff15 	stw	r2,-4(fp)
  810604:	e0ffff17 	ldw	r3,-4(fp)
  810608:	00802074 	movhi	r2,129
  81060c:	10853d04 	addi	r2,r2,5364
  810610:	18bff62e 	bgeu	r3,r2,8105ec <_do_dtors+0x20>
}
  810614:	0001883a 	nop
  810618:	0001883a 	nop
  81061c:	e037883a 	mov	sp,fp
  810620:	dfc00117 	ldw	ra,4(sp)
  810624:	df000017 	ldw	fp,0(sp)
  810628:	dec00204 	addi	sp,sp,8
  81062c:	f800283a 	ret

00810630 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810630:	defffe04 	addi	sp,sp,-8
  810634:	dfc00115 	stw	ra,4(sp)
  810638:	df000015 	stw	fp,0(sp)
  81063c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810640:	01420004 	movi	r5,2048
  810644:	0009883a 	mov	r4,zero
  810648:	08110e40 	call	8110e4 <alt_icache_flush>
#endif
}
  81064c:	0001883a 	nop
  810650:	e037883a 	mov	sp,fp
  810654:	dfc00117 	ldw	ra,4(sp)
  810658:	df000017 	ldw	fp,0(sp)
  81065c:	dec00204 	addi	sp,sp,8
  810660:	f800283a 	ret

00810664 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810664:	defff904 	addi	sp,sp,-28
  810668:	dfc00615 	stw	ra,24(sp)
  81066c:	df000515 	stw	fp,20(sp)
  810670:	df000504 	addi	fp,sp,20
  810674:	e13fff15 	stw	r4,-4(fp)
  810678:	e17ffe15 	stw	r5,-8(fp)
  81067c:	e1bffd15 	stw	r6,-12(fp)
  810680:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810684:	e0800217 	ldw	r2,8(fp)
  810688:	d8800015 	stw	r2,0(sp)
  81068c:	e1fffc17 	ldw	r7,-16(fp)
  810690:	e1bffd17 	ldw	r6,-12(fp)
  810694:	e17ffe17 	ldw	r5,-8(fp)
  810698:	e13fff17 	ldw	r4,-4(fp)
  81069c:	08108140 	call	810814 <alt_iic_isr_register>
}  
  8106a0:	e037883a 	mov	sp,fp
  8106a4:	dfc00117 	ldw	ra,4(sp)
  8106a8:	df000017 	ldw	fp,0(sp)
  8106ac:	dec00204 	addi	sp,sp,8
  8106b0:	f800283a 	ret

008106b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8106b4:	defff904 	addi	sp,sp,-28
  8106b8:	df000615 	stw	fp,24(sp)
  8106bc:	df000604 	addi	fp,sp,24
  8106c0:	e13ffb15 	stw	r4,-20(fp)
  8106c4:	e17ffa15 	stw	r5,-24(fp)
  8106c8:	e0bffa17 	ldw	r2,-24(fp)
  8106cc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  8106d0:	0005303a 	rdctl	r2,status
  8106d4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106d8:	e0fffe17 	ldw	r3,-8(fp)
  8106dc:	00bfff84 	movi	r2,-2
  8106e0:	1884703a 	and	r2,r3,r2
  8106e4:	1001703a 	wrctl	status,r2
  return context;
  8106e8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8106ec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8106f0:	00c00044 	movi	r3,1
  8106f4:	e0bfff17 	ldw	r2,-4(fp)
  8106f8:	1884983a 	sll	r2,r3,r2
  8106fc:	1007883a 	mov	r3,r2
  810700:	d0a75c17 	ldw	r2,-25232(gp)
  810704:	1884b03a 	or	r2,r3,r2
  810708:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81070c:	d0a75c17 	ldw	r2,-25232(gp)
  810710:	100170fa 	wrctl	ienable,r2
  810714:	e0bffd17 	ldw	r2,-12(fp)
  810718:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	1001703a 	wrctl	status,r2
}
  810724:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  810728:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  81072c:	e037883a 	mov	sp,fp
  810730:	df000017 	ldw	fp,0(sp)
  810734:	dec00104 	addi	sp,sp,4
  810738:	f800283a 	ret

0081073c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81073c:	defff904 	addi	sp,sp,-28
  810740:	df000615 	stw	fp,24(sp)
  810744:	df000604 	addi	fp,sp,24
  810748:	e13ffb15 	stw	r4,-20(fp)
  81074c:	e17ffa15 	stw	r5,-24(fp)
  810750:	e0bffa17 	ldw	r2,-24(fp)
  810754:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  810758:	0005303a 	rdctl	r2,status
  81075c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810760:	e0fffe17 	ldw	r3,-8(fp)
  810764:	00bfff84 	movi	r2,-2
  810768:	1884703a 	and	r2,r3,r2
  81076c:	1001703a 	wrctl	status,r2
  return context;
  810770:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  810774:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  810778:	00c00044 	movi	r3,1
  81077c:	e0bfff17 	ldw	r2,-4(fp)
  810780:	1884983a 	sll	r2,r3,r2
  810784:	0084303a 	nor	r2,zero,r2
  810788:	1007883a 	mov	r3,r2
  81078c:	d0a75c17 	ldw	r2,-25232(gp)
  810790:	1884703a 	and	r2,r3,r2
  810794:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810798:	d0a75c17 	ldw	r2,-25232(gp)
  81079c:	100170fa 	wrctl	ienable,r2
  8107a0:	e0bffd17 	ldw	r2,-12(fp)
  8107a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  8107a8:	e0bffc17 	ldw	r2,-16(fp)
  8107ac:	1001703a 	wrctl	status,r2
}
  8107b0:	0001883a 	nop
  return 0;
  8107b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8107b8:	e037883a 	mov	sp,fp
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00104 	addi	sp,sp,4
  8107c4:	f800283a 	ret

008107c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8107c8:	defffc04 	addi	sp,sp,-16
  8107cc:	df000315 	stw	fp,12(sp)
  8107d0:	df000304 	addi	fp,sp,12
  8107d4:	e13ffe15 	stw	r4,-8(fp)
  8107d8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8107dc:	000530fa 	rdctl	r2,ienable
  8107e0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8107e4:	00c00044 	movi	r3,1
  8107e8:	e0bffd17 	ldw	r2,-12(fp)
  8107ec:	1884983a 	sll	r2,r3,r2
  8107f0:	1007883a 	mov	r3,r2
  8107f4:	e0bfff17 	ldw	r2,-4(fp)
  8107f8:	1884703a 	and	r2,r3,r2
  8107fc:	1004c03a 	cmpne	r2,r2,zero
  810800:	10803fcc 	andi	r2,r2,255
}
  810804:	e037883a 	mov	sp,fp
  810808:	df000017 	ldw	fp,0(sp)
  81080c:	dec00104 	addi	sp,sp,4
  810810:	f800283a 	ret

00810814 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810814:	defff504 	addi	sp,sp,-44
  810818:	dfc00a15 	stw	ra,40(sp)
  81081c:	df000915 	stw	fp,36(sp)
  810820:	df000904 	addi	fp,sp,36
  810824:	e13ffa15 	stw	r4,-24(fp)
  810828:	e17ff915 	stw	r5,-28(fp)
  81082c:	e1bff815 	stw	r6,-32(fp)
  810830:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  810834:	00bffa84 	movi	r2,-22
  810838:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81083c:	e0bff917 	ldw	r2,-28(fp)
  810840:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	10800808 	cmpgei	r2,r2,32
  81084c:	1000251e 	bne	r2,zero,8108e4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  810850:	0005303a 	rdctl	r2,status
  810854:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810858:	e0fffc17 	ldw	r3,-16(fp)
  81085c:	00bfff84 	movi	r2,-2
  810860:	1884703a 	and	r2,r3,r2
  810864:	1001703a 	wrctl	status,r2
  return context;
  810868:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81086c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  810870:	e0bffe17 	ldw	r2,-8(fp)
  810874:	100890fa 	slli	r4,r2,3
  810878:	e0fff817 	ldw	r3,-32(fp)
  81087c:	00802074 	movhi	r2,129
  810880:	2085883a 	add	r2,r4,r2
  810884:	10d58715 	stw	r3,22044(r2)
    alt_irq[id].context = isr_context;
  810888:	e0bffe17 	ldw	r2,-8(fp)
  81088c:	100890fa 	slli	r4,r2,3
  810890:	e0fff717 	ldw	r3,-36(fp)
  810894:	00802074 	movhi	r2,129
  810898:	2085883a 	add	r2,r4,r2
  81089c:	10d58815 	stw	r3,22048(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8108a0:	e0bff817 	ldw	r2,-32(fp)
  8108a4:	10000526 	beq	r2,zero,8108bc <alt_iic_isr_register+0xa8>
  8108a8:	e0bffe17 	ldw	r2,-8(fp)
  8108ac:	100b883a 	mov	r5,r2
  8108b0:	e13ffa17 	ldw	r4,-24(fp)
  8108b4:	08106b40 	call	8106b4 <alt_ic_irq_enable>
  8108b8:	00000406 	br	8108cc <alt_iic_isr_register+0xb8>
  8108bc:	e0bffe17 	ldw	r2,-8(fp)
  8108c0:	100b883a 	mov	r5,r2
  8108c4:	e13ffa17 	ldw	r4,-24(fp)
  8108c8:	081073c0 	call	81073c <alt_ic_irq_disable>
  8108cc:	e0bfff15 	stw	r2,-4(fp)
  8108d0:	e0bffd17 	ldw	r2,-12(fp)
  8108d4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  8108d8:	e0bffb17 	ldw	r2,-20(fp)
  8108dc:	1001703a 	wrctl	status,r2
}
  8108e0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  8108e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8108e8:	e037883a 	mov	sp,fp
  8108ec:	dfc00117 	ldw	ra,4(sp)
  8108f0:	df000017 	ldw	fp,0(sp)
  8108f4:	dec00204 	addi	sp,sp,8
  8108f8:	f800283a 	ret

008108fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8108fc:	defff904 	addi	sp,sp,-28
  810900:	dfc00615 	stw	ra,24(sp)
  810904:	df000515 	stw	fp,20(sp)
  810908:	df000504 	addi	fp,sp,20
  81090c:	e13ffe15 	stw	r4,-8(fp)
  810910:	e17ffd15 	stw	r5,-12(fp)
  810914:	e1bffc15 	stw	r6,-16(fp)
  810918:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  81091c:	e1bffb17 	ldw	r6,-20(fp)
  810920:	e17ffc17 	ldw	r5,-16(fp)
  810924:	e13ffd17 	ldw	r4,-12(fp)
  810928:	0810b640 	call	810b64 <open>
  81092c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  810930:	e0bfff17 	ldw	r2,-4(fp)
  810934:	10002016 	blt	r2,zero,8109b8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  810938:	e0ffff17 	ldw	r3,-4(fp)
  81093c:	1805883a 	mov	r2,r3
  810940:	1085883a 	add	r2,r2,r2
  810944:	10c5883a 	add	r2,r2,r3
  810948:	100490ba 	slli	r2,r2,2
  81094c:	00c02074 	movhi	r3,129
  810950:	10c7883a 	add	r3,r2,r3
  810954:	18c9a517 	ldw	r3,9876(r3)
  810958:	e0bffe17 	ldw	r2,-8(fp)
  81095c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810960:	e0ffff17 	ldw	r3,-4(fp)
  810964:	1805883a 	mov	r2,r3
  810968:	1085883a 	add	r2,r2,r2
  81096c:	10c5883a 	add	r2,r2,r3
  810970:	100490ba 	slli	r2,r2,2
  810974:	00c02074 	movhi	r3,129
  810978:	10c7883a 	add	r3,r2,r3
  81097c:	18c9a617 	ldw	r3,9880(r3)
  810980:	e0bffe17 	ldw	r2,-8(fp)
  810984:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810988:	e0ffff17 	ldw	r3,-4(fp)
  81098c:	1805883a 	mov	r2,r3
  810990:	1085883a 	add	r2,r2,r2
  810994:	10c5883a 	add	r2,r2,r3
  810998:	100490ba 	slli	r2,r2,2
  81099c:	00c02074 	movhi	r3,129
  8109a0:	10c7883a 	add	r3,r2,r3
  8109a4:	18c9a717 	ldw	r3,9884(r3)
  8109a8:	e0bffe17 	ldw	r2,-8(fp)
  8109ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8109b0:	e13fff17 	ldw	r4,-4(fp)
  8109b4:	080f3a00 	call	80f3a0 <alt_release_fd>
  }
} 
  8109b8:	0001883a 	nop
  8109bc:	e037883a 	mov	sp,fp
  8109c0:	dfc00117 	ldw	ra,4(sp)
  8109c4:	df000017 	ldw	fp,0(sp)
  8109c8:	dec00204 	addi	sp,sp,8
  8109cc:	f800283a 	ret

008109d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8109d0:	defffb04 	addi	sp,sp,-20
  8109d4:	dfc00415 	stw	ra,16(sp)
  8109d8:	df000315 	stw	fp,12(sp)
  8109dc:	df000304 	addi	fp,sp,12
  8109e0:	e13fff15 	stw	r4,-4(fp)
  8109e4:	e17ffe15 	stw	r5,-8(fp)
  8109e8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8109ec:	01c07fc4 	movi	r7,511
  8109f0:	01800044 	movi	r6,1
  8109f4:	e17fff17 	ldw	r5,-4(fp)
  8109f8:	01002074 	movhi	r4,129
  8109fc:	2109a804 	addi	r4,r4,9888
  810a00:	08108fc0 	call	8108fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  810a04:	01c07fc4 	movi	r7,511
  810a08:	000d883a 	mov	r6,zero
  810a0c:	e17ffe17 	ldw	r5,-8(fp)
  810a10:	01002074 	movhi	r4,129
  810a14:	2109a504 	addi	r4,r4,9876
  810a18:	08108fc0 	call	8108fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  810a1c:	01c07fc4 	movi	r7,511
  810a20:	01800044 	movi	r6,1
  810a24:	e17ffd17 	ldw	r5,-12(fp)
  810a28:	01002074 	movhi	r4,129
  810a2c:	2109ab04 	addi	r4,r4,9900
  810a30:	08108fc0 	call	8108fc <alt_open_fd>
}  
  810a34:	0001883a 	nop
  810a38:	e037883a 	mov	sp,fp
  810a3c:	dfc00117 	ldw	ra,4(sp)
  810a40:	df000017 	ldw	fp,0(sp)
  810a44:	dec00204 	addi	sp,sp,8
  810a48:	f800283a 	ret

00810a4c <alt_get_errno>:
{
  810a4c:	defffe04 	addi	sp,sp,-8
  810a50:	dfc00115 	stw	ra,4(sp)
  810a54:	df000015 	stw	fp,0(sp)
  810a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810a5c:	d0a01117 	ldw	r2,-32700(gp)
  810a60:	10000326 	beq	r2,zero,810a70 <alt_get_errno+0x24>
  810a64:	d0a01117 	ldw	r2,-32700(gp)
  810a68:	103ee83a 	callr	r2
  810a6c:	00000106 	br	810a74 <alt_get_errno+0x28>
  810a70:	d0a75804 	addi	r2,gp,-25248
}
  810a74:	e037883a 	mov	sp,fp
  810a78:	dfc00117 	ldw	ra,4(sp)
  810a7c:	df000017 	ldw	fp,0(sp)
  810a80:	dec00204 	addi	sp,sp,8
  810a84:	f800283a 	ret

00810a88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810a88:	defffd04 	addi	sp,sp,-12
  810a8c:	df000215 	stw	fp,8(sp)
  810a90:	df000204 	addi	fp,sp,8
  810a94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810a98:	e0bffe17 	ldw	r2,-8(fp)
  810a9c:	10800217 	ldw	r2,8(r2)
  810aa0:	10d00034 	orhi	r3,r2,16384
  810aa4:	e0bffe17 	ldw	r2,-8(fp)
  810aa8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810aac:	e03fff15 	stw	zero,-4(fp)
  810ab0:	00002306 	br	810b40 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810ab4:	e0ffff17 	ldw	r3,-4(fp)
  810ab8:	1805883a 	mov	r2,r3
  810abc:	1085883a 	add	r2,r2,r2
  810ac0:	10c5883a 	add	r2,r2,r3
  810ac4:	100490ba 	slli	r2,r2,2
  810ac8:	00c02074 	movhi	r3,129
  810acc:	10c7883a 	add	r3,r2,r3
  810ad0:	18c9a517 	ldw	r3,9876(r3)
  810ad4:	e0bffe17 	ldw	r2,-8(fp)
  810ad8:	10800017 	ldw	r2,0(r2)
  810adc:	1880151e 	bne	r3,r2,810b34 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810ae0:	e0ffff17 	ldw	r3,-4(fp)
  810ae4:	1805883a 	mov	r2,r3
  810ae8:	1085883a 	add	r2,r2,r2
  810aec:	10c5883a 	add	r2,r2,r3
  810af0:	100490ba 	slli	r2,r2,2
  810af4:	00c02074 	movhi	r3,129
  810af8:	10c7883a 	add	r3,r2,r3
  810afc:	1889a717 	ldw	r2,9884(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  810b00:	10000c0e 	bge	r2,zero,810b34 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  810b04:	e0ffff17 	ldw	r3,-4(fp)
  810b08:	1805883a 	mov	r2,r3
  810b0c:	1085883a 	add	r2,r2,r2
  810b10:	10c5883a 	add	r2,r2,r3
  810b14:	100490ba 	slli	r2,r2,2
  810b18:	00c02074 	movhi	r3,129
  810b1c:	18c9a504 	addi	r3,r3,9876
  810b20:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810b24:	e0fffe17 	ldw	r3,-8(fp)
  810b28:	18800226 	beq	r3,r2,810b34 <alt_file_locked+0xac>
    {
      return -EACCES;
  810b2c:	00bffcc4 	movi	r2,-13
  810b30:	00000806 	br	810b54 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  810b34:	e0bfff17 	ldw	r2,-4(fp)
  810b38:	10800044 	addi	r2,r2,1
  810b3c:	e0bfff15 	stw	r2,-4(fp)
  810b40:	d0a01017 	ldw	r2,-32704(gp)
  810b44:	1007883a 	mov	r3,r2
  810b48:	e0bfff17 	ldw	r2,-4(fp)
  810b4c:	18bfd92e 	bgeu	r3,r2,810ab4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810b50:	0005883a 	mov	r2,zero
}
  810b54:	e037883a 	mov	sp,fp
  810b58:	df000017 	ldw	fp,0(sp)
  810b5c:	dec00104 	addi	sp,sp,4
  810b60:	f800283a 	ret

00810b64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810b64:	defff604 	addi	sp,sp,-40
  810b68:	dfc00915 	stw	ra,36(sp)
  810b6c:	df000815 	stw	fp,32(sp)
  810b70:	df000804 	addi	fp,sp,32
  810b74:	e13ffa15 	stw	r4,-24(fp)
  810b78:	e17ff915 	stw	r5,-28(fp)
  810b7c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810b80:	00bfffc4 	movi	r2,-1
  810b84:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  810b88:	00bffb44 	movi	r2,-19
  810b8c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  810b90:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810b94:	d1600e04 	addi	r5,gp,-32712
  810b98:	e13ffa17 	ldw	r4,-24(fp)
  810b9c:	0810e940 	call	810e94 <alt_find_dev>
  810ba0:	e0bfff15 	stw	r2,-4(fp)
  810ba4:	e0bfff17 	ldw	r2,-4(fp)
  810ba8:	1000051e 	bne	r2,zero,810bc0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810bac:	e13ffa17 	ldw	r4,-24(fp)
  810bb0:	0810f240 	call	810f24 <alt_find_file>
  810bb4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  810bb8:	00800044 	movi	r2,1
  810bbc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810bc0:	e0bfff17 	ldw	r2,-4(fp)
  810bc4:	10002c26 	beq	r2,zero,810c78 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810bc8:	e13fff17 	ldw	r4,-4(fp)
  810bcc:	081102c0 	call	81102c <alt_get_fd>
  810bd0:	e0bffe15 	stw	r2,-8(fp)
  810bd4:	e0bffe17 	ldw	r2,-8(fp)
  810bd8:	1000030e 	bge	r2,zero,810be8 <open+0x84>
    {
      status = index;
  810bdc:	e0bffe17 	ldw	r2,-8(fp)
  810be0:	e0bffd15 	stw	r2,-12(fp)
  810be4:	00002606 	br	810c80 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  810be8:	e0fffe17 	ldw	r3,-8(fp)
  810bec:	1805883a 	mov	r2,r3
  810bf0:	1085883a 	add	r2,r2,r2
  810bf4:	10c5883a 	add	r2,r2,r3
  810bf8:	100490ba 	slli	r2,r2,2
  810bfc:	00c02074 	movhi	r3,129
  810c00:	18c9a504 	addi	r3,r3,9876
  810c04:	10c5883a 	add	r2,r2,r3
  810c08:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810c0c:	e0fff917 	ldw	r3,-28(fp)
  810c10:	00900034 	movhi	r2,16384
  810c14:	10bfffc4 	addi	r2,r2,-1
  810c18:	1886703a 	and	r3,r3,r2
  810c1c:	e0bffb17 	ldw	r2,-20(fp)
  810c20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810c24:	e0bffc17 	ldw	r2,-16(fp)
  810c28:	1000051e 	bne	r2,zero,810c40 <open+0xdc>
  810c2c:	e13ffb17 	ldw	r4,-20(fp)
  810c30:	0810a880 	call	810a88 <alt_file_locked>
  810c34:	e0bffd15 	stw	r2,-12(fp)
  810c38:	e0bffd17 	ldw	r2,-12(fp)
  810c3c:	10001016 	blt	r2,zero,810c80 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810c40:	e0bfff17 	ldw	r2,-4(fp)
  810c44:	10800317 	ldw	r2,12(r2)
  810c48:	10000826 	beq	r2,zero,810c6c <open+0x108>
  810c4c:	e0bfff17 	ldw	r2,-4(fp)
  810c50:	10800317 	ldw	r2,12(r2)
  810c54:	e1fff817 	ldw	r7,-32(fp)
  810c58:	e1bff917 	ldw	r6,-28(fp)
  810c5c:	e17ffa17 	ldw	r5,-24(fp)
  810c60:	e13ffb17 	ldw	r4,-20(fp)
  810c64:	103ee83a 	callr	r2
  810c68:	00000106 	br	810c70 <open+0x10c>
  810c6c:	0005883a 	mov	r2,zero
  810c70:	e0bffd15 	stw	r2,-12(fp)
  810c74:	00000206 	br	810c80 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810c78:	00bffb44 	movi	r2,-19
  810c7c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810c80:	e0bffd17 	ldw	r2,-12(fp)
  810c84:	1000090e 	bge	r2,zero,810cac <open+0x148>
  {
    alt_release_fd (index);  
  810c88:	e13ffe17 	ldw	r4,-8(fp)
  810c8c:	080f3a00 	call	80f3a0 <alt_release_fd>
    ALT_ERRNO = -status;
  810c90:	0810a4c0 	call	810a4c <alt_get_errno>
  810c94:	1007883a 	mov	r3,r2
  810c98:	e0bffd17 	ldw	r2,-12(fp)
  810c9c:	0085c83a 	sub	r2,zero,r2
  810ca0:	18800015 	stw	r2,0(r3)
    return -1;
  810ca4:	00bfffc4 	movi	r2,-1
  810ca8:	00000106 	br	810cb0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  810cac:	e0bffe17 	ldw	r2,-8(fp)
}
  810cb0:	e037883a 	mov	sp,fp
  810cb4:	dfc00117 	ldw	ra,4(sp)
  810cb8:	df000017 	ldw	fp,0(sp)
  810cbc:	dec00204 	addi	sp,sp,8
  810cc0:	f800283a 	ret

00810cc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  810cc4:	defffa04 	addi	sp,sp,-24
  810cc8:	df000515 	stw	fp,20(sp)
  810ccc:	df000504 	addi	fp,sp,20
  810cd0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  810cd4:	0005303a 	rdctl	r2,status
  810cd8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810cdc:	e0fffc17 	ldw	r3,-16(fp)
  810ce0:	00bfff84 	movi	r2,-2
  810ce4:	1884703a 	and	r2,r3,r2
  810ce8:	1001703a 	wrctl	status,r2
  return context;
  810cec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  810cf0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  810cf4:	e0bffb17 	ldw	r2,-20(fp)
  810cf8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  810cfc:	e0bffd17 	ldw	r2,-12(fp)
  810d00:	10800017 	ldw	r2,0(r2)
  810d04:	e0fffd17 	ldw	r3,-12(fp)
  810d08:	18c00117 	ldw	r3,4(r3)
  810d0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810d10:	e0bffd17 	ldw	r2,-12(fp)
  810d14:	10800117 	ldw	r2,4(r2)
  810d18:	e0fffd17 	ldw	r3,-12(fp)
  810d1c:	18c00017 	ldw	r3,0(r3)
  810d20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810d24:	e0bffd17 	ldw	r2,-12(fp)
  810d28:	e0fffd17 	ldw	r3,-12(fp)
  810d2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810d30:	e0bffd17 	ldw	r2,-12(fp)
  810d34:	e0fffd17 	ldw	r3,-12(fp)
  810d38:	10c00015 	stw	r3,0(r2)
} 
  810d3c:	0001883a 	nop
  810d40:	e0bfff17 	ldw	r2,-4(fp)
  810d44:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  810d48:	e0bffe17 	ldw	r2,-8(fp)
  810d4c:	1001703a 	wrctl	status,r2
}
  810d50:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  810d54:	0001883a 	nop
  810d58:	e037883a 	mov	sp,fp
  810d5c:	df000017 	ldw	fp,0(sp)
  810d60:	dec00104 	addi	sp,sp,4
  810d64:	f800283a 	ret

00810d68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810d68:	defffb04 	addi	sp,sp,-20
  810d6c:	dfc00415 	stw	ra,16(sp)
  810d70:	df000315 	stw	fp,12(sp)
  810d74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810d78:	d0a01417 	ldw	r2,-32688(gp)
  810d7c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810d80:	d0a75e17 	ldw	r2,-25224(gp)
  810d84:	10800044 	addi	r2,r2,1
  810d88:	d0a75e15 	stw	r2,-25224(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810d8c:	00002e06 	br	810e48 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810d90:	e0bfff17 	ldw	r2,-4(fp)
  810d94:	10800017 	ldw	r2,0(r2)
  810d98:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810d9c:	e0bfff17 	ldw	r2,-4(fp)
  810da0:	10800403 	ldbu	r2,16(r2)
  810da4:	10803fcc 	andi	r2,r2,255
  810da8:	10000426 	beq	r2,zero,810dbc <alt_tick+0x54>
  810dac:	d0a75e17 	ldw	r2,-25224(gp)
  810db0:	1000021e 	bne	r2,zero,810dbc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  810db4:	e0bfff17 	ldw	r2,-4(fp)
  810db8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  810dbc:	e0bfff17 	ldw	r2,-4(fp)
  810dc0:	10800217 	ldw	r2,8(r2)
  810dc4:	d0e75e17 	ldw	r3,-25224(gp)
  810dc8:	18801d36 	bltu	r3,r2,810e40 <alt_tick+0xd8>
  810dcc:	e0bfff17 	ldw	r2,-4(fp)
  810dd0:	10800403 	ldbu	r2,16(r2)
  810dd4:	10803fcc 	andi	r2,r2,255
  810dd8:	1000191e 	bne	r2,zero,810e40 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  810ddc:	e0bfff17 	ldw	r2,-4(fp)
  810de0:	10800317 	ldw	r2,12(r2)
  810de4:	e0ffff17 	ldw	r3,-4(fp)
  810de8:	18c00517 	ldw	r3,20(r3)
  810dec:	1809883a 	mov	r4,r3
  810df0:	103ee83a 	callr	r2
  810df4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  810df8:	e0bffd17 	ldw	r2,-12(fp)
  810dfc:	1000031e 	bne	r2,zero,810e0c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810e00:	e13fff17 	ldw	r4,-4(fp)
  810e04:	0810cc40 	call	810cc4 <alt_alarm_stop>
  810e08:	00000d06 	br	810e40 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810e0c:	e0bfff17 	ldw	r2,-4(fp)
  810e10:	10c00217 	ldw	r3,8(r2)
  810e14:	e0bffd17 	ldw	r2,-12(fp)
  810e18:	1887883a 	add	r3,r3,r2
  810e1c:	e0bfff17 	ldw	r2,-4(fp)
  810e20:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810e24:	e0bfff17 	ldw	r2,-4(fp)
  810e28:	10c00217 	ldw	r3,8(r2)
  810e2c:	d0a75e17 	ldw	r2,-25224(gp)
  810e30:	1880032e 	bgeu	r3,r2,810e40 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810e34:	e0bfff17 	ldw	r2,-4(fp)
  810e38:	00c00044 	movi	r3,1
  810e3c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810e40:	e0bffe17 	ldw	r2,-8(fp)
  810e44:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  810e48:	e0ffff17 	ldw	r3,-4(fp)
  810e4c:	d0a01404 	addi	r2,gp,-32688
  810e50:	18bfcf1e 	bne	r3,r2,810d90 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810e54:	0001883a 	nop
}
  810e58:	0001883a 	nop
  810e5c:	e037883a 	mov	sp,fp
  810e60:	dfc00117 	ldw	ra,4(sp)
  810e64:	df000017 	ldw	fp,0(sp)
  810e68:	dec00204 	addi	sp,sp,8
  810e6c:	f800283a 	ret

00810e70 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  810e70:	deffff04 	addi	sp,sp,-4
  810e74:	df000015 	stw	fp,0(sp)
  810e78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  810e7c:	000170fa 	wrctl	ienable,zero
}
  810e80:	0001883a 	nop
  810e84:	e037883a 	mov	sp,fp
  810e88:	df000017 	ldw	fp,0(sp)
  810e8c:	dec00104 	addi	sp,sp,4
  810e90:	f800283a 	ret

00810e94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810e94:	defffa04 	addi	sp,sp,-24
  810e98:	dfc00515 	stw	ra,20(sp)
  810e9c:	df000415 	stw	fp,16(sp)
  810ea0:	df000404 	addi	fp,sp,16
  810ea4:	e13ffd15 	stw	r4,-12(fp)
  810ea8:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	10800017 	ldw	r2,0(r2)
  810eb4:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810eb8:	e13ffd17 	ldw	r4,-12(fp)
  810ebc:	08008880 	call	800888 <strlen>
  810ec0:	10800044 	addi	r2,r2,1
  810ec4:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810ec8:	00000d06 	br	810f00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810ecc:	e0bfff17 	ldw	r2,-4(fp)
  810ed0:	10800217 	ldw	r2,8(r2)
  810ed4:	e0fffe17 	ldw	r3,-8(fp)
  810ed8:	180d883a 	mov	r6,r3
  810edc:	e17ffd17 	ldw	r5,-12(fp)
  810ee0:	1009883a 	mov	r4,r2
  810ee4:	08112500 	call	811250 <memcmp>
  810ee8:	1000021e 	bne	r2,zero,810ef4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810eec:	e0bfff17 	ldw	r2,-4(fp)
  810ef0:	00000706 	br	810f10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810ef4:	e0bfff17 	ldw	r2,-4(fp)
  810ef8:	10800017 	ldw	r2,0(r2)
  810efc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  810f00:	e0ffff17 	ldw	r3,-4(fp)
  810f04:	e0bffc17 	ldw	r2,-16(fp)
  810f08:	18bff01e 	bne	r3,r2,810ecc <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  810f0c:	0005883a 	mov	r2,zero
}
  810f10:	e037883a 	mov	sp,fp
  810f14:	dfc00117 	ldw	ra,4(sp)
  810f18:	df000017 	ldw	fp,0(sp)
  810f1c:	dec00204 	addi	sp,sp,8
  810f20:	f800283a 	ret

00810f24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810f24:	defffb04 	addi	sp,sp,-20
  810f28:	dfc00415 	stw	ra,16(sp)
  810f2c:	df000315 	stw	fp,12(sp)
  810f30:	df000304 	addi	fp,sp,12
  810f34:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810f38:	d0a00c17 	ldw	r2,-32720(gp)
  810f3c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810f40:	00003106 	br	811008 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  810f44:	e0bfff17 	ldw	r2,-4(fp)
  810f48:	10800217 	ldw	r2,8(r2)
  810f4c:	1009883a 	mov	r4,r2
  810f50:	08008880 	call	800888 <strlen>
  810f54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  810f58:	e0bfff17 	ldw	r2,-4(fp)
  810f5c:	10c00217 	ldw	r3,8(r2)
  810f60:	e0bffe17 	ldw	r2,-8(fp)
  810f64:	10bfffc4 	addi	r2,r2,-1
  810f68:	1885883a 	add	r2,r3,r2
  810f6c:	10800003 	ldbu	r2,0(r2)
  810f70:	10803fcc 	andi	r2,r2,255
  810f74:	1080201c 	xori	r2,r2,128
  810f78:	10bfe004 	addi	r2,r2,-128
  810f7c:	10800bd8 	cmpnei	r2,r2,47
  810f80:	1000031e 	bne	r2,zero,810f90 <alt_find_file+0x6c>
    {
      len -= 1;
  810f84:	e0bffe17 	ldw	r2,-8(fp)
  810f88:	10bfffc4 	addi	r2,r2,-1
  810f8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810f90:	e0bffe17 	ldw	r2,-8(fp)
  810f94:	e0fffd17 	ldw	r3,-12(fp)
  810f98:	1885883a 	add	r2,r3,r2
  810f9c:	10800003 	ldbu	r2,0(r2)
  810fa0:	10803fcc 	andi	r2,r2,255
  810fa4:	1080201c 	xori	r2,r2,128
  810fa8:	10bfe004 	addi	r2,r2,-128
  810fac:	10800be0 	cmpeqi	r2,r2,47
  810fb0:	1000081e 	bne	r2,zero,810fd4 <alt_find_file+0xb0>
  810fb4:	e0bffe17 	ldw	r2,-8(fp)
  810fb8:	e0fffd17 	ldw	r3,-12(fp)
  810fbc:	1885883a 	add	r2,r3,r2
  810fc0:	10800003 	ldbu	r2,0(r2)
  810fc4:	10803fcc 	andi	r2,r2,255
  810fc8:	1080201c 	xori	r2,r2,128
  810fcc:	10bfe004 	addi	r2,r2,-128
  810fd0:	10000a1e 	bne	r2,zero,810ffc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  810fd4:	e0bfff17 	ldw	r2,-4(fp)
  810fd8:	10800217 	ldw	r2,8(r2)
  810fdc:	e0fffe17 	ldw	r3,-8(fp)
  810fe0:	180d883a 	mov	r6,r3
  810fe4:	e17ffd17 	ldw	r5,-12(fp)
  810fe8:	1009883a 	mov	r4,r2
  810fec:	08112500 	call	811250 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  810ff0:	1000021e 	bne	r2,zero,810ffc <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  810ff4:	e0bfff17 	ldw	r2,-4(fp)
  810ff8:	00000706 	br	811018 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  810ffc:	e0bfff17 	ldw	r2,-4(fp)
  811000:	10800017 	ldw	r2,0(r2)
  811004:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  811008:	e0ffff17 	ldw	r3,-4(fp)
  81100c:	d0a00c04 	addi	r2,gp,-32720
  811010:	18bfcc1e 	bne	r3,r2,810f44 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  811014:	0005883a 	mov	r2,zero
}
  811018:	e037883a 	mov	sp,fp
  81101c:	dfc00117 	ldw	ra,4(sp)
  811020:	df000017 	ldw	fp,0(sp)
  811024:	dec00204 	addi	sp,sp,8
  811028:	f800283a 	ret

0081102c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81102c:	defffc04 	addi	sp,sp,-16
  811030:	df000315 	stw	fp,12(sp)
  811034:	df000304 	addi	fp,sp,12
  811038:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  81103c:	00bffa04 	movi	r2,-24
  811040:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811044:	e03fff15 	stw	zero,-4(fp)
  811048:	00001d06 	br	8110c0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  81104c:	e0ffff17 	ldw	r3,-4(fp)
  811050:	1805883a 	mov	r2,r3
  811054:	1085883a 	add	r2,r2,r2
  811058:	10c5883a 	add	r2,r2,r3
  81105c:	100490ba 	slli	r2,r2,2
  811060:	00c02074 	movhi	r3,129
  811064:	10c7883a 	add	r3,r2,r3
  811068:	1889a517 	ldw	r2,9876(r3)
  81106c:	1000111e 	bne	r2,zero,8110b4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  811070:	e0ffff17 	ldw	r3,-4(fp)
  811074:	1805883a 	mov	r2,r3
  811078:	1085883a 	add	r2,r2,r2
  81107c:	10c5883a 	add	r2,r2,r3
  811080:	100490ba 	slli	r2,r2,2
  811084:	e13ffd17 	ldw	r4,-12(fp)
  811088:	00c02074 	movhi	r3,129
  81108c:	10c7883a 	add	r3,r2,r3
  811090:	1909a515 	stw	r4,9876(r3)
      if (i > alt_max_fd)
  811094:	d0e01017 	ldw	r3,-32704(gp)
  811098:	e0bfff17 	ldw	r2,-4(fp)
  81109c:	1880020e 	bge	r3,r2,8110a8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8110a0:	e0bfff17 	ldw	r2,-4(fp)
  8110a4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  8110a8:	e0bfff17 	ldw	r2,-4(fp)
  8110ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8110b0:	00000706 	br	8110d0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  8110b4:	e0bfff17 	ldw	r2,-4(fp)
  8110b8:	10800044 	addi	r2,r2,1
  8110bc:	e0bfff15 	stw	r2,-4(fp)
  8110c0:	e0bfff17 	ldw	r2,-4(fp)
  8110c4:	10800810 	cmplti	r2,r2,32
  8110c8:	103fe01e 	bne	r2,zero,81104c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  8110cc:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8110d0:	e0bffe17 	ldw	r2,-8(fp)
}
  8110d4:	e037883a 	mov	sp,fp
  8110d8:	df000017 	ldw	fp,0(sp)
  8110dc:	dec00104 	addi	sp,sp,4
  8110e0:	f800283a 	ret

008110e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8110e4:	defffb04 	addi	sp,sp,-20
  8110e8:	df000415 	stw	fp,16(sp)
  8110ec:	df000404 	addi	fp,sp,16
  8110f0:	e13ffd15 	stw	r4,-12(fp)
  8110f4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8110f8:	e0bffc17 	ldw	r2,-16(fp)
  8110fc:	10820070 	cmpltui	r2,r2,2049
  811100:	1000021e 	bne	r2,zero,81110c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811104:	00820004 	movi	r2,2048
  811108:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  81110c:	e0fffd17 	ldw	r3,-12(fp)
  811110:	e0bffc17 	ldw	r2,-16(fp)
  811114:	1885883a 	add	r2,r3,r2
  811118:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81111c:	e0bffd17 	ldw	r2,-12(fp)
  811120:	e0bfff15 	stw	r2,-4(fp)
  811124:	00000506 	br	81113c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811128:	e0bfff17 	ldw	r2,-4(fp)
  81112c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811130:	e0bfff17 	ldw	r2,-4(fp)
  811134:	10800804 	addi	r2,r2,32
  811138:	e0bfff15 	stw	r2,-4(fp)
  81113c:	e0ffff17 	ldw	r3,-4(fp)
  811140:	e0bffe17 	ldw	r2,-8(fp)
  811144:	18bff836 	bltu	r3,r2,811128 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811148:	e0bffd17 	ldw	r2,-12(fp)
  81114c:	108007cc 	andi	r2,r2,31
  811150:	10000226 	beq	r2,zero,81115c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811154:	e0bfff17 	ldw	r2,-4(fp)
  811158:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81115c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811160:	0001883a 	nop
  811164:	e037883a 	mov	sp,fp
  811168:	df000017 	ldw	fp,0(sp)
  81116c:	dec00104 	addi	sp,sp,4
  811170:	f800283a 	ret

00811174 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811174:	defffe04 	addi	sp,sp,-8
  811178:	df000115 	stw	fp,4(sp)
  81117c:	df000104 	addi	fp,sp,4
  811180:	e13fff15 	stw	r4,-4(fp)
  811184:	e0bfff17 	ldw	r2,-4(fp)
  811188:	10bffe84 	addi	r2,r2,-6
  81118c:	10c00428 	cmpgeui	r3,r2,16
  811190:	1800191e 	bne	r3,zero,8111f8 <alt_exception_cause_generated_bad_addr+0x84>
  811194:	100690ba 	slli	r3,r2,2
  811198:	00802074 	movhi	r2,129
  81119c:	1885883a 	add	r2,r3,r2
  8111a0:	10846a17 	ldw	r2,4520(r2)
  8111a4:	1000683a 	jmp	r2
  8111a8:	008111e8 	cmpgeui	r2,zero,1095
  8111ac:	008111e8 	cmpgeui	r2,zero,1095
  8111b0:	008111f8 	rdprs	r2,zero,1095
  8111b4:	008111f8 	rdprs	r2,zero,1095
  8111b8:	008111f8 	rdprs	r2,zero,1095
  8111bc:	008111e8 	cmpgeui	r2,zero,1095
  8111c0:	008111f0 	cmpltui	r2,zero,1095
  8111c4:	008111f8 	rdprs	r2,zero,1095
  8111c8:	008111e8 	cmpgeui	r2,zero,1095
  8111cc:	008111e8 	cmpgeui	r2,zero,1095
  8111d0:	008111f8 	rdprs	r2,zero,1095
  8111d4:	008111e8 	cmpgeui	r2,zero,1095
  8111d8:	008111f0 	cmpltui	r2,zero,1095
  8111dc:	008111f8 	rdprs	r2,zero,1095
  8111e0:	008111f8 	rdprs	r2,zero,1095
  8111e4:	008111e8 	cmpgeui	r2,zero,1095
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8111e8:	00800044 	movi	r2,1
  8111ec:	00000306 	br	8111fc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8111f0:	0005883a 	mov	r2,zero
  8111f4:	00000106 	br	8111fc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  8111f8:	0005883a 	mov	r2,zero
  }
}
  8111fc:	e037883a 	mov	sp,fp
  811200:	df000017 	ldw	fp,0(sp)
  811204:	dec00104 	addi	sp,sp,4
  811208:	f800283a 	ret

0081120c <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
  81120c:	200b883a 	mov	r5,r4
  811210:	000f883a 	mov	r7,zero
  811214:	000d883a 	mov	r6,zero
  811218:	0009883a 	mov	r4,zero
  81121c:	08112c81 	jmpi	8112c8 <__register_exitproc>

00811220 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
  811220:	defffe04 	addi	sp,sp,-8
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
  811224:	000b883a 	mov	r5,zero
{
  811228:	dc000015 	stw	r16,0(sp)
  81122c:	dfc00115 	stw	ra,4(sp)
  811230:	2021883a 	mov	r16,r4
    __call_exitprocs (code, NULL);
  811234:	08113540 	call	811354 <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
  811238:	d1200817 	ldw	r4,-32736(gp)
  81123c:	20800f17 	ldw	r2,60(r4)
  811240:	10000126 	beq	r2,zero,811248 <exit+0x28>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
  811244:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
  811248:	8009883a 	mov	r4,r16
  81124c:	080ebec0 	call	80ebec <_exit>

00811250 <memcmp>:
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
  811250:	30800130 	cmpltui	r2,r6,4
  811254:	10000b1e 	bne	r2,zero,811284 <memcmp+0x34>
  811258:	2144b03a 	or	r2,r4,r5
  81125c:	108000cc 	andi	r2,r2,3
  811260:	1000171e 	bne	r2,zero,8112c0 <memcmp+0x70>
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
        {
          if (*a1 != *a2) 
  811264:	20c00017 	ldw	r3,0(r4)
  811268:	28800017 	ldw	r2,0(r5)
  81126c:	1880141e 	bne	r3,r2,8112c0 <memcmp+0x70>
   	    break;
          a1++;
          a2++;
          n -= LBLOCKSIZE;
  811270:	31bfff04 	addi	r6,r6,-4
      while (n >= LBLOCKSIZE)
  811274:	30800128 	cmpgeui	r2,r6,4
          a1++;
  811278:	21000104 	addi	r4,r4,4
          a2++;
  81127c:	29400104 	addi	r5,r5,4
      while (n >= LBLOCKSIZE)
  811280:	103ff81e 	bne	r2,zero,811264 <memcmp+0x14>

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
  811284:	30bfffc4 	addi	r2,r6,-1
  811288:	30000b26 	beq	r6,zero,8112b8 <memcmp+0x68>
  81128c:	11800044 	addi	r6,r2,1
  811290:	218d883a 	add	r6,r4,r6
  811294:	00000106 	br	81129c <memcmp+0x4c>
  811298:	21800726 	beq	r4,r6,8112b8 <memcmp+0x68>
    {
      if (*s1 != *s2)
  81129c:	20800003 	ldbu	r2,0(r4)
  8112a0:	28c00003 	ldbu	r3,0(r5)
	return *s1 - *s2;
      s1++;
  8112a4:	21000044 	addi	r4,r4,1
      s2++;
  8112a8:	29400044 	addi	r5,r5,1
      if (*s1 != *s2)
  8112ac:	10fffa26 	beq	r2,r3,811298 <memcmp+0x48>
	return *s1 - *s2;
  8112b0:	10c5c83a 	sub	r2,r2,r3
  8112b4:	f800283a 	ret
    }

  return 0;
  8112b8:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
  8112bc:	f800283a 	ret
  while (n--)
  8112c0:	30bfffc4 	addi	r2,r6,-1
  8112c4:	003ff106 	br	81128c <memcmp+0x3c>

008112c8 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
  8112c8:	d0e00817 	ldw	r3,-32736(gp)
  8112cc:	18805217 	ldw	r2,328(r3)
  if (p == NULL)
  8112d0:	10001726 	beq	r2,zero,811330 <__register_exitproc+0x68>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
  8112d4:	10c00117 	ldw	r3,4(r2)
  8112d8:	1a000808 	cmpgei	r8,r3,32
  8112dc:	40001b1e 	bne	r8,zero,81134c <__register_exitproc+0x84>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
  8112e0:	20000b26 	beq	r4,zero,811310 <__register_exitproc+0x48>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
  8112e4:	181090ba 	slli	r8,r3,2
      args->_fntypes |= (1 << p->_ind);
  8112e8:	02400044 	movi	r9,1
  8112ec:	48d2983a 	sll	r9,r9,r3
  8112f0:	1211883a 	add	r8,r2,r8
      args->_fnargs[p->_ind] = arg;
  8112f4:	41802215 	stw	r6,136(r8)
      args->_fntypes |= (1 << p->_ind);
  8112f8:	11806217 	ldw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
  8112fc:	21000098 	cmpnei	r4,r4,2
      args->_fntypes |= (1 << p->_ind);
  811300:	324cb03a 	or	r6,r6,r9
  811304:	11806215 	stw	r6,392(r2)
      args->_dso_handle[p->_ind] = d;
  811308:	41c04215 	stw	r7,264(r8)
      if (type == __et_cxa)
  81130c:	20000b26 	beq	r4,zero,81133c <__register_exitproc+0x74>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
  811310:	19000084 	addi	r4,r3,2
  811314:	200890ba 	slli	r4,r4,2
  811318:	18c00044 	addi	r3,r3,1
  81131c:	10c00115 	stw	r3,4(r2)
  811320:	1105883a 	add	r2,r2,r4
  811324:	11400015 	stw	r5,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
  811328:	0005883a 	mov	r2,zero
  81132c:	f800283a 	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  811330:	18805304 	addi	r2,r3,332
  811334:	18805215 	stw	r2,328(r3)
  811338:	003fe606 	br	8112d4 <__register_exitproc+0xc>
	args->_is_cxa |= (1 << p->_ind);
  81133c:	11006317 	ldw	r4,396(r2)
  811340:	2252b03a 	or	r9,r4,r9
  811344:	12406315 	stw	r9,396(r2)
  811348:	003ff106 	br	811310 <__register_exitproc+0x48>
      return -1;
  81134c:	00bfffc4 	movi	r2,-1
}
  811350:	f800283a 	ret

00811354 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
  811354:	defff704 	addi	sp,sp,-36
  811358:	dcc00315 	stw	r19,12(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
  81135c:	d4e00817 	ldw	r19,-32736(gp)
{
  811360:	dd800615 	stw	r22,24(sp)
  811364:	dfc00815 	stw	ra,32(sp)
  p = _GLOBAL_ATEXIT;
  811368:	9d805217 	ldw	r22,328(r19)
{
  81136c:	ddc00715 	stw	r23,28(sp)
  811370:	dd400515 	stw	r21,20(sp)
  811374:	dd000415 	stw	r20,16(sp)
  811378:	dc800215 	stw	r18,8(sp)
  81137c:	dc400115 	stw	r17,4(sp)
  811380:	dc000015 	stw	r16,0(sp)
  lastp = &_GLOBAL_ATEXIT;
  while (p)
  811384:	b0002226 	beq	r22,zero,811410 <__call_exitprocs+0xbc>
  811388:	202b883a 	mov	r21,r4
  81138c:	2825883a 	mov	r18,r5
  811390:	05000044 	movi	r20,1
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
  811394:	b0800117 	ldw	r2,4(r22)
  811398:	143fffc4 	addi	r16,r2,-1
  81139c:	80001c16 	blt	r16,zero,811410 <__call_exitprocs+0xbc>
  8113a0:	14400044 	addi	r17,r2,1
  8113a4:	882290ba 	slli	r17,r17,2
  8113a8:	b463883a 	add	r17,r22,r17
  8113ac:	9000051e 	bne	r18,zero,8113c4 <__call_exitprocs+0x70>
  8113b0:	00003306 	br	811480 <__call_exitprocs+0x12c>
  8113b4:	843fffc4 	addi	r16,r16,-1
  8113b8:	80bfffd8 	cmpnei	r2,r16,-1
  8113bc:	8c7fff04 	addi	r17,r17,-4
  8113c0:	10001326 	beq	r2,zero,811410 <__call_exitprocs+0xbc>
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
  8113c4:	88804017 	ldw	r2,256(r17)
  8113c8:	14bffa1e 	bne	r2,r18,8113b4 <__call_exitprocs+0x60>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
	  if (n == p->_ind - 1)
  8113cc:	b5c00117 	ldw	r23,4(r22)
	  fn = p->_fns[n];
  8113d0:	89800017 	ldw	r6,0(r17)
	  if (n == p->_ind - 1)
  8113d4:	b8bfffc4 	addi	r2,r23,-1
  8113d8:	14003726 	beq	r2,r16,8114b8 <__call_exitprocs+0x164>
	    p->_ind--;
	  else
	    p->_fns[n] = NULL;
  8113dc:	88000015 	stw	zero,0(r17)

	  /* Skip functions that have already been called.  */
	  if (!fn)
  8113e0:	303ff426 	beq	r6,zero,8113b4 <__call_exitprocs+0x60>
	  i = 1 << n;
  8113e4:	a406983a 	sll	r3,r20,r16
	    continue;

	  ind = p->_ind;

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
  8113e8:	b0806217 	ldw	r2,392(r22)
  8113ec:	1884703a 	and	r2,r3,r2
  8113f0:	1000291e 	bne	r2,zero,811498 <__call_exitprocs+0x144>
	    fn ();
  8113f4:	303ee83a 	callr	r6
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
  8113f8:	b0800117 	ldw	r2,4(r22)
  p = _GLOBAL_ATEXIT;
  8113fc:	98c05217 	ldw	r3,328(r19)
	  if (ind != p->_ind || *lastp != p)
  811400:	15c0011e 	bne	r2,r23,811408 <__call_exitprocs+0xb4>
  811404:	b0ffeb26 	beq	r22,r3,8113b4 <__call_exitprocs+0x60>
  p = _GLOBAL_ATEXIT;
  811408:	182d883a 	mov	r22,r3
  while (p)
  81140c:	183fe11e 	bne	r3,zero,811394 <__call_exitprocs+0x40>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
  811410:	dfc00817 	ldw	ra,32(sp)
  811414:	ddc00717 	ldw	r23,28(sp)
  811418:	dd800617 	ldw	r22,24(sp)
  81141c:	dd400517 	ldw	r21,20(sp)
  811420:	dd000417 	ldw	r20,16(sp)
  811424:	dcc00317 	ldw	r19,12(sp)
  811428:	dc800217 	ldw	r18,8(sp)
  81142c:	dc400117 	ldw	r17,4(sp)
  811430:	dc000017 	ldw	r16,0(sp)
  811434:	dec00904 	addi	sp,sp,36
  811438:	f800283a 	ret
	    p->_ind--;
  81143c:	b4000115 	stw	r16,4(r22)
  811440:	802f883a 	mov	r23,r16
	  if (!fn)
  811444:	10000926 	beq	r2,zero,81146c <__call_exitprocs+0x118>
	  i = 1 << n;
  811448:	a40c983a 	sll	r6,r20,r16
	  if (!args || (args->_fntypes & i) == 0)
  81144c:	b0c06217 	ldw	r3,392(r22)
  811450:	30c6703a 	and	r3,r6,r3
  811454:	18001d1e 	bne	r3,zero,8114cc <__call_exitprocs+0x178>
	    fn ();
  811458:	103ee83a 	callr	r2
	  if (ind != p->_ind || *lastp != p)
  81145c:	b0800117 	ldw	r2,4(r22)
  p = _GLOBAL_ATEXIT;
  811460:	98c05217 	ldw	r3,328(r19)
	  if (ind != p->_ind || *lastp != p)
  811464:	15ffe81e 	bne	r2,r23,811408 <__call_exitprocs+0xb4>
  811468:	1dbfe71e 	bne	r3,r22,811408 <__call_exitprocs+0xb4>
      for (n = p->_ind - 1; n >= 0; n--)
  81146c:	843fffc4 	addi	r16,r16,-1
  811470:	80bfffd8 	cmpnei	r2,r16,-1
  811474:	8c7fff04 	addi	r17,r17,-4
  811478:	103fe526 	beq	r2,zero,811410 <__call_exitprocs+0xbc>
  81147c:	b0800117 	ldw	r2,4(r22)
	  if (n == p->_ind - 1)
  811480:	10ffffc4 	addi	r3,r2,-1
  811484:	102f883a 	mov	r23,r2
	  fn = p->_fns[n];
  811488:	88800017 	ldw	r2,0(r17)
	  if (n == p->_ind - 1)
  81148c:	1c3feb26 	beq	r3,r16,81143c <__call_exitprocs+0xe8>
	    p->_fns[n] = NULL;
  811490:	88000015 	stw	zero,0(r17)
  811494:	003feb06 	br	811444 <__call_exitprocs+0xf0>
	  else if ((args->_is_cxa & i) == 0)
  811498:	b0806317 	ldw	r2,396(r22)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  81149c:	89002017 	ldw	r4,128(r17)
	  else if ((args->_is_cxa & i) == 0)
  8114a0:	1886703a 	and	r3,r3,r2
  8114a4:	1800071e 	bne	r3,zero,8114c4 <__call_exitprocs+0x170>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  8114a8:	200b883a 	mov	r5,r4
  8114ac:	a809883a 	mov	r4,r21
  8114b0:	303ee83a 	callr	r6
  8114b4:	003fd006 	br	8113f8 <__call_exitprocs+0xa4>
	    p->_ind--;
  8114b8:	b4000115 	stw	r16,4(r22)
  8114bc:	802f883a 	mov	r23,r16
  8114c0:	003fc706 	br	8113e0 <__call_exitprocs+0x8c>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  8114c4:	303ee83a 	callr	r6
  8114c8:	003fcb06 	br	8113f8 <__call_exitprocs+0xa4>
	  else if ((args->_is_cxa & i) == 0)
  8114cc:	b0c06317 	ldw	r3,396(r22)
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  8114d0:	89002017 	ldw	r4,128(r17)
	  else if ((args->_is_cxa & i) == 0)
  8114d4:	30cc703a 	and	r6,r6,r3
  8114d8:	30000226 	beq	r6,zero,8114e4 <__call_exitprocs+0x190>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
  8114dc:	103ee83a 	callr	r2
  8114e0:	003fde06 	br	81145c <__call_exitprocs+0x108>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
  8114e4:	200b883a 	mov	r5,r4
  8114e8:	a809883a 	mov	r4,r21
  8114ec:	103ee83a 	callr	r2
  8114f0:	003fda06 	br	81145c <__call_exitprocs+0x108>
