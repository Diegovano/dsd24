
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008238

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001d88 memsz 0x00001d88 flags r-x
    LOAD off    0x00002da8 vaddr 0x00009da8 paddr 0x0000a08c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003370 vaddr 0x0000a370 paddr 0x0000a370 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001b2c  00008238  00008238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00009d64  00009d64  00002d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00009da8  0000a08c  00002da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000a370  0000a370  00003370  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000a490  0000a490  0000308c  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e0  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017e8a  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000053d2  00000000  00000000  0001b522  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000545e  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a90  00000000  00000000  00025d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d02  00000000  00000000  000267e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006ff  00000000  00000000  000284e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00028be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00028c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002a772  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002a775  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002a778  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002a779  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002a77a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002a77e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002a782  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002a786  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002a78f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002a798  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0002a7a1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0002a7b3  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  0002a7d8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ccf4  00000000  00000000  0002f871  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008238 l    d  .text	00000000 .text
00009d64 l    d  .rodata	00000000 .rodata
00009da8 l    d  .rwdata	00000000 .rwdata
0000a370 l    d  .bss	00000000 .bss
0000a490 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00008280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009da8 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00008460 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000085c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008708 l     F .text	00000034 alt_dev_reg
00009e8c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00008a08 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00008b08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008c6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009110 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009260 l     F .text	0000003c alt_get_errno
0000929c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a38c g     O .bss	00000004 alt_instruction_exception_handler
0000854c g     F .text	0000007c alt_main
000082b8 g     F .text	00000084 _puts_r
0000a390 g     O .bss	00000100 alt_irq
0000a08c g       *ABS*	00000000 __flash_rwdata_start
000096f4 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a370 g     O .bss	00000004 errno
0000a378 g     O .bss	00000004 alt_argv
00012060 g       *ABS*	00000000 _gp
00009ee0 g     O .rwdata	00000180 alt_fd_list
00009718 g     F .text	00000090 alt_find_dev
000091e4 g     F .text	0000007c alt_io_redirect
00009d64 g       *ABS*	00000000 __DTOR_END__
0000833c g     F .text	00000010 puts
000099f8 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00008888 g     F .text	000000ec altera_avalon_jtag_uart_read
00009968 g     F .text	00000090 alt_icache_flush
0000a078 g     O .rwdata	00000004 alt_max_fd
0000a060 g     O .rwdata	00000004 _global_impure_ptr
0000a490 g       *ABS*	00000000 __bss_end
00009028 g     F .text	000000e8 alt_iic_isr_register
000095ec g     F .text	00000108 alt_tick
00008fdc g     F .text	0000004c alt_ic_irq_enabled
00009548 g     F .text	000000a4 alt_alarm_stop
0000a380 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
00009eb8 g     O .rwdata	00000028 alt_dev_null
00008c20 g     F .text	0000004c alt_dcache_flush_all
0000a08c g       *ABS*	00000000 __ram_rwdata_end
0000a070 g     O .rwdata	00000008 alt_dev_list
00008604 g     F .text	00000104 write
00009da8 g       *ABS*	00000000 __ram_rodata_end
0000a490 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00009d64 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008a84 g     F .text	00000084 alt_avalon_timer_sc_init
00008974 g     F .text	00000094 altera_avalon_jtag_uart_write
00009c10 g     F .text	0000011c __call_exitprocs
00008238 g     F .text	0000004c _start
0000a384 g     O .bss	00000004 _alt_tick_rate
0000a388 g     O .bss	00000004 _alt_nticks
00008778 g     F .text	00000050 alt_sys_init
00009af4 g     F .text	0000011c __register_exitproc
00009da8 g       *ABS*	00000000 __ram_rwdata_start
00009d64 g       *ABS*	00000000 __ram_rodata_start
000087c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000098b0 g     F .text	000000b8 alt_get_fd
00009ac4 g     F .text	00000030 memcmp
0000a490 g       *ABS*	00000000 __alt_stack_base
000097a8 g     F .text	00000108 alt_find_file
00008cd4 g     F .text	000000a8 alt_dev_llist_insert
00008368 g     F .text	000000a8 __sfvwrite_small_dev
0000a370 g       *ABS*	00000000 __bss_start
00008284 g     F .text	00000034 main
0000a37c g     O .bss	00000004 alt_envp
00008828 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a07c g     O .rwdata	00000004 alt_errno
00009d64 g       *ABS*	00000000 __CTOR_END__
00009d64 g       *ABS*	00000000 __flash_rodata_start
00009d64 g       *ABS*	00000000 __DTOR_LIST__
0000873c g     F .text	0000003c alt_irq_init
000094d8 g     F .text	00000070 alt_release_fd
00009a90 g     F .text	00000014 atexit
00008410 g     F .text	00000050 _write_r
0000a064 g     O .rwdata	00000004 _impure_ptr
0000a374 g     O .bss	00000004 alt_argc
00008de0 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000a068 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008e78 g     F .text	00000050 alt_ic_isr_register
0000a08c g       *ABS*	00000000 _edata
0000a490 g       *ABS*	00000000 _end
00008238 g       *ABS*	00000000 __ram_exceptions_end
00008f50 g     F .text	0000008c alt_ic_irq_disable
00009aa4 g     F .text	00000020 exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009d2c g     F .text	00000038 _exit
0000834c g     F .text	0000001c strlen
00009378 g     F .text	00000160 open
00008e44 g     F .text	00000034 alt_icache_flush_all
0000a080 g     O .rwdata	00000004 alt_priority_mask
00008ec8 g     F .text	00000088 alt_ic_irq_enable
0000a084 g     O .rwdata	00000008 alt_alarm_list
00008d7c g     F .text	00000064 _do_ctors
00008b44 g     F .text	000000dc close
000084c8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08608e14 	ori	at,at,33336
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10e8e417 	ldw	r3,-23664(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10a8e517 	ldw	r2,-23660(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81d8:	000531fa 	rdctl	r2,exception
    81dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	1004d0ba 	srli	r2,r2,2
    81e8:	108007cc 	andi	r2,r2,31
    81ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81f0:	0005333a 	rdctl	r2,badaddr
    81f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f8:	d0a0cb17 	ldw	r2,-31956(gp)
    81fc:	10000726 	beq	r2,zero,821c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8200:	d0a0cb17 	ldw	r2,-31956(gp)
    8204:	e0ffff17 	ldw	r3,-4(fp)
    8208:	e1bffe17 	ldw	r6,-8(fp)
    820c:	e17ffd17 	ldw	r5,-12(fp)
    8210:	1809883a 	mov	r4,r3
    8214:	103ee83a 	callr	r2
    8218:	00000206 	br	8224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    821c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

Disassembly of section .text:

00008238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    823c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8244:	00bffd16 	blt	zero,r2,823c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8248:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    824c:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8254:	d6881814 	ori	gp,gp,8288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    825c:	10a8dc14 	ori	r2,r2,41840

    movhi r3, %hi(__bss_end)
    8260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8264:	18e92414 	ori	r3,r3,42128

    beq r2, r3, 1f
    8268:	10c00326 	beq	r2,r3,8278 <_start+0x40>

0:
    stw zero, (r2)
    826c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8274:	10fffd36 	bltu	r2,r3,826c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8278:	00084c80 	call	84c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    827c:	000854c0 	call	854c <alt_main>

00008280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8280:	003fff06 	br	8280 <alt_after_alt_main>

00008284 <main>:
 */

#include <stdio.h>

int main()
{
    8284:	defffe04 	addi	sp,sp,-8
    8288:	dfc00115 	stw	ra,4(sp)
    828c:	df000015 	stw	fp,0(sp)
    8290:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    8294:	01000074 	movhi	r4,1
    8298:	21275904 	addi	r4,r4,-25244
    829c:	000833c0 	call	833c <puts>

  return 0;
    82a0:	0005883a 	mov	r2,zero
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <_puts_r>:
    82b8:	defffd04 	addi	sp,sp,-12
    82bc:	dc000015 	stw	r16,0(sp)
    82c0:	2021883a 	mov	r16,r4
    82c4:	2809883a 	mov	r4,r5
    82c8:	dfc00215 	stw	ra,8(sp)
    82cc:	dc400115 	stw	r17,4(sp)
    82d0:	2823883a 	mov	r17,r5
    82d4:	000834c0 	call	834c <strlen>
    82d8:	81400217 	ldw	r5,8(r16)
    82dc:	00c00074 	movhi	r3,1
    82e0:	18e0da04 	addi	r3,r3,-31896
    82e4:	28c00115 	stw	r3,4(r5)
    82e8:	100f883a 	mov	r7,r2
    82ec:	880d883a 	mov	r6,r17
    82f0:	8009883a 	mov	r4,r16
    82f4:	00083680 	call	8368 <__sfvwrite_small_dev>
    82f8:	10ffffe0 	cmpeqi	r3,r2,-1
    82fc:	18000a1e 	bne	r3,zero,8328 <_puts_r+0x70>
    8300:	80800217 	ldw	r2,8(r16)
    8304:	81400217 	ldw	r5,8(r16)
    8308:	01800074 	movhi	r6,1
    830c:	10800117 	ldw	r2,4(r2)
    8310:	01c00044 	movi	r7,1
    8314:	31a75e04 	addi	r6,r6,-25224
    8318:	8009883a 	mov	r4,r16
    831c:	103ee83a 	callr	r2
    8320:	10bfffe0 	cmpeqi	r2,r2,-1
    8324:	0085c83a 	sub	r2,zero,r2
    8328:	dfc00217 	ldw	ra,8(sp)
    832c:	dc400117 	ldw	r17,4(sp)
    8330:	dc000017 	ldw	r16,0(sp)
    8334:	dec00304 	addi	sp,sp,12
    8338:	f800283a 	ret

0000833c <puts>:
    833c:	00800074 	movhi	r2,1
    8340:	200b883a 	mov	r5,r4
    8344:	11281917 	ldw	r4,-24476(r2)
    8348:	00082b81 	jmpi	82b8 <_puts_r>

0000834c <strlen>:
    834c:	2005883a 	mov	r2,r4
    8350:	10c00007 	ldb	r3,0(r2)
    8354:	1800021e 	bne	r3,zero,8360 <strlen+0x14>
    8358:	1105c83a 	sub	r2,r2,r4
    835c:	f800283a 	ret
    8360:	10800044 	addi	r2,r2,1
    8364:	003ffa06 	br	8350 <strlen+0x4>

00008368 <__sfvwrite_small_dev>:
    8368:	2880000b 	ldhu	r2,0(r5)
    836c:	1080020c 	andi	r2,r2,8
    8370:	10002526 	beq	r2,zero,8408 <__sfvwrite_small_dev+0xa0>
    8374:	2880008f 	ldh	r2,2(r5)
    8378:	defffb04 	addi	sp,sp,-20
    837c:	dcc00315 	stw	r19,12(sp)
    8380:	dc800215 	stw	r18,8(sp)
    8384:	dc400115 	stw	r17,4(sp)
    8388:	dc000015 	stw	r16,0(sp)
    838c:	dfc00415 	stw	ra,16(sp)
    8390:	2027883a 	mov	r19,r4
    8394:	2821883a 	mov	r16,r5
    8398:	3025883a 	mov	r18,r6
    839c:	3823883a 	mov	r17,r7
    83a0:	1000100e 	bge	r2,zero,83e4 <__sfvwrite_small_dev+0x7c>
    83a4:	8080000b 	ldhu	r2,0(r16)
    83a8:	10801014 	ori	r2,r2,64
    83ac:	8080000d 	sth	r2,0(r16)
    83b0:	00bfffc4 	movi	r2,-1
    83b4:	00000d06 	br	83ec <__sfvwrite_small_dev+0x84>
    83b8:	88810050 	cmplti	r2,r17,1025
    83bc:	880f883a 	mov	r7,r17
    83c0:	1000011e 	bne	r2,zero,83c8 <__sfvwrite_small_dev+0x60>
    83c4:	01c10004 	movi	r7,1024
    83c8:	8140008f 	ldh	r5,2(r16)
    83cc:	900d883a 	mov	r6,r18
    83d0:	9809883a 	mov	r4,r19
    83d4:	00084100 	call	8410 <_write_r>
    83d8:	00bff20e 	bge	zero,r2,83a4 <__sfvwrite_small_dev+0x3c>
    83dc:	88a3c83a 	sub	r17,r17,r2
    83e0:	90a5883a 	add	r18,r18,r2
    83e4:	047ff416 	blt	zero,r17,83b8 <__sfvwrite_small_dev+0x50>
    83e8:	0005883a 	mov	r2,zero
    83ec:	dfc00417 	ldw	ra,16(sp)
    83f0:	dcc00317 	ldw	r19,12(sp)
    83f4:	dc800217 	ldw	r18,8(sp)
    83f8:	dc400117 	ldw	r17,4(sp)
    83fc:	dc000017 	ldw	r16,0(sp)
    8400:	dec00504 	addi	sp,sp,20
    8404:	f800283a 	ret
    8408:	00bfffc4 	movi	r2,-1
    840c:	f800283a 	ret

00008410 <_write_r>:
    8410:	defffe04 	addi	sp,sp,-8
    8414:	dc000015 	stw	r16,0(sp)
    8418:	00800074 	movhi	r2,1
    841c:	2021883a 	mov	r16,r4
    8420:	2809883a 	mov	r4,r5
    8424:	300b883a 	mov	r5,r6
    8428:	380d883a 	mov	r6,r7
    842c:	dfc00115 	stw	ra,4(sp)
    8430:	1028dc15 	stw	zero,-23696(r2)
    8434:	00086040 	call	8604 <write>
    8438:	10ffffd8 	cmpnei	r3,r2,-1
    843c:	1800041e 	bne	r3,zero,8450 <_write_r+0x40>
    8440:	00c00074 	movhi	r3,1
    8444:	18e8dc17 	ldw	r3,-23696(r3)
    8448:	18000126 	beq	r3,zero,8450 <_write_r+0x40>
    844c:	80c00015 	stw	r3,0(r16)
    8450:	dfc00117 	ldw	ra,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00204 	addi	sp,sp,8
    845c:	f800283a 	ret

00008460 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8460:	defffc04 	addi	sp,sp,-16
    8464:	df000315 	stw	fp,12(sp)
    8468:	df000304 	addi	fp,sp,12
    846c:	e13fff15 	stw	r4,-4(fp)
    8470:	e17ffe15 	stw	r5,-8(fp)
    8474:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    8478:	e0fffe17 	ldw	r3,-8(fp)
    847c:	e0bfff17 	ldw	r2,-4(fp)
    8480:	18800c26 	beq	r3,r2,84b4 <alt_load_section+0x54>
  {
    while( to != end )
    8484:	00000806 	br	84a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8488:	e0ffff17 	ldw	r3,-4(fp)
    848c:	18800104 	addi	r2,r3,4
    8490:	e0bfff15 	stw	r2,-4(fp)
    8494:	e0bffe17 	ldw	r2,-8(fp)
    8498:	11000104 	addi	r4,r2,4
    849c:	e13ffe15 	stw	r4,-8(fp)
    84a0:	18c00017 	ldw	r3,0(r3)
    84a4:	10c00015 	stw	r3,0(r2)
    while( to != end )
    84a8:	e0fffe17 	ldw	r3,-8(fp)
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	18bff51e 	bne	r3,r2,8488 <alt_load_section+0x28>
    }
  }
}
    84b4:	0001883a 	nop
    84b8:	e037883a 	mov	sp,fp
    84bc:	df000017 	ldw	fp,0(sp)
    84c0:	dec00104 	addi	sp,sp,4
    84c4:	f800283a 	ret

000084c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    84c8:	defffe04 	addi	sp,sp,-8
    84cc:	dfc00115 	stw	ra,4(sp)
    84d0:	df000015 	stw	fp,0(sp)
    84d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    84d8:	01800074 	movhi	r6,1
    84dc:	31a82304 	addi	r6,r6,-24436
    84e0:	01400074 	movhi	r5,1
    84e4:	29676a04 	addi	r5,r5,-25176
    84e8:	01000074 	movhi	r4,1
    84ec:	21282304 	addi	r4,r4,-24436
    84f0:	00084600 	call	8460 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    84f4:	01800074 	movhi	r6,1
    84f8:	31a08e04 	addi	r6,r6,-32200
    84fc:	01400074 	movhi	r5,1
    8500:	29600804 	addi	r5,r5,-32736
    8504:	01000074 	movhi	r4,1
    8508:	21200804 	addi	r4,r4,-32736
    850c:	00084600 	call	8460 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8510:	01800074 	movhi	r6,1
    8514:	31a76a04 	addi	r6,r6,-25176
    8518:	01400074 	movhi	r5,1
    851c:	29675904 	addi	r5,r5,-25244
    8520:	01000074 	movhi	r4,1
    8524:	21275904 	addi	r4,r4,-25244
    8528:	00084600 	call	8460 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    852c:	0008c200 	call	8c20 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8530:	0008e440 	call	8e44 <alt_icache_flush_all>
}
    8534:	0001883a 	nop
    8538:	e037883a 	mov	sp,fp
    853c:	dfc00117 	ldw	ra,4(sp)
    8540:	df000017 	ldw	fp,0(sp)
    8544:	dec00204 	addi	sp,sp,8
    8548:	f800283a 	ret

0000854c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    854c:	defffd04 	addi	sp,sp,-12
    8550:	dfc00215 	stw	ra,8(sp)
    8554:	df000115 	stw	fp,4(sp)
    8558:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    855c:	0009883a 	mov	r4,zero
    8560:	000873c0 	call	873c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8564:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8568:	00087780 	call	8778 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    856c:	01800074 	movhi	r6,1
    8570:	31a75f04 	addi	r6,r6,-25220
    8574:	01400074 	movhi	r5,1
    8578:	29675f04 	addi	r5,r5,-25220
    857c:	01000074 	movhi	r4,1
    8580:	21275f04 	addi	r4,r4,-25220
    8584:	00091e40 	call	91e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8588:	0008d7c0 	call	8d7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    858c:	01000074 	movhi	r4,1
    8590:	21237804 	addi	r4,r4,-29216
    8594:	0009a900 	call	9a90 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8598:	d0a0c517 	ldw	r2,-31980(gp)
    859c:	d0e0c617 	ldw	r3,-31976(gp)
    85a0:	d120c717 	ldw	r4,-31972(gp)
    85a4:	200d883a 	mov	r6,r4
    85a8:	180b883a 	mov	r5,r3
    85ac:	1009883a 	mov	r4,r2
    85b0:	00082840 	call	8284 <main>
    85b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    85b8:	01000044 	movi	r4,1
    85bc:	0008b440 	call	8b44 <close>
  exit (result);
    85c0:	e13fff17 	ldw	r4,-4(fp)
    85c4:	0009aa40 	call	9aa4 <exit>

000085c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    85c8:	defffe04 	addi	sp,sp,-8
    85cc:	dfc00115 	stw	ra,4(sp)
    85d0:	df000015 	stw	fp,0(sp)
    85d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    85d8:	d0a00717 	ldw	r2,-32740(gp)
    85dc:	10000326 	beq	r2,zero,85ec <alt_get_errno+0x24>
    85e0:	d0a00717 	ldw	r2,-32740(gp)
    85e4:	103ee83a 	callr	r2
    85e8:	00000106 	br	85f0 <alt_get_errno+0x28>
    85ec:	d0a0c404 	addi	r2,gp,-31984
}
    85f0:	e037883a 	mov	sp,fp
    85f4:	dfc00117 	ldw	ra,4(sp)
    85f8:	df000017 	ldw	fp,0(sp)
    85fc:	dec00204 	addi	sp,sp,8
    8600:	f800283a 	ret

00008604 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8604:	defff904 	addi	sp,sp,-28
    8608:	dfc00615 	stw	ra,24(sp)
    860c:	df000515 	stw	fp,20(sp)
    8610:	df000504 	addi	fp,sp,20
    8614:	e13ffd15 	stw	r4,-12(fp)
    8618:	e17ffc15 	stw	r5,-16(fp)
    861c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8620:	e0bffd17 	ldw	r2,-12(fp)
    8624:	10000916 	blt	r2,zero,864c <write+0x48>
    8628:	e0fffd17 	ldw	r3,-12(fp)
    862c:	1805883a 	mov	r2,r3
    8630:	1085883a 	add	r2,r2,r2
    8634:	10c5883a 	add	r2,r2,r3
    8638:	100490ba 	slli	r2,r2,2
    863c:	00c00074 	movhi	r3,1
    8640:	18e7b804 	addi	r3,r3,-24864
    8644:	10c5883a 	add	r2,r2,r3
    8648:	00000106 	br	8650 <write+0x4c>
    864c:	0005883a 	mov	r2,zero
    8650:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    8654:	e0bfff17 	ldw	r2,-4(fp)
    8658:	10002126 	beq	r2,zero,86e0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    865c:	e0bfff17 	ldw	r2,-4(fp)
    8660:	10800217 	ldw	r2,8(r2)
    8664:	108000cc 	andi	r2,r2,3
    8668:	10001826 	beq	r2,zero,86cc <write+0xc8>
    866c:	e0bfff17 	ldw	r2,-4(fp)
    8670:	10800017 	ldw	r2,0(r2)
    8674:	10800617 	ldw	r2,24(r2)
    8678:	10001426 	beq	r2,zero,86cc <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    867c:	e0bfff17 	ldw	r2,-4(fp)
    8680:	10800017 	ldw	r2,0(r2)
    8684:	10800617 	ldw	r2,24(r2)
    8688:	e0fffb17 	ldw	r3,-20(fp)
    868c:	180d883a 	mov	r6,r3
    8690:	e17ffc17 	ldw	r5,-16(fp)
    8694:	e13fff17 	ldw	r4,-4(fp)
    8698:	103ee83a 	callr	r2
    869c:	e0bffe15 	stw	r2,-8(fp)
    86a0:	e0bffe17 	ldw	r2,-8(fp)
    86a4:	1000070e 	bge	r2,zero,86c4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    86a8:	00085c80 	call	85c8 <alt_get_errno>
    86ac:	1007883a 	mov	r3,r2
    86b0:	e0bffe17 	ldw	r2,-8(fp)
    86b4:	0085c83a 	sub	r2,zero,r2
    86b8:	18800015 	stw	r2,0(r3)
        return -1;
    86bc:	00bfffc4 	movi	r2,-1
    86c0:	00000c06 	br	86f4 <write+0xf0>
      }
      return rval;
    86c4:	e0bffe17 	ldw	r2,-8(fp)
    86c8:	00000a06 	br	86f4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    86cc:	00085c80 	call	85c8 <alt_get_errno>
    86d0:	1007883a 	mov	r3,r2
    86d4:	00800344 	movi	r2,13
    86d8:	18800015 	stw	r2,0(r3)
    86dc:	00000406 	br	86f0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    86e0:	00085c80 	call	85c8 <alt_get_errno>
    86e4:	1007883a 	mov	r3,r2
    86e8:	00801444 	movi	r2,81
    86ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    86f0:	00bfffc4 	movi	r2,-1
}
    86f4:	e037883a 	mov	sp,fp
    86f8:	dfc00117 	ldw	ra,4(sp)
    86fc:	df000017 	ldw	fp,0(sp)
    8700:	dec00204 	addi	sp,sp,8
    8704:	f800283a 	ret

00008708 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8708:	defffd04 	addi	sp,sp,-12
    870c:	dfc00215 	stw	ra,8(sp)
    8710:	df000115 	stw	fp,4(sp)
    8714:	df000104 	addi	fp,sp,4
    8718:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    871c:	d1600404 	addi	r5,gp,-32752
    8720:	e13fff17 	ldw	r4,-4(fp)
    8724:	0008cd40 	call	8cd4 <alt_dev_llist_insert>
}
    8728:	e037883a 	mov	sp,fp
    872c:	dfc00117 	ldw	ra,4(sp)
    8730:	df000017 	ldw	fp,0(sp)
    8734:	dec00204 	addi	sp,sp,8
    8738:	f800283a 	ret

0000873c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    873c:	defffd04 	addi	sp,sp,-12
    8740:	dfc00215 	stw	ra,8(sp)
    8744:	df000115 	stw	fp,4(sp)
    8748:	df000104 	addi	fp,sp,4
    874c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8750:	00096f40 	call	96f4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8754:	00800044 	movi	r2,1
    8758:	1001703a 	wrctl	status,r2
}
    875c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    8760:	0001883a 	nop
    8764:	e037883a 	mov	sp,fp
    8768:	dfc00117 	ldw	ra,4(sp)
    876c:	df000017 	ldw	fp,0(sp)
    8770:	dec00204 	addi	sp,sp,8
    8774:	f800283a 	ret

00008778 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8778:	defffe04 	addi	sp,sp,-8
    877c:	dfc00115 	stw	ra,4(sp)
    8780:	df000015 	stw	fp,0(sp)
    8784:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    8788:	01c0fa04 	movi	r7,1000
    878c:	01800044 	movi	r6,1
    8790:	000b883a 	mov	r5,zero
    8794:	01000074 	movhi	r4,1
    8798:	21040004 	addi	r4,r4,4096
    879c:	0008a840 	call	8a84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    87a0:	01000074 	movhi	r4,1
    87a4:	2127a304 	addi	r4,r4,-24948
    87a8:	00087080 	call	8708 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    87ac:	0001883a 	nop
}
    87b0:	0001883a 	nop
    87b4:	e037883a 	mov	sp,fp
    87b8:	dfc00117 	ldw	ra,4(sp)
    87bc:	df000017 	ldw	fp,0(sp)
    87c0:	dec00204 	addi	sp,sp,8
    87c4:	f800283a 	ret

000087c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    87c8:	defffa04 	addi	sp,sp,-24
    87cc:	dfc00515 	stw	ra,20(sp)
    87d0:	df000415 	stw	fp,16(sp)
    87d4:	df000404 	addi	fp,sp,16
    87d8:	e13ffe15 	stw	r4,-8(fp)
    87dc:	e17ffd15 	stw	r5,-12(fp)
    87e0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87e4:	e0bffe17 	ldw	r2,-8(fp)
    87e8:	10800017 	ldw	r2,0(r2)
    87ec:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    87f0:	e0bfff17 	ldw	r2,-4(fp)
    87f4:	10c00a04 	addi	r3,r2,40
    87f8:	e0bffe17 	ldw	r2,-8(fp)
    87fc:	10800217 	ldw	r2,8(r2)
    8800:	100f883a 	mov	r7,r2
    8804:	e1bffc17 	ldw	r6,-16(fp)
    8808:	e17ffd17 	ldw	r5,-12(fp)
    880c:	1809883a 	mov	r4,r3
    8810:	00088880 	call	8888 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8814:	e037883a 	mov	sp,fp
    8818:	dfc00117 	ldw	ra,4(sp)
    881c:	df000017 	ldw	fp,0(sp)
    8820:	dec00204 	addi	sp,sp,8
    8824:	f800283a 	ret

00008828 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8828:	defffa04 	addi	sp,sp,-24
    882c:	dfc00515 	stw	ra,20(sp)
    8830:	df000415 	stw	fp,16(sp)
    8834:	df000404 	addi	fp,sp,16
    8838:	e13ffe15 	stw	r4,-8(fp)
    883c:	e17ffd15 	stw	r5,-12(fp)
    8840:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8844:	e0bffe17 	ldw	r2,-8(fp)
    8848:	10800017 	ldw	r2,0(r2)
    884c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8850:	e0bfff17 	ldw	r2,-4(fp)
    8854:	10c00a04 	addi	r3,r2,40
    8858:	e0bffe17 	ldw	r2,-8(fp)
    885c:	10800217 	ldw	r2,8(r2)
    8860:	100f883a 	mov	r7,r2
    8864:	e1bffc17 	ldw	r6,-16(fp)
    8868:	e17ffd17 	ldw	r5,-12(fp)
    886c:	1809883a 	mov	r4,r3
    8870:	00089740 	call	8974 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8874:	e037883a 	mov	sp,fp
    8878:	dfc00117 	ldw	ra,4(sp)
    887c:	df000017 	ldw	fp,0(sp)
    8880:	dec00204 	addi	sp,sp,8
    8884:	f800283a 	ret

00008888 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8888:	defff704 	addi	sp,sp,-36
    888c:	df000815 	stw	fp,32(sp)
    8890:	df000804 	addi	fp,sp,32
    8894:	e13ffb15 	stw	r4,-20(fp)
    8898:	e17ffa15 	stw	r5,-24(fp)
    889c:	e1bff915 	stw	r6,-28(fp)
    88a0:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    88a4:	e0bffb17 	ldw	r2,-20(fp)
    88a8:	10800017 	ldw	r2,0(r2)
    88ac:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    88b0:	e0bffa17 	ldw	r2,-24(fp)
    88b4:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    88b8:	e0bff917 	ldw	r2,-28(fp)
    88bc:	e0fffa17 	ldw	r3,-24(fp)
    88c0:	1885883a 	add	r2,r3,r2
    88c4:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    88c8:	00001206 	br	8914 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    88cc:	e0bffe17 	ldw	r2,-8(fp)
    88d0:	10800037 	ldwio	r2,0(r2)
    88d4:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    88d8:	e0bffc17 	ldw	r2,-16(fp)
    88dc:	10a0000c 	andi	r2,r2,32768
    88e0:	10000626 	beq	r2,zero,88fc <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    88e4:	e0bfff17 	ldw	r2,-4(fp)
    88e8:	10c00044 	addi	r3,r2,1
    88ec:	e0ffff15 	stw	r3,-4(fp)
    88f0:	e0fffc17 	ldw	r3,-16(fp)
    88f4:	10c00005 	stb	r3,0(r2)
    88f8:	00000606 	br	8914 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    88fc:	e0ffff17 	ldw	r3,-4(fp)
    8900:	e0bffa17 	ldw	r2,-24(fp)
    8904:	1880071e 	bne	r3,r2,8924 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    8908:	e0bff817 	ldw	r2,-32(fp)
    890c:	1090000c 	andi	r2,r2,16384
    8910:	1000061e 	bne	r2,zero,892c <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    8914:	e0ffff17 	ldw	r3,-4(fp)
    8918:	e0bffd17 	ldw	r2,-12(fp)
    891c:	18bfeb36 	bltu	r3,r2,88cc <altera_avalon_jtag_uart_read+0x44>
    8920:	00000306 	br	8930 <altera_avalon_jtag_uart_read+0xa8>
      break;
    8924:	0001883a 	nop
    8928:	00000106 	br	8930 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    892c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8930:	e0ffff17 	ldw	r3,-4(fp)
    8934:	e0bffa17 	ldw	r2,-24(fp)
    8938:	18800426 	beq	r3,r2,894c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    893c:	e0ffff17 	ldw	r3,-4(fp)
    8940:	e0bffa17 	ldw	r2,-24(fp)
    8944:	1885c83a 	sub	r2,r3,r2
    8948:	00000606 	br	8964 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    894c:	e0bff817 	ldw	r2,-32(fp)
    8950:	1090000c 	andi	r2,r2,16384
    8954:	10000226 	beq	r2,zero,8960 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8958:	00bffd44 	movi	r2,-11
    895c:	00000106 	br	8964 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    8960:	00bffec4 	movi	r2,-5
}
    8964:	e037883a 	mov	sp,fp
    8968:	df000017 	ldw	fp,0(sp)
    896c:	dec00104 	addi	sp,sp,4
    8970:	f800283a 	ret

00008974 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8974:	defff904 	addi	sp,sp,-28
    8978:	df000615 	stw	fp,24(sp)
    897c:	df000604 	addi	fp,sp,24
    8980:	e13ffd15 	stw	r4,-12(fp)
    8984:	e17ffc15 	stw	r5,-16(fp)
    8988:	e1bffb15 	stw	r6,-20(fp)
    898c:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    8990:	e0bffd17 	ldw	r2,-12(fp)
    8994:	10800017 	ldw	r2,0(r2)
    8998:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    899c:	e0bffb17 	ldw	r2,-20(fp)
    89a0:	e0fffc17 	ldw	r3,-16(fp)
    89a4:	1885883a 	add	r2,r3,r2
    89a8:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    89ac:	00000e06 	br	89e8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    89b0:	e0bfff17 	ldw	r2,-4(fp)
    89b4:	10800104 	addi	r2,r2,4
    89b8:	10800037 	ldwio	r2,0(r2)
    89bc:	10bfffec 	andhi	r2,r2,65535
    89c0:	10000926 	beq	r2,zero,89e8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    89c4:	e0ffff17 	ldw	r3,-4(fp)
    89c8:	e0bffc17 	ldw	r2,-16(fp)
    89cc:	11000044 	addi	r4,r2,1
    89d0:	e13ffc15 	stw	r4,-16(fp)
    89d4:	10800003 	ldbu	r2,0(r2)
    89d8:	10803fcc 	andi	r2,r2,255
    89dc:	1080201c 	xori	r2,r2,128
    89e0:	10bfe004 	addi	r2,r2,-128
    89e4:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    89e8:	e0fffc17 	ldw	r3,-16(fp)
    89ec:	e0bffe17 	ldw	r2,-8(fp)
    89f0:	18bfef36 	bltu	r3,r2,89b0 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    89f4:	e0bffb17 	ldw	r2,-20(fp)
}
    89f8:	e037883a 	mov	sp,fp
    89fc:	df000017 	ldw	fp,0(sp)
    8a00:	dec00104 	addi	sp,sp,4
    8a04:	f800283a 	ret

00008a08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    8a08:	defffa04 	addi	sp,sp,-24
    8a0c:	dfc00515 	stw	ra,20(sp)
    8a10:	df000415 	stw	fp,16(sp)
    8a14:	df000404 	addi	fp,sp,16
    8a18:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    8a1c:	0007883a 	mov	r3,zero
    8a20:	e0bffc17 	ldw	r2,-16(fp)
    8a24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    8a28:	e0bffc17 	ldw	r2,-16(fp)
    8a2c:	10800104 	addi	r2,r2,4
    8a30:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    8a34:	0005303a 	rdctl	r2,status
    8a38:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a3c:	e0fffd17 	ldw	r3,-12(fp)
    8a40:	00bfff84 	movi	r2,-2
    8a44:	1884703a 	and	r2,r3,r2
    8a48:	1001703a 	wrctl	status,r2
  return context;
    8a4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    8a50:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    8a54:	00095ec0 	call	95ec <alt_tick>
    8a58:	e0bfff17 	ldw	r2,-4(fp)
    8a5c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    8a60:	e0bffe17 	ldw	r2,-8(fp)
    8a64:	1001703a 	wrctl	status,r2
}
    8a68:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    8a6c:	0001883a 	nop
    8a70:	e037883a 	mov	sp,fp
    8a74:	dfc00117 	ldw	ra,4(sp)
    8a78:	df000017 	ldw	fp,0(sp)
    8a7c:	dec00204 	addi	sp,sp,8
    8a80:	f800283a 	ret

00008a84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    8a84:	defff804 	addi	sp,sp,-32
    8a88:	dfc00715 	stw	ra,28(sp)
    8a8c:	df000615 	stw	fp,24(sp)
    8a90:	df000604 	addi	fp,sp,24
    8a94:	e13ffe15 	stw	r4,-8(fp)
    8a98:	e17ffd15 	stw	r5,-12(fp)
    8a9c:	e1bffc15 	stw	r6,-16(fp)
    8aa0:	e1fffb15 	stw	r7,-20(fp)
    8aa4:	e0bffb17 	ldw	r2,-20(fp)
    8aa8:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    8aac:	d0a0c917 	ldw	r2,-31964(gp)
    8ab0:	1000031e 	bne	r2,zero,8ac0 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    8ab4:	e0bfff17 	ldw	r2,-4(fp)
    8ab8:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    8abc:	00000106 	br	8ac4 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    8ac0:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    8ac4:	e0bffe17 	ldw	r2,-8(fp)
    8ac8:	10800104 	addi	r2,r2,4
    8acc:	00c001c4 	movi	r3,7
    8ad0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    8ad4:	d8000015 	stw	zero,0(sp)
    8ad8:	e1fffe17 	ldw	r7,-8(fp)
    8adc:	01800074 	movhi	r6,1
    8ae0:	31a28204 	addi	r6,r6,-30200
    8ae4:	e17ffc17 	ldw	r5,-16(fp)
    8ae8:	e13ffd17 	ldw	r4,-12(fp)
    8aec:	0008e780 	call	8e78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    8af0:	0001883a 	nop
    8af4:	e037883a 	mov	sp,fp
    8af8:	dfc00117 	ldw	ra,4(sp)
    8afc:	df000017 	ldw	fp,0(sp)
    8b00:	dec00204 	addi	sp,sp,8
    8b04:	f800283a 	ret

00008b08 <alt_get_errno>:
{
    8b08:	defffe04 	addi	sp,sp,-8
    8b0c:	dfc00115 	stw	ra,4(sp)
    8b10:	df000015 	stw	fp,0(sp)
    8b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8b18:	d0a00717 	ldw	r2,-32740(gp)
    8b1c:	10000326 	beq	r2,zero,8b2c <alt_get_errno+0x24>
    8b20:	d0a00717 	ldw	r2,-32740(gp)
    8b24:	103ee83a 	callr	r2
    8b28:	00000106 	br	8b30 <alt_get_errno+0x28>
    8b2c:	d0a0c404 	addi	r2,gp,-31984
}
    8b30:	e037883a 	mov	sp,fp
    8b34:	dfc00117 	ldw	ra,4(sp)
    8b38:	df000017 	ldw	fp,0(sp)
    8b3c:	dec00204 	addi	sp,sp,8
    8b40:	f800283a 	ret

00008b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8b44:	defffb04 	addi	sp,sp,-20
    8b48:	dfc00415 	stw	ra,16(sp)
    8b4c:	df000315 	stw	fp,12(sp)
    8b50:	df000304 	addi	fp,sp,12
    8b54:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8b58:	e0bffd17 	ldw	r2,-12(fp)
    8b5c:	10000916 	blt	r2,zero,8b84 <close+0x40>
    8b60:	e0fffd17 	ldw	r3,-12(fp)
    8b64:	1805883a 	mov	r2,r3
    8b68:	1085883a 	add	r2,r2,r2
    8b6c:	10c5883a 	add	r2,r2,r3
    8b70:	100490ba 	slli	r2,r2,2
    8b74:	00c00074 	movhi	r3,1
    8b78:	18e7b804 	addi	r3,r3,-24864
    8b7c:	10c5883a 	add	r2,r2,r3
    8b80:	00000106 	br	8b88 <close+0x44>
    8b84:	0005883a 	mov	r2,zero
    8b88:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    8b8c:	e0bfff17 	ldw	r2,-4(fp)
    8b90:	10001926 	beq	r2,zero,8bf8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8b94:	e0bfff17 	ldw	r2,-4(fp)
    8b98:	10800017 	ldw	r2,0(r2)
    8b9c:	10800417 	ldw	r2,16(r2)
    8ba0:	10000626 	beq	r2,zero,8bbc <close+0x78>
    8ba4:	e0bfff17 	ldw	r2,-4(fp)
    8ba8:	10800017 	ldw	r2,0(r2)
    8bac:	10800417 	ldw	r2,16(r2)
    8bb0:	e13fff17 	ldw	r4,-4(fp)
    8bb4:	103ee83a 	callr	r2
    8bb8:	00000106 	br	8bc0 <close+0x7c>
    8bbc:	0005883a 	mov	r2,zero
    8bc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8bc4:	e13ffd17 	ldw	r4,-12(fp)
    8bc8:	00094d80 	call	94d8 <alt_release_fd>
    if (rval < 0)
    8bcc:	e0bffe17 	ldw	r2,-8(fp)
    8bd0:	1000070e 	bge	r2,zero,8bf0 <close+0xac>
    {
      ALT_ERRNO = -rval;
    8bd4:	0008b080 	call	8b08 <alt_get_errno>
    8bd8:	1007883a 	mov	r3,r2
    8bdc:	e0bffe17 	ldw	r2,-8(fp)
    8be0:	0085c83a 	sub	r2,zero,r2
    8be4:	18800015 	stw	r2,0(r3)
      return -1;
    8be8:	00bfffc4 	movi	r2,-1
    8bec:	00000706 	br	8c0c <close+0xc8>
    }
    return 0;
    8bf0:	0005883a 	mov	r2,zero
    8bf4:	00000506 	br	8c0c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8bf8:	0008b080 	call	8b08 <alt_get_errno>
    8bfc:	1007883a 	mov	r3,r2
    8c00:	00801444 	movi	r2,81
    8c04:	18800015 	stw	r2,0(r3)
    return -1;
    8c08:	00bfffc4 	movi	r2,-1
  }
}
    8c0c:	e037883a 	mov	sp,fp
    8c10:	dfc00117 	ldw	ra,4(sp)
    8c14:	df000017 	ldw	fp,0(sp)
    8c18:	dec00204 	addi	sp,sp,8
    8c1c:	f800283a 	ret

00008c20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8c20:	defffe04 	addi	sp,sp,-8
    8c24:	df000115 	stw	fp,4(sp)
    8c28:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8c2c:	e03fff15 	stw	zero,-4(fp)
    8c30:	00000506 	br	8c48 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8c34:	e0bfff17 	ldw	r2,-4(fp)
    8c38:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8c3c:	e0bfff17 	ldw	r2,-4(fp)
    8c40:	10800804 	addi	r2,r2,32
    8c44:	e0bfff15 	stw	r2,-4(fp)
    8c48:	e0bfff17 	ldw	r2,-4(fp)
    8c4c:	10820030 	cmpltui	r2,r2,2048
    8c50:	103ff81e 	bne	r2,zero,8c34 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8c54:	0001883a 	nop
    8c58:	0001883a 	nop
    8c5c:	e037883a 	mov	sp,fp
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret

00008c6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8c6c:	defffc04 	addi	sp,sp,-16
    8c70:	df000315 	stw	fp,12(sp)
    8c74:	df000304 	addi	fp,sp,12
    8c78:	e13fff15 	stw	r4,-4(fp)
    8c7c:	e17ffe15 	stw	r5,-8(fp)
    8c80:	e1bffd15 	stw	r6,-12(fp)
  return len;
    8c84:	e0bffd17 	ldw	r2,-12(fp)
}
    8c88:	e037883a 	mov	sp,fp
    8c8c:	df000017 	ldw	fp,0(sp)
    8c90:	dec00104 	addi	sp,sp,4
    8c94:	f800283a 	ret

00008c98 <alt_get_errno>:
{
    8c98:	defffe04 	addi	sp,sp,-8
    8c9c:	dfc00115 	stw	ra,4(sp)
    8ca0:	df000015 	stw	fp,0(sp)
    8ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8ca8:	d0a00717 	ldw	r2,-32740(gp)
    8cac:	10000326 	beq	r2,zero,8cbc <alt_get_errno+0x24>
    8cb0:	d0a00717 	ldw	r2,-32740(gp)
    8cb4:	103ee83a 	callr	r2
    8cb8:	00000106 	br	8cc0 <alt_get_errno+0x28>
    8cbc:	d0a0c404 	addi	r2,gp,-31984
}
    8cc0:	e037883a 	mov	sp,fp
    8cc4:	dfc00117 	ldw	ra,4(sp)
    8cc8:	df000017 	ldw	fp,0(sp)
    8ccc:	dec00204 	addi	sp,sp,8
    8cd0:	f800283a 	ret

00008cd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8cd4:	defffa04 	addi	sp,sp,-24
    8cd8:	dfc00515 	stw	ra,20(sp)
    8cdc:	df000415 	stw	fp,16(sp)
    8ce0:	df000404 	addi	fp,sp,16
    8ce4:	e13ffd15 	stw	r4,-12(fp)
    8ce8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8cec:	e0bffd17 	ldw	r2,-12(fp)
    8cf0:	10000326 	beq	r2,zero,8d00 <alt_dev_llist_insert+0x2c>
    8cf4:	e0bffd17 	ldw	r2,-12(fp)
    8cf8:	10800217 	ldw	r2,8(r2)
    8cfc:	1000061e 	bne	r2,zero,8d18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    8d00:	0008c980 	call	8c98 <alt_get_errno>
    8d04:	1007883a 	mov	r3,r2
    8d08:	00800584 	movi	r2,22
    8d0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8d10:	00bffa84 	movi	r2,-22
    8d14:	00001406 	br	8d68 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8d18:	e0bffd17 	ldw	r2,-12(fp)
    8d1c:	e0fffc17 	ldw	r3,-16(fp)
    8d20:	e0ffff15 	stw	r3,-4(fp)
    8d24:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8d28:	e0bffe17 	ldw	r2,-8(fp)
    8d2c:	e0ffff17 	ldw	r3,-4(fp)
    8d30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8d34:	e0bfff17 	ldw	r2,-4(fp)
    8d38:	10c00017 	ldw	r3,0(r2)
    8d3c:	e0bffe17 	ldw	r2,-8(fp)
    8d40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8d44:	e0bfff17 	ldw	r2,-4(fp)
    8d48:	10800017 	ldw	r2,0(r2)
    8d4c:	e0fffe17 	ldw	r3,-8(fp)
    8d50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8d54:	e0bfff17 	ldw	r2,-4(fp)
    8d58:	e0fffe17 	ldw	r3,-8(fp)
    8d5c:	10c00015 	stw	r3,0(r2)
}
    8d60:	0001883a 	nop

  return 0;  
    8d64:	0005883a 	mov	r2,zero
}
    8d68:	e037883a 	mov	sp,fp
    8d6c:	dfc00117 	ldw	ra,4(sp)
    8d70:	df000017 	ldw	fp,0(sp)
    8d74:	dec00204 	addi	sp,sp,8
    8d78:	f800283a 	ret

00008d7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8d7c:	defffd04 	addi	sp,sp,-12
    8d80:	dfc00215 	stw	ra,8(sp)
    8d84:	df000115 	stw	fp,4(sp)
    8d88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8d8c:	00800074 	movhi	r2,1
    8d90:	10a75804 	addi	r2,r2,-25248
    8d94:	e0bfff15 	stw	r2,-4(fp)
    8d98:	00000606 	br	8db4 <_do_ctors+0x38>
        (*ctor) (); 
    8d9c:	e0bfff17 	ldw	r2,-4(fp)
    8da0:	10800017 	ldw	r2,0(r2)
    8da4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8da8:	e0bfff17 	ldw	r2,-4(fp)
    8dac:	10bfff04 	addi	r2,r2,-4
    8db0:	e0bfff15 	stw	r2,-4(fp)
    8db4:	e0ffff17 	ldw	r3,-4(fp)
    8db8:	00800074 	movhi	r2,1
    8dbc:	10a75904 	addi	r2,r2,-25244
    8dc0:	18bff62e 	bgeu	r3,r2,8d9c <_do_ctors+0x20>
}
    8dc4:	0001883a 	nop
    8dc8:	0001883a 	nop
    8dcc:	e037883a 	mov	sp,fp
    8dd0:	dfc00117 	ldw	ra,4(sp)
    8dd4:	df000017 	ldw	fp,0(sp)
    8dd8:	dec00204 	addi	sp,sp,8
    8ddc:	f800283a 	ret

00008de0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8de0:	defffd04 	addi	sp,sp,-12
    8de4:	dfc00215 	stw	ra,8(sp)
    8de8:	df000115 	stw	fp,4(sp)
    8dec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8df0:	00800074 	movhi	r2,1
    8df4:	10a75804 	addi	r2,r2,-25248
    8df8:	e0bfff15 	stw	r2,-4(fp)
    8dfc:	00000606 	br	8e18 <_do_dtors+0x38>
        (*dtor) (); 
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	10800017 	ldw	r2,0(r2)
    8e08:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8e0c:	e0bfff17 	ldw	r2,-4(fp)
    8e10:	10bfff04 	addi	r2,r2,-4
    8e14:	e0bfff15 	stw	r2,-4(fp)
    8e18:	e0ffff17 	ldw	r3,-4(fp)
    8e1c:	00800074 	movhi	r2,1
    8e20:	10a75904 	addi	r2,r2,-25244
    8e24:	18bff62e 	bgeu	r3,r2,8e00 <_do_dtors+0x20>
}
    8e28:	0001883a 	nop
    8e2c:	0001883a 	nop
    8e30:	e037883a 	mov	sp,fp
    8e34:	dfc00117 	ldw	ra,4(sp)
    8e38:	df000017 	ldw	fp,0(sp)
    8e3c:	dec00204 	addi	sp,sp,8
    8e40:	f800283a 	ret

00008e44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8e44:	defffe04 	addi	sp,sp,-8
    8e48:	dfc00115 	stw	ra,4(sp)
    8e4c:	df000015 	stw	fp,0(sp)
    8e50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8e54:	01420004 	movi	r5,2048
    8e58:	0009883a 	mov	r4,zero
    8e5c:	00099680 	call	9968 <alt_icache_flush>
#endif
}
    8e60:	0001883a 	nop
    8e64:	e037883a 	mov	sp,fp
    8e68:	dfc00117 	ldw	ra,4(sp)
    8e6c:	df000017 	ldw	fp,0(sp)
    8e70:	dec00204 	addi	sp,sp,8
    8e74:	f800283a 	ret

00008e78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8e78:	defff904 	addi	sp,sp,-28
    8e7c:	dfc00615 	stw	ra,24(sp)
    8e80:	df000515 	stw	fp,20(sp)
    8e84:	df000504 	addi	fp,sp,20
    8e88:	e13fff15 	stw	r4,-4(fp)
    8e8c:	e17ffe15 	stw	r5,-8(fp)
    8e90:	e1bffd15 	stw	r6,-12(fp)
    8e94:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8e98:	e0800217 	ldw	r2,8(fp)
    8e9c:	d8800015 	stw	r2,0(sp)
    8ea0:	e1fffc17 	ldw	r7,-16(fp)
    8ea4:	e1bffd17 	ldw	r6,-12(fp)
    8ea8:	e17ffe17 	ldw	r5,-8(fp)
    8eac:	e13fff17 	ldw	r4,-4(fp)
    8eb0:	00090280 	call	9028 <alt_iic_isr_register>
}  
    8eb4:	e037883a 	mov	sp,fp
    8eb8:	dfc00117 	ldw	ra,4(sp)
    8ebc:	df000017 	ldw	fp,0(sp)
    8ec0:	dec00204 	addi	sp,sp,8
    8ec4:	f800283a 	ret

00008ec8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8ec8:	defff904 	addi	sp,sp,-28
    8ecc:	df000615 	stw	fp,24(sp)
    8ed0:	df000604 	addi	fp,sp,24
    8ed4:	e13ffb15 	stw	r4,-20(fp)
    8ed8:	e17ffa15 	stw	r5,-24(fp)
    8edc:	e0bffa17 	ldw	r2,-24(fp)
    8ee0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    8ee4:	0005303a 	rdctl	r2,status
    8ee8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8eec:	e0fffe17 	ldw	r3,-8(fp)
    8ef0:	00bfff84 	movi	r2,-2
    8ef4:	1884703a 	and	r2,r3,r2
    8ef8:	1001703a 	wrctl	status,r2
  return context;
    8efc:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8f00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8f04:	00c00044 	movi	r3,1
    8f08:	e0bfff17 	ldw	r2,-4(fp)
    8f0c:	1884983a 	sll	r2,r3,r2
    8f10:	1007883a 	mov	r3,r2
    8f14:	d0a0c817 	ldw	r2,-31968(gp)
    8f18:	1884b03a 	or	r2,r3,r2
    8f1c:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8f20:	d0a0c817 	ldw	r2,-31968(gp)
    8f24:	100170fa 	wrctl	ienable,r2
    8f28:	e0bffd17 	ldw	r2,-12(fp)
    8f2c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8f30:	e0bffc17 	ldw	r2,-16(fp)
    8f34:	1001703a 	wrctl	status,r2
}
    8f38:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    8f3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8f40:	e037883a 	mov	sp,fp
    8f44:	df000017 	ldw	fp,0(sp)
    8f48:	dec00104 	addi	sp,sp,4
    8f4c:	f800283a 	ret

00008f50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8f50:	defff904 	addi	sp,sp,-28
    8f54:	df000615 	stw	fp,24(sp)
    8f58:	df000604 	addi	fp,sp,24
    8f5c:	e13ffb15 	stw	r4,-20(fp)
    8f60:	e17ffa15 	stw	r5,-24(fp)
    8f64:	e0bffa17 	ldw	r2,-24(fp)
    8f68:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    8f6c:	0005303a 	rdctl	r2,status
    8f70:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f74:	e0fffe17 	ldw	r3,-8(fp)
    8f78:	00bfff84 	movi	r2,-2
    8f7c:	1884703a 	and	r2,r3,r2
    8f80:	1001703a 	wrctl	status,r2
  return context;
    8f84:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    8f88:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    8f8c:	00c00044 	movi	r3,1
    8f90:	e0bfff17 	ldw	r2,-4(fp)
    8f94:	1884983a 	sll	r2,r3,r2
    8f98:	0084303a 	nor	r2,zero,r2
    8f9c:	1007883a 	mov	r3,r2
    8fa0:	d0a0c817 	ldw	r2,-31968(gp)
    8fa4:	1884703a 	and	r2,r3,r2
    8fa8:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8fac:	d0a0c817 	ldw	r2,-31968(gp)
    8fb0:	100170fa 	wrctl	ienable,r2
    8fb4:	e0bffd17 	ldw	r2,-12(fp)
    8fb8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8fbc:	e0bffc17 	ldw	r2,-16(fp)
    8fc0:	1001703a 	wrctl	status,r2
}
    8fc4:	0001883a 	nop
  return 0;
    8fc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8fcc:	e037883a 	mov	sp,fp
    8fd0:	df000017 	ldw	fp,0(sp)
    8fd4:	dec00104 	addi	sp,sp,4
    8fd8:	f800283a 	ret

00008fdc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8fdc:	defffc04 	addi	sp,sp,-16
    8fe0:	df000315 	stw	fp,12(sp)
    8fe4:	df000304 	addi	fp,sp,12
    8fe8:	e13ffe15 	stw	r4,-8(fp)
    8fec:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8ff0:	000530fa 	rdctl	r2,ienable
    8ff4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8ff8:	00c00044 	movi	r3,1
    8ffc:	e0bffd17 	ldw	r2,-12(fp)
    9000:	1884983a 	sll	r2,r3,r2
    9004:	1007883a 	mov	r3,r2
    9008:	e0bfff17 	ldw	r2,-4(fp)
    900c:	1884703a 	and	r2,r3,r2
    9010:	1004c03a 	cmpne	r2,r2,zero
    9014:	10803fcc 	andi	r2,r2,255
}
    9018:	e037883a 	mov	sp,fp
    901c:	df000017 	ldw	fp,0(sp)
    9020:	dec00104 	addi	sp,sp,4
    9024:	f800283a 	ret

00009028 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9028:	defff504 	addi	sp,sp,-44
    902c:	dfc00a15 	stw	ra,40(sp)
    9030:	df000915 	stw	fp,36(sp)
    9034:	df000904 	addi	fp,sp,36
    9038:	e13ffa15 	stw	r4,-24(fp)
    903c:	e17ff915 	stw	r5,-28(fp)
    9040:	e1bff815 	stw	r6,-32(fp)
    9044:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    9048:	00bffa84 	movi	r2,-22
    904c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9050:	e0bff917 	ldw	r2,-28(fp)
    9054:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9058:	e0bffe17 	ldw	r2,-8(fp)
    905c:	10800808 	cmpgei	r2,r2,32
    9060:	1000251e 	bne	r2,zero,90f8 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    9064:	0005303a 	rdctl	r2,status
    9068:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    906c:	e0fffc17 	ldw	r3,-16(fp)
    9070:	00bfff84 	movi	r2,-2
    9074:	1884703a 	and	r2,r3,r2
    9078:	1001703a 	wrctl	status,r2
  return context;
    907c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9080:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    9084:	e0bffe17 	ldw	r2,-8(fp)
    9088:	100890fa 	slli	r4,r2,3
    908c:	e0fff817 	ldw	r3,-32(fp)
    9090:	00800074 	movhi	r2,1
    9094:	2085883a 	add	r2,r4,r2
    9098:	10e8e415 	stw	r3,-23664(r2)
    alt_irq[id].context = isr_context;
    909c:	e0bffe17 	ldw	r2,-8(fp)
    90a0:	100890fa 	slli	r4,r2,3
    90a4:	e0fff717 	ldw	r3,-36(fp)
    90a8:	00800074 	movhi	r2,1
    90ac:	2085883a 	add	r2,r4,r2
    90b0:	10e8e515 	stw	r3,-23660(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    90b4:	e0bff817 	ldw	r2,-32(fp)
    90b8:	10000526 	beq	r2,zero,90d0 <alt_iic_isr_register+0xa8>
    90bc:	e0bffe17 	ldw	r2,-8(fp)
    90c0:	100b883a 	mov	r5,r2
    90c4:	e13ffa17 	ldw	r4,-24(fp)
    90c8:	0008ec80 	call	8ec8 <alt_ic_irq_enable>
    90cc:	00000406 	br	90e0 <alt_iic_isr_register+0xb8>
    90d0:	e0bffe17 	ldw	r2,-8(fp)
    90d4:	100b883a 	mov	r5,r2
    90d8:	e13ffa17 	ldw	r4,-24(fp)
    90dc:	0008f500 	call	8f50 <alt_ic_irq_disable>
    90e0:	e0bfff15 	stw	r2,-4(fp)
    90e4:	e0bffd17 	ldw	r2,-12(fp)
    90e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    90ec:	e0bffb17 	ldw	r2,-20(fp)
    90f0:	1001703a 	wrctl	status,r2
}
    90f4:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    90f8:	e0bfff17 	ldw	r2,-4(fp)
}
    90fc:	e037883a 	mov	sp,fp
    9100:	dfc00117 	ldw	ra,4(sp)
    9104:	df000017 	ldw	fp,0(sp)
    9108:	dec00204 	addi	sp,sp,8
    910c:	f800283a 	ret

00009110 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9110:	defff904 	addi	sp,sp,-28
    9114:	dfc00615 	stw	ra,24(sp)
    9118:	df000515 	stw	fp,20(sp)
    911c:	df000504 	addi	fp,sp,20
    9120:	e13ffe15 	stw	r4,-8(fp)
    9124:	e17ffd15 	stw	r5,-12(fp)
    9128:	e1bffc15 	stw	r6,-16(fp)
    912c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    9130:	e1bffb17 	ldw	r6,-20(fp)
    9134:	e17ffc17 	ldw	r5,-16(fp)
    9138:	e13ffd17 	ldw	r4,-12(fp)
    913c:	00093780 	call	9378 <open>
    9140:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    9144:	e0bfff17 	ldw	r2,-4(fp)
    9148:	10002016 	blt	r2,zero,91cc <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    914c:	e0ffff17 	ldw	r3,-4(fp)
    9150:	1805883a 	mov	r2,r3
    9154:	1085883a 	add	r2,r2,r2
    9158:	10c5883a 	add	r2,r2,r3
    915c:	100490ba 	slli	r2,r2,2
    9160:	00c00074 	movhi	r3,1
    9164:	10c7883a 	add	r3,r2,r3
    9168:	18e7b817 	ldw	r3,-24864(r3)
    916c:	e0bffe17 	ldw	r2,-8(fp)
    9170:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9174:	e0ffff17 	ldw	r3,-4(fp)
    9178:	1805883a 	mov	r2,r3
    917c:	1085883a 	add	r2,r2,r2
    9180:	10c5883a 	add	r2,r2,r3
    9184:	100490ba 	slli	r2,r2,2
    9188:	00c00074 	movhi	r3,1
    918c:	10c7883a 	add	r3,r2,r3
    9190:	18e7b917 	ldw	r3,-24860(r3)
    9194:	e0bffe17 	ldw	r2,-8(fp)
    9198:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    919c:	e0ffff17 	ldw	r3,-4(fp)
    91a0:	1805883a 	mov	r2,r3
    91a4:	1085883a 	add	r2,r2,r2
    91a8:	10c5883a 	add	r2,r2,r3
    91ac:	100490ba 	slli	r2,r2,2
    91b0:	00c00074 	movhi	r3,1
    91b4:	10c7883a 	add	r3,r2,r3
    91b8:	18e7ba17 	ldw	r3,-24856(r3)
    91bc:	e0bffe17 	ldw	r2,-8(fp)
    91c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    91c4:	e13fff17 	ldw	r4,-4(fp)
    91c8:	00094d80 	call	94d8 <alt_release_fd>
  }
} 
    91cc:	0001883a 	nop
    91d0:	e037883a 	mov	sp,fp
    91d4:	dfc00117 	ldw	ra,4(sp)
    91d8:	df000017 	ldw	fp,0(sp)
    91dc:	dec00204 	addi	sp,sp,8
    91e0:	f800283a 	ret

000091e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    91e4:	defffb04 	addi	sp,sp,-20
    91e8:	dfc00415 	stw	ra,16(sp)
    91ec:	df000315 	stw	fp,12(sp)
    91f0:	df000304 	addi	fp,sp,12
    91f4:	e13fff15 	stw	r4,-4(fp)
    91f8:	e17ffe15 	stw	r5,-8(fp)
    91fc:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9200:	01c07fc4 	movi	r7,511
    9204:	01800044 	movi	r6,1
    9208:	e17fff17 	ldw	r5,-4(fp)
    920c:	01000074 	movhi	r4,1
    9210:	2127bb04 	addi	r4,r4,-24852
    9214:	00091100 	call	9110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9218:	01c07fc4 	movi	r7,511
    921c:	000d883a 	mov	r6,zero
    9220:	e17ffe17 	ldw	r5,-8(fp)
    9224:	01000074 	movhi	r4,1
    9228:	2127b804 	addi	r4,r4,-24864
    922c:	00091100 	call	9110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9230:	01c07fc4 	movi	r7,511
    9234:	01800044 	movi	r6,1
    9238:	e17ffd17 	ldw	r5,-12(fp)
    923c:	01000074 	movhi	r4,1
    9240:	2127be04 	addi	r4,r4,-24840
    9244:	00091100 	call	9110 <alt_open_fd>
}  
    9248:	0001883a 	nop
    924c:	e037883a 	mov	sp,fp
    9250:	dfc00117 	ldw	ra,4(sp)
    9254:	df000017 	ldw	fp,0(sp)
    9258:	dec00204 	addi	sp,sp,8
    925c:	f800283a 	ret

00009260 <alt_get_errno>:
{
    9260:	defffe04 	addi	sp,sp,-8
    9264:	dfc00115 	stw	ra,4(sp)
    9268:	df000015 	stw	fp,0(sp)
    926c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9270:	d0a00717 	ldw	r2,-32740(gp)
    9274:	10000326 	beq	r2,zero,9284 <alt_get_errno+0x24>
    9278:	d0a00717 	ldw	r2,-32740(gp)
    927c:	103ee83a 	callr	r2
    9280:	00000106 	br	9288 <alt_get_errno+0x28>
    9284:	d0a0c404 	addi	r2,gp,-31984
}
    9288:	e037883a 	mov	sp,fp
    928c:	dfc00117 	ldw	ra,4(sp)
    9290:	df000017 	ldw	fp,0(sp)
    9294:	dec00204 	addi	sp,sp,8
    9298:	f800283a 	ret

0000929c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    929c:	defffd04 	addi	sp,sp,-12
    92a0:	df000215 	stw	fp,8(sp)
    92a4:	df000204 	addi	fp,sp,8
    92a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    92ac:	e0bffe17 	ldw	r2,-8(fp)
    92b0:	10800217 	ldw	r2,8(r2)
    92b4:	10d00034 	orhi	r3,r2,16384
    92b8:	e0bffe17 	ldw	r2,-8(fp)
    92bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    92c0:	e03fff15 	stw	zero,-4(fp)
    92c4:	00002306 	br	9354 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    92c8:	e0ffff17 	ldw	r3,-4(fp)
    92cc:	1805883a 	mov	r2,r3
    92d0:	1085883a 	add	r2,r2,r2
    92d4:	10c5883a 	add	r2,r2,r3
    92d8:	100490ba 	slli	r2,r2,2
    92dc:	00c00074 	movhi	r3,1
    92e0:	10c7883a 	add	r3,r2,r3
    92e4:	18e7b817 	ldw	r3,-24864(r3)
    92e8:	e0bffe17 	ldw	r2,-8(fp)
    92ec:	10800017 	ldw	r2,0(r2)
    92f0:	1880151e 	bne	r3,r2,9348 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    92f4:	e0ffff17 	ldw	r3,-4(fp)
    92f8:	1805883a 	mov	r2,r3
    92fc:	1085883a 	add	r2,r2,r2
    9300:	10c5883a 	add	r2,r2,r3
    9304:	100490ba 	slli	r2,r2,2
    9308:	00c00074 	movhi	r3,1
    930c:	10c7883a 	add	r3,r2,r3
    9310:	18a7ba17 	ldw	r2,-24856(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    9314:	10000c0e 	bge	r2,zero,9348 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    9318:	e0ffff17 	ldw	r3,-4(fp)
    931c:	1805883a 	mov	r2,r3
    9320:	1085883a 	add	r2,r2,r2
    9324:	10c5883a 	add	r2,r2,r3
    9328:	100490ba 	slli	r2,r2,2
    932c:	00c00074 	movhi	r3,1
    9330:	18e7b804 	addi	r3,r3,-24864
    9334:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9338:	e0fffe17 	ldw	r3,-8(fp)
    933c:	18800226 	beq	r3,r2,9348 <alt_file_locked+0xac>
    {
      return -EACCES;
    9340:	00bffcc4 	movi	r2,-13
    9344:	00000806 	br	9368 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    9348:	e0bfff17 	ldw	r2,-4(fp)
    934c:	10800044 	addi	r2,r2,1
    9350:	e0bfff15 	stw	r2,-4(fp)
    9354:	d0a00617 	ldw	r2,-32744(gp)
    9358:	1007883a 	mov	r3,r2
    935c:	e0bfff17 	ldw	r2,-4(fp)
    9360:	18bfd92e 	bgeu	r3,r2,92c8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9364:	0005883a 	mov	r2,zero
}
    9368:	e037883a 	mov	sp,fp
    936c:	df000017 	ldw	fp,0(sp)
    9370:	dec00104 	addi	sp,sp,4
    9374:	f800283a 	ret

00009378 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9378:	defff604 	addi	sp,sp,-40
    937c:	dfc00915 	stw	ra,36(sp)
    9380:	df000815 	stw	fp,32(sp)
    9384:	df000804 	addi	fp,sp,32
    9388:	e13ffa15 	stw	r4,-24(fp)
    938c:	e17ff915 	stw	r5,-28(fp)
    9390:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9394:	00bfffc4 	movi	r2,-1
    9398:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    939c:	00bffb44 	movi	r2,-19
    93a0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    93a4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    93a8:	d1600404 	addi	r5,gp,-32752
    93ac:	e13ffa17 	ldw	r4,-24(fp)
    93b0:	00097180 	call	9718 <alt_find_dev>
    93b4:	e0bfff15 	stw	r2,-4(fp)
    93b8:	e0bfff17 	ldw	r2,-4(fp)
    93bc:	1000051e 	bne	r2,zero,93d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    93c0:	e13ffa17 	ldw	r4,-24(fp)
    93c4:	00097a80 	call	97a8 <alt_find_file>
    93c8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    93cc:	00800044 	movi	r2,1
    93d0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    93d4:	e0bfff17 	ldw	r2,-4(fp)
    93d8:	10002c26 	beq	r2,zero,948c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    93dc:	e13fff17 	ldw	r4,-4(fp)
    93e0:	00098b00 	call	98b0 <alt_get_fd>
    93e4:	e0bffe15 	stw	r2,-8(fp)
    93e8:	e0bffe17 	ldw	r2,-8(fp)
    93ec:	1000030e 	bge	r2,zero,93fc <open+0x84>
    {
      status = index;
    93f0:	e0bffe17 	ldw	r2,-8(fp)
    93f4:	e0bffd15 	stw	r2,-12(fp)
    93f8:	00002606 	br	9494 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    93fc:	e0fffe17 	ldw	r3,-8(fp)
    9400:	1805883a 	mov	r2,r3
    9404:	1085883a 	add	r2,r2,r2
    9408:	10c5883a 	add	r2,r2,r3
    940c:	100490ba 	slli	r2,r2,2
    9410:	00c00074 	movhi	r3,1
    9414:	18e7b804 	addi	r3,r3,-24864
    9418:	10c5883a 	add	r2,r2,r3
    941c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9420:	e0fff917 	ldw	r3,-28(fp)
    9424:	00900034 	movhi	r2,16384
    9428:	10bfffc4 	addi	r2,r2,-1
    942c:	1886703a 	and	r3,r3,r2
    9430:	e0bffb17 	ldw	r2,-20(fp)
    9434:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9438:	e0bffc17 	ldw	r2,-16(fp)
    943c:	1000051e 	bne	r2,zero,9454 <open+0xdc>
    9440:	e13ffb17 	ldw	r4,-20(fp)
    9444:	000929c0 	call	929c <alt_file_locked>
    9448:	e0bffd15 	stw	r2,-12(fp)
    944c:	e0bffd17 	ldw	r2,-12(fp)
    9450:	10001016 	blt	r2,zero,9494 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9454:	e0bfff17 	ldw	r2,-4(fp)
    9458:	10800317 	ldw	r2,12(r2)
    945c:	10000826 	beq	r2,zero,9480 <open+0x108>
    9460:	e0bfff17 	ldw	r2,-4(fp)
    9464:	10800317 	ldw	r2,12(r2)
    9468:	e1fff817 	ldw	r7,-32(fp)
    946c:	e1bff917 	ldw	r6,-28(fp)
    9470:	e17ffa17 	ldw	r5,-24(fp)
    9474:	e13ffb17 	ldw	r4,-20(fp)
    9478:	103ee83a 	callr	r2
    947c:	00000106 	br	9484 <open+0x10c>
    9480:	0005883a 	mov	r2,zero
    9484:	e0bffd15 	stw	r2,-12(fp)
    9488:	00000206 	br	9494 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    948c:	00bffb44 	movi	r2,-19
    9490:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9494:	e0bffd17 	ldw	r2,-12(fp)
    9498:	1000090e 	bge	r2,zero,94c0 <open+0x148>
  {
    alt_release_fd (index);  
    949c:	e13ffe17 	ldw	r4,-8(fp)
    94a0:	00094d80 	call	94d8 <alt_release_fd>
    ALT_ERRNO = -status;
    94a4:	00092600 	call	9260 <alt_get_errno>
    94a8:	1007883a 	mov	r3,r2
    94ac:	e0bffd17 	ldw	r2,-12(fp)
    94b0:	0085c83a 	sub	r2,zero,r2
    94b4:	18800015 	stw	r2,0(r3)
    return -1;
    94b8:	00bfffc4 	movi	r2,-1
    94bc:	00000106 	br	94c4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    94c0:	e0bffe17 	ldw	r2,-8(fp)
}
    94c4:	e037883a 	mov	sp,fp
    94c8:	dfc00117 	ldw	ra,4(sp)
    94cc:	df000017 	ldw	fp,0(sp)
    94d0:	dec00204 	addi	sp,sp,8
    94d4:	f800283a 	ret

000094d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    94d8:	defffe04 	addi	sp,sp,-8
    94dc:	df000115 	stw	fp,4(sp)
    94e0:	df000104 	addi	fp,sp,4
    94e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    94e8:	e0bfff17 	ldw	r2,-4(fp)
    94ec:	108000d0 	cmplti	r2,r2,3
    94f0:	1000101e 	bne	r2,zero,9534 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    94f4:	e0ffff17 	ldw	r3,-4(fp)
    94f8:	1805883a 	mov	r2,r3
    94fc:	1085883a 	add	r2,r2,r2
    9500:	10c5883a 	add	r2,r2,r3
    9504:	100490ba 	slli	r2,r2,2
    9508:	00c00074 	movhi	r3,1
    950c:	10c7883a 	add	r3,r2,r3
    9510:	1827ba15 	stw	zero,-24856(r3)
    alt_fd_list[fd].dev      = 0;
    9514:	e0ffff17 	ldw	r3,-4(fp)
    9518:	1805883a 	mov	r2,r3
    951c:	1085883a 	add	r2,r2,r2
    9520:	10c5883a 	add	r2,r2,r3
    9524:	100490ba 	slli	r2,r2,2
    9528:	00c00074 	movhi	r3,1
    952c:	10c7883a 	add	r3,r2,r3
    9530:	1827b815 	stw	zero,-24864(r3)
  }
}
    9534:	0001883a 	nop
    9538:	e037883a 	mov	sp,fp
    953c:	df000017 	ldw	fp,0(sp)
    9540:	dec00104 	addi	sp,sp,4
    9544:	f800283a 	ret

00009548 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9548:	defffa04 	addi	sp,sp,-24
    954c:	df000515 	stw	fp,20(sp)
    9550:	df000504 	addi	fp,sp,20
    9554:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    9558:	0005303a 	rdctl	r2,status
    955c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9560:	e0fffc17 	ldw	r3,-16(fp)
    9564:	00bfff84 	movi	r2,-2
    9568:	1884703a 	and	r2,r3,r2
    956c:	1001703a 	wrctl	status,r2
  return context;
    9570:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9574:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    9578:	e0bffb17 	ldw	r2,-20(fp)
    957c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9580:	e0bffd17 	ldw	r2,-12(fp)
    9584:	10800017 	ldw	r2,0(r2)
    9588:	e0fffd17 	ldw	r3,-12(fp)
    958c:	18c00117 	ldw	r3,4(r3)
    9590:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	10800117 	ldw	r2,4(r2)
    959c:	e0fffd17 	ldw	r3,-12(fp)
    95a0:	18c00017 	ldw	r3,0(r3)
    95a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    95a8:	e0bffd17 	ldw	r2,-12(fp)
    95ac:	e0fffd17 	ldw	r3,-12(fp)
    95b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    95b4:	e0bffd17 	ldw	r2,-12(fp)
    95b8:	e0fffd17 	ldw	r3,-12(fp)
    95bc:	10c00015 	stw	r3,0(r2)
} 
    95c0:	0001883a 	nop
    95c4:	e0bfff17 	ldw	r2,-4(fp)
    95c8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    95cc:	e0bffe17 	ldw	r2,-8(fp)
    95d0:	1001703a 	wrctl	status,r2
}
    95d4:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    95d8:	0001883a 	nop
    95dc:	e037883a 	mov	sp,fp
    95e0:	df000017 	ldw	fp,0(sp)
    95e4:	dec00104 	addi	sp,sp,4
    95e8:	f800283a 	ret

000095ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    95ec:	defffb04 	addi	sp,sp,-20
    95f0:	dfc00415 	stw	ra,16(sp)
    95f4:	df000315 	stw	fp,12(sp)
    95f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    95fc:	d0a00917 	ldw	r2,-32732(gp)
    9600:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9604:	d0a0ca17 	ldw	r2,-31960(gp)
    9608:	10800044 	addi	r2,r2,1
    960c:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9610:	00002e06 	br	96cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9614:	e0bfff17 	ldw	r2,-4(fp)
    9618:	10800017 	ldw	r2,0(r2)
    961c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9620:	e0bfff17 	ldw	r2,-4(fp)
    9624:	10800403 	ldbu	r2,16(r2)
    9628:	10803fcc 	andi	r2,r2,255
    962c:	10000426 	beq	r2,zero,9640 <alt_tick+0x54>
    9630:	d0a0ca17 	ldw	r2,-31960(gp)
    9634:	1000021e 	bne	r2,zero,9640 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9638:	e0bfff17 	ldw	r2,-4(fp)
    963c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9640:	e0bfff17 	ldw	r2,-4(fp)
    9644:	10800217 	ldw	r2,8(r2)
    9648:	d0e0ca17 	ldw	r3,-31960(gp)
    964c:	18801d36 	bltu	r3,r2,96c4 <alt_tick+0xd8>
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	10800403 	ldbu	r2,16(r2)
    9658:	10803fcc 	andi	r2,r2,255
    965c:	1000191e 	bne	r2,zero,96c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9660:	e0bfff17 	ldw	r2,-4(fp)
    9664:	10800317 	ldw	r2,12(r2)
    9668:	e0ffff17 	ldw	r3,-4(fp)
    966c:	18c00517 	ldw	r3,20(r3)
    9670:	1809883a 	mov	r4,r3
    9674:	103ee83a 	callr	r2
    9678:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    967c:	e0bffd17 	ldw	r2,-12(fp)
    9680:	1000031e 	bne	r2,zero,9690 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9684:	e13fff17 	ldw	r4,-4(fp)
    9688:	00095480 	call	9548 <alt_alarm_stop>
    968c:	00000d06 	br	96c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9690:	e0bfff17 	ldw	r2,-4(fp)
    9694:	10c00217 	ldw	r3,8(r2)
    9698:	e0bffd17 	ldw	r2,-12(fp)
    969c:	1887883a 	add	r3,r3,r2
    96a0:	e0bfff17 	ldw	r2,-4(fp)
    96a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    96a8:	e0bfff17 	ldw	r2,-4(fp)
    96ac:	10c00217 	ldw	r3,8(r2)
    96b0:	d0a0ca17 	ldw	r2,-31960(gp)
    96b4:	1880032e 	bgeu	r3,r2,96c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	00c00044 	movi	r3,1
    96c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    96c4:	e0bffe17 	ldw	r2,-8(fp)
    96c8:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    96cc:	e0ffff17 	ldw	r3,-4(fp)
    96d0:	d0a00904 	addi	r2,gp,-32732
    96d4:	18bfcf1e 	bne	r3,r2,9614 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    96d8:	0001883a 	nop
}
    96dc:	0001883a 	nop
    96e0:	e037883a 	mov	sp,fp
    96e4:	dfc00117 	ldw	ra,4(sp)
    96e8:	df000017 	ldw	fp,0(sp)
    96ec:	dec00204 	addi	sp,sp,8
    96f0:	f800283a 	ret

000096f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    96f4:	deffff04 	addi	sp,sp,-4
    96f8:	df000015 	stw	fp,0(sp)
    96fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9700:	000170fa 	wrctl	ienable,zero
}
    9704:	0001883a 	nop
    9708:	e037883a 	mov	sp,fp
    970c:	df000017 	ldw	fp,0(sp)
    9710:	dec00104 	addi	sp,sp,4
    9714:	f800283a 	ret

00009718 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9718:	defffa04 	addi	sp,sp,-24
    971c:	dfc00515 	stw	ra,20(sp)
    9720:	df000415 	stw	fp,16(sp)
    9724:	df000404 	addi	fp,sp,16
    9728:	e13ffd15 	stw	r4,-12(fp)
    972c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9730:	e0bffc17 	ldw	r2,-16(fp)
    9734:	10800017 	ldw	r2,0(r2)
    9738:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    973c:	e13ffd17 	ldw	r4,-12(fp)
    9740:	000834c0 	call	834c <strlen>
    9744:	10800044 	addi	r2,r2,1
    9748:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    974c:	00000d06 	br	9784 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9750:	e0bfff17 	ldw	r2,-4(fp)
    9754:	10800217 	ldw	r2,8(r2)
    9758:	e0fffe17 	ldw	r3,-8(fp)
    975c:	180d883a 	mov	r6,r3
    9760:	e17ffd17 	ldw	r5,-12(fp)
    9764:	1009883a 	mov	r4,r2
    9768:	0009ac40 	call	9ac4 <memcmp>
    976c:	1000021e 	bne	r2,zero,9778 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9770:	e0bfff17 	ldw	r2,-4(fp)
    9774:	00000706 	br	9794 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9778:	e0bfff17 	ldw	r2,-4(fp)
    977c:	10800017 	ldw	r2,0(r2)
    9780:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    9784:	e0ffff17 	ldw	r3,-4(fp)
    9788:	e0bffc17 	ldw	r2,-16(fp)
    978c:	18bff01e 	bne	r3,r2,9750 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    9790:	0005883a 	mov	r2,zero
}
    9794:	e037883a 	mov	sp,fp
    9798:	dfc00117 	ldw	ra,4(sp)
    979c:	df000017 	ldw	fp,0(sp)
    97a0:	dec00204 	addi	sp,sp,8
    97a4:	f800283a 	ret

000097a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    97a8:	defffb04 	addi	sp,sp,-20
    97ac:	dfc00415 	stw	ra,16(sp)
    97b0:	df000315 	stw	fp,12(sp)
    97b4:	df000304 	addi	fp,sp,12
    97b8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    97bc:	d0a00217 	ldw	r2,-32760(gp)
    97c0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    97c4:	00003106 	br	988c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    97c8:	e0bfff17 	ldw	r2,-4(fp)
    97cc:	10800217 	ldw	r2,8(r2)
    97d0:	1009883a 	mov	r4,r2
    97d4:	000834c0 	call	834c <strlen>
    97d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	10c00217 	ldw	r3,8(r2)
    97e4:	e0bffe17 	ldw	r2,-8(fp)
    97e8:	10bfffc4 	addi	r2,r2,-1
    97ec:	1885883a 	add	r2,r3,r2
    97f0:	10800003 	ldbu	r2,0(r2)
    97f4:	10803fcc 	andi	r2,r2,255
    97f8:	1080201c 	xori	r2,r2,128
    97fc:	10bfe004 	addi	r2,r2,-128
    9800:	10800bd8 	cmpnei	r2,r2,47
    9804:	1000031e 	bne	r2,zero,9814 <alt_find_file+0x6c>
    {
      len -= 1;
    9808:	e0bffe17 	ldw	r2,-8(fp)
    980c:	10bfffc4 	addi	r2,r2,-1
    9810:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9814:	e0bffe17 	ldw	r2,-8(fp)
    9818:	e0fffd17 	ldw	r3,-12(fp)
    981c:	1885883a 	add	r2,r3,r2
    9820:	10800003 	ldbu	r2,0(r2)
    9824:	10803fcc 	andi	r2,r2,255
    9828:	1080201c 	xori	r2,r2,128
    982c:	10bfe004 	addi	r2,r2,-128
    9830:	10800be0 	cmpeqi	r2,r2,47
    9834:	1000081e 	bne	r2,zero,9858 <alt_find_file+0xb0>
    9838:	e0bffe17 	ldw	r2,-8(fp)
    983c:	e0fffd17 	ldw	r3,-12(fp)
    9840:	1885883a 	add	r2,r3,r2
    9844:	10800003 	ldbu	r2,0(r2)
    9848:	10803fcc 	andi	r2,r2,255
    984c:	1080201c 	xori	r2,r2,128
    9850:	10bfe004 	addi	r2,r2,-128
    9854:	10000a1e 	bne	r2,zero,9880 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9858:	e0bfff17 	ldw	r2,-4(fp)
    985c:	10800217 	ldw	r2,8(r2)
    9860:	e0fffe17 	ldw	r3,-8(fp)
    9864:	180d883a 	mov	r6,r3
    9868:	e17ffd17 	ldw	r5,-12(fp)
    986c:	1009883a 	mov	r4,r2
    9870:	0009ac40 	call	9ac4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    9874:	1000021e 	bne	r2,zero,9880 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    9878:	e0bfff17 	ldw	r2,-4(fp)
    987c:	00000706 	br	989c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9880:	e0bfff17 	ldw	r2,-4(fp)
    9884:	10800017 	ldw	r2,0(r2)
    9888:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    988c:	e0ffff17 	ldw	r3,-4(fp)
    9890:	d0a00204 	addi	r2,gp,-32760
    9894:	18bfcc1e 	bne	r3,r2,97c8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    9898:	0005883a 	mov	r2,zero
}
    989c:	e037883a 	mov	sp,fp
    98a0:	dfc00117 	ldw	ra,4(sp)
    98a4:	df000017 	ldw	fp,0(sp)
    98a8:	dec00204 	addi	sp,sp,8
    98ac:	f800283a 	ret

000098b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    98b0:	defffc04 	addi	sp,sp,-16
    98b4:	df000315 	stw	fp,12(sp)
    98b8:	df000304 	addi	fp,sp,12
    98bc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    98c0:	00bffa04 	movi	r2,-24
    98c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    98c8:	e03fff15 	stw	zero,-4(fp)
    98cc:	00001d06 	br	9944 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    98d0:	e0ffff17 	ldw	r3,-4(fp)
    98d4:	1805883a 	mov	r2,r3
    98d8:	1085883a 	add	r2,r2,r2
    98dc:	10c5883a 	add	r2,r2,r3
    98e0:	100490ba 	slli	r2,r2,2
    98e4:	00c00074 	movhi	r3,1
    98e8:	10c7883a 	add	r3,r2,r3
    98ec:	18a7b817 	ldw	r2,-24864(r3)
    98f0:	1000111e 	bne	r2,zero,9938 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    98f4:	e0ffff17 	ldw	r3,-4(fp)
    98f8:	1805883a 	mov	r2,r3
    98fc:	1085883a 	add	r2,r2,r2
    9900:	10c5883a 	add	r2,r2,r3
    9904:	100490ba 	slli	r2,r2,2
    9908:	e13ffd17 	ldw	r4,-12(fp)
    990c:	00c00074 	movhi	r3,1
    9910:	10c7883a 	add	r3,r2,r3
    9914:	1927b815 	stw	r4,-24864(r3)
      if (i > alt_max_fd)
    9918:	d0e00617 	ldw	r3,-32744(gp)
    991c:	e0bfff17 	ldw	r2,-4(fp)
    9920:	1880020e 	bge	r3,r2,992c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    9924:	e0bfff17 	ldw	r2,-4(fp)
    9928:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    992c:	e0bfff17 	ldw	r2,-4(fp)
    9930:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9934:	00000706 	br	9954 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    9938:	e0bfff17 	ldw	r2,-4(fp)
    993c:	10800044 	addi	r2,r2,1
    9940:	e0bfff15 	stw	r2,-4(fp)
    9944:	e0bfff17 	ldw	r2,-4(fp)
    9948:	10800810 	cmplti	r2,r2,32
    994c:	103fe01e 	bne	r2,zero,98d0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    9950:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9954:	e0bffe17 	ldw	r2,-8(fp)
}
    9958:	e037883a 	mov	sp,fp
    995c:	df000017 	ldw	fp,0(sp)
    9960:	dec00104 	addi	sp,sp,4
    9964:	f800283a 	ret

00009968 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9968:	defffb04 	addi	sp,sp,-20
    996c:	df000415 	stw	fp,16(sp)
    9970:	df000404 	addi	fp,sp,16
    9974:	e13ffd15 	stw	r4,-12(fp)
    9978:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    997c:	e0bffc17 	ldw	r2,-16(fp)
    9980:	10820070 	cmpltui	r2,r2,2049
    9984:	1000021e 	bne	r2,zero,9990 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    9988:	00820004 	movi	r2,2048
    998c:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    9990:	e0fffd17 	ldw	r3,-12(fp)
    9994:	e0bffc17 	ldw	r2,-16(fp)
    9998:	1885883a 	add	r2,r3,r2
    999c:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    99a0:	e0bffd17 	ldw	r2,-12(fp)
    99a4:	e0bfff15 	stw	r2,-4(fp)
    99a8:	00000506 	br	99c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    99ac:	e0bfff17 	ldw	r2,-4(fp)
    99b0:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    99b4:	e0bfff17 	ldw	r2,-4(fp)
    99b8:	10800804 	addi	r2,r2,32
    99bc:	e0bfff15 	stw	r2,-4(fp)
    99c0:	e0ffff17 	ldw	r3,-4(fp)
    99c4:	e0bffe17 	ldw	r2,-8(fp)
    99c8:	18bff836 	bltu	r3,r2,99ac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    99cc:	e0bffd17 	ldw	r2,-12(fp)
    99d0:	108007cc 	andi	r2,r2,31
    99d4:	10000226 	beq	r2,zero,99e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    99d8:	e0bfff17 	ldw	r2,-4(fp)
    99dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    99e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    99e4:	0001883a 	nop
    99e8:	e037883a 	mov	sp,fp
    99ec:	df000017 	ldw	fp,0(sp)
    99f0:	dec00104 	addi	sp,sp,4
    99f4:	f800283a 	ret

000099f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    99f8:	defffe04 	addi	sp,sp,-8
    99fc:	df000115 	stw	fp,4(sp)
    9a00:	df000104 	addi	fp,sp,4
    9a04:	e13fff15 	stw	r4,-4(fp)
    9a08:	e0bfff17 	ldw	r2,-4(fp)
    9a0c:	10bffe84 	addi	r2,r2,-6
    9a10:	10c00428 	cmpgeui	r3,r2,16
    9a14:	1800191e 	bne	r3,zero,9a7c <alt_exception_cause_generated_bad_addr+0x84>
    9a18:	100690ba 	slli	r3,r2,2
    9a1c:	00800074 	movhi	r2,1
    9a20:	1885883a 	add	r2,r3,r2
    9a24:	10a68b17 	ldw	r2,-26068(r2)
    9a28:	1000683a 	jmp	r2
    9a2c:	00009a6c 	andhi	zero,zero,617
    9a30:	00009a6c 	andhi	zero,zero,617
    9a34:	00009a7c 	xorhi	zero,zero,617
    9a38:	00009a7c 	xorhi	zero,zero,617
    9a3c:	00009a7c 	xorhi	zero,zero,617
    9a40:	00009a6c 	andhi	zero,zero,617
    9a44:	00009a74 	movhi	zero,617
    9a48:	00009a7c 	xorhi	zero,zero,617
    9a4c:	00009a6c 	andhi	zero,zero,617
    9a50:	00009a6c 	andhi	zero,zero,617
    9a54:	00009a7c 	xorhi	zero,zero,617
    9a58:	00009a6c 	andhi	zero,zero,617
    9a5c:	00009a74 	movhi	zero,617
    9a60:	00009a7c 	xorhi	zero,zero,617
    9a64:	00009a7c 	xorhi	zero,zero,617
    9a68:	00009a6c 	andhi	zero,zero,617
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    9a6c:	00800044 	movi	r2,1
    9a70:	00000306 	br	9a80 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9a74:	0005883a 	mov	r2,zero
    9a78:	00000106 	br	9a80 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    9a7c:	0005883a 	mov	r2,zero
  }
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	df000017 	ldw	fp,0(sp)
    9a88:	dec00104 	addi	sp,sp,4
    9a8c:	f800283a 	ret

00009a90 <atexit>:
    9a90:	200b883a 	mov	r5,r4
    9a94:	000f883a 	mov	r7,zero
    9a98:	000d883a 	mov	r6,zero
    9a9c:	0009883a 	mov	r4,zero
    9aa0:	0009af41 	jmpi	9af4 <__register_exitproc>

00009aa4 <exit>:
    9aa4:	defffe04 	addi	sp,sp,-8
    9aa8:	000b883a 	mov	r5,zero
    9aac:	dc000015 	stw	r16,0(sp)
    9ab0:	dfc00115 	stw	ra,4(sp)
    9ab4:	2021883a 	mov	r16,r4
    9ab8:	0009c100 	call	9c10 <__call_exitprocs>
    9abc:	8009883a 	mov	r4,r16
    9ac0:	0009d2c0 	call	9d2c <_exit>

00009ac4 <memcmp>:
    9ac4:	0007883a 	mov	r3,zero
    9ac8:	30c0021e 	bne	r6,r3,9ad4 <memcmp+0x10>
    9acc:	0005883a 	mov	r2,zero
    9ad0:	f800283a 	ret
    9ad4:	20c5883a 	add	r2,r4,r3
    9ad8:	18c00044 	addi	r3,r3,1
    9adc:	28cf883a 	add	r7,r5,r3
    9ae0:	10800003 	ldbu	r2,0(r2)
    9ae4:	39ffffc3 	ldbu	r7,-1(r7)
    9ae8:	11fff726 	beq	r2,r7,9ac8 <memcmp+0x4>
    9aec:	11c5c83a 	sub	r2,r2,r7
    9af0:	f800283a 	ret

00009af4 <__register_exitproc>:
    9af4:	00800074 	movhi	r2,1
    9af8:	10a81817 	ldw	r2,-24480(r2)
    9afc:	defff904 	addi	sp,sp,-28
    9b00:	dc000015 	stw	r16,0(sp)
    9b04:	14000d17 	ldw	r16,52(r2)
    9b08:	dd400515 	stw	r21,20(sp)
    9b0c:	dd000415 	stw	r20,16(sp)
    9b10:	dcc00315 	stw	r19,12(sp)
    9b14:	dc800215 	stw	r18,8(sp)
    9b18:	dfc00615 	stw	ra,24(sp)
    9b1c:	dc400115 	stw	r17,4(sp)
    9b20:	2025883a 	mov	r18,r4
    9b24:	2827883a 	mov	r19,r5
    9b28:	302b883a 	mov	r21,r6
    9b2c:	3829883a 	mov	r20,r7
    9b30:	8000081e 	bne	r16,zero,9b54 <__register_exitproc+0x60>
    9b34:	14000e04 	addi	r16,r2,56
    9b38:	00c00034 	movhi	r3,0
    9b3c:	14000d15 	stw	r16,52(r2)
    9b40:	18c00004 	addi	r3,r3,0
    9b44:	18000326 	beq	r3,zero,9b54 <__register_exitproc+0x60>
    9b48:	00c00034 	movhi	r3,0
    9b4c:	18c00017 	ldw	r3,0(r3)
    9b50:	10c03015 	stw	r3,192(r2)
    9b54:	84400117 	ldw	r17,4(r16)
    9b58:	88800810 	cmplti	r2,r17,32
    9b5c:	10000a1e 	bne	r2,zero,9b88 <__register_exitproc+0x94>
    9b60:	00bfffc4 	movi	r2,-1
    9b64:	dfc00617 	ldw	ra,24(sp)
    9b68:	dd400517 	ldw	r21,20(sp)
    9b6c:	dd000417 	ldw	r20,16(sp)
    9b70:	dcc00317 	ldw	r19,12(sp)
    9b74:	dc800217 	ldw	r18,8(sp)
    9b78:	dc400117 	ldw	r17,4(sp)
    9b7c:	dc000017 	ldw	r16,0(sp)
    9b80:	dec00704 	addi	sp,sp,28
    9b84:	f800283a 	ret
    9b88:	90001926 	beq	r18,zero,9bf0 <__register_exitproc+0xfc>
    9b8c:	80802217 	ldw	r2,136(r16)
    9b90:	1000091e 	bne	r2,zero,9bb8 <__register_exitproc+0xc4>
    9b94:	00800034 	movhi	r2,0
    9b98:	10800004 	addi	r2,r2,0
    9b9c:	103ff026 	beq	r2,zero,9b60 <__register_exitproc+0x6c>
    9ba0:	01004204 	movi	r4,264
    9ba4:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    9ba8:	103fed26 	beq	r2,zero,9b60 <__register_exitproc+0x6c>
    9bac:	10004015 	stw	zero,256(r2)
    9bb0:	10004115 	stw	zero,260(r2)
    9bb4:	80802215 	stw	r2,136(r16)
    9bb8:	880890ba 	slli	r4,r17,2
    9bbc:	00c00044 	movi	r3,1
    9bc0:	1c46983a 	sll	r3,r3,r17
    9bc4:	1109883a 	add	r4,r2,r4
    9bc8:	25400015 	stw	r21,0(r4)
    9bcc:	11404017 	ldw	r5,256(r2)
    9bd0:	94800098 	cmpnei	r18,r18,2
    9bd4:	28cab03a 	or	r5,r5,r3
    9bd8:	11404015 	stw	r5,256(r2)
    9bdc:	25002015 	stw	r20,128(r4)
    9be0:	9000031e 	bne	r18,zero,9bf0 <__register_exitproc+0xfc>
    9be4:	11004117 	ldw	r4,260(r2)
    9be8:	20c6b03a 	or	r3,r4,r3
    9bec:	10c04115 	stw	r3,260(r2)
    9bf0:	88800044 	addi	r2,r17,1
    9bf4:	8c400084 	addi	r17,r17,2
    9bf8:	882290ba 	slli	r17,r17,2
    9bfc:	80800115 	stw	r2,4(r16)
    9c00:	0005883a 	mov	r2,zero
    9c04:	8461883a 	add	r16,r16,r17
    9c08:	84c00015 	stw	r19,0(r16)
    9c0c:	003fd506 	br	9b64 <__register_exitproc+0x70>

00009c10 <__call_exitprocs>:
    9c10:	defff704 	addi	sp,sp,-36
    9c14:	00800074 	movhi	r2,1
    9c18:	dd400515 	stw	r21,20(sp)
    9c1c:	15681817 	ldw	r21,-24480(r2)
    9c20:	dd800615 	stw	r22,24(sp)
    9c24:	dd000415 	stw	r20,16(sp)
    9c28:	dcc00315 	stw	r19,12(sp)
    9c2c:	dfc00815 	stw	ra,32(sp)
    9c30:	ddc00715 	stw	r23,28(sp)
    9c34:	dc800215 	stw	r18,8(sp)
    9c38:	dc400115 	stw	r17,4(sp)
    9c3c:	dc000015 	stw	r16,0(sp)
    9c40:	2029883a 	mov	r20,r4
    9c44:	2827883a 	mov	r19,r5
    9c48:	05800044 	movi	r22,1
    9c4c:	ac400d17 	ldw	r17,52(r21)
    9c50:	88000426 	beq	r17,zero,9c64 <__call_exitprocs+0x54>
    9c54:	8c802217 	ldw	r18,136(r17)
    9c58:	8c000117 	ldw	r16,4(r17)
    9c5c:	843fffc4 	addi	r16,r16,-1
    9c60:	80000b0e 	bge	r16,zero,9c90 <__call_exitprocs+0x80>
    9c64:	dfc00817 	ldw	ra,32(sp)
    9c68:	ddc00717 	ldw	r23,28(sp)
    9c6c:	dd800617 	ldw	r22,24(sp)
    9c70:	dd400517 	ldw	r21,20(sp)
    9c74:	dd000417 	ldw	r20,16(sp)
    9c78:	dcc00317 	ldw	r19,12(sp)
    9c7c:	dc800217 	ldw	r18,8(sp)
    9c80:	dc400117 	ldw	r17,4(sp)
    9c84:	dc000017 	ldw	r16,0(sp)
    9c88:	dec00904 	addi	sp,sp,36
    9c8c:	f800283a 	ret
    9c90:	98000526 	beq	r19,zero,9ca8 <__call_exitprocs+0x98>
    9c94:	903ff126 	beq	r18,zero,9c5c <__call_exitprocs+0x4c>
    9c98:	800490ba 	slli	r2,r16,2
    9c9c:	9085883a 	add	r2,r18,r2
    9ca0:	10802017 	ldw	r2,128(r2)
    9ca4:	14ffed1e 	bne	r2,r19,9c5c <__call_exitprocs+0x4c>
    9ca8:	800490ba 	slli	r2,r16,2
    9cac:	89000117 	ldw	r4,4(r17)
    9cb0:	888b883a 	add	r5,r17,r2
    9cb4:	213fffc4 	addi	r4,r4,-1
    9cb8:	28c00217 	ldw	r3,8(r5)
    9cbc:	24000e1e 	bne	r4,r16,9cf8 <__call_exitprocs+0xe8>
    9cc0:	8c000115 	stw	r16,4(r17)
    9cc4:	183fe526 	beq	r3,zero,9c5c <__call_exitprocs+0x4c>
    9cc8:	8dc00117 	ldw	r23,4(r17)
    9ccc:	90000426 	beq	r18,zero,9ce0 <__call_exitprocs+0xd0>
    9cd0:	b408983a 	sll	r4,r22,r16
    9cd4:	91404017 	ldw	r5,256(r18)
    9cd8:	214a703a 	and	r5,r4,r5
    9cdc:	2800081e 	bne	r5,zero,9d00 <__call_exitprocs+0xf0>
    9ce0:	183ee83a 	callr	r3
    9ce4:	88c00117 	ldw	r3,4(r17)
    9ce8:	a8800d17 	ldw	r2,52(r21)
    9cec:	1dffd71e 	bne	r3,r23,9c4c <__call_exitprocs+0x3c>
    9cf0:	88bfda26 	beq	r17,r2,9c5c <__call_exitprocs+0x4c>
    9cf4:	003fd506 	br	9c4c <__call_exitprocs+0x3c>
    9cf8:	28000215 	stw	zero,8(r5)
    9cfc:	003ff106 	br	9cc4 <__call_exitprocs+0xb4>
    9d00:	91404117 	ldw	r5,260(r18)
    9d04:	9085883a 	add	r2,r18,r2
    9d08:	2148703a 	and	r4,r4,r5
    9d0c:	2000041e 	bne	r4,zero,9d20 <__call_exitprocs+0x110>
    9d10:	11400017 	ldw	r5,0(r2)
    9d14:	a009883a 	mov	r4,r20
    9d18:	183ee83a 	callr	r3
    9d1c:	003ff106 	br	9ce4 <__call_exitprocs+0xd4>
    9d20:	11000017 	ldw	r4,0(r2)
    9d24:	183ee83a 	callr	r3
    9d28:	003fee06 	br	9ce4 <__call_exitprocs+0xd4>

00009d2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9d2c:	defffd04 	addi	sp,sp,-12
    9d30:	df000215 	stw	fp,8(sp)
    9d34:	df000204 	addi	fp,sp,8
    9d38:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9d3c:	0001883a 	nop
    9d40:	e0bffe17 	ldw	r2,-8(fp)
    9d44:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9d48:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9d4c:	10000226 	beq	r2,zero,9d58 <_exit+0x2c>
    ALT_SIM_FAIL();
    9d50:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    9d54:	00000106 	br	9d5c <_exit+0x30>
    ALT_SIM_PASS();
    9d58:	002af0b0 	cmpltui	zero,zero,43970
}
    9d5c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9d60:	003fff06 	br	9d60 <_exit+0x34>
