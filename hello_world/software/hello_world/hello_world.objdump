
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008238

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000325c memsz 0x0000325c flags r-x
    LOAD off    0x0000427c vaddr 0x0000b27c paddr 0x0000b560 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00004844 vaddr 0x0000b844 paddr 0x0000b844 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002f00  00008238  00008238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  0000b138  0000b138  00004138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0000b27c  0000b560  0000427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000b844  0000b844  00004844  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000b964  0000b964  00004560  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00004560  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000730  00000000  00000000  00004590  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b9a1  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063f6  00000000  00000000  00020661  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007545  00000000  00000000  00026a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d64  00000000  00000000  0002df9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027c7  00000000  00000000  0002ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000034ba  00000000  00000000  000314c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00034984  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000568  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036bd1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00036bd4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036bd7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036bd8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036bd9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036bdd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036be1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00036be5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00036bee  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00036bf7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  00036c12  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003ccf4  00000000  00000000  00036c37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008238 l    d  .text	00000000 .text
0000b138 l    d  .rodata	00000000 .rodata
0000b27c l    d  .rwdata	00000000 .rwdata
0000b844 l    d  .bss	00000000 .bss
0000b964 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00008280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008f28 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000b27c l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00009780 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
000098e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0000999c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009adc l     F .text	00000034 alt_dev_reg
0000b360 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009ddc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00009edc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a040 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a06c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a4e4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a634 l     F .text	0000003c alt_get_errno
0000a670 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b860 g     O .bss	00000004 alt_instruction_exception_handler
0000986c g     F .text	0000007c alt_main
00008e78 g     F .text	00000084 _puts_r
0000b864 g     O .bss	00000100 alt_irq
0000b560 g       *ABS*	00000000 __flash_rwdata_start
00008e30 g     F .text	00000048 printf
00008d08 g     F .text	00000070 .hidden __fixsfsi
0000aac8 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00009924 g     F .text	00000078 times
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b844 g     O .bss	00000004 errno
0000b84c g     O .bss	00000004 alt_argv
00013534 g       *ABS*	00000000 _gp
0000b3b4 g     O .rwdata	00000180 alt_fd_list
0000aaec g     F .text	00000090 alt_find_dev
0000a5b8 g     F .text	0000007c alt_io_redirect
0000b138 g       *ABS*	00000000 __DTOR_END__
00008efc g     F .text	00000010 puts
0000adcc g     F .text	00000098 alt_exception_cause_generated_bad_addr
00009c5c g     F .text	000000ec altera_avalon_jtag_uart_read
00008df4 g     F .text	0000003c _printf_r
000096c0 g     F .text	00000064 .hidden __udivsi3
0000ad3c g     F .text	00000090 alt_icache_flush
0000b54c g     O .rwdata	00000004 alt_max_fd
0000b534 g     O .rwdata	00000004 _global_impure_ptr
0000b964 g       *ABS*	00000000 __bss_end
0000a3fc g     F .text	000000e8 alt_iic_isr_register
0000a9c0 g     F .text	00000108 alt_tick
0000a3b0 g     F .text	0000004c alt_ic_irq_enabled
0000a91c g     F .text	000000a4 alt_alarm_stop
0000b854 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
0000b38c g     O .rwdata	00000028 alt_dev_null
00009ff4 g     F .text	0000004c alt_dcache_flush_all
0000b560 g       *ABS*	00000000 __ram_rwdata_end
0000b544 g     O .rwdata	00000008 alt_dev_list
000099d8 g     F .text	00000104 write
0000b27c g       *ABS*	00000000 __ram_rodata_end
00009724 g     F .text	0000005c .hidden __umodsi3
0000b964 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000b138 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009e58 g     F .text	00000084 alt_avalon_timer_sc_init
00008d78 g     F .text	00000054 .hidden __clzsi2
00009d48 g     F .text	00000094 altera_avalon_jtag_uart_write
00008f94 g     F .text	00000528 ___vfprintf_internal_r
0000afe4 g     F .text	0000011c __call_exitprocs
00008238 g     F .text	0000004c _start
0000b858 g     O .bss	00000004 _alt_tick_rate
0000b85c g     O .bss	00000004 _alt_nticks
00009b4c g     F .text	00000050 alt_sys_init
0000aec8 g     F .text	0000011c __register_exitproc
00008dcc g     F .text	00000028 .hidden __mulsi3
0000b27c g       *ABS*	00000000 __ram_rwdata_start
0000b138 g       *ABS*	00000000 __ram_rodata_start
00009b9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000ac84 g     F .text	000000b8 alt_get_fd
00008284 g     F .text	000000ac generateVector
0000ae98 g     F .text	00000030 memcmp
0000b964 g       *ABS*	00000000 __alt_stack_base
0000ab7c g     F .text	00000108 alt_find_file
0000a0a8 g     F .text	000000a8 alt_dev_llist_insert
000094d4 g     F .text	000000a8 __sfvwrite_small_dev
0000b844 g       *ABS*	00000000 __bss_start
00008408 g     F .text	000000a8 main
0000b850 g     O .bss	00000004 alt_envp
00009bfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b550 g     O .rwdata	00000004 alt_errno
000095cc g     F .text	00000080 .hidden __divsi3
0000b138 g       *ABS*	00000000 __CTOR_END__
0000890c g     F .text	000003fc .hidden __mulsf3
0000b138 g       *ABS*	00000000 __flash_rodata_start
0000b138 g       *ABS*	00000000 __DTOR_LIST__
00009b10 g     F .text	0000003c alt_irq_init
0000a8ac g     F .text	00000070 alt_release_fd
0000b14c g     O .rodata	00000100 .hidden __clz_tab
0000ae64 g     F .text	00000014 atexit
00008330 g     F .text	000000d8 sumVector
0000957c g     F .text	00000050 _write_r
0000b538 g     O .rwdata	00000004 _impure_ptr
0000b848 g     O .bss	00000004 alt_argc
0000a1b4 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000b53c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a24c g     F .text	00000050 alt_ic_isr_register
0000b560 g       *ABS*	00000000 _edata
0000b964 g       *ABS*	00000000 _end
00008238 g       *ABS*	00000000 __ram_exceptions_end
0000a324 g     F .text	0000008c alt_ic_irq_disable
0000ae78 g     F .text	00000020 exit
0000964c g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000b100 g     F .text	00000038 _exit
00008f0c g     F .text	0000001c strlen
0000a74c g     F .text	00000160 open
0000a218 g     F .text	00000034 alt_icache_flush_all
0000b554 g     O .rwdata	00000004 alt_priority_mask
0000a29c g     F .text	00000088 alt_ic_irq_enable
000094bc g     F .text	00000018 __vfprintf_internal
0000b558 g     O .rwdata	00000008 alt_alarm_list
0000a150 g     F .text	00000064 _do_ctors
00009f18 g     F .text	000000dc close
000084b0 g     F .text	0000045c .hidden __addsf3
000097e8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08608e14 	ori	at,at,33336
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10ee1917 	ldw	r3,-18332(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10ae1a17 	ldw	r2,-18328(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81d8:	000531fa 	rdctl	r2,exception
    81dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	1004d0ba 	srli	r2,r2,2
    81e8:	108007cc 	andi	r2,r2,31
    81ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81f0:	0005333a 	rdctl	r2,badaddr
    81f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f8:	d0a0cb17 	ldw	r2,-31956(gp)
    81fc:	10000726 	beq	r2,zero,821c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8200:	d0a0cb17 	ldw	r2,-31956(gp)
    8204:	e0ffff17 	ldw	r3,-4(fp)
    8208:	e1bffe17 	ldw	r6,-8(fp)
    820c:	e17ffd17 	ldw	r5,-12(fp)
    8210:	1809883a 	mov	r4,r3
    8214:	103ee83a 	callr	r2
    8218:	00000206 	br	8224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    821c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

Disassembly of section .text:

00008238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    823c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8244:	00bffd16 	blt	zero,r2,823c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8248:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    824c:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8254:	d68d4d14 	ori	gp,gp,13620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    825c:	10ae1114 	ori	r2,r2,47172

    movhi r3, %hi(__bss_end)
    8260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8264:	18ee5914 	ori	r3,r3,47460

    beq r2, r3, 1f
    8268:	10c00326 	beq	r2,r3,8278 <_start+0x40>

0:
    stw zero, (r2)
    826c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8274:	10fffd36 	bltu	r2,r3,826c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8278:	00097e80 	call	97e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    827c:	000986c0 	call	986c <alt_main>

00008280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8280:	003fff06 	br	8280 <alt_after_alt_main>

00008284 <generateVector>:
#define step 1/1024.0
#define N 261121

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
    8284:	defffb04 	addi	sp,sp,-20
    8288:	dfc00415 	stw	ra,16(sp)
    828c:	df000315 	stw	fp,12(sp)
    8290:	dc000215 	stw	r16,8(sp)
    8294:	df000304 	addi	fp,sp,12
    8298:	e13ffd15 	stw	r4,-12(fp)
  int i;
  x[0] = 0;
    829c:	e0bffd17 	ldw	r2,-12(fp)
    82a0:	10000015 	stw	zero,0(r2)
  for (i = 1; i < N; i++) x[i] = x[i-1] + step;
    82a4:	00800044 	movi	r2,1
    82a8:	e0bffe15 	stw	r2,-8(fp)
    82ac:	00001406 	br	8300 <generateVector+0x7c>
    82b0:	e0fffe17 	ldw	r3,-8(fp)
    82b4:	00900034 	movhi	r2,16384
    82b8:	10bfffc4 	addi	r2,r2,-1
    82bc:	1885883a 	add	r2,r3,r2
    82c0:	100490ba 	slli	r2,r2,2
    82c4:	e0fffd17 	ldw	r3,-12(fp)
    82c8:	1885883a 	add	r2,r3,r2
    82cc:	11000017 	ldw	r4,0(r2)
    82d0:	e0bffe17 	ldw	r2,-8(fp)
    82d4:	100490ba 	slli	r2,r2,2
    82d8:	e0fffd17 	ldw	r3,-12(fp)
    82dc:	18a1883a 	add	r16,r3,r2
    82e0:	014ea034 	movhi	r5,14976
    82e4:	00084b00 	call	84b0 <__addsf3>
    82e8:	1007883a 	mov	r3,r2
    82ec:	1805883a 	mov	r2,r3
    82f0:	80800015 	stw	r2,0(r16)
    82f4:	e0bffe17 	ldw	r2,-8(fp)
    82f8:	10800044 	addi	r2,r2,1
    82fc:	e0bffe15 	stw	r2,-8(fp)
    8300:	e0fffe17 	ldw	r3,-8(fp)
    8304:	00800134 	movhi	r2,4
    8308:	10bf0004 	addi	r2,r2,-1024
    830c:	10ffe80e 	bge	r2,r3,82b0 <generateVector+0x2c>
}
    8310:	0001883a 	nop
    8314:	0001883a 	nop
    8318:	e6ffff04 	addi	sp,fp,-4
    831c:	dfc00217 	ldw	ra,8(sp)
    8320:	df000117 	ldw	fp,4(sp)
    8324:	dc000017 	ldw	r16,0(sp)
    8328:	dec00304 	addi	sp,sp,12
    832c:	f800283a 	ret

00008330 <sumVector>:

float sumVector(float x[0], int M)
{
    8330:	defff904 	addi	sp,sp,-28
    8334:	dfc00615 	stw	ra,24(sp)
    8338:	df000515 	stw	fp,20(sp)
    833c:	dc000415 	stw	r16,16(sp)
    8340:	df000504 	addi	fp,sp,20
    8344:	e13ffc15 	stw	r4,-16(fp)
    8348:	e17ffb15 	stw	r5,-20(fp)
  float sum = 0;
    834c:	e03ffe15 	stw	zero,-8(fp)
  for (int i = 0; i < M; i++) sum += (x[i] + x[i] * x[i]);
    8350:	e03ffd15 	stw	zero,-12(fp)
    8354:	00002006 	br	83d8 <sumVector+0xa8>
    8358:	e0bffd17 	ldw	r2,-12(fp)
    835c:	100490ba 	slli	r2,r2,2
    8360:	e0fffc17 	ldw	r3,-16(fp)
    8364:	1885883a 	add	r2,r3,r2
    8368:	14000017 	ldw	r16,0(r2)
    836c:	e0bffd17 	ldw	r2,-12(fp)
    8370:	100490ba 	slli	r2,r2,2
    8374:	e0fffc17 	ldw	r3,-16(fp)
    8378:	1885883a 	add	r2,r3,r2
    837c:	11000017 	ldw	r4,0(r2)
    8380:	e0bffd17 	ldw	r2,-12(fp)
    8384:	100490ba 	slli	r2,r2,2
    8388:	e0fffc17 	ldw	r3,-16(fp)
    838c:	1885883a 	add	r2,r3,r2
    8390:	10c00017 	ldw	r3,0(r2)
    8394:	180b883a 	mov	r5,r3
    8398:	000890c0 	call	890c <__mulsf3>
    839c:	1007883a 	mov	r3,r2
    83a0:	1805883a 	mov	r2,r3
    83a4:	100b883a 	mov	r5,r2
    83a8:	8009883a 	mov	r4,r16
    83ac:	00084b00 	call	84b0 <__addsf3>
    83b0:	1007883a 	mov	r3,r2
    83b4:	1805883a 	mov	r2,r3
    83b8:	100b883a 	mov	r5,r2
    83bc:	e13ffe17 	ldw	r4,-8(fp)
    83c0:	00084b00 	call	84b0 <__addsf3>
    83c4:	1007883a 	mov	r3,r2
    83c8:	e0fffe15 	stw	r3,-8(fp)
    83cc:	e0bffd17 	ldw	r2,-12(fp)
    83d0:	10800044 	addi	r2,r2,1
    83d4:	e0bffd15 	stw	r2,-12(fp)
    83d8:	e0fffd17 	ldw	r3,-12(fp)
    83dc:	e0bffb17 	ldw	r2,-20(fp)
    83e0:	18bfdd16 	blt	r3,r2,8358 <sumVector+0x28>
  return sum;
    83e4:	e0bffe17 	ldw	r2,-8(fp)
    83e8:	1007883a 	mov	r3,r2
}
    83ec:	1805883a 	mov	r2,r3
    83f0:	e6ffff04 	addi	sp,fp,-4
    83f4:	dfc00217 	ldw	ra,8(sp)
    83f8:	df000117 	ldw	fp,4(sp)
    83fc:	dc000017 	ldw	r16,0(sp)
    8400:	dec00304 	addi	sp,sp,12
    8404:	f800283a 	ret

00008408 <main>:

int main()
{
    8408:	defffe04 	addi	sp,sp,-8
    840c:	dfc00115 	stw	ra,4(sp)
    8410:	df000015 	stw	fp,0(sp)
    8414:	d839883a 	mov	fp,sp
    8418:	023ffc34 	movhi	r8,65520
    841c:	4203ef04 	addi	r8,r8,4028
    8420:	da37883a 	add	sp,sp,r8
  printf("Task 2!\n");
    8424:	01000074 	movhi	r4,1
    8428:	212c4e04 	addi	r4,r4,-20168
    842c:	0008efc0 	call	8efc <puts>
  float x[N];

  // Returned result
  float y;

  generateVector(x);
    8430:	00bffc34 	movhi	r2,65520
    8434:	1083fc04 	addi	r2,r2,4080
    8438:	e085883a 	add	r2,fp,r2
    843c:	1009883a 	mov	r4,r2
    8440:	00082840 	call	8284 <generateVector>

  // The following is used for timing
  char buf[50];
  clock_t exec_t1, exec_t2;

  exec_t1 = times(NULL);
    8444:	0009883a 	mov	r4,zero
    8448:	00099240 	call	9924 <times>
    844c:	e0bfff15 	stw	r2,-4(fp)

  // The code that you want to time goes here
  y = sumVector(x, N);
    8450:	00bffc34 	movhi	r2,65520
    8454:	1083fc04 	addi	r2,r2,4080
    8458:	e085883a 	add	r2,fp,r2
    845c:	01400134 	movhi	r5,4
    8460:	297f0044 	addi	r5,r5,-1023
    8464:	1009883a 	mov	r4,r2
    8468:	00083300 	call	8330 <sumVector>
    846c:	e0bffe15 	stw	r2,-8(fp)

  // till here
  exec_t2 = times(NULL);
    8470:	0009883a 	mov	r4,zero
    8474:	00099240 	call	9924 <times>
    8478:	e0bffd15 	stw	r2,-12(fp)

  // int i;
  // for (i = 0; i < 10; i++) y = y/2.0;

  printf("RESULT: %d\n", (int)y >> 10);
    847c:	e13ffe17 	ldw	r4,-8(fp)
    8480:	0008d080 	call	8d08 <__fixsfsi>
    8484:	1005d2ba 	srai	r2,r2,10
    8488:	100b883a 	mov	r5,r2
    848c:	01000074 	movhi	r4,1
    8490:	212c5004 	addi	r4,r4,-20160
    8494:	0008e300 	call	8e30 <printf>
  // gcvt((exec_t2 - exec_t1), 10, buf);
  // alt_putstr(" proc time = ");
  // alt_putstr(buf);
  // alt_putstr(" ticks \n");

  return 0;
    8498:	0005883a 	mov	r2,zero
}
    849c:	e037883a 	mov	sp,fp
    84a0:	dfc00117 	ldw	ra,4(sp)
    84a4:	df000017 	ldw	fp,0(sp)
    84a8:	dec00204 	addi	sp,sp,8
    84ac:	f800283a 	ret

000084b0 <__addsf3>:
    84b0:	280cd5fa 	srli	r6,r5,23
    84b4:	2006d5fa 	srli	r3,r4,23
    84b8:	2010d7fa 	srli	r8,r4,31
    84bc:	01c02034 	movhi	r7,128
    84c0:	2818d7fa 	srli	r12,r5,31
    84c4:	defffc04 	addi	sp,sp,-16
    84c8:	39ffffc4 	addi	r7,r7,-1
    84cc:	3914703a 	and	r10,r7,r4
    84d0:	32403fcc 	andi	r9,r6,255
    84d4:	dc800215 	stw	r18,8(sp)
    84d8:	dc400115 	stw	r17,4(sp)
    84dc:	395a703a 	and	r13,r7,r5
    84e0:	1c403fcc 	andi	r17,r3,255
    84e4:	dfc00315 	stw	ra,12(sp)
    84e8:	dc000015 	stw	r16,0(sp)
    84ec:	501c90fa 	slli	r14,r10,3
    84f0:	681690fa 	slli	r11,r13,3
    84f4:	500d883a 	mov	r6,r10
    84f8:	4025883a 	mov	r18,r8
    84fc:	8a45c83a 	sub	r2,r17,r9
    8500:	43004b26 	beq	r8,r12,8630 <__addsf3+0x180>
    8504:	0080390e 	bge	zero,r2,85ec <__addsf3+0x13c>
    8508:	48006326 	beq	r9,zero,8698 <__addsf3+0x1e8>
    850c:	88c03fe0 	cmpeqi	r3,r17,255
    8510:	1800401e 	bne	r3,zero,8614 <__addsf3+0x164>
    8514:	5ac10034 	orhi	r11,r11,1024
    8518:	10c00708 	cmpgei	r3,r2,28
    851c:	1800ab1e 	bne	r3,zero,87cc <__addsf3+0x31c>
    8520:	01000804 	movi	r4,32
    8524:	2089c83a 	sub	r4,r4,r2
    8528:	5908983a 	sll	r4,r11,r4
    852c:	5884d83a 	srl	r2,r11,r2
    8530:	2008c03a 	cmpne	r4,r4,zero
    8534:	1104b03a 	or	r2,r2,r4
    8538:	7085c83a 	sub	r2,r14,r2
    853c:	10c1002c 	andhi	r3,r2,1024
    8540:	18008526 	beq	r3,zero,8758 <__addsf3+0x2a8>
    8544:	04010034 	movhi	r16,1024
    8548:	843fffc4 	addi	r16,r16,-1
    854c:	1420703a 	and	r16,r2,r16
    8550:	8009883a 	mov	r4,r16
    8554:	0008d780 	call	8d78 <__clzsi2>
    8558:	10fffec4 	addi	r3,r2,-5
    855c:	80c4983a 	sll	r2,r16,r3
    8560:	1c409516 	blt	r3,r17,87b8 <__addsf3+0x308>
    8564:	1c47c83a 	sub	r3,r3,r17
    8568:	1c000044 	addi	r16,r3,1
    856c:	01000804 	movi	r4,32
    8570:	2409c83a 	sub	r4,r4,r16
    8574:	1108983a 	sll	r4,r2,r4
    8578:	1404d83a 	srl	r2,r2,r16
    857c:	0023883a 	mov	r17,zero
    8580:	2008c03a 	cmpne	r4,r4,zero
    8584:	1104b03a 	or	r2,r2,r4
    8588:	10c001cc 	andi	r3,r2,7
    858c:	18000426 	beq	r3,zero,85a0 <__addsf3+0xf0>
    8590:	10c003cc 	andi	r3,r2,15
    8594:	18c00120 	cmpeqi	r3,r3,4
    8598:	1800011e 	bne	r3,zero,85a0 <__addsf3+0xf0>
    859c:	10800104 	addi	r2,r2,4
    85a0:	10c1002c 	andhi	r3,r2,1024
    85a4:	18006e26 	beq	r3,zero,8760 <__addsf3+0x2b0>
    85a8:	88c00044 	addi	r3,r17,1
    85ac:	19003fe0 	cmpeqi	r4,r3,255
    85b0:	20006d1e 	bne	r4,zero,8768 <__addsf3+0x2b8>
    85b4:	100491ba 	slli	r2,r2,6
    85b8:	100cd27a 	srli	r6,r2,9
    85bc:	18803fcc 	andi	r2,r3,255
    85c0:	100495fa 	slli	r2,r2,23
    85c4:	94803fcc 	andi	r18,r18,255
    85c8:	902497fa 	slli	r18,r18,31
    85cc:	1184b03a 	or	r2,r2,r6
    85d0:	1484b03a 	or	r2,r2,r18
    85d4:	dfc00317 	ldw	ra,12(sp)
    85d8:	dc800217 	ldw	r18,8(sp)
    85dc:	dc400117 	ldw	r17,4(sp)
    85e0:	dc000017 	ldw	r16,0(sp)
    85e4:	dec00404 	addi	sp,sp,16
    85e8:	f800283a 	ret
    85ec:	10003026 	beq	r2,zero,86b0 <__addsf3+0x200>
    85f0:	4c49c83a 	sub	r4,r9,r17
    85f4:	88007f1e 	bne	r17,zero,87f4 <__addsf3+0x344>
    85f8:	70003f26 	beq	r14,zero,86f8 <__addsf3+0x248>
    85fc:	213fffc4 	addi	r4,r4,-1
    8600:	2000b326 	beq	r4,zero,88d0 <__addsf3+0x420>
    8604:	48803fe0 	cmpeqi	r2,r9,255
    8608:	10007d26 	beq	r2,zero,8800 <__addsf3+0x350>
    860c:	6025883a 	mov	r18,r12
    8610:	6815883a 	mov	r10,r13
    8614:	50005426 	beq	r10,zero,8768 <__addsf3+0x2b8>
    8618:	00802034 	movhi	r2,128
    861c:	51801034 	orhi	r6,r10,64
    8620:	10bfffc4 	addi	r2,r2,-1
    8624:	308c703a 	and	r6,r6,r2
    8628:	00ffffc4 	movi	r3,-1
    862c:	003fe306 	br	85bc <__addsf3+0x10c>
    8630:	0080500e 	bge	zero,r2,8774 <__addsf3+0x2c4>
    8634:	48002a26 	beq	r9,zero,86e0 <__addsf3+0x230>
    8638:	88c03fe0 	cmpeqi	r3,r17,255
    863c:	183ff51e 	bne	r3,zero,8614 <__addsf3+0x164>
    8640:	5ac10034 	orhi	r11,r11,1024
    8644:	10c00708 	cmpgei	r3,r2,28
    8648:	1800741e 	bne	r3,zero,881c <__addsf3+0x36c>
    864c:	00c00804 	movi	r3,32
    8650:	1887c83a 	sub	r3,r3,r2
    8654:	58c6983a 	sll	r3,r11,r3
    8658:	5884d83a 	srl	r2,r11,r2
    865c:	1806c03a 	cmpne	r3,r3,zero
    8660:	10c4b03a 	or	r2,r2,r3
    8664:	1385883a 	add	r2,r2,r14
    8668:	10c1002c 	andhi	r3,r2,1024
    866c:	18003a26 	beq	r3,zero,8758 <__addsf3+0x2a8>
    8670:	8c400044 	addi	r17,r17,1
    8674:	88c03fe0 	cmpeqi	r3,r17,255
    8678:	18003b1e 	bne	r3,zero,8768 <__addsf3+0x2b8>
    867c:	1008d07a 	srli	r4,r2,1
    8680:	00df8034 	movhi	r3,32256
    8684:	18ffffc4 	addi	r3,r3,-1
    8688:	1080004c 	andi	r2,r2,1
    868c:	20c8703a 	and	r4,r4,r3
    8690:	2084b03a 	or	r2,r4,r2
    8694:	003fbc06 	br	8588 <__addsf3+0xd8>
    8698:	58001a26 	beq	r11,zero,8704 <__addsf3+0x254>
    869c:	10bfffc4 	addi	r2,r2,-1
    86a0:	10007c26 	beq	r2,zero,8894 <__addsf3+0x3e4>
    86a4:	88c03fe0 	cmpeqi	r3,r17,255
    86a8:	183f9b26 	beq	r3,zero,8518 <__addsf3+0x68>
    86ac:	003fd906 	br	8614 <__addsf3+0x164>
    86b0:	88800044 	addi	r2,r17,1
    86b4:	10803f8c 	andi	r2,r2,254
    86b8:	1000461e 	bne	r2,zero,87d4 <__addsf3+0x324>
    86bc:	88006e1e 	bne	r17,zero,8878 <__addsf3+0x3c8>
    86c0:	70007f26 	beq	r14,zero,88c0 <__addsf3+0x410>
    86c4:	583fbd26 	beq	r11,zero,85bc <__addsf3+0x10c>
    86c8:	72c5c83a 	sub	r2,r14,r11
    86cc:	1101002c 	andhi	r4,r2,1024
    86d0:	20008326 	beq	r4,zero,88e0 <__addsf3+0x430>
    86d4:	5b85c83a 	sub	r2,r11,r14
    86d8:	6025883a 	mov	r18,r12
    86dc:	003faa06 	br	8588 <__addsf3+0xd8>
    86e0:	58000826 	beq	r11,zero,8704 <__addsf3+0x254>
    86e4:	10bfffc4 	addi	r2,r2,-1
    86e8:	10006826 	beq	r2,zero,888c <__addsf3+0x3dc>
    86ec:	88c03fe0 	cmpeqi	r3,r17,255
    86f0:	183fd426 	beq	r3,zero,8644 <__addsf3+0x194>
    86f4:	003fc706 	br	8614 <__addsf3+0x164>
    86f8:	6025883a 	mov	r18,r12
    86fc:	6815883a 	mov	r10,r13
    8700:	4823883a 	mov	r17,r9
    8704:	88803fe0 	cmpeqi	r2,r17,255
    8708:	103fc21e 	bne	r2,zero,8614 <__addsf3+0x164>
    870c:	00802034 	movhi	r2,128
    8710:	10bfffc4 	addi	r2,r2,-1
    8714:	508c703a 	and	r6,r10,r2
    8718:	8807883a 	mov	r3,r17
    871c:	003fa706 	br	85bc <__addsf3+0x10c>
    8720:	881f883a 	mov	r15,r17
    8724:	8c400044 	addi	r17,r17,1
    8728:	88803f8c 	andi	r2,r17,254
    872c:	10004a1e 	bne	r2,zero,8858 <__addsf3+0x3a8>
    8730:	78005a1e 	bne	r15,zero,889c <__addsf3+0x3ec>
    8734:	70006e26 	beq	r14,zero,88f0 <__addsf3+0x440>
    8738:	583fa026 	beq	r11,zero,85bc <__addsf3+0x10c>
    873c:	72c5883a 	add	r2,r14,r11
    8740:	10c1002c 	andhi	r3,r2,1024
    8744:	18006f26 	beq	r3,zero,8904 <__addsf3+0x454>
    8748:	00ff0034 	movhi	r3,64512
    874c:	18ffffc4 	addi	r3,r3,-1
    8750:	10c4703a 	and	r2,r2,r3
    8754:	04400044 	movi	r17,1
    8758:	10c001cc 	andi	r3,r2,7
    875c:	183f8c1e 	bne	r3,zero,8590 <__addsf3+0xe0>
    8760:	1014d0fa 	srli	r10,r2,3
    8764:	003fe706 	br	8704 <__addsf3+0x254>
    8768:	00ffffc4 	movi	r3,-1
    876c:	000d883a 	mov	r6,zero
    8770:	003f9206 	br	85bc <__addsf3+0x10c>
    8774:	103fea26 	beq	r2,zero,8720 <__addsf3+0x270>
    8778:	4c49c83a 	sub	r4,r9,r17
    877c:	88003026 	beq	r17,zero,8840 <__addsf3+0x390>
    8780:	48803fe0 	cmpeqi	r2,r9,255
    8784:	103fa21e 	bne	r2,zero,8610 <__addsf3+0x160>
    8788:	73810034 	orhi	r14,r14,1024
    878c:	20800708 	cmpgei	r2,r4,28
    8790:	1000491e 	bne	r2,zero,88b8 <__addsf3+0x408>
    8794:	00800804 	movi	r2,32
    8798:	1105c83a 	sub	r2,r2,r4
    879c:	7084983a 	sll	r2,r14,r2
    87a0:	7108d83a 	srl	r4,r14,r4
    87a4:	1004c03a 	cmpne	r2,r2,zero
    87a8:	2088b03a 	or	r4,r4,r2
    87ac:	22c5883a 	add	r2,r4,r11
    87b0:	4823883a 	mov	r17,r9
    87b4:	003fac06 	br	8668 <__addsf3+0x1b8>
    87b8:	013f0034 	movhi	r4,64512
    87bc:	213fffc4 	addi	r4,r4,-1
    87c0:	88e3c83a 	sub	r17,r17,r3
    87c4:	1104703a 	and	r2,r2,r4
    87c8:	003f6f06 	br	8588 <__addsf3+0xd8>
    87cc:	00800044 	movi	r2,1
    87d0:	003f5906 	br	8538 <__addsf3+0x88>
    87d4:	72e1c83a 	sub	r16,r14,r11
    87d8:	8081002c 	andhi	r2,r16,1024
    87dc:	1000231e 	bne	r2,zero,886c <__addsf3+0x3bc>
    87e0:	803f5b1e 	bne	r16,zero,8550 <__addsf3+0xa0>
    87e4:	0025883a 	mov	r18,zero
    87e8:	0007883a 	mov	r3,zero
    87ec:	000d883a 	mov	r6,zero
    87f0:	003f7206 	br	85bc <__addsf3+0x10c>
    87f4:	48803fe0 	cmpeqi	r2,r9,255
    87f8:	103f841e 	bne	r2,zero,860c <__addsf3+0x15c>
    87fc:	73810034 	orhi	r14,r14,1024
    8800:	20800708 	cmpgei	r2,r4,28
    8804:	10000726 	beq	r2,zero,8824 <__addsf3+0x374>
    8808:	01000044 	movi	r4,1
    880c:	5905c83a 	sub	r2,r11,r4
    8810:	6025883a 	mov	r18,r12
    8814:	4823883a 	mov	r17,r9
    8818:	003f4806 	br	853c <__addsf3+0x8c>
    881c:	00800044 	movi	r2,1
    8820:	003f9006 	br	8664 <__addsf3+0x1b4>
    8824:	00800804 	movi	r2,32
    8828:	1105c83a 	sub	r2,r2,r4
    882c:	7084983a 	sll	r2,r14,r2
    8830:	7108d83a 	srl	r4,r14,r4
    8834:	1004c03a 	cmpne	r2,r2,zero
    8838:	2088b03a 	or	r4,r4,r2
    883c:	003ff306 	br	880c <__addsf3+0x35c>
    8840:	703fae26 	beq	r14,zero,86fc <__addsf3+0x24c>
    8844:	213fffc4 	addi	r4,r4,-1
    8848:	20002b26 	beq	r4,zero,88f8 <__addsf3+0x448>
    884c:	48803fe0 	cmpeqi	r2,r9,255
    8850:	103fce26 	beq	r2,zero,878c <__addsf3+0x2dc>
    8854:	003f6e06 	br	8610 <__addsf3+0x160>
    8858:	88803fe0 	cmpeqi	r2,r17,255
    885c:	103fc21e 	bne	r2,zero,8768 <__addsf3+0x2b8>
    8860:	72c5883a 	add	r2,r14,r11
    8864:	1004d07a 	srli	r2,r2,1
    8868:	003fbb06 	br	8758 <__addsf3+0x2a8>
    886c:	5ba1c83a 	sub	r16,r11,r14
    8870:	6025883a 	mov	r18,r12
    8874:	003f3606 	br	8550 <__addsf3+0xa0>
    8878:	7000091e 	bne	r14,zero,88a0 <__addsf3+0x3f0>
    887c:	583f631e 	bne	r11,zero,860c <__addsf3+0x15c>
    8880:	0025883a 	mov	r18,zero
    8884:	380d883a 	mov	r6,r7
    8888:	003f6706 	br	8628 <__addsf3+0x178>
    888c:	72c5883a 	add	r2,r14,r11
    8890:	003f7506 	br	8668 <__addsf3+0x1b8>
    8894:	72c5c83a 	sub	r2,r14,r11
    8898:	003f2806 	br	853c <__addsf3+0x8c>
    889c:	703f5c26 	beq	r14,zero,8610 <__addsf3+0x160>
    88a0:	583f5c26 	beq	r11,zero,8614 <__addsf3+0x164>
    88a4:	20c0102c 	andhi	r3,r4,64
    88a8:	183f5a26 	beq	r3,zero,8614 <__addsf3+0x164>
    88ac:	2940102c 	andhi	r5,r5,64
    88b0:	283f581e 	bne	r5,zero,8614 <__addsf3+0x164>
    88b4:	003f5506 	br	860c <__addsf3+0x15c>
    88b8:	01000044 	movi	r4,1
    88bc:	003fbb06 	br	87ac <__addsf3+0x2fc>
    88c0:	58000826 	beq	r11,zero,88e4 <__addsf3+0x434>
    88c4:	6025883a 	mov	r18,r12
    88c8:	680d883a 	mov	r6,r13
    88cc:	003f3b06 	br	85bc <__addsf3+0x10c>
    88d0:	5b85c83a 	sub	r2,r11,r14
    88d4:	6025883a 	mov	r18,r12
    88d8:	4823883a 	mov	r17,r9
    88dc:	003f1706 	br	853c <__addsf3+0x8c>
    88e0:	103f9d1e 	bne	r2,zero,8758 <__addsf3+0x2a8>
    88e4:	0025883a 	mov	r18,zero
    88e8:	000d883a 	mov	r6,zero
    88ec:	003f3306 	br	85bc <__addsf3+0x10c>
    88f0:	680d883a 	mov	r6,r13
    88f4:	003f3106 	br	85bc <__addsf3+0x10c>
    88f8:	72c5883a 	add	r2,r14,r11
    88fc:	4823883a 	mov	r17,r9
    8900:	003f5906 	br	8668 <__addsf3+0x1b8>
    8904:	0023883a 	mov	r17,zero
    8908:	003f9306 	br	8758 <__addsf3+0x2a8>

0000890c <__mulsf3>:
    890c:	defff504 	addi	sp,sp,-44
    8910:	dc400215 	stw	r17,8(sp)
    8914:	2022d5fa 	srli	r17,r4,23
    8918:	dc000115 	stw	r16,4(sp)
    891c:	04002034 	movhi	r16,128
    8920:	dd800715 	stw	r22,28(sp)
    8924:	843fffc4 	addi	r16,r16,-1
    8928:	dfc00a15 	stw	ra,40(sp)
    892c:	df000915 	stw	fp,36(sp)
    8930:	ddc00815 	stw	r23,32(sp)
    8934:	dd400615 	stw	r21,24(sp)
    8938:	dd000515 	stw	r20,20(sp)
    893c:	dcc00415 	stw	r19,16(sp)
    8940:	dc800315 	stw	r18,12(sp)
    8944:	8c403fcc 	andi	r17,r17,255
    8948:	202cd7fa 	srli	r22,r4,31
    894c:	8120703a 	and	r16,r16,r4
    8950:	88005026 	beq	r17,zero,8a94 <__mulsf3+0x188>
    8954:	88803fe0 	cmpeqi	r2,r17,255
    8958:	1000531e 	bne	r2,zero,8aa8 <__mulsf3+0x19c>
    895c:	802090fa 	slli	r16,r16,3
    8960:	8c7fe044 	addi	r17,r17,-127
    8964:	0025883a 	mov	r18,zero
    8968:	84010034 	orhi	r16,r16,1024
    896c:	0029883a 	mov	r20,zero
    8970:	2804d5fa 	srli	r2,r5,23
    8974:	01002034 	movhi	r4,128
    8978:	213fffc4 	addi	r4,r4,-1
    897c:	10803fcc 	andi	r2,r2,255
    8980:	282ed7fa 	srli	r23,r5,31
    8984:	2166703a 	and	r19,r4,r5
    8988:	10004c26 	beq	r2,zero,8abc <__mulsf3+0x1b0>
    898c:	10c03fe0 	cmpeqi	r3,r2,255
    8990:	18001e1e 	bne	r3,zero,8a0c <__mulsf3+0x100>
    8994:	980890fa 	slli	r4,r19,3
    8998:	10bfe044 	addi	r2,r2,-127
    899c:	88a3883a 	add	r17,r17,r2
    89a0:	24c10034 	orhi	r19,r4,1024
    89a4:	0007883a 	mov	r3,zero
    89a8:	90800428 	cmpgeui	r2,r18,16
    89ac:	b5eaf03a 	xor	r21,r22,r23
    89b0:	8f000044 	addi	fp,r17,1
    89b4:	1000481e 	bne	r2,zero,8ad8 <__mulsf3+0x1cc>
    89b8:	902490ba 	slli	r18,r18,2
    89bc:	00800074 	movhi	r2,1
    89c0:	9085883a 	add	r2,r18,r2
    89c4:	10a27317 	ldw	r2,-30260(r2)
    89c8:	1000683a 	jmp	r2
    89cc:	00008ad8 	cmpnei	zero,zero,555
    89d0:	00008a24 	muli	zero,zero,552
    89d4:	00008a24 	muli	zero,zero,552
    89d8:	00008a20 	cmpeqi	zero,zero,552
    89dc:	00008a2c 	andhi	zero,zero,552
    89e0:	00008a2c 	andhi	zero,zero,552
    89e4:	00008c38 	rdprs	zero,zero,560
    89e8:	00008a20 	cmpeqi	zero,zero,552
    89ec:	00008a2c 	andhi	zero,zero,552
    89f0:	00008c38 	rdprs	zero,zero,560
    89f4:	00008a2c 	andhi	zero,zero,552
    89f8:	00008a20 	cmpeqi	zero,zero,552
    89fc:	00008bc8 	cmpgei	zero,zero,559
    8a00:	00008bc8 	cmpgei	zero,zero,559
    8a04:	00008bc8 	cmpgei	zero,zero,559
    8a08:	00008c9c 	xori	zero,zero,562
    8a0c:	8c403fc4 	addi	r17,r17,255
    8a10:	98006f1e 	bne	r19,zero,8bd0 <__mulsf3+0x2c4>
    8a14:	94800094 	ori	r18,r18,2
    8a18:	00c00084 	movi	r3,2
    8a1c:	003fe206 	br	89a8 <__mulsf3+0x9c>
    8a20:	b82b883a 	mov	r21,r23
    8a24:	9821883a 	mov	r16,r19
    8a28:	1829883a 	mov	r20,r3
    8a2c:	a08000a0 	cmpeqi	r2,r20,2
    8a30:	1000261e 	bne	r2,zero,8acc <__mulsf3+0x1c0>
    8a34:	a08000e0 	cmpeqi	r2,r20,3
    8a38:	1000ae1e 	bne	r2,zero,8cf4 <__mulsf3+0x3e8>
    8a3c:	a0800060 	cmpeqi	r2,r20,1
    8a40:	10004e26 	beq	r2,zero,8b7c <__mulsf3+0x270>
    8a44:	0007883a 	mov	r3,zero
    8a48:	0009883a 	mov	r4,zero
    8a4c:	1c003fcc 	andi	r16,r3,255
    8a50:	a8803fcc 	andi	r2,r21,255
    8a54:	802095fa 	slli	r16,r16,23
    8a58:	100497fa 	slli	r2,r2,31
    8a5c:	8120b03a 	or	r16,r16,r4
    8a60:	8084b03a 	or	r2,r16,r2
    8a64:	dfc00a17 	ldw	ra,40(sp)
    8a68:	df000917 	ldw	fp,36(sp)
    8a6c:	ddc00817 	ldw	r23,32(sp)
    8a70:	dd800717 	ldw	r22,28(sp)
    8a74:	dd400617 	ldw	r21,24(sp)
    8a78:	dd000517 	ldw	r20,20(sp)
    8a7c:	dcc00417 	ldw	r19,16(sp)
    8a80:	dc800317 	ldw	r18,12(sp)
    8a84:	dc400217 	ldw	r17,8(sp)
    8a88:	dc000117 	ldw	r16,4(sp)
    8a8c:	dec00b04 	addi	sp,sp,44
    8a90:	f800283a 	ret
    8a94:	80005d1e 	bne	r16,zero,8c0c <__mulsf3+0x300>
    8a98:	04800104 	movi	r18,4
    8a9c:	0023883a 	mov	r17,zero
    8aa0:	05000044 	movi	r20,1
    8aa4:	003fb206 	br	8970 <__mulsf3+0x64>
    8aa8:	8000541e 	bne	r16,zero,8bfc <__mulsf3+0x2f0>
    8aac:	04800204 	movi	r18,8
    8ab0:	04403fc4 	movi	r17,255
    8ab4:	05000084 	movi	r20,2
    8ab8:	003fad06 	br	8970 <__mulsf3+0x64>
    8abc:	9800471e 	bne	r19,zero,8bdc <__mulsf3+0x2d0>
    8ac0:	94800054 	ori	r18,r18,1
    8ac4:	00c00044 	movi	r3,1
    8ac8:	003fb706 	br	89a8 <__mulsf3+0x9c>
    8acc:	00ffffc4 	movi	r3,-1
    8ad0:	0009883a 	mov	r4,zero
    8ad4:	003fdd06 	br	8a4c <__mulsf3+0x140>
    8ad8:	8028d43a 	srli	r20,r16,16
    8adc:	9cbfffcc 	andi	r18,r19,65535
    8ae0:	843fffcc 	andi	r16,r16,65535
    8ae4:	900b883a 	mov	r5,r18
    8ae8:	8009883a 	mov	r4,r16
    8aec:	0008dcc0 	call	8dcc <__mulsi3>
    8af0:	9826d43a 	srli	r19,r19,16
    8af4:	900b883a 	mov	r5,r18
    8af8:	a009883a 	mov	r4,r20
    8afc:	1025883a 	mov	r18,r2
    8b00:	0008dcc0 	call	8dcc <__mulsi3>
    8b04:	980b883a 	mov	r5,r19
    8b08:	a009883a 	mov	r4,r20
    8b0c:	1029883a 	mov	r20,r2
    8b10:	0008dcc0 	call	8dcc <__mulsi3>
    8b14:	9809883a 	mov	r4,r19
    8b18:	800b883a 	mov	r5,r16
    8b1c:	1027883a 	mov	r19,r2
    8b20:	0008dcc0 	call	8dcc <__mulsi3>
    8b24:	9006d43a 	srli	r3,r18,16
    8b28:	1505883a 	add	r2,r2,r20
    8b2c:	1887883a 	add	r3,r3,r2
    8b30:	1d00022e 	bgeu	r3,r20,8b3c <__mulsf3+0x230>
    8b34:	00800074 	movhi	r2,1
    8b38:	98a7883a 	add	r19,r19,r2
    8b3c:	1808943a 	slli	r4,r3,16
    8b40:	1820d43a 	srli	r16,r3,16
    8b44:	94bfffcc 	andi	r18,r18,65535
    8b48:	2489883a 	add	r4,r4,r18
    8b4c:	200a91ba 	slli	r5,r4,6
    8b50:	84e1883a 	add	r16,r16,r19
    8b54:	802091ba 	slli	r16,r16,6
    8b58:	2008d6ba 	srli	r4,r4,26
    8b5c:	2804c03a 	cmpne	r2,r5,zero
    8b60:	80c2002c 	andhi	r3,r16,2048
    8b64:	1108b03a 	or	r4,r2,r4
    8b68:	8120b03a 	or	r16,r16,r4
    8b6c:	18005b26 	beq	r3,zero,8cdc <__mulsf3+0x3d0>
    8b70:	8004d07a 	srli	r2,r16,1
    8b74:	8400004c 	andi	r16,r16,1
    8b78:	1420b03a 	or	r16,r2,r16
    8b7c:	e0c01fc4 	addi	r3,fp,127
    8b80:	00c0320e 	bge	zero,r3,8c4c <__mulsf3+0x340>
    8b84:	808001cc 	andi	r2,r16,7
    8b88:	10000426 	beq	r2,zero,8b9c <__mulsf3+0x290>
    8b8c:	808003cc 	andi	r2,r16,15
    8b90:	10800120 	cmpeqi	r2,r2,4
    8b94:	1000011e 	bne	r2,zero,8b9c <__mulsf3+0x290>
    8b98:	84000104 	addi	r16,r16,4
    8b9c:	8082002c 	andhi	r2,r16,2048
    8ba0:	10000426 	beq	r2,zero,8bb4 <__mulsf3+0x2a8>
    8ba4:	00be0034 	movhi	r2,63488
    8ba8:	10bfffc4 	addi	r2,r2,-1
    8bac:	80a0703a 	and	r16,r16,r2
    8bb0:	e0c02004 	addi	r3,fp,128
    8bb4:	18803fc8 	cmpgei	r2,r3,255
    8bb8:	103fc41e 	bne	r2,zero,8acc <__mulsf3+0x1c0>
    8bbc:	802091ba 	slli	r16,r16,6
    8bc0:	8008d27a 	srli	r4,r16,9
    8bc4:	003fa106 	br	8a4c <__mulsf3+0x140>
    8bc8:	b02b883a 	mov	r21,r22
    8bcc:	003f9706 	br	8a2c <__mulsf3+0x120>
    8bd0:	948000d4 	ori	r18,r18,3
    8bd4:	00c000c4 	movi	r3,3
    8bd8:	003f7306 	br	89a8 <__mulsf3+0x9c>
    8bdc:	9809883a 	mov	r4,r19
    8be0:	0008d780 	call	8d78 <__clzsi2>
    8be4:	10fffec4 	addi	r3,r2,-5
    8be8:	88a3c83a 	sub	r17,r17,r2
    8bec:	98e6983a 	sll	r19,r19,r3
    8bf0:	8c7fe284 	addi	r17,r17,-118
    8bf4:	0007883a 	mov	r3,zero
    8bf8:	003f6b06 	br	89a8 <__mulsf3+0x9c>
    8bfc:	04800304 	movi	r18,12
    8c00:	04403fc4 	movi	r17,255
    8c04:	050000c4 	movi	r20,3
    8c08:	003f5906 	br	8970 <__mulsf3+0x64>
    8c0c:	8009883a 	mov	r4,r16
    8c10:	d9400015 	stw	r5,0(sp)
    8c14:	0008d780 	call	8d78 <__clzsi2>
    8c18:	10fffec4 	addi	r3,r2,-5
    8c1c:	047fe284 	movi	r17,-118
    8c20:	80e0983a 	sll	r16,r16,r3
    8c24:	d9400017 	ldw	r5,0(sp)
    8c28:	88a3c83a 	sub	r17,r17,r2
    8c2c:	0025883a 	mov	r18,zero
    8c30:	0029883a 	mov	r20,zero
    8c34:	003f4e06 	br	8970 <__mulsf3+0x64>
    8c38:	01002034 	movhi	r4,128
    8c3c:	002b883a 	mov	r21,zero
    8c40:	213fffc4 	addi	r4,r4,-1
    8c44:	00ffffc4 	movi	r3,-1
    8c48:	003f8006 	br	8a4c <__mulsf3+0x140>
    8c4c:	00800044 	movi	r2,1
    8c50:	10c7c83a 	sub	r3,r2,r3
    8c54:	18800708 	cmpgei	r2,r3,28
    8c58:	103f7a1e 	bne	r2,zero,8a44 <__mulsf3+0x138>
    8c5c:	e1002784 	addi	r4,fp,158
    8c60:	8108983a 	sll	r4,r16,r4
    8c64:	80e0d83a 	srl	r16,r16,r3
    8c68:	2008c03a 	cmpne	r4,r4,zero
    8c6c:	8120b03a 	or	r16,r16,r4
    8c70:	808001cc 	andi	r2,r16,7
    8c74:	10000426 	beq	r2,zero,8c88 <__mulsf3+0x37c>
    8c78:	808003cc 	andi	r2,r16,15
    8c7c:	10800120 	cmpeqi	r2,r2,4
    8c80:	1000011e 	bne	r2,zero,8c88 <__mulsf3+0x37c>
    8c84:	84000104 	addi	r16,r16,4
    8c88:	8081002c 	andhi	r2,r16,1024
    8c8c:	10001526 	beq	r2,zero,8ce4 <__mulsf3+0x3d8>
    8c90:	00c00044 	movi	r3,1
    8c94:	0009883a 	mov	r4,zero
    8c98:	003f6c06 	br	8a4c <__mulsf3+0x140>
    8c9c:	8080102c 	andhi	r2,r16,64
    8ca0:	10000826 	beq	r2,zero,8cc4 <__mulsf3+0x3b8>
    8ca4:	9880102c 	andhi	r2,r19,64
    8ca8:	1000061e 	bne	r2,zero,8cc4 <__mulsf3+0x3b8>
    8cac:	00802034 	movhi	r2,128
    8cb0:	99001034 	orhi	r4,r19,64
    8cb4:	10bfffc4 	addi	r2,r2,-1
    8cb8:	2088703a 	and	r4,r4,r2
    8cbc:	b82b883a 	mov	r21,r23
    8cc0:	003fe006 	br	8c44 <__mulsf3+0x338>
    8cc4:	00802034 	movhi	r2,128
    8cc8:	81001034 	orhi	r4,r16,64
    8ccc:	10bfffc4 	addi	r2,r2,-1
    8cd0:	2088703a 	and	r4,r4,r2
    8cd4:	b02b883a 	mov	r21,r22
    8cd8:	003fda06 	br	8c44 <__mulsf3+0x338>
    8cdc:	8839883a 	mov	fp,r17
    8ce0:	003fa606 	br	8b7c <__mulsf3+0x270>
    8ce4:	802091ba 	slli	r16,r16,6
    8ce8:	0007883a 	mov	r3,zero
    8cec:	8008d27a 	srli	r4,r16,9
    8cf0:	003f5606 	br	8a4c <__mulsf3+0x140>
    8cf4:	00802034 	movhi	r2,128
    8cf8:	81001034 	orhi	r4,r16,64
    8cfc:	10bfffc4 	addi	r2,r2,-1
    8d00:	2088703a 	and	r4,r4,r2
    8d04:	003fcf06 	br	8c44 <__mulsf3+0x338>

00008d08 <__fixsfsi>:
    8d08:	200ad5fa 	srli	r5,r4,23
    8d0c:	00c02034 	movhi	r3,128
    8d10:	18ffffc4 	addi	r3,r3,-1
    8d14:	29403fcc 	andi	r5,r5,255
    8d18:	29801ff0 	cmpltui	r6,r5,127
    8d1c:	200ed7fa 	srli	r7,r4,31
    8d20:	1906703a 	and	r3,r3,r4
    8d24:	3000061e 	bne	r6,zero,8d40 <__fixsfsi+0x38>
    8d28:	288027b0 	cmpltui	r2,r5,158
    8d2c:	1000061e 	bne	r2,zero,8d48 <__fixsfsi+0x40>
    8d30:	00a00034 	movhi	r2,32768
    8d34:	10bfffc4 	addi	r2,r2,-1
    8d38:	3885883a 	add	r2,r7,r2
    8d3c:	f800283a 	ret
    8d40:	0005883a 	mov	r2,zero
    8d44:	f800283a 	ret
    8d48:	28802590 	cmplti	r2,r5,150
    8d4c:	18c02034 	orhi	r3,r3,128
    8d50:	1000051e 	bne	r2,zero,8d68 <__fixsfsi+0x60>
    8d54:	28bfda84 	addi	r2,r5,-150
    8d58:	1884983a 	sll	r2,r3,r2
    8d5c:	383ff926 	beq	r7,zero,8d44 <__fixsfsi+0x3c>
    8d60:	0085c83a 	sub	r2,zero,r2
    8d64:	f800283a 	ret
    8d68:	00802584 	movi	r2,150
    8d6c:	1145c83a 	sub	r2,r2,r5
    8d70:	1884d83a 	srl	r2,r3,r2
    8d74:	003ff906 	br	8d5c <__fixsfsi+0x54>

00008d78 <__clzsi2>:
    8d78:	00bfffd4 	movui	r2,65535
    8d7c:	11000436 	bltu	r2,r4,8d90 <__clzsi2+0x18>
    8d80:	20804030 	cmpltui	r2,r4,256
    8d84:	10000e26 	beq	r2,zero,8dc0 <__clzsi2+0x48>
    8d88:	01400804 	movi	r5,32
    8d8c:	00000406 	br	8da0 <__clzsi2+0x28>
    8d90:	00804034 	movhi	r2,256
    8d94:	20800736 	bltu	r4,r2,8db4 <__clzsi2+0x3c>
    8d98:	2008d63a 	srli	r4,r4,24
    8d9c:	01400204 	movi	r5,8
    8da0:	00c00074 	movhi	r3,1
    8da4:	20c7883a 	add	r3,r4,r3
    8da8:	18ac5303 	ldbu	r2,-20148(r3)
    8dac:	2885c83a 	sub	r2,r5,r2
    8db0:	f800283a 	ret
    8db4:	2008d43a 	srli	r4,r4,16
    8db8:	01400404 	movi	r5,16
    8dbc:	003ff806 	br	8da0 <__clzsi2+0x28>
    8dc0:	2008d23a 	srli	r4,r4,8
    8dc4:	01400604 	movi	r5,24
    8dc8:	003ff506 	br	8da0 <__clzsi2+0x28>

00008dcc <__mulsi3>:
    8dcc:	0005883a 	mov	r2,zero
    8dd0:	20000726 	beq	r4,zero,8df0 <__mulsi3+0x24>
    8dd4:	20c0004c 	andi	r3,r4,1
    8dd8:	2008d07a 	srli	r4,r4,1
    8ddc:	18000126 	beq	r3,zero,8de4 <__mulsi3+0x18>
    8de0:	1145883a 	add	r2,r2,r5
    8de4:	294b883a 	add	r5,r5,r5
    8de8:	203ffa1e 	bne	r4,zero,8dd4 <__mulsi3+0x8>
    8dec:	f800283a 	ret
    8df0:	f800283a 	ret

00008df4 <_printf_r>:
    8df4:	defffd04 	addi	sp,sp,-12
    8df8:	dfc00015 	stw	ra,0(sp)
    8dfc:	d9800115 	stw	r6,4(sp)
    8e00:	d9c00215 	stw	r7,8(sp)
    8e04:	21800217 	ldw	r6,8(r4)
    8e08:	00c00074 	movhi	r3,1
    8e0c:	18e53504 	addi	r3,r3,-27436
    8e10:	30c00115 	stw	r3,4(r6)
    8e14:	280d883a 	mov	r6,r5
    8e18:	21400217 	ldw	r5,8(r4)
    8e1c:	d9c00104 	addi	r7,sp,4
    8e20:	0008f940 	call	8f94 <___vfprintf_internal_r>
    8e24:	dfc00017 	ldw	ra,0(sp)
    8e28:	dec00304 	addi	sp,sp,12
    8e2c:	f800283a 	ret

00008e30 <printf>:
    8e30:	defffc04 	addi	sp,sp,-16
    8e34:	dfc00015 	stw	ra,0(sp)
    8e38:	d9400115 	stw	r5,4(sp)
    8e3c:	d9800215 	stw	r6,8(sp)
    8e40:	d9c00315 	stw	r7,12(sp)
    8e44:	00800074 	movhi	r2,1
    8e48:	10ed4e17 	ldw	r3,-19144(r2)
    8e4c:	00800074 	movhi	r2,1
    8e50:	10a53504 	addi	r2,r2,-27436
    8e54:	19400217 	ldw	r5,8(r3)
    8e58:	d9800104 	addi	r6,sp,4
    8e5c:	28800115 	stw	r2,4(r5)
    8e60:	200b883a 	mov	r5,r4
    8e64:	19000217 	ldw	r4,8(r3)
    8e68:	00094bc0 	call	94bc <__vfprintf_internal>
    8e6c:	dfc00017 	ldw	ra,0(sp)
    8e70:	dec00404 	addi	sp,sp,16
    8e74:	f800283a 	ret

00008e78 <_puts_r>:
    8e78:	defffd04 	addi	sp,sp,-12
    8e7c:	dc000015 	stw	r16,0(sp)
    8e80:	2021883a 	mov	r16,r4
    8e84:	2809883a 	mov	r4,r5
    8e88:	dfc00215 	stw	ra,8(sp)
    8e8c:	dc400115 	stw	r17,4(sp)
    8e90:	2823883a 	mov	r17,r5
    8e94:	0008f0c0 	call	8f0c <strlen>
    8e98:	81400217 	ldw	r5,8(r16)
    8e9c:	00c00074 	movhi	r3,1
    8ea0:	18e53504 	addi	r3,r3,-27436
    8ea4:	28c00115 	stw	r3,4(r5)
    8ea8:	100f883a 	mov	r7,r2
    8eac:	880d883a 	mov	r6,r17
    8eb0:	8009883a 	mov	r4,r16
    8eb4:	00094d40 	call	94d4 <__sfvwrite_small_dev>
    8eb8:	10ffffe0 	cmpeqi	r3,r2,-1
    8ebc:	18000a1e 	bne	r3,zero,8ee8 <_puts_r+0x70>
    8ec0:	80800217 	ldw	r2,8(r16)
    8ec4:	81400217 	ldw	r5,8(r16)
    8ec8:	01800074 	movhi	r6,1
    8ecc:	10800117 	ldw	r2,4(r2)
    8ed0:	01c00044 	movi	r7,1
    8ed4:	31ac9304 	addi	r6,r6,-19892
    8ed8:	8009883a 	mov	r4,r16
    8edc:	103ee83a 	callr	r2
    8ee0:	10bfffe0 	cmpeqi	r2,r2,-1
    8ee4:	0085c83a 	sub	r2,zero,r2
    8ee8:	dfc00217 	ldw	ra,8(sp)
    8eec:	dc400117 	ldw	r17,4(sp)
    8ef0:	dc000017 	ldw	r16,0(sp)
    8ef4:	dec00304 	addi	sp,sp,12
    8ef8:	f800283a 	ret

00008efc <puts>:
    8efc:	00800074 	movhi	r2,1
    8f00:	200b883a 	mov	r5,r4
    8f04:	112d4e17 	ldw	r4,-19144(r2)
    8f08:	0008e781 	jmpi	8e78 <_puts_r>

00008f0c <strlen>:
    8f0c:	2005883a 	mov	r2,r4
    8f10:	10c00007 	ldb	r3,0(r2)
    8f14:	1800021e 	bne	r3,zero,8f20 <strlen+0x14>
    8f18:	1105c83a 	sub	r2,r2,r4
    8f1c:	f800283a 	ret
    8f20:	10800044 	addi	r2,r2,1
    8f24:	003ffa06 	br	8f10 <strlen+0x4>

00008f28 <print_repeat>:
    8f28:	defffb04 	addi	sp,sp,-20
    8f2c:	dc800315 	stw	r18,12(sp)
    8f30:	dc400215 	stw	r17,8(sp)
    8f34:	dc000115 	stw	r16,4(sp)
    8f38:	dfc00415 	stw	ra,16(sp)
    8f3c:	2025883a 	mov	r18,r4
    8f40:	2823883a 	mov	r17,r5
    8f44:	d9800005 	stb	r6,0(sp)
    8f48:	3821883a 	mov	r16,r7
    8f4c:	04000716 	blt	zero,r16,8f6c <print_repeat+0x44>
    8f50:	0005883a 	mov	r2,zero
    8f54:	dfc00417 	ldw	ra,16(sp)
    8f58:	dc800317 	ldw	r18,12(sp)
    8f5c:	dc400217 	ldw	r17,8(sp)
    8f60:	dc000117 	ldw	r16,4(sp)
    8f64:	dec00504 	addi	sp,sp,20
    8f68:	f800283a 	ret
    8f6c:	88800117 	ldw	r2,4(r17)
    8f70:	01c00044 	movi	r7,1
    8f74:	d80d883a 	mov	r6,sp
    8f78:	880b883a 	mov	r5,r17
    8f7c:	9009883a 	mov	r4,r18
    8f80:	103ee83a 	callr	r2
    8f84:	843fffc4 	addi	r16,r16,-1
    8f88:	103ff026 	beq	r2,zero,8f4c <print_repeat+0x24>
    8f8c:	00bfffc4 	movi	r2,-1
    8f90:	003ff006 	br	8f54 <print_repeat+0x2c>

00008f94 <___vfprintf_internal_r>:
    8f94:	deffe604 	addi	sp,sp,-104
    8f98:	ddc01715 	stw	r23,92(sp)
    8f9c:	dd801615 	stw	r22,88(sp)
    8fa0:	dd001415 	stw	r20,80(sp)
    8fa4:	dcc01315 	stw	r19,76(sp)
    8fa8:	dc801215 	stw	r18,72(sp)
    8fac:	dc401115 	stw	r17,68(sp)
    8fb0:	dc001015 	stw	r16,64(sp)
    8fb4:	dfc01915 	stw	ra,100(sp)
    8fb8:	df001815 	stw	fp,96(sp)
    8fbc:	dd401515 	stw	r21,84(sp)
    8fc0:	2021883a 	mov	r16,r4
    8fc4:	282f883a 	mov	r23,r5
    8fc8:	d9800515 	stw	r6,20(sp)
    8fcc:	3811883a 	mov	r8,r7
    8fd0:	002d883a 	mov	r22,zero
    8fd4:	d8000215 	stw	zero,8(sp)
    8fd8:	0027883a 	mov	r19,zero
    8fdc:	0029883a 	mov	r20,zero
    8fe0:	0025883a 	mov	r18,zero
    8fe4:	0023883a 	mov	r17,zero
    8fe8:	d8000115 	stw	zero,4(sp)
    8fec:	d8000015 	stw	zero,0(sp)
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	00000206 	br	9000 <___vfprintf_internal_r+0x6c>
    8ff8:	114000e0 	cmpeqi	r5,r2,3
    8ffc:	2800411e 	bne	r5,zero,9104 <___vfprintf_internal_r+0x170>
    9000:	d8c00517 	ldw	r3,20(sp)
    9004:	19000003 	ldbu	r4,0(r3)
    9008:	18c00044 	addi	r3,r3,1
    900c:	d8c00515 	stw	r3,20(sp)
    9010:	21803fcc 	andi	r6,r4,255
    9014:	3180201c 	xori	r6,r6,128
    9018:	31bfe004 	addi	r6,r6,-128
    901c:	30001626 	beq	r6,zero,9078 <___vfprintf_internal_r+0xe4>
    9020:	114000a0 	cmpeqi	r5,r2,2
    9024:	2800251e 	bne	r5,zero,90bc <___vfprintf_internal_r+0x128>
    9028:	114000c8 	cmpgei	r5,r2,3
    902c:	283ff21e 	bne	r5,zero,8ff8 <___vfprintf_internal_r+0x64>
    9030:	10000426 	beq	r2,zero,9044 <___vfprintf_internal_r+0xb0>
    9034:	10800060 	cmpeqi	r2,r2,1
    9038:	10001c1e 	bne	r2,zero,90ac <___vfprintf_internal_r+0x118>
    903c:	00800084 	movi	r2,2
    9040:	003fef06 	br	9000 <___vfprintf_internal_r+0x6c>
    9044:	31800960 	cmpeqi	r6,r6,37
    9048:	3001051e 	bne	r6,zero,9460 <___vfprintf_internal_r+0x4cc>
    904c:	b8800117 	ldw	r2,4(r23)
    9050:	da000315 	stw	r8,12(sp)
    9054:	d9000805 	stb	r4,32(sp)
    9058:	01c00044 	movi	r7,1
    905c:	d9800804 	addi	r6,sp,32
    9060:	b80b883a 	mov	r5,r23
    9064:	8009883a 	mov	r4,r16
    9068:	103ee83a 	callr	r2
    906c:	da000317 	ldw	r8,12(sp)
    9070:	10001d26 	beq	r2,zero,90e8 <___vfprintf_internal_r+0x154>
    9074:	05bfffc4 	movi	r22,-1
    9078:	b005883a 	mov	r2,r22
    907c:	dfc01917 	ldw	ra,100(sp)
    9080:	df001817 	ldw	fp,96(sp)
    9084:	ddc01717 	ldw	r23,92(sp)
    9088:	dd801617 	ldw	r22,88(sp)
    908c:	dd401517 	ldw	r21,84(sp)
    9090:	dd001417 	ldw	r20,80(sp)
    9094:	dcc01317 	ldw	r19,76(sp)
    9098:	dc801217 	ldw	r18,72(sp)
    909c:	dc401117 	ldw	r17,68(sp)
    90a0:	dc001017 	ldw	r16,64(sp)
    90a4:	dec01a04 	addi	sp,sp,104
    90a8:	f800283a 	ret
    90ac:	30800c20 	cmpeqi	r2,r6,48
    90b0:	1000f41e 	bne	r2,zero,9484 <___vfprintf_internal_r+0x4f0>
    90b4:	30800958 	cmpnei	r2,r6,37
    90b8:	103fe426 	beq	r2,zero,904c <___vfprintf_internal_r+0xb8>
    90bc:	217ff404 	addi	r5,r4,-48
    90c0:	29403fcc 	andi	r5,r5,255
    90c4:	288002a8 	cmpgeui	r2,r5,10
    90c8:	10000b1e 	bne	r2,zero,90f8 <___vfprintf_internal_r+0x164>
    90cc:	88bfffe0 	cmpeqi	r2,r17,-1
    90d0:	1000071e 	bne	r2,zero,90f0 <___vfprintf_internal_r+0x15c>
    90d4:	880490ba 	slli	r2,r17,2
    90d8:	1463883a 	add	r17,r2,r17
    90dc:	8822907a 	slli	r17,r17,1
    90e0:	2c63883a 	add	r17,r5,r17
    90e4:	003fd506 	br	903c <___vfprintf_internal_r+0xa8>
    90e8:	b5800044 	addi	r22,r22,1
    90ec:	003fc406 	br	9000 <___vfprintf_internal_r+0x6c>
    90f0:	0023883a 	mov	r17,zero
    90f4:	003ffa06 	br	90e0 <___vfprintf_internal_r+0x14c>
    90f8:	30800ba0 	cmpeqi	r2,r6,46
    90fc:	1000e61e 	bne	r2,zero,9498 <___vfprintf_internal_r+0x504>
    9100:	00800084 	movi	r2,2
    9104:	213ff404 	addi	r4,r4,-48
    9108:	21003fcc 	andi	r4,r4,255
    910c:	214002a8 	cmpgeui	r5,r4,10
    9110:	2800091e 	bne	r5,zero,9138 <___vfprintf_internal_r+0x1a4>
    9114:	917fffe0 	cmpeqi	r5,r18,-1
    9118:	2800051e 	bne	r5,zero,9130 <___vfprintf_internal_r+0x19c>
    911c:	900a90ba 	slli	r5,r18,2
    9120:	2ca5883a 	add	r18,r5,r18
    9124:	9024907a 	slli	r18,r18,1
    9128:	24a5883a 	add	r18,r4,r18
    912c:	003fb406 	br	9000 <___vfprintf_internal_r+0x6c>
    9130:	0025883a 	mov	r18,zero
    9134:	003ffc06 	br	9128 <___vfprintf_internal_r+0x194>
    9138:	30801b20 	cmpeqi	r2,r6,108
    913c:	1000d41e 	bne	r2,zero,9490 <___vfprintf_internal_r+0x4fc>
    9140:	90bfffe0 	cmpeqi	r2,r18,-1
    9144:	10000f1e 	bne	r2,zero,9184 <___vfprintf_internal_r+0x1f0>
    9148:	d8000015 	stw	zero,0(sp)
    914c:	30801be0 	cmpeqi	r2,r6,111
    9150:	1000d31e 	bne	r2,zero,94a0 <___vfprintf_internal_r+0x50c>
    9154:	30801c08 	cmpgei	r2,r6,112
    9158:	1000171e 	bne	r2,zero,91b8 <___vfprintf_internal_r+0x224>
    915c:	308018e0 	cmpeqi	r2,r6,99
    9160:	1000a61e 	bne	r2,zero,93fc <___vfprintf_internal_r+0x468>
    9164:	30801908 	cmpgei	r2,r6,100
    9168:	1000081e 	bne	r2,zero,918c <___vfprintf_internal_r+0x1f8>
    916c:	31801620 	cmpeqi	r6,r6,88
    9170:	303f9f26 	beq	r6,zero,8ff0 <___vfprintf_internal_r+0x5c>
    9174:	00800044 	movi	r2,1
    9178:	d8800215 	stw	r2,8(sp)
    917c:	05000404 	movi	r20,16
    9180:	0000c806 	br	94a4 <___vfprintf_internal_r+0x510>
    9184:	04800044 	movi	r18,1
    9188:	003ff006 	br	914c <___vfprintf_internal_r+0x1b8>
    918c:	30801920 	cmpeqi	r2,r6,100
    9190:	1000021e 	bne	r2,zero,919c <___vfprintf_internal_r+0x208>
    9194:	31801a60 	cmpeqi	r6,r6,105
    9198:	303f9526 	beq	r6,zero,8ff0 <___vfprintf_internal_r+0x5c>
    919c:	40800104 	addi	r2,r8,4
    91a0:	d8800415 	stw	r2,16(sp)
    91a4:	9800bf26 	beq	r19,zero,94a4 <___vfprintf_internal_r+0x510>
    91a8:	45400017 	ldw	r21,0(r8)
    91ac:	a8002216 	blt	r21,zero,9238 <___vfprintf_internal_r+0x2a4>
    91b0:	04c00044 	movi	r19,1
    91b4:	0000bf06 	br	94b4 <___vfprintf_internal_r+0x520>
    91b8:	30801d60 	cmpeqi	r2,r6,117
    91bc:	1000b91e 	bne	r2,zero,94a4 <___vfprintf_internal_r+0x510>
    91c0:	30801e20 	cmpeqi	r2,r6,120
    91c4:	103fed1e 	bne	r2,zero,917c <___vfprintf_internal_r+0x1e8>
    91c8:	31801ce0 	cmpeqi	r6,r6,115
    91cc:	303f8826 	beq	r6,zero,8ff0 <___vfprintf_internal_r+0x5c>
    91d0:	45400017 	ldw	r21,0(r8)
    91d4:	40800104 	addi	r2,r8,4
    91d8:	d8800315 	stw	r2,12(sp)
    91dc:	a809883a 	mov	r4,r21
    91e0:	0008f0c0 	call	8f0c <strlen>
    91e4:	888fc83a 	sub	r7,r17,r2
    91e8:	1039883a 	mov	fp,r2
    91ec:	01c0080e 	bge	zero,r7,9210 <___vfprintf_internal_r+0x27c>
    91f0:	01800804 	movi	r6,32
    91f4:	b80b883a 	mov	r5,r23
    91f8:	8009883a 	mov	r4,r16
    91fc:	d9c00415 	stw	r7,16(sp)
    9200:	0008f280 	call	8f28 <print_repeat>
    9204:	103f9b1e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    9208:	d9c00417 	ldw	r7,16(sp)
    920c:	b1ed883a 	add	r22,r22,r7
    9210:	b8800117 	ldw	r2,4(r23)
    9214:	e00f883a 	mov	r7,fp
    9218:	a80d883a 	mov	r6,r21
    921c:	b80b883a 	mov	r5,r23
    9220:	8009883a 	mov	r4,r16
    9224:	103ee83a 	callr	r2
    9228:	103f921e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    922c:	da000317 	ldw	r8,12(sp)
    9230:	b72d883a 	add	r22,r22,fp
    9234:	003f7206 	br	9000 <___vfprintf_internal_r+0x6c>
    9238:	056bc83a 	sub	r21,zero,r21
    923c:	04c00044 	movi	r19,1
    9240:	02800044 	movi	r10,1
    9244:	df000804 	addi	fp,sp,32
    9248:	e00d883a 	mov	r6,fp
    924c:	a8002f1e 	bne	r21,zero,930c <___vfprintf_internal_r+0x378>
    9250:	e185c83a 	sub	r2,fp,r6
    9254:	d8800315 	stw	r2,12(sp)
    9258:	9085c83a 	sub	r2,r18,r2
    925c:	0080090e 	bge	zero,r2,9284 <___vfprintf_internal_r+0x2f0>
    9260:	e085883a 	add	r2,fp,r2
    9264:	d8c01004 	addi	r3,sp,64
    9268:	e0c0042e 	bgeu	fp,r3,927c <___vfprintf_internal_r+0x2e8>
    926c:	e7000044 	addi	fp,fp,1
    9270:	00c00c04 	movi	r3,48
    9274:	e0ffffc5 	stb	r3,-1(fp)
    9278:	e0bffa1e 	bne	fp,r2,9264 <___vfprintf_internal_r+0x2d0>
    927c:	e185c83a 	sub	r2,fp,r6
    9280:	d8800315 	stw	r2,12(sp)
    9284:	d8800317 	ldw	r2,12(sp)
    9288:	5097883a 	add	r11,r10,r2
    928c:	d8800017 	ldw	r2,0(sp)
    9290:	8aebc83a 	sub	r21,r17,r11
    9294:	10003626 	beq	r2,zero,9370 <___vfprintf_internal_r+0x3dc>
    9298:	50000a26 	beq	r10,zero,92c4 <___vfprintf_internal_r+0x330>
    929c:	00800b44 	movi	r2,45
    92a0:	d88007c5 	stb	r2,31(sp)
    92a4:	b8800117 	ldw	r2,4(r23)
    92a8:	01c00044 	movi	r7,1
    92ac:	d98007c4 	addi	r6,sp,31
    92b0:	b80b883a 	mov	r5,r23
    92b4:	8009883a 	mov	r4,r16
    92b8:	103ee83a 	callr	r2
    92bc:	103f6d1e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    92c0:	b5800044 	addi	r22,r22,1
    92c4:	0540070e 	bge	zero,r21,92e4 <___vfprintf_internal_r+0x350>
    92c8:	a80f883a 	mov	r7,r21
    92cc:	01800c04 	movi	r6,48
    92d0:	b80b883a 	mov	r5,r23
    92d4:	8009883a 	mov	r4,r16
    92d8:	0008f280 	call	8f28 <print_repeat>
    92dc:	103f651e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    92e0:	b56d883a 	add	r22,r22,r21
    92e4:	d8800317 	ldw	r2,12(sp)
    92e8:	e011883a 	mov	r8,fp
    92ec:	b72d883a 	add	r22,r22,fp
    92f0:	172bc83a 	sub	r21,r2,fp
    92f4:	aa05883a 	add	r2,r21,r8
    92f8:	b207c83a 	sub	r3,r22,r8
    92fc:	00803216 	blt	zero,r2,93c8 <___vfprintf_internal_r+0x434>
    9300:	da000417 	ldw	r8,16(sp)
    9304:	182d883a 	mov	r22,r3
    9308:	003f3906 	br	8ff0 <___vfprintf_internal_r+0x5c>
    930c:	a809883a 	mov	r4,r21
    9310:	a00b883a 	mov	r5,r20
    9314:	da800615 	stw	r10,24(sp)
    9318:	00096c00 	call	96c0 <__udivsi3>
    931c:	1009883a 	mov	r4,r2
    9320:	a00b883a 	mov	r5,r20
    9324:	d8800315 	stw	r2,12(sp)
    9328:	0008dcc0 	call	8dcc <__mulsi3>
    932c:	a8abc83a 	sub	r21,r21,r2
    9330:	a8800288 	cmpgei	r2,r21,10
    9334:	d9000317 	ldw	r4,12(sp)
    9338:	da800617 	ldw	r10,24(sp)
    933c:	d9800804 	addi	r6,sp,32
    9340:	1000051e 	bne	r2,zero,9358 <___vfprintf_internal_r+0x3c4>
    9344:	ad400c04 	addi	r21,r21,48
    9348:	e7000044 	addi	fp,fp,1
    934c:	e57fffc5 	stb	r21,-1(fp)
    9350:	202b883a 	mov	r21,r4
    9354:	003fbd06 	br	924c <___vfprintf_internal_r+0x2b8>
    9358:	d8800217 	ldw	r2,8(sp)
    935c:	10000226 	beq	r2,zero,9368 <___vfprintf_internal_r+0x3d4>
    9360:	ad400dc4 	addi	r21,r21,55
    9364:	003ff806 	br	9348 <___vfprintf_internal_r+0x3b4>
    9368:	ad4015c4 	addi	r21,r21,87
    936c:	003ff606 	br	9348 <___vfprintf_internal_r+0x3b4>
    9370:	0540090e 	bge	zero,r21,9398 <___vfprintf_internal_r+0x404>
    9374:	a80f883a 	mov	r7,r21
    9378:	01800804 	movi	r6,32
    937c:	b80b883a 	mov	r5,r23
    9380:	8009883a 	mov	r4,r16
    9384:	da800615 	stw	r10,24(sp)
    9388:	0008f280 	call	8f28 <print_repeat>
    938c:	103f391e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    9390:	da800617 	ldw	r10,24(sp)
    9394:	b56d883a 	add	r22,r22,r21
    9398:	503fd226 	beq	r10,zero,92e4 <___vfprintf_internal_r+0x350>
    939c:	00800b44 	movi	r2,45
    93a0:	d88007c5 	stb	r2,31(sp)
    93a4:	b8800117 	ldw	r2,4(r23)
    93a8:	01c00044 	movi	r7,1
    93ac:	d98007c4 	addi	r6,sp,31
    93b0:	b80b883a 	mov	r5,r23
    93b4:	8009883a 	mov	r4,r16
    93b8:	103ee83a 	callr	r2
    93bc:	103f2d1e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    93c0:	b5800044 	addi	r22,r22,1
    93c4:	003fc706 	br	92e4 <___vfprintf_internal_r+0x350>
    93c8:	40bfffc3 	ldbu	r2,-1(r8)
    93cc:	01c00044 	movi	r7,1
    93d0:	423fffc4 	addi	r8,r8,-1
    93d4:	d88007c5 	stb	r2,31(sp)
    93d8:	b8800117 	ldw	r2,4(r23)
    93dc:	d98007c4 	addi	r6,sp,31
    93e0:	b80b883a 	mov	r5,r23
    93e4:	8009883a 	mov	r4,r16
    93e8:	da000315 	stw	r8,12(sp)
    93ec:	103ee83a 	callr	r2
    93f0:	da000317 	ldw	r8,12(sp)
    93f4:	103fbf26 	beq	r2,zero,92f4 <___vfprintf_internal_r+0x360>
    93f8:	003f1e06 	br	9074 <___vfprintf_internal_r+0xe0>
    93fc:	88800090 	cmplti	r2,r17,2
    9400:	10000a1e 	bne	r2,zero,942c <___vfprintf_internal_r+0x498>
    9404:	8d7fffc4 	addi	r21,r17,-1
    9408:	a80f883a 	mov	r7,r21
    940c:	01800804 	movi	r6,32
    9410:	b80b883a 	mov	r5,r23
    9414:	8009883a 	mov	r4,r16
    9418:	da000315 	stw	r8,12(sp)
    941c:	0008f280 	call	8f28 <print_repeat>
    9420:	da000317 	ldw	r8,12(sp)
    9424:	103f131e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    9428:	b56d883a 	add	r22,r22,r21
    942c:	40800017 	ldw	r2,0(r8)
    9430:	01c00044 	movi	r7,1
    9434:	d9800804 	addi	r6,sp,32
    9438:	d8800805 	stb	r2,32(sp)
    943c:	b8800117 	ldw	r2,4(r23)
    9440:	b80b883a 	mov	r5,r23
    9444:	8009883a 	mov	r4,r16
    9448:	45400104 	addi	r21,r8,4
    944c:	103ee83a 	callr	r2
    9450:	103f081e 	bne	r2,zero,9074 <___vfprintf_internal_r+0xe0>
    9454:	b5800044 	addi	r22,r22,1
    9458:	a811883a 	mov	r8,r21
    945c:	003ee806 	br	9000 <___vfprintf_internal_r+0x6c>
    9460:	d8000215 	stw	zero,8(sp)
    9464:	d8000115 	stw	zero,4(sp)
    9468:	d8000015 	stw	zero,0(sp)
    946c:	04c00044 	movi	r19,1
    9470:	05000284 	movi	r20,10
    9474:	04bfffc4 	movi	r18,-1
    9478:	047fffc4 	movi	r17,-1
    947c:	00800044 	movi	r2,1
    9480:	003edf06 	br	9000 <___vfprintf_internal_r+0x6c>
    9484:	00800044 	movi	r2,1
    9488:	d8800015 	stw	r2,0(sp)
    948c:	003eeb06 	br	903c <___vfprintf_internal_r+0xa8>
    9490:	00800044 	movi	r2,1
    9494:	d8800115 	stw	r2,4(sp)
    9498:	008000c4 	movi	r2,3
    949c:	003ed806 	br	9000 <___vfprintf_internal_r+0x6c>
    94a0:	05000204 	movi	r20,8
    94a4:	40800104 	addi	r2,r8,4
    94a8:	d8800415 	stw	r2,16(sp)
    94ac:	45400017 	ldw	r21,0(r8)
    94b0:	0027883a 	mov	r19,zero
    94b4:	0015883a 	mov	r10,zero
    94b8:	003f6206 	br	9244 <___vfprintf_internal_r+0x2b0>

000094bc <__vfprintf_internal>:
    94bc:	00800074 	movhi	r2,1
    94c0:	300f883a 	mov	r7,r6
    94c4:	280d883a 	mov	r6,r5
    94c8:	200b883a 	mov	r5,r4
    94cc:	112d4e17 	ldw	r4,-19144(r2)
    94d0:	0008f941 	jmpi	8f94 <___vfprintf_internal_r>

000094d4 <__sfvwrite_small_dev>:
    94d4:	2880000b 	ldhu	r2,0(r5)
    94d8:	1080020c 	andi	r2,r2,8
    94dc:	10002526 	beq	r2,zero,9574 <__sfvwrite_small_dev+0xa0>
    94e0:	2880008f 	ldh	r2,2(r5)
    94e4:	defffb04 	addi	sp,sp,-20
    94e8:	dcc00315 	stw	r19,12(sp)
    94ec:	dc800215 	stw	r18,8(sp)
    94f0:	dc400115 	stw	r17,4(sp)
    94f4:	dc000015 	stw	r16,0(sp)
    94f8:	dfc00415 	stw	ra,16(sp)
    94fc:	2027883a 	mov	r19,r4
    9500:	2821883a 	mov	r16,r5
    9504:	3025883a 	mov	r18,r6
    9508:	3823883a 	mov	r17,r7
    950c:	1000100e 	bge	r2,zero,9550 <__sfvwrite_small_dev+0x7c>
    9510:	8080000b 	ldhu	r2,0(r16)
    9514:	10801014 	ori	r2,r2,64
    9518:	8080000d 	sth	r2,0(r16)
    951c:	00bfffc4 	movi	r2,-1
    9520:	00000d06 	br	9558 <__sfvwrite_small_dev+0x84>
    9524:	88810050 	cmplti	r2,r17,1025
    9528:	880f883a 	mov	r7,r17
    952c:	1000011e 	bne	r2,zero,9534 <__sfvwrite_small_dev+0x60>
    9530:	01c10004 	movi	r7,1024
    9534:	8140008f 	ldh	r5,2(r16)
    9538:	900d883a 	mov	r6,r18
    953c:	9809883a 	mov	r4,r19
    9540:	000957c0 	call	957c <_write_r>
    9544:	00bff20e 	bge	zero,r2,9510 <__sfvwrite_small_dev+0x3c>
    9548:	88a3c83a 	sub	r17,r17,r2
    954c:	90a5883a 	add	r18,r18,r2
    9550:	047ff416 	blt	zero,r17,9524 <__sfvwrite_small_dev+0x50>
    9554:	0005883a 	mov	r2,zero
    9558:	dfc00417 	ldw	ra,16(sp)
    955c:	dcc00317 	ldw	r19,12(sp)
    9560:	dc800217 	ldw	r18,8(sp)
    9564:	dc400117 	ldw	r17,4(sp)
    9568:	dc000017 	ldw	r16,0(sp)
    956c:	dec00504 	addi	sp,sp,20
    9570:	f800283a 	ret
    9574:	00bfffc4 	movi	r2,-1
    9578:	f800283a 	ret

0000957c <_write_r>:
    957c:	defffe04 	addi	sp,sp,-8
    9580:	dc000015 	stw	r16,0(sp)
    9584:	00800074 	movhi	r2,1
    9588:	2021883a 	mov	r16,r4
    958c:	2809883a 	mov	r4,r5
    9590:	300b883a 	mov	r5,r6
    9594:	380d883a 	mov	r6,r7
    9598:	dfc00115 	stw	ra,4(sp)
    959c:	102e1115 	stw	zero,-18364(r2)
    95a0:	00099d80 	call	99d8 <write>
    95a4:	10ffffd8 	cmpnei	r3,r2,-1
    95a8:	1800041e 	bne	r3,zero,95bc <_write_r+0x40>
    95ac:	00c00074 	movhi	r3,1
    95b0:	18ee1117 	ldw	r3,-18364(r3)
    95b4:	18000126 	beq	r3,zero,95bc <_write_r+0x40>
    95b8:	80c00015 	stw	r3,0(r16)
    95bc:	dfc00117 	ldw	ra,4(sp)
    95c0:	dc000017 	ldw	r16,0(sp)
    95c4:	dec00204 	addi	sp,sp,8
    95c8:	f800283a 	ret

000095cc <__divsi3>:
    95cc:	20001a16 	blt	r4,zero,9638 <__divsi3+0x6c>
    95d0:	000f883a 	mov	r7,zero
    95d4:	2800020e 	bge	r5,zero,95e0 <__divsi3+0x14>
    95d8:	014bc83a 	sub	r5,zero,r5
    95dc:	39c0005c 	xori	r7,r7,1
    95e0:	200d883a 	mov	r6,r4
    95e4:	00c00044 	movi	r3,1
    95e8:	2900092e 	bgeu	r5,r4,9610 <__divsi3+0x44>
    95ec:	00800804 	movi	r2,32
    95f0:	00c00044 	movi	r3,1
    95f4:	00000106 	br	95fc <__divsi3+0x30>
    95f8:	10001226 	beq	r2,zero,9644 <__divsi3+0x78>
    95fc:	294b883a 	add	r5,r5,r5
    9600:	10bfffc4 	addi	r2,r2,-1
    9604:	18c7883a 	add	r3,r3,r3
    9608:	293ffb36 	bltu	r5,r4,95f8 <__divsi3+0x2c>
    960c:	18000d26 	beq	r3,zero,9644 <__divsi3+0x78>
    9610:	0005883a 	mov	r2,zero
    9614:	31400236 	bltu	r6,r5,9620 <__divsi3+0x54>
    9618:	314dc83a 	sub	r6,r6,r5
    961c:	10c4b03a 	or	r2,r2,r3
    9620:	1806d07a 	srli	r3,r3,1
    9624:	280ad07a 	srli	r5,r5,1
    9628:	183ffa1e 	bne	r3,zero,9614 <__divsi3+0x48>
    962c:	38000126 	beq	r7,zero,9634 <__divsi3+0x68>
    9630:	0085c83a 	sub	r2,zero,r2
    9634:	f800283a 	ret
    9638:	0109c83a 	sub	r4,zero,r4
    963c:	01c00044 	movi	r7,1
    9640:	003fe406 	br	95d4 <__divsi3+0x8>
    9644:	0005883a 	mov	r2,zero
    9648:	003ff806 	br	962c <__divsi3+0x60>

0000964c <__modsi3>:
    964c:	20001916 	blt	r4,zero,96b4 <__modsi3+0x68>
    9650:	000f883a 	mov	r7,zero
    9654:	2005883a 	mov	r2,r4
    9658:	2800010e 	bge	r5,zero,9660 <__modsi3+0x14>
    965c:	014bc83a 	sub	r5,zero,r5
    9660:	00c00044 	movi	r3,1
    9664:	2900092e 	bgeu	r5,r4,968c <__modsi3+0x40>
    9668:	01800804 	movi	r6,32
    966c:	00c00044 	movi	r3,1
    9670:	00000106 	br	9678 <__modsi3+0x2c>
    9674:	30000d26 	beq	r6,zero,96ac <__modsi3+0x60>
    9678:	294b883a 	add	r5,r5,r5
    967c:	31bfffc4 	addi	r6,r6,-1
    9680:	18c7883a 	add	r3,r3,r3
    9684:	293ffb36 	bltu	r5,r4,9674 <__modsi3+0x28>
    9688:	18000826 	beq	r3,zero,96ac <__modsi3+0x60>
    968c:	1806d07a 	srli	r3,r3,1
    9690:	11400136 	bltu	r2,r5,9698 <__modsi3+0x4c>
    9694:	1145c83a 	sub	r2,r2,r5
    9698:	280ad07a 	srli	r5,r5,1
    969c:	183ffb1e 	bne	r3,zero,968c <__modsi3+0x40>
    96a0:	38000126 	beq	r7,zero,96a8 <__modsi3+0x5c>
    96a4:	0085c83a 	sub	r2,zero,r2
    96a8:	f800283a 	ret
    96ac:	2005883a 	mov	r2,r4
    96b0:	003ffb06 	br	96a0 <__modsi3+0x54>
    96b4:	0109c83a 	sub	r4,zero,r4
    96b8:	01c00044 	movi	r7,1
    96bc:	003fe506 	br	9654 <__modsi3+0x8>

000096c0 <__udivsi3>:
    96c0:	200d883a 	mov	r6,r4
    96c4:	2900152e 	bgeu	r5,r4,971c <__udivsi3+0x5c>
    96c8:	28001416 	blt	r5,zero,971c <__udivsi3+0x5c>
    96cc:	00800804 	movi	r2,32
    96d0:	00c00044 	movi	r3,1
    96d4:	00000206 	br	96e0 <__udivsi3+0x20>
    96d8:	10000e26 	beq	r2,zero,9714 <__udivsi3+0x54>
    96dc:	28000516 	blt	r5,zero,96f4 <__udivsi3+0x34>
    96e0:	294b883a 	add	r5,r5,r5
    96e4:	10bfffc4 	addi	r2,r2,-1
    96e8:	18c7883a 	add	r3,r3,r3
    96ec:	293ffa36 	bltu	r5,r4,96d8 <__udivsi3+0x18>
    96f0:	18000826 	beq	r3,zero,9714 <__udivsi3+0x54>
    96f4:	0005883a 	mov	r2,zero
    96f8:	31400236 	bltu	r6,r5,9704 <__udivsi3+0x44>
    96fc:	314dc83a 	sub	r6,r6,r5
    9700:	10c4b03a 	or	r2,r2,r3
    9704:	1806d07a 	srli	r3,r3,1
    9708:	280ad07a 	srli	r5,r5,1
    970c:	183ffa1e 	bne	r3,zero,96f8 <__udivsi3+0x38>
    9710:	f800283a 	ret
    9714:	0005883a 	mov	r2,zero
    9718:	f800283a 	ret
    971c:	00c00044 	movi	r3,1
    9720:	003ff406 	br	96f4 <__udivsi3+0x34>

00009724 <__umodsi3>:
    9724:	2005883a 	mov	r2,r4
    9728:	2900132e 	bgeu	r5,r4,9778 <__umodsi3+0x54>
    972c:	28001216 	blt	r5,zero,9778 <__umodsi3+0x54>
    9730:	01800804 	movi	r6,32
    9734:	00c00044 	movi	r3,1
    9738:	00000206 	br	9744 <__umodsi3+0x20>
    973c:	30000c26 	beq	r6,zero,9770 <__umodsi3+0x4c>
    9740:	28000516 	blt	r5,zero,9758 <__umodsi3+0x34>
    9744:	294b883a 	add	r5,r5,r5
    9748:	31bfffc4 	addi	r6,r6,-1
    974c:	18c7883a 	add	r3,r3,r3
    9750:	293ffa36 	bltu	r5,r4,973c <__umodsi3+0x18>
    9754:	18000626 	beq	r3,zero,9770 <__umodsi3+0x4c>
    9758:	1806d07a 	srli	r3,r3,1
    975c:	11400136 	bltu	r2,r5,9764 <__umodsi3+0x40>
    9760:	1145c83a 	sub	r2,r2,r5
    9764:	280ad07a 	srli	r5,r5,1
    9768:	183ffb1e 	bne	r3,zero,9758 <__umodsi3+0x34>
    976c:	f800283a 	ret
    9770:	2005883a 	mov	r2,r4
    9774:	f800283a 	ret
    9778:	00c00044 	movi	r3,1
    977c:	003ff606 	br	9758 <__umodsi3+0x34>

00009780 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9780:	defffc04 	addi	sp,sp,-16
    9784:	df000315 	stw	fp,12(sp)
    9788:	df000304 	addi	fp,sp,12
    978c:	e13fff15 	stw	r4,-4(fp)
    9790:	e17ffe15 	stw	r5,-8(fp)
    9794:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    9798:	e0fffe17 	ldw	r3,-8(fp)
    979c:	e0bfff17 	ldw	r2,-4(fp)
    97a0:	18800c26 	beq	r3,r2,97d4 <alt_load_section+0x54>
  {
    while( to != end )
    97a4:	00000806 	br	97c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    97a8:	e0ffff17 	ldw	r3,-4(fp)
    97ac:	18800104 	addi	r2,r3,4
    97b0:	e0bfff15 	stw	r2,-4(fp)
    97b4:	e0bffe17 	ldw	r2,-8(fp)
    97b8:	11000104 	addi	r4,r2,4
    97bc:	e13ffe15 	stw	r4,-8(fp)
    97c0:	18c00017 	ldw	r3,0(r3)
    97c4:	10c00015 	stw	r3,0(r2)
    while( to != end )
    97c8:	e0fffe17 	ldw	r3,-8(fp)
    97cc:	e0bffd17 	ldw	r2,-12(fp)
    97d0:	18bff51e 	bne	r3,r2,97a8 <alt_load_section+0x28>
    }
  }
}
    97d4:	0001883a 	nop
    97d8:	e037883a 	mov	sp,fp
    97dc:	df000017 	ldw	fp,0(sp)
    97e0:	dec00104 	addi	sp,sp,4
    97e4:	f800283a 	ret

000097e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    97e8:	defffe04 	addi	sp,sp,-8
    97ec:	dfc00115 	stw	ra,4(sp)
    97f0:	df000015 	stw	fp,0(sp)
    97f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    97f8:	01800074 	movhi	r6,1
    97fc:	31ad5804 	addi	r6,r6,-19104
    9800:	01400074 	movhi	r5,1
    9804:	296c9f04 	addi	r5,r5,-19844
    9808:	01000074 	movhi	r4,1
    980c:	212d5804 	addi	r4,r4,-19104
    9810:	00097800 	call	9780 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9814:	01800074 	movhi	r6,1
    9818:	31a08e04 	addi	r6,r6,-32200
    981c:	01400074 	movhi	r5,1
    9820:	29600804 	addi	r5,r5,-32736
    9824:	01000074 	movhi	r4,1
    9828:	21200804 	addi	r4,r4,-32736
    982c:	00097800 	call	9780 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9830:	01800074 	movhi	r6,1
    9834:	31ac9f04 	addi	r6,r6,-19844
    9838:	01400074 	movhi	r5,1
    983c:	296c4e04 	addi	r5,r5,-20168
    9840:	01000074 	movhi	r4,1
    9844:	212c4e04 	addi	r4,r4,-20168
    9848:	00097800 	call	9780 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    984c:	0009ff40 	call	9ff4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9850:	000a2180 	call	a218 <alt_icache_flush_all>
}
    9854:	0001883a 	nop
    9858:	e037883a 	mov	sp,fp
    985c:	dfc00117 	ldw	ra,4(sp)
    9860:	df000017 	ldw	fp,0(sp)
    9864:	dec00204 	addi	sp,sp,8
    9868:	f800283a 	ret

0000986c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    986c:	defffd04 	addi	sp,sp,-12
    9870:	dfc00215 	stw	ra,8(sp)
    9874:	df000115 	stw	fp,4(sp)
    9878:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    987c:	0009883a 	mov	r4,zero
    9880:	0009b100 	call	9b10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9884:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9888:	0009b4c0 	call	9b4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    988c:	01800074 	movhi	r6,1
    9890:	31ac9404 	addi	r6,r6,-19888
    9894:	01400074 	movhi	r5,1
    9898:	296c9404 	addi	r5,r5,-19888
    989c:	01000074 	movhi	r4,1
    98a0:	212c9404 	addi	r4,r4,-19888
    98a4:	000a5b80 	call	a5b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    98a8:	000a1500 	call	a150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    98ac:	01000074 	movhi	r4,1
    98b0:	21286d04 	addi	r4,r4,-24140
    98b4:	000ae640 	call	ae64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    98b8:	d0a0c517 	ldw	r2,-31980(gp)
    98bc:	d0e0c617 	ldw	r3,-31976(gp)
    98c0:	d120c717 	ldw	r4,-31972(gp)
    98c4:	200d883a 	mov	r6,r4
    98c8:	180b883a 	mov	r5,r3
    98cc:	1009883a 	mov	r4,r2
    98d0:	00084080 	call	8408 <main>
    98d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    98d8:	01000044 	movi	r4,1
    98dc:	0009f180 	call	9f18 <close>
  exit (result);
    98e0:	e13fff17 	ldw	r4,-4(fp)
    98e4:	000ae780 	call	ae78 <exit>

000098e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98e8:	defffe04 	addi	sp,sp,-8
    98ec:	dfc00115 	stw	ra,4(sp)
    98f0:	df000015 	stw	fp,0(sp)
    98f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    98f8:	d0a00717 	ldw	r2,-32740(gp)
    98fc:	10000326 	beq	r2,zero,990c <alt_get_errno+0x24>
    9900:	d0a00717 	ldw	r2,-32740(gp)
    9904:	103ee83a 	callr	r2
    9908:	00000106 	br	9910 <alt_get_errno+0x28>
    990c:	d0a0c404 	addi	r2,gp,-31984
}
    9910:	e037883a 	mov	sp,fp
    9914:	dfc00117 	ldw	ra,4(sp)
    9918:	df000017 	ldw	fp,0(sp)
    991c:	dec00204 	addi	sp,sp,8
    9920:	f800283a 	ret

00009924 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    9924:	defffc04 	addi	sp,sp,-16
    9928:	dfc00315 	stw	ra,12(sp)
    992c:	df000215 	stw	fp,8(sp)
    9930:	df000204 	addi	fp,sp,8
    9934:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9938:	d0a0ca17 	ldw	r2,-31960(gp)
  clock_t ticks = alt_nticks(); 
    993c:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
    9940:	d0a0c917 	ldw	r2,-31964(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    9944:	1000061e 	bne	r2,zero,9960 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
    9948:	00098e80 	call	98e8 <alt_get_errno>
    994c:	1007883a 	mov	r3,r2
    9950:	00801604 	movi	r2,88
    9954:	18800015 	stw	r2,0(r3)
    return 0;
    9958:	0005883a 	mov	r2,zero
    995c:	00000a06 	br	9988 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    9960:	e0bffe17 	ldw	r2,-8(fp)
    9964:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
    9968:	e0bffe17 	ldw	r2,-8(fp)
    996c:	e0ffff17 	ldw	r3,-4(fp)
    9970:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
    9974:	e0bffe17 	ldw	r2,-8(fp)
    9978:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
    997c:	e0bffe17 	ldw	r2,-8(fp)
    9980:	10000315 	stw	zero,12(r2)

  return ticks;
    9984:	e0bfff17 	ldw	r2,-4(fp)
}
    9988:	e037883a 	mov	sp,fp
    998c:	dfc00117 	ldw	ra,4(sp)
    9990:	df000017 	ldw	fp,0(sp)
    9994:	dec00204 	addi	sp,sp,8
    9998:	f800283a 	ret

0000999c <alt_get_errno>:
{
    999c:	defffe04 	addi	sp,sp,-8
    99a0:	dfc00115 	stw	ra,4(sp)
    99a4:	df000015 	stw	fp,0(sp)
    99a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    99ac:	d0a00717 	ldw	r2,-32740(gp)
    99b0:	10000326 	beq	r2,zero,99c0 <alt_get_errno+0x24>
    99b4:	d0a00717 	ldw	r2,-32740(gp)
    99b8:	103ee83a 	callr	r2
    99bc:	00000106 	br	99c4 <alt_get_errno+0x28>
    99c0:	d0a0c404 	addi	r2,gp,-31984
}
    99c4:	e037883a 	mov	sp,fp
    99c8:	dfc00117 	ldw	ra,4(sp)
    99cc:	df000017 	ldw	fp,0(sp)
    99d0:	dec00204 	addi	sp,sp,8
    99d4:	f800283a 	ret

000099d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    99d8:	defff904 	addi	sp,sp,-28
    99dc:	dfc00615 	stw	ra,24(sp)
    99e0:	df000515 	stw	fp,20(sp)
    99e4:	df000504 	addi	fp,sp,20
    99e8:	e13ffd15 	stw	r4,-12(fp)
    99ec:	e17ffc15 	stw	r5,-16(fp)
    99f0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    99f4:	e0bffd17 	ldw	r2,-12(fp)
    99f8:	10000916 	blt	r2,zero,9a20 <write+0x48>
    99fc:	e0fffd17 	ldw	r3,-12(fp)
    9a00:	1805883a 	mov	r2,r3
    9a04:	1085883a 	add	r2,r2,r2
    9a08:	10c5883a 	add	r2,r2,r3
    9a0c:	100490ba 	slli	r2,r2,2
    9a10:	00c00074 	movhi	r3,1
    9a14:	18eced04 	addi	r3,r3,-19532
    9a18:	10c5883a 	add	r2,r2,r3
    9a1c:	00000106 	br	9a24 <write+0x4c>
    9a20:	0005883a 	mov	r2,zero
    9a24:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    9a28:	e0bfff17 	ldw	r2,-4(fp)
    9a2c:	10002126 	beq	r2,zero,9ab4 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9a30:	e0bfff17 	ldw	r2,-4(fp)
    9a34:	10800217 	ldw	r2,8(r2)
    9a38:	108000cc 	andi	r2,r2,3
    9a3c:	10001826 	beq	r2,zero,9aa0 <write+0xc8>
    9a40:	e0bfff17 	ldw	r2,-4(fp)
    9a44:	10800017 	ldw	r2,0(r2)
    9a48:	10800617 	ldw	r2,24(r2)
    9a4c:	10001426 	beq	r2,zero,9aa0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9a50:	e0bfff17 	ldw	r2,-4(fp)
    9a54:	10800017 	ldw	r2,0(r2)
    9a58:	10800617 	ldw	r2,24(r2)
    9a5c:	e0fffb17 	ldw	r3,-20(fp)
    9a60:	180d883a 	mov	r6,r3
    9a64:	e17ffc17 	ldw	r5,-16(fp)
    9a68:	e13fff17 	ldw	r4,-4(fp)
    9a6c:	103ee83a 	callr	r2
    9a70:	e0bffe15 	stw	r2,-8(fp)
    9a74:	e0bffe17 	ldw	r2,-8(fp)
    9a78:	1000070e 	bge	r2,zero,9a98 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    9a7c:	000999c0 	call	999c <alt_get_errno>
    9a80:	1007883a 	mov	r3,r2
    9a84:	e0bffe17 	ldw	r2,-8(fp)
    9a88:	0085c83a 	sub	r2,zero,r2
    9a8c:	18800015 	stw	r2,0(r3)
        return -1;
    9a90:	00bfffc4 	movi	r2,-1
    9a94:	00000c06 	br	9ac8 <write+0xf0>
      }
      return rval;
    9a98:	e0bffe17 	ldw	r2,-8(fp)
    9a9c:	00000a06 	br	9ac8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9aa0:	000999c0 	call	999c <alt_get_errno>
    9aa4:	1007883a 	mov	r3,r2
    9aa8:	00800344 	movi	r2,13
    9aac:	18800015 	stw	r2,0(r3)
    9ab0:	00000406 	br	9ac4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9ab4:	000999c0 	call	999c <alt_get_errno>
    9ab8:	1007883a 	mov	r3,r2
    9abc:	00801444 	movi	r2,81
    9ac0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9ac4:	00bfffc4 	movi	r2,-1
}
    9ac8:	e037883a 	mov	sp,fp
    9acc:	dfc00117 	ldw	ra,4(sp)
    9ad0:	df000017 	ldw	fp,0(sp)
    9ad4:	dec00204 	addi	sp,sp,8
    9ad8:	f800283a 	ret

00009adc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9adc:	defffd04 	addi	sp,sp,-12
    9ae0:	dfc00215 	stw	ra,8(sp)
    9ae4:	df000115 	stw	fp,4(sp)
    9ae8:	df000104 	addi	fp,sp,4
    9aec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9af0:	d1600404 	addi	r5,gp,-32752
    9af4:	e13fff17 	ldw	r4,-4(fp)
    9af8:	000a0a80 	call	a0a8 <alt_dev_llist_insert>
}
    9afc:	e037883a 	mov	sp,fp
    9b00:	dfc00117 	ldw	ra,4(sp)
    9b04:	df000017 	ldw	fp,0(sp)
    9b08:	dec00204 	addi	sp,sp,8
    9b0c:	f800283a 	ret

00009b10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9b10:	defffd04 	addi	sp,sp,-12
    9b14:	dfc00215 	stw	ra,8(sp)
    9b18:	df000115 	stw	fp,4(sp)
    9b1c:	df000104 	addi	fp,sp,4
    9b20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9b24:	000aac80 	call	aac8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9b28:	00800044 	movi	r2,1
    9b2c:	1001703a 	wrctl	status,r2
}
    9b30:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    9b34:	0001883a 	nop
    9b38:	e037883a 	mov	sp,fp
    9b3c:	dfc00117 	ldw	ra,4(sp)
    9b40:	df000017 	ldw	fp,0(sp)
    9b44:	dec00204 	addi	sp,sp,8
    9b48:	f800283a 	ret

00009b4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9b4c:	defffe04 	addi	sp,sp,-8
    9b50:	dfc00115 	stw	ra,4(sp)
    9b54:	df000015 	stw	fp,0(sp)
    9b58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9b5c:	01c0fa04 	movi	r7,1000
    9b60:	01800044 	movi	r6,1
    9b64:	000b883a 	mov	r5,zero
    9b68:	01000074 	movhi	r4,1
    9b6c:	21040004 	addi	r4,r4,4096
    9b70:	0009e580 	call	9e58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    9b74:	01000074 	movhi	r4,1
    9b78:	212cd804 	addi	r4,r4,-19616
    9b7c:	0009adc0 	call	9adc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    9b80:	0001883a 	nop
}
    9b84:	0001883a 	nop
    9b88:	e037883a 	mov	sp,fp
    9b8c:	dfc00117 	ldw	ra,4(sp)
    9b90:	df000017 	ldw	fp,0(sp)
    9b94:	dec00204 	addi	sp,sp,8
    9b98:	f800283a 	ret

00009b9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9b9c:	defffa04 	addi	sp,sp,-24
    9ba0:	dfc00515 	stw	ra,20(sp)
    9ba4:	df000415 	stw	fp,16(sp)
    9ba8:	df000404 	addi	fp,sp,16
    9bac:	e13ffe15 	stw	r4,-8(fp)
    9bb0:	e17ffd15 	stw	r5,-12(fp)
    9bb4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9bb8:	e0bffe17 	ldw	r2,-8(fp)
    9bbc:	10800017 	ldw	r2,0(r2)
    9bc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9bc4:	e0bfff17 	ldw	r2,-4(fp)
    9bc8:	10c00a04 	addi	r3,r2,40
    9bcc:	e0bffe17 	ldw	r2,-8(fp)
    9bd0:	10800217 	ldw	r2,8(r2)
    9bd4:	100f883a 	mov	r7,r2
    9bd8:	e1bffc17 	ldw	r6,-16(fp)
    9bdc:	e17ffd17 	ldw	r5,-12(fp)
    9be0:	1809883a 	mov	r4,r3
    9be4:	0009c5c0 	call	9c5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9be8:	e037883a 	mov	sp,fp
    9bec:	dfc00117 	ldw	ra,4(sp)
    9bf0:	df000017 	ldw	fp,0(sp)
    9bf4:	dec00204 	addi	sp,sp,8
    9bf8:	f800283a 	ret

00009bfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9bfc:	defffa04 	addi	sp,sp,-24
    9c00:	dfc00515 	stw	ra,20(sp)
    9c04:	df000415 	stw	fp,16(sp)
    9c08:	df000404 	addi	fp,sp,16
    9c0c:	e13ffe15 	stw	r4,-8(fp)
    9c10:	e17ffd15 	stw	r5,-12(fp)
    9c14:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9c18:	e0bffe17 	ldw	r2,-8(fp)
    9c1c:	10800017 	ldw	r2,0(r2)
    9c20:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9c24:	e0bfff17 	ldw	r2,-4(fp)
    9c28:	10c00a04 	addi	r3,r2,40
    9c2c:	e0bffe17 	ldw	r2,-8(fp)
    9c30:	10800217 	ldw	r2,8(r2)
    9c34:	100f883a 	mov	r7,r2
    9c38:	e1bffc17 	ldw	r6,-16(fp)
    9c3c:	e17ffd17 	ldw	r5,-12(fp)
    9c40:	1809883a 	mov	r4,r3
    9c44:	0009d480 	call	9d48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9c48:	e037883a 	mov	sp,fp
    9c4c:	dfc00117 	ldw	ra,4(sp)
    9c50:	df000017 	ldw	fp,0(sp)
    9c54:	dec00204 	addi	sp,sp,8
    9c58:	f800283a 	ret

00009c5c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9c5c:	defff704 	addi	sp,sp,-36
    9c60:	df000815 	stw	fp,32(sp)
    9c64:	df000804 	addi	fp,sp,32
    9c68:	e13ffb15 	stw	r4,-20(fp)
    9c6c:	e17ffa15 	stw	r5,-24(fp)
    9c70:	e1bff915 	stw	r6,-28(fp)
    9c74:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    9c78:	e0bffb17 	ldw	r2,-20(fp)
    9c7c:	10800017 	ldw	r2,0(r2)
    9c80:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    9c84:	e0bffa17 	ldw	r2,-24(fp)
    9c88:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    9c8c:	e0bff917 	ldw	r2,-28(fp)
    9c90:	e0fffa17 	ldw	r3,-24(fp)
    9c94:	1885883a 	add	r2,r3,r2
    9c98:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    9c9c:	00001206 	br	9ce8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9ca0:	e0bffe17 	ldw	r2,-8(fp)
    9ca4:	10800037 	ldwio	r2,0(r2)
    9ca8:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9cac:	e0bffc17 	ldw	r2,-16(fp)
    9cb0:	10a0000c 	andi	r2,r2,32768
    9cb4:	10000626 	beq	r2,zero,9cd0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9cb8:	e0bfff17 	ldw	r2,-4(fp)
    9cbc:	10c00044 	addi	r3,r2,1
    9cc0:	e0ffff15 	stw	r3,-4(fp)
    9cc4:	e0fffc17 	ldw	r3,-16(fp)
    9cc8:	10c00005 	stb	r3,0(r2)
    9ccc:	00000606 	br	9ce8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9cd0:	e0ffff17 	ldw	r3,-4(fp)
    9cd4:	e0bffa17 	ldw	r2,-24(fp)
    9cd8:	1880071e 	bne	r3,r2,9cf8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9cdc:	e0bff817 	ldw	r2,-32(fp)
    9ce0:	1090000c 	andi	r2,r2,16384
    9ce4:	1000061e 	bne	r2,zero,9d00 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    9ce8:	e0ffff17 	ldw	r3,-4(fp)
    9cec:	e0bffd17 	ldw	r2,-12(fp)
    9cf0:	18bfeb36 	bltu	r3,r2,9ca0 <altera_avalon_jtag_uart_read+0x44>
    9cf4:	00000306 	br	9d04 <altera_avalon_jtag_uart_read+0xa8>
      break;
    9cf8:	0001883a 	nop
    9cfc:	00000106 	br	9d04 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    9d00:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9d04:	e0ffff17 	ldw	r3,-4(fp)
    9d08:	e0bffa17 	ldw	r2,-24(fp)
    9d0c:	18800426 	beq	r3,r2,9d20 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9d10:	e0ffff17 	ldw	r3,-4(fp)
    9d14:	e0bffa17 	ldw	r2,-24(fp)
    9d18:	1885c83a 	sub	r2,r3,r2
    9d1c:	00000606 	br	9d38 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9d20:	e0bff817 	ldw	r2,-32(fp)
    9d24:	1090000c 	andi	r2,r2,16384
    9d28:	10000226 	beq	r2,zero,9d34 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9d2c:	00bffd44 	movi	r2,-11
    9d30:	00000106 	br	9d38 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9d34:	00bffec4 	movi	r2,-5
}
    9d38:	e037883a 	mov	sp,fp
    9d3c:	df000017 	ldw	fp,0(sp)
    9d40:	dec00104 	addi	sp,sp,4
    9d44:	f800283a 	ret

00009d48 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9d48:	defff904 	addi	sp,sp,-28
    9d4c:	df000615 	stw	fp,24(sp)
    9d50:	df000604 	addi	fp,sp,24
    9d54:	e13ffd15 	stw	r4,-12(fp)
    9d58:	e17ffc15 	stw	r5,-16(fp)
    9d5c:	e1bffb15 	stw	r6,-20(fp)
    9d60:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    9d64:	e0bffd17 	ldw	r2,-12(fp)
    9d68:	10800017 	ldw	r2,0(r2)
    9d6c:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    9d70:	e0bffb17 	ldw	r2,-20(fp)
    9d74:	e0fffc17 	ldw	r3,-16(fp)
    9d78:	1885883a 	add	r2,r3,r2
    9d7c:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    9d80:	00000e06 	br	9dbc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9d84:	e0bfff17 	ldw	r2,-4(fp)
    9d88:	10800104 	addi	r2,r2,4
    9d8c:	10800037 	ldwio	r2,0(r2)
    9d90:	10bfffec 	andhi	r2,r2,65535
    9d94:	10000926 	beq	r2,zero,9dbc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9d98:	e0ffff17 	ldw	r3,-4(fp)
    9d9c:	e0bffc17 	ldw	r2,-16(fp)
    9da0:	11000044 	addi	r4,r2,1
    9da4:	e13ffc15 	stw	r4,-16(fp)
    9da8:	10800003 	ldbu	r2,0(r2)
    9dac:	10803fcc 	andi	r2,r2,255
    9db0:	1080201c 	xori	r2,r2,128
    9db4:	10bfe004 	addi	r2,r2,-128
    9db8:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    9dbc:	e0fffc17 	ldw	r3,-16(fp)
    9dc0:	e0bffe17 	ldw	r2,-8(fp)
    9dc4:	18bfef36 	bltu	r3,r2,9d84 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    9dc8:	e0bffb17 	ldw	r2,-20(fp)
}
    9dcc:	e037883a 	mov	sp,fp
    9dd0:	df000017 	ldw	fp,0(sp)
    9dd4:	dec00104 	addi	sp,sp,4
    9dd8:	f800283a 	ret

00009ddc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9ddc:	defffa04 	addi	sp,sp,-24
    9de0:	dfc00515 	stw	ra,20(sp)
    9de4:	df000415 	stw	fp,16(sp)
    9de8:	df000404 	addi	fp,sp,16
    9dec:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9df0:	0007883a 	mov	r3,zero
    9df4:	e0bffc17 	ldw	r2,-16(fp)
    9df8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9dfc:	e0bffc17 	ldw	r2,-16(fp)
    9e00:	10800104 	addi	r2,r2,4
    9e04:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    9e08:	0005303a 	rdctl	r2,status
    9e0c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e10:	e0fffd17 	ldw	r3,-12(fp)
    9e14:	00bfff84 	movi	r2,-2
    9e18:	1884703a 	and	r2,r3,r2
    9e1c:	1001703a 	wrctl	status,r2
  return context;
    9e20:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9e24:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    9e28:	000a9c00 	call	a9c0 <alt_tick>
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    9e34:	e0bffe17 	ldw	r2,-8(fp)
    9e38:	1001703a 	wrctl	status,r2
}
    9e3c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    9e40:	0001883a 	nop
    9e44:	e037883a 	mov	sp,fp
    9e48:	dfc00117 	ldw	ra,4(sp)
    9e4c:	df000017 	ldw	fp,0(sp)
    9e50:	dec00204 	addi	sp,sp,8
    9e54:	f800283a 	ret

00009e58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9e58:	defff804 	addi	sp,sp,-32
    9e5c:	dfc00715 	stw	ra,28(sp)
    9e60:	df000615 	stw	fp,24(sp)
    9e64:	df000604 	addi	fp,sp,24
    9e68:	e13ffe15 	stw	r4,-8(fp)
    9e6c:	e17ffd15 	stw	r5,-12(fp)
    9e70:	e1bffc15 	stw	r6,-16(fp)
    9e74:	e1fffb15 	stw	r7,-20(fp)
    9e78:	e0bffb17 	ldw	r2,-20(fp)
    9e7c:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
    9e80:	d0a0c917 	ldw	r2,-31964(gp)
    9e84:	1000031e 	bne	r2,zero,9e94 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
    9e88:	e0bfff17 	ldw	r2,-4(fp)
    9e8c:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    9e90:	00000106 	br	9e98 <alt_avalon_timer_sc_init+0x40>
    return -1;
    9e94:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9e98:	e0bffe17 	ldw	r2,-8(fp)
    9e9c:	10800104 	addi	r2,r2,4
    9ea0:	00c001c4 	movi	r3,7
    9ea4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9ea8:	d8000015 	stw	zero,0(sp)
    9eac:	e1fffe17 	ldw	r7,-8(fp)
    9eb0:	01800074 	movhi	r6,1
    9eb4:	31a77704 	addi	r6,r6,-25124
    9eb8:	e17ffc17 	ldw	r5,-16(fp)
    9ebc:	e13ffd17 	ldw	r4,-12(fp)
    9ec0:	000a24c0 	call	a24c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9ec4:	0001883a 	nop
    9ec8:	e037883a 	mov	sp,fp
    9ecc:	dfc00117 	ldw	ra,4(sp)
    9ed0:	df000017 	ldw	fp,0(sp)
    9ed4:	dec00204 	addi	sp,sp,8
    9ed8:	f800283a 	ret

00009edc <alt_get_errno>:
{
    9edc:	defffe04 	addi	sp,sp,-8
    9ee0:	dfc00115 	stw	ra,4(sp)
    9ee4:	df000015 	stw	fp,0(sp)
    9ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9eec:	d0a00717 	ldw	r2,-32740(gp)
    9ef0:	10000326 	beq	r2,zero,9f00 <alt_get_errno+0x24>
    9ef4:	d0a00717 	ldw	r2,-32740(gp)
    9ef8:	103ee83a 	callr	r2
    9efc:	00000106 	br	9f04 <alt_get_errno+0x28>
    9f00:	d0a0c404 	addi	r2,gp,-31984
}
    9f04:	e037883a 	mov	sp,fp
    9f08:	dfc00117 	ldw	ra,4(sp)
    9f0c:	df000017 	ldw	fp,0(sp)
    9f10:	dec00204 	addi	sp,sp,8
    9f14:	f800283a 	ret

00009f18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9f18:	defffb04 	addi	sp,sp,-20
    9f1c:	dfc00415 	stw	ra,16(sp)
    9f20:	df000315 	stw	fp,12(sp)
    9f24:	df000304 	addi	fp,sp,12
    9f28:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9f2c:	e0bffd17 	ldw	r2,-12(fp)
    9f30:	10000916 	blt	r2,zero,9f58 <close+0x40>
    9f34:	e0fffd17 	ldw	r3,-12(fp)
    9f38:	1805883a 	mov	r2,r3
    9f3c:	1085883a 	add	r2,r2,r2
    9f40:	10c5883a 	add	r2,r2,r3
    9f44:	100490ba 	slli	r2,r2,2
    9f48:	00c00074 	movhi	r3,1
    9f4c:	18eced04 	addi	r3,r3,-19532
    9f50:	10c5883a 	add	r2,r2,r3
    9f54:	00000106 	br	9f5c <close+0x44>
    9f58:	0005883a 	mov	r2,zero
    9f5c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    9f60:	e0bfff17 	ldw	r2,-4(fp)
    9f64:	10001926 	beq	r2,zero,9fcc <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9f68:	e0bfff17 	ldw	r2,-4(fp)
    9f6c:	10800017 	ldw	r2,0(r2)
    9f70:	10800417 	ldw	r2,16(r2)
    9f74:	10000626 	beq	r2,zero,9f90 <close+0x78>
    9f78:	e0bfff17 	ldw	r2,-4(fp)
    9f7c:	10800017 	ldw	r2,0(r2)
    9f80:	10800417 	ldw	r2,16(r2)
    9f84:	e13fff17 	ldw	r4,-4(fp)
    9f88:	103ee83a 	callr	r2
    9f8c:	00000106 	br	9f94 <close+0x7c>
    9f90:	0005883a 	mov	r2,zero
    9f94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9f98:	e13ffd17 	ldw	r4,-12(fp)
    9f9c:	000a8ac0 	call	a8ac <alt_release_fd>
    if (rval < 0)
    9fa0:	e0bffe17 	ldw	r2,-8(fp)
    9fa4:	1000070e 	bge	r2,zero,9fc4 <close+0xac>
    {
      ALT_ERRNO = -rval;
    9fa8:	0009edc0 	call	9edc <alt_get_errno>
    9fac:	1007883a 	mov	r3,r2
    9fb0:	e0bffe17 	ldw	r2,-8(fp)
    9fb4:	0085c83a 	sub	r2,zero,r2
    9fb8:	18800015 	stw	r2,0(r3)
      return -1;
    9fbc:	00bfffc4 	movi	r2,-1
    9fc0:	00000706 	br	9fe0 <close+0xc8>
    }
    return 0;
    9fc4:	0005883a 	mov	r2,zero
    9fc8:	00000506 	br	9fe0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9fcc:	0009edc0 	call	9edc <alt_get_errno>
    9fd0:	1007883a 	mov	r3,r2
    9fd4:	00801444 	movi	r2,81
    9fd8:	18800015 	stw	r2,0(r3)
    return -1;
    9fdc:	00bfffc4 	movi	r2,-1
  }
}
    9fe0:	e037883a 	mov	sp,fp
    9fe4:	dfc00117 	ldw	ra,4(sp)
    9fe8:	df000017 	ldw	fp,0(sp)
    9fec:	dec00204 	addi	sp,sp,8
    9ff0:	f800283a 	ret

00009ff4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9ff4:	defffe04 	addi	sp,sp,-8
    9ff8:	df000115 	stw	fp,4(sp)
    9ffc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a000:	e03fff15 	stw	zero,-4(fp)
    a004:	00000506 	br	a01c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    a008:	e0bfff17 	ldw	r2,-4(fp)
    a00c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a010:	e0bfff17 	ldw	r2,-4(fp)
    a014:	10800804 	addi	r2,r2,32
    a018:	e0bfff15 	stw	r2,-4(fp)
    a01c:	e0bfff17 	ldw	r2,-4(fp)
    a020:	10820030 	cmpltui	r2,r2,2048
    a024:	103ff81e 	bne	r2,zero,a008 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a028:	0001883a 	nop
    a02c:	0001883a 	nop
    a030:	e037883a 	mov	sp,fp
    a034:	df000017 	ldw	fp,0(sp)
    a038:	dec00104 	addi	sp,sp,4
    a03c:	f800283a 	ret

0000a040 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a040:	defffc04 	addi	sp,sp,-16
    a044:	df000315 	stw	fp,12(sp)
    a048:	df000304 	addi	fp,sp,12
    a04c:	e13fff15 	stw	r4,-4(fp)
    a050:	e17ffe15 	stw	r5,-8(fp)
    a054:	e1bffd15 	stw	r6,-12(fp)
  return len;
    a058:	e0bffd17 	ldw	r2,-12(fp)
}
    a05c:	e037883a 	mov	sp,fp
    a060:	df000017 	ldw	fp,0(sp)
    a064:	dec00104 	addi	sp,sp,4
    a068:	f800283a 	ret

0000a06c <alt_get_errno>:
{
    a06c:	defffe04 	addi	sp,sp,-8
    a070:	dfc00115 	stw	ra,4(sp)
    a074:	df000015 	stw	fp,0(sp)
    a078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a07c:	d0a00717 	ldw	r2,-32740(gp)
    a080:	10000326 	beq	r2,zero,a090 <alt_get_errno+0x24>
    a084:	d0a00717 	ldw	r2,-32740(gp)
    a088:	103ee83a 	callr	r2
    a08c:	00000106 	br	a094 <alt_get_errno+0x28>
    a090:	d0a0c404 	addi	r2,gp,-31984
}
    a094:	e037883a 	mov	sp,fp
    a098:	dfc00117 	ldw	ra,4(sp)
    a09c:	df000017 	ldw	fp,0(sp)
    a0a0:	dec00204 	addi	sp,sp,8
    a0a4:	f800283a 	ret

0000a0a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a0a8:	defffa04 	addi	sp,sp,-24
    a0ac:	dfc00515 	stw	ra,20(sp)
    a0b0:	df000415 	stw	fp,16(sp)
    a0b4:	df000404 	addi	fp,sp,16
    a0b8:	e13ffd15 	stw	r4,-12(fp)
    a0bc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a0c0:	e0bffd17 	ldw	r2,-12(fp)
    a0c4:	10000326 	beq	r2,zero,a0d4 <alt_dev_llist_insert+0x2c>
    a0c8:	e0bffd17 	ldw	r2,-12(fp)
    a0cc:	10800217 	ldw	r2,8(r2)
    a0d0:	1000061e 	bne	r2,zero,a0ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    a0d4:	000a06c0 	call	a06c <alt_get_errno>
    a0d8:	1007883a 	mov	r3,r2
    a0dc:	00800584 	movi	r2,22
    a0e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    a0e4:	00bffa84 	movi	r2,-22
    a0e8:	00001406 	br	a13c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a0ec:	e0bffd17 	ldw	r2,-12(fp)
    a0f0:	e0fffc17 	ldw	r3,-16(fp)
    a0f4:	e0ffff15 	stw	r3,-4(fp)
    a0f8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a0fc:	e0bffe17 	ldw	r2,-8(fp)
    a100:	e0ffff17 	ldw	r3,-4(fp)
    a104:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a108:	e0bfff17 	ldw	r2,-4(fp)
    a10c:	10c00017 	ldw	r3,0(r2)
    a110:	e0bffe17 	ldw	r2,-8(fp)
    a114:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a118:	e0bfff17 	ldw	r2,-4(fp)
    a11c:	10800017 	ldw	r2,0(r2)
    a120:	e0fffe17 	ldw	r3,-8(fp)
    a124:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a128:	e0bfff17 	ldw	r2,-4(fp)
    a12c:	e0fffe17 	ldw	r3,-8(fp)
    a130:	10c00015 	stw	r3,0(r2)
}
    a134:	0001883a 	nop

  return 0;  
    a138:	0005883a 	mov	r2,zero
}
    a13c:	e037883a 	mov	sp,fp
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret

0000a150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    a150:	defffd04 	addi	sp,sp,-12
    a154:	dfc00215 	stw	ra,8(sp)
    a158:	df000115 	stw	fp,4(sp)
    a15c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a160:	00800074 	movhi	r2,1
    a164:	10ac4d04 	addi	r2,r2,-20172
    a168:	e0bfff15 	stw	r2,-4(fp)
    a16c:	00000606 	br	a188 <_do_ctors+0x38>
        (*ctor) (); 
    a170:	e0bfff17 	ldw	r2,-4(fp)
    a174:	10800017 	ldw	r2,0(r2)
    a178:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a17c:	e0bfff17 	ldw	r2,-4(fp)
    a180:	10bfff04 	addi	r2,r2,-4
    a184:	e0bfff15 	stw	r2,-4(fp)
    a188:	e0ffff17 	ldw	r3,-4(fp)
    a18c:	00800074 	movhi	r2,1
    a190:	10ac4e04 	addi	r2,r2,-20168
    a194:	18bff62e 	bgeu	r3,r2,a170 <_do_ctors+0x20>
}
    a198:	0001883a 	nop
    a19c:	0001883a 	nop
    a1a0:	e037883a 	mov	sp,fp
    a1a4:	dfc00117 	ldw	ra,4(sp)
    a1a8:	df000017 	ldw	fp,0(sp)
    a1ac:	dec00204 	addi	sp,sp,8
    a1b0:	f800283a 	ret

0000a1b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    a1b4:	defffd04 	addi	sp,sp,-12
    a1b8:	dfc00215 	stw	ra,8(sp)
    a1bc:	df000115 	stw	fp,4(sp)
    a1c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a1c4:	00800074 	movhi	r2,1
    a1c8:	10ac4d04 	addi	r2,r2,-20172
    a1cc:	e0bfff15 	stw	r2,-4(fp)
    a1d0:	00000606 	br	a1ec <_do_dtors+0x38>
        (*dtor) (); 
    a1d4:	e0bfff17 	ldw	r2,-4(fp)
    a1d8:	10800017 	ldw	r2,0(r2)
    a1dc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a1e0:	e0bfff17 	ldw	r2,-4(fp)
    a1e4:	10bfff04 	addi	r2,r2,-4
    a1e8:	e0bfff15 	stw	r2,-4(fp)
    a1ec:	e0ffff17 	ldw	r3,-4(fp)
    a1f0:	00800074 	movhi	r2,1
    a1f4:	10ac4e04 	addi	r2,r2,-20168
    a1f8:	18bff62e 	bgeu	r3,r2,a1d4 <_do_dtors+0x20>
}
    a1fc:	0001883a 	nop
    a200:	0001883a 	nop
    a204:	e037883a 	mov	sp,fp
    a208:	dfc00117 	ldw	ra,4(sp)
    a20c:	df000017 	ldw	fp,0(sp)
    a210:	dec00204 	addi	sp,sp,8
    a214:	f800283a 	ret

0000a218 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a218:	defffe04 	addi	sp,sp,-8
    a21c:	dfc00115 	stw	ra,4(sp)
    a220:	df000015 	stw	fp,0(sp)
    a224:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    a228:	01420004 	movi	r5,2048
    a22c:	0009883a 	mov	r4,zero
    a230:	000ad3c0 	call	ad3c <alt_icache_flush>
#endif
}
    a234:	0001883a 	nop
    a238:	e037883a 	mov	sp,fp
    a23c:	dfc00117 	ldw	ra,4(sp)
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00204 	addi	sp,sp,8
    a248:	f800283a 	ret

0000a24c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a24c:	defff904 	addi	sp,sp,-28
    a250:	dfc00615 	stw	ra,24(sp)
    a254:	df000515 	stw	fp,20(sp)
    a258:	df000504 	addi	fp,sp,20
    a25c:	e13fff15 	stw	r4,-4(fp)
    a260:	e17ffe15 	stw	r5,-8(fp)
    a264:	e1bffd15 	stw	r6,-12(fp)
    a268:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a26c:	e0800217 	ldw	r2,8(fp)
    a270:	d8800015 	stw	r2,0(sp)
    a274:	e1fffc17 	ldw	r7,-16(fp)
    a278:	e1bffd17 	ldw	r6,-12(fp)
    a27c:	e17ffe17 	ldw	r5,-8(fp)
    a280:	e13fff17 	ldw	r4,-4(fp)
    a284:	000a3fc0 	call	a3fc <alt_iic_isr_register>
}  
    a288:	e037883a 	mov	sp,fp
    a28c:	dfc00117 	ldw	ra,4(sp)
    a290:	df000017 	ldw	fp,0(sp)
    a294:	dec00204 	addi	sp,sp,8
    a298:	f800283a 	ret

0000a29c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a29c:	defff904 	addi	sp,sp,-28
    a2a0:	df000615 	stw	fp,24(sp)
    a2a4:	df000604 	addi	fp,sp,24
    a2a8:	e13ffb15 	stw	r4,-20(fp)
    a2ac:	e17ffa15 	stw	r5,-24(fp)
    a2b0:	e0bffa17 	ldw	r2,-24(fp)
    a2b4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    a2b8:	0005303a 	rdctl	r2,status
    a2bc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2c0:	e0fffe17 	ldw	r3,-8(fp)
    a2c4:	00bfff84 	movi	r2,-2
    a2c8:	1884703a 	and	r2,r3,r2
    a2cc:	1001703a 	wrctl	status,r2
  return context;
    a2d0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a2d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    a2d8:	00c00044 	movi	r3,1
    a2dc:	e0bfff17 	ldw	r2,-4(fp)
    a2e0:	1884983a 	sll	r2,r3,r2
    a2e4:	1007883a 	mov	r3,r2
    a2e8:	d0a0c817 	ldw	r2,-31968(gp)
    a2ec:	1884b03a 	or	r2,r3,r2
    a2f0:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a2f4:	d0a0c817 	ldw	r2,-31968(gp)
    a2f8:	100170fa 	wrctl	ienable,r2
    a2fc:	e0bffd17 	ldw	r2,-12(fp)
    a300:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a304:	e0bffc17 	ldw	r2,-16(fp)
    a308:	1001703a 	wrctl	status,r2
}
    a30c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    a310:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a314:	e037883a 	mov	sp,fp
    a318:	df000017 	ldw	fp,0(sp)
    a31c:	dec00104 	addi	sp,sp,4
    a320:	f800283a 	ret

0000a324 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a324:	defff904 	addi	sp,sp,-28
    a328:	df000615 	stw	fp,24(sp)
    a32c:	df000604 	addi	fp,sp,24
    a330:	e13ffb15 	stw	r4,-20(fp)
    a334:	e17ffa15 	stw	r5,-24(fp)
    a338:	e0bffa17 	ldw	r2,-24(fp)
    a33c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    a340:	0005303a 	rdctl	r2,status
    a344:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a348:	e0fffe17 	ldw	r3,-8(fp)
    a34c:	00bfff84 	movi	r2,-2
    a350:	1884703a 	and	r2,r3,r2
    a354:	1001703a 	wrctl	status,r2
  return context;
    a358:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    a35c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    a360:	00c00044 	movi	r3,1
    a364:	e0bfff17 	ldw	r2,-4(fp)
    a368:	1884983a 	sll	r2,r3,r2
    a36c:	0084303a 	nor	r2,zero,r2
    a370:	1007883a 	mov	r3,r2
    a374:	d0a0c817 	ldw	r2,-31968(gp)
    a378:	1884703a 	and	r2,r3,r2
    a37c:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a380:	d0a0c817 	ldw	r2,-31968(gp)
    a384:	100170fa 	wrctl	ienable,r2
    a388:	e0bffd17 	ldw	r2,-12(fp)
    a38c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a390:	e0bffc17 	ldw	r2,-16(fp)
    a394:	1001703a 	wrctl	status,r2
}
    a398:	0001883a 	nop
  return 0;
    a39c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a3a0:	e037883a 	mov	sp,fp
    a3a4:	df000017 	ldw	fp,0(sp)
    a3a8:	dec00104 	addi	sp,sp,4
    a3ac:	f800283a 	ret

0000a3b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a3b0:	defffc04 	addi	sp,sp,-16
    a3b4:	df000315 	stw	fp,12(sp)
    a3b8:	df000304 	addi	fp,sp,12
    a3bc:	e13ffe15 	stw	r4,-8(fp)
    a3c0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a3c4:	000530fa 	rdctl	r2,ienable
    a3c8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a3cc:	00c00044 	movi	r3,1
    a3d0:	e0bffd17 	ldw	r2,-12(fp)
    a3d4:	1884983a 	sll	r2,r3,r2
    a3d8:	1007883a 	mov	r3,r2
    a3dc:	e0bfff17 	ldw	r2,-4(fp)
    a3e0:	1884703a 	and	r2,r3,r2
    a3e4:	1004c03a 	cmpne	r2,r2,zero
    a3e8:	10803fcc 	andi	r2,r2,255
}
    a3ec:	e037883a 	mov	sp,fp
    a3f0:	df000017 	ldw	fp,0(sp)
    a3f4:	dec00104 	addi	sp,sp,4
    a3f8:	f800283a 	ret

0000a3fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a3fc:	defff504 	addi	sp,sp,-44
    a400:	dfc00a15 	stw	ra,40(sp)
    a404:	df000915 	stw	fp,36(sp)
    a408:	df000904 	addi	fp,sp,36
    a40c:	e13ffa15 	stw	r4,-24(fp)
    a410:	e17ff915 	stw	r5,-28(fp)
    a414:	e1bff815 	stw	r6,-32(fp)
    a418:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    a41c:	00bffa84 	movi	r2,-22
    a420:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a424:	e0bff917 	ldw	r2,-28(fp)
    a428:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a42c:	e0bffe17 	ldw	r2,-8(fp)
    a430:	10800808 	cmpgei	r2,r2,32
    a434:	1000251e 	bne	r2,zero,a4cc <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    a438:	0005303a 	rdctl	r2,status
    a43c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a440:	e0fffc17 	ldw	r3,-16(fp)
    a444:	00bfff84 	movi	r2,-2
    a448:	1884703a 	and	r2,r3,r2
    a44c:	1001703a 	wrctl	status,r2
  return context;
    a450:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a454:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    a458:	e0bffe17 	ldw	r2,-8(fp)
    a45c:	100890fa 	slli	r4,r2,3
    a460:	e0fff817 	ldw	r3,-32(fp)
    a464:	00800074 	movhi	r2,1
    a468:	2085883a 	add	r2,r4,r2
    a46c:	10ee1915 	stw	r3,-18332(r2)
    alt_irq[id].context = isr_context;
    a470:	e0bffe17 	ldw	r2,-8(fp)
    a474:	100890fa 	slli	r4,r2,3
    a478:	e0fff717 	ldw	r3,-36(fp)
    a47c:	00800074 	movhi	r2,1
    a480:	2085883a 	add	r2,r4,r2
    a484:	10ee1a15 	stw	r3,-18328(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a488:	e0bff817 	ldw	r2,-32(fp)
    a48c:	10000526 	beq	r2,zero,a4a4 <alt_iic_isr_register+0xa8>
    a490:	e0bffe17 	ldw	r2,-8(fp)
    a494:	100b883a 	mov	r5,r2
    a498:	e13ffa17 	ldw	r4,-24(fp)
    a49c:	000a29c0 	call	a29c <alt_ic_irq_enable>
    a4a0:	00000406 	br	a4b4 <alt_iic_isr_register+0xb8>
    a4a4:	e0bffe17 	ldw	r2,-8(fp)
    a4a8:	100b883a 	mov	r5,r2
    a4ac:	e13ffa17 	ldw	r4,-24(fp)
    a4b0:	000a3240 	call	a324 <alt_ic_irq_disable>
    a4b4:	e0bfff15 	stw	r2,-4(fp)
    a4b8:	e0bffd17 	ldw	r2,-12(fp)
    a4bc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a4c0:	e0bffb17 	ldw	r2,-20(fp)
    a4c4:	1001703a 	wrctl	status,r2
}
    a4c8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    a4cc:	e0bfff17 	ldw	r2,-4(fp)
}
    a4d0:	e037883a 	mov	sp,fp
    a4d4:	dfc00117 	ldw	ra,4(sp)
    a4d8:	df000017 	ldw	fp,0(sp)
    a4dc:	dec00204 	addi	sp,sp,8
    a4e0:	f800283a 	ret

0000a4e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a4e4:	defff904 	addi	sp,sp,-28
    a4e8:	dfc00615 	stw	ra,24(sp)
    a4ec:	df000515 	stw	fp,20(sp)
    a4f0:	df000504 	addi	fp,sp,20
    a4f4:	e13ffe15 	stw	r4,-8(fp)
    a4f8:	e17ffd15 	stw	r5,-12(fp)
    a4fc:	e1bffc15 	stw	r6,-16(fp)
    a500:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    a504:	e1bffb17 	ldw	r6,-20(fp)
    a508:	e17ffc17 	ldw	r5,-16(fp)
    a50c:	e13ffd17 	ldw	r4,-12(fp)
    a510:	000a74c0 	call	a74c <open>
    a514:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    a518:	e0bfff17 	ldw	r2,-4(fp)
    a51c:	10002016 	blt	r2,zero,a5a0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    a520:	e0ffff17 	ldw	r3,-4(fp)
    a524:	1805883a 	mov	r2,r3
    a528:	1085883a 	add	r2,r2,r2
    a52c:	10c5883a 	add	r2,r2,r3
    a530:	100490ba 	slli	r2,r2,2
    a534:	00c00074 	movhi	r3,1
    a538:	10c7883a 	add	r3,r2,r3
    a53c:	18eced17 	ldw	r3,-19532(r3)
    a540:	e0bffe17 	ldw	r2,-8(fp)
    a544:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a548:	e0ffff17 	ldw	r3,-4(fp)
    a54c:	1805883a 	mov	r2,r3
    a550:	1085883a 	add	r2,r2,r2
    a554:	10c5883a 	add	r2,r2,r3
    a558:	100490ba 	slli	r2,r2,2
    a55c:	00c00074 	movhi	r3,1
    a560:	10c7883a 	add	r3,r2,r3
    a564:	18ecee17 	ldw	r3,-19528(r3)
    a568:	e0bffe17 	ldw	r2,-8(fp)
    a56c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a570:	e0ffff17 	ldw	r3,-4(fp)
    a574:	1805883a 	mov	r2,r3
    a578:	1085883a 	add	r2,r2,r2
    a57c:	10c5883a 	add	r2,r2,r3
    a580:	100490ba 	slli	r2,r2,2
    a584:	00c00074 	movhi	r3,1
    a588:	10c7883a 	add	r3,r2,r3
    a58c:	18ecef17 	ldw	r3,-19524(r3)
    a590:	e0bffe17 	ldw	r2,-8(fp)
    a594:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a598:	e13fff17 	ldw	r4,-4(fp)
    a59c:	000a8ac0 	call	a8ac <alt_release_fd>
  }
} 
    a5a0:	0001883a 	nop
    a5a4:	e037883a 	mov	sp,fp
    a5a8:	dfc00117 	ldw	ra,4(sp)
    a5ac:	df000017 	ldw	fp,0(sp)
    a5b0:	dec00204 	addi	sp,sp,8
    a5b4:	f800283a 	ret

0000a5b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a5b8:	defffb04 	addi	sp,sp,-20
    a5bc:	dfc00415 	stw	ra,16(sp)
    a5c0:	df000315 	stw	fp,12(sp)
    a5c4:	df000304 	addi	fp,sp,12
    a5c8:	e13fff15 	stw	r4,-4(fp)
    a5cc:	e17ffe15 	stw	r5,-8(fp)
    a5d0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a5d4:	01c07fc4 	movi	r7,511
    a5d8:	01800044 	movi	r6,1
    a5dc:	e17fff17 	ldw	r5,-4(fp)
    a5e0:	01000074 	movhi	r4,1
    a5e4:	212cf004 	addi	r4,r4,-19520
    a5e8:	000a4e40 	call	a4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a5ec:	01c07fc4 	movi	r7,511
    a5f0:	000d883a 	mov	r6,zero
    a5f4:	e17ffe17 	ldw	r5,-8(fp)
    a5f8:	01000074 	movhi	r4,1
    a5fc:	212ced04 	addi	r4,r4,-19532
    a600:	000a4e40 	call	a4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a604:	01c07fc4 	movi	r7,511
    a608:	01800044 	movi	r6,1
    a60c:	e17ffd17 	ldw	r5,-12(fp)
    a610:	01000074 	movhi	r4,1
    a614:	212cf304 	addi	r4,r4,-19508
    a618:	000a4e40 	call	a4e4 <alt_open_fd>
}  
    a61c:	0001883a 	nop
    a620:	e037883a 	mov	sp,fp
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	df000017 	ldw	fp,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <alt_get_errno>:
{
    a634:	defffe04 	addi	sp,sp,-8
    a638:	dfc00115 	stw	ra,4(sp)
    a63c:	df000015 	stw	fp,0(sp)
    a640:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a644:	d0a00717 	ldw	r2,-32740(gp)
    a648:	10000326 	beq	r2,zero,a658 <alt_get_errno+0x24>
    a64c:	d0a00717 	ldw	r2,-32740(gp)
    a650:	103ee83a 	callr	r2
    a654:	00000106 	br	a65c <alt_get_errno+0x28>
    a658:	d0a0c404 	addi	r2,gp,-31984
}
    a65c:	e037883a 	mov	sp,fp
    a660:	dfc00117 	ldw	ra,4(sp)
    a664:	df000017 	ldw	fp,0(sp)
    a668:	dec00204 	addi	sp,sp,8
    a66c:	f800283a 	ret

0000a670 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a670:	defffd04 	addi	sp,sp,-12
    a674:	df000215 	stw	fp,8(sp)
    a678:	df000204 	addi	fp,sp,8
    a67c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a680:	e0bffe17 	ldw	r2,-8(fp)
    a684:	10800217 	ldw	r2,8(r2)
    a688:	10d00034 	orhi	r3,r2,16384
    a68c:	e0bffe17 	ldw	r2,-8(fp)
    a690:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a694:	e03fff15 	stw	zero,-4(fp)
    a698:	00002306 	br	a728 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a69c:	e0ffff17 	ldw	r3,-4(fp)
    a6a0:	1805883a 	mov	r2,r3
    a6a4:	1085883a 	add	r2,r2,r2
    a6a8:	10c5883a 	add	r2,r2,r3
    a6ac:	100490ba 	slli	r2,r2,2
    a6b0:	00c00074 	movhi	r3,1
    a6b4:	10c7883a 	add	r3,r2,r3
    a6b8:	18eced17 	ldw	r3,-19532(r3)
    a6bc:	e0bffe17 	ldw	r2,-8(fp)
    a6c0:	10800017 	ldw	r2,0(r2)
    a6c4:	1880151e 	bne	r3,r2,a71c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a6c8:	e0ffff17 	ldw	r3,-4(fp)
    a6cc:	1805883a 	mov	r2,r3
    a6d0:	1085883a 	add	r2,r2,r2
    a6d4:	10c5883a 	add	r2,r2,r3
    a6d8:	100490ba 	slli	r2,r2,2
    a6dc:	00c00074 	movhi	r3,1
    a6e0:	10c7883a 	add	r3,r2,r3
    a6e4:	18acef17 	ldw	r2,-19524(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    a6e8:	10000c0e 	bge	r2,zero,a71c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    a6ec:	e0ffff17 	ldw	r3,-4(fp)
    a6f0:	1805883a 	mov	r2,r3
    a6f4:	1085883a 	add	r2,r2,r2
    a6f8:	10c5883a 	add	r2,r2,r3
    a6fc:	100490ba 	slli	r2,r2,2
    a700:	00c00074 	movhi	r3,1
    a704:	18eced04 	addi	r3,r3,-19532
    a708:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a70c:	e0fffe17 	ldw	r3,-8(fp)
    a710:	18800226 	beq	r3,r2,a71c <alt_file_locked+0xac>
    {
      return -EACCES;
    a714:	00bffcc4 	movi	r2,-13
    a718:	00000806 	br	a73c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    a71c:	e0bfff17 	ldw	r2,-4(fp)
    a720:	10800044 	addi	r2,r2,1
    a724:	e0bfff15 	stw	r2,-4(fp)
    a728:	d0a00617 	ldw	r2,-32744(gp)
    a72c:	1007883a 	mov	r3,r2
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	18bfd92e 	bgeu	r3,r2,a69c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a738:	0005883a 	mov	r2,zero
}
    a73c:	e037883a 	mov	sp,fp
    a740:	df000017 	ldw	fp,0(sp)
    a744:	dec00104 	addi	sp,sp,4
    a748:	f800283a 	ret

0000a74c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a74c:	defff604 	addi	sp,sp,-40
    a750:	dfc00915 	stw	ra,36(sp)
    a754:	df000815 	stw	fp,32(sp)
    a758:	df000804 	addi	fp,sp,32
    a75c:	e13ffa15 	stw	r4,-24(fp)
    a760:	e17ff915 	stw	r5,-28(fp)
    a764:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a768:	00bfffc4 	movi	r2,-1
    a76c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    a770:	00bffb44 	movi	r2,-19
    a774:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    a778:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a77c:	d1600404 	addi	r5,gp,-32752
    a780:	e13ffa17 	ldw	r4,-24(fp)
    a784:	000aaec0 	call	aaec <alt_find_dev>
    a788:	e0bfff15 	stw	r2,-4(fp)
    a78c:	e0bfff17 	ldw	r2,-4(fp)
    a790:	1000051e 	bne	r2,zero,a7a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a794:	e13ffa17 	ldw	r4,-24(fp)
    a798:	000ab7c0 	call	ab7c <alt_find_file>
    a79c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    a7a0:	00800044 	movi	r2,1
    a7a4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	10002c26 	beq	r2,zero,a860 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a7b0:	e13fff17 	ldw	r4,-4(fp)
    a7b4:	000ac840 	call	ac84 <alt_get_fd>
    a7b8:	e0bffe15 	stw	r2,-8(fp)
    a7bc:	e0bffe17 	ldw	r2,-8(fp)
    a7c0:	1000030e 	bge	r2,zero,a7d0 <open+0x84>
    {
      status = index;
    a7c4:	e0bffe17 	ldw	r2,-8(fp)
    a7c8:	e0bffd15 	stw	r2,-12(fp)
    a7cc:	00002606 	br	a868 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a7d0:	e0fffe17 	ldw	r3,-8(fp)
    a7d4:	1805883a 	mov	r2,r3
    a7d8:	1085883a 	add	r2,r2,r2
    a7dc:	10c5883a 	add	r2,r2,r3
    a7e0:	100490ba 	slli	r2,r2,2
    a7e4:	00c00074 	movhi	r3,1
    a7e8:	18eced04 	addi	r3,r3,-19532
    a7ec:	10c5883a 	add	r2,r2,r3
    a7f0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a7f4:	e0fff917 	ldw	r3,-28(fp)
    a7f8:	00900034 	movhi	r2,16384
    a7fc:	10bfffc4 	addi	r2,r2,-1
    a800:	1886703a 	and	r3,r3,r2
    a804:	e0bffb17 	ldw	r2,-20(fp)
    a808:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a80c:	e0bffc17 	ldw	r2,-16(fp)
    a810:	1000051e 	bne	r2,zero,a828 <open+0xdc>
    a814:	e13ffb17 	ldw	r4,-20(fp)
    a818:	000a6700 	call	a670 <alt_file_locked>
    a81c:	e0bffd15 	stw	r2,-12(fp)
    a820:	e0bffd17 	ldw	r2,-12(fp)
    a824:	10001016 	blt	r2,zero,a868 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a828:	e0bfff17 	ldw	r2,-4(fp)
    a82c:	10800317 	ldw	r2,12(r2)
    a830:	10000826 	beq	r2,zero,a854 <open+0x108>
    a834:	e0bfff17 	ldw	r2,-4(fp)
    a838:	10800317 	ldw	r2,12(r2)
    a83c:	e1fff817 	ldw	r7,-32(fp)
    a840:	e1bff917 	ldw	r6,-28(fp)
    a844:	e17ffa17 	ldw	r5,-24(fp)
    a848:	e13ffb17 	ldw	r4,-20(fp)
    a84c:	103ee83a 	callr	r2
    a850:	00000106 	br	a858 <open+0x10c>
    a854:	0005883a 	mov	r2,zero
    a858:	e0bffd15 	stw	r2,-12(fp)
    a85c:	00000206 	br	a868 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a860:	00bffb44 	movi	r2,-19
    a864:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a868:	e0bffd17 	ldw	r2,-12(fp)
    a86c:	1000090e 	bge	r2,zero,a894 <open+0x148>
  {
    alt_release_fd (index);  
    a870:	e13ffe17 	ldw	r4,-8(fp)
    a874:	000a8ac0 	call	a8ac <alt_release_fd>
    ALT_ERRNO = -status;
    a878:	000a6340 	call	a634 <alt_get_errno>
    a87c:	1007883a 	mov	r3,r2
    a880:	e0bffd17 	ldw	r2,-12(fp)
    a884:	0085c83a 	sub	r2,zero,r2
    a888:	18800015 	stw	r2,0(r3)
    return -1;
    a88c:	00bfffc4 	movi	r2,-1
    a890:	00000106 	br	a898 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    a894:	e0bffe17 	ldw	r2,-8(fp)
}
    a898:	e037883a 	mov	sp,fp
    a89c:	dfc00117 	ldw	ra,4(sp)
    a8a0:	df000017 	ldw	fp,0(sp)
    a8a4:	dec00204 	addi	sp,sp,8
    a8a8:	f800283a 	ret

0000a8ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a8ac:	defffe04 	addi	sp,sp,-8
    a8b0:	df000115 	stw	fp,4(sp)
    a8b4:	df000104 	addi	fp,sp,4
    a8b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a8bc:	e0bfff17 	ldw	r2,-4(fp)
    a8c0:	108000d0 	cmplti	r2,r2,3
    a8c4:	1000101e 	bne	r2,zero,a908 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    a8c8:	e0ffff17 	ldw	r3,-4(fp)
    a8cc:	1805883a 	mov	r2,r3
    a8d0:	1085883a 	add	r2,r2,r2
    a8d4:	10c5883a 	add	r2,r2,r3
    a8d8:	100490ba 	slli	r2,r2,2
    a8dc:	00c00074 	movhi	r3,1
    a8e0:	10c7883a 	add	r3,r2,r3
    a8e4:	182cef15 	stw	zero,-19524(r3)
    alt_fd_list[fd].dev      = 0;
    a8e8:	e0ffff17 	ldw	r3,-4(fp)
    a8ec:	1805883a 	mov	r2,r3
    a8f0:	1085883a 	add	r2,r2,r2
    a8f4:	10c5883a 	add	r2,r2,r3
    a8f8:	100490ba 	slli	r2,r2,2
    a8fc:	00c00074 	movhi	r3,1
    a900:	10c7883a 	add	r3,r2,r3
    a904:	182ced15 	stw	zero,-19532(r3)
  }
}
    a908:	0001883a 	nop
    a90c:	e037883a 	mov	sp,fp
    a910:	df000017 	ldw	fp,0(sp)
    a914:	dec00104 	addi	sp,sp,4
    a918:	f800283a 	ret

0000a91c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a91c:	defffa04 	addi	sp,sp,-24
    a920:	df000515 	stw	fp,20(sp)
    a924:	df000504 	addi	fp,sp,20
    a928:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    a92c:	0005303a 	rdctl	r2,status
    a930:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a934:	e0fffc17 	ldw	r3,-16(fp)
    a938:	00bfff84 	movi	r2,-2
    a93c:	1884703a 	and	r2,r3,r2
    a940:	1001703a 	wrctl	status,r2
  return context;
    a944:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a948:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    a94c:	e0bffb17 	ldw	r2,-20(fp)
    a950:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a954:	e0bffd17 	ldw	r2,-12(fp)
    a958:	10800017 	ldw	r2,0(r2)
    a95c:	e0fffd17 	ldw	r3,-12(fp)
    a960:	18c00117 	ldw	r3,4(r3)
    a964:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a968:	e0bffd17 	ldw	r2,-12(fp)
    a96c:	10800117 	ldw	r2,4(r2)
    a970:	e0fffd17 	ldw	r3,-12(fp)
    a974:	18c00017 	ldw	r3,0(r3)
    a978:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a97c:	e0bffd17 	ldw	r2,-12(fp)
    a980:	e0fffd17 	ldw	r3,-12(fp)
    a984:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a988:	e0bffd17 	ldw	r2,-12(fp)
    a98c:	e0fffd17 	ldw	r3,-12(fp)
    a990:	10c00015 	stw	r3,0(r2)
} 
    a994:	0001883a 	nop
    a998:	e0bfff17 	ldw	r2,-4(fp)
    a99c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    a9a0:	e0bffe17 	ldw	r2,-8(fp)
    a9a4:	1001703a 	wrctl	status,r2
}
    a9a8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    a9ac:	0001883a 	nop
    a9b0:	e037883a 	mov	sp,fp
    a9b4:	df000017 	ldw	fp,0(sp)
    a9b8:	dec00104 	addi	sp,sp,4
    a9bc:	f800283a 	ret

0000a9c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a9c0:	defffb04 	addi	sp,sp,-20
    a9c4:	dfc00415 	stw	ra,16(sp)
    a9c8:	df000315 	stw	fp,12(sp)
    a9cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a9d0:	d0a00917 	ldw	r2,-32732(gp)
    a9d4:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a9d8:	d0a0ca17 	ldw	r2,-31960(gp)
    a9dc:	10800044 	addi	r2,r2,1
    a9e0:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a9e4:	00002e06 	br	aaa0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a9e8:	e0bfff17 	ldw	r2,-4(fp)
    a9ec:	10800017 	ldw	r2,0(r2)
    a9f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a9f4:	e0bfff17 	ldw	r2,-4(fp)
    a9f8:	10800403 	ldbu	r2,16(r2)
    a9fc:	10803fcc 	andi	r2,r2,255
    aa00:	10000426 	beq	r2,zero,aa14 <alt_tick+0x54>
    aa04:	d0a0ca17 	ldw	r2,-31960(gp)
    aa08:	1000021e 	bne	r2,zero,aa14 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    aa0c:	e0bfff17 	ldw	r2,-4(fp)
    aa10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    aa14:	e0bfff17 	ldw	r2,-4(fp)
    aa18:	10800217 	ldw	r2,8(r2)
    aa1c:	d0e0ca17 	ldw	r3,-31960(gp)
    aa20:	18801d36 	bltu	r3,r2,aa98 <alt_tick+0xd8>
    aa24:	e0bfff17 	ldw	r2,-4(fp)
    aa28:	10800403 	ldbu	r2,16(r2)
    aa2c:	10803fcc 	andi	r2,r2,255
    aa30:	1000191e 	bne	r2,zero,aa98 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    aa34:	e0bfff17 	ldw	r2,-4(fp)
    aa38:	10800317 	ldw	r2,12(r2)
    aa3c:	e0ffff17 	ldw	r3,-4(fp)
    aa40:	18c00517 	ldw	r3,20(r3)
    aa44:	1809883a 	mov	r4,r3
    aa48:	103ee83a 	callr	r2
    aa4c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    aa50:	e0bffd17 	ldw	r2,-12(fp)
    aa54:	1000031e 	bne	r2,zero,aa64 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    aa58:	e13fff17 	ldw	r4,-4(fp)
    aa5c:	000a91c0 	call	a91c <alt_alarm_stop>
    aa60:	00000d06 	br	aa98 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    aa64:	e0bfff17 	ldw	r2,-4(fp)
    aa68:	10c00217 	ldw	r3,8(r2)
    aa6c:	e0bffd17 	ldw	r2,-12(fp)
    aa70:	1887883a 	add	r3,r3,r2
    aa74:	e0bfff17 	ldw	r2,-4(fp)
    aa78:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    aa7c:	e0bfff17 	ldw	r2,-4(fp)
    aa80:	10c00217 	ldw	r3,8(r2)
    aa84:	d0a0ca17 	ldw	r2,-31960(gp)
    aa88:	1880032e 	bgeu	r3,r2,aa98 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    aa8c:	e0bfff17 	ldw	r2,-4(fp)
    aa90:	00c00044 	movi	r3,1
    aa94:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    aa98:	e0bffe17 	ldw	r2,-8(fp)
    aa9c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    aaa0:	e0ffff17 	ldw	r3,-4(fp)
    aaa4:	d0a00904 	addi	r2,gp,-32732
    aaa8:	18bfcf1e 	bne	r3,r2,a9e8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    aaac:	0001883a 	nop
}
    aab0:	0001883a 	nop
    aab4:	e037883a 	mov	sp,fp
    aab8:	dfc00117 	ldw	ra,4(sp)
    aabc:	df000017 	ldw	fp,0(sp)
    aac0:	dec00204 	addi	sp,sp,8
    aac4:	f800283a 	ret

0000aac8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    aac8:	deffff04 	addi	sp,sp,-4
    aacc:	df000015 	stw	fp,0(sp)
    aad0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    aad4:	000170fa 	wrctl	ienable,zero
}
    aad8:	0001883a 	nop
    aadc:	e037883a 	mov	sp,fp
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00104 	addi	sp,sp,4
    aae8:	f800283a 	ret

0000aaec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    aaec:	defffa04 	addi	sp,sp,-24
    aaf0:	dfc00515 	stw	ra,20(sp)
    aaf4:	df000415 	stw	fp,16(sp)
    aaf8:	df000404 	addi	fp,sp,16
    aafc:	e13ffd15 	stw	r4,-12(fp)
    ab00:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ab04:	e0bffc17 	ldw	r2,-16(fp)
    ab08:	10800017 	ldw	r2,0(r2)
    ab0c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ab10:	e13ffd17 	ldw	r4,-12(fp)
    ab14:	0008f0c0 	call	8f0c <strlen>
    ab18:	10800044 	addi	r2,r2,1
    ab1c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ab20:	00000d06 	br	ab58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ab24:	e0bfff17 	ldw	r2,-4(fp)
    ab28:	10800217 	ldw	r2,8(r2)
    ab2c:	e0fffe17 	ldw	r3,-8(fp)
    ab30:	180d883a 	mov	r6,r3
    ab34:	e17ffd17 	ldw	r5,-12(fp)
    ab38:	1009883a 	mov	r4,r2
    ab3c:	000ae980 	call	ae98 <memcmp>
    ab40:	1000021e 	bne	r2,zero,ab4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ab44:	e0bfff17 	ldw	r2,-4(fp)
    ab48:	00000706 	br	ab68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ab4c:	e0bfff17 	ldw	r2,-4(fp)
    ab50:	10800017 	ldw	r2,0(r2)
    ab54:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    ab58:	e0ffff17 	ldw	r3,-4(fp)
    ab5c:	e0bffc17 	ldw	r2,-16(fp)
    ab60:	18bff01e 	bne	r3,r2,ab24 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    ab64:	0005883a 	mov	r2,zero
}
    ab68:	e037883a 	mov	sp,fp
    ab6c:	dfc00117 	ldw	ra,4(sp)
    ab70:	df000017 	ldw	fp,0(sp)
    ab74:	dec00204 	addi	sp,sp,8
    ab78:	f800283a 	ret

0000ab7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ab7c:	defffb04 	addi	sp,sp,-20
    ab80:	dfc00415 	stw	ra,16(sp)
    ab84:	df000315 	stw	fp,12(sp)
    ab88:	df000304 	addi	fp,sp,12
    ab8c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ab90:	d0a00217 	ldw	r2,-32760(gp)
    ab94:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ab98:	00003106 	br	ac60 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ab9c:	e0bfff17 	ldw	r2,-4(fp)
    aba0:	10800217 	ldw	r2,8(r2)
    aba4:	1009883a 	mov	r4,r2
    aba8:	0008f0c0 	call	8f0c <strlen>
    abac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    abb0:	e0bfff17 	ldw	r2,-4(fp)
    abb4:	10c00217 	ldw	r3,8(r2)
    abb8:	e0bffe17 	ldw	r2,-8(fp)
    abbc:	10bfffc4 	addi	r2,r2,-1
    abc0:	1885883a 	add	r2,r3,r2
    abc4:	10800003 	ldbu	r2,0(r2)
    abc8:	10803fcc 	andi	r2,r2,255
    abcc:	1080201c 	xori	r2,r2,128
    abd0:	10bfe004 	addi	r2,r2,-128
    abd4:	10800bd8 	cmpnei	r2,r2,47
    abd8:	1000031e 	bne	r2,zero,abe8 <alt_find_file+0x6c>
    {
      len -= 1;
    abdc:	e0bffe17 	ldw	r2,-8(fp)
    abe0:	10bfffc4 	addi	r2,r2,-1
    abe4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    abe8:	e0bffe17 	ldw	r2,-8(fp)
    abec:	e0fffd17 	ldw	r3,-12(fp)
    abf0:	1885883a 	add	r2,r3,r2
    abf4:	10800003 	ldbu	r2,0(r2)
    abf8:	10803fcc 	andi	r2,r2,255
    abfc:	1080201c 	xori	r2,r2,128
    ac00:	10bfe004 	addi	r2,r2,-128
    ac04:	10800be0 	cmpeqi	r2,r2,47
    ac08:	1000081e 	bne	r2,zero,ac2c <alt_find_file+0xb0>
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	e0fffd17 	ldw	r3,-12(fp)
    ac14:	1885883a 	add	r2,r3,r2
    ac18:	10800003 	ldbu	r2,0(r2)
    ac1c:	10803fcc 	andi	r2,r2,255
    ac20:	1080201c 	xori	r2,r2,128
    ac24:	10bfe004 	addi	r2,r2,-128
    ac28:	10000a1e 	bne	r2,zero,ac54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    ac2c:	e0bfff17 	ldw	r2,-4(fp)
    ac30:	10800217 	ldw	r2,8(r2)
    ac34:	e0fffe17 	ldw	r3,-8(fp)
    ac38:	180d883a 	mov	r6,r3
    ac3c:	e17ffd17 	ldw	r5,-12(fp)
    ac40:	1009883a 	mov	r4,r2
    ac44:	000ae980 	call	ae98 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    ac48:	1000021e 	bne	r2,zero,ac54 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    ac4c:	e0bfff17 	ldw	r2,-4(fp)
    ac50:	00000706 	br	ac70 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    ac54:	e0bfff17 	ldw	r2,-4(fp)
    ac58:	10800017 	ldw	r2,0(r2)
    ac5c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    ac60:	e0ffff17 	ldw	r3,-4(fp)
    ac64:	d0a00204 	addi	r2,gp,-32760
    ac68:	18bfcc1e 	bne	r3,r2,ab9c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    ac6c:	0005883a 	mov	r2,zero
}
    ac70:	e037883a 	mov	sp,fp
    ac74:	dfc00117 	ldw	ra,4(sp)
    ac78:	df000017 	ldw	fp,0(sp)
    ac7c:	dec00204 	addi	sp,sp,8
    ac80:	f800283a 	ret

0000ac84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ac84:	defffc04 	addi	sp,sp,-16
    ac88:	df000315 	stw	fp,12(sp)
    ac8c:	df000304 	addi	fp,sp,12
    ac90:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    ac94:	00bffa04 	movi	r2,-24
    ac98:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ac9c:	e03fff15 	stw	zero,-4(fp)
    aca0:	00001d06 	br	ad18 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    aca4:	e0ffff17 	ldw	r3,-4(fp)
    aca8:	1805883a 	mov	r2,r3
    acac:	1085883a 	add	r2,r2,r2
    acb0:	10c5883a 	add	r2,r2,r3
    acb4:	100490ba 	slli	r2,r2,2
    acb8:	00c00074 	movhi	r3,1
    acbc:	10c7883a 	add	r3,r2,r3
    acc0:	18aced17 	ldw	r2,-19532(r3)
    acc4:	1000111e 	bne	r2,zero,ad0c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    acc8:	e0ffff17 	ldw	r3,-4(fp)
    accc:	1805883a 	mov	r2,r3
    acd0:	1085883a 	add	r2,r2,r2
    acd4:	10c5883a 	add	r2,r2,r3
    acd8:	100490ba 	slli	r2,r2,2
    acdc:	e13ffd17 	ldw	r4,-12(fp)
    ace0:	00c00074 	movhi	r3,1
    ace4:	10c7883a 	add	r3,r2,r3
    ace8:	192ced15 	stw	r4,-19532(r3)
      if (i > alt_max_fd)
    acec:	d0e00617 	ldw	r3,-32744(gp)
    acf0:	e0bfff17 	ldw	r2,-4(fp)
    acf4:	1880020e 	bge	r3,r2,ad00 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    acf8:	e0bfff17 	ldw	r2,-4(fp)
    acfc:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    ad00:	e0bfff17 	ldw	r2,-4(fp)
    ad04:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    ad08:	00000706 	br	ad28 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    ad0c:	e0bfff17 	ldw	r2,-4(fp)
    ad10:	10800044 	addi	r2,r2,1
    ad14:	e0bfff15 	stw	r2,-4(fp)
    ad18:	e0bfff17 	ldw	r2,-4(fp)
    ad1c:	10800810 	cmplti	r2,r2,32
    ad20:	103fe01e 	bne	r2,zero,aca4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    ad24:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ad28:	e0bffe17 	ldw	r2,-8(fp)
}
    ad2c:	e037883a 	mov	sp,fp
    ad30:	df000017 	ldw	fp,0(sp)
    ad34:	dec00104 	addi	sp,sp,4
    ad38:	f800283a 	ret

0000ad3c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ad3c:	defffb04 	addi	sp,sp,-20
    ad40:	df000415 	stw	fp,16(sp)
    ad44:	df000404 	addi	fp,sp,16
    ad48:	e13ffd15 	stw	r4,-12(fp)
    ad4c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ad50:	e0bffc17 	ldw	r2,-16(fp)
    ad54:	10820070 	cmpltui	r2,r2,2049
    ad58:	1000021e 	bne	r2,zero,ad64 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ad5c:	00820004 	movi	r2,2048
    ad60:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    ad64:	e0fffd17 	ldw	r3,-12(fp)
    ad68:	e0bffc17 	ldw	r2,-16(fp)
    ad6c:	1885883a 	add	r2,r3,r2
    ad70:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ad74:	e0bffd17 	ldw	r2,-12(fp)
    ad78:	e0bfff15 	stw	r2,-4(fp)
    ad7c:	00000506 	br	ad94 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ad80:	e0bfff17 	ldw	r2,-4(fp)
    ad84:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ad88:	e0bfff17 	ldw	r2,-4(fp)
    ad8c:	10800804 	addi	r2,r2,32
    ad90:	e0bfff15 	stw	r2,-4(fp)
    ad94:	e0ffff17 	ldw	r3,-4(fp)
    ad98:	e0bffe17 	ldw	r2,-8(fp)
    ad9c:	18bff836 	bltu	r3,r2,ad80 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ada0:	e0bffd17 	ldw	r2,-12(fp)
    ada4:	108007cc 	andi	r2,r2,31
    ada8:	10000226 	beq	r2,zero,adb4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    adac:	e0bfff17 	ldw	r2,-4(fp)
    adb0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    adb4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    adb8:	0001883a 	nop
    adbc:	e037883a 	mov	sp,fp
    adc0:	df000017 	ldw	fp,0(sp)
    adc4:	dec00104 	addi	sp,sp,4
    adc8:	f800283a 	ret

0000adcc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    adcc:	defffe04 	addi	sp,sp,-8
    add0:	df000115 	stw	fp,4(sp)
    add4:	df000104 	addi	fp,sp,4
    add8:	e13fff15 	stw	r4,-4(fp)
    addc:	e0bfff17 	ldw	r2,-4(fp)
    ade0:	10bffe84 	addi	r2,r2,-6
    ade4:	10c00428 	cmpgeui	r3,r2,16
    ade8:	1800191e 	bne	r3,zero,ae50 <alt_exception_cause_generated_bad_addr+0x84>
    adec:	100690ba 	slli	r3,r2,2
    adf0:	00800074 	movhi	r2,1
    adf4:	1885883a 	add	r2,r3,r2
    adf8:	10ab8017 	ldw	r2,-20992(r2)
    adfc:	1000683a 	jmp	r2
    ae00:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae04:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae08:	0000ae50 	cmplti	zero,zero,697
    ae0c:	0000ae50 	cmplti	zero,zero,697
    ae10:	0000ae50 	cmplti	zero,zero,697
    ae14:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae18:	0000ae48 	cmpgei	zero,zero,697
    ae1c:	0000ae50 	cmplti	zero,zero,697
    ae20:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae24:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae28:	0000ae50 	cmplti	zero,zero,697
    ae2c:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
    ae30:	0000ae48 	cmpgei	zero,zero,697
    ae34:	0000ae50 	cmplti	zero,zero,697
    ae38:	0000ae50 	cmplti	zero,zero,697
    ae3c:	0000ae40 	call	ae4 <__alt_mem_onchip_mem-0x751c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    ae40:	00800044 	movi	r2,1
    ae44:	00000306 	br	ae54 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    ae48:	0005883a 	mov	r2,zero
    ae4c:	00000106 	br	ae54 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    ae50:	0005883a 	mov	r2,zero
  }
}
    ae54:	e037883a 	mov	sp,fp
    ae58:	df000017 	ldw	fp,0(sp)
    ae5c:	dec00104 	addi	sp,sp,4
    ae60:	f800283a 	ret

0000ae64 <atexit>:
    ae64:	200b883a 	mov	r5,r4
    ae68:	000f883a 	mov	r7,zero
    ae6c:	000d883a 	mov	r6,zero
    ae70:	0009883a 	mov	r4,zero
    ae74:	000aec81 	jmpi	aec8 <__register_exitproc>

0000ae78 <exit>:
    ae78:	defffe04 	addi	sp,sp,-8
    ae7c:	000b883a 	mov	r5,zero
    ae80:	dc000015 	stw	r16,0(sp)
    ae84:	dfc00115 	stw	ra,4(sp)
    ae88:	2021883a 	mov	r16,r4
    ae8c:	000afe40 	call	afe4 <__call_exitprocs>
    ae90:	8009883a 	mov	r4,r16
    ae94:	000b1000 	call	b100 <_exit>

0000ae98 <memcmp>:
    ae98:	0007883a 	mov	r3,zero
    ae9c:	30c0021e 	bne	r6,r3,aea8 <memcmp+0x10>
    aea0:	0005883a 	mov	r2,zero
    aea4:	f800283a 	ret
    aea8:	20c5883a 	add	r2,r4,r3
    aeac:	18c00044 	addi	r3,r3,1
    aeb0:	28cf883a 	add	r7,r5,r3
    aeb4:	10800003 	ldbu	r2,0(r2)
    aeb8:	39ffffc3 	ldbu	r7,-1(r7)
    aebc:	11fff726 	beq	r2,r7,ae9c <memcmp+0x4>
    aec0:	11c5c83a 	sub	r2,r2,r7
    aec4:	f800283a 	ret

0000aec8 <__register_exitproc>:
    aec8:	00800074 	movhi	r2,1
    aecc:	10ad4d17 	ldw	r2,-19148(r2)
    aed0:	defff904 	addi	sp,sp,-28
    aed4:	dc000015 	stw	r16,0(sp)
    aed8:	14000d17 	ldw	r16,52(r2)
    aedc:	dd400515 	stw	r21,20(sp)
    aee0:	dd000415 	stw	r20,16(sp)
    aee4:	dcc00315 	stw	r19,12(sp)
    aee8:	dc800215 	stw	r18,8(sp)
    aeec:	dfc00615 	stw	ra,24(sp)
    aef0:	dc400115 	stw	r17,4(sp)
    aef4:	2025883a 	mov	r18,r4
    aef8:	2827883a 	mov	r19,r5
    aefc:	302b883a 	mov	r21,r6
    af00:	3829883a 	mov	r20,r7
    af04:	8000081e 	bne	r16,zero,af28 <__register_exitproc+0x60>
    af08:	14000e04 	addi	r16,r2,56
    af0c:	00c00034 	movhi	r3,0
    af10:	14000d15 	stw	r16,52(r2)
    af14:	18c00004 	addi	r3,r3,0
    af18:	18000326 	beq	r3,zero,af28 <__register_exitproc+0x60>
    af1c:	00c00034 	movhi	r3,0
    af20:	18c00017 	ldw	r3,0(r3)
    af24:	10c03015 	stw	r3,192(r2)
    af28:	84400117 	ldw	r17,4(r16)
    af2c:	88800810 	cmplti	r2,r17,32
    af30:	10000a1e 	bne	r2,zero,af5c <__register_exitproc+0x94>
    af34:	00bfffc4 	movi	r2,-1
    af38:	dfc00617 	ldw	ra,24(sp)
    af3c:	dd400517 	ldw	r21,20(sp)
    af40:	dd000417 	ldw	r20,16(sp)
    af44:	dcc00317 	ldw	r19,12(sp)
    af48:	dc800217 	ldw	r18,8(sp)
    af4c:	dc400117 	ldw	r17,4(sp)
    af50:	dc000017 	ldw	r16,0(sp)
    af54:	dec00704 	addi	sp,sp,28
    af58:	f800283a 	ret
    af5c:	90001926 	beq	r18,zero,afc4 <__register_exitproc+0xfc>
    af60:	80802217 	ldw	r2,136(r16)
    af64:	1000091e 	bne	r2,zero,af8c <__register_exitproc+0xc4>
    af68:	00800034 	movhi	r2,0
    af6c:	10800004 	addi	r2,r2,0
    af70:	103ff026 	beq	r2,zero,af34 <__register_exitproc+0x6c>
    af74:	01004204 	movi	r4,264
    af78:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    af7c:	103fed26 	beq	r2,zero,af34 <__register_exitproc+0x6c>
    af80:	10004015 	stw	zero,256(r2)
    af84:	10004115 	stw	zero,260(r2)
    af88:	80802215 	stw	r2,136(r16)
    af8c:	880890ba 	slli	r4,r17,2
    af90:	00c00044 	movi	r3,1
    af94:	1c46983a 	sll	r3,r3,r17
    af98:	1109883a 	add	r4,r2,r4
    af9c:	25400015 	stw	r21,0(r4)
    afa0:	11404017 	ldw	r5,256(r2)
    afa4:	94800098 	cmpnei	r18,r18,2
    afa8:	28cab03a 	or	r5,r5,r3
    afac:	11404015 	stw	r5,256(r2)
    afb0:	25002015 	stw	r20,128(r4)
    afb4:	9000031e 	bne	r18,zero,afc4 <__register_exitproc+0xfc>
    afb8:	11004117 	ldw	r4,260(r2)
    afbc:	20c6b03a 	or	r3,r4,r3
    afc0:	10c04115 	stw	r3,260(r2)
    afc4:	88800044 	addi	r2,r17,1
    afc8:	8c400084 	addi	r17,r17,2
    afcc:	882290ba 	slli	r17,r17,2
    afd0:	80800115 	stw	r2,4(r16)
    afd4:	0005883a 	mov	r2,zero
    afd8:	8461883a 	add	r16,r16,r17
    afdc:	84c00015 	stw	r19,0(r16)
    afe0:	003fd506 	br	af38 <__register_exitproc+0x70>

0000afe4 <__call_exitprocs>:
    afe4:	defff704 	addi	sp,sp,-36
    afe8:	00800074 	movhi	r2,1
    afec:	dd400515 	stw	r21,20(sp)
    aff0:	156d4d17 	ldw	r21,-19148(r2)
    aff4:	dd800615 	stw	r22,24(sp)
    aff8:	dd000415 	stw	r20,16(sp)
    affc:	dcc00315 	stw	r19,12(sp)
    b000:	dfc00815 	stw	ra,32(sp)
    b004:	ddc00715 	stw	r23,28(sp)
    b008:	dc800215 	stw	r18,8(sp)
    b00c:	dc400115 	stw	r17,4(sp)
    b010:	dc000015 	stw	r16,0(sp)
    b014:	2029883a 	mov	r20,r4
    b018:	2827883a 	mov	r19,r5
    b01c:	05800044 	movi	r22,1
    b020:	ac400d17 	ldw	r17,52(r21)
    b024:	88000426 	beq	r17,zero,b038 <__call_exitprocs+0x54>
    b028:	8c802217 	ldw	r18,136(r17)
    b02c:	8c000117 	ldw	r16,4(r17)
    b030:	843fffc4 	addi	r16,r16,-1
    b034:	80000b0e 	bge	r16,zero,b064 <__call_exitprocs+0x80>
    b038:	dfc00817 	ldw	ra,32(sp)
    b03c:	ddc00717 	ldw	r23,28(sp)
    b040:	dd800617 	ldw	r22,24(sp)
    b044:	dd400517 	ldw	r21,20(sp)
    b048:	dd000417 	ldw	r20,16(sp)
    b04c:	dcc00317 	ldw	r19,12(sp)
    b050:	dc800217 	ldw	r18,8(sp)
    b054:	dc400117 	ldw	r17,4(sp)
    b058:	dc000017 	ldw	r16,0(sp)
    b05c:	dec00904 	addi	sp,sp,36
    b060:	f800283a 	ret
    b064:	98000526 	beq	r19,zero,b07c <__call_exitprocs+0x98>
    b068:	903ff126 	beq	r18,zero,b030 <__call_exitprocs+0x4c>
    b06c:	800490ba 	slli	r2,r16,2
    b070:	9085883a 	add	r2,r18,r2
    b074:	10802017 	ldw	r2,128(r2)
    b078:	14ffed1e 	bne	r2,r19,b030 <__call_exitprocs+0x4c>
    b07c:	800490ba 	slli	r2,r16,2
    b080:	89000117 	ldw	r4,4(r17)
    b084:	888b883a 	add	r5,r17,r2
    b088:	213fffc4 	addi	r4,r4,-1
    b08c:	28c00217 	ldw	r3,8(r5)
    b090:	24000e1e 	bne	r4,r16,b0cc <__call_exitprocs+0xe8>
    b094:	8c000115 	stw	r16,4(r17)
    b098:	183fe526 	beq	r3,zero,b030 <__call_exitprocs+0x4c>
    b09c:	8dc00117 	ldw	r23,4(r17)
    b0a0:	90000426 	beq	r18,zero,b0b4 <__call_exitprocs+0xd0>
    b0a4:	b408983a 	sll	r4,r22,r16
    b0a8:	91404017 	ldw	r5,256(r18)
    b0ac:	214a703a 	and	r5,r4,r5
    b0b0:	2800081e 	bne	r5,zero,b0d4 <__call_exitprocs+0xf0>
    b0b4:	183ee83a 	callr	r3
    b0b8:	88c00117 	ldw	r3,4(r17)
    b0bc:	a8800d17 	ldw	r2,52(r21)
    b0c0:	1dffd71e 	bne	r3,r23,b020 <__call_exitprocs+0x3c>
    b0c4:	88bfda26 	beq	r17,r2,b030 <__call_exitprocs+0x4c>
    b0c8:	003fd506 	br	b020 <__call_exitprocs+0x3c>
    b0cc:	28000215 	stw	zero,8(r5)
    b0d0:	003ff106 	br	b098 <__call_exitprocs+0xb4>
    b0d4:	91404117 	ldw	r5,260(r18)
    b0d8:	9085883a 	add	r2,r18,r2
    b0dc:	2148703a 	and	r4,r4,r5
    b0e0:	2000041e 	bne	r4,zero,b0f4 <__call_exitprocs+0x110>
    b0e4:	11400017 	ldw	r5,0(r2)
    b0e8:	a009883a 	mov	r4,r20
    b0ec:	183ee83a 	callr	r3
    b0f0:	003ff106 	br	b0b8 <__call_exitprocs+0xd4>
    b0f4:	11000017 	ldw	r4,0(r2)
    b0f8:	183ee83a 	callr	r3
    b0fc:	003fee06 	br	b0b8 <__call_exitprocs+0xd4>

0000b100 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b100:	defffd04 	addi	sp,sp,-12
    b104:	df000215 	stw	fp,8(sp)
    b108:	df000204 	addi	fp,sp,8
    b10c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b110:	0001883a 	nop
    b114:	e0bffe17 	ldw	r2,-8(fp)
    b118:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    b11c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b120:	10000226 	beq	r2,zero,b12c <_exit+0x2c>
    ALT_SIM_FAIL();
    b124:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    b128:	00000106 	br	b130 <_exit+0x30>
    ALT_SIM_PASS();
    b12c:	002af0b0 	cmpltui	zero,zero,43970
}
    b130:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b134:	003fff06 	br	b134 <_exit+0x34>
